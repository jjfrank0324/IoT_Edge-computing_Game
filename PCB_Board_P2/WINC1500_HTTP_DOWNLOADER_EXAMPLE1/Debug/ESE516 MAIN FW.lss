
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019184  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002ac  20000000  0002b184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000539c  200002b0  0002b440  000202b0  2**4
                  ALLOC
  3 .stack        00002004  2000564c  000307dc  000202b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0011ae8e  00000000  00000000  0002032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000137d1  00000000  00000000  0013b1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00039d8f  00000000  00000000  0014e98c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002d08  00000000  00000000  0018871b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003af0  00000000  00000000  0018b423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029e2e  00000000  00000000  0018ef13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00056858  00000000  00000000  001b8d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c12bb  00000000  00000000  0020f599  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00009328  00000000  00000000  002d0854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	50 76 00 20 51 f9 01 00 35 f9 01 00 35 f9 01 00     Pv. Q...5...5...
	...
   1202c:	25 66 01 00 00 00 00 00 00 00 00 00 01 67 01 00     %f...........g..
   1203c:	45 67 01 00 35 f9 01 00 35 f9 01 00 35 f9 01 00     Eg..5...5...5...
   1204c:	2d da 01 00 ad d6 01 00 35 f9 01 00 f5 25 01 00     -.......5....%..
   1205c:	35 f9 01 00 a9 26 01 00 55 de 01 00 65 de 01 00     5....&..U...e...
   1206c:	75 de 01 00 85 de 01 00 95 de 01 00 a5 de 01 00     u...............
   1207c:	05 f9 01 00 15 f9 01 00 25 f9 01 00 1d 51 01 00     ........%....Q..
   1208c:	2d 51 01 00 3d 51 01 00 00 00 00 00 00 00 00 00     -Q..=Q..........
   1209c:	35 f9 01 00 35 f9 01 00 4d 25 01 00 35 f9 01 00     5...5...M%..5...
   120ac:	35 f9 01 00 00 00 00 00                             5.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	0002b184 	.word	0x0002b184

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	0002b184 	.word	0x0002b184
   1210c:	0002b184 	.word	0x0002b184
   12110:	00000000 	.word	0x00000000

00012114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   12114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   12116:	2200      	movs	r2, #0
   12118:	2300      	movs	r3, #0
   1211a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1211c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1211e:	2100      	movs	r1, #0
   12120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   12122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   12124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
   12126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
   12128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1212a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1212c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1212e:	24c0      	movs	r4, #192	; 0xc0
   12130:	0164      	lsls	r4, r4, #5
   12132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   12134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   12136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
   12138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
   1213a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
   1213c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1213e:	242a      	movs	r4, #42	; 0x2a
   12140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
   12142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
   12144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
   12146:	3c06      	subs	r4, #6
   12148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1214a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1214c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
   1214e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
   12150:	232b      	movs	r3, #43	; 0x2b
   12152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
   12154:	3301      	adds	r3, #1
   12156:	54c1      	strb	r1, [r0, r3]
}
   12158:	bd10      	pop	{r4, pc}
	...

0001215c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1215c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1215e:	46d6      	mov	lr, sl
   12160:	464f      	mov	r7, r9
   12162:	4646      	mov	r6, r8
   12164:	b5c0      	push	{r6, r7, lr}
   12166:	b096      	sub	sp, #88	; 0x58
   12168:	0007      	movs	r7, r0
   1216a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1216c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1216e:	4acb      	ldr	r2, [pc, #812]	; (1249c <adc_init+0x340>)
   12170:	6a10      	ldr	r0, [r2, #32]
   12172:	2380      	movs	r3, #128	; 0x80
   12174:	025b      	lsls	r3, r3, #9
   12176:	4303      	orrs	r3, r0
   12178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1217a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1217c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1217e:	07db      	lsls	r3, r3, #31
   12180:	d505      	bpl.n	1218e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
   12182:	b016      	add	sp, #88	; 0x58
   12184:	bc1c      	pop	{r2, r3, r4}
   12186:	4690      	mov	r8, r2
   12188:	4699      	mov	r9, r3
   1218a:	46a2      	mov	sl, r4
   1218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1218e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
   12190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   12192:	079b      	lsls	r3, r3, #30
   12194:	d4f5      	bmi.n	12182 <adc_init+0x26>
	module_inst->reference = config->reference;
   12196:	7873      	ldrb	r3, [r6, #1]
   12198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1219a:	2b00      	cmp	r3, #0
   1219c:	d104      	bne.n	121a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1219e:	4ac0      	ldr	r2, [pc, #768]	; (124a0 <adc_init+0x344>)
   121a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
   121a2:	2104      	movs	r1, #4
   121a4:	430b      	orrs	r3, r1
   121a6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
   121a8:	683b      	ldr	r3, [r7, #0]
   121aa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
   121ac:	7833      	ldrb	r3, [r6, #0]
   121ae:	466a      	mov	r2, sp
   121b0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   121b2:	4669      	mov	r1, sp
   121b4:	201e      	movs	r0, #30
   121b6:	4bbb      	ldr	r3, [pc, #748]	; (124a4 <adc_init+0x348>)
   121b8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   121ba:	201e      	movs	r0, #30
   121bc:	4bba      	ldr	r3, [pc, #744]	; (124a8 <adc_init+0x34c>)
   121be:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
   121c0:	232c      	movs	r3, #44	; 0x2c
   121c2:	5cf2      	ldrb	r2, [r6, r3]
   121c4:	2a00      	cmp	r2, #0
   121c6:	d054      	beq.n	12272 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
   121c8:	3b01      	subs	r3, #1
   121ca:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
   121cc:	7b33      	ldrb	r3, [r6, #12]
   121ce:	18eb      	adds	r3, r5, r3
   121d0:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
   121d2:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
   121d4:	b2c9      	uxtb	r1, r1
   121d6:	428b      	cmp	r3, r1
   121d8:	d221      	bcs.n	1221e <adc_init+0xc2>
   121da:	1952      	adds	r2, r2, r5
   121dc:	b2d3      	uxtb	r3, r2
   121de:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
   121e0:	4bb2      	ldr	r3, [pc, #712]	; (124ac <adc_init+0x350>)
   121e2:	469a      	mov	sl, r3
   121e4:	e003      	b.n	121ee <adc_init+0x92>
			offset++;
   121e6:	3501      	adds	r5, #1
   121e8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
   121ea:	45a9      	cmp	r9, r5
   121ec:	d017      	beq.n	1221e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   121ee:	240f      	movs	r4, #15
   121f0:	402c      	ands	r4, r5
   121f2:	7b33      	ldrb	r3, [r6, #12]
   121f4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
   121f6:	2250      	movs	r2, #80	; 0x50
   121f8:	49ad      	ldr	r1, [pc, #692]	; (124b0 <adc_init+0x354>)
   121fa:	a802      	add	r0, sp, #8
   121fc:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
   121fe:	2c13      	cmp	r4, #19
   12200:	d8f1      	bhi.n	121e6 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   12202:	00a4      	lsls	r4, r4, #2
   12204:	ab02      	add	r3, sp, #8
   12206:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12208:	a901      	add	r1, sp, #4
   1220a:	2300      	movs	r3, #0
   1220c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
   1220e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   12210:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   12212:	3301      	adds	r3, #1
   12214:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   12216:	b2c0      	uxtb	r0, r0
   12218:	4ba6      	ldr	r3, [pc, #664]	; (124b4 <adc_init+0x358>)
   1221a:	4798      	blx	r3
   1221c:	e7e3      	b.n	121e6 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
   1221e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
   12220:	2250      	movs	r2, #80	; 0x50
   12222:	49a3      	ldr	r1, [pc, #652]	; (124b0 <adc_init+0x354>)
   12224:	a802      	add	r0, sp, #8
   12226:	4ba1      	ldr	r3, [pc, #644]	; (124ac <adc_init+0x350>)
   12228:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
   1222a:	2c13      	cmp	r4, #19
   1222c:	d913      	bls.n	12256 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1222e:	7d73      	ldrb	r3, [r6, #21]
   12230:	009b      	lsls	r3, r3, #2
   12232:	b2db      	uxtb	r3, r3
   12234:	4642      	mov	r2, r8
   12236:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12238:	7db3      	ldrb	r3, [r6, #22]
   1223a:	01db      	lsls	r3, r3, #7
   1223c:	7872      	ldrb	r2, [r6, #1]
   1223e:	4313      	orrs	r3, r2
   12240:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
   12242:	4642      	mov	r2, r8
   12244:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
   12246:	7933      	ldrb	r3, [r6, #4]
   12248:	2b34      	cmp	r3, #52	; 0x34
   1224a:	d900      	bls.n	1224e <adc_init+0xf2>
   1224c:	e178      	b.n	12540 <adc_init+0x3e4>
   1224e:	009b      	lsls	r3, r3, #2
   12250:	4a99      	ldr	r2, [pc, #612]	; (124b8 <adc_init+0x35c>)
   12252:	58d3      	ldr	r3, [r2, r3]
   12254:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   12256:	00a4      	lsls	r4, r4, #2
   12258:	ab02      	add	r3, sp, #8
   1225a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1225c:	a901      	add	r1, sp, #4
   1225e:	2300      	movs	r3, #0
   12260:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   12262:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   12264:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   12266:	3301      	adds	r3, #1
   12268:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   1226a:	b2c0      	uxtb	r0, r0
   1226c:	4b91      	ldr	r3, [pc, #580]	; (124b4 <adc_init+0x358>)
   1226e:	4798      	blx	r3
   12270:	e7dd      	b.n	1222e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
   12272:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
   12274:	2250      	movs	r2, #80	; 0x50
   12276:	498e      	ldr	r1, [pc, #568]	; (124b0 <adc_init+0x354>)
   12278:	a802      	add	r0, sp, #8
   1227a:	4b8c      	ldr	r3, [pc, #560]	; (124ac <adc_init+0x350>)
   1227c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
   1227e:	2c13      	cmp	r4, #19
   12280:	d915      	bls.n	122ae <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
   12282:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
   12284:	2250      	movs	r2, #80	; 0x50
   12286:	498a      	ldr	r1, [pc, #552]	; (124b0 <adc_init+0x354>)
   12288:	a802      	add	r0, sp, #8
   1228a:	4b88      	ldr	r3, [pc, #544]	; (124ac <adc_init+0x350>)
   1228c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
   1228e:	2c13      	cmp	r4, #19
   12290:	d8cd      	bhi.n	1222e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   12292:	00a4      	lsls	r4, r4, #2
   12294:	ab02      	add	r3, sp, #8
   12296:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12298:	a901      	add	r1, sp, #4
   1229a:	2300      	movs	r3, #0
   1229c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   1229e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   122a2:	3301      	adds	r3, #1
   122a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   122a6:	b2c0      	uxtb	r0, r0
   122a8:	4b82      	ldr	r3, [pc, #520]	; (124b4 <adc_init+0x358>)
   122aa:	4798      	blx	r3
   122ac:	e7bf      	b.n	1222e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   122ae:	00a4      	lsls	r4, r4, #2
   122b0:	ab02      	add	r3, sp, #8
   122b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   122b4:	a901      	add	r1, sp, #4
   122b6:	2300      	movs	r3, #0
   122b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   122ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   122be:	3301      	adds	r3, #1
   122c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   122c2:	b2c0      	uxtb	r0, r0
   122c4:	4b7b      	ldr	r3, [pc, #492]	; (124b4 <adc_init+0x358>)
   122c6:	4798      	blx	r3
   122c8:	e7db      	b.n	12282 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   122ca:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
   122cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
   122ce:	2102      	movs	r1, #2
   122d0:	e01a      	b.n	12308 <adc_init+0x1ac>
		adjres = config->divide_result;
   122d2:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
   122d4:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
   122d6:	2410      	movs	r4, #16
   122d8:	e016      	b.n	12308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   122da:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
   122dc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
   122de:	2101      	movs	r1, #1
   122e0:	e012      	b.n	12308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   122e2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
   122e4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   122e6:	2100      	movs	r1, #0
   122e8:	e00e      	b.n	12308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   122ea:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
   122ec:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
   122ee:	2100      	movs	r1, #0
   122f0:	e00a      	b.n	12308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   122f2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
   122f4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
   122f6:	2100      	movs	r1, #0
   122f8:	e006      	b.n	12308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   122fa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
   122fc:	2400      	movs	r4, #0
	uint8_t adjres = 0;
   122fe:	2100      	movs	r1, #0
   12300:	e002      	b.n	12308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   12302:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
   12304:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
   12306:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   12308:	0109      	lsls	r1, r1, #4
   1230a:	2270      	movs	r2, #112	; 0x70
   1230c:	400a      	ands	r2, r1
   1230e:	4313      	orrs	r3, r2
   12310:	4642      	mov	r2, r8
   12312:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
   12314:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
   12316:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
   12318:	2b3f      	cmp	r3, #63	; 0x3f
   1231a:	d900      	bls.n	1231e <adc_init+0x1c2>
   1231c:	e731      	b.n	12182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
   1231e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12320:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12322:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   12324:	b25b      	sxtb	r3, r3
   12326:	2b00      	cmp	r3, #0
   12328:	dbfb      	blt.n	12322 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1232a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1232c:	8872      	ldrh	r2, [r6, #2]
   1232e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   12330:	2224      	movs	r2, #36	; 0x24
   12332:	5cb2      	ldrb	r2, [r6, r2]
   12334:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   12336:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12338:	7d32      	ldrb	r2, [r6, #20]
   1233a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1233c:	4313      	orrs	r3, r2
   1233e:	7cb2      	ldrb	r2, [r6, #18]
   12340:	0052      	lsls	r2, r2, #1
   12342:	4313      	orrs	r3, r2
   12344:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
   12346:	4642      	mov	r2, r8
   12348:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1234a:	7e33      	ldrb	r3, [r6, #24]
   1234c:	2b00      	cmp	r3, #0
   1234e:	d020      	beq.n	12392 <adc_init+0x236>
		switch (resolution) {
   12350:	2c10      	cmp	r4, #16
   12352:	d100      	bne.n	12356 <adc_init+0x1fa>
   12354:	e0d6      	b.n	12504 <adc_init+0x3a8>
   12356:	d800      	bhi.n	1235a <adc_init+0x1fe>
   12358:	e080      	b.n	1245c <adc_init+0x300>
   1235a:	2c20      	cmp	r4, #32
   1235c:	d100      	bne.n	12360 <adc_init+0x204>
   1235e:	e0b3      	b.n	124c8 <adc_init+0x36c>
   12360:	2c30      	cmp	r4, #48	; 0x30
   12362:	d116      	bne.n	12392 <adc_init+0x236>
			if (config->differential_mode &&
   12364:	7cf2      	ldrb	r2, [r6, #19]
   12366:	2a00      	cmp	r2, #0
   12368:	d00a      	beq.n	12380 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
   1236a:	69f2      	ldr	r2, [r6, #28]
   1236c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
   1236e:	2017      	movs	r0, #23
			if (config->differential_mode &&
   12370:	2aff      	cmp	r2, #255	; 0xff
   12372:	d900      	bls.n	12376 <adc_init+0x21a>
   12374:	e705      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
   12376:	6a32      	ldr	r2, [r6, #32]
   12378:	3280      	adds	r2, #128	; 0x80
   1237a:	2aff      	cmp	r2, #255	; 0xff
   1237c:	d900      	bls.n	12380 <adc_init+0x224>
   1237e:	e700      	b.n	12182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
   12380:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
   12382:	69f2      	ldr	r2, [r6, #28]
   12384:	2aff      	cmp	r2, #255	; 0xff
   12386:	dd00      	ble.n	1238a <adc_init+0x22e>
   12388:	e6fb      	b.n	12182 <adc_init+0x26>
   1238a:	6a32      	ldr	r2, [r6, #32]
   1238c:	2aff      	cmp	r2, #255	; 0xff
   1238e:	dd00      	ble.n	12392 <adc_init+0x236>
   12390:	e6f7      	b.n	12182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
   12392:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12394:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
   12396:	b252      	sxtb	r2, r2
   12398:	2a00      	cmp	r2, #0
   1239a:	dbfb      	blt.n	12394 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
   1239c:	4642      	mov	r2, r8
   1239e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
   123a0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   123a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   123a4:	b25b      	sxtb	r3, r3
   123a6:	2b00      	cmp	r3, #0
   123a8:	dbfb      	blt.n	123a2 <adc_init+0x246>
	adc_module->WINLT.reg =
   123aa:	8bb3      	ldrh	r3, [r6, #28]
   123ac:	4642      	mov	r2, r8
   123ae:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
   123b0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   123b2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   123b4:	b25b      	sxtb	r3, r3
   123b6:	2b00      	cmp	r3, #0
   123b8:	dbfb      	blt.n	123b2 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
   123ba:	8c33      	ldrh	r3, [r6, #32]
   123bc:	4642      	mov	r2, r8
   123be:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   123c0:	232c      	movs	r3, #44	; 0x2c
   123c2:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
   123c4:	2b00      	cmp	r3, #0
   123c6:	d005      	beq.n	123d4 <adc_init+0x278>
		inputs_to_scan--;
   123c8:	3b01      	subs	r3, #1
   123ca:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
   123cc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   123ce:	2b0f      	cmp	r3, #15
   123d0:	d900      	bls.n	123d4 <adc_init+0x278>
   123d2:	e6d6      	b.n	12182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   123d4:	222b      	movs	r2, #43	; 0x2b
   123d6:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
   123d8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   123da:	290f      	cmp	r1, #15
   123dc:	d900      	bls.n	123e0 <adc_init+0x284>
   123de:	e6d0      	b.n	12182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
   123e0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   123e2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
   123e4:	b252      	sxtb	r2, r2
   123e6:	2a00      	cmp	r2, #0
   123e8:	dbfb      	blt.n	123e2 <adc_init+0x286>
			config->negative_input |
   123ea:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
   123ec:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
   123ee:	4302      	orrs	r2, r0
   123f0:	68b0      	ldr	r0, [r6, #8]
   123f2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
   123f4:	0509      	lsls	r1, r1, #20
			config->negative_input |
   123f6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   123f8:	041b      	lsls	r3, r3, #16
			config->negative_input |
   123fa:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
   123fc:	4642      	mov	r2, r8
   123fe:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
   12400:	232a      	movs	r3, #42	; 0x2a
   12402:	5cf3      	ldrb	r3, [r6, r3]
   12404:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
   12406:	230f      	movs	r3, #15
   12408:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
   1240a:	3315      	adds	r3, #21
   1240c:	5cf3      	ldrb	r3, [r6, r3]
   1240e:	2b00      	cmp	r3, #0
   12410:	d012      	beq.n	12438 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   12412:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
   12414:	4a29      	ldr	r2, [pc, #164]	; (124bc <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
   12416:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   12418:	4293      	cmp	r3, r2
   1241a:	d900      	bls.n	1241e <adc_init+0x2c2>
   1241c:	e6b1      	b.n	12182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1241e:	4642      	mov	r2, r8
   12420:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
   12422:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   12424:	2380      	movs	r3, #128	; 0x80
   12426:	011b      	lsls	r3, r3, #4
   12428:	18d3      	adds	r3, r2, r3
   1242a:	4924      	ldr	r1, [pc, #144]	; (124bc <adc_init+0x360>)
   1242c:	b29b      	uxth	r3, r3
   1242e:	428b      	cmp	r3, r1
   12430:	d900      	bls.n	12434 <adc_init+0x2d8>
   12432:	e6a6      	b.n	12182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   12434:	4643      	mov	r3, r8
   12436:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
   12438:	4b21      	ldr	r3, [pc, #132]	; (124c0 <adc_init+0x364>)
   1243a:	681b      	ldr	r3, [r3, #0]
   1243c:	015b      	lsls	r3, r3, #5
   1243e:	22e0      	movs	r2, #224	; 0xe0
   12440:	00d2      	lsls	r2, r2, #3
   12442:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
   12444:	4a1f      	ldr	r2, [pc, #124]	; (124c4 <adc_init+0x368>)
   12446:	6851      	ldr	r1, [r2, #4]
   12448:	0149      	lsls	r1, r1, #5
   1244a:	6812      	ldr	r2, [r2, #0]
   1244c:	0ed2      	lsrs	r2, r2, #27
   1244e:	430a      	orrs	r2, r1
   12450:	b2d2      	uxtb	r2, r2
			) |
   12452:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
   12454:	4642      	mov	r2, r8
   12456:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
   12458:	2000      	movs	r0, #0
   1245a:	e692      	b.n	12182 <adc_init+0x26>
		switch (resolution) {
   1245c:	2c00      	cmp	r4, #0
   1245e:	d198      	bne.n	12392 <adc_init+0x236>
			if (config->differential_mode &&
   12460:	7cf2      	ldrb	r2, [r6, #19]
   12462:	2a00      	cmp	r2, #0
   12464:	d00f      	beq.n	12486 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
   12466:	69f2      	ldr	r2, [r6, #28]
   12468:	2180      	movs	r1, #128	; 0x80
   1246a:	0109      	lsls	r1, r1, #4
   1246c:	468c      	mov	ip, r1
   1246e:	4462      	add	r2, ip
			if (config->differential_mode &&
   12470:	4912      	ldr	r1, [pc, #72]	; (124bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
   12472:	2017      	movs	r0, #23
			if (config->differential_mode &&
   12474:	428a      	cmp	r2, r1
   12476:	d900      	bls.n	1247a <adc_init+0x31e>
   12478:	e683      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
   1247a:	6a32      	ldr	r2, [r6, #32]
   1247c:	4462      	add	r2, ip
   1247e:	490f      	ldr	r1, [pc, #60]	; (124bc <adc_init+0x360>)
   12480:	428a      	cmp	r2, r1
   12482:	d900      	bls.n	12486 <adc_init+0x32a>
   12484:	e67d      	b.n	12182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
   12486:	4a0d      	ldr	r2, [pc, #52]	; (124bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
   12488:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
   1248a:	69f1      	ldr	r1, [r6, #28]
   1248c:	4291      	cmp	r1, r2
   1248e:	dd00      	ble.n	12492 <adc_init+0x336>
   12490:	e677      	b.n	12182 <adc_init+0x26>
   12492:	6a31      	ldr	r1, [r6, #32]
   12494:	4291      	cmp	r1, r2
   12496:	dd00      	ble.n	1249a <adc_init+0x33e>
   12498:	e673      	b.n	12182 <adc_init+0x26>
   1249a:	e77a      	b.n	12392 <adc_init+0x236>
   1249c:	40000400 	.word	0x40000400
   124a0:	40000800 	.word	0x40000800
   124a4:	0001f14d 	.word	0x0001f14d
   124a8:	0001f0c1 	.word	0x0001f0c1
   124ac:	0002621d 	.word	0x0002621d
   124b0:	00027760 	.word	0x00027760
   124b4:	0001f275 	.word	0x0001f275
   124b8:	0002768c 	.word	0x0002768c
   124bc:	00000fff 	.word	0x00000fff
   124c0:	00806024 	.word	0x00806024
   124c4:	00806020 	.word	0x00806020
			if (config->differential_mode &&
   124c8:	7cf2      	ldrb	r2, [r6, #19]
   124ca:	2a00      	cmp	r2, #0
   124cc:	d00f      	beq.n	124ee <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
   124ce:	69f2      	ldr	r2, [r6, #28]
   124d0:	2180      	movs	r1, #128	; 0x80
   124d2:	0089      	lsls	r1, r1, #2
   124d4:	468c      	mov	ip, r1
   124d6:	4462      	add	r2, ip
			if (config->differential_mode &&
   124d8:	491a      	ldr	r1, [pc, #104]	; (12544 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
   124da:	2017      	movs	r0, #23
			if (config->differential_mode &&
   124dc:	428a      	cmp	r2, r1
   124de:	d900      	bls.n	124e2 <adc_init+0x386>
   124e0:	e64f      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
   124e2:	6a32      	ldr	r2, [r6, #32]
   124e4:	4462      	add	r2, ip
   124e6:	4917      	ldr	r1, [pc, #92]	; (12544 <adc_init+0x3e8>)
   124e8:	428a      	cmp	r2, r1
   124ea:	d900      	bls.n	124ee <adc_init+0x392>
   124ec:	e649      	b.n	12182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
   124ee:	4a15      	ldr	r2, [pc, #84]	; (12544 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
   124f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
   124f2:	69f1      	ldr	r1, [r6, #28]
   124f4:	4291      	cmp	r1, r2
   124f6:	dd00      	ble.n	124fa <adc_init+0x39e>
   124f8:	e643      	b.n	12182 <adc_init+0x26>
   124fa:	6a31      	ldr	r1, [r6, #32]
   124fc:	4291      	cmp	r1, r2
   124fe:	dd00      	ble.n	12502 <adc_init+0x3a6>
   12500:	e63f      	b.n	12182 <adc_init+0x26>
   12502:	e746      	b.n	12392 <adc_init+0x236>
			if (config->differential_mode &&
   12504:	7cf2      	ldrb	r2, [r6, #19]
   12506:	2a00      	cmp	r2, #0
   12508:	d00f      	beq.n	1252a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
   1250a:	69f2      	ldr	r2, [r6, #28]
   1250c:	2180      	movs	r1, #128	; 0x80
   1250e:	0209      	lsls	r1, r1, #8
   12510:	468c      	mov	ip, r1
   12512:	4462      	add	r2, ip
			if (config->differential_mode &&
   12514:	490c      	ldr	r1, [pc, #48]	; (12548 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
   12516:	2017      	movs	r0, #23
			if (config->differential_mode &&
   12518:	428a      	cmp	r2, r1
   1251a:	d900      	bls.n	1251e <adc_init+0x3c2>
   1251c:	e631      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
   1251e:	6a32      	ldr	r2, [r6, #32]
   12520:	4462      	add	r2, ip
   12522:	4909      	ldr	r1, [pc, #36]	; (12548 <adc_init+0x3ec>)
   12524:	428a      	cmp	r2, r1
   12526:	d900      	bls.n	1252a <adc_init+0x3ce>
   12528:	e62b      	b.n	12182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
   1252a:	4a07      	ldr	r2, [pc, #28]	; (12548 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
   1252c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
   1252e:	69f1      	ldr	r1, [r6, #28]
   12530:	4291      	cmp	r1, r2
   12532:	dd00      	ble.n	12536 <adc_init+0x3da>
   12534:	e625      	b.n	12182 <adc_init+0x26>
   12536:	6a31      	ldr	r1, [r6, #32]
   12538:	4291      	cmp	r1, r2
   1253a:	dd00      	ble.n	1253e <adc_init+0x3e2>
   1253c:	e621      	b.n	12182 <adc_init+0x26>
   1253e:	e728      	b.n	12392 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
   12540:	2017      	movs	r0, #23
   12542:	e61e      	b.n	12182 <adc_init+0x26>
   12544:	000003ff 	.word	0x000003ff
   12548:	0000ffff 	.word	0x0000ffff

0001254c <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1254c:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
   1254e:	4b27      	ldr	r3, [pc, #156]	; (125ec <DAC_Handler+0xa0>)
   12550:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
   12552:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12554:	79ab      	ldrb	r3, [r5, #6]
   12556:	07db      	lsls	r3, r3, #31
   12558:	d507      	bpl.n	1256a <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1255a:	2301      	movs	r3, #1
   1255c:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
   1255e:	0023      	movs	r3, r4
   12560:	3314      	adds	r3, #20
   12562:	d002      	beq.n	1256a <DAC_Handler+0x1e>
   12564:	7c63      	ldrb	r3, [r4, #17]
   12566:	2b00      	cmp	r3, #0
   12568:	d131      	bne.n	125ce <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1256a:	79ab      	ldrb	r3, [r5, #6]
   1256c:	079b      	lsls	r3, r3, #30
   1256e:	d538      	bpl.n	125e2 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12570:	2302      	movs	r3, #2
   12572:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
   12574:	89a3      	ldrh	r3, [r4, #12]
   12576:	b29b      	uxth	r3, r3
   12578:	2b00      	cmp	r3, #0
   1257a:	d02c      	beq.n	125d6 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
   1257c:	89e3      	ldrh	r3, [r4, #14]
   1257e:	b29b      	uxth	r3, r3
   12580:	1c5a      	adds	r2, r3, #1
   12582:	b292      	uxth	r2, r2
   12584:	81e2      	strh	r2, [r4, #14]
   12586:	005b      	lsls	r3, r3, #1
   12588:	68a2      	ldr	r2, [r4, #8]
   1258a:	4694      	mov	ip, r2
   1258c:	4463      	add	r3, ip
   1258e:	881b      	ldrh	r3, [r3, #0]
   12590:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
   12592:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
   12594:	89a3      	ldrh	r3, [r4, #12]
   12596:	3b01      	subs	r3, #1
   12598:	b29b      	uxth	r3, r3
   1259a:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
   1259c:	89a3      	ldrh	r3, [r4, #12]
   1259e:	b29b      	uxth	r3, r3
   125a0:	2b00      	cmp	r3, #0
   125a2:	d118      	bne.n	125d6 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
   125a4:	2200      	movs	r2, #0
   125a6:	3320      	adds	r3, #32
   125a8:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   125aa:	3b1e      	subs	r3, #30
   125ac:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   125ae:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   125b0:	2180      	movs	r1, #128	; 0x80
   125b2:	0489      	lsls	r1, r1, #18
   125b4:	337e      	adds	r3, #126	; 0x7e
   125b6:	4a0e      	ldr	r2, [pc, #56]	; (125f0 <DAC_Handler+0xa4>)
   125b8:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
   125ba:	0023      	movs	r3, r4
   125bc:	3314      	adds	r3, #20
   125be:	d010      	beq.n	125e2 <DAC_Handler+0x96>
   125c0:	7ca3      	ldrb	r3, [r4, #18]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d00a      	beq.n	125dc <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   125c6:	2000      	movs	r0, #0
   125c8:	69e3      	ldr	r3, [r4, #28]
   125ca:	4798      	blx	r3
   125cc:	e006      	b.n	125dc <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   125ce:	2000      	movs	r0, #0
   125d0:	69a3      	ldr	r3, [r4, #24]
   125d2:	4798      	blx	r3
   125d4:	e7c9      	b.n	1256a <DAC_Handler+0x1e>
		if ((module->callback) &&
   125d6:	0023      	movs	r3, r4
   125d8:	3314      	adds	r3, #20
   125da:	d002      	beq.n	125e2 <DAC_Handler+0x96>
   125dc:	7c23      	ldrb	r3, [r4, #16]
   125de:	2b00      	cmp	r3, #0
   125e0:	d100      	bne.n	125e4 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
   125e2:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   125e4:	6963      	ldr	r3, [r4, #20]
   125e6:	2000      	movs	r0, #0
   125e8:	4798      	blx	r3
}
   125ea:	e7fa      	b.n	125e2 <DAC_Handler+0x96>
   125ec:	20004164 	.word	0x20004164
   125f0:	e000e100 	.word	0xe000e100

000125f4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   125f4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
   125f6:	4b26      	ldr	r3, [pc, #152]	; (12690 <DMAC_Handler+0x9c>)
   125f8:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   125fa:	4926      	ldr	r1, [pc, #152]	; (12694 <DMAC_Handler+0xa0>)
   125fc:	8c0b      	ldrh	r3, [r1, #32]
   125fe:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12600:	4013      	ands	r3, r2
   12602:	009b      	lsls	r3, r3, #2
   12604:	4824      	ldr	r0, [pc, #144]	; (12698 <DMAC_Handler+0xa4>)
   12606:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12608:	7803      	ldrb	r3, [r0, #0]
   1260a:	401a      	ands	r2, r3
   1260c:	233f      	movs	r3, #63	; 0x3f
   1260e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
   12610:	330f      	adds	r3, #15
   12612:	5cca      	ldrb	r2, [r1, r3]
   12614:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12616:	7803      	ldrb	r3, [r0, #0]
   12618:	011b      	lsls	r3, r3, #4
   1261a:	4920      	ldr	r1, [pc, #128]	; (1269c <DMAC_Handler+0xa8>)
   1261c:	18c9      	adds	r1, r1, r3
   1261e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12620:	4c1f      	ldr	r4, [pc, #124]	; (126a0 <DMAC_Handler+0xac>)
   12622:	18e3      	adds	r3, r4, r3
   12624:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
   12626:	1acb      	subs	r3, r1, r3
   12628:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1262a:	07d3      	lsls	r3, r2, #31
   1262c:	d50f      	bpl.n	1264e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1262e:	2101      	movs	r1, #1
   12630:	234e      	movs	r3, #78	; 0x4e
   12632:	4a18      	ldr	r2, [pc, #96]	; (12694 <DMAC_Handler+0xa0>)
   12634:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12636:	3b3e      	subs	r3, #62	; 0x3e
   12638:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1263a:	7c03      	ldrb	r3, [r0, #16]
   1263c:	07db      	lsls	r3, r3, #31
   1263e:	d503      	bpl.n	12648 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12640:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12642:	2b00      	cmp	r3, #0
   12644:	d000      	beq.n	12648 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12646:	4798      	blx	r3
	cpu_irq_leave_critical();
   12648:	4b16      	ldr	r3, [pc, #88]	; (126a4 <DMAC_Handler+0xb0>)
   1264a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
   1264c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1264e:	0793      	lsls	r3, r2, #30
   12650:	d50d      	bpl.n	1266e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12652:	2102      	movs	r1, #2
   12654:	234e      	movs	r3, #78	; 0x4e
   12656:	4a0f      	ldr	r2, [pc, #60]	; (12694 <DMAC_Handler+0xa0>)
   12658:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
   1265a:	2300      	movs	r3, #0
   1265c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1265e:	7c03      	ldrb	r3, [r0, #16]
   12660:	079b      	lsls	r3, r3, #30
   12662:	d5f1      	bpl.n	12648 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12664:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12666:	2b00      	cmp	r3, #0
   12668:	d0ee      	beq.n	12648 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1266a:	4798      	blx	r3
   1266c:	e7ec      	b.n	12648 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1266e:	0753      	lsls	r3, r2, #29
   12670:	d5ea      	bpl.n	12648 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12672:	2104      	movs	r1, #4
   12674:	234e      	movs	r3, #78	; 0x4e
   12676:	4a07      	ldr	r2, [pc, #28]	; (12694 <DMAC_Handler+0xa0>)
   12678:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
   1267a:	3b48      	subs	r3, #72	; 0x48
   1267c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1267e:	7c03      	ldrb	r3, [r0, #16]
   12680:	075b      	lsls	r3, r3, #29
   12682:	d5e1      	bpl.n	12648 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12684:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12686:	2b00      	cmp	r3, #0
   12688:	d0de      	beq.n	12648 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1268a:	4798      	blx	r3
   1268c:	e7dc      	b.n	12648 <DMAC_Handler+0x54>
   1268e:	46c0      	nop			; (mov r8, r8)
   12690:	0001d599 	.word	0x0001d599
   12694:	41004800 	.word	0x41004800
   12698:	200002cc 	.word	0x200002cc
   1269c:	20004170 	.word	0x20004170
   126a0:	200002e0 	.word	0x200002e0
   126a4:	0001d5d9 	.word	0x0001d5d9

000126a8 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   126a8:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
   126aa:	4b0b      	ldr	r3, [pc, #44]	; (126d8 <EVSYS_Handler+0x30>)
   126ac:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   126ae:	490b      	ldr	r1, [pc, #44]	; (126dc <EVSYS_Handler+0x34>)
   126b0:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
   126b2:	6898      	ldr	r0, [r3, #8]
   126b4:	4302      	orrs	r2, r0
   126b6:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   126b8:	4b09      	ldr	r3, [pc, #36]	; (126e0 <EVSYS_Handler+0x38>)
   126ba:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   126bc:	2c00      	cmp	r4, #0
   126be:	d005      	beq.n	126cc <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
   126c0:	6820      	ldr	r0, [r4, #0]
   126c2:	6863      	ldr	r3, [r4, #4]
   126c4:	4798      	blx	r3
		current_hook = current_hook->next;
   126c6:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
   126c8:	2c00      	cmp	r4, #0
   126ca:	d1f9      	bne.n	126c0 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   126cc:	4b02      	ldr	r3, [pc, #8]	; (126d8 <EVSYS_Handler+0x30>)
   126ce:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
   126d0:	689a      	ldr	r2, [r3, #8]
   126d2:	438a      	bics	r2, r1
   126d4:	609a      	str	r2, [r3, #8]
}
   126d6:	bd10      	pop	{r4, pc}
   126d8:	20000000 	.word	0x20000000
   126dc:	42000400 	.word	0x42000400
   126e0:	0f0fffff 	.word	0x0f0fffff

000126e4 <_system_events_init>:
   126e4:	4a06      	ldr	r2, [pc, #24]	; (12700 <_system_events_init+0x1c>)
   126e6:	6a13      	ldr	r3, [r2, #32]
   126e8:	2102      	movs	r1, #2
   126ea:	430b      	orrs	r3, r1
   126ec:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   126ee:	2201      	movs	r2, #1
   126f0:	4b04      	ldr	r3, [pc, #16]	; (12704 <_system_events_init+0x20>)
   126f2:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   126f4:	0019      	movs	r1, r3
   126f6:	780b      	ldrb	r3, [r1, #0]
   126f8:	4213      	tst	r3, r2
   126fa:	d1fc      	bne.n	126f6 <_system_events_init+0x12>
	}
}
   126fc:	4770      	bx	lr
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	40000400 	.word	0x40000400
   12704:	42000400 	.word	0x42000400

00012708 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12708:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1270a:	2207      	movs	r2, #7
   1270c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1270e:	421a      	tst	r2, r3
   12710:	d1fc      	bne.n	1270c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
   12712:	4770      	bx	lr

00012714 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   12714:	b570      	push	{r4, r5, r6, lr}
   12716:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12718:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1271a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   1271c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
   1271e:	8b83      	ldrh	r3, [r0, #28]
   12720:	1aed      	subs	r5, r5, r3
   12722:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
   12724:	8b83      	ldrh	r3, [r0, #28]
   12726:	3b01      	subs	r3, #1
   12728:	b29b      	uxth	r3, r3
   1272a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
   1272c:	0113      	lsls	r3, r2, #4
   1272e:	d51d      	bpl.n	1276c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
   12730:	7ac3      	ldrb	r3, [r0, #11]
   12732:	2b00      	cmp	r3, #0
   12734:	d003      	beq.n	1273e <_i2c_master_read+0x2a>
   12736:	8b83      	ldrh	r3, [r0, #28]
   12738:	b29b      	uxth	r3, r3
   1273a:	2b01      	cmp	r3, #1
   1273c:	d010      	beq.n	12760 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
   1273e:	8ba3      	ldrh	r3, [r4, #28]
   12740:	b29b      	uxth	r3, r3
   12742:	2b00      	cmp	r3, #0
   12744:	d102      	bne.n	1274c <_i2c_master_read+0x38>
		if (module->send_stop) {
   12746:	7aa3      	ldrb	r3, [r4, #10]
   12748:	2b00      	cmp	r3, #0
   1274a:	d11c      	bne.n	12786 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1274c:	0020      	movs	r0, r4
   1274e:	4b12      	ldr	r3, [pc, #72]	; (12798 <_i2c_master_read+0x84>)
   12750:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12752:	6a23      	ldr	r3, [r4, #32]
   12754:	195d      	adds	r5, r3, r5
   12756:	2328      	movs	r3, #40	; 0x28
   12758:	5cf3      	ldrb	r3, [r6, r3]
   1275a:	b2db      	uxtb	r3, r3
   1275c:	702b      	strb	r3, [r5, #0]
}
   1275e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12760:	6872      	ldr	r2, [r6, #4]
   12762:	2380      	movs	r3, #128	; 0x80
   12764:	02db      	lsls	r3, r3, #11
   12766:	4313      	orrs	r3, r2
   12768:	6073      	str	r3, [r6, #4]
   1276a:	e7e8      	b.n	1273e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
   1276c:	7ac3      	ldrb	r3, [r0, #11]
   1276e:	2b00      	cmp	r3, #0
   12770:	d0e5      	beq.n	1273e <_i2c_master_read+0x2a>
   12772:	8b83      	ldrh	r3, [r0, #28]
   12774:	b29b      	uxth	r3, r3
   12776:	2b00      	cmp	r3, #0
   12778:	d1e1      	bne.n	1273e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1277a:	6872      	ldr	r2, [r6, #4]
   1277c:	2380      	movs	r3, #128	; 0x80
   1277e:	02db      	lsls	r3, r3, #11
   12780:	4313      	orrs	r3, r2
   12782:	6073      	str	r3, [r6, #4]
   12784:	e7db      	b.n	1273e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
   12786:	0020      	movs	r0, r4
   12788:	4b03      	ldr	r3, [pc, #12]	; (12798 <_i2c_master_read+0x84>)
   1278a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1278c:	6872      	ldr	r2, [r6, #4]
   1278e:	23c0      	movs	r3, #192	; 0xc0
   12790:	029b      	lsls	r3, r3, #10
   12792:	4313      	orrs	r3, r2
   12794:	6073      	str	r3, [r6, #4]
   12796:	e7d9      	b.n	1274c <_i2c_master_read+0x38>
   12798:	00012709 	.word	0x00012709

0001279c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   1279c:	b570      	push	{r4, r5, r6, lr}
   1279e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127a0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127a2:	8b6b      	ldrh	r3, [r5, #26]
   127a4:	075b      	lsls	r3, r3, #29
   127a6:	d503      	bpl.n	127b0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127a8:	221e      	movs	r2, #30
   127aa:	2325      	movs	r3, #37	; 0x25
   127ac:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
   127ae:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
   127b0:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
   127b2:	8b83      	ldrh	r3, [r0, #28]
   127b4:	1af6      	subs	r6, r6, r3
   127b6:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
   127b8:	8b83      	ldrh	r3, [r0, #28]
   127ba:	3b01      	subs	r3, #1
   127bc:	b29b      	uxth	r3, r3
   127be:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
   127c0:	4b04      	ldr	r3, [pc, #16]	; (127d4 <_i2c_master_write+0x38>)
   127c2:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   127c4:	6a23      	ldr	r3, [r4, #32]
   127c6:	199e      	adds	r6, r3, r6
   127c8:	7833      	ldrb	r3, [r6, #0]
   127ca:	b2db      	uxtb	r3, r3
   127cc:	2228      	movs	r2, #40	; 0x28
   127ce:	54ab      	strb	r3, [r5, r2]
   127d0:	e7ed      	b.n	127ae <_i2c_master_write+0x12>
   127d2:	46c0      	nop			; (mov r8, r8)
   127d4:	00012709 	.word	0x00012709

000127d8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   127d8:	b570      	push	{r4, r5, r6, lr}
   127da:	0005      	movs	r5, r0
   127dc:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127de:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   127e0:	7a4b      	ldrb	r3, [r1, #9]
   127e2:	2b00      	cmp	r3, #0
   127e4:	d11a      	bne.n	1281c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   127e6:	6873      	ldr	r3, [r6, #4]
   127e8:	4a13      	ldr	r2, [pc, #76]	; (12838 <_i2c_master_write_packet+0x60>)
   127ea:	4013      	ands	r3, r2
   127ec:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   127ee:	6863      	ldr	r3, [r4, #4]
   127f0:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
   127f2:	8863      	ldrh	r3, [r4, #2]
   127f4:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   127f6:	2200      	movs	r2, #0
   127f8:	2324      	movs	r3, #36	; 0x24
   127fa:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
   127fc:	3205      	adds	r2, #5
   127fe:	3301      	adds	r3, #1
   12800:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12802:	3b22      	subs	r3, #34	; 0x22
   12804:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12806:	7a23      	ldrb	r3, [r4, #8]
   12808:	2b00      	cmp	r3, #0
   1280a:	d10b      	bne.n	12824 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1280c:	8823      	ldrh	r3, [r4, #0]
   1280e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12810:	7a62      	ldrb	r2, [r4, #9]
   12812:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12814:	4313      	orrs	r3, r2
   12816:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
   12818:	2000      	movs	r0, #0
   1281a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1281c:	7a89      	ldrb	r1, [r1, #10]
   1281e:	4b07      	ldr	r3, [pc, #28]	; (1283c <_i2c_master_write_packet+0x64>)
   12820:	4798      	blx	r3
   12822:	e7e0      	b.n	127e6 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12824:	8823      	ldrh	r3, [r4, #0]
   12826:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12828:	7a62      	ldrb	r2, [r4, #9]
   1282a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1282c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1282e:	2280      	movs	r2, #128	; 0x80
   12830:	0212      	lsls	r2, r2, #8
   12832:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12834:	6273      	str	r3, [r6, #36]	; 0x24
   12836:	e7ef      	b.n	12818 <_i2c_master_write_packet+0x40>
   12838:	fffbffff 	.word	0xfffbffff
   1283c:	00015099 	.word	0x00015099

00012840 <_i2c_master_read_packet>:
{
   12840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12842:	0005      	movs	r5, r0
   12844:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12846:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
   12848:	684b      	ldr	r3, [r1, #4]
   1284a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
   1284c:	884b      	ldrh	r3, [r1, #2]
   1284e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12850:	2201      	movs	r2, #1
   12852:	2324      	movs	r3, #36	; 0x24
   12854:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
   12856:	3204      	adds	r2, #4
   12858:	3301      	adds	r3, #1
   1285a:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1285c:	6837      	ldr	r7, [r6, #0]
   1285e:	013f      	lsls	r7, r7, #4
   12860:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
   12862:	7a4b      	ldrb	r3, [r1, #9]
   12864:	2b00      	cmp	r3, #0
   12866:	d117      	bne.n	12898 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12868:	2f00      	cmp	r7, #0
   1286a:	d002      	beq.n	12872 <_i2c_master_read_packet+0x32>
   1286c:	8863      	ldrh	r3, [r4, #2]
   1286e:	2b01      	cmp	r3, #1
   12870:	d016      	beq.n	128a0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12872:	6873      	ldr	r3, [r6, #4]
   12874:	4a20      	ldr	r2, [pc, #128]	; (128f8 <_i2c_master_read_packet+0xb8>)
   12876:	4013      	ands	r3, r2
   12878:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
   1287a:	7a23      	ldrb	r3, [r4, #8]
   1287c:	2b00      	cmp	r3, #0
   1287e:	d115      	bne.n	128ac <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
   12880:	2303      	movs	r3, #3
   12882:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12884:	8823      	ldrh	r3, [r4, #0]
   12886:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12888:	7a62      	ldrb	r2, [r4, #9]
   1288a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1288c:	4313      	orrs	r3, r2
   1288e:	2201      	movs	r2, #1
   12890:	4313      	orrs	r3, r2
   12892:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
   12894:	2000      	movs	r0, #0
}
   12896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12898:	7a89      	ldrb	r1, [r1, #10]
   1289a:	4b18      	ldr	r3, [pc, #96]	; (128fc <_i2c_master_read_packet+0xbc>)
   1289c:	4798      	blx	r3
   1289e:	e7e3      	b.n	12868 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   128a0:	6872      	ldr	r2, [r6, #4]
   128a2:	2380      	movs	r3, #128	; 0x80
   128a4:	02db      	lsls	r3, r3, #11
   128a6:	4313      	orrs	r3, r2
   128a8:	6073      	str	r3, [r6, #4]
   128aa:	e7e6      	b.n	1287a <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
   128ac:	8823      	ldrh	r3, [r4, #0]
   128ae:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   128b0:	7a62      	ldrb	r2, [r4, #9]
   128b2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   128b4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   128b6:	2280      	movs	r2, #128	; 0x80
   128b8:	0212      	lsls	r2, r2, #8
   128ba:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
   128bc:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
   128be:	0028      	movs	r0, r5
   128c0:	4b0f      	ldr	r3, [pc, #60]	; (12900 <_i2c_master_read_packet+0xc0>)
   128c2:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   128c4:	6873      	ldr	r3, [r6, #4]
   128c6:	4a0c      	ldr	r2, [pc, #48]	; (128f8 <_i2c_master_read_packet+0xb8>)
   128c8:	4013      	ands	r3, r2
   128ca:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
   128cc:	2800      	cmp	r0, #0
   128ce:	d1e2      	bne.n	12896 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
   128d0:	0028      	movs	r0, r5
   128d2:	4b0c      	ldr	r3, [pc, #48]	; (12904 <_i2c_master_read_packet+0xc4>)
   128d4:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
   128d6:	2800      	cmp	r0, #0
   128d8:	d1dd      	bne.n	12896 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
   128da:	2303      	movs	r3, #3
   128dc:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   128de:	8823      	ldrh	r3, [r4, #0]
   128e0:	0a1b      	lsrs	r3, r3, #8
   128e2:	2278      	movs	r2, #120	; 0x78
   128e4:	4313      	orrs	r3, r2
   128e6:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   128e8:	7a62      	ldrb	r2, [r4, #9]
   128ea:	0392      	lsls	r2, r2, #14
   128ec:	2101      	movs	r1, #1
   128ee:	430a      	orrs	r2, r1
   128f0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   128f2:	6273      	str	r3, [r6, #36]	; 0x24
   128f4:	e7cf      	b.n	12896 <_i2c_master_read_packet+0x56>
   128f6:	46c0      	nop			; (mov r8, r8)
   128f8:	fffbffff 	.word	0xfffbffff
   128fc:	00015099 	.word	0x00015099
   12900:	0001506d 	.word	0x0001506d
   12904:	0001503d 	.word	0x0001503d

00012908 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
   12908:	1c93      	adds	r3, r2, #2
   1290a:	009b      	lsls	r3, r3, #2
   1290c:	18c3      	adds	r3, r0, r3
   1290e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
   12910:	7e03      	ldrb	r3, [r0, #24]
   12912:	2101      	movs	r1, #1
   12914:	4091      	lsls	r1, r2
   12916:	430b      	orrs	r3, r1
   12918:	b2db      	uxtb	r3, r3
   1291a:	7603      	strb	r3, [r0, #24]
}
   1291c:	4770      	bx	lr
	...

00012920 <i2c_master_read_packet_job>:
{
   12920:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
   12922:	8b83      	ldrh	r3, [r0, #28]
   12924:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12926:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12928:	2b00      	cmp	r3, #0
   1292a:	d001      	beq.n	12930 <i2c_master_read_packet_job+0x10>
}
   1292c:	0010      	movs	r0, r2
   1292e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12930:	3301      	adds	r3, #1
   12932:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12934:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
   12936:	4b02      	ldr	r3, [pc, #8]	; (12940 <i2c_master_read_packet_job+0x20>)
   12938:	4798      	blx	r3
   1293a:	0002      	movs	r2, r0
   1293c:	e7f6      	b.n	1292c <i2c_master_read_packet_job+0xc>
   1293e:	46c0      	nop			; (mov r8, r8)
   12940:	00012841 	.word	0x00012841

00012944 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12944:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12946:	8b83      	ldrh	r3, [r0, #28]
   12948:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   1294a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   1294c:	2b00      	cmp	r3, #0
   1294e:	d001      	beq.n	12954 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
   12950:	0010      	movs	r0, r2
   12952:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12954:	3301      	adds	r3, #1
   12956:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12958:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
   1295a:	4b02      	ldr	r3, [pc, #8]	; (12964 <i2c_master_write_packet_job+0x20>)
   1295c:	4798      	blx	r3
   1295e:	0002      	movs	r2, r0
   12960:	e7f6      	b.n	12950 <i2c_master_write_packet_job+0xc>
   12962:	46c0      	nop			; (mov r8, r8)
   12964:	000127d9 	.word	0x000127d9

00012968 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12968:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
   1296a:	0080      	lsls	r0, r0, #2
   1296c:	4b75      	ldr	r3, [pc, #468]	; (12b44 <_i2c_master_interrupt_handler+0x1dc>)
   1296e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12970:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12972:	682b      	ldr	r3, [r5, #0]
   12974:	011b      	lsls	r3, r3, #4
   12976:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12978:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
   1297a:	7e26      	ldrb	r6, [r4, #24]
   1297c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   1297e:	8b63      	ldrh	r3, [r4, #26]
   12980:	b29b      	uxth	r3, r3
   12982:	2b00      	cmp	r3, #0
   12984:	d103      	bne.n	1298e <_i2c_master_interrupt_handler+0x26>
   12986:	8ba3      	ldrh	r3, [r4, #28]
   12988:	b29b      	uxth	r3, r3
   1298a:	2b00      	cmp	r3, #0
   1298c:	d123      	bne.n	129d6 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   1298e:	8b63      	ldrh	r3, [r4, #26]
   12990:	b29b      	uxth	r3, r3
   12992:	2b00      	cmp	r3, #0
   12994:	d008      	beq.n	129a8 <_i2c_master_interrupt_handler+0x40>
   12996:	8ba3      	ldrh	r3, [r4, #28]
   12998:	b29b      	uxth	r3, r3
   1299a:	2b00      	cmp	r3, #0
   1299c:	d104      	bne.n	129a8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
   1299e:	3325      	adds	r3, #37	; 0x25
   129a0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   129a2:	2b05      	cmp	r3, #5
   129a4:	d100      	bne.n	129a8 <_i2c_master_interrupt_handler+0x40>
   129a6:	e06d      	b.n	12a84 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   129a8:	8b63      	ldrh	r3, [r4, #26]
   129aa:	b29b      	uxth	r3, r3
   129ac:	2b00      	cmp	r3, #0
   129ae:	d024      	beq.n	129fa <_i2c_master_interrupt_handler+0x92>
   129b0:	8ba3      	ldrh	r3, [r4, #28]
   129b2:	b29b      	uxth	r3, r3
   129b4:	2b00      	cmp	r3, #0
   129b6:	d020      	beq.n	129fa <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   129b8:	8b6b      	ldrh	r3, [r5, #26]
   129ba:	069b      	lsls	r3, r3, #26
   129bc:	d500      	bpl.n	129c0 <_i2c_master_interrupt_handler+0x58>
   129be:	e081      	b.n	12ac4 <_i2c_master_interrupt_handler+0x15c>
   129c0:	2a00      	cmp	r2, #0
   129c2:	d004      	beq.n	129ce <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   129c4:	8ba3      	ldrh	r3, [r4, #28]
   129c6:	b29b      	uxth	r3, r3
   129c8:	2b01      	cmp	r3, #1
   129ca:	d100      	bne.n	129ce <_i2c_master_interrupt_handler+0x66>
   129cc:	e07a      	b.n	12ac4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
   129ce:	2241      	movs	r2, #65	; 0x41
   129d0:	2325      	movs	r3, #37	; 0x25
   129d2:	54e2      	strb	r2, [r4, r3]
   129d4:	e011      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   129d6:	7e2b      	ldrb	r3, [r5, #24]
   129d8:	07db      	lsls	r3, r3, #31
   129da:	d507      	bpl.n	129ec <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   129dc:	2301      	movs	r3, #1
   129de:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   129e0:	8b6b      	ldrh	r3, [r5, #26]
   129e2:	079b      	lsls	r3, r3, #30
   129e4:	d52e      	bpl.n	12a44 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
   129e6:	2241      	movs	r2, #65	; 0x41
   129e8:	2325      	movs	r3, #37	; 0x25
   129ea:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
   129ec:	8ba3      	ldrh	r3, [r4, #28]
   129ee:	b29b      	uxth	r3, r3
   129f0:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
   129f2:	2325      	movs	r3, #37	; 0x25
   129f4:	5ce3      	ldrb	r3, [r4, r3]
   129f6:	2b05      	cmp	r3, #5
   129f8:	d038      	beq.n	12a6c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   129fa:	8b63      	ldrh	r3, [r4, #26]
   129fc:	b29b      	uxth	r3, r3
   129fe:	2b00      	cmp	r3, #0
   12a00:	d007      	beq.n	12a12 <_i2c_master_interrupt_handler+0xaa>
   12a02:	8ba3      	ldrh	r3, [r4, #28]
   12a04:	b29b      	uxth	r3, r3
   12a06:	2b00      	cmp	r3, #0
   12a08:	d103      	bne.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
   12a0a:	3325      	adds	r3, #37	; 0x25
   12a0c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12a0e:	2b05      	cmp	r3, #5
   12a10:	d064      	beq.n	12adc <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12a12:	2325      	movs	r3, #37	; 0x25
   12a14:	5ce3      	ldrb	r3, [r4, r3]
   12a16:	2b05      	cmp	r3, #5
   12a18:	d013      	beq.n	12a42 <_i2c_master_interrupt_handler+0xda>
   12a1a:	2325      	movs	r3, #37	; 0x25
   12a1c:	5ce3      	ldrb	r3, [r4, r3]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d00f      	beq.n	12a42 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12a22:	2303      	movs	r3, #3
   12a24:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12a26:	2300      	movs	r3, #0
   12a28:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
   12a2a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12a2c:	3325      	adds	r3, #37	; 0x25
   12a2e:	5ce3      	ldrb	r3, [r4, r3]
   12a30:	2b41      	cmp	r3, #65	; 0x41
   12a32:	d003      	beq.n	12a3c <_i2c_master_interrupt_handler+0xd4>
   12a34:	7aa3      	ldrb	r3, [r4, #10]
   12a36:	2b00      	cmp	r3, #0
   12a38:	d000      	beq.n	12a3c <_i2c_master_interrupt_handler+0xd4>
   12a3a:	e075      	b.n	12b28 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12a3c:	0773      	lsls	r3, r6, #29
   12a3e:	d500      	bpl.n	12a42 <_i2c_master_interrupt_handler+0xda>
   12a40:	e07b      	b.n	12b3a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
   12a42:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12a44:	8b6b      	ldrh	r3, [r5, #26]
   12a46:	075b      	lsls	r3, r3, #29
   12a48:	d5d0      	bpl.n	129ec <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12a4a:	2218      	movs	r2, #24
   12a4c:	2325      	movs	r3, #37	; 0x25
   12a4e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
   12a50:	2300      	movs	r3, #0
   12a52:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
   12a54:	7aa3      	ldrb	r3, [r4, #10]
   12a56:	2b00      	cmp	r3, #0
   12a58:	d0c8      	beq.n	129ec <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
   12a5a:	0020      	movs	r0, r4
   12a5c:	4b3a      	ldr	r3, [pc, #232]	; (12b48 <_i2c_master_interrupt_handler+0x1e0>)
   12a5e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12a60:	686a      	ldr	r2, [r5, #4]
   12a62:	23c0      	movs	r3, #192	; 0xc0
   12a64:	029b      	lsls	r3, r3, #10
   12a66:	4313      	orrs	r3, r2
   12a68:	606b      	str	r3, [r5, #4]
   12a6a:	e7bf      	b.n	129ec <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12a6c:	331f      	adds	r3, #31
   12a6e:	5ce3      	ldrb	r3, [r4, r3]
   12a70:	2b00      	cmp	r3, #0
   12a72:	d003      	beq.n	12a7c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
   12a74:	0020      	movs	r0, r4
   12a76:	4b35      	ldr	r3, [pc, #212]	; (12b4c <_i2c_master_interrupt_handler+0x1e4>)
   12a78:	4798      	blx	r3
   12a7a:	e7be      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
   12a7c:	0020      	movs	r0, r4
   12a7e:	4b34      	ldr	r3, [pc, #208]	; (12b50 <_i2c_master_interrupt_handler+0x1e8>)
   12a80:	4798      	blx	r3
   12a82:	e7ba      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12a84:	331f      	adds	r3, #31
   12a86:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12a88:	2b00      	cmp	r3, #0
   12a8a:	d000      	beq.n	12a8e <_i2c_master_interrupt_handler+0x126>
   12a8c:	e78c      	b.n	129a8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
   12a8e:	3303      	adds	r3, #3
   12a90:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12a92:	2300      	movs	r3, #0
   12a94:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12a96:	3325      	adds	r3, #37	; 0x25
   12a98:	2200      	movs	r2, #0
   12a9a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
   12a9c:	7aa3      	ldrb	r3, [r4, #10]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d107      	bne.n	12ab2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12aa2:	2301      	movs	r3, #1
   12aa4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12aa6:	07f3      	lsls	r3, r6, #31
   12aa8:	d5a7      	bpl.n	129fa <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12aaa:	68e3      	ldr	r3, [r4, #12]
   12aac:	0020      	movs	r0, r4
   12aae:	4798      	blx	r3
   12ab0:	e7a3      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
   12ab2:	0020      	movs	r0, r4
   12ab4:	4b24      	ldr	r3, [pc, #144]	; (12b48 <_i2c_master_interrupt_handler+0x1e0>)
   12ab6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12ab8:	686a      	ldr	r2, [r5, #4]
   12aba:	23c0      	movs	r3, #192	; 0xc0
   12abc:	029b      	lsls	r3, r3, #10
   12abe:	4313      	orrs	r3, r2
   12ac0:	606b      	str	r3, [r5, #4]
   12ac2:	e7f0      	b.n	12aa6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12ac4:	2324      	movs	r3, #36	; 0x24
   12ac6:	5ce3      	ldrb	r3, [r4, r3]
   12ac8:	2b00      	cmp	r3, #0
   12aca:	d103      	bne.n	12ad4 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
   12acc:	0020      	movs	r0, r4
   12ace:	4b20      	ldr	r3, [pc, #128]	; (12b50 <_i2c_master_interrupt_handler+0x1e8>)
   12ad0:	4798      	blx	r3
   12ad2:	e792      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
   12ad4:	0020      	movs	r0, r4
   12ad6:	4b1d      	ldr	r3, [pc, #116]	; (12b4c <_i2c_master_interrupt_handler+0x1e4>)
   12ad8:	4798      	blx	r3
   12ada:	e78e      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12adc:	331f      	adds	r3, #31
   12ade:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12ae0:	2b01      	cmp	r3, #1
   12ae2:	d196      	bne.n	12a12 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12ae4:	7e2b      	ldrb	r3, [r5, #24]
   12ae6:	079b      	lsls	r3, r3, #30
   12ae8:	d501      	bpl.n	12aee <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12aea:	2302      	movs	r3, #2
   12aec:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
   12aee:	2303      	movs	r3, #3
   12af0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12af2:	2300      	movs	r3, #0
   12af4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12af6:	3325      	adds	r3, #37	; 0x25
   12af8:	2200      	movs	r2, #0
   12afa:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12afc:	07b3      	lsls	r3, r6, #30
   12afe:	d503      	bpl.n	12b08 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12b00:	2324      	movs	r3, #36	; 0x24
   12b02:	5ce3      	ldrb	r3, [r4, r3]
   12b04:	2b01      	cmp	r3, #1
   12b06:	d00b      	beq.n	12b20 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12b08:	07f3      	lsls	r3, r6, #31
   12b0a:	d400      	bmi.n	12b0e <_i2c_master_interrupt_handler+0x1a6>
   12b0c:	e781      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12b0e:	2324      	movs	r3, #36	; 0x24
   12b10:	5ce3      	ldrb	r3, [r4, r3]
   12b12:	2b00      	cmp	r3, #0
   12b14:	d000      	beq.n	12b18 <_i2c_master_interrupt_handler+0x1b0>
   12b16:	e77c      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12b18:	68e3      	ldr	r3, [r4, #12]
   12b1a:	0020      	movs	r0, r4
   12b1c:	4798      	blx	r3
   12b1e:	e778      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12b20:	6923      	ldr	r3, [r4, #16]
   12b22:	0020      	movs	r0, r4
   12b24:	4798      	blx	r3
   12b26:	e774      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
   12b28:	0020      	movs	r0, r4
   12b2a:	4b07      	ldr	r3, [pc, #28]	; (12b48 <_i2c_master_interrupt_handler+0x1e0>)
   12b2c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12b2e:	686a      	ldr	r2, [r5, #4]
   12b30:	23e0      	movs	r3, #224	; 0xe0
   12b32:	02db      	lsls	r3, r3, #11
   12b34:	4313      	orrs	r3, r2
   12b36:	606b      	str	r3, [r5, #4]
   12b38:	e780      	b.n	12a3c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12b3a:	6963      	ldr	r3, [r4, #20]
   12b3c:	0020      	movs	r0, r4
   12b3e:	4798      	blx	r3
}
   12b40:	e77f      	b.n	12a42 <_i2c_master_interrupt_handler+0xda>
   12b42:	46c0      	nop			; (mov r8, r8)
   12b44:	200055c0 	.word	0x200055c0
   12b48:	00012709 	.word	0x00012709
   12b4c:	00012715 	.word	0x00012715
   12b50:	0001279d 	.word	0x0001279d

00012b54 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12b54:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12b58:	4a02      	ldr	r2, [pc, #8]	; (12b64 <CLI_ResetDevice+0x10>)
   12b5a:	4b03      	ldr	r3, [pc, #12]	; (12b68 <CLI_ResetDevice+0x14>)
   12b5c:	60da      	str	r2, [r3, #12]
   12b5e:	f3bf 8f4f 	dsb	sy
   12b62:	e7fe      	b.n	12b62 <CLI_ResetDevice+0xe>
   12b64:	05fa0004 	.word	0x05fa0004
   12b68:	e000ed00 	.word	0xe000ed00

00012b6c <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b6e:	0006      	movs	r6, r0
   12b70:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   12b72:	4d06      	ldr	r5, [pc, #24]	; (12b8c <xCliClearTerminalScreen+0x20>)
   12b74:	231b      	movs	r3, #27
   12b76:	4a06      	ldr	r2, [pc, #24]	; (12b90 <xCliClearTerminalScreen+0x24>)
   12b78:	210f      	movs	r1, #15
   12b7a:	0028      	movs	r0, r5
   12b7c:	4c05      	ldr	r4, [pc, #20]	; (12b94 <xCliClearTerminalScreen+0x28>)
   12b7e:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   12b80:	002a      	movs	r2, r5
   12b82:	0039      	movs	r1, r7
   12b84:	0030      	movs	r0, r6
   12b86:	47a0      	blx	r4
	return pdFALSE;
}
   12b88:	2000      	movs	r0, #0
   12b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b8c:	2000033c 	.word	0x2000033c
   12b90:	00027acc 	.word	0x00027acc
   12b94:	00026509 	.word	0x00026509

00012b98 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12b98:	b510      	push	{r4, lr}
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
   12b9a:	4a02      	ldr	r2, [pc, #8]	; (12ba4 <CLI_NeotrellisSetLed+0xc>)
   12b9c:	4b02      	ldr	r3, [pc, #8]	; (12ba8 <CLI_NeotrellisSetLed+0x10>)
   12b9e:	4798      	blx	r3
	//How do you get parameters? Checl link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
}
   12ba0:	2000      	movs	r0, #0
   12ba2:	bd10      	pop	{r4, pc}
   12ba4:	0002787c 	.word	0x0002787c
   12ba8:	00026509 	.word	0x00026509

00012bac <CLI_GetImuData>:
{
   12bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bae:	b087      	sub	sp, #28
   12bb0:	0007      	movs	r7, r0
   12bb2:	9102      	str	r1, [sp, #8]
lsm6ds3_xl_flag_data_ready_get(GetImuStruct(), &reg);
   12bb4:	4b2c      	ldr	r3, [pc, #176]	; (12c68 <CLI_GetImuData+0xbc>)
   12bb6:	4798      	blx	r3
   12bb8:	250f      	movs	r5, #15
   12bba:	ab02      	add	r3, sp, #8
   12bbc:	469c      	mov	ip, r3
   12bbe:	4465      	add	r5, ip
   12bc0:	0029      	movs	r1, r5
   12bc2:	4b2a      	ldr	r3, [pc, #168]	; (12c6c <CLI_GetImuData+0xc0>)
   12bc4:	4798      	blx	r3
if(reg){
   12bc6:	782b      	ldrb	r3, [r5, #0]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d03d      	beq.n	12c48 <CLI_GetImuData+0x9c>
	memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
   12bcc:	4d28      	ldr	r5, [pc, #160]	; (12c70 <CLI_GetImuData+0xc4>)
   12bce:	2206      	movs	r2, #6
   12bd0:	2100      	movs	r1, #0
   12bd2:	0028      	movs	r0, r5
   12bd4:	4b27      	ldr	r3, [pc, #156]	; (12c74 <CLI_GetImuData+0xc8>)
   12bd6:	4798      	blx	r3
	lsm6ds3_acceleration_raw_get(GetImuStruct(), data_raw_acceleration.u8bit);
   12bd8:	4b23      	ldr	r3, [pc, #140]	; (12c68 <CLI_GetImuData+0xbc>)
   12bda:	4798      	blx	r3
   12bdc:	0029      	movs	r1, r5
   12bde:	4b26      	ldr	r3, [pc, #152]	; (12c78 <CLI_GetImuData+0xcc>)
   12be0:	4798      	blx	r3
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
   12be2:	2300      	movs	r3, #0
   12be4:	5ee8      	ldrsh	r0, [r5, r3]
   12be6:	4e25      	ldr	r6, [pc, #148]	; (12c7c <CLI_GetImuData+0xd0>)
   12be8:	47b0      	blx	r6
	acceleration_mg[0] =
   12bea:	4c25      	ldr	r4, [pc, #148]	; (12c80 <CLI_GetImuData+0xd4>)
   12bec:	6020      	str	r0, [r4, #0]
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
   12bee:	2302      	movs	r3, #2
   12bf0:	5ee8      	ldrsh	r0, [r5, r3]
   12bf2:	47b0      	blx	r6
	acceleration_mg[1] =
   12bf4:	6060      	str	r0, [r4, #4]
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
   12bf6:	2304      	movs	r3, #4
   12bf8:	5ee8      	ldrsh	r0, [r5, r3]
   12bfa:	47b0      	blx	r6
   12bfc:	1c05      	adds	r5, r0, #0
	acceleration_mg[2] =
   12bfe:	60a0      	str	r0, [r4, #8]
snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\t%Z %d\r\n",
   12c00:	4e20      	ldr	r6, [pc, #128]	; (12c84 <CLI_GetImuData+0xd8>)
   12c02:	6820      	ldr	r0, [r4, #0]
   12c04:	47b0      	blx	r6
   12c06:	9003      	str	r0, [sp, #12]
   12c08:	1c28      	adds	r0, r5, #0
   12c0a:	47b0      	blx	r6
   12c0c:	9001      	str	r0, [sp, #4]
   12c0e:	6860      	ldr	r0, [r4, #4]
   12c10:	47b0      	blx	r6
   12c12:	9000      	str	r0, [sp, #0]
   12c14:	9b03      	ldr	r3, [sp, #12]
   12c16:	4a1c      	ldr	r2, [pc, #112]	; (12c88 <CLI_GetImuData+0xdc>)
   12c18:	9902      	ldr	r1, [sp, #8]
   12c1a:	0038      	movs	r0, r7
   12c1c:	4c1b      	ldr	r4, [pc, #108]	; (12c8c <CLI_GetImuData+0xe0>)
   12c1e:	47a0      	blx	r4
imuPacketTemp.xmg = (int16_t)acceleration_mg[0];
   12c20:	ac04      	add	r4, sp, #16
   12c22:	4e17      	ldr	r6, [pc, #92]	; (12c80 <CLI_GetImuData+0xd4>)
   12c24:	4d17      	ldr	r5, [pc, #92]	; (12c84 <CLI_GetImuData+0xd8>)
   12c26:	6830      	ldr	r0, [r6, #0]
   12c28:	47a8      	blx	r5
   12c2a:	8020      	strh	r0, [r4, #0]
imuPacketTemp.ymg = (int16_t)acceleration_mg[1];
   12c2c:	6870      	ldr	r0, [r6, #4]
   12c2e:	47a8      	blx	r5
   12c30:	8060      	strh	r0, [r4, #2]
imuPacketTemp.zmg = (int16_t)acceleration_mg[2];
   12c32:	68b0      	ldr	r0, [r6, #8]
   12c34:	47a8      	blx	r5
   12c36:	80a0      	strh	r0, [r4, #4]
int error = WifiAddImuDataToQueue(&imuPacketTemp);
   12c38:	0020      	movs	r0, r4
   12c3a:	4b15      	ldr	r3, [pc, #84]	; (12c90 <CLI_GetImuData+0xe4>)
   12c3c:	4798      	blx	r3
if(error == pdTRUE)
   12c3e:	2801      	cmp	r0, #1
   12c40:	d008      	beq.n	12c54 <CLI_GetImuData+0xa8>
}
   12c42:	2000      	movs	r0, #0
   12c44:	b007      	add	sp, #28
   12c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
   12c48:	4a12      	ldr	r2, [pc, #72]	; (12c94 <CLI_GetImuData+0xe8>)
   12c4a:	9902      	ldr	r1, [sp, #8]
   12c4c:	0038      	movs	r0, r7
   12c4e:	4b0f      	ldr	r3, [pc, #60]	; (12c8c <CLI_GetImuData+0xe0>)
   12c50:	4798      	blx	r3
   12c52:	e7e5      	b.n	12c20 <CLI_GetImuData+0x74>
	strcat(pcWriteBuffer, "IMU Data MQTT Post\r\n");
   12c54:	0038      	movs	r0, r7
   12c56:	4b10      	ldr	r3, [pc, #64]	; (12c98 <CLI_GetImuData+0xec>)
   12c58:	4798      	blx	r3
   12c5a:	1838      	adds	r0, r7, r0
   12c5c:	2215      	movs	r2, #21
   12c5e:	490f      	ldr	r1, [pc, #60]	; (12c9c <CLI_GetImuData+0xf0>)
   12c60:	4b0f      	ldr	r3, [pc, #60]	; (12ca0 <CLI_GetImuData+0xf4>)
   12c62:	4798      	blx	r3
   12c64:	e7ed      	b.n	12c42 <CLI_GetImuData+0x96>
   12c66:	46c0      	nop			; (mov r8, r8)
   12c68:	000138e5 	.word	0x000138e5
   12c6c:	000138ad 	.word	0x000138ad
   12c70:	2000034c 	.word	0x2000034c
   12c74:	00026253 	.word	0x00026253
   12c78:	000138d1 	.word	0x000138d1
   12c7c:	00013885 	.word	0x00013885
   12c80:	20000330 	.word	0x20000330
   12c84:	000247f9 	.word	0x000247f9
   12c88:	000277f8 	.word	0x000277f8
   12c8c:	00026509 	.word	0x00026509
   12c90:	00014c6d 	.word	0x00014c6d
   12c94:	0002781c 	.word	0x0002781c
   12c98:	00026667 	.word	0x00026667
   12c9c:	00027830 	.word	0x00027830
   12ca0:	0002621d 	.word	0x0002621d

00012ca4 <CLI_OTAU>:
{
   12ca4:	b510      	push	{r4, lr}
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   12ca6:	2002      	movs	r0, #2
   12ca8:	4b01      	ldr	r3, [pc, #4]	; (12cb0 <CLI_OTAU+0xc>)
   12caa:	4798      	blx	r3
}
   12cac:	2000      	movs	r0, #0
   12cae:	bd10      	pop	{r4, pc}
   12cb0:	00014c41 	.word	0x00014c41

00012cb4 <CLI_NeotrellProcessButtonBuffer>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellProcessButtonBuffer( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12cb4:	b570      	push	{r4, r5, r6, lr}
   12cb6:	b090      	sub	sp, #64	; 0x40
   12cb8:	0004      	movs	r4, r0
   12cba:	000d      	movs	r5, r1
	//snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
	//Print to pcWriteBuffer in order.
	//If the string is too long to print, print what you can.
	//The function you write will be useful in the future.
	uint8_t buffer[64];
	uint8_t count = SeesawGetKeypadCount();
   12cbc:	4b21      	ldr	r3, [pc, #132]	; (12d44 <CLI_NeotrellProcessButtonBuffer+0x90>)
   12cbe:	4798      	blx	r3
		return pdTRUE;
	}
	else
	{
	pcWriteBuffer = 0;
		return pdFALSE;
   12cc0:	2300      	movs	r3, #0
	if(count >= 1)
   12cc2:	2800      	cmp	r0, #0
   12cc4:	d102      	bne.n	12ccc <CLI_NeotrellProcessButtonBuffer+0x18>
	}
	

}
   12cc6:	0018      	movs	r0, r3
   12cc8:	b010      	add	sp, #64	; 0x40
   12cca:	bd70      	pop	{r4, r5, r6, pc}
	int32_t res = SeesawReadKeypad(buffer,1);
   12ccc:	2101      	movs	r1, #1
   12cce:	4668      	mov	r0, sp
   12cd0:	4b1d      	ldr	r3, [pc, #116]	; (12d48 <CLI_NeotrellProcessButtonBuffer+0x94>)
   12cd2:	4798      	blx	r3
		return pdTRUE;
   12cd4:	2301      	movs	r3, #1
	if(res==0)
   12cd6:	2800      	cmp	r0, #0
   12cd8:	d1f5      	bne.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
			press = buffer[0] & 0x3;
   12cda:	466b      	mov	r3, sp
   12cdc:	781b      	ldrb	r3, [r3, #0]
   12cde:	2203      	movs	r2, #3
   12ce0:	401a      	ands	r2, r3
			pos =  buffer[0]>>2;
   12ce2:	089b      	lsrs	r3, r3, #2
			int num = NEO_TRELLIS_SEESAW_KEY(pos);
   12ce4:	08d8      	lsrs	r0, r3, #3
   12ce6:	0080      	lsls	r0, r0, #2
   12ce8:	2107      	movs	r1, #7
   12cea:	400b      	ands	r3, r1
   12cec:	18c0      	adds	r0, r0, r3
			if(press == 0x2){
   12cee:	2a02      	cmp	r2, #2
   12cf0:	d015      	beq.n	12d1e <CLI_NeotrellProcessButtonBuffer+0x6a>
		return pdTRUE;
   12cf2:	2301      	movs	r3, #1
			else if(press == 0x3){
   12cf4:	2a03      	cmp	r2, #3
   12cf6:	d1e6      	bne.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12cf8:	17c1      	asrs	r1, r0, #31
   12cfa:	3204      	adds	r2, #4
   12cfc:	0013      	movs	r3, r2
   12cfe:	400b      	ands	r3, r1
   12d00:	181b      	adds	r3, r3, r0
   12d02:	10db      	asrs	r3, r3, #3
   12d04:	009b      	lsls	r3, r3, #2
   12d06:	0f49      	lsrs	r1, r1, #29
   12d08:	1840      	adds	r0, r0, r1
   12d0a:	4010      	ands	r0, r2
   12d0c:	1a40      	subs	r0, r0, r1
   12d0e:	181b      	adds	r3, r3, r0
   12d10:	4a0e      	ldr	r2, [pc, #56]	; (12d4c <CLI_NeotrellProcessButtonBuffer+0x98>)
   12d12:	0029      	movs	r1, r5
   12d14:	0020      	movs	r0, r4
   12d16:	4c0e      	ldr	r4, [pc, #56]	; (12d50 <CLI_NeotrellProcessButtonBuffer+0x9c>)
   12d18:	47a0      	blx	r4
		return pdTRUE;
   12d1a:	2301      	movs	r3, #1
   12d1c:	e7d3      	b.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12d1e:	17c6      	asrs	r6, r0, #31
   12d20:	000b      	movs	r3, r1
   12d22:	4033      	ands	r3, r6
   12d24:	181b      	adds	r3, r3, r0
   12d26:	10db      	asrs	r3, r3, #3
   12d28:	009a      	lsls	r2, r3, #2
   12d2a:	0f76      	lsrs	r6, r6, #29
   12d2c:	1983      	adds	r3, r0, r6
   12d2e:	400b      	ands	r3, r1
   12d30:	1b9b      	subs	r3, r3, r6
   12d32:	18d3      	adds	r3, r2, r3
   12d34:	4a07      	ldr	r2, [pc, #28]	; (12d54 <CLI_NeotrellProcessButtonBuffer+0xa0>)
   12d36:	0029      	movs	r1, r5
   12d38:	0020      	movs	r0, r4
   12d3a:	4c05      	ldr	r4, [pc, #20]	; (12d50 <CLI_NeotrellProcessButtonBuffer+0x9c>)
   12d3c:	47a0      	blx	r4
		return pdTRUE;
   12d3e:	2301      	movs	r3, #1
   12d40:	e7c1      	b.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
   12d42:	46c0      	nop			; (mov r8, r8)
   12d44:	000138ed 	.word	0x000138ed
   12d48:	0001393d 	.word	0x0001393d
   12d4c:	00027864 	.word	0x00027864
   12d50:	00026509 	.word	0x00026509
   12d54:	00027848 	.word	0x00027848

00012d58 <CLI_DistanceSensorGetDistance>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_DistanceSensorGetDistance( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12d58:	b530      	push	{r4, r5, lr}
   12d5a:	b083      	sub	sp, #12
   12d5c:	0004      	movs	r4, r0
   12d5e:	000d      	movs	r5, r1

	uint16_t distance = 0;
   12d60:	466b      	mov	r3, sp
   12d62:	1d98      	adds	r0, r3, #6
   12d64:	2300      	movs	r3, #0
   12d66:	8003      	strh	r3, [r0, #0]
	int error = DistanceSensorGetDistance(&distance, 100);
   12d68:	2164      	movs	r1, #100	; 0x64
   12d6a:	4b12      	ldr	r3, [pc, #72]	; (12db4 <CLI_DistanceSensorGetDistance+0x5c>)
   12d6c:	4798      	blx	r3
	if (0 != error )
   12d6e:	2800      	cmp	r0, #0
   12d70:	d00e      	beq.n	12d90 <CLI_DistanceSensorGetDistance+0x38>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Sensor Error %d!\r\n", error);
   12d72:	0003      	movs	r3, r0
   12d74:	4a10      	ldr	r2, [pc, #64]	; (12db8 <CLI_DistanceSensorGetDistance+0x60>)
   12d76:	0029      	movs	r1, r5
   12d78:	0020      	movs	r0, r4
   12d7a:	4d10      	ldr	r5, [pc, #64]	; (12dbc <CLI_DistanceSensorGetDistance+0x64>)
   12d7c:	47a8      	blx	r5
	else
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Distance: %d mm\r\n", distance);
	}

	error = WifiAddDistanceDataToQueue(&distance);
   12d7e:	466b      	mov	r3, sp
   12d80:	1d98      	adds	r0, r3, #6
   12d82:	4b0f      	ldr	r3, [pc, #60]	; (12dc0 <CLI_DistanceSensorGetDistance+0x68>)
   12d84:	4798      	blx	r3
	if(error == pdTRUE)
   12d86:	2801      	cmp	r0, #1
   12d88:	d00b      	beq.n	12da2 <CLI_DistanceSensorGetDistance+0x4a>
	{
		strcat(pcWriteBuffer, "Distance Data MQTT Post\r\n");
	}
	return pdFALSE;
}
   12d8a:	2000      	movs	r0, #0
   12d8c:	b003      	add	sp, #12
   12d8e:	bd30      	pop	{r4, r5, pc}
		snprintf(pcWriteBuffer,xWriteBufferLen, "Distance: %d mm\r\n", distance);
   12d90:	466b      	mov	r3, sp
   12d92:	3306      	adds	r3, #6
   12d94:	881b      	ldrh	r3, [r3, #0]
   12d96:	4a0b      	ldr	r2, [pc, #44]	; (12dc4 <CLI_DistanceSensorGetDistance+0x6c>)
   12d98:	0029      	movs	r1, r5
   12d9a:	0020      	movs	r0, r4
   12d9c:	4d07      	ldr	r5, [pc, #28]	; (12dbc <CLI_DistanceSensorGetDistance+0x64>)
   12d9e:	47a8      	blx	r5
   12da0:	e7ed      	b.n	12d7e <CLI_DistanceSensorGetDistance+0x26>
		strcat(pcWriteBuffer, "Distance Data MQTT Post\r\n");
   12da2:	0020      	movs	r0, r4
   12da4:	4b08      	ldr	r3, [pc, #32]	; (12dc8 <CLI_DistanceSensorGetDistance+0x70>)
   12da6:	4798      	blx	r3
   12da8:	1820      	adds	r0, r4, r0
   12daa:	221a      	movs	r2, #26
   12dac:	4907      	ldr	r1, [pc, #28]	; (12dcc <CLI_DistanceSensorGetDistance+0x74>)
   12dae:	4b08      	ldr	r3, [pc, #32]	; (12dd0 <CLI_DistanceSensorGetDistance+0x78>)
   12db0:	4798      	blx	r3
   12db2:	e7ea      	b.n	12d8a <CLI_DistanceSensorGetDistance+0x32>
   12db4:	0001338d 	.word	0x0001338d
   12db8:	000277b4 	.word	0x000277b4
   12dbc:	00026509 	.word	0x00026509
   12dc0:	00014c89 	.word	0x00014c89
   12dc4:	000277c8 	.word	0x000277c8
   12dc8:	00026667 	.word	0x00026667
   12dcc:	000277dc 	.word	0x000277dc
   12dd0:	0002621d 	.word	0x0002621d

00012dd4 <CLI_SendDummyGameData>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_SendDummyGameData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12dd4:	b530      	push	{r4, r5, lr}
   12dd6:	b087      	sub	sp, #28
   12dd8:	0004      	movs	r4, r0
   12dda:	000d      	movs	r5, r1
struct GameDataPacket gamevar;

gamevar.game[0] = 0;
   12ddc:	a801      	add	r0, sp, #4
   12dde:	2300      	movs	r3, #0
   12de0:	7003      	strb	r3, [r0, #0]
gamevar.game[1] = 1;
   12de2:	3301      	adds	r3, #1
   12de4:	7043      	strb	r3, [r0, #1]
gamevar.game[2] = 2;
   12de6:	3301      	adds	r3, #1
   12de8:	7083      	strb	r3, [r0, #2]
gamevar.game[3] = 3;
   12dea:	3301      	adds	r3, #1
   12dec:	70c3      	strb	r3, [r0, #3]
gamevar.game[4] = 4;
   12dee:	3301      	adds	r3, #1
   12df0:	7103      	strb	r3, [r0, #4]
gamevar.game[5] = 5;
   12df2:	3301      	adds	r3, #1
   12df4:	7143      	strb	r3, [r0, #5]
gamevar.game[6] = 6;
   12df6:	3301      	adds	r3, #1
   12df8:	7183      	strb	r3, [r0, #6]
gamevar.game[7] = 7;
   12dfa:	3301      	adds	r3, #1
   12dfc:	71c3      	strb	r3, [r0, #7]
gamevar.game[8] = 8;
   12dfe:	3301      	adds	r3, #1
   12e00:	7203      	strb	r3, [r0, #8]
gamevar.game[9] = 9;
   12e02:	3301      	adds	r3, #1
   12e04:	7243      	strb	r3, [r0, #9]
gamevar.game[10] = 0xFF;
   12e06:	33f6      	adds	r3, #246	; 0xf6
   12e08:	7283      	strb	r3, [r0, #10]

	int error = WifiAddGameDataToQueue(&gamevar);
   12e0a:	4b06      	ldr	r3, [pc, #24]	; (12e24 <CLI_SendDummyGameData+0x50>)
   12e0c:	4798      	blx	r3
	if(error == pdTRUE)
   12e0e:	2801      	cmp	r0, #1
   12e10:	d002      	beq.n	12e18 <CLI_SendDummyGameData+0x44>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
	}
	return pdFALSE;
}
   12e12:	2000      	movs	r0, #0
   12e14:	b007      	add	sp, #28
   12e16:	bd30      	pop	{r4, r5, pc}
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   12e18:	4a03      	ldr	r2, [pc, #12]	; (12e28 <CLI_SendDummyGameData+0x54>)
   12e1a:	0029      	movs	r1, r5
   12e1c:	0020      	movs	r0, r4
   12e1e:	4b03      	ldr	r3, [pc, #12]	; (12e2c <CLI_SendDummyGameData+0x58>)
   12e20:	4798      	blx	r3
   12e22:	e7f6      	b.n	12e12 <CLI_SendDummyGameData+0x3e>
   12e24:	00014ca5 	.word	0x00014ca5
   12e28:	00027894 	.word	0x00027894
   12e2c:	00026509 	.word	0x00026509

00012e30 <vCommandConsoleTask>:
{
   12e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e32:	46c6      	mov	lr, r8
   12e34:	b500      	push	{lr}
   12e36:	b082      	sub	sp, #8
FreeRTOS_CLIRegisterCommand( &xOTAUCommand);
   12e38:	485a      	ldr	r0, [pc, #360]	; (12fa4 <vCommandConsoleTask+0x174>)
   12e3a:	4c5b      	ldr	r4, [pc, #364]	; (12fa8 <vCommandConsoleTask+0x178>)
   12e3c:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
   12e3e:	485b      	ldr	r0, [pc, #364]	; (12fac <vCommandConsoleTask+0x17c>)
   12e40:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   12e42:	485b      	ldr	r0, [pc, #364]	; (12fb0 <vCommandConsoleTask+0x180>)
   12e44:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   12e46:	485b      	ldr	r0, [pc, #364]	; (12fb4 <vCommandConsoleTask+0x184>)
   12e48:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   12e4a:	485b      	ldr	r0, [pc, #364]	; (12fb8 <vCommandConsoleTask+0x188>)
   12e4c:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisProcessButtonCommand );
   12e4e:	485b      	ldr	r0, [pc, #364]	; (12fbc <vCommandConsoleTask+0x18c>)
   12e50:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xDistanceSensorGetDistance);
   12e52:	485b      	ldr	r0, [pc, #364]	; (12fc0 <vCommandConsoleTask+0x190>)
   12e54:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xSendDummyGameData);
   12e56:	485b      	ldr	r0, [pc, #364]	; (12fc4 <vCommandConsoleTask+0x194>)
   12e58:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
   12e5a:	485b      	ldr	r0, [pc, #364]	; (12fc8 <vCommandConsoleTask+0x198>)
   12e5c:	4b5b      	ldr	r3, [pc, #364]	; (12fcc <vCommandConsoleTask+0x19c>)
   12e5e:	4798      	blx	r3
uint8_t cRxedChar[2], cInputIndex = 0;
   12e60:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12e62:	4f5b      	ldr	r7, [pc, #364]	; (12fd0 <vCommandConsoleTask+0x1a0>)
            SerialConsoleWriteString("\r\n");
   12e64:	4b59      	ldr	r3, [pc, #356]	; (12fcc <vCommandConsoleTask+0x19c>)
   12e66:	4698      	mov	r8, r3
   12e68:	e027      	b.n	12eba <vCommandConsoleTask+0x8a>
			vTaskDelay( CLI_TASK_DELAY);
   12e6a:	3097      	adds	r0, #151	; 0x97
   12e6c:	4b59      	ldr	r3, [pc, #356]	; (12fd4 <vCommandConsoleTask+0x1a4>)
   12e6e:	4798      	blx	r3
   12e70:	e023      	b.n	12eba <vCommandConsoleTask+0x8a>
            SerialConsoleWriteString("\r\n");
   12e72:	4859      	ldr	r0, [pc, #356]	; (12fd8 <vCommandConsoleTask+0x1a8>)
   12e74:	47c0      	blx	r8
			isEscapeCode = false; pcEscapeCodePos = 0;
   12e76:	2400      	movs	r4, #0
   12e78:	4b58      	ldr	r3, [pc, #352]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12e7a:	701c      	strb	r4, [r3, #0]
   12e7c:	4b58      	ldr	r3, [pc, #352]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12e7e:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   12e80:	4d58      	ldr	r5, [pc, #352]	; (12fe4 <vCommandConsoleTask+0x1b4>)
   12e82:	2231      	movs	r2, #49	; 0x31
   12e84:	4958      	ldr	r1, [pc, #352]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12e86:	0028      	movs	r0, r5
   12e88:	4b58      	ldr	r3, [pc, #352]	; (12fec <vCommandConsoleTask+0x1bc>)
   12e8a:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   12e8c:	2331      	movs	r3, #49	; 0x31
   12e8e:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   12e90:	4c57      	ldr	r4, [pc, #348]	; (12ff0 <vCommandConsoleTask+0x1c0>)
   12e92:	4e58      	ldr	r6, [pc, #352]	; (12ff4 <vCommandConsoleTask+0x1c4>)
   12e94:	2282      	movs	r2, #130	; 0x82
   12e96:	0021      	movs	r1, r4
   12e98:	4853      	ldr	r0, [pc, #332]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12e9a:	47b0      	blx	r6
   12e9c:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12e9e:	2200      	movs	r2, #0
   12ea0:	2381      	movs	r3, #129	; 0x81
   12ea2:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
   12ea4:	0020      	movs	r0, r4
   12ea6:	4b49      	ldr	r3, [pc, #292]	; (12fcc <vCommandConsoleTask+0x19c>)
   12ea8:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
   12eaa:	2d00      	cmp	r5, #0
   12eac:	d1f2      	bne.n	12e94 <vCommandConsoleTask+0x64>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12eae:	2232      	movs	r2, #50	; 0x32
   12eb0:	2100      	movs	r1, #0
   12eb2:	484d      	ldr	r0, [pc, #308]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12eb4:	4b50      	ldr	r3, [pc, #320]	; (12ff8 <vCommandConsoleTask+0x1c8>)
   12eb6:	4798      	blx	r3
            cInputIndex = 0;
   12eb8:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12eba:	a801      	add	r0, sp, #4
   12ebc:	47b8      	blx	r7
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   12ebe:	1c43      	adds	r3, r0, #1
   12ec0:	d0d3      	beq.n	12e6a <vCommandConsoleTask+0x3a>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   12ec2:	ab01      	add	r3, sp, #4
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	2b0a      	cmp	r3, #10
   12ec8:	d0d3      	beq.n	12e72 <vCommandConsoleTask+0x42>
   12eca:	2b0d      	cmp	r3, #13
   12ecc:	d0d1      	beq.n	12e72 <vCommandConsoleTask+0x42>
			if (true == isEscapeCode) {
   12ece:	4a43      	ldr	r2, [pc, #268]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12ed0:	7812      	ldrb	r2, [r2, #0]
   12ed2:	2a00      	cmp	r2, #0
   12ed4:	d03f      	beq.n	12f56 <vCommandConsoleTask+0x126>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12ed6:	4a42      	ldr	r2, [pc, #264]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12ed8:	7812      	ldrb	r2, [r2, #0]
   12eda:	2a03      	cmp	r2, #3
   12edc:	d813      	bhi.n	12f06 <vCommandConsoleTask+0xd6>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12ede:	1c51      	adds	r1, r2, #1
   12ee0:	b2c9      	uxtb	r1, r1
   12ee2:	483f      	ldr	r0, [pc, #252]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12ee4:	7001      	strb	r1, [r0, #0]
   12ee6:	4845      	ldr	r0, [pc, #276]	; (12ffc <vCommandConsoleTask+0x1cc>)
   12ee8:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12eea:	2901      	cmp	r1, #1
   12eec:	d9e5      	bls.n	12eba <vCommandConsoleTask+0x8a>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   12eee:	4944      	ldr	r1, [pc, #272]	; (13000 <vCommandConsoleTask+0x1d0>)
   12ef0:	4842      	ldr	r0, [pc, #264]	; (12ffc <vCommandConsoleTask+0x1cc>)
   12ef2:	4b44      	ldr	r3, [pc, #272]	; (13004 <vCommandConsoleTask+0x1d4>)
   12ef4:	4798      	blx	r3
   12ef6:	2800      	cmp	r0, #0
   12ef8:	d10b      	bne.n	12f12 <vCommandConsoleTask+0xe2>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12efa:	2300      	movs	r3, #0
   12efc:	4a37      	ldr	r2, [pc, #220]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12efe:	7013      	strb	r3, [r2, #0]
   12f00:	4a37      	ldr	r2, [pc, #220]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12f02:	7013      	strb	r3, [r2, #0]
   12f04:	e7d9      	b.n	12eba <vCommandConsoleTask+0x8a>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12f06:	2300      	movs	r3, #0
   12f08:	4a34      	ldr	r2, [pc, #208]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12f0a:	7013      	strb	r3, [r2, #0]
   12f0c:	4a34      	ldr	r2, [pc, #208]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12f0e:	7013      	strb	r3, [r2, #0]
   12f10:	e7d3      	b.n	12eba <vCommandConsoleTask+0x8a>
                            sprintf(pcInputString, "%c[2K\r>", 27);
   12f12:	4c35      	ldr	r4, [pc, #212]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f14:	221b      	movs	r2, #27
   12f16:	493c      	ldr	r1, [pc, #240]	; (13008 <vCommandConsoleTask+0x1d8>)
   12f18:	0020      	movs	r0, r4
   12f1a:	4b3c      	ldr	r3, [pc, #240]	; (1300c <vCommandConsoleTask+0x1dc>)
   12f1c:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   12f1e:	0020      	movs	r0, r4
   12f20:	4b2a      	ldr	r3, [pc, #168]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f22:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12f24:	2232      	movs	r2, #50	; 0x32
   12f26:	2100      	movs	r1, #0
   12f28:	0020      	movs	r0, r4
   12f2a:	4b33      	ldr	r3, [pc, #204]	; (12ff8 <vCommandConsoleTask+0x1c8>)
   12f2c:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   12f2e:	2231      	movs	r2, #49	; 0x31
   12f30:	492c      	ldr	r1, [pc, #176]	; (12fe4 <vCommandConsoleTask+0x1b4>)
   12f32:	0020      	movs	r0, r4
   12f34:	4b2d      	ldr	r3, [pc, #180]	; (12fec <vCommandConsoleTask+0x1bc>)
   12f36:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12f38:	0020      	movs	r0, r4
   12f3a:	4b35      	ldr	r3, [pc, #212]	; (13010 <vCommandConsoleTask+0x1e0>)
   12f3c:	4798      	blx	r3
   12f3e:	2431      	movs	r4, #49	; 0x31
   12f40:	2830      	cmp	r0, #48	; 0x30
   12f42:	d803      	bhi.n	12f4c <vCommandConsoleTask+0x11c>
   12f44:	4827      	ldr	r0, [pc, #156]	; (12fe4 <vCommandConsoleTask+0x1b4>)
   12f46:	4b32      	ldr	r3, [pc, #200]	; (13010 <vCommandConsoleTask+0x1e0>)
   12f48:	4798      	blx	r3
   12f4a:	0004      	movs	r4, r0
   12f4c:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
   12f4e:	4826      	ldr	r0, [pc, #152]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f50:	4b1e      	ldr	r3, [pc, #120]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f52:	4798      	blx	r3
   12f54:	e7d1      	b.n	12efa <vCommandConsoleTask+0xca>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   12f56:	2b08      	cmp	r3, #8
   12f58:	d00f      	beq.n	12f7a <vCommandConsoleTask+0x14a>
   12f5a:	2b7f      	cmp	r3, #127	; 0x7f
   12f5c:	d00d      	beq.n	12f7a <vCommandConsoleTask+0x14a>
			else if( cRxedChar[0] == ASCII_ESC) {
   12f5e:	2b1b      	cmp	r3, #27
   12f60:	d019      	beq.n	12f96 <vCommandConsoleTask+0x166>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   12f62:	2c31      	cmp	r4, #49	; 0x31
   12f64:	d803      	bhi.n	12f6e <vCommandConsoleTask+0x13e>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   12f66:	4a20      	ldr	r2, [pc, #128]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f68:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
   12f6a:	3401      	adds	r4, #1
   12f6c:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
   12f6e:	a801      	add	r0, sp, #4
   12f70:	2300      	movs	r3, #0
   12f72:	7043      	strb	r3, [r0, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   12f74:	4b15      	ldr	r3, [pc, #84]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f76:	4798      	blx	r3
   12f78:	e79f      	b.n	12eba <vCommandConsoleTask+0x8a>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12f7a:	4b26      	ldr	r3, [pc, #152]	; (13014 <vCommandConsoleTask+0x1e4>)
   12f7c:	681b      	ldr	r3, [r3, #0]
   12f7e:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
   12f80:	4668      	mov	r0, sp
   12f82:	4b12      	ldr	r3, [pc, #72]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f84:	4798      	blx	r3
                if( cInputIndex > 0 )
   12f86:	2c00      	cmp	r4, #0
   12f88:	d097      	beq.n	12eba <vCommandConsoleTask+0x8a>
                    cInputIndex--;
   12f8a:	3c01      	subs	r4, #1
   12f8c:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
   12f8e:	2200      	movs	r2, #0
   12f90:	4b15      	ldr	r3, [pc, #84]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f92:	551a      	strb	r2, [r3, r4]
            {
   12f94:	e791      	b.n	12eba <vCommandConsoleTask+0x8a>
				isEscapeCode = true; //Next characters will be code arguments
   12f96:	2201      	movs	r2, #1
   12f98:	4b10      	ldr	r3, [pc, #64]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12f9a:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   12f9c:	2200      	movs	r2, #0
   12f9e:	4b10      	ldr	r3, [pc, #64]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12fa0:	701a      	strb	r2, [r3, #0]
   12fa2:	e78a      	b.n	12eba <vCommandConsoleTask+0x8a>
   12fa4:	00027b14 	.word	0x00027b14
   12fa8:	00015185 	.word	0x00015185
   12fac:	00027ae4 	.word	0x00027ae4
   12fb0:	00027abc 	.word	0x00027abc
   12fb4:	00027b24 	.word	0x00027b24
   12fb8:	00027b04 	.word	0x00027b04
   12fbc:	00027af4 	.word	0x00027af4
   12fc0:	00027ad4 	.word	0x00027ad4
   12fc4:	00027b34 	.word	0x00027b34
   12fc8:	00027a6c 	.word	0x00027a6c
   12fcc:	00018f6d 	.word	0x00018f6d
   12fd0:	00018ff1 	.word	0x00018ff1
   12fd4:	000180f5 	.word	0x000180f5
   12fd8:	0002ae7c 	.word	0x0002ae7c
   12fdc:	20000352 	.word	0x20000352
   12fe0:	20000353 	.word	0x20000353
   12fe4:	2000038c 	.word	0x2000038c
   12fe8:	20000358 	.word	0x20000358
   12fec:	00026697 	.word	0x00026697
   12ff0:	200003c0 	.word	0x200003c0
   12ff4:	000151c9 	.word	0x000151c9
   12ff8:	00026253 	.word	0x00026253
   12ffc:	20000354 	.word	0x20000354
   13000:	00027ab0 	.word	0x00027ab0
   13004:	000265b1 	.word	0x000265b1
   13008:	00027ab4 	.word	0x00027ab4
   1300c:	0002656d 	.word	0x0002656d
   13010:	00026667 	.word	0x00026667
   13014:	000277b0 	.word	0x000277b0

00013018 <vControlHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vControlHandlerTask( void *pvParameters )
{
   13018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1301a:	b08b      	sub	sp, #44	; 0x2c
   1301c:	af06      	add	r7, sp, #24
   1301e:	6078      	str	r0, [r7, #4]
SerialConsoleWriteString("ESE516 - Control Init Code\r\n");
   13020:	4b9f      	ldr	r3, [pc, #636]	; (132a0 <vControlHandlerTask+0x288>)
   13022:	0018      	movs	r0, r3
   13024:	4b9f      	ldr	r3, [pc, #636]	; (132a4 <vControlHandlerTask+0x28c>)
   13026:	4798      	blx	r3


srand(50);
   13028:	2032      	movs	r0, #50	; 0x32
   1302a:	4b9f      	ldr	r3, [pc, #636]	; (132a8 <vControlHandlerTask+0x290>)
   1302c:	4798      	blx	r3

//Initialize Queues
xQueueGameBufferIn = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   1302e:	2200      	movs	r2, #0
   13030:	2114      	movs	r1, #20
   13032:	2002      	movs	r0, #2
   13034:	4b9d      	ldr	r3, [pc, #628]	; (132ac <vControlHandlerTask+0x294>)
   13036:	4798      	blx	r3
   13038:	0002      	movs	r2, r0
   1303a:	4b9d      	ldr	r3, [pc, #628]	; (132b0 <vControlHandlerTask+0x298>)
   1303c:	601a      	str	r2, [r3, #0]
xQueueRgbColorBuffer = xQueueCreate( 2, sizeof( struct RgbColorPacket ) );
   1303e:	2200      	movs	r2, #0
   13040:	2103      	movs	r1, #3
   13042:	2002      	movs	r0, #2
   13044:	4b99      	ldr	r3, [pc, #612]	; (132ac <vControlHandlerTask+0x294>)
   13046:	4798      	blx	r3
   13048:	0002      	movs	r2, r0
   1304a:	4b9a      	ldr	r3, [pc, #616]	; (132b4 <vControlHandlerTask+0x29c>)
   1304c:	601a      	str	r2, [r3, #0]

if(xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL){
   1304e:	4b98      	ldr	r3, [pc, #608]	; (132b0 <vControlHandlerTask+0x298>)
   13050:	681b      	ldr	r3, [r3, #0]
   13052:	2b00      	cmp	r3, #0
   13054:	d003      	beq.n	1305e <vControlHandlerTask+0x46>
   13056:	4b97      	ldr	r3, [pc, #604]	; (132b4 <vControlHandlerTask+0x29c>)
   13058:	681b      	ldr	r3, [r3, #0]
   1305a:	2b00      	cmp	r3, #0
   1305c:	d103      	bne.n	13066 <vControlHandlerTask+0x4e>
	SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
   1305e:	4b96      	ldr	r3, [pc, #600]	; (132b8 <vControlHandlerTask+0x2a0>)
   13060:	0018      	movs	r0, r3
   13062:	4b90      	ldr	r3, [pc, #576]	; (132a4 <vControlHandlerTask+0x28c>)
   13064:	4798      	blx	r3
}
controlState = CONTROL_WAIT_FOR_GAME; //Initial state
   13066:	4b95      	ldr	r3, [pc, #596]	; (132bc <vControlHandlerTask+0x2a4>)
   13068:	2200      	movs	r2, #0
   1306a:	701a      	strb	r2, [r3, #0]
i = 0;
   1306c:	4b94      	ldr	r3, [pc, #592]	; (132c0 <vControlHandlerTask+0x2a8>)
   1306e:	2200      	movs	r2, #0
   13070:	601a      	str	r2, [r3, #0]
while(1)
{
	switch(controlState)
   13072:	4b92      	ldr	r3, [pc, #584]	; (132bc <vControlHandlerTask+0x2a4>)
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	2b01      	cmp	r3, #1
   13078:	d033      	beq.n	130e2 <vControlHandlerTask+0xca>
   1307a:	2b02      	cmp	r3, #2
   1307c:	d100      	bne.n	13080 <vControlHandlerTask+0x68>
   1307e:	e108      	b.n	13292 <vControlHandlerTask+0x27a>
   13080:	2b00      	cmp	r3, #0
   13082:	d000      	beq.n	13086 <vControlHandlerTask+0x6e>
   13084:	e101      	b.n	1328a <vControlHandlerTask+0x272>
		
		SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
		break;
		*/
		//SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
		if(i == 0)
   13086:	4b8e      	ldr	r3, [pc, #568]	; (132c0 <vControlHandlerTask+0x2a8>)
   13088:	681b      	ldr	r3, [r3, #0]
   1308a:	2b00      	cmp	r3, #0
   1308c:	d000      	beq.n	13090 <vControlHandlerTask+0x78>
   1308e:	e102      	b.n	13296 <vControlHandlerTask+0x27e>
		{	
		//	SeesawSetLed(15,30,60,90); //Turn button 15 off
		//	SeesawOrderLedUpdate();
			SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
   13090:	4b8c      	ldr	r3, [pc, #560]	; (132c4 <vControlHandlerTask+0x2ac>)
   13092:	0018      	movs	r0, r3
   13094:	4b83      	ldr	r3, [pc, #524]	; (132a4 <vControlHandlerTask+0x28c>)
   13096:	4798      	blx	r3
			i++;
   13098:	4b89      	ldr	r3, [pc, #548]	; (132c0 <vControlHandlerTask+0x2a8>)
   1309a:	681b      	ldr	r3, [r3, #0]
   1309c:	1c5a      	adds	r2, r3, #1
   1309e:	4b88      	ldr	r3, [pc, #544]	; (132c0 <vControlHandlerTask+0x2a8>)
   130a0:	601a      	str	r2, [r3, #0]
			
		//	SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
		//	i++;
			for(int j = 0; j < 15; j++)
   130a2:	2300      	movs	r3, #0
   130a4:	60fb      	str	r3, [r7, #12]
   130a6:	e00b      	b.n	130c0 <vControlHandlerTask+0xa8>
			{
				SeesawSetLed(j,0,0,0); //Turn button 15 off
   130a8:	68fb      	ldr	r3, [r7, #12]
   130aa:	b2d8      	uxtb	r0, r3
   130ac:	2300      	movs	r3, #0
   130ae:	2200      	movs	r2, #0
   130b0:	2100      	movs	r1, #0
   130b2:	4c85      	ldr	r4, [pc, #532]	; (132c8 <vControlHandlerTask+0x2b0>)
   130b4:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   130b6:	4b85      	ldr	r3, [pc, #532]	; (132cc <vControlHandlerTask+0x2b4>)
   130b8:	4798      	blx	r3
			for(int j = 0; j < 15; j++)
   130ba:	68fb      	ldr	r3, [r7, #12]
   130bc:	3301      	adds	r3, #1
   130be:	60fb      	str	r3, [r7, #12]
   130c0:	68fb      	ldr	r3, [r7, #12]
   130c2:	2b0e      	cmp	r3, #14
   130c4:	ddf0      	ble.n	130a8 <vControlHandlerTask+0x90>
			}
			
			//Clear the buffer
			numEvent = SeesawGetKeypadCount();
   130c6:	4b82      	ldr	r3, [pc, #520]	; (132d0 <vControlHandlerTask+0x2b8>)
   130c8:	4798      	blx	r3
   130ca:	0003      	movs	r3, r0
   130cc:	001a      	movs	r2, r3
   130ce:	4b81      	ldr	r3, [pc, #516]	; (132d4 <vControlHandlerTask+0x2bc>)
   130d0:	601a      	str	r2, [r3, #0]
			SeesawReadKeypad(NULL, numEvent);
   130d2:	4b80      	ldr	r3, [pc, #512]	; (132d4 <vControlHandlerTask+0x2bc>)
   130d4:	681b      	ldr	r3, [r3, #0]
   130d6:	b2db      	uxtb	r3, r3
   130d8:	0019      	movs	r1, r3
   130da:	2000      	movs	r0, #0
   130dc:	4b7e      	ldr	r3, [pc, #504]	; (132d8 <vControlHandlerTask+0x2c0>)
   130de:	4798      	blx	r3
		}

		break;
   130e0:	e0d9      	b.n	13296 <vControlHandlerTask+0x27e>
	}

	case (CONTROL_PLAYING_MOVE):
	{	
		
		total_input= 0;
   130e2:	4b7e      	ldr	r3, [pc, #504]	; (132dc <vControlHandlerTask+0x2c4>)
   130e4:	2200      	movs	r2, #0
   130e6:	601a      	str	r2, [r3, #0]
		//while loop for read six input from keypad
		while(total_input < 6)
   130e8:	e085      	b.n	131f6 <vControlHandlerTask+0x1de>
		{
			numEvent = SeesawGetKeypadCount();
   130ea:	4b79      	ldr	r3, [pc, #484]	; (132d0 <vControlHandlerTask+0x2b8>)
   130ec:	4798      	blx	r3
   130ee:	0003      	movs	r3, r0
   130f0:	001a      	movs	r2, r3
   130f2:	4b78      	ldr	r3, [pc, #480]	; (132d4 <vControlHandlerTask+0x2bc>)
   130f4:	601a      	str	r2, [r3, #0]
			
			if(numEvent != 0)
   130f6:	4b77      	ldr	r3, [pc, #476]	; (132d4 <vControlHandlerTask+0x2bc>)
   130f8:	681b      	ldr	r3, [r3, #0]
   130fa:	2b00      	cmp	r3, #0
   130fc:	d100      	bne.n	13100 <vControlHandlerTask+0xe8>
   130fe:	e07a      	b.n	131f6 <vControlHandlerTask+0x1de>
			{
				//load the events of keypad
				SeesawReadKeypad(&eventBuffer, numEvent);
   13100:	4b74      	ldr	r3, [pc, #464]	; (132d4 <vControlHandlerTask+0x2bc>)
   13102:	681b      	ldr	r3, [r3, #0]
   13104:	b2da      	uxtb	r2, r3
   13106:	4b76      	ldr	r3, [pc, #472]	; (132e0 <vControlHandlerTask+0x2c8>)
   13108:	0011      	movs	r1, r2
   1310a:	0018      	movs	r0, r3
   1310c:	4b72      	ldr	r3, [pc, #456]	; (132d8 <vControlHandlerTask+0x2c0>)
   1310e:	4798      	blx	r3
				for(i = 0;i < numEvent; i++)
   13110:	4b6b      	ldr	r3, [pc, #428]	; (132c0 <vControlHandlerTask+0x2a8>)
   13112:	2200      	movs	r2, #0
   13114:	601a      	str	r2, [r3, #0]
   13116:	e068      	b.n	131ea <vControlHandlerTask+0x1d2>
				{
					ledNum = NEO_TRELLIS_SEESAW_KEY(eventBuffer[i]>>2);
   13118:	4b69      	ldr	r3, [pc, #420]	; (132c0 <vControlHandlerTask+0x2a8>)
   1311a:	681b      	ldr	r3, [r3, #0]
   1311c:	4a70      	ldr	r2, [pc, #448]	; (132e0 <vControlHandlerTask+0x2c8>)
   1311e:	5cd3      	ldrb	r3, [r2, r3]
   13120:	089b      	lsrs	r3, r3, #2
   13122:	b2db      	uxtb	r3, r3
   13124:	08db      	lsrs	r3, r3, #3
   13126:	b2db      	uxtb	r3, r3
   13128:	009a      	lsls	r2, r3, #2
   1312a:	4b65      	ldr	r3, [pc, #404]	; (132c0 <vControlHandlerTask+0x2a8>)
   1312c:	681b      	ldr	r3, [r3, #0]
   1312e:	496c      	ldr	r1, [pc, #432]	; (132e0 <vControlHandlerTask+0x2c8>)
   13130:	5ccb      	ldrb	r3, [r1, r3]
   13132:	089b      	lsrs	r3, r3, #2
   13134:	b2db      	uxtb	r3, r3
   13136:	0019      	movs	r1, r3
   13138:	2307      	movs	r3, #7
   1313a:	400b      	ands	r3, r1
   1313c:	18d2      	adds	r2, r2, r3
   1313e:	4b69      	ldr	r3, [pc, #420]	; (132e4 <vControlHandlerTask+0x2cc>)
   13140:	601a      	str	r2, [r3, #0]
					//using mask to get the last two bits
					temp_act = (eventBuffer[i] & 0x03);
   13142:	4b5f      	ldr	r3, [pc, #380]	; (132c0 <vControlHandlerTask+0x2a8>)
   13144:	681b      	ldr	r3, [r3, #0]
   13146:	4a66      	ldr	r2, [pc, #408]	; (132e0 <vControlHandlerTask+0x2c8>)
   13148:	5cd3      	ldrb	r3, [r2, r3]
   1314a:	001a      	movs	r2, r3
   1314c:	2303      	movs	r3, #3
   1314e:	401a      	ands	r2, r3
   13150:	4b65      	ldr	r3, [pc, #404]	; (132e8 <vControlHandlerTask+0x2d0>)
   13152:	601a      	str	r2, [r3, #0]
					

					if(temp_act == 2)
   13154:	4b64      	ldr	r3, [pc, #400]	; (132e8 <vControlHandlerTask+0x2d0>)
   13156:	681b      	ldr	r3, [r3, #0]
   13158:	2b02      	cmp	r3, #2
   1315a:	d10a      	bne.n	13172 <vControlHandlerTask+0x15a>
					{
						
						SeesawSetLed(ledNum, 0, 0, 0);
   1315c:	4b61      	ldr	r3, [pc, #388]	; (132e4 <vControlHandlerTask+0x2cc>)
   1315e:	681b      	ldr	r3, [r3, #0]
   13160:	b2d8      	uxtb	r0, r3
   13162:	2300      	movs	r3, #0
   13164:	2200      	movs	r2, #0
   13166:	2100      	movs	r1, #0
   13168:	4c57      	ldr	r4, [pc, #348]	; (132c8 <vControlHandlerTask+0x2b0>)
   1316a:	47a0      	blx	r4
						SeesawOrderLedUpdate();
   1316c:	4b57      	ldr	r3, [pc, #348]	; (132cc <vControlHandlerTask+0x2b4>)
   1316e:	4798      	blx	r3
   13170:	e036      	b.n	131e0 <vControlHandlerTask+0x1c8>
						
					}
					else if(temp_act == 3)
   13172:	4b5d      	ldr	r3, [pc, #372]	; (132e8 <vControlHandlerTask+0x2d0>)
   13174:	681b      	ldr	r3, [r3, #0]
   13176:	2b03      	cmp	r3, #3
   13178:	d131      	bne.n	131de <vControlHandlerTask+0x1c6>
					{
						SeesawSetLed(ledNum, 50, 60, 170);
   1317a:	4b5a      	ldr	r3, [pc, #360]	; (132e4 <vControlHandlerTask+0x2cc>)
   1317c:	681b      	ldr	r3, [r3, #0]
   1317e:	b2d8      	uxtb	r0, r3
   13180:	23aa      	movs	r3, #170	; 0xaa
   13182:	223c      	movs	r2, #60	; 0x3c
   13184:	2132      	movs	r1, #50	; 0x32
   13186:	4c50      	ldr	r4, [pc, #320]	; (132c8 <vControlHandlerTask+0x2b0>)
   13188:	47a0      	blx	r4
						SeesawOrderLedUpdate();
   1318a:	4b50      	ldr	r3, [pc, #320]	; (132cc <vControlHandlerTask+0x2b4>)
   1318c:	4798      	blx	r3
						
						vTaskDelay(40);
   1318e:	2028      	movs	r0, #40	; 0x28
   13190:	4b56      	ldr	r3, [pc, #344]	; (132ec <vControlHandlerTask+0x2d4>)
   13192:	4798      	blx	r3
						snprintf(buffer,63, "current input is %d\r\n", ledNum+1);
   13194:	4b53      	ldr	r3, [pc, #332]	; (132e4 <vControlHandlerTask+0x2cc>)
   13196:	681b      	ldr	r3, [r3, #0]
   13198:	3301      	adds	r3, #1
   1319a:	4a55      	ldr	r2, [pc, #340]	; (132f0 <vControlHandlerTask+0x2d8>)
   1319c:	4855      	ldr	r0, [pc, #340]	; (132f4 <vControlHandlerTask+0x2dc>)
   1319e:	213f      	movs	r1, #63	; 0x3f
   131a0:	4c55      	ldr	r4, [pc, #340]	; (132f8 <vControlHandlerTask+0x2e0>)
   131a2:	47a0      	blx	r4
						SerialConsoleWriteString(buffer);
   131a4:	4b53      	ldr	r3, [pc, #332]	; (132f4 <vControlHandlerTask+0x2dc>)
   131a6:	0018      	movs	r0, r3
   131a8:	4b3e      	ldr	r3, [pc, #248]	; (132a4 <vControlHandlerTask+0x28c>)
   131aa:	4798      	blx	r3
						SendRealTimeUserGameInput(2, ledNum+1, 1);
   131ac:	4b4d      	ldr	r3, [pc, #308]	; (132e4 <vControlHandlerTask+0x2cc>)
   131ae:	681b      	ldr	r3, [r3, #0]
   131b0:	3301      	adds	r3, #1
   131b2:	2201      	movs	r2, #1
   131b4:	0019      	movs	r1, r3
   131b6:	2002      	movs	r0, #2
   131b8:	4b50      	ldr	r3, [pc, #320]	; (132fc <vControlHandlerTask+0x2e4>)
   131ba:	4798      	blx	r3
						vTaskDelay(40);
   131bc:	2028      	movs	r0, #40	; 0x28
   131be:	4b4b      	ldr	r3, [pc, #300]	; (132ec <vControlHandlerTask+0x2d4>)
   131c0:	4798      	blx	r3
						
						//SerialConsoleWriteString(buffer);
						steps[total_input] = ledNum + 1;
   131c2:	4b46      	ldr	r3, [pc, #280]	; (132dc <vControlHandlerTask+0x2c4>)
   131c4:	681a      	ldr	r2, [r3, #0]
   131c6:	4b47      	ldr	r3, [pc, #284]	; (132e4 <vControlHandlerTask+0x2cc>)
   131c8:	681b      	ldr	r3, [r3, #0]
   131ca:	1c59      	adds	r1, r3, #1
   131cc:	4b4c      	ldr	r3, [pc, #304]	; (13300 <vControlHandlerTask+0x2e8>)
   131ce:	0092      	lsls	r2, r2, #2
   131d0:	50d1      	str	r1, [r2, r3]
						total_input += 1;
   131d2:	4b42      	ldr	r3, [pc, #264]	; (132dc <vControlHandlerTask+0x2c4>)
   131d4:	681b      	ldr	r3, [r3, #0]
   131d6:	1c5a      	adds	r2, r3, #1
   131d8:	4b40      	ldr	r3, [pc, #256]	; (132dc <vControlHandlerTask+0x2c4>)
   131da:	601a      	str	r2, [r3, #0]
   131dc:	e000      	b.n	131e0 <vControlHandlerTask+0x1c8>
						
					}
					else continue;
   131de:	46c0      	nop			; (mov r8, r8)
				for(i = 0;i < numEvent; i++)
   131e0:	4b37      	ldr	r3, [pc, #220]	; (132c0 <vControlHandlerTask+0x2a8>)
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	1c5a      	adds	r2, r3, #1
   131e6:	4b36      	ldr	r3, [pc, #216]	; (132c0 <vControlHandlerTask+0x2a8>)
   131e8:	601a      	str	r2, [r3, #0]
   131ea:	4b35      	ldr	r3, [pc, #212]	; (132c0 <vControlHandlerTask+0x2a8>)
   131ec:	681a      	ldr	r2, [r3, #0]
   131ee:	4b39      	ldr	r3, [pc, #228]	; (132d4 <vControlHandlerTask+0x2bc>)
   131f0:	681b      	ldr	r3, [r3, #0]
   131f2:	429a      	cmp	r2, r3
   131f4:	db90      	blt.n	13118 <vControlHandlerTask+0x100>
		while(total_input < 6)
   131f6:	4b39      	ldr	r3, [pc, #228]	; (132dc <vControlHandlerTask+0x2c4>)
   131f8:	681b      	ldr	r3, [r3, #0]
   131fa:	2b05      	cmp	r3, #5
   131fc:	dc00      	bgt.n	13200 <vControlHandlerTask+0x1e8>
   131fe:	e774      	b.n	130ea <vControlHandlerTask+0xd2>
			}
			

		}
		
		SeesawSetLed(ledNum, 0, 0, 0);
   13200:	4b38      	ldr	r3, [pc, #224]	; (132e4 <vControlHandlerTask+0x2cc>)
   13202:	681b      	ldr	r3, [r3, #0]
   13204:	b2d8      	uxtb	r0, r3
   13206:	2300      	movs	r3, #0
   13208:	2200      	movs	r2, #0
   1320a:	2100      	movs	r1, #0
   1320c:	4c2e      	ldr	r4, [pc, #184]	; (132c8 <vControlHandlerTask+0x2b0>)
   1320e:	47a0      	blx	r4
		SeesawOrderLedUpdate();
   13210:	4b2e      	ldr	r3, [pc, #184]	; (132cc <vControlHandlerTask+0x2b4>)
   13212:	4798      	blx	r3
		vTaskDelay(40);
   13214:	2028      	movs	r0, #40	; 0x28
   13216:	4b35      	ldr	r3, [pc, #212]	; (132ec <vControlHandlerTask+0x2d4>)
   13218:	4798      	blx	r3
		snprintf(buffer,63,"%d,%d,%d,%d,%d,%d", steps[0], steps[1],steps[2],steps[3],steps[4],steps[5]);
   1321a:	4b39      	ldr	r3, [pc, #228]	; (13300 <vControlHandlerTask+0x2e8>)
   1321c:	681b      	ldr	r3, [r3, #0]
   1321e:	469c      	mov	ip, r3
   13220:	4b37      	ldr	r3, [pc, #220]	; (13300 <vControlHandlerTask+0x2e8>)
   13222:	685a      	ldr	r2, [r3, #4]
   13224:	4b36      	ldr	r3, [pc, #216]	; (13300 <vControlHandlerTask+0x2e8>)
   13226:	6899      	ldr	r1, [r3, #8]
   13228:	4b35      	ldr	r3, [pc, #212]	; (13300 <vControlHandlerTask+0x2e8>)
   1322a:	68d8      	ldr	r0, [r3, #12]
   1322c:	4b34      	ldr	r3, [pc, #208]	; (13300 <vControlHandlerTask+0x2e8>)
   1322e:	691c      	ldr	r4, [r3, #16]
   13230:	4b33      	ldr	r3, [pc, #204]	; (13300 <vControlHandlerTask+0x2e8>)
   13232:	695b      	ldr	r3, [r3, #20]
   13234:	4e33      	ldr	r6, [pc, #204]	; (13304 <vControlHandlerTask+0x2ec>)
   13236:	4d2f      	ldr	r5, [pc, #188]	; (132f4 <vControlHandlerTask+0x2dc>)
   13238:	9304      	str	r3, [sp, #16]
   1323a:	9403      	str	r4, [sp, #12]
   1323c:	9002      	str	r0, [sp, #8]
   1323e:	9101      	str	r1, [sp, #4]
   13240:	9200      	str	r2, [sp, #0]
   13242:	4663      	mov	r3, ip
   13244:	0032      	movs	r2, r6
   13246:	213f      	movs	r1, #63	; 0x3f
   13248:	0028      	movs	r0, r5
   1324a:	4c2b      	ldr	r4, [pc, #172]	; (132f8 <vControlHandlerTask+0x2e0>)
   1324c:	47a0      	blx	r4
		SerialConsoleWriteString("The usr2 input is the following");
   1324e:	4b2e      	ldr	r3, [pc, #184]	; (13308 <vControlHandlerTask+0x2f0>)
   13250:	0018      	movs	r0, r3
   13252:	4b14      	ldr	r3, [pc, #80]	; (132a4 <vControlHandlerTask+0x28c>)
   13254:	4798      	blx	r3
		SerialConsoleWriteString(buffer);
   13256:	4b27      	ldr	r3, [pc, #156]	; (132f4 <vControlHandlerTask+0x2dc>)
   13258:	0018      	movs	r0, r3
   1325a:	4b12      	ldr	r3, [pc, #72]	; (132a4 <vControlHandlerTask+0x28c>)
   1325c:	4798      	blx	r3
		vTaskDelay(40);
   1325e:	2028      	movs	r0, #40	; 0x28
   13260:	4b22      	ldr	r3, [pc, #136]	; (132ec <vControlHandlerTask+0x2d4>)
   13262:	4798      	blx	r3
		if(strncmp(buffer, usr2_ans, 63) == 0)
   13264:	4929      	ldr	r1, [pc, #164]	; (1330c <vControlHandlerTask+0x2f4>)
   13266:	4b23      	ldr	r3, [pc, #140]	; (132f4 <vControlHandlerTask+0x2dc>)
   13268:	223f      	movs	r2, #63	; 0x3f
   1326a:	0018      	movs	r0, r3
   1326c:	4b28      	ldr	r3, [pc, #160]	; (13310 <vControlHandlerTask+0x2f8>)
   1326e:	4798      	blx	r3
   13270:	1e03      	subs	r3, r0, #0
   13272:	d103      	bne.n	1327c <vControlHandlerTask+0x264>
		SendGameResult(2);
   13274:	2002      	movs	r0, #2
   13276:	4b27      	ldr	r3, [pc, #156]	; (13314 <vControlHandlerTask+0x2fc>)
   13278:	4798      	blx	r3
   1327a:	e002      	b.n	13282 <vControlHandlerTask+0x26a>
		else
		SendGameResult(1);
   1327c:	2001      	movs	r0, #1
   1327e:	4b25      	ldr	r3, [pc, #148]	; (13314 <vControlHandlerTask+0x2fc>)
   13280:	4798      	blx	r3
		controlState = CONTROL_WAIT_FOR_GAME;
   13282:	4b0e      	ldr	r3, [pc, #56]	; (132bc <vControlHandlerTask+0x2a4>)
   13284:	2200      	movs	r2, #0
   13286:	701a      	strb	r2, [r3, #0]
		
		break;
   13288:	e006      	b.n	13298 <vControlHandlerTask+0x280>
		break;
	}


	default:
		controlState = CONTROL_WAIT_FOR_GAME;
   1328a:	4b0c      	ldr	r3, [pc, #48]	; (132bc <vControlHandlerTask+0x2a4>)
   1328c:	2200      	movs	r2, #0
   1328e:	701a      	strb	r2, [r3, #0]
	break;
   13290:	e002      	b.n	13298 <vControlHandlerTask+0x280>
		break;
   13292:	46c0      	nop			; (mov r8, r8)
   13294:	e000      	b.n	13298 <vControlHandlerTask+0x280>
		break;
   13296:	46c0      	nop			; (mov r8, r8)



	}
vTaskDelay(40);
   13298:	2028      	movs	r0, #40	; 0x28
   1329a:	4b14      	ldr	r3, [pc, #80]	; (132ec <vControlHandlerTask+0x2d4>)
   1329c:	4798      	blx	r3
	switch(controlState)
   1329e:	e6e8      	b.n	13072 <vControlHandlerTask+0x5a>
   132a0:	00027b44 	.word	0x00027b44
   132a4:	00018f6d 	.word	0x00018f6d
   132a8:	00026489 	.word	0x00026489
   132ac:	00016b2d 	.word	0x00016b2d
   132b0:	20000444 	.word	0x20000444
   132b4:	20000448 	.word	0x20000448
   132b8:	00027b64 	.word	0x00027b64
   132bc:	20004278 	.word	0x20004278
   132c0:	200041ec 	.word	0x200041ec
   132c4:	00027b90 	.word	0x00027b90
   132c8:	000139d9 	.word	0x000139d9
   132cc:	00013a11 	.word	0x00013a11
   132d0:	000138ed 	.word	0x000138ed
   132d4:	20004230 	.word	0x20004230
   132d8:	0001393d 	.word	0x0001393d
   132dc:	20004234 	.word	0x20004234
   132e0:	200041c0 	.word	0x200041c0
   132e4:	200041e4 	.word	0x200041e4
   132e8:	200041e0 	.word	0x200041e0
   132ec:	000180f5 	.word	0x000180f5
   132f0:	00027bc4 	.word	0x00027bc4
   132f4:	200041f0 	.word	0x200041f0
   132f8:	00026509 	.word	0x00026509
   132fc:	000146b1 	.word	0x000146b1
   13300:	200041c8 	.word	0x200041c8
   13304:	00027bdc 	.word	0x00027bdc
   13308:	00027bf0 	.word	0x00027bf0
   1330c:	20004238 	.word	0x20004238
   13310:	00026675 	.word	0x00026675
   13314:	00014729 	.word	0x00014729

00013318 <ControlAddGameData>:
* @return		Returns pdTrue if data can be added to queue, 0 if queue is full
* @note         

*****************************************************************************/
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13318:	b590      	push	{r4, r7, lr}
   1331a:	b085      	sub	sp, #20
   1331c:	af00      	add	r7, sp, #0
   1331e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBufferIn , gameIn, ( TickType_t ) 10);
   13320:	4b06      	ldr	r3, [pc, #24]	; (1333c <ControlAddGameData+0x24>)
   13322:	6818      	ldr	r0, [r3, #0]
   13324:	6879      	ldr	r1, [r7, #4]
   13326:	2300      	movs	r3, #0
   13328:	220a      	movs	r2, #10
   1332a:	4c05      	ldr	r4, [pc, #20]	; (13340 <ControlAddGameData+0x28>)
   1332c:	47a0      	blx	r4
   1332e:	0003      	movs	r3, r0
   13330:	60fb      	str	r3, [r7, #12]
	return error;
   13332:	68fb      	ldr	r3, [r7, #12]
}
   13334:	0018      	movs	r0, r3
   13336:	46bd      	mov	sp, r7
   13338:	b005      	add	sp, #20
   1333a:	bd90      	pop	{r4, r7, pc}
   1333c:	20000444 	.word	0x20000444
   13340:	00016c69 	.word	0x00016c69

00013344 <StartJXGameP2>:

void StartJXGameP2(void* msg, int msg_len)
{	
   13344:	b580      	push	{r7, lr}
   13346:	b082      	sub	sp, #8
   13348:	af00      	add	r7, sp, #0
   1334a:	6078      	str	r0, [r7, #4]
   1334c:	6039      	str	r1, [r7, #0]
	
	memcpy(usr2_ans, msg,msg_len);
   1334e:	683a      	ldr	r2, [r7, #0]
   13350:	6879      	ldr	r1, [r7, #4]
   13352:	4b09      	ldr	r3, [pc, #36]	; (13378 <StartJXGameP2+0x34>)
   13354:	0018      	movs	r0, r3
   13356:	4b09      	ldr	r3, [pc, #36]	; (1337c <StartJXGameP2+0x38>)
   13358:	4798      	blx	r3
	SerialConsoleWriteString("Received Game on instruction! \r\n");
   1335a:	4b09      	ldr	r3, [pc, #36]	; (13380 <StartJXGameP2+0x3c>)
   1335c:	0018      	movs	r0, r3
   1335e:	4b09      	ldr	r3, [pc, #36]	; (13384 <StartJXGameP2+0x40>)
   13360:	4798      	blx	r3
	SerialConsoleWriteString(usr2_ans);
   13362:	4b05      	ldr	r3, [pc, #20]	; (13378 <StartJXGameP2+0x34>)
   13364:	0018      	movs	r0, r3
   13366:	4b07      	ldr	r3, [pc, #28]	; (13384 <StartJXGameP2+0x40>)
   13368:	4798      	blx	r3
	controlState = CONTROL_PLAYING_MOVE;
   1336a:	4b07      	ldr	r3, [pc, #28]	; (13388 <StartJXGameP2+0x44>)
   1336c:	2201      	movs	r2, #1
   1336e:	701a      	strb	r2, [r3, #0]
	
}
   13370:	46c0      	nop			; (mov r8, r8)
   13372:	46bd      	mov	sp, r7
   13374:	b002      	add	sp, #8
   13376:	bd80      	pop	{r7, pc}
   13378:	20004238 	.word	0x20004238
   1337c:	0002621d 	.word	0x0002621d
   13380:	00027c10 	.word	0x00027c10
   13384:	00018f6d 	.word	0x00018f6d
   13388:	20004278 	.word	0x20004278

0001338c <DistanceSensorGetDistance>:
* @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
* @brief		Gets the distance from the distance sensor.
* @note			Returns 0 if successful. -1 if an error occurred
*****************************************************************************/
int32_t DistanceSensorGetDistance (uint16_t *distance, const TickType_t xMaxBlockTime)
{
   1338c:	b570      	push	{r4, r5, r6, lr}
   1338e:	0006      	movs	r6, r0
   13390:	000d      	movs	r5, r1
 * @note        
 *****************************************************************************/
static int32_t DistanceSensorGetMutex(TickType_t waitTime){
	
	int32_t error = ERROR_NONE;
	if(xSemaphoreTake( sensorDistanceMutexHandle, waitTime ) != pdTRUE)
   13392:	4b1f      	ldr	r3, [pc, #124]	; (13410 <DistanceSensorGetDistance+0x84>)
   13394:	6818      	ldr	r0, [r3, #0]
   13396:	2196      	movs	r1, #150	; 0x96
   13398:	0049      	lsls	r1, r1, #1
   1339a:	4b1e      	ldr	r3, [pc, #120]	; (13414 <DistanceSensorGetDistance+0x88>)
   1339c:	4798      	blx	r3
   1339e:	2801      	cmp	r0, #1
   133a0:	d12d      	bne.n	133fe <DistanceSensorGetDistance+0x72>
distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   133a2:	491d      	ldr	r1, [pc, #116]	; (13418 <DistanceSensorGetDistance+0x8c>)
   133a4:	2355      	movs	r3, #85	; 0x55
   133a6:	700b      	strb	r3, [r1, #0]
if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t*) &distTx, 1))
   133a8:	2201      	movs	r2, #1
   133aa:	481c      	ldr	r0, [pc, #112]	; (1341c <DistanceSensorGetDistance+0x90>)
   133ac:	4b1c      	ldr	r3, [pc, #112]	; (13420 <DistanceSensorGetDistance+0x94>)
   133ae:	4798      	blx	r3
error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   133b0:	2400      	movs	r4, #0
if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t*) &distTx, 1))
   133b2:	2800      	cmp	r0, #0
   133b4:	d008      	beq.n	133c8 <DistanceSensorGetDistance+0x3c>
	if( xSemaphoreGive( sensorDistanceMutexHandle ) != pdTRUE ){
   133b6:	4b16      	ldr	r3, [pc, #88]	; (13410 <DistanceSensorGetDistance+0x84>)
   133b8:	6818      	ldr	r0, [r3, #0]
   133ba:	2300      	movs	r3, #0
   133bc:	2200      	movs	r2, #0
   133be:	2100      	movs	r1, #0
   133c0:	4d18      	ldr	r5, [pc, #96]	; (13424 <DistanceSensorGetDistance+0x98>)
   133c2:	47a8      	blx	r5
}
   133c4:	0020      	movs	r0, r4
   133c6:	bd70      	pop	{r4, r5, r6, pc}
if( xSemaphoreTake( sensorDistanceSemaphoreHandle, xMaxBlockTime ) == pdTRUE ){
   133c8:	4b17      	ldr	r3, [pc, #92]	; (13428 <DistanceSensorGetDistance+0x9c>)
   133ca:	6818      	ldr	r0, [r3, #0]
   133cc:	0029      	movs	r1, r5
   133ce:	4b11      	ldr	r3, [pc, #68]	; (13414 <DistanceSensorGetDistance+0x88>)
   133d0:	4798      	blx	r3
   133d2:	2801      	cmp	r0, #1
   133d4:	d116      	bne.n	13404 <DistanceSensorGetDistance+0x78>
usart_read_buffer_job(&usart_instance_dist, (uint8_t*) &latestRxDistance, 2);	//Kicks off constant reading of characters
   133d6:	2202      	movs	r2, #2
   133d8:	4914      	ldr	r1, [pc, #80]	; (1342c <DistanceSensorGetDistance+0xa0>)
   133da:	4810      	ldr	r0, [pc, #64]	; (1341c <DistanceSensorGetDistance+0x90>)
   133dc:	4b14      	ldr	r3, [pc, #80]	; (13430 <DistanceSensorGetDistance+0xa4>)
   133de:	4798      	blx	r3
if( xSemaphoreTake( sensorDistanceSemaphoreHandle, xMaxBlockTime ) == pdTRUE ){
   133e0:	4b11      	ldr	r3, [pc, #68]	; (13428 <DistanceSensorGetDistance+0x9c>)
   133e2:	6818      	ldr	r0, [r3, #0]
   133e4:	0029      	movs	r1, r5
   133e6:	4b0b      	ldr	r3, [pc, #44]	; (13414 <DistanceSensorGetDistance+0x88>)
   133e8:	4798      	blx	r3
   133ea:	2801      	cmp	r0, #1
   133ec:	d10d      	bne.n	1340a <DistanceSensorGetDistance+0x7e>
	*distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   133ee:	490f      	ldr	r1, [pc, #60]	; (1342c <DistanceSensorGetDistance+0xa0>)
   133f0:	780a      	ldrb	r2, [r1, #0]
   133f2:	0212      	lsls	r2, r2, #8
   133f4:	784b      	ldrb	r3, [r1, #1]
   133f6:	189b      	adds	r3, r3, r2
   133f8:	8033      	strh	r3, [r6, #0]
error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   133fa:	2400      	movs	r4, #0
   133fc:	e7db      	b.n	133b6 <DistanceSensorGetDistance+0x2a>
	{
		error = ERROR_NOT_READY;
   133fe:	241d      	movs	r4, #29
   13400:	4264      	negs	r4, r4
   13402:	e7d8      	b.n	133b6 <DistanceSensorGetDistance+0x2a>
	error = ERR_TIMEOUT;
   13404:	2403      	movs	r4, #3
   13406:	4264      	negs	r4, r4
   13408:	e7d5      	b.n	133b6 <DistanceSensorGetDistance+0x2a>
	error = ERR_TIMEOUT;
   1340a:	2403      	movs	r4, #3
   1340c:	4264      	negs	r4, r4
   1340e:	e7d2      	b.n	133b6 <DistanceSensorGetDistance+0x2a>
   13410:	20004284 	.word	0x20004284
   13414:	00017611 	.word	0x00017611
   13418:	2000427e 	.word	0x2000427e
   1341c:	20004288 	.word	0x20004288
   13420:	0001e991 	.word	0x0001e991
   13424:	00016c69 	.word	0x00016c69
   13428:	20004280 	.word	0x20004280
   1342c:	2000427c 	.word	0x2000427c
   13430:	0001e9b1 	.word	0x0001e9b1

00013434 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   13434:	b510      	push	{r4, lr}
   13436:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13438:	2400      	movs	r4, #0
   1343a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   1343c:	4b07      	ldr	r3, [pc, #28]	; (1345c <I2cSensorsTxComplete+0x28>)
   1343e:	6818      	ldr	r0, [r3, #0]
   13440:	a901      	add	r1, sp, #4
   13442:	4b07      	ldr	r3, [pc, #28]	; (13460 <I2cSensorsTxComplete+0x2c>)
   13444:	4798      	blx	r3
	sensorTransmitError = false;
   13446:	4b07      	ldr	r3, [pc, #28]	; (13464 <I2cSensorsTxComplete+0x30>)
   13448:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   1344a:	9b01      	ldr	r3, [sp, #4]
   1344c:	2b00      	cmp	r3, #0
   1344e:	d003      	beq.n	13458 <I2cSensorsTxComplete+0x24>
   13450:	2280      	movs	r2, #128	; 0x80
   13452:	0552      	lsls	r2, r2, #21
   13454:	4b04      	ldr	r3, [pc, #16]	; (13468 <I2cSensorsTxComplete+0x34>)
   13456:	601a      	str	r2, [r3, #0]
}
   13458:	b002      	add	sp, #8
   1345a:	bd10      	pop	{r4, pc}
   1345c:	200042e8 	.word	0x200042e8
   13460:	000172f5 	.word	0x000172f5
   13464:	2000044c 	.word	0x2000044c
   13468:	e000ed04 	.word	0xe000ed04

0001346c <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   1346c:	b510      	push	{r4, lr}
   1346e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13470:	2400      	movs	r4, #0
   13472:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   13474:	4b07      	ldr	r3, [pc, #28]	; (13494 <I2cSensorsRxComplete+0x28>)
   13476:	6818      	ldr	r0, [r3, #0]
   13478:	a901      	add	r1, sp, #4
   1347a:	4b07      	ldr	r3, [pc, #28]	; (13498 <I2cSensorsRxComplete+0x2c>)
   1347c:	4798      	blx	r3
	sensorTransmitError = false;
   1347e:	4b07      	ldr	r3, [pc, #28]	; (1349c <I2cSensorsRxComplete+0x30>)
   13480:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   13482:	9b01      	ldr	r3, [sp, #4]
   13484:	2b00      	cmp	r3, #0
   13486:	d003      	beq.n	13490 <I2cSensorsRxComplete+0x24>
   13488:	2280      	movs	r2, #128	; 0x80
   1348a:	0552      	lsls	r2, r2, #21
   1348c:	4b04      	ldr	r3, [pc, #16]	; (134a0 <I2cSensorsRxComplete+0x34>)
   1348e:	601a      	str	r2, [r3, #0]
}
   13490:	b002      	add	sp, #8
   13492:	bd10      	pop	{r4, pc}
   13494:	200042e8 	.word	0x200042e8
   13498:	000172f5 	.word	0x000172f5
   1349c:	2000044c 	.word	0x2000044c
   134a0:	e000ed04 	.word	0xe000ed04

000134a4 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   134a4:	b510      	push	{r4, lr}
   134a6:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   134a8:	2400      	movs	r4, #0
   134aa:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   134ac:	4b07      	ldr	r3, [pc, #28]	; (134cc <I2cSensorsError+0x28>)
   134ae:	6818      	ldr	r0, [r3, #0]
   134b0:	a901      	add	r1, sp, #4
   134b2:	4b07      	ldr	r3, [pc, #28]	; (134d0 <I2cSensorsError+0x2c>)
   134b4:	4798      	blx	r3
	sensorTransmitError = false;
   134b6:	4b07      	ldr	r3, [pc, #28]	; (134d4 <I2cSensorsError+0x30>)
   134b8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	2b00      	cmp	r3, #0
   134be:	d003      	beq.n	134c8 <I2cSensorsError+0x24>
   134c0:	2280      	movs	r2, #128	; 0x80
   134c2:	0552      	lsls	r2, r2, #21
   134c4:	4b04      	ldr	r3, [pc, #16]	; (134d8 <I2cSensorsError+0x34>)
   134c6:	601a      	str	r2, [r3, #0]
}
   134c8:	b002      	add	sp, #8
   134ca:	bd10      	pop	{r4, pc}
   134cc:	200042e8 	.word	0x200042e8
   134d0:	000172f5 	.word	0x000172f5
   134d4:	2000044c 	.word	0x2000044c
   134d8:	e000ed04 	.word	0xe000ed04

000134dc <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   134dc:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   134de:	4c0c      	ldr	r4, [pc, #48]	; (13510 <I2cDriverRegisterSensorBusCallbacks+0x34>)
   134e0:	2200      	movs	r2, #0
   134e2:	490c      	ldr	r1, [pc, #48]	; (13514 <I2cDriverRegisterSensorBusCallbacks+0x38>)
   134e4:	0020      	movs	r0, r4
   134e6:	4d0c      	ldr	r5, [pc, #48]	; (13518 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
   134e8:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   134ea:	7e63      	ldrb	r3, [r4, #25]
   134ec:	2201      	movs	r2, #1
   134ee:	4313      	orrs	r3, r2
   134f0:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   134f2:	490a      	ldr	r1, [pc, #40]	; (1351c <I2cDriverRegisterSensorBusCallbacks+0x40>)
   134f4:	0020      	movs	r0, r4
   134f6:	47a8      	blx	r5
   134f8:	7e63      	ldrb	r3, [r4, #25]
   134fa:	2202      	movs	r2, #2
   134fc:	4313      	orrs	r3, r2
   134fe:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   13500:	4907      	ldr	r1, [pc, #28]	; (13520 <I2cDriverRegisterSensorBusCallbacks+0x44>)
   13502:	0020      	movs	r0, r4
   13504:	47a8      	blx	r5
   13506:	7e63      	ldrb	r3, [r4, #25]
   13508:	2204      	movs	r2, #4
   1350a:	4313      	orrs	r3, r2
   1350c:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
   1350e:	bd70      	pop	{r4, r5, r6, pc}
   13510:	200042c0 	.word	0x200042c0
   13514:	00013435 	.word	0x00013435
   13518:	00012909 	.word	0x00012909
   1351c:	0001346d 	.word	0x0001346d
   13520:	000134a5 	.word	0x000134a5

00013524 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   13524:	b570      	push	{r4, r5, r6, lr}
   13526:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13528:	ab01      	add	r3, sp, #4
   1352a:	2264      	movs	r2, #100	; 0x64
   1352c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1352e:	4a33      	ldr	r2, [pc, #204]	; (135fc <I2cInitializeDriver+0xd8>)
   13530:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13532:	2200      	movs	r2, #0
   13534:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13536:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13538:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1353a:	2180      	movs	r1, #128	; 0x80
   1353c:	0389      	lsls	r1, r1, #14
   1353e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
   13540:	2101      	movs	r1, #1
   13542:	4249      	negs	r1, r1
   13544:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
   13546:	3125      	adds	r1, #37	; 0x25
   13548:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1354a:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1354c:	3108      	adds	r1, #8
   1354e:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13550:	3101      	adds	r1, #1
   13552:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
   13554:	3101      	adds	r1, #1
   13556:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13558:	32d7      	adds	r2, #215	; 0xd7
   1355a:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1355c:	4a28      	ldr	r2, [pc, #160]	; (13600 <I2cInitializeDriver+0xdc>)
   1355e:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13560:	4a28      	ldr	r2, [pc, #160]	; (13604 <I2cInitializeDriver+0xe0>)
   13562:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
   13564:	22fa      	movs	r2, #250	; 0xfa
   13566:	0092      	lsls	r2, r2, #2
   13568:	82da      	strh	r2, [r3, #22]
   1356a:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   1356c:	4d26      	ldr	r5, [pc, #152]	; (13608 <I2cInitializeDriver+0xe4>)
   1356e:	4e27      	ldr	r6, [pc, #156]	; (1360c <I2cInitializeDriver+0xe8>)
   13570:	aa01      	add	r2, sp, #4
   13572:	4927      	ldr	r1, [pc, #156]	; (13610 <I2cInitializeDriver+0xec>)
   13574:	0028      	movs	r0, r5
   13576:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
   13578:	2800      	cmp	r0, #0
   1357a:	d006      	beq.n	1358a <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
   1357c:	4822      	ldr	r0, [pc, #136]	; (13608 <I2cInitializeDriver+0xe4>)
   1357e:	4b25      	ldr	r3, [pc, #148]	; (13614 <I2cInitializeDriver+0xf0>)
   13580:	4798      	blx	r3
   13582:	3c01      	subs	r4, #1
   13584:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   13586:	2c00      	cmp	r4, #0
   13588:	d1f2      	bne.n	13570 <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358a:	4b1f      	ldr	r3, [pc, #124]	; (13608 <I2cInitializeDriver+0xe4>)
   1358c:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1358e:	2207      	movs	r2, #7
   13590:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   13592:	421a      	tst	r2, r3
   13594:	d1fc      	bne.n	13590 <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13596:	6823      	ldr	r3, [r4, #0]
   13598:	2202      	movs	r2, #2
   1359a:	4313      	orrs	r3, r2
   1359c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1359e:	4d1a      	ldr	r5, [pc, #104]	; (13608 <I2cInitializeDriver+0xe4>)
   135a0:	6828      	ldr	r0, [r5, #0]
   135a2:	4b1d      	ldr	r3, [pc, #116]	; (13618 <I2cInitializeDriver+0xf4>)
   135a4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   135a6:	231f      	movs	r3, #31
   135a8:	4018      	ands	r0, r3
   135aa:	3b1e      	subs	r3, #30
   135ac:	4083      	lsls	r3, r0
   135ae:	4a1b      	ldr	r2, [pc, #108]	; (1361c <I2cInitializeDriver+0xf8>)
   135b0:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   135b2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   135b4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   135b6:	2110      	movs	r1, #16
   135b8:	8b62      	ldrh	r2, [r4, #26]
   135ba:	420a      	tst	r2, r1
   135bc:	d104      	bne.n	135c8 <I2cInitializeDriver+0xa4>
		timeout_counter++;
   135be:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   135c0:	4283      	cmp	r3, r0
   135c2:	d3f9      	bcc.n	135b8 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   135c4:	2310      	movs	r3, #16
   135c6:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
   135c8:	4b15      	ldr	r3, [pc, #84]	; (13620 <I2cInitializeDriver+0xfc>)
   135ca:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   135cc:	2001      	movs	r0, #1
   135ce:	4b15      	ldr	r3, [pc, #84]	; (13624 <I2cInitializeDriver+0x100>)
   135d0:	4798      	blx	r3
   135d2:	4c15      	ldr	r4, [pc, #84]	; (13628 <I2cInitializeDriver+0x104>)
   135d4:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   135d6:	2203      	movs	r2, #3
   135d8:	2100      	movs	r1, #0
   135da:	2001      	movs	r0, #1
   135dc:	4b13      	ldr	r3, [pc, #76]	; (1362c <I2cInitializeDriver+0x108>)
   135de:	4798      	blx	r3
   135e0:	4b13      	ldr	r3, [pc, #76]	; (13630 <I2cInitializeDriver+0x10c>)
   135e2:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   135e4:	6823      	ldr	r3, [r4, #0]
   135e6:	2b00      	cmp	r3, #0
   135e8:	d004      	beq.n	135f4 <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
   135ea:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   135ec:	2800      	cmp	r0, #0
   135ee:	d102      	bne.n	135f6 <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   135f0:	3306      	adds	r3, #6
   135f2:	e000      	b.n	135f6 <I2cInitializeDriver+0xd2>
   135f4:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
   135f6:	0018      	movs	r0, r3
   135f8:	b00e      	add	sp, #56	; 0x38
   135fa:	bd70      	pop	{r4, r5, r6, pc}
   135fc:	00000d48 	.word	0x00000d48
   13600:	00080002 	.word	0x00080002
   13604:	00090002 	.word	0x00090002
   13608:	200042c0 	.word	0x200042c0
   1360c:	00014ccd 	.word	0x00014ccd
   13610:	42000800 	.word	0x42000800
   13614:	00014fc5 	.word	0x00014fc5
   13618:	0001de25 	.word	0x0001de25
   1361c:	e000e100 	.word	0xe000e100
   13620:	000134dd 	.word	0x000134dd
   13624:	00016f91 	.word	0x00016f91
   13628:	200042bc 	.word	0x200042bc
   1362c:	00016b2d 	.word	0x00016b2d
   13630:	200042e8 	.word	0x200042e8

00013634 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   13634:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   13636:	2800      	cmp	r0, #0
   13638:	d012      	beq.n	13660 <I2cWriteData+0x2c>
   1363a:	6843      	ldr	r3, [r0, #4]
   1363c:	2b00      	cmp	r3, #0
   1363e:	d012      	beq.n	13666 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   13640:	490a      	ldr	r1, [pc, #40]	; (1366c <I2cWriteData+0x38>)
   13642:	7802      	ldrb	r2, [r0, #0]
   13644:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   13646:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
   13648:	89c3      	ldrh	r3, [r0, #14]
   1364a:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1364c:	4808      	ldr	r0, [pc, #32]	; (13670 <I2cWriteData+0x3c>)
   1364e:	4b09      	ldr	r3, [pc, #36]	; (13674 <I2cWriteData+0x40>)
   13650:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   13652:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   13654:	2800      	cmp	r0, #0
   13656:	d101      	bne.n	1365c <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
   13658:	0018      	movs	r0, r3
   1365a:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   1365c:	3b06      	subs	r3, #6
   1365e:	e7fb      	b.n	13658 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
   13660:	2308      	movs	r3, #8
   13662:	425b      	negs	r3, r3
   13664:	e7f8      	b.n	13658 <I2cWriteData+0x24>
   13666:	2308      	movs	r3, #8
   13668:	425b      	negs	r3, r3
   1366a:	e7f5      	b.n	13658 <I2cWriteData+0x24>
   1366c:	200042ec 	.word	0x200042ec
   13670:	200042c0 	.word	0x200042c0
   13674:	00012945 	.word	0x00012945

00013678 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   13678:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   1367a:	2800      	cmp	r0, #0
   1367c:	d013      	beq.n	136a6 <I2cReadData+0x2e>
   1367e:	6843      	ldr	r3, [r0, #4]
   13680:	2b00      	cmp	r3, #0
   13682:	d013      	beq.n	136ac <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   13684:	490b      	ldr	r1, [pc, #44]	; (136b4 <I2cReadData+0x3c>)
   13686:	7803      	ldrb	r3, [r0, #0]
   13688:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
   1368a:	6883      	ldr	r3, [r0, #8]
   1368c:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
   1368e:	8983      	ldrh	r3, [r0, #12]
   13690:	804b      	strh	r3, [r1, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13692:	4809      	ldr	r0, [pc, #36]	; (136b8 <I2cReadData+0x40>)
   13694:	4b09      	ldr	r3, [pc, #36]	; (136bc <I2cReadData+0x44>)
   13696:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   13698:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   1369a:	2800      	cmp	r0, #0
   1369c:	d101      	bne.n	136a2 <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
   1369e:	0018      	movs	r0, r3
   136a0:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   136a2:	3b06      	subs	r3, #6
   136a4:	e7fb      	b.n	1369e <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
   136a6:	2308      	movs	r3, #8
   136a8:	425b      	negs	r3, r3
   136aa:	e7f8      	b.n	1369e <I2cReadData+0x26>
   136ac:	2308      	movs	r3, #8
   136ae:	425b      	negs	r3, r3
   136b0:	e7f5      	b.n	1369e <I2cReadData+0x26>
   136b2:	46c0      	nop			; (mov r8, r8)
   136b4:	200042ec 	.word	0x200042ec
   136b8:	200042c0 	.word	0x200042c0
   136bc:	00012921 	.word	0x00012921

000136c0 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   136c0:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   136c2:	4b07      	ldr	r3, [pc, #28]	; (136e0 <I2cFreeMutex+0x20>)
   136c4:	6818      	ldr	r0, [r3, #0]
   136c6:	2300      	movs	r3, #0
   136c8:	2200      	movs	r2, #0
   136ca:	2100      	movs	r1, #0
   136cc:	4c05      	ldr	r4, [pc, #20]	; (136e4 <I2cFreeMutex+0x24>)
   136ce:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
   136d0:	2300      	movs	r3, #0
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   136d2:	2801      	cmp	r0, #1
   136d4:	d101      	bne.n	136da <I2cFreeMutex+0x1a>
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
	}
	return error;
}
   136d6:	0018      	movs	r0, r3
   136d8:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
   136da:	3b14      	subs	r3, #20
   136dc:	e7fb      	b.n	136d6 <I2cFreeMutex+0x16>
   136de:	46c0      	nop			; (mov r8, r8)
   136e0:	200042bc 	.word	0x200042bc
   136e4:	00016c69 	.word	0x00016c69

000136e8 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   136e8:	b510      	push	{r4, lr}
   136ea:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   136ec:	4b05      	ldr	r3, [pc, #20]	; (13704 <I2cGetMutex+0x1c>)
   136ee:	6818      	ldr	r0, [r3, #0]
   136f0:	4b05      	ldr	r3, [pc, #20]	; (13708 <I2cGetMutex+0x20>)
   136f2:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   136f4:	2300      	movs	r3, #0
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   136f6:	2801      	cmp	r0, #1
   136f8:	d101      	bne.n	136fe <I2cGetMutex+0x16>
	{
		error = ERROR_NOT_READY;
	}
	return error;
}
   136fa:	0018      	movs	r0, r3
   136fc:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
   136fe:	3b1d      	subs	r3, #29
   13700:	e7fb      	b.n	136fa <I2cGetMutex+0x12>
   13702:	46c0      	nop			; (mov r8, r8)
   13704:	200042bc 	.word	0x200042bc
   13708:	00017611 	.word	0x00017611

0001370c <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   1370c:	b570      	push	{r4, r5, r6, lr}
   1370e:	0004      	movs	r4, r0
   13710:	000d      	movs	r5, r1
int32_t error = ERROR_NONE;
SemaphoreHandle_t semHandle = NULL;


//---0. Get Mutex
error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13712:	2096      	movs	r0, #150	; 0x96
   13714:	0040      	lsls	r0, r0, #1
   13716:	4b10      	ldr	r3, [pc, #64]	; (13758 <I2cWriteDataWait+0x4c>)
   13718:	4798      	blx	r3
if(ERROR_NONE != error) goto exit;
   1371a:	2800      	cmp	r0, #0
   1371c:	d000      	beq.n	13720 <I2cWriteDataWait+0x14>
exitError0:
error = I2cFreeMutex();
//xSemaphoreGive(semHandle);
return error;

}
   1371e:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
   13720:	4b0e      	ldr	r3, [pc, #56]	; (1375c <I2cWriteDataWait+0x50>)
   13722:	681e      	ldr	r6, [r3, #0]
error = I2cWriteData(data);
   13724:	0020      	movs	r0, r4
   13726:	4b0e      	ldr	r3, [pc, #56]	; (13760 <I2cWriteDataWait+0x54>)
   13728:	4798      	blx	r3
if (ERROR_NONE != error){
   1372a:	2800      	cmp	r0, #0
   1372c:	d105      	bne.n	1373a <I2cWriteDataWait+0x2e>
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1372e:	0029      	movs	r1, r5
   13730:	0030      	movs	r0, r6
   13732:	4b0c      	ldr	r3, [pc, #48]	; (13764 <I2cWriteDataWait+0x58>)
   13734:	4798      	blx	r3
   13736:	2801      	cmp	r0, #1
   13738:	d002      	beq.n	13740 <I2cWriteDataWait+0x34>
error = I2cFreeMutex();
   1373a:	4b0b      	ldr	r3, [pc, #44]	; (13768 <I2cWriteDataWait+0x5c>)
   1373c:	4798      	blx	r3
return error;
   1373e:	e7ee      	b.n	1371e <I2cWriteDataWait+0x12>
	 return sensorTransmitError;
   13740:	4b0a      	ldr	r3, [pc, #40]	; (1376c <I2cWriteDataWait+0x60>)
	if(I2cGetTaskErrorStatus()){
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2b00      	cmp	r3, #0
   13746:	d003      	beq.n	13750 <I2cWriteDataWait+0x44>
	sensorTransmitError = value;
   13748:	2200      	movs	r2, #0
   1374a:	4b08      	ldr	r3, [pc, #32]	; (1376c <I2cWriteDataWait+0x60>)
   1374c:	701a      	strb	r2, [r3, #0]
   1374e:	e7f4      	b.n	1373a <I2cWriteDataWait+0x2e>
error |= I2cFreeMutex();
   13750:	4b05      	ldr	r3, [pc, #20]	; (13768 <I2cWriteDataWait+0x5c>)
   13752:	4798      	blx	r3
   13754:	e7e3      	b.n	1371e <I2cWriteDataWait+0x12>
   13756:	46c0      	nop			; (mov r8, r8)
   13758:	000136e9 	.word	0x000136e9
   1375c:	200042e8 	.word	0x200042e8
   13760:	00013635 	.word	0x00013635
   13764:	00017611 	.word	0x00017611
   13768:	000136c1 	.word	0x000136c1
   1376c:	2000044c 	.word	0x2000044c

00013770 <I2cReadDataWait>:
 * @param[in]   delay Delay that the I2C device needs to return the response. Can be 0 if the response is ready instantly. It can be the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   13770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13772:	0004      	movs	r4, r0
   13774:	000e      	movs	r6, r1
   13776:	0015      	movs	r5, r2
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	

	//---0. Get Mutex
	error = I2cGetMutex( WAIT_I2C_LINE_MS);
   13778:	2096      	movs	r0, #150	; 0x96
   1377a:	0040      	lsls	r0, r0, #1
   1377c:	4b1a      	ldr	r3, [pc, #104]	; (137e8 <I2cReadDataWait+0x78>)
   1377e:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
   13780:	2800      	cmp	r0, #0
   13782:	d000      	beq.n	13786 <I2cReadDataWait+0x16>
	error = I2cFreeMutex();
	//xSemaphoreGive(semHandle);
	return error;

	
}
   13784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
   13786:	4b19      	ldr	r3, [pc, #100]	; (137ec <I2cReadDataWait+0x7c>)
   13788:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
   1378a:	0020      	movs	r0, r4
   1378c:	4b18      	ldr	r3, [pc, #96]	; (137f0 <I2cReadDataWait+0x80>)
   1378e:	4798      	blx	r3
	if (ERROR_NONE != error){
   13790:	2800      	cmp	r0, #0
   13792:	d105      	bne.n	137a0 <I2cReadDataWait+0x30>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   13794:	0029      	movs	r1, r5
   13796:	0038      	movs	r0, r7
   13798:	4b16      	ldr	r3, [pc, #88]	; (137f4 <I2cReadDataWait+0x84>)
   1379a:	4798      	blx	r3
   1379c:	2801      	cmp	r0, #1
   1379e:	d002      	beq.n	137a6 <I2cReadDataWait+0x36>
	error = I2cFreeMutex();
   137a0:	4b15      	ldr	r3, [pc, #84]	; (137f8 <I2cReadDataWait+0x88>)
   137a2:	4798      	blx	r3
	return error;
   137a4:	e7ee      	b.n	13784 <I2cReadDataWait+0x14>
	 return sensorTransmitError;
   137a6:	4b15      	ldr	r3, [pc, #84]	; (137fc <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
   137a8:	781b      	ldrb	r3, [r3, #0]
   137aa:	2b00      	cmp	r3, #0
   137ac:	d003      	beq.n	137b6 <I2cReadDataWait+0x46>
	sensorTransmitError = value;
   137ae:	2200      	movs	r2, #0
   137b0:	4b12      	ldr	r3, [pc, #72]	; (137fc <I2cReadDataWait+0x8c>)
   137b2:	701a      	strb	r2, [r3, #0]
   137b4:	e7f4      	b.n	137a0 <I2cReadDataWait+0x30>
		vTaskDelay( delay );
   137b6:	0030      	movs	r0, r6
   137b8:	4b11      	ldr	r3, [pc, #68]	; (13800 <I2cReadDataWait+0x90>)
   137ba:	4798      	blx	r3
	error = I2cReadData(data);
   137bc:	0020      	movs	r0, r4
   137be:	4b11      	ldr	r3, [pc, #68]	; (13804 <I2cReadDataWait+0x94>)
   137c0:	4798      	blx	r3
	if (ERROR_NONE != error){
   137c2:	2800      	cmp	r0, #0
   137c4:	d1ec      	bne.n	137a0 <I2cReadDataWait+0x30>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   137c6:	0029      	movs	r1, r5
   137c8:	0038      	movs	r0, r7
   137ca:	4b0a      	ldr	r3, [pc, #40]	; (137f4 <I2cReadDataWait+0x84>)
   137cc:	4798      	blx	r3
   137ce:	2801      	cmp	r0, #1
   137d0:	d1e6      	bne.n	137a0 <I2cReadDataWait+0x30>
	 return sensorTransmitError;
   137d2:	4b0a      	ldr	r3, [pc, #40]	; (137fc <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
   137d4:	781b      	ldrb	r3, [r3, #0]
   137d6:	2b00      	cmp	r3, #0
   137d8:	d003      	beq.n	137e2 <I2cReadDataWait+0x72>
	sensorTransmitError = value;
   137da:	2200      	movs	r2, #0
   137dc:	4b07      	ldr	r3, [pc, #28]	; (137fc <I2cReadDataWait+0x8c>)
   137de:	701a      	strb	r2, [r3, #0]
   137e0:	e7de      	b.n	137a0 <I2cReadDataWait+0x30>
	error = I2cFreeMutex();
   137e2:	4b05      	ldr	r3, [pc, #20]	; (137f8 <I2cReadDataWait+0x88>)
   137e4:	4798      	blx	r3
   137e6:	e7cd      	b.n	13784 <I2cReadDataWait+0x14>
   137e8:	000136e9 	.word	0x000136e9
   137ec:	200042e8 	.word	0x200042e8
   137f0:	00013635 	.word	0x00013635
   137f4:	00017611 	.word	0x00017611
   137f8:	000136c1 	.word	0x000136c1
   137fc:	2000044c 	.word	0x2000044c
   13800:	000180f5 	.word	0x000180f5
   13804:	00013679 	.word	0x00013679

00013808 <platform_read>:
return I2cWriteDataWait(&imuData, 100);

}

static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   13808:	b510      	push	{r4, lr}
   1380a:	b082      	sub	sp, #8
   1380c:	4668      	mov	r0, sp
   1380e:	1dc4      	adds	r4, r0, #7
   13810:	71c1      	strb	r1, [r0, #7]

imuData.address = (LSM6DS3_I2C_ADD_L>>1);
   13812:	4807      	ldr	r0, [pc, #28]	; (13830 <platform_read+0x28>)
   13814:	216a      	movs	r1, #106	; 0x6a
   13816:	7001      	strb	r1, [r0, #0]
imuData.msgOut = &reg;
   13818:	6044      	str	r4, [r0, #4]
imuData.msgIn = bufp;
   1381a:	6082      	str	r2, [r0, #8]
imuData.lenOut = 1;
   1381c:	2201      	movs	r2, #1
   1381e:	81c2      	strh	r2, [r0, #14]
imuData.lenIn = len;
   13820:	8183      	strh	r3, [r0, #12]
return I2cReadDataWait(&imuData,0, 100);
   13822:	3263      	adds	r2, #99	; 0x63
   13824:	2100      	movs	r1, #0
   13826:	4b03      	ldr	r3, [pc, #12]	; (13834 <platform_read+0x2c>)
   13828:	4798      	blx	r3


}
   1382a:	b002      	add	sp, #8
   1382c:	bd10      	pop	{r4, pc}
   1382e:	46c0      	nop			; (mov r8, r8)
   13830:	20004338 	.word	0x20004338
   13834:	00013771 	.word	0x00013771

00013838 <platform_write>:
{
   13838:	b570      	push	{r4, r5, r6, lr}
   1383a:	000e      	movs	r6, r1
   1383c:	0011      	movs	r1, r2
   1383e:	001d      	movs	r5, r3
memcpy(&msgOutImu[1],bufp,len);
   13840:	4c09      	ldr	r4, [pc, #36]	; (13868 <platform_write+0x30>)
   13842:	001a      	movs	r2, r3
   13844:	0020      	movs	r0, r4
   13846:	4b09      	ldr	r3, [pc, #36]	; (1386c <platform_write+0x34>)
   13848:	4798      	blx	r3
msgOutImu[0] = reg;
   1384a:	3c01      	subs	r4, #1
   1384c:	7026      	strb	r6, [r4, #0]
imuData.address = (LSM6DS3_I2C_ADD_L>>1);
   1384e:	4808      	ldr	r0, [pc, #32]	; (13870 <platform_write+0x38>)
   13850:	236a      	movs	r3, #106	; 0x6a
   13852:	7003      	strb	r3, [r0, #0]
imuData.msgOut = &msgOutImu;
   13854:	6044      	str	r4, [r0, #4]
imuData.lenOut = len+1; //+1 because we are adding the REG address.
   13856:	3501      	adds	r5, #1
   13858:	81c5      	strh	r5, [r0, #14]
imuData.lenIn = 0;
   1385a:	2300      	movs	r3, #0
   1385c:	8183      	strh	r3, [r0, #12]
return I2cWriteDataWait(&imuData, 100);
   1385e:	2164      	movs	r1, #100	; 0x64
   13860:	4b04      	ldr	r3, [pc, #16]	; (13874 <platform_write+0x3c>)
   13862:	4798      	blx	r3
}
   13864:	bd70      	pop	{r4, r5, r6, pc}
   13866:	46c0      	nop			; (mov r8, r8)
   13868:	200042f9 	.word	0x200042f9
   1386c:	0002621d 	.word	0x0002621d
   13870:	20004338 	.word	0x20004338
   13874:	0001370d 	.word	0x0001370d

00013878 <lsm6ds3_read_reg>:
{
   13878:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1387a:	6885      	ldr	r5, [r0, #8]
   1387c:	6844      	ldr	r4, [r0, #4]
   1387e:	0028      	movs	r0, r5
   13880:	47a0      	blx	r4
}
   13882:	bd70      	pop	{r4, r5, r6, pc}

00013884 <lsm6ds3_from_fs2g_to_mg>:
{
   13884:	b510      	push	{r4, lr}
  return ((float_t)lsb * 61.0f / 1000.0f);
   13886:	4b04      	ldr	r3, [pc, #16]	; (13898 <lsm6ds3_from_fs2g_to_mg+0x14>)
   13888:	4798      	blx	r3
   1388a:	4904      	ldr	r1, [pc, #16]	; (1389c <lsm6ds3_from_fs2g_to_mg+0x18>)
   1388c:	4b04      	ldr	r3, [pc, #16]	; (138a0 <lsm6ds3_from_fs2g_to_mg+0x1c>)
   1388e:	4798      	blx	r3
   13890:	4904      	ldr	r1, [pc, #16]	; (138a4 <lsm6ds3_from_fs2g_to_mg+0x20>)
   13892:	4b05      	ldr	r3, [pc, #20]	; (138a8 <lsm6ds3_from_fs2g_to_mg+0x24>)
   13894:	4798      	blx	r3
}
   13896:	bd10      	pop	{r4, pc}
   13898:	00024839 	.word	0x00024839
   1389c:	42740000 	.word	0x42740000
   138a0:	000245b9 	.word	0x000245b9
   138a4:	447a0000 	.word	0x447a0000
   138a8:	00024329 	.word	0x00024329

000138ac <lsm6ds3_xl_flag_data_ready_get>:
{
   138ac:	b570      	push	{r4, r5, r6, lr}
   138ae:	b082      	sub	sp, #8
   138b0:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
   138b2:	ac01      	add	r4, sp, #4
   138b4:	2301      	movs	r3, #1
   138b6:	0022      	movs	r2, r4
   138b8:	211e      	movs	r1, #30
   138ba:	4e04      	ldr	r6, [pc, #16]	; (138cc <lsm6ds3_xl_flag_data_ready_get+0x20>)
   138bc:	47b0      	blx	r6
  *val = (uint8_t)status_reg.xlda;
   138be:	7823      	ldrb	r3, [r4, #0]
   138c0:	07db      	lsls	r3, r3, #31
   138c2:	0fdb      	lsrs	r3, r3, #31
   138c4:	702b      	strb	r3, [r5, #0]
}
   138c6:	b002      	add	sp, #8
   138c8:	bd70      	pop	{r4, r5, r6, pc}
   138ca:	46c0      	nop			; (mov r8, r8)
   138cc:	00013879 	.word	0x00013879

000138d0 <lsm6ds3_acceleration_raw_get>:
{
   138d0:	b510      	push	{r4, lr}
   138d2:	000a      	movs	r2, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
   138d4:	2306      	movs	r3, #6
   138d6:	2128      	movs	r1, #40	; 0x28
   138d8:	4c01      	ldr	r4, [pc, #4]	; (138e0 <lsm6ds3_acceleration_raw_get+0x10>)
   138da:	47a0      	blx	r4
}
   138dc:	bd10      	pop	{r4, pc}
   138de:	46c0      	nop			; (mov r8, r8)
   138e0:	00013879 	.word	0x00013879

000138e4 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
   138e4:	4800      	ldr	r0, [pc, #0]	; (138e8 <GetImuStruct+0x4>)
   138e6:	4770      	bx	lr
   138e8:	20000014 	.word	0x20000014

000138ec <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
   138ec:	b500      	push	{lr}
   138ee:	b083      	sub	sp, #12
	uint8_t count = 0;
   138f0:	466b      	mov	r3, sp
   138f2:	2200      	movs	r2, #0
   138f4:	71da      	strb	r2, [r3, #7]
   138f6:	3307      	adds	r3, #7
	seesawData.address = NEO_TRELLIS_ADDR;
   138f8:	480b      	ldr	r0, [pc, #44]	; (13928 <SeesawGetKeypadCount+0x3c>)
   138fa:	322e      	adds	r2, #46	; 0x2e
   138fc:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &msgKeypadGetCount;
   138fe:	4a0b      	ldr	r2, [pc, #44]	; (1392c <SeesawGetKeypadCount+0x40>)
   13900:	6042      	str	r2, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
   13902:	2202      	movs	r2, #2
   13904:	81c2      	strh	r2, [r0, #14]
	seesawData.msgIn = &count;
   13906:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   13908:	2301      	movs	r3, #1
   1390a:	8183      	strh	r3, [r0, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   1390c:	3262      	adds	r2, #98	; 0x62
   1390e:	2100      	movs	r1, #0
   13910:	4b07      	ldr	r3, [pc, #28]	; (13930 <SeesawGetKeypadCount+0x44>)
   13912:	4798      	blx	r3

	if(ERROR_NONE != error)
   13914:	2800      	cmp	r0, #0
   13916:	d103      	bne.n	13920 <SeesawGetKeypadCount+0x34>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return count;
   13918:	466b      	mov	r3, sp
   1391a:	79d8      	ldrb	r0, [r3, #7]
}
   1391c:	b003      	add	sp, #12
   1391e:	bd00      	pop	{pc}
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   13920:	4804      	ldr	r0, [pc, #16]	; (13934 <SeesawGetKeypadCount+0x48>)
   13922:	4b05      	ldr	r3, [pc, #20]	; (13938 <SeesawGetKeypadCount+0x4c>)
   13924:	4798      	blx	r3
   13926:	e7f7      	b.n	13918 <SeesawGetKeypadCount+0x2c>
   13928:	20004348 	.word	0x20004348
   1392c:	00027d4c 	.word	0x00027d4c
   13930:	00013771 	.word	0x00013771
   13934:	00027d20 	.word	0x00027d20
   13938:	00018f6d 	.word	0x00018f6d

0001393c <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
   1393c:	b510      	push	{r4, lr}
   1393e:	b082      	sub	sp, #8
	if (count == 0) return ERROR_NONE;
   13940:	2300      	movs	r3, #0
   13942:	2900      	cmp	r1, #0
   13944:	d102      	bne.n	1394c <SeesawReadKeypad+0x10>
	if(ERROR_NONE != error)
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return error;
}
   13946:	0018      	movs	r0, r3
   13948:	b002      	add	sp, #8
   1394a:	bd10      	pop	{r4, pc}
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   1394c:	aa01      	add	r2, sp, #4
   1394e:	4b0c      	ldr	r3, [pc, #48]	; (13980 <SeesawReadKeypad+0x44>)
   13950:	881b      	ldrh	r3, [r3, #0]
   13952:	8013      	strh	r3, [r2, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   13954:	4b0b      	ldr	r3, [pc, #44]	; (13984 <SeesawReadKeypad+0x48>)
   13956:	242e      	movs	r4, #46	; 0x2e
   13958:	701c      	strb	r4, [r3, #0]
	seesawData.msgOut = &cmd;
   1395a:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   1395c:	2202      	movs	r2, #2
   1395e:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
   13960:	6098      	str	r0, [r3, #8]
	seesawData.lenIn = count;
   13962:	8199      	strh	r1, [r3, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   13964:	3262      	adds	r2, #98	; 0x62
   13966:	2100      	movs	r1, #0
   13968:	0018      	movs	r0, r3
   1396a:	4b07      	ldr	r3, [pc, #28]	; (13988 <SeesawReadKeypad+0x4c>)
   1396c:	4798      	blx	r3
   1396e:	0004      	movs	r4, r0
	return error;
   13970:	1e03      	subs	r3, r0, #0
	if(ERROR_NONE != error)
   13972:	d0e8      	beq.n	13946 <SeesawReadKeypad+0xa>
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   13974:	4805      	ldr	r0, [pc, #20]	; (1398c <SeesawReadKeypad+0x50>)
   13976:	4b06      	ldr	r3, [pc, #24]	; (13990 <SeesawReadKeypad+0x54>)
   13978:	4798      	blx	r3
	return error;
   1397a:	0023      	movs	r3, r4
   1397c:	e7e3      	b.n	13946 <SeesawReadKeypad+0xa>
   1397e:	46c0      	nop			; (mov r8, r8)
   13980:	00027c34 	.word	0x00027c34
   13984:	20004348 	.word	0x20004348
   13988:	00013771 	.word	0x00013771
   1398c:	00027d20 	.word	0x00027d20
   13990:	00018f6d 	.word	0x00018f6d

00013994 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
   13994:	b510      	push	{r4, lr}
   13996:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
   13998:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
   1399a:	0023      	movs	r3, r4
   1399c:	408b      	lsls	r3, r1
   1399e:	210f      	movs	r1, #15
   139a0:	4019      	ands	r1, r3
   139a2:	0049      	lsls	r1, r1, #1
   139a4:	2301      	movs	r3, #1
   139a6:	401a      	ands	r2, r3
   139a8:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   139aa:	ab01      	add	r3, sp, #4
   139ac:	2110      	movs	r1, #16
   139ae:	7019      	strb	r1, [r3, #0]
   139b0:	705c      	strb	r4, [r3, #1]
   139b2:	7098      	strb	r0, [r3, #2]
   139b4:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
   139b6:	4806      	ldr	r0, [pc, #24]	; (139d0 <SeesawActivateKey+0x3c>)
   139b8:	222e      	movs	r2, #46	; 0x2e
   139ba:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
   139bc:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
   139be:	2304      	movs	r3, #4
   139c0:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   139c2:	2300      	movs	r3, #0
   139c4:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   139c6:	3154      	adds	r1, #84	; 0x54
   139c8:	4b02      	ldr	r3, [pc, #8]	; (139d4 <SeesawActivateKey+0x40>)
   139ca:	4798      	blx	r3
	return error;
}
   139cc:	b002      	add	sp, #8
   139ce:	bd10      	pop	{r4, pc}
   139d0:	20004348 	.word	0x20004348
   139d4:	0001370d 	.word	0x0001370d

000139d8 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   139d8:	b530      	push	{r4, r5, lr}
   139da:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green,red, blue};
   139dc:	240e      	movs	r4, #14
   139de:	466d      	mov	r5, sp
   139e0:	702c      	strb	r4, [r5, #0]
   139e2:	3c0a      	subs	r4, #10
   139e4:	706c      	strb	r4, [r5, #1]
   139e6:	712a      	strb	r2, [r5, #4]
   139e8:	7169      	strb	r1, [r5, #5]
   139ea:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
   139ec:	0043      	lsls	r3, r0, #1
   139ee:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
   139f0:	0a03      	lsrs	r3, r0, #8
   139f2:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
   139f4:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
   139f6:	4804      	ldr	r0, [pc, #16]	; (13a08 <SeesawSetLed+0x30>)
   139f8:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   139fa:	2307      	movs	r3, #7
   139fc:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   139fe:	2164      	movs	r1, #100	; 0x64
   13a00:	4b02      	ldr	r3, [pc, #8]	; (13a0c <SeesawSetLed+0x34>)
   13a02:	4798      	blx	r3
	return error;

}
   13a04:	b003      	add	sp, #12
   13a06:	bd30      	pop	{r4, r5, pc}
   13a08:	20004348 	.word	0x20004348
   13a0c:	0001370d 	.word	0x0001370d

00013a10 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   13a10:	b500      	push	{lr}
   13a12:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   13a14:	ab01      	add	r3, sp, #4
   13a16:	4a06      	ldr	r2, [pc, #24]	; (13a30 <SeesawOrderLedUpdate+0x20>)
   13a18:	8892      	ldrh	r2, [r2, #4]
   13a1a:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   13a1c:	4805      	ldr	r0, [pc, #20]	; (13a34 <SeesawOrderLedUpdate+0x24>)
   13a1e:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   13a20:	2302      	movs	r3, #2
   13a22:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   13a24:	2164      	movs	r1, #100	; 0x64
   13a26:	4b04      	ldr	r3, [pc, #16]	; (13a38 <SeesawOrderLedUpdate+0x28>)
   13a28:	4798      	blx	r3
	return error;
}
   13a2a:	b003      	add	sp, #12
   13a2c:	bd00      	pop	{pc}
   13a2e:	46c0      	nop			; (mov r8, r8)
   13a30:	00027c34 	.word	0x00027c34
   13a34:	20004348 	.word	0x20004348
   13a38:	0001370d 	.word	0x0001370d

00013a3c <InitializeSeesaw>:
{
   13a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a3e:	46ce      	mov	lr, r9
   13a40:	b500      	push	{lr}
   13a42:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
   13a44:	484b      	ldr	r0, [pc, #300]	; (13b74 <InitializeSeesaw+0x138>)
   13a46:	232e      	movs	r3, #46	; 0x2e
   13a48:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
   13a4a:	4b4b      	ldr	r3, [pc, #300]	; (13b78 <InitializeSeesaw+0x13c>)
   13a4c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
   13a4e:	2302      	movs	r3, #2
   13a50:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
   13a52:	ab03      	add	r3, sp, #12
   13a54:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   13a56:	2301      	movs	r3, #1
   13a58:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   13a5a:	2264      	movs	r2, #100	; 0x64
   13a5c:	2100      	movs	r1, #0
   13a5e:	4b47      	ldr	r3, [pc, #284]	; (13b7c <InitializeSeesaw+0x140>)
   13a60:	4798      	blx	r3
	if(ERROR_NONE != error)
   13a62:	2800      	cmp	r0, #0
   13a64:	d149      	bne.n	13afa <InitializeSeesaw+0xbe>
		if(readData[0] != SEESAW_HW_ID_CODE )
   13a66:	ab03      	add	r3, sp, #12
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2b55      	cmp	r3, #85	; 0x55
   13a6c:	d049      	beq.n	13b02 <InitializeSeesaw+0xc6>
			SerialConsoleWriteString("Error/r/n");
   13a6e:	4844      	ldr	r0, [pc, #272]	; (13b80 <InitializeSeesaw+0x144>)
   13a70:	4b44      	ldr	r3, [pc, #272]	; (13b84 <InitializeSeesaw+0x148>)
   13a72:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
   13a74:	483f      	ldr	r0, [pc, #252]	; (13b74 <InitializeSeesaw+0x138>)
   13a76:	4b44      	ldr	r3, [pc, #272]	; (13b88 <InitializeSeesaw+0x14c>)
   13a78:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
   13a7a:	2303      	movs	r3, #3
   13a7c:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13a7e:	2164      	movs	r1, #100	; 0x64
   13a80:	4b42      	ldr	r3, [pc, #264]	; (13b8c <InitializeSeesaw+0x150>)
   13a82:	4798      	blx	r3
	if(ERROR_NONE != error)
   13a84:	2800      	cmp	r0, #0
   13a86:	d140      	bne.n	13b0a <InitializeSeesaw+0xce>
	seesawData.msgOut = &msgNeopixelSpeed;
   13a88:	483a      	ldr	r0, [pc, #232]	; (13b74 <InitializeSeesaw+0x138>)
   13a8a:	4b41      	ldr	r3, [pc, #260]	; (13b90 <InitializeSeesaw+0x154>)
   13a8c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
   13a8e:	2303      	movs	r3, #3
   13a90:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13a92:	2164      	movs	r1, #100	; 0x64
   13a94:	4b3d      	ldr	r3, [pc, #244]	; (13b8c <InitializeSeesaw+0x150>)
   13a96:	4798      	blx	r3
	if(ERROR_NONE != error)
   13a98:	2800      	cmp	r0, #0
   13a9a:	d13a      	bne.n	13b12 <InitializeSeesaw+0xd6>
	seesawData.msgOut = &msgNeopixelBufLength;
   13a9c:	4835      	ldr	r0, [pc, #212]	; (13b74 <InitializeSeesaw+0x138>)
   13a9e:	4b3d      	ldr	r3, [pc, #244]	; (13b94 <InitializeSeesaw+0x158>)
   13aa0:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
   13aa2:	2304      	movs	r3, #4
   13aa4:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13aa6:	2164      	movs	r1, #100	; 0x64
   13aa8:	4b38      	ldr	r3, [pc, #224]	; (13b8c <InitializeSeesaw+0x150>)
   13aaa:	4798      	blx	r3
   13aac:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
   13aae:	2800      	cmp	r0, #0
   13ab0:	d133      	bne.n	13b1a <InitializeSeesaw+0xde>
}


static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
   13ab2:	23ff      	movs	r3, #255	; 0xff
   13ab4:	22ff      	movs	r2, #255	; 0xff
   13ab6:	21ff      	movs	r1, #255	; 0xff
   13ab8:	200f      	movs	r0, #15
   13aba:	4e37      	ldr	r6, [pc, #220]	; (13b98 <InitializeSeesaw+0x15c>)
   13abc:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   13abe:	4c37      	ldr	r4, [pc, #220]	; (13b9c <InitializeSeesaw+0x160>)
   13ac0:	47a0      	blx	r4
	vTaskDelay(400);
   13ac2:	20c8      	movs	r0, #200	; 0xc8
   13ac4:	0040      	lsls	r0, r0, #1
   13ac6:	4b36      	ldr	r3, [pc, #216]	; (13ba0 <InitializeSeesaw+0x164>)
   13ac8:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
   13aca:	2300      	movs	r3, #0
   13acc:	2200      	movs	r2, #0
   13ace:	2100      	movs	r1, #0
   13ad0:	200f      	movs	r0, #15
   13ad2:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   13ad4:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
   13ad6:	4827      	ldr	r0, [pc, #156]	; (13b74 <InitializeSeesaw+0x138>)
   13ad8:	232e      	movs	r3, #46	; 0x2e
   13ada:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
   13adc:	4b31      	ldr	r3, [pc, #196]	; (13ba4 <InitializeSeesaw+0x168>)
   13ade:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
   13ae0:	2303      	movs	r3, #3
   13ae2:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   13ae4:	2300      	movs	r3, #0
   13ae6:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   13ae8:	2164      	movs	r1, #100	; 0x64
   13aea:	4b28      	ldr	r3, [pc, #160]	; (13b8c <InitializeSeesaw+0x150>)
   13aec:	4798      	blx	r3
	if(ERROR_NONE != error)
   13aee:	2800      	cmp	r0, #0
   13af0:	d117      	bne.n	13b22 <InitializeSeesaw+0xe6>
{
   13af2:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   13af4:	2703      	movs	r7, #3
   13af6:	4d2c      	ldr	r5, [pc, #176]	; (13ba8 <InitializeSeesaw+0x16c>)
   13af8:	e01a      	b.n	13b30 <InitializeSeesaw+0xf4>
		SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   13afa:	482c      	ldr	r0, [pc, #176]	; (13bac <InitializeSeesaw+0x170>)
   13afc:	4b21      	ldr	r3, [pc, #132]	; (13b84 <InitializeSeesaw+0x148>)
   13afe:	4798      	blx	r3
   13b00:	e7b8      	b.n	13a74 <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Found Seesaw!/r/n");
   13b02:	482b      	ldr	r0, [pc, #172]	; (13bb0 <InitializeSeesaw+0x174>)
   13b04:	4b1f      	ldr	r3, [pc, #124]	; (13b84 <InitializeSeesaw+0x148>)
   13b06:	4798      	blx	r3
   13b08:	e7b4      	b.n	13a74 <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   13b0a:	482a      	ldr	r0, [pc, #168]	; (13bb4 <InitializeSeesaw+0x178>)
   13b0c:	4b1d      	ldr	r3, [pc, #116]	; (13b84 <InitializeSeesaw+0x148>)
   13b0e:	4798      	blx	r3
   13b10:	e7ba      	b.n	13a88 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   13b12:	4829      	ldr	r0, [pc, #164]	; (13bb8 <InitializeSeesaw+0x17c>)
   13b14:	4b1b      	ldr	r3, [pc, #108]	; (13b84 <InitializeSeesaw+0x148>)
   13b16:	4798      	blx	r3
   13b18:	e7c0      	b.n	13a9c <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   13b1a:	4828      	ldr	r0, [pc, #160]	; (13bbc <InitializeSeesaw+0x180>)
   13b1c:	4b19      	ldr	r3, [pc, #100]	; (13b84 <InitializeSeesaw+0x148>)
   13b1e:	4798      	blx	r3
   13b20:	e7c7      	b.n	13ab2 <InitializeSeesaw+0x76>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   13b22:	4827      	ldr	r0, [pc, #156]	; (13bc0 <InitializeSeesaw+0x184>)
   13b24:	4b17      	ldr	r3, [pc, #92]	; (13b84 <InitializeSeesaw+0x148>)
   13b26:	4798      	blx	r3
   13b28:	e7e3      	b.n	13af2 <InitializeSeesaw+0xb6>
	for(int i=0; i<16; i++){
   13b2a:	3601      	adds	r6, #1
   13b2c:	2e10      	cmp	r6, #16
   13b2e:	d01b      	beq.n	13b68 <InitializeSeesaw+0x12c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   13b30:	17f2      	asrs	r2, r6, #31
   13b32:	003c      	movs	r4, r7
   13b34:	4014      	ands	r4, r2
   13b36:	19a4      	adds	r4, r4, r6
   13b38:	10a4      	asrs	r4, r4, #2
   13b3a:	00e4      	lsls	r4, r4, #3
   13b3c:	0f92      	lsrs	r2, r2, #30
   13b3e:	18b3      	adds	r3, r6, r2
   13b40:	403b      	ands	r3, r7
   13b42:	1a9b      	subs	r3, r3, r2
   13b44:	18e4      	adds	r4, r4, r3
   13b46:	b2e4      	uxtb	r4, r4
   13b48:	2201      	movs	r2, #1
   13b4a:	0039      	movs	r1, r7
   13b4c:	0020      	movs	r0, r4
   13b4e:	47a8      	blx	r5
   13b50:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   13b52:	2201      	movs	r2, #1
   13b54:	2102      	movs	r1, #2
   13b56:	0020      	movs	r0, r4
   13b58:	47a8      	blx	r5
   13b5a:	464b      	mov	r3, r9
   13b5c:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
   13b5e:	d0e4      	beq.n	13b2a <InitializeSeesaw+0xee>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   13b60:	4817      	ldr	r0, [pc, #92]	; (13bc0 <InitializeSeesaw+0x184>)
   13b62:	4b08      	ldr	r3, [pc, #32]	; (13b84 <InitializeSeesaw+0x148>)
   13b64:	4798      	blx	r3
   13b66:	e7e0      	b.n	13b2a <InitializeSeesaw+0xee>
}
   13b68:	9801      	ldr	r0, [sp, #4]
   13b6a:	b004      	add	sp, #16
   13b6c:	bc04      	pop	{r2}
   13b6e:	4691      	mov	r9, r2
   13b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b72:	46c0      	nop			; (mov r8, r8)
   13b74:	20004348 	.word	0x20004348
   13b78:	00027d44 	.word	0x00027d44
   13b7c:	00013771 	.word	0x00013771
   13b80:	00027c5c 	.word	0x00027c5c
   13b84:	00018f6d 	.word	0x00018f6d
   13b88:	00027d54 	.word	0x00027d54
   13b8c:	0001370d 	.word	0x0001370d
   13b90:	00027d58 	.word	0x00027d58
   13b94:	00027d50 	.word	0x00027d50
   13b98:	000139d9 	.word	0x000139d9
   13b9c:	00013a11 	.word	0x00013a11
   13ba0:	000180f5 	.word	0x000180f5
   13ba4:	00027d48 	.word	0x00027d48
   13ba8:	00013995 	.word	0x00013995
   13bac:	00027c3c 	.word	0x00027c3c
   13bb0:	00027c68 	.word	0x00027c68
   13bb4:	00027c7c 	.word	0x00027c7c
   13bb8:	00027c9c 	.word	0x00027c9c
   13bbc:	00027cc8 	.word	0x00027cc8
   13bc0:	00027cfc 	.word	0x00027cfc

00013bc4 <initialize_thumbstick>:
	? No added sampling time
	? Pin scan mode disabled      				
* @note	change positive_input and negative_input for future work
*****************************************************************************/
void initialize_thumbstick(void)
{	
   13bc4:	b530      	push	{r4, r5, lr}
   13bc6:	b099      	sub	sp, #100	; 0x64

	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
   13bc8:	ac0c      	add	r4, sp, #48	; 0x30
   13bca:	0020      	movs	r0, r4
   13bcc:	4b20      	ldr	r3, [pc, #128]	; (13c50 <initialize_thumbstick+0x8c>)
   13bce:	4798      	blx	r3
	
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN6;
   13bd0:	2306      	movs	r3, #6
   13bd2:	7323      	strb	r3, [r4, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
   13bd4:	23c0      	movs	r3, #192	; 0xc0
   13bd6:	015b      	lsls	r3, r3, #5
   13bd8:	81e3      	strh	r3, [r4, #14]


	adc_init(&adc_instance, ADC, &config_adc);
   13bda:	4d1e      	ldr	r5, [pc, #120]	; (13c54 <initialize_thumbstick+0x90>)
   13bdc:	0022      	movs	r2, r4
   13bde:	491e      	ldr	r1, [pc, #120]	; (13c58 <initialize_thumbstick+0x94>)
   13be0:	0028      	movs	r0, r5
   13be2:	4b1e      	ldr	r3, [pc, #120]	; (13c5c <initialize_thumbstick+0x98>)
   13be4:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13be6:	682a      	ldr	r2, [r5, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13be8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   13bea:	b25b      	sxtb	r3, r3
   13bec:	2b00      	cmp	r3, #0
   13bee:	dbfb      	blt.n	13be8 <initialize_thumbstick+0x24>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   13bf0:	230f      	movs	r3, #15
   13bf2:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   13bf4:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   13bf6:	7813      	ldrb	r3, [r2, #0]
   13bf8:	2102      	movs	r1, #2
   13bfa:	430b      	orrs	r3, r1
   13bfc:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
   13bfe:	4b15      	ldr	r3, [pc, #84]	; (13c54 <initialize_thumbstick+0x90>)
   13c00:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13c02:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   13c04:	b25b      	sxtb	r3, r3
   13c06:	2b00      	cmp	r3, #0
   13c08:	dbfb      	blt.n	13c02 <initialize_thumbstick+0x3e>
	adc_enable(&adc_instance);
	
	struct adc_config config_adc2;

	adc_get_config_defaults(&config_adc2);
   13c0a:	4668      	mov	r0, sp
   13c0c:	4b10      	ldr	r3, [pc, #64]	; (13c50 <initialize_thumbstick+0x8c>)
   13c0e:	4798      	blx	r3
	
	config_adc2.positive_input = ADC_POSITIVE_INPUT_PIN6;
   13c10:	2306      	movs	r3, #6
   13c12:	466a      	mov	r2, sp
   13c14:	7313      	strb	r3, [r2, #12]
	config_adc2.negative_input = ADC_NEGATIVE_INPUT_GND;
   13c16:	23c0      	movs	r3, #192	; 0xc0
   13c18:	015b      	lsls	r3, r3, #5
   13c1a:	81d3      	strh	r3, [r2, #14]


	adc_init(&adc_instance2, ADC, &config_adc2);
   13c1c:	4c10      	ldr	r4, [pc, #64]	; (13c60 <initialize_thumbstick+0x9c>)
   13c1e:	490e      	ldr	r1, [pc, #56]	; (13c58 <initialize_thumbstick+0x94>)
   13c20:	0020      	movs	r0, r4
   13c22:	4b0e      	ldr	r3, [pc, #56]	; (13c5c <initialize_thumbstick+0x98>)
   13c24:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
   13c26:	6822      	ldr	r2, [r4, #0]
   13c28:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   13c2a:	b25b      	sxtb	r3, r3
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	dbfb      	blt.n	13c28 <initialize_thumbstick+0x64>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   13c30:	230f      	movs	r3, #15
   13c32:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   13c34:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   13c36:	7813      	ldrb	r3, [r2, #0]
   13c38:	2102      	movs	r1, #2
   13c3a:	430b      	orrs	r3, r1
   13c3c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
   13c3e:	4b08      	ldr	r3, [pc, #32]	; (13c60 <initialize_thumbstick+0x9c>)
   13c40:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13c42:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   13c44:	b25b      	sxtb	r3, r3
   13c46:	2b00      	cmp	r3, #0
   13c48:	dbfb      	blt.n	13c42 <initialize_thumbstick+0x7e>
	adc_enable(&adc_instance2);



}
   13c4a:	b019      	add	sp, #100	; 0x64
   13c4c:	bd30      	pop	{r4, r5, pc}
   13c4e:	46c0      	nop			; (mov r8, r8)
   13c50:	00012115 	.word	0x00012115
   13c54:	20004360 	.word	0x20004360
   13c58:	42004000 	.word	0x42004000
   13c5c:	0001215d 	.word	0x0001215d
   13c60:	20004358 	.word	0x20004358

00013c64 <UIChangeColors>:
* @return		
* @note         

*****************************************************************************/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   13c64:	b590      	push	{r4, r7, lr}
   13c66:	b083      	sub	sp, #12
   13c68:	af00      	add	r7, sp, #0
   13c6a:	0004      	movs	r4, r0
   13c6c:	0008      	movs	r0, r1
   13c6e:	0011      	movs	r1, r2
   13c70:	1dfb      	adds	r3, r7, #7
   13c72:	1c22      	adds	r2, r4, #0
   13c74:	701a      	strb	r2, [r3, #0]
   13c76:	1dbb      	adds	r3, r7, #6
   13c78:	1c02      	adds	r2, r0, #0
   13c7a:	701a      	strb	r2, [r3, #0]
   13c7c:	1d7b      	adds	r3, r7, #5
   13c7e:	1c0a      	adds	r2, r1, #0
   13c80:	701a      	strb	r2, [r3, #0]
	red = r;
   13c82:	4b08      	ldr	r3, [pc, #32]	; (13ca4 <UIChangeColors+0x40>)
   13c84:	1dfa      	adds	r2, r7, #7
   13c86:	7812      	ldrb	r2, [r2, #0]
   13c88:	701a      	strb	r2, [r3, #0]
	green = g;
   13c8a:	4b07      	ldr	r3, [pc, #28]	; (13ca8 <UIChangeColors+0x44>)
   13c8c:	1dba      	adds	r2, r7, #6
   13c8e:	7812      	ldrb	r2, [r2, #0]
   13c90:	701a      	strb	r2, [r3, #0]
	blue = b;
   13c92:	4b06      	ldr	r3, [pc, #24]	; (13cac <UIChangeColors+0x48>)
   13c94:	1d7a      	adds	r2, r7, #5
   13c96:	7812      	ldrb	r2, [r2, #0]
   13c98:	701a      	strb	r2, [r3, #0]
   13c9a:	46c0      	nop			; (mov r8, r8)
   13c9c:	46bd      	mov	sp, r7
   13c9e:	b003      	add	sp, #12
   13ca0:	bd90      	pop	{r4, r7, pc}
   13ca2:	46c0      	nop			; (mov r8, r8)
   13ca4:	2000044d 	.word	0x2000044d
   13ca8:	20000020 	.word	0x20000020
   13cac:	20000021 	.word	0x20000021

00013cb0 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   13cb0:	4b02      	ldr	r3, [pc, #8]	; (13cbc <add_state+0xc>)
   13cb2:	781a      	ldrb	r2, [r3, #0]
   13cb4:	4310      	orrs	r0, r2
   13cb6:	7018      	strb	r0, [r3, #0]
}
   13cb8:	4770      	bx	lr
   13cba:	46c0      	nop			; (mov r8, r8)
   13cbc:	2000044f 	.word	0x2000044f

00013cc0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   13cc0:	4b06      	ldr	r3, [pc, #24]	; (13cdc <extint_detection_callback+0x1c>)
   13cc2:	681a      	ldr	r2, [r3, #0]
   13cc4:	3201      	adds	r2, #1
   13cc6:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   13cc8:	681b      	ldr	r3, [r3, #0]
   13cca:	2b28      	cmp	r3, #40	; 0x28
   13ccc:	d902      	bls.n	13cd4 <extint_detection_callback+0x14>
   13cce:	2201      	movs	r2, #1
   13cd0:	4b02      	ldr	r3, [pc, #8]	; (13cdc <extint_detection_callback+0x1c>)
   13cd2:	601a      	str	r2, [r3, #0]
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);imuDataVar
	isPressed = true;
   13cd4:	2201      	movs	r2, #1
   13cd6:	4b02      	ldr	r3, [pc, #8]	; (13ce0 <extint_detection_callback+0x20>)
   13cd8:	701a      	strb	r2, [r3, #0]
	
}
   13cda:	4770      	bx	lr
   13cdc:	200000a8 	.word	0x200000a8
   13ce0:	200006a8 	.word	0x200006a8

00013ce4 <SubscribeHandlerLedTopic>:
{
   13ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ce6:	b085      	sub	sp, #20
   13ce8:	0004      	movs	r4, r0
	uint8_t rgb[3] = {0,0,0};
   13cea:	ab03      	add	r3, sp, #12
   13cec:	2200      	movs	r2, #0
   13cee:	701a      	strb	r2, [r3, #0]
   13cf0:	705a      	strb	r2, [r3, #1]
   13cf2:	709a      	strb	r2, [r3, #2]
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13cf4:	6842      	ldr	r2, [r0, #4]
   13cf6:	6893      	ldr	r3, [r2, #8]
   13cf8:	6852      	ldr	r2, [r2, #4]
   13cfa:	491b      	ldr	r1, [pc, #108]	; (13d68 <SubscribeHandlerLedTopic+0x84>)
   13cfc:	2001      	movs	r0, #1
   13cfe:	4d1b      	ldr	r5, [pc, #108]	; (13d6c <SubscribeHandlerLedTopic+0x88>)
   13d00:	47a8      	blx	r5
	if (strncmp(msgData->message->payload, "rgb(", 4)== 0)
   13d02:	6823      	ldr	r3, [r4, #0]
   13d04:	689c      	ldr	r4, [r3, #8]
   13d06:	2204      	movs	r2, #4
   13d08:	4919      	ldr	r1, [pc, #100]	; (13d70 <SubscribeHandlerLedTopic+0x8c>)
   13d0a:	0020      	movs	r0, r4
   13d0c:	4b19      	ldr	r3, [pc, #100]	; (13d74 <SubscribeHandlerLedTopic+0x90>)
   13d0e:	4798      	blx	r3
   13d10:	2800      	cmp	r0, #0
   13d12:	d127      	bne.n	13d64 <SubscribeHandlerLedTopic+0x80>
	char *p = (char *)&msgData->message->payload[4];
   13d14:	1d20      	adds	r0, r4, #4
   13d16:	9002      	str	r0, [sp, #8]
	while(nb <=2  && *p)
   13d18:	7923      	ldrb	r3, [r4, #4]
   13d1a:	2b00      	cmp	r3, #0
   13d1c:	d012      	beq.n	13d44 <SubscribeHandlerLedTopic+0x60>
   13d1e:	2400      	movs	r4, #0
		rgb[nb++] = strtol(p, &p, 10);
   13d20:	4e15      	ldr	r6, [pc, #84]	; (13d78 <SubscribeHandlerLedTopic+0x94>)
   13d22:	ad03      	add	r5, sp, #12
   13d24:	220a      	movs	r2, #10
   13d26:	a902      	add	r1, sp, #8
   13d28:	47b0      	blx	r6
   13d2a:	5560      	strb	r0, [r4, r5]
		if (*p != ',')
   13d2c:	9b02      	ldr	r3, [sp, #8]
   13d2e:	781a      	ldrb	r2, [r3, #0]
   13d30:	2a2c      	cmp	r2, #44	; 0x2c
   13d32:	d107      	bne.n	13d44 <SubscribeHandlerLedTopic+0x60>
		p++; /* skip, */
   13d34:	1c58      	adds	r0, r3, #1
   13d36:	9002      	str	r0, [sp, #8]
	while(nb <=2  && *p)
   13d38:	2c02      	cmp	r4, #2
   13d3a:	d003      	beq.n	13d44 <SubscribeHandlerLedTopic+0x60>
   13d3c:	3401      	adds	r4, #1
   13d3e:	785b      	ldrb	r3, [r3, #1]
   13d40:	2b00      	cmp	r3, #0
   13d42:	d1ef      	bne.n	13d24 <SubscribeHandlerLedTopic+0x40>
	LogMessage(LOG_DEBUG_LVL,"\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   13d44:	ab03      	add	r3, sp, #12
   13d46:	781c      	ldrb	r4, [r3, #0]
   13d48:	785d      	ldrb	r5, [r3, #1]
   13d4a:	789e      	ldrb	r6, [r3, #2]
   13d4c:	9600      	str	r6, [sp, #0]
   13d4e:	002b      	movs	r3, r5
   13d50:	0022      	movs	r2, r4
   13d52:	490a      	ldr	r1, [pc, #40]	; (13d7c <SubscribeHandlerLedTopic+0x98>)
   13d54:	2001      	movs	r0, #1
   13d56:	4f05      	ldr	r7, [pc, #20]	; (13d6c <SubscribeHandlerLedTopic+0x88>)
   13d58:	47b8      	blx	r7
	UIChangeColors(rgb[0],rgb[1], rgb[2]);
   13d5a:	0032      	movs	r2, r6
   13d5c:	0029      	movs	r1, r5
   13d5e:	0020      	movs	r0, r4
   13d60:	4b07      	ldr	r3, [pc, #28]	; (13d80 <SubscribeHandlerLedTopic+0x9c>)
   13d62:	4798      	blx	r3
}
   13d64:	b005      	add	sp, #20
   13d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d68:	00027e40 	.word	0x00027e40
   13d6c:	0001901d 	.word	0x0001901d
   13d70:	00027e48 	.word	0x00027e48
   13d74:	00026675 	.word	0x00026675
   13d78:	00026821 	.word	0x00026821
   13d7c:	00027e50 	.word	0x00027e50
   13d80:	00013c65 	.word	0x00013c65

00013d84 <SubscribeHandlerGameTopic>:
{
   13d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d86:	b087      	sub	sp, #28
   13d88:	0004      	movs	r4, r0
	memset(game.game, 0xff, sizeof(game.game));
   13d8a:	2214      	movs	r2, #20
   13d8c:	21ff      	movs	r1, #255	; 0xff
   13d8e:	a801      	add	r0, sp, #4
   13d90:	4b2f      	ldr	r3, [pc, #188]	; (13e50 <SubscribeHandlerGameTopic+0xcc>)
   13d92:	4798      	blx	r3
	if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0)
   13d94:	6823      	ldr	r3, [r4, #0]
   13d96:	6898      	ldr	r0, [r3, #8]
   13d98:	2209      	movs	r2, #9
   13d9a:	492e      	ldr	r1, [pc, #184]	; (13e54 <SubscribeHandlerGameTopic+0xd0>)
   13d9c:	4b2e      	ldr	r3, [pc, #184]	; (13e58 <SubscribeHandlerGameTopic+0xd4>)
   13d9e:	4798      	blx	r3
   13da0:	2800      	cmp	r0, #0
   13da2:	d143      	bne.n	13e2c <SubscribeHandlerGameTopic+0xa8>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received!\r\n");
   13da4:	492d      	ldr	r1, [pc, #180]	; (13e5c <SubscribeHandlerGameTopic+0xd8>)
   13da6:	3001      	adds	r0, #1
   13da8:	4d2d      	ldr	r5, [pc, #180]	; (13e60 <SubscribeHandlerGameTopic+0xdc>)
   13daa:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13dac:	6862      	ldr	r2, [r4, #4]
   13dae:	6893      	ldr	r3, [r2, #8]
   13db0:	6852      	ldr	r2, [r2, #4]
   13db2:	492c      	ldr	r1, [pc, #176]	; (13e64 <SubscribeHandlerGameTopic+0xe0>)
   13db4:	2001      	movs	r0, #1
   13db6:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13db8:	6822      	ldr	r2, [r4, #0]
   13dba:	6893      	ldr	r3, [r2, #8]
   13dbc:	68d2      	ldr	r2, [r2, #12]
   13dbe:	492a      	ldr	r1, [pc, #168]	; (13e68 <SubscribeHandlerGameTopic+0xe4>)
   13dc0:	2001      	movs	r0, #1
   13dc2:	47a8      	blx	r5
		char *p = &msgData->message->payload[9];
   13dc4:	6823      	ldr	r3, [r4, #0]
   13dc6:	689b      	ldr	r3, [r3, #8]
   13dc8:	0018      	movs	r0, r3
   13dca:	3009      	adds	r0, #9
   13dcc:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   13dce:	7a5b      	ldrb	r3, [r3, #9]
   13dd0:	2b00      	cmp	r3, #0
   13dd2:	d013      	beq.n	13dfc <SubscribeHandlerGameTopic+0x78>
   13dd4:	ac01      	add	r4, sp, #4
   13dd6:	2517      	movs	r5, #23
   13dd8:	446d      	add	r5, sp
			game.game[nb++] = strtol(p, &p, 10);
   13dda:	4e24      	ldr	r6, [pc, #144]	; (13e6c <SubscribeHandlerGameTopic+0xe8>)
   13ddc:	220a      	movs	r2, #10
   13dde:	4669      	mov	r1, sp
   13de0:	47b0      	blx	r6
   13de2:	7020      	strb	r0, [r4, #0]
			if (*p != ',')
   13de4:	9b00      	ldr	r3, [sp, #0]
   13de6:	781a      	ldrb	r2, [r3, #0]
   13de8:	2a2c      	cmp	r2, #44	; 0x2c
   13dea:	d107      	bne.n	13dfc <SubscribeHandlerGameTopic+0x78>
			p++; /* skip, */
   13dec:	1c58      	adds	r0, r3, #1
   13dee:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   13df0:	42ac      	cmp	r4, r5
   13df2:	d003      	beq.n	13dfc <SubscribeHandlerGameTopic+0x78>
   13df4:	3401      	adds	r4, #1
   13df6:	785b      	ldrb	r3, [r3, #1]
   13df8:	2b00      	cmp	r3, #0
   13dfa:	d1ef      	bne.n	13ddc <SubscribeHandlerGameTopic+0x58>
		LogMessage(LOG_DEBUG_LVL,"\r\nParsed Command: ");
   13dfc:	491c      	ldr	r1, [pc, #112]	; (13e70 <SubscribeHandlerGameTopic+0xec>)
   13dfe:	2001      	movs	r0, #1
   13e00:	4b17      	ldr	r3, [pc, #92]	; (13e60 <SubscribeHandlerGameTopic+0xdc>)
   13e02:	4798      	blx	r3
   13e04:	ac01      	add	r4, sp, #4
   13e06:	af06      	add	r7, sp, #24
			LogMessage(LOG_DEBUG_LVL,"%d,", game.game[i]);
   13e08:	4e1a      	ldr	r6, [pc, #104]	; (13e74 <SubscribeHandlerGameTopic+0xf0>)
   13e0a:	4d15      	ldr	r5, [pc, #84]	; (13e60 <SubscribeHandlerGameTopic+0xdc>)
   13e0c:	7822      	ldrb	r2, [r4, #0]
   13e0e:	0031      	movs	r1, r6
   13e10:	2001      	movs	r0, #1
   13e12:	47a8      	blx	r5
   13e14:	3401      	adds	r4, #1
		for(int i = 0; i < GAME_SIZE; i++)
   13e16:	42a7      	cmp	r7, r4
   13e18:	d1f8      	bne.n	13e0c <SubscribeHandlerGameTopic+0x88>
		if(pdTRUE == ControlAddGameData(&game))
   13e1a:	a801      	add	r0, sp, #4
   13e1c:	4b16      	ldr	r3, [pc, #88]	; (13e78 <SubscribeHandlerGameTopic+0xf4>)
   13e1e:	4798      	blx	r3
   13e20:	2801      	cmp	r0, #1
   13e22:	d113      	bne.n	13e4c <SubscribeHandlerGameTopic+0xc8>
			LogMessage(LOG_DEBUG_LVL,"\r\nSent play to control!\r\n");
   13e24:	4915      	ldr	r1, [pc, #84]	; (13e7c <SubscribeHandlerGameTopic+0xf8>)
   13e26:	4b0e      	ldr	r3, [pc, #56]	; (13e60 <SubscribeHandlerGameTopic+0xdc>)
   13e28:	4798      	blx	r3
   13e2a:	e00f      	b.n	13e4c <SubscribeHandlerGameTopic+0xc8>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received but not understood!\r\n");
   13e2c:	4914      	ldr	r1, [pc, #80]	; (13e80 <SubscribeHandlerGameTopic+0xfc>)
   13e2e:	2001      	movs	r0, #1
   13e30:	4d0b      	ldr	r5, [pc, #44]	; (13e60 <SubscribeHandlerGameTopic+0xdc>)
   13e32:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13e34:	6862      	ldr	r2, [r4, #4]
   13e36:	6893      	ldr	r3, [r2, #8]
   13e38:	6852      	ldr	r2, [r2, #4]
   13e3a:	490a      	ldr	r1, [pc, #40]	; (13e64 <SubscribeHandlerGameTopic+0xe0>)
   13e3c:	2001      	movs	r0, #1
   13e3e:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13e40:	6822      	ldr	r2, [r4, #0]
   13e42:	6893      	ldr	r3, [r2, #8]
   13e44:	68d2      	ldr	r2, [r2, #12]
   13e46:	4908      	ldr	r1, [pc, #32]	; (13e68 <SubscribeHandlerGameTopic+0xe4>)
   13e48:	2001      	movs	r0, #1
   13e4a:	47a8      	blx	r5
}
   13e4c:	b007      	add	sp, #28
   13e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e50:	00026253 	.word	0x00026253
   13e54:	00027dac 	.word	0x00027dac
   13e58:	00026675 	.word	0x00026675
   13e5c:	00027db8 	.word	0x00027db8
   13e60:	0001901d 	.word	0x0001901d
   13e64:	00027e40 	.word	0x00027e40
   13e68:	00027dd4 	.word	0x00027dd4
   13e6c:	00026821 	.word	0x00026821
   13e70:	00027ddc 	.word	0x00027ddc
   13e74:	00027df0 	.word	0x00027df0
   13e78:	00013319 	.word	0x00013319
   13e7c:	00027df4 	.word	0x00027df4
   13e80:	00027e10 	.word	0x00027e10

00013e84 <SubscribeHandlerP2GameOnTopic>:
{
   13e84:	b510      	push	{r4, lr}
	StartJXGameP2(msgData->message->payload, msgData->message->payloadlen);
   13e86:	6803      	ldr	r3, [r0, #0]
   13e88:	68d9      	ldr	r1, [r3, #12]
   13e8a:	6898      	ldr	r0, [r3, #8]
   13e8c:	4b02      	ldr	r3, [pc, #8]	; (13e98 <SubscribeHandlerP2GameOnTopic+0x14>)
   13e8e:	4798      	blx	r3
	SerialConsoleWriteString("Get the Answer Key! User two start enter key!\r\n");
   13e90:	4802      	ldr	r0, [pc, #8]	; (13e9c <SubscribeHandlerP2GameOnTopic+0x18>)
   13e92:	4b03      	ldr	r3, [pc, #12]	; (13ea0 <SubscribeHandlerP2GameOnTopic+0x1c>)
   13e94:	4798      	blx	r3
}
   13e96:	bd10      	pop	{r4, pc}
   13e98:	00013345 	.word	0x00013345
   13e9c:	00027e64 	.word	0x00027e64
   13ea0:	00018f6d 	.word	0x00018f6d

00013ea4 <socket_resolve_handler>:
{
   13ea4:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   13ea6:	4b01      	ldr	r3, [pc, #4]	; (13eac <socket_resolve_handler+0x8>)
   13ea8:	4798      	blx	r3
}
   13eaa:	bd10      	pop	{r4, pc}
   13eac:	00022211 	.word	0x00022211

00013eb0 <socket_event_handler>:
{
   13eb0:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   13eb2:	4b01      	ldr	r3, [pc, #4]	; (13eb8 <socket_event_handler+0x8>)
   13eb4:	4798      	blx	r3
}
   13eb6:	bd10      	pop	{r4, pc}
   13eb8:	00022205 	.word	0x00022205

00013ebc <start_download>:
{
   13ebc:	b510      	push	{r4, lr}
   13ebe:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   13ec0:	4b15      	ldr	r3, [pc, #84]	; (13f18 <start_download+0x5c>)
   13ec2:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   13ec4:	07da      	lsls	r2, r3, #31
   13ec6:	d512      	bpl.n	13eee <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   13ec8:	079a      	lsls	r2, r3, #30
   13eca:	d515      	bpl.n	13ef8 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
   13ecc:	075a      	lsls	r2, r3, #29
   13ece:	d418      	bmi.n	13f02 <start_download+0x46>
	if (is_state_set(DOWNLOADING)) {
   13ed0:	071b      	lsls	r3, r3, #28
   13ed2:	d41b      	bmi.n	13f0c <start_download+0x50>
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   13ed4:	4911      	ldr	r1, [pc, #68]	; (13f1c <start_download+0x60>)
   13ed6:	2001      	movs	r0, #1
   13ed8:	4b11      	ldr	r3, [pc, #68]	; (13f20 <start_download+0x64>)
   13eda:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   13edc:	2300      	movs	r3, #0
   13ede:	9300      	str	r3, [sp, #0]
   13ee0:	2201      	movs	r2, #1
   13ee2:	4910      	ldr	r1, [pc, #64]	; (13f24 <start_download+0x68>)
   13ee4:	4810      	ldr	r0, [pc, #64]	; (13f28 <start_download+0x6c>)
   13ee6:	4c11      	ldr	r4, [pc, #68]	; (13f2c <start_download+0x70>)
   13ee8:	47a0      	blx	r4
}
   13eea:	b002      	add	sp, #8
   13eec:	bd10      	pop	{r4, pc}
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   13eee:	4910      	ldr	r1, [pc, #64]	; (13f30 <start_download+0x74>)
   13ef0:	2001      	movs	r0, #1
   13ef2:	4b0b      	ldr	r3, [pc, #44]	; (13f20 <start_download+0x64>)
   13ef4:	4798      	blx	r3
		return;
   13ef6:	e7f8      	b.n	13eea <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   13ef8:	490e      	ldr	r1, [pc, #56]	; (13f34 <start_download+0x78>)
   13efa:	2001      	movs	r0, #1
   13efc:	4b08      	ldr	r3, [pc, #32]	; (13f20 <start_download+0x64>)
   13efe:	4798      	blx	r3
		return;
   13f00:	e7f3      	b.n	13eea <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   13f02:	490d      	ldr	r1, [pc, #52]	; (13f38 <start_download+0x7c>)
   13f04:	2001      	movs	r0, #1
   13f06:	4b06      	ldr	r3, [pc, #24]	; (13f20 <start_download+0x64>)
   13f08:	4798      	blx	r3
		return;
   13f0a:	e7ee      	b.n	13eea <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   13f0c:	490b      	ldr	r1, [pc, #44]	; (13f3c <start_download+0x80>)
   13f0e:	2001      	movs	r0, #1
   13f10:	4b03      	ldr	r3, [pc, #12]	; (13f20 <start_download+0x64>)
   13f12:	4798      	blx	r3
		return;
   13f14:	e7e9      	b.n	13eea <start_download+0x2e>
   13f16:	46c0      	nop			; (mov r8, r8)
   13f18:	2000044f 	.word	0x2000044f
   13f1c:	00028310 	.word	0x00028310
   13f20:	0001901d 	.word	0x0001901d
   13f24:	0002833c 	.word	0x0002833c
   13f28:	200043c0 	.word	0x200043c0
   13f2c:	00023335 	.word	0x00023335
   13f30:	00028260 	.word	0x00028260
   13f34:	0002828c 	.word	0x0002828c
   13f38:	000282b8 	.word	0x000282b8
   13f3c:	000282e4 	.word	0x000282e4

00013f40 <configure_mqtt>:
{
   13f40:	b500      	push	{lr}
   13f42:	b087      	sub	sp, #28
	mqtt_get_config_defaults(&mqtt_conf);
   13f44:	4668      	mov	r0, sp
   13f46:	4b13      	ldr	r3, [pc, #76]	; (13f94 <configure_mqtt+0x54>)
   13f48:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   13f4a:	4b13      	ldr	r3, [pc, #76]	; (13f98 <configure_mqtt+0x58>)
   13f4c:	9302      	str	r3, [sp, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13f4e:	2380      	movs	r3, #128	; 0x80
   13f50:	009b      	lsls	r3, r3, #2
   13f52:	9303      	str	r3, [sp, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   13f54:	4a11      	ldr	r2, [pc, #68]	; (13f9c <configure_mqtt+0x5c>)
   13f56:	9204      	str	r2, [sp, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13f58:	9305      	str	r3, [sp, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   13f5a:	4b11      	ldr	r3, [pc, #68]	; (13fa0 <configure_mqtt+0x60>)
   13f5c:	466a      	mov	r2, sp
   13f5e:	8013      	strh	r3, [r2, #0]
	mqtt_conf.keep_alive = 6000;
   13f60:	4b10      	ldr	r3, [pc, #64]	; (13fa4 <configure_mqtt+0x64>)
   13f62:	8093      	strh	r3, [r2, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   13f64:	4669      	mov	r1, sp
   13f66:	4810      	ldr	r0, [pc, #64]	; (13fa8 <configure_mqtt+0x68>)
   13f68:	4b10      	ldr	r3, [pc, #64]	; (13fac <configure_mqtt+0x6c>)
   13f6a:	4798      	blx	r3
   13f6c:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   13f6e:	db07      	blt.n	13f80 <configure_mqtt+0x40>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   13f70:	490f      	ldr	r1, [pc, #60]	; (13fb0 <configure_mqtt+0x70>)
   13f72:	480d      	ldr	r0, [pc, #52]	; (13fa8 <configure_mqtt+0x68>)
   13f74:	4b0f      	ldr	r3, [pc, #60]	; (13fb4 <configure_mqtt+0x74>)
   13f76:	4798      	blx	r3
   13f78:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   13f7a:	db06      	blt.n	13f8a <configure_mqtt+0x4a>
}
   13f7c:	b007      	add	sp, #28
   13f7e:	bd00      	pop	{pc}
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   13f80:	490d      	ldr	r1, [pc, #52]	; (13fb8 <configure_mqtt+0x78>)
   13f82:	2001      	movs	r0, #1
   13f84:	4b0d      	ldr	r3, [pc, #52]	; (13fbc <configure_mqtt+0x7c>)
   13f86:	4798      	blx	r3
   13f88:	e7fe      	b.n	13f88 <configure_mqtt+0x48>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   13f8a:	490d      	ldr	r1, [pc, #52]	; (13fc0 <configure_mqtt+0x80>)
   13f8c:	2001      	movs	r0, #1
   13f8e:	4b0b      	ldr	r3, [pc, #44]	; (13fbc <configure_mqtt+0x7c>)
   13f90:	4798      	blx	r3
   13f92:	e7fe      	b.n	13f92 <configure_mqtt+0x52>
   13f94:	000221d9 	.word	0x000221d9
   13f98:	200006e4 	.word	0x200006e4
   13f9c:	200008e4 	.word	0x200008e4
   13fa0:	0000075b 	.word	0x0000075b
   13fa4:	00001770 	.word	0x00001770
   13fa8:	200006ac 	.word	0x200006ac
   13fac:	00022125 	.word	0x00022125
   13fb0:	00013fc5 	.word	0x00013fc5
   13fb4:	000221f5 	.word	0x000221f5
   13fb8:	00027e94 	.word	0x00027e94
   13fbc:	0001901d 	.word	0x0001901d
   13fc0:	00027ec8 	.word	0x00027ec8

00013fc4 <mqtt_callback>:
{
   13fc4:	b530      	push	{r4, r5, lr}
   13fc6:	b087      	sub	sp, #28
   13fc8:	0004      	movs	r4, r0
	switch (type) {
   13fca:	2901      	cmp	r1, #1
   13fcc:	d030      	beq.n	14030 <mqtt_callback+0x6c>
   13fce:	2905      	cmp	r1, #5
   13fd0:	d04a      	beq.n	14068 <mqtt_callback+0xa4>
   13fd2:	2900      	cmp	r1, #0
   13fd4:	d001      	beq.n	13fda <mqtt_callback+0x16>
}
   13fd6:	b007      	add	sp, #28
   13fd8:	bd30      	pop	{r4, r5, pc}
		if (data->sock_connected.result >= 0) {
   13fda:	6813      	ldr	r3, [r2, #0]
   13fdc:	2b00      	cmp	r3, #0
   13fde:	db1c      	blt.n	1401a <mqtt_callback+0x56>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   13fe0:	4924      	ldr	r1, [pc, #144]	; (14074 <mqtt_callback+0xb0>)
   13fe2:	2001      	movs	r0, #1
   13fe4:	4b24      	ldr	r3, [pc, #144]	; (14078 <mqtt_callback+0xb4>)
   13fe6:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   13fe8:	4a24      	ldr	r2, [pc, #144]	; (1407c <mqtt_callback+0xb8>)
   13fea:	2300      	movs	r3, #0
   13fec:	9305      	str	r3, [sp, #20]
   13fee:	9304      	str	r3, [sp, #16]
   13ff0:	9303      	str	r3, [sp, #12]
   13ff2:	9302      	str	r3, [sp, #8]
   13ff4:	9301      	str	r3, [sp, #4]
   13ff6:	9200      	str	r2, [sp, #0]
   13ff8:	4b21      	ldr	r3, [pc, #132]	; (14080 <mqtt_callback+0xbc>)
   13ffa:	2101      	movs	r1, #1
   13ffc:	0020      	movs	r0, r4
   13ffe:	4c21      	ldr	r4, [pc, #132]	; (14084 <mqtt_callback+0xc0>)
   14000:	47a0      	blx	r4
   14002:	2800      	cmp	r0, #0
   14004:	d004      	beq.n	14010 <mqtt_callback+0x4c>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   14006:	4920      	ldr	r1, [pc, #128]	; (14088 <mqtt_callback+0xc4>)
   14008:	2001      	movs	r0, #1
   1400a:	4b1b      	ldr	r3, [pc, #108]	; (14078 <mqtt_callback+0xb4>)
   1400c:	4798      	blx	r3
   1400e:	e7e2      	b.n	13fd6 <mqtt_callback+0x12>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   14010:	491e      	ldr	r1, [pc, #120]	; (1408c <mqtt_callback+0xc8>)
   14012:	2001      	movs	r0, #1
   14014:	4b18      	ldr	r3, [pc, #96]	; (14078 <mqtt_callback+0xb4>)
   14016:	4798      	blx	r3
   14018:	e7dd      	b.n	13fd6 <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   1401a:	4d1d      	ldr	r5, [pc, #116]	; (14090 <mqtt_callback+0xcc>)
   1401c:	002a      	movs	r2, r5
   1401e:	491d      	ldr	r1, [pc, #116]	; (14094 <mqtt_callback+0xd0>)
   14020:	2001      	movs	r0, #1
   14022:	4b15      	ldr	r3, [pc, #84]	; (14078 <mqtt_callback+0xb4>)
   14024:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   14026:	0029      	movs	r1, r5
   14028:	0020      	movs	r0, r4
   1402a:	4b1b      	ldr	r3, [pc, #108]	; (14098 <mqtt_callback+0xd4>)
   1402c:	4798      	blx	r3
   1402e:	e7d2      	b.n	13fd6 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   14030:	7812      	ldrb	r2, [r2, #0]
   14032:	2a00      	cmp	r2, #0
   14034:	d113      	bne.n	1405e <mqtt_callback+0x9a>
			mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   14036:	4b19      	ldr	r3, [pc, #100]	; (1409c <mqtt_callback+0xd8>)
   14038:	3202      	adds	r2, #2
   1403a:	4919      	ldr	r1, [pc, #100]	; (140a0 <mqtt_callback+0xdc>)
   1403c:	4d19      	ldr	r5, [pc, #100]	; (140a4 <mqtt_callback+0xe0>)
   1403e:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   14040:	4b19      	ldr	r3, [pc, #100]	; (140a8 <mqtt_callback+0xe4>)
   14042:	2202      	movs	r2, #2
   14044:	4919      	ldr	r1, [pc, #100]	; (140ac <mqtt_callback+0xe8>)
   14046:	0020      	movs	r0, r4
   14048:	47a8      	blx	r5
			mqtt_subscribe(module_inst, ANS_SEQ_USR2, 2, SubscribeHandlerP2GameOnTopic);
   1404a:	4b19      	ldr	r3, [pc, #100]	; (140b0 <mqtt_callback+0xec>)
   1404c:	2202      	movs	r2, #2
   1404e:	4919      	ldr	r1, [pc, #100]	; (140b4 <mqtt_callback+0xf0>)
   14050:	0020      	movs	r0, r4
   14052:	47a8      	blx	r5
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   14054:	4918      	ldr	r1, [pc, #96]	; (140b8 <mqtt_callback+0xf4>)
   14056:	2001      	movs	r0, #1
   14058:	4b07      	ldr	r3, [pc, #28]	; (14078 <mqtt_callback+0xb4>)
   1405a:	4798      	blx	r3
   1405c:	e7bb      	b.n	13fd6 <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1405e:	4917      	ldr	r1, [pc, #92]	; (140bc <mqtt_callback+0xf8>)
   14060:	2001      	movs	r0, #1
   14062:	4b05      	ldr	r3, [pc, #20]	; (14078 <mqtt_callback+0xb4>)
   14064:	4798      	blx	r3
   14066:	e7b6      	b.n	13fd6 <mqtt_callback+0x12>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   14068:	4915      	ldr	r1, [pc, #84]	; (140c0 <mqtt_callback+0xfc>)
   1406a:	2001      	movs	r0, #1
   1406c:	4b02      	ldr	r3, [pc, #8]	; (14078 <mqtt_callback+0xb4>)
   1406e:	4798      	blx	r3
}
   14070:	e7b1      	b.n	13fd6 <mqtt_callback+0x12>
   14072:	46c0      	nop			; (mov r8, r8)
   14074:	000280ec 	.word	0x000280ec
   14078:	0001901d 	.word	0x0001901d
   1407c:	00028118 	.word	0x00028118
   14080:	00028108 	.word	0x00028108
   14084:	00022249 	.word	0x00022249
   14088:	00028120 	.word	0x00028120
   1408c:	00028148 	.word	0x00028148
   14090:	000280d8 	.word	0x000280d8
   14094:	00028164 	.word	0x00028164
   14098:	0002221d 	.word	0x0002221d
   1409c:	00013d85 	.word	0x00013d85
   140a0:	0002819c 	.word	0x0002819c
   140a4:	0002234d 	.word	0x0002234d
   140a8:	00013ce5 	.word	0x00013ce5
   140ac:	000281b0 	.word	0x000281b0
   140b0:	00013e85 	.word	0x00013e85
   140b4:	000281c4 	.word	0x000281c4
   140b8:	000281d4 	.word	0x000281d4
   140bc:	000281e8 	.word	0x000281e8
   140c0:	0002821c 	.word	0x0002821c

000140c4 <resolve_cb>:
{
   140c4:	b570      	push	{r4, r5, r6, lr}
   140c6:	b084      	sub	sp, #16
   140c8:	0005      	movs	r5, r0
   140ca:	000c      	movs	r4, r1
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   140cc:	22ff      	movs	r2, #255	; 0xff
   140ce:	0013      	movs	r3, r2
   140d0:	400b      	ands	r3, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   140d2:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   140d4:	9102      	str	r1, [sp, #8]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   140d6:	0c21      	lsrs	r1, r4, #16
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   140d8:	4011      	ands	r1, r2
   140da:	9101      	str	r1, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   140dc:	0a21      	lsrs	r1, r4, #8
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   140de:	400a      	ands	r2, r1
   140e0:	9200      	str	r2, [sp, #0]
   140e2:	0002      	movs	r2, r0
   140e4:	4904      	ldr	r1, [pc, #16]	; (140f8 <resolve_cb+0x34>)
   140e6:	2001      	movs	r0, #1
   140e8:	4e04      	ldr	r6, [pc, #16]	; (140fc <resolve_cb+0x38>)
   140ea:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   140ec:	0021      	movs	r1, r4
   140ee:	0028      	movs	r0, r5
   140f0:	4b03      	ldr	r3, [pc, #12]	; (14100 <resolve_cb+0x3c>)
   140f2:	4798      	blx	r3
}
   140f4:	b004      	add	sp, #16
   140f6:	bd70      	pop	{r4, r5, r6, pc}
   140f8:	00028230 	.word	0x00028230
   140fc:	0001901d 	.word	0x0001901d
   14100:	00022e05 	.word	0x00022e05

00014104 <socket_cb>:
{
   14104:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   14106:	4b01      	ldr	r3, [pc, #4]	; (1410c <socket_cb+0x8>)
   14108:	4798      	blx	r3
}
   1410a:	bd10      	pop	{r4, pc}
   1410c:	00023a31 	.word	0x00023a31

00014110 <store_file_packet>:
{
   14110:	b5f0      	push	{r4, r5, r6, r7, lr}
   14112:	46d6      	mov	lr, sl
   14114:	b500      	push	{lr}
   14116:	b09a      	sub	sp, #104	; 0x68
   14118:	9001      	str	r0, [sp, #4]
   1411a:	9102      	str	r1, [sp, #8]
	if ((data == NULL) || (length < 1)) {
   1411c:	2800      	cmp	r0, #0
   1411e:	d00d      	beq.n	1413c <store_file_packet+0x2c>
   14120:	2900      	cmp	r1, #0
   14122:	d00b      	beq.n	1413c <store_file_packet+0x2c>
	return ((down_state & mask) != 0);
   14124:	4b87      	ldr	r3, [pc, #540]	; (14344 <store_file_packet+0x234>)
   14126:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   14128:	071b      	lsls	r3, r3, #28
   1412a:	d500      	bpl.n	1412e <store_file_packet+0x1e>
   1412c:	e0c5      	b.n	142ba <store_file_packet+0x1aa>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1412e:	4b86      	ldr	r3, [pc, #536]	; (14348 <store_file_packet+0x238>)
   14130:	2230      	movs	r2, #48	; 0x30
   14132:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   14134:	320a      	adds	r2, #10
   14136:	705a      	strb	r2, [r3, #1]
   14138:	4c84      	ldr	r4, [pc, #528]	; (1434c <store_file_packet+0x23c>)
   1413a:	e008      	b.n	1414e <store_file_packet+0x3e>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   1413c:	4984      	ldr	r1, [pc, #528]	; (14350 <store_file_packet+0x240>)
   1413e:	2001      	movs	r0, #1
   14140:	4b84      	ldr	r3, [pc, #528]	; (14354 <store_file_packet+0x244>)
   14142:	4798      	blx	r3
}
   14144:	b01a      	add	sp, #104	; 0x68
   14146:	bc04      	pop	{r2}
   14148:	4692      	mov	sl, r2
   1414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   1414c:	0004      	movs	r4, r0
   1414e:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   14150:	7803      	ldrb	r3, [r0, #0]
   14152:	2b2f      	cmp	r3, #47	; 0x2f
   14154:	d1fa      	bne.n	1414c <store_file_packet+0x3c>
		if (strlen(cp) > 1) {
   14156:	4b80      	ldr	r3, [pc, #512]	; (14358 <store_file_packet+0x248>)
   14158:	4798      	blx	r3
   1415a:	2801      	cmp	r0, #1
   1415c:	d800      	bhi.n	14160 <store_file_packet+0x50>
   1415e:	e0c1      	b.n	142e4 <store_file_packet+0x1d4>
			strcpy(&save_file_name[2], cp);
   14160:	4f79      	ldr	r7, [pc, #484]	; (14348 <store_file_packet+0x238>)
   14162:	1cb8      	adds	r0, r7, #2
   14164:	0021      	movs	r1, r4
   14166:	4b7d      	ldr	r3, [pc, #500]	; (1435c <store_file_packet+0x24c>)
   14168:	4798      	blx	r3
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1416a:	2241      	movs	r2, #65	; 0x41
   1416c:	2100      	movs	r1, #0
   1416e:	a809      	add	r0, sp, #36	; 0x24
   14170:	4c7b      	ldr	r4, [pc, #492]	; (14360 <store_file_packet+0x250>)
   14172:	47a0      	blx	r4
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   14174:	2209      	movs	r2, #9
   14176:	2100      	movs	r1, #0
   14178:	a806      	add	r0, sp, #24
   1417a:	47a0      	blx	r4
	char numbering[NUMBRING_MAX + 1] = {0};
   1417c:	2300      	movs	r3, #0
   1417e:	9305      	str	r3, [sp, #20]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14180:	4c78      	ldr	r4, [pc, #480]	; (14364 <store_file_packet+0x254>)
   14182:	2200      	movs	r2, #0
   14184:	0039      	movs	r1, r7
   14186:	0020      	movs	r0, r4
   14188:	4b77      	ldr	r3, [pc, #476]	; (14368 <store_file_packet+0x258>)
   1418a:	4798      	blx	r3
   1418c:	0007      	movs	r7, r0
	f_close(&file_object);
   1418e:	0020      	movs	r0, r4
   14190:	4b76      	ldr	r3, [pc, #472]	; (1436c <store_file_packet+0x25c>)
   14192:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   14194:	2f00      	cmp	r7, #0
   14196:	d17d      	bne.n	14294 <store_file_packet+0x184>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   14198:	486b      	ldr	r0, [pc, #428]	; (14348 <store_file_packet+0x238>)
   1419a:	4b6f      	ldr	r3, [pc, #444]	; (14358 <store_file_packet+0x248>)
   1419c:	4798      	blx	r3
   1419e:	2840      	cmp	r0, #64	; 0x40
   141a0:	d878      	bhi.n	14294 <store_file_packet+0x184>
	p = strrchr(file_path_name, '.');
   141a2:	212e      	movs	r1, #46	; 0x2e
   141a4:	4868      	ldr	r0, [pc, #416]	; (14348 <store_file_packet+0x238>)
   141a6:	4b72      	ldr	r3, [pc, #456]	; (14370 <store_file_packet+0x260>)
   141a8:	4798      	blx	r3
   141aa:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
   141ac:	d03b      	beq.n	14226 <store_file_packet+0x116>
		ext_len = strlen(p);
   141ae:	4b6a      	ldr	r3, [pc, #424]	; (14358 <store_file_packet+0x248>)
   141b0:	4798      	blx	r3
   141b2:	0007      	movs	r7, r0
   141b4:	b286      	uxth	r6, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   141b6:	2e07      	cmp	r6, #7
   141b8:	d821      	bhi.n	141fe <store_file_packet+0xee>
			strcpy(ext, p);
   141ba:	0021      	movs	r1, r4
   141bc:	a806      	add	r0, sp, #24
   141be:	4b67      	ldr	r3, [pc, #412]	; (1435c <store_file_packet+0x24c>)
   141c0:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   141c2:	4861      	ldr	r0, [pc, #388]	; (14348 <store_file_packet+0x238>)
   141c4:	4b64      	ldr	r3, [pc, #400]	; (14358 <store_file_packet+0x248>)
   141c6:	4798      	blx	r3
   141c8:	043f      	lsls	r7, r7, #16
   141ca:	0c3f      	lsrs	r7, r7, #16
   141cc:	1bc7      	subs	r7, r0, r7
   141ce:	2f3c      	cmp	r7, #60	; 0x3c
   141d0:	d90a      	bls.n	141e8 <store_file_packet+0xd8>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   141d2:	273c      	movs	r7, #60	; 0x3c
   141d4:	1bbf      	subs	r7, r7, r6
   141d6:	b2bf      	uxth	r7, r7
				strncpy(name, file_path_name, name_len);
   141d8:	003a      	movs	r2, r7
   141da:	495b      	ldr	r1, [pc, #364]	; (14348 <store_file_packet+0x238>)
   141dc:	a809      	add	r0, sp, #36	; 0x24
   141de:	4b65      	ldr	r3, [pc, #404]	; (14374 <store_file_packet+0x264>)
   141e0:	4798      	blx	r3
			valid_ext = true;
   141e2:	2301      	movs	r3, #1
   141e4:	469a      	mov	sl, r3
   141e6:	e012      	b.n	1420e <store_file_packet+0xfe>
				name_len = (p - file_path_name);
   141e8:	4957      	ldr	r1, [pc, #348]	; (14348 <store_file_packet+0x238>)
   141ea:	1a64      	subs	r4, r4, r1
   141ec:	b2a7      	uxth	r7, r4
				strncpy(name, file_path_name, name_len);
   141ee:	0424      	lsls	r4, r4, #16
   141f0:	0c22      	lsrs	r2, r4, #16
   141f2:	a809      	add	r0, sp, #36	; 0x24
   141f4:	4b5f      	ldr	r3, [pc, #380]	; (14374 <store_file_packet+0x264>)
   141f6:	4798      	blx	r3
			valid_ext = true;
   141f8:	2301      	movs	r3, #1
   141fa:	469a      	mov	sl, r3
   141fc:	e007      	b.n	1420e <store_file_packet+0xfe>
			strncpy(name, file_path_name, name_len);
   141fe:	223c      	movs	r2, #60	; 0x3c
   14200:	4951      	ldr	r1, [pc, #324]	; (14348 <store_file_packet+0x238>)
   14202:	a809      	add	r0, sp, #36	; 0x24
   14204:	4b5b      	ldr	r3, [pc, #364]	; (14374 <store_file_packet+0x264>)
   14206:	4798      	blx	r3
	bool valid_ext = false;
   14208:	2300      	movs	r3, #0
   1420a:	469a      	mov	sl, r3
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1420c:	273c      	movs	r7, #60	; 0x3c
	name[name_len++] = '-';
   1420e:	1c7c      	adds	r4, r7, #1
   14210:	b2a4      	uxth	r4, r4
   14212:	222d      	movs	r2, #45	; 0x2d
   14214:	ab09      	add	r3, sp, #36	; 0x24
   14216:	55da      	strb	r2, [r3, r7]
   14218:	2601      	movs	r6, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   1421a:	1ce3      	adds	r3, r4, #3
   1421c:	aa09      	add	r2, sp, #36	; 0x24
   1421e:	4694      	mov	ip, r2
   14220:	4463      	add	r3, ip
   14222:	9303      	str	r3, [sp, #12]
   14224:	e019      	b.n	1425a <store_file_packet+0x14a>
		strncpy(name, file_path_name, name_len);
   14226:	223c      	movs	r2, #60	; 0x3c
   14228:	4947      	ldr	r1, [pc, #284]	; (14348 <store_file_packet+0x238>)
   1422a:	a809      	add	r0, sp, #36	; 0x24
   1422c:	4b51      	ldr	r3, [pc, #324]	; (14374 <store_file_packet+0x264>)
   1422e:	4798      	blx	r3
	bool valid_ext = false;
   14230:	2300      	movs	r3, #0
   14232:	469a      	mov	sl, r3
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14234:	273c      	movs	r7, #60	; 0x3c
   14236:	e7ea      	b.n	1420e <store_file_packet+0xfe>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14238:	4f4a      	ldr	r7, [pc, #296]	; (14364 <store_file_packet+0x254>)
   1423a:	2200      	movs	r2, #0
   1423c:	a909      	add	r1, sp, #36	; 0x24
   1423e:	0038      	movs	r0, r7
   14240:	4b49      	ldr	r3, [pc, #292]	; (14368 <store_file_packet+0x258>)
   14242:	4798      	blx	r3
   14244:	0005      	movs	r5, r0
	f_close(&file_object);
   14246:	0038      	movs	r0, r7
   14248:	4b48      	ldr	r3, [pc, #288]	; (1436c <store_file_packet+0x25c>)
   1424a:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   1424c:	2d00      	cmp	r5, #0
   1424e:	d117      	bne.n	14280 <store_file_packet+0x170>
   14250:	3601      	adds	r6, #1
	for (i = 1; i < count; i++) {
   14252:	4b49      	ldr	r3, [pc, #292]	; (14378 <store_file_packet+0x268>)
   14254:	b2b2      	uxth	r2, r6
   14256:	429a      	cmp	r2, r3
   14258:	d81c      	bhi.n	14294 <store_file_packet+0x184>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   1425a:	0032      	movs	r2, r6
   1425c:	4947      	ldr	r1, [pc, #284]	; (1437c <store_file_packet+0x26c>)
   1425e:	a805      	add	r0, sp, #20
   14260:	4b47      	ldr	r3, [pc, #284]	; (14380 <store_file_packet+0x270>)
   14262:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   14264:	ab09      	add	r3, sp, #36	; 0x24
   14266:	1918      	adds	r0, r3, r4
   14268:	2203      	movs	r2, #3
   1426a:	a905      	add	r1, sp, #20
   1426c:	4b41      	ldr	r3, [pc, #260]	; (14374 <store_file_packet+0x264>)
   1426e:	4798      	blx	r3
		if (valid_ext) {
   14270:	4653      	mov	r3, sl
   14272:	2b00      	cmp	r3, #0
   14274:	d0e0      	beq.n	14238 <store_file_packet+0x128>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   14276:	a906      	add	r1, sp, #24
   14278:	9803      	ldr	r0, [sp, #12]
   1427a:	4b38      	ldr	r3, [pc, #224]	; (1435c <store_file_packet+0x24c>)
   1427c:	4798      	blx	r3
   1427e:	e7db      	b.n	14238 <store_file_packet+0x128>
			memset(file_path_name, 0, max_len);
   14280:	4c31      	ldr	r4, [pc, #196]	; (14348 <store_file_packet+0x238>)
   14282:	2240      	movs	r2, #64	; 0x40
   14284:	2100      	movs	r1, #0
   14286:	0020      	movs	r0, r4
   14288:	4b35      	ldr	r3, [pc, #212]	; (14360 <store_file_packet+0x250>)
   1428a:	4798      	blx	r3
			strcpy(file_path_name, name);
   1428c:	a909      	add	r1, sp, #36	; 0x24
   1428e:	0020      	movs	r0, r4
   14290:	4b32      	ldr	r3, [pc, #200]	; (1435c <store_file_packet+0x24c>)
   14292:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   14294:	4c2c      	ldr	r4, [pc, #176]	; (14348 <store_file_packet+0x238>)
   14296:	0022      	movs	r2, r4
   14298:	493a      	ldr	r1, [pc, #232]	; (14384 <store_file_packet+0x274>)
   1429a:	2001      	movs	r0, #1
   1429c:	4b2d      	ldr	r3, [pc, #180]	; (14354 <store_file_packet+0x244>)
   1429e:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   142a0:	220a      	movs	r2, #10
   142a2:	0021      	movs	r1, r4
   142a4:	482f      	ldr	r0, [pc, #188]	; (14364 <store_file_packet+0x254>)
   142a6:	4b30      	ldr	r3, [pc, #192]	; (14368 <store_file_packet+0x258>)
   142a8:	4798      	blx	r3
		if (ret != FR_OK) {
   142aa:	2800      	cmp	r0, #0
   142ac:	d122      	bne.n	142f4 <store_file_packet+0x1e4>
		received_file_size = 0;
   142ae:	2200      	movs	r2, #0
   142b0:	4b35      	ldr	r3, [pc, #212]	; (14388 <store_file_packet+0x278>)
   142b2:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   142b4:	2008      	movs	r0, #8
   142b6:	4b35      	ldr	r3, [pc, #212]	; (1438c <store_file_packet+0x27c>)
   142b8:	4798      	blx	r3
		UINT wsize = 0;
   142ba:	2300      	movs	r3, #0
   142bc:	9309      	str	r3, [sp, #36]	; 0x24
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   142be:	ab09      	add	r3, sp, #36	; 0x24
   142c0:	9a02      	ldr	r2, [sp, #8]
   142c2:	9901      	ldr	r1, [sp, #4]
   142c4:	4827      	ldr	r0, [pc, #156]	; (14364 <store_file_packet+0x254>)
   142c6:	4c32      	ldr	r4, [pc, #200]	; (14390 <store_file_packet+0x280>)
   142c8:	47a0      	blx	r4
		if (ret != FR_OK) {
   142ca:	2800      	cmp	r0, #0
   142cc:	d018      	beq.n	14300 <store_file_packet+0x1f0>
			f_close(&file_object);
   142ce:	4825      	ldr	r0, [pc, #148]	; (14364 <store_file_packet+0x254>)
   142d0:	4b26      	ldr	r3, [pc, #152]	; (1436c <store_file_packet+0x25c>)
   142d2:	4798      	blx	r3
			add_state(CANCELED);
   142d4:	2020      	movs	r0, #32
   142d6:	4b2d      	ldr	r3, [pc, #180]	; (1438c <store_file_packet+0x27c>)
   142d8:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   142da:	492e      	ldr	r1, [pc, #184]	; (14394 <store_file_packet+0x284>)
   142dc:	2001      	movs	r0, #1
   142de:	4b1d      	ldr	r3, [pc, #116]	; (14354 <store_file_packet+0x244>)
   142e0:	4798      	blx	r3
			return;
   142e2:	e72f      	b.n	14144 <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   142e4:	492c      	ldr	r1, [pc, #176]	; (14398 <store_file_packet+0x288>)
   142e6:	2001      	movs	r0, #1
   142e8:	4b1a      	ldr	r3, [pc, #104]	; (14354 <store_file_packet+0x244>)
   142ea:	4798      	blx	r3
			add_state(CANCELED);
   142ec:	2020      	movs	r0, #32
   142ee:	4b27      	ldr	r3, [pc, #156]	; (1438c <store_file_packet+0x27c>)
   142f0:	4798      	blx	r3
			return;
   142f2:	e727      	b.n	14144 <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   142f4:	0002      	movs	r2, r0
   142f6:	4929      	ldr	r1, [pc, #164]	; (1439c <store_file_packet+0x28c>)
   142f8:	2001      	movs	r0, #1
   142fa:	4b16      	ldr	r3, [pc, #88]	; (14354 <store_file_packet+0x244>)
   142fc:	4798      	blx	r3
			return;
   142fe:	e721      	b.n	14144 <store_file_packet+0x34>
		received_file_size += wsize;
   14300:	4c21      	ldr	r4, [pc, #132]	; (14388 <store_file_packet+0x278>)
   14302:	6823      	ldr	r3, [r4, #0]
   14304:	9909      	ldr	r1, [sp, #36]	; 0x24
   14306:	468c      	mov	ip, r1
   14308:	4463      	add	r3, ip
   1430a:	001a      	movs	r2, r3
   1430c:	6023      	str	r3, [r4, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1430e:	4d24      	ldr	r5, [pc, #144]	; (143a0 <store_file_packet+0x290>)
   14310:	682b      	ldr	r3, [r5, #0]
   14312:	4924      	ldr	r1, [pc, #144]	; (143a4 <store_file_packet+0x294>)
   14314:	2001      	movs	r0, #1
   14316:	4e0f      	ldr	r6, [pc, #60]	; (14354 <store_file_packet+0x244>)
   14318:	47b0      	blx	r6
		if (received_file_size >= http_file_size) {
   1431a:	6822      	ldr	r2, [r4, #0]
   1431c:	682b      	ldr	r3, [r5, #0]
   1431e:	429a      	cmp	r2, r3
   14320:	d200      	bcs.n	14324 <store_file_packet+0x214>
   14322:	e70f      	b.n	14144 <store_file_packet+0x34>
			f_close(&file_object);
   14324:	480f      	ldr	r0, [pc, #60]	; (14364 <store_file_packet+0x254>)
   14326:	4b11      	ldr	r3, [pc, #68]	; (1436c <store_file_packet+0x25c>)
   14328:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   1432a:	491f      	ldr	r1, [pc, #124]	; (143a8 <store_file_packet+0x298>)
   1432c:	2001      	movs	r0, #1
   1432e:	4b09      	ldr	r3, [pc, #36]	; (14354 <store_file_packet+0x244>)
   14330:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   14332:	2280      	movs	r2, #128	; 0x80
   14334:	0412      	lsls	r2, r2, #16
   14336:	4b1d      	ldr	r3, [pc, #116]	; (143ac <store_file_packet+0x29c>)
   14338:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   1433a:	2010      	movs	r0, #16
   1433c:	4b13      	ldr	r3, [pc, #76]	; (1438c <store_file_packet+0x27c>)
   1433e:	4798      	blx	r3
			return;
   14340:	e700      	b.n	14144 <store_file_packet+0x34>
   14342:	46c0      	nop			; (mov r8, r8)
   14344:	2000044f 	.word	0x2000044f
   14348:	20000064 	.word	0x20000064
   1434c:	00028369 	.word	0x00028369
   14350:	0002836c 	.word	0x0002836c
   14354:	0001901d 	.word	0x0001901d
   14358:	00026667 	.word	0x00026667
   1435c:	0002661b 	.word	0x0002661b
   14360:	00026253 	.word	0x00026253
   14364:	20000680 	.word	0x20000680
   14368:	00021185 	.word	0x00021185
   1436c:	000215d1 	.word	0x000215d1
   14370:	000266c1 	.word	0x000266c1
   14374:	00026697 	.word	0x00026697
   14378:	000003e7 	.word	0x000003e7
   1437c:	00028390 	.word	0x00028390
   14380:	0002656d 	.word	0x0002656d
   14384:	00028398 	.word	0x00028398
   14388:	20000ae4 	.word	0x20000ae4
   1438c:	00013cb1 	.word	0x00013cb1
   14390:	0002130d 	.word	0x0002130d
   14394:	00028434 	.word	0x00028434
   14398:	000283c0 	.word	0x000283c0
   1439c:	00028400 	.word	0x00028400
   143a0:	200006a4 	.word	0x200006a4
   143a4:	00028470 	.word	0x00028470
   143a8:	000284a4 	.word	0x000284a4
   143ac:	41004400 	.word	0x41004400

000143b0 <http_client_callback>:
{
   143b0:	b570      	push	{r4, r5, r6, lr}
   143b2:	0014      	movs	r4, r2
	switch (type) {
   143b4:	2904      	cmp	r1, #4
   143b6:	d807      	bhi.n	143c8 <http_client_callback+0x18>
   143b8:	0089      	lsls	r1, r1, #2
   143ba:	4b2d      	ldr	r3, [pc, #180]	; (14470 <http_client_callback+0xc0>)
   143bc:	585b      	ldr	r3, [r3, r1]
   143be:	469f      	mov	pc, r3
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   143c0:	492c      	ldr	r1, [pc, #176]	; (14474 <http_client_callback+0xc4>)
   143c2:	2001      	movs	r0, #1
   143c4:	4b2c      	ldr	r3, [pc, #176]	; (14478 <http_client_callback+0xc8>)
   143c6:	4798      	blx	r3
}
   143c8:	bd70      	pop	{r4, r5, r6, pc}
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   143ca:	492c      	ldr	r1, [pc, #176]	; (1447c <http_client_callback+0xcc>)
   143cc:	2001      	movs	r0, #1
   143ce:	4b2a      	ldr	r3, [pc, #168]	; (14478 <http_client_callback+0xc8>)
   143d0:	4798      	blx	r3
		add_state(GET_REQUESTED);
   143d2:	2004      	movs	r0, #4
   143d4:	4b2a      	ldr	r3, [pc, #168]	; (14480 <http_client_callback+0xd0>)
   143d6:	4798      	blx	r3
		break;
   143d8:	e7f6      	b.n	143c8 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   143da:	8812      	ldrh	r2, [r2, #0]
   143dc:	6863      	ldr	r3, [r4, #4]
   143de:	4929      	ldr	r1, [pc, #164]	; (14484 <http_client_callback+0xd4>)
   143e0:	2001      	movs	r0, #1
   143e2:	4d25      	ldr	r5, [pc, #148]	; (14478 <http_client_callback+0xc8>)
   143e4:	47a8      	blx	r5
		if ((unsigned int)data->recv_response.response_code == 200) {
   143e6:	8823      	ldrh	r3, [r4, #0]
   143e8:	2bc8      	cmp	r3, #200	; 0xc8
   143ea:	d110      	bne.n	1440e <http_client_callback+0x5e>
			http_file_size = data->recv_response.content_length;
   143ec:	6861      	ldr	r1, [r4, #4]
   143ee:	4b26      	ldr	r3, [pc, #152]	; (14488 <http_client_callback+0xd8>)
   143f0:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   143f2:	2200      	movs	r2, #0
   143f4:	4b25      	ldr	r3, [pc, #148]	; (1448c <http_client_callback+0xdc>)
   143f6:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   143f8:	2380      	movs	r3, #128	; 0x80
   143fa:	009b      	lsls	r3, r3, #2
   143fc:	4299      	cmp	r1, r3
   143fe:	d8e3      	bhi.n	143c8 <http_client_callback+0x18>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14400:	68a0      	ldr	r0, [r4, #8]
   14402:	4b23      	ldr	r3, [pc, #140]	; (14490 <http_client_callback+0xe0>)
   14404:	4798      	blx	r3
			add_state(COMPLETED);
   14406:	2010      	movs	r0, #16
   14408:	4b1d      	ldr	r3, [pc, #116]	; (14480 <http_client_callback+0xd0>)
   1440a:	4798      	blx	r3
   1440c:	e7dc      	b.n	143c8 <http_client_callback+0x18>
			add_state(CANCELED);
   1440e:	2020      	movs	r0, #32
   14410:	4b1b      	ldr	r3, [pc, #108]	; (14480 <http_client_callback+0xd0>)
   14412:	4798      	blx	r3
			return;
   14414:	e7d8      	b.n	143c8 <http_client_callback+0x18>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14416:	6811      	ldr	r1, [r2, #0]
   14418:	6850      	ldr	r0, [r2, #4]
   1441a:	4b1d      	ldr	r3, [pc, #116]	; (14490 <http_client_callback+0xe0>)
   1441c:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   1441e:	7a23      	ldrb	r3, [r4, #8]
   14420:	2b00      	cmp	r3, #0
   14422:	d0d1      	beq.n	143c8 <http_client_callback+0x18>
			add_state(COMPLETED);
   14424:	2010      	movs	r0, #16
   14426:	4b16      	ldr	r3, [pc, #88]	; (14480 <http_client_callback+0xd0>)
   14428:	4798      	blx	r3
   1442a:	e7cd      	b.n	143c8 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   1442c:	6812      	ldr	r2, [r2, #0]
   1442e:	4919      	ldr	r1, [pc, #100]	; (14494 <http_client_callback+0xe4>)
   14430:	2001      	movs	r0, #1
   14432:	4b11      	ldr	r3, [pc, #68]	; (14478 <http_client_callback+0xc8>)
   14434:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   14436:	6823      	ldr	r3, [r4, #0]
   14438:	330b      	adds	r3, #11
   1443a:	d1c5      	bne.n	143c8 <http_client_callback+0x18>
	return ((down_state & mask) != 0);
   1443c:	4b16      	ldr	r3, [pc, #88]	; (14498 <http_client_callback+0xe8>)
   1443e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   14440:	071b      	lsls	r3, r3, #28
   14442:	d406      	bmi.n	14452 <http_client_callback+0xa2>
	return ((down_state & mask) != 0);
   14444:	4b14      	ldr	r3, [pc, #80]	; (14498 <http_client_callback+0xe8>)
   14446:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   14448:	075a      	lsls	r2, r3, #29
   1444a:	d40b      	bmi.n	14464 <http_client_callback+0xb4>
			start_download();
   1444c:	4b13      	ldr	r3, [pc, #76]	; (1449c <http_client_callback+0xec>)
   1444e:	4798      	blx	r3
   14450:	e7ba      	b.n	143c8 <http_client_callback+0x18>
				f_close(&file_object);
   14452:	4813      	ldr	r0, [pc, #76]	; (144a0 <http_client_callback+0xf0>)
   14454:	4b13      	ldr	r3, [pc, #76]	; (144a4 <http_client_callback+0xf4>)
   14456:	4798      	blx	r3
	down_state &= ~mask;
   14458:	4a0f      	ldr	r2, [pc, #60]	; (14498 <http_client_callback+0xe8>)
   1445a:	7813      	ldrb	r3, [r2, #0]
   1445c:	2108      	movs	r1, #8
   1445e:	438b      	bics	r3, r1
   14460:	7013      	strb	r3, [r2, #0]
   14462:	e7ef      	b.n	14444 <http_client_callback+0x94>
   14464:	2204      	movs	r2, #4
   14466:	4393      	bics	r3, r2
   14468:	4a0b      	ldr	r2, [pc, #44]	; (14498 <http_client_callback+0xe8>)
   1446a:	7013      	strb	r3, [r2, #0]
   1446c:	e7ee      	b.n	1444c <http_client_callback+0x9c>
   1446e:	46c0      	nop			; (mov r8, r8)
   14470:	00027d5c 	.word	0x00027d5c
   14474:	00027efc 	.word	0x00027efc
   14478:	0001901d 	.word	0x0001901d
   1447c:	00027f34 	.word	0x00027f34
   14480:	00013cb1 	.word	0x00013cb1
   14484:	00027f60 	.word	0x00027f60
   14488:	200006a4 	.word	0x200006a4
   1448c:	20000ae4 	.word	0x20000ae4
   14490:	00014111 	.word	0x00014111
   14494:	00027f9c 	.word	0x00027f9c
   14498:	2000044f 	.word	0x2000044f
   1449c:	00013ebd 	.word	0x00013ebd
   144a0:	20000680 	.word	0x20000680
   144a4:	000215d1 	.word	0x000215d1

000144a8 <wifi_cb>:
{
   144a8:	b510      	push	{r4, lr}
   144aa:	b082      	sub	sp, #8
	switch (u8MsgType) {
   144ac:	282c      	cmp	r0, #44	; 0x2c
   144ae:	d003      	beq.n	144b8 <wifi_cb+0x10>
   144b0:	2832      	cmp	r0, #50	; 0x32
   144b2:	d037      	beq.n	14524 <wifi_cb+0x7c>
}
   144b4:	b002      	add	sp, #8
   144b6:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   144b8:	780b      	ldrb	r3, [r1, #0]
   144ba:	2b01      	cmp	r3, #1
   144bc:	d01d      	beq.n	144fa <wifi_cb+0x52>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   144be:	2b00      	cmp	r3, #0
   144c0:	d1f8      	bne.n	144b4 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   144c2:	4928      	ldr	r1, [pc, #160]	; (14564 <wifi_cb+0xbc>)
   144c4:	2001      	movs	r0, #1
   144c6:	4b28      	ldr	r3, [pc, #160]	; (14568 <wifi_cb+0xc0>)
   144c8:	4798      	blx	r3
	down_state &= ~mask;
   144ca:	4a28      	ldr	r2, [pc, #160]	; (1456c <wifi_cb+0xc4>)
   144cc:	7813      	ldrb	r3, [r2, #0]
   144ce:	2102      	movs	r1, #2
   144d0:	438b      	bics	r3, r1
   144d2:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   144d4:	071b      	lsls	r3, r3, #28
   144d6:	d417      	bmi.n	14508 <wifi_cb+0x60>
	return ((down_state & mask) != 0);
   144d8:	4b24      	ldr	r3, [pc, #144]	; (1456c <wifi_cb+0xc4>)
   144da:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   144dc:	075a      	lsls	r2, r3, #29
   144de:	d41c      	bmi.n	1451a <wifi_cb+0x72>
			mqtt_disconnect(&mqtt_inst, 1);
   144e0:	2101      	movs	r1, #1
   144e2:	4823      	ldr	r0, [pc, #140]	; (14570 <wifi_cb+0xc8>)
   144e4:	4b23      	ldr	r3, [pc, #140]	; (14574 <wifi_cb+0xcc>)
   144e6:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   144e8:	23ff      	movs	r3, #255	; 0xff
   144ea:	9300      	str	r3, [sp, #0]
   144ec:	4b22      	ldr	r3, [pc, #136]	; (14578 <wifi_cb+0xd0>)
   144ee:	2202      	movs	r2, #2
   144f0:	210b      	movs	r1, #11
   144f2:	4822      	ldr	r0, [pc, #136]	; (1457c <wifi_cb+0xd4>)
   144f4:	4c22      	ldr	r4, [pc, #136]	; (14580 <wifi_cb+0xd8>)
   144f6:	47a0      	blx	r4
   144f8:	e7dc      	b.n	144b4 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   144fa:	4922      	ldr	r1, [pc, #136]	; (14584 <wifi_cb+0xdc>)
   144fc:	2001      	movs	r0, #1
   144fe:	4b1a      	ldr	r3, [pc, #104]	; (14568 <wifi_cb+0xc0>)
   14500:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   14502:	4b21      	ldr	r3, [pc, #132]	; (14588 <wifi_cb+0xe0>)
   14504:	4798      	blx	r3
   14506:	e7d5      	b.n	144b4 <wifi_cb+0xc>
				f_close(&file_object);
   14508:	4820      	ldr	r0, [pc, #128]	; (1458c <wifi_cb+0xe4>)
   1450a:	4b21      	ldr	r3, [pc, #132]	; (14590 <wifi_cb+0xe8>)
   1450c:	4798      	blx	r3
	down_state &= ~mask;
   1450e:	4a17      	ldr	r2, [pc, #92]	; (1456c <wifi_cb+0xc4>)
   14510:	7813      	ldrb	r3, [r2, #0]
   14512:	2108      	movs	r1, #8
   14514:	438b      	bics	r3, r1
   14516:	7013      	strb	r3, [r2, #0]
   14518:	e7de      	b.n	144d8 <wifi_cb+0x30>
   1451a:	2204      	movs	r2, #4
   1451c:	4393      	bics	r3, r2
   1451e:	4a13      	ldr	r2, [pc, #76]	; (1456c <wifi_cb+0xc4>)
   14520:	7013      	strb	r3, [r2, #0]
   14522:	e7dd      	b.n	144e0 <wifi_cb+0x38>
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14524:	784b      	ldrb	r3, [r1, #1]
   14526:	780a      	ldrb	r2, [r1, #0]
   14528:	78c8      	ldrb	r0, [r1, #3]
   1452a:	9001      	str	r0, [sp, #4]
   1452c:	7889      	ldrb	r1, [r1, #2]
   1452e:	9100      	str	r1, [sp, #0]
   14530:	4918      	ldr	r1, [pc, #96]	; (14594 <wifi_cb+0xec>)
   14532:	2001      	movs	r0, #1
   14534:	4c0c      	ldr	r4, [pc, #48]	; (14568 <wifi_cb+0xc0>)
   14536:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   14538:	2002      	movs	r0, #2
   1453a:	4b17      	ldr	r3, [pc, #92]	; (14598 <wifi_cb+0xf0>)
   1453c:	4798      	blx	r3
		if(do_download_flag == 1)
   1453e:	4b17      	ldr	r3, [pc, #92]	; (1459c <wifi_cb+0xf4>)
   14540:	781b      	ldrb	r3, [r3, #0]
   14542:	2b01      	cmp	r3, #1
   14544:	d00a      	beq.n	1455c <wifi_cb+0xb4>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   14546:	4916      	ldr	r1, [pc, #88]	; (145a0 <wifi_cb+0xf8>)
   14548:	4809      	ldr	r0, [pc, #36]	; (14570 <wifi_cb+0xc8>)
   1454a:	4b16      	ldr	r3, [pc, #88]	; (145a4 <wifi_cb+0xfc>)
   1454c:	4798      	blx	r3
   1454e:	2800      	cmp	r0, #0
   14550:	d0b0      	beq.n	144b4 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14552:	4915      	ldr	r1, [pc, #84]	; (145a8 <wifi_cb+0x100>)
   14554:	2001      	movs	r0, #1
   14556:	4b04      	ldr	r3, [pc, #16]	; (14568 <wifi_cb+0xc0>)
   14558:	4798      	blx	r3
}
   1455a:	e7ab      	b.n	144b4 <wifi_cb+0xc>
			start_download();
   1455c:	4b13      	ldr	r3, [pc, #76]	; (145ac <wifi_cb+0x104>)
   1455e:	4798      	blx	r3
   14560:	e7a8      	b.n	144b4 <wifi_cb+0xc>
   14562:	46c0      	nop			; (mov r8, r8)
   14564:	00028670 	.word	0x00028670
   14568:	0001901d 	.word	0x0001901d
   1456c:	2000044f 	.word	0x2000044f
   14570:	200006ac 	.word	0x200006ac
   14574:	000222e1 	.word	0x000222e1
   14578:	00028694 	.word	0x00028694
   1457c:	000286a0 	.word	0x000286a0
   14580:	0001b441 	.word	0x0001b441
   14584:	00028650 	.word	0x00028650
   14588:	0001b45d 	.word	0x0001b45d
   1458c:	20000680 	.word	0x20000680
   14590:	000215d1 	.word	0x000215d1
   14594:	000286ac 	.word	0x000286ac
   14598:	00013cb1 	.word	0x00013cb1
   1459c:	2000044e 	.word	0x2000044e
   145a0:	000280d8 	.word	0x000280d8
   145a4:	0002221d 	.word	0x0002221d
   145a8:	000286d4 	.word	0x000286d4
   145ac:	00013ebd 	.word	0x00013ebd

000145b0 <init_storage>:
{
   145b0:	b570      	push	{r4, r5, r6, lr}
	sd_mmc_init();
   145b2:	4b1c      	ldr	r3, [pc, #112]	; (14624 <init_storage+0x74>)
   145b4:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"init_storage: please plug an SD/MMC card in slot...\r\n");
   145b6:	491c      	ldr	r1, [pc, #112]	; (14628 <init_storage+0x78>)
   145b8:	2001      	movs	r0, #1
   145ba:	4b1c      	ldr	r3, [pc, #112]	; (1462c <init_storage+0x7c>)
   145bc:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   145be:	4e1c      	ldr	r6, [pc, #112]	; (14630 <init_storage+0x80>)
				LogMessage(LOG_DEBUG_LVL,"init_storage: SD Card install failed.\r\n");
   145c0:	4c1a      	ldr	r4, [pc, #104]	; (1462c <init_storage+0x7c>)
   145c2:	e009      	b.n	145d8 <init_storage+0x28>
   145c4:	491b      	ldr	r1, [pc, #108]	; (14634 <init_storage+0x84>)
   145c6:	47a0      	blx	r4
				LogMessage(LOG_DEBUG_LVL,"init_storage: try unplug and re-plug the card.\r\n");
   145c8:	491b      	ldr	r1, [pc, #108]	; (14638 <init_storage+0x88>)
   145ca:	2001      	movs	r0, #1
   145cc:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   145ce:	4d1b      	ldr	r5, [pc, #108]	; (1463c <init_storage+0x8c>)
   145d0:	2000      	movs	r0, #0
   145d2:	47a8      	blx	r5
   145d4:	2802      	cmp	r0, #2
   145d6:	d1fb      	bne.n	145d0 <init_storage+0x20>
			status = sd_mmc_test_unit_ready(0);
   145d8:	2000      	movs	r0, #0
   145da:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
   145dc:	2801      	cmp	r0, #1
   145de:	d0f1      	beq.n	145c4 <init_storage+0x14>
		} while (CTRL_GOOD != status);
   145e0:	2800      	cmp	r0, #0
   145e2:	d1f9      	bne.n	145d8 <init_storage+0x28>
		LogMessage(LOG_DEBUG_LVL,"init_storage: mounting SD card...\r\n");
   145e4:	4916      	ldr	r1, [pc, #88]	; (14640 <init_storage+0x90>)
   145e6:	3001      	adds	r0, #1
   145e8:	4b10      	ldr	r3, [pc, #64]	; (1462c <init_storage+0x7c>)
   145ea:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   145ec:	4c15      	ldr	r4, [pc, #84]	; (14644 <init_storage+0x94>)
   145ee:	228c      	movs	r2, #140	; 0x8c
   145f0:	0092      	lsls	r2, r2, #2
   145f2:	2100      	movs	r1, #0
   145f4:	0020      	movs	r0, r4
   145f6:	4b14      	ldr	r3, [pc, #80]	; (14648 <init_storage+0x98>)
   145f8:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   145fa:	0021      	movs	r1, r4
   145fc:	2000      	movs	r0, #0
   145fe:	4b13      	ldr	r3, [pc, #76]	; (1464c <init_storage+0x9c>)
   14600:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   14602:	280b      	cmp	r0, #11
   14604:	d007      	beq.n	14616 <init_storage+0x66>
		LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount OK.\r\n");
   14606:	4912      	ldr	r1, [pc, #72]	; (14650 <init_storage+0xa0>)
   14608:	2001      	movs	r0, #1
   1460a:	4b08      	ldr	r3, [pc, #32]	; (1462c <init_storage+0x7c>)
   1460c:	4798      	blx	r3
		add_state(STORAGE_READY);
   1460e:	2001      	movs	r0, #1
   14610:	4b10      	ldr	r3, [pc, #64]	; (14654 <init_storage+0xa4>)
   14612:	4798      	blx	r3
}
   14614:	bd70      	pop	{r4, r5, r6, pc}
			LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount failed! (res %d)\r\n", res);
   14616:	220b      	movs	r2, #11
   14618:	490f      	ldr	r1, [pc, #60]	; (14658 <init_storage+0xa8>)
   1461a:	380a      	subs	r0, #10
   1461c:	4b03      	ldr	r3, [pc, #12]	; (1462c <init_storage+0x7c>)
   1461e:	4798      	blx	r3
			return;
   14620:	e7f8      	b.n	14614 <init_storage+0x64>
   14622:	46c0      	nop			; (mov r8, r8)
   14624:	00019199 	.word	0x00019199
   14628:	00027fcc 	.word	0x00027fcc
   1462c:	0001901d 	.word	0x0001901d
   14630:	000198cd 	.word	0x000198cd
   14634:	00028004 	.word	0x00028004
   14638:	0002802c 	.word	0x0002802c
   1463c:	000191b9 	.word	0x000191b9
   14640:	00028060 	.word	0x00028060
   14644:	20000450 	.word	0x20000450
   14648:	00026253 	.word	0x00026253
   1464c:	00021155 	.word	0x00021155
   14650:	000280b4 	.word	0x000280b4
   14654:	00013cb1 	.word	0x00013cb1
   14658:	00028084 	.word	0x00028084

0001465c <configure_extint_channel>:
{
   1465c:	b510      	push	{r4, lr}
   1465e:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   14660:	ac01      	add	r4, sp, #4
   14662:	0020      	movs	r0, r4
   14664:	4b07      	ldr	r3, [pc, #28]	; (14684 <configure_extint_channel+0x28>)
   14666:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   14668:	2337      	movs	r3, #55	; 0x37
   1466a:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   1466c:	2300      	movs	r3, #0
   1466e:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   14670:	3301      	adds	r3, #1
   14672:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   14674:	3301      	adds	r3, #1
   14676:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   14678:	0021      	movs	r1, r4
   1467a:	2007      	movs	r0, #7
   1467c:	4b02      	ldr	r3, [pc, #8]	; (14688 <configure_extint_channel+0x2c>)
   1467e:	4798      	blx	r3
}
   14680:	b004      	add	sp, #16
   14682:	bd10      	pop	{r4, pc}
   14684:	0001d785 	.word	0x0001d785
   14688:	0001d799 	.word	0x0001d799

0001468c <configure_extint_callbacks>:
{
   1468c:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   1468e:	2200      	movs	r2, #0
   14690:	2107      	movs	r1, #7
   14692:	4804      	ldr	r0, [pc, #16]	; (146a4 <configure_extint_callbacks+0x18>)
   14694:	4b04      	ldr	r3, [pc, #16]	; (146a8 <configure_extint_callbacks+0x1c>)
   14696:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   14698:	2100      	movs	r1, #0
   1469a:	2007      	movs	r0, #7
   1469c:	4b03      	ldr	r3, [pc, #12]	; (146ac <configure_extint_callbacks+0x20>)
   1469e:	4798      	blx	r3
}
   146a0:	bd10      	pop	{r4, pc}
   146a2:	46c0      	nop			; (mov r8, r8)
   146a4:	00013cc1 	.word	0x00013cc1
   146a8:	0001d641 	.word	0x0001d641
   146ac:	0001d66d 	.word	0x0001d66d

000146b0 <SendRealTimeUserGameInput>:
		mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
	}
}

void SendRealTimeUserGameInput(int usr, int led, int act)
{	
   146b0:	b530      	push	{r4, r5, lr}
   146b2:	b083      	sub	sp, #12
   146b4:	0004      	movs	r4, r0
   146b6:	000b      	movs	r3, r1
	
	snprintf(mqtt_msg, 63, "%d,%d", led, act);
   146b8:	9200      	str	r2, [sp, #0]
   146ba:	4a13      	ldr	r2, [pc, #76]	; (14708 <SendRealTimeUserGameInput+0x58>)
   146bc:	213f      	movs	r1, #63	; 0x3f
   146be:	4813      	ldr	r0, [pc, #76]	; (1470c <SendRealTimeUserGameInput+0x5c>)
   146c0:	4d13      	ldr	r5, [pc, #76]	; (14710 <SendRealTimeUserGameInput+0x60>)
   146c2:	47a8      	blx	r5
	if(usr == 1)
   146c4:	2c01      	cmp	r4, #1
   146c6:	d00f      	beq.n	146e8 <SendRealTimeUserGameInput+0x38>
	{	
		mqtt_publish(&mqtt_inst, "RT_usr1_input", mqtt_msg, strlen(mqtt_msg), 1, 0);
	}
	else
	{
		mqtt_publish(&mqtt_inst, RT_GAME_INPUT_USR2, mqtt_msg, strlen(mqtt_msg), 1, 0);
   146c8:	4c10      	ldr	r4, [pc, #64]	; (1470c <SendRealTimeUserGameInput+0x5c>)
   146ca:	0020      	movs	r0, r4
   146cc:	4b11      	ldr	r3, [pc, #68]	; (14714 <SendRealTimeUserGameInput+0x64>)
   146ce:	4798      	blx	r3
   146d0:	0003      	movs	r3, r0
   146d2:	2200      	movs	r2, #0
   146d4:	9201      	str	r2, [sp, #4]
   146d6:	3201      	adds	r2, #1
   146d8:	9200      	str	r2, [sp, #0]
   146da:	0022      	movs	r2, r4
   146dc:	490e      	ldr	r1, [pc, #56]	; (14718 <SendRealTimeUserGameInput+0x68>)
   146de:	480f      	ldr	r0, [pc, #60]	; (1471c <SendRealTimeUserGameInput+0x6c>)
   146e0:	4c0f      	ldr	r4, [pc, #60]	; (14720 <SendRealTimeUserGameInput+0x70>)
   146e2:	47a0      	blx	r4
	}
}
   146e4:	b003      	add	sp, #12
   146e6:	bd30      	pop	{r4, r5, pc}
		mqtt_publish(&mqtt_inst, "RT_usr1_input", mqtt_msg, strlen(mqtt_msg), 1, 0);
   146e8:	4c08      	ldr	r4, [pc, #32]	; (1470c <SendRealTimeUserGameInput+0x5c>)
   146ea:	0020      	movs	r0, r4
   146ec:	4b09      	ldr	r3, [pc, #36]	; (14714 <SendRealTimeUserGameInput+0x64>)
   146ee:	4798      	blx	r3
   146f0:	0003      	movs	r3, r0
   146f2:	2200      	movs	r2, #0
   146f4:	9201      	str	r2, [sp, #4]
   146f6:	3201      	adds	r2, #1
   146f8:	9200      	str	r2, [sp, #0]
   146fa:	0022      	movs	r2, r4
   146fc:	4909      	ldr	r1, [pc, #36]	; (14724 <SendRealTimeUserGameInput+0x74>)
   146fe:	4807      	ldr	r0, [pc, #28]	; (1471c <SendRealTimeUserGameInput+0x6c>)
   14700:	4c07      	ldr	r4, [pc, #28]	; (14720 <SendRealTimeUserGameInput+0x70>)
   14702:	47a0      	blx	r4
   14704:	e7ee      	b.n	146e4 <SendRealTimeUserGameInput+0x34>
   14706:	46c0      	nop			; (mov r8, r8)
   14708:	00027d84 	.word	0x00027d84
   1470c:	20000024 	.word	0x20000024
   14710:	00026509 	.word	0x00026509
   14714:	00026667 	.word	0x00026667
   14718:	00027d9c 	.word	0x00027d9c
   1471c:	200006ac 	.word	0x200006ac
   14720:	00022311 	.word	0x00022311
   14724:	00027d8c 	.word	0x00027d8c

00014728 <SendGameResult>:
	snprintf(mqtt_msg,63, "%d,%d,%d,%d,%d,%d", steps[0], steps[1],steps[2],steps[3],steps[4],steps[5]);
	mqtt_publish(&mqtt_inst, ANS_SEQ_USR1, mqtt_msg, strlen(mqtt_msg), 1, 0);
}

void SendGameResult(int winner)
{
   14728:	b530      	push	{r4, r5, lr}
   1472a:	b083      	sub	sp, #12
   1472c:	0003      	movs	r3, r0
	snprintf(mqtt_msg,63, "%d", winner);
   1472e:	4c0a      	ldr	r4, [pc, #40]	; (14758 <SendGameResult+0x30>)
   14730:	4a0a      	ldr	r2, [pc, #40]	; (1475c <SendGameResult+0x34>)
   14732:	213f      	movs	r1, #63	; 0x3f
   14734:	0020      	movs	r0, r4
   14736:	4d0a      	ldr	r5, [pc, #40]	; (14760 <SendGameResult+0x38>)
   14738:	47a8      	blx	r5
	mqtt_publish(&mqtt_inst, GAME_RESULT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1473a:	0020      	movs	r0, r4
   1473c:	4b09      	ldr	r3, [pc, #36]	; (14764 <SendGameResult+0x3c>)
   1473e:	4798      	blx	r3
   14740:	0003      	movs	r3, r0
   14742:	2200      	movs	r2, #0
   14744:	9201      	str	r2, [sp, #4]
   14746:	3201      	adds	r2, #1
   14748:	9200      	str	r2, [sp, #0]
   1474a:	0022      	movs	r2, r4
   1474c:	4906      	ldr	r1, [pc, #24]	; (14768 <SendGameResult+0x40>)
   1474e:	4807      	ldr	r0, [pc, #28]	; (1476c <SendGameResult+0x44>)
   14750:	4c07      	ldr	r4, [pc, #28]	; (14770 <SendGameResult+0x48>)
   14752:	47a0      	blx	r4
}
   14754:	b003      	add	sp, #12
   14756:	bd30      	pop	{r4, r5, pc}
   14758:	20000024 	.word	0x20000024
   1475c:	00027d70 	.word	0x00027d70
   14760:	00026509 	.word	0x00026509
   14764:	00026667 	.word	0x00026667
   14768:	00027d74 	.word	0x00027d74
   1476c:	200006ac 	.word	0x200006ac
   14770:	00022311 	.word	0x00022311

00014774 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask( void *pvParameters )
{
   14774:	b5f0      	push	{r4, r5, r6, r7, lr}
   14776:	46c6      	mov	lr, r8
   14778:	b500      	push	{lr}
   1477a:	b092      	sub	sp, #72	; 0x48
	tstrWifiInitParam param;
	int8_t ret;
	vTaskDelay(100);
   1477c:	2064      	movs	r0, #100	; 0x64
   1477e:	4bdb      	ldr	r3, [pc, #876]	; (14aec <vWifiTask+0x378>)
   14780:	4798      	blx	r3
	down_state = NOT_READY;
   14782:	2200      	movs	r2, #0
   14784:	4bda      	ldr	r3, [pc, #872]	; (14af0 <vWifiTask+0x37c>)
   14786:	701a      	strb	r2, [r3, #0]
	init_state();
	//Create buffers to send data
	xQueueWifiState = xQueueCreate( 5, sizeof( uint32_t ) );
   14788:	2104      	movs	r1, #4
   1478a:	2005      	movs	r0, #5
   1478c:	4cd9      	ldr	r4, [pc, #868]	; (14af4 <vWifiTask+0x380>)
   1478e:	47a0      	blx	r4
   14790:	4dd9      	ldr	r5, [pc, #868]	; (14af8 <vWifiTask+0x384>)
   14792:	6028      	str	r0, [r5, #0]
	xQueueImuBuffer  = xQueueCreate( 5, sizeof( struct ImuDataPacket ) );
   14794:	2200      	movs	r2, #0
   14796:	2106      	movs	r1, #6
   14798:	2005      	movs	r0, #5
   1479a:	47a0      	blx	r4
   1479c:	4bd7      	ldr	r3, [pc, #860]	; (14afc <vWifiTask+0x388>)
   1479e:	6018      	str	r0, [r3, #0]
	xQueueGameBuffer = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   147a0:	2200      	movs	r2, #0
   147a2:	2114      	movs	r1, #20
   147a4:	2002      	movs	r0, #2
   147a6:	47a0      	blx	r4
   147a8:	4bd5      	ldr	r3, [pc, #852]	; (14b00 <vWifiTask+0x38c>)
   147aa:	6018      	str	r0, [r3, #0]
	xQueueDistanceBuffer = xQueueCreate ( 5, sizeof( uint16_t ) );
   147ac:	2200      	movs	r2, #0
   147ae:	2102      	movs	r1, #2
   147b0:	2005      	movs	r0, #5
   147b2:	47a0      	blx	r4
   147b4:	4bd3      	ldr	r3, [pc, #844]	; (14b04 <vWifiTask+0x390>)
   147b6:	6018      	str	r0, [r3, #0]

	if(xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL)
   147b8:	682b      	ldr	r3, [r5, #0]
   147ba:	2b00      	cmp	r3, #0
   147bc:	d04a      	beq.n	14854 <vWifiTask+0xe0>
   147be:	4bcf      	ldr	r3, [pc, #828]	; (14afc <vWifiTask+0x388>)
   147c0:	681b      	ldr	r3, [r3, #0]
   147c2:	2b00      	cmp	r3, #0
   147c4:	d046      	beq.n	14854 <vWifiTask+0xe0>
   147c6:	4bce      	ldr	r3, [pc, #824]	; (14b00 <vWifiTask+0x38c>)
   147c8:	681b      	ldr	r3, [r3, #0]
   147ca:	2b00      	cmp	r3, #0
   147cc:	d042      	beq.n	14854 <vWifiTask+0xe0>
   147ce:	2800      	cmp	r0, #0
   147d0:	d040      	beq.n	14854 <vWifiTask+0xe0>
	{
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
	}

	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   147d2:	48cd      	ldr	r0, [pc, #820]	; (14b08 <vWifiTask+0x394>)
   147d4:	4bcd      	ldr	r3, [pc, #820]	; (14b0c <vWifiTask+0x398>)
   147d6:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   147d8:	ac05      	add	r4, sp, #20
   147da:	0020      	movs	r0, r4
   147dc:	4bcc      	ldr	r3, [pc, #816]	; (14b10 <vWifiTask+0x39c>)
   147de:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   147e0:	4dcc      	ldr	r5, [pc, #816]	; (14b14 <vWifiTask+0x3a0>)
   147e2:	0021      	movs	r1, r4
   147e4:	0028      	movs	r0, r5
   147e6:	4bcc      	ldr	r3, [pc, #816]	; (14b18 <vWifiTask+0x3a4>)
   147e8:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   147ea:	0028      	movs	r0, r5
   147ec:	4bcb      	ldr	r3, [pc, #812]	; (14b1c <vWifiTask+0x3a8>)
   147ee:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   147f0:	0020      	movs	r0, r4
   147f2:	4bcb      	ldr	r3, [pc, #812]	; (14b20 <vWifiTask+0x3ac>)
   147f4:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   147f6:	2380      	movs	r3, #128	; 0x80
   147f8:	009b      	lsls	r3, r3, #2
   147fa:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   147fc:	6065      	str	r5, [r4, #4]
	httpc_conf.port = 443;
   147fe:	23bc      	movs	r3, #188	; 0xbc
   14800:	33ff      	adds	r3, #255	; 0xff
   14802:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   14804:	3bbb      	subs	r3, #187	; 0xbb
   14806:	3bff      	subs	r3, #255	; 0xff
   14808:	70a3      	strb	r3, [r4, #2]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1480a:	0021      	movs	r1, r4
   1480c:	48c5      	ldr	r0, [pc, #788]	; (14b24 <vWifiTask+0x3b0>)
   1480e:	4bc6      	ldr	r3, [pc, #792]	; (14b28 <vWifiTask+0x3b4>)
   14810:	4798      	blx	r3
   14812:	1e02      	subs	r2, r0, #0
	if (ret < 0) {
   14814:	db22      	blt.n	1485c <vWifiTask+0xe8>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   14816:	49c5      	ldr	r1, [pc, #788]	; (14b2c <vWifiTask+0x3b8>)
   14818:	48c2      	ldr	r0, [pc, #776]	; (14b24 <vWifiTask+0x3b0>)
   1481a:	4bc5      	ldr	r3, [pc, #788]	; (14b30 <vWifiTask+0x3bc>)
   1481c:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();

	/* Initialize the MQTT service. */
	configure_mqtt();
   1481e:	4bc5      	ldr	r3, [pc, #788]	; (14b34 <vWifiTask+0x3c0>)
   14820:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	init_storage();
   14822:	4bc5      	ldr	r3, [pc, #788]	; (14b38 <vWifiTask+0x3c4>)
   14824:	4798      	blx	r3

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   14826:	4bc5      	ldr	r3, [pc, #788]	; (14b3c <vWifiTask+0x3c8>)
   14828:	4798      	blx	r3
	configure_extint_callbacks();
   1482a:	4bc5      	ldr	r3, [pc, #788]	; (14b40 <vWifiTask+0x3cc>)
   1482c:	4798      	blx	r3

	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1482e:	2218      	movs	r2, #24
   14830:	2100      	movs	r1, #0
   14832:	a80c      	add	r0, sp, #48	; 0x30
   14834:	4bc3      	ldr	r3, [pc, #780]	; (14b44 <vWifiTask+0x3d0>)
   14836:	4798      	blx	r3

	nm_bsp_init();
   14838:	4bc3      	ldr	r3, [pc, #780]	; (14b48 <vWifiTask+0x3d4>)
   1483a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   1483c:	4bc3      	ldr	r3, [pc, #780]	; (14b4c <vWifiTask+0x3d8>)
   1483e:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
   14840:	a80c      	add	r0, sp, #48	; 0x30
   14842:	4bc3      	ldr	r3, [pc, #780]	; (14b50 <vWifiTask+0x3dc>)
   14844:	4798      	blx	r3
   14846:	1e02      	subs	r2, r0, #0
	if (M2M_SUCCESS != ret) {
   14848:	d00d      	beq.n	14866 <vWifiTask+0xf2>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1484a:	49c2      	ldr	r1, [pc, #776]	; (14b54 <vWifiTask+0x3e0>)
   1484c:	2001      	movs	r0, #1
   1484e:	4bc2      	ldr	r3, [pc, #776]	; (14b58 <vWifiTask+0x3e4>)
   14850:	4798      	blx	r3
   14852:	e7fe      	b.n	14852 <vWifiTask+0xde>
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   14854:	48c1      	ldr	r0, [pc, #772]	; (14b5c <vWifiTask+0x3e8>)
   14856:	4bad      	ldr	r3, [pc, #692]	; (14b0c <vWifiTask+0x398>)
   14858:	4798      	blx	r3
   1485a:	e7ba      	b.n	147d2 <vWifiTask+0x5e>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1485c:	49c0      	ldr	r1, [pc, #768]	; (14b60 <vWifiTask+0x3ec>)
   1485e:	2001      	movs	r0, #1
   14860:	4bbd      	ldr	r3, [pc, #756]	; (14b58 <vWifiTask+0x3e4>)
   14862:	4798      	blx	r3
   14864:	e7fe      	b.n	14864 <vWifiTask+0xf0>
		while (1) {
				}
		}

	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   14866:	4cbf      	ldr	r4, [pc, #764]	; (14b64 <vWifiTask+0x3f0>)
   14868:	0022      	movs	r2, r4
   1486a:	49bf      	ldr	r1, [pc, #764]	; (14b68 <vWifiTask+0x3f4>)
   1486c:	2001      	movs	r0, #1
   1486e:	4bba      	ldr	r3, [pc, #744]	; (14b58 <vWifiTask+0x3e4>)
   14870:	4798      	blx	r3
	
	//Re-enable socket for MQTT Transfer
	socketInit();
   14872:	4bbe      	ldr	r3, [pc, #760]	; (14b6c <vWifiTask+0x3f8>)
   14874:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   14876:	49be      	ldr	r1, [pc, #760]	; (14b70 <vWifiTask+0x3fc>)
   14878:	48be      	ldr	r0, [pc, #760]	; (14b74 <vWifiTask+0x400>)
   1487a:	4bbf      	ldr	r3, [pc, #764]	; (14b78 <vWifiTask+0x404>)
   1487c:	4798      	blx	r3

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1487e:	23ff      	movs	r3, #255	; 0xff
   14880:	9300      	str	r3, [sp, #0]
   14882:	4bbe      	ldr	r3, [pc, #760]	; (14b7c <vWifiTask+0x408>)
   14884:	2202      	movs	r2, #2
   14886:	210b      	movs	r1, #11
   14888:	0020      	movs	r0, r4
   1488a:	4cbd      	ldr	r4, [pc, #756]	; (14b80 <vWifiTask+0x40c>)
   1488c:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   1488e:	4b98      	ldr	r3, [pc, #608]	; (14af0 <vWifiTask+0x37c>)
   14890:	781b      	ldrb	r3, [r3, #0]

	while (!(is_state_set(WIFI_CONNECTED)))
   14892:	079b      	lsls	r3, r3, #30
   14894:	d40a      	bmi.n	148ac <vWifiTask+0x138>
	{
			/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   14896:	4ebb      	ldr	r6, [pc, #748]	; (14b84 <vWifiTask+0x410>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   14898:	4d9e      	ldr	r5, [pc, #632]	; (14b14 <vWifiTask+0x3a0>)
   1489a:	4cbb      	ldr	r4, [pc, #748]	; (14b88 <vWifiTask+0x414>)
		m2m_wifi_handle_events(NULL);
   1489c:	2000      	movs	r0, #0
   1489e:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   148a0:	0028      	movs	r0, r5
   148a2:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   148a4:	4b92      	ldr	r3, [pc, #584]	; (14af0 <vWifiTask+0x37c>)
   148a6:	781b      	ldrb	r3, [r3, #0]
	while (!(is_state_set(WIFI_CONNECTED)))
   148a8:	079b      	lsls	r3, r3, #30
   148aa:	d5f7      	bpl.n	1489c <vWifiTask+0x128>
	}

	vTaskDelay(1000);
   148ac:	20fa      	movs	r0, #250	; 0xfa
   148ae:	0080      	lsls	r0, r0, #2
   148b0:	4b8e      	ldr	r3, [pc, #568]	; (14aec <vWifiTask+0x378>)
   148b2:	4798      	blx	r3
	
	wifiStateMachine = WIFI_MQTT_HANDLE;
   148b4:	2201      	movs	r2, #1
   148b6:	4bb5      	ldr	r3, [pc, #724]	; (14b8c <vWifiTask+0x418>)
   148b8:	701a      	strb	r2, [r3, #0]
	while (1) {

	switch(wifiStateMachine)
   148ba:	001e      	movs	r6, r3
	m2m_wifi_handle_events(NULL);
   148bc:	4bb1      	ldr	r3, [pc, #708]	; (14b84 <vWifiTask+0x410>)
   148be:	4698      	mov	r8, r3
   148c0:	e026      	b.n	14910 <vWifiTask+0x19c>
	switch(wifiStateMachine)
   148c2:	2b00      	cmp	r3, #0
   148c4:	d000      	beq.n	148c8 <vWifiTask+0x154>
   148c6:	e1aa      	b.n	14c1e <vWifiTask+0x4aa>
	socketDeinit();
   148c8:	4bb1      	ldr	r3, [pc, #708]	; (14b90 <vWifiTask+0x41c>)
   148ca:	4798      	blx	r3
	configure_mqtt();
   148cc:	4b99      	ldr	r3, [pc, #612]	; (14b34 <vWifiTask+0x3c0>)
   148ce:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   148d0:	49a7      	ldr	r1, [pc, #668]	; (14b70 <vWifiTask+0x3fc>)
   148d2:	48a8      	ldr	r0, [pc, #672]	; (14b74 <vWifiTask+0x400>)
   148d4:	4ba8      	ldr	r3, [pc, #672]	; (14b78 <vWifiTask+0x404>)
   148d6:	4798      	blx	r3
	socketInit();
   148d8:	4ba4      	ldr	r3, [pc, #656]	; (14b6c <vWifiTask+0x3f8>)
   148da:	4798      	blx	r3
	if(!(mqtt_inst.isConnected))
   148dc:	2334      	movs	r3, #52	; 0x34
   148de:	4aad      	ldr	r2, [pc, #692]	; (14b94 <vWifiTask+0x420>)
   148e0:	5cd3      	ldrb	r3, [r2, r3]
   148e2:	2b00      	cmp	r3, #0
   148e4:	d050      	beq.n	14988 <vWifiTask+0x214>
		LogMessage(LOG_DEBUG_LVL,"Connected to MQTT Broker!\r\n");
   148e6:	49ac      	ldr	r1, [pc, #688]	; (14b98 <vWifiTask+0x424>)
   148e8:	2001      	movs	r0, #1
   148ea:	4b9b      	ldr	r3, [pc, #620]	; (14b58 <vWifiTask+0x3e4>)
   148ec:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_HANDLE;
   148ee:	2201      	movs	r2, #1
   148f0:	4ba6      	ldr	r3, [pc, #664]	; (14b8c <vWifiTask+0x418>)
   148f2:	701a      	strb	r2, [r3, #0]
		default:
		wifiStateMachine = WIFI_MQTT_INIT;
		break;
		}
	//Check if a new state was called
	uint8_t DataToReceive = 0;
   148f4:	a905      	add	r1, sp, #20
   148f6:	2300      	movs	r3, #0
   148f8:	700b      	strb	r3, [r1, #0]
	if (pdPASS == xQueueReceive( xQueueWifiState, &DataToReceive, 0 ))
   148fa:	4b7f      	ldr	r3, [pc, #508]	; (14af8 <vWifiTask+0x384>)
   148fc:	6818      	ldr	r0, [r3, #0]
   148fe:	2200      	movs	r2, #0
   14900:	4ba6      	ldr	r3, [pc, #664]	; (14b9c <vWifiTask+0x428>)
   14902:	4798      	blx	r3
   14904:	2801      	cmp	r0, #1
   14906:	d100      	bne.n	1490a <vWifiTask+0x196>
   14908:	e18d      	b.n	14c26 <vWifiTask+0x4b2>
	{
		wifiStateMachine = DataToReceive; // Update new state
	}
	
	vTaskDelay(100);	
   1490a:	2064      	movs	r0, #100	; 0x64
   1490c:	4b77      	ldr	r3, [pc, #476]	; (14aec <vWifiTask+0x378>)
   1490e:	4798      	blx	r3
	switch(wifiStateMachine)
   14910:	7833      	ldrb	r3, [r6, #0]
   14912:	2b01      	cmp	r3, #1
   14914:	d049      	beq.n	149aa <vWifiTask+0x236>
   14916:	b25a      	sxtb	r2, r3
   14918:	2a01      	cmp	r2, #1
   1491a:	ddd2      	ble.n	148c2 <vWifiTask+0x14e>
   1491c:	2b02      	cmp	r3, #2
   1491e:	d100      	bne.n	14922 <vWifiTask+0x1ae>
   14920:	e0bf      	b.n	14aa2 <vWifiTask+0x32e>
   14922:	2b03      	cmp	r3, #3
   14924:	d000      	beq.n	14928 <vWifiTask+0x1b4>
   14926:	e17a      	b.n	14c1e <vWifiTask+0x4aa>
	return ((down_state & mask) != 0);
   14928:	4b71      	ldr	r3, [pc, #452]	; (14af0 <vWifiTask+0x37c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	2230      	movs	r2, #48	; 0x30
   1492e:	421a      	tst	r2, r3
   14930:	d10e      	bne.n	14950 <vWifiTask+0x1dc>
		m2m_wifi_handle_events(NULL);
   14932:	4d94      	ldr	r5, [pc, #592]	; (14b84 <vWifiTask+0x410>)
		sw_timer_task(&swt_module_inst);
   14934:	4c77      	ldr	r4, [pc, #476]	; (14b14 <vWifiTask+0x3a0>)
   14936:	4f94      	ldr	r7, [pc, #592]	; (14b88 <vWifiTask+0x414>)
		m2m_wifi_handle_events(NULL);
   14938:	2000      	movs	r0, #0
   1493a:	47a8      	blx	r5
		sw_timer_task(&swt_module_inst);
   1493c:	0020      	movs	r0, r4
   1493e:	47b8      	blx	r7
		vTaskDelay(5);
   14940:	2005      	movs	r0, #5
   14942:	4b6a      	ldr	r3, [pc, #424]	; (14aec <vWifiTask+0x378>)
   14944:	4798      	blx	r3
	return ((down_state & mask) != 0);
   14946:	4b6a      	ldr	r3, [pc, #424]	; (14af0 <vWifiTask+0x37c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	2230      	movs	r2, #48	; 0x30
   1494c:	421a      	tst	r2, r3
   1494e:	d0f3      	beq.n	14938 <vWifiTask+0x1c4>
	socketDeinit();
   14950:	4b8f      	ldr	r3, [pc, #572]	; (14b90 <vWifiTask+0x41c>)
   14952:	4798      	blx	r3
	vTaskDelay(1000);
   14954:	20fa      	movs	r0, #250	; 0xfa
   14956:	0080      	lsls	r0, r0, #2
   14958:	4b64      	ldr	r3, [pc, #400]	; (14aec <vWifiTask+0x378>)
   1495a:	4798      	blx	r3
	do_download_flag = false;
   1495c:	2200      	movs	r2, #0
   1495e:	4b90      	ldr	r3, [pc, #576]	; (14ba0 <vWifiTask+0x42c>)
   14960:	701a      	strb	r2, [r3, #0]
	char test_file_name[] = "0:FlagA.txt";
   14962:	a905      	add	r1, sp, #20
   14964:	4b8f      	ldr	r3, [pc, #572]	; (14ba4 <vWifiTask+0x430>)
   14966:	000a      	movs	r2, r1
   14968:	cb31      	ldmia	r3!, {r0, r4, r5}
   1496a:	c231      	stmia	r2!, {r0, r4, r5}
	FRESULT res = f_open(&file_object,
   1496c:	220a      	movs	r2, #10
   1496e:	488e      	ldr	r0, [pc, #568]	; (14ba8 <vWifiTask+0x434>)
   14970:	4b8e      	ldr	r3, [pc, #568]	; (14bac <vWifiTask+0x438>)
   14972:	4798      	blx	r3
	if (res != FR_OK)
   14974:	2800      	cmp	r0, #0
   14976:	d000      	beq.n	1497a <vWifiTask+0x206>
   14978:	e14b      	b.n	14c12 <vWifiTask+0x49e>
		SerialConsoleWriteString("FlagA.txt added!\r\n");
   1497a:	488d      	ldr	r0, [pc, #564]	; (14bb0 <vWifiTask+0x43c>)
   1497c:	4b63      	ldr	r3, [pc, #396]	; (14b0c <vWifiTask+0x398>)
   1497e:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_INIT;	
   14980:	2200      	movs	r2, #0
   14982:	4b82      	ldr	r3, [pc, #520]	; (14b8c <vWifiTask+0x418>)
   14984:	701a      	strb	r2, [r3, #0]
   14986:	e7b5      	b.n	148f4 <vWifiTask+0x180>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   14988:	498a      	ldr	r1, [pc, #552]	; (14bb4 <vWifiTask+0x440>)
   1498a:	0010      	movs	r0, r2
   1498c:	4b8a      	ldr	r3, [pc, #552]	; (14bb8 <vWifiTask+0x444>)
   1498e:	4798      	blx	r3
   14990:	2800      	cmp	r0, #0
   14992:	d105      	bne.n	149a0 <vWifiTask+0x22c>
	if(mqtt_inst.isConnected)
   14994:	2334      	movs	r3, #52	; 0x34
   14996:	4a7f      	ldr	r2, [pc, #508]	; (14b94 <vWifiTask+0x420>)
   14998:	5cd3      	ldrb	r3, [r2, r3]
   1499a:	2b00      	cmp	r3, #0
   1499c:	d0a7      	beq.n	148ee <vWifiTask+0x17a>
   1499e:	e7a2      	b.n	148e6 <vWifiTask+0x172>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   149a0:	4986      	ldr	r1, [pc, #536]	; (14bbc <vWifiTask+0x448>)
   149a2:	2001      	movs	r0, #1
   149a4:	4b6c      	ldr	r3, [pc, #432]	; (14b58 <vWifiTask+0x3e4>)
   149a6:	4798      	blx	r3
   149a8:	e7f4      	b.n	14994 <vWifiTask+0x220>
	m2m_wifi_handle_events(NULL);
   149aa:	2000      	movs	r0, #0
   149ac:	47c0      	blx	r8
	sw_timer_task(&swt_module_inst);
   149ae:	4859      	ldr	r0, [pc, #356]	; (14b14 <vWifiTask+0x3a0>)
   149b0:	4b75      	ldr	r3, [pc, #468]	; (14b88 <vWifiTask+0x414>)
   149b2:	4798      	blx	r3
	if  (pdPASS == xQueueReceive( xQueueGameBuffer , &gamePacket, 0 ))
   149b4:	4b52      	ldr	r3, [pc, #328]	; (14b00 <vWifiTask+0x38c>)
   149b6:	6818      	ldr	r0, [r3, #0]
   149b8:	2200      	movs	r2, #0
   149ba:	a905      	add	r1, sp, #20
   149bc:	4b77      	ldr	r3, [pc, #476]	; (14b9c <vWifiTask+0x428>)
   149be:	4798      	blx	r3
   149c0:	2801      	cmp	r0, #1
   149c2:	d011      	beq.n	149e8 <vWifiTask+0x274>
	if (pdPASS == xQueueReceive( xQueueImuBuffer , &imuDataVar, 0 ))
   149c4:	4b4d      	ldr	r3, [pc, #308]	; (14afc <vWifiTask+0x388>)
   149c6:	6818      	ldr	r0, [r3, #0]
   149c8:	2200      	movs	r2, #0
   149ca:	a905      	add	r1, sp, #20
   149cc:	4b73      	ldr	r3, [pc, #460]	; (14b9c <vWifiTask+0x428>)
   149ce:	4798      	blx	r3
   149d0:	2801      	cmp	r0, #1
   149d2:	d049      	beq.n	14a68 <vWifiTask+0x2f4>
	if(mqtt_inst.isConnected)
   149d4:	2334      	movs	r3, #52	; 0x34
   149d6:	4a6f      	ldr	r2, [pc, #444]	; (14b94 <vWifiTask+0x420>)
   149d8:	5cd3      	ldrb	r3, [r2, r3]
   149da:	2b00      	cmp	r3, #0
   149dc:	d08a      	beq.n	148f4 <vWifiTask+0x180>
	mqtt_yield(&mqtt_inst, 100);	
   149de:	2164      	movs	r1, #100	; 0x64
   149e0:	0010      	movs	r0, r2
   149e2:	4b77      	ldr	r3, [pc, #476]	; (14bc0 <vWifiTask+0x44c>)
   149e4:	4798      	blx	r3
   149e6:	e785      	b.n	148f4 <vWifiTask+0x180>
		snprintf(mqtt_msg, 63, "{\"game\":[");
   149e8:	4a76      	ldr	r2, [pc, #472]	; (14bc4 <vWifiTask+0x450>)
   149ea:	4b77      	ldr	r3, [pc, #476]	; (14bc8 <vWifiTask+0x454>)
   149ec:	cb03      	ldmia	r3!, {r0, r1}
   149ee:	c203      	stmia	r2!, {r0, r1}
   149f0:	881b      	ldrh	r3, [r3, #0]
   149f2:	8013      	strh	r3, [r2, #0]
				if(gamePacket.game[iter] != 0xFF)
   149f4:	ab05      	add	r3, sp, #20
   149f6:	781f      	ldrb	r7, [r3, #0]
   149f8:	2fff      	cmp	r7, #255	; 0xff
   149fa:	d018      	beq.n	14a2e <vWifiTask+0x2ba>
   149fc:	2400      	movs	r4, #0
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   149fe:	4d73      	ldr	r5, [pc, #460]	; (14bcc <vWifiTask+0x458>)
   14a00:	e005      	b.n	14a0e <vWifiTask+0x29a>
						snprintf(numGame, 5, ",");
   14a02:	a903      	add	r1, sp, #12
   14a04:	232c      	movs	r3, #44	; 0x2c
   14a06:	800b      	strh	r3, [r1, #0]
						strcat(mqtt_msg, numGame);
   14a08:	486e      	ldr	r0, [pc, #440]	; (14bc4 <vWifiTask+0x450>)
   14a0a:	4b71      	ldr	r3, [pc, #452]	; (14bd0 <vWifiTask+0x45c>)
   14a0c:	4798      	blx	r3
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14a0e:	003b      	movs	r3, r7
   14a10:	4a70      	ldr	r2, [pc, #448]	; (14bd4 <vWifiTask+0x460>)
   14a12:	2103      	movs	r1, #3
   14a14:	a803      	add	r0, sp, #12
   14a16:	47a8      	blx	r5
					strcat(mqtt_msg, numGame);
   14a18:	a903      	add	r1, sp, #12
   14a1a:	486a      	ldr	r0, [pc, #424]	; (14bc4 <vWifiTask+0x450>)
   14a1c:	4b6c      	ldr	r3, [pc, #432]	; (14bd0 <vWifiTask+0x45c>)
   14a1e:	4798      	blx	r3
					if(gamePacket.game[iter+1] != 0xFF && iter+1 <GAME_SIZE)
   14a20:	3401      	adds	r4, #1
   14a22:	ab05      	add	r3, sp, #20
   14a24:	5ce7      	ldrb	r7, [r4, r3]
   14a26:	2fff      	cmp	r7, #255	; 0xff
   14a28:	d001      	beq.n	14a2e <vWifiTask+0x2ba>
   14a2a:	2c14      	cmp	r4, #20
   14a2c:	d1e9      	bne.n	14a02 <vWifiTask+0x28e>
		strcat(mqtt_msg, "]}");
   14a2e:	4c65      	ldr	r4, [pc, #404]	; (14bc4 <vWifiTask+0x450>)
   14a30:	0020      	movs	r0, r4
   14a32:	4f69      	ldr	r7, [pc, #420]	; (14bd8 <vWifiTask+0x464>)
   14a34:	47b8      	blx	r7
   14a36:	1820      	adds	r0, r4, r0
   14a38:	2203      	movs	r2, #3
   14a3a:	4968      	ldr	r1, [pc, #416]	; (14bdc <vWifiTask+0x468>)
   14a3c:	4b68      	ldr	r3, [pc, #416]	; (14be0 <vWifiTask+0x46c>)
   14a3e:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,mqtt_msg);LogMessage(LOG_DEBUG_LVL,"\r\n");
   14a40:	0021      	movs	r1, r4
   14a42:	2001      	movs	r0, #1
   14a44:	4d44      	ldr	r5, [pc, #272]	; (14b58 <vWifiTask+0x3e4>)
   14a46:	47a8      	blx	r5
   14a48:	4966      	ldr	r1, [pc, #408]	; (14be4 <vWifiTask+0x470>)
   14a4a:	2001      	movs	r0, #1
   14a4c:	47a8      	blx	r5
		mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14a4e:	0020      	movs	r0, r4
   14a50:	47b8      	blx	r7
   14a52:	0003      	movs	r3, r0
   14a54:	2200      	movs	r2, #0
   14a56:	9201      	str	r2, [sp, #4]
   14a58:	3201      	adds	r2, #1
   14a5a:	9200      	str	r2, [sp, #0]
   14a5c:	0022      	movs	r2, r4
   14a5e:	4962      	ldr	r1, [pc, #392]	; (14be8 <vWifiTask+0x474>)
   14a60:	484c      	ldr	r0, [pc, #304]	; (14b94 <vWifiTask+0x420>)
   14a62:	4c62      	ldr	r4, [pc, #392]	; (14bec <vWifiTask+0x478>)
   14a64:	47a0      	blx	r4
   14a66:	e7ad      	b.n	149c4 <vWifiTask+0x250>
		snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   14a68:	aa05      	add	r2, sp, #20
   14a6a:	2100      	movs	r1, #0
   14a6c:	5e53      	ldrsh	r3, [r2, r1]
   14a6e:	4c55      	ldr	r4, [pc, #340]	; (14bc4 <vWifiTask+0x450>)
   14a70:	2004      	movs	r0, #4
   14a72:	5e11      	ldrsh	r1, [r2, r0]
   14a74:	9101      	str	r1, [sp, #4]
   14a76:	2102      	movs	r1, #2
   14a78:	5e52      	ldrsh	r2, [r2, r1]
   14a7a:	9200      	str	r2, [sp, #0]
   14a7c:	4a5c      	ldr	r2, [pc, #368]	; (14bf0 <vWifiTask+0x47c>)
   14a7e:	213f      	movs	r1, #63	; 0x3f
   14a80:	0020      	movs	r0, r4
   14a82:	4f52      	ldr	r7, [pc, #328]	; (14bcc <vWifiTask+0x458>)
   14a84:	47b8      	blx	r7
		mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14a86:	0020      	movs	r0, r4
   14a88:	4b53      	ldr	r3, [pc, #332]	; (14bd8 <vWifiTask+0x464>)
   14a8a:	4798      	blx	r3
   14a8c:	0003      	movs	r3, r0
   14a8e:	2200      	movs	r2, #0
   14a90:	9201      	str	r2, [sp, #4]
   14a92:	3201      	adds	r2, #1
   14a94:	9200      	str	r2, [sp, #0]
   14a96:	0022      	movs	r2, r4
   14a98:	4956      	ldr	r1, [pc, #344]	; (14bf4 <vWifiTask+0x480>)
   14a9a:	483e      	ldr	r0, [pc, #248]	; (14b94 <vWifiTask+0x420>)
   14a9c:	4c53      	ldr	r4, [pc, #332]	; (14bec <vWifiTask+0x478>)
   14a9e:	47a0      	blx	r4
   14aa0:	e798      	b.n	149d4 <vWifiTask+0x260>
	if(mqtt_disconnect(&mqtt_inst, main_mqtt_broker))
   14aa2:	4944      	ldr	r1, [pc, #272]	; (14bb4 <vWifiTask+0x440>)
   14aa4:	483b      	ldr	r0, [pc, #236]	; (14b94 <vWifiTask+0x420>)
   14aa6:	4b54      	ldr	r3, [pc, #336]	; (14bf8 <vWifiTask+0x484>)
   14aa8:	4798      	blx	r3
   14aaa:	2800      	cmp	r0, #0
   14aac:	d000      	beq.n	14ab0 <vWifiTask+0x33c>
   14aae:	e0ab      	b.n	14c08 <vWifiTask+0x494>
	while((mqtt_inst.isConnected))
   14ab0:	2334      	movs	r3, #52	; 0x34
   14ab2:	4a38      	ldr	r2, [pc, #224]	; (14b94 <vWifiTask+0x420>)
   14ab4:	5cd3      	ldrb	r3, [r2, r3]
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d007      	beq.n	14aca <vWifiTask+0x356>
		m2m_wifi_handle_events(NULL);
   14aba:	4d32      	ldr	r5, [pc, #200]	; (14b84 <vWifiTask+0x410>)
	while((mqtt_inst.isConnected))
   14abc:	0017      	movs	r7, r2
   14abe:	2434      	movs	r4, #52	; 0x34
		m2m_wifi_handle_events(NULL);
   14ac0:	2000      	movs	r0, #0
   14ac2:	47a8      	blx	r5
	while((mqtt_inst.isConnected))
   14ac4:	5d3b      	ldrb	r3, [r7, r4]
   14ac6:	2b00      	cmp	r3, #0
   14ac8:	d1fa      	bne.n	14ac0 <vWifiTask+0x34c>
	socketDeinit();
   14aca:	4b31      	ldr	r3, [pc, #196]	; (14b90 <vWifiTask+0x41c>)
   14acc:	4798      	blx	r3
	do_download_flag = true;
   14ace:	2201      	movs	r2, #1
   14ad0:	4b33      	ldr	r3, [pc, #204]	; (14ba0 <vWifiTask+0x42c>)
   14ad2:	701a      	strb	r2, [r3, #0]
	registerSocketCallback(socket_cb, resolve_cb);
   14ad4:	4949      	ldr	r1, [pc, #292]	; (14bfc <vWifiTask+0x488>)
   14ad6:	484a      	ldr	r0, [pc, #296]	; (14c00 <vWifiTask+0x48c>)
   14ad8:	4b27      	ldr	r3, [pc, #156]	; (14b78 <vWifiTask+0x404>)
   14ada:	4798      	blx	r3
	socketInit();
   14adc:	4b23      	ldr	r3, [pc, #140]	; (14b6c <vWifiTask+0x3f8>)
   14ade:	4798      	blx	r3
	start_download();
   14ae0:	4b48      	ldr	r3, [pc, #288]	; (14c04 <vWifiTask+0x490>)
   14ae2:	4798      	blx	r3
	wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   14ae4:	2203      	movs	r2, #3
   14ae6:	4b29      	ldr	r3, [pc, #164]	; (14b8c <vWifiTask+0x418>)
   14ae8:	701a      	strb	r2, [r3, #0]
   14aea:	e703      	b.n	148f4 <vWifiTask+0x180>
   14aec:	000180f5 	.word	0x000180f5
   14af0:	2000044f 	.word	0x2000044f
   14af4:	00016b2d 	.word	0x00016b2d
   14af8:	20000af8 	.word	0x20000af8
   14afc:	20000af4 	.word	0x20000af4
   14b00:	20000af0 	.word	0x20000af0
   14b04:	20000aec 	.word	0x20000aec
   14b08:	00028500 	.word	0x00028500
   14b0c:	00018f6d 	.word	0x00018f6d
   14b10:	00023c79 	.word	0x00023c79
   14b14:	20004368 	.word	0x20004368
   14b18:	00023c85 	.word	0x00023c85
   14b1c:	00023d31 	.word	0x00023d31
   14b20:	00022c91 	.word	0x00022c91
   14b24:	200043c0 	.word	0x200043c0
   14b28:	00022cb9 	.word	0x00022cb9
   14b2c:	000143b1 	.word	0x000143b1
   14b30:	00022d6d 	.word	0x00022d6d
   14b34:	00013f41 	.word	0x00013f41
   14b38:	000145b1 	.word	0x000145b1
   14b3c:	0001465d 	.word	0x0001465d
   14b40:	0001468d 	.word	0x0001468d
   14b44:	00026253 	.word	0x00026253
   14b48:	0001a185 	.word	0x0001a185
   14b4c:	000144a9 	.word	0x000144a9
   14b50:	0001b09d 	.word	0x0001b09d
   14b54:	00028564 	.word	0x00028564
   14b58:	0001901d 	.word	0x0001901d
   14b5c:	000284d8 	.word	0x000284d8
   14b60:	0002851c 	.word	0x0002851c
   14b64:	000286a0 	.word	0x000286a0
   14b68:	00028590 	.word	0x00028590
   14b6c:	0001cf0d 	.word	0x0001cf0d
   14b70:	00013ea5 	.word	0x00013ea5
   14b74:	00013eb1 	.word	0x00013eb1
   14b78:	0001cf8d 	.word	0x0001cf8d
   14b7c:	00028694 	.word	0x00028694
   14b80:	0001b441 	.word	0x0001b441
   14b84:	0001b1c9 	.word	0x0001b1c9
   14b88:	00023db9 	.word	0x00023db9
   14b8c:	20000ae8 	.word	0x20000ae8
   14b90:	0001cf51 	.word	0x0001cf51
   14b94:	200006ac 	.word	0x200006ac
   14b98:	000285b4 	.word	0x000285b4
   14b9c:	00017305 	.word	0x00017305
   14ba0:	2000044e 	.word	0x2000044e
   14ba4:	00028644 	.word	0x00028644
   14ba8:	20000680 	.word	0x20000680
   14bac:	00021185 	.word	0x00021185
   14bb0:	00028630 	.word	0x00028630
   14bb4:	000280d8 	.word	0x000280d8
   14bb8:	0002221d 	.word	0x0002221d
   14bbc:	000286d4 	.word	0x000286d4
   14bc0:	00022371 	.word	0x00022371
   14bc4:	20000024 	.word	0x20000024
   14bc8:	00027dac 	.word	0x00027dac
   14bcc:	00026509 	.word	0x00026509
   14bd0:	000265ed 	.word	0x000265ed
   14bd4:	00027d70 	.word	0x00027d70
   14bd8:	00026667 	.word	0x00026667
   14bdc:	000285d0 	.word	0x000285d0
   14be0:	0002621d 	.word	0x0002621d
   14be4:	0002ae7c 	.word	0x0002ae7c
   14be8:	000285d4 	.word	0x000285d4
   14bec:	00022311 	.word	0x00022311
   14bf0:	000285e8 	.word	0x000285e8
   14bf4:	0002860c 	.word	0x0002860c
   14bf8:	000222e1 	.word	0x000222e1
   14bfc:	000140c5 	.word	0x000140c5
   14c00:	00014105 	.word	0x00014105
   14c04:	00013ebd 	.word	0x00013ebd
		LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14c08:	4909      	ldr	r1, [pc, #36]	; (14c30 <vWifiTask+0x4bc>)
   14c0a:	2001      	movs	r0, #1
   14c0c:	4b09      	ldr	r3, [pc, #36]	; (14c34 <vWifiTask+0x4c0>)
   14c0e:	4798      	blx	r3
   14c10:	e74e      	b.n	14ab0 <vWifiTask+0x33c>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   14c12:	0002      	movs	r2, r0
   14c14:	4908      	ldr	r1, [pc, #32]	; (14c38 <vWifiTask+0x4c4>)
   14c16:	2000      	movs	r0, #0
   14c18:	4b06      	ldr	r3, [pc, #24]	; (14c34 <vWifiTask+0x4c0>)
   14c1a:	4798      	blx	r3
   14c1c:	e6b0      	b.n	14980 <vWifiTask+0x20c>
		wifiStateMachine = WIFI_MQTT_INIT;
   14c1e:	2200      	movs	r2, #0
   14c20:	4b06      	ldr	r3, [pc, #24]	; (14c3c <vWifiTask+0x4c8>)
   14c22:	701a      	strb	r2, [r3, #0]
		break;
   14c24:	e666      	b.n	148f4 <vWifiTask+0x180>
		wifiStateMachine = DataToReceive; // Update new state
   14c26:	ab05      	add	r3, sp, #20
   14c28:	781a      	ldrb	r2, [r3, #0]
   14c2a:	4b04      	ldr	r3, [pc, #16]	; (14c3c <vWifiTask+0x4c8>)
   14c2c:	701a      	strb	r2, [r3, #0]
   14c2e:	e66c      	b.n	1490a <vWifiTask+0x196>
   14c30:	000286d4 	.word	0x000286d4
   14c34:	0001901d 	.word	0x0001901d
   14c38:	00028620 	.word	0x00028620
   14c3c:	20000ae8 	.word	0x20000ae8

00014c40 <WifiHandlerSetState>:
	return 0;
}


void WifiHandlerSetState(uint8_t state)
{
   14c40:	b510      	push	{r4, lr}
   14c42:	b082      	sub	sp, #8
   14c44:	466b      	mov	r3, sp
   14c46:	71d8      	strb	r0, [r3, #7]
if( state <= WIFI_DOWNLOAD_HANDLE){
   14c48:	2803      	cmp	r0, #3
   14c4a:	d901      	bls.n	14c50 <WifiHandlerSetState+0x10>
	xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
}
}
   14c4c:	b002      	add	sp, #8
   14c4e:	bd10      	pop	{r4, pc}
	xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
   14c50:	4b04      	ldr	r3, [pc, #16]	; (14c64 <WifiHandlerSetState+0x24>)
   14c52:	6818      	ldr	r0, [r3, #0]
   14c54:	2300      	movs	r3, #0
   14c56:	220a      	movs	r2, #10
   14c58:	4669      	mov	r1, sp
   14c5a:	3107      	adds	r1, #7
   14c5c:	4c02      	ldr	r4, [pc, #8]	; (14c68 <WifiHandlerSetState+0x28>)
   14c5e:	47a0      	blx	r4
}
   14c60:	e7f4      	b.n	14c4c <WifiHandlerSetState+0xc>
   14c62:	46c0      	nop			; (mov r8, r8)
   14c64:	20000af8 	.word	0x20000af8
   14c68:	00016c69 	.word	0x00016c69

00014c6c <WifiAddImuDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddImuDataToQueue(struct ImuDataPacket* imuPacket)
{
   14c6c:	b510      	push	{r4, lr}
   14c6e:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueImuBuffer , imuPacket, ( TickType_t ) 10);
   14c70:	4b03      	ldr	r3, [pc, #12]	; (14c80 <WifiAddImuDataToQueue+0x14>)
   14c72:	6818      	ldr	r0, [r3, #0]
   14c74:	2300      	movs	r3, #0
   14c76:	220a      	movs	r2, #10
   14c78:	4c02      	ldr	r4, [pc, #8]	; (14c84 <WifiAddImuDataToQueue+0x18>)
   14c7a:	47a0      	blx	r4
	return error;
}
   14c7c:	bd10      	pop	{r4, pc}
   14c7e:	46c0      	nop			; (mov r8, r8)
   14c80:	20000af4 	.word	0x20000af4
   14c84:	00016c69 	.word	0x00016c69

00014c88 <WifiAddDistanceDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   14c88:	b510      	push	{r4, lr}
   14c8a:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueDistanceBuffer  , distance, ( TickType_t ) 10);
   14c8c:	4b03      	ldr	r3, [pc, #12]	; (14c9c <WifiAddDistanceDataToQueue+0x14>)
   14c8e:	6818      	ldr	r0, [r3, #0]
   14c90:	2300      	movs	r3, #0
   14c92:	220a      	movs	r2, #10
   14c94:	4c02      	ldr	r4, [pc, #8]	; (14ca0 <WifiAddDistanceDataToQueue+0x18>)
   14c96:	47a0      	blx	r4
	return error;
}
   14c98:	bd10      	pop	{r4, pc}
   14c9a:	46c0      	nop			; (mov r8, r8)
   14c9c:	20000aec 	.word	0x20000aec
   14ca0:	00016c69 	.word	0x00016c69

00014ca4 <WifiAddGameDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   14ca4:	b510      	push	{r4, lr}
   14ca6:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueGameBuffer , game, ( TickType_t ) 10);
   14ca8:	4b03      	ldr	r3, [pc, #12]	; (14cb8 <WifiAddGameDataToQueue+0x14>)
   14caa:	6818      	ldr	r0, [r3, #0]
   14cac:	2300      	movs	r3, #0
   14cae:	220a      	movs	r2, #10
   14cb0:	4c02      	ldr	r4, [pc, #8]	; (14cbc <WifiAddGameDataToQueue+0x18>)
   14cb2:	47a0      	blx	r4
	return error;
   14cb4:	bd10      	pop	{r4, pc}
   14cb6:	46c0      	nop			; (mov r8, r8)
   14cb8:	20000af0 	.word	0x20000af0
   14cbc:	00016c69 	.word	0x00016c69

00014cc0 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14cc0:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14cc2:	2207      	movs	r2, #7
   14cc4:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   14cc6:	421a      	tst	r2, r3
   14cc8:	d1fc      	bne.n	14cc4 <_i2c_master_wait_for_sync+0x4>
}
   14cca:	4770      	bx	lr

00014ccc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   14ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cce:	46d6      	mov	lr, sl
   14cd0:	464f      	mov	r7, r9
   14cd2:	4646      	mov	r6, r8
   14cd4:	b5c0      	push	{r6, r7, lr}
   14cd6:	b08a      	sub	sp, #40	; 0x28
   14cd8:	0006      	movs	r6, r0
   14cda:	000f      	movs	r7, r1
   14cdc:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   14cde:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14ce0:	0008      	movs	r0, r1
   14ce2:	4ba0      	ldr	r3, [pc, #640]	; (14f64 <i2c_master_init+0x298>)
   14ce4:	4798      	blx	r3
   14ce6:	4aa0      	ldr	r2, [pc, #640]	; (14f68 <i2c_master_init+0x29c>)
   14ce8:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   14cea:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14cec:	2301      	movs	r3, #1
   14cee:	40ab      	lsls	r3, r5
   14cf0:	430b      	orrs	r3, r1
   14cf2:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
   14cf4:	a909      	add	r1, sp, #36	; 0x24
   14cf6:	7b23      	ldrb	r3, [r4, #12]
   14cf8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14cfa:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14cfc:	b2c5      	uxtb	r5, r0
   14cfe:	0028      	movs	r0, r5
   14d00:	4b9a      	ldr	r3, [pc, #616]	; (14f6c <i2c_master_init+0x2a0>)
   14d02:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14d04:	0028      	movs	r0, r5
   14d06:	4b9a      	ldr	r3, [pc, #616]	; (14f70 <i2c_master_init+0x2a4>)
   14d08:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14d0a:	7b20      	ldrb	r0, [r4, #12]
   14d0c:	2100      	movs	r1, #0
   14d0e:	4b99      	ldr	r3, [pc, #612]	; (14f74 <i2c_master_init+0x2a8>)
   14d10:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14d12:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
   14d14:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14d16:	079b      	lsls	r3, r3, #30
   14d18:	d505      	bpl.n	14d26 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
   14d1a:	b00a      	add	sp, #40	; 0x28
   14d1c:	bc1c      	pop	{r2, r3, r4}
   14d1e:	4690      	mov	r8, r2
   14d20:	4699      	mov	r9, r3
   14d22:	46a2      	mov	sl, r4
   14d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14d26:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
   14d28:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14d2a:	07db      	lsls	r3, r3, #31
   14d2c:	d4f5      	bmi.n	14d1a <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   14d2e:	6830      	ldr	r0, [r6, #0]
   14d30:	4b8c      	ldr	r3, [pc, #560]	; (14f64 <i2c_master_init+0x298>)
   14d32:	4699      	mov	r9, r3
   14d34:	4798      	blx	r3
   14d36:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   14d38:	498f      	ldr	r1, [pc, #572]	; (14f78 <i2c_master_init+0x2ac>)
   14d3a:	4b90      	ldr	r3, [pc, #576]	; (14f7c <i2c_master_init+0x2b0>)
   14d3c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14d3e:	00ad      	lsls	r5, r5, #2
   14d40:	4b8f      	ldr	r3, [pc, #572]	; (14f80 <i2c_master_init+0x2b4>)
   14d42:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
   14d44:	2300      	movs	r3, #0
   14d46:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
   14d48:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
   14d4a:	2500      	movs	r5, #0
   14d4c:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
   14d4e:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
   14d50:	2225      	movs	r2, #37	; 0x25
   14d52:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
   14d54:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   14d56:	3314      	adds	r3, #20
   14d58:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14d5a:	6833      	ldr	r3, [r6, #0]
   14d5c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   14d5e:	0018      	movs	r0, r3
   14d60:	47c8      	blx	r9
   14d62:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14d64:	2380      	movs	r3, #128	; 0x80
   14d66:	aa08      	add	r2, sp, #32
   14d68:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14d6a:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14d6c:	2301      	movs	r3, #1
   14d6e:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
   14d70:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
   14d72:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
   14d74:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
   14d76:	2800      	cmp	r0, #0
   14d78:	d100      	bne.n	14d7c <i2c_master_init+0xb0>
   14d7a:	e0af      	b.n	14edc <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
   14d7c:	ab08      	add	r3, sp, #32
   14d7e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14d80:	2302      	movs	r3, #2
   14d82:	aa08      	add	r2, sp, #32
   14d84:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   14d86:	0c00      	lsrs	r0, r0, #16
   14d88:	b2c0      	uxtb	r0, r0
   14d8a:	0011      	movs	r1, r2
   14d8c:	4b7d      	ldr	r3, [pc, #500]	; (14f84 <i2c_master_init+0x2b8>)
   14d8e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
   14d90:	2f00      	cmp	r7, #0
   14d92:	d100      	bne.n	14d96 <i2c_master_init+0xca>
   14d94:	e0a7      	b.n	14ee6 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
   14d96:	ab08      	add	r3, sp, #32
   14d98:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14d9a:	2302      	movs	r3, #2
   14d9c:	aa08      	add	r2, sp, #32
   14d9e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   14da0:	0c3f      	lsrs	r7, r7, #16
   14da2:	b2f8      	uxtb	r0, r7
   14da4:	0011      	movs	r1, r2
   14da6:	4b77      	ldr	r3, [pc, #476]	; (14f84 <i2c_master_init+0x2b8>)
   14da8:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   14daa:	8aa3      	ldrh	r3, [r4, #20]
   14dac:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
   14dae:	8ae3      	ldrh	r3, [r4, #22]
   14db0:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
   14db2:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14db4:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
   14db6:	2b00      	cmp	r3, #0
   14db8:	d104      	bne.n	14dc4 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14dba:	4b73      	ldr	r3, [pc, #460]	; (14f88 <i2c_master_init+0x2bc>)
   14dbc:	789b      	ldrb	r3, [r3, #2]
   14dbe:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14dc0:	0fdb      	lsrs	r3, r3, #31
   14dc2:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
   14dc4:	68a1      	ldr	r1, [r4, #8]
   14dc6:	6923      	ldr	r3, [r4, #16]
   14dc8:	430b      	orrs	r3, r1
   14dca:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
   14dcc:	2224      	movs	r2, #36	; 0x24
   14dce:	5ca2      	ldrb	r2, [r4, r2]
   14dd0:	2a00      	cmp	r2, #0
   14dd2:	d002      	beq.n	14dda <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   14dd4:	2280      	movs	r2, #128	; 0x80
   14dd6:	05d2      	lsls	r2, r2, #23
   14dd8:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
   14dda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14ddc:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   14dde:	222c      	movs	r2, #44	; 0x2c
   14de0:	5ca2      	ldrb	r2, [r4, r2]
   14de2:	2a00      	cmp	r2, #0
   14de4:	d103      	bne.n	14dee <i2c_master_init+0x122>
   14de6:	2280      	movs	r2, #128	; 0x80
   14de8:	0492      	lsls	r2, r2, #18
   14dea:	4291      	cmp	r1, r2
   14dec:	d102      	bne.n	14df4 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   14dee:	2280      	movs	r2, #128	; 0x80
   14df0:	0512      	lsls	r2, r2, #20
   14df2:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
   14df4:	222d      	movs	r2, #45	; 0x2d
   14df6:	5ca2      	ldrb	r2, [r4, r2]
   14df8:	2a00      	cmp	r2, #0
   14dfa:	d002      	beq.n	14e02 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   14dfc:	2280      	movs	r2, #128	; 0x80
   14dfe:	0412      	lsls	r2, r2, #16
   14e00:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
   14e02:	222e      	movs	r2, #46	; 0x2e
   14e04:	5ca2      	ldrb	r2, [r4, r2]
   14e06:	2a00      	cmp	r2, #0
   14e08:	d002      	beq.n	14e10 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   14e0a:	2280      	movs	r2, #128	; 0x80
   14e0c:	03d2      	lsls	r2, r2, #15
   14e0e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
   14e10:	4642      	mov	r2, r8
   14e12:	6812      	ldr	r2, [r2, #0]
   14e14:	4313      	orrs	r3, r2
   14e16:	4642      	mov	r2, r8
   14e18:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   14e1a:	2380      	movs	r3, #128	; 0x80
   14e1c:	005b      	lsls	r3, r3, #1
   14e1e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   14e20:	4648      	mov	r0, r9
   14e22:	3014      	adds	r0, #20
   14e24:	b2c0      	uxtb	r0, r0
   14e26:	4b59      	ldr	r3, [pc, #356]	; (14f8c <i2c_master_init+0x2c0>)
   14e28:	4798      	blx	r3
   14e2a:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
   14e2c:	23fa      	movs	r3, #250	; 0xfa
   14e2e:	009b      	lsls	r3, r3, #2
   14e30:	6822      	ldr	r2, [r4, #0]
   14e32:	435a      	muls	r2, r3
   14e34:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14e36:	6863      	ldr	r3, [r4, #4]
   14e38:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
   14e3a:	4d55      	ldr	r5, [pc, #340]	; (14f90 <i2c_master_init+0x2c4>)
   14e3c:	47a8      	blx	r5
   14e3e:	9000      	str	r0, [sp, #0]
   14e40:	9101      	str	r1, [sp, #4]
   14e42:	464b      	mov	r3, r9
   14e44:	0058      	lsls	r0, r3, #1
   14e46:	47a8      	blx	r5
   14e48:	9002      	str	r0, [sp, #8]
   14e4a:	9103      	str	r1, [sp, #12]
   14e4c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   14e4e:	47a8      	blx	r5
   14e50:	9004      	str	r0, [sp, #16]
   14e52:	9105      	str	r1, [sp, #20]
   14e54:	4f4f      	ldr	r7, [pc, #316]	; (14f94 <i2c_master_init+0x2c8>)
   14e56:	4a50      	ldr	r2, [pc, #320]	; (14f98 <i2c_master_init+0x2cc>)
   14e58:	4b50      	ldr	r3, [pc, #320]	; (14f9c <i2c_master_init+0x2d0>)
   14e5a:	9800      	ldr	r0, [sp, #0]
   14e5c:	9901      	ldr	r1, [sp, #4]
   14e5e:	47b8      	blx	r7
   14e60:	0002      	movs	r2, r0
   14e62:	000b      	movs	r3, r1
   14e64:	9804      	ldr	r0, [sp, #16]
   14e66:	9905      	ldr	r1, [sp, #20]
   14e68:	47b8      	blx	r7
   14e6a:	4e4d      	ldr	r6, [pc, #308]	; (14fa0 <i2c_master_init+0x2d4>)
   14e6c:	2200      	movs	r2, #0
   14e6e:	4b4d      	ldr	r3, [pc, #308]	; (14fa4 <i2c_master_init+0x2d8>)
   14e70:	47b0      	blx	r6
   14e72:	9004      	str	r0, [sp, #16]
   14e74:	9105      	str	r1, [sp, #20]
   14e76:	4648      	mov	r0, r9
   14e78:	47a8      	blx	r5
   14e7a:	0002      	movs	r2, r0
   14e7c:	000b      	movs	r3, r1
   14e7e:	9804      	ldr	r0, [sp, #16]
   14e80:	9905      	ldr	r1, [sp, #20]
   14e82:	47b8      	blx	r7
   14e84:	0002      	movs	r2, r0
   14e86:	000b      	movs	r3, r1
   14e88:	4d47      	ldr	r5, [pc, #284]	; (14fa8 <i2c_master_init+0x2dc>)
   14e8a:	9800      	ldr	r0, [sp, #0]
   14e8c:	9901      	ldr	r1, [sp, #4]
   14e8e:	47a8      	blx	r5
   14e90:	9a02      	ldr	r2, [sp, #8]
   14e92:	9b03      	ldr	r3, [sp, #12]
   14e94:	47b0      	blx	r6
   14e96:	2200      	movs	r2, #0
   14e98:	4b44      	ldr	r3, [pc, #272]	; (14fac <i2c_master_init+0x2e0>)
   14e9a:	47a8      	blx	r5
   14e9c:	9a02      	ldr	r2, [sp, #8]
   14e9e:	9b03      	ldr	r3, [sp, #12]
   14ea0:	4d43      	ldr	r5, [pc, #268]	; (14fb0 <i2c_master_init+0x2e4>)
   14ea2:	47a8      	blx	r5
   14ea4:	4b43      	ldr	r3, [pc, #268]	; (14fb4 <i2c_master_init+0x2e8>)
   14ea6:	4798      	blx	r3
   14ea8:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   14eaa:	2380      	movs	r3, #128	; 0x80
   14eac:	049b      	lsls	r3, r3, #18
   14eae:	68a2      	ldr	r2, [r4, #8]
   14eb0:	429a      	cmp	r2, r3
   14eb2:	d01e      	beq.n	14ef2 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14eb4:	0003      	movs	r3, r0
   14eb6:	2040      	movs	r0, #64	; 0x40
   14eb8:	2dff      	cmp	r5, #255	; 0xff
   14eba:	d900      	bls.n	14ebe <i2c_master_init+0x1f2>
   14ebc:	e72d      	b.n	14d1a <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
   14ebe:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
   14ec0:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14ec2:	25ff      	movs	r5, #255	; 0xff
   14ec4:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   14ec6:	0624      	lsls	r4, r4, #24
   14ec8:	4325      	orrs	r5, r4
   14eca:	0400      	lsls	r0, r0, #16
   14ecc:	23ff      	movs	r3, #255	; 0xff
   14ece:	041b      	lsls	r3, r3, #16
   14ed0:	4018      	ands	r0, r3
   14ed2:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14ed4:	4643      	mov	r3, r8
   14ed6:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
   14ed8:	2000      	movs	r0, #0
   14eda:	e71e      	b.n	14d1a <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   14edc:	2100      	movs	r1, #0
   14ede:	4640      	mov	r0, r8
   14ee0:	4b35      	ldr	r3, [pc, #212]	; (14fb8 <i2c_master_init+0x2ec>)
   14ee2:	4798      	blx	r3
   14ee4:	e74a      	b.n	14d7c <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   14ee6:	2101      	movs	r1, #1
   14ee8:	4640      	mov	r0, r8
   14eea:	4b33      	ldr	r3, [pc, #204]	; (14fb8 <i2c_master_init+0x2ec>)
   14eec:	4798      	blx	r3
   14eee:	0007      	movs	r7, r0
   14ef0:	e751      	b.n	14d96 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14ef2:	26fa      	movs	r6, #250	; 0xfa
   14ef4:	00b6      	lsls	r6, r6, #2
   14ef6:	4653      	mov	r3, sl
   14ef8:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   14efa:	9800      	ldr	r0, [sp, #0]
   14efc:	9901      	ldr	r1, [sp, #4]
   14efe:	0002      	movs	r2, r0
   14f00:	000b      	movs	r3, r1
   14f02:	4c27      	ldr	r4, [pc, #156]	; (14fa0 <i2c_master_init+0x2d4>)
   14f04:	47a0      	blx	r4
   14f06:	9000      	str	r0, [sp, #0]
   14f08:	9101      	str	r1, [sp, #4]
   14f0a:	0030      	movs	r0, r6
   14f0c:	4b20      	ldr	r3, [pc, #128]	; (14f90 <i2c_master_init+0x2c4>)
   14f0e:	4798      	blx	r3
   14f10:	2200      	movs	r2, #0
   14f12:	4b2a      	ldr	r3, [pc, #168]	; (14fbc <i2c_master_init+0x2f0>)
   14f14:	47b8      	blx	r7
   14f16:	0002      	movs	r2, r0
   14f18:	000b      	movs	r3, r1
   14f1a:	9800      	ldr	r0, [sp, #0]
   14f1c:	9901      	ldr	r1, [sp, #4]
   14f1e:	4c24      	ldr	r4, [pc, #144]	; (14fb0 <i2c_master_init+0x2e4>)
   14f20:	47a0      	blx	r4
   14f22:	2200      	movs	r2, #0
   14f24:	4b21      	ldr	r3, [pc, #132]	; (14fac <i2c_master_init+0x2e0>)
   14f26:	4c20      	ldr	r4, [pc, #128]	; (14fa8 <i2c_master_init+0x2dc>)
   14f28:	47a0      	blx	r4
   14f2a:	4b22      	ldr	r3, [pc, #136]	; (14fb4 <i2c_master_init+0x2e8>)
   14f2c:	4798      	blx	r3
   14f2e:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
   14f30:	d00c      	beq.n	14f4c <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   14f32:	0031      	movs	r1, r6
   14f34:	9807      	ldr	r0, [sp, #28]
   14f36:	4b22      	ldr	r3, [pc, #136]	; (14fc0 <i2c_master_init+0x2f4>)
   14f38:	4798      	blx	r3
   14f3a:	3802      	subs	r0, #2
   14f3c:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14f3e:	002b      	movs	r3, r5
   14f40:	2dff      	cmp	r5, #255	; 0xff
   14f42:	d80c      	bhi.n	14f5e <i2c_master_init+0x292>
   14f44:	28ff      	cmp	r0, #255	; 0xff
   14f46:	d9bc      	bls.n	14ec2 <i2c_master_init+0x1f6>
   14f48:	2040      	movs	r0, #64	; 0x40
   14f4a:	e6e6      	b.n	14d1a <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   14f4c:	0071      	lsls	r1, r6, #1
   14f4e:	1e48      	subs	r0, r1, #1
   14f50:	9b07      	ldr	r3, [sp, #28]
   14f52:	469c      	mov	ip, r3
   14f54:	4460      	add	r0, ip
   14f56:	4b1a      	ldr	r3, [pc, #104]	; (14fc0 <i2c_master_init+0x2f4>)
   14f58:	4798      	blx	r3
   14f5a:	3801      	subs	r0, #1
   14f5c:	e7ef      	b.n	14f3e <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14f5e:	2040      	movs	r0, #64	; 0x40
   14f60:	e6db      	b.n	14d1a <i2c_master_init+0x4e>
   14f62:	46c0      	nop			; (mov r8, r8)
   14f64:	0001ddad 	.word	0x0001ddad
   14f68:	40000400 	.word	0x40000400
   14f6c:	0001f14d 	.word	0x0001f14d
   14f70:	0001f0c1 	.word	0x0001f0c1
   14f74:	0001dbe9 	.word	0x0001dbe9
   14f78:	00012969 	.word	0x00012969
   14f7c:	0001dde9 	.word	0x0001dde9
   14f80:	200055c0 	.word	0x200055c0
   14f84:	0001f275 	.word	0x0001f275
   14f88:	41002000 	.word	0x41002000
   14f8c:	0001f169 	.word	0x0001f169
   14f90:	000260f5 	.word	0x000260f5
   14f94:	00025561 	.word	0x00025561
   14f98:	e826d695 	.word	0xe826d695
   14f9c:	3e112e0b 	.word	0x3e112e0b
   14fa0:	000248d9 	.word	0x000248d9
   14fa4:	40240000 	.word	0x40240000
   14fa8:	00025a61 	.word	0x00025a61
   14fac:	3ff00000 	.word	0x3ff00000
   14fb0:	00024ef9 	.word	0x00024ef9
   14fb4:	0002608d 	.word	0x0002608d
   14fb8:	0001dc35 	.word	0x0001dc35
   14fbc:	40080000 	.word	0x40080000
   14fc0:	00023fe9 	.word	0x00023fe9

00014fc4 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   14fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fc6:	46ce      	mov	lr, r9
   14fc8:	4647      	mov	r7, r8
   14fca:	b580      	push	{r7, lr}
   14fcc:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14fce:	6803      	ldr	r3, [r0, #0]
   14fd0:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   14fd2:	4e14      	ldr	r6, [pc, #80]	; (15024 <i2c_master_reset+0x60>)
   14fd4:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14fd6:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   14fd8:	0028      	movs	r0, r5
   14fda:	4b13      	ldr	r3, [pc, #76]	; (15028 <i2c_master_reset+0x64>)
   14fdc:	4698      	mov	r8, r3
   14fde:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14fe0:	231f      	movs	r3, #31
   14fe2:	4018      	ands	r0, r3
   14fe4:	2701      	movs	r7, #1
   14fe6:	0039      	movs	r1, r7
   14fe8:	4081      	lsls	r1, r0
   14fea:	3361      	adds	r3, #97	; 0x61
   14fec:	4a0f      	ldr	r2, [pc, #60]	; (1502c <i2c_master_reset+0x68>)
   14fee:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14ff0:	0020      	movs	r0, r4
   14ff2:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   14ff4:	2383      	movs	r3, #131	; 0x83
   14ff6:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   14ff8:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   14ffa:	682b      	ldr	r3, [r5, #0]
   14ffc:	2202      	movs	r2, #2
   14ffe:	4393      	bics	r3, r2
   15000:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
   15002:	4b0b      	ldr	r3, [pc, #44]	; (15030 <i2c_master_reset+0x6c>)
   15004:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   15006:	6820      	ldr	r0, [r4, #0]
   15008:	47c0      	blx	r8
   1500a:	4b0a      	ldr	r3, [pc, #40]	; (15034 <i2c_master_reset+0x70>)
   1500c:	4798      	blx	r3
	cpu_irq_leave_critical();
   1500e:	4b0a      	ldr	r3, [pc, #40]	; (15038 <i2c_master_reset+0x74>)
   15010:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   15012:	0020      	movs	r0, r4
   15014:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   15016:	464b      	mov	r3, r9
   15018:	601f      	str	r7, [r3, #0]
}
   1501a:	bc0c      	pop	{r2, r3}
   1501c:	4690      	mov	r8, r2
   1501e:	4699      	mov	r9, r3
   15020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15022:	46c0      	nop			; (mov r8, r8)
   15024:	00014cc1 	.word	0x00014cc1
   15028:	0001de25 	.word	0x0001de25
   1502c:	e000e100 	.word	0xe000e100
   15030:	0001d599 	.word	0x0001d599
   15034:	0001f19d 	.word	0x0001f19d
   15038:	0001d5d9 	.word	0x0001d5d9

0001503c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1503c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1503e:	7e1a      	ldrb	r2, [r3, #24]
   15040:	0792      	lsls	r2, r2, #30
   15042:	d507      	bpl.n	15054 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   15044:	2202      	movs	r2, #2
   15046:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   15048:	8b5b      	ldrh	r3, [r3, #26]
   1504a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1504c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
   1504e:	17db      	asrs	r3, r3, #31
   15050:	4018      	ands	r0, r3
}
   15052:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   15054:	8b5a      	ldrh	r2, [r3, #26]
   15056:	0752      	lsls	r2, r2, #29
   15058:	d506      	bpl.n	15068 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1505a:	6859      	ldr	r1, [r3, #4]
   1505c:	22c0      	movs	r2, #192	; 0xc0
   1505e:	0292      	lsls	r2, r2, #10
   15060:	430a      	orrs	r2, r1
   15062:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
   15064:	2018      	movs	r0, #24
   15066:	e7f4      	b.n	15052 <_i2c_master_address_response+0x16>
	return STATUS_OK;
   15068:	2000      	movs	r0, #0
   1506a:	e7f2      	b.n	15052 <_i2c_master_address_response+0x16>

0001506c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1506c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1506e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   15070:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   15072:	2401      	movs	r4, #1
   15074:	2502      	movs	r5, #2
   15076:	7e11      	ldrb	r1, [r2, #24]
   15078:	4221      	tst	r1, r4
   1507a:	d10b      	bne.n	15094 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1507c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1507e:	4229      	tst	r1, r5
   15080:	d106      	bne.n	15090 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   15082:	3301      	adds	r3, #1
   15084:	b29b      	uxth	r3, r3
   15086:	8901      	ldrh	r1, [r0, #8]
   15088:	4299      	cmp	r1, r3
   1508a:	d8f4      	bhi.n	15076 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
   1508c:	2012      	movs	r0, #18
   1508e:	e002      	b.n	15096 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
   15090:	2000      	movs	r0, #0
   15092:	e000      	b.n	15096 <_i2c_master_wait_for_bus+0x2a>
   15094:	2000      	movs	r0, #0
}
   15096:	bd30      	pop	{r4, r5, pc}

00015098 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   15098:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1509a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1509c:	6862      	ldr	r2, [r4, #4]
   1509e:	2380      	movs	r3, #128	; 0x80
   150a0:	02db      	lsls	r3, r3, #11
   150a2:	4313      	orrs	r3, r2
   150a4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   150a6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   150a8:	4b02      	ldr	r3, [pc, #8]	; (150b4 <_i2c_master_send_hs_master_code+0x1c>)
   150aa:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   150ac:	2301      	movs	r3, #1
   150ae:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
   150b0:	bd10      	pop	{r4, pc}
   150b2:	46c0      	nop			; (mov r8, r8)
   150b4:	0001506d 	.word	0x0001506d

000150b8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   150b8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
   150ba:	0080      	lsls	r0, r0, #2
   150bc:	4b16      	ldr	r3, [pc, #88]	; (15118 <_tc_interrupt_handler+0x60>)
   150be:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   150c0:	6823      	ldr	r3, [r4, #0]
   150c2:	7b9d      	ldrb	r5, [r3, #14]
   150c4:	7e22      	ldrb	r2, [r4, #24]
   150c6:	7e63      	ldrb	r3, [r4, #25]
   150c8:	4013      	ands	r3, r2
   150ca:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   150cc:	07eb      	lsls	r3, r5, #31
   150ce:	d406      	bmi.n	150de <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   150d0:	07ab      	lsls	r3, r5, #30
   150d2:	d40b      	bmi.n	150ec <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   150d4:	06eb      	lsls	r3, r5, #27
   150d6:	d410      	bmi.n	150fa <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   150d8:	06ab      	lsls	r3, r5, #26
   150da:	d415      	bmi.n	15108 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
   150dc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   150de:	0020      	movs	r0, r4
   150e0:	68a3      	ldr	r3, [r4, #8]
   150e2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   150e4:	2301      	movs	r3, #1
   150e6:	6822      	ldr	r2, [r4, #0]
   150e8:	7393      	strb	r3, [r2, #14]
   150ea:	e7f1      	b.n	150d0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
   150ec:	0020      	movs	r0, r4
   150ee:	68e3      	ldr	r3, [r4, #12]
   150f0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   150f2:	2302      	movs	r3, #2
   150f4:	6822      	ldr	r2, [r4, #0]
   150f6:	7393      	strb	r3, [r2, #14]
   150f8:	e7ec      	b.n	150d4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   150fa:	0020      	movs	r0, r4
   150fc:	6923      	ldr	r3, [r4, #16]
   150fe:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   15100:	2310      	movs	r3, #16
   15102:	6822      	ldr	r2, [r4, #0]
   15104:	7393      	strb	r3, [r2, #14]
   15106:	e7e7      	b.n	150d8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   15108:	0020      	movs	r0, r4
   1510a:	6963      	ldr	r3, [r4, #20]
   1510c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1510e:	6823      	ldr	r3, [r4, #0]
   15110:	2220      	movs	r2, #32
   15112:	739a      	strb	r2, [r3, #14]
}
   15114:	e7e2      	b.n	150dc <_tc_interrupt_handler+0x24>
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	200044a8 	.word	0x200044a8

0001511c <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1511c:	b510      	push	{r4, lr}
   1511e:	2000      	movs	r0, #0
   15120:	4b01      	ldr	r3, [pc, #4]	; (15128 <TC3_Handler+0xc>)
   15122:	4798      	blx	r3
   15124:	bd10      	pop	{r4, pc}
   15126:	46c0      	nop			; (mov r8, r8)
   15128:	000150b9 	.word	0x000150b9

0001512c <TC4_Handler>:
   1512c:	b510      	push	{r4, lr}
   1512e:	2001      	movs	r0, #1
   15130:	4b01      	ldr	r3, [pc, #4]	; (15138 <TC4_Handler+0xc>)
   15132:	4798      	blx	r3
   15134:	bd10      	pop	{r4, pc}
   15136:	46c0      	nop			; (mov r8, r8)
   15138:	000150b9 	.word	0x000150b9

0001513c <TC5_Handler>:
   1513c:	b510      	push	{r4, lr}
   1513e:	2002      	movs	r0, #2
   15140:	4b01      	ldr	r3, [pc, #4]	; (15148 <TC5_Handler+0xc>)
   15142:	4798      	blx	r3
   15144:	bd10      	pop	{r4, pc}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	000150b9 	.word	0x000150b9

0001514c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1514c:	b570      	push	{r4, r5, r6, lr}
   1514e:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   15150:	4b09      	ldr	r3, [pc, #36]	; (15178 <prvHelpCommand+0x2c>)
   15152:	681b      	ldr	r3, [r3, #0]
   15154:	2b00      	cmp	r3, #0
   15156:	d00a      	beq.n	1516e <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   15158:	4c07      	ldr	r4, [pc, #28]	; (15178 <prvHelpCommand+0x2c>)
   1515a:	6825      	ldr	r5, [r4, #0]
   1515c:	682b      	ldr	r3, [r5, #0]
   1515e:	6859      	ldr	r1, [r3, #4]
   15160:	4b06      	ldr	r3, [pc, #24]	; (1517c <prvHelpCommand+0x30>)
   15162:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   15164:	6868      	ldr	r0, [r5, #4]
   15166:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
   15168:	1e43      	subs	r3, r0, #1
   1516a:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
   1516c:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
   1516e:	4904      	ldr	r1, [pc, #16]	; (15180 <prvHelpCommand+0x34>)
   15170:	4b01      	ldr	r3, [pc, #4]	; (15178 <prvHelpCommand+0x2c>)
   15172:	6019      	str	r1, [r3, #0]
   15174:	e7f0      	b.n	15158 <prvHelpCommand+0xc>
   15176:	46c0      	nop			; (mov r8, r8)
   15178:	20000b00 	.word	0x20000b00
   1517c:	00026697 	.word	0x00026697
   15180:	200000b0 	.word	0x200000b0

00015184 <FreeRTOS_CLIRegisterCommand>:
{
   15184:	b570      	push	{r4, r5, r6, lr}
   15186:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
   15188:	d006      	beq.n	15198 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1518a:	2008      	movs	r0, #8
   1518c:	4b0a      	ldr	r3, [pc, #40]	; (151b8 <FreeRTOS_CLIRegisterCommand+0x34>)
   1518e:	4798      	blx	r3
   15190:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
   15192:	d103      	bne.n	1519c <FreeRTOS_CLIRegisterCommand+0x18>
   15194:	b672      	cpsid	i
   15196:	e7fe      	b.n	15196 <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
   15198:	b672      	cpsid	i
   1519a:	e7fe      	b.n	1519a <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
   1519c:	4b07      	ldr	r3, [pc, #28]	; (151bc <FreeRTOS_CLIRegisterCommand+0x38>)
   1519e:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   151a0:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
   151a2:	2300      	movs	r3, #0
   151a4:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
   151a6:	4b06      	ldr	r3, [pc, #24]	; (151c0 <FreeRTOS_CLIRegisterCommand+0x3c>)
   151a8:	681a      	ldr	r2, [r3, #0]
   151aa:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
   151ac:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
   151ae:	4b05      	ldr	r3, [pc, #20]	; (151c4 <FreeRTOS_CLIRegisterCommand+0x40>)
   151b0:	4798      	blx	r3
}
   151b2:	2001      	movs	r0, #1
   151b4:	bd70      	pop	{r4, r5, r6, pc}
   151b6:	46c0      	nop			; (mov r8, r8)
   151b8:	00016775 	.word	0x00016775
   151bc:	000166b1 	.word	0x000166b1
   151c0:	200000ac 	.word	0x200000ac
   151c4:	000166c9 	.word	0x000166c9

000151c8 <FreeRTOS_CLIProcessCommand>:
{
   151c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   151ca:	46de      	mov	lr, fp
   151cc:	4657      	mov	r7, sl
   151ce:	464e      	mov	r6, r9
   151d0:	4645      	mov	r5, r8
   151d2:	b5e0      	push	{r5, r6, r7, lr}
   151d4:	b083      	sub	sp, #12
   151d6:	0006      	movs	r6, r0
   151d8:	9100      	str	r1, [sp, #0]
   151da:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
   151dc:	4b39      	ldr	r3, [pc, #228]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   151de:	681b      	ldr	r3, [r3, #0]
   151e0:	2b00      	cmp	r3, #0
   151e2:	d011      	beq.n	15208 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   151e4:	681b      	ldr	r3, [r3, #0]
   151e6:	689b      	ldr	r3, [r3, #8]
   151e8:	0032      	movs	r2, r6
   151ea:	9901      	ldr	r1, [sp, #4]
   151ec:	9800      	ldr	r0, [sp, #0]
   151ee:	4798      	blx	r3
		if( xReturn == pdFALSE )
   151f0:	2800      	cmp	r0, #0
   151f2:	d102      	bne.n	151fa <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
   151f4:	2200      	movs	r2, #0
   151f6:	4b33      	ldr	r3, [pc, #204]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   151f8:	601a      	str	r2, [r3, #0]
}
   151fa:	b003      	add	sp, #12
   151fc:	bc3c      	pop	{r2, r3, r4, r5}
   151fe:	4690      	mov	r8, r2
   15200:	4699      	mov	r9, r3
   15202:	46a2      	mov	sl, r4
   15204:	46ab      	mov	fp, r5
   15206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15208:	4c2f      	ldr	r4, [pc, #188]	; (152c8 <FreeRTOS_CLIProcessCommand+0x100>)
   1520a:	4b2e      	ldr	r3, [pc, #184]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   1520c:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1520e:	4b2f      	ldr	r3, [pc, #188]	; (152cc <FreeRTOS_CLIProcessCommand+0x104>)
   15210:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   15212:	2320      	movs	r3, #32
   15214:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   15216:	4b2e      	ldr	r3, [pc, #184]	; (152d0 <FreeRTOS_CLIProcessCommand+0x108>)
   15218:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1521a:	4b2a      	ldr	r3, [pc, #168]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   1521c:	469a      	mov	sl, r3
   1521e:	e00a      	b.n	15236 <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   15220:	0002      	movs	r2, r0
   15222:	0029      	movs	r1, r5
   15224:	0030      	movs	r0, r6
   15226:	47d8      	blx	fp
   15228:	2800      	cmp	r0, #0
   1522a:	d00d      	beq.n	15248 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1522c:	6864      	ldr	r4, [r4, #4]
   1522e:	4653      	mov	r3, sl
   15230:	601c      	str	r4, [r3, #0]
   15232:	2c00      	cmp	r4, #0
   15234:	d03e      	beq.n	152b4 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   15236:	6827      	ldr	r7, [r4, #0]
   15238:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1523a:	0028      	movs	r0, r5
   1523c:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1523e:	5c33      	ldrb	r3, [r6, r0]
   15240:	4642      	mov	r2, r8
   15242:	4393      	bics	r3, r2
   15244:	d1f2      	bne.n	1522c <FreeRTOS_CLIProcessCommand+0x64>
   15246:	e7eb      	b.n	15220 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   15248:	7b3f      	ldrb	r7, [r7, #12]
   1524a:	b27f      	sxtb	r7, r7
   1524c:	2f00      	cmp	r7, #0
   1524e:	db2d      	blt.n	152ac <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   15250:	7833      	ldrb	r3, [r6, #0]
   15252:	2b00      	cmp	r3, #0
   15254:	d028      	beq.n	152a8 <FreeRTOS_CLIProcessCommand+0xe0>
   15256:	0032      	movs	r2, r6
   15258:	2500      	movs	r5, #0
   1525a:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1525c:	2401      	movs	r4, #1
   1525e:	e008      	b.n	15272 <FreeRTOS_CLIProcessCommand+0xaa>
   15260:	2901      	cmp	r1, #1
   15262:	d00a      	beq.n	1527a <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
   15264:	3501      	adds	r5, #1
   15266:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
   15268:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
   1526a:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
   1526c:	7813      	ldrb	r3, [r2, #0]
   1526e:	2b00      	cmp	r3, #0
   15270:	d005      	beq.n	1527e <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
   15272:	2b20      	cmp	r3, #32
   15274:	d0f4      	beq.n	15260 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
   15276:	0001      	movs	r1, r0
   15278:	e7f7      	b.n	1526a <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
   1527a:	0021      	movs	r1, r4
   1527c:	e7f5      	b.n	1526a <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1527e:	2901      	cmp	r1, #1
   15280:	d00f      	beq.n	152a2 <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   15282:	4b10      	ldr	r3, [pc, #64]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   15284:	681b      	ldr	r3, [r3, #0]
   15286:	2b00      	cmp	r3, #0
   15288:	d014      	beq.n	152b4 <FreeRTOS_CLIProcessCommand+0xec>
   1528a:	42af      	cmp	r7, r5
   1528c:	d0aa      	beq.n	151e4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1528e:	9a01      	ldr	r2, [sp, #4]
   15290:	4910      	ldr	r1, [pc, #64]	; (152d4 <FreeRTOS_CLIProcessCommand+0x10c>)
   15292:	9800      	ldr	r0, [sp, #0]
   15294:	4b10      	ldr	r3, [pc, #64]	; (152d8 <FreeRTOS_CLIProcessCommand+0x110>)
   15296:	4798      	blx	r3
		pxCommand = NULL;
   15298:	2200      	movs	r2, #0
   1529a:	4b0a      	ldr	r3, [pc, #40]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   1529c:	601a      	str	r2, [r3, #0]
   1529e:	2000      	movs	r0, #0
   152a0:	e7ab      	b.n	151fa <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
   152a2:	3d01      	subs	r5, #1
   152a4:	b26d      	sxtb	r5, r5
   152a6:	e7ec      	b.n	15282 <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
   152a8:	2500      	movs	r5, #0
   152aa:	e7ea      	b.n	15282 <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   152ac:	4b05      	ldr	r3, [pc, #20]	; (152c4 <FreeRTOS_CLIProcessCommand+0xfc>)
   152ae:	681b      	ldr	r3, [r3, #0]
   152b0:	2b00      	cmp	r3, #0
   152b2:	d197      	bne.n	151e4 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   152b4:	9a01      	ldr	r2, [sp, #4]
   152b6:	4909      	ldr	r1, [pc, #36]	; (152dc <FreeRTOS_CLIProcessCommand+0x114>)
   152b8:	9800      	ldr	r0, [sp, #0]
   152ba:	4b07      	ldr	r3, [pc, #28]	; (152d8 <FreeRTOS_CLIProcessCommand+0x110>)
   152bc:	4798      	blx	r3
		xReturn = pdFALSE;
   152be:	2000      	movs	r0, #0
	return xReturn;
   152c0:	e79b      	b.n	151fa <FreeRTOS_CLIProcessCommand+0x32>
   152c2:	46c0      	nop			; (mov r8, r8)
   152c4:	20000afc 	.word	0x20000afc
   152c8:	200000b0 	.word	0x200000b0
   152cc:	00026667 	.word	0x00026667
   152d0:	00026675 	.word	0x00026675
   152d4:	000286f8 	.word	0x000286f8
   152d8:	00026697 	.word	0x00026697
   152dc:	00028750 	.word	0x00028750

000152e0 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   152e0:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   152e2:	4b01      	ldr	r3, [pc, #4]	; (152e8 <prvTraceGetQueueType+0x8>)
   152e4:	4798      	blx	r3
}
   152e6:	bd10      	pop	{r4, pc}
   152e8:	00017969 	.word	0x00017969

000152ec <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   152ec:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   152ee:	4b02      	ldr	r3, [pc, #8]	; (152f8 <prvTraceGetTaskNumberLow16+0xc>)
   152f0:	4798      	blx	r3
   152f2:	b280      	uxth	r0, r0
}
   152f4:	bd10      	pop	{r4, pc}
   152f6:	46c0      	nop			; (mov r8, r8)
   152f8:	000185f1 	.word	0x000185f1

000152fc <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   152fc:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   152fe:	4b02      	ldr	r3, [pc, #8]	; (15308 <prvTraceGetTaskNumberHigh16+0xc>)
   15300:	4798      	blx	r3
   15302:	0c00      	lsrs	r0, r0, #16
}
   15304:	bd10      	pop	{r4, pc}
   15306:	46c0      	nop			; (mov r8, r8)
   15308:	000185f1 	.word	0x000185f1

0001530c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1530c:	b570      	push	{r4, r5, r6, lr}
   1530e:	0004      	movs	r4, r0
   15310:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   15312:	4b04      	ldr	r3, [pc, #16]	; (15324 <prvTraceSetTaskNumberLow16+0x18>)
   15314:	4798      	blx	r3
   15316:	0c01      	lsrs	r1, r0, #16
   15318:	0409      	lsls	r1, r1, #16
   1531a:	4329      	orrs	r1, r5
   1531c:	0020      	movs	r0, r4
   1531e:	4b02      	ldr	r3, [pc, #8]	; (15328 <prvTraceSetTaskNumberLow16+0x1c>)
   15320:	4798      	blx	r3
}
   15322:	bd70      	pop	{r4, r5, r6, pc}
   15324:	000185f1 	.word	0x000185f1
   15328:	000185fd 	.word	0x000185fd

0001532c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1532c:	b570      	push	{r4, r5, r6, lr}
   1532e:	0004      	movs	r4, r0
   15330:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   15332:	4b05      	ldr	r3, [pc, #20]	; (15348 <prvTraceSetTaskNumberHigh16+0x1c>)
   15334:	4798      	blx	r3
   15336:	0401      	lsls	r1, r0, #16
   15338:	0c09      	lsrs	r1, r1, #16
   1533a:	042d      	lsls	r5, r5, #16
   1533c:	4329      	orrs	r1, r5
   1533e:	0020      	movs	r0, r4
   15340:	4b02      	ldr	r3, [pc, #8]	; (1534c <prvTraceSetTaskNumberHigh16+0x20>)
   15342:	4798      	blx	r3
}
   15344:	bd70      	pop	{r4, r5, r6, pc}
   15346:	46c0      	nop			; (mov r8, r8)
   15348:	000185f1 	.word	0x000185f1
   1534c:	000185fd 	.word	0x000185fd

00015350 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   15350:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   15352:	4b02      	ldr	r3, [pc, #8]	; (1535c <prvTraceGetQueueNumberLow16+0xc>)
   15354:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   15356:	b280      	uxth	r0, r0
}
   15358:	bd10      	pop	{r4, pc}
   1535a:	46c0      	nop			; (mov r8, r8)
   1535c:	00017961 	.word	0x00017961

00015360 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   15360:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   15362:	4b02      	ldr	r3, [pc, #8]	; (1536c <prvTraceGetQueueNumberHigh16+0xc>)
   15364:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   15366:	0c00      	lsrs	r0, r0, #16
}
   15368:	bd10      	pop	{r4, pc}
   1536a:	46c0      	nop			; (mov r8, r8)
   1536c:	00017961 	.word	0x00017961

00015370 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   15370:	b570      	push	{r4, r5, r6, lr}
   15372:	0004      	movs	r4, r0
   15374:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   15376:	4b04      	ldr	r3, [pc, #16]	; (15388 <prvTraceSetQueueNumberLow16+0x18>)
   15378:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1537a:	0c01      	lsrs	r1, r0, #16
   1537c:	0409      	lsls	r1, r1, #16
   1537e:	4329      	orrs	r1, r5
   15380:	0020      	movs	r0, r4
   15382:	4b02      	ldr	r3, [pc, #8]	; (1538c <prvTraceSetQueueNumberLow16+0x1c>)
   15384:	4798      	blx	r3
}
   15386:	bd70      	pop	{r4, r5, r6, pc}
   15388:	00017961 	.word	0x00017961
   1538c:	00017965 	.word	0x00017965

00015390 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   15390:	b570      	push	{r4, r5, r6, lr}
   15392:	0004      	movs	r4, r0
   15394:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   15396:	4b05      	ldr	r3, [pc, #20]	; (153ac <prvTraceSetQueueNumberHigh16+0x1c>)
   15398:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1539a:	0401      	lsls	r1, r0, #16
   1539c:	0c09      	lsrs	r1, r1, #16
   1539e:	042d      	lsls	r5, r5, #16
   153a0:	4329      	orrs	r1, r5
   153a2:	0020      	movs	r0, r4
   153a4:	4b02      	ldr	r3, [pc, #8]	; (153b0 <prvTraceSetQueueNumberHigh16+0x20>)
   153a6:	4798      	blx	r3
}
   153a8:	bd70      	pop	{r4, r5, r6, pc}
   153aa:	46c0      	nop			; (mov r8, r8)
   153ac:	00017961 	.word	0x00017961
   153b0:	00017965 	.word	0x00017965

000153b4 <prvAddTaskToStackMonitor>:
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   153b4:	4b0d      	ldr	r3, [pc, #52]	; (153ec <prvAddTaskToStackMonitor+0x38>)
   153b6:	681b      	ldr	r3, [r3, #0]
   153b8:	2b00      	cmp	r3, #0
   153ba:	d00d      	beq.n	153d8 <prvAddTaskToStackMonitor+0x24>
   153bc:	2301      	movs	r3, #1
   153be:	490b      	ldr	r1, [pc, #44]	; (153ec <prvAddTaskToStackMonitor+0x38>)
   153c0:	00da      	lsls	r2, r3, #3
   153c2:	5852      	ldr	r2, [r2, r1]
   153c4:	2a00      	cmp	r2, #0
   153c6:	d008      	beq.n	153da <prvAddTaskToStackMonitor+0x26>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   153c8:	3301      	adds	r3, #1
   153ca:	2b0a      	cmp	r3, #10
   153cc:	d1f8      	bne.n	153c0 <prvAddTaskToStackMonitor+0xc>
		}
	}

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
   153ce:	4a08      	ldr	r2, [pc, #32]	; (153f0 <prvAddTaskToStackMonitor+0x3c>)
   153d0:	6813      	ldr	r3, [r2, #0]
   153d2:	3301      	adds	r3, #1
   153d4:	6013      	str	r3, [r2, #0]
	}
}
   153d6:	4770      	bx	lr
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   153d8:	2300      	movs	r3, #0
			tasksInStackMonitor[i].tcb = task;
   153da:	4a04      	ldr	r2, [pc, #16]	; (153ec <prvAddTaskToStackMonitor+0x38>)
   153dc:	00db      	lsls	r3, r3, #3
   153de:	5098      	str	r0, [r3, r2]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   153e0:	18d3      	adds	r3, r2, r3
   153e2:	2201      	movs	r2, #1
   153e4:	4252      	negs	r2, r2
   153e6:	605a      	str	r2, [r3, #4]
   153e8:	e7f5      	b.n	153d6 <prvAddTaskToStackMonitor+0x22>
   153ea:	46c0      	nop			; (mov r8, r8)
   153ec:	20000b0c 	.word	0x20000b0c
   153f0:	20000b5c 	.word	0x20000b5c

000153f4 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   153f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153f6:	46ce      	mov	lr, r9
   153f8:	4647      	mov	r7, r8
   153fa:	b580      	push	{r7, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   153fc:	4b1d      	ldr	r3, [pc, #116]	; (15474 <prvReportStackUsage+0x80>)
   153fe:	681b      	ldr	r3, [r3, #0]
   15400:	4699      	mov	r9, r3
	int count = 0;		/* The number of generated reports */
   15402:	2400      	movs	r4, #0
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   15404:	4e1c      	ldr	r6, [pc, #112]	; (15478 <prvReportStackUsage+0x84>)
   15406:	4d1b      	ldr	r5, [pc, #108]	; (15474 <prvReportStackUsage+0x80>)
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   15408:	4b1c      	ldr	r3, [pc, #112]	; (1547c <prvReportStackUsage+0x88>)
   1540a:	4698      	mov	r8, r3
   1540c:	e01b      	b.n	15446 <prvReportStackUsage+0x52>
			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1540e:	4f1a      	ldr	r7, [pc, #104]	; (15478 <prvReportStackUsage+0x84>)
   15410:	00db      	lsls	r3, r3, #3
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   15412:	59d8      	ldr	r0, [r3, r7]
   15414:	4b1a      	ldr	r3, [pc, #104]	; (15480 <prvReportStackUsage+0x8c>)
   15416:	4798      	blx	r3
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   15418:	4b16      	ldr	r3, [pc, #88]	; (15474 <prvReportStackUsage+0x80>)
   1541a:	681b      	ldr	r3, [r3, #0]
   1541c:	00db      	lsls	r3, r3, #3
   1541e:	18fb      	adds	r3, r7, r3
   15420:	685b      	ldr	r3, [r3, #4]
   15422:	22ff      	movs	r2, #255	; 0xff
   15424:	4002      	ands	r2, r0
   15426:	2103      	movs	r1, #3
   15428:	20ea      	movs	r0, #234	; 0xea
   1542a:	4f16      	ldr	r7, [pc, #88]	; (15484 <prvReportStackUsage+0x90>)
   1542c:	47b8      	blx	r7
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1542e:	3401      	adds	r4, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   15430:	4f10      	ldr	r7, [pc, #64]	; (15474 <prvReportStackUsage+0x80>)
   15432:	683b      	ldr	r3, [r7, #0]
   15434:	1c58      	adds	r0, r3, #1
   15436:	210a      	movs	r1, #10
   15438:	4b13      	ldr	r3, [pc, #76]	; (15488 <prvReportStackUsage+0x94>)
   1543a:	4798      	blx	r3
   1543c:	6039      	str	r1, [r7, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1543e:	2c00      	cmp	r4, #0
   15440:	dc13      	bgt.n	1546a <prvReportStackUsage+0x76>
   15442:	4589      	cmp	r9, r1
   15444:	d011      	beq.n	1546a <prvReportStackUsage+0x76>
		if (tasksInStackMonitor[i].tcb != NULL)
   15446:	682b      	ldr	r3, [r5, #0]
   15448:	00db      	lsls	r3, r3, #3
   1544a:	5998      	ldr	r0, [r3, r6]
   1544c:	2800      	cmp	r0, #0
   1544e:	d0ef      	beq.n	15430 <prvReportStackUsage+0x3c>
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   15450:	47c0      	blx	r8
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   15452:	4b08      	ldr	r3, [pc, #32]	; (15474 <prvReportStackUsage+0x80>)
   15454:	681b      	ldr	r3, [r3, #0]
   15456:	00d9      	lsls	r1, r3, #3
   15458:	4a07      	ldr	r2, [pc, #28]	; (15478 <prvReportStackUsage+0x84>)
   1545a:	1852      	adds	r2, r2, r1
   1545c:	6852      	ldr	r2, [r2, #4]
   1545e:	4290      	cmp	r0, r2
   15460:	d2d5      	bcs.n	1540e <prvReportStackUsage+0x1a>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   15462:	4a05      	ldr	r2, [pc, #20]	; (15478 <prvReportStackUsage+0x84>)
   15464:	1852      	adds	r2, r2, r1
   15466:	6050      	str	r0, [r2, #4]
   15468:	e7d1      	b.n	1540e <prvReportStackUsage+0x1a>
}
   1546a:	bc0c      	pop	{r2, r3}
   1546c:	4690      	mov	r8, r2
   1546e:	4699      	mov	r9, r3
   15470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15472:	46c0      	nop			; (mov r8, r8)
   15474:	20000b08 	.word	0x20000b08
   15478:	20000b0c 	.word	0x20000b0c
   1547c:	00018605 	.word	0x00018605
   15480:	000185f1 	.word	0x000185f1
   15484:	000161f9 	.word	0x000161f9
   15488:	000242c9 	.word	0x000242c9

0001548c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1548c:	b570      	push	{r4, r5, r6, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1548e:	4d05      	ldr	r5, [pc, #20]	; (154a4 <TzCtrl+0x18>)
		{
			prvReportStackUsage();
   15490:	4e05      	ldr	r6, [pc, #20]	; (154a8 <TzCtrl+0x1c>)
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   15492:	4c06      	ldr	r4, [pc, #24]	; (154ac <TzCtrl+0x20>)
   15494:	e001      	b.n	1549a <TzCtrl+0xe>
   15496:	2004      	movs	r0, #4
   15498:	47a0      	blx	r4
		if (xTraceIsRecordingEnabled())
   1549a:	47a8      	blx	r5
   1549c:	2800      	cmp	r0, #0
   1549e:	d0fa      	beq.n	15496 <TzCtrl+0xa>
			prvReportStackUsage();
   154a0:	47b0      	blx	r6
   154a2:	e7f8      	b.n	15496 <TzCtrl+0xa>
   154a4:	00015715 	.word	0x00015715
   154a8:	000153f5 	.word	0x000153f5
   154ac:	000180f5 	.word	0x000180f5

000154b0 <prvTraceGetCurrentTaskHandle>:
{
   154b0:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
   154b2:	4b01      	ldr	r3, [pc, #4]	; (154b8 <prvTraceGetCurrentTaskHandle+0x8>)
   154b4:	4798      	blx	r3
}
   154b6:	bd10      	pop	{r4, pc}
   154b8:	00018631 	.word	0x00018631

000154bc <vTraceEnable>:
{
   154bc:	b510      	push	{r4, lr}
   154be:	b082      	sub	sp, #8
   154c0:	0004      	movs	r4, r0
	prvTraceInitTraceData();
   154c2:	4b12      	ldr	r3, [pc, #72]	; (1550c <vTraceEnable+0x50>)
   154c4:	4798      	blx	r3
	if (startOption == TRC_START)
   154c6:	2c01      	cmp	r4, #1
   154c8:	d009      	beq.n	154de <vTraceEnable+0x22>
	else if (startOption == TRC_START_AWAIT_HOST)
   154ca:	2c02      	cmp	r4, #2
   154cc:	d00a      	beq.n	154e4 <vTraceEnable+0x28>
	else if (startOption != TRC_INIT)
   154ce:	2c00      	cmp	r4, #0
   154d0:	d10c      	bne.n	154ec <vTraceEnable+0x30>
	if (HandleTzCtrl == NULL)
   154d2:	4b0f      	ldr	r3, [pc, #60]	; (15510 <vTraceEnable+0x54>)
   154d4:	681b      	ldr	r3, [r3, #0]
   154d6:	2b00      	cmp	r3, #0
   154d8:	d00c      	beq.n	154f4 <vTraceEnable+0x38>
}
   154da:	b002      	add	sp, #8
   154dc:	bd10      	pop	{r4, pc}
		vTraceStart();
   154de:	4b0d      	ldr	r3, [pc, #52]	; (15514 <vTraceEnable+0x58>)
   154e0:	4798      	blx	r3
   154e2:	e7f6      	b.n	154d2 <vTraceEnable+0x16>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   154e4:	480c      	ldr	r0, [pc, #48]	; (15518 <vTraceEnable+0x5c>)
   154e6:	4b0d      	ldr	r3, [pc, #52]	; (1551c <vTraceEnable+0x60>)
   154e8:	4798      	blx	r3
   154ea:	e7f2      	b.n	154d2 <vTraceEnable+0x16>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   154ec:	480c      	ldr	r0, [pc, #48]	; (15520 <vTraceEnable+0x64>)
   154ee:	4b0b      	ldr	r3, [pc, #44]	; (1551c <vTraceEnable+0x60>)
   154f0:	4798      	blx	r3
   154f2:	e7ee      	b.n	154d2 <vTraceEnable+0x16>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   154f4:	4b06      	ldr	r3, [pc, #24]	; (15510 <vTraceEnable+0x54>)
   154f6:	9301      	str	r3, [sp, #4]
   154f8:	2304      	movs	r3, #4
   154fa:	9300      	str	r3, [sp, #0]
   154fc:	2300      	movs	r3, #0
   154fe:	22c8      	movs	r2, #200	; 0xc8
   15500:	4908      	ldr	r1, [pc, #32]	; (15524 <vTraceEnable+0x68>)
   15502:	4809      	ldr	r0, [pc, #36]	; (15528 <vTraceEnable+0x6c>)
   15504:	4c09      	ldr	r4, [pc, #36]	; (1552c <vTraceEnable+0x70>)
   15506:	47a0      	blx	r4
}
   15508:	e7e7      	b.n	154da <vTraceEnable+0x1e>
   1550a:	46c0      	nop			; (mov r8, r8)
   1550c:	00015729 	.word	0x00015729
   15510:	20000b04 	.word	0x20000b04
   15514:	0001650d 	.word	0x0001650d
   15518:	00028b0c 	.word	0x00028b0c
   1551c:	00015901 	.word	0x00015901
   15520:	00028b4c 	.word	0x00028b4c
   15524:	00028b80 	.word	0x00028b80
   15528:	0001548d 	.word	0x0001548d
   1552c:	00017b05 	.word	0x00017b05

00015530 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   15530:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   15532:	4b2f      	ldr	r3, [pc, #188]	; (155f0 <vTraceInitObjectPropertyTable+0xc0>)
   15534:	681b      	ldr	r3, [r3, #0]
   15536:	2209      	movs	r2, #9
   15538:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1553a:	3201      	adds	r2, #1
   1553c:	2164      	movs	r1, #100	; 0x64
   1553e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   15540:	3101      	adds	r1, #1
   15542:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   15544:	3101      	adds	r1, #1
   15546:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   15548:	3205      	adds	r2, #5
   1554a:	3101      	adds	r1, #1
   1554c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1554e:	3962      	subs	r1, #98	; 0x62
   15550:	2068      	movs	r0, #104	; 0x68
   15552:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   15554:	3001      	adds	r0, #1
   15556:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   15558:	3001      	adds	r0, #1
   1555a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1555c:	3001      	adds	r0, #1
   1555e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   15560:	3001      	adds	r0, #1
   15562:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   15564:	316b      	adds	r1, #107	; 0x6b
   15566:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   15568:	3101      	adds	r1, #1
   1556a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1556c:	3101      	adds	r1, #1
   1556e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   15570:	3101      	adds	r1, #1
   15572:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   15574:	3101      	adds	r1, #1
   15576:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   15578:	3101      	adds	r1, #1
   1557a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1557c:	3101      	adds	r1, #1
   1557e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   15580:	3101      	adds	r1, #1
   15582:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   15584:	3101      	adds	r1, #1
   15586:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   15588:	3968      	subs	r1, #104	; 0x68
   1558a:	326d      	adds	r2, #109	; 0x6d
   1558c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1558e:	3201      	adds	r2, #1
   15590:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   15592:	3201      	adds	r2, #1
   15594:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   15596:	3a6b      	subs	r2, #107	; 0x6b
   15598:	3013      	adds	r0, #19
   1559a:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1559c:	2411      	movs	r4, #17
   1559e:	3001      	adds	r0, #1
   155a0:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   155a2:	3001      	adds	r0, #1
   155a4:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   155a6:	3172      	adds	r1, #114	; 0x72
   155a8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   155aa:	3101      	adds	r1, #1
   155ac:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   155ae:	3101      	adds	r1, #1
   155b0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   155b2:	2100      	movs	r1, #0
   155b4:	3275      	adds	r2, #117	; 0x75
   155b6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   155b8:	31a0      	adds	r1, #160	; 0xa0
   155ba:	3202      	adds	r2, #2
   155bc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   155be:	31a0      	adds	r1, #160	; 0xa0
   155c0:	3202      	adds	r2, #2
   155c2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   155c4:	31a0      	adds	r1, #160	; 0xa0
   155c6:	3202      	adds	r2, #2
   155c8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   155ca:	490a      	ldr	r1, [pc, #40]	; (155f4 <vTraceInitObjectPropertyTable+0xc4>)
   155cc:	3202      	adds	r2, #2
   155ce:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   155d0:	4909      	ldr	r1, [pc, #36]	; (155f8 <vTraceInitObjectPropertyTable+0xc8>)
   155d2:	3202      	adds	r2, #2
   155d4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   155d6:	4909      	ldr	r1, [pc, #36]	; (155fc <vTraceInitObjectPropertyTable+0xcc>)
   155d8:	3202      	adds	r2, #2
   155da:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   155dc:	4908      	ldr	r1, [pc, #32]	; (15600 <vTraceInitObjectPropertyTable+0xd0>)
   155de:	3202      	adds	r2, #2
   155e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   155e2:	315f      	adds	r1, #95	; 0x5f
   155e4:	3202      	adds	r2, #2
   155e6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   155e8:	4a06      	ldr	r2, [pc, #24]	; (15604 <vTraceInitObjectPropertyTable+0xd4>)
   155ea:	661a      	str	r2, [r3, #96]	; 0x60
}
   155ec:	bd10      	pop	{r4, pc}
   155ee:	46c0      	nop			; (mov r8, r8)
   155f0:	20000b60 	.word	0x20000b60
   155f4:	000002fd 	.word	0x000002fd
   155f8:	00000352 	.word	0x00000352
   155fc:	000003a2 	.word	0x000003a2
   15600:	00000401 	.word	0x00000401
   15604:	000004bf 	.word	0x000004bf

00015608 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   15608:	4b17      	ldr	r3, [pc, #92]	; (15668 <vTraceInitObjectHandleStack+0x60>)
   1560a:	2200      	movs	r2, #0
   1560c:	825a      	strh	r2, [r3, #18]
   1560e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   15610:	320a      	adds	r2, #10
   15612:	829a      	strh	r2, [r3, #20]
   15614:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   15616:	320a      	adds	r2, #10
   15618:	82da      	strh	r2, [r3, #22]
   1561a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1561c:	320a      	adds	r2, #10
   1561e:	831a      	strh	r2, [r3, #24]
   15620:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   15622:	320f      	adds	r2, #15
   15624:	835a      	strh	r2, [r3, #26]
   15626:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   15628:	3205      	adds	r2, #5
   1562a:	839a      	strh	r2, [r3, #28]
   1562c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1562e:	3205      	adds	r2, #5
   15630:	83da      	strh	r2, [r3, #30]
   15632:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   15634:	3205      	adds	r2, #5
   15636:	841a      	strh	r2, [r3, #32]
   15638:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1563a:	3205      	adds	r2, #5
   1563c:	845a      	strh	r2, [r3, #34]	; 0x22
   1563e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   15640:	3a38      	subs	r2, #56	; 0x38
   15642:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   15644:	320a      	adds	r2, #10
   15646:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   15648:	320a      	adds	r2, #10
   1564a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1564c:	320f      	adds	r2, #15
   1564e:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   15650:	3205      	adds	r2, #5
   15652:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   15654:	3205      	adds	r2, #5
   15656:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   15658:	3205      	adds	r2, #5
   1565a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1565c:	3205      	adds	r2, #5
   1565e:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   15660:	3205      	adds	r2, #5
   15662:	869a      	strh	r2, [r3, #52]	; 0x34
}
   15664:	4770      	bx	lr
   15666:	46c0      	nop			; (mov r8, r8)
   15668:	20000b7c 	.word	0x20000b7c

0001566c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   1566c:	2808      	cmp	r0, #8
   1566e:	d813      	bhi.n	15698 <pszTraceGetErrorNotEnoughHandles+0x2c>
   15670:	0080      	lsls	r0, r0, #2
   15672:	4b0b      	ldr	r3, [pc, #44]	; (156a0 <pszTraceGetErrorNotEnoughHandles+0x34>)
   15674:	581b      	ldr	r3, [r3, r0]
   15676:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   15678:	480a      	ldr	r0, [pc, #40]	; (156a4 <pszTraceGetErrorNotEnoughHandles+0x38>)
   1567a:	e010      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1567c:	480a      	ldr	r0, [pc, #40]	; (156a8 <pszTraceGetErrorNotEnoughHandles+0x3c>)
   1567e:	e00e      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   15680:	480a      	ldr	r0, [pc, #40]	; (156ac <pszTraceGetErrorNotEnoughHandles+0x40>)
   15682:	e00c      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   15684:	480a      	ldr	r0, [pc, #40]	; (156b0 <pszTraceGetErrorNotEnoughHandles+0x44>)
   15686:	e00a      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   15688:	480a      	ldr	r0, [pc, #40]	; (156b4 <pszTraceGetErrorNotEnoughHandles+0x48>)
   1568a:	e008      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1568c:	480a      	ldr	r0, [pc, #40]	; (156b8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1568e:	e006      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   15690:	480a      	ldr	r0, [pc, #40]	; (156bc <pszTraceGetErrorNotEnoughHandles+0x50>)
   15692:	e004      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   15694:	480a      	ldr	r0, [pc, #40]	; (156c0 <pszTraceGetErrorNotEnoughHandles+0x54>)
   15696:	e002      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   15698:	480a      	ldr	r0, [pc, #40]	; (156c4 <pszTraceGetErrorNotEnoughHandles+0x58>)
   1569a:	e000      	b.n	1569e <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1569c:	480a      	ldr	r0, [pc, #40]	; (156c8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
   1569e:	4770      	bx	lr
   156a0:	000287e8 	.word	0x000287e8
   156a4:	00028854 	.word	0x00028854
   156a8:	0002889c 	.word	0x0002889c
   156ac:	000288f0 	.word	0x000288f0
   156b0:	0002893c 	.word	0x0002893c
   156b4:	00028988 	.word	0x00028988
   156b8:	000289d4 	.word	0x000289d4
   156bc:	00028a28 	.word	0x00028a28
   156c0:	00028a80 	.word	0x00028a80
   156c4:	00028adc 	.word	0x00028adc
   156c8:	0002880c 	.word	0x0002880c

000156cc <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   156cc:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   156ce:	2a00      	cmp	r2, #0
   156d0:	d00d      	beq.n	156ee <prvStrncpy+0x22>
	{
		dst[i] = src[i];
   156d2:	780b      	ldrb	r3, [r1, #0]
   156d4:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
   156d6:	780b      	ldrb	r3, [r1, #0]
   156d8:	2b00      	cmp	r3, #0
   156da:	d008      	beq.n	156ee <prvStrncpy+0x22>
   156dc:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
   156de:	3301      	adds	r3, #1
   156e0:	429a      	cmp	r2, r3
   156e2:	d004      	beq.n	156ee <prvStrncpy+0x22>
		dst[i] = src[i];
   156e4:	5ccc      	ldrb	r4, [r1, r3]
   156e6:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
   156e8:	5ccc      	ldrb	r4, [r1, r3]
   156ea:	2c00      	cmp	r4, #0
   156ec:	d1f7      	bne.n	156de <prvStrncpy+0x12>
			break;
	}
}
   156ee:	bd10      	pop	{r4, pc}

000156f0 <vTraceStop>:
{
   156f0:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
   156f2:	4b06      	ldr	r3, [pc, #24]	; (1570c <vTraceStop+0x1c>)
   156f4:	681b      	ldr	r3, [r3, #0]
   156f6:	2b00      	cmp	r3, #0
   156f8:	d001      	beq.n	156fe <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
   156fa:	2200      	movs	r2, #0
   156fc:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   156fe:	4b04      	ldr	r3, [pc, #16]	; (15710 <vTraceStop+0x20>)
   15700:	681b      	ldr	r3, [r3, #0]
   15702:	2b00      	cmp	r3, #0
   15704:	d000      	beq.n	15708 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   15706:	4798      	blx	r3
}
   15708:	bd10      	pop	{r4, pc}
   1570a:	46c0      	nop			; (mov r8, r8)
   1570c:	20000b60 	.word	0x20000b60
   15710:	20000c28 	.word	0x20000c28

00015714 <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
   15714:	4b03      	ldr	r3, [pc, #12]	; (15724 <xTraceIsRecordingEnabled+0x10>)
   15716:	681b      	ldr	r3, [r3, #0]
   15718:	2b00      	cmp	r3, #0
   1571a:	d001      	beq.n	15720 <xTraceIsRecordingEnabled+0xc>
		return (int)RecorderDataPtr->recorderActive;
   1571c:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   1571e:	4770      	bx	lr
   15720:	2000      	movs	r0, #0
   15722:	e7fc      	b.n	1571e <xTraceIsRecordingEnabled+0xa>
   15724:	20000b60 	.word	0x20000b60

00015728 <prvTraceInitTraceData>:
{	
   15728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1572a:	46de      	mov	lr, fp
   1572c:	4657      	mov	r7, sl
   1572e:	464e      	mov	r6, r9
   15730:	4645      	mov	r5, r8
   15732:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   15734:	4b51      	ldr	r3, [pc, #324]	; (1587c <prvTraceInitTraceData+0x154>)
   15736:	681b      	ldr	r3, [r3, #0]
   15738:	2b00      	cmp	r3, #0
   1573a:	d100      	bne.n	1573e <prvTraceInitTraceData+0x16>
   1573c:	e099      	b.n	15872 <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
   1573e:	781b      	ldrb	r3, [r3, #0]
   15740:	2b01      	cmp	r3, #1
   15742:	d100      	bne.n	15746 <prvTraceInitTraceData+0x1e>
   15744:	e08f      	b.n	15866 <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
   15746:	4b4e      	ldr	r3, [pc, #312]	; (15880 <prvTraceInitTraceData+0x158>)
   15748:	681a      	ldr	r2, [r3, #0]
   1574a:	4b4e      	ldr	r3, [pc, #312]	; (15884 <prvTraceInitTraceData+0x15c>)
   1574c:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1574e:	4c4b      	ldr	r4, [pc, #300]	; (1587c <prvTraceInitTraceData+0x154>)
   15750:	25bd      	movs	r5, #189	; 0xbd
   15752:	012d      	lsls	r5, r5, #4
   15754:	002a      	movs	r2, r5
   15756:	2100      	movs	r1, #0
   15758:	6820      	ldr	r0, [r4, #0]
   1575a:	4b4b      	ldr	r3, [pc, #300]	; (15888 <prvTraceInitTraceData+0x160>)
   1575c:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1575e:	6823      	ldr	r3, [r4, #0]
   15760:	4a4a      	ldr	r2, [pc, #296]	; (1588c <prvTraceInitTraceData+0x164>)
   15762:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   15764:	2205      	movs	r2, #5
   15766:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   15768:	2200      	movs	r2, #0
   1576a:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1576c:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1576e:	2196      	movs	r1, #150	; 0x96
   15770:	0049      	lsls	r1, r1, #1
   15772:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   15774:	4946      	ldr	r1, [pc, #280]	; (15890 <prvTraceInitTraceData+0x168>)
   15776:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   15778:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1577a:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
   1577c:	4b45      	ldr	r3, [pc, #276]	; (15894 <prvTraceInitTraceData+0x16c>)
   1577e:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   15780:	6820      	ldr	r0, [r4, #0]
   15782:	4a45      	ldr	r2, [pc, #276]	; (15898 <prvTraceInitTraceData+0x170>)
   15784:	4b45      	ldr	r3, [pc, #276]	; (1589c <prvTraceInitTraceData+0x174>)
   15786:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   15788:	22c8      	movs	r2, #200	; 0xc8
   1578a:	3304      	adds	r3, #4
   1578c:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1578e:	4b44      	ldr	r3, [pc, #272]	; (158a0 <prvTraceInitTraceData+0x178>)
   15790:	3ac7      	subs	r2, #199	; 0xc7
   15792:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   15794:	4a43      	ldr	r2, [pc, #268]	; (158a4 <prvTraceInitTraceData+0x17c>)
   15796:	3355      	adds	r3, #85	; 0x55
   15798:	33ff      	adds	r3, #255	; 0xff
   1579a:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1579c:	4b42      	ldr	r3, [pc, #264]	; (158a8 <prvTraceInitTraceData+0x180>)
   1579e:	469c      	mov	ip, r3
   157a0:	4460      	add	r0, ip
   157a2:	2250      	movs	r2, #80	; 0x50
   157a4:	4941      	ldr	r1, [pc, #260]	; (158ac <prvTraceInitTraceData+0x184>)
   157a6:	4b42      	ldr	r3, [pc, #264]	; (158b0 <prvTraceInitTraceData+0x188>)
   157a8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   157aa:	6823      	ldr	r3, [r4, #0]
   157ac:	4941      	ldr	r1, [pc, #260]	; (158b4 <prvTraceInitTraceData+0x18c>)
   157ae:	4a42      	ldr	r2, [pc, #264]	; (158b8 <prvTraceInitTraceData+0x190>)
   157b0:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   157b2:	210a      	movs	r1, #10
   157b4:	4a41      	ldr	r2, [pc, #260]	; (158bc <prvTraceInitTraceData+0x194>)
   157b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   157b8:	3101      	adds	r1, #1
   157ba:	4a41      	ldr	r2, [pc, #260]	; (158c0 <prvTraceInitTraceData+0x198>)
   157bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   157be:	3101      	adds	r1, #1
   157c0:	4a40      	ldr	r2, [pc, #256]	; (158c4 <prvTraceInitTraceData+0x19c>)
   157c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   157c4:	3101      	adds	r1, #1
   157c6:	4a40      	ldr	r2, [pc, #256]	; (158c8 <prvTraceInitTraceData+0x1a0>)
   157c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   157ca:	4a40      	ldr	r2, [pc, #256]	; (158cc <prvTraceInitTraceData+0x1a4>)
   157cc:	3164      	adds	r1, #100	; 0x64
   157ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   157d0:	2572      	movs	r5, #114	; 0x72
   157d2:	4a3f      	ldr	r2, [pc, #252]	; (158d0 <prvTraceInitTraceData+0x1a8>)
   157d4:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   157d6:	2673      	movs	r6, #115	; 0x73
   157d8:	4a3e      	ldr	r2, [pc, #248]	; (158d4 <prvTraceInitTraceData+0x1ac>)
   157da:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   157dc:	2774      	movs	r7, #116	; 0x74
   157de:	4a3e      	ldr	r2, [pc, #248]	; (158d8 <prvTraceInitTraceData+0x1b0>)
   157e0:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   157e2:	22f1      	movs	r2, #241	; 0xf1
   157e4:	4690      	mov	r8, r2
   157e6:	4a3d      	ldr	r2, [pc, #244]	; (158dc <prvTraceInitTraceData+0x1b4>)
   157e8:	4641      	mov	r1, r8
   157ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   157ec:	22f2      	movs	r2, #242	; 0xf2
   157ee:	4691      	mov	r9, r2
   157f0:	4a3b      	ldr	r2, [pc, #236]	; (158e0 <prvTraceInitTraceData+0x1b8>)
   157f2:	4649      	mov	r1, r9
   157f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   157f6:	22f3      	movs	r2, #243	; 0xf3
   157f8:	4692      	mov	sl, r2
   157fa:	4a3a      	ldr	r2, [pc, #232]	; (158e4 <prvTraceInitTraceData+0x1bc>)
   157fc:	4651      	mov	r1, sl
   157fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   15800:	22f4      	movs	r2, #244	; 0xf4
   15802:	4693      	mov	fp, r2
   15804:	4a38      	ldr	r2, [pc, #224]	; (158e8 <prvTraceInitTraceData+0x1c0>)
   15806:	4659      	mov	r1, fp
   15808:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
   1580a:	4b38      	ldr	r3, [pc, #224]	; (158ec <prvTraceInitTraceData+0x1c4>)
   1580c:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
   1580e:	6823      	ldr	r3, [r4, #0]
   15810:	465a      	mov	r2, fp
   15812:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   15814:	4652      	mov	r2, sl
   15816:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   15818:	464a      	mov	r2, r9
   1581a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1581c:	4642      	mov	r2, r8
   1581e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   15820:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   15822:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   15824:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   15826:	2271      	movs	r2, #113	; 0x71
   15828:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1582a:	2204      	movs	r2, #4
   1582c:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1582e:	2303      	movs	r3, #3
   15830:	6822      	ldr	r2, [r4, #0]
   15832:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   15834:	3b01      	subs	r3, #1
   15836:	6822      	ldr	r2, [r4, #0]
   15838:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1583a:	6823      	ldr	r3, [r4, #0]
   1583c:	2201      	movs	r2, #1
   1583e:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
   15840:	4b2b      	ldr	r3, [pc, #172]	; (158f0 <prvTraceInitTraceData+0x1c8>)
   15842:	6819      	ldr	r1, [r3, #0]
   15844:	2900      	cmp	r1, #0
   15846:	d00e      	beq.n	15866 <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   15848:	4c0c      	ldr	r4, [pc, #48]	; (1587c <prvTraceInitTraceData+0x154>)
   1584a:	6823      	ldr	r3, [r4, #0]
   1584c:	4a16      	ldr	r2, [pc, #88]	; (158a8 <prvTraceInitTraceData+0x180>)
   1584e:	4694      	mov	ip, r2
   15850:	4463      	add	r3, ip
   15852:	0018      	movs	r0, r3
   15854:	2250      	movs	r2, #80	; 0x50
   15856:	4b16      	ldr	r3, [pc, #88]	; (158b0 <prvTraceInitTraceData+0x188>)
   15858:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1585a:	6822      	ldr	r2, [r4, #0]
   1585c:	2101      	movs	r1, #1
   1585e:	4b25      	ldr	r3, [pc, #148]	; (158f4 <prvTraceInitTraceData+0x1cc>)
   15860:	50d1      	str	r1, [r2, r3]
		vTraceStop();
   15862:	4b25      	ldr	r3, [pc, #148]	; (158f8 <prvTraceInitTraceData+0x1d0>)
   15864:	4798      	blx	r3
}
   15866:	bc3c      	pop	{r2, r3, r4, r5}
   15868:	4690      	mov	r8, r2
   1586a:	4699      	mov	r9, r3
   1586c:	46a2      	mov	sl, r4
   1586e:	46ab      	mov	fp, r5
   15870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
   15872:	4a22      	ldr	r2, [pc, #136]	; (158fc <prvTraceInitTraceData+0x1d4>)
   15874:	4b01      	ldr	r3, [pc, #4]	; (1587c <prvTraceInitTraceData+0x154>)
   15876:	601a      	str	r2, [r3, #0]
   15878:	e765      	b.n	15746 <prvTraceInitTraceData+0x1e>
   1587a:	46c0      	nop			; (mov r8, r8)
   1587c:	20000b60 	.word	0x20000b60
   15880:	e000e018 	.word	0xe000e018
   15884:	20005084 	.word	0x20005084
   15888:	00026253 	.word	0x00026253
   1588c:	00001aa1 	.word	0x00001aa1
   15890:	f0f0f0f0 	.word	0xf0f0f0f0
   15894:	00015531 	.word	0x00015531
   15898:	f1f1f1f1 	.word	0xf1f1f1f1
   1589c:	0000055c 	.word	0x0000055c
   158a0:	00000564 	.word	0x00000564
   158a4:	f2f2f2f2 	.word	0xf2f2f2f2
   158a8:	000006bc 	.word	0x000006bc
   158ac:	00028d54 	.word	0x00028d54
   158b0:	000156cd 	.word	0x000156cd
   158b4:	f3f3f3f3 	.word	0xf3f3f3f3
   158b8:	0000070c 	.word	0x0000070c
   158bc:	00000bc4 	.word	0x00000bc4
   158c0:	00000bc5 	.word	0x00000bc5
   158c4:	00000bc6 	.word	0x00000bc6
   158c8:	00000bc7 	.word	0x00000bc7
   158cc:	00000bc8 	.word	0x00000bc8
   158d0:	00000bc9 	.word	0x00000bc9
   158d4:	00000bca 	.word	0x00000bca
   158d8:	00000bcb 	.word	0x00000bcb
   158dc:	00000bcc 	.word	0x00000bcc
   158e0:	00000bcd 	.word	0x00000bcd
   158e4:	00000bce 	.word	0x00000bce
   158e8:	00000bcf 	.word	0x00000bcf
   158ec:	00015609 	.word	0x00015609
   158f0:	20000c18 	.word	0x20000c18
   158f4:	000006b4 	.word	0x000006b4
   158f8:	000156f1 	.word	0x000156f1
   158fc:	200044b4 	.word	0x200044b4

00015900 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   15900:	b510      	push	{r4, lr}
   15902:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   15904:	4b0e      	ldr	r3, [pc, #56]	; (15940 <prvTraceError+0x40>)
   15906:	681b      	ldr	r3, [r3, #0]
   15908:	2b00      	cmp	r3, #0
   1590a:	d001      	beq.n	15910 <prvTraceError+0x10>
	{
		vTraceStop();
   1590c:	4b0d      	ldr	r3, [pc, #52]	; (15944 <prvTraceError+0x44>)
   1590e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   15910:	4b0d      	ldr	r3, [pc, #52]	; (15948 <prvTraceError+0x48>)
   15912:	681b      	ldr	r3, [r3, #0]
   15914:	2b00      	cmp	r3, #0
   15916:	d000      	beq.n	1591a <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
   15918:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
   1591a:	4b0b      	ldr	r3, [pc, #44]	; (15948 <prvTraceError+0x48>)
   1591c:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
   1591e:	4b08      	ldr	r3, [pc, #32]	; (15940 <prvTraceError+0x40>)
   15920:	6818      	ldr	r0, [r3, #0]
   15922:	2800      	cmp	r0, #0
   15924:	d0f8      	beq.n	15918 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   15926:	4b09      	ldr	r3, [pc, #36]	; (1594c <prvTraceError+0x4c>)
   15928:	469c      	mov	ip, r3
   1592a:	4460      	add	r0, ip
   1592c:	2250      	movs	r2, #80	; 0x50
   1592e:	0021      	movs	r1, r4
   15930:	4b07      	ldr	r3, [pc, #28]	; (15950 <prvTraceError+0x50>)
   15932:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   15934:	4b02      	ldr	r3, [pc, #8]	; (15940 <prvTraceError+0x40>)
   15936:	681a      	ldr	r2, [r3, #0]
   15938:	2101      	movs	r1, #1
   1593a:	4b06      	ldr	r3, [pc, #24]	; (15954 <prvTraceError+0x54>)
   1593c:	50d1      	str	r1, [r2, r3]
}
   1593e:	e7eb      	b.n	15918 <prvTraceError+0x18>
   15940:	20000b60 	.word	0x20000b60
   15944:	000156f1 	.word	0x000156f1
   15948:	20000c18 	.word	0x20000c18
   1594c:	000006bc 	.word	0x000006bc
   15950:	000156cd 	.word	0x000156cd
   15954:	000006b4 	.word	0x000006b4

00015958 <prvTraceNextFreeEventBufferSlot>:
{
   15958:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
   1595a:	4b0c      	ldr	r3, [pc, #48]	; (1598c <prvTraceNextFreeEventBufferSlot+0x34>)
   1595c:	6818      	ldr	r0, [r3, #0]
   1595e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   15960:	2b00      	cmp	r3, #0
   15962:	d010      	beq.n	15986 <prvTraceNextFreeEventBufferSlot+0x2e>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   15964:	69c3      	ldr	r3, [r0, #28]
   15966:	222c      	movs	r2, #44	; 0x2c
   15968:	32ff      	adds	r2, #255	; 0xff
   1596a:	4293      	cmp	r3, r2
   1596c:	d806      	bhi.n	1597c <prvTraceNextFreeEventBufferSlot+0x24>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1596e:	009b      	lsls	r3, r3, #2
   15970:	22e2      	movs	r2, #226	; 0xe2
   15972:	00d2      	lsls	r2, r2, #3
   15974:	4694      	mov	ip, r2
   15976:	4463      	add	r3, ip
   15978:	18c0      	adds	r0, r0, r3
}
   1597a:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
   1597c:	4804      	ldr	r0, [pc, #16]	; (15990 <prvTraceNextFreeEventBufferSlot+0x38>)
   1597e:	4b05      	ldr	r3, [pc, #20]	; (15994 <prvTraceNextFreeEventBufferSlot+0x3c>)
   15980:	4798      	blx	r3
		return NULL;
   15982:	2000      	movs	r0, #0
   15984:	e7f9      	b.n	1597a <prvTraceNextFreeEventBufferSlot+0x22>
		return NULL;
   15986:	2000      	movs	r0, #0
   15988:	e7f7      	b.n	1597a <prvTraceNextFreeEventBufferSlot+0x22>
   1598a:	46c0      	nop			; (mov r8, r8)
   1598c:	20000b60 	.word	0x20000b60
   15990:	00028d68 	.word	0x00028d68
   15994:	00015901 	.word	0x00015901

00015998 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   15998:	b5f0      	push	{r4, r5, r6, r7, lr}
   1599a:	46c6      	mov	lr, r8
   1599c:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1599e:	2800      	cmp	r0, #0
   159a0:	d006      	beq.n	159b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
   159a2:	0007      	movs	r7, r0
   159a4:	2500      	movs	r5, #0
   159a6:	2800      	cmp	r0, #0
   159a8:	d005      	beq.n	159b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   159aa:	4b25      	ldr	r3, [pc, #148]	; (15a40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
   159ac:	4698      	mov	r8, r3
   159ae:	e00a      	b.n	159c6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
   159b0:	4824      	ldr	r0, [pc, #144]	; (15a44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
   159b2:	4b25      	ldr	r3, [pc, #148]	; (15a48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
   159b4:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
   159b6:	bc04      	pop	{r2}
   159b8:	4690      	mov	r8, r2
   159ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   159bc:	2a01      	cmp	r2, #1
   159be:	d021      	beq.n	15a04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
		i++;
   159c0:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
   159c2:	42bd      	cmp	r5, r7
   159c4:	d2f7      	bcs.n	159b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
   159c6:	4643      	mov	r3, r8
   159c8:	681c      	ldr	r4, [r3, #0]
   159ca:	69e3      	ldr	r3, [r4, #28]
   159cc:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   159ce:	009e      	lsls	r6, r3, #2
   159d0:	19a2      	adds	r2, r4, r6
   159d2:	21e2      	movs	r1, #226	; 0xe2
   159d4:	00c9      	lsls	r1, r1, #3
   159d6:	468c      	mov	ip, r1
   159d8:	4462      	add	r2, ip
   159da:	7812      	ldrb	r2, [r2, #0]
   159dc:	0011      	movs	r1, r2
   159de:	3167      	adds	r1, #103	; 0x67
   159e0:	b2c9      	uxtb	r1, r1
   159e2:	290e      	cmp	r1, #14
   159e4:	d8ea      	bhi.n	159bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   159e6:	3268      	adds	r2, #104	; 0x68
   159e8:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   159ea:	18d3      	adds	r3, r2, r3
   159ec:	69a1      	ldr	r1, [r4, #24]
   159ee:	428b      	cmp	r3, r1
   159f0:	d2e6      	bcs.n	159c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   159f2:	3201      	adds	r2, #1
   159f4:	0092      	lsls	r2, r2, #2
   159f6:	4663      	mov	r3, ip
   159f8:	18f0      	adds	r0, r6, r3
   159fa:	1820      	adds	r0, r4, r0
   159fc:	2100      	movs	r1, #0
   159fe:	4b13      	ldr	r3, [pc, #76]	; (15a4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a00:	4798      	blx	r3
   15a02:	e7dd      	b.n	159c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
   15a04:	3301      	adds	r3, #1
   15a06:	69a2      	ldr	r2, [r4, #24]
   15a08:	4293      	cmp	r3, r2
   15a0a:	d208      	bcs.n	15a1e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   15a0c:	23e2      	movs	r3, #226	; 0xe2
   15a0e:	00db      	lsls	r3, r3, #3
   15a10:	18f0      	adds	r0, r6, r3
   15a12:	1820      	adds	r0, r4, r0
   15a14:	2208      	movs	r2, #8
   15a16:	2100      	movs	r1, #0
   15a18:	4b0c      	ldr	r3, [pc, #48]	; (15a4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a1a:	4798      	blx	r3
   15a1c:	e7d0      	b.n	159c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   15a1e:	23e2      	movs	r3, #226	; 0xe2
   15a20:	00db      	lsls	r3, r3, #3
   15a22:	18e0      	adds	r0, r4, r3
   15a24:	2204      	movs	r2, #4
   15a26:	2100      	movs	r1, #0
   15a28:	4b08      	ldr	r3, [pc, #32]	; (15a4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a2a:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   15a2c:	23e2      	movs	r3, #226	; 0xe2
   15a2e:	00db      	lsls	r3, r3, #3
   15a30:	18f0      	adds	r0, r6, r3
   15a32:	1820      	adds	r0, r4, r0
   15a34:	2204      	movs	r2, #4
   15a36:	2100      	movs	r1, #0
   15a38:	4b04      	ldr	r3, [pc, #16]	; (15a4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a3a:	4798      	blx	r3
   15a3c:	e7c0      	b.n	159c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   15a3e:	46c0      	nop			; (mov r8, r8)
   15a40:	20000b60 	.word	0x20000b60
   15a44:	00028b88 	.word	0x00028b88
   15a48:	00015901 	.word	0x00015901
   15a4c:	00026253 	.word	0x00026253

00015a50 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   15a50:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
   15a52:	4b0b      	ldr	r3, [pc, #44]	; (15a80 <prvTraceUpdateCounters+0x30>)
   15a54:	681b      	ldr	r3, [r3, #0]
   15a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   15a58:	2a00      	cmp	r2, #0
   15a5a:	d010      	beq.n	15a7e <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   15a5c:	695a      	ldr	r2, [r3, #20]
   15a5e:	3201      	adds	r2, #1
   15a60:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   15a62:	69da      	ldr	r2, [r3, #28]
   15a64:	3201      	adds	r2, #1
   15a66:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   15a68:	212c      	movs	r1, #44	; 0x2c
   15a6a:	31ff      	adds	r1, #255	; 0xff
   15a6c:	428a      	cmp	r2, r1
   15a6e:	d903      	bls.n	15a78 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   15a70:	2201      	movs	r2, #1
   15a72:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   15a74:	2200      	movs	r2, #0
   15a76:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   15a78:	2001      	movs	r0, #1
   15a7a:	4b02      	ldr	r3, [pc, #8]	; (15a84 <prvTraceUpdateCounters+0x34>)
   15a7c:	4798      	blx	r3
#endif
}
   15a7e:	bd10      	pop	{r4, pc}
   15a80:	20000b60 	.word	0x20000b60
   15a84:	00015999 	.word	0x00015999

00015a88 <prvTraceGetParam>:
{
   15a88:	b570      	push	{r4, r5, r6, lr}
   15a8a:	0004      	movs	r4, r0
   15a8c:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   15a8e:	28ff      	cmp	r0, #255	; 0xff
   15a90:	d002      	beq.n	15a98 <prvTraceGetParam+0x10>
   15a92:	4b0d      	ldr	r3, [pc, #52]	; (15ac8 <prvTraceGetParam+0x40>)
   15a94:	4298      	cmp	r0, r3
   15a96:	d103      	bne.n	15aa0 <prvTraceGetParam+0x18>
	if (param <= param_max)
   15a98:	42ac      	cmp	r4, r5
   15a9a:	d305      	bcc.n	15aa8 <prvTraceGetParam+0x20>
}
   15a9c:	0028      	movs	r0, r5
   15a9e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   15aa0:	480a      	ldr	r0, [pc, #40]	; (15acc <prvTraceGetParam+0x44>)
   15aa2:	4b0b      	ldr	r3, [pc, #44]	; (15ad0 <prvTraceGetParam+0x48>)
   15aa4:	4798      	blx	r3
   15aa6:	e7f9      	b.n	15a9c <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   15aa8:	4b0a      	ldr	r3, [pc, #40]	; (15ad4 <prvTraceGetParam+0x4c>)
   15aaa:	4798      	blx	r3
		if (xps != NULL)
   15aac:	2800      	cmp	r0, #0
   15aae:	d009      	beq.n	15ac4 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
   15ab0:	2301      	movs	r3, #1
   15ab2:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   15ab4:	002b      	movs	r3, r5
   15ab6:	43a3      	bics	r3, r4
   15ab8:	0a1a      	lsrs	r2, r3, #8
   15aba:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   15abc:	0c1b      	lsrs	r3, r3, #16
   15abe:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   15ac0:	4b05      	ldr	r3, [pc, #20]	; (15ad8 <prvTraceGetParam+0x50>)
   15ac2:	4798      	blx	r3
		return param & param_max;
   15ac4:	4025      	ands	r5, r4
   15ac6:	e7e9      	b.n	15a9c <prvTraceGetParam+0x14>
   15ac8:	0000ffff 	.word	0x0000ffff
   15acc:	00028c8c 	.word	0x00028c8c
   15ad0:	00015901 	.word	0x00015901
   15ad4:	00015959 	.word	0x00015959
   15ad8:	00015a51 	.word	0x00015a51

00015adc <uiIndexOfObject>:
{
   15adc:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15ade:	2908      	cmp	r1, #8
   15ae0:	d814      	bhi.n	15b0c <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15ae2:	2800      	cmp	r0, #0
   15ae4:	d017      	beq.n	15b16 <uiIndexOfObject+0x3a>
   15ae6:	4b0e      	ldr	r3, [pc, #56]	; (15b20 <uiIndexOfObject+0x44>)
   15ae8:	681a      	ldr	r2, [r3, #0]
   15aea:	1853      	adds	r3, r2, r1
   15aec:	3364      	adds	r3, #100	; 0x64
   15aee:	781b      	ldrb	r3, [r3, #0]
   15af0:	4283      	cmp	r3, r0
   15af2:	d310      	bcc.n	15b16 <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15af4:	1853      	adds	r3, r2, r1
   15af6:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15af8:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15afa:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15afc:	4358      	muls	r0, r3
   15afe:	3140      	adds	r1, #64	; 0x40
   15b00:	0049      	lsls	r1, r1, #1
   15b02:	1851      	adds	r1, r2, r1
   15b04:	890b      	ldrh	r3, [r1, #8]
   15b06:	18c0      	adds	r0, r0, r3
   15b08:	b280      	uxth	r0, r0
   15b0a:	e008      	b.n	15b1e <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15b0c:	4805      	ldr	r0, [pc, #20]	; (15b24 <uiIndexOfObject+0x48>)
   15b0e:	4b06      	ldr	r3, [pc, #24]	; (15b28 <uiIndexOfObject+0x4c>)
   15b10:	4798      	blx	r3
   15b12:	2000      	movs	r0, #0
   15b14:	e003      	b.n	15b1e <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15b16:	4805      	ldr	r0, [pc, #20]	; (15b2c <uiIndexOfObject+0x50>)
   15b18:	4b03      	ldr	r3, [pc, #12]	; (15b28 <uiIndexOfObject+0x4c>)
   15b1a:	4798      	blx	r3
   15b1c:	2000      	movs	r0, #0
}
   15b1e:	bd10      	pop	{r4, pc}
   15b20:	20000b60 	.word	0x20000b60
   15b24:	0002931c 	.word	0x0002931c
   15b28:	00015901 	.word	0x00015901
   15b2c:	0002935c 	.word	0x0002935c

00015b30 <prvMarkObjectAsUsed>:
{
   15b30:	b510      	push	{r4, lr}
   15b32:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   15b34:	0001      	movs	r1, r0
   15b36:	0018      	movs	r0, r3
   15b38:	4b04      	ldr	r3, [pc, #16]	; (15b4c <prvMarkObjectAsUsed+0x1c>)
   15b3a:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   15b3c:	4b04      	ldr	r3, [pc, #16]	; (15b50 <prvMarkObjectAsUsed+0x20>)
   15b3e:	681b      	ldr	r3, [r3, #0]
   15b40:	1818      	adds	r0, r3, r0
   15b42:	309c      	adds	r0, #156	; 0x9c
   15b44:	2301      	movs	r3, #1
   15b46:	7003      	strb	r3, [r0, #0]
}
   15b48:	bd10      	pop	{r4, pc}
   15b4a:	46c0      	nop			; (mov r8, r8)
   15b4c:	00015add 	.word	0x00015add
   15b50:	20000b60 	.word	0x20000b60

00015b54 <prvTraceSetPriorityProperty>:
{
   15b54:	b570      	push	{r4, r5, r6, lr}
   15b56:	0004      	movs	r4, r0
   15b58:	0008      	movs	r0, r1
   15b5a:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b5c:	2c08      	cmp	r4, #8
   15b5e:	d813      	bhi.n	15b88 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b60:	4b0d      	ldr	r3, [pc, #52]	; (15b98 <prvTraceSetPriorityProperty+0x44>)
   15b62:	681b      	ldr	r3, [r3, #0]
   15b64:	191b      	adds	r3, r3, r4
   15b66:	3364      	adds	r3, #100	; 0x64
   15b68:	781b      	ldrb	r3, [r3, #0]
   15b6a:	428b      	cmp	r3, r1
   15b6c:	d310      	bcc.n	15b90 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   15b6e:	0021      	movs	r1, r4
   15b70:	4b0a      	ldr	r3, [pc, #40]	; (15b9c <prvTraceSetPriorityProperty+0x48>)
   15b72:	4798      	blx	r3
   15b74:	4b08      	ldr	r3, [pc, #32]	; (15b98 <prvTraceSetPriorityProperty+0x44>)
   15b76:	681b      	ldr	r3, [r3, #0]
   15b78:	191c      	adds	r4, r3, r4
   15b7a:	3470      	adds	r4, #112	; 0x70
   15b7c:	7822      	ldrb	r2, [r4, #0]
   15b7e:	181b      	adds	r3, r3, r0
   15b80:	189b      	adds	r3, r3, r2
   15b82:	339d      	adds	r3, #157	; 0x9d
   15b84:	701d      	strb	r5, [r3, #0]
}
   15b86:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b88:	4805      	ldr	r0, [pc, #20]	; (15ba0 <prvTraceSetPriorityProperty+0x4c>)
   15b8a:	4b06      	ldr	r3, [pc, #24]	; (15ba4 <prvTraceSetPriorityProperty+0x50>)
   15b8c:	4798      	blx	r3
   15b8e:	e7fa      	b.n	15b86 <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b90:	4805      	ldr	r0, [pc, #20]	; (15ba8 <prvTraceSetPriorityProperty+0x54>)
   15b92:	4b04      	ldr	r3, [pc, #16]	; (15ba4 <prvTraceSetPriorityProperty+0x50>)
   15b94:	4798      	blx	r3
   15b96:	e7f6      	b.n	15b86 <prvTraceSetPriorityProperty+0x32>
   15b98:	20000b60 	.word	0x20000b60
   15b9c:	00015add 	.word	0x00015add
   15ba0:	00028ea4 	.word	0x00028ea4
   15ba4:	00015901 	.word	0x00015901
   15ba8:	00028ef0 	.word	0x00028ef0

00015bac <prvTraceGetPriorityProperty>:
{
   15bac:	b510      	push	{r4, lr}
   15bae:	0004      	movs	r4, r0
   15bb0:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15bb2:	2c08      	cmp	r4, #8
   15bb4:	d813      	bhi.n	15bde <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15bb6:	4b0f      	ldr	r3, [pc, #60]	; (15bf4 <prvTraceGetPriorityProperty+0x48>)
   15bb8:	681b      	ldr	r3, [r3, #0]
   15bba:	191b      	adds	r3, r3, r4
   15bbc:	3364      	adds	r3, #100	; 0x64
   15bbe:	781b      	ldrb	r3, [r3, #0]
   15bc0:	428b      	cmp	r3, r1
   15bc2:	d311      	bcc.n	15be8 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   15bc4:	0021      	movs	r1, r4
   15bc6:	4b0c      	ldr	r3, [pc, #48]	; (15bf8 <prvTraceGetPriorityProperty+0x4c>)
   15bc8:	4798      	blx	r3
   15bca:	4b0a      	ldr	r3, [pc, #40]	; (15bf4 <prvTraceGetPriorityProperty+0x48>)
   15bcc:	681b      	ldr	r3, [r3, #0]
   15bce:	191c      	adds	r4, r3, r4
   15bd0:	3470      	adds	r4, #112	; 0x70
   15bd2:	7822      	ldrb	r2, [r4, #0]
   15bd4:	181b      	adds	r3, r3, r0
   15bd6:	189b      	adds	r3, r3, r2
   15bd8:	339d      	adds	r3, #157	; 0x9d
   15bda:	7818      	ldrb	r0, [r3, #0]
}
   15bdc:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15bde:	4807      	ldr	r0, [pc, #28]	; (15bfc <prvTraceGetPriorityProperty+0x50>)
   15be0:	4b07      	ldr	r3, [pc, #28]	; (15c00 <prvTraceGetPriorityProperty+0x54>)
   15be2:	4798      	blx	r3
   15be4:	2000      	movs	r0, #0
   15be6:	e7f9      	b.n	15bdc <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15be8:	4806      	ldr	r0, [pc, #24]	; (15c04 <prvTraceGetPriorityProperty+0x58>)
   15bea:	4b05      	ldr	r3, [pc, #20]	; (15c00 <prvTraceGetPriorityProperty+0x54>)
   15bec:	4798      	blx	r3
   15bee:	2000      	movs	r0, #0
   15bf0:	e7f4      	b.n	15bdc <prvTraceGetPriorityProperty+0x30>
   15bf2:	46c0      	nop			; (mov r8, r8)
   15bf4:	20000b60 	.word	0x20000b60
   15bf8:	00015add 	.word	0x00015add
   15bfc:	00028cc8 	.word	0x00028cc8
   15c00:	00015901 	.word	0x00015901
   15c04:	00028d14 	.word	0x00028d14

00015c08 <prvTraceSetObjectState>:
{
   15c08:	b570      	push	{r4, r5, r6, lr}
   15c0a:	0004      	movs	r4, r0
   15c0c:	0008      	movs	r0, r1
   15c0e:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c10:	2c08      	cmp	r4, #8
   15c12:	d813      	bhi.n	15c3c <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c14:	4b0d      	ldr	r3, [pc, #52]	; (15c4c <prvTraceSetObjectState+0x44>)
   15c16:	681b      	ldr	r3, [r3, #0]
   15c18:	191b      	adds	r3, r3, r4
   15c1a:	3364      	adds	r3, #100	; 0x64
   15c1c:	781b      	ldrb	r3, [r3, #0]
   15c1e:	428b      	cmp	r3, r1
   15c20:	d310      	bcc.n	15c44 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   15c22:	0021      	movs	r1, r4
   15c24:	4b0a      	ldr	r3, [pc, #40]	; (15c50 <prvTraceSetObjectState+0x48>)
   15c26:	4798      	blx	r3
   15c28:	4b08      	ldr	r3, [pc, #32]	; (15c4c <prvTraceSetObjectState+0x44>)
   15c2a:	681b      	ldr	r3, [r3, #0]
   15c2c:	191c      	adds	r4, r3, r4
   15c2e:	3470      	adds	r4, #112	; 0x70
   15c30:	7822      	ldrb	r2, [r4, #0]
   15c32:	181b      	adds	r3, r3, r0
   15c34:	189b      	adds	r3, r3, r2
   15c36:	339c      	adds	r3, #156	; 0x9c
   15c38:	701d      	strb	r5, [r3, #0]
}
   15c3a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c3c:	4805      	ldr	r0, [pc, #20]	; (15c54 <prvTraceSetObjectState+0x4c>)
   15c3e:	4b06      	ldr	r3, [pc, #24]	; (15c58 <prvTraceSetObjectState+0x50>)
   15c40:	4798      	blx	r3
   15c42:	e7fa      	b.n	15c3a <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c44:	4805      	ldr	r0, [pc, #20]	; (15c5c <prvTraceSetObjectState+0x54>)
   15c46:	4b04      	ldr	r3, [pc, #16]	; (15c58 <prvTraceSetObjectState+0x50>)
   15c48:	4798      	blx	r3
   15c4a:	e7f6      	b.n	15c3a <prvTraceSetObjectState+0x32>
   15c4c:	20000b60 	.word	0x20000b60
   15c50:	00015add 	.word	0x00015add
   15c54:	00028e24 	.word	0x00028e24
   15c58:	00015901 	.word	0x00015901
   15c5c:	00028e68 	.word	0x00028e68

00015c60 <prvTraceSetTaskInstanceFinished>:
{
   15c60:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15c62:	4b0b      	ldr	r3, [pc, #44]	; (15c90 <prvTraceSetTaskInstanceFinished+0x30>)
   15c64:	681a      	ldr	r2, [r3, #0]
   15c66:	2367      	movs	r3, #103	; 0x67
   15c68:	5cd3      	ldrb	r3, [r2, r3]
   15c6a:	4283      	cmp	r3, r0
   15c6c:	d30c      	bcc.n	15c88 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   15c6e:	2103      	movs	r1, #3
   15c70:	4b08      	ldr	r3, [pc, #32]	; (15c94 <prvTraceSetTaskInstanceFinished+0x34>)
   15c72:	4798      	blx	r3
   15c74:	4b06      	ldr	r3, [pc, #24]	; (15c90 <prvTraceSetTaskInstanceFinished+0x30>)
   15c76:	681b      	ldr	r3, [r3, #0]
   15c78:	2273      	movs	r2, #115	; 0x73
   15c7a:	5c9a      	ldrb	r2, [r3, r2]
   15c7c:	181b      	adds	r3, r3, r0
   15c7e:	189b      	adds	r3, r3, r2
   15c80:	339c      	adds	r3, #156	; 0x9c
   15c82:	2200      	movs	r2, #0
   15c84:	701a      	strb	r2, [r3, #0]
}
   15c86:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15c88:	4803      	ldr	r0, [pc, #12]	; (15c98 <prvTraceSetTaskInstanceFinished+0x38>)
   15c8a:	4b04      	ldr	r3, [pc, #16]	; (15c9c <prvTraceSetTaskInstanceFinished+0x3c>)
   15c8c:	4798      	blx	r3
   15c8e:	e7fa      	b.n	15c86 <prvTraceSetTaskInstanceFinished+0x26>
   15c90:	20000b60 	.word	0x20000b60
   15c94:	00015add 	.word	0x00015add
   15c98:	00028f30 	.word	0x00028f30
   15c9c:	00015901 	.word	0x00015901

00015ca0 <prvTraceGetObjectHandle>:
{
   15ca0:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15ca2:	4b2d      	ldr	r3, [pc, #180]	; (15d58 <prvTraceGetObjectHandle+0xb8>)
   15ca4:	681b      	ldr	r3, [r3, #0]
   15ca6:	2b00      	cmp	r3, #0
   15ca8:	d046      	beq.n	15d38 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15caa:	2808      	cmp	r0, #8
   15cac:	d849      	bhi.n	15d42 <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15cae:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15cb2:	2301      	movs	r3, #1
   15cb4:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15cb8:	4a28      	ldr	r2, [pc, #160]	; (15d5c <prvTraceGetObjectHandle+0xbc>)
   15cba:	6813      	ldr	r3, [r2, #0]
   15cbc:	3301      	adds	r3, #1
   15cbe:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   15cc0:	4a27      	ldr	r2, [pc, #156]	; (15d60 <prvTraceGetObjectHandle+0xc0>)
   15cc2:	0043      	lsls	r3, r0, #1
   15cc4:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   15cc6:	18d2      	adds	r2, r2, r3
   15cc8:	3248      	adds	r2, #72	; 0x48
   15cca:	7812      	ldrb	r2, [r2, #0]
   15ccc:	2a00      	cmp	r2, #0
   15cce:	d10a      	bne.n	15ce6 <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
   15cd0:	4923      	ldr	r1, [pc, #140]	; (15d60 <prvTraceGetObjectHandle+0xc0>)
   15cd2:	18cd      	adds	r5, r1, r3
   15cd4:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
   15cd6:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   15cd8:	0006      	movs	r6, r0
   15cda:	3608      	adds	r6, #8
   15cdc:	0076      	lsls	r6, r6, #1
   15cde:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
   15ce0:	8849      	ldrh	r1, [r1, #2]
   15ce2:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
   15ce4:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   15ce6:	0001      	movs	r1, r0
   15ce8:	3110      	adds	r1, #16
   15cea:	0049      	lsls	r1, r1, #1
   15cec:	4a1c      	ldr	r2, [pc, #112]	; (15d60 <prvTraceGetObjectHandle+0xc0>)
   15cee:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   15cf0:	8892      	ldrh	r2, [r2, #4]
   15cf2:	429a      	cmp	r2, r3
   15cf4:	d32a      	bcc.n	15d4c <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   15cf6:	491a      	ldr	r1, [pc, #104]	; (15d60 <prvTraceGetObjectHandle+0xc0>)
   15cf8:	18ca      	adds	r2, r1, r3
   15cfa:	3248      	adds	r2, #72	; 0x48
   15cfc:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   15cfe:	3301      	adds	r3, #1
   15d00:	b29b      	uxth	r3, r3
   15d02:	0045      	lsls	r5, r0, #1
   15d04:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
   15d06:	0005      	movs	r5, r0
   15d08:	3508      	adds	r5, #8
   15d0a:	006d      	lsls	r5, r5, #1
   15d0c:	194d      	adds	r5, r1, r5
   15d0e:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   15d10:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   15d12:	0005      	movs	r5, r0
   15d14:	3518      	adds	r5, #24
   15d16:	006d      	lsls	r5, r5, #1
   15d18:	1949      	adds	r1, r1, r5
   15d1a:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
   15d1c:	428b      	cmp	r3, r1
   15d1e:	dd03      	ble.n	15d28 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15d20:	490f      	ldr	r1, [pc, #60]	; (15d60 <prvTraceGetObjectHandle+0xc0>)
   15d22:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
   15d24:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15d26:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
   15d28:	490c      	ldr	r1, [pc, #48]	; (15d5c <prvTraceGetObjectHandle+0xbc>)
   15d2a:	680b      	ldr	r3, [r1, #0]
   15d2c:	3b01      	subs	r3, #1
   15d2e:	600b      	str	r3, [r1, #0]
   15d30:	f384 8810 	msr	PRIMASK, r4
}
   15d34:	0010      	movs	r0, r2
   15d36:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15d38:	480a      	ldr	r0, [pc, #40]	; (15d64 <prvTraceGetObjectHandle+0xc4>)
   15d3a:	4b0b      	ldr	r3, [pc, #44]	; (15d68 <prvTraceGetObjectHandle+0xc8>)
   15d3c:	4798      	blx	r3
   15d3e:	2200      	movs	r2, #0
   15d40:	e7f8      	b.n	15d34 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15d42:	480a      	ldr	r0, [pc, #40]	; (15d6c <prvTraceGetObjectHandle+0xcc>)
   15d44:	4b08      	ldr	r3, [pc, #32]	; (15d68 <prvTraceGetObjectHandle+0xc8>)
   15d46:	4798      	blx	r3
   15d48:	2200      	movs	r2, #0
   15d4a:	e7f3      	b.n	15d34 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15d4c:	4b08      	ldr	r3, [pc, #32]	; (15d70 <prvTraceGetObjectHandle+0xd0>)
   15d4e:	4798      	blx	r3
   15d50:	4b05      	ldr	r3, [pc, #20]	; (15d68 <prvTraceGetObjectHandle+0xc8>)
   15d52:	4798      	blx	r3
		handle = 0;
   15d54:	2200      	movs	r2, #0
   15d56:	e7e7      	b.n	15d28 <prvTraceGetObjectHandle+0x88>
   15d58:	20000b60 	.word	0x20000b60
   15d5c:	20000c10 	.word	0x20000c10
   15d60:	20000b7c 	.word	0x20000b7c
   15d64:	00029420 	.word	0x00029420
   15d68:	00015901 	.word	0x00015901
   15d6c:	00028c44 	.word	0x00028c44
   15d70:	0001566d 	.word	0x0001566d

00015d74 <prvTraceSetObjectName>:
{
   15d74:	b570      	push	{r4, r5, r6, lr}
   15d76:	0004      	movs	r4, r0
   15d78:	0008      	movs	r0, r1
   15d7a:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15d7c:	d012      	beq.n	15da4 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
   15d7e:	2c08      	cmp	r4, #8
   15d80:	d814      	bhi.n	15dac <prvTraceSetObjectName+0x38>
	if (handle == 0)
   15d82:	2900      	cmp	r1, #0
   15d84:	d016      	beq.n	15db4 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   15d86:	4b16      	ldr	r3, [pc, #88]	; (15de0 <prvTraceSetObjectName+0x6c>)
   15d88:	681b      	ldr	r3, [r3, #0]
   15d8a:	191b      	adds	r3, r3, r4
   15d8c:	3364      	adds	r3, #100	; 0x64
   15d8e:	781b      	ldrb	r3, [r3, #0]
   15d90:	428b      	cmp	r3, r1
   15d92:	d313      	bcc.n	15dbc <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
   15d94:	0021      	movs	r1, r4
   15d96:	4b13      	ldr	r3, [pc, #76]	; (15de4 <prvTraceSetObjectName+0x70>)
   15d98:	4798      	blx	r3
		if (traceErrorMessage == NULL)
   15d9a:	4b13      	ldr	r3, [pc, #76]	; (15de8 <prvTraceSetObjectName+0x74>)
   15d9c:	681b      	ldr	r3, [r3, #0]
   15d9e:	2b00      	cmp	r3, #0
   15da0:	d012      	beq.n	15dc8 <prvTraceSetObjectName+0x54>
}
   15da2:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15da4:	4811      	ldr	r0, [pc, #68]	; (15dec <prvTraceSetObjectName+0x78>)
   15da6:	4b12      	ldr	r3, [pc, #72]	; (15df0 <prvTraceSetObjectName+0x7c>)
   15da8:	4798      	blx	r3
   15daa:	e7fa      	b.n	15da2 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   15dac:	4811      	ldr	r0, [pc, #68]	; (15df4 <prvTraceSetObjectName+0x80>)
   15dae:	4b10      	ldr	r3, [pc, #64]	; (15df0 <prvTraceSetObjectName+0x7c>)
   15db0:	4798      	blx	r3
		return;
   15db2:	e7f6      	b.n	15da2 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   15db4:	4810      	ldr	r0, [pc, #64]	; (15df8 <prvTraceSetObjectName+0x84>)
   15db6:	4b0e      	ldr	r3, [pc, #56]	; (15df0 <prvTraceSetObjectName+0x7c>)
   15db8:	4798      	blx	r3
		return;
   15dba:	e7f2      	b.n	15da2 <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15dbc:	0020      	movs	r0, r4
   15dbe:	4b0f      	ldr	r3, [pc, #60]	; (15dfc <prvTraceSetObjectName+0x88>)
   15dc0:	4798      	blx	r3
   15dc2:	4b0b      	ldr	r3, [pc, #44]	; (15df0 <prvTraceSetObjectName+0x7c>)
   15dc4:	4798      	blx	r3
   15dc6:	e7ec      	b.n	15da2 <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15dc8:	4b05      	ldr	r3, [pc, #20]	; (15de0 <prvTraceSetObjectName+0x6c>)
   15dca:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   15dcc:	191c      	adds	r4, r3, r4
   15dce:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15dd0:	7822      	ldrb	r2, [r4, #0]
   15dd2:	309c      	adds	r0, #156	; 0x9c
   15dd4:	1818      	adds	r0, r3, r0
   15dd6:	0029      	movs	r1, r5
   15dd8:	4b09      	ldr	r3, [pc, #36]	; (15e00 <prvTraceSetObjectName+0x8c>)
   15dda:	4798      	blx	r3
   15ddc:	e7e1      	b.n	15da2 <prvTraceSetObjectName+0x2e>
   15dde:	46c0      	nop			; (mov r8, r8)
   15de0:	20000b60 	.word	0x20000b60
   15de4:	00015add 	.word	0x00015add
   15de8:	20000c18 	.word	0x20000c18
   15dec:	00028d90 	.word	0x00028d90
   15df0:	00015901 	.word	0x00015901
   15df4:	00028dc4 	.word	0x00028dc4
   15df8:	00028df4 	.word	0x00028df4
   15dfc:	0001566d 	.word	0x0001566d
   15e00:	000156cd 	.word	0x000156cd

00015e04 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   15e04:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   15e06:	4b1e      	ldr	r3, [pc, #120]	; (15e80 <prvTracePortGetTimeStamp+0x7c>)
   15e08:	681b      	ldr	r3, [r3, #0]
   15e0a:	2b01      	cmp	r3, #1
   15e0c:	d02b      	beq.n	15e66 <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   15e0e:	4b1d      	ldr	r3, [pc, #116]	; (15e84 <prvTracePortGetTimeStamp+0x80>)
   15e10:	6819      	ldr	r1, [r3, #0]
   15e12:	4b1d      	ldr	r3, [pc, #116]	; (15e88 <prvTracePortGetTimeStamp+0x84>)
   15e14:	681b      	ldr	r3, [r3, #0]
   15e16:	3101      	adds	r1, #1
   15e18:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   15e1a:	4b1c      	ldr	r3, [pc, #112]	; (15e8c <prvTracePortGetTimeStamp+0x88>)
   15e1c:	681b      	ldr	r3, [r3, #0]
   15e1e:	4a1c      	ldr	r2, [pc, #112]	; (15e90 <prvTracePortGetTimeStamp+0x8c>)
   15e20:	6814      	ldr	r4, [r2, #0]
   15e22:	43e2      	mvns	r2, r4
   15e24:	42da      	cmn	r2, r3
   15e26:	d424      	bmi.n	15e72 <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15e28:	4a1a      	ldr	r2, [pc, #104]	; (15e94 <prvTracePortGetTimeStamp+0x90>)
   15e2a:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   15e2c:	42a1      	cmp	r1, r4
   15e2e:	41a4      	sbcs	r4, r4
   15e30:	4264      	negs	r4, r4
   15e32:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   15e34:	2800      	cmp	r0, #0
   15e36:	d01f      	beq.n	15e78 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   15e38:	4d12      	ldr	r5, [pc, #72]	; (15e84 <prvTracePortGetTimeStamp+0x80>)
   15e3a:	682b      	ldr	r3, [r5, #0]
   15e3c:	3301      	adds	r3, #1
   15e3e:	089b      	lsrs	r3, r3, #2
   15e40:	4363      	muls	r3, r4
   15e42:	001a      	movs	r2, r3
   15e44:	4e14      	ldr	r6, [pc, #80]	; (15e98 <prvTracePortGetTimeStamp+0x94>)
   15e46:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   15e48:	682d      	ldr	r5, [r5, #0]
   15e4a:	3501      	adds	r5, #1
   15e4c:	2303      	movs	r3, #3
   15e4e:	402b      	ands	r3, r5
   15e50:	4363      	muls	r3, r4
   15e52:	185b      	adds	r3, r3, r1
   15e54:	089b      	lsrs	r3, r3, #2
   15e56:	189b      	adds	r3, r3, r2
   15e58:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   15e5a:	4a0c      	ldr	r2, [pc, #48]	; (15e8c <prvTracePortGetTimeStamp+0x88>)
   15e5c:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
   15e5e:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   15e60:	4b0c      	ldr	r3, [pc, #48]	; (15e94 <prvTracePortGetTimeStamp+0x90>)
   15e62:	6019      	str	r1, [r3, #0]
}
   15e64:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
   15e66:	2800      	cmp	r0, #0
   15e68:	d0fc      	beq.n	15e64 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
   15e6a:	4b0b      	ldr	r3, [pc, #44]	; (15e98 <prvTracePortGetTimeStamp+0x94>)
   15e6c:	681b      	ldr	r3, [r3, #0]
   15e6e:	6003      	str	r3, [r0, #0]
   15e70:	e7f8      	b.n	15e64 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15e72:	42a3      	cmp	r3, r4
   15e74:	d1de      	bne.n	15e34 <prvTracePortGetTimeStamp+0x30>
   15e76:	e7d7      	b.n	15e28 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
   15e78:	4b04      	ldr	r3, [pc, #16]	; (15e8c <prvTracePortGetTimeStamp+0x88>)
   15e7a:	601c      	str	r4, [r3, #0]
   15e7c:	e7f0      	b.n	15e60 <prvTracePortGetTimeStamp+0x5c>
   15e7e:	46c0      	nop			; (mov r8, r8)
   15e80:	20000c1c 	.word	0x20000c1c
   15e84:	e000e014 	.word	0xe000e014
   15e88:	e000e018 	.word	0xe000e018
   15e8c:	20000b78 	.word	0x20000b78
   15e90:	20000c24 	.word	0x20000c24
   15e94:	20000b70 	.word	0x20000b70
   15e98:	20000b74 	.word	0x20000b74

00015e9c <prvTraceGetDTS>:
{
   15e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e9e:	b083      	sub	sp, #12
   15ea0:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
   15ea2:	2300      	movs	r3, #0
   15ea4:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15ea6:	28ff      	cmp	r0, #255	; 0xff
   15ea8:	d002      	beq.n	15eb0 <prvTraceGetDTS+0x14>
   15eaa:	4b39      	ldr	r3, [pc, #228]	; (15f90 <prvTraceGetDTS+0xf4>)
   15eac:	4298      	cmp	r0, r3
   15eae:	d135      	bne.n	15f1c <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
   15eb0:	4b38      	ldr	r3, [pc, #224]	; (15f94 <prvTraceGetDTS+0xf8>)
   15eb2:	681c      	ldr	r4, [r3, #0]
   15eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	d105      	bne.n	15ec6 <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
   15eba:	4b37      	ldr	r3, [pc, #220]	; (15f98 <prvTraceGetDTS+0xfc>)
   15ebc:	681b      	ldr	r3, [r3, #0]
   15ebe:	2b00      	cmp	r3, #0
   15ec0:	d031      	beq.n	15f26 <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   15ec2:	089b      	lsrs	r3, r3, #2
   15ec4:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
   15ec6:	a801      	add	r0, sp, #4
   15ec8:	4b34      	ldr	r3, [pc, #208]	; (15f9c <prvTraceGetDTS+0x100>)
   15eca:	4798      	blx	r3
	dts = timestamp - old_timestamp;
   15ecc:	9b01      	ldr	r3, [sp, #4]
   15ece:	4a34      	ldr	r2, [pc, #208]	; (15fa0 <prvTraceGetDTS+0x104>)
   15ed0:	6811      	ldr	r1, [r2, #0]
   15ed2:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
   15ed4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
   15ed6:	4a2f      	ldr	r2, [pc, #188]	; (15f94 <prvTraceGetDTS+0xf8>)
   15ed8:	6816      	ldr	r6, [r2, #0]
   15eda:	6a77      	ldr	r7, [r6, #36]	; 0x24
   15edc:	2f00      	cmp	r7, #0
   15ede:	d032      	beq.n	15f46 <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
   15ee0:	42bc      	cmp	r4, r7
   15ee2:	d92c      	bls.n	15f3e <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   15ee4:	0039      	movs	r1, r7
   15ee6:	0020      	movs	r0, r4
   15ee8:	4b2e      	ldr	r3, [pc, #184]	; (15fa4 <prvTraceGetDTS+0x108>)
   15eea:	4798      	blx	r3
   15eec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   15eee:	469c      	mov	ip, r3
   15ef0:	4460      	add	r0, ip
   15ef2:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   15ef4:	0039      	movs	r1, r7
   15ef6:	0020      	movs	r0, r4
   15ef8:	4b2b      	ldr	r3, [pc, #172]	; (15fa8 <prvTraceGetDTS+0x10c>)
   15efa:	4798      	blx	r3
   15efc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15efe:	469c      	mov	ip, r3
   15f00:	4461      	add	r1, ip
   15f02:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   15f04:	4b23      	ldr	r3, [pc, #140]	; (15f94 <prvTraceGetDTS+0xf8>)
   15f06:	681b      	ldr	r3, [r3, #0]
   15f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15f0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   15f0c:	428a      	cmp	r2, r1
   15f0e:	d31b      	bcc.n	15f48 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
   15f10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   15f12:	3001      	adds	r0, #1
   15f14:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   15f16:	1a52      	subs	r2, r2, r1
   15f18:	629a      	str	r2, [r3, #40]	; 0x28
   15f1a:	e015      	b.n	15f48 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15f1c:	4823      	ldr	r0, [pc, #140]	; (15fac <prvTraceGetDTS+0x110>)
   15f1e:	4b24      	ldr	r3, [pc, #144]	; (15fb0 <prvTraceGetDTS+0x114>)
   15f20:	4798      	blx	r3
   15f22:	2000      	movs	r0, #0
   15f24:	e014      	b.n	15f50 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   15f26:	4b23      	ldr	r3, [pc, #140]	; (15fb4 <prvTraceGetDTS+0x118>)
   15f28:	681a      	ldr	r2, [r3, #0]
   15f2a:	4b23      	ldr	r3, [pc, #140]	; (15fb8 <prvTraceGetDTS+0x11c>)
   15f2c:	681b      	ldr	r3, [r3, #0]
   15f2e:	429a      	cmp	r2, r3
   15f30:	d0c9      	beq.n	15ec6 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   15f32:	2000      	movs	r0, #0
   15f34:	4b21      	ldr	r3, [pc, #132]	; (15fbc <prvTraceGetDTS+0x120>)
   15f36:	4798      	blx	r3
   15f38:	0880      	lsrs	r0, r0, #2
   15f3a:	6260      	str	r0, [r4, #36]	; 0x24
   15f3c:	e7c3      	b.n	15ec6 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
   15f3e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15f40:	191b      	adds	r3, r3, r4
   15f42:	62b3      	str	r3, [r6, #40]	; 0x28
   15f44:	e7de      	b.n	15f04 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
   15f46:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
   15f48:	42ac      	cmp	r4, r5
   15f4a:	d803      	bhi.n	15f54 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
   15f4c:	0020      	movs	r0, r4
   15f4e:	4028      	ands	r0, r5
}
   15f50:	b003      	add	sp, #12
   15f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   15f54:	4b1a      	ldr	r3, [pc, #104]	; (15fc0 <prvTraceGetDTS+0x124>)
   15f56:	4798      	blx	r3
		if (xts != NULL)
   15f58:	2800      	cmp	r0, #0
   15f5a:	d0f7      	beq.n	15f4c <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
   15f5c:	4b0c      	ldr	r3, [pc, #48]	; (15f90 <prvTraceGetDTS+0xf4>)
   15f5e:	429d      	cmp	r5, r3
   15f60:	d007      	beq.n	15f72 <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
   15f62:	2dff      	cmp	r5, #255	; 0xff
   15f64:	d00c      	beq.n	15f80 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   15f66:	4817      	ldr	r0, [pc, #92]	; (15fc4 <prvTraceGetDTS+0x128>)
   15f68:	4b11      	ldr	r3, [pc, #68]	; (15fb0 <prvTraceGetDTS+0x114>)
   15f6a:	4798      	blx	r3
			prvTraceUpdateCounters();
   15f6c:	4b16      	ldr	r3, [pc, #88]	; (15fc8 <prvTraceGetDTS+0x12c>)
   15f6e:	4798      	blx	r3
   15f70:	e7ec      	b.n	15f4c <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
   15f72:	23a9      	movs	r3, #169	; 0xa9
   15f74:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   15f76:	0c23      	lsrs	r3, r4, #16
   15f78:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
   15f7a:	2300      	movs	r3, #0
   15f7c:	7043      	strb	r3, [r0, #1]
   15f7e:	e7f5      	b.n	15f6c <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
   15f80:	23a8      	movs	r3, #168	; 0xa8
   15f82:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   15f84:	0a23      	lsrs	r3, r4, #8
   15f86:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   15f88:	0e23      	lsrs	r3, r4, #24
   15f8a:	7043      	strb	r3, [r0, #1]
   15f8c:	e7ee      	b.n	15f6c <prvTraceGetDTS+0xd0>
   15f8e:	46c0      	nop			; (mov r8, r8)
   15f90:	0000ffff 	.word	0x0000ffff
   15f94:	20000b60 	.word	0x20000b60
   15f98:	20000c14 	.word	0x20000c14
   15f9c:	00015e05 	.word	0x00015e05
   15fa0:	20000c0c 	.word	0x20000c0c
   15fa4:	00023fe9 	.word	0x00023fe9
   15fa8:	000240f5 	.word	0x000240f5
   15fac:	00028be0 	.word	0x00028be0
   15fb0:	00015901 	.word	0x00015901
   15fb4:	e000e018 	.word	0xe000e018
   15fb8:	20005084 	.word	0x20005084
   15fbc:	0001f035 	.word	0x0001f035
   15fc0:	00015959 	.word	0x00015959
   15fc4:	00028c20 	.word	0x00028c20
   15fc8:	00015a51 	.word	0x00015a51

00015fcc <prvTraceStoreTaskReady>:
{
   15fcc:	b570      	push	{r4, r5, r6, lr}
   15fce:	1e04      	subs	r4, r0, #0
	if (handle == 0)
   15fd0:	d01d      	beq.n	1600e <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
   15fd2:	4b1b      	ldr	r3, [pc, #108]	; (16040 <prvTraceStoreTaskReady+0x74>)
   15fd4:	681b      	ldr	r3, [r3, #0]
   15fd6:	2b00      	cmp	r3, #0
   15fd8:	d019      	beq.n	1600e <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   15fda:	280f      	cmp	r0, #15
   15fdc:	d818      	bhi.n	16010 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
   15fde:	4b19      	ldr	r3, [pc, #100]	; (16044 <prvTraceStoreTaskReady+0x78>)
   15fe0:	681b      	ldr	r3, [r3, #0]
   15fe2:	2b00      	cmp	r3, #0
   15fe4:	d118      	bne.n	16018 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15fe6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15fea:	2301      	movs	r3, #1
   15fec:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15ff0:	4a14      	ldr	r2, [pc, #80]	; (16044 <prvTraceStoreTaskReady+0x78>)
   15ff2:	6813      	ldr	r3, [r2, #0]
   15ff4:	3301      	adds	r3, #1
   15ff6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   15ff8:	4b13      	ldr	r3, [pc, #76]	; (16048 <prvTraceStoreTaskReady+0x7c>)
   15ffa:	681b      	ldr	r3, [r3, #0]
   15ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15ffe:	2b00      	cmp	r3, #0
   16000:	d10e      	bne.n	16020 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
   16002:	4a10      	ldr	r2, [pc, #64]	; (16044 <prvTraceStoreTaskReady+0x78>)
   16004:	6813      	ldr	r3, [r2, #0]
   16006:	3b01      	subs	r3, #1
   16008:	6013      	str	r3, [r2, #0]
   1600a:	f385 8810 	msr	PRIMASK, r5
}
   1600e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   16010:	480e      	ldr	r0, [pc, #56]	; (1604c <prvTraceStoreTaskReady+0x80>)
   16012:	4b0f      	ldr	r3, [pc, #60]	; (16050 <prvTraceStoreTaskReady+0x84>)
   16014:	4798      	blx	r3
   16016:	e7fa      	b.n	1600e <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   16018:	480e      	ldr	r0, [pc, #56]	; (16054 <prvTraceStoreTaskReady+0x88>)
   1601a:	4b0d      	ldr	r3, [pc, #52]	; (16050 <prvTraceStoreTaskReady+0x84>)
   1601c:	4798      	blx	r3
		return;
   1601e:	e7f6      	b.n	1600e <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16020:	480d      	ldr	r0, [pc, #52]	; (16058 <prvTraceStoreTaskReady+0x8c>)
   16022:	4b0e      	ldr	r3, [pc, #56]	; (1605c <prvTraceStoreTaskReady+0x90>)
   16024:	4798      	blx	r3
   16026:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   16028:	4b0d      	ldr	r3, [pc, #52]	; (16060 <prvTraceStoreTaskReady+0x94>)
   1602a:	4798      	blx	r3
		if (tr != NULL)
   1602c:	2800      	cmp	r0, #0
   1602e:	d0e8      	beq.n	16002 <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
   16030:	2302      	movs	r3, #2
   16032:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
   16034:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
   16036:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   16038:	4b0a      	ldr	r3, [pc, #40]	; (16064 <prvTraceStoreTaskReady+0x98>)
   1603a:	4798      	blx	r3
   1603c:	e7e1      	b.n	16002 <prvTraceStoreTaskReady+0x36>
   1603e:	46c0      	nop			; (mov r8, r8)
   16040:	200000c4 	.word	0x200000c4
   16044:	20000c10 	.word	0x20000c10
   16048:	20000b60 	.word	0x20000b60
   1604c:	00029220 	.word	0x00029220
   16050:	00015901 	.word	0x00015901
   16054:	00029260 	.word	0x00029260
   16058:	0000ffff 	.word	0x0000ffff
   1605c:	00015e9d 	.word	0x00015e9d
   16060:	00015959 	.word	0x00015959
   16064:	00015a51 	.word	0x00015a51

00016068 <vTraceStoreMemMangEvent>:
{
   16068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1606a:	b083      	sub	sp, #12
   1606c:	9000      	str	r0, [sp, #0]
   1606e:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
   16070:	4b28      	ldr	r3, [pc, #160]	; (16114 <vTraceStoreMemMangEvent+0xac>)
   16072:	681b      	ldr	r3, [r3, #0]
   16074:	2b00      	cmp	r3, #0
   16076:	d01d      	beq.n	160b4 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
   16078:	17d3      	asrs	r3, r2, #31
   1607a:	18d6      	adds	r6, r2, r3
   1607c:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1607e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16082:	2301      	movs	r3, #1
   16084:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16088:	4923      	ldr	r1, [pc, #140]	; (16118 <vTraceStoreMemMangEvent+0xb0>)
   1608a:	680b      	ldr	r3, [r1, #0]
   1608c:	3301      	adds	r3, #1
   1608e:	600b      	str	r3, [r1, #0]
	if (address != 0)
   16090:	2c00      	cmp	r4, #0
   16092:	d004      	beq.n	1609e <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
   16094:	4b21      	ldr	r3, [pc, #132]	; (1611c <vTraceStoreMemMangEvent+0xb4>)
   16096:	6819      	ldr	r1, [r3, #0]
   16098:	468c      	mov	ip, r1
   1609a:	4462      	add	r2, ip
   1609c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1609e:	4b1d      	ldr	r3, [pc, #116]	; (16114 <vTraceStoreMemMangEvent+0xac>)
   160a0:	681b      	ldr	r3, [r3, #0]
   160a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   160a4:	2b00      	cmp	r3, #0
   160a6:	d107      	bne.n	160b8 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
   160a8:	4a1b      	ldr	r2, [pc, #108]	; (16118 <vTraceStoreMemMangEvent+0xb0>)
   160aa:	6813      	ldr	r3, [r2, #0]
   160ac:	3b01      	subs	r3, #1
   160ae:	6013      	str	r3, [r2, #0]
   160b0:	f385 8810 	msr	PRIMASK, r5
}
   160b4:	b003      	add	sp, #12
   160b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   160b8:	20ff      	movs	r0, #255	; 0xff
   160ba:	4b19      	ldr	r3, [pc, #100]	; (16120 <vTraceStoreMemMangEvent+0xb8>)
   160bc:	4798      	blx	r3
   160be:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   160c0:	0031      	movs	r1, r6
   160c2:	4818      	ldr	r0, [pc, #96]	; (16124 <vTraceStoreMemMangEvent+0xbc>)
   160c4:	4b18      	ldr	r3, [pc, #96]	; (16128 <vTraceStoreMemMangEvent+0xc0>)
   160c6:	4798      	blx	r3
   160c8:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   160ca:	4b18      	ldr	r3, [pc, #96]	; (1612c <vTraceStoreMemMangEvent+0xc4>)
   160cc:	4798      	blx	r3
   160ce:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
   160d0:	d0ea      	beq.n	160a8 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
   160d2:	466b      	mov	r3, sp
   160d4:	791b      	ldrb	r3, [r3, #4]
   160d6:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   160d8:	2300      	movs	r3, #0
   160da:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
   160dc:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
   160de:	4b14      	ldr	r3, [pc, #80]	; (16130 <vTraceStoreMemMangEvent+0xc8>)
   160e0:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   160e2:	0021      	movs	r1, r4
   160e4:	480f      	ldr	r0, [pc, #60]	; (16124 <vTraceStoreMemMangEvent+0xbc>)
   160e6:	4b10      	ldr	r3, [pc, #64]	; (16128 <vTraceStoreMemMangEvent+0xc0>)
   160e8:	4798      	blx	r3
   160ea:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   160ec:	4b0f      	ldr	r3, [pc, #60]	; (1612c <vTraceStoreMemMangEvent+0xc4>)
   160ee:	4798      	blx	r3
			if (ma != NULL)
   160f0:	2800      	cmp	r0, #0
   160f2:	d0d9      	beq.n	160a8 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
   160f4:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
   160f6:	2300      	movs	r3, #0
   160f8:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   160fa:	466b      	mov	r3, sp
   160fc:	781c      	ldrb	r4, [r3, #0]
   160fe:	1c63      	adds	r3, r4, #1
   16100:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
   16102:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
   16104:	4b0a      	ldr	r3, [pc, #40]	; (16130 <vTraceStoreMemMangEvent+0xc8>)
   16106:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   16108:	4b02      	ldr	r3, [pc, #8]	; (16114 <vTraceStoreMemMangEvent+0xac>)
   1610a:	681b      	ldr	r3, [r3, #0]
   1610c:	4a03      	ldr	r2, [pc, #12]	; (1611c <vTraceStoreMemMangEvent+0xb4>)
   1610e:	6812      	ldr	r2, [r2, #0]
   16110:	651a      	str	r2, [r3, #80]	; 0x50
   16112:	e7c9      	b.n	160a8 <vTraceStoreMemMangEvent+0x40>
   16114:	20000b60 	.word	0x20000b60
   16118:	20000c10 	.word	0x20000c10
   1611c:	20000b68 	.word	0x20000b68
   16120:	00015e9d 	.word	0x00015e9d
   16124:	0000ffff 	.word	0x0000ffff
   16128:	00015a89 	.word	0x00015a89
   1612c:	00015959 	.word	0x00015959
   16130:	00015a51 	.word	0x00015a51

00016134 <prvTraceStoreKernelCall>:
{
   16134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16136:	0005      	movs	r5, r0
   16138:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1613a:	28fe      	cmp	r0, #254	; 0xfe
   1613c:	d825      	bhi.n	1618a <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1613e:	2908      	cmp	r1, #8
   16140:	d827      	bhi.n	16192 <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   16142:	4b21      	ldr	r3, [pc, #132]	; (161c8 <prvTraceStoreKernelCall+0x94>)
   16144:	681b      	ldr	r3, [r3, #0]
   16146:	1859      	adds	r1, r3, r1
   16148:	3164      	adds	r1, #100	; 0x64
   1614a:	780b      	ldrb	r3, [r1, #0]
   1614c:	4293      	cmp	r3, r2
   1614e:	d324      	bcc.n	1619a <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
   16150:	4b1e      	ldr	r3, [pc, #120]	; (161cc <prvTraceStoreKernelCall+0x98>)
   16152:	681b      	ldr	r3, [r3, #0]
   16154:	2b00      	cmp	r3, #0
   16156:	d124      	bne.n	161a2 <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
   16158:	4b1d      	ldr	r3, [pc, #116]	; (161d0 <prvTraceStoreKernelCall+0x9c>)
   1615a:	781b      	ldrb	r3, [r3, #0]
   1615c:	2b00      	cmp	r3, #0
   1615e:	d013      	beq.n	16188 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16160:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16164:	2301      	movs	r3, #1
   16166:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   1616a:	4a18      	ldr	r2, [pc, #96]	; (161cc <prvTraceStoreKernelCall+0x98>)
   1616c:	6813      	ldr	r3, [r2, #0]
   1616e:	3301      	adds	r3, #1
   16170:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
   16172:	4b15      	ldr	r3, [pc, #84]	; (161c8 <prvTraceStoreKernelCall+0x94>)
   16174:	681b      	ldr	r3, [r3, #0]
   16176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16178:	2b00      	cmp	r3, #0
   1617a:	d116      	bne.n	161aa <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
   1617c:	4a13      	ldr	r2, [pc, #76]	; (161cc <prvTraceStoreKernelCall+0x98>)
   1617e:	6813      	ldr	r3, [r2, #0]
   16180:	3b01      	subs	r3, #1
   16182:	6013      	str	r3, [r2, #0]
   16184:	f386 8810 	msr	PRIMASK, r6
}
   16188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1618a:	4812      	ldr	r0, [pc, #72]	; (161d4 <prvTraceStoreKernelCall+0xa0>)
   1618c:	4b12      	ldr	r3, [pc, #72]	; (161d8 <prvTraceStoreKernelCall+0xa4>)
   1618e:	4798      	blx	r3
   16190:	e7fa      	b.n	16188 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16192:	4812      	ldr	r0, [pc, #72]	; (161dc <prvTraceStoreKernelCall+0xa8>)
   16194:	4b10      	ldr	r3, [pc, #64]	; (161d8 <prvTraceStoreKernelCall+0xa4>)
   16196:	4798      	blx	r3
   16198:	e7f6      	b.n	16188 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1619a:	4811      	ldr	r0, [pc, #68]	; (161e0 <prvTraceStoreKernelCall+0xac>)
   1619c:	4b0e      	ldr	r3, [pc, #56]	; (161d8 <prvTraceStoreKernelCall+0xa4>)
   1619e:	4798      	blx	r3
   161a0:	e7f2      	b.n	16188 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   161a2:	4810      	ldr	r0, [pc, #64]	; (161e4 <prvTraceStoreKernelCall+0xb0>)
   161a4:	4b0c      	ldr	r3, [pc, #48]	; (161d8 <prvTraceStoreKernelCall+0xa4>)
   161a6:	4798      	blx	r3
		return;
   161a8:	e7ee      	b.n	16188 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   161aa:	480f      	ldr	r0, [pc, #60]	; (161e8 <prvTraceStoreKernelCall+0xb4>)
   161ac:	4b0f      	ldr	r3, [pc, #60]	; (161ec <prvTraceStoreKernelCall+0xb8>)
   161ae:	4798      	blx	r3
   161b0:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   161b2:	4b0f      	ldr	r3, [pc, #60]	; (161f0 <prvTraceStoreKernelCall+0xbc>)
   161b4:	4798      	blx	r3
		if (kse != NULL)
   161b6:	2800      	cmp	r0, #0
   161b8:	d0e0      	beq.n	1617c <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
   161ba:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
   161bc:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
   161be:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   161c0:	4b0c      	ldr	r3, [pc, #48]	; (161f4 <prvTraceStoreKernelCall+0xc0>)
   161c2:	4798      	blx	r3
   161c4:	e7da      	b.n	1617c <prvTraceStoreKernelCall+0x48>
   161c6:	46c0      	nop			; (mov r8, r8)
   161c8:	20000b60 	.word	0x20000b60
   161cc:	20000c10 	.word	0x20000c10
   161d0:	20000b64 	.word	0x20000b64
   161d4:	00028f78 	.word	0x00028f78
   161d8:	00015901 	.word	0x00015901
   161dc:	00028fb0 	.word	0x00028fb0
   161e0:	00028ff8 	.word	0x00028ff8
   161e4:	00029040 	.word	0x00029040
   161e8:	0000ffff 	.word	0x0000ffff
   161ec:	00015e9d 	.word	0x00015e9d
   161f0:	00015959 	.word	0x00015959
   161f4:	00015a51 	.word	0x00015a51

000161f8 <prvTraceStoreKernelCallWithParam>:
{
   161f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   161fa:	46c6      	mov	lr, r8
   161fc:	b500      	push	{lr}
   161fe:	0006      	movs	r6, r0
   16200:	0014      	movs	r4, r2
   16202:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   16204:	28fe      	cmp	r0, #254	; 0xfe
   16206:	d827      	bhi.n	16258 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16208:	2908      	cmp	r1, #8
   1620a:	d829      	bhi.n	16260 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1620c:	4b24      	ldr	r3, [pc, #144]	; (162a0 <prvTraceStoreKernelCallWithParam+0xa8>)
   1620e:	681b      	ldr	r3, [r3, #0]
   16210:	1859      	adds	r1, r3, r1
   16212:	3164      	adds	r1, #100	; 0x64
   16214:	780b      	ldrb	r3, [r1, #0]
   16216:	4293      	cmp	r3, r2
   16218:	d326      	bcc.n	16268 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
   1621a:	4b22      	ldr	r3, [pc, #136]	; (162a4 <prvTraceStoreKernelCallWithParam+0xac>)
   1621c:	681b      	ldr	r3, [r3, #0]
   1621e:	2b00      	cmp	r3, #0
   16220:	d126      	bne.n	16270 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16222:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16226:	2301      	movs	r3, #1
   16228:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   1622c:	4a1d      	ldr	r2, [pc, #116]	; (162a4 <prvTraceStoreKernelCallWithParam+0xac>)
   1622e:	6813      	ldr	r3, [r2, #0]
   16230:	3301      	adds	r3, #1
   16232:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   16234:	4b1a      	ldr	r3, [pc, #104]	; (162a0 <prvTraceStoreKernelCallWithParam+0xa8>)
   16236:	681b      	ldr	r3, [r3, #0]
   16238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1623a:	2b00      	cmp	r3, #0
   1623c:	d003      	beq.n	16246 <prvTraceStoreKernelCallWithParam+0x4e>
   1623e:	4b1a      	ldr	r3, [pc, #104]	; (162a8 <prvTraceStoreKernelCallWithParam+0xb0>)
   16240:	781b      	ldrb	r3, [r3, #0]
   16242:	2b00      	cmp	r3, #0
   16244:	d118      	bne.n	16278 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
   16246:	4a17      	ldr	r2, [pc, #92]	; (162a4 <prvTraceStoreKernelCallWithParam+0xac>)
   16248:	6813      	ldr	r3, [r2, #0]
   1624a:	3b01      	subs	r3, #1
   1624c:	6013      	str	r3, [r2, #0]
   1624e:	f388 8810 	msr	PRIMASK, r8
}
   16252:	bc04      	pop	{r2}
   16254:	4690      	mov	r8, r2
   16256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   16258:	4814      	ldr	r0, [pc, #80]	; (162ac <prvTraceStoreKernelCallWithParam+0xb4>)
   1625a:	4b15      	ldr	r3, [pc, #84]	; (162b0 <prvTraceStoreKernelCallWithParam+0xb8>)
   1625c:	4798      	blx	r3
   1625e:	e7f8      	b.n	16252 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16260:	4814      	ldr	r0, [pc, #80]	; (162b4 <prvTraceStoreKernelCallWithParam+0xbc>)
   16262:	4b13      	ldr	r3, [pc, #76]	; (162b0 <prvTraceStoreKernelCallWithParam+0xb8>)
   16264:	4798      	blx	r3
   16266:	e7f4      	b.n	16252 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   16268:	4813      	ldr	r0, [pc, #76]	; (162b8 <prvTraceStoreKernelCallWithParam+0xc0>)
   1626a:	4b11      	ldr	r3, [pc, #68]	; (162b0 <prvTraceStoreKernelCallWithParam+0xb8>)
   1626c:	4798      	blx	r3
   1626e:	e7f0      	b.n	16252 <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   16270:	4812      	ldr	r0, [pc, #72]	; (162bc <prvTraceStoreKernelCallWithParam+0xc4>)
   16272:	4b0f      	ldr	r3, [pc, #60]	; (162b0 <prvTraceStoreKernelCallWithParam+0xb8>)
   16274:	4798      	blx	r3
		return;
   16276:	e7ec      	b.n	16252 <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   16278:	20ff      	movs	r0, #255	; 0xff
   1627a:	4b11      	ldr	r3, [pc, #68]	; (162c0 <prvTraceStoreKernelCallWithParam+0xc8>)
   1627c:	4798      	blx	r3
   1627e:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   16280:	0029      	movs	r1, r5
   16282:	20ff      	movs	r0, #255	; 0xff
   16284:	4b0f      	ldr	r3, [pc, #60]	; (162c4 <prvTraceStoreKernelCallWithParam+0xcc>)
   16286:	4798      	blx	r3
   16288:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1628a:	4b0f      	ldr	r3, [pc, #60]	; (162c8 <prvTraceStoreKernelCallWithParam+0xd0>)
   1628c:	4798      	blx	r3
		if (kse != NULL)
   1628e:	2800      	cmp	r0, #0
   16290:	d0d9      	beq.n	16246 <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
   16292:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
   16294:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
   16296:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
   16298:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
   1629a:	4b0c      	ldr	r3, [pc, #48]	; (162cc <prvTraceStoreKernelCallWithParam+0xd4>)
   1629c:	4798      	blx	r3
   1629e:	e7d2      	b.n	16246 <prvTraceStoreKernelCallWithParam+0x4e>
   162a0:	20000b60 	.word	0x20000b60
   162a4:	20000c10 	.word	0x20000c10
   162a8:	20000b64 	.word	0x20000b64
   162ac:	00029108 	.word	0x00029108
   162b0:	00015901 	.word	0x00015901
   162b4:	00029148 	.word	0x00029148
   162b8:	00029198 	.word	0x00029198
   162bc:	000291e8 	.word	0x000291e8
   162c0:	00015e9d 	.word	0x00015e9d
   162c4:	00015a89 	.word	0x00015a89
   162c8:	00015959 	.word	0x00015959
   162cc:	00015a51 	.word	0x00015a51

000162d0 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
   162d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162d2:	0004      	movs	r4, r0
   162d4:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   162d6:	28fe      	cmp	r0, #254	; 0xfe
   162d8:	d81c      	bhi.n	16314 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
   162da:	4b1c      	ldr	r3, [pc, #112]	; (1634c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   162dc:	681b      	ldr	r3, [r3, #0]
   162de:	2b00      	cmp	r3, #0
   162e0:	d11c      	bne.n	1631c <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   162e2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   162e6:	2301      	movs	r3, #1
   162e8:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   162ec:	4a17      	ldr	r2, [pc, #92]	; (1634c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   162ee:	6813      	ldr	r3, [r2, #0]
   162f0:	3301      	adds	r3, #1
   162f2:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   162f4:	4b16      	ldr	r3, [pc, #88]	; (16350 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
   162f6:	681b      	ldr	r3, [r3, #0]
   162f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   162fa:	2b00      	cmp	r3, #0
   162fc:	d003      	beq.n	16306 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   162fe:	4b15      	ldr	r3, [pc, #84]	; (16354 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
   16300:	781b      	ldrb	r3, [r3, #0]
   16302:	2b00      	cmp	r3, #0
   16304:	d10e      	bne.n	16324 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
   16306:	4a11      	ldr	r2, [pc, #68]	; (1634c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   16308:	6813      	ldr	r3, [r2, #0]
   1630a:	3b01      	subs	r3, #1
   1630c:	6013      	str	r3, [r2, #0]
   1630e:	f386 8810 	msr	PRIMASK, r6
}
   16312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   16314:	4810      	ldr	r0, [pc, #64]	; (16358 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
   16316:	4b11      	ldr	r3, [pc, #68]	; (1635c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16318:	4798      	blx	r3
   1631a:	e7fa      	b.n	16312 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1631c:	4810      	ldr	r0, [pc, #64]	; (16360 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
   1631e:	4b0f      	ldr	r3, [pc, #60]	; (1635c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16320:	4798      	blx	r3
		return;
   16322:	e7f6      	b.n	16312 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   16324:	20ff      	movs	r0, #255	; 0xff
   16326:	4b0f      	ldr	r3, [pc, #60]	; (16364 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
   16328:	4798      	blx	r3
   1632a:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1632c:	0029      	movs	r1, r5
   1632e:	480e      	ldr	r0, [pc, #56]	; (16368 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
   16330:	4b0e      	ldr	r3, [pc, #56]	; (1636c <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   16332:	4798      	blx	r3
   16334:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   16336:	4b0e      	ldr	r3, [pc, #56]	; (16370 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   16338:	4798      	blx	r3
		if (kse != NULL)
   1633a:	2800      	cmp	r0, #0
   1633c:	d0e3      	beq.n	16306 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
   1633e:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
   16340:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
   16342:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
   16344:	4b0b      	ldr	r3, [pc, #44]	; (16374 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   16346:	4798      	blx	r3
   16348:	e7dd      	b.n	16306 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   1634a:	46c0      	nop			; (mov r8, r8)
   1634c:	20000c10 	.word	0x20000c10
   16350:	20000b60 	.word	0x20000b60
   16354:	20000b64 	.word	0x20000b64
   16358:	00029078 	.word	0x00029078
   1635c:	00015901 	.word	0x00015901
   16360:	000290d0 	.word	0x000290d0
   16364:	00015e9d 	.word	0x00015e9d
   16368:	0000ffff 	.word	0x0000ffff
   1636c:	00015a89 	.word	0x00015a89
   16370:	00015959 	.word	0x00015959
   16374:	00015a51 	.word	0x00015a51

00016378 <prvTraceStoreTaskswitch>:
{
   16378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1637a:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1637c:	280f      	cmp	r0, #15
   1637e:	d818      	bhi.n	163b2 <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16380:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16384:	2301      	movs	r3, #1
   16386:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1638a:	4a26      	ldr	r2, [pc, #152]	; (16424 <prvTraceStoreTaskswitch+0xac>)
   1638c:	6813      	ldr	r3, [r2, #0]
   1638e:	3301      	adds	r3, #1
   16390:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   16392:	4b25      	ldr	r3, [pc, #148]	; (16428 <prvTraceStoreTaskswitch+0xb0>)
   16394:	781b      	ldrb	r3, [r3, #0]
   16396:	4283      	cmp	r3, r0
   16398:	d004      	beq.n	163a4 <prvTraceStoreTaskswitch+0x2c>
   1639a:	4b24      	ldr	r3, [pc, #144]	; (1642c <prvTraceStoreTaskswitch+0xb4>)
   1639c:	681b      	ldr	r3, [r3, #0]
   1639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   163a0:	2b00      	cmp	r3, #0
   163a2:	d10a      	bne.n	163ba <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   163a4:	4a1f      	ldr	r2, [pc, #124]	; (16424 <prvTraceStoreTaskswitch+0xac>)
   163a6:	6813      	ldr	r3, [r2, #0]
   163a8:	3b01      	subs	r3, #1
   163aa:	6013      	str	r3, [r2, #0]
   163ac:	f385 8810 	msr	PRIMASK, r5
}
   163b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   163b2:	481f      	ldr	r0, [pc, #124]	; (16430 <prvTraceStoreTaskswitch+0xb8>)
   163b4:	4b1f      	ldr	r3, [pc, #124]	; (16434 <prvTraceStoreTaskswitch+0xbc>)
   163b6:	4798      	blx	r3
   163b8:	e7fa      	b.n	163b0 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
   163ba:	2200      	movs	r2, #0
   163bc:	4b1e      	ldr	r3, [pc, #120]	; (16438 <prvTraceStoreTaskswitch+0xc0>)
   163be:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   163c0:	481e      	ldr	r0, [pc, #120]	; (1643c <prvTraceStoreTaskswitch+0xc4>)
   163c2:	4b1f      	ldr	r3, [pc, #124]	; (16440 <prvTraceStoreTaskswitch+0xc8>)
   163c4:	4798      	blx	r3
   163c6:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
   163c8:	4b17      	ldr	r3, [pc, #92]	; (16428 <prvTraceStoreTaskswitch+0xb0>)
   163ca:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   163cc:	4b1d      	ldr	r3, [pc, #116]	; (16444 <prvTraceStoreTaskswitch+0xcc>)
   163ce:	4798      	blx	r3
   163d0:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
   163d2:	d0e7      	beq.n	163a4 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   163d4:	4b14      	ldr	r3, [pc, #80]	; (16428 <prvTraceStoreTaskswitch+0xb0>)
   163d6:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   163d8:	4b14      	ldr	r3, [pc, #80]	; (1642c <prvTraceStoreTaskswitch+0xb4>)
   163da:	681a      	ldr	r2, [r3, #0]
   163dc:	2367      	movs	r3, #103	; 0x67
   163de:	5cd3      	ldrb	r3, [r2, r3]
   163e0:	4283      	cmp	r3, r0
   163e2:	d30f      	bcc.n	16404 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   163e4:	2103      	movs	r1, #3
   163e6:	4b18      	ldr	r3, [pc, #96]	; (16448 <prvTraceStoreTaskswitch+0xd0>)
   163e8:	4798      	blx	r3
   163ea:	4b10      	ldr	r3, [pc, #64]	; (1642c <prvTraceStoreTaskswitch+0xb4>)
   163ec:	681b      	ldr	r3, [r3, #0]
   163ee:	2273      	movs	r2, #115	; 0x73
   163f0:	5c9a      	ldrb	r2, [r3, r2]
   163f2:	181b      	adds	r3, r3, r0
   163f4:	189b      	adds	r3, r3, r2
   163f6:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   163f8:	781b      	ldrb	r3, [r3, #0]
   163fa:	2b01      	cmp	r3, #1
   163fc:	d105      	bne.n	1640a <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
   163fe:	3306      	adds	r3, #6
   16400:	7033      	strb	r3, [r6, #0]
   16402:	e004      	b.n	1640e <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16404:	4811      	ldr	r0, [pc, #68]	; (1644c <prvTraceStoreTaskswitch+0xd4>)
   16406:	4b0b      	ldr	r3, [pc, #44]	; (16434 <prvTraceStoreTaskswitch+0xbc>)
   16408:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
   1640a:	2306      	movs	r3, #6
   1640c:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
   1640e:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   16410:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
   16412:	4b05      	ldr	r3, [pc, #20]	; (16428 <prvTraceStoreTaskswitch+0xb0>)
   16414:	7819      	ldrb	r1, [r3, #0]
   16416:	2201      	movs	r2, #1
   16418:	2003      	movs	r0, #3
   1641a:	4b0d      	ldr	r3, [pc, #52]	; (16450 <prvTraceStoreTaskswitch+0xd8>)
   1641c:	4798      	blx	r3
			prvTraceUpdateCounters();
   1641e:	4b0d      	ldr	r3, [pc, #52]	; (16454 <prvTraceStoreTaskswitch+0xdc>)
   16420:	4798      	blx	r3
   16422:	e7bf      	b.n	163a4 <prvTraceStoreTaskswitch+0x2c>
   16424:	20000c10 	.word	0x20000c10
   16428:	20000b64 	.word	0x20000b64
   1642c:	20000b60 	.word	0x20000b60
   16430:	00029298 	.word	0x00029298
   16434:	00015901 	.word	0x00015901
   16438:	20000b6c 	.word	0x20000b6c
   1643c:	0000ffff 	.word	0x0000ffff
   16440:	00015e9d 	.word	0x00015e9d
   16444:	00015959 	.word	0x00015959
   16448:	00015add 	.word	0x00015add
   1644c:	000292e0 	.word	0x000292e0
   16450:	00015c09 	.word	0x00015c09
   16454:	00015a51 	.word	0x00015a51

00016458 <uiTraceStart>:
{
   16458:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
   1645a:	4b20      	ldr	r3, [pc, #128]	; (164dc <uiTraceStart+0x84>)
   1645c:	681b      	ldr	r3, [r3, #0]
   1645e:	2b00      	cmp	r3, #0
   16460:	d00a      	beq.n	16478 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
   16462:	6b18      	ldr	r0, [r3, #48]	; 0x30
   16464:	2801      	cmp	r0, #1
   16466:	d006      	beq.n	16476 <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
   16468:	4b1d      	ldr	r3, [pc, #116]	; (164e0 <uiTraceStart+0x88>)
   1646a:	681b      	ldr	r3, [r3, #0]
   1646c:	2b00      	cmp	r3, #0
   1646e:	d008      	beq.n	16482 <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
   16470:	4b1a      	ldr	r3, [pc, #104]	; (164dc <uiTraceStart+0x84>)
   16472:	681b      	ldr	r3, [r3, #0]
   16474:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   16476:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   16478:	481a      	ldr	r0, [pc, #104]	; (164e4 <uiTraceStart+0x8c>)
   1647a:	4b1b      	ldr	r3, [pc, #108]	; (164e8 <uiTraceStart+0x90>)
   1647c:	4798      	blx	r3
   1647e:	2000      	movs	r0, #0
   16480:	e7f9      	b.n	16476 <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16482:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16486:	2201      	movs	r2, #1
   16488:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
   1648c:	4917      	ldr	r1, [pc, #92]	; (164ec <uiTraceStart+0x94>)
   1648e:	680b      	ldr	r3, [r1, #0]
   16490:	3301      	adds	r3, #1
   16492:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   16494:	4b11      	ldr	r3, [pc, #68]	; (164dc <uiTraceStart+0x84>)
   16496:	681b      	ldr	r3, [r3, #0]
   16498:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1649a:	4b15      	ldr	r3, [pc, #84]	; (164f0 <uiTraceStart+0x98>)
   1649c:	4798      	blx	r3
   1649e:	4b15      	ldr	r3, [pc, #84]	; (164f4 <uiTraceStart+0x9c>)
   164a0:	4798      	blx	r3
   164a2:	b2c4      	uxtb	r4, r0
		if (handle == 0)
   164a4:	2c00      	cmp	r4, #0
   164a6:	d009      	beq.n	164bc <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   164a8:	0020      	movs	r0, r4
   164aa:	4b13      	ldr	r3, [pc, #76]	; (164f8 <uiTraceStart+0xa0>)
   164ac:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   164ae:	4a0f      	ldr	r2, [pc, #60]	; (164ec <uiTraceStart+0x94>)
   164b0:	6813      	ldr	r3, [r2, #0]
   164b2:	3b01      	subs	r3, #1
   164b4:	6013      	str	r3, [r2, #0]
   164b6:	f385 8810 	msr	PRIMASK, r5
   164ba:	e7d9      	b.n	16470 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   164bc:	2003      	movs	r0, #3
   164be:	4b0f      	ldr	r3, [pc, #60]	; (164fc <uiTraceStart+0xa4>)
   164c0:	4798      	blx	r3
   164c2:	0006      	movs	r6, r0
   164c4:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   164c6:	4a0e      	ldr	r2, [pc, #56]	; (16500 <uiTraceStart+0xa8>)
   164c8:	0001      	movs	r1, r0
   164ca:	2003      	movs	r0, #3
   164cc:	4b0d      	ldr	r3, [pc, #52]	; (16504 <uiTraceStart+0xac>)
   164ce:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   164d0:	2200      	movs	r2, #0
   164d2:	0031      	movs	r1, r6
   164d4:	2003      	movs	r0, #3
   164d6:	4b0c      	ldr	r3, [pc, #48]	; (16508 <uiTraceStart+0xb0>)
   164d8:	4798      	blx	r3
   164da:	e7e5      	b.n	164a8 <uiTraceStart+0x50>
   164dc:	20000b60 	.word	0x20000b60
   164e0:	20000c18 	.word	0x20000c18
   164e4:	0002939c 	.word	0x0002939c
   164e8:	00015901 	.word	0x00015901
   164ec:	20000c10 	.word	0x20000c10
   164f0:	000154b1 	.word	0x000154b1
   164f4:	000152ed 	.word	0x000152ed
   164f8:	00016379 	.word	0x00016379
   164fc:	00015ca1 	.word	0x00015ca1
   16500:	000293e0 	.word	0x000293e0
   16504:	00015d75 	.word	0x00015d75
   16508:	00015b55 	.word	0x00015b55

0001650c <vTraceStart>:
{
   1650c:	b510      	push	{r4, lr}
	(void)uiTraceStart();
   1650e:	4b01      	ldr	r3, [pc, #4]	; (16514 <vTraceStart+0x8>)
   16510:	4798      	blx	r3
}
   16512:	bd10      	pop	{r4, pc}
   16514:	00016459 	.word	0x00016459

00016518 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16518:	0003      	movs	r3, r0
   1651a:	3308      	adds	r3, #8
   1651c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1651e:	2201      	movs	r2, #1
   16520:	4252      	negs	r2, r2
   16522:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16524:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16526:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   16528:	2300      	movs	r3, #0
   1652a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1652c:	4770      	bx	lr

0001652e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1652e:	2300      	movs	r3, #0
   16530:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   16532:	4770      	bx	lr

00016534 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   16534:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   16536:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   16538:	689a      	ldr	r2, [r3, #8]
   1653a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1653c:	689a      	ldr	r2, [r3, #8]
   1653e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   16540:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   16542:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   16544:	6803      	ldr	r3, [r0, #0]
   16546:	3301      	adds	r3, #1
   16548:	6003      	str	r3, [r0, #0]
}
   1654a:	4770      	bx	lr

0001654c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1654c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1654e:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16550:	0002      	movs	r2, r0
   16552:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
   16554:	1c63      	adds	r3, r4, #1
   16556:	d102      	bne.n	1655e <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
   16558:	6902      	ldr	r2, [r0, #16]
   1655a:	e004      	b.n	16566 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1655c:	001a      	movs	r2, r3
   1655e:	6853      	ldr	r3, [r2, #4]
   16560:	681d      	ldr	r5, [r3, #0]
   16562:	42ac      	cmp	r4, r5
   16564:	d2fa      	bcs.n	1655c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   16566:	6853      	ldr	r3, [r2, #4]
   16568:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1656a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1656c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   1656e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   16570:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   16572:	6803      	ldr	r3, [r0, #0]
   16574:	3301      	adds	r3, #1
   16576:	6003      	str	r3, [r0, #0]
}
   16578:	bd30      	pop	{r4, r5, pc}

0001657a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1657a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1657c:	6842      	ldr	r2, [r0, #4]
   1657e:	6881      	ldr	r1, [r0, #8]
   16580:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   16582:	6882      	ldr	r2, [r0, #8]
   16584:	6841      	ldr	r1, [r0, #4]
   16586:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   16588:	685a      	ldr	r2, [r3, #4]
   1658a:	4290      	cmp	r0, r2
   1658c:	d006      	beq.n	1659c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1658e:	2200      	movs	r2, #0
   16590:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   16592:	681a      	ldr	r2, [r3, #0]
   16594:	3a01      	subs	r2, #1
   16596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   16598:	6818      	ldr	r0, [r3, #0]
}
   1659a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1659c:	6882      	ldr	r2, [r0, #8]
   1659e:	605a      	str	r2, [r3, #4]
   165a0:	e7f5      	b.n	1658e <uxListRemove+0x14>
	...

000165a4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   165a4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   165a6:	2300      	movs	r3, #0
   165a8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   165aa:	4b06      	ldr	r3, [pc, #24]	; (165c4 <prvTaskExitError+0x20>)
   165ac:	681b      	ldr	r3, [r3, #0]
   165ae:	3301      	adds	r3, #1
   165b0:	d001      	beq.n	165b6 <prvTaskExitError+0x12>
   165b2:	b672      	cpsid	i
   165b4:	e7fe      	b.n	165b4 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
   165b6:	b672      	cpsid	i
	while( ulDummy == 0 )
   165b8:	9b01      	ldr	r3, [sp, #4]
   165ba:	2b00      	cmp	r3, #0
   165bc:	d0fc      	beq.n	165b8 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   165be:	b002      	add	sp, #8
   165c0:	4770      	bx	lr
   165c2:	46c0      	nop			; (mov r8, r8)
   165c4:	200000c8 	.word	0x200000c8
	...

000165d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   165d0:	4a0b      	ldr	r2, [pc, #44]	; (16600 <pxCurrentTCBConst2>)
   165d2:	6813      	ldr	r3, [r2, #0]
   165d4:	6818      	ldr	r0, [r3, #0]
   165d6:	3020      	adds	r0, #32
   165d8:	f380 8809 	msr	PSP, r0
   165dc:	2002      	movs	r0, #2
   165de:	f380 8814 	msr	CONTROL, r0
   165e2:	f3bf 8f6f 	isb	sy
   165e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   165e8:	46ae      	mov	lr, r5
   165ea:	bc08      	pop	{r3}
   165ec:	bc04      	pop	{r2}
   165ee:	b662      	cpsie	i
   165f0:	4718      	bx	r3
   165f2:	46c0      	nop			; (mov r8, r8)
   165f4:	46c0      	nop			; (mov r8, r8)
   165f6:	46c0      	nop			; (mov r8, r8)
   165f8:	46c0      	nop			; (mov r8, r8)
   165fa:	46c0      	nop			; (mov r8, r8)
   165fc:	46c0      	nop			; (mov r8, r8)
   165fe:	46c0      	nop			; (mov r8, r8)

00016600 <pxCurrentTCBConst2>:
   16600:	20003b14 	.word	0x20003b14

00016604 <pxPortInitialiseStack>:
{
   16604:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   16606:	1f03      	subs	r3, r0, #4
   16608:	2480      	movs	r4, #128	; 0x80
   1660a:	0464      	lsls	r4, r4, #17
   1660c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1660e:	3b04      	subs	r3, #4
   16610:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   16612:	3b04      	subs	r3, #4
   16614:	4902      	ldr	r1, [pc, #8]	; (16620 <pxPortInitialiseStack+0x1c>)
   16616:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   16618:	3b14      	subs	r3, #20
   1661a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1661c:	3840      	subs	r0, #64	; 0x40
}
   1661e:	bd10      	pop	{r4, pc}
   16620:	000165a5 	.word	0x000165a5

00016624 <SVC_Handler>:
}
   16624:	4770      	bx	lr
	...

00016628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   16628:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1662a:	4b13      	ldr	r3, [pc, #76]	; (16678 <xPortStartScheduler+0x50>)
   1662c:	6819      	ldr	r1, [r3, #0]
   1662e:	22ff      	movs	r2, #255	; 0xff
   16630:	0412      	lsls	r2, r2, #16
   16632:	430a      	orrs	r2, r1
   16634:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   16636:	6819      	ldr	r1, [r3, #0]
   16638:	22ff      	movs	r2, #255	; 0xff
   1663a:	0612      	lsls	r2, r2, #24
   1663c:	430a      	orrs	r2, r1
   1663e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   16640:	4d0e      	ldr	r5, [pc, #56]	; (1667c <xPortStartScheduler+0x54>)
   16642:	2400      	movs	r4, #0
   16644:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   16646:	4b0e      	ldr	r3, [pc, #56]	; (16680 <xPortStartScheduler+0x58>)
   16648:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1664a:	2000      	movs	r0, #0
   1664c:	4b0d      	ldr	r3, [pc, #52]	; (16684 <xPortStartScheduler+0x5c>)
   1664e:	4798      	blx	r3
   16650:	21fa      	movs	r1, #250	; 0xfa
   16652:	0089      	lsls	r1, r1, #2
   16654:	4b0c      	ldr	r3, [pc, #48]	; (16688 <xPortStartScheduler+0x60>)
   16656:	4798      	blx	r3
   16658:	3801      	subs	r0, #1
   1665a:	4b0c      	ldr	r3, [pc, #48]	; (1668c <xPortStartScheduler+0x64>)
   1665c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1665e:	2307      	movs	r3, #7
   16660:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
   16662:	4b0b      	ldr	r3, [pc, #44]	; (16690 <xPortStartScheduler+0x68>)
   16664:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
   16666:	4b0b      	ldr	r3, [pc, #44]	; (16694 <xPortStartScheduler+0x6c>)
   16668:	4798      	blx	r3
	vTaskSwitchContext();
   1666a:	4b0b      	ldr	r3, [pc, #44]	; (16698 <xPortStartScheduler+0x70>)
   1666c:	4798      	blx	r3
	prvTaskExitError();
   1666e:	4b0b      	ldr	r3, [pc, #44]	; (1669c <xPortStartScheduler+0x74>)
   16670:	4798      	blx	r3
}
   16672:	2000      	movs	r0, #0
   16674:	bd70      	pop	{r4, r5, r6, pc}
   16676:	46c0      	nop			; (mov r8, r8)
   16678:	e000ed20 	.word	0xe000ed20
   1667c:	e000e010 	.word	0xe000e010
   16680:	e000e018 	.word	0xe000e018
   16684:	0001f035 	.word	0x0001f035
   16688:	00023fe9 	.word	0x00023fe9
   1668c:	e000e014 	.word	0xe000e014
   16690:	200000c8 	.word	0x200000c8
   16694:	000165d1 	.word	0x000165d1
   16698:	00018195 	.word	0x00018195
   1669c:	000165a5 	.word	0x000165a5

000166a0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   166a0:	2280      	movs	r2, #128	; 0x80
   166a2:	0552      	lsls	r2, r2, #21
   166a4:	4b01      	ldr	r3, [pc, #4]	; (166ac <vPortYield+0xc>)
   166a6:	601a      	str	r2, [r3, #0]
}
   166a8:	4770      	bx	lr
   166aa:	46c0      	nop			; (mov r8, r8)
   166ac:	e000ed04 	.word	0xe000ed04

000166b0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
   166b0:	b672      	cpsid	i
    uxCriticalNesting++;
   166b2:	4a04      	ldr	r2, [pc, #16]	; (166c4 <vPortEnterCritical+0x14>)
   166b4:	6813      	ldr	r3, [r2, #0]
   166b6:	3301      	adds	r3, #1
   166b8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
   166ba:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   166be:	f3bf 8f6f 	isb	sy
}
   166c2:	4770      	bx	lr
   166c4:	200000c8 	.word	0x200000c8

000166c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   166c8:	4b06      	ldr	r3, [pc, #24]	; (166e4 <vPortExitCritical+0x1c>)
   166ca:	681b      	ldr	r3, [r3, #0]
   166cc:	2b00      	cmp	r3, #0
   166ce:	d101      	bne.n	166d4 <vPortExitCritical+0xc>
   166d0:	b672      	cpsid	i
   166d2:	e7fe      	b.n	166d2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
   166d4:	3b01      	subs	r3, #1
   166d6:	4a03      	ldr	r2, [pc, #12]	; (166e4 <vPortExitCritical+0x1c>)
   166d8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
   166da:	2b00      	cmp	r3, #0
   166dc:	d100      	bne.n	166e0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
   166de:	b662      	cpsie	i
}
   166e0:	4770      	bx	lr
   166e2:	46c0      	nop			; (mov r8, r8)
   166e4:	200000c8 	.word	0x200000c8

000166e8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
   166e8:	f3ef 8010 	mrs	r0, PRIMASK
   166ec:	b672      	cpsid	i
   166ee:	4770      	bx	lr

000166f0 <vClearInterruptMaskFromISR>:
	__asm volatile(
   166f0:	f380 8810 	msr	PRIMASK, r0
   166f4:	4770      	bx	lr
	...

00016700 <PendSV_Handler>:
	__asm volatile
   16700:	f3ef 8009 	mrs	r0, PSP
   16704:	4b0e      	ldr	r3, [pc, #56]	; (16740 <pxCurrentTCBConst>)
   16706:	681a      	ldr	r2, [r3, #0]
   16708:	3820      	subs	r0, #32
   1670a:	6010      	str	r0, [r2, #0]
   1670c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1670e:	4644      	mov	r4, r8
   16710:	464d      	mov	r5, r9
   16712:	4656      	mov	r6, sl
   16714:	465f      	mov	r7, fp
   16716:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   16718:	b508      	push	{r3, lr}
   1671a:	b672      	cpsid	i
   1671c:	f001 fd3a 	bl	18194 <vTaskSwitchContext>
   16720:	b662      	cpsie	i
   16722:	bc0c      	pop	{r2, r3}
   16724:	6811      	ldr	r1, [r2, #0]
   16726:	6808      	ldr	r0, [r1, #0]
   16728:	3010      	adds	r0, #16
   1672a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1672c:	46a0      	mov	r8, r4
   1672e:	46a9      	mov	r9, r5
   16730:	46b2      	mov	sl, r6
   16732:	46bb      	mov	fp, r7
   16734:	f380 8809 	msr	PSP, r0
   16738:	3820      	subs	r0, #32
   1673a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1673c:	4718      	bx	r3
   1673e:	46c0      	nop			; (mov r8, r8)

00016740 <pxCurrentTCBConst>:
   16740:	20003b14 	.word	0x20003b14

00016744 <SysTick_Handler>:
{
   16744:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   16746:	4b07      	ldr	r3, [pc, #28]	; (16764 <SysTick_Handler+0x20>)
   16748:	4798      	blx	r3
   1674a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
   1674c:	4b06      	ldr	r3, [pc, #24]	; (16768 <SysTick_Handler+0x24>)
   1674e:	4798      	blx	r3
   16750:	2800      	cmp	r0, #0
   16752:	d003      	beq.n	1675c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   16754:	2280      	movs	r2, #128	; 0x80
   16756:	0552      	lsls	r2, r2, #21
   16758:	4b04      	ldr	r3, [pc, #16]	; (1676c <SysTick_Handler+0x28>)
   1675a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1675c:	0020      	movs	r0, r4
   1675e:	4b04      	ldr	r3, [pc, #16]	; (16770 <SysTick_Handler+0x2c>)
   16760:	4798      	blx	r3
}
   16762:	bd10      	pop	{r4, pc}
   16764:	000166e9 	.word	0x000166e9
   16768:	00017e3d 	.word	0x00017e3d
   1676c:	e000ed04 	.word	0xe000ed04
   16770:	000166f1 	.word	0x000166f1

00016774 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   16774:	b570      	push	{r4, r5, r6, lr}
   16776:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   16778:	0743      	lsls	r3, r0, #29
   1677a:	d002      	beq.n	16782 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1677c:	2307      	movs	r3, #7
   1677e:	439c      	bics	r4, r3
   16780:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   16782:	4b18      	ldr	r3, [pc, #96]	; (167e4 <pvPortMalloc+0x70>)
   16784:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   16786:	4b18      	ldr	r3, [pc, #96]	; (167e8 <pvPortMalloc+0x74>)
   16788:	681b      	ldr	r3, [r3, #0]
   1678a:	2b00      	cmp	r3, #0
   1678c:	d017      	beq.n	167be <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1678e:	4b17      	ldr	r3, [pc, #92]	; (167ec <pvPortMalloc+0x78>)
   16790:	681a      	ldr	r2, [r3, #0]
   16792:	18a3      	adds	r3, r4, r2
   16794:	4916      	ldr	r1, [pc, #88]	; (167f0 <pvPortMalloc+0x7c>)
   16796:	428b      	cmp	r3, r1
   16798:	d818      	bhi.n	167cc <pvPortMalloc+0x58>
   1679a:	429a      	cmp	r2, r3
   1679c:	d216      	bcs.n	167cc <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1679e:	4912      	ldr	r1, [pc, #72]	; (167e8 <pvPortMalloc+0x74>)
   167a0:	680d      	ldr	r5, [r1, #0]
   167a2:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
   167a4:	4a11      	ldr	r2, [pc, #68]	; (167ec <pvPortMalloc+0x78>)
   167a6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   167a8:	2d00      	cmp	r5, #0
   167aa:	d00f      	beq.n	167cc <pvPortMalloc+0x58>
   167ac:	0022      	movs	r2, r4
   167ae:	0029      	movs	r1, r5
   167b0:	2094      	movs	r0, #148	; 0x94
   167b2:	4b10      	ldr	r3, [pc, #64]	; (167f4 <pvPortMalloc+0x80>)
   167b4:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   167b6:	4b10      	ldr	r3, [pc, #64]	; (167f8 <pvPortMalloc+0x84>)
   167b8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   167ba:	0028      	movs	r0, r5
   167bc:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   167be:	2207      	movs	r2, #7
   167c0:	4b0e      	ldr	r3, [pc, #56]	; (167fc <pvPortMalloc+0x88>)
   167c2:	3308      	adds	r3, #8
   167c4:	4393      	bics	r3, r2
   167c6:	4a08      	ldr	r2, [pc, #32]	; (167e8 <pvPortMalloc+0x74>)
   167c8:	6013      	str	r3, [r2, #0]
   167ca:	e7e0      	b.n	1678e <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
   167cc:	0022      	movs	r2, r4
   167ce:	2100      	movs	r1, #0
   167d0:	20e8      	movs	r0, #232	; 0xe8
   167d2:	4b08      	ldr	r3, [pc, #32]	; (167f4 <pvPortMalloc+0x80>)
   167d4:	4798      	blx	r3
	( void ) xTaskResumeAll();
   167d6:	4b08      	ldr	r3, [pc, #32]	; (167f8 <pvPortMalloc+0x84>)
   167d8:	4798      	blx	r3
			vApplicationMallocFailedHook();
   167da:	4b09      	ldr	r3, [pc, #36]	; (16800 <pvPortMalloc+0x8c>)
   167dc:	4798      	blx	r3
   167de:	2500      	movs	r5, #0
	return pvReturn;
   167e0:	e7eb      	b.n	167ba <pvPortMalloc+0x46>
   167e2:	46c0      	nop			; (mov r8, r8)
   167e4:	00017e21 	.word	0x00017e21
   167e8:	20000c2c 	.word	0x20000c2c
   167ec:	20003b10 	.word	0x20003b10
   167f0:	00002ed7 	.word	0x00002ed7
   167f4:	00016069 	.word	0x00016069
   167f8:	00017fc9 	.word	0x00017fc9
   167fc:	20000c30 	.word	0x20000c30
   16800:	00023fc1 	.word	0x00023fc1

00016804 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   16804:	2800      	cmp	r0, #0
   16806:	d001      	beq.n	1680c <vPortFree+0x8>
   16808:	b672      	cpsid	i
   1680a:	e7fe      	b.n	1680a <vPortFree+0x6>
}
   1680c:	4770      	bx	lr
	...

00016810 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   16810:	4b02      	ldr	r3, [pc, #8]	; (1681c <xPortGetFreeHeapSize+0xc>)
   16812:	681b      	ldr	r3, [r3, #0]
   16814:	4802      	ldr	r0, [pc, #8]	; (16820 <xPortGetFreeHeapSize+0x10>)
   16816:	1ac0      	subs	r0, r0, r3
}
   16818:	4770      	bx	lr
   1681a:	46c0      	nop			; (mov r8, r8)
   1681c:	20003b10 	.word	0x20003b10
   16820:	00002ed8 	.word	0x00002ed8

00016824 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   16824:	b510      	push	{r4, lr}
   16826:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   16828:	4b03      	ldr	r3, [pc, #12]	; (16838 <prvIsQueueEmpty+0x14>)
   1682a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1682c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1682e:	4b03      	ldr	r3, [pc, #12]	; (1683c <prvIsQueueEmpty+0x18>)
   16830:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   16832:	4260      	negs	r0, r4
   16834:	4160      	adcs	r0, r4

	return xReturn;
}
   16836:	bd10      	pop	{r4, pc}
   16838:	000166b1 	.word	0x000166b1
   1683c:	000166c9 	.word	0x000166c9

00016840 <prvCopyDataToQueue>:
{
   16840:	b570      	push	{r4, r5, r6, lr}
   16842:	0004      	movs	r4, r0
   16844:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   16846:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   16848:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1684a:	2a00      	cmp	r2, #0
   1684c:	d10b      	bne.n	16866 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
   1684e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   16850:	6823      	ldr	r3, [r4, #0]
   16852:	4283      	cmp	r3, r0
   16854:	d104      	bne.n	16860 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   16856:	6860      	ldr	r0, [r4, #4]
   16858:	4b16      	ldr	r3, [pc, #88]	; (168b4 <prvCopyDataToQueue+0x74>)
   1685a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   1685c:	2300      	movs	r3, #0
   1685e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   16860:	3501      	adds	r5, #1
   16862:	63a5      	str	r5, [r4, #56]	; 0x38
}
   16864:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   16866:	2e00      	cmp	r6, #0
   16868:	d10e      	bne.n	16888 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1686a:	6880      	ldr	r0, [r0, #8]
   1686c:	4b12      	ldr	r3, [pc, #72]	; (168b8 <prvCopyDataToQueue+0x78>)
   1686e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   16870:	68a3      	ldr	r3, [r4, #8]
   16872:	6c22      	ldr	r2, [r4, #64]	; 0x40
   16874:	4694      	mov	ip, r2
   16876:	4463      	add	r3, ip
   16878:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   1687a:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1687c:	6862      	ldr	r2, [r4, #4]
   1687e:	4293      	cmp	r3, r2
   16880:	d3ee      	bcc.n	16860 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   16882:	6823      	ldr	r3, [r4, #0]
   16884:	60a3      	str	r3, [r4, #8]
   16886:	e7eb      	b.n	16860 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16888:	68c0      	ldr	r0, [r0, #12]
   1688a:	4b0b      	ldr	r3, [pc, #44]	; (168b8 <prvCopyDataToQueue+0x78>)
   1688c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1688e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16890:	425b      	negs	r3, r3
   16892:	68e2      	ldr	r2, [r4, #12]
   16894:	18d2      	adds	r2, r2, r3
   16896:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   16898:	6821      	ldr	r1, [r4, #0]
   1689a:	428a      	cmp	r2, r1
   1689c:	d203      	bcs.n	168a6 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1689e:	6862      	ldr	r2, [r4, #4]
   168a0:	4694      	mov	ip, r2
   168a2:	4463      	add	r3, ip
   168a4:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
   168a6:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
   168a8:	2e02      	cmp	r6, #2
   168aa:	d1d9      	bne.n	16860 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   168ac:	4285      	cmp	r5, r0
   168ae:	d0d7      	beq.n	16860 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
   168b0:	3d01      	subs	r5, #1
   168b2:	e7d5      	b.n	16860 <prvCopyDataToQueue+0x20>
   168b4:	00018775 	.word	0x00018775
   168b8:	0002621d 	.word	0x0002621d

000168bc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   168bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   168be:	46ce      	mov	lr, r9
   168c0:	4647      	mov	r7, r8
   168c2:	b580      	push	{r7, lr}
   168c4:	b083      	sub	sp, #12
   168c6:	9001      	str	r0, [sp, #4]
   168c8:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   168ca:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   168cc:	2c00      	cmp	r4, #0
   168ce:	d005      	beq.n	168dc <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   168d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   168d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   168d4:	429a      	cmp	r2, r3
   168d6:	d303      	bcc.n	168e0 <prvNotifyQueueSetContainer+0x24>
   168d8:	b672      	cpsid	i
   168da:	e7fe      	b.n	168da <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
   168dc:	b672      	cpsid	i
   168de:	e7fe      	b.n	168de <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   168e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
   168e2:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   168e4:	4293      	cmp	r3, r2
   168e6:	d805      	bhi.n	168f4 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
   168e8:	0030      	movs	r0, r6
   168ea:	b003      	add	sp, #12
   168ec:	bc0c      	pop	{r2, r3}
   168ee:	4690      	mov	r8, r2
   168f0:	4699      	mov	r9, r3
   168f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   168f4:	2345      	movs	r3, #69	; 0x45
   168f6:	5ce5      	ldrb	r5, [r4, r3]
   168f8:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
   168fa:	4b2c      	ldr	r3, [pc, #176]	; (169ac <prvNotifyQueueSetContainer+0xf0>)
   168fc:	4798      	blx	r3
   168fe:	4b2c      	ldr	r3, [pc, #176]	; (169b0 <prvNotifyQueueSetContainer+0xf4>)
   16900:	4798      	blx	r3
   16902:	4b2c      	ldr	r3, [pc, #176]	; (169b4 <prvNotifyQueueSetContainer+0xf8>)
   16904:	881b      	ldrh	r3, [r3, #0]
   16906:	4203      	tst	r3, r0
   16908:	d01e      	beq.n	16948 <prvNotifyQueueSetContainer+0x8c>
   1690a:	0020      	movs	r0, r4
   1690c:	4b2a      	ldr	r3, [pc, #168]	; (169b8 <prvNotifyQueueSetContainer+0xfc>)
   1690e:	4798      	blx	r3
   16910:	4b28      	ldr	r3, [pc, #160]	; (169b4 <prvNotifyQueueSetContainer+0xf8>)
   16912:	881b      	ldrh	r3, [r3, #0]
   16914:	4203      	tst	r3, r0
   16916:	d017      	beq.n	16948 <prvNotifyQueueSetContainer+0x8c>
   16918:	3625      	adds	r6, #37	; 0x25
   1691a:	9b00      	ldr	r3, [sp, #0]
   1691c:	2b00      	cmp	r3, #0
   1691e:	d106      	bne.n	1692e <prvNotifyQueueSetContainer+0x72>
   16920:	0020      	movs	r0, r4
   16922:	4b26      	ldr	r3, [pc, #152]	; (169bc <prvNotifyQueueSetContainer+0x100>)
   16924:	4798      	blx	r3
   16926:	4b26      	ldr	r3, [pc, #152]	; (169c0 <prvNotifyQueueSetContainer+0x104>)
   16928:	5c1e      	ldrb	r6, [r3, r0]
   1692a:	3620      	adds	r6, #32
   1692c:	b2f6      	uxtb	r6, r6
   1692e:	0020      	movs	r0, r4
   16930:	4b22      	ldr	r3, [pc, #136]	; (169bc <prvNotifyQueueSetContainer+0x100>)
   16932:	4798      	blx	r3
   16934:	4b22      	ldr	r3, [pc, #136]	; (169c0 <prvNotifyQueueSetContainer+0x104>)
   16936:	5c1f      	ldrb	r7, [r3, r0]
   16938:	0020      	movs	r0, r4
   1693a:	4b22      	ldr	r3, [pc, #136]	; (169c4 <prvNotifyQueueSetContainer+0x108>)
   1693c:	4798      	blx	r3
   1693e:	b2c2      	uxtb	r2, r0
   16940:	0039      	movs	r1, r7
   16942:	0030      	movs	r0, r6
   16944:	4b20      	ldr	r3, [pc, #128]	; (169c8 <prvNotifyQueueSetContainer+0x10c>)
   16946:	4798      	blx	r3
   16948:	0020      	movs	r0, r4
   1694a:	4f1c      	ldr	r7, [pc, #112]	; (169bc <prvNotifyQueueSetContainer+0x100>)
   1694c:	47b8      	blx	r7
   1694e:	4e1c      	ldr	r6, [pc, #112]	; (169c0 <prvNotifyQueueSetContainer+0x104>)
   16950:	5c33      	ldrb	r3, [r6, r0]
   16952:	4698      	mov	r8, r3
   16954:	0020      	movs	r0, r4
   16956:	4b1b      	ldr	r3, [pc, #108]	; (169c4 <prvNotifyQueueSetContainer+0x108>)
   16958:	4798      	blx	r3
   1695a:	b2c3      	uxtb	r3, r0
   1695c:	4699      	mov	r9, r3
   1695e:	0020      	movs	r0, r4
   16960:	47b8      	blx	r7
   16962:	5c33      	ldrb	r3, [r6, r0]
   16964:	2b02      	cmp	r3, #2
   16966:	d019      	beq.n	1699c <prvNotifyQueueSetContainer+0xe0>
   16968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1696a:	3201      	adds	r2, #1
   1696c:	b2d2      	uxtb	r2, r2
   1696e:	4649      	mov	r1, r9
   16970:	4640      	mov	r0, r8
   16972:	4b16      	ldr	r3, [pc, #88]	; (169cc <prvNotifyQueueSetContainer+0x110>)
   16974:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   16976:	9a00      	ldr	r2, [sp, #0]
   16978:	a901      	add	r1, sp, #4
   1697a:	0020      	movs	r0, r4
   1697c:	4b14      	ldr	r3, [pc, #80]	; (169d0 <prvNotifyQueueSetContainer+0x114>)
   1697e:	4798      	blx	r3
   16980:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
   16982:	1c6b      	adds	r3, r5, #1
   16984:	d10c      	bne.n	169a0 <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   16986:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16988:	2b00      	cmp	r3, #0
   1698a:	d0ad      	beq.n	168e8 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1698c:	0020      	movs	r0, r4
   1698e:	3024      	adds	r0, #36	; 0x24
   16990:	4b10      	ldr	r3, [pc, #64]	; (169d4 <prvNotifyQueueSetContainer+0x118>)
   16992:	4798      	blx	r3
   16994:	2800      	cmp	r0, #0
   16996:	d0a7      	beq.n	168e8 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
   16998:	2601      	movs	r6, #1
   1699a:	e7a5      	b.n	168e8 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
   1699c:	2200      	movs	r2, #0
   1699e:	e7e6      	b.n	1696e <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   169a0:	3501      	adds	r5, #1
   169a2:	b26d      	sxtb	r5, r5
   169a4:	2345      	movs	r3, #69	; 0x45
   169a6:	54e5      	strb	r5, [r4, r3]
   169a8:	e79e      	b.n	168e8 <prvNotifyQueueSetContainer+0x2c>
   169aa:	46c0      	nop			; (mov r8, r8)
   169ac:	000154b1 	.word	0x000154b1
   169b0:	000152fd 	.word	0x000152fd
   169b4:	200000c0 	.word	0x200000c0
   169b8:	00015361 	.word	0x00015361
   169bc:	000152e1 	.word	0x000152e1
   169c0:	200000b8 	.word	0x200000b8
   169c4:	00015351 	.word	0x00015351
   169c8:	00016135 	.word	0x00016135
   169cc:	00015c09 	.word	0x00015c09
   169d0:	00016841 	.word	0x00016841
   169d4:	00018479 	.word	0x00018479

000169d8 <prvCopyDataFromQueue>:
{
   169d8:	b510      	push	{r4, lr}
   169da:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   169dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
   169de:	2a00      	cmp	r2, #0
   169e0:	d00b      	beq.n	169fa <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   169e2:	68c3      	ldr	r3, [r0, #12]
   169e4:	189b      	adds	r3, r3, r2
   169e6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   169e8:	6841      	ldr	r1, [r0, #4]
   169ea:	428b      	cmp	r3, r1
   169ec:	d301      	bcc.n	169f2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   169ee:	6803      	ldr	r3, [r0, #0]
   169f0:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   169f2:	68c1      	ldr	r1, [r0, #12]
   169f4:	0020      	movs	r0, r4
   169f6:	4b01      	ldr	r3, [pc, #4]	; (169fc <prvCopyDataFromQueue+0x24>)
   169f8:	4798      	blx	r3
}
   169fa:	bd10      	pop	{r4, pc}
   169fc:	0002621d 	.word	0x0002621d

00016a00 <prvUnlockQueue>:
{
   16a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a02:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
   16a04:	4b25      	ldr	r3, [pc, #148]	; (16a9c <prvUnlockQueue+0x9c>)
   16a06:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   16a08:	2345      	movs	r3, #69	; 0x45
   16a0a:	5cfc      	ldrb	r4, [r7, r3]
   16a0c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16a0e:	2c00      	cmp	r4, #0
   16a10:	dd1c      	ble.n	16a4c <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16a12:	4e23      	ldr	r6, [pc, #140]	; (16aa0 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16a14:	4d23      	ldr	r5, [pc, #140]	; (16aa4 <prvUnlockQueue+0xa4>)
   16a16:	e00b      	b.n	16a30 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d016      	beq.n	16a4c <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16a1e:	0038      	movs	r0, r7
   16a20:	3024      	adds	r0, #36	; 0x24
   16a22:	47a8      	blx	r5
   16a24:	2800      	cmp	r0, #0
   16a26:	d10e      	bne.n	16a46 <prvUnlockQueue+0x46>
   16a28:	3c01      	subs	r4, #1
   16a2a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16a2c:	2c00      	cmp	r4, #0
   16a2e:	d00d      	beq.n	16a4c <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
   16a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16a32:	2b00      	cmp	r3, #0
   16a34:	d0f0      	beq.n	16a18 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16a36:	2100      	movs	r1, #0
   16a38:	0038      	movs	r0, r7
   16a3a:	47b0      	blx	r6
   16a3c:	2800      	cmp	r0, #0
   16a3e:	d0f3      	beq.n	16a28 <prvUnlockQueue+0x28>
						vTaskMissedYield();
   16a40:	4b19      	ldr	r3, [pc, #100]	; (16aa8 <prvUnlockQueue+0xa8>)
   16a42:	4798      	blx	r3
   16a44:	e7f0      	b.n	16a28 <prvUnlockQueue+0x28>
							vTaskMissedYield();
   16a46:	4b18      	ldr	r3, [pc, #96]	; (16aa8 <prvUnlockQueue+0xa8>)
   16a48:	4798      	blx	r3
   16a4a:	e7ed      	b.n	16a28 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
   16a4c:	22ff      	movs	r2, #255	; 0xff
   16a4e:	2345      	movs	r3, #69	; 0x45
   16a50:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   16a52:	4b16      	ldr	r3, [pc, #88]	; (16aac <prvUnlockQueue+0xac>)
   16a54:	4798      	blx	r3
	taskENTER_CRITICAL();
   16a56:	4b11      	ldr	r3, [pc, #68]	; (16a9c <prvUnlockQueue+0x9c>)
   16a58:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   16a5a:	2344      	movs	r3, #68	; 0x44
   16a5c:	5cfc      	ldrb	r4, [r7, r3]
   16a5e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16a60:	2c00      	cmp	r4, #0
   16a62:	dd14      	ble.n	16a8e <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16a64:	693b      	ldr	r3, [r7, #16]
   16a66:	2b00      	cmp	r3, #0
   16a68:	d011      	beq.n	16a8e <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16a6a:	003d      	movs	r5, r7
   16a6c:	3510      	adds	r5, #16
   16a6e:	4e0d      	ldr	r6, [pc, #52]	; (16aa4 <prvUnlockQueue+0xa4>)
   16a70:	e006      	b.n	16a80 <prvUnlockQueue+0x80>
   16a72:	3c01      	subs	r4, #1
   16a74:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16a76:	2c00      	cmp	r4, #0
   16a78:	d009      	beq.n	16a8e <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16a7a:	693b      	ldr	r3, [r7, #16]
   16a7c:	2b00      	cmp	r3, #0
   16a7e:	d006      	beq.n	16a8e <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16a80:	0028      	movs	r0, r5
   16a82:	47b0      	blx	r6
   16a84:	2800      	cmp	r0, #0
   16a86:	d0f4      	beq.n	16a72 <prvUnlockQueue+0x72>
					vTaskMissedYield();
   16a88:	4b07      	ldr	r3, [pc, #28]	; (16aa8 <prvUnlockQueue+0xa8>)
   16a8a:	4798      	blx	r3
   16a8c:	e7f1      	b.n	16a72 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
   16a8e:	22ff      	movs	r2, #255	; 0xff
   16a90:	2344      	movs	r3, #68	; 0x44
   16a92:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   16a94:	4b05      	ldr	r3, [pc, #20]	; (16aac <prvUnlockQueue+0xac>)
   16a96:	4798      	blx	r3
}
   16a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a9a:	46c0      	nop			; (mov r8, r8)
   16a9c:	000166b1 	.word	0x000166b1
   16aa0:	000168bd 	.word	0x000168bd
   16aa4:	00018479 	.word	0x00018479
   16aa8:	000185e5 	.word	0x000185e5
   16aac:	000166c9 	.word	0x000166c9

00016ab0 <xQueueGenericReset>:
{
   16ab0:	b570      	push	{r4, r5, r6, lr}
   16ab2:	0004      	movs	r4, r0
   16ab4:	000d      	movs	r5, r1
	configASSERT( pxQueue );
   16ab6:	2800      	cmp	r0, #0
   16ab8:	d021      	beq.n	16afe <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
   16aba:	4b17      	ldr	r3, [pc, #92]	; (16b18 <xQueueGenericReset+0x68>)
   16abc:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   16abe:	6822      	ldr	r2, [r4, #0]
   16ac0:	6c21      	ldr	r1, [r4, #64]	; 0x40
   16ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16ac4:	434b      	muls	r3, r1
   16ac6:	18d0      	adds	r0, r2, r3
   16ac8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   16aca:	2000      	movs	r0, #0
   16acc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   16ace:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   16ad0:	1a5b      	subs	r3, r3, r1
   16ad2:	18d3      	adds	r3, r2, r3
   16ad4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   16ad6:	23ff      	movs	r3, #255	; 0xff
   16ad8:	2244      	movs	r2, #68	; 0x44
   16ada:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   16adc:	3201      	adds	r2, #1
   16ade:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
   16ae0:	2d00      	cmp	r5, #0
   16ae2:	d111      	bne.n	16b08 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16ae4:	6923      	ldr	r3, [r4, #16]
   16ae6:	2b00      	cmp	r3, #0
   16ae8:	d005      	beq.n	16af6 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16aea:	0020      	movs	r0, r4
   16aec:	3010      	adds	r0, #16
   16aee:	4b0b      	ldr	r3, [pc, #44]	; (16b1c <xQueueGenericReset+0x6c>)
   16af0:	4798      	blx	r3
   16af2:	2800      	cmp	r0, #0
   16af4:	d105      	bne.n	16b02 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
   16af6:	4b0a      	ldr	r3, [pc, #40]	; (16b20 <xQueueGenericReset+0x70>)
   16af8:	4798      	blx	r3
}
   16afa:	2001      	movs	r0, #1
   16afc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
   16afe:	b672      	cpsid	i
   16b00:	e7fe      	b.n	16b00 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
   16b02:	4b08      	ldr	r3, [pc, #32]	; (16b24 <xQueueGenericReset+0x74>)
   16b04:	4798      	blx	r3
   16b06:	e7f6      	b.n	16af6 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   16b08:	0020      	movs	r0, r4
   16b0a:	3010      	adds	r0, #16
   16b0c:	4d06      	ldr	r5, [pc, #24]	; (16b28 <xQueueGenericReset+0x78>)
   16b0e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   16b10:	0020      	movs	r0, r4
   16b12:	3024      	adds	r0, #36	; 0x24
   16b14:	47a8      	blx	r5
   16b16:	e7ee      	b.n	16af6 <xQueueGenericReset+0x46>
   16b18:	000166b1 	.word	0x000166b1
   16b1c:	00018479 	.word	0x00018479
   16b20:	000166c9 	.word	0x000166c9
   16b24:	000166a1 	.word	0x000166a1
   16b28:	00016519 	.word	0x00016519

00016b2c <xQueueGenericCreate>:
	{
   16b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b2e:	0006      	movs	r6, r0
   16b30:	000d      	movs	r5, r1
   16b32:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   16b34:	2800      	cmp	r0, #0
   16b36:	d101      	bne.n	16b3c <xQueueGenericCreate+0x10>
   16b38:	b672      	cpsid	i
   16b3a:	e7fe      	b.n	16b3a <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16b3c:	0008      	movs	r0, r1
   16b3e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   16b40:	3054      	adds	r0, #84	; 0x54
   16b42:	4b38      	ldr	r3, [pc, #224]	; (16c24 <xQueueGenericCreate+0xf8>)
   16b44:	4798      	blx	r3
   16b46:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16b48:	d05b      	beq.n	16c02 <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
   16b4a:	2d00      	cmp	r5, #0
   16b4c:	d13b      	bne.n	16bc6 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   16b4e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   16b50:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   16b52:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   16b54:	2101      	movs	r1, #1
   16b56:	0020      	movs	r0, r4
   16b58:	4b33      	ldr	r3, [pc, #204]	; (16c28 <xQueueGenericCreate+0xfc>)
   16b5a:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   16b5c:	2350      	movs	r3, #80	; 0x50
   16b5e:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
   16b60:	2300      	movs	r3, #0
   16b62:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
   16b64:	0020      	movs	r0, r4
   16b66:	4e31      	ldr	r6, [pc, #196]	; (16c2c <xQueueGenericCreate+0x100>)
   16b68:	47b0      	blx	r6
   16b6a:	4d31      	ldr	r5, [pc, #196]	; (16c30 <xQueueGenericCreate+0x104>)
   16b6c:	5c28      	ldrb	r0, [r5, r0]
   16b6e:	4b31      	ldr	r3, [pc, #196]	; (16c34 <xQueueGenericCreate+0x108>)
   16b70:	4798      	blx	r3
   16b72:	b281      	uxth	r1, r0
   16b74:	0020      	movs	r0, r4
   16b76:	4b30      	ldr	r3, [pc, #192]	; (16c38 <xQueueGenericCreate+0x10c>)
   16b78:	4798      	blx	r3
   16b7a:	4b30      	ldr	r3, [pc, #192]	; (16c3c <xQueueGenericCreate+0x110>)
   16b7c:	8819      	ldrh	r1, [r3, #0]
   16b7e:	0020      	movs	r0, r4
   16b80:	4b2f      	ldr	r3, [pc, #188]	; (16c40 <xQueueGenericCreate+0x114>)
   16b82:	4798      	blx	r3
   16b84:	0020      	movs	r0, r4
   16b86:	47b0      	blx	r6
   16b88:	5c2d      	ldrb	r5, [r5, r0]
   16b8a:	0020      	movs	r0, r4
   16b8c:	4b2d      	ldr	r3, [pc, #180]	; (16c44 <xQueueGenericCreate+0x118>)
   16b8e:	4798      	blx	r3
   16b90:	b2c1      	uxtb	r1, r0
   16b92:	0028      	movs	r0, r5
   16b94:	4b2c      	ldr	r3, [pc, #176]	; (16c48 <xQueueGenericCreate+0x11c>)
   16b96:	4798      	blx	r3
   16b98:	4b2c      	ldr	r3, [pc, #176]	; (16c4c <xQueueGenericCreate+0x120>)
   16b9a:	4798      	blx	r3
   16b9c:	4b2c      	ldr	r3, [pc, #176]	; (16c50 <xQueueGenericCreate+0x124>)
   16b9e:	4798      	blx	r3
   16ba0:	4b2c      	ldr	r3, [pc, #176]	; (16c54 <xQueueGenericCreate+0x128>)
   16ba2:	881b      	ldrh	r3, [r3, #0]
   16ba4:	4203      	tst	r3, r0
   16ba6:	d112      	bne.n	16bce <xQueueGenericCreate+0xa2>
   16ba8:	0020      	movs	r0, r4
   16baa:	4b20      	ldr	r3, [pc, #128]	; (16c2c <xQueueGenericCreate+0x100>)
   16bac:	4798      	blx	r3
   16bae:	4b20      	ldr	r3, [pc, #128]	; (16c30 <xQueueGenericCreate+0x104>)
   16bb0:	5c1d      	ldrb	r5, [r3, r0]
   16bb2:	0020      	movs	r0, r4
   16bb4:	4b23      	ldr	r3, [pc, #140]	; (16c44 <xQueueGenericCreate+0x118>)
   16bb6:	4798      	blx	r3
   16bb8:	b2c1      	uxtb	r1, r0
   16bba:	2200      	movs	r2, #0
   16bbc:	0028      	movs	r0, r5
   16bbe:	4b26      	ldr	r3, [pc, #152]	; (16c58 <xQueueGenericCreate+0x12c>)
   16bc0:	4798      	blx	r3
	}
   16bc2:	0020      	movs	r0, r4
   16bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   16bc6:	0003      	movs	r3, r0
   16bc8:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   16bca:	6003      	str	r3, [r0, #0]
   16bcc:	e7c0      	b.n	16b50 <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
   16bce:	0020      	movs	r0, r4
   16bd0:	4b22      	ldr	r3, [pc, #136]	; (16c5c <xQueueGenericCreate+0x130>)
   16bd2:	4798      	blx	r3
   16bd4:	4b1f      	ldr	r3, [pc, #124]	; (16c54 <xQueueGenericCreate+0x128>)
   16bd6:	881b      	ldrh	r3, [r3, #0]
   16bd8:	4203      	tst	r3, r0
   16bda:	d0e5      	beq.n	16ba8 <xQueueGenericCreate+0x7c>
   16bdc:	0020      	movs	r0, r4
   16bde:	4f13      	ldr	r7, [pc, #76]	; (16c2c <xQueueGenericCreate+0x100>)
   16be0:	47b8      	blx	r7
   16be2:	4e13      	ldr	r6, [pc, #76]	; (16c30 <xQueueGenericCreate+0x104>)
   16be4:	5c35      	ldrb	r5, [r6, r0]
   16be6:	3518      	adds	r5, #24
   16be8:	b2ed      	uxtb	r5, r5
   16bea:	0020      	movs	r0, r4
   16bec:	47b8      	blx	r7
   16bee:	5c36      	ldrb	r6, [r6, r0]
   16bf0:	0020      	movs	r0, r4
   16bf2:	4b14      	ldr	r3, [pc, #80]	; (16c44 <xQueueGenericCreate+0x118>)
   16bf4:	4798      	blx	r3
   16bf6:	b2c2      	uxtb	r2, r0
   16bf8:	0031      	movs	r1, r6
   16bfa:	0028      	movs	r0, r5
   16bfc:	4b18      	ldr	r3, [pc, #96]	; (16c60 <xQueueGenericCreate+0x134>)
   16bfe:	4798      	blx	r3
   16c00:	e7d2      	b.n	16ba8 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
   16c02:	4b12      	ldr	r3, [pc, #72]	; (16c4c <xQueueGenericCreate+0x120>)
   16c04:	4798      	blx	r3
   16c06:	4b12      	ldr	r3, [pc, #72]	; (16c50 <xQueueGenericCreate+0x124>)
   16c08:	4798      	blx	r3
   16c0a:	4b12      	ldr	r3, [pc, #72]	; (16c54 <xQueueGenericCreate+0x128>)
   16c0c:	881b      	ldrh	r3, [r3, #0]
   16c0e:	4203      	tst	r3, r0
   16c10:	d0d7      	beq.n	16bc2 <xQueueGenericCreate+0x96>
   16c12:	4b07      	ldr	r3, [pc, #28]	; (16c30 <xQueueGenericCreate+0x104>)
   16c14:	5dd8      	ldrb	r0, [r3, r7]
   16c16:	3040      	adds	r0, #64	; 0x40
   16c18:	b2c0      	uxtb	r0, r0
   16c1a:	2100      	movs	r1, #0
   16c1c:	4b11      	ldr	r3, [pc, #68]	; (16c64 <xQueueGenericCreate+0x138>)
   16c1e:	4798      	blx	r3
   16c20:	e7cf      	b.n	16bc2 <xQueueGenericCreate+0x96>
   16c22:	46c0      	nop			; (mov r8, r8)
   16c24:	00016775 	.word	0x00016775
   16c28:	00016ab1 	.word	0x00016ab1
   16c2c:	000152e1 	.word	0x000152e1
   16c30:	200000b8 	.word	0x200000b8
   16c34:	00015ca1 	.word	0x00015ca1
   16c38:	00015371 	.word	0x00015371
   16c3c:	200000be 	.word	0x200000be
   16c40:	00015391 	.word	0x00015391
   16c44:	00015351 	.word	0x00015351
   16c48:	00015b31 	.word	0x00015b31
   16c4c:	000154b1 	.word	0x000154b1
   16c50:	000152fd 	.word	0x000152fd
   16c54:	200000c0 	.word	0x200000c0
   16c58:	00015c09 	.word	0x00015c09
   16c5c:	00015361 	.word	0x00015361
   16c60:	00016135 	.word	0x00016135
   16c64:	000162d1 	.word	0x000162d1

00016c68 <xQueueGenericSend>:
{
   16c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c6a:	46ce      	mov	lr, r9
   16c6c:	4647      	mov	r7, r8
   16c6e:	b580      	push	{r7, lr}
   16c70:	b085      	sub	sp, #20
   16c72:	0004      	movs	r4, r0
   16c74:	9100      	str	r1, [sp, #0]
   16c76:	9201      	str	r2, [sp, #4]
   16c78:	001d      	movs	r5, r3
	configASSERT( pxQueue );
   16c7a:	2800      	cmp	r0, #0
   16c7c:	d00d      	beq.n	16c9a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16c7e:	9b00      	ldr	r3, [sp, #0]
   16c80:	2b00      	cmp	r3, #0
   16c82:	d00c      	beq.n	16c9e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16c84:	2d02      	cmp	r5, #2
   16c86:	d00f      	beq.n	16ca8 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   16c88:	4bab      	ldr	r3, [pc, #684]	; (16f38 <xQueueGenericSend+0x2d0>)
   16c8a:	4798      	blx	r3
   16c8c:	2800      	cmp	r0, #0
   16c8e:	d110      	bne.n	16cb2 <xQueueGenericSend+0x4a>
   16c90:	9b01      	ldr	r3, [sp, #4]
   16c92:	2b00      	cmp	r3, #0
   16c94:	d010      	beq.n	16cb8 <xQueueGenericSend+0x50>
   16c96:	b672      	cpsid	i
   16c98:	e7fe      	b.n	16c98 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
   16c9a:	b672      	cpsid	i
   16c9c:	e7fe      	b.n	16c9c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16c9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16ca0:	2b00      	cmp	r3, #0
   16ca2:	d0ef      	beq.n	16c84 <xQueueGenericSend+0x1c>
   16ca4:	b672      	cpsid	i
   16ca6:	e7fe      	b.n	16ca6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16caa:	2b01      	cmp	r3, #1
   16cac:	d0ec      	beq.n	16c88 <xQueueGenericSend+0x20>
   16cae:	b672      	cpsid	i
   16cb0:	e7fe      	b.n	16cb0 <xQueueGenericSend+0x48>
   16cb2:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   16cb4:	4ea1      	ldr	r6, [pc, #644]	; (16f3c <xQueueGenericSend+0x2d4>)
   16cb6:	e0bc      	b.n	16e32 <xQueueGenericSend+0x1ca>
   16cb8:	2700      	movs	r7, #0
   16cba:	e7fb      	b.n	16cb4 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
   16cbc:	4ba0      	ldr	r3, [pc, #640]	; (16f40 <xQueueGenericSend+0x2d8>)
   16cbe:	4798      	blx	r3
   16cc0:	4ba0      	ldr	r3, [pc, #640]	; (16f44 <xQueueGenericSend+0x2dc>)
   16cc2:	4798      	blx	r3
   16cc4:	4ba0      	ldr	r3, [pc, #640]	; (16f48 <xQueueGenericSend+0x2e0>)
   16cc6:	881b      	ldrh	r3, [r3, #0]
   16cc8:	4203      	tst	r3, r0
   16cca:	d01d      	beq.n	16d08 <xQueueGenericSend+0xa0>
   16ccc:	0020      	movs	r0, r4
   16cce:	4b9f      	ldr	r3, [pc, #636]	; (16f4c <xQueueGenericSend+0x2e4>)
   16cd0:	4798      	blx	r3
   16cd2:	4b9d      	ldr	r3, [pc, #628]	; (16f48 <xQueueGenericSend+0x2e0>)
   16cd4:	881b      	ldrh	r3, [r3, #0]
   16cd6:	4203      	tst	r3, r0
   16cd8:	d016      	beq.n	16d08 <xQueueGenericSend+0xa0>
   16cda:	2725      	movs	r7, #37	; 0x25
   16cdc:	2d00      	cmp	r5, #0
   16cde:	d106      	bne.n	16cee <xQueueGenericSend+0x86>
   16ce0:	0020      	movs	r0, r4
   16ce2:	4b9b      	ldr	r3, [pc, #620]	; (16f50 <xQueueGenericSend+0x2e8>)
   16ce4:	4798      	blx	r3
   16ce6:	4b9b      	ldr	r3, [pc, #620]	; (16f54 <xQueueGenericSend+0x2ec>)
   16ce8:	5c1f      	ldrb	r7, [r3, r0]
   16cea:	3720      	adds	r7, #32
   16cec:	b2ff      	uxtb	r7, r7
   16cee:	0020      	movs	r0, r4
   16cf0:	4b97      	ldr	r3, [pc, #604]	; (16f50 <xQueueGenericSend+0x2e8>)
   16cf2:	4798      	blx	r3
   16cf4:	4b97      	ldr	r3, [pc, #604]	; (16f54 <xQueueGenericSend+0x2ec>)
   16cf6:	5c1e      	ldrb	r6, [r3, r0]
   16cf8:	0020      	movs	r0, r4
   16cfa:	4b97      	ldr	r3, [pc, #604]	; (16f58 <xQueueGenericSend+0x2f0>)
   16cfc:	4798      	blx	r3
   16cfe:	b2c2      	uxtb	r2, r0
   16d00:	0031      	movs	r1, r6
   16d02:	0038      	movs	r0, r7
   16d04:	4b95      	ldr	r3, [pc, #596]	; (16f5c <xQueueGenericSend+0x2f4>)
   16d06:	4798      	blx	r3
   16d08:	0020      	movs	r0, r4
   16d0a:	4e91      	ldr	r6, [pc, #580]	; (16f50 <xQueueGenericSend+0x2e8>)
   16d0c:	47b0      	blx	r6
   16d0e:	4f91      	ldr	r7, [pc, #580]	; (16f54 <xQueueGenericSend+0x2ec>)
   16d10:	5c3b      	ldrb	r3, [r7, r0]
   16d12:	4698      	mov	r8, r3
   16d14:	0020      	movs	r0, r4
   16d16:	4b90      	ldr	r3, [pc, #576]	; (16f58 <xQueueGenericSend+0x2f0>)
   16d18:	4798      	blx	r3
   16d1a:	b2c3      	uxtb	r3, r0
   16d1c:	4699      	mov	r9, r3
   16d1e:	0020      	movs	r0, r4
   16d20:	47b0      	blx	r6
   16d22:	5c3b      	ldrb	r3, [r7, r0]
   16d24:	2b02      	cmp	r3, #2
   16d26:	d01f      	beq.n	16d68 <xQueueGenericSend+0x100>
   16d28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16d2a:	3201      	adds	r2, #1
   16d2c:	b2d2      	uxtb	r2, r2
   16d2e:	4649      	mov	r1, r9
   16d30:	4640      	mov	r0, r8
   16d32:	4b8b      	ldr	r3, [pc, #556]	; (16f60 <xQueueGenericSend+0x2f8>)
   16d34:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   16d36:	002a      	movs	r2, r5
   16d38:	9900      	ldr	r1, [sp, #0]
   16d3a:	0020      	movs	r0, r4
   16d3c:	4b89      	ldr	r3, [pc, #548]	; (16f64 <xQueueGenericSend+0x2fc>)
   16d3e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
   16d40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16d42:	2b00      	cmp	r3, #0
   16d44:	d012      	beq.n	16d6c <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   16d46:	0029      	movs	r1, r5
   16d48:	0020      	movs	r0, r4
   16d4a:	4b87      	ldr	r3, [pc, #540]	; (16f68 <xQueueGenericSend+0x300>)
   16d4c:	4798      	blx	r3
   16d4e:	2800      	cmp	r0, #0
   16d50:	d001      	beq.n	16d56 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16d52:	4b86      	ldr	r3, [pc, #536]	; (16f6c <xQueueGenericSend+0x304>)
   16d54:	4798      	blx	r3
				taskEXIT_CRITICAL();
   16d56:	4b86      	ldr	r3, [pc, #536]	; (16f70 <xQueueGenericSend+0x308>)
   16d58:	4798      	blx	r3
				return pdPASS;
   16d5a:	2301      	movs	r3, #1
}
   16d5c:	0018      	movs	r0, r3
   16d5e:	b005      	add	sp, #20
   16d60:	bc0c      	pop	{r2, r3}
   16d62:	4690      	mov	r8, r2
   16d64:	4699      	mov	r9, r3
   16d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
   16d68:	2200      	movs	r2, #0
   16d6a:	e7e0      	b.n	16d2e <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16d6e:	2b00      	cmp	r3, #0
   16d70:	d008      	beq.n	16d84 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16d72:	0020      	movs	r0, r4
   16d74:	3024      	adds	r0, #36	; 0x24
   16d76:	4b7f      	ldr	r3, [pc, #508]	; (16f74 <xQueueGenericSend+0x30c>)
   16d78:	4798      	blx	r3
   16d7a:	2800      	cmp	r0, #0
   16d7c:	d0eb      	beq.n	16d56 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
   16d7e:	4b7b      	ldr	r3, [pc, #492]	; (16f6c <xQueueGenericSend+0x304>)
   16d80:	4798      	blx	r3
   16d82:	e7e8      	b.n	16d56 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
   16d84:	2800      	cmp	r0, #0
   16d86:	d0e6      	beq.n	16d56 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16d88:	4b78      	ldr	r3, [pc, #480]	; (16f6c <xQueueGenericSend+0x304>)
   16d8a:	4798      	blx	r3
   16d8c:	e7e3      	b.n	16d56 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
   16d8e:	4b78      	ldr	r3, [pc, #480]	; (16f70 <xQueueGenericSend+0x308>)
   16d90:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
   16d92:	4b6b      	ldr	r3, [pc, #428]	; (16f40 <xQueueGenericSend+0x2d8>)
   16d94:	4798      	blx	r3
   16d96:	4b6b      	ldr	r3, [pc, #428]	; (16f44 <xQueueGenericSend+0x2dc>)
   16d98:	4798      	blx	r3
   16d9a:	4b6b      	ldr	r3, [pc, #428]	; (16f48 <xQueueGenericSend+0x2e0>)
   16d9c:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16d9e:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16da0:	4202      	tst	r2, r0
   16da2:	d0db      	beq.n	16d5c <xQueueGenericSend+0xf4>
   16da4:	0020      	movs	r0, r4
   16da6:	4b69      	ldr	r3, [pc, #420]	; (16f4c <xQueueGenericSend+0x2e4>)
   16da8:	4798      	blx	r3
   16daa:	4b67      	ldr	r3, [pc, #412]	; (16f48 <xQueueGenericSend+0x2e0>)
   16dac:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16dae:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16db0:	4202      	tst	r2, r0
   16db2:	d0d3      	beq.n	16d5c <xQueueGenericSend+0xf4>
   16db4:	264d      	movs	r6, #77	; 0x4d
   16db6:	2d00      	cmp	r5, #0
   16db8:	d106      	bne.n	16dc8 <xQueueGenericSend+0x160>
   16dba:	0020      	movs	r0, r4
   16dbc:	4b64      	ldr	r3, [pc, #400]	; (16f50 <xQueueGenericSend+0x2e8>)
   16dbe:	4798      	blx	r3
   16dc0:	4b64      	ldr	r3, [pc, #400]	; (16f54 <xQueueGenericSend+0x2ec>)
   16dc2:	5c1e      	ldrb	r6, [r3, r0]
   16dc4:	3648      	adds	r6, #72	; 0x48
   16dc6:	b2f6      	uxtb	r6, r6
   16dc8:	0020      	movs	r0, r4
   16dca:	4b61      	ldr	r3, [pc, #388]	; (16f50 <xQueueGenericSend+0x2e8>)
   16dcc:	4798      	blx	r3
   16dce:	4b61      	ldr	r3, [pc, #388]	; (16f54 <xQueueGenericSend+0x2ec>)
   16dd0:	5c1d      	ldrb	r5, [r3, r0]
   16dd2:	0020      	movs	r0, r4
   16dd4:	4b60      	ldr	r3, [pc, #384]	; (16f58 <xQueueGenericSend+0x2f0>)
   16dd6:	4798      	blx	r3
   16dd8:	b2c2      	uxtb	r2, r0
   16dda:	0029      	movs	r1, r5
   16ddc:	0030      	movs	r0, r6
   16dde:	4b5f      	ldr	r3, [pc, #380]	; (16f5c <xQueueGenericSend+0x2f4>)
   16de0:	4798      	blx	r3
					return errQUEUE_FULL;
   16de2:	2300      	movs	r3, #0
   16de4:	e7ba      	b.n	16d5c <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
   16de6:	4b62      	ldr	r3, [pc, #392]	; (16f70 <xQueueGenericSend+0x308>)
   16de8:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   16dea:	a901      	add	r1, sp, #4
   16dec:	a802      	add	r0, sp, #8
   16dee:	4b62      	ldr	r3, [pc, #392]	; (16f78 <xQueueGenericSend+0x310>)
   16df0:	4798      	blx	r3
   16df2:	2800      	cmp	r0, #0
   16df4:	d16e      	bne.n	16ed4 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
   16df6:	4b51      	ldr	r3, [pc, #324]	; (16f3c <xQueueGenericSend+0x2d4>)
   16df8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   16dfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16dfc:	4699      	mov	r9, r3
   16dfe:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   16e00:	4b5b      	ldr	r3, [pc, #364]	; (16f70 <xQueueGenericSend+0x308>)
   16e02:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   16e04:	45b9      	cmp	r9, r7
   16e06:	d15f      	bne.n	16ec8 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16e08:	4b4d      	ldr	r3, [pc, #308]	; (16f40 <xQueueGenericSend+0x2d8>)
   16e0a:	4798      	blx	r3
   16e0c:	4b4d      	ldr	r3, [pc, #308]	; (16f44 <xQueueGenericSend+0x2dc>)
   16e0e:	4798      	blx	r3
   16e10:	4b4d      	ldr	r3, [pc, #308]	; (16f48 <xQueueGenericSend+0x2e0>)
   16e12:	881b      	ldrh	r3, [r3, #0]
   16e14:	4203      	tst	r3, r0
   16e16:	d134      	bne.n	16e82 <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   16e18:	0020      	movs	r0, r4
   16e1a:	3010      	adds	r0, #16
   16e1c:	9901      	ldr	r1, [sp, #4]
   16e1e:	4b57      	ldr	r3, [pc, #348]	; (16f7c <xQueueGenericSend+0x314>)
   16e20:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   16e22:	0020      	movs	r0, r4
   16e24:	4b56      	ldr	r3, [pc, #344]	; (16f80 <xQueueGenericSend+0x318>)
   16e26:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   16e28:	4b56      	ldr	r3, [pc, #344]	; (16f84 <xQueueGenericSend+0x31c>)
   16e2a:	4798      	blx	r3
   16e2c:	2800      	cmp	r0, #0
   16e2e:	d048      	beq.n	16ec2 <xQueueGenericSend+0x25a>
   16e30:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   16e32:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16e34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16e36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16e38:	4293      	cmp	r3, r2
   16e3a:	d200      	bcs.n	16e3e <xQueueGenericSend+0x1d6>
   16e3c:	e73e      	b.n	16cbc <xQueueGenericSend+0x54>
   16e3e:	2d02      	cmp	r5, #2
   16e40:	d100      	bne.n	16e44 <xQueueGenericSend+0x1dc>
   16e42:	e73b      	b.n	16cbc <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
   16e44:	9b01      	ldr	r3, [sp, #4]
   16e46:	2b00      	cmp	r3, #0
   16e48:	d0a1      	beq.n	16d8e <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
   16e4a:	2f00      	cmp	r7, #0
   16e4c:	d102      	bne.n	16e54 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
   16e4e:	a802      	add	r0, sp, #8
   16e50:	4b4d      	ldr	r3, [pc, #308]	; (16f88 <xQueueGenericSend+0x320>)
   16e52:	4798      	blx	r3
		taskEXIT_CRITICAL();
   16e54:	4b46      	ldr	r3, [pc, #280]	; (16f70 <xQueueGenericSend+0x308>)
   16e56:	4798      	blx	r3
		vTaskSuspendAll();
   16e58:	4b4c      	ldr	r3, [pc, #304]	; (16f8c <xQueueGenericSend+0x324>)
   16e5a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   16e5c:	4b37      	ldr	r3, [pc, #220]	; (16f3c <xQueueGenericSend+0x2d4>)
   16e5e:	4798      	blx	r3
   16e60:	2344      	movs	r3, #68	; 0x44
   16e62:	5ce3      	ldrb	r3, [r4, r3]
   16e64:	b25b      	sxtb	r3, r3
   16e66:	3301      	adds	r3, #1
   16e68:	d102      	bne.n	16e70 <xQueueGenericSend+0x208>
   16e6a:	2200      	movs	r2, #0
   16e6c:	2344      	movs	r3, #68	; 0x44
   16e6e:	54e2      	strb	r2, [r4, r3]
   16e70:	2345      	movs	r3, #69	; 0x45
   16e72:	5ce3      	ldrb	r3, [r4, r3]
   16e74:	b25b      	sxtb	r3, r3
   16e76:	3301      	adds	r3, #1
   16e78:	d1b5      	bne.n	16de6 <xQueueGenericSend+0x17e>
   16e7a:	2200      	movs	r2, #0
   16e7c:	2345      	movs	r3, #69	; 0x45
   16e7e:	54e2      	strb	r2, [r4, r3]
   16e80:	e7b1      	b.n	16de6 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16e82:	0020      	movs	r0, r4
   16e84:	4b31      	ldr	r3, [pc, #196]	; (16f4c <xQueueGenericSend+0x2e4>)
   16e86:	4798      	blx	r3
   16e88:	4b2f      	ldr	r3, [pc, #188]	; (16f48 <xQueueGenericSend+0x2e0>)
   16e8a:	881b      	ldrh	r3, [r3, #0]
   16e8c:	4203      	tst	r3, r0
   16e8e:	d0c3      	beq.n	16e18 <xQueueGenericSend+0x1b0>
   16e90:	2775      	movs	r7, #117	; 0x75
   16e92:	2d00      	cmp	r5, #0
   16e94:	d106      	bne.n	16ea4 <xQueueGenericSend+0x23c>
   16e96:	0020      	movs	r0, r4
   16e98:	4b2d      	ldr	r3, [pc, #180]	; (16f50 <xQueueGenericSend+0x2e8>)
   16e9a:	4798      	blx	r3
   16e9c:	4b2d      	ldr	r3, [pc, #180]	; (16f54 <xQueueGenericSend+0x2ec>)
   16e9e:	5c1f      	ldrb	r7, [r3, r0]
   16ea0:	3770      	adds	r7, #112	; 0x70
   16ea2:	b2ff      	uxtb	r7, r7
   16ea4:	0020      	movs	r0, r4
   16ea6:	4b2a      	ldr	r3, [pc, #168]	; (16f50 <xQueueGenericSend+0x2e8>)
   16ea8:	4798      	blx	r3
   16eaa:	4b2a      	ldr	r3, [pc, #168]	; (16f54 <xQueueGenericSend+0x2ec>)
   16eac:	5c1b      	ldrb	r3, [r3, r0]
   16eae:	4699      	mov	r9, r3
   16eb0:	0020      	movs	r0, r4
   16eb2:	4b29      	ldr	r3, [pc, #164]	; (16f58 <xQueueGenericSend+0x2f0>)
   16eb4:	4798      	blx	r3
   16eb6:	b2c2      	uxtb	r2, r0
   16eb8:	4649      	mov	r1, r9
   16eba:	0038      	movs	r0, r7
   16ebc:	4b27      	ldr	r3, [pc, #156]	; (16f5c <xQueueGenericSend+0x2f4>)
   16ebe:	4798      	blx	r3
   16ec0:	e7aa      	b.n	16e18 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   16ec2:	4b2a      	ldr	r3, [pc, #168]	; (16f6c <xQueueGenericSend+0x304>)
   16ec4:	4798      	blx	r3
   16ec6:	e7b3      	b.n	16e30 <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
   16ec8:	0020      	movs	r0, r4
   16eca:	4b2d      	ldr	r3, [pc, #180]	; (16f80 <xQueueGenericSend+0x318>)
   16ecc:	4798      	blx	r3
				( void ) xTaskResumeAll();
   16ece:	4b2d      	ldr	r3, [pc, #180]	; (16f84 <xQueueGenericSend+0x31c>)
   16ed0:	4798      	blx	r3
   16ed2:	e7ad      	b.n	16e30 <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
   16ed4:	0020      	movs	r0, r4
   16ed6:	4b2a      	ldr	r3, [pc, #168]	; (16f80 <xQueueGenericSend+0x318>)
   16ed8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   16eda:	4b2a      	ldr	r3, [pc, #168]	; (16f84 <xQueueGenericSend+0x31c>)
   16edc:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
   16ede:	4b18      	ldr	r3, [pc, #96]	; (16f40 <xQueueGenericSend+0x2d8>)
   16ee0:	4798      	blx	r3
   16ee2:	4b18      	ldr	r3, [pc, #96]	; (16f44 <xQueueGenericSend+0x2dc>)
   16ee4:	4798      	blx	r3
   16ee6:	4b18      	ldr	r3, [pc, #96]	; (16f48 <xQueueGenericSend+0x2e0>)
   16ee8:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16eea:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16eec:	4202      	tst	r2, r0
   16eee:	d100      	bne.n	16ef2 <xQueueGenericSend+0x28a>
   16ef0:	e734      	b.n	16d5c <xQueueGenericSend+0xf4>
   16ef2:	0020      	movs	r0, r4
   16ef4:	4b15      	ldr	r3, [pc, #84]	; (16f4c <xQueueGenericSend+0x2e4>)
   16ef6:	4798      	blx	r3
   16ef8:	4b13      	ldr	r3, [pc, #76]	; (16f48 <xQueueGenericSend+0x2e0>)
   16efa:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16efc:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16efe:	4202      	tst	r2, r0
   16f00:	d100      	bne.n	16f04 <xQueueGenericSend+0x29c>
   16f02:	e72b      	b.n	16d5c <xQueueGenericSend+0xf4>
   16f04:	264d      	movs	r6, #77	; 0x4d
   16f06:	2d00      	cmp	r5, #0
   16f08:	d106      	bne.n	16f18 <xQueueGenericSend+0x2b0>
   16f0a:	0020      	movs	r0, r4
   16f0c:	4b10      	ldr	r3, [pc, #64]	; (16f50 <xQueueGenericSend+0x2e8>)
   16f0e:	4798      	blx	r3
   16f10:	4b10      	ldr	r3, [pc, #64]	; (16f54 <xQueueGenericSend+0x2ec>)
   16f12:	5c1e      	ldrb	r6, [r3, r0]
   16f14:	3648      	adds	r6, #72	; 0x48
   16f16:	b2f6      	uxtb	r6, r6
   16f18:	0020      	movs	r0, r4
   16f1a:	4b0d      	ldr	r3, [pc, #52]	; (16f50 <xQueueGenericSend+0x2e8>)
   16f1c:	4798      	blx	r3
   16f1e:	4b0d      	ldr	r3, [pc, #52]	; (16f54 <xQueueGenericSend+0x2ec>)
   16f20:	5c1d      	ldrb	r5, [r3, r0]
   16f22:	0020      	movs	r0, r4
   16f24:	4b0c      	ldr	r3, [pc, #48]	; (16f58 <xQueueGenericSend+0x2f0>)
   16f26:	4798      	blx	r3
   16f28:	b2c2      	uxtb	r2, r0
   16f2a:	0029      	movs	r1, r5
   16f2c:	0030      	movs	r0, r6
   16f2e:	4b0b      	ldr	r3, [pc, #44]	; (16f5c <xQueueGenericSend+0x2f4>)
   16f30:	4798      	blx	r3
			return errQUEUE_FULL;
   16f32:	2300      	movs	r3, #0
   16f34:	e712      	b.n	16d5c <xQueueGenericSend+0xf4>
   16f36:	46c0      	nop			; (mov r8, r8)
   16f38:	0001863d 	.word	0x0001863d
   16f3c:	000166b1 	.word	0x000166b1
   16f40:	000154b1 	.word	0x000154b1
   16f44:	000152fd 	.word	0x000152fd
   16f48:	200000c0 	.word	0x200000c0
   16f4c:	00015361 	.word	0x00015361
   16f50:	000152e1 	.word	0x000152e1
   16f54:	200000b8 	.word	0x200000b8
   16f58:	00015351 	.word	0x00015351
   16f5c:	00016135 	.word	0x00016135
   16f60:	00015c09 	.word	0x00015c09
   16f64:	00016841 	.word	0x00016841
   16f68:	000168bd 	.word	0x000168bd
   16f6c:	000166a1 	.word	0x000166a1
   16f70:	000166c9 	.word	0x000166c9
   16f74:	00018479 	.word	0x00018479
   16f78:	00018575 	.word	0x00018575
   16f7c:	000183b1 	.word	0x000183b1
   16f80:	00016a01 	.word	0x00016a01
   16f84:	00017fc9 	.word	0x00017fc9
   16f88:	0001855d 	.word	0x0001855d
   16f8c:	00017e21 	.word	0x00017e21

00016f90 <xQueueCreateMutex>:
	{
   16f90:	b570      	push	{r4, r5, r6, lr}
   16f92:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   16f94:	2100      	movs	r1, #0
   16f96:	2001      	movs	r0, #1
   16f98:	4b06      	ldr	r3, [pc, #24]	; (16fb4 <xQueueCreateMutex+0x24>)
   16f9a:	4798      	blx	r3
   16f9c:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16f9e:	d007      	beq.n	16fb0 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   16fa0:	2300      	movs	r3, #0
   16fa2:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   16fa4:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   16fa6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   16fa8:	2200      	movs	r2, #0
   16faa:	2100      	movs	r1, #0
   16fac:	4d02      	ldr	r5, [pc, #8]	; (16fb8 <xQueueCreateMutex+0x28>)
   16fae:	47a8      	blx	r5
	}
   16fb0:	0020      	movs	r0, r4
   16fb2:	bd70      	pop	{r4, r5, r6, pc}
   16fb4:	00016b2d 	.word	0x00016b2d
   16fb8:	00016c69 	.word	0x00016c69

00016fbc <xQueueGenericSendFromISR>:
{
   16fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fbe:	46de      	mov	lr, fp
   16fc0:	4647      	mov	r7, r8
   16fc2:	b580      	push	{r7, lr}
   16fc4:	b083      	sub	sp, #12
   16fc6:	0004      	movs	r4, r0
   16fc8:	9101      	str	r1, [sp, #4]
   16fca:	0016      	movs	r6, r2
   16fcc:	001f      	movs	r7, r3
	configASSERT( pxQueue );
   16fce:	2800      	cmp	r0, #0
   16fd0:	d02d      	beq.n	1702e <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16fd2:	9b01      	ldr	r3, [sp, #4]
   16fd4:	2b00      	cmp	r3, #0
   16fd6:	d02c      	beq.n	17032 <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16fd8:	2f02      	cmp	r7, #2
   16fda:	d02f      	beq.n	1703c <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   16fdc:	4b59      	ldr	r3, [pc, #356]	; (17144 <xQueueGenericSendFromISR+0x188>)
   16fde:	4798      	blx	r3
   16fe0:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16fe4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16fe6:	429a      	cmp	r2, r3
   16fe8:	d85a      	bhi.n	170a0 <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   16fea:	0020      	movs	r0, r4
   16fec:	4b56      	ldr	r3, [pc, #344]	; (17148 <xQueueGenericSendFromISR+0x18c>)
   16fee:	4798      	blx	r3
   16ff0:	4b56      	ldr	r3, [pc, #344]	; (1714c <xQueueGenericSendFromISR+0x190>)
   16ff2:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   16ff4:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   16ff6:	4203      	tst	r3, r0
   16ff8:	d100      	bne.n	16ffc <xQueueGenericSendFromISR+0x40>
   16ffa:	e09a      	b.n	17132 <xQueueGenericSendFromISR+0x176>
   16ffc:	355d      	adds	r5, #93	; 0x5d
   16ffe:	2f00      	cmp	r7, #0
   17000:	d106      	bne.n	17010 <xQueueGenericSendFromISR+0x54>
   17002:	0020      	movs	r0, r4
   17004:	4b52      	ldr	r3, [pc, #328]	; (17150 <xQueueGenericSendFromISR+0x194>)
   17006:	4798      	blx	r3
   17008:	4b52      	ldr	r3, [pc, #328]	; (17154 <xQueueGenericSendFromISR+0x198>)
   1700a:	5c1d      	ldrb	r5, [r3, r0]
   1700c:	3558      	adds	r5, #88	; 0x58
   1700e:	b2ed      	uxtb	r5, r5
   17010:	0020      	movs	r0, r4
   17012:	4b4f      	ldr	r3, [pc, #316]	; (17150 <xQueueGenericSendFromISR+0x194>)
   17014:	4798      	blx	r3
   17016:	4b4f      	ldr	r3, [pc, #316]	; (17154 <xQueueGenericSendFromISR+0x198>)
   17018:	5c1f      	ldrb	r7, [r3, r0]
   1701a:	0020      	movs	r0, r4
   1701c:	4b4e      	ldr	r3, [pc, #312]	; (17158 <xQueueGenericSendFromISR+0x19c>)
   1701e:	4798      	blx	r3
   17020:	b2c2      	uxtb	r2, r0
   17022:	0039      	movs	r1, r7
   17024:	0028      	movs	r0, r5
   17026:	4b4d      	ldr	r3, [pc, #308]	; (1715c <xQueueGenericSendFromISR+0x1a0>)
   17028:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1702a:	2500      	movs	r5, #0
   1702c:	e081      	b.n	17132 <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
   1702e:	b672      	cpsid	i
   17030:	e7fe      	b.n	17030 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17032:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17034:	2b00      	cmp	r3, #0
   17036:	d0cf      	beq.n	16fd8 <xQueueGenericSendFromISR+0x1c>
   17038:	b672      	cpsid	i
   1703a:	e7fe      	b.n	1703a <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1703c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1703e:	2b01      	cmp	r3, #1
   17040:	d027      	beq.n	17092 <xQueueGenericSendFromISR+0xd6>
   17042:	b672      	cpsid	i
   17044:	e7fe      	b.n	17044 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17046:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   17048:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1704a:	2b00      	cmp	r3, #0
   1704c:	d071      	beq.n	17132 <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1704e:	0020      	movs	r0, r4
   17050:	3024      	adds	r0, #36	; 0x24
   17052:	4b43      	ldr	r3, [pc, #268]	; (17160 <xQueueGenericSendFromISR+0x1a4>)
   17054:	4798      	blx	r3
   17056:	2800      	cmp	r0, #0
   17058:	d06b      	beq.n	17132 <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
   1705a:	2e00      	cmp	r6, #0
   1705c:	d00a      	beq.n	17074 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
   1705e:	2301      	movs	r3, #1
   17060:	6033      	str	r3, [r6, #0]
   17062:	e066      	b.n	17132 <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   17064:	3501      	adds	r5, #1
   17066:	b26d      	sxtb	r5, r5
   17068:	2345      	movs	r3, #69	; 0x45
   1706a:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   1706c:	2501      	movs	r5, #1
   1706e:	e060      	b.n	17132 <xQueueGenericSendFromISR+0x176>
   17070:	2501      	movs	r5, #1
   17072:	e05e      	b.n	17132 <xQueueGenericSendFromISR+0x176>
   17074:	2501      	movs	r5, #1
   17076:	e05c      	b.n	17132 <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
   17078:	2345      	movs	r3, #69	; 0x45
   1707a:	5ce5      	ldrb	r5, [r4, r3]
   1707c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1707e:	0020      	movs	r0, r4
   17080:	4b31      	ldr	r3, [pc, #196]	; (17148 <xQueueGenericSendFromISR+0x18c>)
   17082:	4798      	blx	r3
   17084:	4b31      	ldr	r3, [pc, #196]	; (1714c <xQueueGenericSendFromISR+0x190>)
   17086:	881b      	ldrh	r3, [r3, #0]
   17088:	4203      	tst	r3, r0
   1708a:	d02d      	beq.n	170e8 <xQueueGenericSendFromISR+0x12c>
   1708c:	2335      	movs	r3, #53	; 0x35
   1708e:	4698      	mov	r8, r3
   17090:	e01c      	b.n	170cc <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   17092:	4b2c      	ldr	r3, [pc, #176]	; (17144 <xQueueGenericSendFromISR+0x188>)
   17094:	4798      	blx	r3
   17096:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   17098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1709a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1709c:	429a      	cmp	r2, r3
   1709e:	d9eb      	bls.n	17078 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
   170a0:	2345      	movs	r3, #69	; 0x45
   170a2:	5ce5      	ldrb	r5, [r4, r3]
   170a4:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   170a6:	0020      	movs	r0, r4
   170a8:	4b27      	ldr	r3, [pc, #156]	; (17148 <xQueueGenericSendFromISR+0x18c>)
   170aa:	4798      	blx	r3
   170ac:	4b27      	ldr	r3, [pc, #156]	; (1714c <xQueueGenericSendFromISR+0x190>)
   170ae:	881b      	ldrh	r3, [r3, #0]
   170b0:	4203      	tst	r3, r0
   170b2:	d019      	beq.n	170e8 <xQueueGenericSendFromISR+0x12c>
   170b4:	2335      	movs	r3, #53	; 0x35
   170b6:	4698      	mov	r8, r3
   170b8:	2f00      	cmp	r7, #0
   170ba:	d107      	bne.n	170cc <xQueueGenericSendFromISR+0x110>
   170bc:	0020      	movs	r0, r4
   170be:	4b24      	ldr	r3, [pc, #144]	; (17150 <xQueueGenericSendFromISR+0x194>)
   170c0:	4798      	blx	r3
   170c2:	4b24      	ldr	r3, [pc, #144]	; (17154 <xQueueGenericSendFromISR+0x198>)
   170c4:	5c1b      	ldrb	r3, [r3, r0]
   170c6:	3330      	adds	r3, #48	; 0x30
   170c8:	b2db      	uxtb	r3, r3
   170ca:	4698      	mov	r8, r3
   170cc:	0020      	movs	r0, r4
   170ce:	4b20      	ldr	r3, [pc, #128]	; (17150 <xQueueGenericSendFromISR+0x194>)
   170d0:	4798      	blx	r3
   170d2:	4b20      	ldr	r3, [pc, #128]	; (17154 <xQueueGenericSendFromISR+0x198>)
   170d4:	5c1b      	ldrb	r3, [r3, r0]
   170d6:	469b      	mov	fp, r3
   170d8:	0020      	movs	r0, r4
   170da:	4b1f      	ldr	r3, [pc, #124]	; (17158 <xQueueGenericSendFromISR+0x19c>)
   170dc:	4798      	blx	r3
   170de:	b2c2      	uxtb	r2, r0
   170e0:	4659      	mov	r1, fp
   170e2:	4640      	mov	r0, r8
   170e4:	4b1d      	ldr	r3, [pc, #116]	; (1715c <xQueueGenericSendFromISR+0x1a0>)
   170e6:	4798      	blx	r3
   170e8:	0020      	movs	r0, r4
   170ea:	4b19      	ldr	r3, [pc, #100]	; (17150 <xQueueGenericSendFromISR+0x194>)
   170ec:	4798      	blx	r3
   170ee:	4b19      	ldr	r3, [pc, #100]	; (17154 <xQueueGenericSendFromISR+0x198>)
   170f0:	5c1b      	ldrb	r3, [r3, r0]
   170f2:	4698      	mov	r8, r3
   170f4:	0020      	movs	r0, r4
   170f6:	4b18      	ldr	r3, [pc, #96]	; (17158 <xQueueGenericSendFromISR+0x19c>)
   170f8:	4798      	blx	r3
   170fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   170fc:	3201      	adds	r2, #1
   170fe:	b2d2      	uxtb	r2, r2
   17100:	b2c1      	uxtb	r1, r0
   17102:	4640      	mov	r0, r8
   17104:	4b17      	ldr	r3, [pc, #92]	; (17164 <xQueueGenericSendFromISR+0x1a8>)
   17106:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   17108:	003a      	movs	r2, r7
   1710a:	9901      	ldr	r1, [sp, #4]
   1710c:	0020      	movs	r0, r4
   1710e:	4b16      	ldr	r3, [pc, #88]	; (17168 <xQueueGenericSendFromISR+0x1ac>)
   17110:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   17112:	1c6b      	adds	r3, r5, #1
   17114:	d1a6      	bne.n	17064 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
   17116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17118:	2b00      	cmp	r3, #0
   1711a:	d094      	beq.n	17046 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1711c:	0039      	movs	r1, r7
   1711e:	0020      	movs	r0, r4
   17120:	4b12      	ldr	r3, [pc, #72]	; (1716c <xQueueGenericSendFromISR+0x1b0>)
   17122:	4798      	blx	r3
			xReturn = pdPASS;
   17124:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   17126:	2800      	cmp	r0, #0
   17128:	d003      	beq.n	17132 <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
   1712a:	2e00      	cmp	r6, #0
   1712c:	d0a0      	beq.n	17070 <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1712e:	2301      	movs	r3, #1
   17130:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17132:	9800      	ldr	r0, [sp, #0]
   17134:	4b0e      	ldr	r3, [pc, #56]	; (17170 <xQueueGenericSendFromISR+0x1b4>)
   17136:	4798      	blx	r3
}
   17138:	0028      	movs	r0, r5
   1713a:	b003      	add	sp, #12
   1713c:	bc0c      	pop	{r2, r3}
   1713e:	4690      	mov	r8, r2
   17140:	469b      	mov	fp, r3
   17142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17144:	000166e9 	.word	0x000166e9
   17148:	00015361 	.word	0x00015361
   1714c:	200000c0 	.word	0x200000c0
   17150:	000152e1 	.word	0x000152e1
   17154:	200000b8 	.word	0x200000b8
   17158:	00015351 	.word	0x00015351
   1715c:	00016135 	.word	0x00016135
   17160:	00018479 	.word	0x00018479
   17164:	00015c09 	.word	0x00015c09
   17168:	00016841 	.word	0x00016841
   1716c:	000168bd 	.word	0x000168bd
   17170:	000166f1 	.word	0x000166f1

00017174 <MyWrapper>:
{
   17174:	b5f0      	push	{r4, r5, r6, r7, lr}
   17176:	46d6      	mov	lr, sl
   17178:	4647      	mov	r7, r8
   1717a:	b580      	push	{r7, lr}
   1717c:	b083      	sub	sp, #12
   1717e:	0004      	movs	r4, r0
   17180:	000f      	movs	r7, r1
   17182:	0016      	movs	r6, r2
	configASSERT( pxQueue );
   17184:	2800      	cmp	r0, #0
   17186:	d004      	beq.n	17192 <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
   17188:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1718a:	2b00      	cmp	r3, #0
   1718c:	d003      	beq.n	17196 <MyWrapper+0x22>
   1718e:	b672      	cpsid	i
   17190:	e7fe      	b.n	17190 <MyWrapper+0x1c>
	configASSERT( pxQueue );
   17192:	b672      	cpsid	i
   17194:	e7fe      	b.n	17194 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17196:	6803      	ldr	r3, [r0, #0]
   17198:	2b00      	cmp	r3, #0
   1719a:	d055      	beq.n	17248 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1719c:	4b4a      	ldr	r3, [pc, #296]	; (172c8 <MyWrapper+0x154>)
   1719e:	4798      	blx	r3
   171a0:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   171a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   171a4:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
   171a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   171a8:	4598      	cmp	r8, r3
   171aa:	d267      	bcs.n	1727c <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
   171ac:	2345      	movs	r3, #69	; 0x45
   171ae:	5ce5      	ldrb	r5, [r4, r3]
   171b0:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   171b2:	0020      	movs	r0, r4
   171b4:	4b45      	ldr	r3, [pc, #276]	; (172cc <MyWrapper+0x158>)
   171b6:	4798      	blx	r3
   171b8:	4b45      	ldr	r3, [pc, #276]	; (172d0 <MyWrapper+0x15c>)
   171ba:	881b      	ldrh	r3, [r3, #0]
   171bc:	4203      	tst	r3, r0
   171be:	d018      	beq.n	171f2 <MyWrapper+0x7e>
   171c0:	2335      	movs	r3, #53	; 0x35
   171c2:	469a      	mov	sl, r3
   171c4:	2e00      	cmp	r6, #0
   171c6:	d107      	bne.n	171d8 <MyWrapper+0x64>
   171c8:	0020      	movs	r0, r4
   171ca:	4b42      	ldr	r3, [pc, #264]	; (172d4 <MyWrapper+0x160>)
   171cc:	4798      	blx	r3
   171ce:	4b42      	ldr	r3, [pc, #264]	; (172d8 <MyWrapper+0x164>)
   171d0:	5c1b      	ldrb	r3, [r3, r0]
   171d2:	3330      	adds	r3, #48	; 0x30
   171d4:	b2db      	uxtb	r3, r3
   171d6:	469a      	mov	sl, r3
   171d8:	0020      	movs	r0, r4
   171da:	4b3e      	ldr	r3, [pc, #248]	; (172d4 <MyWrapper+0x160>)
   171dc:	4798      	blx	r3
   171de:	4b3e      	ldr	r3, [pc, #248]	; (172d8 <MyWrapper+0x164>)
   171e0:	5c1e      	ldrb	r6, [r3, r0]
   171e2:	0020      	movs	r0, r4
   171e4:	4b3d      	ldr	r3, [pc, #244]	; (172dc <MyWrapper+0x168>)
   171e6:	4798      	blx	r3
   171e8:	b2c2      	uxtb	r2, r0
   171ea:	0031      	movs	r1, r6
   171ec:	4650      	mov	r0, sl
   171ee:	4b3c      	ldr	r3, [pc, #240]	; (172e0 <MyWrapper+0x16c>)
   171f0:	4798      	blx	r3
   171f2:	0020      	movs	r0, r4
   171f4:	4b37      	ldr	r3, [pc, #220]	; (172d4 <MyWrapper+0x160>)
   171f6:	4798      	blx	r3
   171f8:	4b37      	ldr	r3, [pc, #220]	; (172d8 <MyWrapper+0x164>)
   171fa:	5c1e      	ldrb	r6, [r3, r0]
   171fc:	0020      	movs	r0, r4
   171fe:	4b37      	ldr	r3, [pc, #220]	; (172dc <MyWrapper+0x168>)
   17200:	4798      	blx	r3
   17202:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17204:	3201      	adds	r2, #1
   17206:	b2d2      	uxtb	r2, r2
   17208:	b2c1      	uxtb	r1, r0
   1720a:	0030      	movs	r0, r6
   1720c:	4b35      	ldr	r3, [pc, #212]	; (172e4 <MyWrapper+0x170>)
   1720e:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   17210:	4643      	mov	r3, r8
   17212:	3301      	adds	r3, #1
   17214:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   17216:	1c6b      	adds	r3, r5, #1
   17218:	d12a      	bne.n	17270 <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
   1721a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1721c:	2b00      	cmp	r3, #0
   1721e:	d018      	beq.n	17252 <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   17220:	2100      	movs	r1, #0
   17222:	0020      	movs	r0, r4
   17224:	4b30      	ldr	r3, [pc, #192]	; (172e8 <MyWrapper+0x174>)
   17226:	4798      	blx	r3
			xReturn = pdPASS;
   17228:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1722a:	2800      	cmp	r0, #0
   1722c:	d003      	beq.n	17236 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
   1722e:	2f00      	cmp	r7, #0
   17230:	d045      	beq.n	172be <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
   17232:	2301      	movs	r3, #1
   17234:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17236:	9801      	ldr	r0, [sp, #4]
   17238:	4b2c      	ldr	r3, [pc, #176]	; (172ec <MyWrapper+0x178>)
   1723a:	4798      	blx	r3
}
   1723c:	0028      	movs	r0, r5
   1723e:	b003      	add	sp, #12
   17240:	bc0c      	pop	{r2, r3}
   17242:	4690      	mov	r8, r2
   17244:	469a      	mov	sl, r3
   17246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17248:	6843      	ldr	r3, [r0, #4]
   1724a:	2b00      	cmp	r3, #0
   1724c:	d0a6      	beq.n	1719c <MyWrapper+0x28>
   1724e:	b672      	cpsid	i
   17250:	e7fe      	b.n	17250 <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17252:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   17254:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17256:	2b00      	cmp	r3, #0
   17258:	d0ed      	beq.n	17236 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1725a:	0020      	movs	r0, r4
   1725c:	3024      	adds	r0, #36	; 0x24
   1725e:	4b24      	ldr	r3, [pc, #144]	; (172f0 <MyWrapper+0x17c>)
   17260:	4798      	blx	r3
   17262:	2800      	cmp	r0, #0
   17264:	d0e7      	beq.n	17236 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
   17266:	2f00      	cmp	r7, #0
   17268:	d02b      	beq.n	172c2 <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
   1726a:	2301      	movs	r3, #1
   1726c:	603b      	str	r3, [r7, #0]
   1726e:	e7e2      	b.n	17236 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   17270:	3501      	adds	r5, #1
   17272:	b26d      	sxtb	r5, r5
   17274:	2345      	movs	r3, #69	; 0x45
   17276:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   17278:	2501      	movs	r5, #1
   1727a:	e7dc      	b.n	17236 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1727c:	0020      	movs	r0, r4
   1727e:	4b13      	ldr	r3, [pc, #76]	; (172cc <MyWrapper+0x158>)
   17280:	4798      	blx	r3
   17282:	4b13      	ldr	r3, [pc, #76]	; (172d0 <MyWrapper+0x15c>)
   17284:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   17286:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   17288:	4203      	tst	r3, r0
   1728a:	d0d4      	beq.n	17236 <MyWrapper+0xc2>
   1728c:	355d      	adds	r5, #93	; 0x5d
   1728e:	2e00      	cmp	r6, #0
   17290:	d106      	bne.n	172a0 <MyWrapper+0x12c>
   17292:	0020      	movs	r0, r4
   17294:	4b0f      	ldr	r3, [pc, #60]	; (172d4 <MyWrapper+0x160>)
   17296:	4798      	blx	r3
   17298:	4b0f      	ldr	r3, [pc, #60]	; (172d8 <MyWrapper+0x164>)
   1729a:	5c1d      	ldrb	r5, [r3, r0]
   1729c:	3558      	adds	r5, #88	; 0x58
   1729e:	b2ed      	uxtb	r5, r5
   172a0:	0020      	movs	r0, r4
   172a2:	4b0c      	ldr	r3, [pc, #48]	; (172d4 <MyWrapper+0x160>)
   172a4:	4798      	blx	r3
   172a6:	4b0c      	ldr	r3, [pc, #48]	; (172d8 <MyWrapper+0x164>)
   172a8:	5c1f      	ldrb	r7, [r3, r0]
   172aa:	0020      	movs	r0, r4
   172ac:	4b0b      	ldr	r3, [pc, #44]	; (172dc <MyWrapper+0x168>)
   172ae:	4798      	blx	r3
   172b0:	b2c2      	uxtb	r2, r0
   172b2:	0039      	movs	r1, r7
   172b4:	0028      	movs	r0, r5
   172b6:	4b0a      	ldr	r3, [pc, #40]	; (172e0 <MyWrapper+0x16c>)
   172b8:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   172ba:	2500      	movs	r5, #0
   172bc:	e7bb      	b.n	17236 <MyWrapper+0xc2>
			xReturn = pdPASS;
   172be:	2501      	movs	r5, #1
   172c0:	e7b9      	b.n	17236 <MyWrapper+0xc2>
   172c2:	2501      	movs	r5, #1
   172c4:	e7b7      	b.n	17236 <MyWrapper+0xc2>
   172c6:	46c0      	nop			; (mov r8, r8)
   172c8:	000166e9 	.word	0x000166e9
   172cc:	00015361 	.word	0x00015361
   172d0:	200000c0 	.word	0x200000c0
   172d4:	000152e1 	.word	0x000152e1
   172d8:	200000b8 	.word	0x200000b8
   172dc:	00015351 	.word	0x00015351
   172e0:	00016135 	.word	0x00016135
   172e4:	00015c09 	.word	0x00015c09
   172e8:	000168bd 	.word	0x000168bd
   172ec:	000166f1 	.word	0x000166f1
   172f0:	00018479 	.word	0x00018479

000172f4 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   172f4:	b510      	push	{r4, lr}
   172f6:	2200      	movs	r2, #0
   172f8:	4b01      	ldr	r3, [pc, #4]	; (17300 <xQueueGiveFromISR+0xc>)
   172fa:	4798      	blx	r3
   172fc:	bd10      	pop	{r4, pc}
   172fe:	46c0      	nop			; (mov r8, r8)
   17300:	00017175 	.word	0x00017175

00017304 <xQueueReceive>:
{
   17304:	b5f0      	push	{r4, r5, r6, r7, lr}
   17306:	46ce      	mov	lr, r9
   17308:	4647      	mov	r7, r8
   1730a:	b580      	push	{r7, lr}
   1730c:	b085      	sub	sp, #20
   1730e:	1e04      	subs	r4, r0, #0
   17310:	9100      	str	r1, [sp, #0]
   17312:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   17314:	d00b      	beq.n	1732e <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17316:	9b00      	ldr	r3, [sp, #0]
   17318:	2b00      	cmp	r3, #0
   1731a:	d00a      	beq.n	17332 <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1731c:	4ba4      	ldr	r3, [pc, #656]	; (175b0 <xQueueReceive+0x2ac>)
   1731e:	4798      	blx	r3
   17320:	2800      	cmp	r0, #0
   17322:	d10b      	bne.n	1733c <xQueueReceive+0x38>
   17324:	9b01      	ldr	r3, [sp, #4]
   17326:	2b00      	cmp	r3, #0
   17328:	d00c      	beq.n	17344 <xQueueReceive+0x40>
   1732a:	b672      	cpsid	i
   1732c:	e7fe      	b.n	1732c <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
   1732e:	b672      	cpsid	i
   17330:	e7fe      	b.n	17330 <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17332:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17334:	2b00      	cmp	r3, #0
   17336:	d0f1      	beq.n	1731c <xQueueReceive+0x18>
   17338:	b672      	cpsid	i
   1733a:	e7fe      	b.n	1733a <xQueueReceive+0x36>
   1733c:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   1733e:	4b9d      	ldr	r3, [pc, #628]	; (175b4 <xQueueReceive+0x2b0>)
   17340:	4698      	mov	r8, r3
   17342:	e0b4      	b.n	174ae <xQueueReceive+0x1aa>
   17344:	2500      	movs	r5, #0
   17346:	e7fa      	b.n	1733e <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   17348:	9900      	ldr	r1, [sp, #0]
   1734a:	0020      	movs	r0, r4
   1734c:	4b9a      	ldr	r3, [pc, #616]	; (175b8 <xQueueReceive+0x2b4>)
   1734e:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   17350:	4b9a      	ldr	r3, [pc, #616]	; (175bc <xQueueReceive+0x2b8>)
   17352:	4798      	blx	r3
   17354:	4b9a      	ldr	r3, [pc, #616]	; (175c0 <xQueueReceive+0x2bc>)
   17356:	4798      	blx	r3
   17358:	4b9a      	ldr	r3, [pc, #616]	; (175c4 <xQueueReceive+0x2c0>)
   1735a:	881b      	ldrh	r3, [r3, #0]
   1735c:	4203      	tst	r3, r0
   1735e:	d019      	beq.n	17394 <xQueueReceive+0x90>
   17360:	0020      	movs	r0, r4
   17362:	4b99      	ldr	r3, [pc, #612]	; (175c8 <xQueueReceive+0x2c4>)
   17364:	4798      	blx	r3
   17366:	4b97      	ldr	r3, [pc, #604]	; (175c4 <xQueueReceive+0x2c0>)
   17368:	881b      	ldrh	r3, [r3, #0]
   1736a:	4203      	tst	r3, r0
   1736c:	d012      	beq.n	17394 <xQueueReceive+0x90>
   1736e:	0020      	movs	r0, r4
   17370:	4b96      	ldr	r3, [pc, #600]	; (175cc <xQueueReceive+0x2c8>)
   17372:	4698      	mov	r8, r3
   17374:	4798      	blx	r3
   17376:	4f96      	ldr	r7, [pc, #600]	; (175d0 <xQueueReceive+0x2cc>)
   17378:	5c3d      	ldrb	r5, [r7, r0]
   1737a:	3528      	adds	r5, #40	; 0x28
   1737c:	b2ed      	uxtb	r5, r5
   1737e:	0020      	movs	r0, r4
   17380:	47c0      	blx	r8
   17382:	5c3f      	ldrb	r7, [r7, r0]
   17384:	0020      	movs	r0, r4
   17386:	4b93      	ldr	r3, [pc, #588]	; (175d4 <xQueueReceive+0x2d0>)
   17388:	4798      	blx	r3
   1738a:	b2c2      	uxtb	r2, r0
   1738c:	0039      	movs	r1, r7
   1738e:	0028      	movs	r0, r5
   17390:	4b91      	ldr	r3, [pc, #580]	; (175d8 <xQueueReceive+0x2d4>)
   17392:	4798      	blx	r3
   17394:	0020      	movs	r0, r4
   17396:	4f8d      	ldr	r7, [pc, #564]	; (175cc <xQueueReceive+0x2c8>)
   17398:	47b8      	blx	r7
   1739a:	4d8d      	ldr	r5, [pc, #564]	; (175d0 <xQueueReceive+0x2cc>)
   1739c:	5c2b      	ldrb	r3, [r5, r0]
   1739e:	4699      	mov	r9, r3
   173a0:	0020      	movs	r0, r4
   173a2:	4b8c      	ldr	r3, [pc, #560]	; (175d4 <xQueueReceive+0x2d0>)
   173a4:	4798      	blx	r3
   173a6:	b2c3      	uxtb	r3, r0
   173a8:	4698      	mov	r8, r3
   173aa:	0020      	movs	r0, r4
   173ac:	47b8      	blx	r7
   173ae:	5c2b      	ldrb	r3, [r5, r0]
   173b0:	2b02      	cmp	r3, #2
   173b2:	d11e      	bne.n	173f2 <xQueueReceive+0xee>
   173b4:	4b81      	ldr	r3, [pc, #516]	; (175bc <xQueueReceive+0x2b8>)
   173b6:	4798      	blx	r3
   173b8:	4b88      	ldr	r3, [pc, #544]	; (175dc <xQueueReceive+0x2d8>)
   173ba:	4798      	blx	r3
   173bc:	b2c2      	uxtb	r2, r0
   173be:	4641      	mov	r1, r8
   173c0:	4648      	mov	r0, r9
   173c2:	4b87      	ldr	r3, [pc, #540]	; (175e0 <xQueueReceive+0x2dc>)
   173c4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   173c6:	3e01      	subs	r6, #1
   173c8:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   173ca:	6923      	ldr	r3, [r4, #16]
   173cc:	2b00      	cmp	r3, #0
   173ce:	d007      	beq.n	173e0 <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   173d0:	0020      	movs	r0, r4
   173d2:	3010      	adds	r0, #16
   173d4:	4b83      	ldr	r3, [pc, #524]	; (175e4 <xQueueReceive+0x2e0>)
   173d6:	4798      	blx	r3
   173d8:	2800      	cmp	r0, #0
   173da:	d001      	beq.n	173e0 <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   173dc:	4b82      	ldr	r3, [pc, #520]	; (175e8 <xQueueReceive+0x2e4>)
   173de:	4798      	blx	r3
				taskEXIT_CRITICAL();
   173e0:	4b82      	ldr	r3, [pc, #520]	; (175ec <xQueueReceive+0x2e8>)
   173e2:	4798      	blx	r3
				return pdPASS;
   173e4:	2301      	movs	r3, #1
}
   173e6:	0018      	movs	r0, r3
   173e8:	b005      	add	sp, #20
   173ea:	bc0c      	pop	{r2, r3}
   173ec:	4690      	mov	r8, r2
   173ee:	4699      	mov	r9, r3
   173f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   173f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   173f4:	3a01      	subs	r2, #1
   173f6:	b2d2      	uxtb	r2, r2
   173f8:	e7e1      	b.n	173be <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
   173fa:	4b7c      	ldr	r3, [pc, #496]	; (175ec <xQueueReceive+0x2e8>)
   173fc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   173fe:	4b6f      	ldr	r3, [pc, #444]	; (175bc <xQueueReceive+0x2b8>)
   17400:	4798      	blx	r3
   17402:	4b6f      	ldr	r3, [pc, #444]	; (175c0 <xQueueReceive+0x2bc>)
   17404:	4798      	blx	r3
   17406:	4b6f      	ldr	r3, [pc, #444]	; (175c4 <xQueueReceive+0x2c0>)
   17408:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   1740a:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1740c:	4202      	tst	r2, r0
   1740e:	d0ea      	beq.n	173e6 <xQueueReceive+0xe2>
   17410:	0020      	movs	r0, r4
   17412:	4b6d      	ldr	r3, [pc, #436]	; (175c8 <xQueueReceive+0x2c4>)
   17414:	4798      	blx	r3
   17416:	4b6b      	ldr	r3, [pc, #428]	; (175c4 <xQueueReceive+0x2c0>)
   17418:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   1741a:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1741c:	4202      	tst	r2, r0
   1741e:	d0e2      	beq.n	173e6 <xQueueReceive+0xe2>
   17420:	0020      	movs	r0, r4
   17422:	4f6a      	ldr	r7, [pc, #424]	; (175cc <xQueueReceive+0x2c8>)
   17424:	47b8      	blx	r7
   17426:	4e6a      	ldr	r6, [pc, #424]	; (175d0 <xQueueReceive+0x2cc>)
   17428:	5c35      	ldrb	r5, [r6, r0]
   1742a:	3550      	adds	r5, #80	; 0x50
   1742c:	b2ed      	uxtb	r5, r5
   1742e:	0020      	movs	r0, r4
   17430:	47b8      	blx	r7
   17432:	5c36      	ldrb	r6, [r6, r0]
   17434:	0020      	movs	r0, r4
   17436:	4b67      	ldr	r3, [pc, #412]	; (175d4 <xQueueReceive+0x2d0>)
   17438:	4798      	blx	r3
   1743a:	b2c2      	uxtb	r2, r0
   1743c:	0031      	movs	r1, r6
   1743e:	0028      	movs	r0, r5
   17440:	4b65      	ldr	r3, [pc, #404]	; (175d8 <xQueueReceive+0x2d4>)
   17442:	4798      	blx	r3
					return errQUEUE_EMPTY;
   17444:	2300      	movs	r3, #0
   17446:	e7ce      	b.n	173e6 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   17448:	a802      	add	r0, sp, #8
   1744a:	4b69      	ldr	r3, [pc, #420]	; (175f0 <xQueueReceive+0x2ec>)
   1744c:	4798      	blx	r3
   1744e:	e038      	b.n	174c2 <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
   17450:	2200      	movs	r2, #0
   17452:	2344      	movs	r3, #68	; 0x44
   17454:	54e2      	strb	r2, [r4, r3]
   17456:	e03f      	b.n	174d8 <xQueueReceive+0x1d4>
   17458:	2200      	movs	r2, #0
   1745a:	2345      	movs	r3, #69	; 0x45
   1745c:	54e2      	strb	r2, [r4, r3]
   1745e:	e040      	b.n	174e2 <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17460:	0020      	movs	r0, r4
   17462:	4b59      	ldr	r3, [pc, #356]	; (175c8 <xQueueReceive+0x2c4>)
   17464:	4798      	blx	r3
   17466:	4b57      	ldr	r3, [pc, #348]	; (175c4 <xQueueReceive+0x2c0>)
   17468:	881b      	ldrh	r3, [r3, #0]
   1746a:	4203      	tst	r3, r0
   1746c:	d04e      	beq.n	1750c <xQueueReceive+0x208>
   1746e:	0020      	movs	r0, r4
   17470:	4f56      	ldr	r7, [pc, #344]	; (175cc <xQueueReceive+0x2c8>)
   17472:	47b8      	blx	r7
   17474:	4e56      	ldr	r6, [pc, #344]	; (175d0 <xQueueReceive+0x2cc>)
   17476:	5c35      	ldrb	r5, [r6, r0]
   17478:	3568      	adds	r5, #104	; 0x68
   1747a:	b2ed      	uxtb	r5, r5
   1747c:	0020      	movs	r0, r4
   1747e:	47b8      	blx	r7
   17480:	5c36      	ldrb	r6, [r6, r0]
   17482:	0020      	movs	r0, r4
   17484:	4b53      	ldr	r3, [pc, #332]	; (175d4 <xQueueReceive+0x2d0>)
   17486:	4798      	blx	r3
   17488:	b2c2      	uxtb	r2, r0
   1748a:	0031      	movs	r1, r6
   1748c:	0028      	movs	r0, r5
   1748e:	4b52      	ldr	r3, [pc, #328]	; (175d8 <xQueueReceive+0x2d4>)
   17490:	4798      	blx	r3
   17492:	e03b      	b.n	1750c <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   17494:	0020      	movs	r0, r4
   17496:	3024      	adds	r0, #36	; 0x24
   17498:	9901      	ldr	r1, [sp, #4]
   1749a:	4b56      	ldr	r3, [pc, #344]	; (175f4 <xQueueReceive+0x2f0>)
   1749c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1749e:	0020      	movs	r0, r4
   174a0:	4b55      	ldr	r3, [pc, #340]	; (175f8 <xQueueReceive+0x2f4>)
   174a2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   174a4:	4b55      	ldr	r3, [pc, #340]	; (175fc <xQueueReceive+0x2f8>)
   174a6:	4798      	blx	r3
   174a8:	2800      	cmp	r0, #0
   174aa:	d046      	beq.n	1753a <xQueueReceive+0x236>
   174ac:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   174ae:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   174b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   174b2:	2e00      	cmp	r6, #0
   174b4:	d000      	beq.n	174b8 <xQueueReceive+0x1b4>
   174b6:	e747      	b.n	17348 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
   174b8:	9b01      	ldr	r3, [sp, #4]
   174ba:	2b00      	cmp	r3, #0
   174bc:	d09d      	beq.n	173fa <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   174be:	2d00      	cmp	r5, #0
   174c0:	d0c2      	beq.n	17448 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
   174c2:	4b4a      	ldr	r3, [pc, #296]	; (175ec <xQueueReceive+0x2e8>)
   174c4:	4798      	blx	r3
		vTaskSuspendAll();
   174c6:	4b4e      	ldr	r3, [pc, #312]	; (17600 <xQueueReceive+0x2fc>)
   174c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   174ca:	4b3a      	ldr	r3, [pc, #232]	; (175b4 <xQueueReceive+0x2b0>)
   174cc:	4798      	blx	r3
   174ce:	2344      	movs	r3, #68	; 0x44
   174d0:	5ce3      	ldrb	r3, [r4, r3]
   174d2:	b25b      	sxtb	r3, r3
   174d4:	3301      	adds	r3, #1
   174d6:	d0bb      	beq.n	17450 <xQueueReceive+0x14c>
   174d8:	2345      	movs	r3, #69	; 0x45
   174da:	5ce3      	ldrb	r3, [r4, r3]
   174dc:	b25b      	sxtb	r3, r3
   174de:	3301      	adds	r3, #1
   174e0:	d0ba      	beq.n	17458 <xQueueReceive+0x154>
   174e2:	4b42      	ldr	r3, [pc, #264]	; (175ec <xQueueReceive+0x2e8>)
   174e4:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   174e6:	a901      	add	r1, sp, #4
   174e8:	a802      	add	r0, sp, #8
   174ea:	4b46      	ldr	r3, [pc, #280]	; (17604 <xQueueReceive+0x300>)
   174ec:	4798      	blx	r3
   174ee:	2800      	cmp	r0, #0
   174f0:	d12c      	bne.n	1754c <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   174f2:	0020      	movs	r0, r4
   174f4:	4b44      	ldr	r3, [pc, #272]	; (17608 <xQueueReceive+0x304>)
   174f6:	4798      	blx	r3
   174f8:	2800      	cmp	r0, #0
   174fa:	d021      	beq.n	17540 <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   174fc:	4b2f      	ldr	r3, [pc, #188]	; (175bc <xQueueReceive+0x2b8>)
   174fe:	4798      	blx	r3
   17500:	4b2f      	ldr	r3, [pc, #188]	; (175c0 <xQueueReceive+0x2bc>)
   17502:	4798      	blx	r3
   17504:	4b2f      	ldr	r3, [pc, #188]	; (175c4 <xQueueReceive+0x2c0>)
   17506:	881b      	ldrh	r3, [r3, #0]
   17508:	4203      	tst	r3, r0
   1750a:	d1a9      	bne.n	17460 <xQueueReceive+0x15c>
   1750c:	0020      	movs	r0, r4
   1750e:	4b2f      	ldr	r3, [pc, #188]	; (175cc <xQueueReceive+0x2c8>)
   17510:	4798      	blx	r3
   17512:	4b2f      	ldr	r3, [pc, #188]	; (175d0 <xQueueReceive+0x2cc>)
   17514:	5c1b      	ldrb	r3, [r3, r0]
   17516:	2b02      	cmp	r3, #2
   17518:	d0bc      	beq.n	17494 <xQueueReceive+0x190>
   1751a:	4b28      	ldr	r3, [pc, #160]	; (175bc <xQueueReceive+0x2b8>)
   1751c:	4798      	blx	r3
   1751e:	4b28      	ldr	r3, [pc, #160]	; (175c0 <xQueueReceive+0x2bc>)
   17520:	4798      	blx	r3
   17522:	4b28      	ldr	r3, [pc, #160]	; (175c4 <xQueueReceive+0x2c0>)
   17524:	881b      	ldrh	r3, [r3, #0]
   17526:	4203      	tst	r3, r0
   17528:	d0b4      	beq.n	17494 <xQueueReceive+0x190>
   1752a:	4b24      	ldr	r3, [pc, #144]	; (175bc <xQueueReceive+0x2b8>)
   1752c:	4798      	blx	r3
   1752e:	4b2b      	ldr	r3, [pc, #172]	; (175dc <xQueueReceive+0x2d8>)
   17530:	4798      	blx	r3
   17532:	b2c0      	uxtb	r0, r0
   17534:	4b35      	ldr	r3, [pc, #212]	; (1760c <xQueueReceive+0x308>)
   17536:	4798      	blx	r3
   17538:	e7ac      	b.n	17494 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
   1753a:	4b2b      	ldr	r3, [pc, #172]	; (175e8 <xQueueReceive+0x2e4>)
   1753c:	4798      	blx	r3
   1753e:	e7b5      	b.n	174ac <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
   17540:	0020      	movs	r0, r4
   17542:	4b2d      	ldr	r3, [pc, #180]	; (175f8 <xQueueReceive+0x2f4>)
   17544:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17546:	4b2d      	ldr	r3, [pc, #180]	; (175fc <xQueueReceive+0x2f8>)
   17548:	4798      	blx	r3
   1754a:	e7af      	b.n	174ac <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
   1754c:	0020      	movs	r0, r4
   1754e:	4b2a      	ldr	r3, [pc, #168]	; (175f8 <xQueueReceive+0x2f4>)
   17550:	4798      	blx	r3
			( void ) xTaskResumeAll();
   17552:	4b2a      	ldr	r3, [pc, #168]	; (175fc <xQueueReceive+0x2f8>)
   17554:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17556:	0020      	movs	r0, r4
   17558:	4b2b      	ldr	r3, [pc, #172]	; (17608 <xQueueReceive+0x304>)
   1755a:	4798      	blx	r3
   1755c:	2800      	cmp	r0, #0
   1755e:	d0a5      	beq.n	174ac <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   17560:	4b16      	ldr	r3, [pc, #88]	; (175bc <xQueueReceive+0x2b8>)
   17562:	4798      	blx	r3
   17564:	4b16      	ldr	r3, [pc, #88]	; (175c0 <xQueueReceive+0x2bc>)
   17566:	4798      	blx	r3
   17568:	4b16      	ldr	r3, [pc, #88]	; (175c4 <xQueueReceive+0x2c0>)
   1756a:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   1756c:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1756e:	4202      	tst	r2, r0
   17570:	d100      	bne.n	17574 <xQueueReceive+0x270>
   17572:	e738      	b.n	173e6 <xQueueReceive+0xe2>
   17574:	0020      	movs	r0, r4
   17576:	4b14      	ldr	r3, [pc, #80]	; (175c8 <xQueueReceive+0x2c4>)
   17578:	4798      	blx	r3
   1757a:	4b12      	ldr	r3, [pc, #72]	; (175c4 <xQueueReceive+0x2c0>)
   1757c:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   1757e:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   17580:	4202      	tst	r2, r0
   17582:	d100      	bne.n	17586 <xQueueReceive+0x282>
   17584:	e72f      	b.n	173e6 <xQueueReceive+0xe2>
   17586:	0020      	movs	r0, r4
   17588:	4f10      	ldr	r7, [pc, #64]	; (175cc <xQueueReceive+0x2c8>)
   1758a:	47b8      	blx	r7
   1758c:	4e10      	ldr	r6, [pc, #64]	; (175d0 <xQueueReceive+0x2cc>)
   1758e:	5c35      	ldrb	r5, [r6, r0]
   17590:	3550      	adds	r5, #80	; 0x50
   17592:	b2ed      	uxtb	r5, r5
   17594:	0020      	movs	r0, r4
   17596:	47b8      	blx	r7
   17598:	5c36      	ldrb	r6, [r6, r0]
   1759a:	0020      	movs	r0, r4
   1759c:	4b0d      	ldr	r3, [pc, #52]	; (175d4 <xQueueReceive+0x2d0>)
   1759e:	4798      	blx	r3
   175a0:	b2c2      	uxtb	r2, r0
   175a2:	0031      	movs	r1, r6
   175a4:	0028      	movs	r0, r5
   175a6:	4b0c      	ldr	r3, [pc, #48]	; (175d8 <xQueueReceive+0x2d4>)
   175a8:	4798      	blx	r3
				return errQUEUE_EMPTY;
   175aa:	2300      	movs	r3, #0
   175ac:	e71b      	b.n	173e6 <xQueueReceive+0xe2>
   175ae:	46c0      	nop			; (mov r8, r8)
   175b0:	0001863d 	.word	0x0001863d
   175b4:	000166b1 	.word	0x000166b1
   175b8:	000169d9 	.word	0x000169d9
   175bc:	000154b1 	.word	0x000154b1
   175c0:	000152fd 	.word	0x000152fd
   175c4:	200000c0 	.word	0x200000c0
   175c8:	00015361 	.word	0x00015361
   175cc:	000152e1 	.word	0x000152e1
   175d0:	200000b8 	.word	0x200000b8
   175d4:	00015351 	.word	0x00015351
   175d8:	00016135 	.word	0x00016135
   175dc:	000152ed 	.word	0x000152ed
   175e0:	00015c09 	.word	0x00015c09
   175e4:	00018479 	.word	0x00018479
   175e8:	000166a1 	.word	0x000166a1
   175ec:	000166c9 	.word	0x000166c9
   175f0:	0001855d 	.word	0x0001855d
   175f4:	000183b1 	.word	0x000183b1
   175f8:	00016a01 	.word	0x00016a01
   175fc:	00017fc9 	.word	0x00017fc9
   17600:	00017e21 	.word	0x00017e21
   17604:	00018575 	.word	0x00018575
   17608:	00016825 	.word	0x00016825
   1760c:	00015c61 	.word	0x00015c61

00017610 <xQueueSemaphoreTake>:
{
   17610:	b5f0      	push	{r4, r5, r6, r7, lr}
   17612:	46ce      	mov	lr, r9
   17614:	4647      	mov	r7, r8
   17616:	b580      	push	{r7, lr}
   17618:	b085      	sub	sp, #20
   1761a:	1e04      	subs	r4, r0, #0
   1761c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   1761e:	d004      	beq.n	1762a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
   17620:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17622:	2b00      	cmp	r3, #0
   17624:	d003      	beq.n	1762e <xQueueSemaphoreTake+0x1e>
   17626:	b672      	cpsid	i
   17628:	e7fe      	b.n	17628 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
   1762a:	b672      	cpsid	i
   1762c:	e7fe      	b.n	1762c <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1762e:	4bb2      	ldr	r3, [pc, #712]	; (178f8 <xQueueSemaphoreTake+0x2e8>)
   17630:	4798      	blx	r3
   17632:	2800      	cmp	r0, #0
   17634:	d104      	bne.n	17640 <xQueueSemaphoreTake+0x30>
   17636:	9b01      	ldr	r3, [sp, #4]
   17638:	2b00      	cmp	r3, #0
   1763a:	d006      	beq.n	1764a <xQueueSemaphoreTake+0x3a>
   1763c:	b672      	cpsid	i
   1763e:	e7fe      	b.n	1763e <xQueueSemaphoreTake+0x2e>
   17640:	2500      	movs	r5, #0
   17642:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   17644:	4bad      	ldr	r3, [pc, #692]	; (178fc <xQueueSemaphoreTake+0x2ec>)
   17646:	4698      	mov	r8, r3
   17648:	e0bd      	b.n	177c6 <xQueueSemaphoreTake+0x1b6>
   1764a:	2500      	movs	r5, #0
   1764c:	2700      	movs	r7, #0
   1764e:	e7f9      	b.n	17644 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
   17650:	4bab      	ldr	r3, [pc, #684]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   17652:	4798      	blx	r3
   17654:	4bab      	ldr	r3, [pc, #684]	; (17904 <xQueueSemaphoreTake+0x2f4>)
   17656:	4798      	blx	r3
   17658:	4bab      	ldr	r3, [pc, #684]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   1765a:	881b      	ldrh	r3, [r3, #0]
   1765c:	4203      	tst	r3, r0
   1765e:	d019      	beq.n	17694 <xQueueSemaphoreTake+0x84>
   17660:	0020      	movs	r0, r4
   17662:	4baa      	ldr	r3, [pc, #680]	; (1790c <xQueueSemaphoreTake+0x2fc>)
   17664:	4798      	blx	r3
   17666:	4ba8      	ldr	r3, [pc, #672]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   17668:	881b      	ldrh	r3, [r3, #0]
   1766a:	4203      	tst	r3, r0
   1766c:	d012      	beq.n	17694 <xQueueSemaphoreTake+0x84>
   1766e:	0020      	movs	r0, r4
   17670:	4ba7      	ldr	r3, [pc, #668]	; (17910 <xQueueSemaphoreTake+0x300>)
   17672:	4698      	mov	r8, r3
   17674:	4798      	blx	r3
   17676:	4fa7      	ldr	r7, [pc, #668]	; (17914 <xQueueSemaphoreTake+0x304>)
   17678:	5c3d      	ldrb	r5, [r7, r0]
   1767a:	3528      	adds	r5, #40	; 0x28
   1767c:	b2ed      	uxtb	r5, r5
   1767e:	0020      	movs	r0, r4
   17680:	47c0      	blx	r8
   17682:	5c3f      	ldrb	r7, [r7, r0]
   17684:	0020      	movs	r0, r4
   17686:	4ba4      	ldr	r3, [pc, #656]	; (17918 <xQueueSemaphoreTake+0x308>)
   17688:	4798      	blx	r3
   1768a:	b2c2      	uxtb	r2, r0
   1768c:	0039      	movs	r1, r7
   1768e:	0028      	movs	r0, r5
   17690:	4ba2      	ldr	r3, [pc, #648]	; (1791c <xQueueSemaphoreTake+0x30c>)
   17692:	4798      	blx	r3
   17694:	0020      	movs	r0, r4
   17696:	4f9e      	ldr	r7, [pc, #632]	; (17910 <xQueueSemaphoreTake+0x300>)
   17698:	47b8      	blx	r7
   1769a:	4d9e      	ldr	r5, [pc, #632]	; (17914 <xQueueSemaphoreTake+0x304>)
   1769c:	5c2b      	ldrb	r3, [r5, r0]
   1769e:	4699      	mov	r9, r3
   176a0:	0020      	movs	r0, r4
   176a2:	4b9d      	ldr	r3, [pc, #628]	; (17918 <xQueueSemaphoreTake+0x308>)
   176a4:	4798      	blx	r3
   176a6:	b2c3      	uxtb	r3, r0
   176a8:	4698      	mov	r8, r3
   176aa:	0020      	movs	r0, r4
   176ac:	47b8      	blx	r7
   176ae:	5c2b      	ldrb	r3, [r5, r0]
   176b0:	2b02      	cmp	r3, #2
   176b2:	d124      	bne.n	176fe <xQueueSemaphoreTake+0xee>
   176b4:	4b92      	ldr	r3, [pc, #584]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   176b6:	4798      	blx	r3
   176b8:	4b99      	ldr	r3, [pc, #612]	; (17920 <xQueueSemaphoreTake+0x310>)
   176ba:	4798      	blx	r3
   176bc:	b2c2      	uxtb	r2, r0
   176be:	4641      	mov	r1, r8
   176c0:	4648      	mov	r0, r9
   176c2:	4b98      	ldr	r3, [pc, #608]	; (17924 <xQueueSemaphoreTake+0x314>)
   176c4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   176c6:	3e01      	subs	r6, #1
   176c8:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   176ca:	6823      	ldr	r3, [r4, #0]
   176cc:	2b00      	cmp	r3, #0
   176ce:	d102      	bne.n	176d6 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   176d0:	4b95      	ldr	r3, [pc, #596]	; (17928 <xQueueSemaphoreTake+0x318>)
   176d2:	4798      	blx	r3
   176d4:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   176d6:	6923      	ldr	r3, [r4, #16]
   176d8:	2b00      	cmp	r3, #0
   176da:	d007      	beq.n	176ec <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   176dc:	0020      	movs	r0, r4
   176de:	3010      	adds	r0, #16
   176e0:	4b92      	ldr	r3, [pc, #584]	; (1792c <xQueueSemaphoreTake+0x31c>)
   176e2:	4798      	blx	r3
   176e4:	2800      	cmp	r0, #0
   176e6:	d001      	beq.n	176ec <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   176e8:	4b91      	ldr	r3, [pc, #580]	; (17930 <xQueueSemaphoreTake+0x320>)
   176ea:	4798      	blx	r3
				taskEXIT_CRITICAL();
   176ec:	4b91      	ldr	r3, [pc, #580]	; (17934 <xQueueSemaphoreTake+0x324>)
   176ee:	4798      	blx	r3
				return pdPASS;
   176f0:	2501      	movs	r5, #1
}
   176f2:	0028      	movs	r0, r5
   176f4:	b005      	add	sp, #20
   176f6:	bc0c      	pop	{r2, r3}
   176f8:	4690      	mov	r8, r2
   176fa:	4699      	mov	r9, r3
   176fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   176fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17700:	3a01      	subs	r2, #1
   17702:	b2d2      	uxtb	r2, r2
   17704:	e7db      	b.n	176be <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
   17706:	2d00      	cmp	r5, #0
   17708:	d001      	beq.n	1770e <xQueueSemaphoreTake+0xfe>
   1770a:	b672      	cpsid	i
   1770c:	e7fe      	b.n	1770c <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
   1770e:	4b89      	ldr	r3, [pc, #548]	; (17934 <xQueueSemaphoreTake+0x324>)
   17710:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   17712:	4b7b      	ldr	r3, [pc, #492]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   17714:	4798      	blx	r3
   17716:	4b7b      	ldr	r3, [pc, #492]	; (17904 <xQueueSemaphoreTake+0x2f4>)
   17718:	4798      	blx	r3
   1771a:	4b7b      	ldr	r3, [pc, #492]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   1771c:	881b      	ldrh	r3, [r3, #0]
   1771e:	4203      	tst	r3, r0
   17720:	d0e7      	beq.n	176f2 <xQueueSemaphoreTake+0xe2>
   17722:	0020      	movs	r0, r4
   17724:	4b79      	ldr	r3, [pc, #484]	; (1790c <xQueueSemaphoreTake+0x2fc>)
   17726:	4798      	blx	r3
   17728:	4b77      	ldr	r3, [pc, #476]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   1772a:	881b      	ldrh	r3, [r3, #0]
   1772c:	4203      	tst	r3, r0
   1772e:	d0e0      	beq.n	176f2 <xQueueSemaphoreTake+0xe2>
   17730:	0020      	movs	r0, r4
   17732:	4b77      	ldr	r3, [pc, #476]	; (17910 <xQueueSemaphoreTake+0x300>)
   17734:	4698      	mov	r8, r3
   17736:	4798      	blx	r3
   17738:	4f76      	ldr	r7, [pc, #472]	; (17914 <xQueueSemaphoreTake+0x304>)
   1773a:	5c3e      	ldrb	r6, [r7, r0]
   1773c:	3650      	adds	r6, #80	; 0x50
   1773e:	b2f6      	uxtb	r6, r6
   17740:	0020      	movs	r0, r4
   17742:	47c0      	blx	r8
   17744:	5c3f      	ldrb	r7, [r7, r0]
   17746:	0020      	movs	r0, r4
   17748:	4b73      	ldr	r3, [pc, #460]	; (17918 <xQueueSemaphoreTake+0x308>)
   1774a:	4798      	blx	r3
   1774c:	b2c2      	uxtb	r2, r0
   1774e:	0039      	movs	r1, r7
   17750:	0030      	movs	r0, r6
   17752:	4b72      	ldr	r3, [pc, #456]	; (1791c <xQueueSemaphoreTake+0x30c>)
   17754:	4798      	blx	r3
   17756:	e7cc      	b.n	176f2 <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   17758:	a802      	add	r0, sp, #8
   1775a:	4b77      	ldr	r3, [pc, #476]	; (17938 <xQueueSemaphoreTake+0x328>)
   1775c:	4798      	blx	r3
   1775e:	e03c      	b.n	177da <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
   17760:	2200      	movs	r2, #0
   17762:	2344      	movs	r3, #68	; 0x44
   17764:	54e2      	strb	r2, [r4, r3]
   17766:	e043      	b.n	177f0 <xQueueSemaphoreTake+0x1e0>
   17768:	2200      	movs	r2, #0
   1776a:	2345      	movs	r3, #69	; 0x45
   1776c:	54e2      	strb	r2, [r4, r3]
   1776e:	e044      	b.n	177fa <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17770:	0020      	movs	r0, r4
   17772:	4b66      	ldr	r3, [pc, #408]	; (1790c <xQueueSemaphoreTake+0x2fc>)
   17774:	4798      	blx	r3
   17776:	4b64      	ldr	r3, [pc, #400]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   17778:	881b      	ldrh	r3, [r3, #0]
   1777a:	4203      	tst	r3, r0
   1777c:	d052      	beq.n	17824 <xQueueSemaphoreTake+0x214>
   1777e:	0020      	movs	r0, r4
   17780:	4b63      	ldr	r3, [pc, #396]	; (17910 <xQueueSemaphoreTake+0x300>)
   17782:	4699      	mov	r9, r3
   17784:	4798      	blx	r3
   17786:	4f63      	ldr	r7, [pc, #396]	; (17914 <xQueueSemaphoreTake+0x304>)
   17788:	5c3e      	ldrb	r6, [r7, r0]
   1778a:	3668      	adds	r6, #104	; 0x68
   1778c:	b2f6      	uxtb	r6, r6
   1778e:	0020      	movs	r0, r4
   17790:	47c8      	blx	r9
   17792:	5c3f      	ldrb	r7, [r7, r0]
   17794:	0020      	movs	r0, r4
   17796:	4b60      	ldr	r3, [pc, #384]	; (17918 <xQueueSemaphoreTake+0x308>)
   17798:	4798      	blx	r3
   1779a:	b2c2      	uxtb	r2, r0
   1779c:	0039      	movs	r1, r7
   1779e:	0030      	movs	r0, r6
   177a0:	4b5e      	ldr	r3, [pc, #376]	; (1791c <xQueueSemaphoreTake+0x30c>)
   177a2:	4798      	blx	r3
   177a4:	e03e      	b.n	17824 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   177a6:	6823      	ldr	r3, [r4, #0]
   177a8:	2b00      	cmp	r3, #0
   177aa:	d052      	beq.n	17852 <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   177ac:	0020      	movs	r0, r4
   177ae:	3024      	adds	r0, #36	; 0x24
   177b0:	9901      	ldr	r1, [sp, #4]
   177b2:	4b62      	ldr	r3, [pc, #392]	; (1793c <xQueueSemaphoreTake+0x32c>)
   177b4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   177b6:	0020      	movs	r0, r4
   177b8:	4b61      	ldr	r3, [pc, #388]	; (17940 <xQueueSemaphoreTake+0x330>)
   177ba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   177bc:	4b61      	ldr	r3, [pc, #388]	; (17944 <xQueueSemaphoreTake+0x334>)
   177be:	4798      	blx	r3
   177c0:	2800      	cmp	r0, #0
   177c2:	d04f      	beq.n	17864 <xQueueSemaphoreTake+0x254>
   177c4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   177c6:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   177c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   177ca:	2e00      	cmp	r6, #0
   177cc:	d000      	beq.n	177d0 <xQueueSemaphoreTake+0x1c0>
   177ce:	e73f      	b.n	17650 <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
   177d0:	9b01      	ldr	r3, [sp, #4]
   177d2:	2b00      	cmp	r3, #0
   177d4:	d097      	beq.n	17706 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   177d6:	2f00      	cmp	r7, #0
   177d8:	d0be      	beq.n	17758 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
   177da:	4b56      	ldr	r3, [pc, #344]	; (17934 <xQueueSemaphoreTake+0x324>)
   177dc:	4798      	blx	r3
		vTaskSuspendAll();
   177de:	4b5a      	ldr	r3, [pc, #360]	; (17948 <xQueueSemaphoreTake+0x338>)
   177e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   177e2:	4b46      	ldr	r3, [pc, #280]	; (178fc <xQueueSemaphoreTake+0x2ec>)
   177e4:	4798      	blx	r3
   177e6:	2344      	movs	r3, #68	; 0x44
   177e8:	5ce3      	ldrb	r3, [r4, r3]
   177ea:	b25b      	sxtb	r3, r3
   177ec:	3301      	adds	r3, #1
   177ee:	d0b7      	beq.n	17760 <xQueueSemaphoreTake+0x150>
   177f0:	2345      	movs	r3, #69	; 0x45
   177f2:	5ce3      	ldrb	r3, [r4, r3]
   177f4:	b25b      	sxtb	r3, r3
   177f6:	3301      	adds	r3, #1
   177f8:	d0b6      	beq.n	17768 <xQueueSemaphoreTake+0x158>
   177fa:	4b4e      	ldr	r3, [pc, #312]	; (17934 <xQueueSemaphoreTake+0x324>)
   177fc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   177fe:	a901      	add	r1, sp, #4
   17800:	a802      	add	r0, sp, #8
   17802:	4b52      	ldr	r3, [pc, #328]	; (1794c <xQueueSemaphoreTake+0x33c>)
   17804:	4798      	blx	r3
   17806:	2800      	cmp	r0, #0
   17808:	d135      	bne.n	17876 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1780a:	0020      	movs	r0, r4
   1780c:	4b50      	ldr	r3, [pc, #320]	; (17950 <xQueueSemaphoreTake+0x340>)
   1780e:	4798      	blx	r3
   17810:	2800      	cmp	r0, #0
   17812:	d02a      	beq.n	1786a <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17814:	4b3a      	ldr	r3, [pc, #232]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   17816:	4798      	blx	r3
   17818:	4b3a      	ldr	r3, [pc, #232]	; (17904 <xQueueSemaphoreTake+0x2f4>)
   1781a:	4798      	blx	r3
   1781c:	4b3a      	ldr	r3, [pc, #232]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   1781e:	881b      	ldrh	r3, [r3, #0]
   17820:	4203      	tst	r3, r0
   17822:	d1a5      	bne.n	17770 <xQueueSemaphoreTake+0x160>
   17824:	0020      	movs	r0, r4
   17826:	4b3a      	ldr	r3, [pc, #232]	; (17910 <xQueueSemaphoreTake+0x300>)
   17828:	4798      	blx	r3
   1782a:	4b3a      	ldr	r3, [pc, #232]	; (17914 <xQueueSemaphoreTake+0x304>)
   1782c:	5c1b      	ldrb	r3, [r3, r0]
   1782e:	2b02      	cmp	r3, #2
   17830:	d0b9      	beq.n	177a6 <xQueueSemaphoreTake+0x196>
   17832:	4b33      	ldr	r3, [pc, #204]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   17834:	4798      	blx	r3
   17836:	4b33      	ldr	r3, [pc, #204]	; (17904 <xQueueSemaphoreTake+0x2f4>)
   17838:	4798      	blx	r3
   1783a:	4b33      	ldr	r3, [pc, #204]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   1783c:	881b      	ldrh	r3, [r3, #0]
   1783e:	4203      	tst	r3, r0
   17840:	d0b1      	beq.n	177a6 <xQueueSemaphoreTake+0x196>
   17842:	4b2f      	ldr	r3, [pc, #188]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   17844:	4798      	blx	r3
   17846:	4b36      	ldr	r3, [pc, #216]	; (17920 <xQueueSemaphoreTake+0x310>)
   17848:	4798      	blx	r3
   1784a:	b2c0      	uxtb	r0, r0
   1784c:	4b41      	ldr	r3, [pc, #260]	; (17954 <xQueueSemaphoreTake+0x344>)
   1784e:	4798      	blx	r3
   17850:	e7a9      	b.n	177a6 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
   17852:	4b2a      	ldr	r3, [pc, #168]	; (178fc <xQueueSemaphoreTake+0x2ec>)
   17854:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   17856:	6860      	ldr	r0, [r4, #4]
   17858:	4b3f      	ldr	r3, [pc, #252]	; (17958 <xQueueSemaphoreTake+0x348>)
   1785a:	4798      	blx	r3
   1785c:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
   1785e:	4b35      	ldr	r3, [pc, #212]	; (17934 <xQueueSemaphoreTake+0x324>)
   17860:	4798      	blx	r3
   17862:	e7a3      	b.n	177ac <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
   17864:	4b32      	ldr	r3, [pc, #200]	; (17930 <xQueueSemaphoreTake+0x320>)
   17866:	4798      	blx	r3
   17868:	e7ac      	b.n	177c4 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
   1786a:	0020      	movs	r0, r4
   1786c:	4b34      	ldr	r3, [pc, #208]	; (17940 <xQueueSemaphoreTake+0x330>)
   1786e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17870:	4b34      	ldr	r3, [pc, #208]	; (17944 <xQueueSemaphoreTake+0x334>)
   17872:	4798      	blx	r3
   17874:	e7a6      	b.n	177c4 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
   17876:	0020      	movs	r0, r4
   17878:	4b31      	ldr	r3, [pc, #196]	; (17940 <xQueueSemaphoreTake+0x330>)
   1787a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1787c:	4b31      	ldr	r3, [pc, #196]	; (17944 <xQueueSemaphoreTake+0x334>)
   1787e:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17880:	0020      	movs	r0, r4
   17882:	4b33      	ldr	r3, [pc, #204]	; (17950 <xQueueSemaphoreTake+0x340>)
   17884:	4798      	blx	r3
   17886:	2800      	cmp	r0, #0
   17888:	d09c      	beq.n	177c4 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
   1788a:	2d00      	cmp	r5, #0
   1788c:	d00e      	beq.n	178ac <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
   1788e:	4b1b      	ldr	r3, [pc, #108]	; (178fc <xQueueSemaphoreTake+0x2ec>)
   17890:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   17892:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   17894:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   17896:	2b00      	cmp	r3, #0
   17898:	d003      	beq.n	178a2 <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1789a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1789c:	681b      	ldr	r3, [r3, #0]
   1789e:	3105      	adds	r1, #5
   178a0:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   178a2:	6860      	ldr	r0, [r4, #4]
   178a4:	4b2d      	ldr	r3, [pc, #180]	; (1795c <xQueueSemaphoreTake+0x34c>)
   178a6:	4798      	blx	r3
						taskEXIT_CRITICAL();
   178a8:	4b22      	ldr	r3, [pc, #136]	; (17934 <xQueueSemaphoreTake+0x324>)
   178aa:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   178ac:	4b14      	ldr	r3, [pc, #80]	; (17900 <xQueueSemaphoreTake+0x2f0>)
   178ae:	4798      	blx	r3
   178b0:	4b14      	ldr	r3, [pc, #80]	; (17904 <xQueueSemaphoreTake+0x2f4>)
   178b2:	4798      	blx	r3
   178b4:	4b14      	ldr	r3, [pc, #80]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   178b6:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
   178b8:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   178ba:	4203      	tst	r3, r0
   178bc:	d100      	bne.n	178c0 <xQueueSemaphoreTake+0x2b0>
   178be:	e718      	b.n	176f2 <xQueueSemaphoreTake+0xe2>
   178c0:	0020      	movs	r0, r4
   178c2:	4b12      	ldr	r3, [pc, #72]	; (1790c <xQueueSemaphoreTake+0x2fc>)
   178c4:	4798      	blx	r3
   178c6:	4b10      	ldr	r3, [pc, #64]	; (17908 <xQueueSemaphoreTake+0x2f8>)
   178c8:	881b      	ldrh	r3, [r3, #0]
   178ca:	4203      	tst	r3, r0
   178cc:	d100      	bne.n	178d0 <xQueueSemaphoreTake+0x2c0>
   178ce:	e710      	b.n	176f2 <xQueueSemaphoreTake+0xe2>
   178d0:	0020      	movs	r0, r4
   178d2:	4f0f      	ldr	r7, [pc, #60]	; (17910 <xQueueSemaphoreTake+0x300>)
   178d4:	47b8      	blx	r7
   178d6:	4e0f      	ldr	r6, [pc, #60]	; (17914 <xQueueSemaphoreTake+0x304>)
   178d8:	5c35      	ldrb	r5, [r6, r0]
   178da:	3550      	adds	r5, #80	; 0x50
   178dc:	b2ed      	uxtb	r5, r5
   178de:	0020      	movs	r0, r4
   178e0:	47b8      	blx	r7
   178e2:	5c36      	ldrb	r6, [r6, r0]
   178e4:	0020      	movs	r0, r4
   178e6:	4b0c      	ldr	r3, [pc, #48]	; (17918 <xQueueSemaphoreTake+0x308>)
   178e8:	4798      	blx	r3
   178ea:	b2c2      	uxtb	r2, r0
   178ec:	0031      	movs	r1, r6
   178ee:	0028      	movs	r0, r5
   178f0:	4b0a      	ldr	r3, [pc, #40]	; (1791c <xQueueSemaphoreTake+0x30c>)
   178f2:	4798      	blx	r3
				return errQUEUE_EMPTY;
   178f4:	2500      	movs	r5, #0
   178f6:	e6fc      	b.n	176f2 <xQueueSemaphoreTake+0xe2>
   178f8:	0001863d 	.word	0x0001863d
   178fc:	000166b1 	.word	0x000166b1
   17900:	000154b1 	.word	0x000154b1
   17904:	000152fd 	.word	0x000152fd
   17908:	200000c0 	.word	0x200000c0
   1790c:	00015361 	.word	0x00015361
   17910:	000152e1 	.word	0x000152e1
   17914:	200000b8 	.word	0x200000b8
   17918:	00015351 	.word	0x00015351
   1791c:	00016135 	.word	0x00016135
   17920:	000152ed 	.word	0x000152ed
   17924:	00015c09 	.word	0x00015c09
   17928:	0001896d 	.word	0x0001896d
   1792c:	00018479 	.word	0x00018479
   17930:	000166a1 	.word	0x000166a1
   17934:	000166c9 	.word	0x000166c9
   17938:	0001855d 	.word	0x0001855d
   1793c:	000183b1 	.word	0x000183b1
   17940:	00016a01 	.word	0x00016a01
   17944:	00017fc9 	.word	0x00017fc9
   17948:	00017e21 	.word	0x00017e21
   1794c:	00018575 	.word	0x00018575
   17950:	00016825 	.word	0x00016825
   17954:	00015c61 	.word	0x00015c61
   17958:	0001865d 	.word	0x0001865d
   1795c:	00018869 	.word	0x00018869

00017960 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   17960:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
   17962:	4770      	bx	lr

00017964 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   17964:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
   17966:	4770      	bx	lr

00017968 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   17968:	2350      	movs	r3, #80	; 0x50
   1796a:	5cc0      	ldrb	r0, [r0, r3]
	}
   1796c:	4770      	bx	lr
	...

00017970 <vQueueWaitForMessageRestricted>:
	{
   17970:	b570      	push	{r4, r5, r6, lr}
   17972:	0004      	movs	r4, r0
   17974:	000d      	movs	r5, r1
   17976:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
   17978:	4b11      	ldr	r3, [pc, #68]	; (179c0 <vQueueWaitForMessageRestricted+0x50>)
   1797a:	4798      	blx	r3
   1797c:	2344      	movs	r3, #68	; 0x44
   1797e:	5ce3      	ldrb	r3, [r4, r3]
   17980:	b25b      	sxtb	r3, r3
   17982:	3301      	adds	r3, #1
   17984:	d00d      	beq.n	179a2 <vQueueWaitForMessageRestricted+0x32>
   17986:	2345      	movs	r3, #69	; 0x45
   17988:	5ce3      	ldrb	r3, [r4, r3]
   1798a:	b25b      	sxtb	r3, r3
   1798c:	3301      	adds	r3, #1
   1798e:	d00c      	beq.n	179aa <vQueueWaitForMessageRestricted+0x3a>
   17990:	4b0c      	ldr	r3, [pc, #48]	; (179c4 <vQueueWaitForMessageRestricted+0x54>)
   17992:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   17994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17996:	2b00      	cmp	r3, #0
   17998:	d00b      	beq.n	179b2 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
   1799a:	0020      	movs	r0, r4
   1799c:	4b0a      	ldr	r3, [pc, #40]	; (179c8 <vQueueWaitForMessageRestricted+0x58>)
   1799e:	4798      	blx	r3
	}
   179a0:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
   179a2:	2200      	movs	r2, #0
   179a4:	2344      	movs	r3, #68	; 0x44
   179a6:	54e2      	strb	r2, [r4, r3]
   179a8:	e7ed      	b.n	17986 <vQueueWaitForMessageRestricted+0x16>
   179aa:	2200      	movs	r2, #0
   179ac:	2345      	movs	r3, #69	; 0x45
   179ae:	54e2      	strb	r2, [r4, r3]
   179b0:	e7ee      	b.n	17990 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   179b2:	0020      	movs	r0, r4
   179b4:	3024      	adds	r0, #36	; 0x24
   179b6:	0032      	movs	r2, r6
   179b8:	0029      	movs	r1, r5
   179ba:	4b04      	ldr	r3, [pc, #16]	; (179cc <vQueueWaitForMessageRestricted+0x5c>)
   179bc:	4798      	blx	r3
   179be:	e7ec      	b.n	1799a <vQueueWaitForMessageRestricted+0x2a>
   179c0:	000166b1 	.word	0x000166b1
   179c4:	000166c9 	.word	0x000166c9
   179c8:	00016a01 	.word	0x00016a01
   179cc:	000183dd 	.word	0x000183dd

000179d0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   179d0:	4b08      	ldr	r3, [pc, #32]	; (179f4 <prvResetNextTaskUnblockTime+0x24>)
   179d2:	681b      	ldr	r3, [r3, #0]
   179d4:	681b      	ldr	r3, [r3, #0]
   179d6:	2b00      	cmp	r3, #0
   179d8:	d007      	beq.n	179ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   179da:	4b06      	ldr	r3, [pc, #24]	; (179f4 <prvResetNextTaskUnblockTime+0x24>)
   179dc:	681b      	ldr	r3, [r3, #0]
   179de:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   179e0:	68db      	ldr	r3, [r3, #12]
   179e2:	685a      	ldr	r2, [r3, #4]
   179e4:	4b04      	ldr	r3, [pc, #16]	; (179f8 <prvResetNextTaskUnblockTime+0x28>)
   179e6:	601a      	str	r2, [r3, #0]
	}
}
   179e8:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   179ea:	2201      	movs	r2, #1
   179ec:	4252      	negs	r2, r2
   179ee:	4b02      	ldr	r3, [pc, #8]	; (179f8 <prvResetNextTaskUnblockTime+0x28>)
   179f0:	601a      	str	r2, [r3, #0]
   179f2:	e7f9      	b.n	179e8 <prvResetNextTaskUnblockTime+0x18>
   179f4:	20003b18 	.word	0x20003b18
   179f8:	20003bc8 	.word	0x20003bc8

000179fc <prvIdleTask>:
{
   179fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   179fe:	46d6      	mov	lr, sl
   17a00:	464f      	mov	r7, r9
   17a02:	4646      	mov	r6, r8
   17a04:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17a06:	4b14      	ldr	r3, [pc, #80]	; (17a58 <prvIdleTask+0x5c>)
   17a08:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
   17a0a:	4b14      	ldr	r3, [pc, #80]	; (17a5c <prvIdleTask+0x60>)
   17a0c:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   17a0e:	4f14      	ldr	r7, [pc, #80]	; (17a60 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17a10:	4b14      	ldr	r3, [pc, #80]	; (17a64 <prvIdleTask+0x68>)
   17a12:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17a14:	464b      	mov	r3, r9
   17a16:	681b      	ldr	r3, [r3, #0]
   17a18:	2b00      	cmp	r3, #0
   17a1a:	d016      	beq.n	17a4a <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
   17a1c:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   17a1e:	68fb      	ldr	r3, [r7, #12]
   17a20:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17a22:	1d28      	adds	r0, r5, #4
   17a24:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
   17a26:	4a10      	ldr	r2, [pc, #64]	; (17a68 <prvIdleTask+0x6c>)
   17a28:	6813      	ldr	r3, [r2, #0]
   17a2a:	3b01      	subs	r3, #1
   17a2c:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   17a2e:	4c0a      	ldr	r4, [pc, #40]	; (17a58 <prvIdleTask+0x5c>)
   17a30:	6823      	ldr	r3, [r4, #0]
   17a32:	3b01      	subs	r3, #1
   17a34:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
   17a36:	4b0d      	ldr	r3, [pc, #52]	; (17a6c <prvIdleTask+0x70>)
   17a38:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   17a3a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   17a3c:	4e0c      	ldr	r6, [pc, #48]	; (17a70 <prvIdleTask+0x74>)
   17a3e:	47b0      	blx	r6
			vPortFree( pxTCB );
   17a40:	0028      	movs	r0, r5
   17a42:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17a44:	6823      	ldr	r3, [r4, #0]
   17a46:	2b00      	cmp	r3, #0
   17a48:	d1e8      	bne.n	17a1c <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   17a4a:	4b0a      	ldr	r3, [pc, #40]	; (17a74 <prvIdleTask+0x78>)
   17a4c:	681b      	ldr	r3, [r3, #0]
   17a4e:	2b01      	cmp	r3, #1
   17a50:	d9e0      	bls.n	17a14 <prvIdleTask+0x18>
				taskYIELD();
   17a52:	4b09      	ldr	r3, [pc, #36]	; (17a78 <prvIdleTask+0x7c>)
   17a54:	4798      	blx	r3
   17a56:	e7dd      	b.n	17a14 <prvIdleTask+0x18>
   17a58:	20003b88 	.word	0x20003b88
   17a5c:	000166b1 	.word	0x000166b1
   17a60:	20003bfc 	.word	0x20003bfc
   17a64:	0001657b 	.word	0x0001657b
   17a68:	20003b84 	.word	0x20003b84
   17a6c:	000166c9 	.word	0x000166c9
   17a70:	00016805 	.word	0x00016805
   17a74:	20003b20 	.word	0x20003b20
   17a78:	000166a1 	.word	0x000166a1

00017a7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   17a7c:	b570      	push	{r4, r5, r6, lr}
   17a7e:	0004      	movs	r4, r0
   17a80:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   17a82:	4b17      	ldr	r3, [pc, #92]	; (17ae0 <prvAddCurrentTaskToDelayedList+0x64>)
   17a84:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   17a86:	4b17      	ldr	r3, [pc, #92]	; (17ae4 <prvAddCurrentTaskToDelayedList+0x68>)
   17a88:	6818      	ldr	r0, [r3, #0]
   17a8a:	3004      	adds	r0, #4
   17a8c:	4b16      	ldr	r3, [pc, #88]	; (17ae8 <prvAddCurrentTaskToDelayedList+0x6c>)
   17a8e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17a90:	1c63      	adds	r3, r4, #1
   17a92:	d013      	beq.n	17abc <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   17a94:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   17a96:	4b13      	ldr	r3, [pc, #76]	; (17ae4 <prvAddCurrentTaskToDelayedList+0x68>)
   17a98:	681b      	ldr	r3, [r3, #0]
   17a9a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   17a9c:	42a6      	cmp	r6, r4
   17a9e:	d816      	bhi.n	17ace <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17aa0:	4b12      	ldr	r3, [pc, #72]	; (17aec <prvAddCurrentTaskToDelayedList+0x70>)
   17aa2:	6818      	ldr	r0, [r3, #0]
   17aa4:	4b0f      	ldr	r3, [pc, #60]	; (17ae4 <prvAddCurrentTaskToDelayedList+0x68>)
   17aa6:	6819      	ldr	r1, [r3, #0]
   17aa8:	3104      	adds	r1, #4
   17aaa:	4b11      	ldr	r3, [pc, #68]	; (17af0 <prvAddCurrentTaskToDelayedList+0x74>)
   17aac:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   17aae:	4b11      	ldr	r3, [pc, #68]	; (17af4 <prvAddCurrentTaskToDelayedList+0x78>)
   17ab0:	681b      	ldr	r3, [r3, #0]
   17ab2:	429c      	cmp	r4, r3
   17ab4:	d212      	bcs.n	17adc <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
   17ab6:	4b0f      	ldr	r3, [pc, #60]	; (17af4 <prvAddCurrentTaskToDelayedList+0x78>)
   17ab8:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   17aba:	e00f      	b.n	17adc <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17abc:	2d00      	cmp	r5, #0
   17abe:	d0e9      	beq.n	17a94 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17ac0:	4b08      	ldr	r3, [pc, #32]	; (17ae4 <prvAddCurrentTaskToDelayedList+0x68>)
   17ac2:	6819      	ldr	r1, [r3, #0]
   17ac4:	3104      	adds	r1, #4
   17ac6:	480c      	ldr	r0, [pc, #48]	; (17af8 <prvAddCurrentTaskToDelayedList+0x7c>)
   17ac8:	4b0c      	ldr	r3, [pc, #48]	; (17afc <prvAddCurrentTaskToDelayedList+0x80>)
   17aca:	4798      	blx	r3
   17acc:	e006      	b.n	17adc <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17ace:	4b0c      	ldr	r3, [pc, #48]	; (17b00 <prvAddCurrentTaskToDelayedList+0x84>)
   17ad0:	6818      	ldr	r0, [r3, #0]
   17ad2:	4b04      	ldr	r3, [pc, #16]	; (17ae4 <prvAddCurrentTaskToDelayedList+0x68>)
   17ad4:	6819      	ldr	r1, [r3, #0]
   17ad6:	3104      	adds	r1, #4
   17ad8:	4b05      	ldr	r3, [pc, #20]	; (17af0 <prvAddCurrentTaskToDelayedList+0x74>)
   17ada:	4798      	blx	r3
}
   17adc:	bd70      	pop	{r4, r5, r6, pc}
   17ade:	46c0      	nop			; (mov r8, r8)
   17ae0:	20003c10 	.word	0x20003c10
   17ae4:	20003b14 	.word	0x20003b14
   17ae8:	0001657b 	.word	0x0001657b
   17aec:	20003b18 	.word	0x20003b18
   17af0:	0001654d 	.word	0x0001654d
   17af4:	20003bc8 	.word	0x20003bc8
   17af8:	20003be8 	.word	0x20003be8
   17afc:	00016535 	.word	0x00016535
   17b00:	20003b1c 	.word	0x20003b1c

00017b04 <xTaskCreate>:
	{
   17b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b06:	46c6      	mov	lr, r8
   17b08:	b500      	push	{lr}
   17b0a:	b084      	sub	sp, #16
   17b0c:	9001      	str	r0, [sp, #4]
   17b0e:	000d      	movs	r5, r1
   17b10:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17b12:	0097      	lsls	r7, r2, #2
   17b14:	0038      	movs	r0, r7
   17b16:	4b82      	ldr	r3, [pc, #520]	; (17d20 <xTaskCreate+0x21c>)
   17b18:	4798      	blx	r3
   17b1a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
   17b1c:	d100      	bne.n	17b20 <xTaskCreate+0x1c>
   17b1e:	e0b9      	b.n	17c94 <xTaskCreate+0x190>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   17b20:	2054      	movs	r0, #84	; 0x54
   17b22:	4b7f      	ldr	r3, [pc, #508]	; (17d20 <xTaskCreate+0x21c>)
   17b24:	4798      	blx	r3
   17b26:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
   17b28:	d100      	bne.n	17b2c <xTaskCreate+0x28>
   17b2a:	e0b0      	b.n	17c8e <xTaskCreate+0x18a>
					pxNewTCB->pxStack = pxStack;
   17b2c:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   17b2e:	003a      	movs	r2, r7
   17b30:	21a5      	movs	r1, #165	; 0xa5
   17b32:	0030      	movs	r0, r6
   17b34:	4b7b      	ldr	r3, [pc, #492]	; (17d24 <xTaskCreate+0x220>)
   17b36:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   17b38:	1f3a      	subs	r2, r7, #4
   17b3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17b3c:	469c      	mov	ip, r3
   17b3e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   17b40:	2307      	movs	r3, #7
   17b42:	439a      	bics	r2, r3
   17b44:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17b46:	782a      	ldrb	r2, [r5, #0]
   17b48:	332d      	adds	r3, #45	; 0x2d
   17b4a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
   17b4c:	782b      	ldrb	r3, [r5, #0]
   17b4e:	2b00      	cmp	r3, #0
   17b50:	d00d      	beq.n	17b6e <xTaskCreate+0x6a>
   17b52:	3501      	adds	r5, #1
   17b54:	0023      	movs	r3, r4
   17b56:	3335      	adds	r3, #53	; 0x35
   17b58:	0020      	movs	r0, r4
   17b5a:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17b5c:	782a      	ldrb	r2, [r5, #0]
   17b5e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
   17b60:	782a      	ldrb	r2, [r5, #0]
   17b62:	2a00      	cmp	r2, #0
   17b64:	d003      	beq.n	17b6e <xTaskCreate+0x6a>
   17b66:	3501      	adds	r5, #1
   17b68:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   17b6a:	4283      	cmp	r3, r0
   17b6c:	d1f6      	bne.n	17b5c <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   17b6e:	2200      	movs	r2, #0
   17b70:	233b      	movs	r3, #59	; 0x3b
   17b72:	54e2      	strb	r2, [r4, r3]
   17b74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   17b76:	2f04      	cmp	r7, #4
   17b78:	d900      	bls.n	17b7c <xTaskCreate+0x78>
   17b7a:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
   17b7c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   17b7e:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   17b80:	2600      	movs	r6, #0
   17b82:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   17b84:	1d23      	adds	r3, r4, #4
   17b86:	9303      	str	r3, [sp, #12]
   17b88:	0018      	movs	r0, r3
   17b8a:	4d67      	ldr	r5, [pc, #412]	; (17d28 <xTaskCreate+0x224>)
   17b8c:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   17b8e:	0020      	movs	r0, r4
   17b90:	3018      	adds	r0, #24
   17b92:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   17b94:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17b96:	2305      	movs	r3, #5
   17b98:	1bdb      	subs	r3, r3, r7
   17b9a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   17b9c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   17b9e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   17ba0:	2350      	movs	r3, #80	; 0x50
   17ba2:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   17ba4:	9a02      	ldr	r2, [sp, #8]
   17ba6:	9901      	ldr	r1, [sp, #4]
   17ba8:	4640      	mov	r0, r8
   17baa:	4b60      	ldr	r3, [pc, #384]	; (17d2c <xTaskCreate+0x228>)
   17bac:	4798      	blx	r3
   17bae:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   17bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17bb2:	2b00      	cmp	r3, #0
   17bb4:	d000      	beq.n	17bb8 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   17bb6:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   17bb8:	4b5d      	ldr	r3, [pc, #372]	; (17d30 <xTaskCreate+0x22c>)
   17bba:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   17bbc:	4a5d      	ldr	r2, [pc, #372]	; (17d34 <xTaskCreate+0x230>)
   17bbe:	6813      	ldr	r3, [r2, #0]
   17bc0:	3301      	adds	r3, #1
   17bc2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   17bc4:	4b5c      	ldr	r3, [pc, #368]	; (17d38 <xTaskCreate+0x234>)
   17bc6:	681b      	ldr	r3, [r3, #0]
   17bc8:	2b00      	cmp	r3, #0
   17bca:	d066      	beq.n	17c9a <xTaskCreate+0x196>
			if( xSchedulerRunning == pdFALSE )
   17bcc:	4b5b      	ldr	r3, [pc, #364]	; (17d3c <xTaskCreate+0x238>)
   17bce:	681b      	ldr	r3, [r3, #0]
   17bd0:	2b00      	cmp	r3, #0
   17bd2:	d107      	bne.n	17be4 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   17bd4:	4b58      	ldr	r3, [pc, #352]	; (17d38 <xTaskCreate+0x234>)
   17bd6:	681b      	ldr	r3, [r3, #0]
   17bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17bdc:	4293      	cmp	r3, r2
   17bde:	d801      	bhi.n	17be4 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
   17be0:	4b55      	ldr	r3, [pc, #340]	; (17d38 <xTaskCreate+0x234>)
   17be2:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
   17be4:	4a56      	ldr	r2, [pc, #344]	; (17d40 <xTaskCreate+0x23c>)
   17be6:	6813      	ldr	r3, [r2, #0]
   17be8:	3301      	adds	r3, #1
   17bea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   17bec:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
   17bee:	2003      	movs	r0, #3
   17bf0:	4b54      	ldr	r3, [pc, #336]	; (17d44 <xTaskCreate+0x240>)
   17bf2:	4798      	blx	r3
   17bf4:	b281      	uxth	r1, r0
   17bf6:	0020      	movs	r0, r4
   17bf8:	4b53      	ldr	r3, [pc, #332]	; (17d48 <xTaskCreate+0x244>)
   17bfa:	4798      	blx	r3
   17bfc:	4b53      	ldr	r3, [pc, #332]	; (17d4c <xTaskCreate+0x248>)
   17bfe:	8819      	ldrh	r1, [r3, #0]
   17c00:	0020      	movs	r0, r4
   17c02:	4b53      	ldr	r3, [pc, #332]	; (17d50 <xTaskCreate+0x24c>)
   17c04:	4798      	blx	r3
   17c06:	0020      	movs	r0, r4
   17c08:	4e52      	ldr	r6, [pc, #328]	; (17d54 <xTaskCreate+0x250>)
   17c0a:	47b0      	blx	r6
   17c0c:	0022      	movs	r2, r4
   17c0e:	3234      	adds	r2, #52	; 0x34
   17c10:	b2c1      	uxtb	r1, r0
   17c12:	2003      	movs	r0, #3
   17c14:	4b50      	ldr	r3, [pc, #320]	; (17d58 <xTaskCreate+0x254>)
   17c16:	4798      	blx	r3
   17c18:	0020      	movs	r0, r4
   17c1a:	47b0      	blx	r6
   17c1c:	232c      	movs	r3, #44	; 0x2c
   17c1e:	18e3      	adds	r3, r4, r3
   17c20:	781a      	ldrb	r2, [r3, #0]
   17c22:	b2c1      	uxtb	r1, r0
   17c24:	2003      	movs	r0, #3
   17c26:	4b4d      	ldr	r3, [pc, #308]	; (17d5c <xTaskCreate+0x258>)
   17c28:	4798      	blx	r3
   17c2a:	4b4d      	ldr	r3, [pc, #308]	; (17d60 <xTaskCreate+0x25c>)
   17c2c:	4798      	blx	r3
   17c2e:	4b4d      	ldr	r3, [pc, #308]	; (17d64 <xTaskCreate+0x260>)
   17c30:	4798      	blx	r3
   17c32:	4b4d      	ldr	r3, [pc, #308]	; (17d68 <xTaskCreate+0x264>)
   17c34:	881b      	ldrh	r3, [r3, #0]
   17c36:	4203      	tst	r3, r0
   17c38:	d157      	bne.n	17cea <xTaskCreate+0x1e6>
   17c3a:	0020      	movs	r0, r4
   17c3c:	4b4b      	ldr	r3, [pc, #300]	; (17d6c <xTaskCreate+0x268>)
   17c3e:	4798      	blx	r3
		prvAddTaskToReadyList( pxNewTCB );
   17c40:	0020      	movs	r0, r4
   17c42:	4b48      	ldr	r3, [pc, #288]	; (17d64 <xTaskCreate+0x260>)
   17c44:	4798      	blx	r3
   17c46:	4b48      	ldr	r3, [pc, #288]	; (17d68 <xTaskCreate+0x264>)
   17c48:	881b      	ldrh	r3, [r3, #0]
   17c4a:	4203      	tst	r3, r0
   17c4c:	d15d      	bne.n	17d0a <xTaskCreate+0x206>
   17c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17c50:	4a47      	ldr	r2, [pc, #284]	; (17d70 <xTaskCreate+0x26c>)
   17c52:	6812      	ldr	r2, [r2, #0]
   17c54:	4293      	cmp	r3, r2
   17c56:	d901      	bls.n	17c5c <xTaskCreate+0x158>
   17c58:	4a45      	ldr	r2, [pc, #276]	; (17d70 <xTaskCreate+0x26c>)
   17c5a:	6013      	str	r3, [r2, #0]
   17c5c:	0098      	lsls	r0, r3, #2
   17c5e:	18c0      	adds	r0, r0, r3
   17c60:	0080      	lsls	r0, r0, #2
   17c62:	4b44      	ldr	r3, [pc, #272]	; (17d74 <xTaskCreate+0x270>)
   17c64:	1818      	adds	r0, r3, r0
   17c66:	9903      	ldr	r1, [sp, #12]
   17c68:	4b43      	ldr	r3, [pc, #268]	; (17d78 <xTaskCreate+0x274>)
   17c6a:	4798      	blx	r3
	taskEXIT_CRITICAL();
   17c6c:	4b43      	ldr	r3, [pc, #268]	; (17d7c <xTaskCreate+0x278>)
   17c6e:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   17c70:	4b32      	ldr	r3, [pc, #200]	; (17d3c <xTaskCreate+0x238>)
   17c72:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
   17c74:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
   17c76:	2b00      	cmp	r3, #0
   17c78:	d005      	beq.n	17c86 <xTaskCreate+0x182>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   17c7a:	4b2f      	ldr	r3, [pc, #188]	; (17d38 <xTaskCreate+0x234>)
   17c7c:	681b      	ldr	r3, [r3, #0]
   17c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17c82:	429a      	cmp	r2, r3
   17c84:	d348      	bcc.n	17d18 <xTaskCreate+0x214>
	}
   17c86:	b004      	add	sp, #16
   17c88:	bc04      	pop	{r2}
   17c8a:	4690      	mov	r8, r2
   17c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
   17c8e:	0030      	movs	r0, r6
   17c90:	4b3b      	ldr	r3, [pc, #236]	; (17d80 <xTaskCreate+0x27c>)
   17c92:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   17c94:	2001      	movs	r0, #1
   17c96:	4240      	negs	r0, r0
   17c98:	e7f5      	b.n	17c86 <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
   17c9a:	4b27      	ldr	r3, [pc, #156]	; (17d38 <xTaskCreate+0x234>)
   17c9c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   17c9e:	6813      	ldr	r3, [r2, #0]
   17ca0:	2b01      	cmp	r3, #1
   17ca2:	d19f      	bne.n	17be4 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   17ca4:	4f33      	ldr	r7, [pc, #204]	; (17d74 <xTaskCreate+0x270>)
   17ca6:	0038      	movs	r0, r7
   17ca8:	4e36      	ldr	r6, [pc, #216]	; (17d84 <xTaskCreate+0x280>)
   17caa:	47b0      	blx	r6
   17cac:	0038      	movs	r0, r7
   17cae:	3014      	adds	r0, #20
   17cb0:	47b0      	blx	r6
   17cb2:	0038      	movs	r0, r7
   17cb4:	3028      	adds	r0, #40	; 0x28
   17cb6:	47b0      	blx	r6
   17cb8:	0038      	movs	r0, r7
   17cba:	303c      	adds	r0, #60	; 0x3c
   17cbc:	47b0      	blx	r6
   17cbe:	0038      	movs	r0, r7
   17cc0:	3050      	adds	r0, #80	; 0x50
   17cc2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
   17cc4:	4b30      	ldr	r3, [pc, #192]	; (17d88 <xTaskCreate+0x284>)
   17cc6:	4698      	mov	r8, r3
   17cc8:	0018      	movs	r0, r3
   17cca:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
   17ccc:	4f2f      	ldr	r7, [pc, #188]	; (17d8c <xTaskCreate+0x288>)
   17cce:	0038      	movs	r0, r7
   17cd0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
   17cd2:	482f      	ldr	r0, [pc, #188]	; (17d90 <xTaskCreate+0x28c>)
   17cd4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
   17cd6:	482f      	ldr	r0, [pc, #188]	; (17d94 <xTaskCreate+0x290>)
   17cd8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
   17cda:	482f      	ldr	r0, [pc, #188]	; (17d98 <xTaskCreate+0x294>)
   17cdc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
   17cde:	4b2f      	ldr	r3, [pc, #188]	; (17d9c <xTaskCreate+0x298>)
   17ce0:	4642      	mov	r2, r8
   17ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   17ce4:	4b2e      	ldr	r3, [pc, #184]	; (17da0 <xTaskCreate+0x29c>)
   17ce6:	601f      	str	r7, [r3, #0]
   17ce8:	e77c      	b.n	17be4 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
   17cea:	0020      	movs	r0, r4
   17cec:	4b1d      	ldr	r3, [pc, #116]	; (17d64 <xTaskCreate+0x260>)
   17cee:	4798      	blx	r3
   17cf0:	4b1d      	ldr	r3, [pc, #116]	; (17d68 <xTaskCreate+0x264>)
   17cf2:	881b      	ldrh	r3, [r3, #0]
   17cf4:	4203      	tst	r3, r0
   17cf6:	d0a0      	beq.n	17c3a <xTaskCreate+0x136>
   17cf8:	0020      	movs	r0, r4
   17cfa:	4b16      	ldr	r3, [pc, #88]	; (17d54 <xTaskCreate+0x250>)
   17cfc:	4798      	blx	r3
   17cfe:	b2c2      	uxtb	r2, r0
   17d00:	2103      	movs	r1, #3
   17d02:	201b      	movs	r0, #27
   17d04:	4b27      	ldr	r3, [pc, #156]	; (17da4 <xTaskCreate+0x2a0>)
   17d06:	4798      	blx	r3
   17d08:	e797      	b.n	17c3a <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
   17d0a:	0020      	movs	r0, r4
   17d0c:	4b11      	ldr	r3, [pc, #68]	; (17d54 <xTaskCreate+0x250>)
   17d0e:	4798      	blx	r3
   17d10:	b2c0      	uxtb	r0, r0
   17d12:	4b25      	ldr	r3, [pc, #148]	; (17da8 <xTaskCreate+0x2a4>)
   17d14:	4798      	blx	r3
   17d16:	e79a      	b.n	17c4e <xTaskCreate+0x14a>
			taskYIELD_IF_USING_PREEMPTION();
   17d18:	4b24      	ldr	r3, [pc, #144]	; (17dac <xTaskCreate+0x2a8>)
   17d1a:	4798      	blx	r3
			xReturn = pdPASS;
   17d1c:	2001      	movs	r0, #1
   17d1e:	e7b2      	b.n	17c86 <xTaskCreate+0x182>
   17d20:	00016775 	.word	0x00016775
   17d24:	00026253 	.word	0x00026253
   17d28:	0001652f 	.word	0x0001652f
   17d2c:	00016605 	.word	0x00016605
   17d30:	000166b1 	.word	0x000166b1
   17d34:	20003b84 	.word	0x20003b84
   17d38:	20003b14 	.word	0x20003b14
   17d3c:	20003be4 	.word	0x20003be4
   17d40:	20003b94 	.word	0x20003b94
   17d44:	00015ca1 	.word	0x00015ca1
   17d48:	0001530d 	.word	0x0001530d
   17d4c:	200000be 	.word	0x200000be
   17d50:	0001532d 	.word	0x0001532d
   17d54:	000152ed 	.word	0x000152ed
   17d58:	00015d75 	.word	0x00015d75
   17d5c:	00015b55 	.word	0x00015b55
   17d60:	000154b1 	.word	0x000154b1
   17d64:	000152fd 	.word	0x000152fd
   17d68:	200000c0 	.word	0x200000c0
   17d6c:	000153b5 	.word	0x000153b5
   17d70:	20003b98 	.word	0x20003b98
   17d74:	20003b20 	.word	0x20003b20
   17d78:	00016535 	.word	0x00016535
   17d7c:	000166c9 	.word	0x000166c9
   17d80:	00016805 	.word	0x00016805
   17d84:	00016519 	.word	0x00016519
   17d88:	20003b9c 	.word	0x20003b9c
   17d8c:	20003bb0 	.word	0x20003bb0
   17d90:	20003bd0 	.word	0x20003bd0
   17d94:	20003bfc 	.word	0x20003bfc
   17d98:	20003be8 	.word	0x20003be8
   17d9c:	20003b18 	.word	0x20003b18
   17da0:	20003b1c 	.word	0x20003b1c
   17da4:	00016135 	.word	0x00016135
   17da8:	00015fcd 	.word	0x00015fcd
   17dac:	000166a1 	.word	0x000166a1

00017db0 <vTaskStartScheduler>:
{
   17db0:	b510      	push	{r4, lr}
   17db2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   17db4:	4b11      	ldr	r3, [pc, #68]	; (17dfc <vTaskStartScheduler+0x4c>)
   17db6:	9301      	str	r3, [sp, #4]
   17db8:	2300      	movs	r3, #0
   17dba:	9300      	str	r3, [sp, #0]
   17dbc:	2264      	movs	r2, #100	; 0x64
   17dbe:	4910      	ldr	r1, [pc, #64]	; (17e00 <vTaskStartScheduler+0x50>)
   17dc0:	4810      	ldr	r0, [pc, #64]	; (17e04 <vTaskStartScheduler+0x54>)
   17dc2:	4c11      	ldr	r4, [pc, #68]	; (17e08 <vTaskStartScheduler+0x58>)
   17dc4:	47a0      	blx	r4
		if( xReturn == pdPASS )
   17dc6:	2801      	cmp	r0, #1
   17dc8:	d003      	beq.n	17dd2 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17dca:	1c43      	adds	r3, r0, #1
   17dcc:	d013      	beq.n	17df6 <vTaskStartScheduler+0x46>
}
   17dce:	b002      	add	sp, #8
   17dd0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   17dd2:	4b0e      	ldr	r3, [pc, #56]	; (17e0c <vTaskStartScheduler+0x5c>)
   17dd4:	4798      	blx	r3
	if( xReturn == pdPASS )
   17dd6:	2801      	cmp	r0, #1
   17dd8:	d1f7      	bne.n	17dca <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
   17dda:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
   17ddc:	2201      	movs	r2, #1
   17dde:	4252      	negs	r2, r2
   17de0:	4b0b      	ldr	r3, [pc, #44]	; (17e10 <vTaskStartScheduler+0x60>)
   17de2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   17de4:	3202      	adds	r2, #2
   17de6:	4b0b      	ldr	r3, [pc, #44]	; (17e14 <vTaskStartScheduler+0x64>)
   17de8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   17dea:	2200      	movs	r2, #0
   17dec:	4b0a      	ldr	r3, [pc, #40]	; (17e18 <vTaskStartScheduler+0x68>)
   17dee:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   17df0:	4b0a      	ldr	r3, [pc, #40]	; (17e1c <vTaskStartScheduler+0x6c>)
   17df2:	4798      	blx	r3
   17df4:	e7eb      	b.n	17dce <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17df6:	b672      	cpsid	i
   17df8:	e7fe      	b.n	17df8 <vTaskStartScheduler+0x48>
   17dfa:	46c0      	nop			; (mov r8, r8)
   17dfc:	20003bc4 	.word	0x20003bc4
   17e00:	00029464 	.word	0x00029464
   17e04:	000179fd 	.word	0x000179fd
   17e08:	00017b05 	.word	0x00017b05
   17e0c:	00018a31 	.word	0x00018a31
   17e10:	20003bc8 	.word	0x20003bc8
   17e14:	20003be4 	.word	0x20003be4
   17e18:	20003c10 	.word	0x20003c10
   17e1c:	00016629 	.word	0x00016629

00017e20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   17e20:	4a02      	ldr	r2, [pc, #8]	; (17e2c <vTaskSuspendAll+0xc>)
   17e22:	6813      	ldr	r3, [r2, #0]
   17e24:	3301      	adds	r3, #1
   17e26:	6013      	str	r3, [r2, #0]
}
   17e28:	4770      	bx	lr
   17e2a:	46c0      	nop			; (mov r8, r8)
   17e2c:	20003b90 	.word	0x20003b90

00017e30 <xTaskGetTickCount>:
		xTicks = xTickCount;
   17e30:	4b01      	ldr	r3, [pc, #4]	; (17e38 <xTaskGetTickCount+0x8>)
   17e32:	6818      	ldr	r0, [r3, #0]
}
   17e34:	4770      	bx	lr
   17e36:	46c0      	nop			; (mov r8, r8)
   17e38:	20003c10 	.word	0x20003c10

00017e3c <xTaskIncrementTick>:
{
   17e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e3e:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
   17e40:	4b4c      	ldr	r3, [pc, #304]	; (17f74 <xTaskIncrementTick+0x138>)
   17e42:	681b      	ldr	r3, [r3, #0]
   17e44:	2b01      	cmp	r3, #1
   17e46:	d003      	beq.n	17e50 <xTaskIncrementTick+0x14>
   17e48:	4b4b      	ldr	r3, [pc, #300]	; (17f78 <xTaskIncrementTick+0x13c>)
   17e4a:	681b      	ldr	r3, [r3, #0]
   17e4c:	2b00      	cmp	r3, #0
   17e4e:	d106      	bne.n	17e5e <xTaskIncrementTick+0x22>
   17e50:	4a4a      	ldr	r2, [pc, #296]	; (17f7c <xTaskIncrementTick+0x140>)
   17e52:	6813      	ldr	r3, [r2, #0]
   17e54:	3301      	adds	r3, #1
   17e56:	6013      	str	r3, [r2, #0]
   17e58:	2000      	movs	r0, #0
   17e5a:	4b49      	ldr	r3, [pc, #292]	; (17f80 <xTaskIncrementTick+0x144>)
   17e5c:	4798      	blx	r3
   17e5e:	4b45      	ldr	r3, [pc, #276]	; (17f74 <xTaskIncrementTick+0x138>)
   17e60:	681b      	ldr	r3, [r3, #0]
   17e62:	2b00      	cmp	r3, #0
   17e64:	d010      	beq.n	17e88 <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17e66:	4b43      	ldr	r3, [pc, #268]	; (17f74 <xTaskIncrementTick+0x138>)
   17e68:	681b      	ldr	r3, [r3, #0]
   17e6a:	2b00      	cmp	r3, #0
   17e6c:	d175      	bne.n	17f5a <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   17e6e:	4b45      	ldr	r3, [pc, #276]	; (17f84 <xTaskIncrementTick+0x148>)
   17e70:	681e      	ldr	r6, [r3, #0]
   17e72:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   17e74:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   17e76:	2e00      	cmp	r6, #0
   17e78:	d119      	bne.n	17eae <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
   17e7a:	4b43      	ldr	r3, [pc, #268]	; (17f88 <xTaskIncrementTick+0x14c>)
   17e7c:	681b      	ldr	r3, [r3, #0]
   17e7e:	681b      	ldr	r3, [r3, #0]
   17e80:	2b00      	cmp	r3, #0
   17e82:	d008      	beq.n	17e96 <xTaskIncrementTick+0x5a>
   17e84:	b672      	cpsid	i
   17e86:	e7fe      	b.n	17e86 <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
   17e88:	4b3e      	ldr	r3, [pc, #248]	; (17f84 <xTaskIncrementTick+0x148>)
   17e8a:	6819      	ldr	r1, [r3, #0]
   17e8c:	3101      	adds	r1, #1
   17e8e:	2003      	movs	r0, #3
   17e90:	4b3e      	ldr	r3, [pc, #248]	; (17f8c <xTaskIncrementTick+0x150>)
   17e92:	4798      	blx	r3
   17e94:	e7e7      	b.n	17e66 <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
   17e96:	4a3c      	ldr	r2, [pc, #240]	; (17f88 <xTaskIncrementTick+0x14c>)
   17e98:	6811      	ldr	r1, [r2, #0]
   17e9a:	4b3d      	ldr	r3, [pc, #244]	; (17f90 <xTaskIncrementTick+0x154>)
   17e9c:	6818      	ldr	r0, [r3, #0]
   17e9e:	6010      	str	r0, [r2, #0]
   17ea0:	6019      	str	r1, [r3, #0]
   17ea2:	4a3c      	ldr	r2, [pc, #240]	; (17f94 <xTaskIncrementTick+0x158>)
   17ea4:	6813      	ldr	r3, [r2, #0]
   17ea6:	3301      	adds	r3, #1
   17ea8:	6013      	str	r3, [r2, #0]
   17eaa:	4b3b      	ldr	r3, [pc, #236]	; (17f98 <xTaskIncrementTick+0x15c>)
   17eac:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   17eae:	4b3b      	ldr	r3, [pc, #236]	; (17f9c <xTaskIncrementTick+0x160>)
   17eb0:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17eb2:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
   17eb4:	429e      	cmp	r6, r3
   17eb6:	d33a      	bcc.n	17f2e <xTaskIncrementTick+0xf2>
   17eb8:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17eba:	4f33      	ldr	r7, [pc, #204]	; (17f88 <xTaskIncrementTick+0x14c>)
   17ebc:	683b      	ldr	r3, [r7, #0]
   17ebe:	681b      	ldr	r3, [r3, #0]
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d030      	beq.n	17f26 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   17ec4:	4b30      	ldr	r3, [pc, #192]	; (17f88 <xTaskIncrementTick+0x14c>)
   17ec6:	681b      	ldr	r3, [r3, #0]
   17ec8:	68db      	ldr	r3, [r3, #12]
   17eca:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   17ecc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
   17ece:	429e      	cmp	r6, r3
   17ed0:	d339      	bcc.n	17f46 <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17ed2:	1d23      	adds	r3, r4, #4
   17ed4:	9301      	str	r3, [sp, #4]
   17ed6:	0018      	movs	r0, r3
   17ed8:	4b31      	ldr	r3, [pc, #196]	; (17fa0 <xTaskIncrementTick+0x164>)
   17eda:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   17edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17ede:	2b00      	cmp	r3, #0
   17ee0:	d003      	beq.n	17eea <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   17ee2:	0020      	movs	r0, r4
   17ee4:	3018      	adds	r0, #24
   17ee6:	4b2e      	ldr	r3, [pc, #184]	; (17fa0 <xTaskIncrementTick+0x164>)
   17ee8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   17eea:	0020      	movs	r0, r4
   17eec:	4b2d      	ldr	r3, [pc, #180]	; (17fa4 <xTaskIncrementTick+0x168>)
   17eee:	4798      	blx	r3
   17ef0:	4b2d      	ldr	r3, [pc, #180]	; (17fa8 <xTaskIncrementTick+0x16c>)
   17ef2:	881b      	ldrh	r3, [r3, #0]
   17ef4:	4203      	tst	r3, r0
   17ef6:	d129      	bne.n	17f4c <xTaskIncrementTick+0x110>
   17ef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17efa:	4a2c      	ldr	r2, [pc, #176]	; (17fac <xTaskIncrementTick+0x170>)
   17efc:	6812      	ldr	r2, [r2, #0]
   17efe:	4293      	cmp	r3, r2
   17f00:	d901      	bls.n	17f06 <xTaskIncrementTick+0xca>
   17f02:	4a2a      	ldr	r2, [pc, #168]	; (17fac <xTaskIncrementTick+0x170>)
   17f04:	6013      	str	r3, [r2, #0]
   17f06:	0098      	lsls	r0, r3, #2
   17f08:	18c0      	adds	r0, r0, r3
   17f0a:	0080      	lsls	r0, r0, #2
   17f0c:	4b28      	ldr	r3, [pc, #160]	; (17fb0 <xTaskIncrementTick+0x174>)
   17f0e:	1818      	adds	r0, r3, r0
   17f10:	9901      	ldr	r1, [sp, #4]
   17f12:	4b28      	ldr	r3, [pc, #160]	; (17fb4 <xTaskIncrementTick+0x178>)
   17f14:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   17f16:	4b28      	ldr	r3, [pc, #160]	; (17fb8 <xTaskIncrementTick+0x17c>)
   17f18:	681b      	ldr	r3, [r3, #0]
   17f1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17f1e:	429a      	cmp	r2, r3
   17f20:	d3cc      	bcc.n	17ebc <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
   17f22:	2501      	movs	r5, #1
   17f24:	e7ca      	b.n	17ebc <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17f26:	2201      	movs	r2, #1
   17f28:	4252      	negs	r2, r2
   17f2a:	4b1c      	ldr	r3, [pc, #112]	; (17f9c <xTaskIncrementTick+0x160>)
   17f2c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   17f2e:	4b22      	ldr	r3, [pc, #136]	; (17fb8 <xTaskIncrementTick+0x17c>)
   17f30:	681b      	ldr	r3, [r3, #0]
   17f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17f34:	0093      	lsls	r3, r2, #2
   17f36:	189b      	adds	r3, r3, r2
   17f38:	009b      	lsls	r3, r3, #2
   17f3a:	4a1d      	ldr	r2, [pc, #116]	; (17fb0 <xTaskIncrementTick+0x174>)
   17f3c:	589b      	ldr	r3, [r3, r2]
   17f3e:	2b01      	cmp	r3, #1
   17f40:	d910      	bls.n	17f64 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
   17f42:	2501      	movs	r5, #1
   17f44:	e00e      	b.n	17f64 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
   17f46:	4a15      	ldr	r2, [pc, #84]	; (17f9c <xTaskIncrementTick+0x160>)
   17f48:	6013      	str	r3, [r2, #0]
						break;
   17f4a:	e7f0      	b.n	17f2e <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
   17f4c:	0020      	movs	r0, r4
   17f4e:	4b1b      	ldr	r3, [pc, #108]	; (17fbc <xTaskIncrementTick+0x180>)
   17f50:	4798      	blx	r3
   17f52:	b2c0      	uxtb	r0, r0
   17f54:	4b1a      	ldr	r3, [pc, #104]	; (17fc0 <xTaskIncrementTick+0x184>)
   17f56:	4798      	blx	r3
   17f58:	e7ce      	b.n	17ef8 <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
   17f5a:	4a07      	ldr	r2, [pc, #28]	; (17f78 <xTaskIncrementTick+0x13c>)
   17f5c:	6813      	ldr	r3, [r2, #0]
   17f5e:	3301      	adds	r3, #1
   17f60:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17f62:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
   17f64:	4b17      	ldr	r3, [pc, #92]	; (17fc4 <xTaskIncrementTick+0x188>)
   17f66:	681b      	ldr	r3, [r3, #0]
   17f68:	2b00      	cmp	r3, #0
   17f6a:	d000      	beq.n	17f6e <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
   17f6c:	2501      	movs	r5, #1
}
   17f6e:	0028      	movs	r0, r5
   17f70:	b003      	add	sp, #12
   17f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f74:	20003b90 	.word	0x20003b90
   17f78:	20003b8c 	.word	0x20003b8c
   17f7c:	20000c24 	.word	0x20000c24
   17f80:	00015e05 	.word	0x00015e05
   17f84:	20003c10 	.word	0x20003c10
   17f88:	20003b18 	.word	0x20003b18
   17f8c:	000162d1 	.word	0x000162d1
   17f90:	20003b1c 	.word	0x20003b1c
   17f94:	20003bcc 	.word	0x20003bcc
   17f98:	000179d1 	.word	0x000179d1
   17f9c:	20003bc8 	.word	0x20003bc8
   17fa0:	0001657b 	.word	0x0001657b
   17fa4:	000152fd 	.word	0x000152fd
   17fa8:	200000c0 	.word	0x200000c0
   17fac:	20003b98 	.word	0x20003b98
   17fb0:	20003b20 	.word	0x20003b20
   17fb4:	00016535 	.word	0x00016535
   17fb8:	20003b14 	.word	0x20003b14
   17fbc:	000152ed 	.word	0x000152ed
   17fc0:	00015fcd 	.word	0x00015fcd
   17fc4:	20003c14 	.word	0x20003c14

00017fc8 <xTaskResumeAll>:
{
   17fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
   17fca:	4b37      	ldr	r3, [pc, #220]	; (180a8 <xTaskResumeAll+0xe0>)
   17fcc:	681b      	ldr	r3, [r3, #0]
   17fce:	2b00      	cmp	r3, #0
   17fd0:	d101      	bne.n	17fd6 <xTaskResumeAll+0xe>
   17fd2:	b672      	cpsid	i
   17fd4:	e7fe      	b.n	17fd4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
   17fd6:	4b35      	ldr	r3, [pc, #212]	; (180ac <xTaskResumeAll+0xe4>)
   17fd8:	4798      	blx	r3
		--uxSchedulerSuspended;
   17fda:	4b33      	ldr	r3, [pc, #204]	; (180a8 <xTaskResumeAll+0xe0>)
   17fdc:	681a      	ldr	r2, [r3, #0]
   17fde:	3a01      	subs	r2, #1
   17fe0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17fe2:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   17fe4:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17fe6:	2b00      	cmp	r3, #0
   17fe8:	d103      	bne.n	17ff2 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   17fea:	4b31      	ldr	r3, [pc, #196]	; (180b0 <xTaskResumeAll+0xe8>)
   17fec:	681b      	ldr	r3, [r3, #0]
   17fee:	2b00      	cmp	r3, #0
   17ff0:	d136      	bne.n	18060 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
   17ff2:	4b30      	ldr	r3, [pc, #192]	; (180b4 <xTaskResumeAll+0xec>)
   17ff4:	4798      	blx	r3
}
   17ff6:	0020      	movs	r0, r4
   17ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
   17ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17ffc:	4a2e      	ldr	r2, [pc, #184]	; (180b8 <xTaskResumeAll+0xf0>)
   17ffe:	6812      	ldr	r2, [r2, #0]
   18000:	4293      	cmp	r3, r2
   18002:	d901      	bls.n	18008 <xTaskResumeAll+0x40>
   18004:	4a2c      	ldr	r2, [pc, #176]	; (180b8 <xTaskResumeAll+0xf0>)
   18006:	6013      	str	r3, [r2, #0]
   18008:	0098      	lsls	r0, r3, #2
   1800a:	18c0      	adds	r0, r0, r3
   1800c:	0080      	lsls	r0, r0, #2
   1800e:	4b2b      	ldr	r3, [pc, #172]	; (180bc <xTaskResumeAll+0xf4>)
   18010:	1818      	adds	r0, r3, r0
   18012:	0031      	movs	r1, r6
   18014:	4b2a      	ldr	r3, [pc, #168]	; (180c0 <xTaskResumeAll+0xf8>)
   18016:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   18018:	4b2a      	ldr	r3, [pc, #168]	; (180c4 <xTaskResumeAll+0xfc>)
   1801a:	681b      	ldr	r3, [r3, #0]
   1801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1801e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18020:	429a      	cmp	r2, r3
   18022:	d302      	bcc.n	1802a <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
   18024:	2201      	movs	r2, #1
   18026:	4b28      	ldr	r3, [pc, #160]	; (180c8 <xTaskResumeAll+0x100>)
   18028:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1802a:	682b      	ldr	r3, [r5, #0]
   1802c:	2b00      	cmp	r3, #0
   1802e:	d01a      	beq.n	18066 <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   18030:	68fb      	ldr	r3, [r7, #12]
   18032:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   18034:	0020      	movs	r0, r4
   18036:	3018      	adds	r0, #24
   18038:	4b24      	ldr	r3, [pc, #144]	; (180cc <xTaskResumeAll+0x104>)
   1803a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1803c:	1d26      	adds	r6, r4, #4
   1803e:	0030      	movs	r0, r6
   18040:	4b22      	ldr	r3, [pc, #136]	; (180cc <xTaskResumeAll+0x104>)
   18042:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   18044:	0020      	movs	r0, r4
   18046:	4b22      	ldr	r3, [pc, #136]	; (180d0 <xTaskResumeAll+0x108>)
   18048:	4798      	blx	r3
   1804a:	4b22      	ldr	r3, [pc, #136]	; (180d4 <xTaskResumeAll+0x10c>)
   1804c:	881b      	ldrh	r3, [r3, #0]
   1804e:	4203      	tst	r3, r0
   18050:	d0d3      	beq.n	17ffa <xTaskResumeAll+0x32>
   18052:	0020      	movs	r0, r4
   18054:	4b20      	ldr	r3, [pc, #128]	; (180d8 <xTaskResumeAll+0x110>)
   18056:	4798      	blx	r3
   18058:	b2c0      	uxtb	r0, r0
   1805a:	4b20      	ldr	r3, [pc, #128]	; (180dc <xTaskResumeAll+0x114>)
   1805c:	4798      	blx	r3
   1805e:	e7cc      	b.n	17ffa <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   18060:	4d1f      	ldr	r5, [pc, #124]	; (180e0 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   18062:	002f      	movs	r7, r5
   18064:	e7e1      	b.n	1802a <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
   18066:	2c00      	cmp	r4, #0
   18068:	d001      	beq.n	1806e <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
   1806a:	4b1e      	ldr	r3, [pc, #120]	; (180e4 <xTaskResumeAll+0x11c>)
   1806c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1806e:	4b1e      	ldr	r3, [pc, #120]	; (180e8 <xTaskResumeAll+0x120>)
   18070:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   18072:	2c00      	cmp	r4, #0
   18074:	d00e      	beq.n	18094 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
   18076:	4f1d      	ldr	r7, [pc, #116]	; (180ec <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
   18078:	4e13      	ldr	r6, [pc, #76]	; (180c8 <xTaskResumeAll+0x100>)
   1807a:	2501      	movs	r5, #1
   1807c:	e002      	b.n	18084 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
   1807e:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   18080:	2c00      	cmp	r4, #0
   18082:	d004      	beq.n	1808e <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
   18084:	47b8      	blx	r7
   18086:	2800      	cmp	r0, #0
   18088:	d0f9      	beq.n	1807e <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
   1808a:	6035      	str	r5, [r6, #0]
   1808c:	e7f7      	b.n	1807e <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
   1808e:	2200      	movs	r2, #0
   18090:	4b15      	ldr	r3, [pc, #84]	; (180e8 <xTaskResumeAll+0x120>)
   18092:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   18094:	4b0c      	ldr	r3, [pc, #48]	; (180c8 <xTaskResumeAll+0x100>)
   18096:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   18098:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
   1809a:	2b00      	cmp	r3, #0
   1809c:	d0a9      	beq.n	17ff2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
   1809e:	4b14      	ldr	r3, [pc, #80]	; (180f0 <xTaskResumeAll+0x128>)
   180a0:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
   180a2:	3401      	adds	r4, #1
   180a4:	e7a5      	b.n	17ff2 <xTaskResumeAll+0x2a>
   180a6:	46c0      	nop			; (mov r8, r8)
   180a8:	20003b90 	.word	0x20003b90
   180ac:	000166b1 	.word	0x000166b1
   180b0:	20003b84 	.word	0x20003b84
   180b4:	000166c9 	.word	0x000166c9
   180b8:	20003b98 	.word	0x20003b98
   180bc:	20003b20 	.word	0x20003b20
   180c0:	00016535 	.word	0x00016535
   180c4:	20003b14 	.word	0x20003b14
   180c8:	20003c14 	.word	0x20003c14
   180cc:	0001657b 	.word	0x0001657b
   180d0:	000152fd 	.word	0x000152fd
   180d4:	200000c0 	.word	0x200000c0
   180d8:	000152ed 	.word	0x000152ed
   180dc:	00015fcd 	.word	0x00015fcd
   180e0:	20003bd0 	.word	0x20003bd0
   180e4:	000179d1 	.word	0x000179d1
   180e8:	20003b8c 	.word	0x20003b8c
   180ec:	00017e3d 	.word	0x00017e3d
   180f0:	000166a1 	.word	0x000166a1

000180f4 <vTaskDelay>:
	{
   180f4:	b510      	push	{r4, lr}
   180f6:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
   180f8:	d031      	beq.n	1815e <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
   180fa:	4b1a      	ldr	r3, [pc, #104]	; (18164 <vTaskDelay+0x70>)
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	2b00      	cmp	r3, #0
   18100:	d001      	beq.n	18106 <vTaskDelay+0x12>
   18102:	b672      	cpsid	i
   18104:	e7fe      	b.n	18104 <vTaskDelay+0x10>
			vTaskSuspendAll();
   18106:	4b18      	ldr	r3, [pc, #96]	; (18168 <vTaskDelay+0x74>)
   18108:	4798      	blx	r3
				traceTASK_DELAY();
   1810a:	4b18      	ldr	r3, [pc, #96]	; (1816c <vTaskDelay+0x78>)
   1810c:	6818      	ldr	r0, [r3, #0]
   1810e:	4b18      	ldr	r3, [pc, #96]	; (18170 <vTaskDelay+0x7c>)
   18110:	4798      	blx	r3
   18112:	4b18      	ldr	r3, [pc, #96]	; (18174 <vTaskDelay+0x80>)
   18114:	881b      	ldrh	r3, [r3, #0]
   18116:	4203      	tst	r3, r0
   18118:	d00a      	beq.n	18130 <vTaskDelay+0x3c>
   1811a:	0021      	movs	r1, r4
   1811c:	2089      	movs	r0, #137	; 0x89
   1811e:	4b16      	ldr	r3, [pc, #88]	; (18178 <vTaskDelay+0x84>)
   18120:	4798      	blx	r3
   18122:	4b12      	ldr	r3, [pc, #72]	; (1816c <vTaskDelay+0x78>)
   18124:	6818      	ldr	r0, [r3, #0]
   18126:	4b15      	ldr	r3, [pc, #84]	; (1817c <vTaskDelay+0x88>)
   18128:	4798      	blx	r3
   1812a:	b2c0      	uxtb	r0, r0
   1812c:	4b14      	ldr	r3, [pc, #80]	; (18180 <vTaskDelay+0x8c>)
   1812e:	4798      	blx	r3
   18130:	4b14      	ldr	r3, [pc, #80]	; (18184 <vTaskDelay+0x90>)
   18132:	4798      	blx	r3
   18134:	4b0e      	ldr	r3, [pc, #56]	; (18170 <vTaskDelay+0x7c>)
   18136:	4798      	blx	r3
   18138:	4b0e      	ldr	r3, [pc, #56]	; (18174 <vTaskDelay+0x80>)
   1813a:	881b      	ldrh	r3, [r3, #0]
   1813c:	4203      	tst	r3, r0
   1813e:	d006      	beq.n	1814e <vTaskDelay+0x5a>
   18140:	4b10      	ldr	r3, [pc, #64]	; (18184 <vTaskDelay+0x90>)
   18142:	4798      	blx	r3
   18144:	4b0d      	ldr	r3, [pc, #52]	; (1817c <vTaskDelay+0x88>)
   18146:	4798      	blx	r3
   18148:	b2c0      	uxtb	r0, r0
   1814a:	4b0d      	ldr	r3, [pc, #52]	; (18180 <vTaskDelay+0x8c>)
   1814c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1814e:	2100      	movs	r1, #0
   18150:	0020      	movs	r0, r4
   18152:	4b0d      	ldr	r3, [pc, #52]	; (18188 <vTaskDelay+0x94>)
   18154:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   18156:	4b0d      	ldr	r3, [pc, #52]	; (1818c <vTaskDelay+0x98>)
   18158:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   1815a:	2800      	cmp	r0, #0
   1815c:	d101      	bne.n	18162 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
   1815e:	4b0c      	ldr	r3, [pc, #48]	; (18190 <vTaskDelay+0x9c>)
   18160:	4798      	blx	r3
	}
   18162:	bd10      	pop	{r4, pc}
   18164:	20003b90 	.word	0x20003b90
   18168:	00017e21 	.word	0x00017e21
   1816c:	20003b14 	.word	0x20003b14
   18170:	000152fd 	.word	0x000152fd
   18174:	200000c0 	.word	0x200000c0
   18178:	000162d1 	.word	0x000162d1
   1817c:	000152ed 	.word	0x000152ed
   18180:	00015c61 	.word	0x00015c61
   18184:	000154b1 	.word	0x000154b1
   18188:	00017a7d 	.word	0x00017a7d
   1818c:	00017fc9 	.word	0x00017fc9
   18190:	000166a1 	.word	0x000166a1

00018194 <vTaskSwitchContext>:
{
   18194:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   18196:	4b33      	ldr	r3, [pc, #204]	; (18264 <vTaskSwitchContext+0xd0>)
   18198:	681b      	ldr	r3, [r3, #0]
   1819a:	2b00      	cmp	r3, #0
   1819c:	d125      	bne.n	181ea <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
   1819e:	2200      	movs	r2, #0
   181a0:	4b31      	ldr	r3, [pc, #196]	; (18268 <vTaskSwitchContext+0xd4>)
   181a2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   181a4:	4b31      	ldr	r3, [pc, #196]	; (1826c <vTaskSwitchContext+0xd8>)
   181a6:	681a      	ldr	r2, [r3, #0]
   181a8:	681b      	ldr	r3, [r3, #0]
   181aa:	6812      	ldr	r2, [r2, #0]
   181ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   181ae:	429a      	cmp	r2, r3
   181b0:	d805      	bhi.n	181be <vTaskSwitchContext+0x2a>
   181b2:	4b2e      	ldr	r3, [pc, #184]	; (1826c <vTaskSwitchContext+0xd8>)
   181b4:	6818      	ldr	r0, [r3, #0]
   181b6:	6819      	ldr	r1, [r3, #0]
   181b8:	3134      	adds	r1, #52	; 0x34
   181ba:	4b2d      	ldr	r3, [pc, #180]	; (18270 <vTaskSwitchContext+0xdc>)
   181bc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   181be:	4b2d      	ldr	r3, [pc, #180]	; (18274 <vTaskSwitchContext+0xe0>)
   181c0:	681b      	ldr	r3, [r3, #0]
   181c2:	009a      	lsls	r2, r3, #2
   181c4:	18d2      	adds	r2, r2, r3
   181c6:	0092      	lsls	r2, r2, #2
   181c8:	492b      	ldr	r1, [pc, #172]	; (18278 <vTaskSwitchContext+0xe4>)
   181ca:	5852      	ldr	r2, [r2, r1]
   181cc:	2a00      	cmp	r2, #0
   181ce:	d110      	bne.n	181f2 <vTaskSwitchContext+0x5e>
   181d0:	2b00      	cmp	r3, #0
   181d2:	d008      	beq.n	181e6 <vTaskSwitchContext+0x52>
   181d4:	3b01      	subs	r3, #1
   181d6:	009a      	lsls	r2, r3, #2
   181d8:	18d2      	adds	r2, r2, r3
   181da:	0092      	lsls	r2, r2, #2
   181dc:	5852      	ldr	r2, [r2, r1]
   181de:	2a00      	cmp	r2, #0
   181e0:	d107      	bne.n	181f2 <vTaskSwitchContext+0x5e>
   181e2:	2b00      	cmp	r3, #0
   181e4:	d1f6      	bne.n	181d4 <vTaskSwitchContext+0x40>
   181e6:	b672      	cpsid	i
   181e8:	e7fe      	b.n	181e8 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
   181ea:	2201      	movs	r2, #1
   181ec:	4b1e      	ldr	r3, [pc, #120]	; (18268 <vTaskSwitchContext+0xd4>)
   181ee:	601a      	str	r2, [r3, #0]
}
   181f0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   181f2:	4821      	ldr	r0, [pc, #132]	; (18278 <vTaskSwitchContext+0xe4>)
   181f4:	009a      	lsls	r2, r3, #2
   181f6:	18d1      	adds	r1, r2, r3
   181f8:	0089      	lsls	r1, r1, #2
   181fa:	1841      	adds	r1, r0, r1
   181fc:	684c      	ldr	r4, [r1, #4]
   181fe:	6864      	ldr	r4, [r4, #4]
   18200:	604c      	str	r4, [r1, #4]
   18202:	18d2      	adds	r2, r2, r3
   18204:	0092      	lsls	r2, r2, #2
   18206:	3208      	adds	r2, #8
   18208:	1882      	adds	r2, r0, r2
   1820a:	4294      	cmp	r4, r2
   1820c:	d019      	beq.n	18242 <vTaskSwitchContext+0xae>
   1820e:	009a      	lsls	r2, r3, #2
   18210:	18d2      	adds	r2, r2, r3
   18212:	0092      	lsls	r2, r2, #2
   18214:	4918      	ldr	r1, [pc, #96]	; (18278 <vTaskSwitchContext+0xe4>)
   18216:	188a      	adds	r2, r1, r2
   18218:	6852      	ldr	r2, [r2, #4]
   1821a:	68d1      	ldr	r1, [r2, #12]
   1821c:	4a13      	ldr	r2, [pc, #76]	; (1826c <vTaskSwitchContext+0xd8>)
   1821e:	6011      	str	r1, [r2, #0]
   18220:	4a14      	ldr	r2, [pc, #80]	; (18274 <vTaskSwitchContext+0xe0>)
   18222:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
   18224:	2201      	movs	r2, #1
   18226:	4b15      	ldr	r3, [pc, #84]	; (1827c <vTaskSwitchContext+0xe8>)
   18228:	601a      	str	r2, [r3, #0]
   1822a:	4b15      	ldr	r3, [pc, #84]	; (18280 <vTaskSwitchContext+0xec>)
   1822c:	4798      	blx	r3
   1822e:	4b15      	ldr	r3, [pc, #84]	; (18284 <vTaskSwitchContext+0xf0>)
   18230:	4798      	blx	r3
   18232:	4b15      	ldr	r3, [pc, #84]	; (18288 <vTaskSwitchContext+0xf4>)
   18234:	881b      	ldrh	r3, [r3, #0]
   18236:	4203      	tst	r3, r0
   18238:	d10b      	bne.n	18252 <vTaskSwitchContext+0xbe>
   1823a:	2202      	movs	r2, #2
   1823c:	4b0f      	ldr	r3, [pc, #60]	; (1827c <vTaskSwitchContext+0xe8>)
   1823e:	601a      	str	r2, [r3, #0]
}
   18240:	e7d6      	b.n	181f0 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   18242:	6860      	ldr	r0, [r4, #4]
   18244:	009a      	lsls	r2, r3, #2
   18246:	18d2      	adds	r2, r2, r3
   18248:	0092      	lsls	r2, r2, #2
   1824a:	490b      	ldr	r1, [pc, #44]	; (18278 <vTaskSwitchContext+0xe4>)
   1824c:	188a      	adds	r2, r1, r2
   1824e:	6050      	str	r0, [r2, #4]
   18250:	e7dd      	b.n	1820e <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
   18252:	4b0b      	ldr	r3, [pc, #44]	; (18280 <vTaskSwitchContext+0xec>)
   18254:	4798      	blx	r3
   18256:	4b0d      	ldr	r3, [pc, #52]	; (1828c <vTaskSwitchContext+0xf8>)
   18258:	4798      	blx	r3
   1825a:	b2c0      	uxtb	r0, r0
   1825c:	4b0c      	ldr	r3, [pc, #48]	; (18290 <vTaskSwitchContext+0xfc>)
   1825e:	4798      	blx	r3
   18260:	e7eb      	b.n	1823a <vTaskSwitchContext+0xa6>
   18262:	46c0      	nop			; (mov r8, r8)
   18264:	20003b90 	.word	0x20003b90
   18268:	20003c14 	.word	0x20003c14
   1826c:	20003b14 	.word	0x20003b14
   18270:	00023fd5 	.word	0x00023fd5
   18274:	20003b98 	.word	0x20003b98
   18278:	20003b20 	.word	0x20003b20
   1827c:	20000c20 	.word	0x20000c20
   18280:	000154b1 	.word	0x000154b1
   18284:	000152fd 	.word	0x000152fd
   18288:	200000c0 	.word	0x200000c0
   1828c:	000152ed 	.word	0x000152ed
   18290:	00016379 	.word	0x00016379

00018294 <vTaskSuspend>:
	{
   18294:	b570      	push	{r4, r5, r6, lr}
   18296:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
   18298:	4b33      	ldr	r3, [pc, #204]	; (18368 <vTaskSuspend+0xd4>)
   1829a:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1829c:	1e2c      	subs	r4, r5, #0
   1829e:	d02b      	beq.n	182f8 <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
   182a0:	4b32      	ldr	r3, [pc, #200]	; (1836c <vTaskSuspend+0xd8>)
   182a2:	4798      	blx	r3
   182a4:	4b32      	ldr	r3, [pc, #200]	; (18370 <vTaskSuspend+0xdc>)
   182a6:	4798      	blx	r3
   182a8:	4b32      	ldr	r3, [pc, #200]	; (18374 <vTaskSuspend+0xe0>)
   182aa:	881b      	ldrh	r3, [r3, #0]
   182ac:	4203      	tst	r3, r0
   182ae:	d126      	bne.n	182fe <vTaskSuspend+0x6a>
   182b0:	0020      	movs	r0, r4
   182b2:	4b31      	ldr	r3, [pc, #196]	; (18378 <vTaskSuspend+0xe4>)
   182b4:	4798      	blx	r3
   182b6:	b2c0      	uxtb	r0, r0
   182b8:	4b30      	ldr	r3, [pc, #192]	; (1837c <vTaskSuspend+0xe8>)
   182ba:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   182bc:	1d25      	adds	r5, r4, #4
   182be:	0028      	movs	r0, r5
   182c0:	4b2f      	ldr	r3, [pc, #188]	; (18380 <vTaskSuspend+0xec>)
   182c2:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   182c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   182c6:	2b00      	cmp	r3, #0
   182c8:	d003      	beq.n	182d2 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   182ca:	0020      	movs	r0, r4
   182cc:	3018      	adds	r0, #24
   182ce:	4b2c      	ldr	r3, [pc, #176]	; (18380 <vTaskSuspend+0xec>)
   182d0:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   182d2:	0029      	movs	r1, r5
   182d4:	482b      	ldr	r0, [pc, #172]	; (18384 <vTaskSuspend+0xf0>)
   182d6:	4b2c      	ldr	r3, [pc, #176]	; (18388 <vTaskSuspend+0xf4>)
   182d8:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   182da:	2350      	movs	r3, #80	; 0x50
   182dc:	5ce3      	ldrb	r3, [r4, r3]
   182de:	2b01      	cmp	r3, #1
   182e0:	d01d      	beq.n	1831e <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
   182e2:	4b2a      	ldr	r3, [pc, #168]	; (1838c <vTaskSuspend+0xf8>)
   182e4:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   182e6:	4b2a      	ldr	r3, [pc, #168]	; (18390 <vTaskSuspend+0xfc>)
   182e8:	681b      	ldr	r3, [r3, #0]
   182ea:	2b00      	cmp	r3, #0
   182ec:	d11b      	bne.n	18326 <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
   182ee:	4b29      	ldr	r3, [pc, #164]	; (18394 <vTaskSuspend+0x100>)
   182f0:	681b      	ldr	r3, [r3, #0]
   182f2:	429c      	cmp	r4, r3
   182f4:	d01e      	beq.n	18334 <vTaskSuspend+0xa0>
	}
   182f6:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   182f8:	4b26      	ldr	r3, [pc, #152]	; (18394 <vTaskSuspend+0x100>)
   182fa:	681c      	ldr	r4, [r3, #0]
   182fc:	e7d0      	b.n	182a0 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
   182fe:	0020      	movs	r0, r4
   18300:	4b1b      	ldr	r3, [pc, #108]	; (18370 <vTaskSuspend+0xdc>)
   18302:	4798      	blx	r3
   18304:	4b1b      	ldr	r3, [pc, #108]	; (18374 <vTaskSuspend+0xe0>)
   18306:	881b      	ldrh	r3, [r3, #0]
   18308:	4203      	tst	r3, r0
   1830a:	d0d1      	beq.n	182b0 <vTaskSuspend+0x1c>
   1830c:	0020      	movs	r0, r4
   1830e:	4b1a      	ldr	r3, [pc, #104]	; (18378 <vTaskSuspend+0xe4>)
   18310:	4798      	blx	r3
   18312:	b2c2      	uxtb	r2, r0
   18314:	2103      	movs	r1, #3
   18316:	208a      	movs	r0, #138	; 0x8a
   18318:	4b1f      	ldr	r3, [pc, #124]	; (18398 <vTaskSuspend+0x104>)
   1831a:	4798      	blx	r3
   1831c:	e7c8      	b.n	182b0 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1831e:	2200      	movs	r2, #0
   18320:	334f      	adds	r3, #79	; 0x4f
   18322:	54e2      	strb	r2, [r4, r3]
   18324:	e7dd      	b.n	182e2 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
   18326:	4b10      	ldr	r3, [pc, #64]	; (18368 <vTaskSuspend+0xd4>)
   18328:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
   1832a:	4b1c      	ldr	r3, [pc, #112]	; (1839c <vTaskSuspend+0x108>)
   1832c:	4798      	blx	r3
			taskEXIT_CRITICAL();
   1832e:	4b17      	ldr	r3, [pc, #92]	; (1838c <vTaskSuspend+0xf8>)
   18330:	4798      	blx	r3
   18332:	e7dc      	b.n	182ee <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
   18334:	4b16      	ldr	r3, [pc, #88]	; (18390 <vTaskSuspend+0xfc>)
   18336:	681b      	ldr	r3, [r3, #0]
   18338:	2b00      	cmp	r3, #0
   1833a:	d008      	beq.n	1834e <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
   1833c:	4b18      	ldr	r3, [pc, #96]	; (183a0 <vTaskSuspend+0x10c>)
   1833e:	681b      	ldr	r3, [r3, #0]
   18340:	2b00      	cmp	r3, #0
   18342:	d001      	beq.n	18348 <vTaskSuspend+0xb4>
   18344:	b672      	cpsid	i
   18346:	e7fe      	b.n	18346 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   18348:	4b16      	ldr	r3, [pc, #88]	; (183a4 <vTaskSuspend+0x110>)
   1834a:	4798      	blx	r3
   1834c:	e7d3      	b.n	182f6 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1834e:	4b0d      	ldr	r3, [pc, #52]	; (18384 <vTaskSuspend+0xf0>)
   18350:	681a      	ldr	r2, [r3, #0]
   18352:	4b15      	ldr	r3, [pc, #84]	; (183a8 <vTaskSuspend+0x114>)
   18354:	681b      	ldr	r3, [r3, #0]
   18356:	429a      	cmp	r2, r3
   18358:	d002      	beq.n	18360 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
   1835a:	4b14      	ldr	r3, [pc, #80]	; (183ac <vTaskSuspend+0x118>)
   1835c:	4798      	blx	r3
	}
   1835e:	e7ca      	b.n	182f6 <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
   18360:	2200      	movs	r2, #0
   18362:	4b0c      	ldr	r3, [pc, #48]	; (18394 <vTaskSuspend+0x100>)
   18364:	601a      	str	r2, [r3, #0]
   18366:	e7c6      	b.n	182f6 <vTaskSuspend+0x62>
   18368:	000166b1 	.word	0x000166b1
   1836c:	000154b1 	.word	0x000154b1
   18370:	000152fd 	.word	0x000152fd
   18374:	200000c0 	.word	0x200000c0
   18378:	000152ed 	.word	0x000152ed
   1837c:	00015c61 	.word	0x00015c61
   18380:	0001657b 	.word	0x0001657b
   18384:	20003be8 	.word	0x20003be8
   18388:	00016535 	.word	0x00016535
   1838c:	000166c9 	.word	0x000166c9
   18390:	20003be4 	.word	0x20003be4
   18394:	20003b14 	.word	0x20003b14
   18398:	00016135 	.word	0x00016135
   1839c:	000179d1 	.word	0x000179d1
   183a0:	20003b90 	.word	0x20003b90
   183a4:	000166a1 	.word	0x000166a1
   183a8:	20003b84 	.word	0x20003b84
   183ac:	00018195 	.word	0x00018195

000183b0 <vTaskPlaceOnEventList>:
{
   183b0:	b510      	push	{r4, lr}
   183b2:	000c      	movs	r4, r1
	configASSERT( pxEventList );
   183b4:	2800      	cmp	r0, #0
   183b6:	d101      	bne.n	183bc <vTaskPlaceOnEventList+0xc>
   183b8:	b672      	cpsid	i
   183ba:	e7fe      	b.n	183ba <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   183bc:	4b04      	ldr	r3, [pc, #16]	; (183d0 <vTaskPlaceOnEventList+0x20>)
   183be:	6819      	ldr	r1, [r3, #0]
   183c0:	3118      	adds	r1, #24
   183c2:	4b04      	ldr	r3, [pc, #16]	; (183d4 <vTaskPlaceOnEventList+0x24>)
   183c4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   183c6:	2101      	movs	r1, #1
   183c8:	0020      	movs	r0, r4
   183ca:	4b03      	ldr	r3, [pc, #12]	; (183d8 <vTaskPlaceOnEventList+0x28>)
   183cc:	4798      	blx	r3
}
   183ce:	bd10      	pop	{r4, pc}
   183d0:	20003b14 	.word	0x20003b14
   183d4:	0001654d 	.word	0x0001654d
   183d8:	00017a7d 	.word	0x00017a7d

000183dc <vTaskPlaceOnEventListRestricted>:
	{
   183dc:	b570      	push	{r4, r5, r6, lr}
   183de:	000c      	movs	r4, r1
   183e0:	0015      	movs	r5, r2
		configASSERT( pxEventList );
   183e2:	2800      	cmp	r0, #0
   183e4:	d031      	beq.n	1844a <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   183e6:	4b1a      	ldr	r3, [pc, #104]	; (18450 <vTaskPlaceOnEventListRestricted+0x74>)
   183e8:	6819      	ldr	r1, [r3, #0]
   183ea:	3118      	adds	r1, #24
   183ec:	4b19      	ldr	r3, [pc, #100]	; (18454 <vTaskPlaceOnEventListRestricted+0x78>)
   183ee:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
   183f0:	2d00      	cmp	r5, #0
   183f2:	d001      	beq.n	183f8 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
   183f4:	2401      	movs	r4, #1
   183f6:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   183f8:	4b15      	ldr	r3, [pc, #84]	; (18450 <vTaskPlaceOnEventListRestricted+0x74>)
   183fa:	6818      	ldr	r0, [r3, #0]
   183fc:	4b16      	ldr	r3, [pc, #88]	; (18458 <vTaskPlaceOnEventListRestricted+0x7c>)
   183fe:	4798      	blx	r3
   18400:	4b16      	ldr	r3, [pc, #88]	; (1845c <vTaskPlaceOnEventListRestricted+0x80>)
   18402:	881b      	ldrh	r3, [r3, #0]
   18404:	4203      	tst	r3, r0
   18406:	d00c      	beq.n	18422 <vTaskPlaceOnEventListRestricted+0x46>
   18408:	4b15      	ldr	r3, [pc, #84]	; (18460 <vTaskPlaceOnEventListRestricted+0x84>)
   1840a:	6819      	ldr	r1, [r3, #0]
   1840c:	1861      	adds	r1, r4, r1
   1840e:	2088      	movs	r0, #136	; 0x88
   18410:	4b14      	ldr	r3, [pc, #80]	; (18464 <vTaskPlaceOnEventListRestricted+0x88>)
   18412:	4798      	blx	r3
   18414:	4b0e      	ldr	r3, [pc, #56]	; (18450 <vTaskPlaceOnEventListRestricted+0x74>)
   18416:	6818      	ldr	r0, [r3, #0]
   18418:	4b13      	ldr	r3, [pc, #76]	; (18468 <vTaskPlaceOnEventListRestricted+0x8c>)
   1841a:	4798      	blx	r3
   1841c:	b2c0      	uxtb	r0, r0
   1841e:	4b13      	ldr	r3, [pc, #76]	; (1846c <vTaskPlaceOnEventListRestricted+0x90>)
   18420:	4798      	blx	r3
   18422:	4b13      	ldr	r3, [pc, #76]	; (18470 <vTaskPlaceOnEventListRestricted+0x94>)
   18424:	4798      	blx	r3
   18426:	4b0c      	ldr	r3, [pc, #48]	; (18458 <vTaskPlaceOnEventListRestricted+0x7c>)
   18428:	4798      	blx	r3
   1842a:	4b0c      	ldr	r3, [pc, #48]	; (1845c <vTaskPlaceOnEventListRestricted+0x80>)
   1842c:	881b      	ldrh	r3, [r3, #0]
   1842e:	4203      	tst	r3, r0
   18430:	d006      	beq.n	18440 <vTaskPlaceOnEventListRestricted+0x64>
   18432:	4b0f      	ldr	r3, [pc, #60]	; (18470 <vTaskPlaceOnEventListRestricted+0x94>)
   18434:	4798      	blx	r3
   18436:	4b0c      	ldr	r3, [pc, #48]	; (18468 <vTaskPlaceOnEventListRestricted+0x8c>)
   18438:	4798      	blx	r3
   1843a:	b2c0      	uxtb	r0, r0
   1843c:	4b0b      	ldr	r3, [pc, #44]	; (1846c <vTaskPlaceOnEventListRestricted+0x90>)
   1843e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   18440:	0029      	movs	r1, r5
   18442:	0020      	movs	r0, r4
   18444:	4b0b      	ldr	r3, [pc, #44]	; (18474 <vTaskPlaceOnEventListRestricted+0x98>)
   18446:	4798      	blx	r3
	}
   18448:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   1844a:	b672      	cpsid	i
   1844c:	e7fe      	b.n	1844c <vTaskPlaceOnEventListRestricted+0x70>
   1844e:	46c0      	nop			; (mov r8, r8)
   18450:	20003b14 	.word	0x20003b14
   18454:	00016535 	.word	0x00016535
   18458:	000152fd 	.word	0x000152fd
   1845c:	200000c0 	.word	0x200000c0
   18460:	20003c10 	.word	0x20003c10
   18464:	000162d1 	.word	0x000162d1
   18468:	000152ed 	.word	0x000152ed
   1846c:	00015c61 	.word	0x00015c61
   18470:	000154b1 	.word	0x000154b1
   18474:	00017a7d 	.word	0x00017a7d

00018478 <xTaskRemoveFromEventList>:
{
   18478:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1847a:	68c3      	ldr	r3, [r0, #12]
   1847c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   1847e:	2c00      	cmp	r4, #0
   18480:	d02e      	beq.n	184e0 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   18482:	0025      	movs	r5, r4
   18484:	3518      	adds	r5, #24
   18486:	0028      	movs	r0, r5
   18488:	4b1c      	ldr	r3, [pc, #112]	; (184fc <xTaskRemoveFromEventList+0x84>)
   1848a:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1848c:	4b1c      	ldr	r3, [pc, #112]	; (18500 <xTaskRemoveFromEventList+0x88>)
   1848e:	681b      	ldr	r3, [r3, #0]
   18490:	2b00      	cmp	r3, #0
   18492:	d12e      	bne.n	184f2 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   18494:	1d25      	adds	r5, r4, #4
   18496:	0028      	movs	r0, r5
   18498:	4b18      	ldr	r3, [pc, #96]	; (184fc <xTaskRemoveFromEventList+0x84>)
   1849a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1849c:	0020      	movs	r0, r4
   1849e:	4b19      	ldr	r3, [pc, #100]	; (18504 <xTaskRemoveFromEventList+0x8c>)
   184a0:	4798      	blx	r3
   184a2:	4b19      	ldr	r3, [pc, #100]	; (18508 <xTaskRemoveFromEventList+0x90>)
   184a4:	881b      	ldrh	r3, [r3, #0]
   184a6:	4203      	tst	r3, r0
   184a8:	d11c      	bne.n	184e4 <xTaskRemoveFromEventList+0x6c>
   184aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   184ac:	4a17      	ldr	r2, [pc, #92]	; (1850c <xTaskRemoveFromEventList+0x94>)
   184ae:	6812      	ldr	r2, [r2, #0]
   184b0:	4293      	cmp	r3, r2
   184b2:	d901      	bls.n	184b8 <xTaskRemoveFromEventList+0x40>
   184b4:	4a15      	ldr	r2, [pc, #84]	; (1850c <xTaskRemoveFromEventList+0x94>)
   184b6:	6013      	str	r3, [r2, #0]
   184b8:	0098      	lsls	r0, r3, #2
   184ba:	18c0      	adds	r0, r0, r3
   184bc:	0080      	lsls	r0, r0, #2
   184be:	4b14      	ldr	r3, [pc, #80]	; (18510 <xTaskRemoveFromEventList+0x98>)
   184c0:	1818      	adds	r0, r3, r0
   184c2:	0029      	movs	r1, r5
   184c4:	4b13      	ldr	r3, [pc, #76]	; (18514 <xTaskRemoveFromEventList+0x9c>)
   184c6:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   184c8:	4b13      	ldr	r3, [pc, #76]	; (18518 <xTaskRemoveFromEventList+0xa0>)
   184ca:	681b      	ldr	r3, [r3, #0]
   184cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   184ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
   184d0:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   184d2:	429a      	cmp	r2, r3
   184d4:	d903      	bls.n	184de <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
   184d6:	2201      	movs	r2, #1
   184d8:	4b10      	ldr	r3, [pc, #64]	; (1851c <xTaskRemoveFromEventList+0xa4>)
   184da:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
   184dc:	3001      	adds	r0, #1
}
   184de:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
   184e0:	b672      	cpsid	i
   184e2:	e7fe      	b.n	184e2 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
   184e4:	0020      	movs	r0, r4
   184e6:	4b0e      	ldr	r3, [pc, #56]	; (18520 <xTaskRemoveFromEventList+0xa8>)
   184e8:	4798      	blx	r3
   184ea:	b2c0      	uxtb	r0, r0
   184ec:	4b0d      	ldr	r3, [pc, #52]	; (18524 <xTaskRemoveFromEventList+0xac>)
   184ee:	4798      	blx	r3
   184f0:	e7db      	b.n	184aa <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   184f2:	0029      	movs	r1, r5
   184f4:	480c      	ldr	r0, [pc, #48]	; (18528 <xTaskRemoveFromEventList+0xb0>)
   184f6:	4b07      	ldr	r3, [pc, #28]	; (18514 <xTaskRemoveFromEventList+0x9c>)
   184f8:	4798      	blx	r3
   184fa:	e7e5      	b.n	184c8 <xTaskRemoveFromEventList+0x50>
   184fc:	0001657b 	.word	0x0001657b
   18500:	20003b90 	.word	0x20003b90
   18504:	000152fd 	.word	0x000152fd
   18508:	200000c0 	.word	0x200000c0
   1850c:	20003b98 	.word	0x20003b98
   18510:	20003b20 	.word	0x20003b20
   18514:	00016535 	.word	0x00016535
   18518:	20003b14 	.word	0x20003b14
   1851c:	20003c14 	.word	0x20003c14
   18520:	000152ed 	.word	0x000152ed
   18524:	00015fcd 	.word	0x00015fcd
   18528:	20003bd0 	.word	0x20003bd0

0001852c <vTaskSetTimeOutState>:
{
   1852c:	b510      	push	{r4, lr}
   1852e:	1e04      	subs	r4, r0, #0
	configASSERT( pxTimeOut );
   18530:	d101      	bne.n	18536 <vTaskSetTimeOutState+0xa>
   18532:	b672      	cpsid	i
   18534:	e7fe      	b.n	18534 <vTaskSetTimeOutState+0x8>
	taskENTER_CRITICAL();
   18536:	4b05      	ldr	r3, [pc, #20]	; (1854c <vTaskSetTimeOutState+0x20>)
   18538:	4798      	blx	r3
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1853a:	4b05      	ldr	r3, [pc, #20]	; (18550 <vTaskSetTimeOutState+0x24>)
   1853c:	681b      	ldr	r3, [r3, #0]
   1853e:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   18540:	4b04      	ldr	r3, [pc, #16]	; (18554 <vTaskSetTimeOutState+0x28>)
   18542:	681b      	ldr	r3, [r3, #0]
   18544:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
   18546:	4b04      	ldr	r3, [pc, #16]	; (18558 <vTaskSetTimeOutState+0x2c>)
   18548:	4798      	blx	r3
}
   1854a:	bd10      	pop	{r4, pc}
   1854c:	000166b1 	.word	0x000166b1
   18550:	20003bcc 	.word	0x20003bcc
   18554:	20003c10 	.word	0x20003c10
   18558:	000166c9 	.word	0x000166c9

0001855c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1855c:	4b03      	ldr	r3, [pc, #12]	; (1856c <vTaskInternalSetTimeOutState+0x10>)
   1855e:	681b      	ldr	r3, [r3, #0]
   18560:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   18562:	4b03      	ldr	r3, [pc, #12]	; (18570 <vTaskInternalSetTimeOutState+0x14>)
   18564:	681b      	ldr	r3, [r3, #0]
   18566:	6043      	str	r3, [r0, #4]
}
   18568:	4770      	bx	lr
   1856a:	46c0      	nop			; (mov r8, r8)
   1856c:	20003bcc 	.word	0x20003bcc
   18570:	20003c10 	.word	0x20003c10

00018574 <xTaskCheckForTimeOut>:
{
   18574:	b570      	push	{r4, r5, r6, lr}
   18576:	0006      	movs	r6, r0
   18578:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
   1857a:	2800      	cmp	r0, #0
   1857c:	d01b      	beq.n	185b6 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
   1857e:	2900      	cmp	r1, #0
   18580:	d01b      	beq.n	185ba <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
   18582:	4b13      	ldr	r3, [pc, #76]	; (185d0 <xTaskCheckForTimeOut+0x5c>)
   18584:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   18586:	4b13      	ldr	r3, [pc, #76]	; (185d4 <xTaskCheckForTimeOut+0x60>)
   18588:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1858a:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   1858c:	682b      	ldr	r3, [r5, #0]
   1858e:	1c58      	adds	r0, r3, #1
   18590:	d01c      	beq.n	185cc <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   18592:	4811      	ldr	r0, [pc, #68]	; (185d8 <xTaskCheckForTimeOut+0x64>)
   18594:	6800      	ldr	r0, [r0, #0]
   18596:	6834      	ldr	r4, [r6, #0]
   18598:	4284      	cmp	r4, r0
   1859a:	d002      	beq.n	185a2 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
   1859c:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1859e:	428a      	cmp	r2, r1
   185a0:	d205      	bcs.n	185ae <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   185a2:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   185a4:	429a      	cmp	r2, r3
   185a6:	d30a      	bcc.n	185be <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
   185a8:	2300      	movs	r3, #0
   185aa:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   185ac:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   185ae:	4b0b      	ldr	r3, [pc, #44]	; (185dc <xTaskCheckForTimeOut+0x68>)
   185b0:	4798      	blx	r3
}
   185b2:	0020      	movs	r0, r4
   185b4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
   185b6:	b672      	cpsid	i
   185b8:	e7fe      	b.n	185b8 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   185ba:	b672      	cpsid	i
   185bc:	e7fe      	b.n	185bc <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
   185be:	1a9b      	subs	r3, r3, r2
   185c0:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   185c2:	0030      	movs	r0, r6
   185c4:	4b06      	ldr	r3, [pc, #24]	; (185e0 <xTaskCheckForTimeOut+0x6c>)
   185c6:	4798      	blx	r3
			xReturn = pdFALSE;
   185c8:	2400      	movs	r4, #0
   185ca:	e7f0      	b.n	185ae <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
   185cc:	2400      	movs	r4, #0
   185ce:	e7ee      	b.n	185ae <xTaskCheckForTimeOut+0x3a>
   185d0:	000166b1 	.word	0x000166b1
   185d4:	20003c10 	.word	0x20003c10
   185d8:	20003bcc 	.word	0x20003bcc
   185dc:	000166c9 	.word	0x000166c9
   185e0:	0001855d 	.word	0x0001855d

000185e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   185e4:	2201      	movs	r2, #1
   185e6:	4b01      	ldr	r3, [pc, #4]	; (185ec <vTaskMissedYield+0x8>)
   185e8:	601a      	str	r2, [r3, #0]
}
   185ea:	4770      	bx	lr
   185ec:	20003c14 	.word	0x20003c14

000185f0 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
   185f0:	2800      	cmp	r0, #0
   185f2:	d001      	beq.n	185f8 <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
   185f4:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
   185f6:	4770      	bx	lr
			uxReturn = 0U;
   185f8:	2000      	movs	r0, #0
		return uxReturn;
   185fa:	e7fc      	b.n	185f6 <uxTaskGetTaskNumber+0x6>

000185fc <vTaskSetTaskNumber>:
		if( xTask != NULL )
   185fc:	2800      	cmp	r0, #0
   185fe:	d000      	beq.n	18602 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
   18600:	6401      	str	r1, [r0, #64]	; 0x40
	}
   18602:	4770      	bx	lr

00018604 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
   18604:	1e03      	subs	r3, r0, #0
   18606:	d00b      	beq.n	18620 <uxTaskGetStackHighWaterMark+0x1c>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   18608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1860a:	7813      	ldrb	r3, [r2, #0]
   1860c:	2ba5      	cmp	r3, #165	; 0xa5
   1860e:	d10a      	bne.n	18626 <uxTaskGetStackHighWaterMark+0x22>
   18610:	2000      	movs	r0, #0
			ulCount++;
   18612:	3001      	adds	r0, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   18614:	5c13      	ldrb	r3, [r2, r0]
   18616:	2ba5      	cmp	r3, #165	; 0xa5
   18618:	d0fb      	beq.n	18612 <uxTaskGetStackHighWaterMark+0xe>
		return uxReturn;
   1861a:	0380      	lsls	r0, r0, #14
   1861c:	0c00      	lsrs	r0, r0, #16
	}
   1861e:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
   18620:	4b02      	ldr	r3, [pc, #8]	; (1862c <uxTaskGetStackHighWaterMark+0x28>)
   18622:	681b      	ldr	r3, [r3, #0]
   18624:	e7f0      	b.n	18608 <uxTaskGetStackHighWaterMark+0x4>
	uint32_t ulCount = 0U;
   18626:	2000      	movs	r0, #0
   18628:	e7f7      	b.n	1861a <uxTaskGetStackHighWaterMark+0x16>
   1862a:	46c0      	nop			; (mov r8, r8)
   1862c:	20003b14 	.word	0x20003b14

00018630 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
   18630:	4b01      	ldr	r3, [pc, #4]	; (18638 <xTaskGetCurrentTaskHandle+0x8>)
   18632:	6818      	ldr	r0, [r3, #0]
	}
   18634:	4770      	bx	lr
   18636:	46c0      	nop			; (mov r8, r8)
   18638:	20003b14 	.word	0x20003b14

0001863c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   1863c:	4b05      	ldr	r3, [pc, #20]	; (18654 <xTaskGetSchedulerState+0x18>)
   1863e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
   18640:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
   18642:	2b00      	cmp	r3, #0
   18644:	d004      	beq.n	18650 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18646:	4b04      	ldr	r3, [pc, #16]	; (18658 <xTaskGetSchedulerState+0x1c>)
   18648:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   1864a:	4243      	negs	r3, r0
   1864c:	4158      	adcs	r0, r3
   1864e:	0040      	lsls	r0, r0, #1
	}
   18650:	4770      	bx	lr
   18652:	46c0      	nop			; (mov r8, r8)
   18654:	20003be4 	.word	0x20003be4
   18658:	20003b90 	.word	0x20003b90

0001865c <xTaskPriorityInherit>:
	{
   1865c:	b570      	push	{r4, r5, r6, lr}
   1865e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   18660:	d100      	bne.n	18664 <xTaskPriorityInherit+0x8>
   18662:	e06d      	b.n	18740 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   18664:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   18666:	4b37      	ldr	r3, [pc, #220]	; (18744 <xTaskPriorityInherit+0xe8>)
   18668:	681b      	ldr	r3, [r3, #0]
   1866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1866c:	429a      	cmp	r2, r3
   1866e:	d25f      	bcs.n	18730 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   18670:	6983      	ldr	r3, [r0, #24]
   18672:	2b00      	cmp	r3, #0
   18674:	db05      	blt.n	18682 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18676:	4b33      	ldr	r3, [pc, #204]	; (18744 <xTaskPriorityInherit+0xe8>)
   18678:	681b      	ldr	r3, [r3, #0]
   1867a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1867c:	2305      	movs	r3, #5
   1867e:	1a5b      	subs	r3, r3, r1
   18680:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   18682:	0093      	lsls	r3, r2, #2
   18684:	189b      	adds	r3, r3, r2
   18686:	009b      	lsls	r3, r3, #2
   18688:	4a2f      	ldr	r2, [pc, #188]	; (18748 <xTaskPriorityInherit+0xec>)
   1868a:	18d3      	adds	r3, r2, r3
   1868c:	6962      	ldr	r2, [r4, #20]
   1868e:	429a      	cmp	r2, r3
   18690:	d028      	beq.n	186e4 <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   18692:	4b2c      	ldr	r3, [pc, #176]	; (18744 <xTaskPriorityInherit+0xe8>)
   18694:	681b      	ldr	r3, [r3, #0]
   18696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18698:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1869a:	0020      	movs	r0, r4
   1869c:	4b2b      	ldr	r3, [pc, #172]	; (1874c <xTaskPriorityInherit+0xf0>)
   1869e:	4798      	blx	r3
   186a0:	0003      	movs	r3, r0
   186a2:	4a2b      	ldr	r2, [pc, #172]	; (18750 <xTaskPriorityInherit+0xf4>)
   186a4:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
   186a6:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   186a8:	421a      	tst	r2, r3
   186aa:	d048      	beq.n	1873e <xTaskPriorityInherit+0xe2>
   186ac:	0020      	movs	r0, r4
   186ae:	4d29      	ldr	r5, [pc, #164]	; (18754 <xTaskPriorityInherit+0xf8>)
   186b0:	47a8      	blx	r5
   186b2:	0006      	movs	r6, r0
   186b4:	0020      	movs	r0, r4
   186b6:	47a8      	blx	r5
   186b8:	b2c1      	uxtb	r1, r0
   186ba:	2003      	movs	r0, #3
   186bc:	4b26      	ldr	r3, [pc, #152]	; (18758 <xTaskPriorityInherit+0xfc>)
   186be:	4798      	blx	r3
   186c0:	0003      	movs	r3, r0
   186c2:	b2f2      	uxtb	r2, r6
   186c4:	2103      	movs	r1, #3
   186c6:	208e      	movs	r0, #142	; 0x8e
   186c8:	4e24      	ldr	r6, [pc, #144]	; (1875c <xTaskPriorityInherit+0x100>)
   186ca:	47b0      	blx	r6
   186cc:	0020      	movs	r0, r4
   186ce:	47a8      	blx	r5
   186d0:	4b1c      	ldr	r3, [pc, #112]	; (18744 <xTaskPriorityInherit+0xe8>)
   186d2:	681b      	ldr	r3, [r3, #0]
   186d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   186d6:	b2d2      	uxtb	r2, r2
   186d8:	b2c1      	uxtb	r1, r0
   186da:	2003      	movs	r0, #3
   186dc:	4b20      	ldr	r3, [pc, #128]	; (18760 <xTaskPriorityInherit+0x104>)
   186de:	4798      	blx	r3
				xReturn = pdTRUE;
   186e0:	2001      	movs	r0, #1
   186e2:	e02c      	b.n	1873e <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   186e4:	1d25      	adds	r5, r4, #4
   186e6:	0028      	movs	r0, r5
   186e8:	4b1e      	ldr	r3, [pc, #120]	; (18764 <xTaskPriorityInherit+0x108>)
   186ea:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   186ec:	4b15      	ldr	r3, [pc, #84]	; (18744 <xTaskPriorityInherit+0xe8>)
   186ee:	681b      	ldr	r3, [r3, #0]
   186f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   186f2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   186f4:	0020      	movs	r0, r4
   186f6:	4b15      	ldr	r3, [pc, #84]	; (1874c <xTaskPriorityInherit+0xf0>)
   186f8:	4798      	blx	r3
   186fa:	4b15      	ldr	r3, [pc, #84]	; (18750 <xTaskPriorityInherit+0xf4>)
   186fc:	881b      	ldrh	r3, [r3, #0]
   186fe:	4203      	tst	r3, r0
   18700:	d10f      	bne.n	18722 <xTaskPriorityInherit+0xc6>
   18702:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18704:	4a18      	ldr	r2, [pc, #96]	; (18768 <xTaskPriorityInherit+0x10c>)
   18706:	6812      	ldr	r2, [r2, #0]
   18708:	4293      	cmp	r3, r2
   1870a:	d901      	bls.n	18710 <xTaskPriorityInherit+0xb4>
   1870c:	4a16      	ldr	r2, [pc, #88]	; (18768 <xTaskPriorityInherit+0x10c>)
   1870e:	6013      	str	r3, [r2, #0]
   18710:	0098      	lsls	r0, r3, #2
   18712:	18c0      	adds	r0, r0, r3
   18714:	0080      	lsls	r0, r0, #2
   18716:	4b0c      	ldr	r3, [pc, #48]	; (18748 <xTaskPriorityInherit+0xec>)
   18718:	1818      	adds	r0, r3, r0
   1871a:	0029      	movs	r1, r5
   1871c:	4b13      	ldr	r3, [pc, #76]	; (1876c <xTaskPriorityInherit+0x110>)
   1871e:	4798      	blx	r3
   18720:	e7bb      	b.n	1869a <xTaskPriorityInherit+0x3e>
   18722:	0020      	movs	r0, r4
   18724:	4b0b      	ldr	r3, [pc, #44]	; (18754 <xTaskPriorityInherit+0xf8>)
   18726:	4798      	blx	r3
   18728:	b2c0      	uxtb	r0, r0
   1872a:	4b11      	ldr	r3, [pc, #68]	; (18770 <xTaskPriorityInherit+0x114>)
   1872c:	4798      	blx	r3
   1872e:	e7e8      	b.n	18702 <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   18730:	4b04      	ldr	r3, [pc, #16]	; (18744 <xTaskPriorityInherit+0xe8>)
   18732:	681b      	ldr	r3, [r3, #0]
   18734:	6c40      	ldr	r0, [r0, #68]	; 0x44
   18736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18738:	4298      	cmp	r0, r3
   1873a:	4180      	sbcs	r0, r0
   1873c:	4240      	negs	r0, r0
	}
   1873e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
   18740:	2000      	movs	r0, #0
   18742:	e7fc      	b.n	1873e <xTaskPriorityInherit+0xe2>
   18744:	20003b14 	.word	0x20003b14
   18748:	20003b20 	.word	0x20003b20
   1874c:	000152fd 	.word	0x000152fd
   18750:	200000c0 	.word	0x200000c0
   18754:	000152ed 	.word	0x000152ed
   18758:	00015bad 	.word	0x00015bad
   1875c:	000161f9 	.word	0x000161f9
   18760:	00015b55 	.word	0x00015b55
   18764:	0001657b 	.word	0x0001657b
   18768:	20003b98 	.word	0x20003b98
   1876c:	00016535 	.word	0x00016535
   18770:	00015fcd 	.word	0x00015fcd

00018774 <xTaskPriorityDisinherit>:
	{
   18774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18776:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   18778:	d05a      	beq.n	18830 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
   1877a:	4b2f      	ldr	r3, [pc, #188]	; (18838 <xTaskPriorityDisinherit+0xc4>)
   1877c:	681b      	ldr	r3, [r3, #0]
   1877e:	4298      	cmp	r0, r3
   18780:	d001      	beq.n	18786 <xTaskPriorityDisinherit+0x12>
   18782:	b672      	cpsid	i
   18784:	e7fe      	b.n	18784 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
   18786:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18788:	2b00      	cmp	r3, #0
   1878a:	d101      	bne.n	18790 <xTaskPriorityDisinherit+0x1c>
   1878c:	b672      	cpsid	i
   1878e:	e7fe      	b.n	1878e <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
   18790:	3b01      	subs	r3, #1
   18792:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   18794:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   18796:	6c41      	ldr	r1, [r0, #68]	; 0x44
   18798:	428a      	cmp	r2, r1
   1879a:	d04b      	beq.n	18834 <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
   1879c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1879e:	2b00      	cmp	r3, #0
   187a0:	d145      	bne.n	1882e <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   187a2:	1d25      	adds	r5, r4, #4
   187a4:	0028      	movs	r0, r5
   187a6:	4b25      	ldr	r3, [pc, #148]	; (1883c <xTaskPriorityDisinherit+0xc8>)
   187a8:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   187aa:	0020      	movs	r0, r4
   187ac:	4b24      	ldr	r3, [pc, #144]	; (18840 <xTaskPriorityDisinherit+0xcc>)
   187ae:	4798      	blx	r3
   187b0:	4b24      	ldr	r3, [pc, #144]	; (18844 <xTaskPriorityDisinherit+0xd0>)
   187b2:	881b      	ldrh	r3, [r3, #0]
   187b4:	4203      	tst	r3, r0
   187b6:	d018      	beq.n	187ea <xTaskPriorityDisinherit+0x76>
   187b8:	0020      	movs	r0, r4
   187ba:	4e23      	ldr	r6, [pc, #140]	; (18848 <xTaskPriorityDisinherit+0xd4>)
   187bc:	47b0      	blx	r6
   187be:	0007      	movs	r7, r0
   187c0:	0020      	movs	r0, r4
   187c2:	47b0      	blx	r6
   187c4:	b2c1      	uxtb	r1, r0
   187c6:	2003      	movs	r0, #3
   187c8:	4b20      	ldr	r3, [pc, #128]	; (1884c <xTaskPriorityDisinherit+0xd8>)
   187ca:	4798      	blx	r3
   187cc:	0003      	movs	r3, r0
   187ce:	b2fa      	uxtb	r2, r7
   187d0:	2103      	movs	r1, #3
   187d2:	208f      	movs	r0, #143	; 0x8f
   187d4:	4f1e      	ldr	r7, [pc, #120]	; (18850 <xTaskPriorityDisinherit+0xdc>)
   187d6:	47b8      	blx	r7
   187d8:	0020      	movs	r0, r4
   187da:	47b0      	blx	r6
   187dc:	2344      	movs	r3, #68	; 0x44
   187de:	18e3      	adds	r3, r4, r3
   187e0:	781a      	ldrb	r2, [r3, #0]
   187e2:	b2c1      	uxtb	r1, r0
   187e4:	2003      	movs	r0, #3
   187e6:	4b1b      	ldr	r3, [pc, #108]	; (18854 <xTaskPriorityDisinherit+0xe0>)
   187e8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   187ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
   187ec:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   187ee:	2305      	movs	r3, #5
   187f0:	1a9b      	subs	r3, r3, r2
   187f2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   187f4:	0020      	movs	r0, r4
   187f6:	4b12      	ldr	r3, [pc, #72]	; (18840 <xTaskPriorityDisinherit+0xcc>)
   187f8:	4798      	blx	r3
   187fa:	4b12      	ldr	r3, [pc, #72]	; (18844 <xTaskPriorityDisinherit+0xd0>)
   187fc:	881b      	ldrh	r3, [r3, #0]
   187fe:	4203      	tst	r3, r0
   18800:	d005      	beq.n	1880e <xTaskPriorityDisinherit+0x9a>
   18802:	0020      	movs	r0, r4
   18804:	4b10      	ldr	r3, [pc, #64]	; (18848 <xTaskPriorityDisinherit+0xd4>)
   18806:	4798      	blx	r3
   18808:	b2c0      	uxtb	r0, r0
   1880a:	4b13      	ldr	r3, [pc, #76]	; (18858 <xTaskPriorityDisinherit+0xe4>)
   1880c:	4798      	blx	r3
   1880e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18810:	4a12      	ldr	r2, [pc, #72]	; (1885c <xTaskPriorityDisinherit+0xe8>)
   18812:	6812      	ldr	r2, [r2, #0]
   18814:	4293      	cmp	r3, r2
   18816:	d901      	bls.n	1881c <xTaskPriorityDisinherit+0xa8>
   18818:	4a10      	ldr	r2, [pc, #64]	; (1885c <xTaskPriorityDisinherit+0xe8>)
   1881a:	6013      	str	r3, [r2, #0]
   1881c:	0098      	lsls	r0, r3, #2
   1881e:	18c0      	adds	r0, r0, r3
   18820:	0080      	lsls	r0, r0, #2
   18822:	4b0f      	ldr	r3, [pc, #60]	; (18860 <xTaskPriorityDisinherit+0xec>)
   18824:	1818      	adds	r0, r3, r0
   18826:	0029      	movs	r1, r5
   18828:	4b0e      	ldr	r3, [pc, #56]	; (18864 <xTaskPriorityDisinherit+0xf0>)
   1882a:	4798      	blx	r3
					xReturn = pdTRUE;
   1882c:	2001      	movs	r0, #1
	}
   1882e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
   18830:	2000      	movs	r0, #0
   18832:	e7fc      	b.n	1882e <xTaskPriorityDisinherit+0xba>
   18834:	2000      	movs	r0, #0
   18836:	e7fa      	b.n	1882e <xTaskPriorityDisinherit+0xba>
   18838:	20003b14 	.word	0x20003b14
   1883c:	0001657b 	.word	0x0001657b
   18840:	000152fd 	.word	0x000152fd
   18844:	200000c0 	.word	0x200000c0
   18848:	000152ed 	.word	0x000152ed
   1884c:	00015bad 	.word	0x00015bad
   18850:	000161f9 	.word	0x000161f9
   18854:	00015b55 	.word	0x00015b55
   18858:	00015fcd 	.word	0x00015fcd
   1885c:	20003b98 	.word	0x20003b98
   18860:	20003b20 	.word	0x20003b20
   18864:	00016535 	.word	0x00016535

00018868 <vTaskPriorityDisinheritAfterTimeout>:
	{
   18868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1886a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   1886c:	d00d      	beq.n	1888a <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   1886e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18870:	2b00      	cmp	r3, #0
   18872:	d101      	bne.n	18878 <vTaskPriorityDisinheritAfterTimeout+0x10>
   18874:	b672      	cpsid	i
   18876:	e7fe      	b.n	18876 <vTaskPriorityDisinheritAfterTimeout+0xe>
   18878:	6c45      	ldr	r5, [r0, #68]	; 0x44
   1887a:	428d      	cmp	r5, r1
   1887c:	d200      	bcs.n	18880 <vTaskPriorityDisinheritAfterTimeout+0x18>
   1887e:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   18880:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18882:	42aa      	cmp	r2, r5
   18884:	d001      	beq.n	1888a <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   18886:	2b01      	cmp	r3, #1
   18888:	d000      	beq.n	1888c <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
   1888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
   1888c:	4b2b      	ldr	r3, [pc, #172]	; (1893c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
   1888e:	681b      	ldr	r3, [r3, #0]
   18890:	429c      	cmp	r4, r3
   18892:	d101      	bne.n	18898 <vTaskPriorityDisinheritAfterTimeout+0x30>
   18894:	b672      	cpsid	i
   18896:	e7fe      	b.n	18896 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   18898:	0020      	movs	r0, r4
   1889a:	4b29      	ldr	r3, [pc, #164]	; (18940 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   1889c:	4798      	blx	r3
   1889e:	4b29      	ldr	r3, [pc, #164]	; (18944 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   188a0:	881b      	ldrh	r3, [r3, #0]
   188a2:	4203      	tst	r3, r0
   188a4:	d018      	beq.n	188d8 <vTaskPriorityDisinheritAfterTimeout+0x70>
   188a6:	0020      	movs	r0, r4
   188a8:	4e27      	ldr	r6, [pc, #156]	; (18948 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   188aa:	47b0      	blx	r6
   188ac:	0007      	movs	r7, r0
   188ae:	0020      	movs	r0, r4
   188b0:	47b0      	blx	r6
   188b2:	b2c1      	uxtb	r1, r0
   188b4:	2003      	movs	r0, #3
   188b6:	4b25      	ldr	r3, [pc, #148]	; (1894c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   188b8:	4798      	blx	r3
   188ba:	0003      	movs	r3, r0
   188bc:	b2fa      	uxtb	r2, r7
   188be:	2103      	movs	r1, #3
   188c0:	208f      	movs	r0, #143	; 0x8f
   188c2:	4f23      	ldr	r7, [pc, #140]	; (18950 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   188c4:	47b8      	blx	r7
   188c6:	0020      	movs	r0, r4
   188c8:	47b0      	blx	r6
   188ca:	2344      	movs	r3, #68	; 0x44
   188cc:	18e3      	adds	r3, r4, r3
   188ce:	781a      	ldrb	r2, [r3, #0]
   188d0:	b2c1      	uxtb	r1, r0
   188d2:	2003      	movs	r0, #3
   188d4:	4b1f      	ldr	r3, [pc, #124]	; (18954 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   188d6:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   188d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
   188da:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   188dc:	69a3      	ldr	r3, [r4, #24]
   188de:	2b00      	cmp	r3, #0
   188e0:	db02      	blt.n	188e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   188e2:	2205      	movs	r2, #5
   188e4:	1b55      	subs	r5, r2, r5
   188e6:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   188e8:	008b      	lsls	r3, r1, #2
   188ea:	185b      	adds	r3, r3, r1
   188ec:	009b      	lsls	r3, r3, #2
   188ee:	4a1a      	ldr	r2, [pc, #104]	; (18958 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   188f0:	18d3      	adds	r3, r2, r3
   188f2:	6962      	ldr	r2, [r4, #20]
   188f4:	429a      	cmp	r2, r3
   188f6:	d1c8      	bne.n	1888a <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   188f8:	1d25      	adds	r5, r4, #4
   188fa:	0028      	movs	r0, r5
   188fc:	4b17      	ldr	r3, [pc, #92]	; (1895c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
   188fe:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
   18900:	0020      	movs	r0, r4
   18902:	4b0f      	ldr	r3, [pc, #60]	; (18940 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   18904:	4798      	blx	r3
   18906:	4b0f      	ldr	r3, [pc, #60]	; (18944 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   18908:	881b      	ldrh	r3, [r3, #0]
   1890a:	4203      	tst	r3, r0
   1890c:	d005      	beq.n	1891a <vTaskPriorityDisinheritAfterTimeout+0xb2>
   1890e:	0020      	movs	r0, r4
   18910:	4b0d      	ldr	r3, [pc, #52]	; (18948 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   18912:	4798      	blx	r3
   18914:	b2c0      	uxtb	r0, r0
   18916:	4b12      	ldr	r3, [pc, #72]	; (18960 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
   18918:	4798      	blx	r3
   1891a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1891c:	4a11      	ldr	r2, [pc, #68]	; (18964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   1891e:	6812      	ldr	r2, [r2, #0]
   18920:	4293      	cmp	r3, r2
   18922:	d901      	bls.n	18928 <vTaskPriorityDisinheritAfterTimeout+0xc0>
   18924:	4a0f      	ldr	r2, [pc, #60]	; (18964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   18926:	6013      	str	r3, [r2, #0]
   18928:	0098      	lsls	r0, r3, #2
   1892a:	18c0      	adds	r0, r0, r3
   1892c:	0080      	lsls	r0, r0, #2
   1892e:	4b0a      	ldr	r3, [pc, #40]	; (18958 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   18930:	1818      	adds	r0, r3, r0
   18932:	0029      	movs	r1, r5
   18934:	4b0c      	ldr	r3, [pc, #48]	; (18968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
   18936:	4798      	blx	r3
	}
   18938:	e7a7      	b.n	1888a <vTaskPriorityDisinheritAfterTimeout+0x22>
   1893a:	46c0      	nop			; (mov r8, r8)
   1893c:	20003b14 	.word	0x20003b14
   18940:	000152fd 	.word	0x000152fd
   18944:	200000c0 	.word	0x200000c0
   18948:	000152ed 	.word	0x000152ed
   1894c:	00015bad 	.word	0x00015bad
   18950:	000161f9 	.word	0x000161f9
   18954:	00015b55 	.word	0x00015b55
   18958:	20003b20 	.word	0x20003b20
   1895c:	0001657b 	.word	0x0001657b
   18960:	00015fcd 	.word	0x00015fcd
   18964:	20003b98 	.word	0x20003b98
   18968:	00016535 	.word	0x00016535

0001896c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   1896c:	4b05      	ldr	r3, [pc, #20]	; (18984 <pvTaskIncrementMutexHeldCount+0x18>)
   1896e:	681b      	ldr	r3, [r3, #0]
   18970:	2b00      	cmp	r3, #0
   18972:	d004      	beq.n	1897e <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
   18974:	4b03      	ldr	r3, [pc, #12]	; (18984 <pvTaskIncrementMutexHeldCount+0x18>)
   18976:	681a      	ldr	r2, [r3, #0]
   18978:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1897a:	3301      	adds	r3, #1
   1897c:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
   1897e:	4b01      	ldr	r3, [pc, #4]	; (18984 <pvTaskIncrementMutexHeldCount+0x18>)
   18980:	6818      	ldr	r0, [r3, #0]
	}
   18982:	4770      	bx	lr
   18984:	20003b14 	.word	0x20003b14

00018988 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   18988:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1898a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1898c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   1898e:	4291      	cmp	r1, r2
   18990:	d80b      	bhi.n	189aa <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18992:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   18994:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18996:	6983      	ldr	r3, [r0, #24]
   18998:	429a      	cmp	r2, r3
   1899a:	d211      	bcs.n	189c0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1899c:	1d01      	adds	r1, r0, #4
   1899e:	4b09      	ldr	r3, [pc, #36]	; (189c4 <prvInsertTimerInActiveList+0x3c>)
   189a0:	6818      	ldr	r0, [r3, #0]
   189a2:	4b09      	ldr	r3, [pc, #36]	; (189c8 <prvInsertTimerInActiveList+0x40>)
   189a4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   189a6:	2400      	movs	r4, #0
   189a8:	e00a      	b.n	189c0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   189aa:	429a      	cmp	r2, r3
   189ac:	d202      	bcs.n	189b4 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   189ae:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   189b0:	4299      	cmp	r1, r3
   189b2:	d205      	bcs.n	189c0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   189b4:	1d01      	adds	r1, r0, #4
   189b6:	4b05      	ldr	r3, [pc, #20]	; (189cc <prvInsertTimerInActiveList+0x44>)
   189b8:	6818      	ldr	r0, [r3, #0]
   189ba:	4b03      	ldr	r3, [pc, #12]	; (189c8 <prvInsertTimerInActiveList+0x40>)
   189bc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   189be:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
   189c0:	0020      	movs	r0, r4
   189c2:	bd10      	pop	{r4, pc}
   189c4:	20003c1c 	.word	0x20003c1c
   189c8:	0001654d 	.word	0x0001654d
   189cc:	20003c18 	.word	0x20003c18

000189d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   189d0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   189d2:	4b0e      	ldr	r3, [pc, #56]	; (18a0c <prvCheckForValidListAndQueue+0x3c>)
   189d4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   189d6:	4b0e      	ldr	r3, [pc, #56]	; (18a10 <prvCheckForValidListAndQueue+0x40>)
   189d8:	681b      	ldr	r3, [r3, #0]
   189da:	2b00      	cmp	r3, #0
   189dc:	d002      	beq.n	189e4 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   189de:	4b0d      	ldr	r3, [pc, #52]	; (18a14 <prvCheckForValidListAndQueue+0x44>)
   189e0:	4798      	blx	r3
}
   189e2:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   189e4:	4d0c      	ldr	r5, [pc, #48]	; (18a18 <prvCheckForValidListAndQueue+0x48>)
   189e6:	0028      	movs	r0, r5
   189e8:	4e0c      	ldr	r6, [pc, #48]	; (18a1c <prvCheckForValidListAndQueue+0x4c>)
   189ea:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   189ec:	4c0c      	ldr	r4, [pc, #48]	; (18a20 <prvCheckForValidListAndQueue+0x50>)
   189ee:	0020      	movs	r0, r4
   189f0:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   189f2:	4b0c      	ldr	r3, [pc, #48]	; (18a24 <prvCheckForValidListAndQueue+0x54>)
   189f4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   189f6:	4b0c      	ldr	r3, [pc, #48]	; (18a28 <prvCheckForValidListAndQueue+0x58>)
   189f8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   189fa:	2200      	movs	r2, #0
   189fc:	210c      	movs	r1, #12
   189fe:	2005      	movs	r0, #5
   18a00:	4b0a      	ldr	r3, [pc, #40]	; (18a2c <prvCheckForValidListAndQueue+0x5c>)
   18a02:	4798      	blx	r3
   18a04:	4b02      	ldr	r3, [pc, #8]	; (18a10 <prvCheckForValidListAndQueue+0x40>)
   18a06:	6018      	str	r0, [r3, #0]
   18a08:	e7e9      	b.n	189de <prvCheckForValidListAndQueue+0xe>
   18a0a:	46c0      	nop			; (mov r8, r8)
   18a0c:	000166b1 	.word	0x000166b1
   18a10:	20003c4c 	.word	0x20003c4c
   18a14:	000166c9 	.word	0x000166c9
   18a18:	20003c20 	.word	0x20003c20
   18a1c:	00016519 	.word	0x00016519
   18a20:	20003c34 	.word	0x20003c34
   18a24:	20003c18 	.word	0x20003c18
   18a28:	20003c1c 	.word	0x20003c1c
   18a2c:	00016b2d 	.word	0x00016b2d

00018a30 <xTimerCreateTimerTask>:
{
   18a30:	b510      	push	{r4, lr}
   18a32:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   18a34:	4b0a      	ldr	r3, [pc, #40]	; (18a60 <xTimerCreateTimerTask+0x30>)
   18a36:	4798      	blx	r3
	if( xTimerQueue != NULL )
   18a38:	4b0a      	ldr	r3, [pc, #40]	; (18a64 <xTimerCreateTimerTask+0x34>)
   18a3a:	681b      	ldr	r3, [r3, #0]
   18a3c:	2b00      	cmp	r3, #0
   18a3e:	d00d      	beq.n	18a5c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
   18a40:	4b09      	ldr	r3, [pc, #36]	; (18a68 <xTimerCreateTimerTask+0x38>)
   18a42:	9301      	str	r3, [sp, #4]
   18a44:	2302      	movs	r3, #2
   18a46:	9300      	str	r3, [sp, #0]
   18a48:	2300      	movs	r3, #0
   18a4a:	2280      	movs	r2, #128	; 0x80
   18a4c:	4907      	ldr	r1, [pc, #28]	; (18a6c <xTimerCreateTimerTask+0x3c>)
   18a4e:	4808      	ldr	r0, [pc, #32]	; (18a70 <xTimerCreateTimerTask+0x40>)
   18a50:	4c08      	ldr	r4, [pc, #32]	; (18a74 <xTimerCreateTimerTask+0x44>)
   18a52:	47a0      	blx	r4
	configASSERT( xReturn );
   18a54:	2800      	cmp	r0, #0
   18a56:	d001      	beq.n	18a5c <xTimerCreateTimerTask+0x2c>
}
   18a58:	b002      	add	sp, #8
   18a5a:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   18a5c:	b672      	cpsid	i
   18a5e:	e7fe      	b.n	18a5e <xTimerCreateTimerTask+0x2e>
   18a60:	000189d1 	.word	0x000189d1
   18a64:	20003c4c 	.word	0x20003c4c
   18a68:	20003c50 	.word	0x20003c50
   18a6c:	00029494 	.word	0x00029494
   18a70:	00018b9d 	.word	0x00018b9d
   18a74:	00017b05 	.word	0x00017b05

00018a78 <xTimerGenericCommand>:
{
   18a78:	b530      	push	{r4, r5, lr}
   18a7a:	b085      	sub	sp, #20
   18a7c:	0004      	movs	r4, r0
   18a7e:	001d      	movs	r5, r3
	configASSERT( xTimer );
   18a80:	2800      	cmp	r0, #0
   18a82:	d014      	beq.n	18aae <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
   18a84:	4b13      	ldr	r3, [pc, #76]	; (18ad4 <xTimerGenericCommand+0x5c>)
   18a86:	6818      	ldr	r0, [r3, #0]
   18a88:	2800      	cmp	r0, #0
   18a8a:	d021      	beq.n	18ad0 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
   18a8c:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   18a8e:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   18a90:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   18a92:	2905      	cmp	r1, #5
   18a94:	dc15      	bgt.n	18ac2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   18a96:	4b10      	ldr	r3, [pc, #64]	; (18ad8 <xTimerGenericCommand+0x60>)
   18a98:	4798      	blx	r3
   18a9a:	2802      	cmp	r0, #2
   18a9c:	d009      	beq.n	18ab2 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   18a9e:	4b0d      	ldr	r3, [pc, #52]	; (18ad4 <xTimerGenericCommand+0x5c>)
   18aa0:	6818      	ldr	r0, [r3, #0]
   18aa2:	2300      	movs	r3, #0
   18aa4:	2200      	movs	r2, #0
   18aa6:	a901      	add	r1, sp, #4
   18aa8:	4c0c      	ldr	r4, [pc, #48]	; (18adc <xTimerGenericCommand+0x64>)
   18aaa:	47a0      	blx	r4
   18aac:	e00e      	b.n	18acc <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
   18aae:	b672      	cpsid	i
   18ab0:	e7fe      	b.n	18ab0 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   18ab2:	4b08      	ldr	r3, [pc, #32]	; (18ad4 <xTimerGenericCommand+0x5c>)
   18ab4:	6818      	ldr	r0, [r3, #0]
   18ab6:	2300      	movs	r3, #0
   18ab8:	9a08      	ldr	r2, [sp, #32]
   18aba:	a901      	add	r1, sp, #4
   18abc:	4c07      	ldr	r4, [pc, #28]	; (18adc <xTimerGenericCommand+0x64>)
   18abe:	47a0      	blx	r4
   18ac0:	e004      	b.n	18acc <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   18ac2:	2300      	movs	r3, #0
   18ac4:	002a      	movs	r2, r5
   18ac6:	a901      	add	r1, sp, #4
   18ac8:	4c05      	ldr	r4, [pc, #20]	; (18ae0 <xTimerGenericCommand+0x68>)
   18aca:	47a0      	blx	r4
}
   18acc:	b005      	add	sp, #20
   18ace:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
   18ad0:	2000      	movs	r0, #0
	return xReturn;
   18ad2:	e7fb      	b.n	18acc <xTimerGenericCommand+0x54>
   18ad4:	20003c4c 	.word	0x20003c4c
   18ad8:	0001863d 	.word	0x0001863d
   18adc:	00016c69 	.word	0x00016c69
   18ae0:	00016fbd 	.word	0x00016fbd

00018ae4 <prvSampleTimeNow>:
{
   18ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ae6:	46d6      	mov	lr, sl
   18ae8:	464f      	mov	r7, r9
   18aea:	4646      	mov	r6, r8
   18aec:	b5c0      	push	{r6, r7, lr}
   18aee:	b082      	sub	sp, #8
   18af0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   18af2:	4b23      	ldr	r3, [pc, #140]	; (18b80 <prvSampleTimeNow+0x9c>)
   18af4:	4798      	blx	r3
   18af6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
   18af8:	4b22      	ldr	r3, [pc, #136]	; (18b84 <prvSampleTimeNow+0xa0>)
   18afa:	681b      	ldr	r3, [r3, #0]
   18afc:	4298      	cmp	r0, r3
   18afe:	d317      	bcc.n	18b30 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
   18b00:	2300      	movs	r3, #0
   18b02:	4642      	mov	r2, r8
   18b04:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
   18b06:	4b1f      	ldr	r3, [pc, #124]	; (18b84 <prvSampleTimeNow+0xa0>)
   18b08:	4652      	mov	r2, sl
   18b0a:	601a      	str	r2, [r3, #0]
}
   18b0c:	4650      	mov	r0, sl
   18b0e:	b002      	add	sp, #8
   18b10:	bc1c      	pop	{r2, r3, r4}
   18b12:	4690      	mov	r8, r2
   18b14:	4699      	mov	r9, r3
   18b16:	46a2      	mov	sl, r4
   18b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18b1a:	2300      	movs	r3, #0
   18b1c:	9300      	str	r3, [sp, #0]
   18b1e:	003a      	movs	r2, r7
   18b20:	2100      	movs	r1, #0
   18b22:	0020      	movs	r0, r4
   18b24:	4c18      	ldr	r4, [pc, #96]	; (18b88 <prvSampleTimeNow+0xa4>)
   18b26:	47a0      	blx	r4
				configASSERT( xResult );
   18b28:	2800      	cmp	r0, #0
   18b2a:	d104      	bne.n	18b36 <prvSampleTimeNow+0x52>
   18b2c:	b672      	cpsid	i
   18b2e:	e7fe      	b.n	18b2e <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18b30:	4d16      	ldr	r5, [pc, #88]	; (18b8c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18b32:	4b17      	ldr	r3, [pc, #92]	; (18b90 <prvSampleTimeNow+0xac>)
   18b34:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18b36:	682b      	ldr	r3, [r5, #0]
   18b38:	681a      	ldr	r2, [r3, #0]
   18b3a:	2a00      	cmp	r2, #0
   18b3c:	d017      	beq.n	18b6e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18b3e:	68db      	ldr	r3, [r3, #12]
   18b40:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18b42:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18b44:	1d26      	adds	r6, r4, #4
   18b46:	0030      	movs	r0, r6
   18b48:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18b4a:	0020      	movs	r0, r4
   18b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18b4e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18b50:	69e3      	ldr	r3, [r4, #28]
   18b52:	2b01      	cmp	r3, #1
   18b54:	d1ef      	bne.n	18b36 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   18b56:	69a3      	ldr	r3, [r4, #24]
   18b58:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
   18b5a:	429f      	cmp	r7, r3
   18b5c:	d2dd      	bcs.n	18b1a <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   18b5e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   18b60:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   18b62:	4b0a      	ldr	r3, [pc, #40]	; (18b8c <prvSampleTimeNow+0xa8>)
   18b64:	6818      	ldr	r0, [r3, #0]
   18b66:	0031      	movs	r1, r6
   18b68:	4b0a      	ldr	r3, [pc, #40]	; (18b94 <prvSampleTimeNow+0xb0>)
   18b6a:	4798      	blx	r3
   18b6c:	e7e3      	b.n	18b36 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
   18b6e:	4a0a      	ldr	r2, [pc, #40]	; (18b98 <prvSampleTimeNow+0xb4>)
   18b70:	4906      	ldr	r1, [pc, #24]	; (18b8c <prvSampleTimeNow+0xa8>)
   18b72:	6810      	ldr	r0, [r2, #0]
   18b74:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   18b76:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   18b78:	2301      	movs	r3, #1
   18b7a:	4642      	mov	r2, r8
   18b7c:	6013      	str	r3, [r2, #0]
   18b7e:	e7c2      	b.n	18b06 <prvSampleTimeNow+0x22>
   18b80:	00017e31 	.word	0x00017e31
   18b84:	20003c48 	.word	0x20003c48
   18b88:	00018a79 	.word	0x00018a79
   18b8c:	20003c18 	.word	0x20003c18
   18b90:	0001657b 	.word	0x0001657b
   18b94:	0001654d 	.word	0x0001654d
   18b98:	20003c1c 	.word	0x20003c1c

00018b9c <prvTimerTask>:
{
   18b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b9e:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
   18ba0:	4b53      	ldr	r3, [pc, #332]	; (18cf0 <prvTimerTask+0x154>)
   18ba2:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18ba4:	4f53      	ldr	r7, [pc, #332]	; (18cf4 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   18ba6:	4b54      	ldr	r3, [pc, #336]	; (18cf8 <prvTimerTask+0x15c>)
   18ba8:	681b      	ldr	r3, [r3, #0]
   18baa:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   18bac:	2a00      	cmp	r2, #0
   18bae:	d00e      	beq.n	18bce <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18bb0:	68db      	ldr	r3, [r3, #12]
   18bb2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   18bb4:	4b51      	ldr	r3, [pc, #324]	; (18cfc <prvTimerTask+0x160>)
   18bb6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18bb8:	a805      	add	r0, sp, #20
   18bba:	4b51      	ldr	r3, [pc, #324]	; (18d00 <prvTimerTask+0x164>)
   18bbc:	4798      	blx	r3
   18bbe:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18bc0:	9b05      	ldr	r3, [sp, #20]
   18bc2:	2b00      	cmp	r3, #0
   18bc4:	d15f      	bne.n	18c86 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   18bc6:	4284      	cmp	r4, r0
   18bc8:	d936      	bls.n	18c38 <prvTimerTask+0x9c>
   18bca:	2200      	movs	r2, #0
   18bcc:	e00f      	b.n	18bee <prvTimerTask+0x52>
	vTaskSuspendAll();
   18bce:	4b4b      	ldr	r3, [pc, #300]	; (18cfc <prvTimerTask+0x160>)
   18bd0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18bd2:	a805      	add	r0, sp, #20
   18bd4:	4b4a      	ldr	r3, [pc, #296]	; (18d00 <prvTimerTask+0x164>)
   18bd6:	4798      	blx	r3
   18bd8:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18bda:	9b05      	ldr	r3, [sp, #20]
   18bdc:	2b00      	cmp	r3, #0
   18bde:	d152      	bne.n	18c86 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   18be0:	4b48      	ldr	r3, [pc, #288]	; (18d04 <prvTimerTask+0x168>)
   18be2:	681b      	ldr	r3, [r3, #0]
   18be4:	681b      	ldr	r3, [r3, #0]
   18be6:	425a      	negs	r2, r3
   18be8:	415a      	adcs	r2, r3
   18bea:	b2d2      	uxtb	r2, r2
   18bec:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   18bee:	1b61      	subs	r1, r4, r5
   18bf0:	4b45      	ldr	r3, [pc, #276]	; (18d08 <prvTimerTask+0x16c>)
   18bf2:	6818      	ldr	r0, [r3, #0]
   18bf4:	4b45      	ldr	r3, [pc, #276]	; (18d0c <prvTimerTask+0x170>)
   18bf6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   18bf8:	4b45      	ldr	r3, [pc, #276]	; (18d10 <prvTimerTask+0x174>)
   18bfa:	4798      	blx	r3
   18bfc:	2800      	cmp	r0, #0
   18bfe:	d03f      	beq.n	18c80 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   18c00:	4d41      	ldr	r5, [pc, #260]	; (18d08 <prvTimerTask+0x16c>)
   18c02:	4c44      	ldr	r4, [pc, #272]	; (18d14 <prvTimerTask+0x178>)
   18c04:	2200      	movs	r2, #0
   18c06:	a905      	add	r1, sp, #20
   18c08:	6828      	ldr	r0, [r5, #0]
   18c0a:	47a0      	blx	r4
   18c0c:	2800      	cmp	r0, #0
   18c0e:	d0ca      	beq.n	18ba6 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   18c10:	9b05      	ldr	r3, [sp, #20]
   18c12:	9303      	str	r3, [sp, #12]
   18c14:	2b00      	cmp	r3, #0
   18c16:	dbf5      	blt.n	18c04 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   18c18:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   18c1a:	6973      	ldr	r3, [r6, #20]
   18c1c:	2b00      	cmp	r3, #0
   18c1e:	d001      	beq.n	18c24 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c20:	1d30      	adds	r0, r6, #4
   18c22:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18c24:	a804      	add	r0, sp, #16
   18c26:	4b36      	ldr	r3, [pc, #216]	; (18d00 <prvTimerTask+0x164>)
   18c28:	4798      	blx	r3
			switch( xMessage.xMessageID )
   18c2a:	9b05      	ldr	r3, [sp, #20]
   18c2c:	2b09      	cmp	r3, #9
   18c2e:	d8e9      	bhi.n	18c04 <prvTimerTask+0x68>
   18c30:	009b      	lsls	r3, r3, #2
   18c32:	4a39      	ldr	r2, [pc, #228]	; (18d18 <prvTimerTask+0x17c>)
   18c34:	58d3      	ldr	r3, [r2, r3]
   18c36:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
   18c38:	4b35      	ldr	r3, [pc, #212]	; (18d10 <prvTimerTask+0x174>)
   18c3a:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18c3c:	4b2e      	ldr	r3, [pc, #184]	; (18cf8 <prvTimerTask+0x15c>)
   18c3e:	681b      	ldr	r3, [r3, #0]
   18c40:	68db      	ldr	r3, [r3, #12]
   18c42:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c44:	1d30      	adds	r0, r6, #4
   18c46:	4b2b      	ldr	r3, [pc, #172]	; (18cf4 <prvTimerTask+0x158>)
   18c48:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18c4a:	69f3      	ldr	r3, [r6, #28]
   18c4c:	2b01      	cmp	r3, #1
   18c4e:	d003      	beq.n	18c58 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18c50:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18c52:	0030      	movs	r0, r6
   18c54:	4798      	blx	r3
   18c56:	e7d3      	b.n	18c00 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   18c58:	69b3      	ldr	r3, [r6, #24]
   18c5a:	18e1      	adds	r1, r4, r3
   18c5c:	0023      	movs	r3, r4
   18c5e:	002a      	movs	r2, r5
   18c60:	0030      	movs	r0, r6
   18c62:	4d2e      	ldr	r5, [pc, #184]	; (18d1c <prvTimerTask+0x180>)
   18c64:	47a8      	blx	r5
   18c66:	2800      	cmp	r0, #0
   18c68:	d0f2      	beq.n	18c50 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18c6a:	2300      	movs	r3, #0
   18c6c:	9300      	str	r3, [sp, #0]
   18c6e:	0022      	movs	r2, r4
   18c70:	2100      	movs	r1, #0
   18c72:	0030      	movs	r0, r6
   18c74:	4c2a      	ldr	r4, [pc, #168]	; (18d20 <prvTimerTask+0x184>)
   18c76:	47a0      	blx	r4
			configASSERT( xResult );
   18c78:	2800      	cmp	r0, #0
   18c7a:	d1e9      	bne.n	18c50 <prvTimerTask+0xb4>
   18c7c:	b672      	cpsid	i
   18c7e:	e7fe      	b.n	18c7e <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
   18c80:	4b28      	ldr	r3, [pc, #160]	; (18d24 <prvTimerTask+0x188>)
   18c82:	4798      	blx	r3
   18c84:	e7bc      	b.n	18c00 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
   18c86:	4b22      	ldr	r3, [pc, #136]	; (18d10 <prvTimerTask+0x174>)
   18c88:	4798      	blx	r3
   18c8a:	e7b9      	b.n	18c00 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   18c8c:	9b06      	ldr	r3, [sp, #24]
   18c8e:	69b2      	ldr	r2, [r6, #24]
   18c90:	4694      	mov	ip, r2
   18c92:	4463      	add	r3, ip
   18c94:	0019      	movs	r1, r3
   18c96:	9b06      	ldr	r3, [sp, #24]
   18c98:	0002      	movs	r2, r0
   18c9a:	0030      	movs	r0, r6
   18c9c:	4c1f      	ldr	r4, [pc, #124]	; (18d1c <prvTimerTask+0x180>)
   18c9e:	47a0      	blx	r4
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d0ae      	beq.n	18c02 <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18ca4:	0030      	movs	r0, r6
   18ca6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18ca8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18caa:	69f3      	ldr	r3, [r6, #28]
   18cac:	2b01      	cmp	r3, #1
   18cae:	d1a8      	bne.n	18c02 <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   18cb0:	9b06      	ldr	r3, [sp, #24]
   18cb2:	69b1      	ldr	r1, [r6, #24]
   18cb4:	468c      	mov	ip, r1
   18cb6:	4463      	add	r3, ip
   18cb8:	001a      	movs	r2, r3
   18cba:	2300      	movs	r3, #0
   18cbc:	9300      	str	r3, [sp, #0]
   18cbe:	2100      	movs	r1, #0
   18cc0:	0030      	movs	r0, r6
   18cc2:	4c17      	ldr	r4, [pc, #92]	; (18d20 <prvTimerTask+0x184>)
   18cc4:	47a0      	blx	r4
							configASSERT( xResult );
   18cc6:	2800      	cmp	r0, #0
   18cc8:	d19b      	bne.n	18c02 <prvTimerTask+0x66>
   18cca:	b672      	cpsid	i
   18ccc:	e7fe      	b.n	18ccc <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   18cce:	9906      	ldr	r1, [sp, #24]
   18cd0:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18cd2:	2900      	cmp	r1, #0
   18cd4:	d006      	beq.n	18ce4 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   18cd6:	1841      	adds	r1, r0, r1
   18cd8:	0003      	movs	r3, r0
   18cda:	0002      	movs	r2, r0
   18cdc:	0030      	movs	r0, r6
   18cde:	4c0f      	ldr	r4, [pc, #60]	; (18d1c <prvTimerTask+0x180>)
   18ce0:	47a0      	blx	r4
   18ce2:	e78e      	b.n	18c02 <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18ce4:	b672      	cpsid	i
   18ce6:	e7fe      	b.n	18ce6 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
   18ce8:	0030      	movs	r0, r6
   18cea:	4b0f      	ldr	r3, [pc, #60]	; (18d28 <prvTimerTask+0x18c>)
   18cec:	4798      	blx	r3
   18cee:	e788      	b.n	18c02 <prvTimerTask+0x66>
   18cf0:	00023e39 	.word	0x00023e39
   18cf4:	0001657b 	.word	0x0001657b
   18cf8:	20003c18 	.word	0x20003c18
   18cfc:	00017e21 	.word	0x00017e21
   18d00:	00018ae5 	.word	0x00018ae5
   18d04:	20003c1c 	.word	0x20003c1c
   18d08:	20003c4c 	.word	0x20003c4c
   18d0c:	00017971 	.word	0x00017971
   18d10:	00017fc9 	.word	0x00017fc9
   18d14:	00017305 	.word	0x00017305
   18d18:	0002946c 	.word	0x0002946c
   18d1c:	00018989 	.word	0x00018989
   18d20:	00018a79 	.word	0x00018a79
   18d24:	000166a1 	.word	0x000166a1
   18d28:	00016805 	.word	0x00016805

00018d2c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   18d2c:	b510      	push	{r4, lr}
   18d2e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
   18d30:	7c03      	ldrb	r3, [r0, #16]
   18d32:	2b00      	cmp	r3, #0
   18d34:	d005      	beq.n	18d42 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18d36:	6883      	ldr	r3, [r0, #8]
   18d38:	1c58      	adds	r0, r3, #1
   18d3a:	68e1      	ldr	r1, [r4, #12]
   18d3c:	4b07      	ldr	r3, [pc, #28]	; (18d5c <advance_pointer+0x30>)
   18d3e:	4798      	blx	r3
   18d40:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   18d42:	6863      	ldr	r3, [r4, #4]
   18d44:	1c58      	adds	r0, r3, #1
   18d46:	68e1      	ldr	r1, [r4, #12]
   18d48:	4b04      	ldr	r3, [pc, #16]	; (18d5c <advance_pointer+0x30>)
   18d4a:	4798      	blx	r3
   18d4c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   18d4e:	68a3      	ldr	r3, [r4, #8]
   18d50:	1a59      	subs	r1, r3, r1
   18d52:	424a      	negs	r2, r1
   18d54:	414a      	adcs	r2, r1
   18d56:	7422      	strb	r2, [r4, #16]
 }
   18d58:	bd10      	pop	{r4, pc}
   18d5a:	46c0      	nop			; (mov r8, r8)
   18d5c:	000240f5 	.word	0x000240f5

00018d60 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   18d60:	b570      	push	{r4, r5, r6, lr}
   18d62:	0005      	movs	r5, r0
   18d64:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   18d66:	2014      	movs	r0, #20
   18d68:	4b04      	ldr	r3, [pc, #16]	; (18d7c <circular_buf_init+0x1c>)
   18d6a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   18d6c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
   18d6e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
   18d70:	2300      	movs	r3, #0
   18d72:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
   18d74:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
   18d76:	7403      	strb	r3, [r0, #16]
 }
   18d78:	bd70      	pop	{r4, r5, r6, pc}
   18d7a:	46c0      	nop			; (mov r8, r8)
   18d7c:	000261f5 	.word	0x000261f5

00018d80 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   18d80:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   18d82:	6803      	ldr	r3, [r0, #0]
   18d84:	6842      	ldr	r2, [r0, #4]
   18d86:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
   18d88:	4b01      	ldr	r3, [pc, #4]	; (18d90 <circular_buf_put+0x10>)
   18d8a:	4798      	blx	r3
 }
   18d8c:	bd10      	pop	{r4, pc}
   18d8e:	46c0      	nop			; (mov r8, r8)
   18d90:	00018d2d 	.word	0x00018d2d

00018d94 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   18d94:	7c02      	ldrb	r2, [r0, #16]
   18d96:	2300      	movs	r3, #0
   18d98:	2a00      	cmp	r2, #0
   18d9a:	d105      	bne.n	18da8 <circular_buf_empty+0x14>
   18d9c:	6843      	ldr	r3, [r0, #4]
   18d9e:	6880      	ldr	r0, [r0, #8]
   18da0:	1a1b      	subs	r3, r3, r0
   18da2:	4258      	negs	r0, r3
   18da4:	4143      	adcs	r3, r0
   18da6:	b2db      	uxtb	r3, r3
   18da8:	0018      	movs	r0, r3
 }
   18daa:	4770      	bx	lr

00018dac <circular_buf_get>:
 {
   18dac:	b570      	push	{r4, r5, r6, lr}
   18dae:	0004      	movs	r4, r0
   18db0:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
   18db2:	4b0a      	ldr	r3, [pc, #40]	; (18ddc <circular_buf_get+0x30>)
   18db4:	4798      	blx	r3
   18db6:	2800      	cmp	r0, #0
   18db8:	d10d      	bne.n	18dd6 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
   18dba:	6823      	ldr	r3, [r4, #0]
   18dbc:	68a2      	ldr	r2, [r4, #8]
   18dbe:	5c9b      	ldrb	r3, [r3, r2]
   18dc0:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
   18dc2:	2300      	movs	r3, #0
   18dc4:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18dc6:	68a3      	ldr	r3, [r4, #8]
   18dc8:	1c58      	adds	r0, r3, #1
   18dca:	68e1      	ldr	r1, [r4, #12]
   18dcc:	4b04      	ldr	r3, [pc, #16]	; (18de0 <circular_buf_get+0x34>)
   18dce:	4798      	blx	r3
   18dd0:	60a1      	str	r1, [r4, #8]
		 r = 0;
   18dd2:	2000      	movs	r0, #0
 }
   18dd4:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
   18dd6:	2001      	movs	r0, #1
   18dd8:	4240      	negs	r0, r0
	 return r;
   18dda:	e7fb      	b.n	18dd4 <circular_buf_get+0x28>
   18ddc:	00018d95 	.word	0x00018d95
   18de0:	000240f5 	.word	0x000240f5

00018de4 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   18de4:	b510      	push	{r4, lr}

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   18de6:	4c06      	ldr	r4, [pc, #24]	; (18e00 <usart_read_callback+0x1c>)
   18de8:	7821      	ldrb	r1, [r4, #0]
   18dea:	4b06      	ldr	r3, [pc, #24]	; (18e04 <usart_read_callback+0x20>)
   18dec:	6818      	ldr	r0, [r3, #0]
   18dee:	4b06      	ldr	r3, [pc, #24]	; (18e08 <usart_read_callback+0x24>)
   18df0:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   18df2:	2201      	movs	r2, #1
   18df4:	0021      	movs	r1, r4
   18df6:	4805      	ldr	r0, [pc, #20]	; (18e0c <usart_read_callback+0x28>)
   18df8:	4b05      	ldr	r3, [pc, #20]	; (18e10 <usart_read_callback+0x2c>)
   18dfa:	4798      	blx	r3
	
}
   18dfc:	bd10      	pop	{r4, pc}
   18dfe:	46c0      	nop			; (mov r8, r8)
   18e00:	20005140 	.word	0x20005140
   18e04:	2000513c 	.word	0x2000513c
   18e08:	00018d81 	.word	0x00018d81
   18e0c:	20005108 	.word	0x20005108
   18e10:	0001e9b1 	.word	0x0001e9b1

00018e14 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   18e14:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   18e16:	4b06      	ldr	r3, [pc, #24]	; (18e30 <usart_write_callback+0x1c>)
   18e18:	6818      	ldr	r0, [r3, #0]
   18e1a:	4906      	ldr	r1, [pc, #24]	; (18e34 <usart_write_callback+0x20>)
   18e1c:	4b06      	ldr	r3, [pc, #24]	; (18e38 <usart_write_callback+0x24>)
   18e1e:	4798      	blx	r3
   18e20:	1c43      	adds	r3, r0, #1
   18e22:	d004      	beq.n	18e2e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   18e24:	2201      	movs	r2, #1
   18e26:	4903      	ldr	r1, [pc, #12]	; (18e34 <usart_write_callback+0x20>)
   18e28:	4804      	ldr	r0, [pc, #16]	; (18e3c <usart_write_callback+0x28>)
   18e2a:	4b05      	ldr	r3, [pc, #20]	; (18e40 <usart_write_callback+0x2c>)
   18e2c:	4798      	blx	r3
	}
	
}
   18e2e:	bd10      	pop	{r4, pc}
   18e30:	20005448 	.word	0x20005448
   18e34:	20005444 	.word	0x20005444
   18e38:	00018dad 	.word	0x00018dad
   18e3c:	20005108 	.word	0x20005108
   18e40:	0001e991 	.word	0x0001e991

00018e44 <InitializeSerialConsole>:
{
   18e44:	b530      	push	{r4, r5, lr}
   18e46:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   18e48:	2180      	movs	r1, #128	; 0x80
   18e4a:	0049      	lsls	r1, r1, #1
   18e4c:	4836      	ldr	r0, [pc, #216]	; (18f28 <InitializeSerialConsole+0xe4>)
   18e4e:	4c37      	ldr	r4, [pc, #220]	; (18f2c <InitializeSerialConsole+0xe8>)
   18e50:	47a0      	blx	r4
   18e52:	4b37      	ldr	r3, [pc, #220]	; (18f30 <InitializeSerialConsole+0xec>)
   18e54:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
   18e56:	2180      	movs	r1, #128	; 0x80
   18e58:	0089      	lsls	r1, r1, #2
   18e5a:	4836      	ldr	r0, [pc, #216]	; (18f34 <InitializeSerialConsole+0xf0>)
   18e5c:	47a0      	blx	r4
   18e5e:	4b36      	ldr	r3, [pc, #216]	; (18f38 <InitializeSerialConsole+0xf4>)
   18e60:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   18e62:	2380      	movs	r3, #128	; 0x80
   18e64:	05db      	lsls	r3, r3, #23
   18e66:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   18e68:	2300      	movs	r3, #0
   18e6a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   18e6c:	22ff      	movs	r2, #255	; 0xff
   18e6e:	4669      	mov	r1, sp
   18e70:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   18e72:	2200      	movs	r2, #0
   18e74:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   18e76:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   18e78:	2101      	movs	r1, #1
   18e7a:	2024      	movs	r0, #36	; 0x24
   18e7c:	466c      	mov	r4, sp
   18e7e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
   18e80:	3001      	adds	r0, #1
   18e82:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
   18e84:	3125      	adds	r1, #37	; 0x25
   18e86:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
   18e88:	3101      	adds	r1, #1
   18e8a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
   18e8c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   18e8e:	3105      	adds	r1, #5
   18e90:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
   18e92:	3101      	adds	r1, #1
   18e94:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   18e96:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   18e98:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   18e9a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   18e9c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   18e9e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   18ea0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
   18ea2:	2313      	movs	r3, #19
   18ea4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   18ea6:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
   18ea8:	23e1      	movs	r3, #225	; 0xe1
   18eaa:	025b      	lsls	r3, r3, #9
   18eac:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   18eae:	23c4      	movs	r3, #196	; 0xc4
   18eb0:	039b      	lsls	r3, r3, #14
   18eb2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   18eb4:	2301      	movs	r3, #1
   18eb6:	425b      	negs	r3, r3
   18eb8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   18eba:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   18ebc:	4b1f      	ldr	r3, [pc, #124]	; (18f3c <InitializeSerialConsole+0xf8>)
   18ebe:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   18ec0:	4b1f      	ldr	r3, [pc, #124]	; (18f40 <InitializeSerialConsole+0xfc>)
   18ec2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
   18ec4:	4d1f      	ldr	r5, [pc, #124]	; (18f44 <InitializeSerialConsole+0x100>)
   18ec6:	4c20      	ldr	r4, [pc, #128]	; (18f48 <InitializeSerialConsole+0x104>)
   18ec8:	466a      	mov	r2, sp
   18eca:	4920      	ldr	r1, [pc, #128]	; (18f4c <InitializeSerialConsole+0x108>)
   18ecc:	0028      	movs	r0, r5
   18ece:	47a0      	blx	r4
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d1f9      	bne.n	18ec8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   18ed4:	4d1b      	ldr	r5, [pc, #108]	; (18f44 <InitializeSerialConsole+0x100>)
   18ed6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   18ed8:	0020      	movs	r0, r4
   18eda:	4b1d      	ldr	r3, [pc, #116]	; (18f50 <InitializeSerialConsole+0x10c>)
   18edc:	4798      	blx	r3
   18ede:	231f      	movs	r3, #31
   18ee0:	4018      	ands	r0, r3
   18ee2:	3b1e      	subs	r3, #30
   18ee4:	4083      	lsls	r3, r0
   18ee6:	4a1b      	ldr	r2, [pc, #108]	; (18f54 <InitializeSerialConsole+0x110>)
   18ee8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18eea:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   18eec:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   18eee:	2b00      	cmp	r3, #0
   18ef0:	d1fc      	bne.n	18eec <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   18ef2:	6823      	ldr	r3, [r4, #0]
   18ef4:	2202      	movs	r2, #2
   18ef6:	4313      	orrs	r3, r2
   18ef8:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
   18efa:	4c12      	ldr	r4, [pc, #72]	; (18f44 <InitializeSerialConsole+0x100>)
   18efc:	2200      	movs	r2, #0
   18efe:	4916      	ldr	r1, [pc, #88]	; (18f58 <InitializeSerialConsole+0x114>)
   18f00:	0020      	movs	r0, r4
   18f02:	4d16      	ldr	r5, [pc, #88]	; (18f5c <InitializeSerialConsole+0x118>)
   18f04:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
   18f06:	2201      	movs	r2, #1
   18f08:	4915      	ldr	r1, [pc, #84]	; (18f60 <InitializeSerialConsole+0x11c>)
   18f0a:	0020      	movs	r0, r4
   18f0c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   18f0e:	2231      	movs	r2, #49	; 0x31
   18f10:	5ca3      	ldrb	r3, [r4, r2]
   18f12:	2103      	movs	r1, #3
   18f14:	430b      	orrs	r3, r1
   18f16:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   18f18:	3a30      	subs	r2, #48	; 0x30
   18f1a:	4912      	ldr	r1, [pc, #72]	; (18f64 <InitializeSerialConsole+0x120>)
   18f1c:	0020      	movs	r0, r4
   18f1e:	4b12      	ldr	r3, [pc, #72]	; (18f68 <InitializeSerialConsole+0x124>)
   18f20:	4798      	blx	r3
}
   18f22:	b011      	add	sp, #68	; 0x44
   18f24:	bd30      	pop	{r4, r5, pc}
   18f26:	46c0      	nop			; (mov r8, r8)
   18f28:	20005344 	.word	0x20005344
   18f2c:	00018d61 	.word	0x00018d61
   18f30:	2000513c 	.word	0x2000513c
   18f34:	20005144 	.word	0x20005144
   18f38:	20005448 	.word	0x20005448
   18f3c:	002a0003 	.word	0x002a0003
   18f40:	002b0003 	.word	0x002b0003
   18f44:	20005108 	.word	0x20005108
   18f48:	0001e5a9 	.word	0x0001e5a9
   18f4c:	42001800 	.word	0x42001800
   18f50:	0001de25 	.word	0x0001de25
   18f54:	e000e100 	.word	0xe000e100
   18f58:	00018e15 	.word	0x00018e15
   18f5c:	0001e979 	.word	0x0001e979
   18f60:	00018de5 	.word	0x00018de5
   18f64:	20005140 	.word	0x20005140
   18f68:	0001e9b1 	.word	0x0001e9b1

00018f6c <SerialConsoleWriteString>:
{
   18f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f6e:	46c6      	mov	lr, r8
   18f70:	b500      	push	{lr}
   18f72:	0005      	movs	r5, r0
vTaskSuspendAll();
   18f74:	4b14      	ldr	r3, [pc, #80]	; (18fc8 <SerialConsoleWriteString+0x5c>)
   18f76:	4798      	blx	r3
   18f78:	2400      	movs	r4, #0
 	if(string != NULL)
   18f7a:	2d00      	cmp	r5, #0
   18f7c:	d012      	beq.n	18fa4 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
   18f7e:	4e13      	ldr	r6, [pc, #76]	; (18fcc <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
   18f80:	4f13      	ldr	r7, [pc, #76]	; (18fd0 <SerialConsoleWriteString+0x64>)
   18f82:	4b14      	ldr	r3, [pc, #80]	; (18fd4 <SerialConsoleWriteString+0x68>)
   18f84:	4698      	mov	r8, r3
   18f86:	e003      	b.n	18f90 <SerialConsoleWriteString+0x24>
   18f88:	5d29      	ldrb	r1, [r5, r4]
   18f8a:	6838      	ldr	r0, [r7, #0]
   18f8c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
   18f8e:	3401      	adds	r4, #1
   18f90:	0028      	movs	r0, r5
   18f92:	47b0      	blx	r6
   18f94:	4284      	cmp	r4, r0
   18f96:	d3f7      	bcc.n	18f88 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   18f98:	2101      	movs	r1, #1
   18f9a:	480f      	ldr	r0, [pc, #60]	; (18fd8 <SerialConsoleWriteString+0x6c>)
   18f9c:	4b0f      	ldr	r3, [pc, #60]	; (18fdc <SerialConsoleWriteString+0x70>)
   18f9e:	4798      	blx	r3
   18fa0:	2800      	cmp	r0, #0
   18fa2:	d004      	beq.n	18fae <SerialConsoleWriteString+0x42>
xTaskResumeAll();
   18fa4:	4b0e      	ldr	r3, [pc, #56]	; (18fe0 <SerialConsoleWriteString+0x74>)
   18fa6:	4798      	blx	r3
}
   18fa8:	bc04      	pop	{r2}
   18faa:	4690      	mov	r8, r2
   18fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   18fae:	4c0d      	ldr	r4, [pc, #52]	; (18fe4 <SerialConsoleWriteString+0x78>)
   18fb0:	4b07      	ldr	r3, [pc, #28]	; (18fd0 <SerialConsoleWriteString+0x64>)
   18fb2:	6818      	ldr	r0, [r3, #0]
   18fb4:	0021      	movs	r1, r4
   18fb6:	4b0c      	ldr	r3, [pc, #48]	; (18fe8 <SerialConsoleWriteString+0x7c>)
   18fb8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   18fba:	2201      	movs	r2, #1
   18fbc:	0021      	movs	r1, r4
   18fbe:	4806      	ldr	r0, [pc, #24]	; (18fd8 <SerialConsoleWriteString+0x6c>)
   18fc0:	4b0a      	ldr	r3, [pc, #40]	; (18fec <SerialConsoleWriteString+0x80>)
   18fc2:	4798      	blx	r3
   18fc4:	e7ee      	b.n	18fa4 <SerialConsoleWriteString+0x38>
   18fc6:	46c0      	nop			; (mov r8, r8)
   18fc8:	00017e21 	.word	0x00017e21
   18fcc:	00026667 	.word	0x00026667
   18fd0:	20005448 	.word	0x20005448
   18fd4:	00018d81 	.word	0x00018d81
   18fd8:	20005108 	.word	0x20005108
   18fdc:	0001e9d1 	.word	0x0001e9d1
   18fe0:	00017fc9 	.word	0x00017fc9
   18fe4:	20005444 	.word	0x20005444
   18fe8:	00018dad 	.word	0x00018dad
   18fec:	0001e991 	.word	0x0001e991

00018ff0 <SerialConsoleReadCharacter>:
{
   18ff0:	b510      	push	{r4, lr}
   18ff2:	0004      	movs	r4, r0
	vTaskSuspendAll();
   18ff4:	4b05      	ldr	r3, [pc, #20]	; (1900c <SerialConsoleReadCharacter+0x1c>)
   18ff6:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   18ff8:	4b05      	ldr	r3, [pc, #20]	; (19010 <SerialConsoleReadCharacter+0x20>)
   18ffa:	6818      	ldr	r0, [r3, #0]
   18ffc:	0021      	movs	r1, r4
   18ffe:	4b05      	ldr	r3, [pc, #20]	; (19014 <SerialConsoleReadCharacter+0x24>)
   19000:	4798      	blx	r3
   19002:	0004      	movs	r4, r0
	xTaskResumeAll();
   19004:	4b04      	ldr	r3, [pc, #16]	; (19018 <SerialConsoleReadCharacter+0x28>)
   19006:	4798      	blx	r3
}
   19008:	0020      	movs	r0, r4
   1900a:	bd10      	pop	{r4, pc}
   1900c:	00017e21 	.word	0x00017e21
   19010:	2000513c 	.word	0x2000513c
   19014:	00018dad 	.word	0x00018dad
   19018:	00017fc9 	.word	0x00017fc9

0001901c <LogMessage>:
{
   1901c:	b40e      	push	{r1, r2, r3}
   1901e:	b530      	push	{r4, r5, lr}
   19020:	b082      	sub	sp, #8
return currentDebugLevel;
   19022:	4b0a      	ldr	r3, [pc, #40]	; (1904c <LogMessage+0x30>)
if(getLogLevel() <= level){
   19024:	781b      	ldrb	r3, [r3, #0]
   19026:	4283      	cmp	r3, r0
   19028:	d904      	bls.n	19034 <LogMessage+0x18>
};
   1902a:	b002      	add	sp, #8
   1902c:	bc30      	pop	{r4, r5}
   1902e:	bc08      	pop	{r3}
   19030:	b003      	add	sp, #12
   19032:	4718      	bx	r3
	va_start(ap, format);
   19034:	ab06      	add	r3, sp, #24
   19036:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
   19038:	4c05      	ldr	r4, [pc, #20]	; (19050 <LogMessage+0x34>)
   1903a:	9a05      	ldr	r2, [sp, #20]
   1903c:	217f      	movs	r1, #127	; 0x7f
   1903e:	0020      	movs	r0, r4
   19040:	4d04      	ldr	r5, [pc, #16]	; (19054 <LogMessage+0x38>)
   19042:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
   19044:	0020      	movs	r0, r4
   19046:	4b04      	ldr	r3, [pc, #16]	; (19058 <LogMessage+0x3c>)
   19048:	4798      	blx	r3
};
   1904a:	e7ee      	b.n	1902a <LogMessage+0xe>
   1904c:	20003c54 	.word	0x20003c54
   19050:	20005088 	.word	0x20005088
   19054:	000268a1 	.word	0x000268a1
   19058:	00018f6d 	.word	0x00018f6d

0001905c <LogMessageDebug>:
{
   1905c:	b40f      	push	{r0, r1, r2, r3}
   1905e:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
   19060:	9902      	ldr	r1, [sp, #8]
   19062:	2001      	movs	r0, #1
   19064:	4b02      	ldr	r3, [pc, #8]	; (19070 <LogMessageDebug+0x14>)
   19066:	4798      	blx	r3
};
   19068:	bc10      	pop	{r4}
   1906a:	bc08      	pop	{r3}
   1906c:	b004      	add	sp, #16
   1906e:	4718      	bx	r3
   19070:	0001901d 	.word	0x0001901d

00019074 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   19074:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   19076:	4b06      	ldr	r3, [pc, #24]	; (19090 <sd_mmc_configure_slot+0x1c>)
   19078:	6819      	ldr	r1, [r3, #0]
   1907a:	7f8b      	ldrb	r3, [r1, #30]
   1907c:	1e5a      	subs	r2, r3, #1
   1907e:	4193      	sbcs	r3, r2
   19080:	b2db      	uxtb	r3, r3
   19082:	7b4a      	ldrb	r2, [r1, #13]
   19084:	6809      	ldr	r1, [r1, #0]
   19086:	4803      	ldr	r0, [pc, #12]	; (19094 <sd_mmc_configure_slot+0x20>)
   19088:	7800      	ldrb	r0, [r0, #0]
   1908a:	4c03      	ldr	r4, [pc, #12]	; (19098 <sd_mmc_configure_slot+0x24>)
   1908c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
   1908e:	bd10      	pop	{r4, pc}
   19090:	20003c58 	.word	0x20003c58
   19094:	20003c80 	.word	0x20003c80
   19098:	00019d1d 	.word	0x00019d1d

0001909c <sd_mmc_select_slot>:
{
   1909c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
   1909e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
   190a0:	2800      	cmp	r0, #0
   190a2:	d001      	beq.n	190a8 <sd_mmc_select_slot+0xc>
}
   190a4:	0018      	movs	r0, r3
   190a6:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   190a8:	4b0e      	ldr	r3, [pc, #56]	; (190e4 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   190aa:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   190ac:	3b03      	subs	r3, #3
   190ae:	2b01      	cmp	r3, #1
   190b0:	d90d      	bls.n	190ce <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
   190b2:	2200      	movs	r2, #0
   190b4:	4b0c      	ldr	r3, [pc, #48]	; (190e8 <sd_mmc_select_slot+0x4c>)
   190b6:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   190b8:	4c0a      	ldr	r4, [pc, #40]	; (190e4 <sd_mmc_select_slot+0x48>)
   190ba:	4b0c      	ldr	r3, [pc, #48]	; (190ec <sd_mmc_select_slot+0x50>)
   190bc:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
   190be:	4b0c      	ldr	r3, [pc, #48]	; (190f0 <sd_mmc_select_slot+0x54>)
   190c0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   190c2:	7aa3      	ldrb	r3, [r4, #10]
   190c4:	3b02      	subs	r3, #2
   190c6:	4258      	negs	r0, r3
   190c8:	4143      	adcs	r3, r0
   190ca:	b2db      	uxtb	r3, r3
   190cc:	e7ea      	b.n	190a4 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   190ce:	4b05      	ldr	r3, [pc, #20]	; (190e4 <sd_mmc_select_slot+0x48>)
   190d0:	2202      	movs	r2, #2
   190d2:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   190d4:	4a07      	ldr	r2, [pc, #28]	; (190f4 <sd_mmc_select_slot+0x58>)
   190d6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
   190d8:	2201      	movs	r2, #1
   190da:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
   190dc:	2200      	movs	r2, #0
   190de:	779a      	strb	r2, [r3, #30]
   190e0:	e7e7      	b.n	190b2 <sd_mmc_select_slot+0x16>
   190e2:	46c0      	nop			; (mov r8, r8)
   190e4:	20003c5c 	.word	0x20003c5c
   190e8:	20003c80 	.word	0x20003c80
   190ec:	20003c58 	.word	0x20003c58
   190f0:	00019075 	.word	0x00019075
   190f4:	00061a80 	.word	0x00061a80

000190f8 <sd_mmc_cmd13>:
{
   190f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190fa:	4d09      	ldr	r5, [pc, #36]	; (19120 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   190fc:	4f09      	ldr	r7, [pc, #36]	; (19124 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
   190fe:	4e0a      	ldr	r6, [pc, #40]	; (19128 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   19100:	2100      	movs	r1, #0
   19102:	480a      	ldr	r0, [pc, #40]	; (1912c <sd_mmc_cmd13+0x34>)
   19104:	47b8      	blx	r7
   19106:	1e04      	subs	r4, r0, #0
   19108:	d007      	beq.n	1911a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
   1910a:	47b0      	blx	r6
   1910c:	23ff      	movs	r3, #255	; 0xff
   1910e:	4203      	tst	r3, r0
   19110:	d003      	beq.n	1911a <sd_mmc_cmd13+0x22>
   19112:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   19114:	2d00      	cmp	r5, #0
   19116:	d1f3      	bne.n	19100 <sd_mmc_cmd13+0x8>
			return false;
   19118:	2400      	movs	r4, #0
}
   1911a:	0020      	movs	r0, r4
   1911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1911e:	46c0      	nop			; (mov r8, r8)
   19120:	00030d41 	.word	0x00030d41
   19124:	00019f61 	.word	0x00019f61
   19128:	00019f79 	.word	0x00019f79
   1912c:	00001b0d 	.word	0x00001b0d

00019130 <sd_mmc_cmd9_spi>:
{
   19130:	b510      	push	{r4, lr}
   19132:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   19134:	4b0c      	ldr	r3, [pc, #48]	; (19168 <sd_mmc_cmd9_spi+0x38>)
   19136:	681b      	ldr	r3, [r3, #0]
   19138:	8919      	ldrh	r1, [r3, #8]
   1913a:	0409      	lsls	r1, r1, #16
   1913c:	2301      	movs	r3, #1
   1913e:	9300      	str	r3, [sp, #0]
   19140:	2210      	movs	r2, #16
   19142:	480a      	ldr	r0, [pc, #40]	; (1916c <sd_mmc_cmd9_spi+0x3c>)
   19144:	4c0a      	ldr	r4, [pc, #40]	; (19170 <sd_mmc_cmd9_spi+0x40>)
   19146:	47a0      	blx	r4
   19148:	2800      	cmp	r0, #0
   1914a:	d101      	bne.n	19150 <sd_mmc_cmd9_spi+0x20>
}
   1914c:	b002      	add	sp, #8
   1914e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   19150:	4b05      	ldr	r3, [pc, #20]	; (19168 <sd_mmc_cmd9_spi+0x38>)
   19152:	6818      	ldr	r0, [r3, #0]
   19154:	300e      	adds	r0, #14
   19156:	2101      	movs	r1, #1
   19158:	4b06      	ldr	r3, [pc, #24]	; (19174 <sd_mmc_cmd9_spi+0x44>)
   1915a:	4798      	blx	r3
   1915c:	2800      	cmp	r0, #0
   1915e:	d0f5      	beq.n	1914c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
   19160:	4b05      	ldr	r3, [pc, #20]	; (19178 <sd_mmc_cmd9_spi+0x48>)
   19162:	4798      	blx	r3
   19164:	e7f2      	b.n	1914c <sd_mmc_cmd9_spi+0x1c>
   19166:	46c0      	nop			; (mov r8, r8)
   19168:	20003c58 	.word	0x20003c58
   1916c:	00081109 	.word	0x00081109
   19170:	00019dd1 	.word	0x00019dd1
   19174:	00019ffd 	.word	0x00019ffd
   19178:	0001a089 	.word	0x0001a089

0001917c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1917c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1917e:	4b04      	ldr	r3, [pc, #16]	; (19190 <sd_mmc_deselect_slot+0x14>)
   19180:	781b      	ldrb	r3, [r3, #0]
   19182:	2b00      	cmp	r3, #0
   19184:	d000      	beq.n	19188 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
   19186:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
   19188:	2000      	movs	r0, #0
   1918a:	4b02      	ldr	r3, [pc, #8]	; (19194 <sd_mmc_deselect_slot+0x18>)
   1918c:	4798      	blx	r3
}
   1918e:	e7fa      	b.n	19186 <sd_mmc_deselect_slot+0xa>
   19190:	20003c80 	.word	0x20003c80
   19194:	00019d71 	.word	0x00019d71

00019198 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   19198:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1919a:	2204      	movs	r2, #4
   1919c:	4b03      	ldr	r3, [pc, #12]	; (191ac <sd_mmc_init+0x14>)
   1919e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   191a0:	32fb      	adds	r2, #251	; 0xfb
   191a2:	4b03      	ldr	r3, [pc, #12]	; (191b0 <sd_mmc_init+0x18>)
   191a4:	701a      	strb	r2, [r3, #0]
	driver_init();
   191a6:	4b03      	ldr	r3, [pc, #12]	; (191b4 <sd_mmc_init+0x1c>)
   191a8:	4798      	blx	r3
}
   191aa:	bd10      	pop	{r4, pc}
   191ac:	20003c5c 	.word	0x20003c5c
   191b0:	20003c80 	.word	0x20003c80
   191b4:	00019c1d 	.word	0x00019c1d

000191b8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   191b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   191ba:	46c6      	mov	lr, r8
   191bc:	b500      	push	{lr}
   191be:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   191c0:	4bcb      	ldr	r3, [pc, #812]	; (194f0 <sd_mmc_check+0x338>)
   191c2:	4798      	blx	r3
   191c4:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   191c6:	2801      	cmp	r0, #1
   191c8:	d006      	beq.n	191d8 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
   191ca:	4bca      	ldr	r3, [pc, #808]	; (194f4 <sd_mmc_check+0x33c>)
   191cc:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   191ce:	0020      	movs	r0, r4
   191d0:	b008      	add	sp, #32
   191d2:	bc04      	pop	{r2}
   191d4:	4690      	mov	r8, r2
   191d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
   191d8:	4bc7      	ldr	r3, [pc, #796]	; (194f8 <sd_mmc_check+0x340>)
   191da:	681b      	ldr	r3, [r3, #0]
   191dc:	2201      	movs	r2, #1
   191de:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   191e0:	2200      	movs	r2, #0
   191e2:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   191e4:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
   191e6:	4bc5      	ldr	r3, [pc, #788]	; (194fc <sd_mmc_check+0x344>)
   191e8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   191ea:	2100      	movs	r1, #0
   191ec:	2088      	movs	r0, #136	; 0x88
   191ee:	0140      	lsls	r0, r0, #5
   191f0:	4bc3      	ldr	r3, [pc, #780]	; (19500 <sd_mmc_check+0x348>)
   191f2:	4798      	blx	r3
   191f4:	2800      	cmp	r0, #0
   191f6:	d107      	bne.n	19208 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   191f8:	4bbf      	ldr	r3, [pc, #764]	; (194f8 <sd_mmc_check+0x340>)
   191fa:	681b      	ldr	r3, [r3, #0]
   191fc:	2203      	movs	r2, #3
   191fe:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   19200:	4bbc      	ldr	r3, [pc, #752]	; (194f4 <sd_mmc_check+0x33c>)
   19202:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   19204:	2403      	movs	r4, #3
   19206:	e7e2      	b.n	191ce <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   19208:	21d5      	movs	r1, #213	; 0xd5
   1920a:	0049      	lsls	r1, r1, #1
   1920c:	48bd      	ldr	r0, [pc, #756]	; (19504 <sd_mmc_check+0x34c>)
   1920e:	4bbc      	ldr	r3, [pc, #752]	; (19500 <sd_mmc_check+0x348>)
   19210:	4798      	blx	r3
	*v2 = 0;
   19212:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   19214:	2800      	cmp	r0, #0
   19216:	d125      	bne.n	19264 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19218:	4bb7      	ldr	r3, [pc, #732]	; (194f8 <sd_mmc_check+0x340>)
   1921a:	681b      	ldr	r3, [r3, #0]
   1921c:	7adb      	ldrb	r3, [r3, #11]
   1921e:	07db      	lsls	r3, r3, #31
   19220:	d500      	bpl.n	19224 <sd_mmc_check+0x6c>
   19222:	e1eb      	b.n	195fc <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   19224:	4bb4      	ldr	r3, [pc, #720]	; (194f8 <sd_mmc_check+0x340>)
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	7ada      	ldrb	r2, [r3, #11]
   1922a:	2309      	movs	r3, #9
   1922c:	4013      	ands	r3, r2
   1922e:	2b01      	cmp	r3, #1
   19230:	d10f      	bne.n	19252 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   19232:	2180      	movs	r1, #128	; 0x80
   19234:	0089      	lsls	r1, r1, #2
   19236:	48b4      	ldr	r0, [pc, #720]	; (19508 <sd_mmc_check+0x350>)
   19238:	4bb1      	ldr	r3, [pc, #708]	; (19500 <sd_mmc_check+0x348>)
   1923a:	4798      	blx	r3
   1923c:	2800      	cmp	r0, #0
   1923e:	d0db      	beq.n	191f8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19240:	4bad      	ldr	r3, [pc, #692]	; (194f8 <sd_mmc_check+0x340>)
   19242:	681b      	ldr	r3, [r3, #0]
   19244:	7adb      	ldrb	r3, [r3, #11]
   19246:	07db      	lsls	r3, r3, #31
   19248:	d503      	bpl.n	19252 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
   1924a:	4bb0      	ldr	r3, [pc, #704]	; (1950c <sd_mmc_check+0x354>)
   1924c:	4798      	blx	r3
   1924e:	2800      	cmp	r0, #0
   19250:	d0d2      	beq.n	191f8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   19252:	4baf      	ldr	r3, [pc, #700]	; (19510 <sd_mmc_check+0x358>)
   19254:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   19256:	4ba8      	ldr	r3, [pc, #672]	; (194f8 <sd_mmc_check+0x340>)
   19258:	681b      	ldr	r3, [r3, #0]
   1925a:	2200      	movs	r2, #0
   1925c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1925e:	4ba5      	ldr	r3, [pc, #660]	; (194f4 <sd_mmc_check+0x33c>)
   19260:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
   19262:	e7b4      	b.n	191ce <sd_mmc_check+0x16>
	resp = driver_get_response();
   19264:	4bab      	ldr	r3, [pc, #684]	; (19514 <sd_mmc_check+0x35c>)
   19266:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
   19268:	1c43      	adds	r3, r0, #1
   1926a:	d100      	bne.n	1926e <sd_mmc_check+0xb6>
   1926c:	e1c4      	b.n	195f8 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1926e:	0500      	lsls	r0, r0, #20
   19270:	0d00      	lsrs	r0, r0, #20
   19272:	23d5      	movs	r3, #213	; 0xd5
   19274:	005b      	lsls	r3, r3, #1
	*v2 = 1;
   19276:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   19278:	4298      	cmp	r0, r3
   1927a:	d1bd      	bne.n	191f8 <sd_mmc_check+0x40>
   1927c:	e7cc      	b.n	19218 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1927e:	2100      	movs	r1, #0
   19280:	48a5      	ldr	r0, [pc, #660]	; (19518 <sd_mmc_check+0x360>)
   19282:	4b9f      	ldr	r3, [pc, #636]	; (19500 <sd_mmc_check+0x348>)
   19284:	4798      	blx	r3
   19286:	2800      	cmp	r0, #0
   19288:	d119      	bne.n	192be <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
   1928a:	4b9b      	ldr	r3, [pc, #620]	; (194f8 <sd_mmc_check+0x340>)
   1928c:	681b      	ldr	r3, [r3, #0]
   1928e:	2202      	movs	r2, #2
   19290:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   19292:	2100      	movs	r1, #0
   19294:	2088      	movs	r0, #136	; 0x88
   19296:	0140      	lsls	r0, r0, #5
   19298:	4b99      	ldr	r3, [pc, #612]	; (19500 <sd_mmc_check+0x348>)
   1929a:	4798      	blx	r3
   1929c:	2800      	cmp	r0, #0
   1929e:	d0ab      	beq.n	191f8 <sd_mmc_check+0x40>
   192a0:	4d9e      	ldr	r5, [pc, #632]	; (1951c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   192a2:	4f97      	ldr	r7, [pc, #604]	; (19500 <sd_mmc_check+0x348>)
		resp = driver_get_response();
   192a4:	4e9b      	ldr	r6, [pc, #620]	; (19514 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   192a6:	2100      	movs	r1, #0
   192a8:	489d      	ldr	r0, [pc, #628]	; (19520 <sd_mmc_check+0x368>)
   192aa:	47b8      	blx	r7
   192ac:	2800      	cmp	r0, #0
   192ae:	d0a3      	beq.n	191f8 <sd_mmc_check+0x40>
		resp = driver_get_response();
   192b0:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   192b2:	07c3      	lsls	r3, r0, #31
   192b4:	d57d      	bpl.n	193b2 <sd_mmc_check+0x1fa>
   192b6:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   192b8:	2d00      	cmp	r5, #0
   192ba:	d1f4      	bne.n	192a6 <sd_mmc_check+0xee>
   192bc:	e79c      	b.n	191f8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
   192be:	4b95      	ldr	r3, [pc, #596]	; (19514 <sd_mmc_check+0x35c>)
   192c0:	4798      	blx	r3
   192c2:	0043      	lsls	r3, r0, #1
   192c4:	d505      	bpl.n	192d2 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
   192c6:	4b8c      	ldr	r3, [pc, #560]	; (194f8 <sd_mmc_check+0x340>)
   192c8:	681a      	ldr	r2, [r3, #0]
   192ca:	7ad3      	ldrb	r3, [r2, #11]
   192cc:	2108      	movs	r1, #8
   192ce:	430b      	orrs	r3, r1
   192d0:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   192d2:	2100      	movs	r1, #0
   192d4:	4893      	ldr	r0, [pc, #588]	; (19524 <sd_mmc_check+0x36c>)
   192d6:	4b8a      	ldr	r3, [pc, #552]	; (19500 <sd_mmc_check+0x348>)
   192d8:	4798      	blx	r3
   192da:	2800      	cmp	r0, #0
   192dc:	d08c      	beq.n	191f8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   192de:	4b86      	ldr	r3, [pc, #536]	; (194f8 <sd_mmc_check+0x340>)
   192e0:	681b      	ldr	r3, [r3, #0]
   192e2:	7adb      	ldrb	r3, [r3, #11]
   192e4:	07da      	lsls	r2, r3, #31
   192e6:	d400      	bmi.n	192ea <sd_mmc_check+0x132>
   192e8:	e1a4      	b.n	19634 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
   192ea:	4b8f      	ldr	r3, [pc, #572]	; (19528 <sd_mmc_check+0x370>)
   192ec:	4798      	blx	r3
   192ee:	2800      	cmp	r0, #0
   192f0:	d082      	beq.n	191f8 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   192f2:	4b81      	ldr	r3, [pc, #516]	; (194f8 <sd_mmc_check+0x340>)
   192f4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   192f6:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   192f8:	2107      	movs	r1, #7
   192fa:	4019      	ands	r1, r3
   192fc:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
   192fe:	488b      	ldr	r0, [pc, #556]	; (1952c <sd_mmc_check+0x374>)
   19300:	5808      	ldr	r0, [r1, r0]
   19302:	21fa      	movs	r1, #250	; 0xfa
   19304:	0089      	lsls	r1, r1, #2
   19306:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   19308:	065b      	lsls	r3, r3, #25
   1930a:	0f1b      	lsrs	r3, r3, #28
   1930c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1930e:	4888      	ldr	r0, [pc, #544]	; (19530 <sd_mmc_check+0x378>)
   19310:	581b      	ldr	r3, [r3, r0]
   19312:	434b      	muls	r3, r1
   19314:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   19316:	7b93      	ldrb	r3, [r2, #14]
   19318:	099b      	lsrs	r3, r3, #6
   1931a:	d000      	beq.n	1931e <sd_mmc_check+0x166>
   1931c:	e13c      	b.n	19598 <sd_mmc_check+0x3e0>
   1931e:	7d91      	ldrb	r1, [r2, #22]
   19320:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19322:	7d53      	ldrb	r3, [r2, #21]
   19324:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19326:	7d10      	ldrb	r0, [r2, #20]
   19328:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1932a:	4303      	orrs	r3, r0
   1932c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1932e:	7e10      	ldrb	r0, [r2, #24]
   19330:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19332:	7dd1      	ldrb	r1, [r2, #23]
   19334:	0049      	lsls	r1, r1, #1
   19336:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
   19338:	051b      	lsls	r3, r3, #20
   1933a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1933c:	3301      	adds	r3, #1
   1933e:	2107      	movs	r1, #7
   19340:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   19342:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   19344:	408b      	lsls	r3, r1
   19346:	7cd0      	ldrb	r0, [r2, #19]
   19348:	210f      	movs	r1, #15
   1934a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   1934c:	408b      	lsls	r3, r1
				/ 1024;
   1934e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   19350:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   19352:	8911      	ldrh	r1, [r2, #8]
   19354:	0409      	lsls	r1, r1, #16
   19356:	4877      	ldr	r0, [pc, #476]	; (19534 <sd_mmc_check+0x37c>)
   19358:	4b69      	ldr	r3, [pc, #420]	; (19500 <sd_mmc_check+0x348>)
   1935a:	4798      	blx	r3
   1935c:	2800      	cmp	r0, #0
   1935e:	d100      	bne.n	19362 <sd_mmc_check+0x1aa>
   19360:	e74a      	b.n	191f8 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   19362:	2301      	movs	r3, #1
   19364:	9300      	str	r3, [sp, #0]
   19366:	2208      	movs	r2, #8
   19368:	2100      	movs	r1, #0
   1936a:	4873      	ldr	r0, [pc, #460]	; (19538 <sd_mmc_check+0x380>)
   1936c:	4d73      	ldr	r5, [pc, #460]	; (1953c <sd_mmc_check+0x384>)
   1936e:	47a8      	blx	r5
   19370:	2800      	cmp	r0, #0
   19372:	d100      	bne.n	19376 <sd_mmc_check+0x1be>
   19374:	e740      	b.n	191f8 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
   19376:	2101      	movs	r1, #1
   19378:	a806      	add	r0, sp, #24
   1937a:	4b71      	ldr	r3, [pc, #452]	; (19540 <sd_mmc_check+0x388>)
   1937c:	4798      	blx	r3
   1937e:	2800      	cmp	r0, #0
   19380:	d100      	bne.n	19384 <sd_mmc_check+0x1cc>
   19382:	e739      	b.n	191f8 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
   19384:	4b6f      	ldr	r3, [pc, #444]	; (19544 <sd_mmc_check+0x38c>)
   19386:	4798      	blx	r3
   19388:	2800      	cmp	r0, #0
   1938a:	d100      	bne.n	1938e <sd_mmc_check+0x1d6>
   1938c:	e734      	b.n	191f8 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1938e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
   19390:	781b      	ldrb	r3, [r3, #0]
   19392:	220f      	movs	r2, #15
   19394:	4013      	ands	r3, r2
   19396:	2b01      	cmp	r3, #1
   19398:	d100      	bne.n	1939c <sd_mmc_check+0x1e4>
   1939a:	e119      	b.n	195d0 <sd_mmc_check+0x418>
   1939c:	2b00      	cmp	r3, #0
   1939e:	d100      	bne.n	193a2 <sd_mmc_check+0x1ea>
   193a0:	e109      	b.n	195b6 <sd_mmc_check+0x3fe>
   193a2:	2b02      	cmp	r3, #2
   193a4:	d100      	bne.n	193a8 <sd_mmc_check+0x1f0>
   193a6:	e118      	b.n	195da <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   193a8:	4b53      	ldr	r3, [pc, #332]	; (194f8 <sd_mmc_check+0x340>)
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	2210      	movs	r2, #16
   193ae:	731a      	strb	r2, [r3, #12]
   193b0:	e105      	b.n	195be <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   193b2:	2100      	movs	r1, #0
   193b4:	4858      	ldr	r0, [pc, #352]	; (19518 <sd_mmc_check+0x360>)
   193b6:	4b52      	ldr	r3, [pc, #328]	; (19500 <sd_mmc_check+0x348>)
   193b8:	4798      	blx	r3
   193ba:	2800      	cmp	r0, #0
   193bc:	d100      	bne.n	193c0 <sd_mmc_check+0x208>
   193be:	e71b      	b.n	191f8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   193c0:	4b54      	ldr	r3, [pc, #336]	; (19514 <sd_mmc_check+0x35c>)
   193c2:	4798      	blx	r3
   193c4:	23c0      	movs	r3, #192	; 0xc0
   193c6:	05db      	lsls	r3, r3, #23
   193c8:	4018      	ands	r0, r3
   193ca:	2380      	movs	r3, #128	; 0x80
   193cc:	05db      	lsls	r3, r3, #23
   193ce:	4298      	cmp	r0, r3
   193d0:	d105      	bne.n	193de <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
   193d2:	4b49      	ldr	r3, [pc, #292]	; (194f8 <sd_mmc_check+0x340>)
   193d4:	681a      	ldr	r2, [r3, #0]
   193d6:	7ad1      	ldrb	r1, [r2, #11]
   193d8:	2308      	movs	r3, #8
   193da:	430b      	orrs	r3, r1
   193dc:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   193de:	2100      	movs	r1, #0
   193e0:	4850      	ldr	r0, [pc, #320]	; (19524 <sd_mmc_check+0x36c>)
   193e2:	4b47      	ldr	r3, [pc, #284]	; (19500 <sd_mmc_check+0x348>)
   193e4:	4798      	blx	r3
   193e6:	2800      	cmp	r0, #0
   193e8:	d100      	bne.n	193ec <sd_mmc_check+0x234>
   193ea:	e705      	b.n	191f8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
   193ec:	4b4e      	ldr	r3, [pc, #312]	; (19528 <sd_mmc_check+0x370>)
   193ee:	4798      	blx	r3
   193f0:	2800      	cmp	r0, #0
   193f2:	d100      	bne.n	193f6 <sd_mmc_check+0x23e>
   193f4:	e700      	b.n	191f8 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   193f6:	4b40      	ldr	r3, [pc, #256]	; (194f8 <sd_mmc_check+0x340>)
   193f8:	681a      	ldr	r2, [r3, #0]
   193fa:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
   193fc:	069b      	lsls	r3, r3, #26
   193fe:	0f1b      	lsrs	r3, r3, #28
   19400:	2b02      	cmp	r3, #2
   19402:	d100      	bne.n	19406 <sd_mmc_check+0x24e>
   19404:	e0a8      	b.n	19558 <sd_mmc_check+0x3a0>
   19406:	d907      	bls.n	19418 <sd_mmc_check+0x260>
   19408:	2b03      	cmp	r3, #3
   1940a:	d100      	bne.n	1940e <sd_mmc_check+0x256>
   1940c:	e0a7      	b.n	1955e <sd_mmc_check+0x3a6>
   1940e:	2b04      	cmp	r3, #4
   19410:	d104      	bne.n	1941c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
   19412:	2340      	movs	r3, #64	; 0x40
   19414:	7313      	strb	r3, [r2, #12]
   19416:	e003      	b.n	19420 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   19418:	2b01      	cmp	r3, #1
   1941a:	d066      	beq.n	194ea <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1941c:	2312      	movs	r3, #18
   1941e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19420:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   19422:	0659      	lsls	r1, r3, #25
   19424:	0f09      	lsrs	r1, r1, #28
   19426:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   19428:	2007      	movs	r0, #7
   1942a:	4003      	ands	r3, r0
   1942c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1942e:	483f      	ldr	r0, [pc, #252]	; (1952c <sd_mmc_check+0x374>)
   19430:	5818      	ldr	r0, [r3, r0]
   19432:	23fa      	movs	r3, #250	; 0xfa
   19434:	009b      	lsls	r3, r3, #2
   19436:	4343      	muls	r3, r0
   19438:	4843      	ldr	r0, [pc, #268]	; (19548 <sd_mmc_check+0x390>)
   1943a:	5809      	ldr	r1, [r1, r0]
   1943c:	434b      	muls	r3, r1
   1943e:	6013      	str	r3, [r2, #0]
   19440:	7d91      	ldrb	r1, [r2, #22]
   19442:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19444:	7d53      	ldrb	r3, [r2, #21]
   19446:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19448:	7d10      	ldrb	r0, [r2, #20]
   1944a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1944c:	4303      	orrs	r3, r0
   1944e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
   19450:	051b      	lsls	r3, r3, #20
   19452:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   19454:	493d      	ldr	r1, [pc, #244]	; (1954c <sd_mmc_check+0x394>)
   19456:	428b      	cmp	r3, r1
   19458:	d00f      	beq.n	1947a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1945a:	7e10      	ldrb	r0, [r2, #24]
   1945c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1945e:	7dd1      	ldrb	r1, [r2, #23]
   19460:	0049      	lsls	r1, r1, #1
   19462:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   19464:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
   19466:	2007      	movs	r0, #7
   19468:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1946a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1946c:	408b      	lsls	r3, r1
   1946e:	7cd1      	ldrb	r1, [r2, #19]
   19470:	3008      	adds	r0, #8
   19472:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   19474:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   19476:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   19478:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1947a:	7b13      	ldrb	r3, [r2, #12]
   1947c:	2b3f      	cmp	r3, #63	; 0x3f
   1947e:	d97b      	bls.n	19578 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   19480:	2100      	movs	r1, #0
   19482:	9100      	str	r1, [sp, #0]
   19484:	2301      	movs	r3, #1
   19486:	2280      	movs	r2, #128	; 0x80
   19488:	0092      	lsls	r2, r2, #2
   1948a:	4831      	ldr	r0, [pc, #196]	; (19550 <sd_mmc_check+0x398>)
   1948c:	4d2b      	ldr	r5, [pc, #172]	; (1953c <sd_mmc_check+0x384>)
   1948e:	47a8      	blx	r5
   19490:	2800      	cmp	r0, #0
   19492:	d100      	bne.n	19496 <sd_mmc_check+0x2de>
   19494:	e6b0      	b.n	191f8 <sd_mmc_check+0x40>
   19496:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
   19498:	4e2e      	ldr	r6, [pc, #184]	; (19554 <sd_mmc_check+0x39c>)
   1949a:	a805      	add	r0, sp, #20
   1949c:	47b0      	blx	r6
   1949e:	2800      	cmp	r0, #0
   194a0:	d100      	bne.n	194a4 <sd_mmc_check+0x2ec>
   194a2:	e6a9      	b.n	191f8 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   194a4:	3501      	adds	r5, #1
   194a6:	b2ad      	uxth	r5, r5
   194a8:	2d32      	cmp	r5, #50	; 0x32
   194aa:	d1f6      	bne.n	1949a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   194ac:	4b12      	ldr	r3, [pc, #72]	; (194f8 <sd_mmc_check+0x340>)
   194ae:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   194b0:	7d8a      	ldrb	r2, [r1, #22]
   194b2:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   194b4:	7d4b      	ldrb	r3, [r1, #21]
   194b6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   194b8:	7d09      	ldrb	r1, [r1, #20]
   194ba:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   194bc:	430b      	orrs	r3, r1
   194be:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
   194c0:	051b      	lsls	r3, r3, #20
   194c2:	0d1b      	lsrs	r3, r3, #20
   194c4:	4a21      	ldr	r2, [pc, #132]	; (1954c <sd_mmc_check+0x394>)
   194c6:	4293      	cmp	r3, r2
   194c8:	d154      	bne.n	19574 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
   194ca:	4e22      	ldr	r6, [pc, #136]	; (19554 <sd_mmc_check+0x39c>)
   194cc:	a806      	add	r0, sp, #24
   194ce:	47b0      	blx	r6
   194d0:	2800      	cmp	r0, #0
   194d2:	d100      	bne.n	194d6 <sd_mmc_check+0x31e>
   194d4:	e690      	b.n	191f8 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   194d6:	3501      	adds	r5, #1
   194d8:	b2ad      	uxth	r5, r5
   194da:	2d35      	cmp	r5, #53	; 0x35
   194dc:	d9f6      	bls.n	194cc <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
   194de:	4b06      	ldr	r3, [pc, #24]	; (194f8 <sd_mmc_check+0x340>)
   194e0:	681a      	ldr	r2, [r3, #0]
   194e2:	9b06      	ldr	r3, [sp, #24]
   194e4:	085b      	lsrs	r3, r3, #1
   194e6:	6053      	str	r3, [r2, #4]
   194e8:	e044      	b.n	19574 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   194ea:	2314      	movs	r3, #20
   194ec:	7313      	strb	r3, [r2, #12]
   194ee:	e797      	b.n	19420 <sd_mmc_check+0x268>
   194f0:	0001909d 	.word	0x0001909d
   194f4:	0001917d 	.word	0x0001917d
   194f8:	20003c58 	.word	0x20003c58
   194fc:	00019d99 	.word	0x00019d99
   19500:	00019f61 	.word	0x00019f61
   19504:	00005508 	.word	0x00005508
   19508:	00001110 	.word	0x00001110
   1950c:	000190f9 	.word	0x000190f9
   19510:	00019075 	.word	0x00019075
   19514:	00019f79 	.word	0x00019f79
   19518:	0000053a 	.word	0x0000053a
   1951c:	00001bef 	.word	0x00001bef
   19520:	00001101 	.word	0x00001101
   19524:	0000113b 	.word	0x0000113b
   19528:	00019131 	.word	0x00019131
   1952c:	000294dc 	.word	0x000294dc
   19530:	000294f8 	.word	0x000294f8
   19534:	00001137 	.word	0x00001137
   19538:	00081133 	.word	0x00081133
   1953c:	00019dd1 	.word	0x00019dd1
   19540:	00019ffd 	.word	0x00019ffd
   19544:	0001a089 	.word	0x0001a089
   19548:	0002949c 	.word	0x0002949c
   1954c:	00000fff 	.word	0x00000fff
   19550:	00081108 	.word	0x00081108
   19554:	00019f85 	.word	0x00019f85
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   19558:	2322      	movs	r3, #34	; 0x22
   1955a:	7313      	strb	r3, [r2, #12]
   1955c:	e760      	b.n	19420 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
   1955e:	2330      	movs	r3, #48	; 0x30
   19560:	7313      	strb	r3, [r2, #12]
   19562:	e75d      	b.n	19420 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
   19564:	a806      	add	r0, sp, #24
   19566:	4b36      	ldr	r3, [pc, #216]	; (19640 <sd_mmc_check+0x488>)
   19568:	4798      	blx	r3
   1956a:	2800      	cmp	r0, #0
   1956c:	d100      	bne.n	19570 <sd_mmc_check+0x3b8>
   1956e:	e643      	b.n	191f8 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   19570:	3501      	adds	r5, #1
   19572:	b2ad      	uxth	r5, r5
   19574:	2d7f      	cmp	r5, #127	; 0x7f
   19576:	d9f5      	bls.n	19564 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   19578:	2180      	movs	r1, #128	; 0x80
   1957a:	0089      	lsls	r1, r1, #2
   1957c:	4831      	ldr	r0, [pc, #196]	; (19644 <sd_mmc_check+0x48c>)
   1957e:	4b32      	ldr	r3, [pc, #200]	; (19648 <sd_mmc_check+0x490>)
   19580:	4798      	blx	r3
   19582:	2800      	cmp	r0, #0
   19584:	d100      	bne.n	19588 <sd_mmc_check+0x3d0>
   19586:	e637      	b.n	191f8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
   19588:	4b30      	ldr	r3, [pc, #192]	; (1964c <sd_mmc_check+0x494>)
   1958a:	4798      	blx	r3
   1958c:	2800      	cmp	r0, #0
   1958e:	d100      	bne.n	19592 <sd_mmc_check+0x3da>
   19590:	e632      	b.n	191f8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   19592:	4b2f      	ldr	r3, [pc, #188]	; (19650 <sd_mmc_check+0x498>)
   19594:	4798      	blx	r3
   19596:	e65e      	b.n	19256 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19598:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1959a:	7d93      	ldrb	r3, [r2, #22]
   1959c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1959e:	7d51      	ldrb	r1, [r2, #21]
   195a0:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   195a2:	430b      	orrs	r3, r1
   195a4:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
   195a6:	029b      	lsls	r3, r3, #10
				* 512;
   195a8:	085b      	lsrs	r3, r3, #1
   195aa:	2180      	movs	r1, #128	; 0x80
   195ac:	0089      	lsls	r1, r1, #2
   195ae:	468c      	mov	ip, r1
   195b0:	4463      	add	r3, ip
		sd_mmc_card->capacity =
   195b2:	6053      	str	r3, [r2, #4]
   195b4:	e6cd      	b.n	19352 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   195b6:	4b27      	ldr	r3, [pc, #156]	; (19654 <sd_mmc_check+0x49c>)
   195b8:	681b      	ldr	r3, [r3, #0]
   195ba:	2210      	movs	r2, #16
   195bc:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   195be:	4b25      	ldr	r3, [pc, #148]	; (19654 <sd_mmc_check+0x49c>)
   195c0:	681b      	ldr	r3, [r3, #0]
   195c2:	7adb      	ldrb	r3, [r3, #11]
   195c4:	2209      	movs	r2, #9
   195c6:	4013      	ands	r3, r2
   195c8:	2b01      	cmp	r3, #1
   195ca:	d000      	beq.n	195ce <sd_mmc_check+0x416>
   195cc:	e638      	b.n	19240 <sd_mmc_check+0x88>
   195ce:	e630      	b.n	19232 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
   195d0:	4b20      	ldr	r3, [pc, #128]	; (19654 <sd_mmc_check+0x49c>)
   195d2:	681b      	ldr	r3, [r3, #0]
   195d4:	221a      	movs	r2, #26
   195d6:	731a      	strb	r2, [r3, #12]
   195d8:	e7f1      	b.n	195be <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   195da:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   195dc:	789b      	ldrb	r3, [r3, #2]
   195de:	09db      	lsrs	r3, r3, #7
   195e0:	2b01      	cmp	r3, #1
   195e2:	d104      	bne.n	195ee <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   195e4:	4b1b      	ldr	r3, [pc, #108]	; (19654 <sd_mmc_check+0x49c>)
   195e6:	681b      	ldr	r3, [r3, #0]
   195e8:	2230      	movs	r2, #48	; 0x30
   195ea:	731a      	strb	r2, [r3, #12]
   195ec:	e7e7      	b.n	195be <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   195ee:	4b19      	ldr	r3, [pc, #100]	; (19654 <sd_mmc_check+0x49c>)
   195f0:	681b      	ldr	r3, [r3, #0]
   195f2:	2220      	movs	r2, #32
   195f4:	731a      	strb	r2, [r3, #12]
   195f6:	e7e2      	b.n	195be <sd_mmc_check+0x406>
	*v2 = 0;
   195f8:	2600      	movs	r6, #0
   195fa:	e60d      	b.n	19218 <sd_mmc_check+0x60>
   195fc:	1e73      	subs	r3, r6, #1
   195fe:	419e      	sbcs	r6, r3
   19600:	07b3      	lsls	r3, r6, #30
   19602:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19604:	4d14      	ldr	r5, [pc, #80]	; (19658 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   19606:	4f10      	ldr	r7, [pc, #64]	; (19648 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   19608:	46b8      	mov	r8, r7
		resp = driver_get_response();
   1960a:	4e14      	ldr	r6, [pc, #80]	; (1965c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1960c:	2100      	movs	r1, #0
   1960e:	4814      	ldr	r0, [pc, #80]	; (19660 <sd_mmc_check+0x4a8>)
   19610:	47b8      	blx	r7
   19612:	2800      	cmp	r0, #0
   19614:	d100      	bne.n	19618 <sd_mmc_check+0x460>
   19616:	e638      	b.n	1928a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   19618:	9903      	ldr	r1, [sp, #12]
   1961a:	4812      	ldr	r0, [pc, #72]	; (19664 <sd_mmc_check+0x4ac>)
   1961c:	47c0      	blx	r8
   1961e:	2800      	cmp	r0, #0
   19620:	d100      	bne.n	19624 <sd_mmc_check+0x46c>
   19622:	e632      	b.n	1928a <sd_mmc_check+0xd2>
		resp = driver_get_response();
   19624:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   19626:	07c3      	lsls	r3, r0, #31
   19628:	d400      	bmi.n	1962c <sd_mmc_check+0x474>
   1962a:	e628      	b.n	1927e <sd_mmc_check+0xc6>
   1962c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   1962e:	2d00      	cmp	r5, #0
   19630:	d1ec      	bne.n	1960c <sd_mmc_check+0x454>
   19632:	e62a      	b.n	1928a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   19634:	2209      	movs	r2, #9
   19636:	4013      	ands	r3, r2
   19638:	2b01      	cmp	r3, #1
   1963a:	d000      	beq.n	1963e <sd_mmc_check+0x486>
   1963c:	e609      	b.n	19252 <sd_mmc_check+0x9a>
   1963e:	e5f8      	b.n	19232 <sd_mmc_check+0x7a>
   19640:	00019f85 	.word	0x00019f85
   19644:	00001110 	.word	0x00001110
   19648:	00019f61 	.word	0x00019f61
   1964c:	000190f9 	.word	0x000190f9
   19650:	00019075 	.word	0x00019075
   19654:	20003c58 	.word	0x20003c58
   19658:	00001bef 	.word	0x00001bef
   1965c:	00019f79 	.word	0x00019f79
   19660:	00001137 	.word	0x00001137
   19664:	00001129 	.word	0x00001129

00019668 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   19668:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1966a:	4b06      	ldr	r3, [pc, #24]	; (19684 <sd_mmc_get_type+0x1c>)
   1966c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
   1966e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19670:	2800      	cmp	r0, #0
   19672:	d001      	beq.n	19678 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   19674:	0018      	movs	r0, r3
   19676:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   19678:	4b03      	ldr	r3, [pc, #12]	; (19688 <sd_mmc_get_type+0x20>)
   1967a:	4798      	blx	r3
	return sd_mmc_card->type;
   1967c:	4b03      	ldr	r3, [pc, #12]	; (1968c <sd_mmc_get_type+0x24>)
   1967e:	681b      	ldr	r3, [r3, #0]
   19680:	7adb      	ldrb	r3, [r3, #11]
   19682:	e7f7      	b.n	19674 <sd_mmc_get_type+0xc>
   19684:	0001909d 	.word	0x0001909d
   19688:	0001917d 	.word	0x0001917d
   1968c:	20003c58 	.word	0x20003c58

00019690 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   19690:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19692:	4b06      	ldr	r3, [pc, #24]	; (196ac <sd_mmc_get_capacity+0x1c>)
   19694:	4798      	blx	r3
		return 0;
   19696:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19698:	2800      	cmp	r0, #0
   1969a:	d001      	beq.n	196a0 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   1969c:	0018      	movs	r0, r3
   1969e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   196a0:	4b03      	ldr	r3, [pc, #12]	; (196b0 <sd_mmc_get_capacity+0x20>)
   196a2:	4798      	blx	r3
	return sd_mmc_card->capacity;
   196a4:	4b03      	ldr	r3, [pc, #12]	; (196b4 <sd_mmc_get_capacity+0x24>)
   196a6:	681b      	ldr	r3, [r3, #0]
   196a8:	685b      	ldr	r3, [r3, #4]
   196aa:	e7f7      	b.n	1969c <sd_mmc_get_capacity+0xc>
   196ac:	0001909d 	.word	0x0001909d
   196b0:	0001917d 	.word	0x0001917d
   196b4:	20003c58 	.word	0x20003c58

000196b8 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   196b8:	2000      	movs	r0, #0
   196ba:	4770      	bx	lr

000196bc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   196bc:	b570      	push	{r4, r5, r6, lr}
   196be:	b082      	sub	sp, #8
   196c0:	000e      	movs	r6, r1
   196c2:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   196c4:	4b16      	ldr	r3, [pc, #88]	; (19720 <sd_mmc_init_read_blocks+0x64>)
   196c6:	4798      	blx	r3
   196c8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   196ca:	d002      	beq.n	196d2 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   196cc:	0020      	movs	r0, r4
   196ce:	b002      	add	sp, #8
   196d0:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
   196d2:	4b14      	ldr	r3, [pc, #80]	; (19724 <sd_mmc_init_read_blocks+0x68>)
   196d4:	4798      	blx	r3
   196d6:	2800      	cmp	r0, #0
   196d8:	d017      	beq.n	1970a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
   196da:	2d01      	cmp	r5, #1
   196dc:	d919      	bls.n	19712 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   196de:	4812      	ldr	r0, [pc, #72]	; (19728 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   196e0:	4b12      	ldr	r3, [pc, #72]	; (1972c <sd_mmc_init_read_blocks+0x70>)
   196e2:	681b      	ldr	r3, [r3, #0]
   196e4:	7adb      	ldrb	r3, [r3, #11]
   196e6:	071b      	lsls	r3, r3, #28
   196e8:	d400      	bmi.n	196ec <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
   196ea:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   196ec:	2301      	movs	r3, #1
   196ee:	9300      	str	r3, [sp, #0]
   196f0:	002b      	movs	r3, r5
   196f2:	2280      	movs	r2, #128	; 0x80
   196f4:	0092      	lsls	r2, r2, #2
   196f6:	0031      	movs	r1, r6
   196f8:	4e0d      	ldr	r6, [pc, #52]	; (19730 <sd_mmc_init_read_blocks+0x74>)
   196fa:	47b0      	blx	r6
   196fc:	2800      	cmp	r0, #0
   196fe:	d00a      	beq.n	19716 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
   19700:	4b0c      	ldr	r3, [pc, #48]	; (19734 <sd_mmc_init_read_blocks+0x78>)
   19702:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   19704:	4b0c      	ldr	r3, [pc, #48]	; (19738 <sd_mmc_init_read_blocks+0x7c>)
   19706:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
   19708:	e7e0      	b.n	196cc <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
   1970a:	4b0c      	ldr	r3, [pc, #48]	; (1973c <sd_mmc_init_read_blocks+0x80>)
   1970c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1970e:	3405      	adds	r4, #5
   19710:	e7dc      	b.n	196cc <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   19712:	480b      	ldr	r0, [pc, #44]	; (19740 <sd_mmc_init_read_blocks+0x84>)
   19714:	e7e4      	b.n	196e0 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
   19716:	4b09      	ldr	r3, [pc, #36]	; (1973c <sd_mmc_init_read_blocks+0x80>)
   19718:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1971a:	2405      	movs	r4, #5
   1971c:	e7d6      	b.n	196cc <sd_mmc_init_read_blocks+0x10>
   1971e:	46c0      	nop			; (mov r8, r8)
   19720:	0001909d 	.word	0x0001909d
   19724:	000190f9 	.word	0x000190f9
   19728:	00101112 	.word	0x00101112
   1972c:	20003c58 	.word	0x20003c58
   19730:	00019dd1 	.word	0x00019dd1
   19734:	20003c7c 	.word	0x20003c7c
   19738:	20003c7e 	.word	0x20003c7e
   1973c:	0001917d 	.word	0x0001917d
   19740:	00081111 	.word	0x00081111

00019744 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   19744:	b510      	push	{r4, lr}
   19746:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   19748:	4b07      	ldr	r3, [pc, #28]	; (19768 <sd_mmc_start_read_blocks+0x24>)
   1974a:	4798      	blx	r3
   1974c:	2800      	cmp	r0, #0
   1974e:	d104      	bne.n	1975a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   19750:	2200      	movs	r2, #0
   19752:	4b06      	ldr	r3, [pc, #24]	; (1976c <sd_mmc_start_read_blocks+0x28>)
   19754:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   19756:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   19758:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   1975a:	4a04      	ldr	r2, [pc, #16]	; (1976c <sd_mmc_start_read_blocks+0x28>)
   1975c:	8813      	ldrh	r3, [r2, #0]
   1975e:	1b1c      	subs	r4, r3, r4
   19760:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   19762:	2000      	movs	r0, #0
   19764:	e7f8      	b.n	19758 <sd_mmc_start_read_blocks+0x14>
   19766:	46c0      	nop			; (mov r8, r8)
   19768:	00019ffd 	.word	0x00019ffd
   1976c:	20003c7c 	.word	0x20003c7c

00019770 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   19770:	b510      	push	{r4, lr}
   19772:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
   19774:	4b14      	ldr	r3, [pc, #80]	; (197c8 <sd_mmc_wait_end_of_read_blocks+0x58>)
   19776:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   19778:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
   1977a:	2800      	cmp	r0, #0
   1977c:	d101      	bne.n	19782 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   1977e:	0018      	movs	r0, r3
   19780:	bd10      	pop	{r4, pc}
	if (abort) {
   19782:	2c00      	cmp	r4, #0
   19784:	d010      	beq.n	197a8 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
   19786:	2200      	movs	r2, #0
   19788:	4b10      	ldr	r3, [pc, #64]	; (197cc <sd_mmc_wait_end_of_read_blocks+0x5c>)
   1978a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1978c:	4b10      	ldr	r3, [pc, #64]	; (197d0 <sd_mmc_wait_end_of_read_blocks+0x60>)
   1978e:	881b      	ldrh	r3, [r3, #0]
   19790:	2b01      	cmp	r3, #1
   19792:	d00f      	beq.n	197b4 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   19794:	2100      	movs	r1, #0
   19796:	480f      	ldr	r0, [pc, #60]	; (197d4 <sd_mmc_wait_end_of_read_blocks+0x64>)
   19798:	4b0f      	ldr	r3, [pc, #60]	; (197d8 <sd_mmc_wait_end_of_read_blocks+0x68>)
   1979a:	4798      	blx	r3
   1979c:	2800      	cmp	r0, #0
   1979e:	d00d      	beq.n	197bc <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
   197a0:	4b0e      	ldr	r3, [pc, #56]	; (197dc <sd_mmc_wait_end_of_read_blocks+0x6c>)
   197a2:	4798      	blx	r3
	return SD_MMC_OK;
   197a4:	2300      	movs	r3, #0
   197a6:	e7ea      	b.n	1977e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   197a8:	4b08      	ldr	r3, [pc, #32]	; (197cc <sd_mmc_wait_end_of_read_blocks+0x5c>)
   197aa:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   197ac:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   197ae:	2a00      	cmp	r2, #0
   197b0:	d0ec      	beq.n	1978c <sd_mmc_wait_end_of_read_blocks+0x1c>
   197b2:	e7e4      	b.n	1977e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
   197b4:	4b09      	ldr	r3, [pc, #36]	; (197dc <sd_mmc_wait_end_of_read_blocks+0x6c>)
   197b6:	4798      	blx	r3
		return SD_MMC_OK;
   197b8:	2300      	movs	r3, #0
   197ba:	e7e0      	b.n	1977e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   197bc:	2100      	movs	r1, #0
   197be:	4805      	ldr	r0, [pc, #20]	; (197d4 <sd_mmc_wait_end_of_read_blocks+0x64>)
   197c0:	4b05      	ldr	r3, [pc, #20]	; (197d8 <sd_mmc_wait_end_of_read_blocks+0x68>)
   197c2:	4798      	blx	r3
   197c4:	e7ec      	b.n	197a0 <sd_mmc_wait_end_of_read_blocks+0x30>
   197c6:	46c0      	nop			; (mov r8, r8)
   197c8:	0001a089 	.word	0x0001a089
   197cc:	20003c7c 	.word	0x20003c7c
   197d0:	20003c7e 	.word	0x20003c7e
   197d4:	0000310c 	.word	0x0000310c
   197d8:	00019f61 	.word	0x00019f61
   197dc:	0001917d 	.word	0x0001917d

000197e0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   197e0:	b570      	push	{r4, r5, r6, lr}
   197e2:	b082      	sub	sp, #8
   197e4:	000e      	movs	r6, r1
   197e6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   197e8:	4b11      	ldr	r3, [pc, #68]	; (19830 <sd_mmc_init_write_blocks+0x50>)
   197ea:	4798      	blx	r3
   197ec:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   197ee:	d116      	bne.n	1981e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
   197f0:	2d01      	cmp	r5, #1
   197f2:	d917      	bls.n	19824 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   197f4:	480f      	ldr	r0, [pc, #60]	; (19834 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   197f6:	4b10      	ldr	r3, [pc, #64]	; (19838 <sd_mmc_init_write_blocks+0x58>)
   197f8:	681b      	ldr	r3, [r3, #0]
   197fa:	7adb      	ldrb	r3, [r3, #11]
   197fc:	071b      	lsls	r3, r3, #28
   197fe:	d400      	bmi.n	19802 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   19800:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   19802:	2301      	movs	r3, #1
   19804:	9300      	str	r3, [sp, #0]
   19806:	002b      	movs	r3, r5
   19808:	2280      	movs	r2, #128	; 0x80
   1980a:	0092      	lsls	r2, r2, #2
   1980c:	0031      	movs	r1, r6
   1980e:	4e0b      	ldr	r6, [pc, #44]	; (1983c <sd_mmc_init_write_blocks+0x5c>)
   19810:	47b0      	blx	r6
   19812:	2800      	cmp	r0, #0
   19814:	d008      	beq.n	19828 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   19816:	4b0a      	ldr	r3, [pc, #40]	; (19840 <sd_mmc_init_write_blocks+0x60>)
   19818:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1981a:	4b0a      	ldr	r3, [pc, #40]	; (19844 <sd_mmc_init_write_blocks+0x64>)
   1981c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
   1981e:	0020      	movs	r0, r4
   19820:	b002      	add	sp, #8
   19822:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   19824:	4808      	ldr	r0, [pc, #32]	; (19848 <sd_mmc_init_write_blocks+0x68>)
   19826:	e7e6      	b.n	197f6 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
   19828:	4b08      	ldr	r3, [pc, #32]	; (1984c <sd_mmc_init_write_blocks+0x6c>)
   1982a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1982c:	2405      	movs	r4, #5
   1982e:	e7f6      	b.n	1981e <sd_mmc_init_write_blocks+0x3e>
   19830:	0001909d 	.word	0x0001909d
   19834:	00109119 	.word	0x00109119
   19838:	20003c58 	.word	0x20003c58
   1983c:	00019dd1 	.word	0x00019dd1
   19840:	20003c7c 	.word	0x20003c7c
   19844:	20003c7e 	.word	0x20003c7e
   19848:	00089118 	.word	0x00089118
   1984c:	0001917d 	.word	0x0001917d

00019850 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   19850:	b510      	push	{r4, lr}
   19852:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   19854:	4b07      	ldr	r3, [pc, #28]	; (19874 <sd_mmc_start_write_blocks+0x24>)
   19856:	4798      	blx	r3
   19858:	2800      	cmp	r0, #0
   1985a:	d104      	bne.n	19866 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   1985c:	2200      	movs	r2, #0
   1985e:	4b06      	ldr	r3, [pc, #24]	; (19878 <sd_mmc_start_write_blocks+0x28>)
   19860:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   19862:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   19864:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   19866:	4a04      	ldr	r2, [pc, #16]	; (19878 <sd_mmc_start_write_blocks+0x28>)
   19868:	8813      	ldrh	r3, [r2, #0]
   1986a:	1b1c      	subs	r4, r3, r4
   1986c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   1986e:	2000      	movs	r0, #0
   19870:	e7f8      	b.n	19864 <sd_mmc_start_write_blocks+0x14>
   19872:	46c0      	nop			; (mov r8, r8)
   19874:	0001a08d 	.word	0x0001a08d
   19878:	20003c7c 	.word	0x20003c7c

0001987c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1987c:	b510      	push	{r4, lr}
   1987e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
   19880:	4b0e      	ldr	r3, [pc, #56]	; (198bc <sd_mmc_wait_end_of_write_blocks+0x40>)
   19882:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   19884:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
   19886:	2800      	cmp	r0, #0
   19888:	d101      	bne.n	1988e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   1988a:	0018      	movs	r0, r3
   1988c:	bd10      	pop	{r4, pc}
	if (abort) {
   1988e:	2c00      	cmp	r4, #0
   19890:	d00a      	beq.n	198a8 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   19892:	2200      	movs	r2, #0
   19894:	4b0a      	ldr	r3, [pc, #40]	; (198c0 <sd_mmc_wait_end_of_write_blocks+0x44>)
   19896:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   19898:	4b0a      	ldr	r3, [pc, #40]	; (198c4 <sd_mmc_wait_end_of_write_blocks+0x48>)
   1989a:	881b      	ldrh	r3, [r3, #0]
   1989c:	2b01      	cmp	r3, #1
   1989e:	d009      	beq.n	198b4 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
   198a0:	4b09      	ldr	r3, [pc, #36]	; (198c8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   198a2:	4798      	blx	r3
	return SD_MMC_OK;
   198a4:	2300      	movs	r3, #0
   198a6:	e7f0      	b.n	1988a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   198a8:	4b05      	ldr	r3, [pc, #20]	; (198c0 <sd_mmc_wait_end_of_write_blocks+0x44>)
   198aa:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   198ac:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   198ae:	2a00      	cmp	r2, #0
   198b0:	d0f2      	beq.n	19898 <sd_mmc_wait_end_of_write_blocks+0x1c>
   198b2:	e7ea      	b.n	1988a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
   198b4:	4b04      	ldr	r3, [pc, #16]	; (198c8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   198b6:	4798      	blx	r3
		return SD_MMC_OK;
   198b8:	2300      	movs	r3, #0
   198ba:	e7e6      	b.n	1988a <sd_mmc_wait_end_of_write_blocks+0xe>
   198bc:	0001a10d 	.word	0x0001a10d
   198c0:	20003c7c 	.word	0x20003c7c
   198c4:	20003c7e 	.word	0x20003c7e
   198c8:	0001917d 	.word	0x0001917d

000198cc <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   198cc:	b510      	push	{r4, lr}
   198ce:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
   198d0:	4b0f      	ldr	r3, [pc, #60]	; (19910 <sd_mmc_test_unit_ready+0x44>)
   198d2:	4798      	blx	r3
   198d4:	2801      	cmp	r0, #1
   198d6:	d019      	beq.n	1990c <sd_mmc_test_unit_ready+0x40>
   198d8:	2800      	cmp	r0, #0
   198da:	d003      	beq.n	198e4 <sd_mmc_test_unit_ready+0x18>
   198dc:	2802      	cmp	r0, #2
   198de:	d010      	beq.n	19902 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
   198e0:	2001      	movs	r0, #1
	}
}
   198e2:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
   198e4:	4b0b      	ldr	r3, [pc, #44]	; (19914 <sd_mmc_test_unit_ready+0x48>)
   198e6:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
   198e8:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
   198ea:	2b00      	cmp	r3, #0
   198ec:	d1f9      	bne.n	198e2 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   198ee:	0020      	movs	r0, r4
   198f0:	4b09      	ldr	r3, [pc, #36]	; (19918 <sd_mmc_test_unit_ready+0x4c>)
   198f2:	4798      	blx	r3
   198f4:	0003      	movs	r3, r0
   198f6:	2003      	movs	r0, #3
   198f8:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
   198fa:	4243      	negs	r3, r0
   198fc:	4158      	adcs	r0, r3
   198fe:	0040      	lsls	r0, r0, #1
   19900:	e7ef      	b.n	198e2 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
   19902:	2200      	movs	r2, #0
   19904:	4b03      	ldr	r3, [pc, #12]	; (19914 <sd_mmc_test_unit_ready+0x48>)
   19906:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
   19908:	2002      	movs	r0, #2
   1990a:	e7ea      	b.n	198e2 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
   1990c:	2003      	movs	r0, #3
   1990e:	e7e8      	b.n	198e2 <sd_mmc_test_unit_ready+0x16>
   19910:	000191b9 	.word	0x000191b9
   19914:	20003c84 	.word	0x20003c84
   19918:	00019669 	.word	0x00019669

0001991c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1991c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
   1991e:	2000      	movs	r0, #0
   19920:	4b01      	ldr	r3, [pc, #4]	; (19928 <sd_mmc_test_unit_ready_0+0xc>)
   19922:	4798      	blx	r3
}
   19924:	bd10      	pop	{r4, pc}
   19926:	46c0      	nop			; (mov r8, r8)
   19928:	000198cd 	.word	0x000198cd

0001992c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1992c:	b570      	push	{r4, r5, r6, lr}
   1992e:	0004      	movs	r4, r0
   19930:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   19932:	4b04      	ldr	r3, [pc, #16]	; (19944 <sd_mmc_read_capacity+0x18>)
   19934:	4798      	blx	r3
   19936:	0040      	lsls	r0, r0, #1
   19938:	3801      	subs	r0, #1
   1993a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   1993c:	0020      	movs	r0, r4
   1993e:	4b02      	ldr	r3, [pc, #8]	; (19948 <sd_mmc_read_capacity+0x1c>)
   19940:	4798      	blx	r3
}
   19942:	bd70      	pop	{r4, r5, r6, pc}
   19944:	00019691 	.word	0x00019691
   19948:	000198cd 	.word	0x000198cd

0001994c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1994c:	b510      	push	{r4, lr}
   1994e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   19950:	2000      	movs	r0, #0
   19952:	4b01      	ldr	r3, [pc, #4]	; (19958 <sd_mmc_read_capacity_0+0xc>)
   19954:	4798      	blx	r3
}
   19956:	bd10      	pop	{r4, pc}
   19958:	0001992d 	.word	0x0001992d

0001995c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   1995c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   1995e:	2000      	movs	r0, #0
   19960:	4b01      	ldr	r3, [pc, #4]	; (19968 <sd_mmc_wr_protect_0+0xc>)
   19962:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   19964:	bd10      	pop	{r4, pc}
   19966:	46c0      	nop			; (mov r8, r8)
   19968:	000196b9 	.word	0x000196b9

0001996c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1996c:	b510      	push	{r4, lr}
   1996e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   19970:	2201      	movs	r2, #1
   19972:	4b0c      	ldr	r3, [pc, #48]	; (199a4 <sd_mmc_mem_2_ram+0x38>)
   19974:	4798      	blx	r3
   19976:	2800      	cmp	r0, #0
   19978:	d004      	beq.n	19984 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   1997a:	3802      	subs	r0, #2
   1997c:	4243      	negs	r3, r0
   1997e:	4158      	adcs	r0, r3
   19980:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   19982:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   19984:	2101      	movs	r1, #1
   19986:	0020      	movs	r0, r4
   19988:	4b07      	ldr	r3, [pc, #28]	; (199a8 <sd_mmc_mem_2_ram+0x3c>)
   1998a:	4798      	blx	r3
   1998c:	0003      	movs	r3, r0
		return CTRL_FAIL;
   1998e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   19990:	2b00      	cmp	r3, #0
   19992:	d1f6      	bne.n	19982 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   19994:	2000      	movs	r0, #0
   19996:	4b05      	ldr	r3, [pc, #20]	; (199ac <sd_mmc_mem_2_ram+0x40>)
   19998:	4798      	blx	r3
   1999a:	1e43      	subs	r3, r0, #1
   1999c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   1999e:	b2c0      	uxtb	r0, r0
   199a0:	e7ef      	b.n	19982 <sd_mmc_mem_2_ram+0x16>
   199a2:	46c0      	nop			; (mov r8, r8)
   199a4:	000196bd 	.word	0x000196bd
   199a8:	00019745 	.word	0x00019745
   199ac:	00019771 	.word	0x00019771

000199b0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   199b0:	b510      	push	{r4, lr}
   199b2:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
   199b4:	0001      	movs	r1, r0
   199b6:	2000      	movs	r0, #0
   199b8:	4b01      	ldr	r3, [pc, #4]	; (199c0 <sd_mmc_mem_2_ram_0+0x10>)
   199ba:	4798      	blx	r3
}
   199bc:	bd10      	pop	{r4, pc}
   199be:	46c0      	nop			; (mov r8, r8)
   199c0:	0001996d 	.word	0x0001996d

000199c4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   199c4:	b510      	push	{r4, lr}
   199c6:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   199c8:	2201      	movs	r2, #1
   199ca:	4b0c      	ldr	r3, [pc, #48]	; (199fc <sd_mmc_ram_2_mem+0x38>)
   199cc:	4798      	blx	r3
   199ce:	2800      	cmp	r0, #0
   199d0:	d004      	beq.n	199dc <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   199d2:	3802      	subs	r0, #2
   199d4:	4243      	negs	r3, r0
   199d6:	4158      	adcs	r0, r3
   199d8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   199da:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   199dc:	2101      	movs	r1, #1
   199de:	0020      	movs	r0, r4
   199e0:	4b07      	ldr	r3, [pc, #28]	; (19a00 <sd_mmc_ram_2_mem+0x3c>)
   199e2:	4798      	blx	r3
   199e4:	0003      	movs	r3, r0
		return CTRL_FAIL;
   199e6:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   199e8:	2b00      	cmp	r3, #0
   199ea:	d1f6      	bne.n	199da <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   199ec:	2000      	movs	r0, #0
   199ee:	4b05      	ldr	r3, [pc, #20]	; (19a04 <sd_mmc_ram_2_mem+0x40>)
   199f0:	4798      	blx	r3
   199f2:	1e43      	subs	r3, r0, #1
   199f4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   199f6:	b2c0      	uxtb	r0, r0
   199f8:	e7ef      	b.n	199da <sd_mmc_ram_2_mem+0x16>
   199fa:	46c0      	nop			; (mov r8, r8)
   199fc:	000197e1 	.word	0x000197e1
   19a00:	00019851 	.word	0x00019851
   19a04:	0001987d 	.word	0x0001987d

00019a08 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   19a08:	b510      	push	{r4, lr}
   19a0a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
   19a0c:	0001      	movs	r1, r0
   19a0e:	2000      	movs	r0, #0
   19a10:	4b01      	ldr	r3, [pc, #4]	; (19a18 <sd_mmc_ram_2_mem_0+0x10>)
   19a12:	4798      	blx	r3
}
   19a14:	bd10      	pop	{r4, pc}
   19a16:	46c0      	nop			; (mov r8, r8)
   19a18:	000199c5 	.word	0x000199c5

00019a1c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   19a1c:	b500      	push	{lr}
   19a1e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
   19a20:	466b      	mov	r3, sp
   19a22:	1dd9      	adds	r1, r3, #7
   19a24:	23ff      	movs	r3, #255	; 0xff
   19a26:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   19a28:	2201      	movs	r2, #1
   19a2a:	480b      	ldr	r0, [pc, #44]	; (19a58 <sd_mmc_spi_start_write_block+0x3c>)
   19a2c:	4b0b      	ldr	r3, [pc, #44]	; (19a5c <sd_mmc_spi_start_write_block+0x40>)
   19a2e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   19a30:	4b0b      	ldr	r3, [pc, #44]	; (19a60 <sd_mmc_spi_start_write_block+0x44>)
   19a32:	881b      	ldrh	r3, [r3, #0]
   19a34:	2b01      	cmp	r3, #1
   19a36:	d00a      	beq.n	19a4e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   19a38:	22fc      	movs	r2, #252	; 0xfc
   19a3a:	466b      	mov	r3, sp
   19a3c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   19a3e:	2201      	movs	r2, #1
   19a40:	466b      	mov	r3, sp
   19a42:	1d99      	adds	r1, r3, #6
   19a44:	4804      	ldr	r0, [pc, #16]	; (19a58 <sd_mmc_spi_start_write_block+0x3c>)
   19a46:	4b05      	ldr	r3, [pc, #20]	; (19a5c <sd_mmc_spi_start_write_block+0x40>)
   19a48:	4798      	blx	r3
}
   19a4a:	b003      	add	sp, #12
   19a4c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
   19a4e:	22fe      	movs	r2, #254	; 0xfe
   19a50:	466b      	mov	r3, sp
   19a52:	719a      	strb	r2, [r3, #6]
   19a54:	e7f3      	b.n	19a3e <sd_mmc_spi_start_write_block+0x22>
   19a56:	46c0      	nop			; (mov r8, r8)
   19a58:	20003c88 	.word	0x20003c88
   19a5c:	0001e30d 	.word	0x0001e30d
   19a60:	20003ccc 	.word	0x20003ccc

00019a64 <sd_mmc_spi_wait_busy>:
{
   19a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a66:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
   19a68:	466b      	mov	r3, sp
   19a6a:	1ddc      	adds	r4, r3, #7
   19a6c:	23ff      	movs	r3, #255	; 0xff
   19a6e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19a70:	4e12      	ldr	r6, [pc, #72]	; (19abc <sd_mmc_spi_wait_busy+0x58>)
   19a72:	2201      	movs	r2, #1
   19a74:	0021      	movs	r1, r4
   19a76:	0030      	movs	r0, r6
   19a78:	4d11      	ldr	r5, [pc, #68]	; (19ac0 <sd_mmc_spi_wait_busy+0x5c>)
   19a7a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19a7c:	23ff      	movs	r3, #255	; 0xff
   19a7e:	2201      	movs	r2, #1
   19a80:	0021      	movs	r1, r4
   19a82:	0030      	movs	r0, r6
   19a84:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19a86:	23ff      	movs	r3, #255	; 0xff
   19a88:	2201      	movs	r2, #1
   19a8a:	0021      	movs	r1, r4
   19a8c:	0030      	movs	r0, r6
   19a8e:	47a8      	blx	r5
   19a90:	4c0c      	ldr	r4, [pc, #48]	; (19ac4 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
   19a92:	466b      	mov	r3, sp
   19a94:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19a96:	4e09      	ldr	r6, [pc, #36]	; (19abc <sd_mmc_spi_wait_busy+0x58>)
   19a98:	4f09      	ldr	r7, [pc, #36]	; (19ac0 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
   19a9a:	782b      	ldrb	r3, [r5, #0]
   19a9c:	2bff      	cmp	r3, #255	; 0xff
   19a9e:	d009      	beq.n	19ab4 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19aa0:	23ff      	movs	r3, #255	; 0xff
   19aa2:	2201      	movs	r2, #1
   19aa4:	0029      	movs	r1, r5
   19aa6:	0030      	movs	r0, r6
   19aa8:	47b8      	blx	r7
   19aaa:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
   19aac:	2c00      	cmp	r4, #0
   19aae:	d1f4      	bne.n	19a9a <sd_mmc_spi_wait_busy+0x36>
			return false;
   19ab0:	2000      	movs	r0, #0
   19ab2:	e000      	b.n	19ab6 <sd_mmc_spi_wait_busy+0x52>
	return true;
   19ab4:	2001      	movs	r0, #1
}
   19ab6:	b003      	add	sp, #12
   19ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19aba:	46c0      	nop			; (mov r8, r8)
   19abc:	20003c88 	.word	0x20003c88
   19ac0:	0001e145 	.word	0x0001e145
   19ac4:	00030d40 	.word	0x00030d40

00019ac8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   19ac8:	b570      	push	{r4, r5, r6, lr}
   19aca:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   19acc:	4b14      	ldr	r3, [pc, #80]	; (19b20 <sd_mmc_spi_stop_multiwrite_block+0x58>)
   19ace:	881c      	ldrh	r4, [r3, #0]
   19ad0:	2c01      	cmp	r4, #1
   19ad2:	d023      	beq.n	19b1c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   19ad4:	4b13      	ldr	r3, [pc, #76]	; (19b24 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
   19ad6:	8819      	ldrh	r1, [r3, #0]
   19ad8:	4b13      	ldr	r3, [pc, #76]	; (19b28 <sd_mmc_spi_stop_multiwrite_block+0x60>)
   19ada:	6818      	ldr	r0, [r3, #0]
   19adc:	4b13      	ldr	r3, [pc, #76]	; (19b2c <sd_mmc_spi_stop_multiwrite_block+0x64>)
   19ade:	4798      	blx	r3
		return true; // It is not the End of multi write
   19ae0:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
   19ae2:	4284      	cmp	r4, r0
   19ae4:	d902      	bls.n	19aec <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
   19ae6:	0018      	movs	r0, r3
   19ae8:	b002      	add	sp, #8
   19aea:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
   19aec:	466b      	mov	r3, sp
   19aee:	1ddc      	adds	r4, r3, #7
   19af0:	23ff      	movs	r3, #255	; 0xff
   19af2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19af4:	4e0e      	ldr	r6, [pc, #56]	; (19b30 <sd_mmc_spi_stop_multiwrite_block+0x68>)
   19af6:	2201      	movs	r2, #1
   19af8:	0021      	movs	r1, r4
   19afa:	0030      	movs	r0, r6
   19afc:	4d0d      	ldr	r5, [pc, #52]	; (19b34 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
   19afe:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
   19b00:	23fd      	movs	r3, #253	; 0xfd
   19b02:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19b04:	2201      	movs	r2, #1
   19b06:	0021      	movs	r1, r4
   19b08:	0030      	movs	r0, r6
   19b0a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
   19b0c:	4b0a      	ldr	r3, [pc, #40]	; (19b38 <sd_mmc_spi_stop_multiwrite_block+0x70>)
   19b0e:	4798      	blx	r3
   19b10:	1e03      	subs	r3, r0, #0
   19b12:	d1e8      	bne.n	19ae6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   19b14:	2105      	movs	r1, #5
   19b16:	4a09      	ldr	r2, [pc, #36]	; (19b3c <sd_mmc_spi_stop_multiwrite_block+0x74>)
   19b18:	7011      	strb	r1, [r2, #0]
		return false;
   19b1a:	e7e4      	b.n	19ae6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
   19b1c:	2301      	movs	r3, #1
   19b1e:	e7e2      	b.n	19ae6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
   19b20:	20003ccc 	.word	0x20003ccc
   19b24:	20003cc4 	.word	0x20003cc4
   19b28:	20003cd4 	.word	0x20003cd4
   19b2c:	00023fe9 	.word	0x00023fe9
   19b30:	20003c88 	.word	0x20003c88
   19b34:	0001e30d 	.word	0x0001e30d
   19b38:	00019a65 	.word	0x00019a65
   19b3c:	20003ccb 	.word	0x20003ccb

00019b40 <sd_mmc_spi_start_read_block>:
{
   19b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b42:	b083      	sub	sp, #12
	token = 0;
   19b44:	2200      	movs	r2, #0
   19b46:	466b      	mov	r3, sp
   19b48:	71da      	strb	r2, [r3, #7]
   19b4a:	4c14      	ldr	r4, [pc, #80]	; (19b9c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   19b4c:	466b      	mov	r3, sp
   19b4e:	1ddd      	adds	r5, r3, #7
   19b50:	4e13      	ldr	r6, [pc, #76]	; (19ba0 <sd_mmc_spi_start_read_block+0x60>)
   19b52:	4f14      	ldr	r7, [pc, #80]	; (19ba4 <sd_mmc_spi_start_read_block+0x64>)
   19b54:	23ff      	movs	r3, #255	; 0xff
   19b56:	2201      	movs	r2, #1
   19b58:	0029      	movs	r1, r5
   19b5a:	0030      	movs	r0, r6
   19b5c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   19b5e:	782b      	ldrb	r3, [r5, #0]
   19b60:	220f      	movs	r2, #15
   19b62:	0019      	movs	r1, r3
   19b64:	4391      	bics	r1, r2
   19b66:	1e0a      	subs	r2, r1, #0
   19b68:	d009      	beq.n	19b7e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   19b6a:	2bfe      	cmp	r3, #254	; 0xfe
   19b6c:	d013      	beq.n	19b96 <sd_mmc_spi_start_read_block+0x56>
   19b6e:	3c01      	subs	r4, #1
		if (i-- == 0) {
   19b70:	2c00      	cmp	r4, #0
   19b72:	d1ef      	bne.n	19b54 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   19b74:	2204      	movs	r2, #4
   19b76:	4b0c      	ldr	r3, [pc, #48]	; (19ba8 <sd_mmc_spi_start_read_block+0x68>)
   19b78:	701a      	strb	r2, [r3, #0]
			return false;
   19b7a:	2000      	movs	r0, #0
   19b7c:	e00c      	b.n	19b98 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   19b7e:	075b      	lsls	r3, r3, #29
   19b80:	d004      	beq.n	19b8c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   19b82:	3207      	adds	r2, #7
   19b84:	4b08      	ldr	r3, [pc, #32]	; (19ba8 <sd_mmc_spi_start_read_block+0x68>)
   19b86:	701a      	strb	r2, [r3, #0]
			return false;
   19b88:	2000      	movs	r0, #0
   19b8a:	e005      	b.n	19b98 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   19b8c:	220b      	movs	r2, #11
   19b8e:	4b06      	ldr	r3, [pc, #24]	; (19ba8 <sd_mmc_spi_start_read_block+0x68>)
   19b90:	701a      	strb	r2, [r3, #0]
			return false;
   19b92:	2000      	movs	r0, #0
   19b94:	e000      	b.n	19b98 <sd_mmc_spi_start_read_block+0x58>
	return true;
   19b96:	2001      	movs	r0, #1
}
   19b98:	b003      	add	sp, #12
   19b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b9c:	0007a120 	.word	0x0007a120
   19ba0:	20003c88 	.word	0x20003c88
   19ba4:	0001e145 	.word	0x0001e145
   19ba8:	20003ccb 	.word	0x20003ccb

00019bac <sd_mmc_spi_stop_write_block>:
{
   19bac:	b530      	push	{r4, r5, lr}
   19bae:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   19bb0:	a901      	add	r1, sp, #4
   19bb2:	2301      	movs	r3, #1
   19bb4:	425b      	negs	r3, r3
   19bb6:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   19bb8:	4d14      	ldr	r5, [pc, #80]	; (19c0c <sd_mmc_spi_stop_write_block+0x60>)
   19bba:	2202      	movs	r2, #2
   19bbc:	0028      	movs	r0, r5
   19bbe:	4b14      	ldr	r3, [pc, #80]	; (19c10 <sd_mmc_spi_stop_write_block+0x64>)
   19bc0:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   19bc2:	466b      	mov	r3, sp
   19bc4:	1ddc      	adds	r4, r3, #7
   19bc6:	23ff      	movs	r3, #255	; 0xff
   19bc8:	2201      	movs	r2, #1
   19bca:	0021      	movs	r1, r4
   19bcc:	0028      	movs	r0, r5
   19bce:	4d11      	ldr	r5, [pc, #68]	; (19c14 <sd_mmc_spi_stop_write_block+0x68>)
   19bd0:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   19bd2:	7822      	ldrb	r2, [r4, #0]
   19bd4:	2311      	movs	r3, #17
   19bd6:	4013      	ands	r3, r2
   19bd8:	2b01      	cmp	r3, #1
   19bda:	d005      	beq.n	19be8 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19bdc:	2201      	movs	r2, #1
   19bde:	4b0e      	ldr	r3, [pc, #56]	; (19c18 <sd_mmc_spi_stop_write_block+0x6c>)
   19be0:	701a      	strb	r2, [r3, #0]
		return false;
   19be2:	2000      	movs	r0, #0
}
   19be4:	b003      	add	sp, #12
   19be6:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   19be8:	231e      	movs	r3, #30
   19bea:	401a      	ands	r2, r3
   19bec:	2a04      	cmp	r2, #4
   19bee:	d00b      	beq.n	19c08 <sd_mmc_spi_stop_write_block+0x5c>
   19bf0:	2a0a      	cmp	r2, #10
   19bf2:	d104      	bne.n	19bfe <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   19bf4:	3a02      	subs	r2, #2
   19bf6:	4b08      	ldr	r3, [pc, #32]	; (19c18 <sd_mmc_spi_stop_write_block+0x6c>)
   19bf8:	701a      	strb	r2, [r3, #0]
		return false;
   19bfa:	2000      	movs	r0, #0
   19bfc:	e7f2      	b.n	19be4 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   19bfe:	220a      	movs	r2, #10
   19c00:	4b05      	ldr	r3, [pc, #20]	; (19c18 <sd_mmc_spi_stop_write_block+0x6c>)
   19c02:	701a      	strb	r2, [r3, #0]
		return false;
   19c04:	2000      	movs	r0, #0
   19c06:	e7ed      	b.n	19be4 <sd_mmc_spi_stop_write_block+0x38>
	return true;
   19c08:	2001      	movs	r0, #1
   19c0a:	e7eb      	b.n	19be4 <sd_mmc_spi_stop_write_block+0x38>
   19c0c:	20003c88 	.word	0x20003c88
   19c10:	0001e30d 	.word	0x0001e30d
   19c14:	0001e145 	.word	0x0001e145
   19c18:	20003ccb 	.word	0x20003ccb

00019c1c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   19c1c:	b570      	push	{r4, r5, r6, lr}
   19c1e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19c20:	2300      	movs	r3, #0
   19c22:	4a2d      	ldr	r2, [pc, #180]	; (19cd8 <sd_mmc_spi_init+0xbc>)
   19c24:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   19c26:	ac02      	add	r4, sp, #8
   19c28:	2501      	movs	r5, #1
   19c2a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   19c2c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   19c2e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   19c30:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   19c32:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   19c34:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   19c36:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   19c38:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   19c3a:	2224      	movs	r2, #36	; 0x24
   19c3c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   19c3e:	3a18      	subs	r2, #24
   19c40:	2100      	movs	r1, #0
   19c42:	a808      	add	r0, sp, #32
   19c44:	4b25      	ldr	r3, [pc, #148]	; (19cdc <sd_mmc_spi_init+0xc0>)
   19c46:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   19c48:	2380      	movs	r3, #128	; 0x80
   19c4a:	025b      	lsls	r3, r3, #9
   19c4c:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   19c4e:	4b24      	ldr	r3, [pc, #144]	; (19ce0 <sd_mmc_spi_init+0xc4>)
   19c50:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   19c52:	4b24      	ldr	r3, [pc, #144]	; (19ce4 <sd_mmc_spi_init+0xc8>)
   19c54:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   19c56:	4b24      	ldr	r3, [pc, #144]	; (19ce8 <sd_mmc_spi_init+0xcc>)
   19c58:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   19c5a:	4b24      	ldr	r3, [pc, #144]	; (19cec <sd_mmc_spi_init+0xd0>)
   19c5c:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   19c5e:	4b24      	ldr	r3, [pc, #144]	; (19cf0 <sd_mmc_spi_init+0xd4>)
   19c60:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   19c62:	4e24      	ldr	r6, [pc, #144]	; (19cf4 <sd_mmc_spi_init+0xd8>)
   19c64:	0022      	movs	r2, r4
   19c66:	4924      	ldr	r1, [pc, #144]	; (19cf8 <sd_mmc_spi_init+0xdc>)
   19c68:	0030      	movs	r0, r6
   19c6a:	4b24      	ldr	r3, [pc, #144]	; (19cfc <sd_mmc_spi_init+0xe0>)
   19c6c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   19c6e:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   19c70:	0020      	movs	r0, r4
   19c72:	4b23      	ldr	r3, [pc, #140]	; (19d00 <sd_mmc_spi_init+0xe4>)
   19c74:	4798      	blx	r3
   19c76:	231f      	movs	r3, #31
   19c78:	4018      	ands	r0, r3
   19c7a:	4085      	lsls	r5, r0
   19c7c:	4b21      	ldr	r3, [pc, #132]	; (19d04 <sd_mmc_spi_init+0xe8>)
   19c7e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   19c80:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
   19c82:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   19c84:	2b00      	cmp	r3, #0
   19c86:	d1fc      	bne.n	19c82 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   19c88:	6823      	ldr	r3, [r4, #0]
   19c8a:	2202      	movs	r2, #2
   19c8c:	4313      	orrs	r3, r2
   19c8e:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
   19c90:	4a1d      	ldr	r2, [pc, #116]	; (19d08 <sd_mmc_spi_init+0xec>)
   19c92:	2300      	movs	r3, #0
   19c94:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
   19c96:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
   19c98:	491c      	ldr	r1, [pc, #112]	; (19d0c <sd_mmc_spi_init+0xf0>)
   19c9a:	7808      	ldrb	r0, [r1, #0]
   19c9c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
   19c9e:	4c1c      	ldr	r4, [pc, #112]	; (19d10 <sd_mmc_spi_init+0xf4>)
   19ca0:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
   19ca2:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   19ca4:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   19ca6:	a901      	add	r1, sp, #4
   19ca8:	2201      	movs	r2, #1
   19caa:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   19cac:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   19cae:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   19cb0:	4b18      	ldr	r3, [pc, #96]	; (19d14 <sd_mmc_spi_init+0xf8>)
   19cb2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   19cb4:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   19cb6:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   19cb8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19cba:	2900      	cmp	r1, #0
   19cbc:	d104      	bne.n	19cc8 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
   19cbe:	0953      	lsrs	r3, r2, #5
   19cc0:	01db      	lsls	r3, r3, #7
   19cc2:	4915      	ldr	r1, [pc, #84]	; (19d18 <sd_mmc_spi_init+0xfc>)
   19cc4:	468c      	mov	ip, r1
   19cc6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19cc8:	211f      	movs	r1, #31
   19cca:	4011      	ands	r1, r2
   19ccc:	2201      	movs	r2, #1
   19cce:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   19cd0:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
   19cd2:	b010      	add	sp, #64	; 0x40
   19cd4:	bd70      	pop	{r4, r5, r6, pc}
   19cd6:	46c0      	nop			; (mov r8, r8)
   19cd8:	20003ccb 	.word	0x20003ccb
   19cdc:	00026253 	.word	0x00026253
   19ce0:	00100002 	.word	0x00100002
   19ce4:	00110002 	.word	0x00110002
   19ce8:	00120002 	.word	0x00120002
   19cec:	00130002 	.word	0x00130002
   19cf0:	00061a80 	.word	0x00061a80
   19cf4:	20003c88 	.word	0x20003c88
   19cf8:	42000c00 	.word	0x42000c00
   19cfc:	0001df6d 	.word	0x0001df6d
   19d00:	0001de25 	.word	0x0001de25
   19d04:	e000e100 	.word	0xe000e100
   19d08:	20003cd8 	.word	0x20003cd8
   19d0c:	200000cc 	.word	0x200000cc
   19d10:	20003cc8 	.word	0x20003cc8
   19d14:	0001d811 	.word	0x0001d811
   19d18:	41004400 	.word	0x41004400

00019d1c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   19d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d1e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19d20:	2200      	movs	r2, #0
   19d22:	4b0d      	ldr	r3, [pc, #52]	; (19d58 <sd_mmc_spi_select_device+0x3c>)
   19d24:	701a      	strb	r2, [r3, #0]
   19d26:	000c      	movs	r4, r1
   19d28:	4b0c      	ldr	r3, [pc, #48]	; (19d5c <sd_mmc_spi_select_device+0x40>)
   19d2a:	4299      	cmp	r1, r3
   19d2c:	d900      	bls.n	19d30 <sd_mmc_spi_select_device+0x14>
   19d2e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19d30:	4d0b      	ldr	r5, [pc, #44]	; (19d60 <sd_mmc_spi_select_device+0x44>)
   19d32:	4e0c      	ldr	r6, [pc, #48]	; (19d64 <sd_mmc_spi_select_device+0x48>)
   19d34:	e001      	b.n	19d3a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
   19d36:	08e3      	lsrs	r3, r4, #3
   19d38:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19d3a:	0021      	movs	r1, r4
   19d3c:	0028      	movs	r0, r5
   19d3e:	47b0      	blx	r6
   19d40:	2817      	cmp	r0, #23
   19d42:	d0f8      	beq.n	19d36 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   19d44:	0079      	lsls	r1, r7, #1
   19d46:	19cf      	adds	r7, r1, r7
   19d48:	4907      	ldr	r1, [pc, #28]	; (19d68 <sd_mmc_spi_select_device+0x4c>)
   19d4a:	19c9      	adds	r1, r1, r7
   19d4c:	2201      	movs	r2, #1
   19d4e:	4804      	ldr	r0, [pc, #16]	; (19d60 <sd_mmc_spi_select_device+0x44>)
   19d50:	4b06      	ldr	r3, [pc, #24]	; (19d6c <sd_mmc_spi_select_device+0x50>)
   19d52:	4798      	blx	r3
}
   19d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d56:	46c0      	nop			; (mov r8, r8)
   19d58:	20003ccb 	.word	0x20003ccb
   19d5c:	00989680 	.word	0x00989680
   19d60:	20003c88 	.word	0x20003c88
   19d64:	0001deb5 	.word	0x0001deb5
   19d68:	20003cc8 	.word	0x20003cc8
   19d6c:	0001e219 	.word	0x0001e219

00019d70 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   19d70:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19d72:	2200      	movs	r2, #0
   19d74:	4b04      	ldr	r3, [pc, #16]	; (19d88 <sd_mmc_spi_deselect_device+0x18>)
   19d76:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   19d78:	0041      	lsls	r1, r0, #1
   19d7a:	1808      	adds	r0, r1, r0
   19d7c:	4903      	ldr	r1, [pc, #12]	; (19d8c <sd_mmc_spi_deselect_device+0x1c>)
   19d7e:	1809      	adds	r1, r1, r0
   19d80:	4803      	ldr	r0, [pc, #12]	; (19d90 <sd_mmc_spi_deselect_device+0x20>)
   19d82:	4b04      	ldr	r3, [pc, #16]	; (19d94 <sd_mmc_spi_deselect_device+0x24>)
   19d84:	4798      	blx	r3
}
   19d86:	bd10      	pop	{r4, pc}
   19d88:	20003ccb 	.word	0x20003ccb
   19d8c:	20003cc8 	.word	0x20003cc8
   19d90:	20003c88 	.word	0x20003c88
   19d94:	0001e219 	.word	0x0001e219

00019d98 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   19d98:	b570      	push	{r4, r5, r6, lr}
   19d9a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
   19d9c:	22ff      	movs	r2, #255	; 0xff
   19d9e:	466b      	mov	r3, sp
   19da0:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19da2:	2200      	movs	r2, #0
   19da4:	4b07      	ldr	r3, [pc, #28]	; (19dc4 <sd_mmc_spi_send_clock+0x2c>)
   19da6:	701a      	strb	r2, [r3, #0]
   19da8:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   19daa:	4e07      	ldr	r6, [pc, #28]	; (19dc8 <sd_mmc_spi_send_clock+0x30>)
   19dac:	4d07      	ldr	r5, [pc, #28]	; (19dcc <sd_mmc_spi_send_clock+0x34>)
   19dae:	2201      	movs	r2, #1
   19db0:	466b      	mov	r3, sp
   19db2:	1dd9      	adds	r1, r3, #7
   19db4:	0030      	movs	r0, r6
   19db6:	47a8      	blx	r5
   19db8:	3c01      	subs	r4, #1
   19dba:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
   19dbc:	2c00      	cmp	r4, #0
   19dbe:	d1f6      	bne.n	19dae <sd_mmc_spi_send_clock+0x16>
	}
}
   19dc0:	b002      	add	sp, #8
   19dc2:	bd70      	pop	{r4, r5, r6, pc}
   19dc4:	20003ccb 	.word	0x20003ccb
   19dc8:	20003c88 	.word	0x20003c88
   19dcc:	0001e30d 	.word	0x0001e30d

00019dd0 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   19dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dd2:	46c6      	mov	lr, r8
   19dd4:	b500      	push	{lr}
   19dd6:	b086      	sub	sp, #24
   19dd8:	4680      	mov	r8, r0
   19dda:	9200      	str	r2, [sp, #0]
   19ddc:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
   19dde:	22ff      	movs	r2, #255	; 0xff
   19de0:	230f      	movs	r3, #15
   19de2:	a802      	add	r0, sp, #8
   19de4:	4684      	mov	ip, r0
   19de6:	4463      	add	r3, ip
   19de8:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19dea:	2200      	movs	r2, #0
   19dec:	4b53      	ldr	r3, [pc, #332]	; (19f3c <sd_mmc_spi_adtc_start+0x16c>)
   19dee:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   19df0:	ab04      	add	r3, sp, #16
   19df2:	323f      	adds	r2, #63	; 0x3f
   19df4:	4640      	mov	r0, r8
   19df6:	4002      	ands	r2, r0
   19df8:	2040      	movs	r0, #64	; 0x40
   19dfa:	4302      	orrs	r2, r0
   19dfc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   19dfe:	0e0a      	lsrs	r2, r1, #24
   19e00:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   19e02:	0c0a      	lsrs	r2, r1, #16
   19e04:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   19e06:	0a0a      	lsrs	r2, r1, #8
   19e08:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   19e0a:	7119      	strb	r1, [r3, #4]
   19e0c:	2700      	movs	r7, #0
	crc = 0;
   19e0e:	2300      	movs	r3, #0
		value = *buf++;
   19e10:	a904      	add	r1, sp, #16
   19e12:	2208      	movs	r2, #8
				crc ^= 0x09;
   19e14:	2409      	movs	r4, #9
   19e16:	e011      	b.n	19e3c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
   19e18:	0076      	lsls	r6, r6, #1
   19e1a:	b2f6      	uxtb	r6, r6
   19e1c:	3801      	subs	r0, #1
   19e1e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
   19e20:	2800      	cmp	r0, #0
   19e22:	d008      	beq.n	19e36 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
   19e24:	005b      	lsls	r3, r3, #1
   19e26:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   19e28:	001d      	movs	r5, r3
   19e2a:	4075      	eors	r5, r6
   19e2c:	062d      	lsls	r5, r5, #24
   19e2e:	d5f3      	bpl.n	19e18 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
   19e30:	4063      	eors	r3, r4
   19e32:	b2db      	uxtb	r3, r3
   19e34:	e7f0      	b.n	19e18 <sd_mmc_spi_adtc_start+0x48>
   19e36:	3701      	adds	r7, #1
	while (size--) {
   19e38:	2f05      	cmp	r7, #5
   19e3a:	d002      	beq.n	19e42 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
   19e3c:	5c7e      	ldrb	r6, [r7, r1]
   19e3e:	0010      	movs	r0, r2
   19e40:	e7f0      	b.n	19e24 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
   19e42:	005b      	lsls	r3, r3, #1
   19e44:	2201      	movs	r2, #1
   19e46:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   19e48:	ac04      	add	r4, sp, #16
   19e4a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   19e4c:	4e3c      	ldr	r6, [pc, #240]	; (19f40 <sd_mmc_spi_adtc_start+0x170>)
   19e4e:	2201      	movs	r2, #1
   19e50:	210f      	movs	r1, #15
   19e52:	ab02      	add	r3, sp, #8
   19e54:	469c      	mov	ip, r3
   19e56:	4461      	add	r1, ip
   19e58:	0030      	movs	r0, r6
   19e5a:	4f3a      	ldr	r7, [pc, #232]	; (19f44 <sd_mmc_spi_adtc_start+0x174>)
   19e5c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   19e5e:	2206      	movs	r2, #6
   19e60:	0021      	movs	r1, r4
   19e62:	0030      	movs	r0, r6
   19e64:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   19e66:	ab02      	add	r3, sp, #8
   19e68:	1dd9      	adds	r1, r3, #7
   19e6a:	23ff      	movs	r3, #255	; 0xff
   19e6c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19e6e:	2201      	movs	r2, #1
   19e70:	0030      	movs	r0, r6
   19e72:	4e35      	ldr	r6, [pc, #212]	; (19f48 <sd_mmc_spi_adtc_start+0x178>)
   19e74:	47b0      	blx	r6
   19e76:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19e78:	ab02      	add	r3, sp, #8
   19e7a:	1dde      	adds	r6, r3, #7
   19e7c:	4f30      	ldr	r7, [pc, #192]	; (19f40 <sd_mmc_spi_adtc_start+0x170>)
   19e7e:	4d32      	ldr	r5, [pc, #200]	; (19f48 <sd_mmc_spi_adtc_start+0x178>)
   19e80:	23ff      	movs	r3, #255	; 0xff
   19e82:	2201      	movs	r2, #1
   19e84:	0031      	movs	r1, r6
   19e86:	0038      	movs	r0, r7
   19e88:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   19e8a:	7833      	ldrb	r3, [r6, #0]
   19e8c:	b25a      	sxtb	r2, r3
   19e8e:	2a00      	cmp	r2, #0
   19e90:	da0b      	bge.n	19eaa <sd_mmc_spi_adtc_start+0xda>
   19e92:	3c01      	subs	r4, #1
   19e94:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   19e96:	2c00      	cmp	r4, #0
   19e98:	d1f2      	bne.n	19e80 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   19e9a:	2202      	movs	r2, #2
   19e9c:	4b27      	ldr	r3, [pc, #156]	; (19f3c <sd_mmc_spi_adtc_start+0x16c>)
   19e9e:	701a      	strb	r2, [r3, #0]
			return false;
   19ea0:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
   19ea2:	b006      	add	sp, #24
   19ea4:	bc04      	pop	{r2}
   19ea6:	4690      	mov	r8, r2
   19ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
   19eaa:	4a28      	ldr	r2, [pc, #160]	; (19f4c <sd_mmc_spi_adtc_start+0x17c>)
   19eac:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
   19eae:	071a      	lsls	r2, r3, #28
   19eb0:	d41a      	bmi.n	19ee8 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   19eb2:	075a      	lsls	r2, r3, #29
   19eb4:	d41d      	bmi.n	19ef2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
   19eb6:	2201      	movs	r2, #1
   19eb8:	4393      	bics	r3, r2
   19eba:	d11f      	bne.n	19efc <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
   19ebc:	4643      	mov	r3, r8
   19ebe:	049b      	lsls	r3, r3, #18
   19ec0:	d420      	bmi.n	19f04 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
   19ec2:	4643      	mov	r3, r8
   19ec4:	059b      	lsls	r3, r3, #22
   19ec6:	d425      	bmi.n	19f14 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
   19ec8:	4643      	mov	r3, r8
   19eca:	055b      	lsls	r3, r3, #21
   19ecc:	d42b      	bmi.n	19f26 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
   19ece:	4b20      	ldr	r3, [pc, #128]	; (19f50 <sd_mmc_spi_adtc_start+0x180>)
   19ed0:	466a      	mov	r2, sp
   19ed2:	8812      	ldrh	r2, [r2, #0]
   19ed4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   19ed6:	4b1f      	ldr	r3, [pc, #124]	; (19f54 <sd_mmc_spi_adtc_start+0x184>)
   19ed8:	466a      	mov	r2, sp
   19eda:	8892      	ldrh	r2, [r2, #4]
   19edc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   19ede:	2200      	movs	r2, #0
   19ee0:	4b1d      	ldr	r3, [pc, #116]	; (19f58 <sd_mmc_spi_adtc_start+0x188>)
   19ee2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   19ee4:	2001      	movs	r0, #1
   19ee6:	e7dc      	b.n	19ea2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   19ee8:	2206      	movs	r2, #6
   19eea:	4b14      	ldr	r3, [pc, #80]	; (19f3c <sd_mmc_spi_adtc_start+0x16c>)
   19eec:	701a      	strb	r2, [r3, #0]
		return false;
   19eee:	2000      	movs	r0, #0
   19ef0:	e7d7      	b.n	19ea2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   19ef2:	2209      	movs	r2, #9
   19ef4:	4b11      	ldr	r3, [pc, #68]	; (19f3c <sd_mmc_spi_adtc_start+0x16c>)
   19ef6:	701a      	strb	r2, [r3, #0]
		return false;
   19ef8:	2000      	movs	r0, #0
   19efa:	e7d2      	b.n	19ea2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19efc:	4b0f      	ldr	r3, [pc, #60]	; (19f3c <sd_mmc_spi_adtc_start+0x16c>)
   19efe:	701a      	strb	r2, [r3, #0]
		return false;
   19f00:	2000      	movs	r0, #0
   19f02:	e7ce      	b.n	19ea2 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
   19f04:	4b15      	ldr	r3, [pc, #84]	; (19f5c <sd_mmc_spi_adtc_start+0x18c>)
   19f06:	4798      	blx	r3
   19f08:	2800      	cmp	r0, #0
   19f0a:	d1da      	bne.n	19ec2 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   19f0c:	2203      	movs	r2, #3
   19f0e:	4b0b      	ldr	r3, [pc, #44]	; (19f3c <sd_mmc_spi_adtc_start+0x16c>)
   19f10:	701a      	strb	r2, [r3, #0]
			return false;
   19f12:	e7c6      	b.n	19ea2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
   19f14:	490d      	ldr	r1, [pc, #52]	; (19f4c <sd_mmc_spi_adtc_start+0x17c>)
   19f16:	2300      	movs	r3, #0
   19f18:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   19f1a:	33ff      	adds	r3, #255	; 0xff
   19f1c:	2201      	movs	r2, #1
   19f1e:	4808      	ldr	r0, [pc, #32]	; (19f40 <sd_mmc_spi_adtc_start+0x170>)
   19f20:	4e09      	ldr	r6, [pc, #36]	; (19f48 <sd_mmc_spi_adtc_start+0x178>)
   19f22:	47b0      	blx	r6
   19f24:	e7d0      	b.n	19ec8 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   19f26:	4e09      	ldr	r6, [pc, #36]	; (19f4c <sd_mmc_spi_adtc_start+0x17c>)
   19f28:	23ff      	movs	r3, #255	; 0xff
   19f2a:	2204      	movs	r2, #4
   19f2c:	0031      	movs	r1, r6
   19f2e:	4804      	ldr	r0, [pc, #16]	; (19f40 <sd_mmc_spi_adtc_start+0x170>)
   19f30:	4f05      	ldr	r7, [pc, #20]	; (19f48 <sd_mmc_spi_adtc_start+0x178>)
   19f32:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   19f34:	6833      	ldr	r3, [r6, #0]
   19f36:	ba1b      	rev	r3, r3
   19f38:	6033      	str	r3, [r6, #0]
   19f3a:	e7c8      	b.n	19ece <sd_mmc_spi_adtc_start+0xfe>
   19f3c:	20003ccb 	.word	0x20003ccb
   19f40:	20003c88 	.word	0x20003c88
   19f44:	0001e30d 	.word	0x0001e30d
   19f48:	0001e145 	.word	0x0001e145
   19f4c:	20003cd0 	.word	0x20003cd0
   19f50:	20003cc4 	.word	0x20003cc4
   19f54:	20003ccc 	.word	0x20003ccc
   19f58:	20003cd4 	.word	0x20003cd4
   19f5c:	00019a65 	.word	0x00019a65

00019f60 <sd_mmc_spi_send_cmd>:
{
   19f60:	b510      	push	{r4, lr}
   19f62:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   19f64:	2300      	movs	r3, #0
   19f66:	9300      	str	r3, [sp, #0]
   19f68:	2200      	movs	r2, #0
   19f6a:	4c02      	ldr	r4, [pc, #8]	; (19f74 <sd_mmc_spi_send_cmd+0x14>)
   19f6c:	47a0      	blx	r4
}
   19f6e:	b002      	add	sp, #8
   19f70:	bd10      	pop	{r4, pc}
   19f72:	46c0      	nop			; (mov r8, r8)
   19f74:	00019dd1 	.word	0x00019dd1

00019f78 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
   19f78:	4b01      	ldr	r3, [pc, #4]	; (19f80 <sd_mmc_spi_get_response+0x8>)
   19f7a:	6818      	ldr	r0, [r3, #0]
}
   19f7c:	4770      	bx	lr
   19f7e:	46c0      	nop			; (mov r8, r8)
   19f80:	20003cd0 	.word	0x20003cd0

00019f84 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   19f84:	b510      	push	{r4, lr}
   19f86:	b084      	sub	sp, #16
   19f88:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19f8a:	2200      	movs	r2, #0
   19f8c:	4b14      	ldr	r3, [pc, #80]	; (19fe0 <sd_mmc_spi_read_word+0x5c>)
   19f8e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19f90:	4b14      	ldr	r3, [pc, #80]	; (19fe4 <sd_mmc_spi_read_word+0x60>)
   19f92:	8819      	ldrh	r1, [r3, #0]
   19f94:	4b14      	ldr	r3, [pc, #80]	; (19fe8 <sd_mmc_spi_read_word+0x64>)
   19f96:	6818      	ldr	r0, [r3, #0]
   19f98:	4b14      	ldr	r3, [pc, #80]	; (19fec <sd_mmc_spi_read_word+0x68>)
   19f9a:	4798      	blx	r3
   19f9c:	2900      	cmp	r1, #0
   19f9e:	d103      	bne.n	19fa8 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   19fa0:	4b13      	ldr	r3, [pc, #76]	; (19ff0 <sd_mmc_spi_read_word+0x6c>)
   19fa2:	4798      	blx	r3
   19fa4:	2800      	cmp	r0, #0
   19fa6:	d010      	beq.n	19fca <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   19fa8:	23ff      	movs	r3, #255	; 0xff
   19faa:	2204      	movs	r2, #4
   19fac:	a901      	add	r1, sp, #4
   19fae:	4811      	ldr	r0, [pc, #68]	; (19ff4 <sd_mmc_spi_read_word+0x70>)
   19fb0:	4c11      	ldr	r4, [pc, #68]	; (19ff8 <sd_mmc_spi_read_word+0x74>)
   19fb2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
   19fb4:	4b0c      	ldr	r3, [pc, #48]	; (19fe8 <sd_mmc_spi_read_word+0x64>)
   19fb6:	681a      	ldr	r2, [r3, #0]
   19fb8:	1d10      	adds	r0, r2, #4
   19fba:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19fbc:	4b09      	ldr	r3, [pc, #36]	; (19fe4 <sd_mmc_spi_read_word+0x60>)
   19fbe:	8819      	ldrh	r1, [r3, #0]
   19fc0:	4b0a      	ldr	r3, [pc, #40]	; (19fec <sd_mmc_spi_read_word+0x68>)
   19fc2:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
   19fc4:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19fc6:	2900      	cmp	r1, #0
   19fc8:	d001      	beq.n	19fce <sd_mmc_spi_read_word+0x4a>
}
   19fca:	b004      	add	sp, #16
   19fcc:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   19fce:	23ff      	movs	r3, #255	; 0xff
   19fd0:	2202      	movs	r2, #2
   19fd2:	a903      	add	r1, sp, #12
   19fd4:	4807      	ldr	r0, [pc, #28]	; (19ff4 <sd_mmc_spi_read_word+0x70>)
   19fd6:	4c08      	ldr	r4, [pc, #32]	; (19ff8 <sd_mmc_spi_read_word+0x74>)
   19fd8:	47a0      	blx	r4
	return true;
   19fda:	2001      	movs	r0, #1
   19fdc:	e7f5      	b.n	19fca <sd_mmc_spi_read_word+0x46>
   19fde:	46c0      	nop			; (mov r8, r8)
   19fe0:	20003ccb 	.word	0x20003ccb
   19fe4:	20003cc4 	.word	0x20003cc4
   19fe8:	20003cd4 	.word	0x20003cd4
   19fec:	000240f5 	.word	0x000240f5
   19ff0:	00019b41 	.word	0x00019b41
   19ff4:	20003c88 	.word	0x20003c88
   19ff8:	0001e145 	.word	0x0001e145

00019ffc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   19ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ffe:	46de      	mov	lr, fp
   1a000:	4657      	mov	r7, sl
   1a002:	4646      	mov	r6, r8
   1a004:	b5c0      	push	{r6, r7, lr}
   1a006:	b082      	sub	sp, #8
   1a008:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1a00a:	2200      	movs	r2, #0
   1a00c:	4b17      	ldr	r3, [pc, #92]	; (1a06c <sd_mmc_spi_start_read_blocks+0x70>)
   1a00e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
   1a010:	1e4c      	subs	r4, r1, #1
   1a012:	b2a4      	uxth	r4, r4
   1a014:	2900      	cmp	r1, #0
   1a016:	d026      	beq.n	1a066 <sd_mmc_spi_start_read_blocks+0x6a>
   1a018:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1a01a:	4b15      	ldr	r3, [pc, #84]	; (1a070 <sd_mmc_spi_start_read_blocks+0x74>)
   1a01c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1a01e:	4f15      	ldr	r7, [pc, #84]	; (1a074 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
   1a020:	47d0      	blx	sl
   1a022:	4680      	mov	r8, r0
   1a024:	2800      	cmp	r0, #0
   1a026:	d017      	beq.n	1a058 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1a028:	883a      	ldrh	r2, [r7, #0]
   1a02a:	465b      	mov	r3, fp
   1a02c:	1999      	adds	r1, r3, r6
   1a02e:	23ff      	movs	r3, #255	; 0xff
   1a030:	4811      	ldr	r0, [pc, #68]	; (1a078 <sd_mmc_spi_start_read_blocks+0x7c>)
   1a032:	4d12      	ldr	r5, [pc, #72]	; (1a07c <sd_mmc_spi_start_read_blocks+0x80>)
   1a034:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1a036:	883b      	ldrh	r3, [r7, #0]
   1a038:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1a03a:	4a11      	ldr	r2, [pc, #68]	; (1a080 <sd_mmc_spi_start_read_blocks+0x84>)
   1a03c:	6811      	ldr	r1, [r2, #0]
   1a03e:	468c      	mov	ip, r1
   1a040:	4463      	add	r3, ip
   1a042:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1a044:	23ff      	movs	r3, #255	; 0xff
   1a046:	2202      	movs	r2, #2
   1a048:	a901      	add	r1, sp, #4
   1a04a:	480b      	ldr	r0, [pc, #44]	; (1a078 <sd_mmc_spi_start_read_blocks+0x7c>)
   1a04c:	47a8      	blx	r5
	while (nb_block--) {
   1a04e:	3c01      	subs	r4, #1
   1a050:	b2a4      	uxth	r4, r4
   1a052:	4b0c      	ldr	r3, [pc, #48]	; (1a084 <sd_mmc_spi_start_read_blocks+0x88>)
   1a054:	429c      	cmp	r4, r3
   1a056:	d1e3      	bne.n	1a020 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
   1a058:	4640      	mov	r0, r8
   1a05a:	b002      	add	sp, #8
   1a05c:	bc1c      	pop	{r2, r3, r4}
   1a05e:	4690      	mov	r8, r2
   1a060:	469a      	mov	sl, r3
   1a062:	46a3      	mov	fp, r4
   1a064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   1a066:	2301      	movs	r3, #1
   1a068:	4698      	mov	r8, r3
   1a06a:	e7f5      	b.n	1a058 <sd_mmc_spi_start_read_blocks+0x5c>
   1a06c:	20003ccb 	.word	0x20003ccb
   1a070:	00019b41 	.word	0x00019b41
   1a074:	20003cc4 	.word	0x20003cc4
   1a078:	20003c88 	.word	0x20003c88
   1a07c:	0001e145 	.word	0x0001e145
   1a080:	20003cd4 	.word	0x20003cd4
   1a084:	0000ffff 	.word	0x0000ffff

0001a088 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
   1a088:	2001      	movs	r0, #1
   1a08a:	4770      	bx	lr

0001a08c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a08e:	46c6      	mov	lr, r8
   1a090:	b500      	push	{lr}
   1a092:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1a094:	2200      	movs	r2, #0
   1a096:	4b15      	ldr	r3, [pc, #84]	; (1a0ec <sd_mmc_spi_start_write_blocks+0x60>)
   1a098:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1a09a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1a09c:	4f14      	ldr	r7, [pc, #80]	; (1a0f0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1a09e:	4e15      	ldr	r6, [pc, #84]	; (1a0f4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
   1a0a0:	e000      	b.n	1a0a4 <sd_mmc_spi_start_write_blocks+0x18>
{
   1a0a2:	0021      	movs	r1, r4
	while (nb_block--) {
   1a0a4:	1e4c      	subs	r4, r1, #1
   1a0a6:	b2a4      	uxth	r4, r4
   1a0a8:	2900      	cmp	r1, #0
   1a0aa:	d01b      	beq.n	1a0e4 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
   1a0ac:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1a0ae:	8832      	ldrh	r2, [r6, #0]
   1a0b0:	4643      	mov	r3, r8
   1a0b2:	1959      	adds	r1, r3, r5
   1a0b4:	4810      	ldr	r0, [pc, #64]	; (1a0f8 <sd_mmc_spi_start_write_blocks+0x6c>)
   1a0b6:	4b11      	ldr	r3, [pc, #68]	; (1a0fc <sd_mmc_spi_start_write_blocks+0x70>)
   1a0b8:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1a0ba:	8833      	ldrh	r3, [r6, #0]
   1a0bc:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1a0be:	4a10      	ldr	r2, [pc, #64]	; (1a100 <sd_mmc_spi_start_write_blocks+0x74>)
   1a0c0:	6811      	ldr	r1, [r2, #0]
   1a0c2:	468c      	mov	ip, r1
   1a0c4:	4463      	add	r3, ip
   1a0c6:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1a0c8:	4b0e      	ldr	r3, [pc, #56]	; (1a104 <sd_mmc_spi_start_write_blocks+0x78>)
   1a0ca:	4798      	blx	r3
   1a0cc:	2800      	cmp	r0, #0
   1a0ce:	d00a      	beq.n	1a0e6 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1a0d0:	2c00      	cmp	r4, #0
   1a0d2:	d0e6      	beq.n	1a0a2 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1a0d4:	4b0c      	ldr	r3, [pc, #48]	; (1a108 <sd_mmc_spi_start_write_blocks+0x7c>)
   1a0d6:	4798      	blx	r3
   1a0d8:	2800      	cmp	r0, #0
   1a0da:	d1e2      	bne.n	1a0a2 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a0dc:	2205      	movs	r2, #5
   1a0de:	4b03      	ldr	r3, [pc, #12]	; (1a0ec <sd_mmc_spi_start_write_blocks+0x60>)
   1a0e0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1a0e2:	e000      	b.n	1a0e6 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
   1a0e4:	2001      	movs	r0, #1
}
   1a0e6:	bc04      	pop	{r2}
   1a0e8:	4690      	mov	r8, r2
   1a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a0ec:	20003ccb 	.word	0x20003ccb
   1a0f0:	00019a1d 	.word	0x00019a1d
   1a0f4:	20003cc4 	.word	0x20003cc4
   1a0f8:	20003c88 	.word	0x20003c88
   1a0fc:	0001e30d 	.word	0x0001e30d
   1a100:	20003cd4 	.word	0x20003cd4
   1a104:	00019bad 	.word	0x00019bad
   1a108:	00019a65 	.word	0x00019a65

0001a10c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1a10c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1a10e:	4b05      	ldr	r3, [pc, #20]	; (1a124 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
   1a110:	4798      	blx	r3
   1a112:	2800      	cmp	r0, #0
   1a114:	d103      	bne.n	1a11e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a116:	2205      	movs	r2, #5
   1a118:	4b03      	ldr	r3, [pc, #12]	; (1a128 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
   1a11a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
   1a11c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
   1a11e:	4b03      	ldr	r3, [pc, #12]	; (1a12c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
   1a120:	4798      	blx	r3
   1a122:	e7fb      	b.n	1a11c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
   1a124:	00019a65 	.word	0x00019a65
   1a128:	20003ccb 	.word	0x20003ccb
   1a12c:	00019ac9 	.word	0x00019ac9

0001a130 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1a130:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1a132:	2000      	movs	r0, #0
   1a134:	4b08      	ldr	r3, [pc, #32]	; (1a158 <delay_init+0x28>)
   1a136:	4798      	blx	r3
   1a138:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   1a13a:	4c08      	ldr	r4, [pc, #32]	; (1a15c <delay_init+0x2c>)
   1a13c:	21fa      	movs	r1, #250	; 0xfa
   1a13e:	0089      	lsls	r1, r1, #2
   1a140:	47a0      	blx	r4
   1a142:	4b07      	ldr	r3, [pc, #28]	; (1a160 <delay_init+0x30>)
   1a144:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1a146:	4907      	ldr	r1, [pc, #28]	; (1a164 <delay_init+0x34>)
   1a148:	0028      	movs	r0, r5
   1a14a:	47a0      	blx	r4
   1a14c:	4b06      	ldr	r3, [pc, #24]	; (1a168 <delay_init+0x38>)
   1a14e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1a150:	2205      	movs	r2, #5
   1a152:	4b06      	ldr	r3, [pc, #24]	; (1a16c <delay_init+0x3c>)
   1a154:	601a      	str	r2, [r3, #0]
}
   1a156:	bd70      	pop	{r4, r5, r6, pc}
   1a158:	0001f035 	.word	0x0001f035
   1a15c:	00023fe9 	.word	0x00023fe9
   1a160:	200000d0 	.word	0x200000d0
   1a164:	000f4240 	.word	0x000f4240
   1a168:	200000d4 	.word	0x200000d4
   1a16c:	e000e010 	.word	0xe000e010

0001a170 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1a170:	b510      	push	{r4, lr}
	if (gpfIsr) {
   1a172:	4b03      	ldr	r3, [pc, #12]	; (1a180 <chip_isr+0x10>)
   1a174:	681b      	ldr	r3, [r3, #0]
   1a176:	2b00      	cmp	r3, #0
   1a178:	d000      	beq.n	1a17c <chip_isr+0xc>
		gpfIsr();
   1a17a:	4798      	blx	r3
	}
}
   1a17c:	bd10      	pop	{r4, pc}
   1a17e:	46c0      	nop			; (mov r8, r8)
   1a180:	20003cdc 	.word	0x20003cdc

0001a184 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1a184:	b570      	push	{r4, r5, r6, lr}
   1a186:	b082      	sub	sp, #8
	gpfIsr = NULL;
   1a188:	2300      	movs	r3, #0
   1a18a:	4a15      	ldr	r2, [pc, #84]	; (1a1e0 <nm_bsp_init+0x5c>)
   1a18c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1a18e:	ac01      	add	r4, sp, #4
   1a190:	2501      	movs	r5, #1
   1a192:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1a194:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1a196:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1a198:	0021      	movs	r1, r4
   1a19a:	201b      	movs	r0, #27
   1a19c:	4e11      	ldr	r6, [pc, #68]	; (1a1e4 <nm_bsp_init+0x60>)
   1a19e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1a1a0:	0021      	movs	r1, r4
   1a1a2:	201c      	movs	r0, #28
   1a1a4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1a1a6:	0021      	movs	r1, r4
   1a1a8:	2028      	movs	r0, #40	; 0x28
   1a1aa:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
   1a1ac:	4b0e      	ldr	r3, [pc, #56]	; (1a1e8 <nm_bsp_init+0x64>)
   1a1ae:	2280      	movs	r2, #128	; 0x80
   1a1b0:	0552      	lsls	r2, r2, #21
   1a1b2:	615a      	str	r2, [r3, #20]
   1a1b4:	2280      	movs	r2, #128	; 0x80
   1a1b6:	0512      	lsls	r2, r2, #20
   1a1b8:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1a1ba:	4b0c      	ldr	r3, [pc, #48]	; (1a1ec <nm_bsp_init+0x68>)
   1a1bc:	681b      	ldr	r3, [r3, #0]
   1a1be:	421d      	tst	r5, r3
   1a1c0:	d003      	beq.n	1a1ca <nm_bsp_init+0x46>
   1a1c2:	4b0a      	ldr	r3, [pc, #40]	; (1a1ec <nm_bsp_init+0x68>)
   1a1c4:	681b      	ldr	r3, [r3, #0]
   1a1c6:	079b      	lsls	r3, r3, #30
   1a1c8:	d401      	bmi.n	1a1ce <nm_bsp_init+0x4a>
	    delay_init();
   1a1ca:	4b09      	ldr	r3, [pc, #36]	; (1a1f0 <nm_bsp_init+0x6c>)
   1a1cc:	4798      	blx	r3
	cpu_irq_enable();
   1a1ce:	2201      	movs	r2, #1
   1a1d0:	4b08      	ldr	r3, [pc, #32]	; (1a1f4 <nm_bsp_init+0x70>)
   1a1d2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1a1d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   1a1d8:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
   1a1da:	2000      	movs	r0, #0
   1a1dc:	b002      	add	sp, #8
   1a1de:	bd70      	pop	{r4, r5, r6, pc}
   1a1e0:	20003cdc 	.word	0x20003cdc
   1a1e4:	0001d811 	.word	0x0001d811
   1a1e8:	41004400 	.word	0x41004400
   1a1ec:	e000e010 	.word	0xe000e010
   1a1f0:	0001a131 	.word	0x0001a131
   1a1f4:	200000da 	.word	0x200000da

0001a1f8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1fa:	4c07      	ldr	r4, [pc, #28]	; (1a218 <nm_bsp_reset+0x20>)
   1a1fc:	2780      	movs	r7, #128	; 0x80
   1a1fe:	057f      	lsls	r7, r7, #21
   1a200:	6167      	str	r7, [r4, #20]
   1a202:	2580      	movs	r5, #128	; 0x80
   1a204:	052d      	lsls	r5, r5, #20
   1a206:	6165      	str	r5, [r4, #20]
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1a208:	2001      	movs	r0, #1
   1a20a:	4e04      	ldr	r6, [pc, #16]	; (1a21c <nm_bsp_reset+0x24>)
   1a20c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   1a20e:	61a7      	str	r7, [r4, #24]
   1a210:	200a      	movs	r0, #10
   1a212:	47b0      	blx	r6
   1a214:	61a5      	str	r5, [r4, #24]
}
   1a216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a218:	41004400 	.word	0x41004400
   1a21c:	000180f5 	.word	0x000180f5

0001a220 <nm_bsp_sleep>:
{
   1a220:	b510      	push	{r4, lr}
	vTaskDelay(u32TimeMsec);
   1a222:	4b01      	ldr	r3, [pc, #4]	; (1a228 <nm_bsp_sleep+0x8>)
   1a224:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1a226:	bd10      	pop	{r4, pc}
   1a228:	000180f5 	.word	0x000180f5

0001a22c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1a22c:	b510      	push	{r4, lr}
   1a22e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1a230:	4b0e      	ldr	r3, [pc, #56]	; (1a26c <nm_bsp_register_isr+0x40>)
   1a232:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1a234:	ac01      	add	r4, sp, #4
   1a236:	0020      	movs	r0, r4
   1a238:	4b0d      	ldr	r3, [pc, #52]	; (1a270 <nm_bsp_register_isr+0x44>)
   1a23a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1a23c:	2329      	movs	r3, #41	; 0x29
   1a23e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1a240:	2300      	movs	r3, #0
   1a242:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1a244:	3301      	adds	r3, #1
   1a246:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1a248:	3301      	adds	r3, #1
   1a24a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1a24c:	0021      	movs	r1, r4
   1a24e:	2009      	movs	r0, #9
   1a250:	4b08      	ldr	r3, [pc, #32]	; (1a274 <nm_bsp_register_isr+0x48>)
   1a252:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1a254:	2200      	movs	r2, #0
   1a256:	2109      	movs	r1, #9
   1a258:	4807      	ldr	r0, [pc, #28]	; (1a278 <nm_bsp_register_isr+0x4c>)
   1a25a:	4b08      	ldr	r3, [pc, #32]	; (1a27c <nm_bsp_register_isr+0x50>)
   1a25c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a25e:	2100      	movs	r1, #0
   1a260:	2009      	movs	r0, #9
   1a262:	4b07      	ldr	r3, [pc, #28]	; (1a280 <nm_bsp_register_isr+0x54>)
   1a264:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1a266:	b004      	add	sp, #16
   1a268:	bd10      	pop	{r4, pc}
   1a26a:	46c0      	nop			; (mov r8, r8)
   1a26c:	20003cdc 	.word	0x20003cdc
   1a270:	0001d785 	.word	0x0001d785
   1a274:	0001d799 	.word	0x0001d799
   1a278:	0001a171 	.word	0x0001a171
   1a27c:	0001d641 	.word	0x0001d641
   1a280:	0001d66d 	.word	0x0001d66d

0001a284 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1a284:	b510      	push	{r4, lr}
	if (u8Enable) {
   1a286:	2800      	cmp	r0, #0
   1a288:	d104      	bne.n	1a294 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1a28a:	2100      	movs	r1, #0
   1a28c:	2009      	movs	r0, #9
   1a28e:	4b04      	ldr	r3, [pc, #16]	; (1a2a0 <nm_bsp_interrupt_ctrl+0x1c>)
   1a290:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1a292:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a294:	2100      	movs	r1, #0
   1a296:	2009      	movs	r0, #9
   1a298:	4b02      	ldr	r3, [pc, #8]	; (1a2a4 <nm_bsp_interrupt_ctrl+0x20>)
   1a29a:	4798      	blx	r3
   1a29c:	e7f9      	b.n	1a292 <nm_bsp_interrupt_ctrl+0xe>
   1a29e:	46c0      	nop			; (mov r8, r8)
   1a2a0:	0001d68d 	.word	0x0001d68d
   1a2a4:	0001d66d 	.word	0x0001d66d

0001a2a8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1a2a8:	b530      	push	{r4, r5, lr}
   1a2aa:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
   1a2ac:	4c30      	ldr	r4, [pc, #192]	; (1a370 <nm_bus_init+0xc8>)
   1a2ae:	230e      	movs	r3, #14
   1a2b0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
   1a2b2:	2300      	movs	r3, #0
   1a2b4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   1a2b6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1a2b8:	a901      	add	r1, sp, #4
   1a2ba:	2201      	movs	r2, #1
   1a2bc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   1a2be:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1a2c0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1a2c2:	200e      	movs	r0, #14
   1a2c4:	4b2b      	ldr	r3, [pc, #172]	; (1a374 <nm_bus_init+0xcc>)
   1a2c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1a2c8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
   1a2ca:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1a2cc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1a2ce:	2900      	cmp	r1, #0
   1a2d0:	d104      	bne.n	1a2dc <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
   1a2d2:	0953      	lsrs	r3, r2, #5
   1a2d4:	01db      	lsls	r3, r3, #7
   1a2d6:	4928      	ldr	r1, [pc, #160]	; (1a378 <nm_bus_init+0xd0>)
   1a2d8:	468c      	mov	ip, r1
   1a2da:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a2dc:	211f      	movs	r1, #31
   1a2de:	4011      	ands	r1, r2
   1a2e0:	2201      	movs	r2, #1
   1a2e2:	0010      	movs	r0, r2
   1a2e4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
   1a2e6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
   1a2e8:	ac02      	add	r4, sp, #8
   1a2ea:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1a2ec:	2300      	movs	r3, #0
   1a2ee:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1a2f0:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1a2f2:	21c0      	movs	r1, #192	; 0xc0
   1a2f4:	0389      	lsls	r1, r1, #14
   1a2f6:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1a2f8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   1a2fa:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   1a2fc:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
   1a2fe:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
   1a300:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1a302:	3223      	adds	r2, #35	; 0x23
   1a304:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1a306:	3a18      	subs	r2, #24
   1a308:	2100      	movs	r1, #0
   1a30a:	a808      	add	r0, sp, #32
   1a30c:	4b1b      	ldr	r3, [pc, #108]	; (1a37c <nm_bus_init+0xd4>)
   1a30e:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1a310:	4b1b      	ldr	r3, [pc, #108]	; (1a380 <nm_bus_init+0xd8>)
   1a312:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1a314:	4b1b      	ldr	r3, [pc, #108]	; (1a384 <nm_bus_init+0xdc>)
   1a316:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1a318:	2301      	movs	r3, #1
   1a31a:	425b      	negs	r3, r3
   1a31c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1a31e:	4b1a      	ldr	r3, [pc, #104]	; (1a388 <nm_bus_init+0xe0>)
   1a320:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1a322:	4b1a      	ldr	r3, [pc, #104]	; (1a38c <nm_bus_init+0xe4>)
   1a324:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1a326:	0022      	movs	r2, r4
   1a328:	4919      	ldr	r1, [pc, #100]	; (1a390 <nm_bus_init+0xe8>)
   1a32a:	481a      	ldr	r0, [pc, #104]	; (1a394 <nm_bus_init+0xec>)
   1a32c:	4b1a      	ldr	r3, [pc, #104]	; (1a398 <nm_bus_init+0xf0>)
   1a32e:	4798      	blx	r3
   1a330:	2800      	cmp	r0, #0
   1a332:	d11a      	bne.n	1a36a <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a334:	4d17      	ldr	r5, [pc, #92]	; (1a394 <nm_bus_init+0xec>)
   1a336:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1a338:	0020      	movs	r0, r4
   1a33a:	4b18      	ldr	r3, [pc, #96]	; (1a39c <nm_bus_init+0xf4>)
   1a33c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a33e:	231f      	movs	r3, #31
   1a340:	4018      	ands	r0, r3
   1a342:	3b1e      	subs	r3, #30
   1a344:	4083      	lsls	r3, r0
   1a346:	4a16      	ldr	r2, [pc, #88]	; (1a3a0 <nm_bus_init+0xf8>)
   1a348:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a34a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a34c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a34e:	2b00      	cmp	r3, #0
   1a350:	d1fc      	bne.n	1a34c <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1a352:	6823      	ldr	r3, [r4, #0]
   1a354:	2202      	movs	r2, #2
   1a356:	4313      	orrs	r3, r2
   1a358:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
   1a35a:	4b12      	ldr	r3, [pc, #72]	; (1a3a4 <nm_bus_init+0xfc>)
   1a35c:	4798      	blx	r3
	nm_bsp_sleep(1);
   1a35e:	2001      	movs	r0, #1
   1a360:	4b11      	ldr	r3, [pc, #68]	; (1a3a8 <nm_bus_init+0x100>)
   1a362:	4798      	blx	r3
#endif
	return result;
   1a364:	2000      	movs	r0, #0
}
   1a366:	b011      	add	sp, #68	; 0x44
   1a368:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
   1a36a:	2006      	movs	r0, #6
   1a36c:	4240      	negs	r0, r0
   1a36e:	e7fa      	b.n	1a366 <nm_bus_init+0xbe>
   1a370:	2000544c 	.word	0x2000544c
   1a374:	0001d811 	.word	0x0001d811
   1a378:	41004400 	.word	0x41004400
   1a37c:	00026253 	.word	0x00026253
   1a380:	000c0002 	.word	0x000c0002
   1a384:	000d0002 	.word	0x000d0002
   1a388:	000f0002 	.word	0x000f0002
   1a38c:	00124f80 	.word	0x00124f80
   1a390:	42001000 	.word	0x42001000
   1a394:	20005450 	.word	0x20005450
   1a398:	0001df6d 	.word	0x0001df6d
   1a39c:	0001de25 	.word	0x0001de25
   1a3a0:	e000e100 	.word	0xe000e100
   1a3a4:	0001a1f9 	.word	0x0001a1f9
   1a3a8:	0001a221 	.word	0x0001a221

0001a3ac <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1a3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3ae:	46de      	mov	lr, fp
   1a3b0:	4657      	mov	r7, sl
   1a3b2:	464e      	mov	r6, r9
   1a3b4:	4645      	mov	r5, r8
   1a3b6:	b5e0      	push	{r5, r6, r7, lr}
   1a3b8:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
   1a3ba:	2803      	cmp	r0, #3
   1a3bc:	d000      	beq.n	1a3c0 <nm_bus_ioctl+0x14>
   1a3be:	e075      	b.n	1a4ac <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1a3c0:	680e      	ldr	r6, [r1, #0]
   1a3c2:	684d      	ldr	r5, [r1, #4]
   1a3c4:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
   1a3c6:	22ff      	movs	r2, #255	; 0xff
   1a3c8:	466b      	mov	r3, sp
   1a3ca:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a3cc:	2d00      	cmp	r5, #0
   1a3ce:	d027      	beq.n	1a420 <nm_bus_ioctl+0x74>
   1a3d0:	2c00      	cmp	r4, #0
   1a3d2:	d065      	beq.n	1a4a0 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
   1a3d4:	2e00      	cmp	r6, #0
   1a3d6:	d100      	bne.n	1a3da <nm_bus_ioctl+0x2e>
   1a3d8:	e075      	b.n	1a4c6 <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a3da:	2300      	movs	r3, #0
   1a3dc:	4698      	mov	r8, r3
   1a3de:	2300      	movs	r3, #0
   1a3e0:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
   1a3e2:	2201      	movs	r2, #1
   1a3e4:	493a      	ldr	r1, [pc, #232]	; (1a4d0 <nm_bus_ioctl+0x124>)
   1a3e6:	483b      	ldr	r0, [pc, #236]	; (1a4d4 <nm_bus_ioctl+0x128>)
   1a3e8:	4b3b      	ldr	r3, [pc, #236]	; (1a4d8 <nm_bus_ioctl+0x12c>)
   1a3ea:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1a3ec:	4b39      	ldr	r3, [pc, #228]	; (1a4d4 <nm_bus_ioctl+0x128>)
   1a3ee:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
   1a3f0:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
   1a3f2:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a3f4:	4699      	mov	r9, r3
			pu8Miso++;
   1a3f6:	4659      	mov	r1, fp
   1a3f8:	424b      	negs	r3, r1
   1a3fa:	4159      	adcs	r1, r3
   1a3fc:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
   1a3fe:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a400:	4653      	mov	r3, sl
   1a402:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1a404:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
   1a406:	4239      	tst	r1, r7
   1a408:	d0fc      	beq.n	1a404 <nm_bus_ioctl+0x58>
   1a40a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1a40c:	4239      	tst	r1, r7
   1a40e:	d0fc      	beq.n	1a40a <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1a410:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a412:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
   1a414:	4211      	tst	r1, r2
   1a416:	d0fc      	beq.n	1a412 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a418:	4649      	mov	r1, r9
   1a41a:	7989      	ldrb	r1, [r1, #6]
   1a41c:	468c      	mov	ip, r1
   1a41e:	e011      	b.n	1a444 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a420:	2e00      	cmp	r6, #0
   1a422:	d03a      	beq.n	1a49a <nm_bus_ioctl+0xee>
   1a424:	2c00      	cmp	r4, #0
   1a426:	d03e      	beq.n	1a4a6 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a428:	2300      	movs	r3, #0
   1a42a:	4698      	mov	r8, r3
		u8SkipMiso = 1;
   1a42c:	3301      	adds	r3, #1
   1a42e:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
   1a430:	466b      	mov	r3, sp
   1a432:	1ddd      	adds	r5, r3, #7
   1a434:	e7d5      	b.n	1a3e2 <nm_bus_ioctl+0x36>
   1a436:	4660      	mov	r0, ip
   1a438:	2801      	cmp	r0, #1
   1a43a:	d00d      	beq.n	1a458 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1a43c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a43e:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1a440:	2900      	cmp	r1, #0
   1a442:	d00d      	beq.n	1a460 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a444:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   1a446:	4211      	tst	r1, r2
   1a448:	d0fc      	beq.n	1a444 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a44a:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
   1a44c:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a44e:	4210      	tst	r0, r2
   1a450:	d0f1      	beq.n	1a436 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1a452:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   1a454:	311e      	adds	r1, #30
   1a456:	e7ee      	b.n	1a436 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1a458:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a45a:	05c0      	lsls	r0, r0, #23
   1a45c:	0dc0      	lsrs	r0, r0, #23
   1a45e:	e7ef      	b.n	1a440 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
   1a460:	7028      	strb	r0, [r5, #0]
		u16Sz--;
   1a462:	3c01      	subs	r4, #1
   1a464:	b2a4      	uxth	r4, r4
			pu8Miso++;
   1a466:	445d      	add	r5, fp
			pu8Mosi++;
   1a468:	4643      	mov	r3, r8
   1a46a:	4259      	negs	r1, r3
   1a46c:	414b      	adcs	r3, r1
   1a46e:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
   1a470:	2c00      	cmp	r4, #0
   1a472:	d1c4      	bne.n	1a3fe <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a474:	4b17      	ldr	r3, [pc, #92]	; (1a4d4 <nm_bus_ioctl+0x128>)
   1a476:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
   1a478:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1a47a:	7e0b      	ldrb	r3, [r1, #24]
   1a47c:	4213      	tst	r3, r2
   1a47e:	d0fc      	beq.n	1a47a <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
   1a480:	2200      	movs	r2, #0
   1a482:	4913      	ldr	r1, [pc, #76]	; (1a4d0 <nm_bus_ioctl+0x124>)
   1a484:	4813      	ldr	r0, [pc, #76]	; (1a4d4 <nm_bus_ioctl+0x128>)
   1a486:	4b14      	ldr	r3, [pc, #80]	; (1a4d8 <nm_bus_ioctl+0x12c>)
   1a488:	4798      	blx	r3
	return M2M_SUCCESS;
   1a48a:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
   1a48c:	b003      	add	sp, #12
   1a48e:	bc3c      	pop	{r2, r3, r4, r5}
   1a490:	4690      	mov	r8, r2
   1a492:	4699      	mov	r9, r3
   1a494:	46a2      	mov	sl, r4
   1a496:	46ab      	mov	fp, r5
   1a498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
   1a49a:	200f      	movs	r0, #15
   1a49c:	4240      	negs	r0, r0
   1a49e:	e7f5      	b.n	1a48c <nm_bus_ioctl+0xe0>
   1a4a0:	200f      	movs	r0, #15
   1a4a2:	4240      	negs	r0, r0
   1a4a4:	e7f2      	b.n	1a48c <nm_bus_ioctl+0xe0>
   1a4a6:	200f      	movs	r0, #15
   1a4a8:	4240      	negs	r0, r0
		break;
   1a4aa:	e7ef      	b.n	1a48c <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
   1a4ac:	2283      	movs	r2, #131	; 0x83
   1a4ae:	0052      	lsls	r2, r2, #1
   1a4b0:	490a      	ldr	r1, [pc, #40]	; (1a4dc <nm_bus_ioctl+0x130>)
   1a4b2:	480b      	ldr	r0, [pc, #44]	; (1a4e0 <nm_bus_ioctl+0x134>)
   1a4b4:	4c0b      	ldr	r4, [pc, #44]	; (1a4e4 <nm_bus_ioctl+0x138>)
   1a4b6:	47a0      	blx	r4
   1a4b8:	480b      	ldr	r0, [pc, #44]	; (1a4e8 <nm_bus_ioctl+0x13c>)
   1a4ba:	47a0      	blx	r4
   1a4bc:	480b      	ldr	r0, [pc, #44]	; (1a4ec <nm_bus_ioctl+0x140>)
   1a4be:	47a0      	blx	r4
			s8Ret = -1;
   1a4c0:	2001      	movs	r0, #1
   1a4c2:	4240      	negs	r0, r0
	return s8Ret;
   1a4c4:	e7e2      	b.n	1a48c <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
   1a4c6:	2301      	movs	r3, #1
   1a4c8:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
   1a4ca:	466b      	mov	r3, sp
   1a4cc:	1dde      	adds	r6, r3, #7
   1a4ce:	e786      	b.n	1a3de <nm_bus_ioctl+0x32>
   1a4d0:	2000544c 	.word	0x2000544c
   1a4d4:	20005450 	.word	0x20005450
   1a4d8:	0001e219 	.word	0x0001e219
   1a4dc:	00029538 	.word	0x00029538
   1a4e0:	00029548 	.word	0x00029548
   1a4e4:	0001905d 	.word	0x0001905d
   1a4e8:	0002955c 	.word	0x0002955c
   1a4ec:	00029570 	.word	0x00029570

0001a4f0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1a4f0:	b530      	push	{r4, r5, lr}
   1a4f2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
   1a4f4:	ab01      	add	r3, sp, #4
   1a4f6:	2200      	movs	r2, #0
   1a4f8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
   1a4fa:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1a4fc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a4fe:	4d13      	ldr	r5, [pc, #76]	; (1a54c <nm_bus_deinit+0x5c>)
   1a500:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1a502:	0020      	movs	r0, r4
   1a504:	4b12      	ldr	r3, [pc, #72]	; (1a550 <nm_bus_deinit+0x60>)
   1a506:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a508:	231f      	movs	r3, #31
   1a50a:	4018      	ands	r0, r3
   1a50c:	3b1e      	subs	r3, #30
   1a50e:	4083      	lsls	r3, r0
   1a510:	2280      	movs	r2, #128	; 0x80
   1a512:	4910      	ldr	r1, [pc, #64]	; (1a554 <nm_bus_deinit+0x64>)
   1a514:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a516:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a518:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a51a:	2b00      	cmp	r3, #0
   1a51c:	d1fc      	bne.n	1a518 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1a51e:	338f      	adds	r3, #143	; 0x8f
   1a520:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1a522:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1a524:	6823      	ldr	r3, [r4, #0]
   1a526:	2202      	movs	r2, #2
   1a528:	4393      	bics	r3, r2
   1a52a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1a52c:	a901      	add	r1, sp, #4
   1a52e:	200c      	movs	r0, #12
   1a530:	4c09      	ldr	r4, [pc, #36]	; (1a558 <nm_bus_deinit+0x68>)
   1a532:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1a534:	a901      	add	r1, sp, #4
   1a536:	200f      	movs	r0, #15
   1a538:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1a53a:	a901      	add	r1, sp, #4
   1a53c:	200d      	movs	r0, #13
   1a53e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1a540:	a901      	add	r1, sp, #4
   1a542:	200e      	movs	r0, #14
   1a544:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
   1a546:	2000      	movs	r0, #0
   1a548:	b003      	add	sp, #12
   1a54a:	bd30      	pop	{r4, r5, pc}
   1a54c:	20005450 	.word	0x20005450
   1a550:	0001de25 	.word	0x0001de25
   1a554:	e000e100 	.word	0xe000e100
   1a558:	0001d811 	.word	0x0001d811

0001a55c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
   1a55c:	2a00      	cmp	r2, #0
   1a55e:	d006      	beq.n	1a56e <m2m_memcpy+0x12>
   1a560:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
   1a562:	780b      	ldrb	r3, [r1, #0]
   1a564:	7003      	strb	r3, [r0, #0]
		pDst++;
   1a566:	3001      	adds	r0, #1
		pSrc++;
   1a568:	3101      	adds	r1, #1
	}while(--sz);
   1a56a:	4290      	cmp	r0, r2
   1a56c:	d1f9      	bne.n	1a562 <m2m_memcpy+0x6>
}
   1a56e:	4770      	bx	lr

0001a570 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
   1a570:	2a00      	cmp	r2, #0
   1a572:	d004      	beq.n	1a57e <m2m_memset+0xe>
   1a574:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
   1a576:	7001      	strb	r1, [r0, #0]
		pBuf++;
   1a578:	3001      	adds	r0, #1
	}while(--sz);
   1a57a:	4290      	cmp	r0, r2
   1a57c:	d1fb      	bne.n	1a576 <m2m_memset+0x6>
}
   1a57e:	4770      	bx	lr

0001a580 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1a580:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
   1a582:	7802      	ldrb	r2, [r0, #0]
   1a584:	2a00      	cmp	r2, #0
   1a586:	d007      	beq.n	1a598 <m2m_strlen+0x18>
   1a588:	2000      	movs	r0, #0
	{
		u16StrLen ++;
   1a58a:	3001      	adds	r0, #1
   1a58c:	b280      	uxth	r0, r0
		pcStr++;
   1a58e:	3301      	adds	r3, #1
	while(*pcStr)
   1a590:	781a      	ldrb	r2, [r3, #0]
   1a592:	2a00      	cmp	r2, #0
   1a594:	d1f9      	bne.n	1a58a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
   1a596:	4770      	bx	lr
	uint16	u16StrLen = 0;
   1a598:	2000      	movs	r0, #0
   1a59a:	e7fc      	b.n	1a596 <m2m_strlen+0x16>

0001a59c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
   1a59c:	4a02      	ldr	r2, [pc, #8]	; (1a5a8 <isr+0xc>)
   1a59e:	78d3      	ldrb	r3, [r2, #3]
   1a5a0:	3301      	adds	r3, #1
   1a5a2:	b2db      	uxtb	r3, r3
   1a5a4:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1a5a6:	4770      	bx	lr
   1a5a8:	2000548c 	.word	0x2000548c

0001a5ac <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
   1a5ac:	4770      	bx	lr
	...

0001a5b0 <hif_set_rx_done>:
{
   1a5b0:	b500      	push	{lr}
   1a5b2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
   1a5b4:	2200      	movs	r2, #0
   1a5b6:	4b0a      	ldr	r3, [pc, #40]	; (1a5e0 <hif_set_rx_done+0x30>)
   1a5b8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
   1a5ba:	2001      	movs	r0, #1
   1a5bc:	4b09      	ldr	r3, [pc, #36]	; (1a5e4 <hif_set_rx_done+0x34>)
   1a5be:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1a5c0:	a901      	add	r1, sp, #4
   1a5c2:	4809      	ldr	r0, [pc, #36]	; (1a5e8 <hif_set_rx_done+0x38>)
   1a5c4:	4b09      	ldr	r3, [pc, #36]	; (1a5ec <hif_set_rx_done+0x3c>)
   1a5c6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1a5c8:	2800      	cmp	r0, #0
   1a5ca:	d001      	beq.n	1a5d0 <hif_set_rx_done+0x20>
}
   1a5cc:	b003      	add	sp, #12
   1a5ce:	bd00      	pop	{pc}
	reg |= NBIT1;
   1a5d0:	2102      	movs	r1, #2
   1a5d2:	9b01      	ldr	r3, [sp, #4]
   1a5d4:	4319      	orrs	r1, r3
   1a5d6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1a5d8:	4803      	ldr	r0, [pc, #12]	; (1a5e8 <hif_set_rx_done+0x38>)
   1a5da:	4b05      	ldr	r3, [pc, #20]	; (1a5f0 <hif_set_rx_done+0x40>)
   1a5dc:	4798      	blx	r3
   1a5de:	e7f5      	b.n	1a5cc <hif_set_rx_done+0x1c>
   1a5e0:	2000548c 	.word	0x2000548c
   1a5e4:	0001a285 	.word	0x0001a285
   1a5e8:	00001070 	.word	0x00001070
   1a5ec:	0001b92d 	.word	0x0001b92d
   1a5f0:	0001b939 	.word	0x0001b939

0001a5f4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1a5f4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
   1a5f6:	4b0c      	ldr	r3, [pc, #48]	; (1a628 <hif_chip_wake+0x34>)
   1a5f8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1a5fa:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
   1a5fc:	2b00      	cmp	r3, #0
   1a5fe:	d10d      	bne.n	1a61c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1a600:	4b09      	ldr	r3, [pc, #36]	; (1a628 <hif_chip_wake+0x34>)
   1a602:	785b      	ldrb	r3, [r3, #1]
   1a604:	2b00      	cmp	r3, #0
   1a606:	d103      	bne.n	1a610 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a608:	4b07      	ldr	r3, [pc, #28]	; (1a628 <hif_chip_wake+0x34>)
   1a60a:	781b      	ldrb	r3, [r3, #0]
   1a60c:	2b00      	cmp	r3, #0
   1a60e:	d106      	bne.n	1a61e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1a610:	4a05      	ldr	r2, [pc, #20]	; (1a628 <hif_chip_wake+0x34>)
   1a612:	7853      	ldrb	r3, [r2, #1]
   1a614:	3301      	adds	r3, #1
   1a616:	b2db      	uxtb	r3, r3
   1a618:	7053      	strb	r3, [r2, #1]
   1a61a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
   1a61c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
   1a61e:	4b03      	ldr	r3, [pc, #12]	; (1a62c <hif_chip_wake+0x38>)
   1a620:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
   1a622:	2800      	cmp	r0, #0
   1a624:	d0f4      	beq.n	1a610 <hif_chip_wake+0x1c>
   1a626:	e7f9      	b.n	1a61c <hif_chip_wake+0x28>
   1a628:	2000548c 	.word	0x2000548c
   1a62c:	0001b62d 	.word	0x0001b62d

0001a630 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
   1a630:	4b05      	ldr	r3, [pc, #20]	; (1a648 <hif_chip_sleep_sc+0x18>)
   1a632:	785b      	ldrb	r3, [r3, #1]
   1a634:	2b00      	cmp	r3, #0
   1a636:	d004      	beq.n	1a642 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
   1a638:	4a03      	ldr	r2, [pc, #12]	; (1a648 <hif_chip_sleep_sc+0x18>)
   1a63a:	7853      	ldrb	r3, [r2, #1]
   1a63c:	3b01      	subs	r3, #1
   1a63e:	b2db      	uxtb	r3, r3
   1a640:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
   1a642:	2000      	movs	r0, #0
   1a644:	4770      	bx	lr
   1a646:	46c0      	nop			; (mov r8, r8)
   1a648:	2000548c 	.word	0x2000548c

0001a64c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1a64c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
   1a64e:	4b0b      	ldr	r3, [pc, #44]	; (1a67c <hif_chip_sleep+0x30>)
   1a650:	785b      	ldrb	r3, [r3, #1]
   1a652:	2b00      	cmp	r3, #0
   1a654:	d004      	beq.n	1a660 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
   1a656:	4a09      	ldr	r2, [pc, #36]	; (1a67c <hif_chip_sleep+0x30>)
   1a658:	7853      	ldrb	r3, [r2, #1]
   1a65a:	3b01      	subs	r3, #1
   1a65c:	b2db      	uxtb	r3, r3
   1a65e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1a660:	4b06      	ldr	r3, [pc, #24]	; (1a67c <hif_chip_sleep+0x30>)
   1a662:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
   1a664:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
   1a666:	2b00      	cmp	r3, #0
   1a668:	d103      	bne.n	1a672 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a66a:	4b04      	ldr	r3, [pc, #16]	; (1a67c <hif_chip_sleep+0x30>)
   1a66c:	781b      	ldrb	r3, [r3, #0]
   1a66e:	2b00      	cmp	r3, #0
   1a670:	d100      	bne.n	1a674 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
   1a672:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
   1a674:	4b02      	ldr	r3, [pc, #8]	; (1a680 <hif_chip_sleep+0x34>)
   1a676:	4798      	blx	r3
   1a678:	e7fb      	b.n	1a672 <hif_chip_sleep+0x26>
   1a67a:	46c0      	nop			; (mov r8, r8)
   1a67c:	2000548c 	.word	0x2000548c
   1a680:	0001b5c5 	.word	0x0001b5c5

0001a684 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1a684:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a686:	46de      	mov	lr, fp
   1a688:	4657      	mov	r7, sl
   1a68a:	b580      	push	{r7, lr}
   1a68c:	b089      	sub	sp, #36	; 0x24
   1a68e:	4683      	mov	fp, r0
   1a690:	468a      	mov	sl, r1
   1a692:	9201      	str	r2, [sp, #4]
   1a694:	9300      	str	r3, [sp, #0]
   1a696:	ab10      	add	r3, sp, #64	; 0x40
   1a698:	cb80      	ldmia	r3!, {r7}
   1a69a:	881e      	ldrh	r6, [r3, #0]
   1a69c:	ab12      	add	r3, sp, #72	; 0x48
   1a69e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1a6a0:	227f      	movs	r2, #127	; 0x7f
   1a6a2:	400a      	ands	r2, r1
   1a6a4:	ab07      	add	r3, sp, #28
   1a6a6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1a6a8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1a6aa:	2208      	movs	r2, #8
   1a6ac:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1a6ae:	2f00      	cmp	r7, #0
   1a6b0:	d03d      	beq.n	1a72e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1a6b2:	885a      	ldrh	r2, [r3, #2]
   1a6b4:	1992      	adds	r2, r2, r6
   1a6b6:	18aa      	adds	r2, r5, r2
   1a6b8:	b292      	uxth	r2, r2
   1a6ba:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
   1a6bc:	4b68      	ldr	r3, [pc, #416]	; (1a860 <hif_send+0x1dc>)
   1a6be:	4798      	blx	r3
   1a6c0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
   1a6c2:	d000      	beq.n	1a6c6 <hif_send+0x42>
   1a6c4:	e0c0      	b.n	1a848 <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
   1a6c6:	2300      	movs	r3, #0
   1a6c8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
   1a6ca:	aa02      	add	r2, sp, #8
   1a6cc:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1a6ce:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
   1a6d0:	9b04      	ldr	r3, [sp, #16]
   1a6d2:	465a      	mov	r2, fp
   1a6d4:	431a      	orrs	r2, r3
   1a6d6:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
   1a6d8:	9a04      	ldr	r2, [sp, #16]
   1a6da:	4653      	mov	r3, sl
   1a6dc:	021b      	lsls	r3, r3, #8
   1a6de:	4313      	orrs	r3, r2
   1a6e0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
   1a6e2:	ab07      	add	r3, sp, #28
   1a6e4:	885b      	ldrh	r3, [r3, #2]
   1a6e6:	9a04      	ldr	r2, [sp, #16]
   1a6e8:	041b      	lsls	r3, r3, #16
   1a6ea:	4313      	orrs	r3, r2
   1a6ec:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1a6ee:	9904      	ldr	r1, [sp, #16]
   1a6f0:	485c      	ldr	r0, [pc, #368]	; (1a864 <hif_send+0x1e0>)
   1a6f2:	4b5d      	ldr	r3, [pc, #372]	; (1a868 <hif_send+0x1e4>)
   1a6f4:	4798      	blx	r3
   1a6f6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a6f8:	d156      	bne.n	1a7a8 <hif_send+0x124>

		reg = 0UL;
   1a6fa:	2300      	movs	r3, #0
   1a6fc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
   1a6fe:	9b04      	ldr	r3, [sp, #16]
   1a700:	2202      	movs	r2, #2
   1a702:	4313      	orrs	r3, r2
   1a704:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1a706:	9904      	ldr	r1, [sp, #16]
   1a708:	4858      	ldr	r0, [pc, #352]	; (1a86c <hif_send+0x1e8>)
   1a70a:	4b57      	ldr	r3, [pc, #348]	; (1a868 <hif_send+0x1e4>)
   1a70c:	4798      	blx	r3
   1a70e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a710:	d14a      	bne.n	1a7a8 <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1a712:	2200      	movs	r2, #0
   1a714:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1a716:	ab02      	add	r3, sp, #8
   1a718:	80da      	strh	r2, [r3, #6]
   1a71a:	3306      	adds	r3, #6
   1a71c:	881b      	ldrh	r3, [r3, #0]
   1a71e:	b29b      	uxth	r3, r3
   1a720:	4a53      	ldr	r2, [pc, #332]	; (1a870 <hif_send+0x1ec>)
   1a722:	4293      	cmp	r3, r2
   1a724:	d848      	bhi.n	1a7b8 <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a726:	4c53      	ldr	r4, [pc, #332]	; (1a874 <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
   1a728:	4b53      	ldr	r3, [pc, #332]	; (1a878 <hif_send+0x1f4>)
   1a72a:	469a      	mov	sl, r3
   1a72c:	e017      	b.n	1a75e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
   1a72e:	ab07      	add	r3, sp, #28
   1a730:	885a      	ldrh	r2, [r3, #2]
   1a732:	9900      	ldr	r1, [sp, #0]
   1a734:	468c      	mov	ip, r1
   1a736:	4462      	add	r2, ip
   1a738:	b292      	uxth	r2, r2
   1a73a:	805a      	strh	r2, [r3, #2]
   1a73c:	e7be      	b.n	1a6bc <hif_send+0x38>
				nm_bsp_sleep(1);
   1a73e:	2001      	movs	r0, #1
   1a740:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
   1a742:	9b04      	ldr	r3, [sp, #16]
   1a744:	079b      	lsls	r3, r3, #30
   1a746:	d527      	bpl.n	1a798 <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
   1a748:	ab02      	add	r3, sp, #8
   1a74a:	88da      	ldrh	r2, [r3, #6]
   1a74c:	3201      	adds	r2, #1
   1a74e:	b292      	uxth	r2, r2
   1a750:	80da      	strh	r2, [r3, #6]
   1a752:	3306      	adds	r3, #6
   1a754:	881b      	ldrh	r3, [r3, #0]
   1a756:	b29b      	uxth	r3, r3
   1a758:	4a45      	ldr	r2, [pc, #276]	; (1a870 <hif_send+0x1ec>)
   1a75a:	4293      	cmp	r3, r2
   1a75c:	d82c      	bhi.n	1a7b8 <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a75e:	a904      	add	r1, sp, #16
   1a760:	4842      	ldr	r0, [pc, #264]	; (1a86c <hif_send+0x1e8>)
   1a762:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
   1a764:	2800      	cmp	r0, #0
   1a766:	d127      	bne.n	1a7b8 <hif_send+0x134>
			if(cnt >= 500) {
   1a768:	ab02      	add	r3, sp, #8
   1a76a:	3306      	adds	r3, #6
   1a76c:	881b      	ldrh	r3, [r3, #0]
   1a76e:	b29b      	uxth	r3, r3
   1a770:	22f4      	movs	r2, #244	; 0xf4
   1a772:	32ff      	adds	r2, #255	; 0xff
   1a774:	4293      	cmp	r3, r2
   1a776:	d9e4      	bls.n	1a742 <hif_send+0xbe>
				if(cnt < 501) {
   1a778:	ab02      	add	r3, sp, #8
   1a77a:	3306      	adds	r3, #6
   1a77c:	881b      	ldrh	r3, [r3, #0]
   1a77e:	b29b      	uxth	r3, r3
   1a780:	3201      	adds	r2, #1
   1a782:	4293      	cmp	r3, r2
   1a784:	d8db      	bhi.n	1a73e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
   1a786:	483d      	ldr	r0, [pc, #244]	; (1a87c <hif_send+0x1f8>)
   1a788:	4b3d      	ldr	r3, [pc, #244]	; (1a880 <hif_send+0x1fc>)
   1a78a:	469b      	mov	fp, r3
   1a78c:	4798      	blx	r3
   1a78e:	483d      	ldr	r0, [pc, #244]	; (1a884 <hif_send+0x200>)
   1a790:	47d8      	blx	fp
   1a792:	483d      	ldr	r0, [pc, #244]	; (1a888 <hif_send+0x204>)
   1a794:	47d8      	blx	fp
   1a796:	e7d2      	b.n	1a73e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1a798:	a905      	add	r1, sp, #20
   1a79a:	483c      	ldr	r0, [pc, #240]	; (1a88c <hif_send+0x208>)
   1a79c:	4b35      	ldr	r3, [pc, #212]	; (1a874 <hif_send+0x1f0>)
   1a79e:	4798      	blx	r3
   1a7a0:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
   1a7a2:	d009      	beq.n	1a7b8 <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1a7a4:	2300      	movs	r3, #0
   1a7a6:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1a7a8:	4b39      	ldr	r3, [pc, #228]	; (1a890 <hif_send+0x20c>)
   1a7aa:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
   1a7ac:	0020      	movs	r0, r4
   1a7ae:	b009      	add	sp, #36	; 0x24
   1a7b0:	bc0c      	pop	{r2, r3}
   1a7b2:	4692      	mov	sl, r2
   1a7b4:	469b      	mov	fp, r3
   1a7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
   1a7b8:	9b05      	ldr	r3, [sp, #20]
   1a7ba:	2b00      	cmp	r3, #0
   1a7bc:	d03f      	beq.n	1a83e <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
   1a7be:	9b05      	ldr	r3, [sp, #20]
   1a7c0:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1a7c2:	a907      	add	r1, sp, #28
   1a7c4:	884b      	ldrh	r3, [r1, #2]
   1a7c6:	b29b      	uxth	r3, r3
   1a7c8:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1a7ca:	9806      	ldr	r0, [sp, #24]
   1a7cc:	2208      	movs	r2, #8
   1a7ce:	4b31      	ldr	r3, [pc, #196]	; (1a894 <hif_send+0x210>)
   1a7d0:	4798      	blx	r3
   1a7d2:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a7d4:	d1e8      	bne.n	1a7a8 <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1a7d6:	9b06      	ldr	r3, [sp, #24]
   1a7d8:	3308      	adds	r3, #8
   1a7da:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
   1a7dc:	9b01      	ldr	r3, [sp, #4]
   1a7de:	2b00      	cmp	r3, #0
   1a7e0:	d00b      	beq.n	1a7fa <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1a7e2:	9806      	ldr	r0, [sp, #24]
   1a7e4:	9a00      	ldr	r2, [sp, #0]
   1a7e6:	0019      	movs	r1, r3
   1a7e8:	4b2a      	ldr	r3, [pc, #168]	; (1a894 <hif_send+0x210>)
   1a7ea:	4798      	blx	r3
   1a7ec:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a7ee:	d1db      	bne.n	1a7a8 <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
   1a7f0:	9b06      	ldr	r3, [sp, #24]
   1a7f2:	9a00      	ldr	r2, [sp, #0]
   1a7f4:	4694      	mov	ip, r2
   1a7f6:	4463      	add	r3, ip
   1a7f8:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
   1a7fa:	2f00      	cmp	r7, #0
   1a7fc:	d00e      	beq.n	1a81c <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1a7fe:	9b06      	ldr	r3, [sp, #24]
   1a800:	9a00      	ldr	r2, [sp, #0]
   1a802:	1aad      	subs	r5, r5, r2
   1a804:	18ed      	adds	r5, r5, r3
   1a806:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1a808:	9806      	ldr	r0, [sp, #24]
   1a80a:	0032      	movs	r2, r6
   1a80c:	0039      	movs	r1, r7
   1a80e:	4b21      	ldr	r3, [pc, #132]	; (1a894 <hif_send+0x210>)
   1a810:	4798      	blx	r3
   1a812:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a814:	d1c8      	bne.n	1a7a8 <hif_send+0x124>
				u32CurrAddr += u16DataSize;
   1a816:	9b06      	ldr	r3, [sp, #24]
   1a818:	18f3      	adds	r3, r6, r3
   1a81a:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
   1a81c:	9b05      	ldr	r3, [sp, #20]
   1a81e:	009b      	lsls	r3, r3, #2
   1a820:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
   1a822:	9b04      	ldr	r3, [sp, #16]
   1a824:	2202      	movs	r2, #2
   1a826:	4313      	orrs	r3, r2
   1a828:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1a82a:	9904      	ldr	r1, [sp, #16]
   1a82c:	481a      	ldr	r0, [pc, #104]	; (1a898 <hif_send+0x214>)
   1a82e:	4b0e      	ldr	r3, [pc, #56]	; (1a868 <hif_send+0x1e4>)
   1a830:	4798      	blx	r3
   1a832:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a834:	d1b8      	bne.n	1a7a8 <hif_send+0x124>
 	ret = hif_chip_sleep();
   1a836:	4b19      	ldr	r3, [pc, #100]	; (1a89c <hif_send+0x218>)
   1a838:	4798      	blx	r3
   1a83a:	0004      	movs	r4, r0
	return ret;
   1a83c:	e7b6      	b.n	1a7ac <hif_send+0x128>
			ret = hif_chip_sleep();
   1a83e:	4b17      	ldr	r3, [pc, #92]	; (1a89c <hif_send+0x218>)
   1a840:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
   1a842:	2403      	movs	r4, #3
   1a844:	4264      	negs	r4, r4
			goto ERR2;
   1a846:	e7b1      	b.n	1a7ac <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1a848:	2298      	movs	r2, #152	; 0x98
   1a84a:	32ff      	adds	r2, #255	; 0xff
   1a84c:	4914      	ldr	r1, [pc, #80]	; (1a8a0 <hif_send+0x21c>)
   1a84e:	4815      	ldr	r0, [pc, #84]	; (1a8a4 <hif_send+0x220>)
   1a850:	4d0b      	ldr	r5, [pc, #44]	; (1a880 <hif_send+0x1fc>)
   1a852:	47a8      	blx	r5
   1a854:	4814      	ldr	r0, [pc, #80]	; (1a8a8 <hif_send+0x224>)
   1a856:	47a8      	blx	r5
   1a858:	480b      	ldr	r0, [pc, #44]	; (1a888 <hif_send+0x204>)
   1a85a:	47a8      	blx	r5
		goto ERR2;
   1a85c:	e7a6      	b.n	1a7ac <hif_send+0x128>
   1a85e:	46c0      	nop			; (mov r8, r8)
   1a860:	0001a5f5 	.word	0x0001a5f5
   1a864:	0000108c 	.word	0x0000108c
   1a868:	0001b939 	.word	0x0001b939
   1a86c:	00001078 	.word	0x00001078
   1a870:	000003e7 	.word	0x000003e7
   1a874:	0001b92d 	.word	0x0001b92d
   1a878:	0001a221 	.word	0x0001a221
   1a87c:	00029884 	.word	0x00029884
   1a880:	0001905d 	.word	0x0001905d
   1a884:	00029890 	.word	0x00029890
   1a888:	00029570 	.word	0x00029570
   1a88c:	00150400 	.word	0x00150400
   1a890:	0001a631 	.word	0x0001a631
   1a894:	0001b9ad 	.word	0x0001b9ad
   1a898:	0000106c 	.word	0x0000106c
   1a89c:	0001a64d 	.word	0x0001a64d
   1a8a0:	00029594 	.word	0x00029594
   1a8a4:	00029548 	.word	0x00029548
   1a8a8:	000298a4 	.word	0x000298a4

0001a8ac <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8ae:	46ce      	mov	lr, r9
   1a8b0:	4647      	mov	r7, r8
   1a8b2:	b580      	push	{r7, lr}
   1a8b4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
   1a8b6:	2200      	movs	r2, #0
   1a8b8:	4bc8      	ldr	r3, [pc, #800]	; (1abdc <hif_handle_isr+0x330>)
   1a8ba:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a8bc:	4699      	mov	r9, r3
   1a8be:	4698      	mov	r8, r3
   1a8c0:	e07c      	b.n	1a9bc <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
   1a8c2:	4bc6      	ldr	r3, [pc, #792]	; (1abdc <hif_handle_isr+0x330>)
   1a8c4:	9a05      	ldr	r2, [sp, #20]
   1a8c6:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1a8c8:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1a8ca:	ad04      	add	r5, sp, #16
   1a8cc:	2204      	movs	r2, #4
   1a8ce:	0029      	movs	r1, r5
   1a8d0:	9805      	ldr	r0, [sp, #20]
   1a8d2:	4bc3      	ldr	r3, [pc, #780]	; (1abe0 <hif_handle_isr+0x334>)
   1a8d4:	4798      	blx	r3
   1a8d6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1a8d8:	886b      	ldrh	r3, [r5, #2]
   1a8da:	b29b      	uxth	r3, r3
   1a8dc:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
   1a8de:	2800      	cmp	r0, #0
   1a8e0:	d132      	bne.n	1a948 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
   1a8e2:	ab04      	add	r3, sp, #16
   1a8e4:	885b      	ldrh	r3, [r3, #2]
   1a8e6:	b29b      	uxth	r3, r3
   1a8e8:	429f      	cmp	r7, r3
   1a8ea:	d004      	beq.n	1a8f6 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
   1a8ec:	ab04      	add	r3, sp, #16
   1a8ee:	885b      	ldrh	r3, [r3, #2]
   1a8f0:	1afb      	subs	r3, r7, r3
   1a8f2:	2b04      	cmp	r3, #4
   1a8f4:	dc36      	bgt.n	1a964 <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1a8f6:	ab04      	add	r3, sp, #16
   1a8f8:	781b      	ldrb	r3, [r3, #0]
   1a8fa:	2b01      	cmp	r3, #1
   1a8fc:	d04a      	beq.n	1a994 <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1a8fe:	ab04      	add	r3, sp, #16
   1a900:	781b      	ldrb	r3, [r3, #0]
   1a902:	2b02      	cmp	r3, #2
   1a904:	d076      	beq.n	1a9f4 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1a906:	ab04      	add	r3, sp, #16
   1a908:	781b      	ldrb	r3, [r3, #0]
   1a90a:	2b04      	cmp	r3, #4
   1a90c:	d100      	bne.n	1a910 <hif_handle_isr+0x64>
   1a90e:	e08c      	b.n	1aa2a <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1a910:	ab04      	add	r3, sp, #16
   1a912:	781b      	ldrb	r3, [r3, #0]
   1a914:	2b06      	cmp	r3, #6
   1a916:	d100      	bne.n	1a91a <hif_handle_isr+0x6e>
   1a918:	e0a2      	b.n	1aa60 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1a91a:	ab04      	add	r3, sp, #16
   1a91c:	781b      	ldrb	r3, [r3, #0]
   1a91e:	2b07      	cmp	r3, #7
   1a920:	d100      	bne.n	1a924 <hif_handle_isr+0x78>
   1a922:	e0b8      	b.n	1aa96 <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1a924:	ab04      	add	r3, sp, #16
   1a926:	781b      	ldrb	r3, [r3, #0]
   1a928:	2b05      	cmp	r3, #5
   1a92a:	d100      	bne.n	1a92e <hif_handle_isr+0x82>
   1a92c:	e0cd      	b.n	1aaca <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
   1a92e:	2284      	movs	r2, #132	; 0x84
   1a930:	0092      	lsls	r2, r2, #2
   1a932:	49ac      	ldr	r1, [pc, #688]	; (1abe4 <hif_handle_isr+0x338>)
   1a934:	48ac      	ldr	r0, [pc, #688]	; (1abe8 <hif_handle_isr+0x33c>)
   1a936:	4cad      	ldr	r4, [pc, #692]	; (1abec <hif_handle_isr+0x340>)
   1a938:	47a0      	blx	r4
   1a93a:	48ad      	ldr	r0, [pc, #692]	; (1abf0 <hif_handle_isr+0x344>)
   1a93c:	47a0      	blx	r4
   1a93e:	48ad      	ldr	r0, [pc, #692]	; (1abf4 <hif_handle_isr+0x348>)
   1a940:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
   1a942:	2406      	movs	r4, #6
   1a944:	4264      	negs	r4, r4
   1a946:	e106      	b.n	1ab56 <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
   1a948:	22e9      	movs	r2, #233	; 0xe9
   1a94a:	0052      	lsls	r2, r2, #1
   1a94c:	49a5      	ldr	r1, [pc, #660]	; (1abe4 <hif_handle_isr+0x338>)
   1a94e:	48a6      	ldr	r0, [pc, #664]	; (1abe8 <hif_handle_isr+0x33c>)
   1a950:	4da6      	ldr	r5, [pc, #664]	; (1abec <hif_handle_isr+0x340>)
   1a952:	47a8      	blx	r5
   1a954:	48a8      	ldr	r0, [pc, #672]	; (1abf8 <hif_handle_isr+0x34c>)
   1a956:	47a8      	blx	r5
   1a958:	48a6      	ldr	r0, [pc, #664]	; (1abf4 <hif_handle_isr+0x348>)
   1a95a:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1a95c:	2001      	movs	r0, #1
   1a95e:	4ba7      	ldr	r3, [pc, #668]	; (1abfc <hif_handle_isr+0x350>)
   1a960:	4798      	blx	r3
   1a962:	e0f8      	b.n	1ab56 <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1a964:	22dc      	movs	r2, #220	; 0xdc
   1a966:	32ff      	adds	r2, #255	; 0xff
   1a968:	499e      	ldr	r1, [pc, #632]	; (1abe4 <hif_handle_isr+0x338>)
   1a96a:	489f      	ldr	r0, [pc, #636]	; (1abe8 <hif_handle_isr+0x33c>)
   1a96c:	4c9f      	ldr	r4, [pc, #636]	; (1abec <hif_handle_isr+0x340>)
   1a96e:	47a0      	blx	r4
   1a970:	a904      	add	r1, sp, #16
   1a972:	884a      	ldrh	r2, [r1, #2]
   1a974:	b292      	uxth	r2, r2
   1a976:	780b      	ldrb	r3, [r1, #0]
   1a978:	b2db      	uxtb	r3, r3
   1a97a:	7849      	ldrb	r1, [r1, #1]
   1a97c:	9100      	str	r1, [sp, #0]
   1a97e:	0039      	movs	r1, r7
   1a980:	489f      	ldr	r0, [pc, #636]	; (1ac00 <hif_handle_isr+0x354>)
   1a982:	47a0      	blx	r4
   1a984:	489b      	ldr	r0, [pc, #620]	; (1abf4 <hif_handle_isr+0x348>)
   1a986:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
   1a988:	2001      	movs	r0, #1
   1a98a:	4b9c      	ldr	r3, [pc, #624]	; (1abfc <hif_handle_isr+0x350>)
   1a98c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1a98e:	2406      	movs	r4, #6
   1a990:	4264      	negs	r4, r4
   1a992:	e0e0      	b.n	1ab56 <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
   1a994:	4b91      	ldr	r3, [pc, #580]	; (1abdc <hif_handle_isr+0x330>)
   1a996:	691b      	ldr	r3, [r3, #16]
   1a998:	2b00      	cmp	r3, #0
   1a99a:	d020      	beq.n	1a9de <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a99c:	4b8f      	ldr	r3, [pc, #572]	; (1abdc <hif_handle_isr+0x330>)
   1a99e:	691b      	ldr	r3, [r3, #16]
   1a9a0:	aa04      	add	r2, sp, #16
   1a9a2:	7850      	ldrb	r0, [r2, #1]
   1a9a4:	b2c0      	uxtb	r0, r0
   1a9a6:	8851      	ldrh	r1, [r2, #2]
   1a9a8:	9a05      	ldr	r2, [sp, #20]
   1a9aa:	3208      	adds	r2, #8
   1a9ac:	3908      	subs	r1, #8
   1a9ae:	b289      	uxth	r1, r1
   1a9b0:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
   1a9b2:	4b8a      	ldr	r3, [pc, #552]	; (1abdc <hif_handle_isr+0x330>)
   1a9b4:	789b      	ldrb	r3, [r3, #2]
   1a9b6:	2b00      	cmp	r3, #0
   1a9b8:	d000      	beq.n	1a9bc <hif_handle_isr+0x110>
   1a9ba:	e097      	b.n	1aaec <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a9bc:	464b      	mov	r3, r9
   1a9be:	78db      	ldrb	r3, [r3, #3]
   1a9c0:	2b00      	cmp	r3, #0
   1a9c2:	d100      	bne.n	1a9c6 <hif_handle_isr+0x11a>
   1a9c4:	e103      	b.n	1abce <hif_handle_isr+0x322>
   1a9c6:	4643      	mov	r3, r8
   1a9c8:	791b      	ldrb	r3, [r3, #4]
   1a9ca:	2b00      	cmp	r3, #0
   1a9cc:	d000      	beq.n	1a9d0 <hif_handle_isr+0x124>
   1a9ce:	e0fe      	b.n	1abce <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1a9d0:	4a82      	ldr	r2, [pc, #520]	; (1abdc <hif_handle_isr+0x330>)
   1a9d2:	78d3      	ldrb	r3, [r2, #3]
   1a9d4:	3b01      	subs	r3, #1
   1a9d6:	b2db      	uxtb	r3, r3
   1a9d8:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1a9da:	4e8a      	ldr	r6, [pc, #552]	; (1ac04 <hif_handle_isr+0x358>)
   1a9dc:	e0c5      	b.n	1ab6a <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
   1a9de:	22e8      	movs	r2, #232	; 0xe8
   1a9e0:	32ff      	adds	r2, #255	; 0xff
   1a9e2:	4980      	ldr	r1, [pc, #512]	; (1abe4 <hif_handle_isr+0x338>)
   1a9e4:	4880      	ldr	r0, [pc, #512]	; (1abe8 <hif_handle_isr+0x33c>)
   1a9e6:	4c81      	ldr	r4, [pc, #516]	; (1abec <hif_handle_isr+0x340>)
   1a9e8:	47a0      	blx	r4
   1a9ea:	4887      	ldr	r0, [pc, #540]	; (1ac08 <hif_handle_isr+0x35c>)
   1a9ec:	47a0      	blx	r4
   1a9ee:	4881      	ldr	r0, [pc, #516]	; (1abf4 <hif_handle_isr+0x348>)
   1a9f0:	47a0      	blx	r4
   1a9f2:	e7de      	b.n	1a9b2 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
   1a9f4:	4b79      	ldr	r3, [pc, #484]	; (1abdc <hif_handle_isr+0x330>)
   1a9f6:	695b      	ldr	r3, [r3, #20]
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d00b      	beq.n	1aa14 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a9fc:	4b77      	ldr	r3, [pc, #476]	; (1abdc <hif_handle_isr+0x330>)
   1a9fe:	695b      	ldr	r3, [r3, #20]
   1aa00:	aa04      	add	r2, sp, #16
   1aa02:	7850      	ldrb	r0, [r2, #1]
   1aa04:	b2c0      	uxtb	r0, r0
   1aa06:	8851      	ldrh	r1, [r2, #2]
   1aa08:	9a05      	ldr	r2, [sp, #20]
   1aa0a:	3208      	adds	r2, #8
   1aa0c:	3908      	subs	r1, #8
   1aa0e:	b289      	uxth	r1, r1
   1aa10:	4798      	blx	r3
   1aa12:	e7ce      	b.n	1a9b2 <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
   1aa14:	22f0      	movs	r2, #240	; 0xf0
   1aa16:	32ff      	adds	r2, #255	; 0xff
   1aa18:	4972      	ldr	r1, [pc, #456]	; (1abe4 <hif_handle_isr+0x338>)
   1aa1a:	4873      	ldr	r0, [pc, #460]	; (1abe8 <hif_handle_isr+0x33c>)
   1aa1c:	4c73      	ldr	r4, [pc, #460]	; (1abec <hif_handle_isr+0x340>)
   1aa1e:	47a0      	blx	r4
   1aa20:	487a      	ldr	r0, [pc, #488]	; (1ac0c <hif_handle_isr+0x360>)
   1aa22:	47a0      	blx	r4
   1aa24:	4873      	ldr	r0, [pc, #460]	; (1abf4 <hif_handle_isr+0x348>)
   1aa26:	47a0      	blx	r4
   1aa28:	e7c3      	b.n	1a9b2 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
   1aa2a:	4b6c      	ldr	r3, [pc, #432]	; (1abdc <hif_handle_isr+0x330>)
   1aa2c:	699b      	ldr	r3, [r3, #24]
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	d00b      	beq.n	1aa4a <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa32:	4b6a      	ldr	r3, [pc, #424]	; (1abdc <hif_handle_isr+0x330>)
   1aa34:	699b      	ldr	r3, [r3, #24]
   1aa36:	aa04      	add	r2, sp, #16
   1aa38:	7850      	ldrb	r0, [r2, #1]
   1aa3a:	b2c0      	uxtb	r0, r0
   1aa3c:	8851      	ldrh	r1, [r2, #2]
   1aa3e:	9a05      	ldr	r2, [sp, #20]
   1aa40:	3208      	adds	r2, #8
   1aa42:	3908      	subs	r1, #8
   1aa44:	b289      	uxth	r1, r1
   1aa46:	4798      	blx	r3
   1aa48:	e7b3      	b.n	1a9b2 <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
   1aa4a:	22f8      	movs	r2, #248	; 0xf8
   1aa4c:	32ff      	adds	r2, #255	; 0xff
   1aa4e:	4965      	ldr	r1, [pc, #404]	; (1abe4 <hif_handle_isr+0x338>)
   1aa50:	4865      	ldr	r0, [pc, #404]	; (1abe8 <hif_handle_isr+0x33c>)
   1aa52:	4c66      	ldr	r4, [pc, #408]	; (1abec <hif_handle_isr+0x340>)
   1aa54:	47a0      	blx	r4
   1aa56:	486e      	ldr	r0, [pc, #440]	; (1ac10 <hif_handle_isr+0x364>)
   1aa58:	47a0      	blx	r4
   1aa5a:	4866      	ldr	r0, [pc, #408]	; (1abf4 <hif_handle_isr+0x348>)
   1aa5c:	47a0      	blx	r4
   1aa5e:	e7a8      	b.n	1a9b2 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
   1aa60:	4b5e      	ldr	r3, [pc, #376]	; (1abdc <hif_handle_isr+0x330>)
   1aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa64:	2b00      	cmp	r3, #0
   1aa66:	d00b      	beq.n	1aa80 <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa68:	4b5c      	ldr	r3, [pc, #368]	; (1abdc <hif_handle_isr+0x330>)
   1aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa6c:	aa04      	add	r2, sp, #16
   1aa6e:	7850      	ldrb	r0, [r2, #1]
   1aa70:	b2c0      	uxtb	r0, r0
   1aa72:	8851      	ldrh	r1, [r2, #2]
   1aa74:	9a05      	ldr	r2, [sp, #20]
   1aa76:	3208      	adds	r2, #8
   1aa78:	3908      	subs	r1, #8
   1aa7a:	b289      	uxth	r1, r1
   1aa7c:	4798      	blx	r3
   1aa7e:	e798      	b.n	1a9b2 <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
   1aa80:	2280      	movs	r2, #128	; 0x80
   1aa82:	0092      	lsls	r2, r2, #2
   1aa84:	4957      	ldr	r1, [pc, #348]	; (1abe4 <hif_handle_isr+0x338>)
   1aa86:	4858      	ldr	r0, [pc, #352]	; (1abe8 <hif_handle_isr+0x33c>)
   1aa88:	4c58      	ldr	r4, [pc, #352]	; (1abec <hif_handle_isr+0x340>)
   1aa8a:	47a0      	blx	r4
   1aa8c:	4861      	ldr	r0, [pc, #388]	; (1ac14 <hif_handle_isr+0x368>)
   1aa8e:	47a0      	blx	r4
   1aa90:	4858      	ldr	r0, [pc, #352]	; (1abf4 <hif_handle_isr+0x348>)
   1aa92:	47a0      	blx	r4
   1aa94:	e78d      	b.n	1a9b2 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
   1aa96:	4b51      	ldr	r3, [pc, #324]	; (1abdc <hif_handle_isr+0x330>)
   1aa98:	69db      	ldr	r3, [r3, #28]
   1aa9a:	2b00      	cmp	r3, #0
   1aa9c:	d00b      	beq.n	1aab6 <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa9e:	4b4f      	ldr	r3, [pc, #316]	; (1abdc <hif_handle_isr+0x330>)
   1aaa0:	69db      	ldr	r3, [r3, #28]
   1aaa2:	aa04      	add	r2, sp, #16
   1aaa4:	7850      	ldrb	r0, [r2, #1]
   1aaa6:	b2c0      	uxtb	r0, r0
   1aaa8:	8851      	ldrh	r1, [r2, #2]
   1aaaa:	9a05      	ldr	r2, [sp, #20]
   1aaac:	3208      	adds	r2, #8
   1aaae:	3908      	subs	r1, #8
   1aab0:	b289      	uxth	r1, r1
   1aab2:	4798      	blx	r3
   1aab4:	e77d      	b.n	1a9b2 <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
   1aab6:	4a58      	ldr	r2, [pc, #352]	; (1ac18 <hif_handle_isr+0x36c>)
   1aab8:	494a      	ldr	r1, [pc, #296]	; (1abe4 <hif_handle_isr+0x338>)
   1aaba:	484b      	ldr	r0, [pc, #300]	; (1abe8 <hif_handle_isr+0x33c>)
   1aabc:	4c4b      	ldr	r4, [pc, #300]	; (1abec <hif_handle_isr+0x340>)
   1aabe:	47a0      	blx	r4
   1aac0:	4856      	ldr	r0, [pc, #344]	; (1ac1c <hif_handle_isr+0x370>)
   1aac2:	47a0      	blx	r4
   1aac4:	484b      	ldr	r0, [pc, #300]	; (1abf4 <hif_handle_isr+0x348>)
   1aac6:	47a0      	blx	r4
   1aac8:	e773      	b.n	1a9b2 <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
   1aaca:	4b44      	ldr	r3, [pc, #272]	; (1abdc <hif_handle_isr+0x330>)
   1aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aace:	2b00      	cmp	r3, #0
   1aad0:	d100      	bne.n	1aad4 <hif_handle_isr+0x228>
   1aad2:	e76e      	b.n	1a9b2 <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aad4:	4b41      	ldr	r3, [pc, #260]	; (1abdc <hif_handle_isr+0x330>)
   1aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aad8:	aa04      	add	r2, sp, #16
   1aada:	7850      	ldrb	r0, [r2, #1]
   1aadc:	b2c0      	uxtb	r0, r0
   1aade:	8851      	ldrh	r1, [r2, #2]
   1aae0:	9a05      	ldr	r2, [sp, #20]
   1aae2:	3208      	adds	r2, #8
   1aae4:	3908      	subs	r1, #8
   1aae6:	b289      	uxth	r1, r1
   1aae8:	4798      	blx	r3
   1aaea:	e762      	b.n	1a9b2 <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1aaec:	4a4c      	ldr	r2, [pc, #304]	; (1ac20 <hif_handle_isr+0x374>)
   1aaee:	493d      	ldr	r1, [pc, #244]	; (1abe4 <hif_handle_isr+0x338>)
   1aaf0:	483d      	ldr	r0, [pc, #244]	; (1abe8 <hif_handle_isr+0x33c>)
   1aaf2:	4c3e      	ldr	r4, [pc, #248]	; (1abec <hif_handle_isr+0x340>)
   1aaf4:	47a0      	blx	r4
   1aaf6:	ab04      	add	r3, sp, #16
   1aaf8:	7819      	ldrb	r1, [r3, #0]
   1aafa:	b2c9      	uxtb	r1, r1
   1aafc:	785a      	ldrb	r2, [r3, #1]
   1aafe:	b2d2      	uxtb	r2, r2
   1ab00:	4848      	ldr	r0, [pc, #288]	; (1ac24 <hif_handle_isr+0x378>)
   1ab02:	47a0      	blx	r4
   1ab04:	483b      	ldr	r0, [pc, #236]	; (1abf4 <hif_handle_isr+0x348>)
   1ab06:	47a0      	blx	r4
					ret = hif_set_rx_done();
   1ab08:	4b47      	ldr	r3, [pc, #284]	; (1ac28 <hif_handle_isr+0x37c>)
   1ab0a:	4798      	blx	r3
   1ab0c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
   1ab0e:	d122      	bne.n	1ab56 <hif_handle_isr+0x2aa>
   1ab10:	e754      	b.n	1a9bc <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
   1ab12:	4a46      	ldr	r2, [pc, #280]	; (1ac2c <hif_handle_isr+0x380>)
   1ab14:	4933      	ldr	r1, [pc, #204]	; (1abe4 <hif_handle_isr+0x338>)
   1ab16:	4834      	ldr	r0, [pc, #208]	; (1abe8 <hif_handle_isr+0x33c>)
   1ab18:	4c34      	ldr	r4, [pc, #208]	; (1abec <hif_handle_isr+0x340>)
   1ab1a:	47a0      	blx	r4
   1ab1c:	4844      	ldr	r0, [pc, #272]	; (1ac30 <hif_handle_isr+0x384>)
   1ab1e:	47a0      	blx	r4
   1ab20:	4834      	ldr	r0, [pc, #208]	; (1abf4 <hif_handle_isr+0x348>)
   1ab22:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
   1ab24:	2402      	movs	r4, #2
   1ab26:	4264      	negs	r4, r4
   1ab28:	e015      	b.n	1ab56 <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
   1ab2a:	4a42      	ldr	r2, [pc, #264]	; (1ac34 <hif_handle_isr+0x388>)
   1ab2c:	492d      	ldr	r1, [pc, #180]	; (1abe4 <hif_handle_isr+0x338>)
   1ab2e:	482e      	ldr	r0, [pc, #184]	; (1abe8 <hif_handle_isr+0x33c>)
   1ab30:	4c2e      	ldr	r4, [pc, #184]	; (1abec <hif_handle_isr+0x340>)
   1ab32:	47a0      	blx	r4
   1ab34:	9903      	ldr	r1, [sp, #12]
   1ab36:	4840      	ldr	r0, [pc, #256]	; (1ac38 <hif_handle_isr+0x38c>)
   1ab38:	47a0      	blx	r4
   1ab3a:	482e      	ldr	r0, [pc, #184]	; (1abf4 <hif_handle_isr+0x348>)
   1ab3c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1ab3e:	240c      	movs	r4, #12
   1ab40:	4264      	negs	r4, r4
   1ab42:	e008      	b.n	1ab56 <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1ab44:	4a3d      	ldr	r2, [pc, #244]	; (1ac3c <hif_handle_isr+0x390>)
   1ab46:	4927      	ldr	r1, [pc, #156]	; (1abe4 <hif_handle_isr+0x338>)
   1ab48:	4827      	ldr	r0, [pc, #156]	; (1abe8 <hif_handle_isr+0x33c>)
   1ab4a:	4d28      	ldr	r5, [pc, #160]	; (1abec <hif_handle_isr+0x340>)
   1ab4c:	47a8      	blx	r5
   1ab4e:	483c      	ldr	r0, [pc, #240]	; (1ac40 <hif_handle_isr+0x394>)
   1ab50:	47a8      	blx	r5
   1ab52:	4828      	ldr	r0, [pc, #160]	; (1abf4 <hif_handle_isr+0x348>)
   1ab54:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1ab56:	4a3b      	ldr	r2, [pc, #236]	; (1ac44 <hif_handle_isr+0x398>)
   1ab58:	493b      	ldr	r1, [pc, #236]	; (1ac48 <hif_handle_isr+0x39c>)
   1ab5a:	4823      	ldr	r0, [pc, #140]	; (1abe8 <hif_handle_isr+0x33c>)
   1ab5c:	4d23      	ldr	r5, [pc, #140]	; (1abec <hif_handle_isr+0x340>)
   1ab5e:	47a8      	blx	r5
   1ab60:	0021      	movs	r1, r4
   1ab62:	483a      	ldr	r0, [pc, #232]	; (1ac4c <hif_handle_isr+0x3a0>)
   1ab64:	47a8      	blx	r5
   1ab66:	4823      	ldr	r0, [pc, #140]	; (1abf4 <hif_handle_isr+0x348>)
   1ab68:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1ab6a:	a903      	add	r1, sp, #12
   1ab6c:	4838      	ldr	r0, [pc, #224]	; (1ac50 <hif_handle_isr+0x3a4>)
   1ab6e:	47b0      	blx	r6
   1ab70:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
   1ab72:	d1e7      	bne.n	1ab44 <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
   1ab74:	9b03      	ldr	r3, [sp, #12]
   1ab76:	07db      	lsls	r3, r3, #31
   1ab78:	d5d7      	bpl.n	1ab2a <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
   1ab7a:	2000      	movs	r0, #0
   1ab7c:	4b1f      	ldr	r3, [pc, #124]	; (1abfc <hif_handle_isr+0x350>)
   1ab7e:	4798      	blx	r3
			reg &= ~NBIT0;
   1ab80:	2301      	movs	r3, #1
   1ab82:	9903      	ldr	r1, [sp, #12]
   1ab84:	4399      	bics	r1, r3
   1ab86:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1ab88:	4831      	ldr	r0, [pc, #196]	; (1ac50 <hif_handle_isr+0x3a4>)
   1ab8a:	4b32      	ldr	r3, [pc, #200]	; (1ac54 <hif_handle_isr+0x3a8>)
   1ab8c:	4798      	blx	r3
   1ab8e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
   1ab90:	d1e1      	bne.n	1ab56 <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
   1ab92:	2201      	movs	r2, #1
   1ab94:	4b11      	ldr	r3, [pc, #68]	; (1abdc <hif_handle_isr+0x330>)
   1ab96:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1ab98:	9b03      	ldr	r3, [sp, #12]
   1ab9a:	049f      	lsls	r7, r3, #18
   1ab9c:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
   1ab9e:	d0b8      	beq.n	1ab12 <hif_handle_isr+0x266>
				uint32 address = 0;
   1aba0:	2300      	movs	r3, #0
   1aba2:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1aba4:	a905      	add	r1, sp, #20
   1aba6:	482c      	ldr	r0, [pc, #176]	; (1ac58 <hif_handle_isr+0x3ac>)
   1aba8:	4b16      	ldr	r3, [pc, #88]	; (1ac04 <hif_handle_isr+0x358>)
   1abaa:	4798      	blx	r3
   1abac:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
   1abae:	d100      	bne.n	1abb2 <hif_handle_isr+0x306>
   1abb0:	e687      	b.n	1a8c2 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1abb2:	22e4      	movs	r2, #228	; 0xe4
   1abb4:	0052      	lsls	r2, r2, #1
   1abb6:	490b      	ldr	r1, [pc, #44]	; (1abe4 <hif_handle_isr+0x338>)
   1abb8:	480b      	ldr	r0, [pc, #44]	; (1abe8 <hif_handle_isr+0x33c>)
   1abba:	4d0c      	ldr	r5, [pc, #48]	; (1abec <hif_handle_isr+0x340>)
   1abbc:	47a8      	blx	r5
   1abbe:	4827      	ldr	r0, [pc, #156]	; (1ac5c <hif_handle_isr+0x3b0>)
   1abc0:	47a8      	blx	r5
   1abc2:	480c      	ldr	r0, [pc, #48]	; (1abf4 <hif_handle_isr+0x348>)
   1abc4:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1abc6:	2001      	movs	r0, #1
   1abc8:	4b0c      	ldr	r3, [pc, #48]	; (1abfc <hif_handle_isr+0x350>)
   1abca:	4798      	blx	r3
   1abcc:	e7c3      	b.n	1ab56 <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
   1abce:	2000      	movs	r0, #0
   1abd0:	b007      	add	sp, #28
   1abd2:	bc0c      	pop	{r2, r3}
   1abd4:	4690      	mov	r8, r2
   1abd6:	4699      	mov	r9, r3
   1abd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abda:	46c0      	nop			; (mov r8, r8)
   1abdc:	2000548c 	.word	0x2000548c
   1abe0:	0001b945 	.word	0x0001b945
   1abe4:	000295a0 	.word	0x000295a0
   1abe8:	00029548 	.word	0x00029548
   1abec:	0001905d 	.word	0x0001905d
   1abf0:	00029704 	.word	0x00029704
   1abf4:	00029570 	.word	0x00029570
   1abf8:	000295fc 	.word	0x000295fc
   1abfc:	0001a285 	.word	0x0001a285
   1ac00:	00029614 	.word	0x00029614
   1ac04:	0001b92d 	.word	0x0001b92d
   1ac08:	00029654 	.word	0x00029654
   1ac0c:	00029678 	.word	0x00029678
   1ac10:	0002969c 	.word	0x0002969c
   1ac14:	000296bc 	.word	0x000296bc
   1ac18:	00000207 	.word	0x00000207
   1ac1c:	000296e0 	.word	0x000296e0
   1ac20:	00000216 	.word	0x00000216
   1ac24:	0002971c 	.word	0x0002971c
   1ac28:	0001a5b1 	.word	0x0001a5b1
   1ac2c:	0000021d 	.word	0x0000021d
   1ac30:	00029748 	.word	0x00029748
   1ac34:	00000225 	.word	0x00000225
   1ac38:	0002975c 	.word	0x0002975c
   1ac3c:	0000022e 	.word	0x0000022e
   1ac40:	00029778 	.word	0x00029778
   1ac44:	00000257 	.word	0x00000257
   1ac48:	000295a8 	.word	0x000295a8
   1ac4c:	0002979c 	.word	0x0002979c
   1ac50:	00001070 	.word	0x00001070
   1ac54:	0001b939 	.word	0x0001b939
   1ac58:	00001084 	.word	0x00001084
   1ac5c:	000295d4 	.word	0x000295d4

0001ac60 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1ac60:	b570      	push	{r4, r5, r6, lr}
   1ac62:	0014      	movs	r4, r2
   1ac64:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1ac66:	2800      	cmp	r0, #0
   1ac68:	d003      	beq.n	1ac72 <hif_receive+0x12>
   1ac6a:	2900      	cmp	r1, #0
   1ac6c:	d001      	beq.n	1ac72 <hif_receive+0x12>
   1ac6e:	2a00      	cmp	r2, #0
   1ac70:	d111      	bne.n	1ac96 <hif_receive+0x36>
	{
		if(isDone)
   1ac72:	2d00      	cmp	r5, #0
   1ac74:	d002      	beq.n	1ac7c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1ac76:	4b25      	ldr	r3, [pc, #148]	; (1ad0c <hif_receive+0xac>)
   1ac78:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
   1ac7a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
   1ac7c:	229e      	movs	r2, #158	; 0x9e
   1ac7e:	0092      	lsls	r2, r2, #2
   1ac80:	4923      	ldr	r1, [pc, #140]	; (1ad10 <hif_receive+0xb0>)
   1ac82:	4824      	ldr	r0, [pc, #144]	; (1ad14 <hif_receive+0xb4>)
   1ac84:	4c24      	ldr	r4, [pc, #144]	; (1ad18 <hif_receive+0xb8>)
   1ac86:	47a0      	blx	r4
   1ac88:	4824      	ldr	r0, [pc, #144]	; (1ad1c <hif_receive+0xbc>)
   1ac8a:	47a0      	blx	r4
   1ac8c:	4824      	ldr	r0, [pc, #144]	; (1ad20 <hif_receive+0xc0>)
   1ac8e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1ac90:	200c      	movs	r0, #12
   1ac92:	4240      	negs	r0, r0
   1ac94:	e7f1      	b.n	1ac7a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
   1ac96:	4b23      	ldr	r3, [pc, #140]	; (1ad24 <hif_receive+0xc4>)
   1ac98:	68db      	ldr	r3, [r3, #12]
   1ac9a:	429a      	cmp	r2, r3
   1ac9c:	d81a      	bhi.n	1acd4 <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1ac9e:	4b21      	ldr	r3, [pc, #132]	; (1ad24 <hif_receive+0xc4>)
   1aca0:	689b      	ldr	r3, [r3, #8]
   1aca2:	4298      	cmp	r0, r3
   1aca4:	d326      	bcc.n	1acf4 <hif_receive+0x94>
   1aca6:	1886      	adds	r6, r0, r2
   1aca8:	4a1e      	ldr	r2, [pc, #120]	; (1ad24 <hif_receive+0xc4>)
   1acaa:	6893      	ldr	r3, [r2, #8]
   1acac:	68d2      	ldr	r2, [r2, #12]
   1acae:	189b      	adds	r3, r3, r2
   1acb0:	429e      	cmp	r6, r3
   1acb2:	d81f      	bhi.n	1acf4 <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1acb4:	0022      	movs	r2, r4
   1acb6:	4b1c      	ldr	r3, [pc, #112]	; (1ad28 <hif_receive+0xc8>)
   1acb8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1acba:	2800      	cmp	r0, #0
   1acbc:	d1dd      	bne.n	1ac7a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1acbe:	4a19      	ldr	r2, [pc, #100]	; (1ad24 <hif_receive+0xc4>)
   1acc0:	6893      	ldr	r3, [r2, #8]
   1acc2:	68d2      	ldr	r2, [r2, #12]
   1acc4:	189b      	adds	r3, r3, r2
   1acc6:	429e      	cmp	r6, r3
   1acc8:	d001      	beq.n	1acce <hif_receive+0x6e>
   1acca:	2d00      	cmp	r5, #0
   1accc:	d0d5      	beq.n	1ac7a <hif_receive+0x1a>
		ret = hif_set_rx_done();
   1acce:	4b0f      	ldr	r3, [pc, #60]	; (1ad0c <hif_receive+0xac>)
   1acd0:	4798      	blx	r3
   1acd2:	e7d2      	b.n	1ac7a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1acd4:	22a0      	movs	r2, #160	; 0xa0
   1acd6:	0092      	lsls	r2, r2, #2
   1acd8:	490d      	ldr	r1, [pc, #52]	; (1ad10 <hif_receive+0xb0>)
   1acda:	480e      	ldr	r0, [pc, #56]	; (1ad14 <hif_receive+0xb4>)
   1acdc:	4d0e      	ldr	r5, [pc, #56]	; (1ad18 <hif_receive+0xb8>)
   1acde:	47a8      	blx	r5
   1ace0:	4b10      	ldr	r3, [pc, #64]	; (1ad24 <hif_receive+0xc4>)
   1ace2:	68da      	ldr	r2, [r3, #12]
   1ace4:	0021      	movs	r1, r4
   1ace6:	4811      	ldr	r0, [pc, #68]	; (1ad2c <hif_receive+0xcc>)
   1ace8:	47a8      	blx	r5
   1acea:	480d      	ldr	r0, [pc, #52]	; (1ad20 <hif_receive+0xc0>)
   1acec:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
   1acee:	200c      	movs	r0, #12
   1acf0:	4240      	negs	r0, r0
		goto ERR1;
   1acf2:	e7c2      	b.n	1ac7a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1acf4:	4a0e      	ldr	r2, [pc, #56]	; (1ad30 <hif_receive+0xd0>)
   1acf6:	4906      	ldr	r1, [pc, #24]	; (1ad10 <hif_receive+0xb0>)
   1acf8:	4806      	ldr	r0, [pc, #24]	; (1ad14 <hif_receive+0xb4>)
   1acfa:	4c07      	ldr	r4, [pc, #28]	; (1ad18 <hif_receive+0xb8>)
   1acfc:	47a0      	blx	r4
   1acfe:	480d      	ldr	r0, [pc, #52]	; (1ad34 <hif_receive+0xd4>)
   1ad00:	47a0      	blx	r4
   1ad02:	4807      	ldr	r0, [pc, #28]	; (1ad20 <hif_receive+0xc0>)
   1ad04:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1ad06:	200c      	movs	r0, #12
   1ad08:	4240      	negs	r0, r0
		goto ERR1;
   1ad0a:	e7b6      	b.n	1ac7a <hif_receive+0x1a>
   1ad0c:	0001a5b1 	.word	0x0001a5b1
   1ad10:	000295b8 	.word	0x000295b8
   1ad14:	00029548 	.word	0x00029548
   1ad18:	0001905d 	.word	0x0001905d
   1ad1c:	000297cc 	.word	0x000297cc
   1ad20:	00029570 	.word	0x00029570
   1ad24:	2000548c 	.word	0x2000548c
   1ad28:	0001b945 	.word	0x0001b945
   1ad2c:	000297ec 	.word	0x000297ec
   1ad30:	00000286 	.word	0x00000286
   1ad34:	00029834 	.word	0x00029834

0001ad38 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1ad38:	b570      	push	{r4, r5, r6, lr}
   1ad3a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
   1ad3c:	2807      	cmp	r0, #7
   1ad3e:	d81f      	bhi.n	1ad80 <hif_register_cb+0x48>
   1ad40:	0083      	lsls	r3, r0, #2
   1ad42:	4a16      	ldr	r2, [pc, #88]	; (1ad9c <hif_register_cb+0x64>)
   1ad44:	58d3      	ldr	r3, [r2, r3]
   1ad46:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1ad48:	4b15      	ldr	r3, [pc, #84]	; (1ada0 <hif_register_cb+0x68>)
   1ad4a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
   1ad4c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
   1ad4e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
   1ad50:	4b13      	ldr	r3, [pc, #76]	; (1ada0 <hif_register_cb+0x68>)
   1ad52:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
   1ad54:	2000      	movs	r0, #0
			break;
   1ad56:	e7fa      	b.n	1ad4e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
   1ad58:	4b11      	ldr	r3, [pc, #68]	; (1ada0 <hif_register_cb+0x68>)
   1ad5a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
   1ad5c:	2000      	movs	r0, #0
			break;
   1ad5e:	e7f6      	b.n	1ad4e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
   1ad60:	4b0f      	ldr	r3, [pc, #60]	; (1ada0 <hif_register_cb+0x68>)
   1ad62:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
   1ad64:	2000      	movs	r0, #0
			break;
   1ad66:	e7f2      	b.n	1ad4e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
   1ad68:	4b0d      	ldr	r3, [pc, #52]	; (1ada0 <hif_register_cb+0x68>)
   1ad6a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
   1ad6c:	2000      	movs	r0, #0
			break;
   1ad6e:	e7ee      	b.n	1ad4e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
   1ad70:	4b0b      	ldr	r3, [pc, #44]	; (1ada0 <hif_register_cb+0x68>)
   1ad72:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
   1ad74:	2000      	movs	r0, #0
			break;
   1ad76:	e7ea      	b.n	1ad4e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
   1ad78:	4b09      	ldr	r3, [pc, #36]	; (1ada0 <hif_register_cb+0x68>)
   1ad7a:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
   1ad7c:	2000      	movs	r0, #0
			break;
   1ad7e:	e7e6      	b.n	1ad4e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
   1ad80:	4a08      	ldr	r2, [pc, #32]	; (1ada4 <hif_register_cb+0x6c>)
   1ad82:	4909      	ldr	r1, [pc, #36]	; (1ada8 <hif_register_cb+0x70>)
   1ad84:	4809      	ldr	r0, [pc, #36]	; (1adac <hif_register_cb+0x74>)
   1ad86:	4d0a      	ldr	r5, [pc, #40]	; (1adb0 <hif_register_cb+0x78>)
   1ad88:	47a8      	blx	r5
   1ad8a:	0021      	movs	r1, r4
   1ad8c:	4809      	ldr	r0, [pc, #36]	; (1adb4 <hif_register_cb+0x7c>)
   1ad8e:	47a8      	blx	r5
   1ad90:	4809      	ldr	r0, [pc, #36]	; (1adb8 <hif_register_cb+0x80>)
   1ad92:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
   1ad94:	200c      	movs	r0, #12
   1ad96:	4240      	negs	r0, r0
			break;
   1ad98:	e7d9      	b.n	1ad4e <hif_register_cb+0x16>
   1ad9a:	46c0      	nop			; (mov r8, r8)
   1ad9c:	00029574 	.word	0x00029574
   1ada0:	2000548c 	.word	0x2000548c
   1ada4:	000002be 	.word	0x000002be
   1ada8:	000295c4 	.word	0x000295c4
   1adac:	00029548 	.word	0x00029548
   1adb0:	0001905d 	.word	0x0001905d
   1adb4:	00029878 	.word	0x00029878
   1adb8:	00029570 	.word	0x00029570

0001adbc <hif_init>:
{
   1adbc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1adbe:	222c      	movs	r2, #44	; 0x2c
   1adc0:	2100      	movs	r1, #0
   1adc2:	4806      	ldr	r0, [pc, #24]	; (1addc <hif_init+0x20>)
   1adc4:	4b06      	ldr	r3, [pc, #24]	; (1ade0 <hif_init+0x24>)
   1adc6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1adc8:	4806      	ldr	r0, [pc, #24]	; (1ade4 <hif_init+0x28>)
   1adca:	4b07      	ldr	r3, [pc, #28]	; (1ade8 <hif_init+0x2c>)
   1adcc:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1adce:	4907      	ldr	r1, [pc, #28]	; (1adec <hif_init+0x30>)
   1add0:	2003      	movs	r0, #3
   1add2:	4b07      	ldr	r3, [pc, #28]	; (1adf0 <hif_init+0x34>)
   1add4:	4798      	blx	r3
}
   1add6:	2000      	movs	r0, #0
   1add8:	bd10      	pop	{r4, pc}
   1adda:	46c0      	nop			; (mov r8, r8)
   1addc:	2000548c 	.word	0x2000548c
   1ade0:	0001a571 	.word	0x0001a571
   1ade4:	0001a59d 	.word	0x0001a59d
   1ade8:	0001a22d 	.word	0x0001a22d
   1adec:	0001a5ad 	.word	0x0001a5ad
   1adf0:	0001ad39 	.word	0x0001ad39

0001adf4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1adf4:	b530      	push	{r4, r5, lr}
   1adf6:	b09f      	sub	sp, #124	; 0x7c
   1adf8:	0004      	movs	r4, r0
   1adfa:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1adfc:	282c      	cmp	r0, #44	; 0x2c
   1adfe:	d02e      	beq.n	1ae5e <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1ae00:	281b      	cmp	r0, #27
   1ae02:	d03c      	beq.n	1ae7e <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1ae04:	2806      	cmp	r0, #6
   1ae06:	d04a      	beq.n	1ae9e <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1ae08:	280e      	cmp	r0, #14
   1ae0a:	d026      	beq.n	1ae5a <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1ae0c:	2832      	cmp	r0, #50	; 0x32
   1ae0e:	d056      	beq.n	1aebe <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1ae10:	282f      	cmp	r0, #47	; 0x2f
   1ae12:	d064      	beq.n	1aede <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1ae14:	2834      	cmp	r0, #52	; 0x34
   1ae16:	d100      	bne.n	1ae1a <m2m_wifi_cb+0x26>
   1ae18:	e076      	b.n	1af08 <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1ae1a:	2811      	cmp	r0, #17
   1ae1c:	d100      	bne.n	1ae20 <m2m_wifi_cb+0x2c>
   1ae1e:	e094      	b.n	1af4a <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1ae20:	2813      	cmp	r0, #19
   1ae22:	d100      	bne.n	1ae26 <m2m_wifi_cb+0x32>
   1ae24:	e0aa      	b.n	1af7c <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1ae26:	2804      	cmp	r0, #4
   1ae28:	d100      	bne.n	1ae2c <m2m_wifi_cb+0x38>
   1ae2a:	e0b9      	b.n	1afa0 <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1ae2c:	2865      	cmp	r0, #101	; 0x65
   1ae2e:	d100      	bne.n	1ae32 <m2m_wifi_cb+0x3e>
   1ae30:	e0c8      	b.n	1afc4 <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1ae32:	2809      	cmp	r0, #9
   1ae34:	d100      	bne.n	1ae38 <m2m_wifi_cb+0x44>
   1ae36:	e0d7      	b.n	1afe8 <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1ae38:	282a      	cmp	r0, #42	; 0x2a
   1ae3a:	d100      	bne.n	1ae3e <m2m_wifi_cb+0x4a>
   1ae3c:	e0e6      	b.n	1b00c <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1ae3e:	2820      	cmp	r0, #32
   1ae40:	d100      	bne.n	1ae44 <m2m_wifi_cb+0x50>
   1ae42:	e0f5      	b.n	1b030 <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1ae44:	2224      	movs	r2, #36	; 0x24
   1ae46:	32ff      	adds	r2, #255	; 0xff
   1ae48:	4988      	ldr	r1, [pc, #544]	; (1b06c <m2m_wifi_cb+0x278>)
   1ae4a:	4889      	ldr	r0, [pc, #548]	; (1b070 <m2m_wifi_cb+0x27c>)
   1ae4c:	4d89      	ldr	r5, [pc, #548]	; (1b074 <m2m_wifi_cb+0x280>)
   1ae4e:	47a8      	blx	r5
   1ae50:	0021      	movs	r1, r4
   1ae52:	4889      	ldr	r0, [pc, #548]	; (1b078 <m2m_wifi_cb+0x284>)
   1ae54:	47a8      	blx	r5
   1ae56:	4889      	ldr	r0, [pc, #548]	; (1b07c <m2m_wifi_cb+0x288>)
   1ae58:	47a8      	blx	r5
	}
}
   1ae5a:	b01f      	add	sp, #124	; 0x7c
   1ae5c:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1ae5e:	2300      	movs	r3, #0
   1ae60:	2204      	movs	r2, #4
   1ae62:	a903      	add	r1, sp, #12
   1ae64:	0028      	movs	r0, r5
   1ae66:	4c86      	ldr	r4, [pc, #536]	; (1b080 <m2m_wifi_cb+0x28c>)
   1ae68:	47a0      	blx	r4
   1ae6a:	2800      	cmp	r0, #0
   1ae6c:	d1f5      	bne.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ae6e:	4b85      	ldr	r3, [pc, #532]	; (1b084 <m2m_wifi_cb+0x290>)
   1ae70:	681b      	ldr	r3, [r3, #0]
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d0f1      	beq.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1ae76:	a903      	add	r1, sp, #12
   1ae78:	302c      	adds	r0, #44	; 0x2c
   1ae7a:	4798      	blx	r3
   1ae7c:	e7ed      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1ae7e:	2300      	movs	r3, #0
   1ae80:	2208      	movs	r2, #8
   1ae82:	a903      	add	r1, sp, #12
   1ae84:	0028      	movs	r0, r5
   1ae86:	4c7e      	ldr	r4, [pc, #504]	; (1b080 <m2m_wifi_cb+0x28c>)
   1ae88:	47a0      	blx	r4
   1ae8a:	2800      	cmp	r0, #0
   1ae8c:	d1e5      	bne.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ae8e:	4b7d      	ldr	r3, [pc, #500]	; (1b084 <m2m_wifi_cb+0x290>)
   1ae90:	681b      	ldr	r3, [r3, #0]
   1ae92:	2b00      	cmp	r3, #0
   1ae94:	d0e1      	beq.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1ae96:	a903      	add	r1, sp, #12
   1ae98:	301b      	adds	r0, #27
   1ae9a:	4798      	blx	r3
   1ae9c:	e7dd      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1ae9e:	2301      	movs	r3, #1
   1aea0:	2230      	movs	r2, #48	; 0x30
   1aea2:	a903      	add	r1, sp, #12
   1aea4:	0028      	movs	r0, r5
   1aea6:	4c76      	ldr	r4, [pc, #472]	; (1b080 <m2m_wifi_cb+0x28c>)
   1aea8:	47a0      	blx	r4
   1aeaa:	2800      	cmp	r0, #0
   1aeac:	d1d5      	bne.n	1ae5a <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1aeae:	4b75      	ldr	r3, [pc, #468]	; (1b084 <m2m_wifi_cb+0x290>)
   1aeb0:	681b      	ldr	r3, [r3, #0]
   1aeb2:	2b00      	cmp	r3, #0
   1aeb4:	d0d1      	beq.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1aeb6:	a903      	add	r1, sp, #12
   1aeb8:	3006      	adds	r0, #6
   1aeba:	4798      	blx	r3
   1aebc:	e7cd      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1aebe:	2300      	movs	r3, #0
   1aec0:	2218      	movs	r2, #24
   1aec2:	a903      	add	r1, sp, #12
   1aec4:	0028      	movs	r0, r5
   1aec6:	4c6e      	ldr	r4, [pc, #440]	; (1b080 <m2m_wifi_cb+0x28c>)
   1aec8:	47a0      	blx	r4
   1aeca:	2800      	cmp	r0, #0
   1aecc:	d1c5      	bne.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aece:	4b6d      	ldr	r3, [pc, #436]	; (1b084 <m2m_wifi_cb+0x290>)
   1aed0:	681b      	ldr	r3, [r3, #0]
   1aed2:	2b00      	cmp	r3, #0
   1aed4:	d0c1      	beq.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1aed6:	a903      	add	r1, sp, #12
   1aed8:	3032      	adds	r0, #50	; 0x32
   1aeda:	4798      	blx	r3
   1aedc:	e7bd      	b.n	1ae5a <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1aede:	2264      	movs	r2, #100	; 0x64
   1aee0:	2100      	movs	r1, #0
   1aee2:	a803      	add	r0, sp, #12
   1aee4:	4b68      	ldr	r3, [pc, #416]	; (1b088 <m2m_wifi_cb+0x294>)
   1aee6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1aee8:	2300      	movs	r3, #0
   1aeea:	2264      	movs	r2, #100	; 0x64
   1aeec:	a903      	add	r1, sp, #12
   1aeee:	0028      	movs	r0, r5
   1aef0:	4c63      	ldr	r4, [pc, #396]	; (1b080 <m2m_wifi_cb+0x28c>)
   1aef2:	47a0      	blx	r4
   1aef4:	2800      	cmp	r0, #0
   1aef6:	d1b0      	bne.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aef8:	4b62      	ldr	r3, [pc, #392]	; (1b084 <m2m_wifi_cb+0x290>)
   1aefa:	681b      	ldr	r3, [r3, #0]
   1aefc:	2b00      	cmp	r3, #0
   1aefe:	d0ac      	beq.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1af00:	a903      	add	r1, sp, #12
   1af02:	302f      	adds	r0, #47	; 0x2f
   1af04:	4798      	blx	r3
   1af06:	e7a8      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1af08:	2300      	movs	r3, #0
   1af0a:	2204      	movs	r2, #4
   1af0c:	a903      	add	r1, sp, #12
   1af0e:	0028      	movs	r0, r5
   1af10:	4c5b      	ldr	r4, [pc, #364]	; (1b080 <m2m_wifi_cb+0x28c>)
   1af12:	47a0      	blx	r4
   1af14:	2800      	cmp	r0, #0
   1af16:	d1a0      	bne.n	1ae5a <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1af18:	485c      	ldr	r0, [pc, #368]	; (1b08c <m2m_wifi_cb+0x298>)
   1af1a:	4d56      	ldr	r5, [pc, #344]	; (1b074 <m2m_wifi_cb+0x280>)
   1af1c:	47a8      	blx	r5
   1af1e:	9c03      	ldr	r4, [sp, #12]
   1af20:	0a23      	lsrs	r3, r4, #8
   1af22:	20ff      	movs	r0, #255	; 0xff
   1af24:	4003      	ands	r3, r0
   1af26:	0c22      	lsrs	r2, r4, #16
   1af28:	4002      	ands	r2, r0
   1af2a:	0e21      	lsrs	r1, r4, #24
   1af2c:	4020      	ands	r0, r4
   1af2e:	9000      	str	r0, [sp, #0]
   1af30:	4857      	ldr	r0, [pc, #348]	; (1b090 <m2m_wifi_cb+0x29c>)
   1af32:	47a8      	blx	r5
   1af34:	4851      	ldr	r0, [pc, #324]	; (1b07c <m2m_wifi_cb+0x288>)
   1af36:	47a8      	blx	r5
			if (gpfAppWifiCb)
   1af38:	4b52      	ldr	r3, [pc, #328]	; (1b084 <m2m_wifi_cb+0x290>)
   1af3a:	681b      	ldr	r3, [r3, #0]
   1af3c:	2b00      	cmp	r3, #0
   1af3e:	d100      	bne.n	1af42 <m2m_wifi_cb+0x14e>
   1af40:	e78b      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1af42:	2100      	movs	r1, #0
   1af44:	2034      	movs	r0, #52	; 0x34
   1af46:	4798      	blx	r3
   1af48:	e787      	b.n	1ae5a <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
   1af4a:	2200      	movs	r2, #0
   1af4c:	4b51      	ldr	r3, [pc, #324]	; (1b094 <m2m_wifi_cb+0x2a0>)
   1af4e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1af50:	2300      	movs	r3, #0
   1af52:	3204      	adds	r2, #4
   1af54:	a903      	add	r1, sp, #12
   1af56:	0028      	movs	r0, r5
   1af58:	4c49      	ldr	r4, [pc, #292]	; (1b080 <m2m_wifi_cb+0x28c>)
   1af5a:	47a0      	blx	r4
   1af5c:	2800      	cmp	r0, #0
   1af5e:	d000      	beq.n	1af62 <m2m_wifi_cb+0x16e>
   1af60:	e77b      	b.n	1ae5a <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
   1af62:	ab03      	add	r3, sp, #12
   1af64:	781a      	ldrb	r2, [r3, #0]
   1af66:	4b4c      	ldr	r3, [pc, #304]	; (1b098 <m2m_wifi_cb+0x2a4>)
   1af68:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1af6a:	4b46      	ldr	r3, [pc, #280]	; (1b084 <m2m_wifi_cb+0x290>)
   1af6c:	681b      	ldr	r3, [r3, #0]
   1af6e:	2b00      	cmp	r3, #0
   1af70:	d100      	bne.n	1af74 <m2m_wifi_cb+0x180>
   1af72:	e772      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1af74:	a903      	add	r1, sp, #12
   1af76:	3011      	adds	r0, #17
   1af78:	4798      	blx	r3
   1af7a:	e76e      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1af7c:	2300      	movs	r3, #0
   1af7e:	222c      	movs	r2, #44	; 0x2c
   1af80:	a903      	add	r1, sp, #12
   1af82:	0028      	movs	r0, r5
   1af84:	4c3e      	ldr	r4, [pc, #248]	; (1b080 <m2m_wifi_cb+0x28c>)
   1af86:	47a0      	blx	r4
   1af88:	2800      	cmp	r0, #0
   1af8a:	d000      	beq.n	1af8e <m2m_wifi_cb+0x19a>
   1af8c:	e765      	b.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af8e:	4b3d      	ldr	r3, [pc, #244]	; (1b084 <m2m_wifi_cb+0x290>)
   1af90:	681b      	ldr	r3, [r3, #0]
   1af92:	2b00      	cmp	r3, #0
   1af94:	d100      	bne.n	1af98 <m2m_wifi_cb+0x1a4>
   1af96:	e760      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1af98:	a903      	add	r1, sp, #12
   1af9a:	3013      	adds	r0, #19
   1af9c:	4798      	blx	r3
   1af9e:	e75c      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1afa0:	2300      	movs	r3, #0
   1afa2:	2204      	movs	r2, #4
   1afa4:	a91c      	add	r1, sp, #112	; 0x70
   1afa6:	0028      	movs	r0, r5
   1afa8:	4c35      	ldr	r4, [pc, #212]	; (1b080 <m2m_wifi_cb+0x28c>)
   1afaa:	47a0      	blx	r4
   1afac:	2800      	cmp	r0, #0
   1afae:	d000      	beq.n	1afb2 <m2m_wifi_cb+0x1be>
   1afb0:	e753      	b.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1afb2:	4b34      	ldr	r3, [pc, #208]	; (1b084 <m2m_wifi_cb+0x290>)
   1afb4:	681b      	ldr	r3, [r3, #0]
   1afb6:	2b00      	cmp	r3, #0
   1afb8:	d100      	bne.n	1afbc <m2m_wifi_cb+0x1c8>
   1afba:	e74e      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1afbc:	a91c      	add	r1, sp, #112	; 0x70
   1afbe:	3004      	adds	r0, #4
   1afc0:	4798      	blx	r3
   1afc2:	e74a      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1afc4:	2300      	movs	r3, #0
   1afc6:	2204      	movs	r2, #4
   1afc8:	a91c      	add	r1, sp, #112	; 0x70
   1afca:	0028      	movs	r0, r5
   1afcc:	4c2c      	ldr	r4, [pc, #176]	; (1b080 <m2m_wifi_cb+0x28c>)
   1afce:	47a0      	blx	r4
   1afd0:	2800      	cmp	r0, #0
   1afd2:	d000      	beq.n	1afd6 <m2m_wifi_cb+0x1e2>
   1afd4:	e741      	b.n	1ae5a <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1afd6:	4b2b      	ldr	r3, [pc, #172]	; (1b084 <m2m_wifi_cb+0x290>)
   1afd8:	681b      	ldr	r3, [r3, #0]
   1afda:	2b00      	cmp	r3, #0
   1afdc:	d100      	bne.n	1afe0 <m2m_wifi_cb+0x1ec>
   1afde:	e73c      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1afe0:	a91c      	add	r1, sp, #112	; 0x70
   1afe2:	3065      	adds	r0, #101	; 0x65
   1afe4:	4798      	blx	r3
   1afe6:	e738      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1afe8:	2301      	movs	r3, #1
   1afea:	2264      	movs	r2, #100	; 0x64
   1afec:	a903      	add	r1, sp, #12
   1afee:	0028      	movs	r0, r5
   1aff0:	4c23      	ldr	r4, [pc, #140]	; (1b080 <m2m_wifi_cb+0x28c>)
   1aff2:	47a0      	blx	r4
   1aff4:	2800      	cmp	r0, #0
   1aff6:	d000      	beq.n	1affa <m2m_wifi_cb+0x206>
   1aff8:	e72f      	b.n	1ae5a <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1affa:	4b22      	ldr	r3, [pc, #136]	; (1b084 <m2m_wifi_cb+0x290>)
   1affc:	681b      	ldr	r3, [r3, #0]
   1affe:	2b00      	cmp	r3, #0
   1b000:	d100      	bne.n	1b004 <m2m_wifi_cb+0x210>
   1b002:	e72a      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1b004:	a903      	add	r1, sp, #12
   1b006:	3009      	adds	r0, #9
   1b008:	4798      	blx	r3
   1b00a:	e726      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1b00c:	2301      	movs	r3, #1
   1b00e:	2204      	movs	r2, #4
   1b010:	a903      	add	r1, sp, #12
   1b012:	0028      	movs	r0, r5
   1b014:	4c1a      	ldr	r4, [pc, #104]	; (1b080 <m2m_wifi_cb+0x28c>)
   1b016:	47a0      	blx	r4
   1b018:	2800      	cmp	r0, #0
   1b01a:	d000      	beq.n	1b01e <m2m_wifi_cb+0x22a>
   1b01c:	e71d      	b.n	1ae5a <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1b01e:	4b19      	ldr	r3, [pc, #100]	; (1b084 <m2m_wifi_cb+0x290>)
   1b020:	681b      	ldr	r3, [r3, #0]
   1b022:	2b00      	cmp	r3, #0
   1b024:	d100      	bne.n	1b028 <m2m_wifi_cb+0x234>
   1b026:	e718      	b.n	1ae5a <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1b028:	a903      	add	r1, sp, #12
   1b02a:	302a      	adds	r0, #42	; 0x2a
   1b02c:	4798      	blx	r3
   1b02e:	e714      	b.n	1ae5a <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1b030:	2300      	movs	r3, #0
   1b032:	2208      	movs	r2, #8
   1b034:	a903      	add	r1, sp, #12
   1b036:	0028      	movs	r0, r5
   1b038:	4c11      	ldr	r4, [pc, #68]	; (1b080 <m2m_wifi_cb+0x28c>)
   1b03a:	47a0      	blx	r4
   1b03c:	2800      	cmp	r0, #0
   1b03e:	d000      	beq.n	1b042 <m2m_wifi_cb+0x24e>
   1b040:	e70b      	b.n	1ae5a <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1b042:	ab03      	add	r3, sp, #12
   1b044:	889a      	ldrh	r2, [r3, #4]
   1b046:	0028      	movs	r0, r5
   1b048:	3008      	adds	r0, #8
   1b04a:	2301      	movs	r3, #1
   1b04c:	9903      	ldr	r1, [sp, #12]
   1b04e:	4c0c      	ldr	r4, [pc, #48]	; (1b080 <m2m_wifi_cb+0x28c>)
   1b050:	47a0      	blx	r4
   1b052:	2800      	cmp	r0, #0
   1b054:	d000      	beq.n	1b058 <m2m_wifi_cb+0x264>
   1b056:	e700      	b.n	1ae5a <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
   1b058:	4b0a      	ldr	r3, [pc, #40]	; (1b084 <m2m_wifi_cb+0x290>)
   1b05a:	681b      	ldr	r3, [r3, #0]
   1b05c:	2b00      	cmp	r3, #0
   1b05e:	d100      	bne.n	1b062 <m2m_wifi_cb+0x26e>
   1b060:	e6fb      	b.n	1ae5a <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1b062:	a903      	add	r1, sp, #12
   1b064:	3020      	adds	r0, #32
   1b066:	4798      	blx	r3
   1b068:	e6f7      	b.n	1ae5a <m2m_wifi_cb+0x66>
   1b06a:	46c0      	nop			; (mov r8, r8)
   1b06c:	000298c4 	.word	0x000298c4
   1b070:	00029548 	.word	0x00029548
   1b074:	0001905d 	.word	0x0001905d
   1b078:	00029914 	.word	0x00029914
   1b07c:	00029570 	.word	0x00029570
   1b080:	0001ac61 	.word	0x0001ac61
   1b084:	20003ce0 	.word	0x20003ce0
   1b088:	0001a571 	.word	0x0001a571
   1b08c:	00029884 	.word	0x00029884
   1b090:	000298f4 	.word	0x000298f4
   1b094:	20003ce5 	.word	0x20003ce5
   1b098:	20003ce4 	.word	0x20003ce4

0001b09c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b09e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1b0a0:	2201      	movs	r2, #1
   1b0a2:	230f      	movs	r3, #15
   1b0a4:	446b      	add	r3, sp
   1b0a6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1b0a8:	2800      	cmp	r0, #0
   1b0aa:	d05f      	beq.n	1b16c <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1b0ac:	6802      	ldr	r2, [r0, #0]
   1b0ae:	4b31      	ldr	r3, [pc, #196]	; (1b174 <m2m_wifi_init+0xd8>)
   1b0b0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1b0b2:	2200      	movs	r2, #0
   1b0b4:	4b30      	ldr	r3, [pc, #192]	; (1b178 <m2m_wifi_init+0xdc>)
   1b0b6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1b0b8:	200f      	movs	r0, #15
   1b0ba:	4468      	add	r0, sp
   1b0bc:	4b2f      	ldr	r3, [pc, #188]	; (1b17c <m2m_wifi_init+0xe0>)
   1b0be:	4798      	blx	r3
   1b0c0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1b0c2:	d002      	beq.n	1b0ca <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
   1b0c4:	0020      	movs	r0, r4
   1b0c6:	b00f      	add	sp, #60	; 0x3c
   1b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
   1b0ca:	2000      	movs	r0, #0
   1b0cc:	4b2c      	ldr	r3, [pc, #176]	; (1b180 <m2m_wifi_init+0xe4>)
   1b0ce:	4798      	blx	r3
   1b0d0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1b0d2:	d147      	bne.n	1b164 <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1b0d4:	492b      	ldr	r1, [pc, #172]	; (1b184 <m2m_wifi_init+0xe8>)
   1b0d6:	2001      	movs	r0, #1
   1b0d8:	4b2b      	ldr	r3, [pc, #172]	; (1b188 <m2m_wifi_init+0xec>)
   1b0da:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
   1b0dc:	ad04      	add	r5, sp, #16
   1b0de:	0028      	movs	r0, r5
   1b0e0:	4b2a      	ldr	r3, [pc, #168]	; (1b18c <m2m_wifi_init+0xf0>)
   1b0e2:	4798      	blx	r3
   1b0e4:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1b0e6:	4f2a      	ldr	r7, [pc, #168]	; (1b190 <m2m_wifi_init+0xf4>)
   1b0e8:	0038      	movs	r0, r7
   1b0ea:	4e2a      	ldr	r6, [pc, #168]	; (1b194 <m2m_wifi_init+0xf8>)
   1b0ec:	47b0      	blx	r6
   1b0ee:	79ab      	ldrb	r3, [r5, #6]
   1b0f0:	796a      	ldrb	r2, [r5, #5]
   1b0f2:	7929      	ldrb	r1, [r5, #4]
   1b0f4:	8c28      	ldrh	r0, [r5, #32]
   1b0f6:	9000      	str	r0, [sp, #0]
   1b0f8:	4827      	ldr	r0, [pc, #156]	; (1b198 <m2m_wifi_init+0xfc>)
   1b0fa:	47b0      	blx	r6
   1b0fc:	4827      	ldr	r0, [pc, #156]	; (1b19c <m2m_wifi_init+0x100>)
   1b0fe:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1b100:	0038      	movs	r0, r7
   1b102:	47b0      	blx	r6
   1b104:	2226      	movs	r2, #38	; 0x26
   1b106:	446a      	add	r2, sp
   1b108:	211a      	movs	r1, #26
   1b10a:	4469      	add	r1, sp
   1b10c:	4824      	ldr	r0, [pc, #144]	; (1b1a0 <m2m_wifi_init+0x104>)
   1b10e:	47b0      	blx	r6
   1b110:	4822      	ldr	r0, [pc, #136]	; (1b19c <m2m_wifi_init+0x100>)
   1b112:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1b114:	0038      	movs	r0, r7
   1b116:	47b0      	blx	r6
   1b118:	7a6b      	ldrb	r3, [r5, #9]
   1b11a:	7a2a      	ldrb	r2, [r5, #8]
   1b11c:	79e9      	ldrb	r1, [r5, #7]
   1b11e:	4821      	ldr	r0, [pc, #132]	; (1b1a4 <m2m_wifi_init+0x108>)
   1b120:	47b0      	blx	r6
   1b122:	481e      	ldr	r0, [pc, #120]	; (1b19c <m2m_wifi_init+0x100>)
   1b124:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1b126:	0038      	movs	r0, r7
   1b128:	47b0      	blx	r6
   1b12a:	2304      	movs	r3, #4
   1b12c:	2205      	movs	r2, #5
   1b12e:	2113      	movs	r1, #19
   1b130:	481d      	ldr	r0, [pc, #116]	; (1b1a8 <m2m_wifi_init+0x10c>)
   1b132:	47b0      	blx	r6
   1b134:	4819      	ldr	r0, [pc, #100]	; (1b19c <m2m_wifi_init+0x100>)
   1b136:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1b138:	0038      	movs	r0, r7
   1b13a:	47b0      	blx	r6
   1b13c:	4a1b      	ldr	r2, [pc, #108]	; (1b1ac <m2m_wifi_init+0x110>)
   1b13e:	491c      	ldr	r1, [pc, #112]	; (1b1b0 <m2m_wifi_init+0x114>)
   1b140:	481c      	ldr	r0, [pc, #112]	; (1b1b4 <m2m_wifi_init+0x118>)
   1b142:	47b0      	blx	r6
   1b144:	4815      	ldr	r0, [pc, #84]	; (1b19c <m2m_wifi_init+0x100>)
   1b146:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1b148:	0023      	movs	r3, r4
   1b14a:	330d      	adds	r3, #13
   1b14c:	d1ba      	bne.n	1b0c4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
   1b14e:	22e8      	movs	r2, #232	; 0xe8
   1b150:	32ff      	adds	r2, #255	; 0xff
   1b152:	4919      	ldr	r1, [pc, #100]	; (1b1b8 <m2m_wifi_init+0x11c>)
   1b154:	4819      	ldr	r0, [pc, #100]	; (1b1bc <m2m_wifi_init+0x120>)
   1b156:	4d0f      	ldr	r5, [pc, #60]	; (1b194 <m2m_wifi_init+0xf8>)
   1b158:	47a8      	blx	r5
   1b15a:	4819      	ldr	r0, [pc, #100]	; (1b1c0 <m2m_wifi_init+0x124>)
   1b15c:	47a8      	blx	r5
   1b15e:	480f      	ldr	r0, [pc, #60]	; (1b19c <m2m_wifi_init+0x100>)
   1b160:	47a8      	blx	r5
   1b162:	e7af      	b.n	1b0c4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
   1b164:	2000      	movs	r0, #0
   1b166:	4b17      	ldr	r3, [pc, #92]	; (1b1c4 <m2m_wifi_init+0x128>)
   1b168:	4798      	blx	r3
   1b16a:	e7ab      	b.n	1b0c4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1b16c:	240c      	movs	r4, #12
   1b16e:	4264      	negs	r4, r4
   1b170:	e7a8      	b.n	1b0c4 <m2m_wifi_init+0x28>
   1b172:	46c0      	nop			; (mov r8, r8)
   1b174:	20003ce0 	.word	0x20003ce0
   1b178:	20003ce5 	.word	0x20003ce5
   1b17c:	0001baf9 	.word	0x0001baf9
   1b180:	0001adbd 	.word	0x0001adbd
   1b184:	0001adf5 	.word	0x0001adf5
   1b188:	0001ad39 	.word	0x0001ad39
   1b18c:	0001ba15 	.word	0x0001ba15
   1b190:	00029884 	.word	0x00029884
   1b194:	0001905d 	.word	0x0001905d
   1b198:	000299d4 	.word	0x000299d4
   1b19c:	00029570 	.word	0x00029570
   1b1a0:	000299fc 	.word	0x000299fc
   1b1a4:	00029a18 	.word	0x00029a18
   1b1a8:	00029a3c 	.word	0x00029a3c
   1b1ac:	00029a54 	.word	0x00029a54
   1b1b0:	00029a60 	.word	0x00029a60
   1b1b4:	00029a6c 	.word	0x00029a6c
   1b1b8:	000298d0 	.word	0x000298d0
   1b1bc:	00029548 	.word	0x00029548
   1b1c0:	00029a84 	.word	0x00029a84
   1b1c4:	0001bbc1 	.word	0x0001bbc1

0001b1c8 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1b1c8:	b510      	push	{r4, lr}
	return hif_handle_isr();
   1b1ca:	4b01      	ldr	r3, [pc, #4]	; (1b1d0 <m2m_wifi_handle_events+0x8>)
   1b1cc:	4798      	blx	r3
}
   1b1ce:	bd10      	pop	{r4, pc}
   1b1d0:	0001a8ad 	.word	0x0001a8ad

0001b1d4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1b1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1d6:	46ce      	mov	lr, r9
   1b1d8:	4647      	mov	r7, r8
   1b1da:	b580      	push	{r7, lr}
   1b1dc:	b0a3      	sub	sp, #140	; 0x8c
   1b1de:	9005      	str	r0, [sp, #20]
   1b1e0:	000c      	movs	r4, r1
   1b1e2:	0015      	movs	r5, r2
   1b1e4:	001f      	movs	r7, r3
   1b1e6:	ab2a      	add	r3, sp, #168	; 0xa8
   1b1e8:	881b      	ldrh	r3, [r3, #0]
   1b1ea:	4699      	mov	r9, r3
   1b1ec:	ab2b      	add	r3, sp, #172	; 0xac
   1b1ee:	781b      	ldrb	r3, [r3, #0]
   1b1f0:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1b1f2:	2a01      	cmp	r2, #1
   1b1f4:	d003      	beq.n	1b1fe <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
   1b1f6:	2f00      	cmp	r7, #0
   1b1f8:	d03f      	beq.n	1b27a <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b1fa:	2a02      	cmp	r2, #2
   1b1fc:	d049      	beq.n	1b292 <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1b1fe:	1e63      	subs	r3, r4, #1
   1b200:	2b1f      	cmp	r3, #31
   1b202:	d900      	bls.n	1b206 <m2m_wifi_connect_sc+0x32>
   1b204:	e073      	b.n	1b2ee <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1b206:	464b      	mov	r3, r9
   1b208:	3b01      	subs	r3, #1
   1b20a:	b29b      	uxth	r3, r3
   1b20c:	2b0d      	cmp	r3, #13
   1b20e:	d903      	bls.n	1b218 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1b210:	464b      	mov	r3, r9
   1b212:	2bff      	cmp	r3, #255	; 0xff
   1b214:	d000      	beq.n	1b218 <m2m_wifi_connect_sc+0x44>
   1b216:	e077      	b.n	1b308 <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1b218:	ae07      	add	r6, sp, #28
   1b21a:	0022      	movs	r2, r4
   1b21c:	9905      	ldr	r1, [sp, #20]
   1b21e:	205a      	movs	r0, #90	; 0x5a
   1b220:	ab02      	add	r3, sp, #8
   1b222:	469c      	mov	ip, r3
   1b224:	4460      	add	r0, ip
   1b226:	4b71      	ldr	r3, [pc, #452]	; (1b3ec <m2m_wifi_connect_sc+0x218>)
   1b228:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1b22a:	1934      	adds	r4, r6, r4
   1b22c:	3446      	adds	r4, #70	; 0x46
   1b22e:	2300      	movs	r3, #0
   1b230:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1b232:	3344      	adds	r3, #68	; 0x44
   1b234:	464a      	mov	r2, r9
   1b236:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1b238:	4643      	mov	r3, r8
   1b23a:	1e5a      	subs	r2, r3, #1
   1b23c:	4193      	sbcs	r3, r2
   1b23e:	2267      	movs	r2, #103	; 0x67
   1b240:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
   1b242:	2341      	movs	r3, #65	; 0x41
   1b244:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1b246:	2d03      	cmp	r5, #3
   1b248:	d06a      	beq.n	1b320 <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1b24a:	2d02      	cmp	r5, #2
   1b24c:	d100      	bne.n	1b250 <m2m_wifi_connect_sc+0x7c>
   1b24e:	e0a2      	b.n	1b396 <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1b250:	2d04      	cmp	r5, #4
   1b252:	d100      	bne.n	1b256 <m2m_wifi_connect_sc+0x82>
   1b254:	e0b8      	b.n	1b3c8 <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   1b256:	2d01      	cmp	r5, #1
   1b258:	d000      	beq.n	1b25c <m2m_wifi_connect_sc+0x88>
   1b25a:	e0bb      	b.n	1b3d4 <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   1b25c:	2300      	movs	r3, #0
   1b25e:	9302      	str	r3, [sp, #8]
   1b260:	9301      	str	r3, [sp, #4]
   1b262:	9300      	str	r3, [sp, #0]
   1b264:	336c      	adds	r3, #108	; 0x6c
   1b266:	aa07      	add	r2, sp, #28
   1b268:	2128      	movs	r1, #40	; 0x28
   1b26a:	2001      	movs	r0, #1
   1b26c:	4c60      	ldr	r4, [pc, #384]	; (1b3f0 <m2m_wifi_connect_sc+0x21c>)
   1b26e:	47a0      	blx	r4

ERR1:
	return ret;
}
   1b270:	b023      	add	sp, #140	; 0x8c
   1b272:	bc0c      	pop	{r2, r3}
   1b274:	4690      	mov	r8, r2
   1b276:	4699      	mov	r9, r3
   1b278:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
   1b27a:	4a5e      	ldr	r2, [pc, #376]	; (1b3f4 <m2m_wifi_connect_sc+0x220>)
   1b27c:	495e      	ldr	r1, [pc, #376]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b27e:	485f      	ldr	r0, [pc, #380]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b280:	4c5f      	ldr	r4, [pc, #380]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b282:	47a0      	blx	r4
   1b284:	485f      	ldr	r0, [pc, #380]	; (1b404 <m2m_wifi_connect_sc+0x230>)
   1b286:	47a0      	blx	r4
   1b288:	485f      	ldr	r0, [pc, #380]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b28a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b28c:	200c      	movs	r0, #12
   1b28e:	4240      	negs	r0, r0
			goto ERR1;
   1b290:	e7ee      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b292:	0038      	movs	r0, r7
   1b294:	4b5d      	ldr	r3, [pc, #372]	; (1b40c <m2m_wifi_connect_sc+0x238>)
   1b296:	4798      	blx	r3
   1b298:	2840      	cmp	r0, #64	; 0x40
   1b29a:	d1b0      	bne.n	1b1fe <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1b29c:	783b      	ldrb	r3, [r7, #0]
   1b29e:	001a      	movs	r2, r3
   1b2a0:	3a30      	subs	r2, #48	; 0x30
   1b2a2:	2a36      	cmp	r2, #54	; 0x36
   1b2a4:	d817      	bhi.n	1b2d6 <m2m_wifi_connect_sc+0x102>
   1b2a6:	3a0a      	subs	r2, #10
   1b2a8:	2a06      	cmp	r2, #6
   1b2aa:	d914      	bls.n	1b2d6 <m2m_wifi_connect_sc+0x102>
   1b2ac:	3b47      	subs	r3, #71	; 0x47
   1b2ae:	2b19      	cmp	r3, #25
   1b2b0:	d911      	bls.n	1b2d6 <m2m_wifi_connect_sc+0x102>
   1b2b2:	1c7a      	adds	r2, r7, #1
   1b2b4:	0038      	movs	r0, r7
   1b2b6:	3040      	adds	r0, #64	; 0x40
   1b2b8:	7813      	ldrb	r3, [r2, #0]
   1b2ba:	0019      	movs	r1, r3
   1b2bc:	3930      	subs	r1, #48	; 0x30
   1b2be:	2936      	cmp	r1, #54	; 0x36
   1b2c0:	d809      	bhi.n	1b2d6 <m2m_wifi_connect_sc+0x102>
   1b2c2:	390a      	subs	r1, #10
   1b2c4:	2906      	cmp	r1, #6
   1b2c6:	d906      	bls.n	1b2d6 <m2m_wifi_connect_sc+0x102>
   1b2c8:	3b47      	subs	r3, #71	; 0x47
   1b2ca:	2b19      	cmp	r3, #25
   1b2cc:	d903      	bls.n	1b2d6 <m2m_wifi_connect_sc+0x102>
   1b2ce:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
   1b2d0:	4282      	cmp	r2, r0
   1b2d2:	d1f1      	bne.n	1b2b8 <m2m_wifi_connect_sc+0xe4>
   1b2d4:	e793      	b.n	1b1fe <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
   1b2d6:	4a4e      	ldr	r2, [pc, #312]	; (1b410 <m2m_wifi_connect_sc+0x23c>)
   1b2d8:	4947      	ldr	r1, [pc, #284]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b2da:	4848      	ldr	r0, [pc, #288]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b2dc:	4c48      	ldr	r4, [pc, #288]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b2de:	47a0      	blx	r4
   1b2e0:	484c      	ldr	r0, [pc, #304]	; (1b414 <m2m_wifi_connect_sc+0x240>)
   1b2e2:	47a0      	blx	r4
   1b2e4:	4848      	ldr	r0, [pc, #288]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b2e6:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
   1b2e8:	200c      	movs	r0, #12
   1b2ea:	4240      	negs	r0, r0
					goto ERR1;
   1b2ec:	e7c0      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
   1b2ee:	228c      	movs	r2, #140	; 0x8c
   1b2f0:	0092      	lsls	r2, r2, #2
   1b2f2:	4941      	ldr	r1, [pc, #260]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b2f4:	4841      	ldr	r0, [pc, #260]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b2f6:	4c42      	ldr	r4, [pc, #264]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b2f8:	47a0      	blx	r4
   1b2fa:	4847      	ldr	r0, [pc, #284]	; (1b418 <m2m_wifi_connect_sc+0x244>)
   1b2fc:	47a0      	blx	r4
   1b2fe:	4842      	ldr	r0, [pc, #264]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b300:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b302:	200c      	movs	r0, #12
   1b304:	4240      	negs	r0, r0
		goto ERR1;
   1b306:	e7b3      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
   1b308:	4a44      	ldr	r2, [pc, #272]	; (1b41c <m2m_wifi_connect_sc+0x248>)
   1b30a:	493b      	ldr	r1, [pc, #236]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b30c:	483b      	ldr	r0, [pc, #236]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b30e:	4c3c      	ldr	r4, [pc, #240]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b310:	47a0      	blx	r4
   1b312:	4843      	ldr	r0, [pc, #268]	; (1b420 <m2m_wifi_connect_sc+0x24c>)
   1b314:	47a0      	blx	r4
   1b316:	483c      	ldr	r0, [pc, #240]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b318:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b31a:	200c      	movs	r0, #12
   1b31c:	4240      	negs	r0, r0
			goto ERR1;
   1b31e:	e7a7      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1b320:	783b      	ldrb	r3, [r7, #0]
   1b322:	3b01      	subs	r3, #1
   1b324:	b2db      	uxtb	r3, r3
   1b326:	aa07      	add	r2, sp, #28
   1b328:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1b32a:	2b03      	cmp	r3, #3
   1b32c:	d816      	bhi.n	1b35c <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1b32e:	787a      	ldrb	r2, [r7, #1]
   1b330:	1e51      	subs	r1, r2, #1
   1b332:	ab07      	add	r3, sp, #28
   1b334:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1b336:	2310      	movs	r3, #16
   1b338:	0011      	movs	r1, r2
   1b33a:	4399      	bics	r1, r3
   1b33c:	290b      	cmp	r1, #11
   1b33e:	d01c      	beq.n	1b37a <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1b340:	4a38      	ldr	r2, [pc, #224]	; (1b424 <m2m_wifi_connect_sc+0x250>)
   1b342:	492d      	ldr	r1, [pc, #180]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b344:	482d      	ldr	r0, [pc, #180]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b346:	4c2e      	ldr	r4, [pc, #184]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b348:	47a0      	blx	r4
   1b34a:	ab07      	add	r3, sp, #28
   1b34c:	7859      	ldrb	r1, [r3, #1]
   1b34e:	4836      	ldr	r0, [pc, #216]	; (1b428 <m2m_wifi_connect_sc+0x254>)
   1b350:	47a0      	blx	r4
   1b352:	482d      	ldr	r0, [pc, #180]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b354:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b356:	200c      	movs	r0, #12
   1b358:	4240      	negs	r0, r0
			goto ERR1;
   1b35a:	e789      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1b35c:	2294      	movs	r2, #148	; 0x94
   1b35e:	0092      	lsls	r2, r2, #2
   1b360:	4925      	ldr	r1, [pc, #148]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b362:	4826      	ldr	r0, [pc, #152]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b364:	4c26      	ldr	r4, [pc, #152]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b366:	47a0      	blx	r4
   1b368:	ab07      	add	r3, sp, #28
   1b36a:	7819      	ldrb	r1, [r3, #0]
   1b36c:	482f      	ldr	r0, [pc, #188]	; (1b42c <m2m_wifi_connect_sc+0x258>)
   1b36e:	47a0      	blx	r4
   1b370:	4825      	ldr	r0, [pc, #148]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b372:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b374:	200c      	movs	r0, #12
   1b376:	4240      	negs	r0, r0
			goto ERR1;
   1b378:	e77a      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1b37a:	1cb9      	adds	r1, r7, #2
   1b37c:	2016      	movs	r0, #22
   1b37e:	ab02      	add	r3, sp, #8
   1b380:	469c      	mov	ip, r3
   1b382:	4460      	add	r0, ip
   1b384:	4b19      	ldr	r3, [pc, #100]	; (1b3ec <m2m_wifi_connect_sc+0x218>)
   1b386:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1b388:	787b      	ldrb	r3, [r7, #1]
   1b38a:	aa07      	add	r2, sp, #28
   1b38c:	4694      	mov	ip, r2
   1b38e:	4463      	add	r3, ip
   1b390:	2200      	movs	r2, #0
   1b392:	709a      	strb	r2, [r3, #2]
   1b394:	e762      	b.n	1b25c <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1b396:	0038      	movs	r0, r7
   1b398:	4b1c      	ldr	r3, [pc, #112]	; (1b40c <m2m_wifi_connect_sc+0x238>)
   1b39a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1b39c:	1e43      	subs	r3, r0, #1
   1b39e:	b29b      	uxth	r3, r3
   1b3a0:	2b3f      	cmp	r3, #63	; 0x3f
   1b3a2:	d805      	bhi.n	1b3b0 <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1b3a4:	1c42      	adds	r2, r0, #1
   1b3a6:	0039      	movs	r1, r7
   1b3a8:	a807      	add	r0, sp, #28
   1b3aa:	4b10      	ldr	r3, [pc, #64]	; (1b3ec <m2m_wifi_connect_sc+0x218>)
   1b3ac:	4798      	blx	r3
   1b3ae:	e755      	b.n	1b25c <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
   1b3b0:	4a1f      	ldr	r2, [pc, #124]	; (1b430 <m2m_wifi_connect_sc+0x25c>)
   1b3b2:	4911      	ldr	r1, [pc, #68]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b3b4:	4811      	ldr	r0, [pc, #68]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b3b6:	4c12      	ldr	r4, [pc, #72]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b3b8:	47a0      	blx	r4
   1b3ba:	481e      	ldr	r0, [pc, #120]	; (1b434 <m2m_wifi_connect_sc+0x260>)
   1b3bc:	47a0      	blx	r4
   1b3be:	4812      	ldr	r0, [pc, #72]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b3c0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b3c2:	200c      	movs	r0, #12
   1b3c4:	4240      	negs	r0, r0
			goto ERR1;
   1b3c6:	e753      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1b3c8:	223e      	movs	r2, #62	; 0x3e
   1b3ca:	0039      	movs	r1, r7
   1b3cc:	a807      	add	r0, sp, #28
   1b3ce:	4b07      	ldr	r3, [pc, #28]	; (1b3ec <m2m_wifi_connect_sc+0x218>)
   1b3d0:	4798      	blx	r3
   1b3d2:	e743      	b.n	1b25c <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
   1b3d4:	4a18      	ldr	r2, [pc, #96]	; (1b438 <m2m_wifi_connect_sc+0x264>)
   1b3d6:	4908      	ldr	r1, [pc, #32]	; (1b3f8 <m2m_wifi_connect_sc+0x224>)
   1b3d8:	4808      	ldr	r0, [pc, #32]	; (1b3fc <m2m_wifi_connect_sc+0x228>)
   1b3da:	4c09      	ldr	r4, [pc, #36]	; (1b400 <m2m_wifi_connect_sc+0x22c>)
   1b3dc:	47a0      	blx	r4
   1b3de:	4817      	ldr	r0, [pc, #92]	; (1b43c <m2m_wifi_connect_sc+0x268>)
   1b3e0:	47a0      	blx	r4
   1b3e2:	4809      	ldr	r0, [pc, #36]	; (1b408 <m2m_wifi_connect_sc+0x234>)
   1b3e4:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b3e6:	200c      	movs	r0, #12
   1b3e8:	4240      	negs	r0, r0
		goto ERR1;
   1b3ea:	e741      	b.n	1b270 <m2m_wifi_connect_sc+0x9c>
   1b3ec:	0001a55d 	.word	0x0001a55d
   1b3f0:	0001a685 	.word	0x0001a685
   1b3f4:	0000021a 	.word	0x0000021a
   1b3f8:	000298e0 	.word	0x000298e0
   1b3fc:	00029548 	.word	0x00029548
   1b400:	0001905d 	.word	0x0001905d
   1b404:	00029928 	.word	0x00029928
   1b408:	00029570 	.word	0x00029570
   1b40c:	0001a581 	.word	0x0001a581
   1b410:	00000226 	.word	0x00000226
   1b414:	0002993c 	.word	0x0002993c
   1b418:	0002994c 	.word	0x0002994c
   1b41c:	00000239 	.word	0x00000239
   1b420:	00029960 	.word	0x00029960
   1b424:	00000257 	.word	0x00000257
   1b428:	00029988 	.word	0x00029988
   1b42c:	0002996c 	.word	0x0002996c
   1b430:	00000266 	.word	0x00000266
   1b434:	000299a4 	.word	0x000299a4
   1b438:	00000276 	.word	0x00000276
   1b43c:	000299c0 	.word	0x000299c0

0001b440 <m2m_wifi_connect>:
{
   1b440:	b530      	push	{r4, r5, lr}
   1b442:	b083      	sub	sp, #12
   1b444:	ac06      	add	r4, sp, #24
   1b446:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1b448:	2500      	movs	r5, #0
   1b44a:	9501      	str	r5, [sp, #4]
   1b44c:	9400      	str	r4, [sp, #0]
   1b44e:	4c02      	ldr	r4, [pc, #8]	; (1b458 <m2m_wifi_connect+0x18>)
   1b450:	47a0      	blx	r4
}
   1b452:	b003      	add	sp, #12
   1b454:	bd30      	pop	{r4, r5, pc}
   1b456:	46c0      	nop			; (mov r8, r8)
   1b458:	0001b1d5 	.word	0x0001b1d5

0001b45c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
   1b45c:	2000      	movs	r0, #0
   1b45e:	4770      	bx	lr

0001b460 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   1b460:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b462:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   1b464:	2580      	movs	r5, #128	; 0x80
   1b466:	006d      	lsls	r5, r5, #1
   1b468:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b46a:	24a5      	movs	r4, #165	; 0xa5
   1b46c:	0164      	lsls	r4, r4, #5
   1b46e:	4f08      	ldr	r7, [pc, #32]	; (1b490 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b470:	4e08      	ldr	r6, [pc, #32]	; (1b494 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b472:	0029      	movs	r1, r5
   1b474:	0020      	movs	r0, r4
   1b476:	47b8      	blx	r7
			uint32 reg = 0;
   1b478:	2300      	movs	r3, #0
   1b47a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b47c:	a901      	add	r1, sp, #4
   1b47e:	0020      	movs	r0, r4
   1b480:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
   1b482:	2800      	cmp	r0, #0
   1b484:	d1f5      	bne.n	1b472 <chip_apply_conf+0x12>
				if(reg == val32)
   1b486:	9b01      	ldr	r3, [sp, #4]
   1b488:	429d      	cmp	r5, r3
   1b48a:	d1f2      	bne.n	1b472 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
   1b48c:	b003      	add	sp, #12
   1b48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b490:	0001b939 	.word	0x0001b939
   1b494:	0001b92d 	.word	0x0001b92d

0001b498 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   1b498:	b500      	push	{lr}
   1b49a:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b49c:	2300      	movs	r3, #0
   1b49e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   1b4a0:	a901      	add	r1, sp, #4
   1b4a2:	4811      	ldr	r0, [pc, #68]	; (1b4e8 <enable_interrupts+0x50>)
   1b4a4:	4b11      	ldr	r3, [pc, #68]	; (1b4ec <enable_interrupts+0x54>)
   1b4a6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b4a8:	2800      	cmp	r0, #0
   1b4aa:	d001      	beq.n	1b4b0 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
   1b4ac:	b003      	add	sp, #12
   1b4ae:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
   1b4b0:	2180      	movs	r1, #128	; 0x80
   1b4b2:	0049      	lsls	r1, r1, #1
   1b4b4:	9b01      	ldr	r3, [sp, #4]
   1b4b6:	4319      	orrs	r1, r3
   1b4b8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   1b4ba:	480b      	ldr	r0, [pc, #44]	; (1b4e8 <enable_interrupts+0x50>)
   1b4bc:	4b0c      	ldr	r3, [pc, #48]	; (1b4f0 <enable_interrupts+0x58>)
   1b4be:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b4c0:	2800      	cmp	r0, #0
   1b4c2:	d1f3      	bne.n	1b4ac <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   1b4c4:	a901      	add	r1, sp, #4
   1b4c6:	20d0      	movs	r0, #208	; 0xd0
   1b4c8:	0140      	lsls	r0, r0, #5
   1b4ca:	4b08      	ldr	r3, [pc, #32]	; (1b4ec <enable_interrupts+0x54>)
   1b4cc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b4ce:	2800      	cmp	r0, #0
   1b4d0:	d1ec      	bne.n	1b4ac <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
   1b4d2:	2180      	movs	r1, #128	; 0x80
   1b4d4:	0249      	lsls	r1, r1, #9
   1b4d6:	9b01      	ldr	r3, [sp, #4]
   1b4d8:	4319      	orrs	r1, r3
   1b4da:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   1b4dc:	20d0      	movs	r0, #208	; 0xd0
   1b4de:	0140      	lsls	r0, r0, #5
   1b4e0:	4b03      	ldr	r3, [pc, #12]	; (1b4f0 <enable_interrupts+0x58>)
   1b4e2:	4798      	blx	r3
   1b4e4:	e7e2      	b.n	1b4ac <enable_interrupts+0x14>
   1b4e6:	46c0      	nop			; (mov r8, r8)
   1b4e8:	00001408 	.word	0x00001408
   1b4ec:	0001b92d 	.word	0x0001b92d
   1b4f0:	0001b939 	.word	0x0001b939

0001b4f4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   1b4f4:	b510      	push	{r4, lr}
   1b4f6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
   1b4f8:	4b28      	ldr	r3, [pc, #160]	; (1b59c <nmi_get_chipid+0xa8>)
   1b4fa:	681c      	ldr	r4, [r3, #0]
   1b4fc:	2c00      	cmp	r4, #0
   1b4fe:	d004      	beq.n	1b50a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
   1b500:	4b26      	ldr	r3, [pc, #152]	; (1b59c <nmi_get_chipid+0xa8>)
   1b502:	681c      	ldr	r4, [r3, #0]
}
   1b504:	0020      	movs	r0, r4
   1b506:	b002      	add	sp, #8
   1b508:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   1b50a:	0019      	movs	r1, r3
   1b50c:	2080      	movs	r0, #128	; 0x80
   1b50e:	0140      	lsls	r0, r0, #5
   1b510:	4b23      	ldr	r3, [pc, #140]	; (1b5a0 <nmi_get_chipid+0xac>)
   1b512:	4798      	blx	r3
   1b514:	2800      	cmp	r0, #0
   1b516:	d003      	beq.n	1b520 <nmi_get_chipid+0x2c>
			chipid = 0;
   1b518:	2200      	movs	r2, #0
   1b51a:	4b20      	ldr	r3, [pc, #128]	; (1b59c <nmi_get_chipid+0xa8>)
   1b51c:	601a      	str	r2, [r3, #0]
			return 0;
   1b51e:	e7f1      	b.n	1b504 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1b520:	a901      	add	r1, sp, #4
   1b522:	4820      	ldr	r0, [pc, #128]	; (1b5a4 <nmi_get_chipid+0xb0>)
   1b524:	4b1e      	ldr	r3, [pc, #120]	; (1b5a0 <nmi_get_chipid+0xac>)
   1b526:	4798      	blx	r3
   1b528:	2800      	cmp	r0, #0
   1b52a:	d003      	beq.n	1b534 <nmi_get_chipid+0x40>
			chipid = 0;
   1b52c:	2200      	movs	r2, #0
   1b52e:	4b1b      	ldr	r3, [pc, #108]	; (1b59c <nmi_get_chipid+0xa8>)
   1b530:	601a      	str	r2, [r3, #0]
			return 0;
   1b532:	e7e7      	b.n	1b504 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
   1b534:	4b19      	ldr	r3, [pc, #100]	; (1b59c <nmi_get_chipid+0xa8>)
   1b536:	681b      	ldr	r3, [r3, #0]
   1b538:	4a1b      	ldr	r2, [pc, #108]	; (1b5a8 <nmi_get_chipid+0xb4>)
   1b53a:	4293      	cmp	r3, r2
   1b53c:	d00e      	beq.n	1b55c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
   1b53e:	4a1b      	ldr	r2, [pc, #108]	; (1b5ac <nmi_get_chipid+0xb8>)
   1b540:	4293      	cmp	r3, r2
   1b542:	d012      	beq.n	1b56a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
   1b544:	4a1a      	ldr	r2, [pc, #104]	; (1b5b0 <nmi_get_chipid+0xbc>)
   1b546:	4293      	cmp	r3, r2
   1b548:	d01c      	beq.n	1b584 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
   1b54a:	4914      	ldr	r1, [pc, #80]	; (1b59c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
   1b54c:	4a19      	ldr	r2, [pc, #100]	; (1b5b4 <nmi_get_chipid+0xc0>)
   1b54e:	680b      	ldr	r3, [r1, #0]
   1b550:	401a      	ands	r2, r3
		chipid |= 0x050000;
   1b552:	23a0      	movs	r3, #160	; 0xa0
   1b554:	02db      	lsls	r3, r3, #11
   1b556:	4313      	orrs	r3, r2
   1b558:	600b      	str	r3, [r1, #0]
   1b55a:	e7d1      	b.n	1b500 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
   1b55c:	9b01      	ldr	r3, [sp, #4]
   1b55e:	2b01      	cmp	r3, #1
   1b560:	d0f3      	beq.n	1b54a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
   1b562:	4a15      	ldr	r2, [pc, #84]	; (1b5b8 <nmi_get_chipid+0xc4>)
   1b564:	4b0d      	ldr	r3, [pc, #52]	; (1b59c <nmi_get_chipid+0xa8>)
   1b566:	601a      	str	r2, [r3, #0]
   1b568:	e7ef      	b.n	1b54a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
   1b56a:	9b01      	ldr	r3, [sp, #4]
   1b56c:	2b03      	cmp	r3, #3
   1b56e:	d0ec      	beq.n	1b54a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
   1b570:	2b04      	cmp	r3, #4
   1b572:	d003      	beq.n	1b57c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
   1b574:	4a11      	ldr	r2, [pc, #68]	; (1b5bc <nmi_get_chipid+0xc8>)
   1b576:	4b09      	ldr	r3, [pc, #36]	; (1b59c <nmi_get_chipid+0xa8>)
   1b578:	601a      	str	r2, [r3, #0]
   1b57a:	e7e6      	b.n	1b54a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
   1b57c:	4a10      	ldr	r2, [pc, #64]	; (1b5c0 <nmi_get_chipid+0xcc>)
   1b57e:	4b07      	ldr	r3, [pc, #28]	; (1b59c <nmi_get_chipid+0xa8>)
   1b580:	601a      	str	r2, [r3, #0]
   1b582:	e7e2      	b.n	1b54a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   1b584:	4905      	ldr	r1, [pc, #20]	; (1b59c <nmi_get_chipid+0xa8>)
   1b586:	20ec      	movs	r0, #236	; 0xec
   1b588:	0380      	lsls	r0, r0, #14
   1b58a:	4b05      	ldr	r3, [pc, #20]	; (1b5a0 <nmi_get_chipid+0xac>)
   1b58c:	4798      	blx	r3
   1b58e:	2800      	cmp	r0, #0
   1b590:	d0db      	beq.n	1b54a <nmi_get_chipid+0x56>
			chipid = 0;
   1b592:	2200      	movs	r2, #0
   1b594:	4b01      	ldr	r3, [pc, #4]	; (1b59c <nmi_get_chipid+0xa8>)
   1b596:	601a      	str	r2, [r3, #0]
			return 0;
   1b598:	e7b4      	b.n	1b504 <nmi_get_chipid+0x10>
   1b59a:	46c0      	nop			; (mov r8, r8)
   1b59c:	20003ce8 	.word	0x20003ce8
   1b5a0:	0001b92d 	.word	0x0001b92d
   1b5a4:	000013f4 	.word	0x000013f4
   1b5a8:	001002a0 	.word	0x001002a0
   1b5ac:	001002b0 	.word	0x001002b0
   1b5b0:	001000f0 	.word	0x001000f0
   1b5b4:	fff0ffff 	.word	0xfff0ffff
   1b5b8:	001002a1 	.word	0x001002a1
   1b5bc:	001002b2 	.word	0x001002b2
   1b5c0:	001002b1 	.word	0x001002b1

0001b5c4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   1b5c4:	b530      	push	{r4, r5, lr}
   1b5c6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b5c8:	4c16      	ldr	r4, [pc, #88]	; (1b624 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
   1b5ca:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b5cc:	a901      	add	r1, sp, #4
   1b5ce:	2010      	movs	r0, #16
   1b5d0:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
   1b5d2:	2800      	cmp	r0, #0
   1b5d4:	d11c      	bne.n	1b610 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
   1b5d6:	9b01      	ldr	r3, [sp, #4]
   1b5d8:	422b      	tst	r3, r5
   1b5da:	d1f7      	bne.n	1b5cc <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b5dc:	a901      	add	r1, sp, #4
   1b5de:	3001      	adds	r0, #1
   1b5e0:	4b10      	ldr	r3, [pc, #64]	; (1b624 <chip_sleep+0x60>)
   1b5e2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	d113      	bne.n	1b610 <chip_sleep+0x4c>
	if(reg & NBIT1)
   1b5e8:	9901      	ldr	r1, [sp, #4]
   1b5ea:	078b      	lsls	r3, r1, #30
   1b5ec:	d507      	bpl.n	1b5fe <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
   1b5ee:	2302      	movs	r3, #2
   1b5f0:	4399      	bics	r1, r3
   1b5f2:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   1b5f4:	3001      	adds	r0, #1
   1b5f6:	4b0c      	ldr	r3, [pc, #48]	; (1b628 <chip_sleep+0x64>)
   1b5f8:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
   1b5fa:	2800      	cmp	r0, #0
   1b5fc:	d108      	bne.n	1b610 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b5fe:	a901      	add	r1, sp, #4
   1b600:	200b      	movs	r0, #11
   1b602:	4b08      	ldr	r3, [pc, #32]	; (1b624 <chip_sleep+0x60>)
   1b604:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b606:	2800      	cmp	r0, #0
   1b608:	d102      	bne.n	1b610 <chip_sleep+0x4c>
	if(reg & NBIT0)
   1b60a:	9901      	ldr	r1, [sp, #4]
   1b60c:	07cb      	lsls	r3, r1, #31
   1b60e:	d401      	bmi.n	1b614 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
   1b610:	b003      	add	sp, #12
   1b612:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
   1b614:	2301      	movs	r3, #1
   1b616:	4399      	bics	r1, r3
   1b618:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   1b61a:	300b      	adds	r0, #11
   1b61c:	4b02      	ldr	r3, [pc, #8]	; (1b628 <chip_sleep+0x64>)
   1b61e:	4798      	blx	r3
   1b620:	e7f6      	b.n	1b610 <chip_sleep+0x4c>
   1b622:	46c0      	nop			; (mov r8, r8)
   1b624:	0001b92d 	.word	0x0001b92d
   1b628:	0001b939 	.word	0x0001b939

0001b62c <chip_wake>:
sint8 chip_wake(void)
{
   1b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b62e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   1b630:	2300      	movs	r3, #0
   1b632:	9301      	str	r3, [sp, #4]
   1b634:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b636:	a901      	add	r1, sp, #4
   1b638:	200b      	movs	r0, #11
   1b63a:	4b27      	ldr	r3, [pc, #156]	; (1b6d8 <chip_wake+0xac>)
   1b63c:	4798      	blx	r3
   1b63e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b640:	d12e      	bne.n	1b6a0 <chip_wake+0x74>
	
	if(!(reg & NBIT0))
   1b642:	9901      	ldr	r1, [sp, #4]
   1b644:	07cb      	lsls	r3, r1, #31
   1b646:	d406      	bmi.n	1b656 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   1b648:	2301      	movs	r3, #1
   1b64a:	4319      	orrs	r1, r3
   1b64c:	200b      	movs	r0, #11
   1b64e:	4b23      	ldr	r3, [pc, #140]	; (1b6dc <chip_wake+0xb0>)
   1b650:	4798      	blx	r3
   1b652:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b654:	d124      	bne.n	1b6a0 <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b656:	a901      	add	r1, sp, #4
   1b658:	2001      	movs	r0, #1
   1b65a:	4b1f      	ldr	r3, [pc, #124]	; (1b6d8 <chip_wake+0xac>)
   1b65c:	4798      	blx	r3
   1b65e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b660:	d11e      	bne.n	1b6a0 <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   1b662:	9901      	ldr	r1, [sp, #4]
   1b664:	078b      	lsls	r3, r1, #30
   1b666:	d51e      	bpl.n	1b6a6 <chip_wake+0x7a>
{
   1b668:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b66a:	4f1b      	ldr	r7, [pc, #108]	; (1b6d8 <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
   1b66c:	4e1c      	ldr	r6, [pc, #112]	; (1b6e0 <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b66e:	4669      	mov	r1, sp
   1b670:	200f      	movs	r0, #15
   1b672:	47b8      	blx	r7
   1b674:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
   1b676:	d11e      	bne.n	1b6b6 <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
   1b678:	9b00      	ldr	r3, [sp, #0]
   1b67a:	075b      	lsls	r3, r3, #29
   1b67c:	d428      	bmi.n	1b6d0 <chip_wake+0xa4>
		nm_bsp_sleep(2);
   1b67e:	2002      	movs	r0, #2
   1b680:	47b0      	blx	r6
   1b682:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
   1b684:	2d00      	cmp	r5, #0
   1b686:	d1f2      	bne.n	1b66e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
   1b688:	22ad      	movs	r2, #173	; 0xad
   1b68a:	0052      	lsls	r2, r2, #1
   1b68c:	4915      	ldr	r1, [pc, #84]	; (1b6e4 <chip_wake+0xb8>)
   1b68e:	4816      	ldr	r0, [pc, #88]	; (1b6e8 <chip_wake+0xbc>)
   1b690:	4c16      	ldr	r4, [pc, #88]	; (1b6ec <chip_wake+0xc0>)
   1b692:	47a0      	blx	r4
   1b694:	4816      	ldr	r0, [pc, #88]	; (1b6f0 <chip_wake+0xc4>)
   1b696:	47a0      	blx	r4
   1b698:	4816      	ldr	r0, [pc, #88]	; (1b6f4 <chip_wake+0xc8>)
   1b69a:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
   1b69c:	2404      	movs	r4, #4
   1b69e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
   1b6a0:	0020      	movs	r0, r4
   1b6a2:	b003      	add	sp, #12
   1b6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   1b6a6:	2302      	movs	r3, #2
   1b6a8:	4319      	orrs	r1, r3
   1b6aa:	2001      	movs	r0, #1
   1b6ac:	4b0b      	ldr	r3, [pc, #44]	; (1b6dc <chip_wake+0xb0>)
   1b6ae:	4798      	blx	r3
   1b6b0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   1b6b2:	d0d9      	beq.n	1b668 <chip_wake+0x3c>
   1b6b4:	e7f4      	b.n	1b6a0 <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   1b6b6:	22a8      	movs	r2, #168	; 0xa8
   1b6b8:	0052      	lsls	r2, r2, #1
   1b6ba:	490a      	ldr	r1, [pc, #40]	; (1b6e4 <chip_wake+0xb8>)
   1b6bc:	480a      	ldr	r0, [pc, #40]	; (1b6e8 <chip_wake+0xbc>)
   1b6be:	4d0b      	ldr	r5, [pc, #44]	; (1b6ec <chip_wake+0xc0>)
   1b6c0:	47a8      	blx	r5
   1b6c2:	9a00      	ldr	r2, [sp, #0]
   1b6c4:	0021      	movs	r1, r4
   1b6c6:	480c      	ldr	r0, [pc, #48]	; (1b6f8 <chip_wake+0xcc>)
   1b6c8:	47a8      	blx	r5
   1b6ca:	480a      	ldr	r0, [pc, #40]	; (1b6f4 <chip_wake+0xc8>)
   1b6cc:	47a8      	blx	r5
			goto _WAKE_EXIT;
   1b6ce:	e7e7      	b.n	1b6a0 <chip_wake+0x74>
	nm_bus_reset();
   1b6d0:	4b0a      	ldr	r3, [pc, #40]	; (1b6fc <chip_wake+0xd0>)
   1b6d2:	4798      	blx	r3
   1b6d4:	e7e4      	b.n	1b6a0 <chip_wake+0x74>
   1b6d6:	46c0      	nop			; (mov r8, r8)
   1b6d8:	0001b92d 	.word	0x0001b92d
   1b6dc:	0001b939 	.word	0x0001b939
   1b6e0:	0001a221 	.word	0x0001a221
   1b6e4:	00029aa0 	.word	0x00029aa0
   1b6e8:	00029548 	.word	0x00029548
   1b6ec:	0001905d 	.word	0x0001905d
   1b6f0:	00029aec 	.word	0x00029aec
   1b6f4:	00029570 	.word	0x00029570
   1b6f8:	00029ad4 	.word	0x00029ad4
   1b6fc:	0001b915 	.word	0x0001b915

0001b700 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   1b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b702:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b704:	4d2c      	ldr	r5, [pc, #176]	; (1b7b8 <wait_for_bootrom+0xb8>)
   1b706:	4c2d      	ldr	r4, [pc, #180]	; (1b7bc <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b708:	4e2d      	ldr	r6, [pc, #180]	; (1b7c0 <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b70a:	0028      	movs	r0, r5
   1b70c:	47a0      	blx	r4
		if (reg & 0x80000000) {
   1b70e:	2800      	cmp	r0, #0
   1b710:	db02      	blt.n	1b718 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b712:	2001      	movs	r0, #1
   1b714:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b716:	e7f8      	b.n	1b70a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   1b718:	482a      	ldr	r0, [pc, #168]	; (1b7c4 <wait_for_bootrom+0xc4>)
   1b71a:	4b28      	ldr	r3, [pc, #160]	; (1b7bc <wait_for_bootrom+0xbc>)
   1b71c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   1b71e:	07c3      	lsls	r3, r0, #31
   1b720:	d409      	bmi.n	1b736 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
   1b722:	4e27      	ldr	r6, [pc, #156]	; (1b7c0 <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
   1b724:	4c28      	ldr	r4, [pc, #160]	; (1b7c8 <wait_for_bootrom+0xc8>)
   1b726:	4d25      	ldr	r5, [pc, #148]	; (1b7bc <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
   1b728:	2001      	movs	r0, #1
   1b72a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
   1b72c:	0020      	movs	r0, r4
   1b72e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
   1b730:	4b26      	ldr	r3, [pc, #152]	; (1b7cc <wait_for_bootrom+0xcc>)
   1b732:	4298      	cmp	r0, r3
   1b734:	d1f8      	bne.n	1b728 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   1b736:	2f02      	cmp	r7, #2
   1b738:	d020      	beq.n	1b77c <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   1b73a:	2f03      	cmp	r7, #3
   1b73c:	d028      	beq.n	1b790 <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   1b73e:	2f04      	cmp	r7, #4
   1b740:	d02f      	beq.n	1b7a2 <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b742:	4923      	ldr	r1, [pc, #140]	; (1b7d0 <wait_for_bootrom+0xd0>)
   1b744:	4823      	ldr	r0, [pc, #140]	; (1b7d4 <wait_for_bootrom+0xd4>)
   1b746:	4b24      	ldr	r3, [pc, #144]	; (1b7d8 <wait_for_bootrom+0xd8>)
   1b748:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
   1b74a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   1b74c:	4b23      	ldr	r3, [pc, #140]	; (1b7dc <wait_for_bootrom+0xdc>)
   1b74e:	4798      	blx	r3
   1b750:	0500      	lsls	r0, r0, #20
   1b752:	0d00      	lsrs	r0, r0, #20
   1b754:	4b22      	ldr	r3, [pc, #136]	; (1b7e0 <wait_for_bootrom+0xe0>)
   1b756:	4298      	cmp	r0, r3
   1b758:	d829      	bhi.n	1b7ae <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
   1b75a:	0020      	movs	r0, r4
   1b75c:	4b21      	ldr	r3, [pc, #132]	; (1b7e4 <wait_for_bootrom+0xe4>)
   1b75e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   1b760:	4821      	ldr	r0, [pc, #132]	; (1b7e8 <wait_for_bootrom+0xe8>)
   1b762:	4c22      	ldr	r4, [pc, #136]	; (1b7ec <wait_for_bootrom+0xec>)
   1b764:	47a0      	blx	r4
   1b766:	491a      	ldr	r1, [pc, #104]	; (1b7d0 <wait_for_bootrom+0xd0>)
   1b768:	4821      	ldr	r0, [pc, #132]	; (1b7f0 <wait_for_bootrom+0xf0>)
   1b76a:	47a0      	blx	r4
   1b76c:	4821      	ldr	r0, [pc, #132]	; (1b7f4 <wait_for_bootrom+0xf4>)
   1b76e:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   1b770:	4921      	ldr	r1, [pc, #132]	; (1b7f8 <wait_for_bootrom+0xf8>)
   1b772:	4815      	ldr	r0, [pc, #84]	; (1b7c8 <wait_for_bootrom+0xc8>)
   1b774:	4b18      	ldr	r3, [pc, #96]	; (1b7d8 <wait_for_bootrom+0xd8>)
   1b776:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
   1b778:	2000      	movs	r0, #0
   1b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b77c:	491f      	ldr	r1, [pc, #124]	; (1b7fc <wait_for_bootrom+0xfc>)
   1b77e:	4820      	ldr	r0, [pc, #128]	; (1b800 <wait_for_bootrom+0x100>)
   1b780:	4c15      	ldr	r4, [pc, #84]	; (1b7d8 <wait_for_bootrom+0xd8>)
   1b782:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
   1b784:	2180      	movs	r1, #128	; 0x80
   1b786:	0349      	lsls	r1, r1, #13
   1b788:	4812      	ldr	r0, [pc, #72]	; (1b7d4 <wait_for_bootrom+0xd4>)
   1b78a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b78c:	2400      	movs	r4, #0
   1b78e:	e7dd      	b.n	1b74c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b790:	491a      	ldr	r1, [pc, #104]	; (1b7fc <wait_for_bootrom+0xfc>)
   1b792:	481b      	ldr	r0, [pc, #108]	; (1b800 <wait_for_bootrom+0x100>)
   1b794:	4c10      	ldr	r4, [pc, #64]	; (1b7d8 <wait_for_bootrom+0xd8>)
   1b796:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
   1b798:	2100      	movs	r1, #0
   1b79a:	480e      	ldr	r0, [pc, #56]	; (1b7d4 <wait_for_bootrom+0xd4>)
   1b79c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b79e:	2400      	movs	r4, #0
   1b7a0:	e7d4      	b.n	1b74c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b7a2:	490b      	ldr	r1, [pc, #44]	; (1b7d0 <wait_for_bootrom+0xd0>)
   1b7a4:	480b      	ldr	r0, [pc, #44]	; (1b7d4 <wait_for_bootrom+0xd4>)
   1b7a6:	4b0c      	ldr	r3, [pc, #48]	; (1b7d8 <wait_for_bootrom+0xd8>)
   1b7a8:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   1b7aa:	2480      	movs	r4, #128	; 0x80
   1b7ac:	e7ce      	b.n	1b74c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   1b7ae:	2002      	movs	r0, #2
   1b7b0:	4320      	orrs	r0, r4
   1b7b2:	4b0c      	ldr	r3, [pc, #48]	; (1b7e4 <wait_for_bootrom+0xe4>)
   1b7b4:	4798      	blx	r3
   1b7b6:	e7d3      	b.n	1b760 <wait_for_bootrom+0x60>
   1b7b8:	00001014 	.word	0x00001014
   1b7bc:	0001b921 	.word	0x0001b921
   1b7c0:	0001a221 	.word	0x0001a221
   1b7c4:	000207bc 	.word	0x000207bc
   1b7c8:	000c000c 	.word	0x000c000c
   1b7cc:	10add09e 	.word	0x10add09e
   1b7d0:	13301354 	.word	0x13301354
   1b7d4:	0000108c 	.word	0x0000108c
   1b7d8:	0001b939 	.word	0x0001b939
   1b7dc:	0001b4f5 	.word	0x0001b4f5
   1b7e0:	0000039f 	.word	0x0000039f
   1b7e4:	0001b461 	.word	0x0001b461
   1b7e8:	00029884 	.word	0x00029884
   1b7ec:	0001905d 	.word	0x0001905d
   1b7f0:	00029b08 	.word	0x00029b08
   1b7f4:	00029570 	.word	0x00029570
   1b7f8:	ef522f61 	.word	0xef522f61
   1b7fc:	3c1cd57d 	.word	0x3c1cd57d
   1b800:	000207ac 	.word	0x000207ac

0001b804 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   1b804:	b570      	push	{r4, r5, r6, lr}
   1b806:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
   1b808:	4b15      	ldr	r3, [pc, #84]	; (1b860 <wait_for_firmware_start+0x5c>)
   1b80a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   1b80c:	4b15      	ldr	r3, [pc, #84]	; (1b864 <wait_for_firmware_start+0x60>)
   1b80e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   1b810:	3802      	subs	r0, #2
   1b812:	2801      	cmp	r0, #1
   1b814:	d911      	bls.n	1b83a <wait_for_firmware_start+0x36>
{
   1b816:	2401      	movs	r4, #1
   1b818:	4264      	negs	r4, r4
   1b81a:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b81c:	4e12      	ldr	r6, [pc, #72]	; (1b868 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   1b81e:	4d13      	ldr	r5, [pc, #76]	; (1b86c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
   1b820:	9b00      	ldr	r3, [sp, #0]
   1b822:	4298      	cmp	r0, r3
   1b824:	d00e      	beq.n	1b844 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b826:	2002      	movs	r0, #2
   1b828:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
   1b82a:	9801      	ldr	r0, [sp, #4]
   1b82c:	47a8      	blx	r5
   1b82e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
   1b830:	2c00      	cmp	r4, #0
   1b832:	d1f5      	bne.n	1b820 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   1b834:	2005      	movs	r0, #5
   1b836:	4240      	negs	r0, r0
   1b838:	e009      	b.n	1b84e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
   1b83a:	4b0d      	ldr	r3, [pc, #52]	; (1b870 <wait_for_firmware_start+0x6c>)
   1b83c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   1b83e:	4b0d      	ldr	r3, [pc, #52]	; (1b874 <wait_for_firmware_start+0x70>)
   1b840:	9300      	str	r3, [sp, #0]
   1b842:	e7e8      	b.n	1b816 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b844:	9a00      	ldr	r2, [sp, #0]
   1b846:	4b07      	ldr	r3, [pc, #28]	; (1b864 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
   1b848:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b84a:	429a      	cmp	r2, r3
   1b84c:	d001      	beq.n	1b852 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
   1b84e:	b002      	add	sp, #8
   1b850:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
   1b852:	2100      	movs	r1, #0
   1b854:	4802      	ldr	r0, [pc, #8]	; (1b860 <wait_for_firmware_start+0x5c>)
   1b856:	4b08      	ldr	r3, [pc, #32]	; (1b878 <wait_for_firmware_start+0x74>)
   1b858:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
   1b85a:	2000      	movs	r0, #0
   1b85c:	e7f7      	b.n	1b84e <wait_for_firmware_start+0x4a>
   1b85e:	46c0      	nop			; (mov r8, r8)
   1b860:	0000108c 	.word	0x0000108c
   1b864:	02532636 	.word	0x02532636
   1b868:	0001a221 	.word	0x0001a221
   1b86c:	0001b921 	.word	0x0001b921
   1b870:	000207ac 	.word	0x000207ac
   1b874:	d75dc1c3 	.word	0xd75dc1c3
   1b878:	0001b939 	.word	0x0001b939

0001b87c <chip_deinit>:

sint8 chip_deinit(void)
{
   1b87c:	b530      	push	{r4, r5, lr}
   1b87e:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b880:	2300      	movs	r3, #0
   1b882:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   1b884:	a901      	add	r1, sp, #4
   1b886:	20a0      	movs	r0, #160	; 0xa0
   1b888:	0140      	lsls	r0, r0, #5
   1b88a:	4b12      	ldr	r3, [pc, #72]	; (1b8d4 <chip_deinit+0x58>)
   1b88c:	4798      	blx	r3
   1b88e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b890:	d113      	bne.n	1b8ba <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
   1b892:	4911      	ldr	r1, [pc, #68]	; (1b8d8 <chip_deinit+0x5c>)
   1b894:	9b01      	ldr	r3, [sp, #4]
   1b896:	4019      	ands	r1, r3
   1b898:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   1b89a:	20a0      	movs	r0, #160	; 0xa0
   1b89c:	0140      	lsls	r0, r0, #5
   1b89e:	4b0f      	ldr	r3, [pc, #60]	; (1b8dc <chip_deinit+0x60>)
   1b8a0:	4798      	blx	r3
   1b8a2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b8a4:	d012      	beq.n	1b8cc <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b8a6:	4a0e      	ldr	r2, [pc, #56]	; (1b8e0 <chip_deinit+0x64>)
   1b8a8:	490e      	ldr	r1, [pc, #56]	; (1b8e4 <chip_deinit+0x68>)
   1b8aa:	480f      	ldr	r0, [pc, #60]	; (1b8e8 <chip_deinit+0x6c>)
   1b8ac:	4d0f      	ldr	r5, [pc, #60]	; (1b8ec <chip_deinit+0x70>)
   1b8ae:	47a8      	blx	r5
   1b8b0:	480f      	ldr	r0, [pc, #60]	; (1b8f0 <chip_deinit+0x74>)
   1b8b2:	47a8      	blx	r5
   1b8b4:	480f      	ldr	r0, [pc, #60]	; (1b8f4 <chip_deinit+0x78>)
   1b8b6:	47a8      	blx	r5
		goto ERR1;
   1b8b8:	e008      	b.n	1b8cc <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b8ba:	4a0f      	ldr	r2, [pc, #60]	; (1b8f8 <chip_deinit+0x7c>)
   1b8bc:	4909      	ldr	r1, [pc, #36]	; (1b8e4 <chip_deinit+0x68>)
   1b8be:	480a      	ldr	r0, [pc, #40]	; (1b8e8 <chip_deinit+0x6c>)
   1b8c0:	4d0a      	ldr	r5, [pc, #40]	; (1b8ec <chip_deinit+0x70>)
   1b8c2:	47a8      	blx	r5
   1b8c4:	480a      	ldr	r0, [pc, #40]	; (1b8f0 <chip_deinit+0x74>)
   1b8c6:	47a8      	blx	r5
   1b8c8:	480a      	ldr	r0, [pc, #40]	; (1b8f4 <chip_deinit+0x78>)
   1b8ca:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
   1b8cc:	0020      	movs	r0, r4
   1b8ce:	b003      	add	sp, #12
   1b8d0:	bd30      	pop	{r4, r5, pc}
   1b8d2:	46c0      	nop			; (mov r8, r8)
   1b8d4:	0001b92d 	.word	0x0001b92d
   1b8d8:	fffffbff 	.word	0xfffffbff
   1b8dc:	0001b939 	.word	0x0001b939
   1b8e0:	00000207 	.word	0x00000207
   1b8e4:	00029aac 	.word	0x00029aac
   1b8e8:	00029548 	.word	0x00029548
   1b8ec:	0001905d 	.word	0x0001905d
   1b8f0:	00029ab8 	.word	0x00029ab8
   1b8f4:	00029570 	.word	0x00029570
   1b8f8:	00000201 	.word	0x00000201

0001b8fc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   1b8fc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
   1b8fe:	4b01      	ldr	r3, [pc, #4]	; (1b904 <nm_bus_iface_init+0x8>)
   1b900:	4798      	blx	r3
	return ret;
}
   1b902:	bd10      	pop	{r4, pc}
   1b904:	0001a2a9 	.word	0x0001a2a9

0001b908 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   1b908:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
   1b90a:	4b01      	ldr	r3, [pc, #4]	; (1b910 <nm_bus_iface_deinit+0x8>)
   1b90c:	4798      	blx	r3

	return ret;
}
   1b90e:	bd10      	pop	{r4, pc}
   1b910:	0001a4f1 	.word	0x0001a4f1

0001b914 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   1b914:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   1b916:	4b01      	ldr	r3, [pc, #4]	; (1b91c <nm_bus_reset+0x8>)
   1b918:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   1b91a:	bd10      	pop	{r4, pc}
   1b91c:	0001c64d 	.word	0x0001c64d

0001b920 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   1b920:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   1b922:	4b01      	ldr	r3, [pc, #4]	; (1b928 <nm_read_reg+0x8>)
   1b924:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   1b926:	bd10      	pop	{r4, pc}
   1b928:	0001c685 	.word	0x0001c685

0001b92c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1b92c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   1b92e:	4b01      	ldr	r3, [pc, #4]	; (1b934 <nm_read_reg_with_ret+0x8>)
   1b930:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   1b932:	bd10      	pop	{r4, pc}
   1b934:	0001c699 	.word	0x0001c699

0001b938 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1b938:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   1b93a:	4b01      	ldr	r3, [pc, #4]	; (1b940 <nm_write_reg+0x8>)
   1b93c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   1b93e:	bd10      	pop	{r4, pc}
   1b940:	0001c6b1 	.word	0x0001c6b1

0001b944 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b944:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b946:	46d6      	mov	lr, sl
   1b948:	464f      	mov	r7, r9
   1b94a:	4646      	mov	r6, r8
   1b94c:	b5c0      	push	{r6, r7, lr}
   1b94e:	b082      	sub	sp, #8
   1b950:	4680      	mov	r8, r0
   1b952:	4689      	mov	r9, r1
   1b954:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b956:	4b13      	ldr	r3, [pc, #76]	; (1b9a4 <nm_read_block+0x60>)
   1b958:	881f      	ldrh	r7, [r3, #0]
   1b95a:	3f08      	subs	r7, #8
   1b95c:	b2bb      	uxth	r3, r7
   1b95e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b960:	001e      	movs	r6, r3
   1b962:	0004      	movs	r4, r0
   1b964:	429a      	cmp	r2, r3
   1b966:	d91a      	bls.n	1b99e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b968:	4b0f      	ldr	r3, [pc, #60]	; (1b9a8 <nm_read_block+0x64>)
   1b96a:	469a      	mov	sl, r3
   1b96c:	1a37      	subs	r7, r6, r0
   1b96e:	4643      	mov	r3, r8
   1b970:	1ae1      	subs	r1, r4, r3
   1b972:	4449      	add	r1, r9
   1b974:	9a01      	ldr	r2, [sp, #4]
   1b976:	0020      	movs	r0, r4
   1b978:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b97a:	2800      	cmp	r0, #0
   1b97c:	d109      	bne.n	1b992 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b97e:	1bad      	subs	r5, r5, r6
   1b980:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b982:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b984:	42b5      	cmp	r5, r6
   1b986:	d8f2      	bhi.n	1b96e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b988:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b98a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b98c:	0020      	movs	r0, r4
   1b98e:	4b06      	ldr	r3, [pc, #24]	; (1b9a8 <nm_read_block+0x64>)
   1b990:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b992:	b002      	add	sp, #8
   1b994:	bc1c      	pop	{r2, r3, r4}
   1b996:	4690      	mov	r8, r2
   1b998:	4699      	mov	r9, r3
   1b99a:	46a2      	mov	sl, r4
   1b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1b99e:	2100      	movs	r1, #0
   1b9a0:	e7f2      	b.n	1b988 <nm_read_block+0x44>
   1b9a2:	46c0      	nop			; (mov r8, r8)
   1b9a4:	200000d8 	.word	0x200000d8
   1b9a8:	0001c7dd 	.word	0x0001c7dd

0001b9ac <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9ae:	46d6      	mov	lr, sl
   1b9b0:	464f      	mov	r7, r9
   1b9b2:	4646      	mov	r6, r8
   1b9b4:	b5c0      	push	{r6, r7, lr}
   1b9b6:	b082      	sub	sp, #8
   1b9b8:	4680      	mov	r8, r0
   1b9ba:	4689      	mov	r9, r1
   1b9bc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b9be:	4b13      	ldr	r3, [pc, #76]	; (1ba0c <nm_write_block+0x60>)
   1b9c0:	881f      	ldrh	r7, [r3, #0]
   1b9c2:	3f08      	subs	r7, #8
   1b9c4:	b2bb      	uxth	r3, r7
   1b9c6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b9c8:	001e      	movs	r6, r3
   1b9ca:	0004      	movs	r4, r0
   1b9cc:	429a      	cmp	r2, r3
   1b9ce:	d91a      	bls.n	1ba06 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b9d0:	4b0f      	ldr	r3, [pc, #60]	; (1ba10 <nm_write_block+0x64>)
   1b9d2:	469a      	mov	sl, r3
   1b9d4:	1a37      	subs	r7, r6, r0
   1b9d6:	4643      	mov	r3, r8
   1b9d8:	1ae1      	subs	r1, r4, r3
   1b9da:	4449      	add	r1, r9
   1b9dc:	9a01      	ldr	r2, [sp, #4]
   1b9de:	0020      	movs	r0, r4
   1b9e0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b9e2:	2800      	cmp	r0, #0
   1b9e4:	d109      	bne.n	1b9fa <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b9e6:	1bad      	subs	r5, r5, r6
   1b9e8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b9ea:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b9ec:	42b5      	cmp	r5, r6
   1b9ee:	d8f2      	bhi.n	1b9d6 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b9f0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b9f2:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b9f4:	0020      	movs	r0, r4
   1b9f6:	4b06      	ldr	r3, [pc, #24]	; (1ba10 <nm_write_block+0x64>)
   1b9f8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b9fa:	b002      	add	sp, #8
   1b9fc:	bc1c      	pop	{r2, r3, r4}
   1b9fe:	4690      	mov	r8, r2
   1ba00:	4699      	mov	r9, r3
   1ba02:	46a2      	mov	sl, r4
   1ba04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1ba06:	2100      	movs	r1, #0
   1ba08:	e7f2      	b.n	1b9f0 <nm_write_block+0x44>
   1ba0a:	46c0      	nop			; (mov r8, r8)
   1ba0c:	200000d8 	.word	0x200000d8
   1ba10:	0001c8a9 	.word	0x0001c8a9

0001ba14 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   1ba14:	b570      	push	{r4, r5, r6, lr}
   1ba16:	b084      	sub	sp, #16
   1ba18:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   1ba1a:	2300      	movs	r3, #0
   1ba1c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
   1ba1e:	2208      	movs	r2, #8
   1ba20:	2100      	movs	r1, #0
   1ba22:	a801      	add	r0, sp, #4
   1ba24:	4b2d      	ldr	r3, [pc, #180]	; (1badc <nm_get_firmware_full_info+0xc8>)
   1ba26:	4798      	blx	r3
	if (pstrRev != NULL)
   1ba28:	2c00      	cmp	r4, #0
   1ba2a:	d044      	beq.n	1bab6 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   1ba2c:	2228      	movs	r2, #40	; 0x28
   1ba2e:	2100      	movs	r1, #0
   1ba30:	0020      	movs	r0, r4
   1ba32:	4b2b      	ldr	r3, [pc, #172]	; (1bae0 <nm_get_firmware_full_info+0xcc>)
   1ba34:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   1ba36:	a903      	add	r1, sp, #12
   1ba38:	482a      	ldr	r0, [pc, #168]	; (1bae4 <nm_get_firmware_full_info+0xd0>)
   1ba3a:	4b2b      	ldr	r3, [pc, #172]	; (1bae8 <nm_get_firmware_full_info+0xd4>)
   1ba3c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
   1ba3e:	2800      	cmp	r0, #0
   1ba40:	d13a      	bne.n	1bab8 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
   1ba42:	9b03      	ldr	r3, [sp, #12]
   1ba44:	2b00      	cmp	r3, #0
   1ba46:	d039      	beq.n	1babc <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   1ba48:	20c0      	movs	r0, #192	; 0xc0
   1ba4a:	0280      	lsls	r0, r0, #10
   1ba4c:	4318      	orrs	r0, r3
   1ba4e:	2208      	movs	r2, #8
   1ba50:	a901      	add	r1, sp, #4
   1ba52:	4b26      	ldr	r3, [pc, #152]	; (1baec <nm_get_firmware_full_info+0xd8>)
   1ba54:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
   1ba56:	2800      	cmp	r0, #0
   1ba58:	d12e      	bne.n	1bab8 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
   1ba5a:	9b02      	ldr	r3, [sp, #8]
   1ba5c:	0418      	lsls	r0, r3, #16
   1ba5e:	0c00      	lsrs	r0, r0, #16
   1ba60:	9003      	str	r0, [sp, #12]
					if(reg != 0)
   1ba62:	d02e      	beq.n	1bac2 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   1ba64:	23c0      	movs	r3, #192	; 0xc0
   1ba66:	029b      	lsls	r3, r3, #10
   1ba68:	4318      	orrs	r0, r3
   1ba6a:	2228      	movs	r2, #40	; 0x28
   1ba6c:	0021      	movs	r1, r4
   1ba6e:	4b1f      	ldr	r3, [pc, #124]	; (1baec <nm_get_firmware_full_info+0xd8>)
   1ba70:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
   1ba72:	2800      	cmp	r0, #0
   1ba74:	d120      	bne.n	1bab8 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   1ba76:	7921      	ldrb	r1, [r4, #4]
   1ba78:	0209      	lsls	r1, r1, #8
   1ba7a:	79a2      	ldrb	r2, [r4, #6]
   1ba7c:	230f      	movs	r3, #15
   1ba7e:	401a      	ands	r2, r3
   1ba80:	430a      	orrs	r2, r1
   1ba82:	7961      	ldrb	r1, [r4, #5]
   1ba84:	0109      	lsls	r1, r1, #4
   1ba86:	25ff      	movs	r5, #255	; 0xff
   1ba88:	4029      	ands	r1, r5
   1ba8a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   1ba8c:	79e1      	ldrb	r1, [r4, #7]
   1ba8e:	0209      	lsls	r1, r1, #8
   1ba90:	7a66      	ldrb	r6, [r4, #9]
   1ba92:	4033      	ands	r3, r6
   1ba94:	430b      	orrs	r3, r1
   1ba96:	7a21      	ldrb	r1, [r4, #8]
   1ba98:	0109      	lsls	r1, r1, #4
   1ba9a:	400d      	ands	r5, r1
   1ba9c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   1ba9e:	2a00      	cmp	r2, #0
   1baa0:	d012      	beq.n	1bac8 <nm_get_firmware_full_info+0xb4>
   1baa2:	2b00      	cmp	r3, #0
   1baa4:	d013      	beq.n	1bace <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   1baa6:	4912      	ldr	r1, [pc, #72]	; (1baf0 <nm_get_firmware_full_info+0xdc>)
   1baa8:	428b      	cmp	r3, r1
   1baaa:	d813      	bhi.n	1bad4 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
   1baac:	4b11      	ldr	r3, [pc, #68]	; (1baf4 <nm_get_firmware_full_info+0xe0>)
   1baae:	429a      	cmp	r2, r3
   1bab0:	d802      	bhi.n	1bab8 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   1bab2:	380d      	subs	r0, #13
   1bab4:	e000      	b.n	1bab8 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
   1bab6:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
   1bab8:	b004      	add	sp, #16
   1baba:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
   1babc:	200c      	movs	r0, #12
   1babe:	4240      	negs	r0, r0
   1bac0:	e7fa      	b.n	1bab8 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
   1bac2:	200c      	movs	r0, #12
   1bac4:	4240      	negs	r0, r0
   1bac6:	e7f7      	b.n	1bab8 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
   1bac8:	200c      	movs	r0, #12
   1baca:	4240      	negs	r0, r0
   1bacc:	e7f4      	b.n	1bab8 <nm_get_firmware_full_info+0xa4>
   1bace:	200c      	movs	r0, #12
   1bad0:	4240      	negs	r0, r0
   1bad2:	e7f1      	b.n	1bab8 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
   1bad4:	200d      	movs	r0, #13
   1bad6:	4240      	negs	r0, r0
   1bad8:	e7ee      	b.n	1bab8 <nm_get_firmware_full_info+0xa4>
   1bada:	46c0      	nop			; (mov r8, r8)
   1badc:	00026253 	.word	0x00026253
   1bae0:	0001a571 	.word	0x0001a571
   1bae4:	000c0008 	.word	0x000c0008
   1bae8:	0001b92d 	.word	0x0001b92d
   1baec:	0001b945 	.word	0x0001b945
   1baf0:	00001354 	.word	0x00001354
   1baf4:	00001353 	.word	0x00001353

0001baf8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   1baf8:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
   1bafa:	2800      	cmp	r0, #0
   1bafc:	d034      	beq.n	1bb68 <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
   1bafe:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   1bb00:	1e6b      	subs	r3, r5, #1
   1bb02:	2b03      	cmp	r3, #3
   1bb04:	d900      	bls.n	1bb08 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   1bb06:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
   1bb08:	2000      	movs	r0, #0
   1bb0a:	4b1e      	ldr	r3, [pc, #120]	; (1bb84 <nm_drv_init+0x8c>)
   1bb0c:	4798      	blx	r3
   1bb0e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb10:	d12c      	bne.n	1bb6c <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   1bb12:	481d      	ldr	r0, [pc, #116]	; (1bb88 <nm_drv_init+0x90>)
   1bb14:	4c1d      	ldr	r4, [pc, #116]	; (1bb8c <nm_drv_init+0x94>)
   1bb16:	47a0      	blx	r4
   1bb18:	4b1d      	ldr	r3, [pc, #116]	; (1bb90 <nm_drv_init+0x98>)
   1bb1a:	4798      	blx	r3
   1bb1c:	0001      	movs	r1, r0
   1bb1e:	481d      	ldr	r0, [pc, #116]	; (1bb94 <nm_drv_init+0x9c>)
   1bb20:	47a0      	blx	r4
   1bb22:	481d      	ldr	r0, [pc, #116]	; (1bb98 <nm_drv_init+0xa0>)
   1bb24:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   1bb26:	4b1d      	ldr	r3, [pc, #116]	; (1bb9c <nm_drv_init+0xa4>)
   1bb28:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   1bb2a:	0028      	movs	r0, r5
   1bb2c:	4b1c      	ldr	r3, [pc, #112]	; (1bba0 <nm_drv_init+0xa8>)
   1bb2e:	4798      	blx	r3
   1bb30:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb32:	d115      	bne.n	1bb60 <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   1bb34:	0028      	movs	r0, r5
   1bb36:	4b1b      	ldr	r3, [pc, #108]	; (1bba4 <nm_drv_init+0xac>)
   1bb38:	4798      	blx	r3
   1bb3a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb3c:	d110      	bne.n	1bb60 <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   1bb3e:	3d02      	subs	r5, #2
   1bb40:	2d01      	cmp	r5, #1
   1bb42:	d90f      	bls.n	1bb64 <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   1bb44:	4b18      	ldr	r3, [pc, #96]	; (1bba8 <nm_drv_init+0xb0>)
   1bb46:	4798      	blx	r3
   1bb48:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb4a:	d00b      	beq.n	1bb64 <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
   1bb4c:	22a7      	movs	r2, #167	; 0xa7
   1bb4e:	0052      	lsls	r2, r2, #1
   1bb50:	4916      	ldr	r1, [pc, #88]	; (1bbac <nm_drv_init+0xb4>)
   1bb52:	4817      	ldr	r0, [pc, #92]	; (1bbb0 <nm_drv_init+0xb8>)
   1bb54:	4d0d      	ldr	r5, [pc, #52]	; (1bb8c <nm_drv_init+0x94>)
   1bb56:	47a8      	blx	r5
   1bb58:	4816      	ldr	r0, [pc, #88]	; (1bbb4 <nm_drv_init+0xbc>)
   1bb5a:	47a8      	blx	r5
   1bb5c:	480e      	ldr	r0, [pc, #56]	; (1bb98 <nm_drv_init+0xa0>)
   1bb5e:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
   1bb60:	4b15      	ldr	r3, [pc, #84]	; (1bbb8 <nm_drv_init+0xc0>)
   1bb62:	4798      	blx	r3
ERR1:
	return ret;
}
   1bb64:	0020      	movs	r0, r4
   1bb66:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
   1bb68:	2501      	movs	r5, #1
   1bb6a:	e7cd      	b.n	1bb08 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
   1bb6c:	2290      	movs	r2, #144	; 0x90
   1bb6e:	0052      	lsls	r2, r2, #1
   1bb70:	490e      	ldr	r1, [pc, #56]	; (1bbac <nm_drv_init+0xb4>)
   1bb72:	480f      	ldr	r0, [pc, #60]	; (1bbb0 <nm_drv_init+0xb8>)
   1bb74:	4d05      	ldr	r5, [pc, #20]	; (1bb8c <nm_drv_init+0x94>)
   1bb76:	47a8      	blx	r5
   1bb78:	4810      	ldr	r0, [pc, #64]	; (1bbbc <nm_drv_init+0xc4>)
   1bb7a:	47a8      	blx	r5
   1bb7c:	4806      	ldr	r0, [pc, #24]	; (1bb98 <nm_drv_init+0xa0>)
   1bb7e:	47a8      	blx	r5
		goto ERR1;
   1bb80:	e7f0      	b.n	1bb64 <nm_drv_init+0x6c>
   1bb82:	46c0      	nop			; (mov r8, r8)
   1bb84:	0001b8fd 	.word	0x0001b8fd
   1bb88:	00029884 	.word	0x00029884
   1bb8c:	0001905d 	.word	0x0001905d
   1bb90:	0001b4f5 	.word	0x0001b4f5
   1bb94:	00029bd8 	.word	0x00029bd8
   1bb98:	00029570 	.word	0x00029570
   1bb9c:	0001c6c9 	.word	0x0001c6c9
   1bba0:	0001b701 	.word	0x0001b701
   1bba4:	0001b805 	.word	0x0001b805
   1bba8:	0001b499 	.word	0x0001b499
   1bbac:	00029b20 	.word	0x00029b20
   1bbb0:	00029548 	.word	0x00029548
   1bbb4:	00029b9c 	.word	0x00029b9c
   1bbb8:	0001b909 	.word	0x0001b909
   1bbbc:	00029bbc 	.word	0x00029bbc

0001bbc0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   1bbc0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
   1bbc2:	4b19      	ldr	r3, [pc, #100]	; (1bc28 <nm_drv_deinit+0x68>)
   1bbc4:	4798      	blx	r3
   1bbc6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bbc8:	d10b      	bne.n	1bbe2 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1bbca:	2000      	movs	r0, #0
   1bbcc:	4b17      	ldr	r3, [pc, #92]	; (1bc2c <nm_drv_deinit+0x6c>)
   1bbce:	4798      	blx	r3
   1bbd0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bbd2:	d112      	bne.n	1bbfa <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
   1bbd4:	4b16      	ldr	r3, [pc, #88]	; (1bc30 <nm_drv_deinit+0x70>)
   1bbd6:	4798      	blx	r3
   1bbd8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bbda:	d119      	bne.n	1bc10 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   1bbdc:	4b15      	ldr	r3, [pc, #84]	; (1bc34 <nm_drv_deinit+0x74>)
   1bbde:	4798      	blx	r3
   1bbe0:	e009      	b.n	1bbf6 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   1bbe2:	2266      	movs	r2, #102	; 0x66
   1bbe4:	32ff      	adds	r2, #255	; 0xff
   1bbe6:	4914      	ldr	r1, [pc, #80]	; (1bc38 <nm_drv_deinit+0x78>)
   1bbe8:	4814      	ldr	r0, [pc, #80]	; (1bc3c <nm_drv_deinit+0x7c>)
   1bbea:	4d15      	ldr	r5, [pc, #84]	; (1bc40 <nm_drv_deinit+0x80>)
   1bbec:	47a8      	blx	r5
   1bbee:	4815      	ldr	r0, [pc, #84]	; (1bc44 <nm_drv_deinit+0x84>)
   1bbf0:	47a8      	blx	r5
   1bbf2:	4815      	ldr	r0, [pc, #84]	; (1bc48 <nm_drv_deinit+0x88>)
   1bbf4:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
   1bbf6:	0020      	movs	r0, r4
   1bbf8:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   1bbfa:	22b6      	movs	r2, #182	; 0xb6
   1bbfc:	0052      	lsls	r2, r2, #1
   1bbfe:	490e      	ldr	r1, [pc, #56]	; (1bc38 <nm_drv_deinit+0x78>)
   1bc00:	480e      	ldr	r0, [pc, #56]	; (1bc3c <nm_drv_deinit+0x7c>)
   1bc02:	4d0f      	ldr	r5, [pc, #60]	; (1bc40 <nm_drv_deinit+0x80>)
   1bc04:	47a8      	blx	r5
   1bc06:	4811      	ldr	r0, [pc, #68]	; (1bc4c <nm_drv_deinit+0x8c>)
   1bc08:	47a8      	blx	r5
   1bc0a:	480f      	ldr	r0, [pc, #60]	; (1bc48 <nm_drv_deinit+0x88>)
   1bc0c:	47a8      	blx	r5
		goto ERR1;
   1bc0e:	e7f2      	b.n	1bbf6 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
   1bc10:	22b9      	movs	r2, #185	; 0xb9
   1bc12:	0052      	lsls	r2, r2, #1
   1bc14:	4908      	ldr	r1, [pc, #32]	; (1bc38 <nm_drv_deinit+0x78>)
   1bc16:	4809      	ldr	r0, [pc, #36]	; (1bc3c <nm_drv_deinit+0x7c>)
   1bc18:	4d09      	ldr	r5, [pc, #36]	; (1bc40 <nm_drv_deinit+0x80>)
   1bc1a:	47a8      	blx	r5
   1bc1c:	480c      	ldr	r0, [pc, #48]	; (1bc50 <nm_drv_deinit+0x90>)
   1bc1e:	47a8      	blx	r5
   1bc20:	4809      	ldr	r0, [pc, #36]	; (1bc48 <nm_drv_deinit+0x88>)
   1bc22:	47a8      	blx	r5
		goto ERR1;
   1bc24:	e7e7      	b.n	1bbf6 <nm_drv_deinit+0x36>
   1bc26:	46c0      	nop			; (mov r8, r8)
   1bc28:	0001b87d 	.word	0x0001b87d
   1bc2c:	0001d41d 	.word	0x0001d41d
   1bc30:	0001b909 	.word	0x0001b909
   1bc34:	0001c675 	.word	0x0001c675
   1bc38:	00029b2c 	.word	0x00029b2c
   1bc3c:	00029548 	.word	0x00029548
   1bc40:	0001905d 	.word	0x0001905d
   1bc44:	00029b3c 	.word	0x00029b3c
   1bc48:	00029570 	.word	0x00029570
   1bc4c:	00029b5c 	.word	0x00029b5c
   1bc50:	00029b80 	.word	0x00029b80

0001bc54 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   1bc54:	b500      	push	{lr}
   1bc56:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1bc58:	ab01      	add	r3, sp, #4
   1bc5a:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
   1bc5c:	2200      	movs	r2, #0
   1bc5e:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
   1bc60:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bc62:	0019      	movs	r1, r3
   1bc64:	2003      	movs	r0, #3
   1bc66:	4b02      	ldr	r3, [pc, #8]	; (1bc70 <nmi_spi_write+0x1c>)
   1bc68:	4798      	blx	r3
}
   1bc6a:	b005      	add	sp, #20
   1bc6c:	bd00      	pop	{pc}
   1bc6e:	46c0      	nop			; (mov r8, r8)
   1bc70:	0001a3ad 	.word	0x0001a3ad

0001bc74 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   1bc74:	b570      	push	{r4, r5, r6, lr}
   1bc76:	b084      	sub	sp, #16
   1bc78:	ac08      	add	r4, sp, #32
   1bc7a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
   1bc7c:	ac01      	add	r4, sp, #4
   1bc7e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
   1bc80:	303f      	adds	r0, #63	; 0x3f
   1bc82:	b2c4      	uxtb	r4, r0
   1bc84:	2c0e      	cmp	r4, #14
   1bc86:	d900      	bls.n	1bc8a <spi_cmd+0x16>
   1bc88:	e082      	b.n	1bd90 <spi_cmd+0x11c>
   1bc8a:	00a0      	lsls	r0, r4, #2
   1bc8c:	4c4e      	ldr	r4, [pc, #312]	; (1bdc8 <spi_cmd+0x154>)
   1bc8e:	5820      	ldr	r0, [r4, r0]
   1bc90:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   1bc92:	ab01      	add	r3, sp, #4
   1bc94:	0c0a      	lsrs	r2, r1, #16
   1bc96:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bc98:	0a0a      	lsrs	r2, r1, #8
   1bc9a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1bc9c:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1bc9e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
   1bca0:	4b4a      	ldr	r3, [pc, #296]	; (1bdcc <spi_cmd+0x158>)
   1bca2:	781b      	ldrb	r3, [r3, #0]
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d075      	beq.n	1bd94 <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
   1bca8:	3901      	subs	r1, #1
   1bcaa:	b2c9      	uxtb	r1, r1
   1bcac:	e081      	b.n	1bdb2 <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
   1bcae:	0a0b      	lsrs	r3, r1, #8
   1bcb0:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bcb2:	2d00      	cmp	r5, #0
   1bcb4:	d107      	bne.n	1bcc6 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
   1bcb6:	aa01      	add	r2, sp, #4
   1bcb8:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
   1bcba:	ab01      	add	r3, sp, #4
   1bcbc:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
   1bcbe:	2200      	movs	r2, #0
   1bcc0:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcc2:	2105      	movs	r1, #5
		break;
   1bcc4:	e7ec      	b.n	1bca0 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bcc6:	2280      	movs	r2, #128	; 0x80
   1bcc8:	4252      	negs	r2, r2
   1bcca:	4313      	orrs	r3, r2
   1bccc:	aa01      	add	r2, sp, #4
   1bcce:	7053      	strb	r3, [r2, #1]
   1bcd0:	e7f3      	b.n	1bcba <spi_cmd+0x46>
		bc[1] = 0x00;
   1bcd2:	ab01      	add	r3, sp, #4
   1bcd4:	2200      	movs	r2, #0
   1bcd6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bcd8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bcda:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcdc:	2105      	movs	r1, #5
		break;
   1bcde:	e7df      	b.n	1bca0 <spi_cmd+0x2c>
		bc[1] = 0x00;
   1bce0:	ab01      	add	r3, sp, #4
   1bce2:	2200      	movs	r2, #0
   1bce4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bce6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bce8:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcea:	2105      	movs	r1, #5
		break;
   1bcec:	e7d8      	b.n	1bca0 <spi_cmd+0x2c>
		bc[1] = 0xff;
   1bcee:	ab01      	add	r3, sp, #4
   1bcf0:	22ff      	movs	r2, #255	; 0xff
   1bcf2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1bcf4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   1bcf6:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcf8:	2105      	movs	r1, #5
		break;
   1bcfa:	e7d1      	b.n	1bca0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bcfc:	aa01      	add	r2, sp, #4
   1bcfe:	0c08      	lsrs	r0, r1, #16
   1bd00:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd02:	0a08      	lsrs	r0, r1, #8
   1bd04:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bd06:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
   1bd08:	0a19      	lsrs	r1, r3, #8
   1bd0a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
   1bd0c:	7153      	strb	r3, [r2, #5]
		len = 7;
   1bd0e:	2107      	movs	r1, #7
		break;
   1bd10:	e7c6      	b.n	1bca0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bd12:	aa01      	add	r2, sp, #4
   1bd14:	0c08      	lsrs	r0, r1, #16
   1bd16:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd18:	0a08      	lsrs	r0, r1, #8
   1bd1a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bd1c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
   1bd1e:	0c19      	lsrs	r1, r3, #16
   1bd20:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
   1bd22:	0a19      	lsrs	r1, r3, #8
   1bd24:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
   1bd26:	7193      	strb	r3, [r2, #6]
		len = 8;
   1bd28:	2108      	movs	r1, #8
		break;
   1bd2a:	e7b9      	b.n	1bca0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
   1bd2c:	0a0b      	lsrs	r3, r1, #8
   1bd2e:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bd30:	2d00      	cmp	r5, #0
   1bd32:	d10c      	bne.n	1bd4e <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
   1bd34:	a801      	add	r0, sp, #4
   1bd36:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
   1bd38:	ab01      	add	r3, sp, #4
   1bd3a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   1bd3c:	0e11      	lsrs	r1, r2, #24
   1bd3e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   1bd40:	0c11      	lsrs	r1, r2, #16
   1bd42:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   1bd44:	0a11      	lsrs	r1, r2, #8
   1bd46:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
   1bd48:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bd4a:	2108      	movs	r1, #8
		break;
   1bd4c:	e7a8      	b.n	1bca0 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bd4e:	2080      	movs	r0, #128	; 0x80
   1bd50:	4240      	negs	r0, r0
   1bd52:	4303      	orrs	r3, r0
   1bd54:	a801      	add	r0, sp, #4
   1bd56:	7043      	strb	r3, [r0, #1]
   1bd58:	e7ee      	b.n	1bd38 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
   1bd5a:	ab01      	add	r3, sp, #4
   1bd5c:	0c08      	lsrs	r0, r1, #16
   1bd5e:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd60:	0a08      	lsrs	r0, r1, #8
   1bd62:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
   1bd64:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   1bd66:	0e11      	lsrs	r1, r2, #24
   1bd68:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   1bd6a:	0c11      	lsrs	r1, r2, #16
   1bd6c:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1bd6e:	0a11      	lsrs	r1, r2, #8
   1bd70:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
   1bd72:	71da      	strb	r2, [r3, #7]
		len = 9;
   1bd74:	2109      	movs	r1, #9
		break;
   1bd76:	e793      	b.n	1bca0 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1bd78:	2290      	movs	r2, #144	; 0x90
   1bd7a:	0052      	lsls	r2, r2, #1
   1bd7c:	4914      	ldr	r1, [pc, #80]	; (1bdd0 <spi_cmd+0x15c>)
   1bd7e:	4815      	ldr	r0, [pc, #84]	; (1bdd4 <spi_cmd+0x160>)
   1bd80:	4c15      	ldr	r4, [pc, #84]	; (1bdd8 <spi_cmd+0x164>)
   1bd82:	47a0      	blx	r4
   1bd84:	4815      	ldr	r0, [pc, #84]	; (1bddc <spi_cmd+0x168>)
   1bd86:	47a0      	blx	r4
   1bd88:	4815      	ldr	r0, [pc, #84]	; (1bde0 <spi_cmd+0x16c>)
   1bd8a:	47a0      	blx	r4
			result = N_FAIL;
   1bd8c:	2300      	movs	r3, #0
   1bd8e:	e017      	b.n	1bdc0 <spi_cmd+0x14c>
	switch (cmd) {
   1bd90:	2300      	movs	r3, #0
   1bd92:	e015      	b.n	1bdc0 <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bd94:	1e4e      	subs	r6, r1, #1
   1bd96:	aa01      	add	r2, sp, #4
   1bd98:	1995      	adds	r5, r2, r6
   1bd9a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1bd9c:	4c11      	ldr	r4, [pc, #68]	; (1bde4 <spi_cmd+0x170>)
   1bd9e:	005b      	lsls	r3, r3, #1
   1bda0:	7810      	ldrb	r0, [r2, #0]
   1bda2:	4043      	eors	r3, r0
   1bda4:	5ce3      	ldrb	r3, [r4, r3]
   1bda6:	3201      	adds	r2, #1
	while (len--)
   1bda8:	42aa      	cmp	r2, r5
   1bdaa:	d1f8      	bne.n	1bd9e <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bdac:	005b      	lsls	r3, r3, #1
   1bdae:	aa01      	add	r2, sp, #4
   1bdb0:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   1bdb2:	b289      	uxth	r1, r1
   1bdb4:	a801      	add	r0, sp, #4
   1bdb6:	4b0c      	ldr	r3, [pc, #48]	; (1bde8 <spi_cmd+0x174>)
   1bdb8:	4798      	blx	r3
   1bdba:	2301      	movs	r3, #1
   1bdbc:	2800      	cmp	r0, #0
   1bdbe:	d1db      	bne.n	1bd78 <spi_cmd+0x104>
		}
	}

	return result;
}
   1bdc0:	0018      	movs	r0, r3
   1bdc2:	b004      	add	sp, #16
   1bdc4:	bd70      	pop	{r4, r5, r6, pc}
   1bdc6:	46c0      	nop			; (mov r8, r8)
   1bdc8:	00029be8 	.word	0x00029be8
   1bdcc:	20003cec 	.word	0x20003cec
   1bdd0:	00029c64 	.word	0x00029c64
   1bdd4:	00029548 	.word	0x00029548
   1bdd8:	0001905d 	.word	0x0001905d
   1bddc:	0002a068 	.word	0x0002a068
   1bde0:	00029570 	.word	0x00029570
   1bde4:	00029cf4 	.word	0x00029cf4
   1bde8:	0001bc55 	.word	0x0001bc55

0001bdec <nmi_spi_read>:
{
   1bdec:	b500      	push	{lr}
   1bdee:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
   1bdf0:	ab01      	add	r3, sp, #4
   1bdf2:	2200      	movs	r2, #0
   1bdf4:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
   1bdf6:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
   1bdf8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bdfa:	0019      	movs	r1, r3
   1bdfc:	2003      	movs	r0, #3
   1bdfe:	4b02      	ldr	r3, [pc, #8]	; (1be08 <nmi_spi_read+0x1c>)
   1be00:	4798      	blx	r3
}
   1be02:	b005      	add	sp, #20
   1be04:	bd00      	pop	{pc}
   1be06:	46c0      	nop			; (mov r8, r8)
   1be08:	0001a3ad 	.word	0x0001a3ad

0001be0c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
   1be0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be0e:	46c6      	mov	lr, r8
   1be10:	b500      	push	{lr}
   1be12:	b082      	sub	sp, #8
   1be14:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1be16:	28cf      	cmp	r0, #207	; 0xcf
   1be18:	d02b      	beq.n	1be72 <spi_cmd_rsp+0x66>
   1be1a:	0003      	movs	r3, r0
   1be1c:	333b      	adds	r3, #59	; 0x3b
   1be1e:	b2db      	uxtb	r3, r3
   1be20:	2b01      	cmp	r3, #1
   1be22:	d926      	bls.n	1be72 <spi_cmd_rsp+0x66>
{
   1be24:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be26:	466b      	mov	r3, sp
   1be28:	1dde      	adds	r6, r3, #7
   1be2a:	4b24      	ldr	r3, [pc, #144]	; (1bebc <spi_cmd_rsp+0xb0>)
   1be2c:	4698      	mov	r8, r3
   1be2e:	2101      	movs	r1, #1
   1be30:	0030      	movs	r0, r6
   1be32:	47c0      	blx	r8
   1be34:	1e05      	subs	r5, r0, #0
   1be36:	d125      	bne.n	1be84 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   1be38:	7833      	ldrb	r3, [r6, #0]
   1be3a:	42bb      	cmp	r3, r7
   1be3c:	d02e      	beq.n	1be9c <spi_cmd_rsp+0x90>
   1be3e:	3c01      	subs	r4, #1
   1be40:	b2e4      	uxtb	r4, r4
   1be42:	2c00      	cmp	r4, #0
   1be44:	d1f3      	bne.n	1be2e <spi_cmd_rsp+0x22>
   1be46:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be48:	466b      	mov	r3, sp
   1be4a:	1dde      	adds	r6, r3, #7
   1be4c:	4f1b      	ldr	r7, [pc, #108]	; (1bebc <spi_cmd_rsp+0xb0>)
   1be4e:	2101      	movs	r1, #1
   1be50:	0030      	movs	r0, r6
   1be52:	47b8      	blx	r7
   1be54:	2800      	cmp	r0, #0
   1be56:	d123      	bne.n	1bea0 <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   1be58:	7833      	ldrb	r3, [r6, #0]
   1be5a:	2b00      	cmp	r3, #0
   1be5c:	d02b      	beq.n	1beb6 <spi_cmd_rsp+0xaa>
   1be5e:	3c01      	subs	r4, #1
   1be60:	b2e4      	uxtb	r4, r4
   1be62:	2c00      	cmp	r4, #0
   1be64:	d1f3      	bne.n	1be4e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
   1be66:	2501      	movs	r5, #1

_fail_:

	return result;
}
   1be68:	0028      	movs	r0, r5
   1be6a:	b002      	add	sp, #8
   1be6c:	bc04      	pop	{r2}
   1be6e:	4690      	mov	r8, r2
   1be70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be72:	2101      	movs	r1, #1
   1be74:	466b      	mov	r3, sp
   1be76:	1dd8      	adds	r0, r3, #7
   1be78:	4b10      	ldr	r3, [pc, #64]	; (1bebc <spi_cmd_rsp+0xb0>)
   1be7a:	4798      	blx	r3
			result = N_FAIL;
   1be7c:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be7e:	2800      	cmp	r0, #0
   1be80:	d0d0      	beq.n	1be24 <spi_cmd_rsp+0x18>
   1be82:	e7f1      	b.n	1be68 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1be84:	225c      	movs	r2, #92	; 0x5c
   1be86:	32ff      	adds	r2, #255	; 0xff
   1be88:	490d      	ldr	r1, [pc, #52]	; (1bec0 <spi_cmd_rsp+0xb4>)
   1be8a:	480e      	ldr	r0, [pc, #56]	; (1bec4 <spi_cmd_rsp+0xb8>)
   1be8c:	4c0e      	ldr	r4, [pc, #56]	; (1bec8 <spi_cmd_rsp+0xbc>)
   1be8e:	47a0      	blx	r4
   1be90:	480e      	ldr	r0, [pc, #56]	; (1becc <spi_cmd_rsp+0xc0>)
   1be92:	47a0      	blx	r4
   1be94:	480e      	ldr	r0, [pc, #56]	; (1bed0 <spi_cmd_rsp+0xc4>)
   1be96:	47a0      	blx	r4
			result = N_FAIL;
   1be98:	2500      	movs	r5, #0
			goto _fail_;
   1be9a:	e7e5      	b.n	1be68 <spi_cmd_rsp+0x5c>
   1be9c:	240b      	movs	r4, #11
   1be9e:	e7d3      	b.n	1be48 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1bea0:	226a      	movs	r2, #106	; 0x6a
   1bea2:	32ff      	adds	r2, #255	; 0xff
   1bea4:	4906      	ldr	r1, [pc, #24]	; (1bec0 <spi_cmd_rsp+0xb4>)
   1bea6:	4807      	ldr	r0, [pc, #28]	; (1bec4 <spi_cmd_rsp+0xb8>)
   1bea8:	4c07      	ldr	r4, [pc, #28]	; (1bec8 <spi_cmd_rsp+0xbc>)
   1beaa:	47a0      	blx	r4
   1beac:	4807      	ldr	r0, [pc, #28]	; (1becc <spi_cmd_rsp+0xc0>)
   1beae:	47a0      	blx	r4
   1beb0:	4807      	ldr	r0, [pc, #28]	; (1bed0 <spi_cmd_rsp+0xc4>)
   1beb2:	47a0      	blx	r4
			goto _fail_;
   1beb4:	e7d8      	b.n	1be68 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
   1beb6:	2501      	movs	r5, #1
   1beb8:	e7d6      	b.n	1be68 <spi_cmd_rsp+0x5c>
   1beba:	46c0      	nop			; (mov r8, r8)
   1bebc:	0001bded 	.word	0x0001bded
   1bec0:	00029c7c 	.word	0x00029c7c
   1bec4:	00029548 	.word	0x00029548
   1bec8:	0001905d 	.word	0x0001905d
   1becc:	0002a264 	.word	0x0002a264
   1bed0:	00029570 	.word	0x00029570

0001bed4 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   1bed4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bed6:	46de      	mov	lr, fp
   1bed8:	4657      	mov	r7, sl
   1beda:	464e      	mov	r6, r9
   1bedc:	4645      	mov	r5, r8
   1bede:	b5e0      	push	{r5, r6, r7, lr}
   1bee0:	b097      	sub	sp, #92	; 0x5c
   1bee2:	0005      	movs	r5, r0
   1bee4:	4690      	mov	r8, r2
   1bee6:	9300      	str	r3, [sp, #0]
   1bee8:	ab20      	add	r3, sp, #128	; 0x80
   1beea:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
   1beec:	ab0e      	add	r3, sp, #56	; 0x38
   1beee:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
   1bef0:	002b      	movs	r3, r5
   1bef2:	333f      	adds	r3, #63	; 0x3f
   1bef4:	b2da      	uxtb	r2, r3
   1bef6:	2a0e      	cmp	r2, #14
   1bef8:	d900      	bls.n	1befc <spi_cmd_complete+0x28>
   1befa:	e263      	b.n	1c3c4 <spi_cmd_complete+0x4f0>
   1befc:	0093      	lsls	r3, r2, #2
   1befe:	4acc      	ldr	r2, [pc, #816]	; (1c230 <spi_cmd_complete+0x35c>)
   1bf00:	58d3      	ldr	r3, [r2, r3]
   1bf02:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   1bf04:	ab0e      	add	r3, sp, #56	; 0x38
   1bf06:	0c0a      	lsrs	r2, r1, #16
   1bf08:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf0a:	0a0a      	lsrs	r2, r1, #8
   1bf0c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bf0e:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1bf10:	2305      	movs	r3, #5
   1bf12:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
   1bf14:	4bc7      	ldr	r3, [pc, #796]	; (1c234 <spi_cmd_complete+0x360>)
   1bf16:	781f      	ldrb	r7, [r3, #0]
   1bf18:	2f00      	cmp	r7, #0
   1bf1a:	d100      	bne.n	1bf1e <spi_cmd_complete+0x4a>
   1bf1c:	e254      	b.n	1c3c8 <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
   1bf1e:	2301      	movs	r3, #1
   1bf20:	425b      	negs	r3, r3
   1bf22:	469c      	mov	ip, r3
   1bf24:	44e1      	add	r9, ip
   1bf26:	e263      	b.n	1c3f0 <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
   1bf28:	0a0b      	lsrs	r3, r1, #8
   1bf2a:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf2c:	2801      	cmp	r0, #1
   1bf2e:	d008      	beq.n	1bf42 <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
   1bf30:	aa0e      	add	r2, sp, #56	; 0x38
   1bf32:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
   1bf34:	ab0e      	add	r3, sp, #56	; 0x38
   1bf36:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
   1bf38:	2200      	movs	r2, #0
   1bf3a:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf3c:	2305      	movs	r3, #5
   1bf3e:	4699      	mov	r9, r3
		break;
   1bf40:	e7e8      	b.n	1bf14 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf42:	2280      	movs	r2, #128	; 0x80
   1bf44:	4252      	negs	r2, r2
   1bf46:	4313      	orrs	r3, r2
   1bf48:	aa0e      	add	r2, sp, #56	; 0x38
   1bf4a:	7053      	strb	r3, [r2, #1]
   1bf4c:	e7f2      	b.n	1bf34 <spi_cmd_complete+0x60>
		wb[1] = 0x00;
   1bf4e:	ab0e      	add	r3, sp, #56	; 0x38
   1bf50:	2200      	movs	r2, #0
   1bf52:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bf54:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bf56:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf58:	2305      	movs	r3, #5
   1bf5a:	4699      	mov	r9, r3
		break;
   1bf5c:	e7da      	b.n	1bf14 <spi_cmd_complete+0x40>
		wb[1] = 0x00;
   1bf5e:	ab0e      	add	r3, sp, #56	; 0x38
   1bf60:	2200      	movs	r2, #0
   1bf62:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bf64:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bf66:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf68:	2305      	movs	r3, #5
   1bf6a:	4699      	mov	r9, r3
		break;
   1bf6c:	e7d2      	b.n	1bf14 <spi_cmd_complete+0x40>
		wb[1] = 0xff;
   1bf6e:	ab0e      	add	r3, sp, #56	; 0x38
   1bf70:	22ff      	movs	r2, #255	; 0xff
   1bf72:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   1bf74:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   1bf76:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf78:	2305      	movs	r3, #5
   1bf7a:	4699      	mov	r9, r3
		break;
   1bf7c:	e7ca      	b.n	1bf14 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bf7e:	ab0e      	add	r3, sp, #56	; 0x38
   1bf80:	0c0a      	lsrs	r2, r1, #16
   1bf82:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf84:	0a0a      	lsrs	r2, r1, #8
   1bf86:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bf88:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   1bf8a:	9900      	ldr	r1, [sp, #0]
   1bf8c:	0a0a      	lsrs	r2, r1, #8
   1bf8e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   1bf90:	7159      	strb	r1, [r3, #5]
		len = 7;
   1bf92:	2307      	movs	r3, #7
   1bf94:	4699      	mov	r9, r3
		break;
   1bf96:	e7bd      	b.n	1bf14 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bf98:	ab0e      	add	r3, sp, #56	; 0x38
   1bf9a:	0c0a      	lsrs	r2, r1, #16
   1bf9c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf9e:	0a0a      	lsrs	r2, r1, #8
   1bfa0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bfa2:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   1bfa4:	9900      	ldr	r1, [sp, #0]
   1bfa6:	0c0a      	lsrs	r2, r1, #16
   1bfa8:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   1bfaa:	0a0a      	lsrs	r2, r1, #8
   1bfac:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1bfae:	7199      	strb	r1, [r3, #6]
		len = 8;
   1bfb0:	2308      	movs	r3, #8
   1bfb2:	4699      	mov	r9, r3
		break;
   1bfb4:	e7ae      	b.n	1bf14 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
   1bfb6:	0a0b      	lsrs	r3, r1, #8
   1bfb8:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bfba:	2801      	cmp	r0, #1
   1bfbc:	d012      	beq.n	1bfe4 <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
   1bfbe:	aa0e      	add	r2, sp, #56	; 0x38
   1bfc0:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
   1bfc2:	ab0e      	add	r3, sp, #56	; 0x38
   1bfc4:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
   1bfc6:	4642      	mov	r2, r8
   1bfc8:	78d2      	ldrb	r2, [r2, #3]
   1bfca:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   1bfcc:	4642      	mov	r2, r8
   1bfce:	7892      	ldrb	r2, [r2, #2]
   1bfd0:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   1bfd2:	4642      	mov	r2, r8
   1bfd4:	7852      	ldrb	r2, [r2, #1]
   1bfd6:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   1bfd8:	4642      	mov	r2, r8
   1bfda:	7812      	ldrb	r2, [r2, #0]
   1bfdc:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bfde:	2308      	movs	r3, #8
   1bfe0:	4699      	mov	r9, r3
		break;
   1bfe2:	e797      	b.n	1bf14 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bfe4:	2280      	movs	r2, #128	; 0x80
   1bfe6:	4252      	negs	r2, r2
   1bfe8:	4313      	orrs	r3, r2
   1bfea:	aa0e      	add	r2, sp, #56	; 0x38
   1bfec:	7053      	strb	r3, [r2, #1]
   1bfee:	e7e8      	b.n	1bfc2 <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
   1bff0:	ab0e      	add	r3, sp, #56	; 0x38
   1bff2:	0c0a      	lsrs	r2, r1, #16
   1bff4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bff6:	0a0a      	lsrs	r2, r1, #8
   1bff8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   1bffa:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
   1bffc:	4642      	mov	r2, r8
   1bffe:	78d2      	ldrb	r2, [r2, #3]
   1c000:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   1c002:	4642      	mov	r2, r8
   1c004:	7892      	ldrb	r2, [r2, #2]
   1c006:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   1c008:	4642      	mov	r2, r8
   1c00a:	7852      	ldrb	r2, [r2, #1]
   1c00c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1c00e:	4642      	mov	r2, r8
   1c010:	7812      	ldrb	r2, [r2, #0]
   1c012:	71da      	strb	r2, [r3, #7]
		len = 9;
   1c014:	2309      	movs	r3, #9
   1c016:	4699      	mov	r9, r3
		break;
   1c018:	e77c      	b.n	1bf14 <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c01a:	464b      	mov	r3, r9
   1c01c:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   1c01e:	2e20      	cmp	r6, #32
   1c020:	d844      	bhi.n	1c0ac <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   1c022:	464b      	mov	r3, r9
   1c024:	466a      	mov	r2, sp
   1c026:	71d3      	strb	r3, [r2, #7]
   1c028:	79d7      	ldrb	r7, [r2, #7]
   1c02a:	42b7      	cmp	r7, r6
   1c02c:	d207      	bcs.n	1c03e <spi_cmd_complete+0x16a>
   1c02e:	003b      	movs	r3, r7
		wb[wix] = 0;
   1c030:	a90e      	add	r1, sp, #56	; 0x38
   1c032:	2200      	movs	r2, #0
   1c034:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
   1c036:	3301      	adds	r3, #1
   1c038:	b2db      	uxtb	r3, r3
   1c03a:	429e      	cmp	r6, r3
   1c03c:	d8fa      	bhi.n	1c034 <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
   1c03e:	ab0e      	add	r3, sp, #56	; 0x38
   1c040:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
   1c042:	ab06      	add	r3, sp, #24
   1c044:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
   1c046:	ab02      	add	r3, sp, #8
   1c048:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   1c04a:	0019      	movs	r1, r3
   1c04c:	2003      	movs	r0, #3
   1c04e:	4b7a      	ldr	r3, [pc, #488]	; (1c238 <spi_cmd_complete+0x364>)
   1c050:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   1c052:	2800      	cmp	r0, #0
   1c054:	d138      	bne.n	1c0c8 <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1c056:	2dcf      	cmp	r5, #207	; 0xcf
   1c058:	d004      	beq.n	1c064 <spi_cmd_complete+0x190>
   1c05a:	002b      	movs	r3, r5
   1c05c:	333b      	adds	r3, #59	; 0x3b
   1c05e:	b2db      	uxtb	r3, r3
   1c060:	2b01      	cmp	r3, #1
   1c062:	d801      	bhi.n	1c068 <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   1c064:	3701      	adds	r7, #1
   1c066:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
   1c068:	ab06      	add	r3, sp, #24
   1c06a:	5ddb      	ldrb	r3, [r3, r7]
   1c06c:	220f      	movs	r2, #15
   1c06e:	a902      	add	r1, sp, #8
   1c070:	468c      	mov	ip, r1
   1c072:	4462      	add	r2, ip
   1c074:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
   1c076:	429d      	cmp	r5, r3
   1c078:	d132      	bne.n	1c0e0 <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   1c07a:	1cbc      	adds	r4, r7, #2
   1c07c:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
   1c07e:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
   1c080:	b2db      	uxtb	r3, r3
   1c082:	aa06      	add	r2, sp, #24
   1c084:	5cd0      	ldrb	r0, [r2, r3]
   1c086:	230f      	movs	r3, #15
   1c088:	aa02      	add	r2, sp, #8
   1c08a:	4694      	mov	ip, r2
   1c08c:	4463      	add	r3, ip
   1c08e:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
   1c090:	2800      	cmp	r0, #0
   1c092:	d13c      	bne.n	1c10e <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   1c094:	002b      	movs	r3, r5
   1c096:	333c      	adds	r3, #60	; 0x3c
   1c098:	22fb      	movs	r2, #251	; 0xfb
   1c09a:	4213      	tst	r3, r2
   1c09c:	d047      	beq.n	1c12e <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c09e:	2308      	movs	r3, #8
   1c0a0:	002a      	movs	r2, r5
   1c0a2:	439a      	bics	r2, r3
   1c0a4:	2ac2      	cmp	r2, #194	; 0xc2
   1c0a6:	d042      	beq.n	1c12e <spi_cmd_complete+0x25a>
   1c0a8:	2001      	movs	r0, #1
   1c0aa:	e029      	b.n	1c100 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   1c0ac:	22f7      	movs	r2, #247	; 0xf7
   1c0ae:	0052      	lsls	r2, r2, #1
   1c0b0:	4962      	ldr	r1, [pc, #392]	; (1c23c <spi_cmd_complete+0x368>)
   1c0b2:	4863      	ldr	r0, [pc, #396]	; (1c240 <spi_cmd_complete+0x36c>)
   1c0b4:	4c63      	ldr	r4, [pc, #396]	; (1c244 <spi_cmd_complete+0x370>)
   1c0b6:	47a0      	blx	r4
   1c0b8:	2220      	movs	r2, #32
   1c0ba:	0031      	movs	r1, r6
   1c0bc:	4862      	ldr	r0, [pc, #392]	; (1c248 <spi_cmd_complete+0x374>)
   1c0be:	47a0      	blx	r4
   1c0c0:	4862      	ldr	r0, [pc, #392]	; (1c24c <spi_cmd_complete+0x378>)
   1c0c2:	47a0      	blx	r4
		return result;
   1c0c4:	2000      	movs	r0, #0
   1c0c6:	e01b      	b.n	1c100 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1c0c8:	22fa      	movs	r2, #250	; 0xfa
   1c0ca:	32ff      	adds	r2, #255	; 0xff
   1c0cc:	495b      	ldr	r1, [pc, #364]	; (1c23c <spi_cmd_complete+0x368>)
   1c0ce:	485c      	ldr	r0, [pc, #368]	; (1c240 <spi_cmd_complete+0x36c>)
   1c0d0:	4c5c      	ldr	r4, [pc, #368]	; (1c244 <spi_cmd_complete+0x370>)
   1c0d2:	47a0      	blx	r4
   1c0d4:	485e      	ldr	r0, [pc, #376]	; (1c250 <spi_cmd_complete+0x37c>)
   1c0d6:	47a0      	blx	r4
   1c0d8:	485c      	ldr	r0, [pc, #368]	; (1c24c <spi_cmd_complete+0x378>)
   1c0da:	47a0      	blx	r4
		return result;
   1c0dc:	2000      	movs	r0, #0
   1c0de:	e00f      	b.n	1c100 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   1c0e0:	4a5c      	ldr	r2, [pc, #368]	; (1c254 <spi_cmd_complete+0x380>)
   1c0e2:	4956      	ldr	r1, [pc, #344]	; (1c23c <spi_cmd_complete+0x368>)
   1c0e4:	4856      	ldr	r0, [pc, #344]	; (1c240 <spi_cmd_complete+0x36c>)
   1c0e6:	4c57      	ldr	r4, [pc, #348]	; (1c244 <spi_cmd_complete+0x370>)
   1c0e8:	47a0      	blx	r4
   1c0ea:	230f      	movs	r3, #15
   1c0ec:	aa02      	add	r2, sp, #8
   1c0ee:	4694      	mov	ip, r2
   1c0f0:	4463      	add	r3, ip
   1c0f2:	781a      	ldrb	r2, [r3, #0]
   1c0f4:	0029      	movs	r1, r5
   1c0f6:	4858      	ldr	r0, [pc, #352]	; (1c258 <spi_cmd_complete+0x384>)
   1c0f8:	47a0      	blx	r4
   1c0fa:	4854      	ldr	r0, [pc, #336]	; (1c24c <spi_cmd_complete+0x378>)
   1c0fc:	47a0      	blx	r4
		return result;
   1c0fe:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
   1c100:	b017      	add	sp, #92	; 0x5c
   1c102:	bc3c      	pop	{r2, r3, r4, r5}
   1c104:	4690      	mov	r8, r2
   1c106:	4699      	mov	r9, r3
   1c108:	46a2      	mov	sl, r4
   1c10a:	46ab      	mov	fp, r5
   1c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   1c10e:	4a53      	ldr	r2, [pc, #332]	; (1c25c <spi_cmd_complete+0x388>)
   1c110:	494a      	ldr	r1, [pc, #296]	; (1c23c <spi_cmd_complete+0x368>)
   1c112:	484b      	ldr	r0, [pc, #300]	; (1c240 <spi_cmd_complete+0x36c>)
   1c114:	4c4b      	ldr	r4, [pc, #300]	; (1c244 <spi_cmd_complete+0x370>)
   1c116:	47a0      	blx	r4
   1c118:	230f      	movs	r3, #15
   1c11a:	aa02      	add	r2, sp, #8
   1c11c:	4694      	mov	ip, r2
   1c11e:	4463      	add	r3, ip
   1c120:	7819      	ldrb	r1, [r3, #0]
   1c122:	484f      	ldr	r0, [pc, #316]	; (1c260 <spi_cmd_complete+0x38c>)
   1c124:	47a0      	blx	r4
   1c126:	4849      	ldr	r0, [pc, #292]	; (1c24c <spi_cmd_complete+0x378>)
   1c128:	47a0      	blx	r4
		return result;
   1c12a:	2000      	movs	r0, #0
   1c12c:	e7e8      	b.n	1c100 <spi_cmd_complete+0x22c>
   1c12e:	370d      	adds	r7, #13
   1c130:	b2fb      	uxtb	r3, r7
   1c132:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
   1c134:	2200      	movs	r2, #0
   1c136:	270a      	movs	r7, #10
					rsp = rb[rix++];
   1c138:	a906      	add	r1, sp, #24
   1c13a:	e000      	b.n	1c13e <spi_cmd_complete+0x26a>
   1c13c:	001c      	movs	r4, r3
				if(rix < len2) { 
   1c13e:	42a6      	cmp	r6, r4
   1c140:	d956      	bls.n	1c1f0 <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
   1c142:	1c63      	adds	r3, r4, #1
   1c144:	b2db      	uxtb	r3, r3
   1c146:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
   1c148:	0902      	lsrs	r2, r0, #4
   1c14a:	2a0f      	cmp	r2, #15
   1c14c:	d06a      	beq.n	1c224 <spi_cmd_complete+0x350>
			} while (retry--);
   1c14e:	3f01      	subs	r7, #1
   1c150:	2201      	movs	r2, #1
   1c152:	4553      	cmp	r3, sl
   1c154:	d1f2      	bne.n	1c13c <spi_cmd_complete+0x268>
   1c156:	320e      	adds	r2, #14
   1c158:	a902      	add	r1, sp, #8
   1c15a:	468c      	mov	ip, r1
   1c15c:	4462      	add	r2, ip
   1c15e:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
   1c160:	2f00      	cmp	r7, #0
   1c162:	dd47      	ble.n	1c1f4 <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c164:	2dc4      	cmp	r5, #196	; 0xc4
   1c166:	d100      	bne.n	1c16a <spi_cmd_complete+0x296>
   1c168:	e080      	b.n	1c26c <spi_cmd_complete+0x398>
   1c16a:	2dca      	cmp	r5, #202	; 0xca
   1c16c:	d100      	bne.n	1c170 <spi_cmd_complete+0x29c>
   1c16e:	e07d      	b.n	1c26c <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c170:	2dc2      	cmp	r5, #194	; 0xc2
   1c172:	d002      	beq.n	1c17a <spi_cmd_complete+0x2a6>
   1c174:	2001      	movs	r0, #1
   1c176:	2dc8      	cmp	r5, #200	; 0xc8
   1c178:	d1c2      	bne.n	1c100 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c17a:	429e      	cmp	r6, r3
   1c17c:	d800      	bhi.n	1c180 <spi_cmd_complete+0x2ac>
   1c17e:	e0ac      	b.n	1c2da <spi_cmd_complete+0x406>
   1c180:	9a00      	ldr	r2, [sp, #0]
   1c182:	2a00      	cmp	r2, #0
   1c184:	d100      	bne.n	1c188 <spi_cmd_complete+0x2b4>
   1c186:	e11b      	b.n	1c3c0 <spi_cmd_complete+0x4ec>
   1c188:	4442      	add	r2, r8
   1c18a:	0014      	movs	r4, r2
   1c18c:	4640      	mov	r0, r8
   1c18e:	2701      	movs	r7, #1
   1c190:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
   1c192:	a906      	add	r1, sp, #24
   1c194:	183d      	adds	r5, r7, r0
   1c196:	1c5a      	adds	r2, r3, #1
   1c198:	b2d2      	uxtb	r2, r2
   1c19a:	5ccb      	ldrb	r3, [r1, r3]
   1c19c:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c19e:	4296      	cmp	r6, r2
   1c1a0:	d903      	bls.n	1c1aa <spi_cmd_complete+0x2d6>
   1c1a2:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
   1c1a4:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c1a6:	42a0      	cmp	r0, r4
   1c1a8:	d1f4      	bne.n	1c194 <spi_cmd_complete+0x2c0>
				sz -= ix;
   1c1aa:	002b      	movs	r3, r5
   1c1ac:	9a00      	ldr	r2, [sp, #0]
   1c1ae:	1b54      	subs	r4, r2, r5
   1c1b0:	2001      	movs	r0, #1
				if(sz > 0) {
   1c1b2:	2c00      	cmp	r4, #0
   1c1b4:	d0a4      	beq.n	1c100 <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
   1c1b6:	2680      	movs	r6, #128	; 0x80
   1c1b8:	01b6      	lsls	r6, r6, #6
   1c1ba:	1b76      	subs	r6, r6, r5
   1c1bc:	42b4      	cmp	r4, r6
   1c1be:	d800      	bhi.n	1c1c2 <spi_cmd_complete+0x2ee>
						nbytes = sz;
   1c1c0:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c1c2:	b2b1      	uxth	r1, r6
   1c1c4:	4443      	add	r3, r8
   1c1c6:	0018      	movs	r0, r3
   1c1c8:	4b26      	ldr	r3, [pc, #152]	; (1c264 <spi_cmd_complete+0x390>)
   1c1ca:	4798      	blx	r3
   1c1cc:	2800      	cmp	r0, #0
   1c1ce:	d000      	beq.n	1c1d2 <spi_cmd_complete+0x2fe>
   1c1d0:	e085      	b.n	1c2de <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
   1c1d2:	4b18      	ldr	r3, [pc, #96]	; (1c234 <spi_cmd_complete+0x360>)
   1c1d4:	781b      	ldrb	r3, [r3, #0]
   1c1d6:	2b00      	cmp	r3, #0
   1c1d8:	d100      	bne.n	1c1dc <spi_cmd_complete+0x308>
   1c1da:	e08b      	b.n	1c2f4 <spi_cmd_complete+0x420>
					ix += nbytes;
   1c1dc:	46aa      	mov	sl, r5
   1c1de:	44b2      	add	sl, r6
					sz -= nbytes;
   1c1e0:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
   1c1e2:	2001      	movs	r0, #1
   1c1e4:	2e00      	cmp	r6, #0
   1c1e6:	d100      	bne.n	1c1ea <spi_cmd_complete+0x316>
   1c1e8:	e78a      	b.n	1c100 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c1ea:	4f1e      	ldr	r7, [pc, #120]	; (1c264 <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c1ec:	46bb      	mov	fp, r7
   1c1ee:	e0b5      	b.n	1c35c <spi_cmd_complete+0x488>
   1c1f0:	2a00      	cmp	r2, #0
   1c1f2:	d111      	bne.n	1c218 <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   1c1f4:	2295      	movs	r2, #149	; 0x95
   1c1f6:	0092      	lsls	r2, r2, #2
   1c1f8:	4910      	ldr	r1, [pc, #64]	; (1c23c <spi_cmd_complete+0x368>)
   1c1fa:	4811      	ldr	r0, [pc, #68]	; (1c240 <spi_cmd_complete+0x36c>)
   1c1fc:	4c11      	ldr	r4, [pc, #68]	; (1c244 <spi_cmd_complete+0x370>)
   1c1fe:	47a0      	blx	r4
   1c200:	230f      	movs	r3, #15
   1c202:	aa02      	add	r2, sp, #8
   1c204:	4694      	mov	ip, r2
   1c206:	4463      	add	r3, ip
   1c208:	7819      	ldrb	r1, [r3, #0]
   1c20a:	4817      	ldr	r0, [pc, #92]	; (1c268 <spi_cmd_complete+0x394>)
   1c20c:	47a0      	blx	r4
   1c20e:	480f      	ldr	r0, [pc, #60]	; (1c24c <spi_cmd_complete+0x378>)
   1c210:	47a0      	blx	r4
				return result;
   1c212:	2001      	movs	r0, #1
   1c214:	4240      	negs	r0, r0
   1c216:	e773      	b.n	1c100 <spi_cmd_complete+0x22c>
   1c218:	230f      	movs	r3, #15
   1c21a:	aa02      	add	r2, sp, #8
   1c21c:	4694      	mov	ip, r2
   1c21e:	4463      	add	r3, ip
   1c220:	7018      	strb	r0, [r3, #0]
   1c222:	e7e7      	b.n	1c1f4 <spi_cmd_complete+0x320>
   1c224:	a902      	add	r1, sp, #8
   1c226:	468c      	mov	ip, r1
   1c228:	4462      	add	r2, ip
   1c22a:	7010      	strb	r0, [r2, #0]
   1c22c:	e798      	b.n	1c160 <spi_cmd_complete+0x28c>
   1c22e:	46c0      	nop			; (mov r8, r8)
   1c230:	00029c24 	.word	0x00029c24
   1c234:	20003cec 	.word	0x20003cec
   1c238:	0001a3ad 	.word	0x0001a3ad
   1c23c:	00029c88 	.word	0x00029c88
   1c240:	00029548 	.word	0x00029548
   1c244:	0001905d 	.word	0x0001905d
   1c248:	0002a094 	.word	0x0002a094
   1c24c:	00029570 	.word	0x00029570
   1c250:	0002a068 	.word	0x0002a068
   1c254:	0000022f 	.word	0x0000022f
   1c258:	0002a0c4 	.word	0x0002a0c4
   1c25c:	00000239 	.word	0x00000239
   1c260:	0002a100 	.word	0x0002a100
   1c264:	0001bded 	.word	0x0001bded
   1c268:	0002a134 	.word	0x0002a134
				if((rix+3) < len2) { 
   1c26c:	1cda      	adds	r2, r3, #3
   1c26e:	4296      	cmp	r6, r2
   1c270:	d928      	bls.n	1c2c4 <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
   1c272:	aa06      	add	r2, sp, #24
   1c274:	5cd3      	ldrb	r3, [r2, r3]
   1c276:	4641      	mov	r1, r8
   1c278:	700b      	strb	r3, [r1, #0]
   1c27a:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
   1c27c:	b2db      	uxtb	r3, r3
   1c27e:	5cd3      	ldrb	r3, [r2, r3]
   1c280:	704b      	strb	r3, [r1, #1]
   1c282:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
   1c284:	b2db      	uxtb	r3, r3
   1c286:	5cd3      	ldrb	r3, [r2, r3]
   1c288:	708b      	strb	r3, [r1, #2]
   1c28a:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
   1c28c:	b2db      	uxtb	r3, r3
   1c28e:	5cd3      	ldrb	r3, [r2, r3]
   1c290:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
   1c292:	4b63      	ldr	r3, [pc, #396]	; (1c420 <spi_cmd_complete+0x54c>)
   1c294:	781b      	ldrb	r3, [r3, #0]
   1c296:	2001      	movs	r0, #1
   1c298:	2b00      	cmp	r3, #0
   1c29a:	d000      	beq.n	1c29e <spi_cmd_complete+0x3ca>
   1c29c:	e730      	b.n	1c100 <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
   1c29e:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
   1c2a0:	b2db      	uxtb	r3, r3
   1c2a2:	3301      	adds	r3, #1
   1c2a4:	2001      	movs	r0, #1
   1c2a6:	429e      	cmp	r6, r3
   1c2a8:	d900      	bls.n	1c2ac <spi_cmd_complete+0x3d8>
   1c2aa:	e729      	b.n	1c100 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   1c2ac:	229c      	movs	r2, #156	; 0x9c
   1c2ae:	0092      	lsls	r2, r2, #2
   1c2b0:	495c      	ldr	r1, [pc, #368]	; (1c424 <spi_cmd_complete+0x550>)
   1c2b2:	485d      	ldr	r0, [pc, #372]	; (1c428 <spi_cmd_complete+0x554>)
   1c2b4:	4c5d      	ldr	r4, [pc, #372]	; (1c42c <spi_cmd_complete+0x558>)
   1c2b6:	47a0      	blx	r4
   1c2b8:	485d      	ldr	r0, [pc, #372]	; (1c430 <spi_cmd_complete+0x55c>)
   1c2ba:	47a0      	blx	r4
   1c2bc:	485d      	ldr	r0, [pc, #372]	; (1c434 <spi_cmd_complete+0x560>)
   1c2be:	47a0      	blx	r4
						return result;
   1c2c0:	2000      	movs	r0, #0
   1c2c2:	e71d      	b.n	1c100 <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   1c2c4:	4a5c      	ldr	r2, [pc, #368]	; (1c438 <spi_cmd_complete+0x564>)
   1c2c6:	4957      	ldr	r1, [pc, #348]	; (1c424 <spi_cmd_complete+0x550>)
   1c2c8:	4857      	ldr	r0, [pc, #348]	; (1c428 <spi_cmd_complete+0x554>)
   1c2ca:	4c58      	ldr	r4, [pc, #352]	; (1c42c <spi_cmd_complete+0x558>)
   1c2cc:	47a0      	blx	r4
   1c2ce:	485b      	ldr	r0, [pc, #364]	; (1c43c <spi_cmd_complete+0x568>)
   1c2d0:	47a0      	blx	r4
   1c2d2:	4858      	ldr	r0, [pc, #352]	; (1c434 <spi_cmd_complete+0x560>)
   1c2d4:	47a0      	blx	r4
					return result;
   1c2d6:	2000      	movs	r0, #0
   1c2d8:	e712      	b.n	1c100 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c2da:	2500      	movs	r5, #0
   1c2dc:	e765      	b.n	1c1aa <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c2de:	4a58      	ldr	r2, [pc, #352]	; (1c440 <spi_cmd_complete+0x56c>)
   1c2e0:	4950      	ldr	r1, [pc, #320]	; (1c424 <spi_cmd_complete+0x550>)
   1c2e2:	4851      	ldr	r0, [pc, #324]	; (1c428 <spi_cmd_complete+0x554>)
   1c2e4:	4c51      	ldr	r4, [pc, #324]	; (1c42c <spi_cmd_complete+0x558>)
   1c2e6:	47a0      	blx	r4
   1c2e8:	4856      	ldr	r0, [pc, #344]	; (1c444 <spi_cmd_complete+0x570>)
   1c2ea:	47a0      	blx	r4
   1c2ec:	4851      	ldr	r0, [pc, #324]	; (1c434 <spi_cmd_complete+0x560>)
   1c2ee:	47a0      	blx	r4
						goto _error_;
   1c2f0:	2000      	movs	r0, #0
   1c2f2:	e705      	b.n	1c100 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c2f4:	2102      	movs	r1, #2
   1c2f6:	a802      	add	r0, sp, #8
   1c2f8:	4b53      	ldr	r3, [pc, #332]	; (1c448 <spi_cmd_complete+0x574>)
   1c2fa:	4798      	blx	r3
   1c2fc:	2800      	cmp	r0, #0
   1c2fe:	d100      	bne.n	1c302 <spi_cmd_complete+0x42e>
   1c300:	e76c      	b.n	1c1dc <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c302:	22a6      	movs	r2, #166	; 0xa6
   1c304:	0092      	lsls	r2, r2, #2
   1c306:	4947      	ldr	r1, [pc, #284]	; (1c424 <spi_cmd_complete+0x550>)
   1c308:	4847      	ldr	r0, [pc, #284]	; (1c428 <spi_cmd_complete+0x554>)
   1c30a:	4c48      	ldr	r4, [pc, #288]	; (1c42c <spi_cmd_complete+0x558>)
   1c30c:	47a0      	blx	r4
   1c30e:	484f      	ldr	r0, [pc, #316]	; (1c44c <spi_cmd_complete+0x578>)
   1c310:	47a0      	blx	r4
   1c312:	4848      	ldr	r0, [pc, #288]	; (1c434 <spi_cmd_complete+0x560>)
   1c314:	47a0      	blx	r4
							goto _error_;
   1c316:	e7eb      	b.n	1c2f0 <spi_cmd_complete+0x41c>
   1c318:	9b00      	ldr	r3, [sp, #0]
   1c31a:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c31c:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c31e:	250f      	movs	r5, #15
   1c320:	ab02      	add	r3, sp, #8
   1c322:	469c      	mov	ip, r3
   1c324:	4465      	add	r5, ip
   1c326:	2101      	movs	r1, #1
   1c328:	0028      	movs	r0, r5
   1c32a:	47b8      	blx	r7
   1c32c:	2800      	cmp	r0, #0
   1c32e:	d11c      	bne.n	1c36a <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
   1c330:	782b      	ldrb	r3, [r5, #0]
   1c332:	091b      	lsrs	r3, r3, #4
   1c334:	2b0f      	cmp	r3, #15
   1c336:	d002      	beq.n	1c33e <spi_cmd_complete+0x46a>
   1c338:	3c01      	subs	r4, #1
					} while (retry--);
   1c33a:	2c00      	cmp	r4, #0
   1c33c:	d1f3      	bne.n	1c326 <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c33e:	466b      	mov	r3, sp
   1c340:	8819      	ldrh	r1, [r3, #0]
   1c342:	4640      	mov	r0, r8
   1c344:	4450      	add	r0, sl
   1c346:	47d8      	blx	fp
   1c348:	2800      	cmp	r0, #0
   1c34a:	d11a      	bne.n	1c382 <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
   1c34c:	4b34      	ldr	r3, [pc, #208]	; (1c420 <spi_cmd_complete+0x54c>)
   1c34e:	781b      	ldrb	r3, [r3, #0]
   1c350:	2b00      	cmp	r3, #0
   1c352:	d022      	beq.n	1c39a <spi_cmd_complete+0x4c6>
					ix += nbytes;
   1c354:	44ca      	add	sl, r9
					sz -= nbytes;
   1c356:	9b00      	ldr	r3, [sp, #0]
   1c358:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
   1c35a:	d02f      	beq.n	1c3bc <spi_cmd_complete+0x4e8>
   1c35c:	9600      	str	r6, [sp, #0]
   1c35e:	2380      	movs	r3, #128	; 0x80
   1c360:	019b      	lsls	r3, r3, #6
   1c362:	429e      	cmp	r6, r3
   1c364:	d9d8      	bls.n	1c318 <spi_cmd_complete+0x444>
   1c366:	9300      	str	r3, [sp, #0]
   1c368:	e7d6      	b.n	1c318 <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   1c36a:	22ae      	movs	r2, #174	; 0xae
   1c36c:	0092      	lsls	r2, r2, #2
   1c36e:	492d      	ldr	r1, [pc, #180]	; (1c424 <spi_cmd_complete+0x550>)
   1c370:	482d      	ldr	r0, [pc, #180]	; (1c428 <spi_cmd_complete+0x554>)
   1c372:	4c2e      	ldr	r4, [pc, #184]	; (1c42c <spi_cmd_complete+0x558>)
   1c374:	47a0      	blx	r4
   1c376:	4836      	ldr	r0, [pc, #216]	; (1c450 <spi_cmd_complete+0x57c>)
   1c378:	47a0      	blx	r4
   1c37a:	482e      	ldr	r0, [pc, #184]	; (1c434 <spi_cmd_complete+0x560>)
   1c37c:	47a0      	blx	r4
   1c37e:	2000      	movs	r0, #0
   1c380:	e6be      	b.n	1c100 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c382:	22b2      	movs	r2, #178	; 0xb2
   1c384:	0092      	lsls	r2, r2, #2
   1c386:	4927      	ldr	r1, [pc, #156]	; (1c424 <spi_cmd_complete+0x550>)
   1c388:	4827      	ldr	r0, [pc, #156]	; (1c428 <spi_cmd_complete+0x554>)
   1c38a:	4c28      	ldr	r4, [pc, #160]	; (1c42c <spi_cmd_complete+0x558>)
   1c38c:	47a0      	blx	r4
   1c38e:	482d      	ldr	r0, [pc, #180]	; (1c444 <spi_cmd_complete+0x570>)
   1c390:	47a0      	blx	r4
   1c392:	4828      	ldr	r0, [pc, #160]	; (1c434 <spi_cmd_complete+0x560>)
   1c394:	47a0      	blx	r4
						result = N_FAIL;
   1c396:	2000      	movs	r0, #0
						break;
   1c398:	e6b2      	b.n	1c100 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c39a:	2102      	movs	r1, #2
   1c39c:	a802      	add	r0, sp, #8
   1c39e:	4b2a      	ldr	r3, [pc, #168]	; (1c448 <spi_cmd_complete+0x574>)
   1c3a0:	4798      	blx	r3
   1c3a2:	2800      	cmp	r0, #0
   1c3a4:	d0d6      	beq.n	1c354 <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c3a6:	4a2b      	ldr	r2, [pc, #172]	; (1c454 <spi_cmd_complete+0x580>)
   1c3a8:	491e      	ldr	r1, [pc, #120]	; (1c424 <spi_cmd_complete+0x550>)
   1c3aa:	481f      	ldr	r0, [pc, #124]	; (1c428 <spi_cmd_complete+0x554>)
   1c3ac:	4c1f      	ldr	r4, [pc, #124]	; (1c42c <spi_cmd_complete+0x558>)
   1c3ae:	47a0      	blx	r4
   1c3b0:	4826      	ldr	r0, [pc, #152]	; (1c44c <spi_cmd_complete+0x578>)
   1c3b2:	47a0      	blx	r4
   1c3b4:	481f      	ldr	r0, [pc, #124]	; (1c434 <spi_cmd_complete+0x560>)
   1c3b6:	47a0      	blx	r4
							result = N_FAIL;
   1c3b8:	2000      	movs	r0, #0
							break;
   1c3ba:	e6a1      	b.n	1c100 <spi_cmd_complete+0x22c>
   1c3bc:	2001      	movs	r0, #1
   1c3be:	e69f      	b.n	1c100 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c3c0:	2001      	movs	r0, #1
   1c3c2:	e69d      	b.n	1c100 <spi_cmd_complete+0x22c>
		return result;
   1c3c4:	2000      	movs	r0, #0
   1c3c6:	e69b      	b.n	1c100 <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c3c8:	2301      	movs	r3, #1
   1c3ca:	425b      	negs	r3, r3
   1c3cc:	444b      	add	r3, r9
   1c3ce:	469c      	mov	ip, r3
   1c3d0:	001c      	movs	r4, r3
   1c3d2:	2200      	movs	r2, #0
   1c3d4:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c3d6:	4e20      	ldr	r6, [pc, #128]	; (1c458 <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
   1c3d8:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c3da:	005b      	lsls	r3, r3, #1
   1c3dc:	5c50      	ldrb	r0, [r2, r1]
   1c3de:	4043      	eors	r3, r0
   1c3e0:	5cf3      	ldrb	r3, [r6, r3]
   1c3e2:	3201      	adds	r2, #1
	while (len--)
   1c3e4:	42a2      	cmp	r2, r4
   1c3e6:	d1f8      	bne.n	1c3da <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c3e8:	005b      	lsls	r3, r3, #1
   1c3ea:	aa0e      	add	r2, sp, #56	; 0x38
   1c3ec:	4661      	mov	r1, ip
   1c3ee:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
   1c3f0:	2dcf      	cmp	r5, #207	; 0xcf
   1c3f2:	d100      	bne.n	1c3f6 <spi_cmd_complete+0x522>
   1c3f4:	e611      	b.n	1c01a <spi_cmd_complete+0x146>
   1c3f6:	002b      	movs	r3, r5
   1c3f8:	333b      	adds	r3, #59	; 0x3b
   1c3fa:	b2db      	uxtb	r3, r3
   1c3fc:	2b01      	cmp	r3, #1
   1c3fe:	d800      	bhi.n	1c402 <spi_cmd_complete+0x52e>
   1c400:	e60b      	b.n	1c01a <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c402:	2dc4      	cmp	r5, #196	; 0xc4
   1c404:	d004      	beq.n	1c410 <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c406:	464b      	mov	r3, r9
   1c408:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c40a:	2dca      	cmp	r5, #202	; 0xca
   1c40c:	d000      	beq.n	1c410 <spi_cmd_complete+0x53c>
   1c40e:	e606      	b.n	1c01e <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c410:	464e      	mov	r6, r9
   1c412:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
   1c414:	2f00      	cmp	r7, #0
   1c416:	d000      	beq.n	1c41a <spi_cmd_complete+0x546>
   1c418:	e601      	b.n	1c01e <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c41a:	3602      	adds	r6, #2
   1c41c:	e5ff      	b.n	1c01e <spi_cmd_complete+0x14a>
   1c41e:	46c0      	nop			; (mov r8, r8)
   1c420:	20003cec 	.word	0x20003cec
   1c424:	00029c88 	.word	0x00029c88
   1c428:	00029548 	.word	0x00029548
   1c42c:	0001905d 	.word	0x0001905d
   1c430:	0002a194 	.word	0x0002a194
   1c434:	00029570 	.word	0x00029570
   1c438:	00000263 	.word	0x00000263
   1c43c:	0002a164 	.word	0x0002a164
   1c440:	0000028e 	.word	0x0000028e
   1c444:	0002a1c4 	.word	0x0002a1c4
   1c448:	0001bded 	.word	0x0001bded
   1c44c:	0002a1f8 	.word	0x0002a1f8
   1c450:	0002a230 	.word	0x0002a230
   1c454:	000002d2 	.word	0x000002d2
   1c458:	00029cf4 	.word	0x00029cf4

0001c45c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   1c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c45e:	46de      	mov	lr, fp
   1c460:	4657      	mov	r7, sl
   1c462:	464e      	mov	r6, r9
   1c464:	4645      	mov	r5, r8
   1c466:	b5e0      	push	{r5, r6, r7, lr}
   1c468:	b087      	sub	sp, #28
   1c46a:	9003      	str	r0, [sp, #12]
   1c46c:	9105      	str	r1, [sp, #20]
   1c46e:	2830      	cmp	r0, #48	; 0x30
   1c470:	d80e      	bhi.n	1c490 <spi_write_reg+0x34>
   1c472:	4b27      	ldr	r3, [pc, #156]	; (1c510 <spi_write_reg+0xb4>)
   1c474:	781b      	ldrb	r3, [r3, #0]
   1c476:	b2db      	uxtb	r3, r3
   1c478:	9304      	str	r3, [sp, #16]
   1c47a:	2300      	movs	r3, #0
   1c47c:	2230      	movs	r2, #48	; 0x30
   1c47e:	9903      	ldr	r1, [sp, #12]
   1c480:	428a      	cmp	r2, r1
   1c482:	415b      	adcs	r3, r3
   1c484:	b2db      	uxtb	r3, r3
   1c486:	469a      	mov	sl, r3
   1c488:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c48a:	4b22      	ldr	r3, [pc, #136]	; (1c514 <spi_write_reg+0xb8>)
   1c48c:	469b      	mov	fp, r3
   1c48e:	e02b      	b.n	1c4e8 <spi_write_reg+0x8c>
   1c490:	4b21      	ldr	r3, [pc, #132]	; (1c518 <spi_write_reg+0xbc>)
   1c492:	781b      	ldrb	r3, [r3, #0]
   1c494:	e7ef      	b.n	1c476 <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1c496:	4a21      	ldr	r2, [pc, #132]	; (1c51c <spi_write_reg+0xc0>)
   1c498:	4921      	ldr	r1, [pc, #132]	; (1c520 <spi_write_reg+0xc4>)
   1c49a:	4822      	ldr	r0, [pc, #136]	; (1c524 <spi_write_reg+0xc8>)
   1c49c:	4c22      	ldr	r4, [pc, #136]	; (1c528 <spi_write_reg+0xcc>)
   1c49e:	47a0      	blx	r4
   1c4a0:	9703      	str	r7, [sp, #12]
   1c4a2:	0039      	movs	r1, r7
   1c4a4:	4821      	ldr	r0, [pc, #132]	; (1c52c <spi_write_reg+0xd0>)
   1c4a6:	47a0      	blx	r4
   1c4a8:	4821      	ldr	r0, [pc, #132]	; (1c530 <spi_write_reg+0xd4>)
   1c4aa:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
   1c4ac:	2001      	movs	r0, #1
   1c4ae:	4f21      	ldr	r7, [pc, #132]	; (1c534 <spi_write_reg+0xd8>)
   1c4b0:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c4b2:	2300      	movs	r3, #0
   1c4b4:	9300      	str	r3, [sp, #0]
   1c4b6:	2200      	movs	r2, #0
   1c4b8:	2100      	movs	r1, #0
   1c4ba:	20cf      	movs	r0, #207	; 0xcf
   1c4bc:	4d1e      	ldr	r5, [pc, #120]	; (1c538 <spi_write_reg+0xdc>)
   1c4be:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c4c0:	20cf      	movs	r0, #207	; 0xcf
   1c4c2:	4b1e      	ldr	r3, [pc, #120]	; (1c53c <spi_write_reg+0xe0>)
   1c4c4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   1c4c6:	22ea      	movs	r2, #234	; 0xea
   1c4c8:	0092      	lsls	r2, r2, #2
   1c4ca:	4915      	ldr	r1, [pc, #84]	; (1c520 <spi_write_reg+0xc4>)
   1c4cc:	4815      	ldr	r0, [pc, #84]	; (1c524 <spi_write_reg+0xc8>)
   1c4ce:	47a0      	blx	r4
   1c4d0:	9b05      	ldr	r3, [sp, #20]
   1c4d2:	9a03      	ldr	r2, [sp, #12]
   1c4d4:	0031      	movs	r1, r6
   1c4d6:	481a      	ldr	r0, [pc, #104]	; (1c540 <spi_write_reg+0xe4>)
   1c4d8:	47a0      	blx	r4
   1c4da:	4815      	ldr	r0, [pc, #84]	; (1c530 <spi_write_reg+0xd4>)
   1c4dc:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c4de:	2001      	movs	r0, #1
   1c4e0:	47b8      	blx	r7
   1c4e2:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c4e4:	2e00      	cmp	r6, #0
   1c4e6:	d00b      	beq.n	1c500 <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c4e8:	4653      	mov	r3, sl
   1c4ea:	9300      	str	r3, [sp, #0]
   1c4ec:	2304      	movs	r3, #4
   1c4ee:	aa05      	add	r2, sp, #20
   1c4f0:	9f03      	ldr	r7, [sp, #12]
   1c4f2:	0039      	movs	r1, r7
   1c4f4:	9804      	ldr	r0, [sp, #16]
   1c4f6:	47d8      	blx	fp
   1c4f8:	b243      	sxtb	r3, r0
   1c4fa:	4698      	mov	r8, r3
	if (result != N_OK) {
   1c4fc:	2b01      	cmp	r3, #1
   1c4fe:	d1ca      	bne.n	1c496 <spi_write_reg+0x3a>
	}

	return result;
}
   1c500:	4640      	mov	r0, r8
   1c502:	b007      	add	sp, #28
   1c504:	bc3c      	pop	{r2, r3, r4, r5}
   1c506:	4690      	mov	r8, r2
   1c508:	4699      	mov	r9, r3
   1c50a:	46a2      	mov	sl, r4
   1c50c:	46ab      	mov	fp, r5
   1c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c510:	00029c60 	.word	0x00029c60
   1c514:	0001bed5 	.word	0x0001bed5
   1c518:	00029c61 	.word	0x00029c61
   1c51c:	0000039d 	.word	0x0000039d
   1c520:	00029cac 	.word	0x00029cac
   1c524:	00029548 	.word	0x00029548
   1c528:	0001905d 	.word	0x0001905d
   1c52c:	0002a2dc 	.word	0x0002a2dc
   1c530:	00029570 	.word	0x00029570
   1c534:	0001a221 	.word	0x0001a221
   1c538:	0001bc75 	.word	0x0001bc75
   1c53c:	0001be0d 	.word	0x0001be0d
   1c540:	0002a308 	.word	0x0002a308

0001c544 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   1c544:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c546:	46de      	mov	lr, fp
   1c548:	4657      	mov	r7, sl
   1c54a:	464e      	mov	r6, r9
   1c54c:	4645      	mov	r5, r8
   1c54e:	b5e0      	push	{r5, r6, r7, lr}
   1c550:	b089      	sub	sp, #36	; 0x24
   1c552:	9003      	str	r0, [sp, #12]
   1c554:	468a      	mov	sl, r1
   1c556:	28ff      	cmp	r0, #255	; 0xff
   1c558:	d80e      	bhi.n	1c578 <spi_read_reg+0x34>
   1c55a:	4b2e      	ldr	r3, [pc, #184]	; (1c614 <spi_read_reg+0xd0>)
   1c55c:	781b      	ldrb	r3, [r3, #0]
   1c55e:	b2db      	uxtb	r3, r3
   1c560:	9305      	str	r3, [sp, #20]
   1c562:	2300      	movs	r3, #0
   1c564:	22ff      	movs	r2, #255	; 0xff
   1c566:	9903      	ldr	r1, [sp, #12]
   1c568:	428a      	cmp	r2, r1
   1c56a:	415b      	adcs	r3, r3
   1c56c:	b2db      	uxtb	r3, r3
   1c56e:	4698      	mov	r8, r3
   1c570:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c572:	4b29      	ldr	r3, [pc, #164]	; (1c618 <spi_read_reg+0xd4>)
   1c574:	469b      	mov	fp, r3
   1c576:	e029      	b.n	1c5cc <spi_read_reg+0x88>
   1c578:	4b28      	ldr	r3, [pc, #160]	; (1c61c <spi_read_reg+0xd8>)
   1c57a:	781b      	ldrb	r3, [r3, #0]
   1c57c:	e7ef      	b.n	1c55e <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   1c57e:	4a28      	ldr	r2, [pc, #160]	; (1c620 <spi_read_reg+0xdc>)
   1c580:	4928      	ldr	r1, [pc, #160]	; (1c624 <spi_read_reg+0xe0>)
   1c582:	4829      	ldr	r0, [pc, #164]	; (1c628 <spi_read_reg+0xe4>)
   1c584:	4c29      	ldr	r4, [pc, #164]	; (1c62c <spi_read_reg+0xe8>)
   1c586:	47a0      	blx	r4
   1c588:	9703      	str	r7, [sp, #12]
   1c58a:	0039      	movs	r1, r7
   1c58c:	4828      	ldr	r0, [pc, #160]	; (1c630 <spi_read_reg+0xec>)
   1c58e:	47a0      	blx	r4
   1c590:	4828      	ldr	r0, [pc, #160]	; (1c634 <spi_read_reg+0xf0>)
   1c592:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
   1c594:	2001      	movs	r0, #1
   1c596:	4f28      	ldr	r7, [pc, #160]	; (1c638 <spi_read_reg+0xf4>)
   1c598:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c59a:	2300      	movs	r3, #0
   1c59c:	9300      	str	r3, [sp, #0]
   1c59e:	2200      	movs	r2, #0
   1c5a0:	2100      	movs	r1, #0
   1c5a2:	20cf      	movs	r0, #207	; 0xcf
   1c5a4:	4d25      	ldr	r5, [pc, #148]	; (1c63c <spi_read_reg+0xf8>)
   1c5a6:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c5a8:	20cf      	movs	r0, #207	; 0xcf
   1c5aa:	4b25      	ldr	r3, [pc, #148]	; (1c640 <spi_read_reg+0xfc>)
   1c5ac:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   1c5ae:	4a25      	ldr	r2, [pc, #148]	; (1c644 <spi_read_reg+0x100>)
   1c5b0:	491c      	ldr	r1, [pc, #112]	; (1c624 <spi_read_reg+0xe0>)
   1c5b2:	481d      	ldr	r0, [pc, #116]	; (1c628 <spi_read_reg+0xe4>)
   1c5b4:	47a0      	blx	r4
   1c5b6:	9a03      	ldr	r2, [sp, #12]
   1c5b8:	0031      	movs	r1, r6
   1c5ba:	4823      	ldr	r0, [pc, #140]	; (1c648 <spi_read_reg+0x104>)
   1c5bc:	47a0      	blx	r4
   1c5be:	481d      	ldr	r0, [pc, #116]	; (1c634 <spi_read_reg+0xf0>)
   1c5c0:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c5c2:	2001      	movs	r0, #1
   1c5c4:	47b8      	blx	r7
   1c5c6:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c5c8:	2e00      	cmp	r6, #0
   1c5ca:	d021      	beq.n	1c610 <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c5cc:	4643      	mov	r3, r8
   1c5ce:	9300      	str	r3, [sp, #0]
   1c5d0:	2304      	movs	r3, #4
   1c5d2:	aa07      	add	r2, sp, #28
   1c5d4:	9f03      	ldr	r7, [sp, #12]
   1c5d6:	0039      	movs	r1, r7
   1c5d8:	9805      	ldr	r0, [sp, #20]
   1c5da:	47d8      	blx	fp
   1c5dc:	b243      	sxtb	r3, r0
   1c5de:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
   1c5e0:	2b01      	cmp	r3, #1
   1c5e2:	d1cc      	bne.n	1c57e <spi_read_reg+0x3a>
   1c5e4:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
   1c5e6:	aa07      	add	r2, sp, #28
   1c5e8:	7853      	ldrb	r3, [r2, #1]
   1c5ea:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
   1c5ec:	7891      	ldrb	r1, [r2, #2]
   1c5ee:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
   1c5f0:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
   1c5f2:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
   1c5f4:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
   1c5f6:	78d2      	ldrb	r2, [r2, #3]
   1c5f8:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
   1c5fa:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
   1c5fc:	4652      	mov	r2, sl
   1c5fe:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
   1c600:	0028      	movs	r0, r5
   1c602:	b009      	add	sp, #36	; 0x24
   1c604:	bc3c      	pop	{r2, r3, r4, r5}
   1c606:	4690      	mov	r8, r2
   1c608:	4699      	mov	r9, r3
   1c60a:	46a2      	mov	sl, r4
   1c60c:	46ab      	mov	fp, r5
   1c60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c610:	9d04      	ldr	r5, [sp, #16]
   1c612:	e7f5      	b.n	1c600 <spi_read_reg+0xbc>
   1c614:	00029c62 	.word	0x00029c62
   1c618:	0001bed5 	.word	0x0001bed5
   1c61c:	00029c63 	.word	0x00029c63
   1c620:	00000423 	.word	0x00000423
   1c624:	00029ccc 	.word	0x00029ccc
   1c628:	00029548 	.word	0x00029548
   1c62c:	0001905d 	.word	0x0001905d
   1c630:	0002a298 	.word	0x0002a298
   1c634:	00029570 	.word	0x00029570
   1c638:	0001a221 	.word	0x0001a221
   1c63c:	0001bc75 	.word	0x0001bc75
   1c640:	0001be0d 	.word	0x0001be0d
   1c644:	00000435 	.word	0x00000435
   1c648:	0002a2c4 	.word	0x0002a2c4

0001c64c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
   1c64c:	b510      	push	{r4, lr}
   1c64e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c650:	2300      	movs	r3, #0
   1c652:	9300      	str	r3, [sp, #0]
   1c654:	2200      	movs	r2, #0
   1c656:	2100      	movs	r1, #0
   1c658:	20cf      	movs	r0, #207	; 0xcf
   1c65a:	4c04      	ldr	r4, [pc, #16]	; (1c66c <nm_spi_reset+0x20>)
   1c65c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   1c65e:	20cf      	movs	r0, #207	; 0xcf
   1c660:	4b03      	ldr	r3, [pc, #12]	; (1c670 <nm_spi_reset+0x24>)
   1c662:	4798      	blx	r3
	return M2M_SUCCESS;
}
   1c664:	2000      	movs	r0, #0
   1c666:	b002      	add	sp, #8
   1c668:	bd10      	pop	{r4, pc}
   1c66a:	46c0      	nop			; (mov r8, r8)
   1c66c:	0001bc75 	.word	0x0001bc75
   1c670:	0001be0d 	.word	0x0001be0d

0001c674 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
   1c674:	2200      	movs	r2, #0
   1c676:	4b02      	ldr	r3, [pc, #8]	; (1c680 <nm_spi_deinit+0xc>)
   1c678:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
   1c67a:	2000      	movs	r0, #0
   1c67c:	4770      	bx	lr
   1c67e:	46c0      	nop			; (mov r8, r8)
   1c680:	20003cec 	.word	0x20003cec

0001c684 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   1c684:	b500      	push	{lr}
   1c686:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   1c688:	a901      	add	r1, sp, #4
   1c68a:	4b02      	ldr	r3, [pc, #8]	; (1c694 <nm_spi_read_reg+0x10>)
   1c68c:	4798      	blx	r3

	return u32Val;
}
   1c68e:	9801      	ldr	r0, [sp, #4]
   1c690:	b003      	add	sp, #12
   1c692:	bd00      	pop	{pc}
   1c694:	0001c545 	.word	0x0001c545

0001c698 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1c698:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1c69a:	4b04      	ldr	r3, [pc, #16]	; (1c6ac <nm_spi_read_reg_with_ret+0x14>)
   1c69c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c69e:	2300      	movs	r3, #0
   1c6a0:	2801      	cmp	r0, #1
   1c6a2:	d101      	bne.n	1c6a8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c6a4:	0018      	movs	r0, r3
   1c6a6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c6a8:	3b06      	subs	r3, #6
   1c6aa:	e7fb      	b.n	1c6a4 <nm_spi_read_reg_with_ret+0xc>
   1c6ac:	0001c545 	.word	0x0001c545

0001c6b0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1c6b0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   1c6b2:	4b04      	ldr	r3, [pc, #16]	; (1c6c4 <nm_spi_write_reg+0x14>)
   1c6b4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c6b6:	2300      	movs	r3, #0
   1c6b8:	2801      	cmp	r0, #1
   1c6ba:	d101      	bne.n	1c6c0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c6bc:	0018      	movs	r0, r3
   1c6be:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c6c0:	3b06      	subs	r3, #6
   1c6c2:	e7fb      	b.n	1c6bc <nm_spi_write_reg+0xc>
   1c6c4:	0001c45d 	.word	0x0001c45d

0001c6c8 <nm_spi_init>:
{
   1c6c8:	b530      	push	{r4, r5, lr}
   1c6ca:	b083      	sub	sp, #12
	uint32 reg = 0;
   1c6cc:	2300      	movs	r3, #0
   1c6ce:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
   1c6d0:	4a31      	ldr	r2, [pc, #196]	; (1c798 <nm_spi_init+0xd0>)
   1c6d2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   1c6d4:	4669      	mov	r1, sp
   1c6d6:	4831      	ldr	r0, [pc, #196]	; (1c79c <nm_spi_init+0xd4>)
   1c6d8:	4b31      	ldr	r3, [pc, #196]	; (1c7a0 <nm_spi_init+0xd8>)
   1c6da:	4798      	blx	r3
   1c6dc:	2800      	cmp	r0, #0
   1c6de:	d028      	beq.n	1c732 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
   1c6e0:	4b2d      	ldr	r3, [pc, #180]	; (1c798 <nm_spi_init+0xd0>)
   1c6e2:	781b      	ldrb	r3, [r3, #0]
   1c6e4:	2b00      	cmp	r3, #0
   1c6e6:	d10d      	bne.n	1c704 <nm_spi_init+0x3c>
		reg &= ~0x70;
   1c6e8:	337c      	adds	r3, #124	; 0x7c
   1c6ea:	9900      	ldr	r1, [sp, #0]
   1c6ec:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
   1c6ee:	3b2c      	subs	r3, #44	; 0x2c
   1c6f0:	4319      	orrs	r1, r3
   1c6f2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   1c6f4:	4829      	ldr	r0, [pc, #164]	; (1c79c <nm_spi_init+0xd4>)
   1c6f6:	4b2b      	ldr	r3, [pc, #172]	; (1c7a4 <nm_spi_init+0xdc>)
   1c6f8:	4798      	blx	r3
   1c6fa:	1e04      	subs	r4, r0, #0
   1c6fc:	d036      	beq.n	1c76c <nm_spi_init+0xa4>
		gu8Crc_off = 1;
   1c6fe:	2201      	movs	r2, #1
   1c700:	4b25      	ldr	r3, [pc, #148]	; (1c798 <nm_spi_init+0xd0>)
   1c702:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
   1c704:	a901      	add	r1, sp, #4
   1c706:	2080      	movs	r0, #128	; 0x80
   1c708:	0140      	lsls	r0, r0, #5
   1c70a:	4b25      	ldr	r3, [pc, #148]	; (1c7a0 <nm_spi_init+0xd8>)
   1c70c:	4798      	blx	r3
   1c70e:	2800      	cmp	r0, #0
   1c710:	d036      	beq.n	1c780 <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1c712:	4c22      	ldr	r4, [pc, #136]	; (1c79c <nm_spi_init+0xd4>)
   1c714:	0020      	movs	r0, r4
   1c716:	4b24      	ldr	r3, [pc, #144]	; (1c7a8 <nm_spi_init+0xe0>)
   1c718:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
   1c71a:	2370      	movs	r3, #112	; 0x70
   1c71c:	0001      	movs	r1, r0
   1c71e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
   1c720:	2050      	movs	r0, #80	; 0x50
   1c722:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   1c724:	0020      	movs	r0, r4
   1c726:	4b21      	ldr	r3, [pc, #132]	; (1c7ac <nm_spi_init+0xe4>)
   1c728:	4798      	blx	r3
	return M2M_SUCCESS;
   1c72a:	2400      	movs	r4, #0
}
   1c72c:	0020      	movs	r0, r4
   1c72e:	b003      	add	sp, #12
   1c730:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
   1c732:	2201      	movs	r2, #1
   1c734:	4b18      	ldr	r3, [pc, #96]	; (1c798 <nm_spi_init+0xd0>)
   1c736:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   1c738:	2298      	movs	r2, #152	; 0x98
   1c73a:	00d2      	lsls	r2, r2, #3
   1c73c:	491c      	ldr	r1, [pc, #112]	; (1c7b0 <nm_spi_init+0xe8>)
   1c73e:	481d      	ldr	r0, [pc, #116]	; (1c7b4 <nm_spi_init+0xec>)
   1c740:	4c1d      	ldr	r4, [pc, #116]	; (1c7b8 <nm_spi_init+0xf0>)
   1c742:	47a0      	blx	r4
   1c744:	481d      	ldr	r0, [pc, #116]	; (1c7bc <nm_spi_init+0xf4>)
   1c746:	47a0      	blx	r4
   1c748:	481d      	ldr	r0, [pc, #116]	; (1c7c0 <nm_spi_init+0xf8>)
   1c74a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   1c74c:	4669      	mov	r1, sp
   1c74e:	4813      	ldr	r0, [pc, #76]	; (1c79c <nm_spi_init+0xd4>)
   1c750:	4b13      	ldr	r3, [pc, #76]	; (1c7a0 <nm_spi_init+0xd8>)
   1c752:	4798      	blx	r3
   1c754:	1e04      	subs	r4, r0, #0
   1c756:	d1c3      	bne.n	1c6e0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   1c758:	4a1a      	ldr	r2, [pc, #104]	; (1c7c4 <nm_spi_init+0xfc>)
   1c75a:	4915      	ldr	r1, [pc, #84]	; (1c7b0 <nm_spi_init+0xe8>)
   1c75c:	4815      	ldr	r0, [pc, #84]	; (1c7b4 <nm_spi_init+0xec>)
   1c75e:	4d16      	ldr	r5, [pc, #88]	; (1c7b8 <nm_spi_init+0xf0>)
   1c760:	47a8      	blx	r5
   1c762:	4819      	ldr	r0, [pc, #100]	; (1c7c8 <nm_spi_init+0x100>)
   1c764:	47a8      	blx	r5
   1c766:	4816      	ldr	r0, [pc, #88]	; (1c7c0 <nm_spi_init+0xf8>)
   1c768:	47a8      	blx	r5
			return 0;
   1c76a:	e7df      	b.n	1c72c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   1c76c:	4a17      	ldr	r2, [pc, #92]	; (1c7cc <nm_spi_init+0x104>)
   1c76e:	4910      	ldr	r1, [pc, #64]	; (1c7b0 <nm_spi_init+0xe8>)
   1c770:	4810      	ldr	r0, [pc, #64]	; (1c7b4 <nm_spi_init+0xec>)
   1c772:	4d11      	ldr	r5, [pc, #68]	; (1c7b8 <nm_spi_init+0xf0>)
   1c774:	47a8      	blx	r5
   1c776:	4816      	ldr	r0, [pc, #88]	; (1c7d0 <nm_spi_init+0x108>)
   1c778:	47a8      	blx	r5
   1c77a:	4811      	ldr	r0, [pc, #68]	; (1c7c0 <nm_spi_init+0xf8>)
   1c77c:	47a8      	blx	r5
			return 0;
   1c77e:	e7d5      	b.n	1c72c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   1c780:	4a14      	ldr	r2, [pc, #80]	; (1c7d4 <nm_spi_init+0x10c>)
   1c782:	490b      	ldr	r1, [pc, #44]	; (1c7b0 <nm_spi_init+0xe8>)
   1c784:	480b      	ldr	r0, [pc, #44]	; (1c7b4 <nm_spi_init+0xec>)
   1c786:	4c0c      	ldr	r4, [pc, #48]	; (1c7b8 <nm_spi_init+0xf0>)
   1c788:	47a0      	blx	r4
   1c78a:	4813      	ldr	r0, [pc, #76]	; (1c7d8 <nm_spi_init+0x110>)
   1c78c:	47a0      	blx	r4
   1c78e:	480c      	ldr	r0, [pc, #48]	; (1c7c0 <nm_spi_init+0xf8>)
   1c790:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
   1c792:	2406      	movs	r4, #6
   1c794:	4264      	negs	r4, r4
   1c796:	e7c9      	b.n	1c72c <nm_spi_init+0x64>
   1c798:	20003cec 	.word	0x20003cec
   1c79c:	0000e824 	.word	0x0000e824
   1c7a0:	0001c545 	.word	0x0001c545
   1c7a4:	0001c45d 	.word	0x0001c45d
   1c7a8:	0001c685 	.word	0x0001c685
   1c7ac:	0001c6b1 	.word	0x0001c6b1
   1c7b0:	00029ce8 	.word	0x00029ce8
   1c7b4:	00029548 	.word	0x00029548
   1c7b8:	0001905d 	.word	0x0001905d
   1c7bc:	00029df4 	.word	0x00029df4
   1c7c0:	00029570 	.word	0x00029570
   1c7c4:	000004c3 	.word	0x000004c3
   1c7c8:	00029e44 	.word	0x00029e44
   1c7cc:	000004cd 	.word	0x000004cd
   1c7d0:	00029e74 	.word	0x00029e74
   1c7d4:	000004d7 	.word	0x000004d7
   1c7d8:	00029ea8 	.word	0x00029ea8

0001c7dc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7de:	46de      	mov	lr, fp
   1c7e0:	464f      	mov	r7, r9
   1c7e2:	4646      	mov	r6, r8
   1c7e4:	b5c0      	push	{r6, r7, lr}
   1c7e6:	b086      	sub	sp, #24
   1c7e8:	9003      	str	r0, [sp, #12]
   1c7ea:	9105      	str	r1, [sp, #20]
   1c7ec:	9204      	str	r2, [sp, #16]
   1c7ee:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c7f0:	4b21      	ldr	r3, [pc, #132]	; (1c878 <nm_spi_read_block+0x9c>)
   1c7f2:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   1c7f4:	002f      	movs	r7, r5
   1c7f6:	e029      	b.n	1c84c <nm_spi_read_block+0x70>
   1c7f8:	4a20      	ldr	r2, [pc, #128]	; (1c87c <nm_spi_read_block+0xa0>)
   1c7fa:	4921      	ldr	r1, [pc, #132]	; (1c880 <nm_spi_read_block+0xa4>)
   1c7fc:	4821      	ldr	r0, [pc, #132]	; (1c884 <nm_spi_read_block+0xa8>)
   1c7fe:	4c22      	ldr	r4, [pc, #136]	; (1c888 <nm_spi_read_block+0xac>)
   1c800:	47a0      	blx	r4
   1c802:	9503      	str	r5, [sp, #12]
   1c804:	0029      	movs	r1, r5
   1c806:	4821      	ldr	r0, [pc, #132]	; (1c88c <nm_spi_read_block+0xb0>)
   1c808:	47a0      	blx	r4
   1c80a:	4d21      	ldr	r5, [pc, #132]	; (1c890 <nm_spi_read_block+0xb4>)
   1c80c:	0028      	movs	r0, r5
   1c80e:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c810:	2001      	movs	r0, #1
   1c812:	4920      	ldr	r1, [pc, #128]	; (1c894 <nm_spi_read_block+0xb8>)
   1c814:	4689      	mov	r9, r1
   1c816:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c818:	2300      	movs	r3, #0
   1c81a:	9300      	str	r3, [sp, #0]
   1c81c:	2200      	movs	r2, #0
   1c81e:	2100      	movs	r1, #0
   1c820:	20cf      	movs	r0, #207	; 0xcf
   1c822:	4e1d      	ldr	r6, [pc, #116]	; (1c898 <nm_spi_read_block+0xbc>)
   1c824:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
   1c826:	20cf      	movs	r0, #207	; 0xcf
   1c828:	4b1c      	ldr	r3, [pc, #112]	; (1c89c <nm_spi_read_block+0xc0>)
   1c82a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c82c:	4a1c      	ldr	r2, [pc, #112]	; (1c8a0 <nm_spi_read_block+0xc4>)
   1c82e:	4914      	ldr	r1, [pc, #80]	; (1c880 <nm_spi_read_block+0xa4>)
   1c830:	4814      	ldr	r0, [pc, #80]	; (1c884 <nm_spi_read_block+0xa8>)
   1c832:	47a0      	blx	r4
   1c834:	9b04      	ldr	r3, [sp, #16]
   1c836:	9a03      	ldr	r2, [sp, #12]
   1c838:	0039      	movs	r1, r7
   1c83a:	481a      	ldr	r0, [pc, #104]	; (1c8a4 <nm_spi_read_block+0xc8>)
   1c83c:	47a0      	blx	r4
   1c83e:	0028      	movs	r0, r5
   1c840:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c842:	2001      	movs	r0, #1
   1c844:	47c8      	blx	r9
   1c846:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
   1c848:	2f00      	cmp	r7, #0
   1c84a:	d011      	beq.n	1c870 <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c84c:	2300      	movs	r3, #0
   1c84e:	9300      	str	r3, [sp, #0]
   1c850:	9b04      	ldr	r3, [sp, #16]
   1c852:	9a05      	ldr	r2, [sp, #20]
   1c854:	9d03      	ldr	r5, [sp, #12]
   1c856:	0029      	movs	r1, r5
   1c858:	20c8      	movs	r0, #200	; 0xc8
   1c85a:	47c0      	blx	r8
	if (result != N_OK) {
   1c85c:	b240      	sxtb	r0, r0
   1c85e:	2801      	cmp	r0, #1
   1c860:	d1ca      	bne.n	1c7f8 <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c862:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c864:	b006      	add	sp, #24
   1c866:	bc1c      	pop	{r2, r3, r4}
   1c868:	4690      	mov	r8, r2
   1c86a:	4699      	mov	r9, r3
   1c86c:	46a3      	mov	fp, r4
   1c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c870:	2006      	movs	r0, #6
   1c872:	4240      	negs	r0, r0
   1c874:	e7f6      	b.n	1c864 <nm_spi_read_block+0x88>
   1c876:	46c0      	nop			; (mov r8, r8)
   1c878:	0001bed5 	.word	0x0001bed5
   1c87c:	00000472 	.word	0x00000472
   1c880:	00029cdc 	.word	0x00029cdc
   1c884:	00029548 	.word	0x00029548
   1c888:	0001905d 	.word	0x0001905d
   1c88c:	00029ed0 	.word	0x00029ed0
   1c890:	00029570 	.word	0x00029570
   1c894:	0001a221 	.word	0x0001a221
   1c898:	0001bc75 	.word	0x0001bc75
   1c89c:	0001be0d 	.word	0x0001be0d
   1c8a0:	0000047d 	.word	0x0000047d
   1c8a4:	00029f00 	.word	0x00029f00

0001c8a8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8aa:	46de      	mov	lr, fp
   1c8ac:	4647      	mov	r7, r8
   1c8ae:	b580      	push	{r7, lr}
   1c8b0:	b089      	sub	sp, #36	; 0x24
   1c8b2:	9004      	str	r0, [sp, #16]
   1c8b4:	468b      	mov	fp, r1
   1c8b6:	9203      	str	r2, [sp, #12]
   1c8b8:	230a      	movs	r3, #10
   1c8ba:	4698      	mov	r8, r3
   1c8bc:	2780      	movs	r7, #128	; 0x80
   1c8be:	01bf      	lsls	r7, r7, #6
   1c8c0:	466b      	mov	r3, sp
   1c8c2:	82df      	strh	r7, [r3, #22]
   1c8c4:	e068      	b.n	1c998 <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
   1c8c6:	2200      	movs	r2, #0
   1c8c8:	ab07      	add	r3, sp, #28
   1c8ca:	801a      	strh	r2, [r3, #0]
   1c8cc:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
   1c8ce:	2500      	movs	r5, #0
   1c8d0:	e021      	b.n	1c916 <nm_spi_write_block+0x6e>
				order = 0x2;
   1c8d2:	2300      	movs	r3, #0
   1c8d4:	42a7      	cmp	r7, r4
   1c8d6:	415b      	adcs	r3, r3
   1c8d8:	3302      	adds	r3, #2
		cmd |= order;
   1c8da:	200b      	movs	r0, #11
   1c8dc:	aa04      	add	r2, sp, #16
   1c8de:	4694      	mov	ip, r2
   1c8e0:	4460      	add	r0, ip
   1c8e2:	2210      	movs	r2, #16
   1c8e4:	4252      	negs	r2, r2
   1c8e6:	4313      	orrs	r3, r2
   1c8e8:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   1c8ea:	2101      	movs	r1, #1
   1c8ec:	4b65      	ldr	r3, [pc, #404]	; (1ca84 <nm_spi_write_block+0x1dc>)
   1c8ee:	4798      	blx	r3
   1c8f0:	2800      	cmp	r0, #0
   1c8f2:	d11d      	bne.n	1c930 <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   1c8f4:	465b      	mov	r3, fp
   1c8f6:	1958      	adds	r0, r3, r5
   1c8f8:	0031      	movs	r1, r6
   1c8fa:	4b62      	ldr	r3, [pc, #392]	; (1ca84 <nm_spi_write_block+0x1dc>)
   1c8fc:	4798      	blx	r3
   1c8fe:	2800      	cmp	r0, #0
   1c900:	d161      	bne.n	1c9c6 <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
   1c902:	4b61      	ldr	r3, [pc, #388]	; (1ca88 <nm_spi_write_block+0x1e0>)
   1c904:	781b      	ldrb	r3, [r3, #0]
   1c906:	2b00      	cmp	r3, #0
   1c908:	d067      	beq.n	1c9da <nm_spi_write_block+0x132>
		ix += nbytes;
   1c90a:	1975      	adds	r5, r6, r5
   1c90c:	b22d      	sxth	r5, r5
		sz -= nbytes;
   1c90e:	1ba4      	subs	r4, r4, r6
   1c910:	b2a4      	uxth	r4, r4
	} while (sz);
   1c912:	2c00      	cmp	r4, #0
   1c914:	d07d      	beq.n	1ca12 <nm_spi_write_block+0x16a>
   1c916:	1c26      	adds	r6, r4, #0
   1c918:	42bc      	cmp	r4, r7
   1c91a:	d901      	bls.n	1c920 <nm_spi_write_block+0x78>
   1c91c:	466b      	mov	r3, sp
   1c91e:	8ade      	ldrh	r6, [r3, #22]
   1c920:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
   1c922:	2d00      	cmp	r5, #0
   1c924:	d1d5      	bne.n	1c8d2 <nm_spi_write_block+0x2a>
				order = 0x3;
   1c926:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
   1c928:	42bc      	cmp	r4, r7
   1c92a:	d9d6      	bls.n	1c8da <nm_spi_write_block+0x32>
				order = 0x1;
   1c92c:	3b02      	subs	r3, #2
   1c92e:	e7d4      	b.n	1c8da <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   1c930:	4a56      	ldr	r2, [pc, #344]	; (1ca8c <nm_spi_write_block+0x1e4>)
   1c932:	4957      	ldr	r1, [pc, #348]	; (1ca90 <nm_spi_write_block+0x1e8>)
   1c934:	4857      	ldr	r0, [pc, #348]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1c936:	4c58      	ldr	r4, [pc, #352]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1c938:	47a0      	blx	r4
   1c93a:	4858      	ldr	r0, [pc, #352]	; (1ca9c <nm_spi_write_block+0x1f4>)
   1c93c:	47a0      	blx	r4
   1c93e:	4858      	ldr	r0, [pc, #352]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1c940:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1c942:	4a58      	ldr	r2, [pc, #352]	; (1caa4 <nm_spi_write_block+0x1fc>)
   1c944:	4958      	ldr	r1, [pc, #352]	; (1caa8 <nm_spi_write_block+0x200>)
   1c946:	4853      	ldr	r0, [pc, #332]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1c948:	4c53      	ldr	r4, [pc, #332]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1c94a:	47a0      	blx	r4
   1c94c:	4857      	ldr	r0, [pc, #348]	; (1caac <nm_spi_write_block+0x204>)
   1c94e:	47a0      	blx	r4
   1c950:	4853      	ldr	r0, [pc, #332]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1c952:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c954:	2001      	movs	r0, #1
   1c956:	4d56      	ldr	r5, [pc, #344]	; (1cab0 <nm_spi_write_block+0x208>)
   1c958:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c95a:	2300      	movs	r3, #0
   1c95c:	9300      	str	r3, [sp, #0]
   1c95e:	2200      	movs	r2, #0
   1c960:	2100      	movs	r1, #0
   1c962:	20cf      	movs	r0, #207	; 0xcf
   1c964:	4c53      	ldr	r4, [pc, #332]	; (1cab4 <nm_spi_write_block+0x20c>)
   1c966:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1c968:	20cf      	movs	r0, #207	; 0xcf
   1c96a:	4b53      	ldr	r3, [pc, #332]	; (1cab8 <nm_spi_write_block+0x210>)
   1c96c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c96e:	4a53      	ldr	r2, [pc, #332]	; (1cabc <nm_spi_write_block+0x214>)
   1c970:	494d      	ldr	r1, [pc, #308]	; (1caa8 <nm_spi_write_block+0x200>)
   1c972:	4848      	ldr	r0, [pc, #288]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1c974:	4c48      	ldr	r4, [pc, #288]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1c976:	47a0      	blx	r4
   1c978:	9b03      	ldr	r3, [sp, #12]
   1c97a:	9a04      	ldr	r2, [sp, #16]
   1c97c:	4641      	mov	r1, r8
   1c97e:	4850      	ldr	r0, [pc, #320]	; (1cac0 <nm_spi_write_block+0x218>)
   1c980:	47a0      	blx	r4
   1c982:	4847      	ldr	r0, [pc, #284]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1c984:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c986:	2001      	movs	r0, #1
   1c988:	47a8      	blx	r5
   1c98a:	2301      	movs	r3, #1
   1c98c:	425b      	negs	r3, r3
   1c98e:	469c      	mov	ip, r3
   1c990:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
   1c992:	4643      	mov	r3, r8
   1c994:	2b00      	cmp	r3, #0
   1c996:	d06e      	beq.n	1ca76 <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   1c998:	2300      	movs	r3, #0
   1c99a:	9300      	str	r3, [sp, #0]
   1c99c:	9b03      	ldr	r3, [sp, #12]
   1c99e:	2200      	movs	r2, #0
   1c9a0:	9d04      	ldr	r5, [sp, #16]
   1c9a2:	0029      	movs	r1, r5
   1c9a4:	20c7      	movs	r0, #199	; 0xc7
   1c9a6:	4c47      	ldr	r4, [pc, #284]	; (1cac4 <nm_spi_write_block+0x21c>)
   1c9a8:	47a0      	blx	r4
	if (result != N_OK) {
   1c9aa:	b240      	sxtb	r0, r0
   1c9ac:	2801      	cmp	r0, #1
   1c9ae:	d08a      	beq.n	1c8c6 <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   1c9b0:	4a45      	ldr	r2, [pc, #276]	; (1cac8 <nm_spi_write_block+0x220>)
   1c9b2:	493d      	ldr	r1, [pc, #244]	; (1caa8 <nm_spi_write_block+0x200>)
   1c9b4:	4837      	ldr	r0, [pc, #220]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1c9b6:	4c38      	ldr	r4, [pc, #224]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1c9b8:	47a0      	blx	r4
   1c9ba:	0029      	movs	r1, r5
   1c9bc:	4843      	ldr	r0, [pc, #268]	; (1cacc <nm_spi_write_block+0x224>)
   1c9be:	47a0      	blx	r4
   1c9c0:	4837      	ldr	r0, [pc, #220]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1c9c2:	47a0      	blx	r4
   1c9c4:	e7c6      	b.n	1c954 <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   1c9c6:	4a42      	ldr	r2, [pc, #264]	; (1cad0 <nm_spi_write_block+0x228>)
   1c9c8:	4931      	ldr	r1, [pc, #196]	; (1ca90 <nm_spi_write_block+0x1e8>)
   1c9ca:	4832      	ldr	r0, [pc, #200]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1c9cc:	4c32      	ldr	r4, [pc, #200]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1c9ce:	47a0      	blx	r4
   1c9d0:	4840      	ldr	r0, [pc, #256]	; (1cad4 <nm_spi_write_block+0x22c>)
   1c9d2:	47a0      	blx	r4
   1c9d4:	4832      	ldr	r0, [pc, #200]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1c9d6:	47a0      	blx	r4
   1c9d8:	e7b3      	b.n	1c942 <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   1c9da:	2102      	movs	r1, #2
   1c9dc:	a807      	add	r0, sp, #28
   1c9de:	4b29      	ldr	r3, [pc, #164]	; (1ca84 <nm_spi_write_block+0x1dc>)
   1c9e0:	4798      	blx	r3
   1c9e2:	2800      	cmp	r0, #0
   1c9e4:	d091      	beq.n	1c90a <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   1c9e6:	22d7      	movs	r2, #215	; 0xd7
   1c9e8:	0092      	lsls	r2, r2, #2
   1c9ea:	4929      	ldr	r1, [pc, #164]	; (1ca90 <nm_spi_write_block+0x1e8>)
   1c9ec:	4829      	ldr	r0, [pc, #164]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1c9ee:	4c2a      	ldr	r4, [pc, #168]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1c9f0:	47a0      	blx	r4
   1c9f2:	4839      	ldr	r0, [pc, #228]	; (1cad8 <nm_spi_write_block+0x230>)
   1c9f4:	47a0      	blx	r4
   1c9f6:	482a      	ldr	r0, [pc, #168]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1c9f8:	47a0      	blx	r4
   1c9fa:	e7a2      	b.n	1c942 <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   1c9fc:	229a      	movs	r2, #154	; 0x9a
   1c9fe:	0052      	lsls	r2, r2, #1
   1ca00:	4936      	ldr	r1, [pc, #216]	; (1cadc <nm_spi_write_block+0x234>)
   1ca02:	4824      	ldr	r0, [pc, #144]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1ca04:	4c24      	ldr	r4, [pc, #144]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1ca06:	47a0      	blx	r4
   1ca08:	4835      	ldr	r0, [pc, #212]	; (1cae0 <nm_spi_write_block+0x238>)
   1ca0a:	47a0      	blx	r4
   1ca0c:	4824      	ldr	r0, [pc, #144]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1ca0e:	47a0      	blx	r4
   1ca10:	e025      	b.n	1ca5e <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
   1ca12:	4b1d      	ldr	r3, [pc, #116]	; (1ca88 <nm_spi_write_block+0x1e0>)
   1ca14:	781c      	ldrb	r4, [r3, #0]
		len = 3;
   1ca16:	1e63      	subs	r3, r4, #1
   1ca18:	419c      	sbcs	r4, r3
   1ca1a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   1ca1c:	b2a1      	uxth	r1, r4
   1ca1e:	a807      	add	r0, sp, #28
   1ca20:	4b30      	ldr	r3, [pc, #192]	; (1cae4 <nm_spi_write_block+0x23c>)
   1ca22:	4798      	blx	r3
   1ca24:	2800      	cmp	r0, #0
   1ca26:	d1e9      	bne.n	1c9fc <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   1ca28:	ab08      	add	r3, sp, #32
   1ca2a:	191b      	adds	r3, r3, r4
   1ca2c:	3b05      	subs	r3, #5
   1ca2e:	781b      	ldrb	r3, [r3, #0]
   1ca30:	2b00      	cmp	r3, #0
   1ca32:	d106      	bne.n	1ca42 <nm_spi_write_block+0x19a>
   1ca34:	ab08      	add	r3, sp, #32
   1ca36:	469c      	mov	ip, r3
   1ca38:	4464      	add	r4, ip
   1ca3a:	3c06      	subs	r4, #6
   1ca3c:	7823      	ldrb	r3, [r4, #0]
   1ca3e:	2bc3      	cmp	r3, #195	; 0xc3
   1ca40:	d017      	beq.n	1ca72 <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   1ca42:	223c      	movs	r2, #60	; 0x3c
   1ca44:	32ff      	adds	r2, #255	; 0xff
   1ca46:	4925      	ldr	r1, [pc, #148]	; (1cadc <nm_spi_write_block+0x234>)
   1ca48:	4812      	ldr	r0, [pc, #72]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1ca4a:	4c13      	ldr	r4, [pc, #76]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1ca4c:	47a0      	blx	r4
   1ca4e:	a907      	add	r1, sp, #28
   1ca50:	788b      	ldrb	r3, [r1, #2]
   1ca52:	784a      	ldrb	r2, [r1, #1]
   1ca54:	7809      	ldrb	r1, [r1, #0]
   1ca56:	4824      	ldr	r0, [pc, #144]	; (1cae8 <nm_spi_write_block+0x240>)
   1ca58:	47a0      	blx	r4
   1ca5a:	4811      	ldr	r0, [pc, #68]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1ca5c:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1ca5e:	4a23      	ldr	r2, [pc, #140]	; (1caec <nm_spi_write_block+0x244>)
   1ca60:	4911      	ldr	r1, [pc, #68]	; (1caa8 <nm_spi_write_block+0x200>)
   1ca62:	480c      	ldr	r0, [pc, #48]	; (1ca94 <nm_spi_write_block+0x1ec>)
   1ca64:	4c0c      	ldr	r4, [pc, #48]	; (1ca98 <nm_spi_write_block+0x1f0>)
   1ca66:	47a0      	blx	r4
   1ca68:	4810      	ldr	r0, [pc, #64]	; (1caac <nm_spi_write_block+0x204>)
   1ca6a:	47a0      	blx	r4
   1ca6c:	480c      	ldr	r0, [pc, #48]	; (1caa0 <nm_spi_write_block+0x1f8>)
   1ca6e:	47a0      	blx	r4
   1ca70:	e770      	b.n	1c954 <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1ca72:	2000      	movs	r0, #0
   1ca74:	e001      	b.n	1ca7a <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1ca76:	2006      	movs	r0, #6
   1ca78:	4240      	negs	r0, r0

	return s8Ret;
}
   1ca7a:	b009      	add	sp, #36	; 0x24
   1ca7c:	bc0c      	pop	{r2, r3}
   1ca7e:	4690      	mov	r8, r2
   1ca80:	469b      	mov	fp, r3
   1ca82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca84:	0001bc55 	.word	0x0001bc55
   1ca88:	20003cec 	.word	0x20003cec
   1ca8c:	00000349 	.word	0x00000349
   1ca90:	00029c9c 	.word	0x00029c9c
   1ca94:	00029548 	.word	0x00029548
   1ca98:	0001905d 	.word	0x0001905d
   1ca9c:	00029f4c 	.word	0x00029f4c
   1caa0:	00029570 	.word	0x00029570
   1caa4:	000003d9 	.word	0x000003d9
   1caa8:	00029cbc 	.word	0x00029cbc
   1caac:	0002a040 	.word	0x0002a040
   1cab0:	0001a221 	.word	0x0001a221
   1cab4:	0001bc75 	.word	0x0001bc75
   1cab8:	0001be0d 	.word	0x0001be0d
   1cabc:	000003eb 	.word	0x000003eb
   1cac0:	00029f00 	.word	0x00029f00
   1cac4:	0001bed5 	.word	0x0001bed5
   1cac8:	000003cf 	.word	0x000003cf
   1cacc:	00029f1c 	.word	0x00029f1c
   1cad0:	00000352 	.word	0x00000352
   1cad4:	00029f84 	.word	0x00029f84
   1cad8:	00029fb8 	.word	0x00029fb8
   1cadc:	00029c6c 	.word	0x00029c6c
   1cae0:	00029ff0 	.word	0x00029ff0
   1cae4:	0001bded 	.word	0x0001bded
   1cae8:	0002a010 	.word	0x0002a010
   1caec:	000003e1 	.word	0x000003e1

0001caf0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   1caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1caf2:	46de      	mov	lr, fp
   1caf4:	4657      	mov	r7, sl
   1caf6:	464e      	mov	r6, r9
   1caf8:	4645      	mov	r5, r8
   1cafa:	b5e0      	push	{r5, r6, r7, lr}
   1cafc:	b085      	sub	sp, #20
   1cafe:	9001      	str	r0, [sp, #4]
   1cb00:	000e      	movs	r6, r1
   1cb02:	9202      	str	r2, [sp, #8]
   1cb04:	001d      	movs	r5, r3
   1cb06:	ab0e      	add	r3, sp, #56	; 0x38
   1cb08:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   1cb0a:	2c00      	cmp	r4, #0
   1cb0c:	d063      	beq.n	1cbd6 <Socket_ReadSocketData+0xe6>
   1cb0e:	0103      	lsls	r3, r0, #4
   1cb10:	4934      	ldr	r1, [pc, #208]	; (1cbe4 <Socket_ReadSocketData+0xf4>)
   1cb12:	585b      	ldr	r3, [r3, r1]
   1cb14:	2b00      	cmp	r3, #0
   1cb16:	d05e      	beq.n	1cbd6 <Socket_ReadSocketData+0xe6>
   1cb18:	0101      	lsls	r1, r0, #4
   1cb1a:	4b32      	ldr	r3, [pc, #200]	; (1cbe4 <Socket_ReadSocketData+0xf4>)
   1cb1c:	185b      	adds	r3, r3, r1
   1cb1e:	889b      	ldrh	r3, [r3, #4]
   1cb20:	b29b      	uxth	r3, r3
   1cb22:	2b00      	cmp	r3, #0
   1cb24:	d057      	beq.n	1cbd6 <Socket_ReadSocketData+0xe6>
   1cb26:	4b2f      	ldr	r3, [pc, #188]	; (1cbe4 <Socket_ReadSocketData+0xf4>)
   1cb28:	185b      	adds	r3, r3, r1
   1cb2a:	7a9b      	ldrb	r3, [r3, #10]
   1cb2c:	2b01      	cmp	r3, #1
   1cb2e:	d152      	bne.n	1cbd6 <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   1cb30:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1cb32:	4b2c      	ldr	r3, [pc, #176]	; (1cbe4 <Socket_ReadSocketData+0xf4>)
   1cb34:	469b      	mov	fp, r3
   1cb36:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cb38:	465b      	mov	r3, fp
   1cb3a:	220a      	movs	r2, #10
   1cb3c:	4690      	mov	r8, r2
   1cb3e:	44d8      	add	r8, fp
   1cb40:	468a      	mov	sl, r1
   1cb42:	9500      	str	r5, [sp, #0]
   1cb44:	9303      	str	r3, [sp, #12]
   1cb46:	e014      	b.n	1cb72 <Socket_ReadSocketData+0x82>
   1cb48:	0025      	movs	r5, r4
			u8SetRxDone = 1;
   1cb4a:	2301      	movs	r3, #1
   1cb4c:	e01b      	b.n	1cb86 <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1cb4e:	3301      	adds	r3, #1
   1cb50:	2200      	movs	r2, #0
   1cb52:	2100      	movs	r1, #0
   1cb54:	2000      	movs	r0, #0
   1cb56:	4c24      	ldr	r4, [pc, #144]	; (1cbe8 <Socket_ReadSocketData+0xf8>)
   1cb58:	47a0      	blx	r4
   1cb5a:	e03c      	b.n	1cbd6 <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1cb5c:	4823      	ldr	r0, [pc, #140]	; (1cbec <Socket_ReadSocketData+0xfc>)
   1cb5e:	4d24      	ldr	r5, [pc, #144]	; (1cbf0 <Socket_ReadSocketData+0x100>)
   1cb60:	47a8      	blx	r5
   1cb62:	0021      	movs	r1, r4
   1cb64:	4823      	ldr	r0, [pc, #140]	; (1cbf4 <Socket_ReadSocketData+0x104>)
   1cb66:	47a8      	blx	r5
   1cb68:	4823      	ldr	r0, [pc, #140]	; (1cbf8 <Socket_ReadSocketData+0x108>)
   1cb6a:	47a8      	blx	r5
				break;
   1cb6c:	e033      	b.n	1cbd6 <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
   1cb6e:	2c00      	cmp	r4, #0
   1cb70:	d031      	beq.n	1cbd6 <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1cb72:	465b      	mov	r3, fp
   1cb74:	889b      	ldrh	r3, [r3, #4]
   1cb76:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
   1cb78:	b21b      	sxth	r3, r3
   1cb7a:	2b00      	cmp	r3, #0
   1cb7c:	dde4      	ble.n	1cb48 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1cb7e:	9b03      	ldr	r3, [sp, #12]
   1cb80:	889d      	ldrh	r5, [r3, #4]
   1cb82:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
   1cb84:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   1cb86:	4a17      	ldr	r2, [pc, #92]	; (1cbe4 <Socket_ReadSocketData+0xf4>)
   1cb88:	4651      	mov	r1, sl
   1cb8a:	5889      	ldr	r1, [r1, r2]
   1cb8c:	002a      	movs	r2, r5
   1cb8e:	9800      	ldr	r0, [sp, #0]
   1cb90:	4f15      	ldr	r7, [pc, #84]	; (1cbe8 <Socket_ReadSocketData+0xf8>)
   1cb92:	47b8      	blx	r7
   1cb94:	2800      	cmp	r0, #0
   1cb96:	d1e1      	bne.n	1cb5c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   1cb98:	4b12      	ldr	r3, [pc, #72]	; (1cbe4 <Socket_ReadSocketData+0xf4>)
   1cb9a:	4652      	mov	r2, sl
   1cb9c:	58d3      	ldr	r3, [r2, r3]
   1cb9e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
   1cba0:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   1cba2:	88f3      	ldrh	r3, [r6, #6]
   1cba4:	1b5b      	subs	r3, r3, r5
   1cba6:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
   1cba8:	4b14      	ldr	r3, [pc, #80]	; (1cbfc <Socket_ReadSocketData+0x10c>)
   1cbaa:	681b      	ldr	r3, [r3, #0]
   1cbac:	2b00      	cmp	r3, #0
   1cbae:	d005      	beq.n	1cbbc <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   1cbb0:	4b12      	ldr	r3, [pc, #72]	; (1cbfc <Socket_ReadSocketData+0x10c>)
   1cbb2:	681b      	ldr	r3, [r3, #0]
   1cbb4:	0032      	movs	r2, r6
   1cbb6:	9902      	ldr	r1, [sp, #8]
   1cbb8:	9801      	ldr	r0, [sp, #4]
   1cbba:	4798      	blx	r3
				u16ReadCount -= u16Read;
   1cbbc:	1b64      	subs	r4, r4, r5
   1cbbe:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
   1cbc0:	9b00      	ldr	r3, [sp, #0]
   1cbc2:	469c      	mov	ip, r3
   1cbc4:	44ac      	add	ip, r5
   1cbc6:	4663      	mov	r3, ip
   1cbc8:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cbca:	4643      	mov	r3, r8
   1cbcc:	781b      	ldrb	r3, [r3, #0]
   1cbce:	2b00      	cmp	r3, #0
   1cbd0:	d1cd      	bne.n	1cb6e <Socket_ReadSocketData+0x7e>
   1cbd2:	2c00      	cmp	r4, #0
   1cbd4:	d1bb      	bne.n	1cb4e <Socket_ReadSocketData+0x5e>
	}
}
   1cbd6:	b005      	add	sp, #20
   1cbd8:	bc3c      	pop	{r2, r3, r4, r5}
   1cbda:	4690      	mov	r8, r2
   1cbdc:	4699      	mov	r9, r3
   1cbde:	46a2      	mov	sl, r4
   1cbe0:	46ab      	mov	fp, r5
   1cbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cbe4:	200054bc 	.word	0x200054bc
   1cbe8:	0001ac61 	.word	0x0001ac61
   1cbec:	00029884 	.word	0x00029884
   1cbf0:	0001905d 	.word	0x0001905d
   1cbf4:	0002a324 	.word	0x0002a324
   1cbf8:	00029570 	.word	0x00029570
   1cbfc:	2000556c 	.word	0x2000556c

0001cc00 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   1cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc02:	46d6      	mov	lr, sl
   1cc04:	464f      	mov	r7, r9
   1cc06:	4646      	mov	r6, r8
   1cc08:	b5c0      	push	{r6, r7, lr}
   1cc0a:	b09a      	sub	sp, #104	; 0x68
   1cc0c:	000d      	movs	r5, r1
   1cc0e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   1cc10:	2841      	cmp	r0, #65	; 0x41
   1cc12:	d039      	beq.n	1cc88 <m2m_ip_cb+0x88>
   1cc14:	2854      	cmp	r0, #84	; 0x54
   1cc16:	d037      	beq.n	1cc88 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   1cc18:	2842      	cmp	r0, #66	; 0x42
   1cc1a:	d053      	beq.n	1ccc4 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   1cc1c:	2843      	cmp	r0, #67	; 0x43
   1cc1e:	d06a      	beq.n	1ccf6 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   1cc20:	2844      	cmp	r0, #68	; 0x44
   1cc22:	d100      	bne.n	1cc26 <m2m_ip_cb+0x26>
   1cc24:	e0af      	b.n	1cd86 <m2m_ip_cb+0x186>
   1cc26:	284b      	cmp	r0, #75	; 0x4b
   1cc28:	d100      	bne.n	1cc2c <m2m_ip_cb+0x2c>
   1cc2a:	e0ac      	b.n	1cd86 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   1cc2c:	284a      	cmp	r0, #74	; 0x4a
   1cc2e:	d100      	bne.n	1cc32 <m2m_ip_cb+0x32>
   1cc30:	e0cf      	b.n	1cdd2 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   1cc32:	2846      	cmp	r0, #70	; 0x46
   1cc34:	d100      	bne.n	1cc38 <m2m_ip_cb+0x38>
   1cc36:	e0e5      	b.n	1ce04 <m2m_ip_cb+0x204>
   1cc38:	2848      	cmp	r0, #72	; 0x48
   1cc3a:	d100      	bne.n	1cc3e <m2m_ip_cb+0x3e>
   1cc3c:	e10e      	b.n	1ce5c <m2m_ip_cb+0x25c>
   1cc3e:	284d      	cmp	r0, #77	; 0x4d
   1cc40:	d100      	bne.n	1cc44 <m2m_ip_cb+0x44>
   1cc42:	e0dc      	b.n	1cdfe <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cc44:	2845      	cmp	r0, #69	; 0x45
   1cc46:	d100      	bne.n	1cc4a <m2m_ip_cb+0x4a>
   1cc48:	e12c      	b.n	1cea4 <m2m_ip_cb+0x2a4>
   1cc4a:	2847      	cmp	r0, #71	; 0x47
   1cc4c:	d100      	bne.n	1cc50 <m2m_ip_cb+0x50>
   1cc4e:	e14d      	b.n	1ceec <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cc50:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cc52:	284c      	cmp	r0, #76	; 0x4c
   1cc54:	d100      	bne.n	1cc58 <m2m_ip_cb+0x58>
   1cc56:	e126      	b.n	1cea6 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
   1cc58:	2852      	cmp	r0, #82	; 0x52
   1cc5a:	d12d      	bne.n	1ccb8 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   1cc5c:	2301      	movs	r3, #1
   1cc5e:	2214      	movs	r2, #20
   1cc60:	a909      	add	r1, sp, #36	; 0x24
   1cc62:	0020      	movs	r0, r4
   1cc64:	4ca2      	ldr	r4, [pc, #648]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1cc66:	47a0      	blx	r4
   1cc68:	2800      	cmp	r0, #0
   1cc6a:	d125      	bne.n	1ccb8 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   1cc6c:	4ba1      	ldr	r3, [pc, #644]	; (1cef4 <m2m_ip_cb+0x2f4>)
   1cc6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cc70:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   1cc72:	681b      	ldr	r3, [r3, #0]
   1cc74:	2b00      	cmp	r3, #0
   1cc76:	d01f      	beq.n	1ccb8 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   1cc78:	4b9e      	ldr	r3, [pc, #632]	; (1cef4 <m2m_ip_cb+0x2f4>)
   1cc7a:	681c      	ldr	r4, [r3, #0]
   1cc7c:	ab09      	add	r3, sp, #36	; 0x24
   1cc7e:	7c1a      	ldrb	r2, [r3, #16]
   1cc80:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cc82:	9809      	ldr	r0, [sp, #36]	; 0x24
   1cc84:	47a0      	blx	r4
			}
		}
	}
}
   1cc86:	e017      	b.n	1ccb8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   1cc88:	2300      	movs	r3, #0
   1cc8a:	2204      	movs	r2, #4
   1cc8c:	a909      	add	r1, sp, #36	; 0x24
   1cc8e:	0020      	movs	r0, r4
   1cc90:	4c97      	ldr	r4, [pc, #604]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1cc92:	47a0      	blx	r4
   1cc94:	2800      	cmp	r0, #0
   1cc96:	d10f      	bne.n	1ccb8 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
   1cc98:	ab09      	add	r3, sp, #36	; 0x24
   1cc9a:	785a      	ldrb	r2, [r3, #1]
   1cc9c:	ab05      	add	r3, sp, #20
   1cc9e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1cca0:	4b95      	ldr	r3, [pc, #596]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cca2:	681b      	ldr	r3, [r3, #0]
   1cca4:	2b00      	cmp	r3, #0
   1cca6:	d007      	beq.n	1ccb8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   1cca8:	4b93      	ldr	r3, [pc, #588]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1ccaa:	681b      	ldr	r3, [r3, #0]
   1ccac:	aa09      	add	r2, sp, #36	; 0x24
   1ccae:	2000      	movs	r0, #0
   1ccb0:	5610      	ldrsb	r0, [r2, r0]
   1ccb2:	aa05      	add	r2, sp, #20
   1ccb4:	2101      	movs	r1, #1
   1ccb6:	4798      	blx	r3
}
   1ccb8:	b01a      	add	sp, #104	; 0x68
   1ccba:	bc1c      	pop	{r2, r3, r4}
   1ccbc:	4690      	mov	r8, r2
   1ccbe:	4699      	mov	r9, r3
   1ccc0:	46a2      	mov	sl, r4
   1ccc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   1ccc4:	2300      	movs	r3, #0
   1ccc6:	2204      	movs	r2, #4
   1ccc8:	a909      	add	r1, sp, #36	; 0x24
   1ccca:	0020      	movs	r0, r4
   1cccc:	4c88      	ldr	r4, [pc, #544]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1ccce:	47a0      	blx	r4
   1ccd0:	2800      	cmp	r0, #0
   1ccd2:	d1f1      	bne.n	1ccb8 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
   1ccd4:	ab09      	add	r3, sp, #36	; 0x24
   1ccd6:	785a      	ldrb	r2, [r3, #1]
   1ccd8:	ab05      	add	r3, sp, #20
   1ccda:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1ccdc:	4b86      	ldr	r3, [pc, #536]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1ccde:	681b      	ldr	r3, [r3, #0]
   1cce0:	2b00      	cmp	r3, #0
   1cce2:	d0e9      	beq.n	1ccb8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   1cce4:	4b84      	ldr	r3, [pc, #528]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cce6:	681b      	ldr	r3, [r3, #0]
   1cce8:	aa09      	add	r2, sp, #36	; 0x24
   1ccea:	2000      	movs	r0, #0
   1ccec:	5610      	ldrsb	r0, [r2, r0]
   1ccee:	aa05      	add	r2, sp, #20
   1ccf0:	2102      	movs	r1, #2
   1ccf2:	4798      	blx	r3
   1ccf4:	e7e0      	b.n	1ccb8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1ccf6:	2300      	movs	r3, #0
   1ccf8:	220c      	movs	r2, #12
   1ccfa:	a905      	add	r1, sp, #20
   1ccfc:	0020      	movs	r0, r4
   1ccfe:	4c7c      	ldr	r4, [pc, #496]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1cd00:	47a0      	blx	r4
   1cd02:	2800      	cmp	r0, #0
   1cd04:	d1d8      	bne.n	1ccb8 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
   1cd06:	ab05      	add	r3, sp, #20
   1cd08:	2209      	movs	r2, #9
   1cd0a:	569a      	ldrsb	r2, [r3, r2]
   1cd0c:	2a00      	cmp	r2, #0
   1cd0e:	db24      	blt.n	1cd5a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1cd10:	0018      	movs	r0, r3
   1cd12:	2108      	movs	r1, #8
   1cd14:	5659      	ldrsb	r1, [r3, r1]
   1cd16:	4b79      	ldr	r3, [pc, #484]	; (1cefc <m2m_ip_cb+0x2fc>)
   1cd18:	0109      	lsls	r1, r1, #4
   1cd1a:	1859      	adds	r1, r3, r1
   1cd1c:	7ac9      	ldrb	r1, [r1, #11]
   1cd1e:	b2c9      	uxtb	r1, r1
   1cd20:	0114      	lsls	r4, r2, #4
   1cd22:	191b      	adds	r3, r3, r4
   1cd24:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   1cd26:	2101      	movs	r1, #1
   1cd28:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cd2a:	8941      	ldrh	r1, [r0, #10]
   1cd2c:	3908      	subs	r1, #8
   1cd2e:	b289      	uxth	r1, r1
   1cd30:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
   1cd32:	4973      	ldr	r1, [pc, #460]	; (1cf00 <m2m_ip_cb+0x300>)
   1cd34:	880b      	ldrh	r3, [r1, #0]
   1cd36:	3301      	adds	r3, #1
   1cd38:	b29b      	uxth	r3, r3
   1cd3a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
   1cd3c:	880b      	ldrh	r3, [r1, #0]
   1cd3e:	b29b      	uxth	r3, r3
   1cd40:	2b00      	cmp	r3, #0
   1cd42:	d103      	bne.n	1cd4c <m2m_ip_cb+0x14c>
					++gu16SessionID;
   1cd44:	880b      	ldrh	r3, [r1, #0]
   1cd46:	3301      	adds	r3, #1
   1cd48:	b29b      	uxth	r3, r3
   1cd4a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   1cd4c:	4b6c      	ldr	r3, [pc, #432]	; (1cf00 <m2m_ip_cb+0x300>)
   1cd4e:	8819      	ldrh	r1, [r3, #0]
   1cd50:	b289      	uxth	r1, r1
   1cd52:	0110      	lsls	r0, r2, #4
   1cd54:	4b69      	ldr	r3, [pc, #420]	; (1cefc <m2m_ip_cb+0x2fc>)
   1cd56:	181b      	adds	r3, r3, r0
   1cd58:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1cd5a:	ab09      	add	r3, sp, #36	; 0x24
   1cd5c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   1cd5e:	2202      	movs	r2, #2
   1cd60:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   1cd62:	aa05      	add	r2, sp, #20
   1cd64:	8851      	ldrh	r1, [r2, #2]
   1cd66:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1cd68:	9a06      	ldr	r2, [sp, #24]
   1cd6a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
   1cd6c:	4b62      	ldr	r3, [pc, #392]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	2b00      	cmp	r3, #0
   1cd72:	d0a1      	beq.n	1ccb8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   1cd74:	4b60      	ldr	r3, [pc, #384]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cd76:	681b      	ldr	r3, [r3, #0]
   1cd78:	aa05      	add	r2, sp, #20
   1cd7a:	2008      	movs	r0, #8
   1cd7c:	5610      	ldrsb	r0, [r2, r0]
   1cd7e:	aa09      	add	r2, sp, #36	; 0x24
   1cd80:	2104      	movs	r1, #4
   1cd82:	4798      	blx	r3
   1cd84:	e798      	b.n	1ccb8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   1cd86:	2300      	movs	r3, #0
   1cd88:	2204      	movs	r2, #4
   1cd8a:	a909      	add	r1, sp, #36	; 0x24
   1cd8c:	0020      	movs	r0, r4
   1cd8e:	4c58      	ldr	r4, [pc, #352]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1cd90:	47a0      	blx	r4
   1cd92:	2800      	cmp	r0, #0
   1cd94:	d000      	beq.n	1cd98 <m2m_ip_cb+0x198>
   1cd96:	e78f      	b.n	1ccb8 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
   1cd98:	ab09      	add	r3, sp, #36	; 0x24
   1cd9a:	2000      	movs	r0, #0
   1cd9c:	5618      	ldrsb	r0, [r3, r0]
   1cd9e:	aa05      	add	r2, sp, #20
   1cda0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1cda2:	785b      	ldrb	r3, [r3, #1]
   1cda4:	b25b      	sxtb	r3, r3
   1cda6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   1cda8:	2b00      	cmp	r3, #0
   1cdaa:	d107      	bne.n	1cdbc <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cdac:	ab09      	add	r3, sp, #36	; 0x24
   1cdae:	885b      	ldrh	r3, [r3, #2]
   1cdb0:	3b08      	subs	r3, #8
   1cdb2:	b29b      	uxth	r3, r3
   1cdb4:	0101      	lsls	r1, r0, #4
   1cdb6:	4a51      	ldr	r2, [pc, #324]	; (1cefc <m2m_ip_cb+0x2fc>)
   1cdb8:	1852      	adds	r2, r2, r1
   1cdba:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
   1cdbc:	4b4e      	ldr	r3, [pc, #312]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cdbe:	681b      	ldr	r3, [r3, #0]
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	d100      	bne.n	1cdc6 <m2m_ip_cb+0x1c6>
   1cdc4:	e778      	b.n	1ccb8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   1cdc6:	4b4c      	ldr	r3, [pc, #304]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cdc8:	681b      	ldr	r3, [r3, #0]
   1cdca:	aa05      	add	r2, sp, #20
   1cdcc:	2105      	movs	r1, #5
   1cdce:	4798      	blx	r3
	{
   1cdd0:	e772      	b.n	1ccb8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   1cdd2:	2300      	movs	r3, #0
   1cdd4:	2244      	movs	r2, #68	; 0x44
   1cdd6:	a909      	add	r1, sp, #36	; 0x24
   1cdd8:	0020      	movs	r0, r4
   1cdda:	4c45      	ldr	r4, [pc, #276]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1cddc:	47a0      	blx	r4
   1cdde:	2800      	cmp	r0, #0
   1cde0:	d000      	beq.n	1cde4 <m2m_ip_cb+0x1e4>
   1cde2:	e769      	b.n	1ccb8 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
   1cde4:	4b47      	ldr	r3, [pc, #284]	; (1cf04 <m2m_ip_cb+0x304>)
   1cde6:	681b      	ldr	r3, [r3, #0]
   1cde8:	2b00      	cmp	r3, #0
   1cdea:	d100      	bne.n	1cdee <m2m_ip_cb+0x1ee>
   1cdec:	e764      	b.n	1ccb8 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   1cdee:	4b45      	ldr	r3, [pc, #276]	; (1cf04 <m2m_ip_cb+0x304>)
   1cdf0:	681b      	ldr	r3, [r3, #0]
   1cdf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1cdf4:	9203      	str	r2, [sp, #12]
   1cdf6:	0011      	movs	r1, r2
   1cdf8:	a809      	add	r0, sp, #36	; 0x24
   1cdfa:	4798      	blx	r3
   1cdfc:	e75c      	b.n	1ccb8 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1cdfe:	2306      	movs	r3, #6
   1ce00:	469a      	mov	sl, r3
   1ce02:	e001      	b.n	1ce08 <m2m_ip_cb+0x208>
   1ce04:	2306      	movs	r3, #6
   1ce06:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1ce08:	2300      	movs	r3, #0
   1ce0a:	2210      	movs	r2, #16
   1ce0c:	a905      	add	r1, sp, #20
   1ce0e:	0020      	movs	r0, r4
   1ce10:	4f37      	ldr	r7, [pc, #220]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1ce12:	47b8      	blx	r7
   1ce14:	2800      	cmp	r0, #0
   1ce16:	d000      	beq.n	1ce1a <m2m_ip_cb+0x21a>
   1ce18:	e74e      	b.n	1ccb8 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
   1ce1a:	aa05      	add	r2, sp, #20
   1ce1c:	200c      	movs	r0, #12
   1ce1e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
   1ce20:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
   1ce22:	0107      	lsls	r7, r0, #4
   1ce24:	4935      	ldr	r1, [pc, #212]	; (1cefc <m2m_ip_cb+0x2fc>)
   1ce26:	19c9      	adds	r1, r1, r7
   1ce28:	2700      	movs	r7, #0
   1ce2a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   1ce2c:	2608      	movs	r6, #8
   1ce2e:	5f97      	ldrsh	r7, [r2, r6]
   1ce30:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   1ce32:	8957      	ldrh	r7, [r2, #10]
   1ce34:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   1ce36:	af09      	add	r7, sp, #36	; 0x24
   1ce38:	8856      	ldrh	r6, [r2, #2]
   1ce3a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   1ce3c:	9a06      	ldr	r2, [sp, #24]
   1ce3e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1ce40:	88ca      	ldrh	r2, [r1, #6]
   1ce42:	b292      	uxth	r2, r2
   1ce44:	4293      	cmp	r3, r2
   1ce46:	d00c      	beq.n	1ce62 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
   1ce48:	2d10      	cmp	r5, #16
   1ce4a:	d800      	bhi.n	1ce4e <m2m_ip_cb+0x24e>
   1ce4c:	e734      	b.n	1ccb8 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1ce4e:	2301      	movs	r3, #1
   1ce50:	2200      	movs	r2, #0
   1ce52:	2100      	movs	r1, #0
   1ce54:	2000      	movs	r0, #0
   1ce56:	4c26      	ldr	r4, [pc, #152]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1ce58:	47a0      	blx	r4
	{
   1ce5a:	e72d      	b.n	1ccb8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1ce5c:	2309      	movs	r3, #9
   1ce5e:	469a      	mov	sl, r3
   1ce60:	e7d2      	b.n	1ce08 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   1ce62:	4643      	mov	r3, r8
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	dd01      	ble.n	1ce6c <m2m_ip_cb+0x26c>
   1ce68:	45a8      	cmp	r8, r5
   1ce6a:	db0f      	blt.n	1ce8c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   1ce6c:	ab09      	add	r3, sp, #36	; 0x24
   1ce6e:	4642      	mov	r2, r8
   1ce70:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1ce72:	2300      	movs	r3, #0
   1ce74:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
   1ce76:	4b20      	ldr	r3, [pc, #128]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1ce78:	681b      	ldr	r3, [r3, #0]
   1ce7a:	2b00      	cmp	r3, #0
   1ce7c:	d100      	bne.n	1ce80 <m2m_ip_cb+0x280>
   1ce7e:	e71b      	b.n	1ccb8 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1ce80:	4b1d      	ldr	r3, [pc, #116]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1ce82:	681b      	ldr	r3, [r3, #0]
   1ce84:	aa09      	add	r2, sp, #36	; 0x24
   1ce86:	4651      	mov	r1, sl
   1ce88:	4798      	blx	r3
   1ce8a:	e715      	b.n	1ccb8 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
   1ce8c:	0023      	movs	r3, r4
   1ce8e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1ce90:	4642      	mov	r2, r8
   1ce92:	4669      	mov	r1, sp
   1ce94:	818a      	strh	r2, [r1, #12]
   1ce96:	898a      	ldrh	r2, [r1, #12]
   1ce98:	9200      	str	r2, [sp, #0]
   1ce9a:	4652      	mov	r2, sl
   1ce9c:	0039      	movs	r1, r7
   1ce9e:	4c1a      	ldr	r4, [pc, #104]	; (1cf08 <m2m_ip_cb+0x308>)
   1cea0:	47a0      	blx	r4
   1cea2:	e709      	b.n	1ccb8 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cea4:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   1cea6:	2300      	movs	r3, #0
   1cea8:	2208      	movs	r2, #8
   1ceaa:	a909      	add	r1, sp, #36	; 0x24
   1ceac:	0020      	movs	r0, r4
   1ceae:	4c10      	ldr	r4, [pc, #64]	; (1cef0 <m2m_ip_cb+0x2f0>)
   1ceb0:	47a0      	blx	r4
   1ceb2:	2800      	cmp	r0, #0
   1ceb4:	d000      	beq.n	1ceb8 <m2m_ip_cb+0x2b8>
   1ceb6:	e6ff      	b.n	1ccb8 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
   1ceb8:	ab09      	add	r3, sp, #36	; 0x24
   1ceba:	2000      	movs	r0, #0
   1cebc:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
   1cebe:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   1cec0:	8859      	ldrh	r1, [r3, #2]
   1cec2:	ab05      	add	r3, sp, #20
   1cec4:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1cec6:	0101      	lsls	r1, r0, #4
   1cec8:	4b0c      	ldr	r3, [pc, #48]	; (1cefc <m2m_ip_cb+0x2fc>)
   1ceca:	185b      	adds	r3, r3, r1
   1cecc:	88db      	ldrh	r3, [r3, #6]
   1cece:	b29b      	uxth	r3, r3
   1ced0:	429a      	cmp	r2, r3
   1ced2:	d000      	beq.n	1ced6 <m2m_ip_cb+0x2d6>
   1ced4:	e6f0      	b.n	1ccb8 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
   1ced6:	4b08      	ldr	r3, [pc, #32]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1ced8:	681b      	ldr	r3, [r3, #0]
   1ceda:	2b00      	cmp	r3, #0
   1cedc:	d100      	bne.n	1cee0 <m2m_ip_cb+0x2e0>
   1cede:	e6eb      	b.n	1ccb8 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   1cee0:	4b05      	ldr	r3, [pc, #20]	; (1cef8 <m2m_ip_cb+0x2f8>)
   1cee2:	681b      	ldr	r3, [r3, #0]
   1cee4:	aa05      	add	r2, sp, #20
   1cee6:	0029      	movs	r1, r5
   1cee8:	4798      	blx	r3
	{
   1ceea:	e6e5      	b.n	1ccb8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   1ceec:	2508      	movs	r5, #8
   1ceee:	e7da      	b.n	1cea6 <m2m_ip_cb+0x2a6>
   1cef0:	0001ac61 	.word	0x0001ac61
   1cef4:	20005570 	.word	0x20005570
   1cef8:	2000556c 	.word	0x2000556c
   1cefc:	200054bc 	.word	0x200054bc
   1cf00:	20003cee 	.word	0x20003cee
   1cf04:	20005574 	.word	0x20005574
   1cf08:	0001caf1 	.word	0x0001caf1

0001cf0c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   1cf0c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
   1cf0e:	4b0a      	ldr	r3, [pc, #40]	; (1cf38 <socketInit+0x2c>)
   1cf10:	781b      	ldrb	r3, [r3, #0]
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	d000      	beq.n	1cf18 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
   1cf16:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1cf18:	22b0      	movs	r2, #176	; 0xb0
   1cf1a:	2100      	movs	r1, #0
   1cf1c:	4807      	ldr	r0, [pc, #28]	; (1cf3c <socketInit+0x30>)
   1cf1e:	4b08      	ldr	r3, [pc, #32]	; (1cf40 <socketInit+0x34>)
   1cf20:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   1cf22:	4908      	ldr	r1, [pc, #32]	; (1cf44 <socketInit+0x38>)
   1cf24:	2002      	movs	r0, #2
   1cf26:	4b08      	ldr	r3, [pc, #32]	; (1cf48 <socketInit+0x3c>)
   1cf28:	4798      	blx	r3
		gbSocketInit	= 1;
   1cf2a:	2201      	movs	r2, #1
   1cf2c:	4b02      	ldr	r3, [pc, #8]	; (1cf38 <socketInit+0x2c>)
   1cf2e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1cf30:	2200      	movs	r2, #0
   1cf32:	4b06      	ldr	r3, [pc, #24]	; (1cf4c <socketInit+0x40>)
   1cf34:	801a      	strh	r2, [r3, #0]
}
   1cf36:	e7ee      	b.n	1cf16 <socketInit+0xa>
   1cf38:	20003ced 	.word	0x20003ced
   1cf3c:	200054bc 	.word	0x200054bc
   1cf40:	0001a571 	.word	0x0001a571
   1cf44:	0001cc01 	.word	0x0001cc01
   1cf48:	0001ad39 	.word	0x0001ad39
   1cf4c:	20003cee 	.word	0x20003cee

0001cf50 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   1cf50:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1cf52:	22b0      	movs	r2, #176	; 0xb0
   1cf54:	2100      	movs	r1, #0
   1cf56:	4807      	ldr	r0, [pc, #28]	; (1cf74 <socketDeinit+0x24>)
   1cf58:	4b07      	ldr	r3, [pc, #28]	; (1cf78 <socketDeinit+0x28>)
   1cf5a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   1cf5c:	2100      	movs	r1, #0
   1cf5e:	2002      	movs	r0, #2
   1cf60:	4b06      	ldr	r3, [pc, #24]	; (1cf7c <socketDeinit+0x2c>)
   1cf62:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   1cf64:	2300      	movs	r3, #0
   1cf66:	4a06      	ldr	r2, [pc, #24]	; (1cf80 <socketDeinit+0x30>)
   1cf68:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
   1cf6a:	4a06      	ldr	r2, [pc, #24]	; (1cf84 <socketDeinit+0x34>)
   1cf6c:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
   1cf6e:	4a06      	ldr	r2, [pc, #24]	; (1cf88 <socketDeinit+0x38>)
   1cf70:	7013      	strb	r3, [r2, #0]
}
   1cf72:	bd10      	pop	{r4, pc}
   1cf74:	200054bc 	.word	0x200054bc
   1cf78:	0001a571 	.word	0x0001a571
   1cf7c:	0001ad39 	.word	0x0001ad39
   1cf80:	2000556c 	.word	0x2000556c
   1cf84:	20005574 	.word	0x20005574
   1cf88:	20003ced 	.word	0x20003ced

0001cf8c <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
   1cf8c:	4b02      	ldr	r3, [pc, #8]	; (1cf98 <registerSocketCallback+0xc>)
   1cf8e:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   1cf90:	4b02      	ldr	r3, [pc, #8]	; (1cf9c <registerSocketCallback+0x10>)
   1cf92:	6019      	str	r1, [r3, #0]
}
   1cf94:	4770      	bx	lr
   1cf96:	46c0      	nop			; (mov r8, r8)
   1cf98:	2000556c 	.word	0x2000556c
   1cf9c:	20005574 	.word	0x20005574

0001cfa0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   1cfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfa2:	46d6      	mov	lr, sl
   1cfa4:	4647      	mov	r7, r8
   1cfa6:	b580      	push	{r7, lr}
   1cfa8:	b089      	sub	sp, #36	; 0x24
   1cfaa:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   1cfac:	2802      	cmp	r0, #2
   1cfae:	d000      	beq.n	1cfb2 <socket+0x12>
   1cfb0:	e09b      	b.n	1d0ea <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
   1cfb2:	2901      	cmp	r1, #1
   1cfb4:	d00a      	beq.n	1cfcc <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   1cfb6:	2902      	cmp	r1, #2
   1cfb8:	d100      	bne.n	1cfbc <socket+0x1c>
   1cfba:	e06f      	b.n	1d09c <socket+0xfc>
	SOCKET					sock = -1;
   1cfbc:	2501      	movs	r5, #1
   1cfbe:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
   1cfc0:	0028      	movs	r0, r5
   1cfc2:	b009      	add	sp, #36	; 0x24
   1cfc4:	bc0c      	pop	{r2, r3}
   1cfc6:	4690      	mov	r8, r2
   1cfc8:	469a      	mov	sl, r3
   1cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
   1cfcc:	4c48      	ldr	r4, [pc, #288]	; (1d0f0 <socket+0x150>)
   1cfce:	7827      	ldrb	r7, [r4, #0]
   1cfd0:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1cfd2:	7826      	ldrb	r6, [r4, #0]
   1cfd4:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cfd6:	7820      	ldrb	r0, [r4, #0]
   1cfd8:	3001      	adds	r0, #1
   1cfda:	3106      	adds	r1, #6
   1cfdc:	4b45      	ldr	r3, [pc, #276]	; (1d0f4 <socket+0x154>)
   1cfde:	4798      	blx	r3
   1cfe0:	b2c9      	uxtb	r1, r1
   1cfe2:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
   1cfe4:	0132      	lsls	r2, r6, #4
   1cfe6:	4b44      	ldr	r3, [pc, #272]	; (1d0f8 <socket+0x158>)
   1cfe8:	189b      	adds	r3, r3, r2
   1cfea:	7a9b      	ldrb	r3, [r3, #10]
   1cfec:	2506      	movs	r5, #6
   1cfee:	2b00      	cmp	r3, #0
   1cff0:	d018      	beq.n	1d024 <socket+0x84>
				u8SockID	= u8NextTcpSock;
   1cff2:	4e3f      	ldr	r6, [pc, #252]	; (1d0f0 <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cff4:	4b3f      	ldr	r3, [pc, #252]	; (1d0f4 <socket+0x154>)
   1cff6:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
   1cff8:	4b3f      	ldr	r3, [pc, #252]	; (1d0f8 <socket+0x158>)
   1cffa:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
   1cffc:	7837      	ldrb	r7, [r6, #0]
   1cffe:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1d000:	7834      	ldrb	r4, [r6, #0]
   1d002:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1d004:	7830      	ldrb	r0, [r6, #0]
   1d006:	3001      	adds	r0, #1
   1d008:	2107      	movs	r1, #7
   1d00a:	47d0      	blx	sl
   1d00c:	b2c9      	uxtb	r1, r1
   1d00e:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
   1d010:	0123      	lsls	r3, r4, #4
   1d012:	4443      	add	r3, r8
   1d014:	7a9b      	ldrb	r3, [r3, #10]
   1d016:	2b00      	cmp	r3, #0
   1d018:	d007      	beq.n	1d02a <socket+0x8a>
   1d01a:	3d01      	subs	r5, #1
   1d01c:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   1d01e:	2d00      	cmp	r5, #0
   1d020:	d1ec      	bne.n	1cffc <socket+0x5c>
   1d022:	e7cb      	b.n	1cfbc <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1d024:	4b34      	ldr	r3, [pc, #208]	; (1d0f8 <socket+0x158>)
   1d026:	18d4      	adds	r4, r2, r3
   1d028:	e002      	b.n	1d030 <socket+0x90>
   1d02a:	0124      	lsls	r4, r4, #4
   1d02c:	4b32      	ldr	r3, [pc, #200]	; (1d0f8 <socket+0x158>)
   1d02e:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
   1d030:	b27d      	sxtb	r5, r7
		if(sock >= 0)
   1d032:	2d00      	cmp	r5, #0
   1d034:	dbc4      	blt.n	1cfc0 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   1d036:	2210      	movs	r2, #16
   1d038:	2100      	movs	r1, #0
   1d03a:	0020      	movs	r0, r4
   1d03c:	4b2f      	ldr	r3, [pc, #188]	; (1d0fc <socket+0x15c>)
   1d03e:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   1d040:	2301      	movs	r3, #1
   1d042:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
   1d044:	4a2e      	ldr	r2, [pc, #184]	; (1d100 <socket+0x160>)
   1d046:	8813      	ldrh	r3, [r2, #0]
   1d048:	3301      	adds	r3, #1
   1d04a:	b29b      	uxth	r3, r3
   1d04c:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
   1d04e:	8813      	ldrh	r3, [r2, #0]
   1d050:	b29b      	uxth	r3, r3
   1d052:	2b00      	cmp	r3, #0
   1d054:	d103      	bne.n	1d05e <socket+0xbe>
				++gu16SessionID;
   1d056:	8813      	ldrh	r3, [r2, #0]
   1d058:	3301      	adds	r3, #1
   1d05a:	b29b      	uxth	r3, r3
   1d05c:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
   1d05e:	4e28      	ldr	r6, [pc, #160]	; (1d100 <socket+0x160>)
   1d060:	8833      	ldrh	r3, [r6, #0]
   1d062:	b29b      	uxth	r3, r3
   1d064:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   1d066:	4827      	ldr	r0, [pc, #156]	; (1d104 <socket+0x164>)
   1d068:	4f27      	ldr	r7, [pc, #156]	; (1d108 <socket+0x168>)
   1d06a:	47b8      	blx	r7
   1d06c:	8832      	ldrh	r2, [r6, #0]
   1d06e:	b292      	uxth	r2, r2
   1d070:	0029      	movs	r1, r5
   1d072:	4826      	ldr	r0, [pc, #152]	; (1d10c <socket+0x16c>)
   1d074:	47b8      	blx	r7
   1d076:	4826      	ldr	r0, [pc, #152]	; (1d110 <socket+0x170>)
   1d078:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
   1d07a:	9b05      	ldr	r3, [sp, #20]
   1d07c:	07db      	lsls	r3, r3, #31
   1d07e:	d59f      	bpl.n	1cfc0 <socket+0x20>
				strSSLCreate.sslSock = sock;
   1d080:	aa07      	add	r2, sp, #28
   1d082:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   1d084:	2321      	movs	r3, #33	; 0x21
   1d086:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   1d088:	2300      	movs	r3, #0
   1d08a:	9302      	str	r3, [sp, #8]
   1d08c:	9301      	str	r3, [sp, #4]
   1d08e:	9300      	str	r3, [sp, #0]
   1d090:	3304      	adds	r3, #4
   1d092:	2150      	movs	r1, #80	; 0x50
   1d094:	2002      	movs	r0, #2
   1d096:	4c1f      	ldr	r4, [pc, #124]	; (1d114 <socket+0x174>)
   1d098:	47a0      	blx	r4
   1d09a:	e791      	b.n	1cfc0 <socket+0x20>
				u8SockID		= u8NextUdpSock;
   1d09c:	4b1e      	ldr	r3, [pc, #120]	; (1d118 <socket+0x178>)
   1d09e:	781d      	ldrb	r5, [r3, #0]
   1d0a0:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d0a2:	781c      	ldrb	r4, [r3, #0]
   1d0a4:	0124      	lsls	r4, r4, #4
   1d0a6:	4a1d      	ldr	r2, [pc, #116]	; (1d11c <socket+0x17c>)
   1d0a8:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d0aa:	7819      	ldrb	r1, [r3, #0]
   1d0ac:	3101      	adds	r1, #1
   1d0ae:	2203      	movs	r2, #3
   1d0b0:	400a      	ands	r2, r1
   1d0b2:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   1d0b4:	7aa3      	ldrb	r3, [r4, #10]
   1d0b6:	2b00      	cmp	r3, #0
   1d0b8:	d014      	beq.n	1d0e4 <socket+0x144>
   1d0ba:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
   1d0bc:	4916      	ldr	r1, [pc, #88]	; (1d118 <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d0be:	4f17      	ldr	r7, [pc, #92]	; (1d11c <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d0c0:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
   1d0c2:	780d      	ldrb	r5, [r1, #0]
   1d0c4:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d0c6:	780c      	ldrb	r4, [r1, #0]
   1d0c8:	0124      	lsls	r4, r4, #4
   1d0ca:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d0cc:	780b      	ldrb	r3, [r1, #0]
   1d0ce:	3301      	adds	r3, #1
   1d0d0:	4003      	ands	r3, r0
   1d0d2:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
   1d0d4:	7aa3      	ldrb	r3, [r4, #10]
   1d0d6:	2b00      	cmp	r3, #0
   1d0d8:	d004      	beq.n	1d0e4 <socket+0x144>
   1d0da:	3a01      	subs	r2, #1
   1d0dc:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   1d0de:	2a00      	cmp	r2, #0
   1d0e0:	d1ef      	bne.n	1d0c2 <socket+0x122>
   1d0e2:	e76b      	b.n	1cfbc <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1d0e4:	3507      	adds	r5, #7
   1d0e6:	b26d      	sxtb	r5, r5
					break;
   1d0e8:	e7a3      	b.n	1d032 <socket+0x92>
	SOCKET					sock = -1;
   1d0ea:	2501      	movs	r5, #1
   1d0ec:	426d      	negs	r5, r5
   1d0ee:	e767      	b.n	1cfc0 <socket+0x20>
   1d0f0:	20003cf0 	.word	0x20003cf0
   1d0f4:	000242c9 	.word	0x000242c9
   1d0f8:	200054bc 	.word	0x200054bc
   1d0fc:	0001a571 	.word	0x0001a571
   1d100:	20003cee 	.word	0x20003cee
   1d104:	00029884 	.word	0x00029884
   1d108:	0001905d 	.word	0x0001905d
   1d10c:	0002a350 	.word	0x0002a350
   1d110:	00029570 	.word	0x00029570
   1d114:	0001a685 	.word	0x0001a685
   1d118:	20003cf1 	.word	0x20003cf1
   1d11c:	2000552c 	.word	0x2000552c

0001d120 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   1d120:	b570      	push	{r4, r5, r6, lr}
   1d122:	b088      	sub	sp, #32
   1d124:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   1d126:	db30      	blt.n	1d18a <connect+0x6a>
   1d128:	2900      	cmp	r1, #0
   1d12a:	d031      	beq.n	1d190 <connect+0x70>
   1d12c:	0100      	lsls	r0, r0, #4
   1d12e:	4b1d      	ldr	r3, [pc, #116]	; (1d1a4 <connect+0x84>)
   1d130:	181b      	adds	r3, r3, r0
   1d132:	7a9b      	ldrb	r3, [r3, #10]
   1d134:	2b01      	cmp	r3, #1
   1d136:	d12e      	bne.n	1d196 <connect+0x76>
   1d138:	2a00      	cmp	r2, #0
   1d13a:	d02f      	beq.n	1d19c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d13c:	4b19      	ldr	r3, [pc, #100]	; (1d1a4 <connect+0x84>)
   1d13e:	181b      	adds	r3, r3, r0
   1d140:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   1d142:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d144:	07db      	lsls	r3, r3, #31
   1d146:	d505      	bpl.n	1d154 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   1d148:	4b16      	ldr	r3, [pc, #88]	; (1d1a4 <connect+0x84>)
   1d14a:	181b      	adds	r3, r3, r0
   1d14c:	7ada      	ldrb	r2, [r3, #11]
   1d14e:	ab05      	add	r3, sp, #20
   1d150:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   1d152:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
   1d154:	ad05      	add	r5, sp, #20
   1d156:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   1d158:	2208      	movs	r2, #8
   1d15a:	0028      	movs	r0, r5
   1d15c:	4b12      	ldr	r3, [pc, #72]	; (1d1a8 <connect+0x88>)
   1d15e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d160:	0124      	lsls	r4, r4, #4
   1d162:	4b10      	ldr	r3, [pc, #64]	; (1d1a4 <connect+0x84>)
   1d164:	191c      	adds	r4, r3, r4
   1d166:	88e3      	ldrh	r3, [r4, #6]
   1d168:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   1d16a:	2300      	movs	r3, #0
   1d16c:	9302      	str	r3, [sp, #8]
   1d16e:	9301      	str	r3, [sp, #4]
   1d170:	9300      	str	r3, [sp, #0]
   1d172:	330c      	adds	r3, #12
   1d174:	002a      	movs	r2, r5
   1d176:	0031      	movs	r1, r6
   1d178:	2002      	movs	r0, #2
   1d17a:	4c0c      	ldr	r4, [pc, #48]	; (1d1ac <connect+0x8c>)
   1d17c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d17e:	2800      	cmp	r0, #0
   1d180:	d001      	beq.n	1d186 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d182:	2009      	movs	r0, #9
   1d184:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
   1d186:	b008      	add	sp, #32
   1d188:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d18a:	2006      	movs	r0, #6
   1d18c:	4240      	negs	r0, r0
   1d18e:	e7fa      	b.n	1d186 <connect+0x66>
   1d190:	2006      	movs	r0, #6
   1d192:	4240      	negs	r0, r0
   1d194:	e7f7      	b.n	1d186 <connect+0x66>
   1d196:	2006      	movs	r0, #6
   1d198:	4240      	negs	r0, r0
   1d19a:	e7f4      	b.n	1d186 <connect+0x66>
   1d19c:	2006      	movs	r0, #6
   1d19e:	4240      	negs	r0, r0
   1d1a0:	e7f1      	b.n	1d186 <connect+0x66>
   1d1a2:	46c0      	nop			; (mov r8, r8)
   1d1a4:	200054bc 	.word	0x200054bc
   1d1a8:	0001a55d 	.word	0x0001a55d
   1d1ac:	0001a685 	.word	0x0001a685

0001d1b0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   1d1b0:	b530      	push	{r4, r5, lr}
   1d1b2:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   1d1b4:	2800      	cmp	r0, #0
   1d1b6:	db36      	blt.n	1d226 <send+0x76>
   1d1b8:	2900      	cmp	r1, #0
   1d1ba:	d037      	beq.n	1d22c <send+0x7c>
   1d1bc:	23af      	movs	r3, #175	; 0xaf
   1d1be:	00db      	lsls	r3, r3, #3
   1d1c0:	429a      	cmp	r2, r3
   1d1c2:	d836      	bhi.n	1d232 <send+0x82>
   1d1c4:	0104      	lsls	r4, r0, #4
   1d1c6:	4b1e      	ldr	r3, [pc, #120]	; (1d240 <send+0x90>)
   1d1c8:	191b      	adds	r3, r3, r4
   1d1ca:	7a9b      	ldrb	r3, [r3, #10]
   1d1cc:	2b01      	cmp	r3, #1
   1d1ce:	d133      	bne.n	1d238 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
   1d1d0:	ab04      	add	r3, sp, #16
   1d1d2:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   1d1d4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   1d1d6:	0025      	movs	r5, r4
   1d1d8:	4c19      	ldr	r4, [pc, #100]	; (1d240 <send+0x90>)
   1d1da:	1964      	adds	r4, r4, r5
   1d1dc:	88e4      	ldrh	r4, [r4, #6]
   1d1de:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   1d1e0:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
   1d1e2:	2806      	cmp	r0, #6
   1d1e4:	dd00      	ble.n	1d1e8 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   1d1e6:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d1e8:	0104      	lsls	r4, r0, #4
   1d1ea:	4b15      	ldr	r3, [pc, #84]	; (1d240 <send+0x90>)
   1d1ec:	191b      	adds	r3, r3, r4
   1d1ee:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
   1d1f0:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d1f2:	07e4      	lsls	r4, r4, #31
   1d1f4:	d505      	bpl.n	1d202 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   1d1f6:	0100      	lsls	r0, r0, #4
   1d1f8:	4b11      	ldr	r3, [pc, #68]	; (1d240 <send+0x90>)
   1d1fa:	1818      	adds	r0, r3, r0
   1d1fc:	8905      	ldrh	r5, [r0, #8]
   1d1fe:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   1d200:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   1d202:	2080      	movs	r0, #128	; 0x80
   1d204:	4318      	orrs	r0, r3
   1d206:	9502      	str	r5, [sp, #8]
   1d208:	9201      	str	r2, [sp, #4]
   1d20a:	9100      	str	r1, [sp, #0]
   1d20c:	2310      	movs	r3, #16
   1d20e:	aa04      	add	r2, sp, #16
   1d210:	0001      	movs	r1, r0
   1d212:	2002      	movs	r0, #2
   1d214:	4c0b      	ldr	r4, [pc, #44]	; (1d244 <send+0x94>)
   1d216:	47a0      	blx	r4
   1d218:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1d21a:	2800      	cmp	r0, #0
   1d21c:	d000      	beq.n	1d220 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   1d21e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
   1d220:	0018      	movs	r0, r3
   1d222:	b009      	add	sp, #36	; 0x24
   1d224:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d226:	2306      	movs	r3, #6
   1d228:	425b      	negs	r3, r3
   1d22a:	e7f9      	b.n	1d220 <send+0x70>
   1d22c:	2306      	movs	r3, #6
   1d22e:	425b      	negs	r3, r3
   1d230:	e7f6      	b.n	1d220 <send+0x70>
   1d232:	2306      	movs	r3, #6
   1d234:	425b      	negs	r3, r3
   1d236:	e7f3      	b.n	1d220 <send+0x70>
   1d238:	2306      	movs	r3, #6
   1d23a:	425b      	negs	r3, r3
   1d23c:	e7f0      	b.n	1d220 <send+0x70>
   1d23e:	46c0      	nop			; (mov r8, r8)
   1d240:	200054bc 	.word	0x200054bc
   1d244:	0001a685 	.word	0x0001a685

0001d248 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1d248:	b530      	push	{r4, r5, lr}
   1d24a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   1d24c:	2800      	cmp	r0, #0
   1d24e:	db34      	blt.n	1d2ba <recv+0x72>
   1d250:	2900      	cmp	r1, #0
   1d252:	d035      	beq.n	1d2c0 <recv+0x78>
   1d254:	2a00      	cmp	r2, #0
   1d256:	d036      	beq.n	1d2c6 <recv+0x7e>
   1d258:	0105      	lsls	r5, r0, #4
   1d25a:	4c1e      	ldr	r4, [pc, #120]	; (1d2d4 <recv+0x8c>)
   1d25c:	1964      	adds	r4, r4, r5
   1d25e:	7aa4      	ldrb	r4, [r4, #10]
   1d260:	2c01      	cmp	r4, #1
   1d262:	d133      	bne.n	1d2cc <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   1d264:	4c1b      	ldr	r4, [pc, #108]	; (1d2d4 <recv+0x8c>)
   1d266:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   1d268:	1964      	adds	r4, r4, r5
   1d26a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
   1d26c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
   1d26e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
   1d270:	2900      	cmp	r1, #0
   1d272:	d11d      	bne.n	1d2b0 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
   1d274:	2101      	movs	r1, #1
   1d276:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d278:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
   1d27a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d27c:	07d2      	lsls	r2, r2, #31
   1d27e:	d500      	bpl.n	1d282 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1d280:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   1d282:	2b00      	cmp	r3, #0
   1d284:	d117      	bne.n	1d2b6 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1d286:	3b01      	subs	r3, #1
   1d288:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
   1d28a:	aa04      	add	r2, sp, #16
   1d28c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d28e:	0100      	lsls	r0, r0, #4
   1d290:	4b10      	ldr	r3, [pc, #64]	; (1d2d4 <recv+0x8c>)
   1d292:	1818      	adds	r0, r3, r0
   1d294:	88c3      	ldrh	r3, [r0, #6]
   1d296:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   1d298:	2300      	movs	r3, #0
   1d29a:	9302      	str	r3, [sp, #8]
   1d29c:	9301      	str	r3, [sp, #4]
   1d29e:	9300      	str	r3, [sp, #0]
   1d2a0:	3308      	adds	r3, #8
   1d2a2:	2002      	movs	r0, #2
   1d2a4:	4c0c      	ldr	r4, [pc, #48]	; (1d2d8 <recv+0x90>)
   1d2a6:	47a0      	blx	r4
   1d2a8:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1d2aa:	2800      	cmp	r0, #0
   1d2ac:	d000      	beq.n	1d2b0 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   1d2ae:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
   1d2b0:	0010      	movs	r0, r2
   1d2b2:	b007      	add	sp, #28
   1d2b4:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   1d2b6:	9304      	str	r3, [sp, #16]
   1d2b8:	e7e7      	b.n	1d28a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d2ba:	2206      	movs	r2, #6
   1d2bc:	4252      	negs	r2, r2
   1d2be:	e7f7      	b.n	1d2b0 <recv+0x68>
   1d2c0:	2206      	movs	r2, #6
   1d2c2:	4252      	negs	r2, r2
   1d2c4:	e7f4      	b.n	1d2b0 <recv+0x68>
   1d2c6:	2206      	movs	r2, #6
   1d2c8:	4252      	negs	r2, r2
   1d2ca:	e7f1      	b.n	1d2b0 <recv+0x68>
   1d2cc:	2206      	movs	r2, #6
   1d2ce:	4252      	negs	r2, r2
   1d2d0:	e7ee      	b.n	1d2b0 <recv+0x68>
   1d2d2:	46c0      	nop			; (mov r8, r8)
   1d2d4:	200054bc 	.word	0x200054bc
   1d2d8:	0001a685 	.word	0x0001a685

0001d2dc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   1d2dc:	b530      	push	{r4, r5, lr}
   1d2de:	b087      	sub	sp, #28
   1d2e0:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
   1d2e2:	481d      	ldr	r0, [pc, #116]	; (1d358 <close+0x7c>)
   1d2e4:	4d1d      	ldr	r5, [pc, #116]	; (1d35c <close+0x80>)
   1d2e6:	47a8      	blx	r5
   1d2e8:	0021      	movs	r1, r4
   1d2ea:	481d      	ldr	r0, [pc, #116]	; (1d360 <close+0x84>)
   1d2ec:	47a8      	blx	r5
   1d2ee:	481d      	ldr	r0, [pc, #116]	; (1d364 <close+0x88>)
   1d2f0:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   1d2f2:	2c00      	cmp	r4, #0
   1d2f4:	db2a      	blt.n	1d34c <close+0x70>
   1d2f6:	0122      	lsls	r2, r4, #4
   1d2f8:	4b1b      	ldr	r3, [pc, #108]	; (1d368 <close+0x8c>)
   1d2fa:	189b      	adds	r3, r3, r2
   1d2fc:	7a9b      	ldrb	r3, [r3, #10]
   1d2fe:	2b01      	cmp	r3, #1
   1d300:	d127      	bne.n	1d352 <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   1d302:	a905      	add	r1, sp, #20
   1d304:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d306:	4b18      	ldr	r3, [pc, #96]	; (1d368 <close+0x8c>)
   1d308:	189b      	adds	r3, r3, r2
   1d30a:	88da      	ldrh	r2, [r3, #6]
   1d30c:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   1d30e:	2200      	movs	r2, #0
   1d310:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
   1d312:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d314:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1d316:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d318:	07db      	lsls	r3, r3, #31
   1d31a:	d500      	bpl.n	1d31e <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   1d31c:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   1d31e:	2300      	movs	r3, #0
   1d320:	9302      	str	r3, [sp, #8]
   1d322:	9301      	str	r3, [sp, #4]
   1d324:	9300      	str	r3, [sp, #0]
   1d326:	3304      	adds	r3, #4
   1d328:	aa05      	add	r2, sp, #20
   1d32a:	2002      	movs	r0, #2
   1d32c:	4d0f      	ldr	r5, [pc, #60]	; (1d36c <close+0x90>)
   1d32e:	47a8      	blx	r5
   1d330:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d332:	d001      	beq.n	1d338 <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d334:	2509      	movs	r5, #9
   1d336:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   1d338:	0124      	lsls	r4, r4, #4
   1d33a:	480b      	ldr	r0, [pc, #44]	; (1d368 <close+0x8c>)
   1d33c:	1820      	adds	r0, r4, r0
   1d33e:	2210      	movs	r2, #16
   1d340:	2100      	movs	r1, #0
   1d342:	4b0b      	ldr	r3, [pc, #44]	; (1d370 <close+0x94>)
   1d344:	4798      	blx	r3
	}
	return s8Ret;
}
   1d346:	0028      	movs	r0, r5
   1d348:	b007      	add	sp, #28
   1d34a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d34c:	2506      	movs	r5, #6
   1d34e:	426d      	negs	r5, r5
   1d350:	e7f9      	b.n	1d346 <close+0x6a>
   1d352:	2506      	movs	r5, #6
   1d354:	426d      	negs	r5, r5
   1d356:	e7f6      	b.n	1d346 <close+0x6a>
   1d358:	00029884 	.word	0x00029884
   1d35c:	0001905d 	.word	0x0001905d
   1d360:	0002a338 	.word	0x0002a338
   1d364:	00029570 	.word	0x00029570
   1d368:	200054bc 	.word	0x200054bc
   1d36c:	0001a685 	.word	0x0001a685
   1d370:	0001a571 	.word	0x0001a571

0001d374 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   1d374:	b570      	push	{r4, r5, r6, lr}
   1d376:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
   1d378:	2300      	movs	r3, #0
   1d37a:	9301      	str	r3, [sp, #4]
   1d37c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
   1d37e:	2100      	movs	r1, #0
   1d380:	7802      	ldrb	r2, [r0, #0]
   1d382:	1c44      	adds	r4, r0, #1
   1d384:	3005      	adds	r0, #5
   1d386:	000b      	movs	r3, r1
   1d388:	e009      	b.n	1d39e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
   1d38a:	009d      	lsls	r5, r3, #2
   1d38c:	195b      	adds	r3, r3, r5
   1d38e:	005b      	lsls	r3, r3, #1
   1d390:	189b      	adds	r3, r3, r2
   1d392:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
   1d394:	0022      	movs	r2, r4
   1d396:	3401      	adds	r4, #1
			if(j > 4)
   1d398:	42a0      	cmp	r0, r4
   1d39a:	d00a      	beq.n	1d3b2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
   1d39c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
   1d39e:	2a2e      	cmp	r2, #46	; 0x2e
   1d3a0:	d00a      	beq.n	1d3b8 <nmi_inet_addr+0x44>
   1d3a2:	2a00      	cmp	r2, #0
   1d3a4:	d00c      	beq.n	1d3c0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
   1d3a6:	3a30      	subs	r2, #48	; 0x30
   1d3a8:	b2d2      	uxtb	r2, r2
   1d3aa:	2a09      	cmp	r2, #9
   1d3ac:	d9ed      	bls.n	1d38a <nmi_inet_addr+0x16>
				return 0;
   1d3ae:	2000      	movs	r0, #0
   1d3b0:	e000      	b.n	1d3b4 <nmi_inet_addr+0x40>
				return 0;
   1d3b2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
   1d3b4:	b002      	add	sp, #8
   1d3b6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
   1d3b8:	466a      	mov	r2, sp
   1d3ba:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d3bc:	0020      	movs	r0, r4
   1d3be:	e002      	b.n	1d3c6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
   1d3c0:	466a      	mov	r2, sp
   1d3c2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d3c4:	0020      	movs	r0, r4
   1d3c6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
   1d3c8:	2e04      	cmp	r6, #4
   1d3ca:	d1d9      	bne.n	1d380 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   1d3cc:	2204      	movs	r2, #4
   1d3ce:	4669      	mov	r1, sp
   1d3d0:	a801      	add	r0, sp, #4
   1d3d2:	4b02      	ldr	r3, [pc, #8]	; (1d3dc <nmi_inet_addr+0x68>)
   1d3d4:	4798      	blx	r3
	return u32IP;
   1d3d6:	9801      	ldr	r0, [sp, #4]
   1d3d8:	e7ec      	b.n	1d3b4 <nmi_inet_addr+0x40>
   1d3da:	46c0      	nop			; (mov r8, r8)
   1d3dc:	0001a55d 	.word	0x0001a55d

0001d3e0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   1d3e0:	b510      	push	{r4, lr}
   1d3e2:	b084      	sub	sp, #16
   1d3e4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   1d3e6:	4b0b      	ldr	r3, [pc, #44]	; (1d414 <gethostbyname+0x34>)
   1d3e8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   1d3ea:	b2c3      	uxtb	r3, r0
   1d3ec:	2b40      	cmp	r3, #64	; 0x40
   1d3ee:	d80d      	bhi.n	1d40c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   1d3f0:	23ff      	movs	r3, #255	; 0xff
   1d3f2:	4003      	ands	r3, r0
   1d3f4:	3301      	adds	r3, #1
   1d3f6:	2200      	movs	r2, #0
   1d3f8:	9202      	str	r2, [sp, #8]
   1d3fa:	9201      	str	r2, [sp, #4]
   1d3fc:	9200      	str	r2, [sp, #0]
   1d3fe:	0022      	movs	r2, r4
   1d400:	214a      	movs	r1, #74	; 0x4a
   1d402:	2002      	movs	r0, #2
   1d404:	4c04      	ldr	r4, [pc, #16]	; (1d418 <gethostbyname+0x38>)
   1d406:	47a0      	blx	r4
	}
	return s8Err;
}
   1d408:	b004      	add	sp, #16
   1d40a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1d40c:	2006      	movs	r0, #6
   1d40e:	4240      	negs	r0, r0
   1d410:	e7fa      	b.n	1d408 <gethostbyname+0x28>
   1d412:	46c0      	nop			; (mov r8, r8)
   1d414:	0001a581 	.word	0x0001a581
   1d418:	0001a685 	.word	0x0001a685

0001d41c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   1d41c:	b570      	push	{r4, r5, r6, lr}
   1d41e:	b082      	sub	sp, #8
   1d420:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d422:	4b2a      	ldr	r3, [pc, #168]	; (1d4cc <spi_flash_enable+0xb0>)
   1d424:	4798      	blx	r3
   1d426:	0500      	lsls	r0, r0, #20
   1d428:	0d00      	lsrs	r0, r0, #20
   1d42a:	4b29      	ldr	r3, [pc, #164]	; (1d4d0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
   1d42c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d42e:	4298      	cmp	r0, r3
   1d430:	d802      	bhi.n	1d438 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
   1d432:	0028      	movs	r0, r5
   1d434:	b002      	add	sp, #8
   1d436:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   1d438:	a901      	add	r1, sp, #4
   1d43a:	4826      	ldr	r0, [pc, #152]	; (1d4d4 <spi_flash_enable+0xb8>)
   1d43c:	4b26      	ldr	r3, [pc, #152]	; (1d4d8 <spi_flash_enable+0xbc>)
   1d43e:	4798      	blx	r3
   1d440:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
   1d442:	d1f6      	bne.n	1d432 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
   1d444:	4b25      	ldr	r3, [pc, #148]	; (1d4dc <spi_flash_enable+0xc0>)
   1d446:	9a01      	ldr	r2, [sp, #4]
   1d448:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
   1d44a:	4925      	ldr	r1, [pc, #148]	; (1d4e0 <spi_flash_enable+0xc4>)
   1d44c:	4319      	orrs	r1, r3
   1d44e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d450:	4820      	ldr	r0, [pc, #128]	; (1d4d4 <spi_flash_enable+0xb8>)
   1d452:	4b24      	ldr	r3, [pc, #144]	; (1d4e4 <spi_flash_enable+0xc8>)
   1d454:	4798      	blx	r3
		if(enable) {
   1d456:	2c00      	cmp	r4, #0
   1d458:	d020      	beq.n	1d49c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d45a:	2100      	movs	r1, #0
   1d45c:	4822      	ldr	r0, [pc, #136]	; (1d4e8 <spi_flash_enable+0xcc>)
   1d45e:	4c21      	ldr	r4, [pc, #132]	; (1d4e4 <spi_flash_enable+0xc8>)
   1d460:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d462:	21ab      	movs	r1, #171	; 0xab
   1d464:	4821      	ldr	r0, [pc, #132]	; (1d4ec <spi_flash_enable+0xd0>)
   1d466:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d468:	2101      	movs	r1, #1
   1d46a:	4821      	ldr	r0, [pc, #132]	; (1d4f0 <spi_flash_enable+0xd4>)
   1d46c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d46e:	2100      	movs	r1, #0
   1d470:	4820      	ldr	r0, [pc, #128]	; (1d4f4 <spi_flash_enable+0xd8>)
   1d472:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   1d474:	2181      	movs	r1, #129	; 0x81
   1d476:	4820      	ldr	r0, [pc, #128]	; (1d4f8 <spi_flash_enable+0xdc>)
   1d478:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d47a:	4e20      	ldr	r6, [pc, #128]	; (1d4fc <spi_flash_enable+0xe0>)
   1d47c:	4c20      	ldr	r4, [pc, #128]	; (1d500 <spi_flash_enable+0xe4>)
   1d47e:	0030      	movs	r0, r6
   1d480:	47a0      	blx	r4
   1d482:	2801      	cmp	r0, #1
   1d484:	d1fb      	bne.n	1d47e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
   1d486:	4b15      	ldr	r3, [pc, #84]	; (1d4dc <spi_flash_enable+0xc0>)
   1d488:	9a01      	ldr	r2, [sp, #4]
   1d48a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
   1d48c:	2180      	movs	r1, #128	; 0x80
   1d48e:	0249      	lsls	r1, r1, #9
   1d490:	4319      	orrs	r1, r3
   1d492:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d494:	480f      	ldr	r0, [pc, #60]	; (1d4d4 <spi_flash_enable+0xb8>)
   1d496:	4b13      	ldr	r3, [pc, #76]	; (1d4e4 <spi_flash_enable+0xc8>)
   1d498:	4798      	blx	r3
   1d49a:	e7ca      	b.n	1d432 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d49c:	2100      	movs	r1, #0
   1d49e:	4812      	ldr	r0, [pc, #72]	; (1d4e8 <spi_flash_enable+0xcc>)
   1d4a0:	4c10      	ldr	r4, [pc, #64]	; (1d4e4 <spi_flash_enable+0xc8>)
   1d4a2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d4a4:	21b9      	movs	r1, #185	; 0xb9
   1d4a6:	4811      	ldr	r0, [pc, #68]	; (1d4ec <spi_flash_enable+0xd0>)
   1d4a8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d4aa:	2101      	movs	r1, #1
   1d4ac:	4810      	ldr	r0, [pc, #64]	; (1d4f0 <spi_flash_enable+0xd4>)
   1d4ae:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d4b0:	2100      	movs	r1, #0
   1d4b2:	4810      	ldr	r0, [pc, #64]	; (1d4f4 <spi_flash_enable+0xd8>)
   1d4b4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   1d4b6:	2181      	movs	r1, #129	; 0x81
   1d4b8:	480f      	ldr	r0, [pc, #60]	; (1d4f8 <spi_flash_enable+0xdc>)
   1d4ba:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d4bc:	4e0f      	ldr	r6, [pc, #60]	; (1d4fc <spi_flash_enable+0xe0>)
   1d4be:	4c10      	ldr	r4, [pc, #64]	; (1d500 <spi_flash_enable+0xe4>)
   1d4c0:	0030      	movs	r0, r6
   1d4c2:	47a0      	blx	r4
   1d4c4:	2801      	cmp	r0, #1
   1d4c6:	d1fb      	bne.n	1d4c0 <spi_flash_enable+0xa4>
   1d4c8:	e7dd      	b.n	1d486 <spi_flash_enable+0x6a>
   1d4ca:	46c0      	nop			; (mov r8, r8)
   1d4cc:	0001b4f5 	.word	0x0001b4f5
   1d4d0:	0000039f 	.word	0x0000039f
   1d4d4:	00001410 	.word	0x00001410
   1d4d8:	0001b92d 	.word	0x0001b92d
   1d4dc:	f8888fff 	.word	0xf8888fff
   1d4e0:	01111000 	.word	0x01111000
   1d4e4:	0001b939 	.word	0x0001b939
   1d4e8:	00010208 	.word	0x00010208
   1d4ec:	0001020c 	.word	0x0001020c
   1d4f0:	00010214 	.word	0x00010214
   1d4f4:	0001021c 	.word	0x0001021c
   1d4f8:	00010204 	.word	0x00010204
   1d4fc:	00010218 	.word	0x00010218
   1d500:	0001b921 	.word	0x0001b921

0001d504 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   1d504:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d506:	2301      	movs	r3, #1
   1d508:	2800      	cmp	r0, #0
   1d50a:	d001      	beq.n	1d510 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d50c:	0018      	movs	r0, r3
   1d50e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d510:	4b01      	ldr	r3, [pc, #4]	; (1d518 <mem_test_unit_ready+0x14>)
   1d512:	4798      	blx	r3
   1d514:	0003      	movs	r3, r0
   1d516:	e7f9      	b.n	1d50c <mem_test_unit_ready+0x8>
   1d518:	0001991d 	.word	0x0001991d

0001d51c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   1d51c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d51e:	2301      	movs	r3, #1
   1d520:	2800      	cmp	r0, #0
   1d522:	d001      	beq.n	1d528 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d524:	0018      	movs	r0, r3
   1d526:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d528:	0008      	movs	r0, r1
   1d52a:	4b02      	ldr	r3, [pc, #8]	; (1d534 <mem_read_capacity+0x18>)
   1d52c:	4798      	blx	r3
   1d52e:	0003      	movs	r3, r0
   1d530:	e7f8      	b.n	1d524 <mem_read_capacity+0x8>
   1d532:	46c0      	nop			; (mov r8, r8)
   1d534:	0001994d 	.word	0x0001994d

0001d538 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   1d538:	4243      	negs	r3, r0
   1d53a:	4158      	adcs	r0, r3
   1d53c:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   1d53e:	4770      	bx	lr

0001d540 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   1d540:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d542:	2301      	movs	r3, #1
   1d544:	2800      	cmp	r0, #0
   1d546:	d001      	beq.n	1d54c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   1d548:	0018      	movs	r0, r3
   1d54a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d54c:	4b01      	ldr	r3, [pc, #4]	; (1d554 <mem_wr_protect+0x14>)
   1d54e:	4798      	blx	r3
   1d550:	0003      	movs	r3, r0
   1d552:	e7f9      	b.n	1d548 <mem_wr_protect+0x8>
   1d554:	0001995d 	.word	0x0001995d

0001d558 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   1d558:	b510      	push	{r4, lr}
   1d55a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d55c:	2301      	movs	r3, #1
   1d55e:	2800      	cmp	r0, #0
   1d560:	d001      	beq.n	1d566 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   1d562:	0018      	movs	r0, r3
   1d564:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d566:	0011      	movs	r1, r2
   1d568:	0020      	movs	r0, r4
   1d56a:	4b02      	ldr	r3, [pc, #8]	; (1d574 <memory_2_ram+0x1c>)
   1d56c:	4798      	blx	r3
   1d56e:	0003      	movs	r3, r0
   1d570:	e7f7      	b.n	1d562 <memory_2_ram+0xa>
   1d572:	46c0      	nop			; (mov r8, r8)
   1d574:	000199b1 	.word	0x000199b1

0001d578 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   1d578:	b510      	push	{r4, lr}
   1d57a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d57c:	2301      	movs	r3, #1
   1d57e:	2800      	cmp	r0, #0
   1d580:	d001      	beq.n	1d586 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   1d582:	0018      	movs	r0, r3
   1d584:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d586:	0011      	movs	r1, r2
   1d588:	0020      	movs	r0, r4
   1d58a:	4b02      	ldr	r3, [pc, #8]	; (1d594 <ram_2_memory+0x1c>)
   1d58c:	4798      	blx	r3
   1d58e:	0003      	movs	r3, r0
   1d590:	e7f7      	b.n	1d582 <ram_2_memory+0xa>
   1d592:	46c0      	nop			; (mov r8, r8)
   1d594:	00019a09 	.word	0x00019a09

0001d598 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   1d598:	4b0c      	ldr	r3, [pc, #48]	; (1d5cc <cpu_irq_enter_critical+0x34>)
   1d59a:	681b      	ldr	r3, [r3, #0]
   1d59c:	2b00      	cmp	r3, #0
   1d59e:	d106      	bne.n	1d5ae <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d5a0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   1d5a4:	2b00      	cmp	r3, #0
   1d5a6:	d007      	beq.n	1d5b8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1d5a8:	2200      	movs	r2, #0
   1d5aa:	4b09      	ldr	r3, [pc, #36]	; (1d5d0 <cpu_irq_enter_critical+0x38>)
   1d5ac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1d5ae:	4a07      	ldr	r2, [pc, #28]	; (1d5cc <cpu_irq_enter_critical+0x34>)
   1d5b0:	6813      	ldr	r3, [r2, #0]
   1d5b2:	3301      	adds	r3, #1
   1d5b4:	6013      	str	r3, [r2, #0]
}
   1d5b6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   1d5b8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1d5ba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1d5be:	2200      	movs	r2, #0
   1d5c0:	4b04      	ldr	r3, [pc, #16]	; (1d5d4 <cpu_irq_enter_critical+0x3c>)
   1d5c2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1d5c4:	3201      	adds	r2, #1
   1d5c6:	4b02      	ldr	r3, [pc, #8]	; (1d5d0 <cpu_irq_enter_critical+0x38>)
   1d5c8:	701a      	strb	r2, [r3, #0]
   1d5ca:	e7f0      	b.n	1d5ae <cpu_irq_enter_critical+0x16>
   1d5cc:	20003cf4 	.word	0x20003cf4
   1d5d0:	20003cf8 	.word	0x20003cf8
   1d5d4:	200000da 	.word	0x200000da

0001d5d8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   1d5d8:	4b08      	ldr	r3, [pc, #32]	; (1d5fc <cpu_irq_leave_critical+0x24>)
   1d5da:	681a      	ldr	r2, [r3, #0]
   1d5dc:	3a01      	subs	r2, #1
   1d5de:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1d5e0:	681b      	ldr	r3, [r3, #0]
   1d5e2:	2b00      	cmp	r3, #0
   1d5e4:	d109      	bne.n	1d5fa <cpu_irq_leave_critical+0x22>
   1d5e6:	4b06      	ldr	r3, [pc, #24]	; (1d600 <cpu_irq_leave_critical+0x28>)
   1d5e8:	781b      	ldrb	r3, [r3, #0]
   1d5ea:	2b00      	cmp	r3, #0
   1d5ec:	d005      	beq.n	1d5fa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
   1d5ee:	2201      	movs	r2, #1
   1d5f0:	4b04      	ldr	r3, [pc, #16]	; (1d604 <cpu_irq_leave_critical+0x2c>)
   1d5f2:	701a      	strb	r2, [r3, #0]
   1d5f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1d5f8:	b662      	cpsie	i
	}
}
   1d5fa:	4770      	bx	lr
   1d5fc:	20003cf4 	.word	0x20003cf4
   1d600:	20003cf8 	.word	0x20003cf8
   1d604:	200000da 	.word	0x200000da

0001d608 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   1d608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d60a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
   1d60c:	ac01      	add	r4, sp, #4
   1d60e:	2501      	movs	r5, #1
   1d610:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1d612:	2700      	movs	r7, #0
   1d614:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1d616:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1d618:	0021      	movs	r1, r4
   1d61a:	2017      	movs	r0, #23
   1d61c:	4e06      	ldr	r6, [pc, #24]	; (1d638 <system_board_init+0x30>)
   1d61e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
   1d620:	2280      	movs	r2, #128	; 0x80
   1d622:	0412      	lsls	r2, r2, #16
   1d624:	4b05      	ldr	r3, [pc, #20]	; (1d63c <system_board_init+0x34>)
   1d626:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1d628:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   1d62a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1d62c:	0021      	movs	r1, r4
   1d62e:	2037      	movs	r0, #55	; 0x37
   1d630:	47b0      	blx	r6
}
   1d632:	b003      	add	sp, #12
   1d634:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d636:	46c0      	nop			; (mov r8, r8)
   1d638:	0001d811 	.word	0x0001d811
   1d63c:	41004400 	.word	0x41004400

0001d640 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d640:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1d642:	2a00      	cmp	r2, #0
   1d644:	d001      	beq.n	1d64a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
   1d646:	0018      	movs	r0, r3
   1d648:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
   1d64a:	008b      	lsls	r3, r1, #2
   1d64c:	4a06      	ldr	r2, [pc, #24]	; (1d668 <extint_register_callback+0x28>)
   1d64e:	589b      	ldr	r3, [r3, r2]
   1d650:	2b00      	cmp	r3, #0
   1d652:	d003      	beq.n	1d65c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
   1d654:	4283      	cmp	r3, r0
   1d656:	d005      	beq.n	1d664 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
   1d658:	231d      	movs	r3, #29
   1d65a:	e7f4      	b.n	1d646 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
   1d65c:	0089      	lsls	r1, r1, #2
   1d65e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
   1d660:	2300      	movs	r3, #0
   1d662:	e7f0      	b.n	1d646 <extint_register_callback+0x6>
		return STATUS_OK;
   1d664:	2300      	movs	r3, #0
   1d666:	e7ee      	b.n	1d646 <extint_register_callback+0x6>
   1d668:	2000557c 	.word	0x2000557c

0001d66c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d66c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d66e:	2900      	cmp	r1, #0
   1d670:	d001      	beq.n	1d676 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
   1d672:	0018      	movs	r0, r3
   1d674:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
   1d676:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d678:	281f      	cmp	r0, #31
   1d67a:	d800      	bhi.n	1d67e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
   1d67c:	4a02      	ldr	r2, [pc, #8]	; (1d688 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
   1d67e:	2301      	movs	r3, #1
   1d680:	4083      	lsls	r3, r0
   1d682:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
   1d684:	2300      	movs	r3, #0
   1d686:	e7f4      	b.n	1d672 <extint_chan_enable_callback+0x6>
   1d688:	40001800 	.word	0x40001800

0001d68c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d68c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d68e:	2900      	cmp	r1, #0
   1d690:	d001      	beq.n	1d696 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
   1d692:	0018      	movs	r0, r3
   1d694:	4770      	bx	lr
		return NULL;
   1d696:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d698:	281f      	cmp	r0, #31
   1d69a:	d800      	bhi.n	1d69e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
   1d69c:	4a02      	ldr	r2, [pc, #8]	; (1d6a8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
   1d69e:	2301      	movs	r3, #1
   1d6a0:	4083      	lsls	r3, r0
   1d6a2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
   1d6a4:	2300      	movs	r3, #0
   1d6a6:	e7f4      	b.n	1d692 <extint_chan_disable_callback+0x6>
   1d6a8:	40001800 	.word	0x40001800

0001d6ac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1d6ac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d6ae:	2200      	movs	r2, #0
   1d6b0:	4b10      	ldr	r3, [pc, #64]	; (1d6f4 <EIC_Handler+0x48>)
   1d6b2:	701a      	strb	r2, [r3, #0]
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	4910      	ldr	r1, [pc, #64]	; (1d6f8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d6b8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d6ba:	4e10      	ldr	r6, [pc, #64]	; (1d6fc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d6bc:	4c0d      	ldr	r4, [pc, #52]	; (1d6f4 <EIC_Handler+0x48>)
   1d6be:	e00a      	b.n	1d6d6 <EIC_Handler+0x2a>
		return eics[eic_index];
   1d6c0:	490d      	ldr	r1, [pc, #52]	; (1d6f8 <EIC_Handler+0x4c>)
   1d6c2:	e008      	b.n	1d6d6 <EIC_Handler+0x2a>
   1d6c4:	7823      	ldrb	r3, [r4, #0]
   1d6c6:	3301      	adds	r3, #1
   1d6c8:	b2db      	uxtb	r3, r3
   1d6ca:	7023      	strb	r3, [r4, #0]
   1d6cc:	2b0f      	cmp	r3, #15
   1d6ce:	d810      	bhi.n	1d6f2 <EIC_Handler+0x46>
		return NULL;
   1d6d0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
   1d6d2:	2b1f      	cmp	r3, #31
   1d6d4:	d9f4      	bls.n	1d6c0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d6d6:	0028      	movs	r0, r5
   1d6d8:	4018      	ands	r0, r3
   1d6da:	2201      	movs	r2, #1
   1d6dc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
   1d6de:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
   1d6e0:	4210      	tst	r0, r2
   1d6e2:	d0ef      	beq.n	1d6c4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
   1d6e4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d6e6:	009b      	lsls	r3, r3, #2
   1d6e8:	599b      	ldr	r3, [r3, r6]
   1d6ea:	2b00      	cmp	r3, #0
   1d6ec:	d0ea      	beq.n	1d6c4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1d6ee:	4798      	blx	r3
   1d6f0:	e7e8      	b.n	1d6c4 <EIC_Handler+0x18>
			}
		}
	}
}
   1d6f2:	bd70      	pop	{r4, r5, r6, pc}
   1d6f4:	20005578 	.word	0x20005578
   1d6f8:	40001800 	.word	0x40001800
   1d6fc:	2000557c 	.word	0x2000557c

0001d700 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1d700:	4a04      	ldr	r2, [pc, #16]	; (1d714 <_extint_enable+0x14>)
   1d702:	7813      	ldrb	r3, [r2, #0]
   1d704:	2102      	movs	r1, #2
   1d706:	430b      	orrs	r3, r1
   1d708:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d70a:	7853      	ldrb	r3, [r2, #1]
   1d70c:	b25b      	sxtb	r3, r3
   1d70e:	2b00      	cmp	r3, #0
   1d710:	dbfb      	blt.n	1d70a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1d712:	4770      	bx	lr
   1d714:	40001800 	.word	0x40001800

0001d718 <_system_extint_init>:
{
   1d718:	b500      	push	{lr}
   1d71a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
   1d71c:	4a12      	ldr	r2, [pc, #72]	; (1d768 <_system_extint_init+0x50>)
   1d71e:	6993      	ldr	r3, [r2, #24]
   1d720:	2140      	movs	r1, #64	; 0x40
   1d722:	430b      	orrs	r3, r1
   1d724:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1d726:	a901      	add	r1, sp, #4
   1d728:	2300      	movs	r3, #0
   1d72a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1d72c:	2005      	movs	r0, #5
   1d72e:	4b0f      	ldr	r3, [pc, #60]	; (1d76c <_system_extint_init+0x54>)
   1d730:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
   1d732:	2005      	movs	r0, #5
   1d734:	4b0e      	ldr	r3, [pc, #56]	; (1d770 <_system_extint_init+0x58>)
   1d736:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1d738:	4a0e      	ldr	r2, [pc, #56]	; (1d774 <_system_extint_init+0x5c>)
   1d73a:	7813      	ldrb	r3, [r2, #0]
   1d73c:	2101      	movs	r1, #1
   1d73e:	430b      	orrs	r3, r1
   1d740:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d742:	7853      	ldrb	r3, [r2, #1]
   1d744:	b25b      	sxtb	r3, r3
   1d746:	2b00      	cmp	r3, #0
   1d748:	dbfb      	blt.n	1d742 <_system_extint_init+0x2a>
   1d74a:	4b0b      	ldr	r3, [pc, #44]	; (1d778 <_system_extint_init+0x60>)
   1d74c:	0019      	movs	r1, r3
   1d74e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
   1d750:	2200      	movs	r2, #0
   1d752:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1d754:	4299      	cmp	r1, r3
   1d756:	d1fc      	bne.n	1d752 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d758:	2210      	movs	r2, #16
   1d75a:	4b08      	ldr	r3, [pc, #32]	; (1d77c <_system_extint_init+0x64>)
   1d75c:	601a      	str	r2, [r3, #0]
	_extint_enable();
   1d75e:	4b08      	ldr	r3, [pc, #32]	; (1d780 <_system_extint_init+0x68>)
   1d760:	4798      	blx	r3
}
   1d762:	b003      	add	sp, #12
   1d764:	bd00      	pop	{pc}
   1d766:	46c0      	nop			; (mov r8, r8)
   1d768:	40000400 	.word	0x40000400
   1d76c:	0001f14d 	.word	0x0001f14d
   1d770:	0001f0c1 	.word	0x0001f0c1
   1d774:	40001800 	.word	0x40001800
   1d778:	2000557c 	.word	0x2000557c
   1d77c:	e000e100 	.word	0xe000e100
   1d780:	0001d701 	.word	0x0001d701

0001d784 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1d784:	2300      	movs	r3, #0
   1d786:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
   1d788:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1d78a:	2201      	movs	r2, #1
   1d78c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
   1d78e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
   1d790:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1d792:	3302      	adds	r3, #2
   1d794:	72c3      	strb	r3, [r0, #11]
}
   1d796:	4770      	bx	lr

0001d798 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1d798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d79a:	b083      	sub	sp, #12
   1d79c:	0005      	movs	r5, r0
   1d79e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d7a0:	a901      	add	r1, sp, #4
   1d7a2:	2300      	movs	r3, #0
   1d7a4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   1d7a6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
   1d7a8:	7923      	ldrb	r3, [r4, #4]
   1d7aa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1d7ac:	7a23      	ldrb	r3, [r4, #8]
   1d7ae:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1d7b0:	7820      	ldrb	r0, [r4, #0]
   1d7b2:	4b15      	ldr	r3, [pc, #84]	; (1d808 <extint_chan_set_config+0x70>)
   1d7b4:	4798      	blx	r3
		return NULL;
   1d7b6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
   1d7b8:	2d1f      	cmp	r5, #31
   1d7ba:	d800      	bhi.n	1d7be <extint_chan_set_config+0x26>
		return eics[eic_index];
   1d7bc:	4813      	ldr	r0, [pc, #76]	; (1d80c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
   1d7be:	2207      	movs	r2, #7
   1d7c0:	402a      	ands	r2, r5
   1d7c2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1d7c4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1d7c6:	7aa3      	ldrb	r3, [r4, #10]
   1d7c8:	2b00      	cmp	r3, #0
   1d7ca:	d001      	beq.n	1d7d0 <extint_chan_set_config+0x38>
   1d7cc:	2308      	movs	r3, #8
   1d7ce:	431f      	orrs	r7, r3
   1d7d0:	08eb      	lsrs	r3, r5, #3
   1d7d2:	009b      	lsls	r3, r3, #2
   1d7d4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
   1d7d6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d7d8:	260f      	movs	r6, #15
   1d7da:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1d7dc:	43b1      	bics	r1, r6
			(new_config << config_pos);
   1d7de:	4097      	lsls	r7, r2
   1d7e0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d7e2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
   1d7e4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1d7e6:	7a63      	ldrb	r3, [r4, #9]
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	d106      	bne.n	1d7fa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1d7ec:	6943      	ldr	r3, [r0, #20]
   1d7ee:	2201      	movs	r2, #1
   1d7f0:	40aa      	lsls	r2, r5
   1d7f2:	4393      	bics	r3, r2
   1d7f4:	6143      	str	r3, [r0, #20]
	}
}
   1d7f6:	b003      	add	sp, #12
   1d7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1d7fa:	6942      	ldr	r2, [r0, #20]
   1d7fc:	2301      	movs	r3, #1
   1d7fe:	40ab      	lsls	r3, r5
   1d800:	4313      	orrs	r3, r2
   1d802:	6143      	str	r3, [r0, #20]
   1d804:	e7f7      	b.n	1d7f6 <extint_chan_set_config+0x5e>
   1d806:	46c0      	nop			; (mov r8, r8)
   1d808:	0001f275 	.word	0x0001f275
   1d80c:	40001800 	.word	0x40001800

0001d810 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1d810:	b500      	push	{lr}
   1d812:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d814:	ab01      	add	r3, sp, #4
   1d816:	2280      	movs	r2, #128	; 0x80
   1d818:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1d81a:	780a      	ldrb	r2, [r1, #0]
   1d81c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1d81e:	784a      	ldrb	r2, [r1, #1]
   1d820:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1d822:	788a      	ldrb	r2, [r1, #2]
   1d824:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1d826:	0019      	movs	r1, r3
   1d828:	4b01      	ldr	r3, [pc, #4]	; (1d830 <port_pin_set_config+0x20>)
   1d82a:	4798      	blx	r3
}
   1d82c:	b003      	add	sp, #12
   1d82e:	bd00      	pop	{pc}
   1d830:	0001f275 	.word	0x0001f275

0001d834 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d834:	6801      	ldr	r1, [r0, #0]
   1d836:	2208      	movs	r2, #8
   1d838:	4b05      	ldr	r3, [pc, #20]	; (1d850 <rtc_calendar_enable+0x1c>)
   1d83a:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d83c:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d83e:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d840:	b25b      	sxtb	r3, r3
   1d842:	2b00      	cmp	r3, #0
   1d844:	dbfb      	blt.n	1d83e <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   1d846:	880b      	ldrh	r3, [r1, #0]
   1d848:	2202      	movs	r2, #2
   1d84a:	4313      	orrs	r3, r2
   1d84c:	800b      	strh	r3, [r1, #0]
}
   1d84e:	4770      	bx	lr
   1d850:	e000e100 	.word	0xe000e100

0001d854 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   1d854:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d856:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d858:	2408      	movs	r4, #8
   1d85a:	2380      	movs	r3, #128	; 0x80
   1d85c:	4907      	ldr	r1, [pc, #28]	; (1d87c <rtc_calendar_disable+0x28>)
   1d85e:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
   1d860:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d862:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d864:	b25b      	sxtb	r3, r3
   1d866:	2b00      	cmp	r3, #0
   1d868:	dbfb      	blt.n	1d862 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1d86a:	23c1      	movs	r3, #193	; 0xc1
   1d86c:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   1d86e:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   1d870:	8813      	ldrh	r3, [r2, #0]
   1d872:	2102      	movs	r1, #2
   1d874:	438b      	bics	r3, r1
   1d876:	8013      	strh	r3, [r2, #0]
}
   1d878:	bd10      	pop	{r4, pc}
   1d87a:	46c0      	nop			; (mov r8, r8)
   1d87c:	e000e100 	.word	0xe000e100

0001d880 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   1d880:	b570      	push	{r4, r5, r6, lr}
   1d882:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d884:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   1d886:	4b07      	ldr	r3, [pc, #28]	; (1d8a4 <rtc_calendar_reset+0x24>)
   1d888:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1d88a:	2300      	movs	r3, #0
   1d88c:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
   1d88e:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
   1d890:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d892:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d894:	b25b      	sxtb	r3, r3
   1d896:	2b00      	cmp	r3, #0
   1d898:	dbfb      	blt.n	1d892 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   1d89a:	882b      	ldrh	r3, [r5, #0]
   1d89c:	2201      	movs	r2, #1
   1d89e:	4313      	orrs	r3, r2
   1d8a0:	802b      	strh	r3, [r5, #0]
}
   1d8a2:	bd70      	pop	{r4, r5, r6, pc}
   1d8a4:	0001d855 	.word	0x0001d855

0001d8a8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   1d8a8:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   1d8aa:	88cb      	ldrh	r3, [r1, #6]
   1d8ac:	88c2      	ldrh	r2, [r0, #6]
   1d8ae:	1a9a      	subs	r2, r3, r2
   1d8b0:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   1d8b2:	794b      	ldrb	r3, [r1, #5]
   1d8b4:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   1d8b6:	790c      	ldrb	r4, [r1, #4]
   1d8b8:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1d8ba:	4323      	orrs	r3, r4
   1d8bc:	788c      	ldrb	r4, [r1, #2]
   1d8be:	0324      	lsls	r4, r4, #12
   1d8c0:	4323      	orrs	r3, r4
   1d8c2:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1d8c4:	7902      	ldrb	r2, [r0, #4]
   1d8c6:	2a00      	cmp	r2, #0
   1d8c8:	d105      	bne.n	1d8d6 <rtc_calendar_time_to_register_value+0x2e>
   1d8ca:	78ca      	ldrb	r2, [r1, #3]
   1d8cc:	2a00      	cmp	r2, #0
   1d8ce:	d002      	beq.n	1d8d6 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   1d8d0:	2280      	movs	r2, #128	; 0x80
   1d8d2:	0252      	lsls	r2, r2, #9
   1d8d4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1d8d6:	7848      	ldrb	r0, [r1, #1]
   1d8d8:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1d8da:	780a      	ldrb	r2, [r1, #0]
   1d8dc:	4310      	orrs	r0, r2
   1d8de:	4318      	orrs	r0, r3

	return register_value;
}
   1d8e0:	bd10      	pop	{r4, pc}

0001d8e2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   1d8e2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d8e4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   1d8e6:	88c4      	ldrh	r4, [r0, #6]
   1d8e8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d8ea:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   1d8ec:	018b      	lsls	r3, r1, #6
   1d8ee:	0f1b      	lsrs	r3, r3, #28
   1d8f0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   1d8f2:	028b      	lsls	r3, r1, #10
   1d8f4:	0edb      	lsrs	r3, r3, #27
   1d8f6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   1d8f8:	7903      	ldrb	r3, [r0, #4]
   1d8fa:	2b00      	cmp	r3, #0
   1d8fc:	d10c      	bne.n	1d918 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   1d8fe:	040b      	lsls	r3, r1, #16
   1d900:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
   1d902:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   1d904:	03cb      	lsls	r3, r1, #15
   1d906:	0fdb      	lsrs	r3, r3, #31
   1d908:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1d90a:	0988      	lsrs	r0, r1, #6
   1d90c:	233f      	movs	r3, #63	; 0x3f
   1d90e:	4018      	ands	r0, r3
   1d910:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1d912:	4019      	ands	r1, r3
   1d914:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   1d916:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   1d918:	03cb      	lsls	r3, r1, #15
   1d91a:	0edb      	lsrs	r3, r3, #27
   1d91c:	7093      	strb	r3, [r2, #2]
   1d91e:	e7f4      	b.n	1d90a <rtc_calendar_register_value_to_time+0x28>

0001d920 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   1d920:	b510      	push	{r4, lr}
   1d922:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d924:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   1d926:	7941      	ldrb	r1, [r0, #5]
   1d928:	2900      	cmp	r1, #0
   1d92a:	d006      	beq.n	1d93a <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   1d92c:	8859      	ldrh	r1, [r3, #2]
   1d92e:	0449      	lsls	r1, r1, #17
   1d930:	d50b      	bpl.n	1d94a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1d932:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   1d934:	4b0a      	ldr	r3, [pc, #40]	; (1d960 <rtc_calendar_get_time+0x40>)
   1d936:	4798      	blx	r3
}
   1d938:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   1d93a:	490a      	ldr	r1, [pc, #40]	; (1d964 <rtc_calendar_get_time+0x44>)
   1d93c:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d93e:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d940:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d942:	b249      	sxtb	r1, r1
   1d944:	2900      	cmp	r1, #0
   1d946:	dbfb      	blt.n	1d940 <rtc_calendar_get_time+0x20>
   1d948:	e7f3      	b.n	1d932 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   1d94a:	8859      	ldrh	r1, [r3, #2]
   1d94c:	24c0      	movs	r4, #192	; 0xc0
   1d94e:	0224      	lsls	r4, r4, #8
   1d950:	4321      	orrs	r1, r4
   1d952:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d954:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d956:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d958:	b249      	sxtb	r1, r1
   1d95a:	2900      	cmp	r1, #0
   1d95c:	dbfb      	blt.n	1d956 <rtc_calendar_get_time+0x36>
   1d95e:	e7e8      	b.n	1d932 <rtc_calendar_get_time+0x12>
   1d960:	0001d8e3 	.word	0x0001d8e3
   1d964:	ffff8000 	.word	0xffff8000

0001d968 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   1d968:	b570      	push	{r4, r5, r6, lr}
   1d96a:	000d      	movs	r5, r1
   1d96c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
   1d96e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1d970:	2a01      	cmp	r2, #1
   1d972:	d901      	bls.n	1d978 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
   1d974:	0018      	movs	r0, r3
   1d976:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
   1d978:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   1d97a:	4b06      	ldr	r3, [pc, #24]	; (1d994 <rtc_calendar_set_alarm+0x2c>)
   1d97c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d97e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
   1d980:	b25b      	sxtb	r3, r3
   1d982:	2b00      	cmp	r3, #0
   1d984:	dbfb      	blt.n	1d97e <rtc_calendar_set_alarm+0x16>
   1d986:	00e4      	lsls	r4, r4, #3
   1d988:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   1d98a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   1d98c:	7a2b      	ldrb	r3, [r5, #8]
   1d98e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
   1d990:	2300      	movs	r3, #0
   1d992:	e7ef      	b.n	1d974 <rtc_calendar_set_alarm+0xc>
   1d994:	0001d8a9 	.word	0x0001d8a9

0001d998 <rtc_calendar_init>:
{
   1d998:	b530      	push	{r4, r5, lr}
   1d99a:	b083      	sub	sp, #12
   1d99c:	0005      	movs	r5, r0
   1d99e:	0014      	movs	r4, r2
	module->hw = hw;
   1d9a0:	6001      	str	r1, [r0, #0]
   1d9a2:	4a1c      	ldr	r2, [pc, #112]	; (1da14 <rtc_calendar_init+0x7c>)
   1d9a4:	6993      	ldr	r3, [r2, #24]
   1d9a6:	2120      	movs	r1, #32
   1d9a8:	430b      	orrs	r3, r1
   1d9aa:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1d9ac:	a901      	add	r1, sp, #4
   1d9ae:	2302      	movs	r3, #2
   1d9b0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1d9b2:	2004      	movs	r0, #4
   1d9b4:	4b18      	ldr	r3, [pc, #96]	; (1da18 <rtc_calendar_init+0x80>)
   1d9b6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1d9b8:	2004      	movs	r0, #4
   1d9ba:	4b18      	ldr	r3, [pc, #96]	; (1da1c <rtc_calendar_init+0x84>)
   1d9bc:	4798      	blx	r3
	rtc_calendar_reset(module);
   1d9be:	0028      	movs	r0, r5
   1d9c0:	4b17      	ldr	r3, [pc, #92]	; (1da20 <rtc_calendar_init+0x88>)
   1d9c2:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
   1d9c4:	7923      	ldrb	r3, [r4, #4]
   1d9c6:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
   1d9c8:	78e3      	ldrb	r3, [r4, #3]
   1d9ca:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
   1d9cc:	88e3      	ldrh	r3, [r4, #6]
   1d9ce:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
   1d9d0:	4b14      	ldr	r3, [pc, #80]	; (1da24 <rtc_calendar_init+0x8c>)
   1d9d2:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d9d4:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1d9d6:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
   1d9d8:	7921      	ldrb	r1, [r4, #4]
   1d9da:	2900      	cmp	r1, #0
   1d9dc:	d017      	beq.n	1da0e <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1d9de:	2108      	movs	r1, #8
   1d9e0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
   1d9e2:	78a1      	ldrb	r1, [r4, #2]
   1d9e4:	2900      	cmp	r1, #0
   1d9e6:	d001      	beq.n	1d9ec <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   1d9e8:	2180      	movs	r1, #128	; 0x80
   1d9ea:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   1d9ec:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
   1d9ee:	78e3      	ldrb	r3, [r4, #3]
   1d9f0:	2b00      	cmp	r3, #0
   1d9f2:	d004      	beq.n	1d9fe <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   1d9f4:	8853      	ldrh	r3, [r2, #2]
   1d9f6:	2180      	movs	r1, #128	; 0x80
   1d9f8:	01c9      	lsls	r1, r1, #7
   1d9fa:	430b      	orrs	r3, r1
   1d9fc:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   1d9fe:	0021      	movs	r1, r4
   1da00:	3108      	adds	r1, #8
   1da02:	2200      	movs	r2, #0
   1da04:	0028      	movs	r0, r5
   1da06:	4b08      	ldr	r3, [pc, #32]	; (1da28 <rtc_calendar_init+0x90>)
   1da08:	4798      	blx	r3
}
   1da0a:	b003      	add	sp, #12
   1da0c:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1da0e:	2148      	movs	r1, #72	; 0x48
   1da10:	430b      	orrs	r3, r1
   1da12:	e7e6      	b.n	1d9e2 <rtc_calendar_init+0x4a>
   1da14:	40000400 	.word	0x40000400
   1da18:	0001f14d 	.word	0x0001f14d
   1da1c:	0001f0c1 	.word	0x0001f0c1
   1da20:	0001d881 	.word	0x0001d881
   1da24:	200055bc 	.word	0x200055bc
   1da28:	0001d969 	.word	0x0001d969

0001da2c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1da2c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   1da2e:	4b0f      	ldr	r3, [pc, #60]	; (1da6c <RTC_Handler+0x40>)
   1da30:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1da32:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
   1da34:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
   1da36:	8a13      	ldrh	r3, [r2, #16]
   1da38:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1da3a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   1da3c:	79e3      	ldrb	r3, [r4, #7]
   1da3e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1da40:	b258      	sxtb	r0, r3
   1da42:	2800      	cmp	r0, #0
   1da44:	db06      	blt.n	1da54 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1da46:	07db      	lsls	r3, r3, #31
   1da48:	d503      	bpl.n	1da52 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1da4a:	07cb      	lsls	r3, r1, #31
   1da4c:	d40a      	bmi.n	1da64 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1da4e:	2301      	movs	r3, #1
   1da50:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   1da52:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   1da54:	078b      	lsls	r3, r1, #30
   1da56:	d402      	bmi.n	1da5e <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1da58:	2380      	movs	r3, #128	; 0x80
   1da5a:	7223      	strb	r3, [r4, #8]
   1da5c:	e7f9      	b.n	1da52 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1da5e:	68d3      	ldr	r3, [r2, #12]
   1da60:	4798      	blx	r3
   1da62:	e7f9      	b.n	1da58 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   1da64:	6893      	ldr	r3, [r2, #8]
   1da66:	4798      	blx	r3
   1da68:	e7f1      	b.n	1da4e <RTC_Handler+0x22>
   1da6a:	46c0      	nop			; (mov r8, r8)
   1da6c:	200055bc 	.word	0x200055bc

0001da70 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1da70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da72:	46de      	mov	lr, fp
   1da74:	4657      	mov	r7, sl
   1da76:	464e      	mov	r6, r9
   1da78:	4645      	mov	r5, r8
   1da7a:	b5e0      	push	{r5, r6, r7, lr}
   1da7c:	b087      	sub	sp, #28
   1da7e:	4680      	mov	r8, r0
   1da80:	9104      	str	r1, [sp, #16]
   1da82:	0016      	movs	r6, r2
   1da84:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1da86:	2200      	movs	r2, #0
   1da88:	2300      	movs	r3, #0
   1da8a:	2100      	movs	r1, #0
   1da8c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
   1da8e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1da90:	2001      	movs	r0, #1
   1da92:	0021      	movs	r1, r4
   1da94:	9600      	str	r6, [sp, #0]
   1da96:	9701      	str	r7, [sp, #4]
   1da98:	465c      	mov	r4, fp
   1da9a:	9403      	str	r4, [sp, #12]
   1da9c:	4644      	mov	r4, r8
   1da9e:	9405      	str	r4, [sp, #20]
   1daa0:	e013      	b.n	1daca <long_division+0x5a>
   1daa2:	2420      	movs	r4, #32
   1daa4:	1a64      	subs	r4, r4, r1
   1daa6:	0005      	movs	r5, r0
   1daa8:	40e5      	lsrs	r5, r4
   1daaa:	46a8      	mov	r8, r5
   1daac:	e014      	b.n	1dad8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
   1daae:	9c00      	ldr	r4, [sp, #0]
   1dab0:	9d01      	ldr	r5, [sp, #4]
   1dab2:	1b12      	subs	r2, r2, r4
   1dab4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
   1dab6:	465c      	mov	r4, fp
   1dab8:	464d      	mov	r5, r9
   1daba:	432c      	orrs	r4, r5
   1dabc:	46a3      	mov	fp, r4
   1dabe:	9c03      	ldr	r4, [sp, #12]
   1dac0:	4645      	mov	r5, r8
   1dac2:	432c      	orrs	r4, r5
   1dac4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
   1dac6:	3901      	subs	r1, #1
   1dac8:	d325      	bcc.n	1db16 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
   1daca:	2420      	movs	r4, #32
   1dacc:	4264      	negs	r4, r4
   1dace:	190c      	adds	r4, r1, r4
   1dad0:	d4e7      	bmi.n	1daa2 <long_division+0x32>
   1dad2:	0005      	movs	r5, r0
   1dad4:	40a5      	lsls	r5, r4
   1dad6:	46a8      	mov	r8, r5
   1dad8:	0004      	movs	r4, r0
   1dada:	408c      	lsls	r4, r1
   1dadc:	46a1      	mov	r9, r4
		r = r << 1;
   1dade:	1892      	adds	r2, r2, r2
   1dae0:	415b      	adcs	r3, r3
   1dae2:	0014      	movs	r4, r2
   1dae4:	001d      	movs	r5, r3
		if (n & bit_shift) {
   1dae6:	9e05      	ldr	r6, [sp, #20]
   1dae8:	464f      	mov	r7, r9
   1daea:	403e      	ands	r6, r7
   1daec:	46b4      	mov	ip, r6
   1daee:	9e04      	ldr	r6, [sp, #16]
   1daf0:	4647      	mov	r7, r8
   1daf2:	403e      	ands	r6, r7
   1daf4:	46b2      	mov	sl, r6
   1daf6:	4666      	mov	r6, ip
   1daf8:	4657      	mov	r7, sl
   1dafa:	433e      	orrs	r6, r7
   1dafc:	d003      	beq.n	1db06 <long_division+0x96>
			r |= 0x01;
   1dafe:	0006      	movs	r6, r0
   1db00:	4326      	orrs	r6, r4
   1db02:	0032      	movs	r2, r6
   1db04:	002b      	movs	r3, r5
		if (r >= d) {
   1db06:	9c00      	ldr	r4, [sp, #0]
   1db08:	9d01      	ldr	r5, [sp, #4]
   1db0a:	429d      	cmp	r5, r3
   1db0c:	d8db      	bhi.n	1dac6 <long_division+0x56>
   1db0e:	d1ce      	bne.n	1daae <long_division+0x3e>
   1db10:	4294      	cmp	r4, r2
   1db12:	d8d8      	bhi.n	1dac6 <long_division+0x56>
   1db14:	e7cb      	b.n	1daae <long_division+0x3e>
   1db16:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   1db18:	4658      	mov	r0, fp
   1db1a:	0019      	movs	r1, r3
   1db1c:	b007      	add	sp, #28
   1db1e:	bc3c      	pop	{r2, r3, r4, r5}
   1db20:	4690      	mov	r8, r2
   1db22:	4699      	mov	r9, r3
   1db24:	46a2      	mov	sl, r4
   1db26:	46ab      	mov	fp, r5
   1db28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001db2a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1db2a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1db2c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db2e:	2340      	movs	r3, #64	; 0x40
   1db30:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   1db32:	4281      	cmp	r1, r0
   1db34:	d202      	bcs.n	1db3c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   1db36:	0018      	movs	r0, r3
   1db38:	bd10      	pop	{r4, pc}
		baud_calculated++;
   1db3a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   1db3c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   1db3e:	1c63      	adds	r3, r4, #1
   1db40:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   1db42:	4288      	cmp	r0, r1
   1db44:	d9f9      	bls.n	1db3a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db46:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   1db48:	2cff      	cmp	r4, #255	; 0xff
   1db4a:	d8f4      	bhi.n	1db36 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   1db4c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1db4e:	2300      	movs	r3, #0
   1db50:	e7f1      	b.n	1db36 <_sercom_get_sync_baud_val+0xc>
	...

0001db54 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1db54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db56:	b083      	sub	sp, #12
   1db58:	000f      	movs	r7, r1
   1db5a:	0016      	movs	r6, r2
   1db5c:	aa08      	add	r2, sp, #32
   1db5e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1db60:	0004      	movs	r4, r0
   1db62:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db64:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   1db66:	42bc      	cmp	r4, r7
   1db68:	d902      	bls.n	1db70 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1db6a:	0010      	movs	r0, r2
   1db6c:	b003      	add	sp, #12
   1db6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1db70:	2b00      	cmp	r3, #0
   1db72:	d114      	bne.n	1db9e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1db74:	0002      	movs	r2, r0
   1db76:	0008      	movs	r0, r1
   1db78:	2100      	movs	r1, #0
   1db7a:	4c19      	ldr	r4, [pc, #100]	; (1dbe0 <_sercom_get_async_baud_val+0x8c>)
   1db7c:	47a0      	blx	r4
   1db7e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   1db80:	003a      	movs	r2, r7
   1db82:	2300      	movs	r3, #0
   1db84:	2000      	movs	r0, #0
   1db86:	4c17      	ldr	r4, [pc, #92]	; (1dbe4 <_sercom_get_async_baud_val+0x90>)
   1db88:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1db8a:	2200      	movs	r2, #0
   1db8c:	2301      	movs	r3, #1
   1db8e:	1a12      	subs	r2, r2, r0
   1db90:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   1db92:	0c12      	lsrs	r2, r2, #16
   1db94:	041b      	lsls	r3, r3, #16
   1db96:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   1db98:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   1db9a:	2200      	movs	r2, #0
   1db9c:	e7e5      	b.n	1db6a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   1db9e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1dba0:	2b01      	cmp	r3, #1
   1dba2:	d1f9      	bne.n	1db98 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   1dba4:	000a      	movs	r2, r1
   1dba6:	2300      	movs	r3, #0
   1dba8:	2100      	movs	r1, #0
   1dbaa:	4c0d      	ldr	r4, [pc, #52]	; (1dbe0 <_sercom_get_async_baud_val+0x8c>)
   1dbac:	47a0      	blx	r4
   1dbae:	0002      	movs	r2, r0
   1dbb0:	000b      	movs	r3, r1
   1dbb2:	9200      	str	r2, [sp, #0]
   1dbb4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   1dbb6:	0038      	movs	r0, r7
   1dbb8:	2100      	movs	r1, #0
   1dbba:	4c0a      	ldr	r4, [pc, #40]	; (1dbe4 <_sercom_get_async_baud_val+0x90>)
   1dbbc:	47a0      	blx	r4
   1dbbe:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   1dbc0:	2380      	movs	r3, #128	; 0x80
   1dbc2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1dbc4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   1dbc6:	4298      	cmp	r0, r3
   1dbc8:	d8cf      	bhi.n	1db6a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1dbca:	0f79      	lsrs	r1, r7, #29
   1dbcc:	00f8      	lsls	r0, r7, #3
   1dbce:	9a00      	ldr	r2, [sp, #0]
   1dbd0:	9b01      	ldr	r3, [sp, #4]
   1dbd2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   1dbd4:	00ea      	lsls	r2, r5, #3
   1dbd6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   1dbd8:	b2d2      	uxtb	r2, r2
   1dbda:	0352      	lsls	r2, r2, #13
   1dbdc:	432a      	orrs	r2, r5
   1dbde:	e7db      	b.n	1db98 <_sercom_get_async_baud_val+0x44>
   1dbe0:	000242d5 	.word	0x000242d5
   1dbe4:	0001da71 	.word	0x0001da71

0001dbe8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1dbe8:	b510      	push	{r4, lr}
   1dbea:	b082      	sub	sp, #8
   1dbec:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1dbee:	4b0e      	ldr	r3, [pc, #56]	; (1dc28 <sercom_set_gclk_generator+0x40>)
   1dbf0:	781b      	ldrb	r3, [r3, #0]
   1dbf2:	2b00      	cmp	r3, #0
   1dbf4:	d007      	beq.n	1dc06 <sercom_set_gclk_generator+0x1e>
   1dbf6:	2900      	cmp	r1, #0
   1dbf8:	d105      	bne.n	1dc06 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   1dbfa:	4b0b      	ldr	r3, [pc, #44]	; (1dc28 <sercom_set_gclk_generator+0x40>)
   1dbfc:	785b      	ldrb	r3, [r3, #1]
   1dbfe:	4283      	cmp	r3, r0
   1dc00:	d010      	beq.n	1dc24 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1dc02:	201d      	movs	r0, #29
   1dc04:	e00c      	b.n	1dc20 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   1dc06:	a901      	add	r1, sp, #4
   1dc08:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1dc0a:	2013      	movs	r0, #19
   1dc0c:	4b07      	ldr	r3, [pc, #28]	; (1dc2c <sercom_set_gclk_generator+0x44>)
   1dc0e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1dc10:	2013      	movs	r0, #19
   1dc12:	4b07      	ldr	r3, [pc, #28]	; (1dc30 <sercom_set_gclk_generator+0x48>)
   1dc14:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   1dc16:	4b04      	ldr	r3, [pc, #16]	; (1dc28 <sercom_set_gclk_generator+0x40>)
   1dc18:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   1dc1a:	2201      	movs	r2, #1
   1dc1c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   1dc1e:	2000      	movs	r0, #0
}
   1dc20:	b002      	add	sp, #8
   1dc22:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   1dc24:	2000      	movs	r0, #0
   1dc26:	e7fb      	b.n	1dc20 <sercom_set_gclk_generator+0x38>
   1dc28:	20003cfc 	.word	0x20003cfc
   1dc2c:	0001f14d 	.word	0x0001f14d
   1dc30:	0001f0c1 	.word	0x0001f0c1

0001dc34 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   1dc34:	4b40      	ldr	r3, [pc, #256]	; (1dd38 <_sercom_get_default_pad+0x104>)
   1dc36:	4298      	cmp	r0, r3
   1dc38:	d031      	beq.n	1dc9e <_sercom_get_default_pad+0x6a>
   1dc3a:	d90a      	bls.n	1dc52 <_sercom_get_default_pad+0x1e>
   1dc3c:	4b3f      	ldr	r3, [pc, #252]	; (1dd3c <_sercom_get_default_pad+0x108>)
   1dc3e:	4298      	cmp	r0, r3
   1dc40:	d04d      	beq.n	1dcde <_sercom_get_default_pad+0xaa>
   1dc42:	4b3f      	ldr	r3, [pc, #252]	; (1dd40 <_sercom_get_default_pad+0x10c>)
   1dc44:	4298      	cmp	r0, r3
   1dc46:	d05a      	beq.n	1dcfe <_sercom_get_default_pad+0xca>
   1dc48:	4b3e      	ldr	r3, [pc, #248]	; (1dd44 <_sercom_get_default_pad+0x110>)
   1dc4a:	4298      	cmp	r0, r3
   1dc4c:	d037      	beq.n	1dcbe <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1dc4e:	2000      	movs	r0, #0
}
   1dc50:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   1dc52:	4b3d      	ldr	r3, [pc, #244]	; (1dd48 <_sercom_get_default_pad+0x114>)
   1dc54:	4298      	cmp	r0, r3
   1dc56:	d00c      	beq.n	1dc72 <_sercom_get_default_pad+0x3e>
   1dc58:	4b3c      	ldr	r3, [pc, #240]	; (1dd4c <_sercom_get_default_pad+0x118>)
   1dc5a:	4298      	cmp	r0, r3
   1dc5c:	d1f7      	bne.n	1dc4e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc5e:	2901      	cmp	r1, #1
   1dc60:	d017      	beq.n	1dc92 <_sercom_get_default_pad+0x5e>
   1dc62:	2900      	cmp	r1, #0
   1dc64:	d05d      	beq.n	1dd22 <_sercom_get_default_pad+0xee>
   1dc66:	2902      	cmp	r1, #2
   1dc68:	d015      	beq.n	1dc96 <_sercom_get_default_pad+0x62>
   1dc6a:	2903      	cmp	r1, #3
   1dc6c:	d015      	beq.n	1dc9a <_sercom_get_default_pad+0x66>
	return 0;
   1dc6e:	2000      	movs	r0, #0
   1dc70:	e7ee      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc72:	2901      	cmp	r1, #1
   1dc74:	d007      	beq.n	1dc86 <_sercom_get_default_pad+0x52>
   1dc76:	2900      	cmp	r1, #0
   1dc78:	d051      	beq.n	1dd1e <_sercom_get_default_pad+0xea>
   1dc7a:	2902      	cmp	r1, #2
   1dc7c:	d005      	beq.n	1dc8a <_sercom_get_default_pad+0x56>
   1dc7e:	2903      	cmp	r1, #3
   1dc80:	d005      	beq.n	1dc8e <_sercom_get_default_pad+0x5a>
	return 0;
   1dc82:	2000      	movs	r0, #0
   1dc84:	e7e4      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc86:	4832      	ldr	r0, [pc, #200]	; (1dd50 <_sercom_get_default_pad+0x11c>)
   1dc88:	e7e2      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dc8a:	4832      	ldr	r0, [pc, #200]	; (1dd54 <_sercom_get_default_pad+0x120>)
   1dc8c:	e7e0      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dc8e:	4832      	ldr	r0, [pc, #200]	; (1dd58 <_sercom_get_default_pad+0x124>)
   1dc90:	e7de      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dc92:	4832      	ldr	r0, [pc, #200]	; (1dd5c <_sercom_get_default_pad+0x128>)
   1dc94:	e7dc      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dc96:	4832      	ldr	r0, [pc, #200]	; (1dd60 <_sercom_get_default_pad+0x12c>)
   1dc98:	e7da      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dc9a:	4832      	ldr	r0, [pc, #200]	; (1dd64 <_sercom_get_default_pad+0x130>)
   1dc9c:	e7d8      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dc9e:	2901      	cmp	r1, #1
   1dca0:	d007      	beq.n	1dcb2 <_sercom_get_default_pad+0x7e>
   1dca2:	2900      	cmp	r1, #0
   1dca4:	d03f      	beq.n	1dd26 <_sercom_get_default_pad+0xf2>
   1dca6:	2902      	cmp	r1, #2
   1dca8:	d005      	beq.n	1dcb6 <_sercom_get_default_pad+0x82>
   1dcaa:	2903      	cmp	r1, #3
   1dcac:	d005      	beq.n	1dcba <_sercom_get_default_pad+0x86>
	return 0;
   1dcae:	2000      	movs	r0, #0
   1dcb0:	e7ce      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcb2:	482d      	ldr	r0, [pc, #180]	; (1dd68 <_sercom_get_default_pad+0x134>)
   1dcb4:	e7cc      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcb6:	482d      	ldr	r0, [pc, #180]	; (1dd6c <_sercom_get_default_pad+0x138>)
   1dcb8:	e7ca      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcba:	482d      	ldr	r0, [pc, #180]	; (1dd70 <_sercom_get_default_pad+0x13c>)
   1dcbc:	e7c8      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcbe:	2901      	cmp	r1, #1
   1dcc0:	d007      	beq.n	1dcd2 <_sercom_get_default_pad+0x9e>
   1dcc2:	2900      	cmp	r1, #0
   1dcc4:	d031      	beq.n	1dd2a <_sercom_get_default_pad+0xf6>
   1dcc6:	2902      	cmp	r1, #2
   1dcc8:	d005      	beq.n	1dcd6 <_sercom_get_default_pad+0xa2>
   1dcca:	2903      	cmp	r1, #3
   1dccc:	d005      	beq.n	1dcda <_sercom_get_default_pad+0xa6>
	return 0;
   1dcce:	2000      	movs	r0, #0
   1dcd0:	e7be      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcd2:	4828      	ldr	r0, [pc, #160]	; (1dd74 <_sercom_get_default_pad+0x140>)
   1dcd4:	e7bc      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcd6:	4828      	ldr	r0, [pc, #160]	; (1dd78 <_sercom_get_default_pad+0x144>)
   1dcd8:	e7ba      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcda:	4828      	ldr	r0, [pc, #160]	; (1dd7c <_sercom_get_default_pad+0x148>)
   1dcdc:	e7b8      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcde:	2901      	cmp	r1, #1
   1dce0:	d007      	beq.n	1dcf2 <_sercom_get_default_pad+0xbe>
   1dce2:	2900      	cmp	r1, #0
   1dce4:	d023      	beq.n	1dd2e <_sercom_get_default_pad+0xfa>
   1dce6:	2902      	cmp	r1, #2
   1dce8:	d005      	beq.n	1dcf6 <_sercom_get_default_pad+0xc2>
   1dcea:	2903      	cmp	r1, #3
   1dcec:	d005      	beq.n	1dcfa <_sercom_get_default_pad+0xc6>
	return 0;
   1dcee:	2000      	movs	r0, #0
   1dcf0:	e7ae      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcf2:	4823      	ldr	r0, [pc, #140]	; (1dd80 <_sercom_get_default_pad+0x14c>)
   1dcf4:	e7ac      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcf6:	4823      	ldr	r0, [pc, #140]	; (1dd84 <_sercom_get_default_pad+0x150>)
   1dcf8:	e7aa      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcfa:	4823      	ldr	r0, [pc, #140]	; (1dd88 <_sercom_get_default_pad+0x154>)
   1dcfc:	e7a8      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dcfe:	2901      	cmp	r1, #1
   1dd00:	d007      	beq.n	1dd12 <_sercom_get_default_pad+0xde>
   1dd02:	2900      	cmp	r1, #0
   1dd04:	d015      	beq.n	1dd32 <_sercom_get_default_pad+0xfe>
   1dd06:	2902      	cmp	r1, #2
   1dd08:	d005      	beq.n	1dd16 <_sercom_get_default_pad+0xe2>
   1dd0a:	2903      	cmp	r1, #3
   1dd0c:	d005      	beq.n	1dd1a <_sercom_get_default_pad+0xe6>
	return 0;
   1dd0e:	2000      	movs	r0, #0
   1dd10:	e79e      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dd12:	481e      	ldr	r0, [pc, #120]	; (1dd8c <_sercom_get_default_pad+0x158>)
   1dd14:	e79c      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd16:	481e      	ldr	r0, [pc, #120]	; (1dd90 <_sercom_get_default_pad+0x15c>)
   1dd18:	e79a      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd1a:	481e      	ldr	r0, [pc, #120]	; (1dd94 <_sercom_get_default_pad+0x160>)
   1dd1c:	e798      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd1e:	481e      	ldr	r0, [pc, #120]	; (1dd98 <_sercom_get_default_pad+0x164>)
   1dd20:	e796      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd22:	2003      	movs	r0, #3
   1dd24:	e794      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd26:	481d      	ldr	r0, [pc, #116]	; (1dd9c <_sercom_get_default_pad+0x168>)
   1dd28:	e792      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd2a:	481d      	ldr	r0, [pc, #116]	; (1dda0 <_sercom_get_default_pad+0x16c>)
   1dd2c:	e790      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd2e:	481d      	ldr	r0, [pc, #116]	; (1dda4 <_sercom_get_default_pad+0x170>)
   1dd30:	e78e      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd32:	481d      	ldr	r0, [pc, #116]	; (1dda8 <_sercom_get_default_pad+0x174>)
   1dd34:	e78c      	b.n	1dc50 <_sercom_get_default_pad+0x1c>
   1dd36:	46c0      	nop			; (mov r8, r8)
   1dd38:	42001000 	.word	0x42001000
   1dd3c:	42001800 	.word	0x42001800
   1dd40:	42001c00 	.word	0x42001c00
   1dd44:	42001400 	.word	0x42001400
   1dd48:	42000800 	.word	0x42000800
   1dd4c:	42000c00 	.word	0x42000c00
   1dd50:	00050003 	.word	0x00050003
   1dd54:	00060003 	.word	0x00060003
   1dd58:	00070003 	.word	0x00070003
   1dd5c:	00010003 	.word	0x00010003
   1dd60:	001e0003 	.word	0x001e0003
   1dd64:	001f0003 	.word	0x001f0003
   1dd68:	00090003 	.word	0x00090003
   1dd6c:	000a0003 	.word	0x000a0003
   1dd70:	000b0003 	.word	0x000b0003
   1dd74:	00110003 	.word	0x00110003
   1dd78:	00120003 	.word	0x00120003
   1dd7c:	00130003 	.word	0x00130003
   1dd80:	000d0003 	.word	0x000d0003
   1dd84:	000e0003 	.word	0x000e0003
   1dd88:	000f0003 	.word	0x000f0003
   1dd8c:	00170003 	.word	0x00170003
   1dd90:	00180003 	.word	0x00180003
   1dd94:	00190003 	.word	0x00190003
   1dd98:	00040003 	.word	0x00040003
   1dd9c:	00080003 	.word	0x00080003
   1dda0:	00100003 	.word	0x00100003
   1dda4:	000c0003 	.word	0x000c0003
   1dda8:	00160003 	.word	0x00160003

0001ddac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1ddac:	b530      	push	{r4, r5, lr}
   1ddae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1ddb0:	4b0b      	ldr	r3, [pc, #44]	; (1dde0 <_sercom_get_sercom_inst_index+0x34>)
   1ddb2:	466a      	mov	r2, sp
   1ddb4:	cb32      	ldmia	r3!, {r1, r4, r5}
   1ddb6:	c232      	stmia	r2!, {r1, r4, r5}
   1ddb8:	cb32      	ldmia	r3!, {r1, r4, r5}
   1ddba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1ddbc:	9b00      	ldr	r3, [sp, #0]
   1ddbe:	4283      	cmp	r3, r0
   1ddc0:	d00b      	beq.n	1ddda <_sercom_get_sercom_inst_index+0x2e>
   1ddc2:	2301      	movs	r3, #1
   1ddc4:	009a      	lsls	r2, r3, #2
   1ddc6:	4669      	mov	r1, sp
   1ddc8:	5852      	ldr	r2, [r2, r1]
   1ddca:	4282      	cmp	r2, r0
   1ddcc:	d006      	beq.n	1dddc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ddce:	3301      	adds	r3, #1
   1ddd0:	2b06      	cmp	r3, #6
   1ddd2:	d1f7      	bne.n	1ddc4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1ddd4:	2000      	movs	r0, #0
}
   1ddd6:	b007      	add	sp, #28
   1ddd8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ddda:	2300      	movs	r3, #0
			return i;
   1dddc:	b2d8      	uxtb	r0, r3
   1ddde:	e7fa      	b.n	1ddd6 <_sercom_get_sercom_inst_index+0x2a>
   1dde0:	0002a36c 	.word	0x0002a36c

0001dde4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   1dde4:	4770      	bx	lr
	...

0001dde8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1dde8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1ddea:	4b0a      	ldr	r3, [pc, #40]	; (1de14 <_sercom_set_handler+0x2c>)
   1ddec:	781b      	ldrb	r3, [r3, #0]
   1ddee:	2b00      	cmp	r3, #0
   1ddf0:	d10c      	bne.n	1de0c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1ddf2:	4f09      	ldr	r7, [pc, #36]	; (1de18 <_sercom_set_handler+0x30>)
   1ddf4:	4e09      	ldr	r6, [pc, #36]	; (1de1c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   1ddf6:	4d0a      	ldr	r5, [pc, #40]	; (1de20 <_sercom_set_handler+0x38>)
   1ddf8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1ddfa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   1ddfc:	195a      	adds	r2, r3, r5
   1ddfe:	6014      	str	r4, [r2, #0]
   1de00:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1de02:	2b18      	cmp	r3, #24
   1de04:	d1f9      	bne.n	1ddfa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   1de06:	2201      	movs	r2, #1
   1de08:	4b02      	ldr	r3, [pc, #8]	; (1de14 <_sercom_set_handler+0x2c>)
   1de0a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1de0c:	0080      	lsls	r0, r0, #2
   1de0e:	4b02      	ldr	r3, [pc, #8]	; (1de18 <_sercom_set_handler+0x30>)
   1de10:	50c1      	str	r1, [r0, r3]
}
   1de12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de14:	20003cfe 	.word	0x20003cfe
   1de18:	20003d00 	.word	0x20003d00
   1de1c:	0001dde5 	.word	0x0001dde5
   1de20:	200055c0 	.word	0x200055c0

0001de24 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1de24:	b500      	push	{lr}
   1de26:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1de28:	2309      	movs	r3, #9
   1de2a:	466a      	mov	r2, sp
   1de2c:	7013      	strb	r3, [r2, #0]
   1de2e:	3301      	adds	r3, #1
   1de30:	7053      	strb	r3, [r2, #1]
   1de32:	3301      	adds	r3, #1
   1de34:	7093      	strb	r3, [r2, #2]
   1de36:	3301      	adds	r3, #1
   1de38:	70d3      	strb	r3, [r2, #3]
   1de3a:	3301      	adds	r3, #1
   1de3c:	7113      	strb	r3, [r2, #4]
   1de3e:	3301      	adds	r3, #1
   1de40:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1de42:	4b03      	ldr	r3, [pc, #12]	; (1de50 <_sercom_get_interrupt_vector+0x2c>)
   1de44:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1de46:	466b      	mov	r3, sp
   1de48:	5618      	ldrsb	r0, [r3, r0]
}
   1de4a:	b003      	add	sp, #12
   1de4c:	bd00      	pop	{pc}
   1de4e:	46c0      	nop			; (mov r8, r8)
   1de50:	0001ddad 	.word	0x0001ddad

0001de54 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   1de54:	b510      	push	{r4, lr}
   1de56:	4b02      	ldr	r3, [pc, #8]	; (1de60 <SERCOM0_Handler+0xc>)
   1de58:	681b      	ldr	r3, [r3, #0]
   1de5a:	2000      	movs	r0, #0
   1de5c:	4798      	blx	r3
   1de5e:	bd10      	pop	{r4, pc}
   1de60:	20003d00 	.word	0x20003d00

0001de64 <SERCOM1_Handler>:
   1de64:	b510      	push	{r4, lr}
   1de66:	4b02      	ldr	r3, [pc, #8]	; (1de70 <SERCOM1_Handler+0xc>)
   1de68:	685b      	ldr	r3, [r3, #4]
   1de6a:	2001      	movs	r0, #1
   1de6c:	4798      	blx	r3
   1de6e:	bd10      	pop	{r4, pc}
   1de70:	20003d00 	.word	0x20003d00

0001de74 <SERCOM2_Handler>:
   1de74:	b510      	push	{r4, lr}
   1de76:	4b02      	ldr	r3, [pc, #8]	; (1de80 <SERCOM2_Handler+0xc>)
   1de78:	689b      	ldr	r3, [r3, #8]
   1de7a:	2002      	movs	r0, #2
   1de7c:	4798      	blx	r3
   1de7e:	bd10      	pop	{r4, pc}
   1de80:	20003d00 	.word	0x20003d00

0001de84 <SERCOM3_Handler>:
   1de84:	b510      	push	{r4, lr}
   1de86:	4b02      	ldr	r3, [pc, #8]	; (1de90 <SERCOM3_Handler+0xc>)
   1de88:	68db      	ldr	r3, [r3, #12]
   1de8a:	2003      	movs	r0, #3
   1de8c:	4798      	blx	r3
   1de8e:	bd10      	pop	{r4, pc}
   1de90:	20003d00 	.word	0x20003d00

0001de94 <SERCOM4_Handler>:
   1de94:	b510      	push	{r4, lr}
   1de96:	4b02      	ldr	r3, [pc, #8]	; (1dea0 <SERCOM4_Handler+0xc>)
   1de98:	691b      	ldr	r3, [r3, #16]
   1de9a:	2004      	movs	r0, #4
   1de9c:	4798      	blx	r3
   1de9e:	bd10      	pop	{r4, pc}
   1dea0:	20003d00 	.word	0x20003d00

0001dea4 <SERCOM5_Handler>:
   1dea4:	b510      	push	{r4, lr}
   1dea6:	4b02      	ldr	r3, [pc, #8]	; (1deb0 <SERCOM5_Handler+0xc>)
   1dea8:	695b      	ldr	r3, [r3, #20]
   1deaa:	2005      	movs	r0, #5
   1deac:	4798      	blx	r3
   1deae:	bd10      	pop	{r4, pc}
   1deb0:	20003d00 	.word	0x20003d00

0001deb4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   1deb4:	b570      	push	{r4, r5, r6, lr}
   1deb6:	b082      	sub	sp, #8
   1deb8:	0005      	movs	r5, r0
   1deba:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1debc:	2200      	movs	r2, #0
   1debe:	466b      	mov	r3, sp
   1dec0:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1dec2:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1dec4:	0030      	movs	r0, r6
   1dec6:	4b24      	ldr	r3, [pc, #144]	; (1df58 <spi_set_baudrate+0xa4>)
   1dec8:	4798      	blx	r3
   1deca:	231f      	movs	r3, #31
   1decc:	4018      	ands	r0, r3
   1dece:	3b1e      	subs	r3, #30
   1ded0:	4083      	lsls	r3, r0
   1ded2:	2280      	movs	r2, #128	; 0x80
   1ded4:	4921      	ldr	r1, [pc, #132]	; (1df5c <spi_set_baudrate+0xa8>)
   1ded6:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ded8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1deda:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   1dedc:	2b00      	cmp	r3, #0
   1dede:	d1fc      	bne.n	1deda <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1dee0:	338f      	adds	r3, #143	; 0x8f
   1dee2:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1dee4:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1dee6:	6833      	ldr	r3, [r6, #0]
   1dee8:	2202      	movs	r2, #2
   1deea:	4393      	bics	r3, r2
   1deec:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1deee:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1def0:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   1def2:	2b00      	cmp	r3, #0
   1def4:	d1fc      	bne.n	1def0 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1def6:	4b1a      	ldr	r3, [pc, #104]	; (1df60 <spi_set_baudrate+0xac>)
   1def8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1defa:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1defc:	b2c0      	uxtb	r0, r0
   1defe:	4b19      	ldr	r3, [pc, #100]	; (1df64 <spi_set_baudrate+0xb0>)
   1df00:	4798      	blx	r3
   1df02:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   1df04:	466b      	mov	r3, sp
   1df06:	1d9a      	adds	r2, r3, #6
   1df08:	0020      	movs	r0, r4
   1df0a:	4b17      	ldr	r3, [pc, #92]	; (1df68 <spi_set_baudrate+0xb4>)
   1df0c:	4798      	blx	r3
   1df0e:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   1df10:	d003      	beq.n	1df1a <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   1df12:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   1df14:	0020      	movs	r0, r4
   1df16:	b002      	add	sp, #8
   1df18:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   1df1a:	466b      	mov	r3, sp
   1df1c:	3306      	adds	r3, #6
   1df1e:	781b      	ldrb	r3, [r3, #0]
   1df20:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df22:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df24:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   1df26:	2b00      	cmp	r3, #0
   1df28:	d1fc      	bne.n	1df24 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1df2a:	0030      	movs	r0, r6
   1df2c:	4b0a      	ldr	r3, [pc, #40]	; (1df58 <spi_set_baudrate+0xa4>)
   1df2e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1df30:	231f      	movs	r3, #31
   1df32:	4018      	ands	r0, r3
   1df34:	3b1e      	subs	r3, #30
   1df36:	4083      	lsls	r3, r0
   1df38:	4a08      	ldr	r2, [pc, #32]	; (1df5c <spi_set_baudrate+0xa8>)
   1df3a:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df3c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df3e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1df40:	2b00      	cmp	r3, #0
   1df42:	d1fc      	bne.n	1df3e <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1df44:	6833      	ldr	r3, [r6, #0]
   1df46:	2202      	movs	r2, #2
   1df48:	4313      	orrs	r3, r2
   1df4a:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df4c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df4e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1df50:	2b00      	cmp	r3, #0
   1df52:	d1fc      	bne.n	1df4e <spi_set_baudrate+0x9a>
   1df54:	e7de      	b.n	1df14 <spi_set_baudrate+0x60>
   1df56:	46c0      	nop			; (mov r8, r8)
   1df58:	0001de25 	.word	0x0001de25
   1df5c:	e000e100 	.word	0xe000e100
   1df60:	0001ddad 	.word	0x0001ddad
   1df64:	0001f169 	.word	0x0001f169
   1df68:	0001db2b 	.word	0x0001db2b

0001df6c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df6e:	b08b      	sub	sp, #44	; 0x2c
   1df70:	0005      	movs	r5, r0
   1df72:	000c      	movs	r4, r1
   1df74:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1df76:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1df78:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1df7a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1df7c:	079b      	lsls	r3, r3, #30
   1df7e:	d501      	bpl.n	1df84 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   1df80:	b00b      	add	sp, #44	; 0x2c
   1df82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1df84:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1df86:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1df88:	07db      	lsls	r3, r3, #31
   1df8a:	d4f9      	bmi.n	1df80 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1df8c:	0008      	movs	r0, r1
   1df8e:	4b60      	ldr	r3, [pc, #384]	; (1e110 <spi_init+0x1a4>)
   1df90:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
   1df92:	4a60      	ldr	r2, [pc, #384]	; (1e114 <spi_init+0x1a8>)
   1df94:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1df96:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1df98:	2301      	movs	r3, #1
   1df9a:	40bb      	lsls	r3, r7
   1df9c:	430b      	orrs	r3, r1
   1df9e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1dfa0:	a909      	add	r1, sp, #36	; 0x24
   1dfa2:	2724      	movs	r7, #36	; 0x24
   1dfa4:	5df3      	ldrb	r3, [r6, r7]
   1dfa6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1dfa8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1dfaa:	b2c3      	uxtb	r3, r0
   1dfac:	9301      	str	r3, [sp, #4]
   1dfae:	0018      	movs	r0, r3
   1dfb0:	4b59      	ldr	r3, [pc, #356]	; (1e118 <spi_init+0x1ac>)
   1dfb2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1dfb4:	9801      	ldr	r0, [sp, #4]
   1dfb6:	4b59      	ldr	r3, [pc, #356]	; (1e11c <spi_init+0x1b0>)
   1dfb8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1dfba:	5df0      	ldrb	r0, [r6, r7]
   1dfbc:	2100      	movs	r1, #0
   1dfbe:	4b58      	ldr	r3, [pc, #352]	; (1e120 <spi_init+0x1b4>)
   1dfc0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1dfc2:	7833      	ldrb	r3, [r6, #0]
   1dfc4:	2b01      	cmp	r3, #1
   1dfc6:	d038      	beq.n	1e03a <spi_init+0xce>
   1dfc8:	002b      	movs	r3, r5
   1dfca:	330c      	adds	r3, #12
   1dfcc:	0029      	movs	r1, r5
   1dfce:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   1dfd0:	2200      	movs	r2, #0
   1dfd2:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1dfd4:	428b      	cmp	r3, r1
   1dfd6:	d1fc      	bne.n	1dfd2 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1dfd8:	2300      	movs	r3, #0
   1dfda:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   1dfdc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1dfde:	2400      	movs	r4, #0
   1dfe0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   1dfe2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   1dfe4:	3336      	adds	r3, #54	; 0x36
   1dfe6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1dfe8:	3301      	adds	r3, #1
   1dfea:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   1dfec:	3301      	adds	r3, #1
   1dfee:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   1dff0:	3b35      	subs	r3, #53	; 0x35
   1dff2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   1dff4:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1dff6:	6828      	ldr	r0, [r5, #0]
   1dff8:	4b45      	ldr	r3, [pc, #276]	; (1e110 <spi_init+0x1a4>)
   1dffa:	4798      	blx	r3
   1dffc:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   1dffe:	4949      	ldr	r1, [pc, #292]	; (1e124 <spi_init+0x1b8>)
   1e000:	4b49      	ldr	r3, [pc, #292]	; (1e128 <spi_init+0x1bc>)
   1e002:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e004:	00bf      	lsls	r7, r7, #2
   1e006:	4b49      	ldr	r3, [pc, #292]	; (1e12c <spi_init+0x1c0>)
   1e008:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e00a:	682f      	ldr	r7, [r5, #0]
   1e00c:	ab04      	add	r3, sp, #16
   1e00e:	2280      	movs	r2, #128	; 0x80
   1e010:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e012:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1e014:	3a7f      	subs	r2, #127	; 0x7f
   1e016:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e018:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   1e01a:	7833      	ldrb	r3, [r6, #0]
   1e01c:	2b00      	cmp	r3, #0
   1e01e:	d102      	bne.n	1e026 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e020:	2200      	movs	r2, #0
   1e022:	ab04      	add	r3, sp, #16
   1e024:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e026:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e028:	9305      	str	r3, [sp, #20]
   1e02a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1e02c:	9306      	str	r3, [sp, #24]
   1e02e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e030:	9307      	str	r3, [sp, #28]
   1e032:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e034:	9308      	str	r3, [sp, #32]
   1e036:	2400      	movs	r4, #0
   1e038:	e00b      	b.n	1e052 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1e03a:	6823      	ldr	r3, [r4, #0]
   1e03c:	220c      	movs	r2, #12
   1e03e:	4313      	orrs	r3, r2
   1e040:	6023      	str	r3, [r4, #0]
   1e042:	e7c1      	b.n	1dfc8 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e044:	0038      	movs	r0, r7
   1e046:	4b3a      	ldr	r3, [pc, #232]	; (1e130 <spi_init+0x1c4>)
   1e048:	4798      	blx	r3
   1e04a:	e00a      	b.n	1e062 <spi_init+0xf6>
   1e04c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e04e:	2c04      	cmp	r4, #4
   1e050:	d010      	beq.n	1e074 <spi_init+0x108>
   1e052:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e054:	00a3      	lsls	r3, r4, #2
   1e056:	aa02      	add	r2, sp, #8
   1e058:	200c      	movs	r0, #12
   1e05a:	1812      	adds	r2, r2, r0
   1e05c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e05e:	2800      	cmp	r0, #0
   1e060:	d0f0      	beq.n	1e044 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   1e062:	1c43      	adds	r3, r0, #1
   1e064:	d0f2      	beq.n	1e04c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e066:	a904      	add	r1, sp, #16
   1e068:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e06a:	0c00      	lsrs	r0, r0, #16
   1e06c:	b2c0      	uxtb	r0, r0
   1e06e:	4b31      	ldr	r3, [pc, #196]	; (1e134 <spi_init+0x1c8>)
   1e070:	4798      	blx	r3
   1e072:	e7eb      	b.n	1e04c <spi_init+0xe0>
	module->mode             = config->mode;
   1e074:	7833      	ldrb	r3, [r6, #0]
   1e076:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1e078:	7c33      	ldrb	r3, [r6, #16]
   1e07a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1e07c:	7cb3      	ldrb	r3, [r6, #18]
   1e07e:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   1e080:	7d33      	ldrb	r3, [r6, #20]
   1e082:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   1e084:	2200      	movs	r2, #0
   1e086:	ab02      	add	r3, sp, #8
   1e088:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1e08a:	7833      	ldrb	r3, [r6, #0]
   1e08c:	2b01      	cmp	r3, #1
   1e08e:	d028      	beq.n	1e0e2 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   1e090:	6873      	ldr	r3, [r6, #4]
   1e092:	68b2      	ldr	r2, [r6, #8]
   1e094:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1e096:	68f2      	ldr	r2, [r6, #12]
   1e098:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1e09a:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   1e09c:	7c72      	ldrb	r2, [r6, #17]
   1e09e:	2a00      	cmp	r2, #0
   1e0a0:	d103      	bne.n	1e0aa <spi_init+0x13e>
   1e0a2:	4a25      	ldr	r2, [pc, #148]	; (1e138 <spi_init+0x1cc>)
   1e0a4:	7892      	ldrb	r2, [r2, #2]
   1e0a6:	0792      	lsls	r2, r2, #30
   1e0a8:	d501      	bpl.n	1e0ae <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1e0aa:	2280      	movs	r2, #128	; 0x80
   1e0ac:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   1e0ae:	7cb2      	ldrb	r2, [r6, #18]
   1e0b0:	2a00      	cmp	r2, #0
   1e0b2:	d002      	beq.n	1e0ba <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1e0b4:	2280      	movs	r2, #128	; 0x80
   1e0b6:	0292      	lsls	r2, r2, #10
   1e0b8:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1e0ba:	7cf2      	ldrb	r2, [r6, #19]
   1e0bc:	2a00      	cmp	r2, #0
   1e0be:	d002      	beq.n	1e0c6 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   1e0c0:	2280      	movs	r2, #128	; 0x80
   1e0c2:	0092      	lsls	r2, r2, #2
   1e0c4:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1e0c6:	7d32      	ldrb	r2, [r6, #20]
   1e0c8:	2a00      	cmp	r2, #0
   1e0ca:	d002      	beq.n	1e0d2 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1e0cc:	2280      	movs	r2, #128	; 0x80
   1e0ce:	0192      	lsls	r2, r2, #6
   1e0d0:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   1e0d2:	683a      	ldr	r2, [r7, #0]
   1e0d4:	4313      	orrs	r3, r2
   1e0d6:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1e0d8:	687b      	ldr	r3, [r7, #4]
   1e0da:	430b      	orrs	r3, r1
   1e0dc:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   1e0de:	2000      	movs	r0, #0
   1e0e0:	e74e      	b.n	1df80 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e0e2:	6828      	ldr	r0, [r5, #0]
   1e0e4:	4b0a      	ldr	r3, [pc, #40]	; (1e110 <spi_init+0x1a4>)
   1e0e6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e0e8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1e0ea:	b2c0      	uxtb	r0, r0
   1e0ec:	4b13      	ldr	r3, [pc, #76]	; (1e13c <spi_init+0x1d0>)
   1e0ee:	4798      	blx	r3
   1e0f0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   1e0f2:	ab02      	add	r3, sp, #8
   1e0f4:	1d9a      	adds	r2, r3, #6
   1e0f6:	69b0      	ldr	r0, [r6, #24]
   1e0f8:	4b11      	ldr	r3, [pc, #68]	; (1e140 <spi_init+0x1d4>)
   1e0fa:	4798      	blx	r3
   1e0fc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   1e0fe:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   1e100:	2b00      	cmp	r3, #0
   1e102:	d000      	beq.n	1e106 <spi_init+0x19a>
   1e104:	e73c      	b.n	1df80 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   1e106:	ab02      	add	r3, sp, #8
   1e108:	3306      	adds	r3, #6
   1e10a:	781b      	ldrb	r3, [r3, #0]
   1e10c:	733b      	strb	r3, [r7, #12]
   1e10e:	e7bf      	b.n	1e090 <spi_init+0x124>
   1e110:	0001ddad 	.word	0x0001ddad
   1e114:	40000400 	.word	0x40000400
   1e118:	0001f14d 	.word	0x0001f14d
   1e11c:	0001f0c1 	.word	0x0001f0c1
   1e120:	0001dbe9 	.word	0x0001dbe9
   1e124:	0001e3d9 	.word	0x0001e3d9
   1e128:	0001dde9 	.word	0x0001dde9
   1e12c:	200055c0 	.word	0x200055c0
   1e130:	0001dc35 	.word	0x0001dc35
   1e134:	0001f275 	.word	0x0001f275
   1e138:	41002000 	.word	0x41002000
   1e13c:	0001f169 	.word	0x0001f169
   1e140:	0001db2b 	.word	0x0001db2b

0001e144 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   1e144:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e146:	46d6      	mov	lr, sl
   1e148:	4647      	mov	r7, r8
   1e14a:	b580      	push	{r7, lr}
   1e14c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e14e:	2438      	movs	r4, #56	; 0x38
   1e150:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e152:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e154:	2d05      	cmp	r5, #5
   1e156:	d002      	beq.n	1e15e <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e158:	3412      	adds	r4, #18
	if (length == 0) {
   1e15a:	2a00      	cmp	r2, #0
   1e15c:	d105      	bne.n	1e16a <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1e15e:	0020      	movs	r0, r4
   1e160:	b003      	add	sp, #12
   1e162:	bc0c      	pop	{r2, r3}
   1e164:	4690      	mov	r8, r2
   1e166:	469a      	mov	sl, r3
   1e168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1e16a:	79c4      	ldrb	r4, [r0, #7]
   1e16c:	2c00      	cmp	r4, #0
   1e16e:	d144      	bne.n	1e1fa <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   1e170:	341c      	adds	r4, #28
   1e172:	e7f4      	b.n	1e15e <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e174:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e176:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1e178:	423c      	tst	r4, r7
   1e17a:	d0fc      	beq.n	1e176 <spi_read_buffer_wait+0x32>
   1e17c:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1e17e:	423c      	tst	r4, r7
   1e180:	d01a      	beq.n	1e1b8 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e182:	4644      	mov	r4, r8
   1e184:	62ac      	str	r4, [r5, #40]	; 0x28
   1e186:	e017      	b.n	1e1b8 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e188:	7984      	ldrb	r4, [r0, #6]
   1e18a:	2c01      	cmp	r4, #1
   1e18c:	d026      	beq.n	1e1dc <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e18e:	6aad      	ldr	r5, [r5, #40]	; 0x28
   1e190:	b2ec      	uxtb	r4, r5
   1e192:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   1e194:	9c01      	ldr	r4, [sp, #4]
   1e196:	2c00      	cmp	r4, #0
   1e198:	d13a      	bne.n	1e210 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1e19a:	1c75      	adds	r5, r6, #1
   1e19c:	b2ad      	uxth	r5, r5
   1e19e:	4664      	mov	r4, ip
   1e1a0:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e1a2:	7984      	ldrb	r4, [r0, #6]
   1e1a4:	2c01      	cmp	r4, #1
   1e1a6:	d01e      	beq.n	1e1e6 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1e1a8:	002e      	movs	r6, r5
	while (length--) {
   1e1aa:	3a01      	subs	r2, #1
   1e1ac:	b292      	uxth	r2, r2
   1e1ae:	4552      	cmp	r2, sl
   1e1b0:	d01f      	beq.n	1e1f2 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   1e1b2:	7944      	ldrb	r4, [r0, #5]
   1e1b4:	2c01      	cmp	r4, #1
   1e1b6:	d0dd      	beq.n	1e174 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e1b8:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e1ba:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   1e1bc:	421c      	tst	r4, r3
   1e1be:	d0fc      	beq.n	1e1ba <spi_read_buffer_wait+0x76>
   1e1c0:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   1e1c2:	421c      	tst	r4, r3
   1e1c4:	d017      	beq.n	1e1f6 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e1c6:	8b6c      	ldrh	r4, [r5, #26]
   1e1c8:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1e1ca:	2400      	movs	r4, #0
   1e1cc:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e1ce:	4664      	mov	r4, ip
   1e1d0:	421c      	tst	r4, r3
   1e1d2:	d0d9      	beq.n	1e188 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e1d4:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1e1d6:	241e      	movs	r4, #30
   1e1d8:	9401      	str	r4, [sp, #4]
   1e1da:	e7d5      	b.n	1e188 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e1dc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1e1de:	05e4      	lsls	r4, r4, #23
   1e1e0:	0de4      	lsrs	r4, r4, #23
   1e1e2:	46a4      	mov	ip, r4
   1e1e4:	e7d6      	b.n	1e194 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1e1e6:	3602      	adds	r6, #2
   1e1e8:	b2b6      	uxth	r6, r6
   1e1ea:	4664      	mov	r4, ip
   1e1ec:	0a24      	lsrs	r4, r4, #8
   1e1ee:	554c      	strb	r4, [r1, r5]
   1e1f0:	e7db      	b.n	1e1aa <spi_read_buffer_wait+0x66>
   1e1f2:	9c01      	ldr	r4, [sp, #4]
   1e1f4:	e7b3      	b.n	1e15e <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   1e1f6:	2410      	movs	r4, #16
   1e1f8:	e7b1      	b.n	1e15e <spi_read_buffer_wait+0x1a>
	while (length--) {
   1e1fa:	3a01      	subs	r2, #1
   1e1fc:	b292      	uxth	r2, r2
   1e1fe:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   1e200:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e202:	05db      	lsls	r3, r3, #23
   1e204:	0ddb      	lsrs	r3, r3, #23
   1e206:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   1e208:	2304      	movs	r3, #4
	while (length--) {
   1e20a:	4c02      	ldr	r4, [pc, #8]	; (1e214 <spi_read_buffer_wait+0xd0>)
   1e20c:	46a2      	mov	sl, r4
   1e20e:	e7d0      	b.n	1e1b2 <spi_read_buffer_wait+0x6e>
   1e210:	9c01      	ldr	r4, [sp, #4]
   1e212:	e7a4      	b.n	1e15e <spi_read_buffer_wait+0x1a>
   1e214:	0000ffff 	.word	0x0000ffff

0001e218 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1e218:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1e21a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e21c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   1e21e:	2c01      	cmp	r4, #1
   1e220:	d001      	beq.n	1e226 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   1e222:	0018      	movs	r0, r3
   1e224:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   1e226:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   1e228:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   1e22a:	2c00      	cmp	r4, #0
   1e22c:	d1f9      	bne.n	1e222 <spi_select_slave+0xa>
		if (select) {
   1e22e:	2a00      	cmp	r2, #0
   1e230:	d058      	beq.n	1e2e4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   1e232:	784b      	ldrb	r3, [r1, #1]
   1e234:	2b00      	cmp	r3, #0
   1e236:	d044      	beq.n	1e2c2 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e238:	6803      	ldr	r3, [r0, #0]
   1e23a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   1e23c:	07db      	lsls	r3, r3, #31
   1e23e:	d410      	bmi.n	1e262 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   1e240:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   1e242:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   1e244:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e246:	2900      	cmp	r1, #0
   1e248:	d104      	bne.n	1e254 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   1e24a:	0953      	lsrs	r3, r2, #5
   1e24c:	01db      	lsls	r3, r3, #7
   1e24e:	492e      	ldr	r1, [pc, #184]	; (1e308 <spi_select_slave+0xf0>)
   1e250:	468c      	mov	ip, r1
   1e252:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e254:	211f      	movs	r1, #31
   1e256:	4011      	ands	r1, r2
   1e258:	2201      	movs	r2, #1
   1e25a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e25c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   1e25e:	2305      	movs	r3, #5
   1e260:	e7df      	b.n	1e222 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e262:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e264:	09d4      	lsrs	r4, r2, #7
		return NULL;
   1e266:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e268:	2c00      	cmp	r4, #0
   1e26a:	d104      	bne.n	1e276 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   1e26c:	0953      	lsrs	r3, r2, #5
   1e26e:	01db      	lsls	r3, r3, #7
   1e270:	4c25      	ldr	r4, [pc, #148]	; (1e308 <spi_select_slave+0xf0>)
   1e272:	46a4      	mov	ip, r4
   1e274:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e276:	241f      	movs	r4, #31
   1e278:	4014      	ands	r4, r2
   1e27a:	2201      	movs	r2, #1
   1e27c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
   1e27e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e280:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e282:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1e284:	07d2      	lsls	r2, r2, #31
   1e286:	d501      	bpl.n	1e28c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e288:	788a      	ldrb	r2, [r1, #2]
   1e28a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   1e28c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   1e28e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   1e290:	2a00      	cmp	r2, #0
   1e292:	d1c6      	bne.n	1e222 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e294:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1e296:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e298:	7e13      	ldrb	r3, [r2, #24]
   1e29a:	420b      	tst	r3, r1
   1e29c:	d0fc      	beq.n	1e298 <spi_select_slave+0x80>
   1e29e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   1e2a0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   1e2a2:	0749      	lsls	r1, r1, #29
   1e2a4:	d5bd      	bpl.n	1e222 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e2a6:	8b53      	ldrh	r3, [r2, #26]
   1e2a8:	075b      	lsls	r3, r3, #29
   1e2aa:	d501      	bpl.n	1e2b0 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e2ac:	2304      	movs	r3, #4
   1e2ae:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e2b0:	7983      	ldrb	r3, [r0, #6]
   1e2b2:	2b01      	cmp	r3, #1
   1e2b4:	d002      	beq.n	1e2bc <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e2b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e2b8:	2300      	movs	r3, #0
   1e2ba:	e7b2      	b.n	1e222 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e2bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e2be:	2300      	movs	r3, #0
   1e2c0:	e7af      	b.n	1e222 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e2c2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e2c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e2c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e2c8:	2900      	cmp	r1, #0
   1e2ca:	d104      	bne.n	1e2d6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   1e2cc:	0953      	lsrs	r3, r2, #5
   1e2ce:	01db      	lsls	r3, r3, #7
   1e2d0:	490d      	ldr	r1, [pc, #52]	; (1e308 <spi_select_slave+0xf0>)
   1e2d2:	468c      	mov	ip, r1
   1e2d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e2d6:	211f      	movs	r1, #31
   1e2d8:	4011      	ands	r1, r2
   1e2da:	2201      	movs	r2, #1
   1e2dc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   1e2de:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   1e2e0:	2300      	movs	r3, #0
   1e2e2:	e79e      	b.n	1e222 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   1e2e4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e2e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e2e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e2ea:	2900      	cmp	r1, #0
   1e2ec:	d104      	bne.n	1e2f8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   1e2ee:	0953      	lsrs	r3, r2, #5
   1e2f0:	01db      	lsls	r3, r3, #7
   1e2f2:	4905      	ldr	r1, [pc, #20]	; (1e308 <spi_select_slave+0xf0>)
   1e2f4:	468c      	mov	ip, r1
   1e2f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e2f8:	211f      	movs	r1, #31
   1e2fa:	4011      	ands	r1, r2
   1e2fc:	2201      	movs	r2, #1
   1e2fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e300:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   1e302:	2300      	movs	r3, #0
   1e304:	e78d      	b.n	1e222 <spi_select_slave+0xa>
   1e306:	46c0      	nop			; (mov r8, r8)
   1e308:	41004400 	.word	0x41004400

0001e30c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   1e30c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e30e:	46de      	mov	lr, fp
   1e310:	4657      	mov	r7, sl
   1e312:	464e      	mov	r6, r9
   1e314:	4645      	mov	r5, r8
   1e316:	b5e0      	push	{r5, r6, r7, lr}
   1e318:	b083      	sub	sp, #12
   1e31a:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e31c:	2338      	movs	r3, #56	; 0x38
   1e31e:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e320:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e322:	2c05      	cmp	r4, #5
   1e324:	d002      	beq.n	1e32c <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e326:	3312      	adds	r3, #18
	if (length == 0) {
   1e328:	2a00      	cmp	r2, #0
   1e32a:	d14b      	bne.n	1e3c4 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   1e32c:	0018      	movs	r0, r3
   1e32e:	b003      	add	sp, #12
   1e330:	bc3c      	pop	{r2, r3, r4, r5}
   1e332:	4690      	mov	r8, r2
   1e334:	4699      	mov	r9, r3
   1e336:	46a2      	mov	sl, r4
   1e338:	46ab      	mov	fp, r5
   1e33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   1e33c:	3702      	adds	r7, #2
   1e33e:	b2bf      	uxth	r7, r7
   1e340:	4641      	mov	r1, r8
   1e342:	4653      	mov	r3, sl
   1e344:	5c59      	ldrb	r1, [r3, r1]
   1e346:	0209      	lsls	r1, r1, #8
   1e348:	465b      	mov	r3, fp
   1e34a:	430b      	orrs	r3, r1
   1e34c:	e018      	b.n	1e380 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e34e:	7983      	ldrb	r3, [r0, #6]
   1e350:	2b01      	cmp	r3, #1
   1e352:	d02a      	beq.n	1e3aa <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e354:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1e356:	3e01      	subs	r6, #1
   1e358:	b2b6      	uxth	r6, r6
   1e35a:	4566      	cmp	r6, ip
   1e35c:	d027      	beq.n	1e3ae <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e35e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e360:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   1e362:	4223      	tst	r3, r4
   1e364:	d0fc      	beq.n	1e360 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e366:	1c7b      	adds	r3, r7, #1
   1e368:	b29b      	uxth	r3, r3
   1e36a:	4698      	mov	r8, r3
   1e36c:	4653      	mov	r3, sl
   1e36e:	5ddb      	ldrb	r3, [r3, r7]
   1e370:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e372:	7981      	ldrb	r1, [r0, #6]
   1e374:	2901      	cmp	r1, #1
   1e376:	d0e1      	beq.n	1e33c <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e378:	4669      	mov	r1, sp
   1e37a:	80cb      	strh	r3, [r1, #6]
   1e37c:	88cb      	ldrh	r3, [r1, #6]
   1e37e:	4647      	mov	r7, r8
   1e380:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1e382:	4221      	tst	r1, r4
   1e384:	d002      	beq.n	1e38c <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e386:	05db      	lsls	r3, r3, #23
   1e388:	0ddb      	lsrs	r3, r3, #23
   1e38a:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   1e38c:	79c3      	ldrb	r3, [r0, #7]
   1e38e:	2b00      	cmp	r3, #0
   1e390:	d0e1      	beq.n	1e356 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e392:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e394:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1e396:	422b      	tst	r3, r5
   1e398:	d0fc      	beq.n	1e394 <spi_write_buffer_wait+0x88>
   1e39a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1e39c:	422b      	tst	r3, r5
   1e39e:	d0da      	beq.n	1e356 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e3a0:	8b53      	ldrh	r3, [r2, #26]
   1e3a2:	422b      	tst	r3, r5
   1e3a4:	d0d3      	beq.n	1e34e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e3a6:	8355      	strh	r5, [r2, #26]
   1e3a8:	e7d1      	b.n	1e34e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e3aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e3ac:	e7d3      	b.n	1e356 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   1e3ae:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   1e3b0:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   1e3b2:	2a01      	cmp	r2, #1
   1e3b4:	d1ba      	bne.n	1e32c <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3b6:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1e3b8:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1e3ba:	7e0b      	ldrb	r3, [r1, #24]
   1e3bc:	4213      	tst	r3, r2
   1e3be:	d0fc      	beq.n	1e3ba <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   1e3c0:	2300      	movs	r3, #0
   1e3c2:	e7b3      	b.n	1e32c <spi_write_buffer_wait+0x20>
	while (length--) {
   1e3c4:	3a01      	subs	r2, #1
   1e3c6:	b296      	uxth	r6, r2
   1e3c8:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1e3ca:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   1e3cc:	2504      	movs	r5, #4
	while (length--) {
   1e3ce:	4b01      	ldr	r3, [pc, #4]	; (1e3d4 <spi_write_buffer_wait+0xc8>)
   1e3d0:	469c      	mov	ip, r3
   1e3d2:	e7c4      	b.n	1e35e <spi_write_buffer_wait+0x52>
   1e3d4:	0000ffff 	.word	0x0000ffff

0001e3d8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1e3da:	0080      	lsls	r0, r0, #2
   1e3dc:	4b70      	ldr	r3, [pc, #448]	; (1e5a0 <_spi_interrupt_handler+0x1c8>)
   1e3de:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e3e0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   1e3e2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   1e3e4:	5ce7      	ldrb	r7, [r4, r3]
   1e3e6:	2236      	movs	r2, #54	; 0x36
   1e3e8:	5ca2      	ldrb	r2, [r4, r2]
   1e3ea:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   1e3ec:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   1e3ee:	7db5      	ldrb	r5, [r6, #22]
   1e3f0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   1e3f2:	07eb      	lsls	r3, r5, #31
   1e3f4:	d502      	bpl.n	1e3fc <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e3f6:	7963      	ldrb	r3, [r4, #5]
   1e3f8:	2b01      	cmp	r3, #1
   1e3fa:	d01e      	beq.n	1e43a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   1e3fc:	076b      	lsls	r3, r5, #29
   1e3fe:	d511      	bpl.n	1e424 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e400:	8b73      	ldrh	r3, [r6, #26]
   1e402:	075b      	lsls	r3, r3, #29
   1e404:	d55a      	bpl.n	1e4bc <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   1e406:	7a63      	ldrb	r3, [r4, #9]
   1e408:	2b01      	cmp	r3, #1
   1e40a:	d008      	beq.n	1e41e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   1e40c:	221e      	movs	r2, #30
   1e40e:	2338      	movs	r3, #56	; 0x38
   1e410:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   1e412:	3b35      	subs	r3, #53	; 0x35
   1e414:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1e416:	3302      	adds	r3, #2
   1e418:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   1e41a:	073b      	lsls	r3, r7, #28
   1e41c:	d44a      	bmi.n	1e4b4 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   1e41e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e420:	2304      	movs	r3, #4
   1e422:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   1e424:	07ab      	lsls	r3, r5, #30
   1e426:	d503      	bpl.n	1e430 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e428:	7963      	ldrb	r3, [r4, #5]
   1e42a:	2b01      	cmp	r3, #1
   1e42c:	d100      	bne.n	1e430 <_spi_interrupt_handler+0x58>
   1e42e:	e097      	b.n	1e560 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   1e430:	b26d      	sxtb	r5, r5
   1e432:	2d00      	cmp	r5, #0
   1e434:	da00      	bge.n	1e438 <_spi_interrupt_handler+0x60>
   1e436:	e0a9      	b.n	1e58c <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   1e438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   1e43a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e43c:	2b00      	cmp	r3, #0
   1e43e:	d022      	beq.n	1e486 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   1e440:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   1e442:	2b00      	cmp	r3, #0
   1e444:	d0da      	beq.n	1e3fc <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e446:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e448:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1e44a:	7813      	ldrb	r3, [r2, #0]
   1e44c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   1e44e:	1c50      	adds	r0, r2, #1
   1e450:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e452:	79a0      	ldrb	r0, [r4, #6]
   1e454:	2801      	cmp	r0, #1
   1e456:	d027      	beq.n	1e4a8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e458:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   1e45a:	05db      	lsls	r3, r3, #23
   1e45c:	0ddb      	lsrs	r3, r3, #23
   1e45e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   1e460:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e462:	3b01      	subs	r3, #1
   1e464:	b29b      	uxth	r3, r3
   1e466:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   1e468:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e46a:	b29b      	uxth	r3, r3
   1e46c:	2b00      	cmp	r3, #0
   1e46e:	d1c5      	bne.n	1e3fc <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e470:	3301      	adds	r3, #1
   1e472:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   1e474:	7a63      	ldrb	r3, [r4, #9]
   1e476:	2b01      	cmp	r3, #1
   1e478:	d1c0      	bne.n	1e3fc <_spi_interrupt_handler+0x24>
   1e47a:	79e3      	ldrb	r3, [r4, #7]
   1e47c:	2b00      	cmp	r3, #0
   1e47e:	d1bd      	bne.n	1e3fc <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e480:	3302      	adds	r3, #2
   1e482:	75b3      	strb	r3, [r6, #22]
   1e484:	e7ba      	b.n	1e3fc <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1e486:	4b47      	ldr	r3, [pc, #284]	; (1e5a4 <_spi_interrupt_handler+0x1cc>)
   1e488:	881b      	ldrh	r3, [r3, #0]
   1e48a:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e48c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e48e:	3b01      	subs	r3, #1
   1e490:	b29b      	uxth	r3, r3
   1e492:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   1e494:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e496:	b29b      	uxth	r3, r3
   1e498:	2b00      	cmp	r3, #0
   1e49a:	d101      	bne.n	1e4a0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e49c:	3301      	adds	r3, #1
   1e49e:	7533      	strb	r3, [r6, #20]
		if (0
   1e4a0:	7963      	ldrb	r3, [r4, #5]
   1e4a2:	2b01      	cmp	r3, #1
   1e4a4:	d0cc      	beq.n	1e440 <_spi_interrupt_handler+0x68>
   1e4a6:	e7a9      	b.n	1e3fc <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1e4a8:	7850      	ldrb	r0, [r2, #1]
   1e4aa:	0200      	lsls	r0, r0, #8
   1e4ac:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   1e4ae:	3202      	adds	r2, #2
   1e4b0:	62e2      	str	r2, [r4, #44]	; 0x2c
   1e4b2:	e7d2      	b.n	1e45a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1e4b4:	0020      	movs	r0, r4
   1e4b6:	69a3      	ldr	r3, [r4, #24]
   1e4b8:	4798      	blx	r3
   1e4ba:	e7b0      	b.n	1e41e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   1e4bc:	7a63      	ldrb	r3, [r4, #9]
   1e4be:	2b01      	cmp	r3, #1
   1e4c0:	d028      	beq.n	1e514 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e4c2:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e4c6:	05db      	lsls	r3, r3, #23
   1e4c8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1e4ca:	b2da      	uxtb	r2, r3
   1e4cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1e4ce:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   1e4d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1e4d2:	1c51      	adds	r1, r2, #1
   1e4d4:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e4d6:	79a1      	ldrb	r1, [r4, #6]
   1e4d8:	2901      	cmp	r1, #1
   1e4da:	d034      	beq.n	1e546 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   1e4dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e4de:	3b01      	subs	r3, #1
   1e4e0:	b29b      	uxth	r3, r3
   1e4e2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   1e4e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e4e6:	b29b      	uxth	r3, r3
   1e4e8:	2b00      	cmp	r3, #0
   1e4ea:	d000      	beq.n	1e4ee <_spi_interrupt_handler+0x116>
   1e4ec:	e79a      	b.n	1e424 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   1e4ee:	2200      	movs	r2, #0
   1e4f0:	3338      	adds	r3, #56	; 0x38
   1e4f2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e4f4:	3b34      	subs	r3, #52	; 0x34
   1e4f6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1e4f8:	7a63      	ldrb	r3, [r4, #9]
   1e4fa:	2b02      	cmp	r3, #2
   1e4fc:	d029      	beq.n	1e552 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   1e4fe:	7a63      	ldrb	r3, [r4, #9]
   1e500:	2b00      	cmp	r3, #0
   1e502:	d000      	beq.n	1e506 <_spi_interrupt_handler+0x12e>
   1e504:	e78e      	b.n	1e424 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1e506:	07bb      	lsls	r3, r7, #30
   1e508:	d400      	bmi.n	1e50c <_spi_interrupt_handler+0x134>
   1e50a:	e78b      	b.n	1e424 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   1e50c:	0020      	movs	r0, r4
   1e50e:	6923      	ldr	r3, [r4, #16]
   1e510:	4798      	blx	r3
   1e512:	e787      	b.n	1e424 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e514:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   1e516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e518:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e51a:	3b01      	subs	r3, #1
   1e51c:	b29b      	uxth	r3, r3
   1e51e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   1e520:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e522:	b29b      	uxth	r3, r3
   1e524:	2b00      	cmp	r3, #0
   1e526:	d000      	beq.n	1e52a <_spi_interrupt_handler+0x152>
   1e528:	e77c      	b.n	1e424 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e52a:	3304      	adds	r3, #4
   1e52c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   1e52e:	2200      	movs	r2, #0
   1e530:	3334      	adds	r3, #52	; 0x34
   1e532:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   1e534:	3b35      	subs	r3, #53	; 0x35
   1e536:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   1e538:	07fb      	lsls	r3, r7, #31
   1e53a:	d400      	bmi.n	1e53e <_spi_interrupt_handler+0x166>
   1e53c:	e772      	b.n	1e424 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   1e53e:	0020      	movs	r0, r4
   1e540:	68e3      	ldr	r3, [r4, #12]
   1e542:	4798      	blx	r3
   1e544:	e76e      	b.n	1e424 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   1e546:	0a1b      	lsrs	r3, r3, #8
   1e548:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   1e54a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e54c:	3301      	adds	r3, #1
   1e54e:	62a3      	str	r3, [r4, #40]	; 0x28
   1e550:	e7c4      	b.n	1e4dc <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1e552:	077b      	lsls	r3, r7, #29
   1e554:	d400      	bmi.n	1e558 <_spi_interrupt_handler+0x180>
   1e556:	e765      	b.n	1e424 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1e558:	0020      	movs	r0, r4
   1e55a:	6963      	ldr	r3, [r4, #20]
   1e55c:	4798      	blx	r3
   1e55e:	e761      	b.n	1e424 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e560:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e562:	2b01      	cmp	r3, #1
   1e564:	d000      	beq.n	1e568 <_spi_interrupt_handler+0x190>
   1e566:	e763      	b.n	1e430 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e568:	79e3      	ldrb	r3, [r4, #7]
   1e56a:	2b00      	cmp	r3, #0
   1e56c:	d000      	beq.n	1e570 <_spi_interrupt_handler+0x198>
   1e56e:	e75f      	b.n	1e430 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e570:	3302      	adds	r3, #2
   1e572:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   1e574:	3301      	adds	r3, #1
   1e576:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   1e578:	2200      	movs	r2, #0
   1e57a:	3335      	adds	r3, #53	; 0x35
   1e57c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   1e57e:	07fb      	lsls	r3, r7, #31
   1e580:	d400      	bmi.n	1e584 <_spi_interrupt_handler+0x1ac>
   1e582:	e755      	b.n	1e430 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1e584:	0020      	movs	r0, r4
   1e586:	68e3      	ldr	r3, [r4, #12]
   1e588:	4798      	blx	r3
   1e58a:	e751      	b.n	1e430 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e58c:	2380      	movs	r3, #128	; 0x80
   1e58e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e590:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   1e592:	067b      	lsls	r3, r7, #25
   1e594:	d400      	bmi.n	1e598 <_spi_interrupt_handler+0x1c0>
   1e596:	e74f      	b.n	1e438 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1e598:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e59a:	0020      	movs	r0, r4
   1e59c:	4798      	blx	r3
}
   1e59e:	e74b      	b.n	1e438 <_spi_interrupt_handler+0x60>
   1e5a0:	200055c0 	.word	0x200055c0
   1e5a4:	200055d8 	.word	0x200055d8

0001e5a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5aa:	46de      	mov	lr, fp
   1e5ac:	4657      	mov	r7, sl
   1e5ae:	464e      	mov	r6, r9
   1e5b0:	4645      	mov	r5, r8
   1e5b2:	b5e0      	push	{r5, r6, r7, lr}
   1e5b4:	b091      	sub	sp, #68	; 0x44
   1e5b6:	0005      	movs	r5, r0
   1e5b8:	000c      	movs	r4, r1
   1e5ba:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1e5bc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e5be:	0008      	movs	r0, r1
   1e5c0:	4bbc      	ldr	r3, [pc, #752]	; (1e8b4 <usart_init+0x30c>)
   1e5c2:	4798      	blx	r3
   1e5c4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e5c6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1e5c8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e5ca:	07db      	lsls	r3, r3, #31
   1e5cc:	d506      	bpl.n	1e5dc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   1e5ce:	b011      	add	sp, #68	; 0x44
   1e5d0:	bc3c      	pop	{r2, r3, r4, r5}
   1e5d2:	4690      	mov	r8, r2
   1e5d4:	4699      	mov	r9, r3
   1e5d6:	46a2      	mov	sl, r4
   1e5d8:	46ab      	mov	fp, r5
   1e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e5dc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   1e5de:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e5e0:	079b      	lsls	r3, r3, #30
   1e5e2:	d4f4      	bmi.n	1e5ce <usart_init+0x26>
   1e5e4:	49b4      	ldr	r1, [pc, #720]	; (1e8b8 <usart_init+0x310>)
   1e5e6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1e5e8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1e5ea:	2301      	movs	r3, #1
   1e5ec:	40bb      	lsls	r3, r7
   1e5ee:	4303      	orrs	r3, r0
   1e5f0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1e5f2:	a90f      	add	r1, sp, #60	; 0x3c
   1e5f4:	272d      	movs	r7, #45	; 0x2d
   1e5f6:	5df3      	ldrb	r3, [r6, r7]
   1e5f8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e5fa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1e5fc:	b2d3      	uxtb	r3, r2
   1e5fe:	9302      	str	r3, [sp, #8]
   1e600:	0018      	movs	r0, r3
   1e602:	4bae      	ldr	r3, [pc, #696]	; (1e8bc <usart_init+0x314>)
   1e604:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1e606:	9802      	ldr	r0, [sp, #8]
   1e608:	4bad      	ldr	r3, [pc, #692]	; (1e8c0 <usart_init+0x318>)
   1e60a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1e60c:	5df0      	ldrb	r0, [r6, r7]
   1e60e:	2100      	movs	r1, #0
   1e610:	4bac      	ldr	r3, [pc, #688]	; (1e8c4 <usart_init+0x31c>)
   1e612:	4798      	blx	r3
	module->character_size = config->character_size;
   1e614:	7af3      	ldrb	r3, [r6, #11]
   1e616:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   1e618:	2324      	movs	r3, #36	; 0x24
   1e61a:	5cf3      	ldrb	r3, [r6, r3]
   1e61c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1e61e:	2325      	movs	r3, #37	; 0x25
   1e620:	5cf3      	ldrb	r3, [r6, r3]
   1e622:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1e624:	7ef3      	ldrb	r3, [r6, #27]
   1e626:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1e628:	7f33      	ldrb	r3, [r6, #28]
   1e62a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e62c:	682b      	ldr	r3, [r5, #0]
   1e62e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e630:	0018      	movs	r0, r3
   1e632:	4ba0      	ldr	r3, [pc, #640]	; (1e8b4 <usart_init+0x30c>)
   1e634:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e636:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   1e638:	2200      	movs	r2, #0
   1e63a:	230e      	movs	r3, #14
   1e63c:	a906      	add	r1, sp, #24
   1e63e:	468c      	mov	ip, r1
   1e640:	4463      	add	r3, ip
   1e642:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   1e644:	8a32      	ldrh	r2, [r6, #16]
   1e646:	9202      	str	r2, [sp, #8]
   1e648:	2380      	movs	r3, #128	; 0x80
   1e64a:	01db      	lsls	r3, r3, #7
   1e64c:	429a      	cmp	r2, r3
   1e64e:	d100      	bne.n	1e652 <usart_init+0xaa>
   1e650:	e09e      	b.n	1e790 <usart_init+0x1e8>
   1e652:	d90f      	bls.n	1e674 <usart_init+0xcc>
   1e654:	23c0      	movs	r3, #192	; 0xc0
   1e656:	01db      	lsls	r3, r3, #7
   1e658:	9a02      	ldr	r2, [sp, #8]
   1e65a:	429a      	cmp	r2, r3
   1e65c:	d100      	bne.n	1e660 <usart_init+0xb8>
   1e65e:	e092      	b.n	1e786 <usart_init+0x1de>
   1e660:	2380      	movs	r3, #128	; 0x80
   1e662:	021b      	lsls	r3, r3, #8
   1e664:	429a      	cmp	r2, r3
   1e666:	d000      	beq.n	1e66a <usart_init+0xc2>
   1e668:	e11f      	b.n	1e8aa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1e66a:	2303      	movs	r3, #3
   1e66c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e66e:	2300      	movs	r3, #0
   1e670:	9307      	str	r3, [sp, #28]
   1e672:	e008      	b.n	1e686 <usart_init+0xde>
	switch (config->sample_rate) {
   1e674:	2380      	movs	r3, #128	; 0x80
   1e676:	019b      	lsls	r3, r3, #6
   1e678:	429a      	cmp	r2, r3
   1e67a:	d000      	beq.n	1e67e <usart_init+0xd6>
   1e67c:	e115      	b.n	1e8aa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e67e:	2310      	movs	r3, #16
   1e680:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e682:	3b0f      	subs	r3, #15
   1e684:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   1e686:	6833      	ldr	r3, [r6, #0]
   1e688:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e68a:	68f3      	ldr	r3, [r6, #12]
   1e68c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e68e:	6973      	ldr	r3, [r6, #20]
   1e690:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e692:	7e33      	ldrb	r3, [r6, #24]
   1e694:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e696:	2326      	movs	r3, #38	; 0x26
   1e698:	5cf3      	ldrb	r3, [r6, r3]
   1e69a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e69c:	6873      	ldr	r3, [r6, #4]
   1e69e:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e6a0:	2b00      	cmp	r3, #0
   1e6a2:	d100      	bne.n	1e6a6 <usart_init+0xfe>
   1e6a4:	e0a0      	b.n	1e7e8 <usart_init+0x240>
   1e6a6:	2380      	movs	r3, #128	; 0x80
   1e6a8:	055b      	lsls	r3, r3, #21
   1e6aa:	4599      	cmp	r9, r3
   1e6ac:	d100      	bne.n	1e6b0 <usart_init+0x108>
   1e6ae:	e084      	b.n	1e7ba <usart_init+0x212>
	if(config->encoding_format_enable) {
   1e6b0:	7e73      	ldrb	r3, [r6, #25]
   1e6b2:	2b00      	cmp	r3, #0
   1e6b4:	d002      	beq.n	1e6bc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1e6b6:	7eb3      	ldrb	r3, [r6, #26]
   1e6b8:	4642      	mov	r2, r8
   1e6ba:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e6bc:	682a      	ldr	r2, [r5, #0]
   1e6be:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e6c0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e6c2:	2b00      	cmp	r3, #0
   1e6c4:	d1fc      	bne.n	1e6c0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   1e6c6:	330e      	adds	r3, #14
   1e6c8:	aa06      	add	r2, sp, #24
   1e6ca:	4694      	mov	ip, r2
   1e6cc:	4463      	add	r3, ip
   1e6ce:	881b      	ldrh	r3, [r3, #0]
   1e6d0:	4642      	mov	r2, r8
   1e6d2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   1e6d4:	9b05      	ldr	r3, [sp, #20]
   1e6d6:	9a03      	ldr	r2, [sp, #12]
   1e6d8:	4313      	orrs	r3, r2
   1e6da:	9a04      	ldr	r2, [sp, #16]
   1e6dc:	4313      	orrs	r3, r2
   1e6de:	464a      	mov	r2, r9
   1e6e0:	4313      	orrs	r3, r2
   1e6e2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e6e4:	465b      	mov	r3, fp
   1e6e6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1e6e8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e6ea:	4653      	mov	r3, sl
   1e6ec:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   1e6ee:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   1e6f0:	2327      	movs	r3, #39	; 0x27
   1e6f2:	5cf3      	ldrb	r3, [r6, r3]
   1e6f4:	2b00      	cmp	r3, #0
   1e6f6:	d101      	bne.n	1e6fc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1e6f8:	3304      	adds	r3, #4
   1e6fa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e6fc:	7e73      	ldrb	r3, [r6, #25]
   1e6fe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e700:	7f32      	ldrb	r2, [r6, #28]
   1e702:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e704:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e706:	7f72      	ldrb	r2, [r6, #29]
   1e708:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e70a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e70c:	2224      	movs	r2, #36	; 0x24
   1e70e:	5cb2      	ldrb	r2, [r6, r2]
   1e710:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e712:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1e714:	2225      	movs	r2, #37	; 0x25
   1e716:	5cb2      	ldrb	r2, [r6, r2]
   1e718:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e71a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1e71c:	7ab1      	ldrb	r1, [r6, #10]
   1e71e:	7af2      	ldrb	r2, [r6, #11]
   1e720:	4311      	orrs	r1, r2
   1e722:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   1e724:	8933      	ldrh	r3, [r6, #8]
   1e726:	2bff      	cmp	r3, #255	; 0xff
   1e728:	d100      	bne.n	1e72c <usart_init+0x184>
   1e72a:	e081      	b.n	1e830 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1e72c:	2280      	movs	r2, #128	; 0x80
   1e72e:	0452      	lsls	r2, r2, #17
   1e730:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   1e732:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   1e734:	232c      	movs	r3, #44	; 0x2c
   1e736:	5cf3      	ldrb	r3, [r6, r3]
   1e738:	2b00      	cmp	r3, #0
   1e73a:	d103      	bne.n	1e744 <usart_init+0x19c>
   1e73c:	4b62      	ldr	r3, [pc, #392]	; (1e8c8 <usart_init+0x320>)
   1e73e:	789b      	ldrb	r3, [r3, #2]
   1e740:	079b      	lsls	r3, r3, #30
   1e742:	d501      	bpl.n	1e748 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1e744:	2380      	movs	r3, #128	; 0x80
   1e746:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e748:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e74a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e74c:	2b00      	cmp	r3, #0
   1e74e:	d1fc      	bne.n	1e74a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   1e750:	4643      	mov	r3, r8
   1e752:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e754:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e756:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e758:	2b00      	cmp	r3, #0
   1e75a:	d1fc      	bne.n	1e756 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   1e75c:	4643      	mov	r3, r8
   1e75e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e760:	ab0e      	add	r3, sp, #56	; 0x38
   1e762:	2280      	movs	r2, #128	; 0x80
   1e764:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e766:	2200      	movs	r2, #0
   1e768:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   1e76a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e76c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e76e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e770:	930a      	str	r3, [sp, #40]	; 0x28
   1e772:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e774:	930b      	str	r3, [sp, #44]	; 0x2c
   1e776:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e778:	930c      	str	r3, [sp, #48]	; 0x30
   1e77a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1e77c:	9302      	str	r3, [sp, #8]
   1e77e:	930d      	str	r3, [sp, #52]	; 0x34
   1e780:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e782:	ae0a      	add	r6, sp, #40	; 0x28
   1e784:	e063      	b.n	1e84e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e786:	2308      	movs	r3, #8
   1e788:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e78a:	3b07      	subs	r3, #7
   1e78c:	9307      	str	r3, [sp, #28]
   1e78e:	e77a      	b.n	1e686 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   1e790:	6833      	ldr	r3, [r6, #0]
   1e792:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e794:	68f3      	ldr	r3, [r6, #12]
   1e796:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e798:	6973      	ldr	r3, [r6, #20]
   1e79a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e79c:	7e33      	ldrb	r3, [r6, #24]
   1e79e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e7a0:	2326      	movs	r3, #38	; 0x26
   1e7a2:	5cf3      	ldrb	r3, [r6, r3]
   1e7a4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e7a6:	6873      	ldr	r3, [r6, #4]
   1e7a8:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e7aa:	2b00      	cmp	r3, #0
   1e7ac:	d018      	beq.n	1e7e0 <usart_init+0x238>
   1e7ae:	2380      	movs	r3, #128	; 0x80
   1e7b0:	055b      	lsls	r3, r3, #21
   1e7b2:	4599      	cmp	r9, r3
   1e7b4:	d001      	beq.n	1e7ba <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1e7b6:	2000      	movs	r0, #0
   1e7b8:	e025      	b.n	1e806 <usart_init+0x25e>
			if (!config->use_external_clock) {
   1e7ba:	2327      	movs	r3, #39	; 0x27
   1e7bc:	5cf3      	ldrb	r3, [r6, r3]
   1e7be:	2b00      	cmp	r3, #0
   1e7c0:	d000      	beq.n	1e7c4 <usart_init+0x21c>
   1e7c2:	e775      	b.n	1e6b0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1e7c4:	6a33      	ldr	r3, [r6, #32]
   1e7c6:	001f      	movs	r7, r3
   1e7c8:	b2c0      	uxtb	r0, r0
   1e7ca:	4b40      	ldr	r3, [pc, #256]	; (1e8cc <usart_init+0x324>)
   1e7cc:	4798      	blx	r3
   1e7ce:	0001      	movs	r1, r0
   1e7d0:	220e      	movs	r2, #14
   1e7d2:	ab06      	add	r3, sp, #24
   1e7d4:	469c      	mov	ip, r3
   1e7d6:	4462      	add	r2, ip
   1e7d8:	0038      	movs	r0, r7
   1e7da:	4b3d      	ldr	r3, [pc, #244]	; (1e8d0 <usart_init+0x328>)
   1e7dc:	4798      	blx	r3
   1e7de:	e012      	b.n	1e806 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e7e0:	2308      	movs	r3, #8
   1e7e2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e7e4:	2300      	movs	r3, #0
   1e7e6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1e7e8:	2327      	movs	r3, #39	; 0x27
   1e7ea:	5cf3      	ldrb	r3, [r6, r3]
   1e7ec:	2b00      	cmp	r3, #0
   1e7ee:	d00e      	beq.n	1e80e <usart_init+0x266>
				status_code =
   1e7f0:	9b06      	ldr	r3, [sp, #24]
   1e7f2:	9300      	str	r3, [sp, #0]
   1e7f4:	9b07      	ldr	r3, [sp, #28]
   1e7f6:	220e      	movs	r2, #14
   1e7f8:	a906      	add	r1, sp, #24
   1e7fa:	468c      	mov	ip, r1
   1e7fc:	4462      	add	r2, ip
   1e7fe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1e800:	6a30      	ldr	r0, [r6, #32]
   1e802:	4f34      	ldr	r7, [pc, #208]	; (1e8d4 <usart_init+0x32c>)
   1e804:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1e806:	2800      	cmp	r0, #0
   1e808:	d000      	beq.n	1e80c <usart_init+0x264>
   1e80a:	e6e0      	b.n	1e5ce <usart_init+0x26>
   1e80c:	e750      	b.n	1e6b0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   1e80e:	6a33      	ldr	r3, [r6, #32]
   1e810:	001f      	movs	r7, r3
   1e812:	b2c0      	uxtb	r0, r0
   1e814:	4b2d      	ldr	r3, [pc, #180]	; (1e8cc <usart_init+0x324>)
   1e816:	4798      	blx	r3
   1e818:	0001      	movs	r1, r0
				status_code =
   1e81a:	9b06      	ldr	r3, [sp, #24]
   1e81c:	9300      	str	r3, [sp, #0]
   1e81e:	9b07      	ldr	r3, [sp, #28]
   1e820:	220e      	movs	r2, #14
   1e822:	a806      	add	r0, sp, #24
   1e824:	4684      	mov	ip, r0
   1e826:	4462      	add	r2, ip
   1e828:	0038      	movs	r0, r7
   1e82a:	4f2a      	ldr	r7, [pc, #168]	; (1e8d4 <usart_init+0x32c>)
   1e82c:	47b8      	blx	r7
   1e82e:	e7ea      	b.n	1e806 <usart_init+0x25e>
		if(config->lin_slave_enable) {
   1e830:	7ef3      	ldrb	r3, [r6, #27]
   1e832:	2b00      	cmp	r3, #0
   1e834:	d100      	bne.n	1e838 <usart_init+0x290>
   1e836:	e77d      	b.n	1e734 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1e838:	2380      	movs	r3, #128	; 0x80
   1e83a:	04db      	lsls	r3, r3, #19
   1e83c:	431f      	orrs	r7, r3
   1e83e:	e779      	b.n	1e734 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e840:	0020      	movs	r0, r4
   1e842:	4b25      	ldr	r3, [pc, #148]	; (1e8d8 <usart_init+0x330>)
   1e844:	4798      	blx	r3
   1e846:	e007      	b.n	1e858 <usart_init+0x2b0>
   1e848:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e84a:	2f04      	cmp	r7, #4
   1e84c:	d00d      	beq.n	1e86a <usart_init+0x2c2>
   1e84e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e850:	00bb      	lsls	r3, r7, #2
   1e852:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e854:	2800      	cmp	r0, #0
   1e856:	d0f3      	beq.n	1e840 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   1e858:	1c43      	adds	r3, r0, #1
   1e85a:	d0f5      	beq.n	1e848 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e85c:	a90e      	add	r1, sp, #56	; 0x38
   1e85e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e860:	0c00      	lsrs	r0, r0, #16
   1e862:	b2c0      	uxtb	r0, r0
   1e864:	4b1d      	ldr	r3, [pc, #116]	; (1e8dc <usart_init+0x334>)
   1e866:	4798      	blx	r3
   1e868:	e7ee      	b.n	1e848 <usart_init+0x2a0>
		module->callback[i]            = NULL;
   1e86a:	2300      	movs	r3, #0
   1e86c:	60eb      	str	r3, [r5, #12]
   1e86e:	612b      	str	r3, [r5, #16]
   1e870:	616b      	str	r3, [r5, #20]
   1e872:	61ab      	str	r3, [r5, #24]
   1e874:	61eb      	str	r3, [r5, #28]
   1e876:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   1e878:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1e87a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1e87c:	2200      	movs	r2, #0
   1e87e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1e880:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1e882:	3330      	adds	r3, #48	; 0x30
   1e884:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   1e886:	3301      	adds	r3, #1
   1e888:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   1e88a:	3301      	adds	r3, #1
   1e88c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   1e88e:	3301      	adds	r3, #1
   1e890:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e892:	6828      	ldr	r0, [r5, #0]
   1e894:	4b07      	ldr	r3, [pc, #28]	; (1e8b4 <usart_init+0x30c>)
   1e896:	4798      	blx	r3
   1e898:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1e89a:	4911      	ldr	r1, [pc, #68]	; (1e8e0 <usart_init+0x338>)
   1e89c:	4b11      	ldr	r3, [pc, #68]	; (1e8e4 <usart_init+0x33c>)
   1e89e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e8a0:	00a4      	lsls	r4, r4, #2
   1e8a2:	4b11      	ldr	r3, [pc, #68]	; (1e8e8 <usart_init+0x340>)
   1e8a4:	50e5      	str	r5, [r4, r3]
	return status_code;
   1e8a6:	2000      	movs	r0, #0
   1e8a8:	e691      	b.n	1e5ce <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e8aa:	2310      	movs	r3, #16
   1e8ac:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	9307      	str	r3, [sp, #28]
   1e8b2:	e6e8      	b.n	1e686 <usart_init+0xde>
   1e8b4:	0001ddad 	.word	0x0001ddad
   1e8b8:	40000400 	.word	0x40000400
   1e8bc:	0001f14d 	.word	0x0001f14d
   1e8c0:	0001f0c1 	.word	0x0001f0c1
   1e8c4:	0001dbe9 	.word	0x0001dbe9
   1e8c8:	41002000 	.word	0x41002000
   1e8cc:	0001f169 	.word	0x0001f169
   1e8d0:	0001db2b 	.word	0x0001db2b
   1e8d4:	0001db55 	.word	0x0001db55
   1e8d8:	0001dc35 	.word	0x0001dc35
   1e8dc:	0001f275 	.word	0x0001f275
   1e8e0:	0001e9ed 	.word	0x0001e9ed
   1e8e4:	0001dde9 	.word	0x0001dde9
   1e8e8:	200055c0 	.word	0x200055c0

0001e8ec <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8ee:	0006      	movs	r6, r0
   1e8f0:	000c      	movs	r4, r1
   1e8f2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e8f4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e8f6:	4b0a      	ldr	r3, [pc, #40]	; (1e920 <_usart_write_buffer+0x34>)
   1e8f8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   1e8fa:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1e8fc:	b29b      	uxth	r3, r3
   1e8fe:	2b00      	cmp	r3, #0
   1e900:	d003      	beq.n	1e90a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   1e902:	4b08      	ldr	r3, [pc, #32]	; (1e924 <_usart_write_buffer+0x38>)
   1e904:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e906:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   1e908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   1e90a:	85f5      	strh	r5, [r6, #46]	; 0x2e
   1e90c:	4b05      	ldr	r3, [pc, #20]	; (1e924 <_usart_write_buffer+0x38>)
   1e90e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   1e910:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1e912:	2205      	movs	r2, #5
   1e914:	2333      	movs	r3, #51	; 0x33
   1e916:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   1e918:	3b32      	subs	r3, #50	; 0x32
   1e91a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   1e91c:	2000      	movs	r0, #0
   1e91e:	e7f3      	b.n	1e908 <_usart_write_buffer+0x1c>
   1e920:	0001d599 	.word	0x0001d599
   1e924:	0001d5d9 	.word	0x0001d5d9

0001e928 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e92a:	0004      	movs	r4, r0
   1e92c:	000d      	movs	r5, r1
   1e92e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e930:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e932:	4b0f      	ldr	r3, [pc, #60]	; (1e970 <_usart_read_buffer+0x48>)
   1e934:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   1e936:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1e938:	b29b      	uxth	r3, r3
   1e93a:	2b00      	cmp	r3, #0
   1e93c:	d003      	beq.n	1e946 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   1e93e:	4b0d      	ldr	r3, [pc, #52]	; (1e974 <_usart_read_buffer+0x4c>)
   1e940:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e942:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   1e944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   1e946:	85a6      	strh	r6, [r4, #44]	; 0x2c
   1e948:	4b0a      	ldr	r3, [pc, #40]	; (1e974 <_usart_read_buffer+0x4c>)
   1e94a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   1e94c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1e94e:	2205      	movs	r2, #5
   1e950:	2332      	movs	r3, #50	; 0x32
   1e952:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1e954:	3b2e      	subs	r3, #46	; 0x2e
   1e956:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   1e958:	7a23      	ldrb	r3, [r4, #8]
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	d001      	beq.n	1e962 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1e95e:	2320      	movs	r3, #32
   1e960:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   1e962:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   1e964:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   1e966:	2b00      	cmp	r3, #0
   1e968:	d0ec      	beq.n	1e944 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1e96a:	2308      	movs	r3, #8
   1e96c:	75bb      	strb	r3, [r7, #22]
   1e96e:	e7e9      	b.n	1e944 <_usart_read_buffer+0x1c>
   1e970:	0001d599 	.word	0x0001d599
   1e974:	0001d5d9 	.word	0x0001d5d9

0001e978 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e978:	1c93      	adds	r3, r2, #2
   1e97a:	009b      	lsls	r3, r3, #2
   1e97c:	18c3      	adds	r3, r0, r3
   1e97e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   1e980:	2130      	movs	r1, #48	; 0x30
   1e982:	2301      	movs	r3, #1
   1e984:	4093      	lsls	r3, r2
   1e986:	001a      	movs	r2, r3
   1e988:	5c43      	ldrb	r3, [r0, r1]
   1e98a:	4313      	orrs	r3, r2
   1e98c:	5443      	strb	r3, [r0, r1]
}
   1e98e:	4770      	bx	lr

0001e990 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e990:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e992:	2317      	movs	r3, #23
	if (length == 0) {
   1e994:	2a00      	cmp	r2, #0
   1e996:	d101      	bne.n	1e99c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   1e998:	0018      	movs	r0, r3
   1e99a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   1e99c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   1e99e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   1e9a0:	2c00      	cmp	r4, #0
   1e9a2:	d0f9      	beq.n	1e998 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   1e9a4:	4b01      	ldr	r3, [pc, #4]	; (1e9ac <usart_write_buffer_job+0x1c>)
   1e9a6:	4798      	blx	r3
   1e9a8:	0003      	movs	r3, r0
   1e9aa:	e7f5      	b.n	1e998 <usart_write_buffer_job+0x8>
   1e9ac:	0001e8ed 	.word	0x0001e8ed

0001e9b0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e9b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e9b2:	2317      	movs	r3, #23
	if (length == 0) {
   1e9b4:	2a00      	cmp	r2, #0
   1e9b6:	d101      	bne.n	1e9bc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   1e9b8:	0018      	movs	r0, r3
   1e9ba:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   1e9bc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   1e9be:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   1e9c0:	2c00      	cmp	r4, #0
   1e9c2:	d0f9      	beq.n	1e9b8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   1e9c4:	4b01      	ldr	r3, [pc, #4]	; (1e9cc <usart_read_buffer_job+0x1c>)
   1e9c6:	4798      	blx	r3
   1e9c8:	0003      	movs	r3, r0
   1e9ca:	e7f5      	b.n	1e9b8 <usart_read_buffer_job+0x8>
   1e9cc:	0001e929 	.word	0x0001e929

0001e9d0 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1e9d0:	2900      	cmp	r1, #0
   1e9d2:	d003      	beq.n	1e9dc <usart_get_job_status+0xc>
   1e9d4:	2901      	cmp	r1, #1
   1e9d6:	d005      	beq.n	1e9e4 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   1e9d8:	2017      	movs	r0, #23
   1e9da:	e002      	b.n	1e9e2 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   1e9dc:	2332      	movs	r3, #50	; 0x32
   1e9de:	5cc0      	ldrb	r0, [r0, r3]
   1e9e0:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   1e9e2:	4770      	bx	lr
			status_code = module->tx_status;
   1e9e4:	2333      	movs	r3, #51	; 0x33
   1e9e6:	5cc0      	ldrb	r0, [r0, r3]
   1e9e8:	b2c0      	uxtb	r0, r0
			break;
   1e9ea:	e7fa      	b.n	1e9e2 <usart_get_job_status+0x12>

0001e9ec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1e9ee:	0080      	lsls	r0, r0, #2
   1e9f0:	4b62      	ldr	r3, [pc, #392]	; (1eb7c <_usart_interrupt_handler+0x190>)
   1e9f2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1e9f4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e9f6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   1e9f8:	2b00      	cmp	r3, #0
   1e9fa:	d1fc      	bne.n	1e9f6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1e9fc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   1e9fe:	7da6      	ldrb	r6, [r4, #22]
   1ea00:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   1ea02:	2330      	movs	r3, #48	; 0x30
   1ea04:	5ceb      	ldrb	r3, [r5, r3]
   1ea06:	2231      	movs	r2, #49	; 0x31
   1ea08:	5caf      	ldrb	r7, [r5, r2]
   1ea0a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1ea0c:	07f3      	lsls	r3, r6, #31
   1ea0e:	d522      	bpl.n	1ea56 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   1ea10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1ea12:	b29b      	uxth	r3, r3
   1ea14:	2b00      	cmp	r3, #0
   1ea16:	d01c      	beq.n	1ea52 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1ea18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1ea1a:	7813      	ldrb	r3, [r2, #0]
   1ea1c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1ea1e:	1c51      	adds	r1, r2, #1
   1ea20:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1ea22:	7969      	ldrb	r1, [r5, #5]
   1ea24:	2901      	cmp	r1, #1
   1ea26:	d00e      	beq.n	1ea46 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1ea28:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1ea2a:	05db      	lsls	r3, r3, #23
   1ea2c:	0ddb      	lsrs	r3, r3, #23
   1ea2e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1ea30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1ea32:	3b01      	subs	r3, #1
   1ea34:	b29b      	uxth	r3, r3
   1ea36:	85eb      	strh	r3, [r5, #46]	; 0x2e
   1ea38:	2b00      	cmp	r3, #0
   1ea3a:	d10c      	bne.n	1ea56 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1ea3c:	3301      	adds	r3, #1
   1ea3e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1ea40:	3301      	adds	r3, #1
   1ea42:	75a3      	strb	r3, [r4, #22]
   1ea44:	e007      	b.n	1ea56 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1ea46:	7851      	ldrb	r1, [r2, #1]
   1ea48:	0209      	lsls	r1, r1, #8
   1ea4a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   1ea4c:	3202      	adds	r2, #2
   1ea4e:	62aa      	str	r2, [r5, #40]	; 0x28
   1ea50:	e7eb      	b.n	1ea2a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1ea52:	2301      	movs	r3, #1
   1ea54:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1ea56:	07b3      	lsls	r3, r6, #30
   1ea58:	d506      	bpl.n	1ea68 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1ea5a:	2302      	movs	r3, #2
   1ea5c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   1ea5e:	2200      	movs	r2, #0
   1ea60:	3331      	adds	r3, #49	; 0x31
   1ea62:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1ea64:	07fb      	lsls	r3, r7, #31
   1ea66:	d41a      	bmi.n	1ea9e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1ea68:	0773      	lsls	r3, r6, #29
   1ea6a:	d565      	bpl.n	1eb38 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   1ea6c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1ea6e:	b29b      	uxth	r3, r3
   1ea70:	2b00      	cmp	r3, #0
   1ea72:	d05f      	beq.n	1eb34 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1ea74:	8b63      	ldrh	r3, [r4, #26]
   1ea76:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1ea78:	071a      	lsls	r2, r3, #28
   1ea7a:	d414      	bmi.n	1eaa6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1ea7c:	223f      	movs	r2, #63	; 0x3f
   1ea7e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1ea80:	2b00      	cmp	r3, #0
   1ea82:	d034      	beq.n	1eaee <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1ea84:	079a      	lsls	r2, r3, #30
   1ea86:	d511      	bpl.n	1eaac <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1ea88:	221a      	movs	r2, #26
   1ea8a:	2332      	movs	r3, #50	; 0x32
   1ea8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1ea8e:	3b30      	subs	r3, #48	; 0x30
   1ea90:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   1ea92:	077b      	lsls	r3, r7, #29
   1ea94:	d550      	bpl.n	1eb38 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1ea96:	0028      	movs	r0, r5
   1ea98:	696b      	ldr	r3, [r5, #20]
   1ea9a:	4798      	blx	r3
   1ea9c:	e04c      	b.n	1eb38 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1ea9e:	0028      	movs	r0, r5
   1eaa0:	68eb      	ldr	r3, [r5, #12]
   1eaa2:	4798      	blx	r3
   1eaa4:	e7e0      	b.n	1ea68 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1eaa6:	2237      	movs	r2, #55	; 0x37
   1eaa8:	4013      	ands	r3, r2
   1eaaa:	e7e9      	b.n	1ea80 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1eaac:	075a      	lsls	r2, r3, #29
   1eaae:	d505      	bpl.n	1eabc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   1eab0:	221e      	movs	r2, #30
   1eab2:	2332      	movs	r3, #50	; 0x32
   1eab4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1eab6:	3b2e      	subs	r3, #46	; 0x2e
   1eab8:	8363      	strh	r3, [r4, #26]
   1eaba:	e7ea      	b.n	1ea92 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1eabc:	07da      	lsls	r2, r3, #31
   1eabe:	d505      	bpl.n	1eacc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   1eac0:	2213      	movs	r2, #19
   1eac2:	2332      	movs	r3, #50	; 0x32
   1eac4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1eac6:	3b31      	subs	r3, #49	; 0x31
   1eac8:	8363      	strh	r3, [r4, #26]
   1eaca:	e7e2      	b.n	1ea92 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1eacc:	06da      	lsls	r2, r3, #27
   1eace:	d505      	bpl.n	1eadc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   1ead0:	2242      	movs	r2, #66	; 0x42
   1ead2:	2332      	movs	r3, #50	; 0x32
   1ead4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1ead6:	3b22      	subs	r3, #34	; 0x22
   1ead8:	8363      	strh	r3, [r4, #26]
   1eada:	e7da      	b.n	1ea92 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1eadc:	2220      	movs	r2, #32
   1eade:	421a      	tst	r2, r3
   1eae0:	d0d7      	beq.n	1ea92 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1eae2:	3221      	adds	r2, #33	; 0x21
   1eae4:	2332      	movs	r3, #50	; 0x32
   1eae6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1eae8:	3b12      	subs	r3, #18
   1eaea:	8363      	strh	r3, [r4, #26]
   1eaec:	e7d1      	b.n	1ea92 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1eaee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1eaf0:	05db      	lsls	r3, r3, #23
   1eaf2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1eaf4:	b2da      	uxtb	r2, r3
   1eaf6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1eaf8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1eafa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1eafc:	1c51      	adds	r1, r2, #1
   1eafe:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1eb00:	7969      	ldrb	r1, [r5, #5]
   1eb02:	2901      	cmp	r1, #1
   1eb04:	d010      	beq.n	1eb28 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1eb06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1eb08:	3b01      	subs	r3, #1
   1eb0a:	b29b      	uxth	r3, r3
   1eb0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
   1eb0e:	2b00      	cmp	r3, #0
   1eb10:	d112      	bne.n	1eb38 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1eb12:	3304      	adds	r3, #4
   1eb14:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   1eb16:	2200      	movs	r2, #0
   1eb18:	332e      	adds	r3, #46	; 0x2e
   1eb1a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   1eb1c:	07bb      	lsls	r3, r7, #30
   1eb1e:	d50b      	bpl.n	1eb38 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1eb20:	0028      	movs	r0, r5
   1eb22:	692b      	ldr	r3, [r5, #16]
   1eb24:	4798      	blx	r3
   1eb26:	e007      	b.n	1eb38 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1eb28:	0a1b      	lsrs	r3, r3, #8
   1eb2a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   1eb2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1eb2e:	3301      	adds	r3, #1
   1eb30:	626b      	str	r3, [r5, #36]	; 0x24
   1eb32:	e7e8      	b.n	1eb06 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1eb34:	2304      	movs	r3, #4
   1eb36:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1eb38:	06f3      	lsls	r3, r6, #27
   1eb3a:	d504      	bpl.n	1eb46 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1eb3c:	2310      	movs	r3, #16
   1eb3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1eb40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1eb42:	06fb      	lsls	r3, r7, #27
   1eb44:	d40e      	bmi.n	1eb64 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1eb46:	06b3      	lsls	r3, r6, #26
   1eb48:	d504      	bpl.n	1eb54 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1eb4a:	2320      	movs	r3, #32
   1eb4c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1eb4e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1eb50:	073b      	lsls	r3, r7, #28
   1eb52:	d40b      	bmi.n	1eb6c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1eb54:	0733      	lsls	r3, r6, #28
   1eb56:	d504      	bpl.n	1eb62 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1eb58:	2308      	movs	r3, #8
   1eb5a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1eb5c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1eb5e:	06bb      	lsls	r3, r7, #26
   1eb60:	d408      	bmi.n	1eb74 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   1eb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1eb64:	0028      	movs	r0, r5
   1eb66:	69eb      	ldr	r3, [r5, #28]
   1eb68:	4798      	blx	r3
   1eb6a:	e7ec      	b.n	1eb46 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1eb6c:	0028      	movs	r0, r5
   1eb6e:	69ab      	ldr	r3, [r5, #24]
   1eb70:	4798      	blx	r3
   1eb72:	e7ef      	b.n	1eb54 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1eb74:	6a2b      	ldr	r3, [r5, #32]
   1eb76:	0028      	movs	r0, r5
   1eb78:	4798      	blx	r3
}
   1eb7a:	e7f2      	b.n	1eb62 <_usart_interrupt_handler+0x176>
   1eb7c:	200055c0 	.word	0x200055c0

0001eb80 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1eb80:	b510      	push	{r4, lr}
	switch (clock_source) {
   1eb82:	2808      	cmp	r0, #8
   1eb84:	d803      	bhi.n	1eb8e <system_clock_source_get_hz+0xe>
   1eb86:	0080      	lsls	r0, r0, #2
   1eb88:	4b1c      	ldr	r3, [pc, #112]	; (1ebfc <system_clock_source_get_hz+0x7c>)
   1eb8a:	581b      	ldr	r3, [r3, r0]
   1eb8c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1eb8e:	2000      	movs	r0, #0
   1eb90:	e032      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   1eb92:	4b1b      	ldr	r3, [pc, #108]	; (1ec00 <system_clock_source_get_hz+0x80>)
   1eb94:	6918      	ldr	r0, [r3, #16]
   1eb96:	e02f      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1eb98:	4b1a      	ldr	r3, [pc, #104]	; (1ec04 <system_clock_source_get_hz+0x84>)
   1eb9a:	6a1b      	ldr	r3, [r3, #32]
   1eb9c:	059b      	lsls	r3, r3, #22
   1eb9e:	0f9b      	lsrs	r3, r3, #30
   1eba0:	4819      	ldr	r0, [pc, #100]	; (1ec08 <system_clock_source_get_hz+0x88>)
   1eba2:	40d8      	lsrs	r0, r3
   1eba4:	e028      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   1eba6:	4b16      	ldr	r3, [pc, #88]	; (1ec00 <system_clock_source_get_hz+0x80>)
   1eba8:	6958      	ldr	r0, [r3, #20]
   1ebaa:	e025      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1ebac:	4b14      	ldr	r3, [pc, #80]	; (1ec00 <system_clock_source_get_hz+0x80>)
   1ebae:	681b      	ldr	r3, [r3, #0]
			return 0;
   1ebb0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1ebb2:	079b      	lsls	r3, r3, #30
   1ebb4:	d520      	bpl.n	1ebf8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ebb6:	4913      	ldr	r1, [pc, #76]	; (1ec04 <system_clock_source_get_hz+0x84>)
   1ebb8:	2210      	movs	r2, #16
   1ebba:	68cb      	ldr	r3, [r1, #12]
   1ebbc:	421a      	tst	r2, r3
   1ebbe:	d0fc      	beq.n	1ebba <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   1ebc0:	4b0f      	ldr	r3, [pc, #60]	; (1ec00 <system_clock_source_get_hz+0x80>)
   1ebc2:	681a      	ldr	r2, [r3, #0]
   1ebc4:	2324      	movs	r3, #36	; 0x24
   1ebc6:	4013      	ands	r3, r2
   1ebc8:	2b04      	cmp	r3, #4
   1ebca:	d001      	beq.n	1ebd0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   1ebcc:	480f      	ldr	r0, [pc, #60]	; (1ec0c <system_clock_source_get_hz+0x8c>)
   1ebce:	e013      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1ebd0:	2000      	movs	r0, #0
   1ebd2:	4b0f      	ldr	r3, [pc, #60]	; (1ec10 <system_clock_source_get_hz+0x90>)
   1ebd4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1ebd6:	4b0a      	ldr	r3, [pc, #40]	; (1ec00 <system_clock_source_get_hz+0x80>)
   1ebd8:	689b      	ldr	r3, [r3, #8]
   1ebda:	041b      	lsls	r3, r3, #16
   1ebdc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1ebde:	4358      	muls	r0, r3
   1ebe0:	e00a      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1ebe2:	2350      	movs	r3, #80	; 0x50
   1ebe4:	4a07      	ldr	r2, [pc, #28]	; (1ec04 <system_clock_source_get_hz+0x84>)
   1ebe6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   1ebe8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1ebea:	075b      	lsls	r3, r3, #29
   1ebec:	d504      	bpl.n	1ebf8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1ebee:	4b04      	ldr	r3, [pc, #16]	; (1ec00 <system_clock_source_get_hz+0x80>)
   1ebf0:	68d8      	ldr	r0, [r3, #12]
   1ebf2:	e001      	b.n	1ebf8 <system_clock_source_get_hz+0x78>
		return 32768UL;
   1ebf4:	2080      	movs	r0, #128	; 0x80
   1ebf6:	0200      	lsls	r0, r0, #8
	}
}
   1ebf8:	bd10      	pop	{r4, pc}
   1ebfa:	46c0      	nop			; (mov r8, r8)
   1ebfc:	0002a384 	.word	0x0002a384
   1ec00:	20003d18 	.word	0x20003d18
   1ec04:	40000800 	.word	0x40000800
   1ec08:	007a1200 	.word	0x007a1200
   1ec0c:	02dc6c00 	.word	0x02dc6c00
   1ec10:	0001f169 	.word	0x0001f169

0001ec14 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1ec14:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1ec16:	490c      	ldr	r1, [pc, #48]	; (1ec48 <system_clock_source_osc8m_set_config+0x34>)
   1ec18:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1ec1a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1ec1c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1ec1e:	7840      	ldrb	r0, [r0, #1]
   1ec20:	2201      	movs	r2, #1
   1ec22:	4010      	ands	r0, r2
   1ec24:	0180      	lsls	r0, r0, #6
   1ec26:	2640      	movs	r6, #64	; 0x40
   1ec28:	43b3      	bics	r3, r6
   1ec2a:	4303      	orrs	r3, r0
   1ec2c:	402a      	ands	r2, r5
   1ec2e:	01d2      	lsls	r2, r2, #7
   1ec30:	2080      	movs	r0, #128	; 0x80
   1ec32:	4383      	bics	r3, r0
   1ec34:	4313      	orrs	r3, r2
   1ec36:	2203      	movs	r2, #3
   1ec38:	4022      	ands	r2, r4
   1ec3a:	0212      	lsls	r2, r2, #8
   1ec3c:	4803      	ldr	r0, [pc, #12]	; (1ec4c <system_clock_source_osc8m_set_config+0x38>)
   1ec3e:	4003      	ands	r3, r0
   1ec40:	4313      	orrs	r3, r2
   1ec42:	620b      	str	r3, [r1, #32]
}
   1ec44:	bd70      	pop	{r4, r5, r6, pc}
   1ec46:	46c0      	nop			; (mov r8, r8)
   1ec48:	40000800 	.word	0x40000800
   1ec4c:	fffffcff 	.word	0xfffffcff

0001ec50 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec52:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   1ec54:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1ec56:	7d03      	ldrb	r3, [r0, #20]
   1ec58:	2b01      	cmp	r3, #1
   1ec5a:	d03b      	beq.n	1ecd4 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1ec5c:	68ab      	ldr	r3, [r5, #8]
   1ec5e:	0118      	lsls	r0, r3, #4
   1ec60:	0021      	movs	r1, r4
   1ec62:	4b20      	ldr	r3, [pc, #128]	; (1ece4 <system_clock_source_dpll_set_config+0x94>)
   1ec64:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
   1ec66:	220f      	movs	r2, #15
   1ec68:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
   1ec6a:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ec6c:	782e      	ldrb	r6, [r5, #0]
   1ec6e:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1ec70:	7869      	ldrb	r1, [r5, #1]
   1ec72:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ec74:	430e      	orrs	r6, r1
   1ec76:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
   1ec78:	491b      	ldr	r1, [pc, #108]	; (1ece8 <system_clock_source_dpll_set_config+0x98>)
   1ec7a:	2744      	movs	r7, #68	; 0x44
   1ec7c:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ec7e:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
   1ec80:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1ec82:	051b      	lsls	r3, r3, #20
   1ec84:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ec86:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
   1ec88:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1ec8a:	78ab      	ldrb	r3, [r5, #2]
   1ec8c:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1ec8e:	78ee      	ldrb	r6, [r5, #3]
   1ec90:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec92:	4333      	orrs	r3, r6
   1ec94:	792e      	ldrb	r6, [r5, #4]
   1ec96:	00b6      	lsls	r6, r6, #2
   1ec98:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1ec9a:	7caf      	ldrb	r7, [r5, #18]
   1ec9c:	2603      	movs	r6, #3
   1ec9e:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1eca0:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1eca2:	8a2e      	ldrh	r6, [r5, #16]
   1eca4:	0436      	lsls	r6, r6, #16
   1eca6:	4f11      	ldr	r7, [pc, #68]	; (1ecec <system_clock_source_dpll_set_config+0x9c>)
   1eca8:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ecaa:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1ecac:	7cee      	ldrb	r6, [r5, #19]
   1ecae:	0236      	lsls	r6, r6, #8
   1ecb0:	27e0      	movs	r7, #224	; 0xe0
   1ecb2:	00ff      	lsls	r7, r7, #3
   1ecb4:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ecb6:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1ecb8:	7d2e      	ldrb	r6, [r5, #20]
   1ecba:	0136      	lsls	r6, r6, #4
   1ecbc:	2530      	movs	r5, #48	; 0x30
   1ecbe:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ecc0:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
   1ecc2:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1ecc4:	230f      	movs	r3, #15
   1ecc6:	4398      	bics	r0, r3
   1ecc8:	1880      	adds	r0, r0, r2
   1ecca:	4344      	muls	r4, r0
   1eccc:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
   1ecce:	4b08      	ldr	r3, [pc, #32]	; (1ecf0 <system_clock_source_dpll_set_config+0xa0>)
   1ecd0:	60dc      	str	r4, [r3, #12]
}
   1ecd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
   1ecd4:	8a01      	ldrh	r1, [r0, #16]
   1ecd6:	3101      	adds	r1, #1
   1ecd8:	0049      	lsls	r1, r1, #1
   1ecda:	0020      	movs	r0, r4
   1ecdc:	4b01      	ldr	r3, [pc, #4]	; (1ece4 <system_clock_source_dpll_set_config+0x94>)
   1ecde:	4798      	blx	r3
   1ece0:	0004      	movs	r4, r0
   1ece2:	e7bb      	b.n	1ec5c <system_clock_source_dpll_set_config+0xc>
   1ece4:	00023fe9 	.word	0x00023fe9
   1ece8:	40000800 	.word	0x40000800
   1ecec:	07ff0000 	.word	0x07ff0000
   1ecf0:	20003d18 	.word	0x20003d18

0001ecf4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1ecf4:	2808      	cmp	r0, #8
   1ecf6:	d803      	bhi.n	1ed00 <system_clock_source_enable+0xc>
   1ecf8:	0080      	lsls	r0, r0, #2
   1ecfa:	4b25      	ldr	r3, [pc, #148]	; (1ed90 <system_clock_source_enable+0x9c>)
   1ecfc:	581b      	ldr	r3, [r3, r0]
   1ecfe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1ed00:	2017      	movs	r0, #23
   1ed02:	e044      	b.n	1ed8e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1ed04:	4a23      	ldr	r2, [pc, #140]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed06:	6a13      	ldr	r3, [r2, #32]
   1ed08:	2102      	movs	r1, #2
   1ed0a:	430b      	orrs	r3, r1
   1ed0c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   1ed0e:	2000      	movs	r0, #0
   1ed10:	e03d      	b.n	1ed8e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1ed12:	4a20      	ldr	r2, [pc, #128]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed14:	6993      	ldr	r3, [r2, #24]
   1ed16:	2102      	movs	r1, #2
   1ed18:	430b      	orrs	r3, r1
   1ed1a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   1ed1c:	2000      	movs	r0, #0
		break;
   1ed1e:	e036      	b.n	1ed8e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1ed20:	4a1c      	ldr	r2, [pc, #112]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed22:	8a13      	ldrh	r3, [r2, #16]
   1ed24:	2102      	movs	r1, #2
   1ed26:	430b      	orrs	r3, r1
   1ed28:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1ed2a:	2000      	movs	r0, #0
		break;
   1ed2c:	e02f      	b.n	1ed8e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1ed2e:	4a19      	ldr	r2, [pc, #100]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed30:	8a93      	ldrh	r3, [r2, #20]
   1ed32:	2102      	movs	r1, #2
   1ed34:	430b      	orrs	r3, r1
   1ed36:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1ed38:	2000      	movs	r0, #0
		break;
   1ed3a:	e028      	b.n	1ed8e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1ed3c:	4916      	ldr	r1, [pc, #88]	; (1ed98 <system_clock_source_enable+0xa4>)
   1ed3e:	680b      	ldr	r3, [r1, #0]
   1ed40:	2202      	movs	r2, #2
   1ed42:	4313      	orrs	r3, r2
   1ed44:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1ed46:	4b13      	ldr	r3, [pc, #76]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed48:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ed4a:	0019      	movs	r1, r3
   1ed4c:	320e      	adds	r2, #14
   1ed4e:	68cb      	ldr	r3, [r1, #12]
   1ed50:	421a      	tst	r2, r3
   1ed52:	d0fc      	beq.n	1ed4e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1ed54:	4a10      	ldr	r2, [pc, #64]	; (1ed98 <system_clock_source_enable+0xa4>)
   1ed56:	6891      	ldr	r1, [r2, #8]
   1ed58:	4b0e      	ldr	r3, [pc, #56]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed5a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1ed5c:	6852      	ldr	r2, [r2, #4]
   1ed5e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1ed60:	2200      	movs	r2, #0
   1ed62:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ed64:	0019      	movs	r1, r3
   1ed66:	3210      	adds	r2, #16
   1ed68:	68cb      	ldr	r3, [r1, #12]
   1ed6a:	421a      	tst	r2, r3
   1ed6c:	d0fc      	beq.n	1ed68 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1ed6e:	4b0a      	ldr	r3, [pc, #40]	; (1ed98 <system_clock_source_enable+0xa4>)
   1ed70:	681b      	ldr	r3, [r3, #0]
   1ed72:	b29b      	uxth	r3, r3
   1ed74:	4a07      	ldr	r2, [pc, #28]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed76:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1ed78:	2000      	movs	r0, #0
   1ed7a:	e008      	b.n	1ed8e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1ed7c:	4905      	ldr	r1, [pc, #20]	; (1ed94 <system_clock_source_enable+0xa0>)
   1ed7e:	2244      	movs	r2, #68	; 0x44
   1ed80:	5c8b      	ldrb	r3, [r1, r2]
   1ed82:	2002      	movs	r0, #2
   1ed84:	4303      	orrs	r3, r0
   1ed86:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1ed88:	2000      	movs	r0, #0
		break;
   1ed8a:	e000      	b.n	1ed8e <system_clock_source_enable+0x9a>
		return STATUS_OK;
   1ed8c:	2000      	movs	r0, #0
}
   1ed8e:	4770      	bx	lr
   1ed90:	0002a3a8 	.word	0x0002a3a8
   1ed94:	40000800 	.word	0x40000800
   1ed98:	20003d18 	.word	0x20003d18

0001ed9c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1ed9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed9e:	46de      	mov	lr, fp
   1eda0:	4657      	mov	r7, sl
   1eda2:	464e      	mov	r6, r9
   1eda4:	4645      	mov	r5, r8
   1eda6:	b5e0      	push	{r5, r6, r7, lr}
   1eda8:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1edaa:	22c2      	movs	r2, #194	; 0xc2
   1edac:	00d2      	lsls	r2, r2, #3
   1edae:	4b4c      	ldr	r3, [pc, #304]	; (1eee0 <system_clock_init+0x144>)
   1edb0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1edb2:	4a4c      	ldr	r2, [pc, #304]	; (1eee4 <system_clock_init+0x148>)
   1edb4:	6853      	ldr	r3, [r2, #4]
   1edb6:	211e      	movs	r1, #30
   1edb8:	438b      	bics	r3, r1
   1edba:	3918      	subs	r1, #24
   1edbc:	430b      	orrs	r3, r1
   1edbe:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1edc0:	2203      	movs	r2, #3
   1edc2:	ab01      	add	r3, sp, #4
   1edc4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1edc6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1edc8:	4d47      	ldr	r5, [pc, #284]	; (1eee8 <system_clock_init+0x14c>)
   1edca:	b2e0      	uxtb	r0, r4
   1edcc:	a901      	add	r1, sp, #4
   1edce:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1edd0:	3401      	adds	r4, #1
   1edd2:	2c25      	cmp	r4, #37	; 0x25
   1edd4:	d1f9      	bne.n	1edca <system_clock_init+0x2e>
	config->run_in_standby  = false;
   1edd6:	a80b      	add	r0, sp, #44	; 0x2c
   1edd8:	2500      	movs	r5, #0
   1edda:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   1eddc:	2601      	movs	r6, #1
   1edde:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1ede0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1ede2:	4b42      	ldr	r3, [pc, #264]	; (1eeec <system_clock_init+0x150>)
   1ede4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1ede6:	2006      	movs	r0, #6
   1ede8:	4b41      	ldr	r3, [pc, #260]	; (1eef0 <system_clock_init+0x154>)
   1edea:	4699      	mov	r9, r3
   1edec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1edee:	4b41      	ldr	r3, [pc, #260]	; (1eef4 <system_clock_init+0x158>)
   1edf0:	4798      	blx	r3
	config->high_when_disabled = false;
   1edf2:	ac01      	add	r4, sp, #4
   1edf4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1edf6:	2306      	movs	r3, #6
   1edf8:	469a      	mov	sl, r3
   1edfa:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1edfc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1edfe:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1ee00:	2308      	movs	r3, #8
   1ee02:	6063      	str	r3, [r4, #4]
   1ee04:	0021      	movs	r1, r4
   1ee06:	2001      	movs	r0, #1
   1ee08:	4b3b      	ldr	r3, [pc, #236]	; (1eef8 <system_clock_init+0x15c>)
   1ee0a:	4698      	mov	r8, r3
   1ee0c:	4798      	blx	r3
   1ee0e:	2001      	movs	r0, #1
   1ee10:	4f3a      	ldr	r7, [pc, #232]	; (1eefc <system_clock_init+0x160>)
   1ee12:	47b8      	blx	r7
	config->division_factor    = 1;
   1ee14:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ee16:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
   1ee18:	7265      	strb	r5, [r4, #9]
   1ee1a:	2303      	movs	r3, #3
   1ee1c:	469b      	mov	fp, r3
   1ee1e:	7023      	strb	r3, [r4, #0]
   1ee20:	7226      	strb	r6, [r4, #8]
   1ee22:	0021      	movs	r1, r4
   1ee24:	2002      	movs	r0, #2
   1ee26:	47c0      	blx	r8
   1ee28:	2002      	movs	r0, #2
   1ee2a:	47b8      	blx	r7
	config->high_when_disabled = false;
   1ee2c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1ee2e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee30:	7265      	strb	r5, [r4, #9]
   1ee32:	465b      	mov	r3, fp
   1ee34:	7023      	strb	r3, [r4, #0]
   1ee36:	2320      	movs	r3, #32
   1ee38:	6063      	str	r3, [r4, #4]
   1ee3a:	0021      	movs	r1, r4
   1ee3c:	2004      	movs	r0, #4
   1ee3e:	47c0      	blx	r8
   1ee40:	2004      	movs	r0, #4
   1ee42:	47b8      	blx	r7
	config->division_factor    = 1;
   1ee44:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ee46:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1ee48:	4653      	mov	r3, sl
   1ee4a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1ee4c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee4e:	7265      	strb	r5, [r4, #9]
   1ee50:	0021      	movs	r1, r4
   1ee52:	2005      	movs	r0, #5
   1ee54:	47c0      	blx	r8
   1ee56:	2005      	movs	r0, #5
   1ee58:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1ee5a:	a90a      	add	r1, sp, #40	; 0x28
   1ee5c:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1ee5e:	2001      	movs	r0, #1
   1ee60:	4b21      	ldr	r3, [pc, #132]	; (1eee8 <system_clock_init+0x14c>)
   1ee62:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1ee64:	2001      	movs	r0, #1
   1ee66:	4b26      	ldr	r3, [pc, #152]	; (1ef00 <system_clock_init+0x164>)
   1ee68:	4798      	blx	r3
	config->run_in_standby      = false;
   1ee6a:	a804      	add	r0, sp, #16
   1ee6c:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
   1ee6e:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
   1ee70:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
   1ee72:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
   1ee74:	4b23      	ldr	r3, [pc, #140]	; (1ef04 <system_clock_init+0x168>)
   1ee76:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
   1ee78:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1ee7a:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1ee7c:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
   1ee7e:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1ee80:	2302      	movs	r3, #2
   1ee82:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1ee84:	4b20      	ldr	r3, [pc, #128]	; (1ef08 <system_clock_init+0x16c>)
   1ee86:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
   1ee88:	4b20      	ldr	r3, [pc, #128]	; (1ef0c <system_clock_init+0x170>)
   1ee8a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1ee8c:	2008      	movs	r0, #8
   1ee8e:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
   1ee90:	4813      	ldr	r0, [pc, #76]	; (1eee0 <system_clock_init+0x144>)
   1ee92:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1ee94:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
   1ee96:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1ee98:	4013      	ands	r3, r2
   1ee9a:	2b03      	cmp	r3, #3
   1ee9c:	d1fb      	bne.n	1ee96 <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1ee9e:	4910      	ldr	r1, [pc, #64]	; (1eee0 <system_clock_init+0x144>)
   1eea0:	2244      	movs	r2, #68	; 0x44
   1eea2:	5c88      	ldrb	r0, [r1, r2]
   1eea4:	3b83      	subs	r3, #131	; 0x83
   1eea6:	4303      	orrs	r3, r0
   1eea8:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
   1eeaa:	4a19      	ldr	r2, [pc, #100]	; (1ef10 <system_clock_init+0x174>)
   1eeac:	2300      	movs	r3, #0
   1eeae:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1eeb0:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   1eeb2:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   1eeb4:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   1eeb6:	a901      	add	r1, sp, #4
   1eeb8:	2201      	movs	r2, #1
   1eeba:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1eebc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1eebe:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1eec0:	3308      	adds	r3, #8
   1eec2:	700b      	strb	r3, [r1, #0]
   1eec4:	724a      	strb	r2, [r1, #9]
   1eec6:	2000      	movs	r0, #0
   1eec8:	4b0b      	ldr	r3, [pc, #44]	; (1eef8 <system_clock_init+0x15c>)
   1eeca:	4798      	blx	r3
   1eecc:	2000      	movs	r0, #0
   1eece:	4b0b      	ldr	r3, [pc, #44]	; (1eefc <system_clock_init+0x160>)
   1eed0:	4798      	blx	r3
#endif
}
   1eed2:	b00d      	add	sp, #52	; 0x34
   1eed4:	bc3c      	pop	{r2, r3, r4, r5}
   1eed6:	4690      	mov	r8, r2
   1eed8:	4699      	mov	r9, r3
   1eeda:	46a2      	mov	sl, r4
   1eedc:	46ab      	mov	fp, r5
   1eede:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eee0:	40000800 	.word	0x40000800
   1eee4:	41004000 	.word	0x41004000
   1eee8:	0001f14d 	.word	0x0001f14d
   1eeec:	0001ec15 	.word	0x0001ec15
   1eef0:	0001ecf5 	.word	0x0001ecf5
   1eef4:	0001ef15 	.word	0x0001ef15
   1eef8:	0001ef39 	.word	0x0001ef39
   1eefc:	0001eff1 	.word	0x0001eff1
   1ef00:	0001f0c1 	.word	0x0001f0c1
   1ef04:	02dc6c00 	.word	0x02dc6c00
   1ef08:	000f4240 	.word	0x000f4240
   1ef0c:	0001ec51 	.word	0x0001ec51
   1ef10:	40000400 	.word	0x40000400

0001ef14 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   1ef14:	4a06      	ldr	r2, [pc, #24]	; (1ef30 <system_gclk_init+0x1c>)
   1ef16:	6993      	ldr	r3, [r2, #24]
   1ef18:	2108      	movs	r1, #8
   1ef1a:	430b      	orrs	r3, r1
   1ef1c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1ef1e:	2201      	movs	r2, #1
   1ef20:	4b04      	ldr	r3, [pc, #16]	; (1ef34 <system_gclk_init+0x20>)
   1ef22:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1ef24:	0019      	movs	r1, r3
   1ef26:	780b      	ldrb	r3, [r1, #0]
   1ef28:	4213      	tst	r3, r2
   1ef2a:	d1fc      	bne.n	1ef26 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   1ef2c:	4770      	bx	lr
   1ef2e:	46c0      	nop			; (mov r8, r8)
   1ef30:	40000400 	.word	0x40000400
   1ef34:	40000c00 	.word	0x40000c00

0001ef38 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1ef38:	b570      	push	{r4, r5, r6, lr}
   1ef3a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1ef3c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1ef3e:	780d      	ldrb	r5, [r1, #0]
   1ef40:	022d      	lsls	r5, r5, #8
   1ef42:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1ef44:	784b      	ldrb	r3, [r1, #1]
   1ef46:	2b00      	cmp	r3, #0
   1ef48:	d002      	beq.n	1ef50 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1ef4a:	2380      	movs	r3, #128	; 0x80
   1ef4c:	02db      	lsls	r3, r3, #11
   1ef4e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1ef50:	7a4b      	ldrb	r3, [r1, #9]
   1ef52:	2b00      	cmp	r3, #0
   1ef54:	d002      	beq.n	1ef5c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1ef56:	2380      	movs	r3, #128	; 0x80
   1ef58:	031b      	lsls	r3, r3, #12
   1ef5a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1ef5c:	6848      	ldr	r0, [r1, #4]
   1ef5e:	2801      	cmp	r0, #1
   1ef60:	d910      	bls.n	1ef84 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1ef62:	1e43      	subs	r3, r0, #1
   1ef64:	4218      	tst	r0, r3
   1ef66:	d134      	bne.n	1efd2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1ef68:	2802      	cmp	r0, #2
   1ef6a:	d930      	bls.n	1efce <system_gclk_gen_set_config+0x96>
   1ef6c:	2302      	movs	r3, #2
   1ef6e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1ef70:	3201      	adds	r2, #1
						mask <<= 1) {
   1ef72:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1ef74:	4298      	cmp	r0, r3
   1ef76:	d8fb      	bhi.n	1ef70 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1ef78:	0212      	lsls	r2, r2, #8
   1ef7a:	4332      	orrs	r2, r6
   1ef7c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1ef7e:	2380      	movs	r3, #128	; 0x80
   1ef80:	035b      	lsls	r3, r3, #13
   1ef82:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1ef84:	7a0b      	ldrb	r3, [r1, #8]
   1ef86:	2b00      	cmp	r3, #0
   1ef88:	d002      	beq.n	1ef90 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1ef8a:	2380      	movs	r3, #128	; 0x80
   1ef8c:	039b      	lsls	r3, r3, #14
   1ef8e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef90:	4a13      	ldr	r2, [pc, #76]	; (1efe0 <system_gclk_gen_set_config+0xa8>)
   1ef92:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   1ef94:	b25b      	sxtb	r3, r3
   1ef96:	2b00      	cmp	r3, #0
   1ef98:	dbfb      	blt.n	1ef92 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   1ef9a:	4b12      	ldr	r3, [pc, #72]	; (1efe4 <system_gclk_gen_set_config+0xac>)
   1ef9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1ef9e:	4b12      	ldr	r3, [pc, #72]	; (1efe8 <system_gclk_gen_set_config+0xb0>)
   1efa0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1efa2:	4a0f      	ldr	r2, [pc, #60]	; (1efe0 <system_gclk_gen_set_config+0xa8>)
   1efa4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1efa6:	b25b      	sxtb	r3, r3
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	dbfb      	blt.n	1efa4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1efac:	4b0c      	ldr	r3, [pc, #48]	; (1efe0 <system_gclk_gen_set_config+0xa8>)
   1efae:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1efb0:	001a      	movs	r2, r3
   1efb2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   1efb4:	b25b      	sxtb	r3, r3
   1efb6:	2b00      	cmp	r3, #0
   1efb8:	dbfb      	blt.n	1efb2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1efba:	4a09      	ldr	r2, [pc, #36]	; (1efe0 <system_gclk_gen_set_config+0xa8>)
   1efbc:	6853      	ldr	r3, [r2, #4]
   1efbe:	2180      	movs	r1, #128	; 0x80
   1efc0:	0249      	lsls	r1, r1, #9
   1efc2:	400b      	ands	r3, r1
   1efc4:	431d      	orrs	r5, r3
   1efc6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   1efc8:	4b08      	ldr	r3, [pc, #32]	; (1efec <system_gclk_gen_set_config+0xb4>)
   1efca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1efcc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1efce:	2200      	movs	r2, #0
   1efd0:	e7d2      	b.n	1ef78 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1efd2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   1efd4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1efd6:	2380      	movs	r3, #128	; 0x80
   1efd8:	029b      	lsls	r3, r3, #10
   1efda:	431d      	orrs	r5, r3
   1efdc:	e7d2      	b.n	1ef84 <system_gclk_gen_set_config+0x4c>
   1efde:	46c0      	nop			; (mov r8, r8)
   1efe0:	40000c00 	.word	0x40000c00
   1efe4:	0001d599 	.word	0x0001d599
   1efe8:	40000c08 	.word	0x40000c08
   1efec:	0001d5d9 	.word	0x0001d5d9

0001eff0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1eff0:	b510      	push	{r4, lr}
   1eff2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1eff4:	4a0b      	ldr	r2, [pc, #44]	; (1f024 <system_gclk_gen_enable+0x34>)
   1eff6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1eff8:	b25b      	sxtb	r3, r3
   1effa:	2b00      	cmp	r3, #0
   1effc:	dbfb      	blt.n	1eff6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1effe:	4b0a      	ldr	r3, [pc, #40]	; (1f028 <system_gclk_gen_enable+0x38>)
   1f000:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f002:	4b0a      	ldr	r3, [pc, #40]	; (1f02c <system_gclk_gen_enable+0x3c>)
   1f004:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f006:	4a07      	ldr	r2, [pc, #28]	; (1f024 <system_gclk_gen_enable+0x34>)
   1f008:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f00a:	b25b      	sxtb	r3, r3
   1f00c:	2b00      	cmp	r3, #0
   1f00e:	dbfb      	blt.n	1f008 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1f010:	4a04      	ldr	r2, [pc, #16]	; (1f024 <system_gclk_gen_enable+0x34>)
   1f012:	6851      	ldr	r1, [r2, #4]
   1f014:	2380      	movs	r3, #128	; 0x80
   1f016:	025b      	lsls	r3, r3, #9
   1f018:	430b      	orrs	r3, r1
   1f01a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   1f01c:	4b04      	ldr	r3, [pc, #16]	; (1f030 <system_gclk_gen_enable+0x40>)
   1f01e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f020:	bd10      	pop	{r4, pc}
   1f022:	46c0      	nop			; (mov r8, r8)
   1f024:	40000c00 	.word	0x40000c00
   1f028:	0001d599 	.word	0x0001d599
   1f02c:	40000c04 	.word	0x40000c04
   1f030:	0001d5d9 	.word	0x0001d5d9

0001f034 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1f034:	b570      	push	{r4, r5, r6, lr}
   1f036:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f038:	4a1a      	ldr	r2, [pc, #104]	; (1f0a4 <system_gclk_gen_get_hz+0x70>)
   1f03a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f03c:	b25b      	sxtb	r3, r3
   1f03e:	2b00      	cmp	r3, #0
   1f040:	dbfb      	blt.n	1f03a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1f042:	4b19      	ldr	r3, [pc, #100]	; (1f0a8 <system_gclk_gen_get_hz+0x74>)
   1f044:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f046:	4b19      	ldr	r3, [pc, #100]	; (1f0ac <system_gclk_gen_get_hz+0x78>)
   1f048:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f04a:	4a16      	ldr	r2, [pc, #88]	; (1f0a4 <system_gclk_gen_get_hz+0x70>)
   1f04c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f04e:	b25b      	sxtb	r3, r3
   1f050:	2b00      	cmp	r3, #0
   1f052:	dbfb      	blt.n	1f04c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1f054:	4e13      	ldr	r6, [pc, #76]	; (1f0a4 <system_gclk_gen_get_hz+0x70>)
   1f056:	6870      	ldr	r0, [r6, #4]
   1f058:	04c0      	lsls	r0, r0, #19
   1f05a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1f05c:	4b14      	ldr	r3, [pc, #80]	; (1f0b0 <system_gclk_gen_get_hz+0x7c>)
   1f05e:	4798      	blx	r3
   1f060:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f062:	4b12      	ldr	r3, [pc, #72]	; (1f0ac <system_gclk_gen_get_hz+0x78>)
   1f064:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1f066:	6876      	ldr	r6, [r6, #4]
   1f068:	02f6      	lsls	r6, r6, #11
   1f06a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1f06c:	4b11      	ldr	r3, [pc, #68]	; (1f0b4 <system_gclk_gen_get_hz+0x80>)
   1f06e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f070:	4a0c      	ldr	r2, [pc, #48]	; (1f0a4 <system_gclk_gen_get_hz+0x70>)
   1f072:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f074:	b25b      	sxtb	r3, r3
   1f076:	2b00      	cmp	r3, #0
   1f078:	dbfb      	blt.n	1f072 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1f07a:	4b0a      	ldr	r3, [pc, #40]	; (1f0a4 <system_gclk_gen_get_hz+0x70>)
   1f07c:	689c      	ldr	r4, [r3, #8]
   1f07e:	0224      	lsls	r4, r4, #8
   1f080:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1f082:	4b0d      	ldr	r3, [pc, #52]	; (1f0b8 <system_gclk_gen_get_hz+0x84>)
   1f084:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1f086:	2e00      	cmp	r6, #0
   1f088:	d107      	bne.n	1f09a <system_gclk_gen_get_hz+0x66>
   1f08a:	2c01      	cmp	r4, #1
   1f08c:	d907      	bls.n	1f09e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1f08e:	0021      	movs	r1, r4
   1f090:	0028      	movs	r0, r5
   1f092:	4b0a      	ldr	r3, [pc, #40]	; (1f0bc <system_gclk_gen_get_hz+0x88>)
   1f094:	4798      	blx	r3
   1f096:	0005      	movs	r5, r0
   1f098:	e001      	b.n	1f09e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1f09a:	3401      	adds	r4, #1
   1f09c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1f09e:	0028      	movs	r0, r5
   1f0a0:	bd70      	pop	{r4, r5, r6, pc}
   1f0a2:	46c0      	nop			; (mov r8, r8)
   1f0a4:	40000c00 	.word	0x40000c00
   1f0a8:	0001d599 	.word	0x0001d599
   1f0ac:	40000c04 	.word	0x40000c04
   1f0b0:	0001eb81 	.word	0x0001eb81
   1f0b4:	40000c08 	.word	0x40000c08
   1f0b8:	0001d5d9 	.word	0x0001d5d9
   1f0bc:	00023fe9 	.word	0x00023fe9

0001f0c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1f0c0:	b510      	push	{r4, lr}
   1f0c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f0c4:	4b06      	ldr	r3, [pc, #24]	; (1f0e0 <system_gclk_chan_enable+0x20>)
   1f0c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f0c8:	4b06      	ldr	r3, [pc, #24]	; (1f0e4 <system_gclk_chan_enable+0x24>)
   1f0ca:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1f0cc:	4a06      	ldr	r2, [pc, #24]	; (1f0e8 <system_gclk_chan_enable+0x28>)
   1f0ce:	8853      	ldrh	r3, [r2, #2]
   1f0d0:	2180      	movs	r1, #128	; 0x80
   1f0d2:	01c9      	lsls	r1, r1, #7
   1f0d4:	430b      	orrs	r3, r1
   1f0d6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   1f0d8:	4b04      	ldr	r3, [pc, #16]	; (1f0ec <system_gclk_chan_enable+0x2c>)
   1f0da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f0dc:	bd10      	pop	{r4, pc}
   1f0de:	46c0      	nop			; (mov r8, r8)
   1f0e0:	0001d599 	.word	0x0001d599
   1f0e4:	40000c02 	.word	0x40000c02
   1f0e8:	40000c00 	.word	0x40000c00
   1f0ec:	0001d5d9 	.word	0x0001d5d9

0001f0f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1f0f0:	b510      	push	{r4, lr}
   1f0f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f0f4:	4b0f      	ldr	r3, [pc, #60]	; (1f134 <system_gclk_chan_disable+0x44>)
   1f0f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f0f8:	4b0f      	ldr	r3, [pc, #60]	; (1f138 <system_gclk_chan_disable+0x48>)
   1f0fa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1f0fc:	4a0f      	ldr	r2, [pc, #60]	; (1f13c <system_gclk_chan_disable+0x4c>)
   1f0fe:	8853      	ldrh	r3, [r2, #2]
   1f100:	051b      	lsls	r3, r3, #20
   1f102:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   1f104:	8853      	ldrh	r3, [r2, #2]
   1f106:	490e      	ldr	r1, [pc, #56]	; (1f140 <system_gclk_chan_disable+0x50>)
   1f108:	400b      	ands	r3, r1
   1f10a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1f10c:	8853      	ldrh	r3, [r2, #2]
   1f10e:	490d      	ldr	r1, [pc, #52]	; (1f144 <system_gclk_chan_disable+0x54>)
   1f110:	400b      	ands	r3, r1
   1f112:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1f114:	0011      	movs	r1, r2
   1f116:	2280      	movs	r2, #128	; 0x80
   1f118:	01d2      	lsls	r2, r2, #7
   1f11a:	884b      	ldrh	r3, [r1, #2]
   1f11c:	4213      	tst	r3, r2
   1f11e:	d1fc      	bne.n	1f11a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1f120:	4906      	ldr	r1, [pc, #24]	; (1f13c <system_gclk_chan_disable+0x4c>)
   1f122:	884a      	ldrh	r2, [r1, #2]
   1f124:	0203      	lsls	r3, r0, #8
   1f126:	4806      	ldr	r0, [pc, #24]	; (1f140 <system_gclk_chan_disable+0x50>)
   1f128:	4002      	ands	r2, r0
   1f12a:	4313      	orrs	r3, r2
   1f12c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1f12e:	4b06      	ldr	r3, [pc, #24]	; (1f148 <system_gclk_chan_disable+0x58>)
   1f130:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f132:	bd10      	pop	{r4, pc}
   1f134:	0001d599 	.word	0x0001d599
   1f138:	40000c02 	.word	0x40000c02
   1f13c:	40000c00 	.word	0x40000c00
   1f140:	fffff0ff 	.word	0xfffff0ff
   1f144:	ffffbfff 	.word	0xffffbfff
   1f148:	0001d5d9 	.word	0x0001d5d9

0001f14c <system_gclk_chan_set_config>:
{
   1f14c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1f14e:	780c      	ldrb	r4, [r1, #0]
   1f150:	0224      	lsls	r4, r4, #8
   1f152:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   1f154:	4b02      	ldr	r3, [pc, #8]	; (1f160 <system_gclk_chan_set_config+0x14>)
   1f156:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1f158:	b2a4      	uxth	r4, r4
   1f15a:	4b02      	ldr	r3, [pc, #8]	; (1f164 <system_gclk_chan_set_config+0x18>)
   1f15c:	805c      	strh	r4, [r3, #2]
}
   1f15e:	bd10      	pop	{r4, pc}
   1f160:	0001f0f1 	.word	0x0001f0f1
   1f164:	40000c00 	.word	0x40000c00

0001f168 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1f168:	b510      	push	{r4, lr}
   1f16a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f16c:	4b06      	ldr	r3, [pc, #24]	; (1f188 <system_gclk_chan_get_hz+0x20>)
   1f16e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f170:	4b06      	ldr	r3, [pc, #24]	; (1f18c <system_gclk_chan_get_hz+0x24>)
   1f172:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1f174:	4b06      	ldr	r3, [pc, #24]	; (1f190 <system_gclk_chan_get_hz+0x28>)
   1f176:	885c      	ldrh	r4, [r3, #2]
   1f178:	0524      	lsls	r4, r4, #20
   1f17a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   1f17c:	4b05      	ldr	r3, [pc, #20]	; (1f194 <system_gclk_chan_get_hz+0x2c>)
   1f17e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1f180:	0020      	movs	r0, r4
   1f182:	4b05      	ldr	r3, [pc, #20]	; (1f198 <system_gclk_chan_get_hz+0x30>)
   1f184:	4798      	blx	r3
}
   1f186:	bd10      	pop	{r4, pc}
   1f188:	0001d599 	.word	0x0001d599
   1f18c:	40000c02 	.word	0x40000c02
   1f190:	40000c00 	.word	0x40000c00
   1f194:	0001d5d9 	.word	0x0001d5d9
   1f198:	0001f035 	.word	0x0001f035

0001f19c <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1f19c:	2800      	cmp	r0, #0
   1f19e:	db08      	blt.n	1f1b2 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
   1f1a0:	2301      	movs	r3, #1
   1f1a2:	4083      	lsls	r3, r0
   1f1a4:	22c0      	movs	r2, #192	; 0xc0
   1f1a6:	0052      	lsls	r2, r2, #1
   1f1a8:	4906      	ldr	r1, [pc, #24]	; (1f1c4 <system_interrupt_clear_pending+0x28>)
   1f1aa:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
   1f1ac:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
   1f1ae:	0018      	movs	r0, r3
   1f1b0:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
   1f1b2:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1f1b4:	1c42      	adds	r2, r0, #1
   1f1b6:	d1fa      	bne.n	1f1ae <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1f1b8:	2280      	movs	r2, #128	; 0x80
   1f1ba:	0492      	lsls	r2, r2, #18
   1f1bc:	4b02      	ldr	r3, [pc, #8]	; (1f1c8 <system_interrupt_clear_pending+0x2c>)
   1f1be:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
   1f1c0:	2300      	movs	r3, #0
   1f1c2:	e7f4      	b.n	1f1ae <system_interrupt_clear_pending+0x12>
   1f1c4:	e000e100 	.word	0xe000e100
   1f1c8:	e000ed00 	.word	0xe000ed00

0001f1cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1f1cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1f1ce:	78d3      	ldrb	r3, [r2, #3]
   1f1d0:	2b00      	cmp	r3, #0
   1f1d2:	d135      	bne.n	1f240 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1f1d4:	7813      	ldrb	r3, [r2, #0]
   1f1d6:	2b80      	cmp	r3, #128	; 0x80
   1f1d8:	d029      	beq.n	1f22e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1f1da:	061b      	lsls	r3, r3, #24
   1f1dc:	2480      	movs	r4, #128	; 0x80
   1f1de:	0264      	lsls	r4, r4, #9
   1f1e0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1f1e2:	7854      	ldrb	r4, [r2, #1]
   1f1e4:	2502      	movs	r5, #2
   1f1e6:	43ac      	bics	r4, r5
   1f1e8:	d106      	bne.n	1f1f8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1f1ea:	7894      	ldrb	r4, [r2, #2]
   1f1ec:	2c00      	cmp	r4, #0
   1f1ee:	d120      	bne.n	1f232 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1f1f0:	2480      	movs	r4, #128	; 0x80
   1f1f2:	02a4      	lsls	r4, r4, #10
   1f1f4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1f1f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f1f8:	7854      	ldrb	r4, [r2, #1]
   1f1fa:	3c01      	subs	r4, #1
   1f1fc:	2c01      	cmp	r4, #1
   1f1fe:	d91c      	bls.n	1f23a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f200:	040d      	lsls	r5, r1, #16
   1f202:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f204:	24a0      	movs	r4, #160	; 0xa0
   1f206:	05e4      	lsls	r4, r4, #23
   1f208:	432c      	orrs	r4, r5
   1f20a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f20c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f20e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f210:	24d0      	movs	r4, #208	; 0xd0
   1f212:	0624      	lsls	r4, r4, #24
   1f214:	432c      	orrs	r4, r5
   1f216:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f218:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1f21a:	78d4      	ldrb	r4, [r2, #3]
   1f21c:	2c00      	cmp	r4, #0
   1f21e:	d122      	bne.n	1f266 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1f220:	035b      	lsls	r3, r3, #13
   1f222:	d51c      	bpl.n	1f25e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1f224:	7893      	ldrb	r3, [r2, #2]
   1f226:	2b01      	cmp	r3, #1
   1f228:	d01e      	beq.n	1f268 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   1f22a:	6141      	str	r1, [r0, #20]
   1f22c:	e017      	b.n	1f25e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1f22e:	2300      	movs	r3, #0
   1f230:	e7d7      	b.n	1f1e2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1f232:	24c0      	movs	r4, #192	; 0xc0
   1f234:	02e4      	lsls	r4, r4, #11
   1f236:	4323      	orrs	r3, r4
   1f238:	e7dd      	b.n	1f1f6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1f23a:	4c0d      	ldr	r4, [pc, #52]	; (1f270 <_system_pinmux_config+0xa4>)
   1f23c:	4023      	ands	r3, r4
   1f23e:	e7df      	b.n	1f200 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1f240:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f242:	040c      	lsls	r4, r1, #16
   1f244:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f246:	23a0      	movs	r3, #160	; 0xa0
   1f248:	05db      	lsls	r3, r3, #23
   1f24a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f24c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f24e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f250:	23d0      	movs	r3, #208	; 0xd0
   1f252:	061b      	lsls	r3, r3, #24
   1f254:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f256:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1f258:	78d3      	ldrb	r3, [r2, #3]
   1f25a:	2b00      	cmp	r3, #0
   1f25c:	d103      	bne.n	1f266 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f25e:	7853      	ldrb	r3, [r2, #1]
   1f260:	3b01      	subs	r3, #1
   1f262:	2b01      	cmp	r3, #1
   1f264:	d902      	bls.n	1f26c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1f266:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   1f268:	6181      	str	r1, [r0, #24]
   1f26a:	e7f8      	b.n	1f25e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   1f26c:	6081      	str	r1, [r0, #8]
}
   1f26e:	e7fa      	b.n	1f266 <_system_pinmux_config+0x9a>
   1f270:	fffbffff 	.word	0xfffbffff

0001f274 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1f274:	b510      	push	{r4, lr}
   1f276:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   1f278:	09c1      	lsrs	r1, r0, #7
		return NULL;
   1f27a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1f27c:	2900      	cmp	r1, #0
   1f27e:	d104      	bne.n	1f28a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1f280:	0943      	lsrs	r3, r0, #5
   1f282:	01db      	lsls	r3, r3, #7
   1f284:	4905      	ldr	r1, [pc, #20]	; (1f29c <system_pinmux_pin_set_config+0x28>)
   1f286:	468c      	mov	ip, r1
   1f288:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1f28a:	241f      	movs	r4, #31
   1f28c:	4020      	ands	r0, r4
   1f28e:	2101      	movs	r1, #1
   1f290:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1f292:	0018      	movs	r0, r3
   1f294:	4b02      	ldr	r3, [pc, #8]	; (1f2a0 <system_pinmux_pin_set_config+0x2c>)
   1f296:	4798      	blx	r3
}
   1f298:	bd10      	pop	{r4, pc}
   1f29a:	46c0      	nop			; (mov r8, r8)
   1f29c:	41004400 	.word	0x41004400
   1f2a0:	0001f1cd 	.word	0x0001f1cd

0001f2a4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1f2a4:	4770      	bx	lr
	...

0001f2a8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1f2a8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1f2aa:	4b05      	ldr	r3, [pc, #20]	; (1f2c0 <system_init+0x18>)
   1f2ac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1f2ae:	4b05      	ldr	r3, [pc, #20]	; (1f2c4 <system_init+0x1c>)
   1f2b0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1f2b2:	4b05      	ldr	r3, [pc, #20]	; (1f2c8 <system_init+0x20>)
   1f2b4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1f2b6:	4b05      	ldr	r3, [pc, #20]	; (1f2cc <system_init+0x24>)
   1f2b8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1f2ba:	4b05      	ldr	r3, [pc, #20]	; (1f2d0 <system_init+0x28>)
   1f2bc:	4798      	blx	r3
}
   1f2be:	bd10      	pop	{r4, pc}
   1f2c0:	0001ed9d 	.word	0x0001ed9d
   1f2c4:	0001d609 	.word	0x0001d609
   1f2c8:	000126e5 	.word	0x000126e5
   1f2cc:	0001d719 	.word	0x0001d719
   1f2d0:	0001f2a5 	.word	0x0001f2a5

0001f2d4 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   1f2d4:	4b09      	ldr	r3, [pc, #36]	; (1f2fc <_tcc_get_inst_index+0x28>)
   1f2d6:	4298      	cmp	r0, r3
   1f2d8:	d00c      	beq.n	1f2f4 <_tcc_get_inst_index+0x20>
   1f2da:	4b09      	ldr	r3, [pc, #36]	; (1f300 <_tcc_get_inst_index+0x2c>)
   1f2dc:	4298      	cmp	r0, r3
   1f2de:	d007      	beq.n	1f2f0 <_tcc_get_inst_index+0x1c>
   1f2e0:	4a08      	ldr	r2, [pc, #32]	; (1f304 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1f2e2:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   1f2e4:	4290      	cmp	r0, r2
   1f2e6:	d001      	beq.n	1f2ec <_tcc_get_inst_index+0x18>
}
   1f2e8:	0018      	movs	r0, r3
   1f2ea:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1f2ec:	3302      	adds	r3, #2
   1f2ee:	e002      	b.n	1f2f6 <_tcc_get_inst_index+0x22>
   1f2f0:	2301      	movs	r3, #1
   1f2f2:	e000      	b.n	1f2f6 <_tcc_get_inst_index+0x22>
   1f2f4:	2300      	movs	r3, #0
			return i;
   1f2f6:	b2db      	uxtb	r3, r3
   1f2f8:	e7f6      	b.n	1f2e8 <_tcc_get_inst_index+0x14>
   1f2fa:	46c0      	nop			; (mov r8, r8)
   1f2fc:	42002000 	.word	0x42002000
   1f300:	42002400 	.word	0x42002400
   1f304:	42002800 	.word	0x42002800

0001f308 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1f308:	b510      	push	{r4, lr}
   1f30a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f30c:	0008      	movs	r0, r1
   1f30e:	4b4f      	ldr	r3, [pc, #316]	; (1f44c <tcc_get_config_defaults+0x144>)
   1f310:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1f312:	2300      	movs	r3, #0
   1f314:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1f316:	0080      	lsls	r0, r0, #2
   1f318:	4a4d      	ldr	r2, [pc, #308]	; (1f450 <tcc_get_config_defaults+0x148>)
   1f31a:	5882      	ldr	r2, [r0, r2]
   1f31c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1f31e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1f320:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1f322:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1f324:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   1f326:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f328:	61e3      	str	r3, [r4, #28]
   1f32a:	6223      	str	r3, [r4, #32]
   1f32c:	6263      	str	r3, [r4, #36]	; 0x24
   1f32e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f330:	7523      	strb	r3, [r4, #20]
   1f332:	7563      	strb	r3, [r4, #21]
   1f334:	75a3      	strb	r3, [r4, #22]
   1f336:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1f338:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   1f33a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f33c:	7423      	strb	r3, [r4, #16]
   1f33e:	7463      	strb	r3, [r4, #17]
   1f340:	74a3      	strb	r3, [r4, #18]
   1f342:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   1f344:	222c      	movs	r2, #44	; 0x2c
   1f346:	54a3      	strb	r3, [r4, r2]
   1f348:	3201      	adds	r2, #1
   1f34a:	54a3      	strb	r3, [r4, r2]
   1f34c:	3201      	adds	r2, #1
   1f34e:	54a3      	strb	r3, [r4, r2]
   1f350:	3201      	adds	r2, #1
   1f352:	54a3      	strb	r3, [r4, r2]
   1f354:	3201      	adds	r2, #1
   1f356:	54a3      	strb	r3, [r4, r2]
   1f358:	3201      	adds	r2, #1
   1f35a:	54a3      	strb	r3, [r4, r2]
   1f35c:	3201      	adds	r2, #1
   1f35e:	54a3      	strb	r3, [r4, r2]
   1f360:	3201      	adds	r2, #1
   1f362:	54a3      	strb	r3, [r4, r2]
   1f364:	3201      	adds	r2, #1
   1f366:	54a3      	strb	r3, [r4, r2]
   1f368:	3201      	adds	r2, #1
   1f36a:	54a3      	strb	r3, [r4, r2]
   1f36c:	3201      	adds	r2, #1
   1f36e:	54a3      	strb	r3, [r4, r2]
   1f370:	3201      	adds	r2, #1
   1f372:	54a3      	strb	r3, [r4, r2]
   1f374:	3201      	adds	r2, #1
   1f376:	54a3      	strb	r3, [r4, r2]
   1f378:	3201      	adds	r2, #1
   1f37a:	54a3      	strb	r3, [r4, r2]
   1f37c:	3201      	adds	r2, #1
   1f37e:	54a3      	strb	r3, [r4, r2]
   1f380:	3201      	adds	r2, #1
   1f382:	54a3      	strb	r3, [r4, r2]
   1f384:	3201      	adds	r2, #1
   1f386:	54a3      	strb	r3, [r4, r2]
   1f388:	3201      	adds	r2, #1
   1f38a:	54a3      	strb	r3, [r4, r2]
   1f38c:	3201      	adds	r2, #1
   1f38e:	54a3      	strb	r3, [r4, r2]
   1f390:	3201      	adds	r2, #1
   1f392:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1f394:	3201      	adds	r2, #1
   1f396:	54a3      	strb	r3, [r4, r2]
   1f398:	3201      	adds	r2, #1
   1f39a:	54a3      	strb	r3, [r4, r2]
   1f39c:	3201      	adds	r2, #1
   1f39e:	54a3      	strb	r3, [r4, r2]
   1f3a0:	3201      	adds	r2, #1
   1f3a2:	54a3      	strb	r3, [r4, r2]
   1f3a4:	3201      	adds	r2, #1
   1f3a6:	54a3      	strb	r3, [r4, r2]
   1f3a8:	3201      	adds	r2, #1
   1f3aa:	54a3      	strb	r3, [r4, r2]
   1f3ac:	3201      	adds	r2, #1
   1f3ae:	54a3      	strb	r3, [r4, r2]
   1f3b0:	3201      	adds	r2, #1
   1f3b2:	54a3      	strb	r3, [r4, r2]
   1f3b4:	3201      	adds	r2, #1
   1f3b6:	54a3      	strb	r3, [r4, r2]
   1f3b8:	3201      	adds	r2, #1
   1f3ba:	54a3      	strb	r3, [r4, r2]
   1f3bc:	3201      	adds	r2, #1
   1f3be:	54a3      	strb	r3, [r4, r2]
   1f3c0:	3201      	adds	r2, #1
   1f3c2:	54a3      	strb	r3, [r4, r2]
   1f3c4:	3201      	adds	r2, #1
   1f3c6:	54a3      	strb	r3, [r4, r2]
   1f3c8:	3201      	adds	r2, #1
   1f3ca:	54a3      	strb	r3, [r4, r2]
   1f3cc:	3201      	adds	r2, #1
   1f3ce:	54a3      	strb	r3, [r4, r2]
   1f3d0:	3201      	adds	r2, #1
   1f3d2:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1f3d4:	3201      	adds	r2, #1
   1f3d6:	54a3      	strb	r3, [r4, r2]
   1f3d8:	3201      	adds	r2, #1
   1f3da:	54a3      	strb	r3, [r4, r2]
   1f3dc:	3201      	adds	r2, #1
   1f3de:	54a3      	strb	r3, [r4, r2]
   1f3e0:	3201      	adds	r2, #1
   1f3e2:	54a3      	strb	r3, [r4, r2]
   1f3e4:	3201      	adds	r2, #1
   1f3e6:	54a3      	strb	r3, [r4, r2]
   1f3e8:	3201      	adds	r2, #1
   1f3ea:	54a3      	strb	r3, [r4, r2]
   1f3ec:	3201      	adds	r2, #1
   1f3ee:	54a3      	strb	r3, [r4, r2]
   1f3f0:	3201      	adds	r2, #1
   1f3f2:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1f3f4:	3241      	adds	r2, #65	; 0x41
   1f3f6:	54a3      	strb	r3, [r4, r2]
   1f3f8:	65a3      	str	r3, [r4, #88]	; 0x58
   1f3fa:	67a3      	str	r3, [r4, #120]	; 0x78
   1f3fc:	3201      	adds	r2, #1
   1f3fe:	54a3      	strb	r3, [r4, r2]
   1f400:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f402:	67e3      	str	r3, [r4, #124]	; 0x7c
   1f404:	3201      	adds	r2, #1
   1f406:	54a3      	strb	r3, [r4, r2]
   1f408:	6623      	str	r3, [r4, #96]	; 0x60
   1f40a:	3a1a      	subs	r2, #26
   1f40c:	50a3      	str	r3, [r4, r2]
   1f40e:	321b      	adds	r2, #27
   1f410:	54a3      	strb	r3, [r4, r2]
   1f412:	6663      	str	r3, [r4, #100]	; 0x64
   1f414:	3a17      	subs	r2, #23
   1f416:	50a3      	str	r3, [r4, r2]
   1f418:	3218      	adds	r2, #24
   1f41a:	54a3      	strb	r3, [r4, r2]
   1f41c:	66a3      	str	r3, [r4, #104]	; 0x68
   1f41e:	3a14      	subs	r2, #20
   1f420:	50a3      	str	r3, [r4, r2]
   1f422:	3215      	adds	r2, #21
   1f424:	54a3      	strb	r3, [r4, r2]
   1f426:	66e3      	str	r3, [r4, #108]	; 0x6c
   1f428:	3a11      	subs	r2, #17
   1f42a:	50a3      	str	r3, [r4, r2]
   1f42c:	3212      	adds	r2, #18
   1f42e:	54a3      	strb	r3, [r4, r2]
   1f430:	6723      	str	r3, [r4, #112]	; 0x70
   1f432:	3a0e      	subs	r2, #14
   1f434:	50a3      	str	r3, [r4, r2]
   1f436:	320f      	adds	r2, #15
   1f438:	54a3      	strb	r3, [r4, r2]
   1f43a:	6763      	str	r3, [r4, #116]	; 0x74
   1f43c:	3a0b      	subs	r2, #11
   1f43e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1f440:	2101      	movs	r1, #1
   1f442:	320c      	adds	r2, #12
   1f444:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   1f446:	3201      	adds	r2, #1
   1f448:	54a3      	strb	r3, [r4, r2]
}
   1f44a:	bd10      	pop	{r4, pc}
   1f44c:	0001f2d5 	.word	0x0001f2d5
   1f450:	0002a3e0 	.word	0x0002a3e0

0001f454 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   1f454:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f456:	46de      	mov	lr, fp
   1f458:	4657      	mov	r7, sl
   1f45a:	464e      	mov	r6, r9
   1f45c:	4645      	mov	r5, r8
   1f45e:	b5e0      	push	{r5, r6, r7, lr}
   1f460:	b091      	sub	sp, #68	; 0x44
   1f462:	9001      	str	r0, [sp, #4]
   1f464:	000c      	movs	r4, r1
   1f466:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f468:	0008      	movs	r0, r1
   1f46a:	4bc3      	ldr	r3, [pc, #780]	; (1f778 <tcc_init+0x324>)
   1f46c:	4798      	blx	r3
   1f46e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1f470:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1f472:	48c2      	ldr	r0, [pc, #776]	; (1f77c <tcc_init+0x328>)
   1f474:	6a02      	ldr	r2, [r0, #32]
   1f476:	009e      	lsls	r6, r3, #2
   1f478:	4fc1      	ldr	r7, [pc, #772]	; (1f780 <tcc_init+0x32c>)
   1f47a:	59f7      	ldr	r7, [r6, r7]
   1f47c:	433a      	orrs	r2, r7
   1f47e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f480:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1f482:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f484:	0792      	lsls	r2, r2, #30
   1f486:	d506      	bpl.n	1f496 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   1f488:	b011      	add	sp, #68	; 0x44
   1f48a:	bc3c      	pop	{r2, r3, r4, r5}
   1f48c:	4690      	mov	r8, r2
   1f48e:	4699      	mov	r9, r3
   1f490:	46a2      	mov	sl, r4
   1f492:	46ab      	mov	fp, r5
   1f494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   1f496:	6822      	ldr	r2, [r4, #0]
   1f498:	2701      	movs	r7, #1
   1f49a:	4017      	ands	r7, r2
   1f49c:	d1f4      	bne.n	1f488 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1f49e:	48b9      	ldr	r0, [pc, #740]	; (1f784 <tcc_init+0x330>)
   1f4a0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1f4a2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   1f4a4:	682e      	ldr	r6, [r5, #0]
   1f4a6:	42b2      	cmp	r2, r6
   1f4a8:	d3ee      	bcc.n	1f488 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   1f4aa:	686e      	ldr	r6, [r5, #4]
   1f4ac:	42b2      	cmp	r2, r6
   1f4ae:	d3eb      	bcc.n	1f488 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1f4b0:	69e8      	ldr	r0, [r5, #28]
   1f4b2:	4282      	cmp	r2, r0
   1f4b4:	d200      	bcs.n	1f4b8 <tcc_init+0x64>
   1f4b6:	e1b9      	b.n	1f82c <tcc_init+0x3d8>
   1f4b8:	6a28      	ldr	r0, [r5, #32]
   1f4ba:	4282      	cmp	r2, r0
   1f4bc:	d200      	bcs.n	1f4c0 <tcc_init+0x6c>
   1f4be:	e1b7      	b.n	1f830 <tcc_init+0x3dc>
   1f4c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1f4c2:	4282      	cmp	r2, r0
   1f4c4:	d200      	bcs.n	1f4c8 <tcc_init+0x74>
   1f4c6:	e1b5      	b.n	1f834 <tcc_init+0x3e0>
   1f4c8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1f4ca:	4282      	cmp	r2, r0
   1f4cc:	d200      	bcs.n	1f4d0 <tcc_init+0x7c>
   1f4ce:	e1b3      	b.n	1f838 <tcc_init+0x3e4>
   1f4d0:	2298      	movs	r2, #152	; 0x98
   1f4d2:	4694      	mov	ip, r2
   1f4d4:	44ac      	add	ip, r5
   1f4d6:	4662      	mov	r2, ip
   1f4d8:	9208      	str	r2, [sp, #32]
   1f4da:	2000      	movs	r0, #0
   1f4dc:	e003      	b.n	1f4e6 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f4de:	3001      	adds	r0, #1
   1f4e0:	3201      	adds	r2, #1
   1f4e2:	2808      	cmp	r0, #8
   1f4e4:	d008      	beq.n	1f4f8 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f4e6:	7816      	ldrb	r6, [r2, #0]
   1f4e8:	2e00      	cmp	r6, #0
   1f4ea:	d0f8      	beq.n	1f4de <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   1f4ec:	4ea6      	ldr	r6, [pc, #664]	; (1f788 <tcc_init+0x334>)
   1f4ee:	5c76      	ldrb	r6, [r6, r1]
   1f4f0:	4286      	cmp	r6, r0
   1f4f2:	dcf4      	bgt.n	1f4de <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   1f4f4:	2017      	movs	r0, #23
   1f4f6:	e7c7      	b.n	1f488 <tcc_init+0x34>
   1f4f8:	2200      	movs	r2, #0
   1f4fa:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f4fc:	2080      	movs	r0, #128	; 0x80
   1f4fe:	0440      	lsls	r0, r0, #17
   1f500:	4684      	mov	ip, r0
   1f502:	e002      	b.n	1f50a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1f504:	3201      	adds	r2, #1
   1f506:	2a04      	cmp	r2, #4
   1f508:	d00e      	beq.n	1f528 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   1f50a:	18a8      	adds	r0, r5, r2
   1f50c:	7c00      	ldrb	r0, [r0, #16]
   1f50e:	2801      	cmp	r0, #1
   1f510:	d1f8      	bne.n	1f504 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1f512:	489e      	ldr	r0, [pc, #632]	; (1f78c <tcc_init+0x338>)
   1f514:	5c40      	ldrb	r0, [r0, r1]
   1f516:	4290      	cmp	r0, r2
   1f518:	da00      	bge.n	1f51c <tcc_init+0xc8>
   1f51a:	e18f      	b.n	1f83c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f51c:	4660      	mov	r0, ip
   1f51e:	4090      	lsls	r0, r2
   1f520:	9e02      	ldr	r6, [sp, #8]
   1f522:	4306      	orrs	r6, r0
   1f524:	9602      	str	r6, [sp, #8]
   1f526:	e7ed      	b.n	1f504 <tcc_init+0xb0>
	if (config->run_in_standby) {
   1f528:	329d      	adds	r2, #157	; 0x9d
   1f52a:	5caa      	ldrb	r2, [r5, r2]
   1f52c:	2a00      	cmp	r2, #0
   1f52e:	d004      	beq.n	1f53a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1f530:	2280      	movs	r2, #128	; 0x80
   1f532:	0112      	lsls	r2, r2, #4
   1f534:	9902      	ldr	r1, [sp, #8]
   1f536:	4311      	orrs	r1, r2
   1f538:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   1f53a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   1f53c:	1e51      	subs	r1, r2, #1
   1f53e:	418a      	sbcs	r2, r1
   1f540:	0092      	lsls	r2, r2, #2
   1f542:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   1f544:	7a6a      	ldrb	r2, [r5, #9]
   1f546:	2a01      	cmp	r2, #1
   1f548:	d022      	beq.n	1f590 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1f54a:	4a90      	ldr	r2, [pc, #576]	; (1f78c <tcc_init+0x338>)
   1f54c:	5cd2      	ldrb	r2, [r2, r3]
   1f54e:	0011      	movs	r1, r2
   1f550:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   1f552:	2235      	movs	r2, #53	; 0x35
   1f554:	5caa      	ldrb	r2, [r5, r2]
   1f556:	428a      	cmp	r2, r1
   1f558:	d300      	bcc.n	1f55c <tcc_init+0x108>
   1f55a:	e179      	b.n	1f850 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f55c:	212c      	movs	r1, #44	; 0x2c
   1f55e:	5c69      	ldrb	r1, [r5, r1]
   1f560:	290f      	cmp	r1, #15
   1f562:	d900      	bls.n	1f566 <tcc_init+0x112>
   1f564:	e174      	b.n	1f850 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f566:	7b28      	ldrb	r0, [r5, #12]
   1f568:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f56a:	7ae8      	ldrb	r0, [r5, #11]
   1f56c:	900b      	str	r0, [sp, #44]	; 0x2c
   1f56e:	202d      	movs	r0, #45	; 0x2d
   1f570:	4682      	mov	sl, r0
   1f572:	44aa      	add	sl, r5
   1f574:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f576:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   1f578:	ae0e      	add	r6, sp, #56	; 0x38
   1f57a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f57c:	26c0      	movs	r6, #192	; 0xc0
   1f57e:	0136      	lsls	r6, r6, #4
   1f580:	46b1      	mov	r9, r6
   1f582:	4684      	mov	ip, r0
   1f584:	46a0      	mov	r8, r4
   1f586:	0028      	movs	r0, r5
   1f588:	4655      	mov	r5, sl
   1f58a:	9309      	str	r3, [sp, #36]	; 0x24
   1f58c:	4682      	mov	sl, r0
   1f58e:	e035      	b.n	1f5fc <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1f590:	9906      	ldr	r1, [sp, #24]
   1f592:	4311      	orrs	r1, r2
   1f594:	9106      	str	r1, [sp, #24]
   1f596:	e7d8      	b.n	1f54a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f598:	0292      	lsls	r2, r2, #10
   1f59a:	464f      	mov	r7, r9
   1f59c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f59e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1f5a0:	7919      	ldrb	r1, [r3, #4]
   1f5a2:	468b      	mov	fp, r1
   1f5a4:	2103      	movs	r1, #3
   1f5a6:	465f      	mov	r7, fp
   1f5a8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5aa:	430a      	orrs	r2, r1
   1f5ac:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1f5ae:	795a      	ldrb	r2, [r3, #5]
   1f5b0:	0152      	lsls	r2, r2, #5
   1f5b2:	2160      	movs	r1, #96	; 0x60
   1f5b4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5b6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1f5b8:	7999      	ldrb	r1, [r3, #6]
   1f5ba:	0209      	lsls	r1, r1, #8
   1f5bc:	26c0      	movs	r6, #192	; 0xc0
   1f5be:	00b6      	lsls	r6, r6, #2
   1f5c0:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5c2:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1f5c4:	79da      	ldrb	r2, [r3, #7]
   1f5c6:	0312      	lsls	r2, r2, #12
   1f5c8:	21e0      	movs	r1, #224	; 0xe0
   1f5ca:	01c9      	lsls	r1, r1, #7
   1f5cc:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5ce:	4316      	orrs	r6, r2
   1f5d0:	4334      	orrs	r4, r6
   1f5d2:	9a03      	ldr	r2, [sp, #12]
   1f5d4:	4314      	orrs	r4, r2
   1f5d6:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   1f5d8:	4662      	mov	r2, ip
   1f5da:	9907      	ldr	r1, [sp, #28]
   1f5dc:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1f5de:	2a04      	cmp	r2, #4
   1f5e0:	d02a      	beq.n	1f638 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1f5e2:	7c9a      	ldrb	r2, [r3, #18]
   1f5e4:	9905      	ldr	r1, [sp, #20]
   1f5e6:	4291      	cmp	r1, r2
   1f5e8:	d800      	bhi.n	1f5ec <tcc_init+0x198>
   1f5ea:	e131      	b.n	1f850 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f5ec:	7a59      	ldrb	r1, [r3, #9]
   1f5ee:	350a      	adds	r5, #10
   1f5f0:	2304      	movs	r3, #4
   1f5f2:	469b      	mov	fp, r3
   1f5f4:	44dc      	add	ip, fp
   1f5f6:	290f      	cmp	r1, #15
   1f5f8:	d900      	bls.n	1f5fc <tcc_init+0x1a8>
   1f5fa:	e129      	b.n	1f850 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5fc:	0609      	lsls	r1, r1, #24
   1f5fe:	23f0      	movs	r3, #240	; 0xf0
   1f600:	051b      	lsls	r3, r3, #20
   1f602:	4019      	ands	r1, r3
   1f604:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   1f606:	782e      	ldrb	r6, [r5, #0]
   1f608:	0436      	lsls	r6, r6, #16
   1f60a:	20ff      	movs	r0, #255	; 0xff
   1f60c:	0400      	lsls	r0, r0, #16
   1f60e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f610:	7868      	ldrb	r0, [r5, #1]
   1f612:	2480      	movs	r4, #128	; 0x80
   1f614:	2800      	cmp	r0, #0
   1f616:	d100      	bne.n	1f61a <tcc_init+0x1c6>
   1f618:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   1f61a:	7898      	ldrb	r0, [r3, #2]
   1f61c:	2708      	movs	r7, #8
   1f61e:	9703      	str	r7, [sp, #12]
   1f620:	2800      	cmp	r0, #0
   1f622:	d101      	bne.n	1f628 <tcc_init+0x1d4>
   1f624:	9804      	ldr	r0, [sp, #16]
   1f626:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   1f628:	78d8      	ldrb	r0, [r3, #3]
   1f62a:	4683      	mov	fp, r0
   1f62c:	2010      	movs	r0, #16
   1f62e:	465f      	mov	r7, fp
   1f630:	2f00      	cmp	r7, #0
   1f632:	d1b1      	bne.n	1f598 <tcc_init+0x144>
   1f634:	9804      	ldr	r0, [sp, #16]
   1f636:	e7af      	b.n	1f598 <tcc_init+0x144>
   1f638:	4644      	mov	r4, r8
   1f63a:	4655      	mov	r5, sl
   1f63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1f63e:	4a52      	ldr	r2, [pc, #328]	; (1f788 <tcc_init+0x334>)
   1f640:	5cd2      	ldrb	r2, [r2, r3]
   1f642:	4691      	mov	r9, r2
   1f644:	4651      	mov	r1, sl
   1f646:	3150      	adds	r1, #80	; 0x50
   1f648:	4650      	mov	r0, sl
   1f64a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   1f64c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f64e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f650:	2601      	movs	r6, #1
   1f652:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f654:	2602      	movs	r6, #2
   1f656:	36ff      	adds	r6, #255	; 0xff
   1f658:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f65a:	2680      	movs	r6, #128	; 0x80
   1f65c:	0276      	lsls	r6, r6, #9
   1f65e:	46b0      	mov	r8, r6
   1f660:	46a4      	mov	ip, r4
   1f662:	001c      	movs	r4, r3
   1f664:	464b      	mov	r3, r9
   1f666:	e00f      	b.n	1f688 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f668:	7806      	ldrb	r6, [r0, #0]
   1f66a:	2e00      	cmp	r6, #0
   1f66c:	d007      	beq.n	1f67e <tcc_init+0x22a>
			if (i >= ow_num) {
   1f66e:	4293      	cmp	r3, r2
   1f670:	d800      	bhi.n	1f674 <tcc_init+0x220>
   1f672:	e0e7      	b.n	1f844 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   1f674:	2e02      	cmp	r6, #2
   1f676:	d014      	beq.n	1f6a2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f678:	4656      	mov	r6, sl
   1f67a:	4096      	lsls	r6, r2
   1f67c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f67e:	3201      	adds	r2, #1
   1f680:	3101      	adds	r1, #1
   1f682:	3002      	adds	r0, #2
   1f684:	2a08      	cmp	r2, #8
   1f686:	d010      	beq.n	1f6aa <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   1f688:	780e      	ldrb	r6, [r1, #0]
   1f68a:	2e00      	cmp	r6, #0
   1f68c:	d0ec      	beq.n	1f668 <tcc_init+0x214>
			if (i >= ow_num) {
   1f68e:	4293      	cmp	r3, r2
   1f690:	d800      	bhi.n	1f694 <tcc_init+0x240>
   1f692:	e0d5      	b.n	1f840 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f694:	4646      	mov	r6, r8
   1f696:	4096      	lsls	r6, r2
   1f698:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f69a:	7806      	ldrb	r6, [r0, #0]
   1f69c:	2e00      	cmp	r6, #0
   1f69e:	d1e9      	bne.n	1f674 <tcc_init+0x220>
   1f6a0:	e7ed      	b.n	1f67e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f6a2:	465e      	mov	r6, fp
   1f6a4:	4096      	lsls	r6, r2
   1f6a6:	4337      	orrs	r7, r6
   1f6a8:	e7e9      	b.n	1f67e <tcc_init+0x22a>
   1f6aa:	4699      	mov	r9, r3
   1f6ac:	0023      	movs	r3, r4
   1f6ae:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f6b0:	7e6a      	ldrb	r2, [r5, #25]
   1f6b2:	0112      	lsls	r2, r2, #4
   1f6b4:	2130      	movs	r1, #48	; 0x30
   1f6b6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   1f6b8:	7e28      	ldrb	r0, [r5, #24]
   1f6ba:	2207      	movs	r2, #7
   1f6bc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f6be:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f6c0:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1f6c2:	2080      	movs	r0, #128	; 0x80
   1f6c4:	0240      	lsls	r0, r0, #9
   1f6c6:	000e      	movs	r6, r1
   1f6c8:	e002      	b.n	1f6d0 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f6ca:	3201      	adds	r2, #1
   1f6cc:	2a04      	cmp	r2, #4
   1f6ce:	d00b      	beq.n	1f6e8 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   1f6d0:	18a9      	adds	r1, r5, r2
   1f6d2:	7d09      	ldrb	r1, [r1, #20]
   1f6d4:	2900      	cmp	r1, #0
   1f6d6:	d0f8      	beq.n	1f6ca <tcc_init+0x276>
			if (n >= cc_num) {
   1f6d8:	9905      	ldr	r1, [sp, #20]
   1f6da:	4291      	cmp	r1, r2
   1f6dc:	dc00      	bgt.n	1f6e0 <tcc_init+0x28c>
   1f6de:	e0b3      	b.n	1f848 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   1f6e0:	0001      	movs	r1, r0
   1f6e2:	4091      	lsls	r1, r2
   1f6e4:	430e      	orrs	r6, r1
   1f6e6:	e7f0      	b.n	1f6ca <tcc_init+0x276>
   1f6e8:	46b2      	mov	sl, r6
   1f6ea:	9801      	ldr	r0, [sp, #4]
   1f6ec:	0002      	movs	r2, r0
   1f6ee:	3204      	adds	r2, #4
   1f6f0:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   1f6f2:	2100      	movs	r1, #0
   1f6f4:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f6f6:	4282      	cmp	r2, r0
   1f6f8:	d1fc      	bne.n	1f6f4 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   1f6fa:	2200      	movs	r2, #0
   1f6fc:	9801      	ldr	r0, [sp, #4]
   1f6fe:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1f700:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1f702:	0099      	lsls	r1, r3, #2
   1f704:	4a22      	ldr	r2, [pc, #136]	; (1f790 <tcc_init+0x33c>)
   1f706:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   1f708:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1f70a:	22a0      	movs	r2, #160	; 0xa0
   1f70c:	5ca9      	ldrb	r1, [r5, r2]
   1f70e:	3a64      	subs	r2, #100	; 0x64
   1f710:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   1f712:	a90d      	add	r1, sp, #52	; 0x34
   1f714:	7aaa      	ldrb	r2, [r5, #10]
   1f716:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1f718:	4a1e      	ldr	r2, [pc, #120]	; (1f794 <tcc_init+0x340>)
   1f71a:	5cd6      	ldrb	r6, [r2, r3]
   1f71c:	0030      	movs	r0, r6
   1f71e:	4b1e      	ldr	r3, [pc, #120]	; (1f798 <tcc_init+0x344>)
   1f720:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   1f722:	0030      	movs	r0, r6
   1f724:	4b1d      	ldr	r3, [pc, #116]	; (1f79c <tcc_init+0x348>)
   1f726:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f728:	464b      	mov	r3, r9
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	dd3c      	ble.n	1f7a8 <tcc_init+0x354>
   1f72e:	002e      	movs	r6, r5
   1f730:	3658      	adds	r6, #88	; 0x58
   1f732:	3398      	adds	r3, #152	; 0x98
   1f734:	4698      	mov	r8, r3
   1f736:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1f738:	2301      	movs	r3, #1
   1f73a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   1f73c:	46ab      	mov	fp, r5
   1f73e:	4645      	mov	r5, r8
   1f740:	46a0      	mov	r8, r4
   1f742:	9c08      	ldr	r4, [sp, #32]
   1f744:	e003      	b.n	1f74e <tcc_init+0x2fa>
   1f746:	3401      	adds	r4, #1
   1f748:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f74a:	42ac      	cmp	r4, r5
   1f74c:	d02a      	beq.n	1f7a4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f74e:	7823      	ldrb	r3, [r4, #0]
   1f750:	2b00      	cmp	r3, #0
   1f752:	d0f8      	beq.n	1f746 <tcc_init+0x2f2>
   1f754:	ab0c      	add	r3, sp, #48	; 0x30
   1f756:	464a      	mov	r2, r9
   1f758:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1f75a:	2300      	movs	r3, #0
   1f75c:	aa0c      	add	r2, sp, #48	; 0x30
   1f75e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1f760:	0013      	movs	r3, r2
   1f762:	2220      	movs	r2, #32
   1f764:	18b2      	adds	r2, r6, r2
   1f766:	7812      	ldrb	r2, [r2, #0]
   1f768:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1f76a:	464a      	mov	r2, r9
   1f76c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   1f76e:	7830      	ldrb	r0, [r6, #0]
   1f770:	0019      	movs	r1, r3
   1f772:	4b0b      	ldr	r3, [pc, #44]	; (1f7a0 <tcc_init+0x34c>)
   1f774:	4798      	blx	r3
   1f776:	e7e6      	b.n	1f746 <tcc_init+0x2f2>
   1f778:	0001f2d5 	.word	0x0001f2d5
   1f77c:	40000400 	.word	0x40000400
   1f780:	0002a3cc 	.word	0x0002a3cc
   1f784:	0002a3e0 	.word	0x0002a3e0
   1f788:	0002a3ec 	.word	0x0002a3ec
   1f78c:	0002a3d8 	.word	0x0002a3d8
   1f790:	200055dc 	.word	0x200055dc
   1f794:	0002a3dc 	.word	0x0002a3dc
   1f798:	0001f14d 	.word	0x0001f14d
   1f79c:	0001f0c1 	.word	0x0001f0c1
   1f7a0:	0001f275 	.word	0x0001f275
   1f7a4:	4644      	mov	r4, r8
   1f7a6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f7aa:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f7ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f7ae:	0212      	lsls	r2, r2, #8
   1f7b0:	4313      	orrs	r3, r2
   1f7b2:	9a02      	ldr	r2, [sp, #8]
   1f7b4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   1f7b6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f7b8:	2204      	movs	r2, #4
   1f7ba:	68a3      	ldr	r3, [r4, #8]
   1f7bc:	421a      	tst	r2, r3
   1f7be:	d1fc      	bne.n	1f7ba <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   1f7c0:	23ff      	movs	r3, #255	; 0xff
   1f7c2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f7c4:	2204      	movs	r2, #4
   1f7c6:	68a3      	ldr	r3, [r4, #8]
   1f7c8:	421a      	tst	r2, r3
   1f7ca:	d1fc      	bne.n	1f7c6 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   1f7cc:	466b      	mov	r3, sp
   1f7ce:	7e1b      	ldrb	r3, [r3, #24]
   1f7d0:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   1f7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f7d4:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   1f7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f7d8:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   1f7da:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   1f7dc:	4a1d      	ldr	r2, [pc, #116]	; (1f854 <tcc_init+0x400>)
   1f7de:	68a3      	ldr	r3, [r4, #8]
   1f7e0:	4213      	tst	r3, r2
   1f7e2:	d1fc      	bne.n	1f7de <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   1f7e4:	4653      	mov	r3, sl
   1f7e6:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   1f7e8:	2210      	movs	r2, #16
   1f7ea:	68a3      	ldr	r3, [r4, #8]
   1f7ec:	421a      	tst	r2, r3
   1f7ee:	d1fc      	bne.n	1f7ea <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   1f7f0:	682b      	ldr	r3, [r5, #0]
   1f7f2:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   1f7f4:	4a18      	ldr	r2, [pc, #96]	; (1f858 <tcc_init+0x404>)
   1f7f6:	68a3      	ldr	r3, [r4, #8]
   1f7f8:	4213      	tst	r3, r2
   1f7fa:	d1fc      	bne.n	1f7f6 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   1f7fc:	686b      	ldr	r3, [r5, #4]
   1f7fe:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f800:	9805      	ldr	r0, [sp, #20]
   1f802:	2800      	cmp	r0, #0
   1f804:	dd22      	ble.n	1f84c <tcc_init+0x3f8>
   1f806:	351c      	adds	r5, #28
   1f808:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   1f80a:	4e14      	ldr	r6, [pc, #80]	; (1f85c <tcc_init+0x408>)
   1f80c:	0032      	movs	r2, r6
   1f80e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   1f810:	68a3      	ldr	r3, [r4, #8]
   1f812:	421a      	tst	r2, r3
   1f814:	d1fc      	bne.n	1f810 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   1f816:	cd04      	ldmia	r5!, {r2}
   1f818:	000b      	movs	r3, r1
   1f81a:	3310      	adds	r3, #16
   1f81c:	009b      	lsls	r3, r3, #2
   1f81e:	18e3      	adds	r3, r4, r3
   1f820:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f822:	3101      	adds	r1, #1
   1f824:	4288      	cmp	r0, r1
   1f826:	dcf1      	bgt.n	1f80c <tcc_init+0x3b8>
	return STATUS_OK;
   1f828:	2000      	movs	r0, #0
   1f82a:	e62d      	b.n	1f488 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   1f82c:	2017      	movs	r0, #23
   1f82e:	e62b      	b.n	1f488 <tcc_init+0x34>
   1f830:	2017      	movs	r0, #23
   1f832:	e629      	b.n	1f488 <tcc_init+0x34>
   1f834:	2017      	movs	r0, #23
   1f836:	e627      	b.n	1f488 <tcc_init+0x34>
   1f838:	2017      	movs	r0, #23
   1f83a:	e625      	b.n	1f488 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f83c:	2017      	movs	r0, #23
   1f83e:	e623      	b.n	1f488 <tcc_init+0x34>
			if (i >= ow_num) {
   1f840:	2017      	movs	r0, #23
   1f842:	e621      	b.n	1f488 <tcc_init+0x34>
			if (i >= ow_num) {
   1f844:	2017      	movs	r0, #23
   1f846:	e61f      	b.n	1f488 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f848:	2017      	movs	r0, #23
   1f84a:	e61d      	b.n	1f488 <tcc_init+0x34>
	return STATUS_OK;
   1f84c:	2000      	movs	r0, #0
   1f84e:	e61b      	b.n	1f488 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f850:	2017      	movs	r0, #23
   1f852:	e619      	b.n	1f488 <tcc_init+0x34>
   1f854:	00020040 	.word	0x00020040
   1f858:	00040080 	.word	0x00040080
   1f85c:	00080100 	.word	0x00080100

0001f860 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1f860:	0092      	lsls	r2, r2, #2
   1f862:	1883      	adds	r3, r0, r2
   1f864:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1f866:	4b03      	ldr	r3, [pc, #12]	; (1f874 <tcc_register_callback+0x14>)
   1f868:	58d3      	ldr	r3, [r2, r3]
   1f86a:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1f86c:	4313      	orrs	r3, r2
   1f86e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   1f870:	2000      	movs	r0, #0
   1f872:	4770      	bx	lr
   1f874:	0002a3f0 	.word	0x0002a3f0

0001f878 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1f878:	b570      	push	{r4, r5, r6, lr}
   1f87a:	0004      	movs	r4, r0
   1f87c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1f87e:	6800      	ldr	r0, [r0, #0]
   1f880:	4b09      	ldr	r3, [pc, #36]	; (1f8a8 <tcc_enable_callback+0x30>)
   1f882:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   1f884:	4b09      	ldr	r3, [pc, #36]	; (1f8ac <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f886:	5c1b      	ldrb	r3, [r3, r0]
   1f888:	221f      	movs	r2, #31
   1f88a:	401a      	ands	r2, r3
   1f88c:	2301      	movs	r3, #1
   1f88e:	4093      	lsls	r3, r2
   1f890:	4a07      	ldr	r2, [pc, #28]	; (1f8b0 <tcc_enable_callback+0x38>)
   1f892:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   1f894:	00ad      	lsls	r5, r5, #2
   1f896:	4b07      	ldr	r3, [pc, #28]	; (1f8b4 <tcc_enable_callback+0x3c>)
   1f898:	58ea      	ldr	r2, [r5, r3]
   1f89a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f89c:	4313      	orrs	r3, r2
   1f89e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1f8a0:	6823      	ldr	r3, [r4, #0]
   1f8a2:	629a      	str	r2, [r3, #40]	; 0x28
}
   1f8a4:	bd70      	pop	{r4, r5, r6, pc}
   1f8a6:	46c0      	nop			; (mov r8, r8)
   1f8a8:	0001f2d5 	.word	0x0001f2d5
   1f8ac:	0002a420 	.word	0x0002a420
   1f8b0:	e000e100 	.word	0xe000e100
   1f8b4:	0002a3f0 	.word	0x0002a3f0

0001f8b8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1f8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8ba:	46c6      	mov	lr, r8
   1f8bc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   1f8be:	0080      	lsls	r0, r0, #2
   1f8c0:	4b0e      	ldr	r3, [pc, #56]	; (1f8fc <_tcc_interrupt_handler+0x44>)
   1f8c2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f8c4:	683b      	ldr	r3, [r7, #0]
   1f8c6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f8ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f8cc:	4013      	ands	r3, r2
   1f8ce:	401e      	ands	r6, r3
   1f8d0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f8d2:	4b0b      	ldr	r3, [pc, #44]	; (1f900 <_tcc_interrupt_handler+0x48>)
   1f8d4:	4698      	mov	r8, r3
   1f8d6:	e002      	b.n	1f8de <_tcc_interrupt_handler+0x26>
   1f8d8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f8da:	2c30      	cmp	r4, #48	; 0x30
   1f8dc:	d00a      	beq.n	1f8f4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f8de:	4643      	mov	r3, r8
   1f8e0:	58e5      	ldr	r5, [r4, r3]
   1f8e2:	4235      	tst	r5, r6
   1f8e4:	d0f8      	beq.n	1f8d8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1f8e6:	193b      	adds	r3, r7, r4
   1f8e8:	685b      	ldr	r3, [r3, #4]
   1f8ea:	0038      	movs	r0, r7
   1f8ec:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1f8ee:	683b      	ldr	r3, [r7, #0]
   1f8f0:	62dd      	str	r5, [r3, #44]	; 0x2c
   1f8f2:	e7f1      	b.n	1f8d8 <_tcc_interrupt_handler+0x20>
		}
	}
}
   1f8f4:	bc04      	pop	{r2}
   1f8f6:	4690      	mov	r8, r2
   1f8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8fa:	46c0      	nop			; (mov r8, r8)
   1f8fc:	200055dc 	.word	0x200055dc
   1f900:	0002a3f0 	.word	0x0002a3f0

0001f904 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1f904:	b510      	push	{r4, lr}
   1f906:	2000      	movs	r0, #0
   1f908:	4b01      	ldr	r3, [pc, #4]	; (1f910 <TCC0_Handler+0xc>)
   1f90a:	4798      	blx	r3
   1f90c:	bd10      	pop	{r4, pc}
   1f90e:	46c0      	nop			; (mov r8, r8)
   1f910:	0001f8b9 	.word	0x0001f8b9

0001f914 <TCC1_Handler>:
   1f914:	b510      	push	{r4, lr}
   1f916:	2001      	movs	r0, #1
   1f918:	4b01      	ldr	r3, [pc, #4]	; (1f920 <TCC1_Handler+0xc>)
   1f91a:	4798      	blx	r3
   1f91c:	bd10      	pop	{r4, pc}
   1f91e:	46c0      	nop			; (mov r8, r8)
   1f920:	0001f8b9 	.word	0x0001f8b9

0001f924 <TCC2_Handler>:
   1f924:	b510      	push	{r4, lr}
   1f926:	2002      	movs	r0, #2
   1f928:	4b01      	ldr	r3, [pc, #4]	; (1f930 <TCC2_Handler+0xc>)
   1f92a:	4798      	blx	r3
   1f92c:	bd10      	pop	{r4, pc}
   1f92e:	46c0      	nop			; (mov r8, r8)
   1f930:	0001f8b9 	.word	0x0001f8b9

0001f934 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
   1f934:	2004      	movs	r0, #4
   1f936:	4671      	mov	r1, lr
   1f938:	4208      	tst	r0, r1
   1f93a:	d002      	beq.n	1f942 <_MSP>
   1f93c:	f3ef 8009 	mrs	r0, PSP
   1f940:	e001      	b.n	1f946 <_HALT>

0001f942 <_MSP>:
   1f942:	f3ef 8008 	mrs	r0, MSP

0001f946 <_HALT>:
   1f946:	6941      	ldr	r1, [r0, #20]
   1f948:	e074      	b.n	1fa34 <HardFault_HandlerC>
   1f94a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1f94c:	4770      	bx	lr
	...

0001f950 <Reset_Handler>:
{
   1f950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   1f952:	4a2a      	ldr	r2, [pc, #168]	; (1f9fc <Reset_Handler+0xac>)
   1f954:	4b2a      	ldr	r3, [pc, #168]	; (1fa00 <Reset_Handler+0xb0>)
   1f956:	429a      	cmp	r2, r3
   1f958:	d011      	beq.n	1f97e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1f95a:	001a      	movs	r2, r3
   1f95c:	4b29      	ldr	r3, [pc, #164]	; (1fa04 <Reset_Handler+0xb4>)
   1f95e:	429a      	cmp	r2, r3
   1f960:	d20d      	bcs.n	1f97e <Reset_Handler+0x2e>
   1f962:	4a29      	ldr	r2, [pc, #164]	; (1fa08 <Reset_Handler+0xb8>)
   1f964:	3303      	adds	r3, #3
   1f966:	1a9b      	subs	r3, r3, r2
   1f968:	089b      	lsrs	r3, r3, #2
   1f96a:	3301      	adds	r3, #1
   1f96c:	009b      	lsls	r3, r3, #2
   1f96e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   1f970:	4823      	ldr	r0, [pc, #140]	; (1fa00 <Reset_Handler+0xb0>)
   1f972:	4922      	ldr	r1, [pc, #136]	; (1f9fc <Reset_Handler+0xac>)
   1f974:	588c      	ldr	r4, [r1, r2]
   1f976:	5084      	str	r4, [r0, r2]
   1f978:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1f97a:	429a      	cmp	r2, r3
   1f97c:	d1fa      	bne.n	1f974 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   1f97e:	4a23      	ldr	r2, [pc, #140]	; (1fa0c <Reset_Handler+0xbc>)
   1f980:	4b23      	ldr	r3, [pc, #140]	; (1fa10 <Reset_Handler+0xc0>)
   1f982:	429a      	cmp	r2, r3
   1f984:	d20a      	bcs.n	1f99c <Reset_Handler+0x4c>
   1f986:	43d3      	mvns	r3, r2
   1f988:	4921      	ldr	r1, [pc, #132]	; (1fa10 <Reset_Handler+0xc0>)
   1f98a:	185b      	adds	r3, r3, r1
   1f98c:	2103      	movs	r1, #3
   1f98e:	438b      	bics	r3, r1
   1f990:	3304      	adds	r3, #4
   1f992:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   1f994:	2100      	movs	r1, #0
   1f996:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1f998:	4293      	cmp	r3, r2
   1f99a:	d1fc      	bne.n	1f996 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1f99c:	4a1d      	ldr	r2, [pc, #116]	; (1fa14 <Reset_Handler+0xc4>)
   1f99e:	21ff      	movs	r1, #255	; 0xff
   1f9a0:	4b1d      	ldr	r3, [pc, #116]	; (1fa18 <Reset_Handler+0xc8>)
   1f9a2:	438b      	bics	r3, r1
   1f9a4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1f9a6:	39fd      	subs	r1, #253	; 0xfd
   1f9a8:	2390      	movs	r3, #144	; 0x90
   1f9aa:	005b      	lsls	r3, r3, #1
   1f9ac:	4a1b      	ldr	r2, [pc, #108]	; (1fa1c <Reset_Handler+0xcc>)
   1f9ae:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1f9b0:	4a1b      	ldr	r2, [pc, #108]	; (1fa20 <Reset_Handler+0xd0>)
   1f9b2:	78d3      	ldrb	r3, [r2, #3]
   1f9b4:	2503      	movs	r5, #3
   1f9b6:	43ab      	bics	r3, r5
   1f9b8:	2402      	movs	r4, #2
   1f9ba:	4323      	orrs	r3, r4
   1f9bc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1f9be:	78d3      	ldrb	r3, [r2, #3]
   1f9c0:	270c      	movs	r7, #12
   1f9c2:	43bb      	bics	r3, r7
   1f9c4:	2608      	movs	r6, #8
   1f9c6:	4333      	orrs	r3, r6
   1f9c8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1f9ca:	4b16      	ldr	r3, [pc, #88]	; (1fa24 <Reset_Handler+0xd4>)
   1f9cc:	7b98      	ldrb	r0, [r3, #14]
   1f9ce:	2230      	movs	r2, #48	; 0x30
   1f9d0:	4390      	bics	r0, r2
   1f9d2:	2220      	movs	r2, #32
   1f9d4:	4310      	orrs	r0, r2
   1f9d6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1f9d8:	7b99      	ldrb	r1, [r3, #14]
   1f9da:	43b9      	bics	r1, r7
   1f9dc:	4331      	orrs	r1, r6
   1f9de:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1f9e0:	7b9a      	ldrb	r2, [r3, #14]
   1f9e2:	43aa      	bics	r2, r5
   1f9e4:	4322      	orrs	r2, r4
   1f9e6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1f9e8:	4a0f      	ldr	r2, [pc, #60]	; (1fa28 <Reset_Handler+0xd8>)
   1f9ea:	6853      	ldr	r3, [r2, #4]
   1f9ec:	2180      	movs	r1, #128	; 0x80
   1f9ee:	430b      	orrs	r3, r1
   1f9f0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   1f9f2:	4b0e      	ldr	r3, [pc, #56]	; (1fa2c <Reset_Handler+0xdc>)
   1f9f4:	4798      	blx	r3
        main();
   1f9f6:	4b0e      	ldr	r3, [pc, #56]	; (1fa30 <Reset_Handler+0xe0>)
   1f9f8:	4798      	blx	r3
   1f9fa:	e7fe      	b.n	1f9fa <Reset_Handler+0xaa>
   1f9fc:	0002b184 	.word	0x0002b184
   1fa00:	20000000 	.word	0x20000000
   1fa04:	200002ac 	.word	0x200002ac
   1fa08:	20000004 	.word	0x20000004
   1fa0c:	200002b0 	.word	0x200002b0
   1fa10:	2000564c 	.word	0x2000564c
   1fa14:	e000ed00 	.word	0xe000ed00
   1fa18:	00012000 	.word	0x00012000
   1fa1c:	41007000 	.word	0x41007000
   1fa20:	41005000 	.word	0x41005000
   1fa24:	41004800 	.word	0x41004800
   1fa28:	41004000 	.word	0x41004000
   1fa2c:	000261ad 	.word	0x000261ad
   1fa30:	00023e11 	.word	0x00023e11

0001fa34 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1fa34:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1fa36:	6803      	ldr	r3, [r0, #0]
   1fa38:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1fa3a:	6843      	ldr	r3, [r0, #4]
   1fa3c:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1fa3e:	6883      	ldr	r3, [r0, #8]
   1fa40:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1fa42:	68c3      	ldr	r3, [r0, #12]
   1fa44:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1fa46:	6903      	ldr	r3, [r0, #16]
   1fa48:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1fa4a:	6943      	ldr	r3, [r0, #20]
   1fa4c:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1fa4e:	6983      	ldr	r3, [r0, #24]
   1fa50:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1fa52:	69c3      	ldr	r3, [r0, #28]
   1fa54:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1fa56:	4b0a      	ldr	r3, [pc, #40]	; (1fa80 <HardFault_HandlerC+0x4c>)
   1fa58:	681b      	ldr	r3, [r3, #0]
   1fa5a:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1fa5c:	4b09      	ldr	r3, [pc, #36]	; (1fa84 <HardFault_HandlerC+0x50>)
   1fa5e:	681b      	ldr	r3, [r3, #0]
   1fa60:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1fa62:	4b09      	ldr	r3, [pc, #36]	; (1fa88 <HardFault_HandlerC+0x54>)
   1fa64:	681b      	ldr	r3, [r3, #0]
   1fa66:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1fa68:	4b08      	ldr	r3, [pc, #32]	; (1fa8c <HardFault_HandlerC+0x58>)
   1fa6a:	681b      	ldr	r3, [r3, #0]
   1fa6c:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1fa6e:	4b08      	ldr	r3, [pc, #32]	; (1fa90 <HardFault_HandlerC+0x5c>)
   1fa70:	681b      	ldr	r3, [r3, #0]
   1fa72:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1fa74:	4b07      	ldr	r3, [pc, #28]	; (1fa94 <HardFault_HandlerC+0x60>)
   1fa76:	681b      	ldr	r3, [r3, #0]
   1fa78:	9301      	str	r3, [sp, #4]
	

	__asm("BKPT #0\n") ; // Break into the debugger
   1fa7a:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1fa7c:	b00e      	add	sp, #56	; 0x38
   1fa7e:	4770      	bx	lr
   1fa80:	e000ed28 	.word	0xe000ed28
   1fa84:	e000ed2c 	.word	0xe000ed2c
   1fa88:	e000ed30 	.word	0xe000ed30
   1fa8c:	e000ed3c 	.word	0xe000ed3c
   1fa90:	e000ed34 	.word	0xe000ed34
   1fa94:	e000ed38 	.word	0xe000ed38

0001fa98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1fa98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa9a:	46c6      	mov	lr, r8
   1fa9c:	b500      	push	{lr}
   1fa9e:	000c      	movs	r4, r1
   1faa0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   1faa2:	2800      	cmp	r0, #0
   1faa4:	d10f      	bne.n	1fac6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   1faa6:	2a00      	cmp	r2, #0
   1faa8:	dd11      	ble.n	1face <_read+0x36>
   1faaa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1faac:	4e09      	ldr	r6, [pc, #36]	; (1fad4 <_read+0x3c>)
   1faae:	4d0a      	ldr	r5, [pc, #40]	; (1fad8 <_read+0x40>)
   1fab0:	6830      	ldr	r0, [r6, #0]
   1fab2:	0021      	movs	r1, r4
   1fab4:	682b      	ldr	r3, [r5, #0]
   1fab6:	4798      	blx	r3
		ptr++;
   1fab8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1faba:	42bc      	cmp	r4, r7
   1fabc:	d1f8      	bne.n	1fab0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1fabe:	4640      	mov	r0, r8
   1fac0:	bc04      	pop	{r2}
   1fac2:	4690      	mov	r8, r2
   1fac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fac6:	2301      	movs	r3, #1
   1fac8:	425b      	negs	r3, r3
   1faca:	4698      	mov	r8, r3
   1facc:	e7f7      	b.n	1fabe <_read+0x26>
	for (; len > 0; --len) {
   1face:	4680      	mov	r8, r0
   1fad0:	e7f5      	b.n	1fabe <_read+0x26>
   1fad2:	46c0      	nop			; (mov r8, r8)
   1fad4:	200055f0 	.word	0x200055f0
   1fad8:	200055e8 	.word	0x200055e8

0001fadc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fade:	46c6      	mov	lr, r8
   1fae0:	b500      	push	{lr}
   1fae2:	000e      	movs	r6, r1
   1fae4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1fae6:	3801      	subs	r0, #1
   1fae8:	2802      	cmp	r0, #2
   1faea:	d810      	bhi.n	1fb0e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1faec:	2a00      	cmp	r2, #0
   1faee:	d011      	beq.n	1fb14 <_write+0x38>
   1faf0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1faf2:	4b0c      	ldr	r3, [pc, #48]	; (1fb24 <_write+0x48>)
   1faf4:	4698      	mov	r8, r3
   1faf6:	4f0c      	ldr	r7, [pc, #48]	; (1fb28 <_write+0x4c>)
   1faf8:	4643      	mov	r3, r8
   1fafa:	6818      	ldr	r0, [r3, #0]
   1fafc:	5d31      	ldrb	r1, [r6, r4]
   1fafe:	683b      	ldr	r3, [r7, #0]
   1fb00:	4798      	blx	r3
   1fb02:	2800      	cmp	r0, #0
   1fb04:	db08      	blt.n	1fb18 <_write+0x3c>
			return -1;
		}
		++nChars;
   1fb06:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   1fb08:	42a5      	cmp	r5, r4
   1fb0a:	d1f5      	bne.n	1faf8 <_write+0x1c>
   1fb0c:	e006      	b.n	1fb1c <_write+0x40>
		return -1;
   1fb0e:	2401      	movs	r4, #1
   1fb10:	4264      	negs	r4, r4
   1fb12:	e003      	b.n	1fb1c <_write+0x40>
	for (; len != 0; --len) {
   1fb14:	0014      	movs	r4, r2
   1fb16:	e001      	b.n	1fb1c <_write+0x40>
			return -1;
   1fb18:	2401      	movs	r4, #1
   1fb1a:	4264      	negs	r4, r4
	}
	return nChars;
}
   1fb1c:	0020      	movs	r0, r4
   1fb1e:	bc04      	pop	{r2}
   1fb20:	4690      	mov	r8, r2
   1fb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb24:	200055f0 	.word	0x200055f0
   1fb28:	200055ec 	.word	0x200055ec

0001fb2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1fb2c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1fb2e:	4a06      	ldr	r2, [pc, #24]	; (1fb48 <_sbrk+0x1c>)
   1fb30:	6812      	ldr	r2, [r2, #0]
   1fb32:	2a00      	cmp	r2, #0
   1fb34:	d004      	beq.n	1fb40 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   1fb36:	4a04      	ldr	r2, [pc, #16]	; (1fb48 <_sbrk+0x1c>)
   1fb38:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1fb3a:	18c3      	adds	r3, r0, r3
   1fb3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1fb3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   1fb40:	4902      	ldr	r1, [pc, #8]	; (1fb4c <_sbrk+0x20>)
   1fb42:	4a01      	ldr	r2, [pc, #4]	; (1fb48 <_sbrk+0x1c>)
   1fb44:	6011      	str	r1, [r2, #0]
   1fb46:	e7f6      	b.n	1fb36 <_sbrk+0xa>
   1fb48:	20003d30 	.word	0x20003d30
   1fb4c:	20007650 	.word	0x20007650

0001fb50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   1fb50:	2001      	movs	r0, #1
   1fb52:	4240      	negs	r0, r0
   1fb54:	4770      	bx	lr

0001fb56 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   1fb56:	2380      	movs	r3, #128	; 0x80
   1fb58:	019b      	lsls	r3, r3, #6
   1fb5a:	604b      	str	r3, [r1, #4]

	return 0;
}
   1fb5c:	2000      	movs	r0, #0
   1fb5e:	4770      	bx	lr

0001fb60 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   1fb60:	2001      	movs	r0, #1
   1fb62:	4770      	bx	lr

0001fb64 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   1fb64:	2000      	movs	r0, #0
   1fb66:	4770      	bx	lr

0001fb68 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1fb68:	b530      	push	{r4, r5, lr}
   1fb6a:	b087      	sub	sp, #28
   1fb6c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1fb6e:	aa01      	add	r2, sp, #4
   1fb70:	23a0      	movs	r3, #160	; 0xa0
   1fb72:	011b      	lsls	r3, r3, #4
   1fb74:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   1fb76:	2300      	movs	r3, #0
   1fb78:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1fb7a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   1fb7c:	21fa      	movs	r1, #250	; 0xfa
   1fb7e:	00c9      	lsls	r1, r1, #3
   1fb80:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   1fb82:	2101      	movs	r1, #1
   1fb84:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   1fb86:	2004      	movs	r0, #4
   1fb88:	7210      	strb	r0, [r2, #8]
   1fb8a:	7253      	strb	r3, [r2, #9]
   1fb8c:	7293      	strb	r3, [r2, #10]
   1fb8e:	72d3      	strb	r3, [r2, #11]
   1fb90:	7311      	strb	r1, [r2, #12]
   1fb92:	7351      	strb	r1, [r2, #13]
   1fb94:	4b14      	ldr	r3, [pc, #80]	; (1fbe8 <disk_initialize+0x80>)
   1fb96:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1fb98:	2306      	movs	r3, #6
   1fb9a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1fb9c:	4d13      	ldr	r5, [pc, #76]	; (1fbec <disk_initialize+0x84>)
   1fb9e:	4914      	ldr	r1, [pc, #80]	; (1fbf0 <disk_initialize+0x88>)
   1fba0:	0028      	movs	r0, r5
   1fba2:	4b14      	ldr	r3, [pc, #80]	; (1fbf4 <disk_initialize+0x8c>)
   1fba4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   1fba6:	0028      	movs	r0, r5
   1fba8:	4b13      	ldr	r3, [pc, #76]	; (1fbf8 <disk_initialize+0x90>)
   1fbaa:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1fbac:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1fbae:	2c01      	cmp	r4, #1
   1fbb0:	d901      	bls.n	1fbb6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   1fbb2:	b007      	add	sp, #28
   1fbb4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   1fbb6:	0020      	movs	r0, r4
   1fbb8:	4b10      	ldr	r3, [pc, #64]	; (1fbfc <disk_initialize+0x94>)
   1fbba:	4798      	blx	r3
   1fbbc:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1fbbe:	2803      	cmp	r0, #3
   1fbc0:	d106      	bne.n	1fbd0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   1fbc2:	0020      	movs	r0, r4
   1fbc4:	4b0d      	ldr	r3, [pc, #52]	; (1fbfc <disk_initialize+0x94>)
   1fbc6:	4798      	blx	r3
   1fbc8:	0003      	movs	r3, r0
		return STA_NOINIT;
   1fbca:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1fbcc:	2b03      	cmp	r3, #3
   1fbce:	d0f0      	beq.n	1fbb2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   1fbd0:	2b00      	cmp	r3, #0
   1fbd2:	d106      	bne.n	1fbe2 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   1fbd4:	0020      	movs	r0, r4
   1fbd6:	4b0a      	ldr	r3, [pc, #40]	; (1fc00 <disk_initialize+0x98>)
   1fbd8:	4798      	blx	r3
	return 0;
   1fbda:	1e43      	subs	r3, r0, #1
   1fbdc:	4198      	sbcs	r0, r3
   1fbde:	0080      	lsls	r0, r0, #2
   1fbe0:	e7e7      	b.n	1fbb2 <disk_initialize+0x4a>
		return STA_NOINIT;
   1fbe2:	2001      	movs	r0, #1
   1fbe4:	e7e5      	b.n	1fbb2 <disk_initialize+0x4a>
   1fbe6:	46c0      	nop			; (mov r8, r8)
   1fbe8:	000007de 	.word	0x000007de
   1fbec:	200055f4 	.word	0x200055f4
   1fbf0:	40001400 	.word	0x40001400
   1fbf4:	0001d999 	.word	0x0001d999
   1fbf8:	0001d835 	.word	0x0001d835
   1fbfc:	0001d505 	.word	0x0001d505
   1fc00:	0001d541 	.word	0x0001d541

0001fc04 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1fc04:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   1fc06:	4b05      	ldr	r3, [pc, #20]	; (1fc1c <disk_status+0x18>)
   1fc08:	4798      	blx	r3
   1fc0a:	1e03      	subs	r3, r0, #0
   1fc0c:	d004      	beq.n	1fc18 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1fc0e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   1fc10:	2b02      	cmp	r3, #2
   1fc12:	d000      	beq.n	1fc16 <disk_status+0x12>
	default:
		return STA_NOINIT;
   1fc14:	3802      	subs	r0, #2
	}
}
   1fc16:	bd10      	pop	{r4, pc}
		return 0;
   1fc18:	2000      	movs	r0, #0
   1fc1a:	e7fc      	b.n	1fc16 <disk_status+0x12>
   1fc1c:	0001d505 	.word	0x0001d505

0001fc20 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1fc20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc22:	46de      	mov	lr, fp
   1fc24:	464f      	mov	r7, r9
   1fc26:	4646      	mov	r6, r8
   1fc28:	b5c0      	push	{r6, r7, lr}
   1fc2a:	b084      	sub	sp, #16
   1fc2c:	9001      	str	r0, [sp, #4]
   1fc2e:	000d      	movs	r5, r1
   1fc30:	0014      	movs	r4, r2
   1fc32:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fc34:	4b18      	ldr	r3, [pc, #96]	; (1fc98 <disk_read+0x78>)
   1fc36:	4798      	blx	r3
   1fc38:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fc3a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fc3c:	2e00      	cmp	r6, #0
   1fc3e:	d105      	bne.n	1fc4c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fc40:	b004      	add	sp, #16
   1fc42:	bc1c      	pop	{r2, r3, r4}
   1fc44:	4690      	mov	r8, r2
   1fc46:	4699      	mov	r9, r3
   1fc48:	46a3      	mov	fp, r4
   1fc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fc4c:	a903      	add	r1, sp, #12
   1fc4e:	9801      	ldr	r0, [sp, #4]
   1fc50:	4b12      	ldr	r3, [pc, #72]	; (1fc9c <disk_read+0x7c>)
   1fc52:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fc54:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fc56:	0032      	movs	r2, r6
   1fc58:	437a      	muls	r2, r7
   1fc5a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fc5c:	9b03      	ldr	r3, [sp, #12]
   1fc5e:	3301      	adds	r3, #1
   1fc60:	4373      	muls	r3, r6
		return RES_PARERR;
   1fc62:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fc64:	429a      	cmp	r2, r3
   1fc66:	d8eb      	bhi.n	1fc40 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   1fc68:	2f00      	cmp	r7, #0
   1fc6a:	d011      	beq.n	1fc90 <disk_read+0x70>
   1fc6c:	0273      	lsls	r3, r6, #9
   1fc6e:	4698      	mov	r8, r3
   1fc70:	1c7b      	adds	r3, r7, #1
   1fc72:	469b      	mov	fp, r3
   1fc74:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1fc76:	4e0a      	ldr	r6, [pc, #40]	; (1fca0 <disk_read+0x80>)
   1fc78:	002a      	movs	r2, r5
   1fc7a:	0021      	movs	r1, r4
   1fc7c:	9801      	ldr	r0, [sp, #4]
   1fc7e:	47b0      	blx	r6
   1fc80:	2800      	cmp	r0, #0
   1fc82:	d107      	bne.n	1fc94 <disk_read+0x74>
   1fc84:	3701      	adds	r7, #1
   1fc86:	444c      	add	r4, r9
   1fc88:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fc8a:	455f      	cmp	r7, fp
   1fc8c:	d1f4      	bne.n	1fc78 <disk_read+0x58>
   1fc8e:	e7d7      	b.n	1fc40 <disk_read+0x20>
	return RES_OK;
   1fc90:	2000      	movs	r0, #0
   1fc92:	e7d5      	b.n	1fc40 <disk_read+0x20>
			return RES_ERROR;
   1fc94:	2001      	movs	r0, #1
   1fc96:	e7d3      	b.n	1fc40 <disk_read+0x20>
   1fc98:	0001d539 	.word	0x0001d539
   1fc9c:	0001d51d 	.word	0x0001d51d
   1fca0:	0001d559 	.word	0x0001d559

0001fca4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   1fca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fca6:	46de      	mov	lr, fp
   1fca8:	464f      	mov	r7, r9
   1fcaa:	4646      	mov	r6, r8
   1fcac:	b5c0      	push	{r6, r7, lr}
   1fcae:	b084      	sub	sp, #16
   1fcb0:	9001      	str	r0, [sp, #4]
   1fcb2:	000d      	movs	r5, r1
   1fcb4:	0014      	movs	r4, r2
   1fcb6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fcb8:	4b18      	ldr	r3, [pc, #96]	; (1fd1c <disk_write+0x78>)
   1fcba:	4798      	blx	r3
   1fcbc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fcbe:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fcc0:	2e00      	cmp	r6, #0
   1fcc2:	d105      	bne.n	1fcd0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fcc4:	b004      	add	sp, #16
   1fcc6:	bc1c      	pop	{r2, r3, r4}
   1fcc8:	4690      	mov	r8, r2
   1fcca:	4699      	mov	r9, r3
   1fccc:	46a3      	mov	fp, r4
   1fcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fcd0:	a903      	add	r1, sp, #12
   1fcd2:	9801      	ldr	r0, [sp, #4]
   1fcd4:	4b12      	ldr	r3, [pc, #72]	; (1fd20 <disk_write+0x7c>)
   1fcd6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fcd8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fcda:	0032      	movs	r2, r6
   1fcdc:	437a      	muls	r2, r7
   1fcde:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fce0:	9b03      	ldr	r3, [sp, #12]
   1fce2:	3301      	adds	r3, #1
   1fce4:	4373      	muls	r3, r6
		return RES_PARERR;
   1fce6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fce8:	429a      	cmp	r2, r3
   1fcea:	d8eb      	bhi.n	1fcc4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   1fcec:	2f00      	cmp	r7, #0
   1fcee:	d011      	beq.n	1fd14 <disk_write+0x70>
   1fcf0:	0273      	lsls	r3, r6, #9
   1fcf2:	4698      	mov	r8, r3
   1fcf4:	1c7b      	adds	r3, r7, #1
   1fcf6:	469b      	mov	fp, r3
   1fcf8:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1fcfa:	4e0a      	ldr	r6, [pc, #40]	; (1fd24 <disk_write+0x80>)
   1fcfc:	002a      	movs	r2, r5
   1fcfe:	0021      	movs	r1, r4
   1fd00:	9801      	ldr	r0, [sp, #4]
   1fd02:	47b0      	blx	r6
   1fd04:	2800      	cmp	r0, #0
   1fd06:	d107      	bne.n	1fd18 <disk_write+0x74>
   1fd08:	3701      	adds	r7, #1
   1fd0a:	444c      	add	r4, r9
   1fd0c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fd0e:	455f      	cmp	r7, fp
   1fd10:	d1f4      	bne.n	1fcfc <disk_write+0x58>
   1fd12:	e7d7      	b.n	1fcc4 <disk_write+0x20>
	return RES_OK;
   1fd14:	2000      	movs	r0, #0
   1fd16:	e7d5      	b.n	1fcc4 <disk_write+0x20>
			return RES_ERROR;
   1fd18:	2001      	movs	r0, #1
   1fd1a:	e7d3      	b.n	1fcc4 <disk_write+0x20>
   1fd1c:	0001d539 	.word	0x0001d539
   1fd20:	0001d51d 	.word	0x0001d51d
   1fd24:	0001d579 	.word	0x0001d579

0001fd28 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1fd28:	b510      	push	{r4, lr}
   1fd2a:	b082      	sub	sp, #8
   1fd2c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1fd2e:	2901      	cmp	r1, #1
   1fd30:	d00b      	beq.n	1fd4a <disk_ioctl+0x22>
   1fd32:	2900      	cmp	r1, #0
   1fd34:	d020      	beq.n	1fd78 <disk_ioctl+0x50>
   1fd36:	2902      	cmp	r1, #2
   1fd38:	d00f      	beq.n	1fd5a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1fd3a:	2004      	movs	r0, #4
	switch (ctrl) {
   1fd3c:	2903      	cmp	r1, #3
   1fd3e:	d102      	bne.n	1fd46 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   1fd40:	2301      	movs	r3, #1
   1fd42:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   1fd44:	2000      	movs	r0, #0
	}

	return res;
}
   1fd46:	b002      	add	sp, #8
   1fd48:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1fd4a:	a901      	add	r1, sp, #4
   1fd4c:	4b0e      	ldr	r3, [pc, #56]	; (1fd88 <disk_ioctl+0x60>)
   1fd4e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   1fd50:	9b01      	ldr	r3, [sp, #4]
   1fd52:	3301      	adds	r3, #1
   1fd54:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   1fd56:	2000      	movs	r0, #0
	break;
   1fd58:	e7f5      	b.n	1fd46 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1fd5a:	4b0c      	ldr	r3, [pc, #48]	; (1fd8c <disk_ioctl+0x64>)
   1fd5c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1fd5e:	1e43      	subs	r3, r0, #1
   1fd60:	b2db      	uxtb	r3, r3
   1fd62:	2b01      	cmp	r3, #1
   1fd64:	d904      	bls.n	1fd70 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fd66:	1f03      	subs	r3, r0, #4
   1fd68:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1fd6a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fd6c:	4213      	tst	r3, r2
   1fd6e:	d1ea      	bne.n	1fd46 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1fd70:	2300      	movs	r3, #0
   1fd72:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   1fd74:	2000      	movs	r0, #0
	break;
   1fd76:	e7e6      	b.n	1fd46 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1fd78:	4b05      	ldr	r3, [pc, #20]	; (1fd90 <disk_ioctl+0x68>)
   1fd7a:	4798      	blx	r3
   1fd7c:	2800      	cmp	r0, #0
   1fd7e:	d001      	beq.n	1fd84 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   1fd80:	2003      	movs	r0, #3
   1fd82:	e7e0      	b.n	1fd46 <disk_ioctl+0x1e>
			res = RES_OK;
   1fd84:	2000      	movs	r0, #0
   1fd86:	e7de      	b.n	1fd46 <disk_ioctl+0x1e>
   1fd88:	0001d51d 	.word	0x0001d51d
   1fd8c:	0001d539 	.word	0x0001d539
   1fd90:	0001d505 	.word	0x0001d505

0001fd94 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1fd94:	b500      	push	{lr}
   1fd96:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1fd98:	4669      	mov	r1, sp
   1fd9a:	480f      	ldr	r0, [pc, #60]	; (1fdd8 <get_fattime+0x44>)
   1fd9c:	4b0f      	ldr	r3, [pc, #60]	; (1fddc <get_fattime+0x48>)
   1fd9e:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   1fda0:	466b      	mov	r3, sp
   1fda2:	7958      	ldrb	r0, [r3, #5]
   1fda4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   1fda6:	791b      	ldrb	r3, [r3, #4]
   1fda8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1fdaa:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1fdac:	466b      	mov	r3, sp
   1fdae:	789b      	ldrb	r3, [r3, #2]
   1fdb0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1fdb2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1fdb4:	466b      	mov	r3, sp
   1fdb6:	785b      	ldrb	r3, [r3, #1]
   1fdb8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1fdba:	4318      	orrs	r0, r3
   1fdbc:	466b      	mov	r3, sp
   1fdbe:	781b      	ldrb	r3, [r3, #0]
   1fdc0:	085b      	lsrs	r3, r3, #1
   1fdc2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   1fdc4:	466b      	mov	r3, sp
   1fdc6:	88db      	ldrh	r3, [r3, #6]
   1fdc8:	4a05      	ldr	r2, [pc, #20]	; (1fde0 <get_fattime+0x4c>)
   1fdca:	4694      	mov	ip, r2
   1fdcc:	4463      	add	r3, ip
   1fdce:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   1fdd0:	4318      	orrs	r0, r3

	return ul_time;
}
   1fdd2:	b003      	add	sp, #12
   1fdd4:	bd00      	pop	{pc}
   1fdd6:	46c0      	nop			; (mov r8, r8)
   1fdd8:	200055f4 	.word	0x200055f4
   1fddc:	0001d921 	.word	0x0001d921
   1fde0:	fffff844 	.word	0xfffff844

0001fde4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1fde4:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1fde6:	2a00      	cmp	r2, #0
   1fde8:	d005      	beq.n	1fdf6 <mem_cpy+0x12>
   1fdea:	2300      	movs	r3, #0
		*d++ = *s++;
   1fdec:	5ccc      	ldrb	r4, [r1, r3]
   1fdee:	54c4      	strb	r4, [r0, r3]
   1fdf0:	3301      	adds	r3, #1
	while (cnt--)
   1fdf2:	4293      	cmp	r3, r2
   1fdf4:	d1fa      	bne.n	1fdec <mem_cpy+0x8>
}
   1fdf6:	bd10      	pop	{r4, pc}

0001fdf8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   1fdf8:	2a00      	cmp	r2, #0
   1fdfa:	d005      	beq.n	1fe08 <mem_set+0x10>
   1fdfc:	0003      	movs	r3, r0
   1fdfe:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   1fe00:	7019      	strb	r1, [r3, #0]
   1fe02:	3301      	adds	r3, #1
	while (cnt--)
   1fe04:	4293      	cmp	r3, r2
   1fe06:	d1fb      	bne.n	1fe00 <mem_set+0x8>
}
   1fe08:	4770      	bx	lr

0001fe0a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1fe0a:	0002      	movs	r2, r0
	clst -= 2;
   1fe0c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1fe0e:	6983      	ldr	r3, [r0, #24]
   1fe10:	3b02      	subs	r3, #2
   1fe12:	2000      	movs	r0, #0
   1fe14:	4299      	cmp	r1, r3
   1fe16:	d203      	bcs.n	1fe20 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   1fe18:	7890      	ldrb	r0, [r2, #2]
   1fe1a:	4341      	muls	r1, r0
   1fe1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1fe1e:	1808      	adds	r0, r1, r0
}
   1fe20:	4770      	bx	lr

0001fe22 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1fe22:	0002      	movs	r2, r0
   1fe24:	0001      	movs	r1, r0
   1fe26:	310b      	adds	r1, #11
	BYTE sum = 0;
   1fe28:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1fe2a:	0843      	lsrs	r3, r0, #1
   1fe2c:	01c0      	lsls	r0, r0, #7
   1fe2e:	4303      	orrs	r3, r0
   1fe30:	7810      	ldrb	r0, [r2, #0]
   1fe32:	1818      	adds	r0, r3, r0
   1fe34:	b2c0      	uxtb	r0, r0
   1fe36:	3201      	adds	r2, #1
   1fe38:	428a      	cmp	r2, r1
   1fe3a:	d1f6      	bne.n	1fe2a <sum_sfn+0x8>
	return sum;
}
   1fe3c:	4770      	bx	lr
	...

0001fe40 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1fe40:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   1fe42:	2800      	cmp	r0, #0
   1fe44:	d010      	beq.n	1fe68 <validate+0x28>
   1fe46:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   1fe48:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1fe4a:	2a00      	cmp	r2, #0
   1fe4c:	d101      	bne.n	1fe52 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1fe4e:	0018      	movs	r0, r3
   1fe50:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   1fe52:	88c2      	ldrh	r2, [r0, #6]
   1fe54:	428a      	cmp	r2, r1
   1fe56:	d1fa      	bne.n	1fe4e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   1fe58:	7840      	ldrb	r0, [r0, #1]
   1fe5a:	4b04      	ldr	r3, [pc, #16]	; (1fe6c <validate+0x2c>)
   1fe5c:	4798      	blx	r3
		return FR_NOT_READY;
   1fe5e:	2303      	movs	r3, #3
	return FR_OK;
   1fe60:	07c0      	lsls	r0, r0, #31
   1fe62:	17c0      	asrs	r0, r0, #31
   1fe64:	4003      	ands	r3, r0
   1fe66:	e7f2      	b.n	1fe4e <validate+0xe>
		return FR_INVALID_OBJECT;
   1fe68:	2309      	movs	r3, #9
   1fe6a:	e7f0      	b.n	1fe4e <validate+0xe>
   1fe6c:	0001fc05 	.word	0x0001fc05

0001fe70 <check_fs>:
{
   1fe70:	b570      	push	{r4, r5, r6, lr}
   1fe72:	0004      	movs	r4, r0
   1fe74:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fe76:	0001      	movs	r1, r0
   1fe78:	3130      	adds	r1, #48	; 0x30
   1fe7a:	7840      	ldrb	r0, [r0, #1]
   1fe7c:	2301      	movs	r3, #1
   1fe7e:	4d1f      	ldr	r5, [pc, #124]	; (1fefc <check_fs+0x8c>)
   1fe80:	47a8      	blx	r5
		return 3;
   1fe82:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fe84:	2800      	cmp	r0, #0
   1fe86:	d001      	beq.n	1fe8c <check_fs+0x1c>
}
   1fe88:	0018      	movs	r0, r3
   1fe8a:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fe8c:	4b1c      	ldr	r3, [pc, #112]	; (1ff00 <check_fs+0x90>)
   1fe8e:	5ce3      	ldrb	r3, [r4, r3]
   1fe90:	021b      	lsls	r3, r3, #8
   1fe92:	4a1c      	ldr	r2, [pc, #112]	; (1ff04 <check_fs+0x94>)
   1fe94:	5ca2      	ldrb	r2, [r4, r2]
   1fe96:	431a      	orrs	r2, r3
   1fe98:	491b      	ldr	r1, [pc, #108]	; (1ff08 <check_fs+0x98>)
   1fe9a:	b212      	sxth	r2, r2
		return 2;
   1fe9c:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fe9e:	428a      	cmp	r2, r1
   1fea0:	d1f2      	bne.n	1fe88 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1fea2:	3367      	adds	r3, #103	; 0x67
   1fea4:	5ce3      	ldrb	r3, [r4, r3]
   1fea6:	061b      	lsls	r3, r3, #24
   1fea8:	2268      	movs	r2, #104	; 0x68
   1feaa:	5ca2      	ldrb	r2, [r4, r2]
   1feac:	0412      	lsls	r2, r2, #16
   1feae:	4313      	orrs	r3, r2
   1feb0:	2266      	movs	r2, #102	; 0x66
   1feb2:	5ca2      	ldrb	r2, [r4, r2]
   1feb4:	4313      	orrs	r3, r2
   1feb6:	2267      	movs	r2, #103	; 0x67
   1feb8:	5ca2      	ldrb	r2, [r4, r2]
   1feba:	0212      	lsls	r2, r2, #8
   1febc:	4313      	orrs	r3, r2
   1febe:	021b      	lsls	r3, r3, #8
   1fec0:	0a1b      	lsrs	r3, r3, #8
   1fec2:	4a12      	ldr	r2, [pc, #72]	; (1ff0c <check_fs+0x9c>)
   1fec4:	4293      	cmp	r3, r2
   1fec6:	d016      	beq.n	1fef6 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1fec8:	2385      	movs	r3, #133	; 0x85
   1feca:	5ce3      	ldrb	r3, [r4, r3]
   1fecc:	061b      	lsls	r3, r3, #24
   1fece:	2284      	movs	r2, #132	; 0x84
   1fed0:	5ca2      	ldrb	r2, [r4, r2]
   1fed2:	0412      	lsls	r2, r2, #16
   1fed4:	4313      	orrs	r3, r2
   1fed6:	2282      	movs	r2, #130	; 0x82
   1fed8:	5ca2      	ldrb	r2, [r4, r2]
   1feda:	4313      	orrs	r3, r2
   1fedc:	2283      	movs	r2, #131	; 0x83
   1fede:	5ca2      	ldrb	r2, [r4, r2]
   1fee0:	0212      	lsls	r2, r2, #8
   1fee2:	4313      	orrs	r3, r2
   1fee4:	021b      	lsls	r3, r3, #8
   1fee6:	0a1b      	lsrs	r3, r3, #8
   1fee8:	4a09      	ldr	r2, [pc, #36]	; (1ff10 <check_fs+0xa0>)
   1feea:	4694      	mov	ip, r2
   1feec:	4463      	add	r3, ip
   1feee:	1e58      	subs	r0, r3, #1
   1fef0:	4183      	sbcs	r3, r0
		return 3;
   1fef2:	b2db      	uxtb	r3, r3
   1fef4:	e7c8      	b.n	1fe88 <check_fs+0x18>
		return 0;
   1fef6:	2300      	movs	r3, #0
   1fef8:	e7c6      	b.n	1fe88 <check_fs+0x18>
   1fefa:	46c0      	nop			; (mov r8, r8)
   1fefc:	0001fc21 	.word	0x0001fc21
   1ff00:	0000022f 	.word	0x0000022f
   1ff04:	0000022e 	.word	0x0000022e
   1ff08:	ffffaa55 	.word	0xffffaa55
   1ff0c:	00544146 	.word	0x00544146
   1ff10:	ffabbeba 	.word	0xffabbeba

0001ff14 <chk_mounted>:
{
   1ff14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff16:	46d6      	mov	lr, sl
   1ff18:	464f      	mov	r7, r9
   1ff1a:	4646      	mov	r6, r8
   1ff1c:	b5c0      	push	{r6, r7, lr}
   1ff1e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   1ff20:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   1ff22:	781c      	ldrb	r4, [r3, #0]
   1ff24:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1ff26:	2c09      	cmp	r4, #9
   1ff28:	d80e      	bhi.n	1ff48 <chk_mounted+0x34>
   1ff2a:	785a      	ldrb	r2, [r3, #1]
   1ff2c:	2a3a      	cmp	r2, #58	; 0x3a
   1ff2e:	d001      	beq.n	1ff34 <chk_mounted+0x20>
   1ff30:	2400      	movs	r4, #0
   1ff32:	e00a      	b.n	1ff4a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   1ff34:	3302      	adds	r3, #2
   1ff36:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   1ff38:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1ff3a:	2c07      	cmp	r4, #7
   1ff3c:	d905      	bls.n	1ff4a <chk_mounted+0x36>
}
   1ff3e:	bc1c      	pop	{r2, r3, r4}
   1ff40:	4690      	mov	r8, r2
   1ff42:	4699      	mov	r9, r3
   1ff44:	46a2      	mov	sl, r4
   1ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff48:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1ff4a:	00a3      	lsls	r3, r4, #2
   1ff4c:	4ac5      	ldr	r2, [pc, #788]	; (20264 <chk_mounted+0x350>)
   1ff4e:	589e      	ldr	r6, [r3, r2]
   1ff50:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1ff52:	2e00      	cmp	r6, #0
   1ff54:	d100      	bne.n	1ff58 <chk_mounted+0x44>
   1ff56:	e0e8      	b.n	2012a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1ff58:	7833      	ldrb	r3, [r6, #0]
   1ff5a:	2b00      	cmp	r3, #0
   1ff5c:	d00d      	beq.n	1ff7a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1ff5e:	7870      	ldrb	r0, [r6, #1]
   1ff60:	4bc1      	ldr	r3, [pc, #772]	; (20268 <chk_mounted+0x354>)
   1ff62:	4798      	blx	r3
   1ff64:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1ff66:	07c2      	lsls	r2, r0, #31
   1ff68:	d407      	bmi.n	1ff7a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1ff6a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1ff6c:	2d00      	cmp	r5, #0
   1ff6e:	d0e6      	beq.n	1ff3e <chk_mounted+0x2a>
   1ff70:	075b      	lsls	r3, r3, #29
   1ff72:	d400      	bmi.n	1ff76 <chk_mounted+0x62>
   1ff74:	e0db      	b.n	2012e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   1ff76:	300a      	adds	r0, #10
   1ff78:	e7e1      	b.n	1ff3e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1ff7a:	2300      	movs	r3, #0
   1ff7c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1ff7e:	b2e0      	uxtb	r0, r4
   1ff80:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1ff82:	4bba      	ldr	r3, [pc, #744]	; (2026c <chk_mounted+0x358>)
   1ff84:	4798      	blx	r3
   1ff86:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1ff88:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1ff8a:	07da      	lsls	r2, r3, #31
   1ff8c:	d4d7      	bmi.n	1ff3e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ff8e:	2d00      	cmp	r5, #0
   1ff90:	d002      	beq.n	1ff98 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   1ff92:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ff94:	075b      	lsls	r3, r3, #29
   1ff96:	d4d2      	bmi.n	1ff3e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1ff98:	2100      	movs	r1, #0
   1ff9a:	0030      	movs	r0, r6
   1ff9c:	4bb4      	ldr	r3, [pc, #720]	; (20270 <chk_mounted+0x35c>)
   1ff9e:	4798      	blx	r3
   1ffa0:	0003      	movs	r3, r0
   1ffa2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1ffa4:	2801      	cmp	r0, #1
   1ffa6:	d100      	bne.n	1ffaa <chk_mounted+0x96>
   1ffa8:	e09a      	b.n	200e0 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1ffaa:	2b03      	cmp	r3, #3
   1ffac:	d100      	bne.n	1ffb0 <chk_mounted+0x9c>
   1ffae:	e0c0      	b.n	20132 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1ffb0:	200d      	movs	r0, #13
   1ffb2:	2b00      	cmp	r3, #0
   1ffb4:	d1c3      	bne.n	1ff3e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1ffb6:	333c      	adds	r3, #60	; 0x3c
   1ffb8:	5cf2      	ldrb	r2, [r6, r3]
   1ffba:	0212      	lsls	r2, r2, #8
   1ffbc:	3b01      	subs	r3, #1
   1ffbe:	5cf3      	ldrb	r3, [r6, r3]
   1ffc0:	4313      	orrs	r3, r2
   1ffc2:	2280      	movs	r2, #128	; 0x80
   1ffc4:	0092      	lsls	r2, r2, #2
   1ffc6:	b21b      	sxth	r3, r3
   1ffc8:	4293      	cmp	r3, r2
   1ffca:	d1b8      	bne.n	1ff3e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1ffcc:	2347      	movs	r3, #71	; 0x47
   1ffce:	5cf3      	ldrb	r3, [r6, r3]
   1ffd0:	021b      	lsls	r3, r3, #8
   1ffd2:	3abb      	subs	r2, #187	; 0xbb
   1ffd4:	3aff      	subs	r2, #255	; 0xff
   1ffd6:	5cb5      	ldrb	r5, [r6, r2]
   1ffd8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1ffda:	d10d      	bne.n	1fff8 <chk_mounted+0xe4>
   1ffdc:	2357      	movs	r3, #87	; 0x57
   1ffde:	5cf5      	ldrb	r5, [r6, r3]
   1ffe0:	062d      	lsls	r5, r5, #24
   1ffe2:	3b01      	subs	r3, #1
   1ffe4:	5cf3      	ldrb	r3, [r6, r3]
   1ffe6:	041b      	lsls	r3, r3, #16
   1ffe8:	431d      	orrs	r5, r3
   1ffea:	2354      	movs	r3, #84	; 0x54
   1ffec:	5cf3      	ldrb	r3, [r6, r3]
   1ffee:	431d      	orrs	r5, r3
   1fff0:	2355      	movs	r3, #85	; 0x55
   1fff2:	5cf3      	ldrb	r3, [r6, r3]
   1fff4:	021b      	lsls	r3, r3, #8
   1fff6:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   1fff8:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1fffa:	2340      	movs	r3, #64	; 0x40
   1fffc:	5cf2      	ldrb	r2, [r6, r3]
   1fffe:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   20000:	1e53      	subs	r3, r2, #1
   20002:	200d      	movs	r0, #13
   20004:	2b01      	cmp	r3, #1
   20006:	d89a      	bhi.n	1ff3e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   20008:	233d      	movs	r3, #61	; 0x3d
   2000a:	5cf1      	ldrb	r1, [r6, r3]
   2000c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2000e:	2900      	cmp	r1, #0
   20010:	d095      	beq.n	1ff3e <chk_mounted+0x2a>
   20012:	1e4b      	subs	r3, r1, #1
   20014:	4219      	tst	r1, r3
   20016:	d192      	bne.n	1ff3e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   20018:	2342      	movs	r3, #66	; 0x42
   2001a:	5cf3      	ldrb	r3, [r6, r3]
   2001c:	021b      	lsls	r3, r3, #8
   2001e:	3034      	adds	r0, #52	; 0x34
   20020:	5c30      	ldrb	r0, [r6, r0]
   20022:	4318      	orrs	r0, r3
   20024:	4680      	mov	r8, r0
   20026:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   20028:	200d      	movs	r0, #13
   2002a:	4643      	mov	r3, r8
   2002c:	071b      	lsls	r3, r3, #28
   2002e:	d000      	beq.n	20032 <chk_mounted+0x11e>
   20030:	e785      	b.n	1ff3e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   20032:	2344      	movs	r3, #68	; 0x44
   20034:	5cf3      	ldrb	r3, [r6, r3]
   20036:	021b      	lsls	r3, r3, #8
   20038:	3036      	adds	r0, #54	; 0x36
   2003a:	5c30      	ldrb	r0, [r6, r0]
   2003c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2003e:	d10d      	bne.n	2005c <chk_mounted+0x148>
   20040:	3353      	adds	r3, #83	; 0x53
   20042:	5cf3      	ldrb	r3, [r6, r3]
   20044:	061b      	lsls	r3, r3, #24
   20046:	2052      	movs	r0, #82	; 0x52
   20048:	5c30      	ldrb	r0, [r6, r0]
   2004a:	0400      	lsls	r0, r0, #16
   2004c:	4303      	orrs	r3, r0
   2004e:	2050      	movs	r0, #80	; 0x50
   20050:	5c30      	ldrb	r0, [r6, r0]
   20052:	4303      	orrs	r3, r0
   20054:	2051      	movs	r0, #81	; 0x51
   20056:	5c30      	ldrb	r0, [r6, r0]
   20058:	0200      	lsls	r0, r0, #8
   2005a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2005c:	203f      	movs	r0, #63	; 0x3f
   2005e:	5c30      	ldrb	r0, [r6, r0]
   20060:	0200      	lsls	r0, r0, #8
   20062:	273e      	movs	r7, #62	; 0x3e
   20064:	5df7      	ldrb	r7, [r6, r7]
   20066:	4307      	orrs	r7, r0
   20068:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2006a:	200d      	movs	r0, #13
   2006c:	2f00      	cmp	r7, #0
   2006e:	d100      	bne.n	20072 <chk_mounted+0x15e>
   20070:	e765      	b.n	1ff3e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   20072:	436a      	muls	r2, r5
   20074:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   20076:	4642      	mov	r2, r8
   20078:	0917      	lsrs	r7, r2, #4
   2007a:	4457      	add	r7, sl
   2007c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2007e:	42bb      	cmp	r3, r7
   20080:	d200      	bcs.n	20084 <chk_mounted+0x170>
   20082:	e75c      	b.n	1ff3e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   20084:	1bd8      	subs	r0, r3, r7
   20086:	4b7b      	ldr	r3, [pc, #492]	; (20274 <chk_mounted+0x360>)
   20088:	4798      	blx	r3
   2008a:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2008c:	200d      	movs	r0, #13
   2008e:	2b00      	cmp	r3, #0
   20090:	d100      	bne.n	20094 <chk_mounted+0x180>
   20092:	e754      	b.n	1ff3e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   20094:	4a78      	ldr	r2, [pc, #480]	; (20278 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   20096:	429a      	cmp	r2, r3
   20098:	4192      	sbcs	r2, r2
   2009a:	4252      	negs	r2, r2
   2009c:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2009e:	4977      	ldr	r1, [pc, #476]	; (2027c <chk_mounted+0x368>)
   200a0:	428b      	cmp	r3, r1
   200a2:	d848      	bhi.n	20136 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   200a4:	3302      	adds	r3, #2
   200a6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   200a8:	19e7      	adds	r7, r4, r7
   200aa:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   200ac:	4454      	add	r4, sl
   200ae:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   200b0:	200d      	movs	r0, #13
   200b2:	4641      	mov	r1, r8
   200b4:	2900      	cmp	r1, #0
   200b6:	d100      	bne.n	200ba <chk_mounted+0x1a6>
   200b8:	e741      	b.n	1ff3e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   200ba:	444c      	add	r4, r9
   200bc:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   200be:	2a02      	cmp	r2, #2
   200c0:	d12c      	bne.n	2011c <chk_mounted+0x208>
   200c2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   200c4:	496e      	ldr	r1, [pc, #440]	; (20280 <chk_mounted+0x36c>)
   200c6:	468c      	mov	ip, r1
   200c8:	4463      	add	r3, ip
   200ca:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   200cc:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   200ce:	429d      	cmp	r5, r3
   200d0:	d200      	bcs.n	200d4 <chk_mounted+0x1c0>
   200d2:	e734      	b.n	1ff3e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   200d4:	2301      	movs	r3, #1
   200d6:	425b      	negs	r3, r3
   200d8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   200da:	2300      	movs	r3, #0
   200dc:	60f3      	str	r3, [r6, #12]
   200de:	e0b6      	b.n	2024e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   200e0:	33f2      	adds	r3, #242	; 0xf2
   200e2:	33ff      	adds	r3, #255	; 0xff
   200e4:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   200e6:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   200e8:	2b00      	cmp	r3, #0
   200ea:	d100      	bne.n	200ee <chk_mounted+0x1da>
   200ec:	e727      	b.n	1ff3e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   200ee:	23fa      	movs	r3, #250	; 0xfa
   200f0:	33ff      	adds	r3, #255	; 0xff
   200f2:	5cf4      	ldrb	r4, [r6, r3]
   200f4:	0624      	lsls	r4, r4, #24
   200f6:	3b01      	subs	r3, #1
   200f8:	5cf3      	ldrb	r3, [r6, r3]
   200fa:	041b      	lsls	r3, r3, #16
   200fc:	431c      	orrs	r4, r3
   200fe:	23fb      	movs	r3, #251	; 0xfb
   20100:	005b      	lsls	r3, r3, #1
   20102:	5cf3      	ldrb	r3, [r6, r3]
   20104:	431c      	orrs	r4, r3
   20106:	23f8      	movs	r3, #248	; 0xf8
   20108:	33ff      	adds	r3, #255	; 0xff
   2010a:	5cf2      	ldrb	r2, [r6, r3]
   2010c:	0212      	lsls	r2, r2, #8
   2010e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   20110:	0021      	movs	r1, r4
   20112:	0030      	movs	r0, r6
   20114:	4b56      	ldr	r3, [pc, #344]	; (20270 <chk_mounted+0x35c>)
   20116:	4798      	blx	r3
   20118:	0003      	movs	r3, r0
   2011a:	e746      	b.n	1ffaa <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2011c:	2103      	movs	r1, #3
   2011e:	4359      	muls	r1, r3
   20120:	0849      	lsrs	r1, r1, #1
   20122:	2001      	movs	r0, #1
   20124:	4003      	ands	r3, r0
   20126:	18cb      	adds	r3, r1, r3
   20128:	e7cc      	b.n	200c4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2012a:	200c      	movs	r0, #12
   2012c:	e707      	b.n	1ff3e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   2012e:	2000      	movs	r0, #0
   20130:	e705      	b.n	1ff3e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   20132:	2001      	movs	r0, #1
   20134:	e703      	b.n	1ff3e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   20136:	3302      	adds	r3, #2
   20138:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2013a:	19e7      	adds	r7, r4, r7
   2013c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2013e:	4652      	mov	r2, sl
   20140:	18a2      	adds	r2, r4, r2
   20142:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   20144:	200d      	movs	r0, #13
   20146:	4642      	mov	r2, r8
   20148:	2a00      	cmp	r2, #0
   2014a:	d000      	beq.n	2014e <chk_mounted+0x23a>
   2014c:	e6f7      	b.n	1ff3e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2014e:	225f      	movs	r2, #95	; 0x5f
   20150:	5cb2      	ldrb	r2, [r6, r2]
   20152:	0612      	lsls	r2, r2, #24
   20154:	215e      	movs	r1, #94	; 0x5e
   20156:	5c71      	ldrb	r1, [r6, r1]
   20158:	0409      	lsls	r1, r1, #16
   2015a:	430a      	orrs	r2, r1
   2015c:	215c      	movs	r1, #92	; 0x5c
   2015e:	5c71      	ldrb	r1, [r6, r1]
   20160:	430a      	orrs	r2, r1
   20162:	215d      	movs	r1, #93	; 0x5d
   20164:	5c71      	ldrb	r1, [r6, r1]
   20166:	0209      	lsls	r1, r1, #8
   20168:	430a      	orrs	r2, r1
   2016a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2016c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2016e:	4a44      	ldr	r2, [pc, #272]	; (20280 <chk_mounted+0x36c>)
   20170:	4694      	mov	ip, r2
   20172:	4463      	add	r3, ip
   20174:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   20176:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   20178:	429d      	cmp	r5, r3
   2017a:	d200      	bcs.n	2017e <chk_mounted+0x26a>
   2017c:	e6df      	b.n	1ff3e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   2017e:	2301      	movs	r3, #1
   20180:	425b      	negs	r3, r3
   20182:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   20184:	2300      	movs	r3, #0
   20186:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   20188:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2018a:	3361      	adds	r3, #97	; 0x61
   2018c:	5cf3      	ldrb	r3, [r6, r3]
   2018e:	021b      	lsls	r3, r3, #8
   20190:	2260      	movs	r2, #96	; 0x60
   20192:	5cb2      	ldrb	r2, [r6, r2]
   20194:	431a      	orrs	r2, r3
   20196:	1912      	adds	r2, r2, r4
   20198:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2019a:	0031      	movs	r1, r6
   2019c:	3130      	adds	r1, #48	; 0x30
   2019e:	7870      	ldrb	r0, [r6, #1]
   201a0:	2301      	movs	r3, #1
   201a2:	4c38      	ldr	r4, [pc, #224]	; (20284 <chk_mounted+0x370>)
   201a4:	47a0      	blx	r4
   201a6:	2203      	movs	r2, #3
   201a8:	2800      	cmp	r0, #0
   201aa:	d150      	bne.n	2024e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   201ac:	4b36      	ldr	r3, [pc, #216]	; (20288 <chk_mounted+0x374>)
   201ae:	5cf2      	ldrb	r2, [r6, r3]
   201b0:	0212      	lsls	r2, r2, #8
   201b2:	4b36      	ldr	r3, [pc, #216]	; (2028c <chk_mounted+0x378>)
   201b4:	5cf3      	ldrb	r3, [r6, r3]
   201b6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   201b8:	4935      	ldr	r1, [pc, #212]	; (20290 <chk_mounted+0x37c>)
   201ba:	b21b      	sxth	r3, r3
   201bc:	2203      	movs	r2, #3
   201be:	428b      	cmp	r3, r1
   201c0:	d145      	bne.n	2024e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   201c2:	2333      	movs	r3, #51	; 0x33
   201c4:	5cf3      	ldrb	r3, [r6, r3]
   201c6:	061b      	lsls	r3, r3, #24
   201c8:	322f      	adds	r2, #47	; 0x2f
   201ca:	5cb2      	ldrb	r2, [r6, r2]
   201cc:	0412      	lsls	r2, r2, #16
   201ce:	4313      	orrs	r3, r2
   201d0:	2230      	movs	r2, #48	; 0x30
   201d2:	5cb2      	ldrb	r2, [r6, r2]
   201d4:	4313      	orrs	r3, r2
   201d6:	2231      	movs	r2, #49	; 0x31
   201d8:	5cb2      	ldrb	r2, [r6, r2]
   201da:	0212      	lsls	r2, r2, #8
   201dc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   201de:	492d      	ldr	r1, [pc, #180]	; (20294 <chk_mounted+0x380>)
   201e0:	2203      	movs	r2, #3
   201e2:	428b      	cmp	r3, r1
   201e4:	d133      	bne.n	2024e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   201e6:	4b2c      	ldr	r3, [pc, #176]	; (20298 <chk_mounted+0x384>)
   201e8:	5cf3      	ldrb	r3, [r6, r3]
   201ea:	061b      	lsls	r3, r3, #24
   201ec:	4a2b      	ldr	r2, [pc, #172]	; (2029c <chk_mounted+0x388>)
   201ee:	5cb2      	ldrb	r2, [r6, r2]
   201f0:	0412      	lsls	r2, r2, #16
   201f2:	4313      	orrs	r3, r2
   201f4:	2285      	movs	r2, #133	; 0x85
   201f6:	0092      	lsls	r2, r2, #2
   201f8:	5cb2      	ldrb	r2, [r6, r2]
   201fa:	4313      	orrs	r3, r2
   201fc:	4a28      	ldr	r2, [pc, #160]	; (202a0 <chk_mounted+0x38c>)
   201fe:	5cb2      	ldrb	r2, [r6, r2]
   20200:	0212      	lsls	r2, r2, #8
   20202:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   20204:	4927      	ldr	r1, [pc, #156]	; (202a4 <chk_mounted+0x390>)
   20206:	2203      	movs	r2, #3
   20208:	428b      	cmp	r3, r1
   2020a:	d120      	bne.n	2024e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2020c:	4b26      	ldr	r3, [pc, #152]	; (202a8 <chk_mounted+0x394>)
   2020e:	5cf3      	ldrb	r3, [r6, r3]
   20210:	061b      	lsls	r3, r3, #24
   20212:	4a26      	ldr	r2, [pc, #152]	; (202ac <chk_mounted+0x398>)
   20214:	5cb2      	ldrb	r2, [r6, r2]
   20216:	0412      	lsls	r2, r2, #16
   20218:	4313      	orrs	r3, r2
   2021a:	2287      	movs	r2, #135	; 0x87
   2021c:	0092      	lsls	r2, r2, #2
   2021e:	5cb2      	ldrb	r2, [r6, r2]
   20220:	4313      	orrs	r3, r2
   20222:	4a23      	ldr	r2, [pc, #140]	; (202b0 <chk_mounted+0x39c>)
   20224:	5cb2      	ldrb	r2, [r6, r2]
   20226:	0212      	lsls	r2, r2, #8
   20228:	4313      	orrs	r3, r2
   2022a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2022c:	4b21      	ldr	r3, [pc, #132]	; (202b4 <chk_mounted+0x3a0>)
   2022e:	5cf3      	ldrb	r3, [r6, r3]
   20230:	061b      	lsls	r3, r3, #24
   20232:	4a21      	ldr	r2, [pc, #132]	; (202b8 <chk_mounted+0x3a4>)
   20234:	5cb2      	ldrb	r2, [r6, r2]
   20236:	0412      	lsls	r2, r2, #16
   20238:	4313      	orrs	r3, r2
   2023a:	2286      	movs	r2, #134	; 0x86
   2023c:	0092      	lsls	r2, r2, #2
   2023e:	5cb2      	ldrb	r2, [r6, r2]
   20240:	4313      	orrs	r3, r2
   20242:	4a1e      	ldr	r2, [pc, #120]	; (202bc <chk_mounted+0x3a8>)
   20244:	5cb2      	ldrb	r2, [r6, r2]
   20246:	0212      	lsls	r2, r2, #8
   20248:	4313      	orrs	r3, r2
   2024a:	6133      	str	r3, [r6, #16]
   2024c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   2024e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   20250:	4a1b      	ldr	r2, [pc, #108]	; (202c0 <chk_mounted+0x3ac>)
   20252:	8813      	ldrh	r3, [r2, #0]
   20254:	3301      	adds	r3, #1
   20256:	b29b      	uxth	r3, r3
   20258:	8013      	strh	r3, [r2, #0]
   2025a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2025c:	2000      	movs	r0, #0
   2025e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   20260:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   20262:	e66c      	b.n	1ff3e <chk_mounted+0x2a>
   20264:	20003d34 	.word	0x20003d34
   20268:	0001fc05 	.word	0x0001fc05
   2026c:	0001fb69 	.word	0x0001fb69
   20270:	0001fe71 	.word	0x0001fe71
   20274:	00023fe9 	.word	0x00023fe9
   20278:	00000ff5 	.word	0x00000ff5
   2027c:	0000fff5 	.word	0x0000fff5
   20280:	000001ff 	.word	0x000001ff
   20284:	0001fc21 	.word	0x0001fc21
   20288:	0000022f 	.word	0x0000022f
   2028c:	0000022e 	.word	0x0000022e
   20290:	ffffaa55 	.word	0xffffaa55
   20294:	41615252 	.word	0x41615252
   20298:	00000217 	.word	0x00000217
   2029c:	00000216 	.word	0x00000216
   202a0:	00000215 	.word	0x00000215
   202a4:	61417272 	.word	0x61417272
   202a8:	0000021f 	.word	0x0000021f
   202ac:	0000021e 	.word	0x0000021e
   202b0:	0000021d 	.word	0x0000021d
   202b4:	0000021b 	.word	0x0000021b
   202b8:	0000021a 	.word	0x0000021a
   202bc:	00000219 	.word	0x00000219
   202c0:	20003d54 	.word	0x20003d54

000202c4 <move_window>:
{
   202c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   202c6:	46ce      	mov	lr, r9
   202c8:	b500      	push	{lr}
   202ca:	b082      	sub	sp, #8
   202cc:	0004      	movs	r4, r0
   202ce:	000f      	movs	r7, r1
	wsect = fs->winsect;
   202d0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   202d2:	428d      	cmp	r5, r1
   202d4:	d03f      	beq.n	20356 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   202d6:	7903      	ldrb	r3, [r0, #4]
   202d8:	2b00      	cmp	r3, #0
   202da:	d107      	bne.n	202ec <move_window+0x28>
	return FR_OK;
   202dc:	2300      	movs	r3, #0
		if (sector) {
   202de:	2f00      	cmp	r7, #0
   202e0:	d12c      	bne.n	2033c <move_window+0x78>
}
   202e2:	0018      	movs	r0, r3
   202e4:	b002      	add	sp, #8
   202e6:	bc04      	pop	{r2}
   202e8:	4691      	mov	r9, r2
   202ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   202ec:	2330      	movs	r3, #48	; 0x30
   202ee:	469c      	mov	ip, r3
   202f0:	4484      	add	ip, r0
   202f2:	4663      	mov	r3, ip
   202f4:	4661      	mov	r1, ip
   202f6:	9301      	str	r3, [sp, #4]
   202f8:	7840      	ldrb	r0, [r0, #1]
   202fa:	2301      	movs	r3, #1
   202fc:	002a      	movs	r2, r5
   202fe:	4e17      	ldr	r6, [pc, #92]	; (2035c <move_window+0x98>)
   20300:	47b0      	blx	r6
				return FR_DISK_ERR;
   20302:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   20304:	2800      	cmp	r0, #0
   20306:	d1ec      	bne.n	202e2 <move_window+0x1e>
			fs->wflag = 0;
   20308:	2300      	movs	r3, #0
   2030a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2030c:	6a23      	ldr	r3, [r4, #32]
   2030e:	69e2      	ldr	r2, [r4, #28]
   20310:	4694      	mov	ip, r2
   20312:	4463      	add	r3, ip
   20314:	429d      	cmp	r5, r3
   20316:	d2e1      	bcs.n	202dc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   20318:	78e6      	ldrb	r6, [r4, #3]
   2031a:	2e01      	cmp	r6, #1
   2031c:	d9de      	bls.n	202dc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   2031e:	4b0f      	ldr	r3, [pc, #60]	; (2035c <move_window+0x98>)
   20320:	4699      	mov	r9, r3
					wsect += fs->fsize;
   20322:	69e3      	ldr	r3, [r4, #28]
   20324:	469c      	mov	ip, r3
   20326:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   20328:	7860      	ldrb	r0, [r4, #1]
   2032a:	2301      	movs	r3, #1
   2032c:	002a      	movs	r2, r5
   2032e:	9901      	ldr	r1, [sp, #4]
   20330:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   20332:	3e01      	subs	r6, #1
   20334:	b2f6      	uxtb	r6, r6
   20336:	2e01      	cmp	r6, #1
   20338:	d1f3      	bne.n	20322 <move_window+0x5e>
   2033a:	e7cf      	b.n	202dc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2033c:	0021      	movs	r1, r4
   2033e:	3130      	adds	r1, #48	; 0x30
   20340:	7860      	ldrb	r0, [r4, #1]
   20342:	3301      	adds	r3, #1
   20344:	003a      	movs	r2, r7
   20346:	4d06      	ldr	r5, [pc, #24]	; (20360 <move_window+0x9c>)
   20348:	47a8      	blx	r5
				return FR_DISK_ERR;
   2034a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2034c:	2800      	cmp	r0, #0
   2034e:	d1c8      	bne.n	202e2 <move_window+0x1e>
			fs->winsect = sector;
   20350:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   20352:	2300      	movs	r3, #0
   20354:	e7c5      	b.n	202e2 <move_window+0x1e>
   20356:	2300      	movs	r3, #0
   20358:	e7c3      	b.n	202e2 <move_window+0x1e>
   2035a:	46c0      	nop			; (mov r8, r8)
   2035c:	0001fca5 	.word	0x0001fca5
   20360:	0001fc21 	.word	0x0001fc21

00020364 <get_fat>:
{
   20364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20366:	0005      	movs	r5, r0
   20368:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2036a:	2901      	cmp	r1, #1
   2036c:	d974      	bls.n	20458 <get_fat+0xf4>
		return 1;
   2036e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   20370:	69ab      	ldr	r3, [r5, #24]
   20372:	4299      	cmp	r1, r3
   20374:	d271      	bcs.n	2045a <get_fat+0xf6>
	switch (fs->fs_type) {
   20376:	782b      	ldrb	r3, [r5, #0]
   20378:	2b02      	cmp	r3, #2
   2037a:	d034      	beq.n	203e6 <get_fat+0x82>
   2037c:	2b03      	cmp	r3, #3
   2037e:	d049      	beq.n	20414 <get_fat+0xb0>
   20380:	2b01      	cmp	r3, #1
   20382:	d002      	beq.n	2038a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20384:	2001      	movs	r0, #1
   20386:	4240      	negs	r0, r0
   20388:	e067      	b.n	2045a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   2038a:	084e      	lsrs	r6, r1, #1
   2038c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2038e:	0a71      	lsrs	r1, r6, #9
   20390:	6a2b      	ldr	r3, [r5, #32]
   20392:	469c      	mov	ip, r3
   20394:	4461      	add	r1, ip
   20396:	0028      	movs	r0, r5
   20398:	4b30      	ldr	r3, [pc, #192]	; (2045c <get_fat+0xf8>)
   2039a:	4798      	blx	r3
   2039c:	2800      	cmp	r0, #0
   2039e:	d002      	beq.n	203a6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203a0:	2001      	movs	r0, #1
   203a2:	4240      	negs	r0, r0
   203a4:	e059      	b.n	2045a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   203a6:	05f3      	lsls	r3, r6, #23
   203a8:	0ddb      	lsrs	r3, r3, #23
   203aa:	18eb      	adds	r3, r5, r3
   203ac:	3330      	adds	r3, #48	; 0x30
   203ae:	781f      	ldrb	r7, [r3, #0]
   203b0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   203b2:	0a71      	lsrs	r1, r6, #9
   203b4:	6a2b      	ldr	r3, [r5, #32]
   203b6:	469c      	mov	ip, r3
   203b8:	4461      	add	r1, ip
   203ba:	0028      	movs	r0, r5
   203bc:	4b27      	ldr	r3, [pc, #156]	; (2045c <get_fat+0xf8>)
   203be:	4798      	blx	r3
   203c0:	2800      	cmp	r0, #0
   203c2:	d002      	beq.n	203ca <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203c4:	2001      	movs	r0, #1
   203c6:	4240      	negs	r0, r0
   203c8:	e047      	b.n	2045a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   203ca:	05f6      	lsls	r6, r6, #23
   203cc:	0df6      	lsrs	r6, r6, #23
   203ce:	19ad      	adds	r5, r5, r6
   203d0:	3530      	adds	r5, #48	; 0x30
   203d2:	7828      	ldrb	r0, [r5, #0]
   203d4:	0200      	lsls	r0, r0, #8
   203d6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   203d8:	07e3      	lsls	r3, r4, #31
   203da:	d501      	bpl.n	203e0 <get_fat+0x7c>
   203dc:	0900      	lsrs	r0, r0, #4
   203de:	e03c      	b.n	2045a <get_fat+0xf6>
   203e0:	0500      	lsls	r0, r0, #20
   203e2:	0d00      	lsrs	r0, r0, #20
   203e4:	e039      	b.n	2045a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   203e6:	0a09      	lsrs	r1, r1, #8
   203e8:	6a2b      	ldr	r3, [r5, #32]
   203ea:	469c      	mov	ip, r3
   203ec:	4461      	add	r1, ip
   203ee:	0028      	movs	r0, r5
   203f0:	4b1a      	ldr	r3, [pc, #104]	; (2045c <get_fat+0xf8>)
   203f2:	4798      	blx	r3
   203f4:	2800      	cmp	r0, #0
   203f6:	d002      	beq.n	203fe <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203f8:	2001      	movs	r0, #1
   203fa:	4240      	negs	r0, r0
   203fc:	e02d      	b.n	2045a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   203fe:	0064      	lsls	r4, r4, #1
   20400:	23ff      	movs	r3, #255	; 0xff
   20402:	005b      	lsls	r3, r3, #1
   20404:	401c      	ands	r4, r3
		return LD_WORD(p);
   20406:	192d      	adds	r5, r5, r4
   20408:	3530      	adds	r5, #48	; 0x30
   2040a:	786b      	ldrb	r3, [r5, #1]
   2040c:	021b      	lsls	r3, r3, #8
   2040e:	7828      	ldrb	r0, [r5, #0]
   20410:	4318      	orrs	r0, r3
   20412:	e022      	b.n	2045a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   20414:	09c9      	lsrs	r1, r1, #7
   20416:	6a2b      	ldr	r3, [r5, #32]
   20418:	469c      	mov	ip, r3
   2041a:	4461      	add	r1, ip
   2041c:	0028      	movs	r0, r5
   2041e:	4b0f      	ldr	r3, [pc, #60]	; (2045c <get_fat+0xf8>)
   20420:	4798      	blx	r3
   20422:	2800      	cmp	r0, #0
   20424:	d002      	beq.n	2042c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20426:	2001      	movs	r0, #1
   20428:	4240      	negs	r0, r0
   2042a:	e016      	b.n	2045a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   2042c:	00a4      	lsls	r4, r4, #2
   2042e:	23fe      	movs	r3, #254	; 0xfe
   20430:	005b      	lsls	r3, r3, #1
   20432:	401c      	ands	r4, r3
   20434:	0023      	movs	r3, r4
   20436:	3330      	adds	r3, #48	; 0x30
   20438:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   2043a:	78d8      	ldrb	r0, [r3, #3]
   2043c:	0600      	lsls	r0, r0, #24
   2043e:	789a      	ldrb	r2, [r3, #2]
   20440:	0412      	lsls	r2, r2, #16
   20442:	4310      	orrs	r0, r2
   20444:	192c      	adds	r4, r5, r4
   20446:	3430      	adds	r4, #48	; 0x30
   20448:	7822      	ldrb	r2, [r4, #0]
   2044a:	4310      	orrs	r0, r2
   2044c:	785b      	ldrb	r3, [r3, #1]
   2044e:	021b      	lsls	r3, r3, #8
   20450:	4318      	orrs	r0, r3
   20452:	0100      	lsls	r0, r0, #4
   20454:	0900      	lsrs	r0, r0, #4
   20456:	e000      	b.n	2045a <get_fat+0xf6>
		return 1;
   20458:	2001      	movs	r0, #1
}
   2045a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2045c:	000202c5 	.word	0x000202c5

00020460 <dir_sdi>:
{
   20460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20462:	0004      	movs	r4, r0
   20464:	000d      	movs	r5, r1
	dj->index = idx;
   20466:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   20468:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   2046a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2046c:	2901      	cmp	r1, #1
   2046e:	d003      	beq.n	20478 <dir_sdi+0x18>
   20470:	6823      	ldr	r3, [r4, #0]
   20472:	699a      	ldr	r2, [r3, #24]
   20474:	4291      	cmp	r1, r2
   20476:	d300      	bcc.n	2047a <dir_sdi+0x1a>
}
   20478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2047a:	2900      	cmp	r1, #0
   2047c:	d119      	bne.n	204b2 <dir_sdi+0x52>
   2047e:	781a      	ldrb	r2, [r3, #0]
   20480:	2a03      	cmp	r2, #3
   20482:	d013      	beq.n	204ac <dir_sdi+0x4c>
		dj->clust = clst;
   20484:	2200      	movs	r2, #0
   20486:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   20488:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   2048a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2048c:	42aa      	cmp	r2, r5
   2048e:	d9f3      	bls.n	20478 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   20490:	092a      	lsrs	r2, r5, #4
   20492:	b292      	uxth	r2, r2
   20494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20496:	189b      	adds	r3, r3, r2
   20498:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2049a:	6823      	ldr	r3, [r4, #0]
   2049c:	3330      	adds	r3, #48	; 0x30
   2049e:	220f      	movs	r2, #15
   204a0:	4015      	ands	r5, r2
   204a2:	016d      	lsls	r5, r5, #5
   204a4:	195d      	adds	r5, r3, r5
   204a6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   204a8:	2000      	movs	r0, #0
   204aa:	e7e5      	b.n	20478 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   204ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   204ae:	2900      	cmp	r1, #0
   204b0:	d0e8      	beq.n	20484 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   204b2:	789e      	ldrb	r6, [r3, #2]
   204b4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   204b6:	42b5      	cmp	r5, r6
   204b8:	d313      	bcc.n	204e2 <dir_sdi+0x82>
   204ba:	1bad      	subs	r5, r5, r6
   204bc:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   204be:	4f10      	ldr	r7, [pc, #64]	; (20500 <dir_sdi+0xa0>)
   204c0:	e000      	b.n	204c4 <dir_sdi+0x64>
   204c2:	001d      	movs	r5, r3
   204c4:	6820      	ldr	r0, [r4, #0]
   204c6:	47b8      	blx	r7
   204c8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   204ca:	1c43      	adds	r3, r0, #1
   204cc:	d012      	beq.n	204f4 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   204ce:	2801      	cmp	r0, #1
   204d0:	d912      	bls.n	204f8 <dir_sdi+0x98>
   204d2:	6823      	ldr	r3, [r4, #0]
   204d4:	699b      	ldr	r3, [r3, #24]
   204d6:	4298      	cmp	r0, r3
   204d8:	d210      	bcs.n	204fc <dir_sdi+0x9c>
   204da:	1bab      	subs	r3, r5, r6
   204dc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   204de:	42b5      	cmp	r5, r6
   204e0:	d2ef      	bcs.n	204c2 <dir_sdi+0x62>
		dj->clust = clst;
   204e2:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   204e4:	6820      	ldr	r0, [r4, #0]
   204e6:	4b07      	ldr	r3, [pc, #28]	; (20504 <dir_sdi+0xa4>)
   204e8:	4798      	blx	r3
   204ea:	092b      	lsrs	r3, r5, #4
   204ec:	b29b      	uxth	r3, r3
   204ee:	1818      	adds	r0, r3, r0
   204f0:	6120      	str	r0, [r4, #16]
   204f2:	e7d2      	b.n	2049a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   204f4:	2001      	movs	r0, #1
   204f6:	e7bf      	b.n	20478 <dir_sdi+0x18>
				return FR_INT_ERR;
   204f8:	2002      	movs	r0, #2
   204fa:	e7bd      	b.n	20478 <dir_sdi+0x18>
   204fc:	2002      	movs	r0, #2
   204fe:	e7bb      	b.n	20478 <dir_sdi+0x18>
   20500:	00020365 	.word	0x00020365
   20504:	0001fe0b 	.word	0x0001fe0b

00020508 <put_fat>:
{
   20508:	b5f0      	push	{r4, r5, r6, r7, lr}
   2050a:	46c6      	mov	lr, r8
   2050c:	b500      	push	{lr}
   2050e:	0007      	movs	r7, r0
   20510:	000c      	movs	r4, r1
   20512:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   20514:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   20516:	2901      	cmp	r1, #1
   20518:	d902      	bls.n	20520 <put_fat+0x18>
   2051a:	6983      	ldr	r3, [r0, #24]
   2051c:	4299      	cmp	r1, r3
   2051e:	d303      	bcc.n	20528 <put_fat+0x20>
}
   20520:	0028      	movs	r0, r5
   20522:	bc04      	pop	{r2}
   20524:	4690      	mov	r8, r2
   20526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   20528:	7803      	ldrb	r3, [r0, #0]
   2052a:	2b02      	cmp	r3, #2
   2052c:	d053      	beq.n	205d6 <put_fat+0xce>
   2052e:	2b03      	cmp	r3, #3
   20530:	d063      	beq.n	205fa <put_fat+0xf2>
			res = FR_INT_ERR;
   20532:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   20534:	2b01      	cmp	r3, #1
   20536:	d002      	beq.n	2053e <put_fat+0x36>
		fs->wflag = 1;
   20538:	2301      	movs	r3, #1
   2053a:	713b      	strb	r3, [r7, #4]
   2053c:	e7f0      	b.n	20520 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   2053e:	084b      	lsrs	r3, r1, #1
   20540:	4698      	mov	r8, r3
   20542:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20544:	4643      	mov	r3, r8
   20546:	0a59      	lsrs	r1, r3, #9
   20548:	6a03      	ldr	r3, [r0, #32]
   2054a:	469c      	mov	ip, r3
   2054c:	4461      	add	r1, ip
   2054e:	4b3b      	ldr	r3, [pc, #236]	; (2063c <put_fat+0x134>)
   20550:	4798      	blx	r3
   20552:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   20554:	d1f0      	bne.n	20538 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   20556:	4643      	mov	r3, r8
   20558:	05db      	lsls	r3, r3, #23
   2055a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2055c:	07e2      	lsls	r2, r4, #31
   2055e:	d51f      	bpl.n	205a0 <put_fat+0x98>
   20560:	18fb      	adds	r3, r7, r3
   20562:	3330      	adds	r3, #48	; 0x30
   20564:	7819      	ldrb	r1, [r3, #0]
   20566:	220f      	movs	r2, #15
   20568:	400a      	ands	r2, r1
   2056a:	0131      	lsls	r1, r6, #4
   2056c:	20ff      	movs	r0, #255	; 0xff
   2056e:	0100      	lsls	r0, r0, #4
   20570:	4001      	ands	r1, r0
   20572:	430a      	orrs	r2, r1
   20574:	701a      	strb	r2, [r3, #0]
			bc++;
   20576:	4644      	mov	r4, r8
   20578:	3401      	adds	r4, #1
			fs->wflag = 1;
   2057a:	2301      	movs	r3, #1
   2057c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2057e:	0a61      	lsrs	r1, r4, #9
   20580:	6a3b      	ldr	r3, [r7, #32]
   20582:	469c      	mov	ip, r3
   20584:	4461      	add	r1, ip
   20586:	0038      	movs	r0, r7
   20588:	4b2c      	ldr	r3, [pc, #176]	; (2063c <put_fat+0x134>)
   2058a:	4798      	blx	r3
			if (res != FR_OK) break;
   2058c:	2800      	cmp	r0, #0
   2058e:	d151      	bne.n	20634 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   20590:	05e4      	lsls	r4, r4, #23
   20592:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   20594:	0936      	lsrs	r6, r6, #4
   20596:	b2f6      	uxtb	r6, r6
   20598:	193c      	adds	r4, r7, r4
   2059a:	3430      	adds	r4, #48	; 0x30
   2059c:	7026      	strb	r6, [r4, #0]
			break;
   2059e:	e7cb      	b.n	20538 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   205a0:	18fb      	adds	r3, r7, r3
   205a2:	3330      	adds	r3, #48	; 0x30
   205a4:	701e      	strb	r6, [r3, #0]
			bc++;
   205a6:	4644      	mov	r4, r8
   205a8:	3401      	adds	r4, #1
			fs->wflag = 1;
   205aa:	2301      	movs	r3, #1
   205ac:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   205ae:	0a61      	lsrs	r1, r4, #9
   205b0:	6a3b      	ldr	r3, [r7, #32]
   205b2:	469c      	mov	ip, r3
   205b4:	4461      	add	r1, ip
   205b6:	0038      	movs	r0, r7
   205b8:	4b20      	ldr	r3, [pc, #128]	; (2063c <put_fat+0x134>)
   205ba:	4798      	blx	r3
			if (res != FR_OK) break;
   205bc:	2800      	cmp	r0, #0
   205be:	d13b      	bne.n	20638 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   205c0:	05e4      	lsls	r4, r4, #23
   205c2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   205c4:	193b      	adds	r3, r7, r4
   205c6:	3330      	adds	r3, #48	; 0x30
   205c8:	781b      	ldrb	r3, [r3, #0]
   205ca:	220f      	movs	r2, #15
   205cc:	4393      	bics	r3, r2
   205ce:	0536      	lsls	r6, r6, #20
   205d0:	0f36      	lsrs	r6, r6, #28
   205d2:	431e      	orrs	r6, r3
   205d4:	e7e0      	b.n	20598 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   205d6:	0a09      	lsrs	r1, r1, #8
   205d8:	6a03      	ldr	r3, [r0, #32]
   205da:	469c      	mov	ip, r3
   205dc:	4461      	add	r1, ip
   205de:	4b17      	ldr	r3, [pc, #92]	; (2063c <put_fat+0x134>)
   205e0:	4798      	blx	r3
   205e2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   205e4:	d1a8      	bne.n	20538 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   205e6:	0063      	lsls	r3, r4, #1
   205e8:	24ff      	movs	r4, #255	; 0xff
   205ea:	0064      	lsls	r4, r4, #1
   205ec:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   205ee:	18fb      	adds	r3, r7, r3
   205f0:	3330      	adds	r3, #48	; 0x30
   205f2:	701e      	strb	r6, [r3, #0]
   205f4:	0a36      	lsrs	r6, r6, #8
   205f6:	705e      	strb	r6, [r3, #1]
			break;
   205f8:	e79e      	b.n	20538 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   205fa:	09c9      	lsrs	r1, r1, #7
   205fc:	6a03      	ldr	r3, [r0, #32]
   205fe:	469c      	mov	ip, r3
   20600:	4461      	add	r1, ip
   20602:	4b0e      	ldr	r3, [pc, #56]	; (2063c <put_fat+0x134>)
   20604:	4798      	blx	r3
   20606:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   20608:	d196      	bne.n	20538 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   2060a:	00a4      	lsls	r4, r4, #2
   2060c:	23fe      	movs	r3, #254	; 0xfe
   2060e:	005b      	lsls	r3, r3, #1
   20610:	401c      	ands	r4, r3
   20612:	0022      	movs	r2, r4
   20614:	3230      	adds	r2, #48	; 0x30
   20616:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   20618:	78d3      	ldrb	r3, [r2, #3]
   2061a:	193c      	adds	r4, r7, r4
   2061c:	3430      	adds	r4, #48	; 0x30
   2061e:	091b      	lsrs	r3, r3, #4
   20620:	071b      	lsls	r3, r3, #28
   20622:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   20624:	7026      	strb	r6, [r4, #0]
   20626:	0a33      	lsrs	r3, r6, #8
   20628:	7053      	strb	r3, [r2, #1]
   2062a:	0c33      	lsrs	r3, r6, #16
   2062c:	7093      	strb	r3, [r2, #2]
   2062e:	0e36      	lsrs	r6, r6, #24
   20630:	70d6      	strb	r6, [r2, #3]
			break;
   20632:	e781      	b.n	20538 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20634:	0005      	movs	r5, r0
   20636:	e77f      	b.n	20538 <put_fat+0x30>
   20638:	0005      	movs	r5, r0
   2063a:	e77d      	b.n	20538 <put_fat+0x30>
   2063c:	000202c5 	.word	0x000202c5

00020640 <create_chain>:
{
   20640:	b5f0      	push	{r4, r5, r6, r7, lr}
   20642:	46c6      	mov	lr, r8
   20644:	b500      	push	{lr}
   20646:	0005      	movs	r5, r0
   20648:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   2064a:	2900      	cmp	r1, #0
   2064c:	d107      	bne.n	2065e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   2064e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   20650:	2e00      	cmp	r6, #0
   20652:	d00d      	beq.n	20670 <create_chain+0x30>
   20654:	6983      	ldr	r3, [r0, #24]
   20656:	429e      	cmp	r6, r3
   20658:	d30b      	bcc.n	20672 <create_chain+0x32>
   2065a:	2601      	movs	r6, #1
   2065c:	e009      	b.n	20672 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2065e:	4b26      	ldr	r3, [pc, #152]	; (206f8 <create_chain+0xb8>)
   20660:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   20662:	2801      	cmp	r0, #1
   20664:	d93d      	bls.n	206e2 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   20666:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   20668:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2066a:	4298      	cmp	r0, r3
   2066c:	d201      	bcs.n	20672 <create_chain+0x32>
   2066e:	e03d      	b.n	206ec <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   20670:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   20672:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   20674:	4f20      	ldr	r7, [pc, #128]	; (206f8 <create_chain+0xb8>)
   20676:	e00a      	b.n	2068e <create_chain+0x4e>
   20678:	0021      	movs	r1, r4
   2067a:	0028      	movs	r0, r5
   2067c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   2067e:	2800      	cmp	r0, #0
   20680:	d00d      	beq.n	2069e <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   20682:	1c43      	adds	r3, r0, #1
   20684:	d032      	beq.n	206ec <create_chain+0xac>
   20686:	2801      	cmp	r0, #1
   20688:	d030      	beq.n	206ec <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   2068a:	42b4      	cmp	r4, r6
   2068c:	d02d      	beq.n	206ea <create_chain+0xaa>
		ncl++;							/* Next cluster */
   2068e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   20690:	69ab      	ldr	r3, [r5, #24]
   20692:	429c      	cmp	r4, r3
   20694:	d3f0      	bcc.n	20678 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   20696:	2e01      	cmp	r6, #1
   20698:	d925      	bls.n	206e6 <create_chain+0xa6>
			ncl = 2;
   2069a:	2402      	movs	r4, #2
   2069c:	e7ec      	b.n	20678 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2069e:	4a17      	ldr	r2, [pc, #92]	; (206fc <create_chain+0xbc>)
   206a0:	0021      	movs	r1, r4
   206a2:	0028      	movs	r0, r5
   206a4:	4b16      	ldr	r3, [pc, #88]	; (20700 <create_chain+0xc0>)
   206a6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   206a8:	2800      	cmp	r0, #0
   206aa:	d113      	bne.n	206d4 <create_chain+0x94>
   206ac:	4643      	mov	r3, r8
   206ae:	2b00      	cmp	r3, #0
   206b0:	d109      	bne.n	206c6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   206b2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   206b4:	692b      	ldr	r3, [r5, #16]
   206b6:	1c5a      	adds	r2, r3, #1
   206b8:	d01b      	beq.n	206f2 <create_chain+0xb2>
			fs->free_clust--;
   206ba:	3b01      	subs	r3, #1
   206bc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   206be:	2301      	movs	r3, #1
   206c0:	716b      	strb	r3, [r5, #5]
   206c2:	0020      	movs	r0, r4
   206c4:	e012      	b.n	206ec <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   206c6:	0022      	movs	r2, r4
   206c8:	4641      	mov	r1, r8
   206ca:	0028      	movs	r0, r5
   206cc:	4b0c      	ldr	r3, [pc, #48]	; (20700 <create_chain+0xc0>)
   206ce:	4798      	blx	r3
	if (res == FR_OK) {
   206d0:	2800      	cmp	r0, #0
   206d2:	d0ee      	beq.n	206b2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   206d4:	3801      	subs	r0, #1
   206d6:	4242      	negs	r2, r0
   206d8:	4142      	adcs	r2, r0
   206da:	4250      	negs	r0, r2
   206dc:	2301      	movs	r3, #1
   206de:	4318      	orrs	r0, r3
   206e0:	e004      	b.n	206ec <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   206e2:	2001      	movs	r0, #1
   206e4:	e002      	b.n	206ec <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   206e6:	2000      	movs	r0, #0
   206e8:	e000      	b.n	206ec <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   206ea:	2000      	movs	r0, #0
}
   206ec:	bc04      	pop	{r2}
   206ee:	4690      	mov	r8, r2
   206f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   206f2:	0020      	movs	r0, r4
   206f4:	e7fa      	b.n	206ec <create_chain+0xac>
   206f6:	46c0      	nop			; (mov r8, r8)
   206f8:	00020365 	.word	0x00020365
   206fc:	0fffffff 	.word	0x0fffffff
   20700:	00020509 	.word	0x00020509

00020704 <remove_chain>:
{
   20704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20706:	46ce      	mov	lr, r9
   20708:	4647      	mov	r7, r8
   2070a:	b580      	push	{r7, lr}
   2070c:	0004      	movs	r4, r0
   2070e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   20710:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   20712:	2901      	cmp	r1, #1
   20714:	d902      	bls.n	2071c <remove_chain+0x18>
   20716:	69a3      	ldr	r3, [r4, #24]
   20718:	4299      	cmp	r1, r3
   2071a:	d303      	bcc.n	20724 <remove_chain+0x20>
}
   2071c:	bc0c      	pop	{r2, r3}
   2071e:	4690      	mov	r8, r2
   20720:	4699      	mov	r9, r3
   20722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20724:	4f13      	ldr	r7, [pc, #76]	; (20774 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   20726:	4b14      	ldr	r3, [pc, #80]	; (20778 <remove_chain+0x74>)
   20728:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   2072a:	2301      	movs	r3, #1
   2072c:	4699      	mov	r9, r3
   2072e:	e003      	b.n	20738 <remove_chain+0x34>
   20730:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   20732:	69a3      	ldr	r3, [r4, #24]
   20734:	42b3      	cmp	r3, r6
   20736:	d9f1      	bls.n	2071c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20738:	0029      	movs	r1, r5
   2073a:	0020      	movs	r0, r4
   2073c:	47b8      	blx	r7
   2073e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   20740:	d011      	beq.n	20766 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   20742:	2801      	cmp	r0, #1
   20744:	d011      	beq.n	2076a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   20746:	1c43      	adds	r3, r0, #1
   20748:	d011      	beq.n	2076e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2074a:	2200      	movs	r2, #0
   2074c:	0029      	movs	r1, r5
   2074e:	0020      	movs	r0, r4
   20750:	47c0      	blx	r8
			if (res != FR_OK) break;
   20752:	2800      	cmp	r0, #0
   20754:	d1e2      	bne.n	2071c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   20756:	6923      	ldr	r3, [r4, #16]
   20758:	1c5a      	adds	r2, r3, #1
   2075a:	d0e9      	beq.n	20730 <remove_chain+0x2c>
				fs->free_clust++;
   2075c:	3301      	adds	r3, #1
   2075e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   20760:	464b      	mov	r3, r9
   20762:	7163      	strb	r3, [r4, #5]
   20764:	e7e4      	b.n	20730 <remove_chain+0x2c>
   20766:	2000      	movs	r0, #0
   20768:	e7d8      	b.n	2071c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2076a:	2002      	movs	r0, #2
   2076c:	e7d6      	b.n	2071c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2076e:	2001      	movs	r0, #1
   20770:	e7d4      	b.n	2071c <remove_chain+0x18>
   20772:	46c0      	nop			; (mov r8, r8)
   20774:	00020365 	.word	0x00020365
   20778:	00020509 	.word	0x00020509

0002077c <dir_next>:
{
   2077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2077e:	46d6      	mov	lr, sl
   20780:	4647      	mov	r7, r8
   20782:	b580      	push	{r7, lr}
   20784:	0006      	movs	r6, r0
   20786:	000d      	movs	r5, r1
	i = dj->index + 1;
   20788:	88c4      	ldrh	r4, [r0, #6]
   2078a:	3401      	adds	r4, #1
   2078c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   2078e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   20790:	2c00      	cmp	r4, #0
   20792:	d103      	bne.n	2079c <dir_next+0x20>
}
   20794:	bc0c      	pop	{r2, r3}
   20796:	4690      	mov	r8, r2
   20798:	469a      	mov	sl, r3
   2079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2079c:	6933      	ldr	r3, [r6, #16]
   2079e:	2b00      	cmp	r3, #0
   207a0:	d0f8      	beq.n	20794 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   207a2:	270f      	movs	r7, #15
   207a4:	4027      	ands	r7, r4
   207a6:	d10f      	bne.n	207c8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   207a8:	3301      	adds	r3, #1
   207aa:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   207ac:	68f1      	ldr	r1, [r6, #12]
   207ae:	2900      	cmp	r1, #0
   207b0:	d104      	bne.n	207bc <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   207b2:	6833      	ldr	r3, [r6, #0]
   207b4:	891b      	ldrh	r3, [r3, #8]
   207b6:	42a3      	cmp	r3, r4
   207b8:	d9ec      	bls.n	20794 <dir_next+0x18>
   207ba:	e005      	b.n	207c8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   207bc:	6830      	ldr	r0, [r6, #0]
   207be:	7883      	ldrb	r3, [r0, #2]
   207c0:	3b01      	subs	r3, #1
   207c2:	0922      	lsrs	r2, r4, #4
   207c4:	421a      	tst	r2, r3
   207c6:	d007      	beq.n	207d8 <dir_next+0x5c>
	dj->index = i;
   207c8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   207ca:	6833      	ldr	r3, [r6, #0]
   207cc:	3330      	adds	r3, #48	; 0x30
   207ce:	017f      	lsls	r7, r7, #5
   207d0:	19df      	adds	r7, r3, r7
   207d2:	6177      	str	r7, [r6, #20]
	return FR_OK;
   207d4:	2000      	movs	r0, #0
   207d6:	e7dd      	b.n	20794 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   207d8:	4b2c      	ldr	r3, [pc, #176]	; (2088c <dir_next+0x110>)
   207da:	4798      	blx	r3
   207dc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   207de:	2002      	movs	r0, #2
   207e0:	4643      	mov	r3, r8
   207e2:	2b01      	cmp	r3, #1
   207e4:	d9d6      	bls.n	20794 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   207e6:	3301      	adds	r3, #1
   207e8:	d04b      	beq.n	20882 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   207ea:	6833      	ldr	r3, [r6, #0]
   207ec:	699a      	ldr	r2, [r3, #24]
   207ee:	4590      	cmp	r8, r2
   207f0:	d33f      	bcc.n	20872 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   207f2:	3002      	adds	r0, #2
   207f4:	2d00      	cmp	r5, #0
   207f6:	d0cd      	beq.n	20794 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   207f8:	68f1      	ldr	r1, [r6, #12]
   207fa:	0018      	movs	r0, r3
   207fc:	4b24      	ldr	r3, [pc, #144]	; (20890 <dir_next+0x114>)
   207fe:	4798      	blx	r3
   20800:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   20802:	2007      	movs	r0, #7
   20804:	4643      	mov	r3, r8
   20806:	2b00      	cmp	r3, #0
   20808:	d0c4      	beq.n	20794 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   2080a:	3805      	subs	r0, #5
   2080c:	2b01      	cmp	r3, #1
   2080e:	d0c1      	beq.n	20794 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   20810:	3801      	subs	r0, #1
   20812:	3301      	adds	r3, #1
   20814:	d0be      	beq.n	20794 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   20816:	2100      	movs	r1, #0
   20818:	6830      	ldr	r0, [r6, #0]
   2081a:	4b1e      	ldr	r3, [pc, #120]	; (20894 <dir_next+0x118>)
   2081c:	4798      	blx	r3
   2081e:	0003      	movs	r3, r0
   20820:	2001      	movs	r0, #1
   20822:	2b00      	cmp	r3, #0
   20824:	d1b6      	bne.n	20794 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   20826:	6830      	ldr	r0, [r6, #0]
   20828:	3030      	adds	r0, #48	; 0x30
   2082a:	2280      	movs	r2, #128	; 0x80
   2082c:	0092      	lsls	r2, r2, #2
   2082e:	2100      	movs	r1, #0
   20830:	4b19      	ldr	r3, [pc, #100]	; (20898 <dir_next+0x11c>)
   20832:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   20834:	6835      	ldr	r5, [r6, #0]
   20836:	4641      	mov	r1, r8
   20838:	0028      	movs	r0, r5
   2083a:	4b18      	ldr	r3, [pc, #96]	; (2089c <dir_next+0x120>)
   2083c:	4798      	blx	r3
   2083e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20840:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   20842:	2301      	movs	r3, #1
   20844:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20846:	6833      	ldr	r3, [r6, #0]
   20848:	789a      	ldrb	r2, [r3, #2]
   2084a:	42aa      	cmp	r2, r5
   2084c:	d90e      	bls.n	2086c <dir_next+0xf0>
						dj->fs->wflag = 1;
   2084e:	4652      	mov	r2, sl
   20850:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   20852:	2100      	movs	r1, #0
   20854:	6830      	ldr	r0, [r6, #0]
   20856:	4b0f      	ldr	r3, [pc, #60]	; (20894 <dir_next+0x118>)
   20858:	4798      	blx	r3
   2085a:	2800      	cmp	r0, #0
   2085c:	d113      	bne.n	20886 <dir_next+0x10a>
						dj->fs->winsect++;
   2085e:	6832      	ldr	r2, [r6, #0]
   20860:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20862:	3301      	adds	r3, #1
   20864:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20866:	3501      	adds	r5, #1
   20868:	b2ed      	uxtb	r5, r5
   2086a:	e7ec      	b.n	20846 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   2086c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2086e:	1b52      	subs	r2, r2, r5
   20870:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   20872:	4643      	mov	r3, r8
   20874:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   20876:	4641      	mov	r1, r8
   20878:	6830      	ldr	r0, [r6, #0]
   2087a:	4b08      	ldr	r3, [pc, #32]	; (2089c <dir_next+0x120>)
   2087c:	4798      	blx	r3
   2087e:	6130      	str	r0, [r6, #16]
   20880:	e7a2      	b.n	207c8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   20882:	2001      	movs	r0, #1
   20884:	e786      	b.n	20794 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   20886:	2001      	movs	r0, #1
   20888:	e784      	b.n	20794 <dir_next+0x18>
   2088a:	46c0      	nop			; (mov r8, r8)
   2088c:	00020365 	.word	0x00020365
   20890:	00020641 	.word	0x00020641
   20894:	000202c5 	.word	0x000202c5
   20898:	0001fdf9 	.word	0x0001fdf9
   2089c:	0001fe0b 	.word	0x0001fe0b

000208a0 <dir_find>:
{
   208a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   208a2:	46de      	mov	lr, fp
   208a4:	4657      	mov	r7, sl
   208a6:	464e      	mov	r6, r9
   208a8:	4645      	mov	r5, r8
   208aa:	b5e0      	push	{r5, r6, r7, lr}
   208ac:	b083      	sub	sp, #12
   208ae:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   208b0:	2100      	movs	r1, #0
   208b2:	4b5a      	ldr	r3, [pc, #360]	; (20a1c <dir_find+0x17c>)
   208b4:	4798      	blx	r3
   208b6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   208b8:	d000      	beq.n	208bc <dir_find+0x1c>
   208ba:	e09e      	b.n	209fa <dir_find+0x15a>
   208bc:	23ff      	movs	r3, #255	; 0xff
   208be:	4699      	mov	r9, r3
   208c0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   208c2:	4b57      	ldr	r3, [pc, #348]	; (20a20 <dir_find+0x180>)
   208c4:	469b      	mov	fp, r3
   208c6:	e01b      	b.n	20900 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   208c8:	2b0f      	cmp	r3, #15
   208ca:	d030      	beq.n	2092e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   208cc:	4653      	mov	r3, sl
   208ce:	2b00      	cmp	r3, #0
   208d0:	d105      	bne.n	208de <dir_find+0x3e>
   208d2:	0020      	movs	r0, r4
   208d4:	4b53      	ldr	r3, [pc, #332]	; (20a24 <dir_find+0x184>)
   208d6:	4798      	blx	r3
   208d8:	4581      	cmp	r9, r0
   208da:	d100      	bne.n	208de <dir_find+0x3e>
   208dc:	e08d      	b.n	209fa <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   208de:	2301      	movs	r3, #1
   208e0:	425b      	negs	r3, r3
   208e2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   208e4:	69a8      	ldr	r0, [r5, #24]
   208e6:	7ac3      	ldrb	r3, [r0, #11]
   208e8:	07db      	lsls	r3, r3, #31
   208ea:	d400      	bmi.n	208ee <dir_find+0x4e>
   208ec:	e07d      	b.n	209ea <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   208ee:	23ff      	movs	r3, #255	; 0xff
   208f0:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   208f2:	2100      	movs	r1, #0
   208f4:	0028      	movs	r0, r5
   208f6:	4b4c      	ldr	r3, [pc, #304]	; (20a28 <dir_find+0x188>)
   208f8:	4798      	blx	r3
   208fa:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   208fc:	d000      	beq.n	20900 <dir_find+0x60>
   208fe:	e07c      	b.n	209fa <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   20900:	6929      	ldr	r1, [r5, #16]
   20902:	6828      	ldr	r0, [r5, #0]
   20904:	47d8      	blx	fp
   20906:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   20908:	d177      	bne.n	209fa <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2090a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   2090c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2090e:	2e00      	cmp	r6, #0
   20910:	d100      	bne.n	20914 <dir_find+0x74>
   20912:	e080      	b.n	20a16 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   20914:	7ae2      	ldrb	r2, [r4, #11]
   20916:	233f      	movs	r3, #63	; 0x3f
   20918:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2091a:	2ee5      	cmp	r6, #229	; 0xe5
   2091c:	d100      	bne.n	20920 <dir_find+0x80>
   2091e:	e077      	b.n	20a10 <dir_find+0x170>
   20920:	0712      	lsls	r2, r2, #28
   20922:	d5d1      	bpl.n	208c8 <dir_find+0x28>
   20924:	2b0f      	cmp	r3, #15
   20926:	d002      	beq.n	2092e <dir_find+0x8e>
			ord = 0xFF;
   20928:	23ff      	movs	r3, #255	; 0xff
   2092a:	469a      	mov	sl, r3
   2092c:	e7e1      	b.n	208f2 <dir_find+0x52>
				if (dj->lfn) {
   2092e:	69ef      	ldr	r7, [r5, #28]
   20930:	2f00      	cmp	r7, #0
   20932:	d0de      	beq.n	208f2 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   20934:	0673      	lsls	r3, r6, #25
   20936:	d518      	bpl.n	2096a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   20938:	7b63      	ldrb	r3, [r4, #13]
   2093a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   2093c:	2340      	movs	r3, #64	; 0x40
   2093e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   20940:	88eb      	ldrh	r3, [r5, #6]
   20942:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20944:	7b63      	ldrb	r3, [r4, #13]
   20946:	9300      	str	r3, [sp, #0]
   20948:	22ff      	movs	r2, #255	; 0xff
   2094a:	4692      	mov	sl, r2
   2094c:	454b      	cmp	r3, r9
   2094e:	d1d0      	bne.n	208f2 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   20950:	7823      	ldrb	r3, [r4, #0]
   20952:	3abf      	subs	r2, #191	; 0xbf
   20954:	4393      	bics	r3, r2
   20956:	3b01      	subs	r3, #1
   20958:	005a      	lsls	r2, r3, #1
   2095a:	18d2      	adds	r2, r2, r3
   2095c:	0092      	lsls	r2, r2, #2
   2095e:	4692      	mov	sl, r2
   20960:	449a      	add	sl, r3
	s = 0; wc = 1;
   20962:	2201      	movs	r2, #1
   20964:	2300      	movs	r3, #0
   20966:	4699      	mov	r9, r3
   20968:	e01d      	b.n	209a6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2096a:	45b2      	cmp	sl, r6
   2096c:	d0ea      	beq.n	20944 <dir_find+0xa4>
   2096e:	23ff      	movs	r3, #255	; 0xff
   20970:	469a      	mov	sl, r3
   20972:	e7be      	b.n	208f2 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   20974:	4b2d      	ldr	r3, [pc, #180]	; (20a2c <dir_find+0x18c>)
   20976:	4798      	blx	r3
   20978:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2097a:	4653      	mov	r3, sl
   2097c:	2bfe      	cmp	r3, #254	; 0xfe
   2097e:	d81f      	bhi.n	209c0 <dir_find+0x120>
   20980:	2301      	movs	r3, #1
   20982:	4453      	add	r3, sl
   20984:	4698      	mov	r8, r3
   20986:	4653      	mov	r3, sl
   20988:	005b      	lsls	r3, r3, #1
   2098a:	5bd8      	ldrh	r0, [r3, r7]
   2098c:	4b27      	ldr	r3, [pc, #156]	; (20a2c <dir_find+0x18c>)
   2098e:	4798      	blx	r3
   20990:	0002      	movs	r2, r0
   20992:	9b01      	ldr	r3, [sp, #4]
   20994:	4283      	cmp	r3, r0
   20996:	d113      	bne.n	209c0 <dir_find+0x120>
   20998:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2099a:	2301      	movs	r3, #1
   2099c:	469c      	mov	ip, r3
   2099e:	44e1      	add	r9, ip
   209a0:	464b      	mov	r3, r9
   209a2:	2b0d      	cmp	r3, #13
   209a4:	d011      	beq.n	209ca <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   209a6:	4b22      	ldr	r3, [pc, #136]	; (20a30 <dir_find+0x190>)
   209a8:	4649      	mov	r1, r9
   209aa:	5cc9      	ldrb	r1, [r1, r3]
   209ac:	1863      	adds	r3, r4, r1
   209ae:	785b      	ldrb	r3, [r3, #1]
   209b0:	021b      	lsls	r3, r3, #8
   209b2:	5c60      	ldrb	r0, [r4, r1]
   209b4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   209b6:	2a00      	cmp	r2, #0
   209b8:	d1dc      	bne.n	20974 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   209ba:	4b1e      	ldr	r3, [pc, #120]	; (20a34 <dir_find+0x194>)
   209bc:	4298      	cmp	r0, r3
   209be:	d0ec      	beq.n	2099a <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   209c0:	9b00      	ldr	r3, [sp, #0]
   209c2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   209c4:	23ff      	movs	r3, #255	; 0xff
   209c6:	469a      	mov	sl, r3
   209c8:	e793      	b.n	208f2 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   209ca:	7823      	ldrb	r3, [r4, #0]
   209cc:	065b      	lsls	r3, r3, #25
   209ce:	d506      	bpl.n	209de <dir_find+0x13e>
   209d0:	2a00      	cmp	r2, #0
   209d2:	d004      	beq.n	209de <dir_find+0x13e>
   209d4:	4653      	mov	r3, sl
   209d6:	005b      	lsls	r3, r3, #1
   209d8:	5bdb      	ldrh	r3, [r3, r7]
   209da:	2b00      	cmp	r3, #0
   209dc:	d1f0      	bne.n	209c0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   209de:	3e01      	subs	r6, #1
   209e0:	b2f3      	uxtb	r3, r6
   209e2:	469a      	mov	sl, r3
   209e4:	9b00      	ldr	r3, [sp, #0]
   209e6:	4699      	mov	r9, r3
   209e8:	e783      	b.n	208f2 <dir_find+0x52>
   209ea:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   209ec:	5ce1      	ldrb	r1, [r4, r3]
   209ee:	5cc2      	ldrb	r2, [r0, r3]
   209f0:	4291      	cmp	r1, r2
   209f2:	d10a      	bne.n	20a0a <dir_find+0x16a>
   209f4:	3301      	adds	r3, #1
   209f6:	2b0b      	cmp	r3, #11
   209f8:	d1f8      	bne.n	209ec <dir_find+0x14c>
}
   209fa:	0038      	movs	r0, r7
   209fc:	b003      	add	sp, #12
   209fe:	bc3c      	pop	{r2, r3, r4, r5}
   20a00:	4690      	mov	r8, r2
   20a02:	4699      	mov	r9, r3
   20a04:	46a2      	mov	sl, r4
   20a06:	46ab      	mov	fp, r5
   20a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20a0a:	23ff      	movs	r3, #255	; 0xff
   20a0c:	469a      	mov	sl, r3
   20a0e:	e770      	b.n	208f2 <dir_find+0x52>
			ord = 0xFF;
   20a10:	23ff      	movs	r3, #255	; 0xff
   20a12:	469a      	mov	sl, r3
   20a14:	e76d      	b.n	208f2 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   20a16:	2704      	movs	r7, #4
   20a18:	e7ef      	b.n	209fa <dir_find+0x15a>
   20a1a:	46c0      	nop			; (mov r8, r8)
   20a1c:	00020461 	.word	0x00020461
   20a20:	000202c5 	.word	0x000202c5
   20a24:	0001fe23 	.word	0x0001fe23
   20a28:	0002077d 	.word	0x0002077d
   20a2c:	00021631 	.word	0x00021631
   20a30:	0002a424 	.word	0x0002a424
   20a34:	0000ffff 	.word	0x0000ffff

00020a38 <dir_register>:
{
   20a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a3a:	46de      	mov	lr, fp
   20a3c:	4657      	mov	r7, sl
   20a3e:	464e      	mov	r6, r9
   20a40:	4645      	mov	r5, r8
   20a42:	b5e0      	push	{r5, r6, r7, lr}
   20a44:	b089      	sub	sp, #36	; 0x24
   20a46:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   20a48:	6987      	ldr	r7, [r0, #24]
   20a4a:	69c3      	ldr	r3, [r0, #28]
   20a4c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   20a4e:	ad05      	add	r5, sp, #20
   20a50:	220c      	movs	r2, #12
   20a52:	0039      	movs	r1, r7
   20a54:	0028      	movs	r0, r5
   20a56:	4ba7      	ldr	r3, [pc, #668]	; (20cf4 <dir_register+0x2bc>)
   20a58:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   20a5a:	7aeb      	ldrb	r3, [r5, #11]
   20a5c:	07db      	lsls	r3, r3, #31
   20a5e:	d400      	bmi.n	20a62 <dir_register+0x2a>
   20a60:	e070      	b.n	20b44 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   20a62:	2300      	movs	r3, #0
   20a64:	72fb      	strb	r3, [r7, #11]
   20a66:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   20a68:	220b      	movs	r2, #11
   20a6a:	a905      	add	r1, sp, #20
   20a6c:	0038      	movs	r0, r7
   20a6e:	4ba1      	ldr	r3, [pc, #644]	; (20cf4 <dir_register+0x2bc>)
   20a70:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20a72:	2301      	movs	r3, #1
		ns[i--] = c;
   20a74:	ad03      	add	r5, sp, #12
   20a76:	001e      	movs	r6, r3
   20a78:	46a0      	mov	r8, r4
   20a7a:	e049      	b.n	20b10 <dir_register+0xd8>
   20a7c:	3801      	subs	r0, #1
   20a7e:	1829      	adds	r1, r5, r0
   20a80:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   20a82:	091b      	lsrs	r3, r3, #4
   20a84:	b29b      	uxth	r3, r3
	} while (seq);
   20a86:	2b00      	cmp	r3, #0
   20a88:	d007      	beq.n	20a9a <dir_register+0x62>
		c = (seq % 16) + '0';
   20a8a:	0021      	movs	r1, r4
   20a8c:	4019      	ands	r1, r3
   20a8e:	000a      	movs	r2, r1
   20a90:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   20a92:	2a39      	cmp	r2, #57	; 0x39
   20a94:	d9f2      	bls.n	20a7c <dir_register+0x44>
   20a96:	3207      	adds	r2, #7
   20a98:	e7f0      	b.n	20a7c <dir_register+0x44>
	ns[i] = '~';
   20a9a:	337e      	adds	r3, #126	; 0x7e
   20a9c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   20a9e:	2800      	cmp	r0, #0
   20aa0:	d00a      	beq.n	20ab8 <dir_register+0x80>
   20aa2:	783b      	ldrb	r3, [r7, #0]
   20aa4:	2b20      	cmp	r3, #32
   20aa6:	d009      	beq.n	20abc <dir_register+0x84>
   20aa8:	2300      	movs	r3, #0
   20aaa:	3301      	adds	r3, #1
   20aac:	4298      	cmp	r0, r3
   20aae:	d007      	beq.n	20ac0 <dir_register+0x88>
   20ab0:	5cfa      	ldrb	r2, [r7, r3]
   20ab2:	2a20      	cmp	r2, #32
   20ab4:	d1f9      	bne.n	20aaa <dir_register+0x72>
   20ab6:	e009      	b.n	20acc <dir_register+0x94>
   20ab8:	0003      	movs	r3, r0
   20aba:	e007      	b.n	20acc <dir_register+0x94>
   20abc:	2300      	movs	r3, #0
   20abe:	e005      	b.n	20acc <dir_register+0x94>
   20ac0:	0003      	movs	r3, r0
   20ac2:	e003      	b.n	20acc <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20ac4:	54fa      	strb	r2, [r7, r3]
   20ac6:	3301      	adds	r3, #1
	} while (j < 8);
   20ac8:	2b07      	cmp	r3, #7
   20aca:	d805      	bhi.n	20ad8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20acc:	2220      	movs	r2, #32
   20ace:	2807      	cmp	r0, #7
   20ad0:	d8f8      	bhi.n	20ac4 <dir_register+0x8c>
   20ad2:	5c2a      	ldrb	r2, [r5, r0]
   20ad4:	3001      	adds	r0, #1
   20ad6:	e7f5      	b.n	20ac4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   20ad8:	4640      	mov	r0, r8
   20ada:	4b87      	ldr	r3, [pc, #540]	; (20cf8 <dir_register+0x2c0>)
   20adc:	4798      	blx	r3
			if (res != FR_OK) break;
   20ade:	2800      	cmp	r0, #0
   20ae0:	d11c      	bne.n	20b1c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   20ae2:	3601      	adds	r6, #1
   20ae4:	b2b6      	uxth	r6, r6
   20ae6:	2e64      	cmp	r6, #100	; 0x64
   20ae8:	d015      	beq.n	20b16 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   20aea:	220b      	movs	r2, #11
   20aec:	a905      	add	r1, sp, #20
   20aee:	0038      	movs	r0, r7
   20af0:	4b80      	ldr	r3, [pc, #512]	; (20cf4 <dir_register+0x2bc>)
   20af2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20af4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   20af6:	2e05      	cmp	r6, #5
   20af8:	d90a      	bls.n	20b10 <dir_register+0xd8>
   20afa:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   20afc:	085a      	lsrs	r2, r3, #1
   20afe:	03db      	lsls	r3, r3, #15
   20b00:	4313      	orrs	r3, r2
   20b02:	880a      	ldrh	r2, [r1, #0]
   20b04:	189b      	adds	r3, r3, r2
   20b06:	b29b      	uxth	r3, r3
   20b08:	3102      	adds	r1, #2
   20b0a:	880a      	ldrh	r2, [r1, #0]
   20b0c:	2a00      	cmp	r2, #0
   20b0e:	d1f5      	bne.n	20afc <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   20b10:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   20b12:	240f      	movs	r4, #15
   20b14:	e7b9      	b.n	20a8a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20b16:	2307      	movs	r3, #7
   20b18:	4698      	mov	r8, r3
   20b1a:	e006      	b.n	20b2a <dir_register+0xf2>
   20b1c:	4644      	mov	r4, r8
   20b1e:	4680      	mov	r8, r0
   20b20:	2e64      	cmp	r6, #100	; 0x64
   20b22:	d100      	bne.n	20b26 <dir_register+0xee>
   20b24:	e0a5      	b.n	20c72 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   20b26:	2804      	cmp	r0, #4
   20b28:	d007      	beq.n	20b3a <dir_register+0x102>
}
   20b2a:	4640      	mov	r0, r8
   20b2c:	b009      	add	sp, #36	; 0x24
   20b2e:	bc3c      	pop	{r2, r3, r4, r5}
   20b30:	4690      	mov	r8, r2
   20b32:	4699      	mov	r9, r3
   20b34:	46a2      	mov	sl, r4
   20b36:	46ab      	mov	fp, r5
   20b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   20b3a:	ab05      	add	r3, sp, #20
   20b3c:	7adb      	ldrb	r3, [r3, #11]
   20b3e:	72fb      	strb	r3, [r7, #11]
   20b40:	4653      	mov	r3, sl
   20b42:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20b44:	ab05      	add	r3, sp, #20
   20b46:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   20b48:	2201      	movs	r2, #1
   20b4a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20b4c:	079b      	lsls	r3, r3, #30
   20b4e:	d511      	bpl.n	20b74 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   20b50:	4653      	mov	r3, sl
   20b52:	881b      	ldrh	r3, [r3, #0]
   20b54:	2b00      	cmp	r3, #0
   20b56:	d01b      	beq.n	20b90 <dir_register+0x158>
   20b58:	2000      	movs	r0, #0
   20b5a:	4652      	mov	r2, sl
   20b5c:	3001      	adds	r0, #1
   20b5e:	b280      	uxth	r0, r0
   20b60:	0043      	lsls	r3, r0, #1
   20b62:	5a9b      	ldrh	r3, [r3, r2]
   20b64:	2b00      	cmp	r3, #0
   20b66:	d1f9      	bne.n	20b5c <dir_register+0x124>
		ne = (ne + 25) / 13;
   20b68:	3019      	adds	r0, #25
   20b6a:	210d      	movs	r1, #13
   20b6c:	4b63      	ldr	r3, [pc, #396]	; (20cfc <dir_register+0x2c4>)
   20b6e:	4798      	blx	r3
   20b70:	b283      	uxth	r3, r0
   20b72:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   20b74:	2100      	movs	r1, #0
   20b76:	0020      	movs	r0, r4
   20b78:	4b61      	ldr	r3, [pc, #388]	; (20d00 <dir_register+0x2c8>)
   20b7a:	4798      	blx	r3
   20b7c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   20b7e:	2800      	cmp	r0, #0
   20b80:	d1d3      	bne.n	20b2a <dir_register+0xf2>
   20b82:	4682      	mov	sl, r0
   20b84:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   20b86:	4f5f      	ldr	r7, [pc, #380]	; (20d04 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   20b88:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20b8a:	4b5f      	ldr	r3, [pc, #380]	; (20d08 <dir_register+0x2d0>)
   20b8c:	4699      	mov	r9, r3
   20b8e:	e00b      	b.n	20ba8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   20b90:	2000      	movs	r0, #0
   20b92:	e7e9      	b.n	20b68 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   20b94:	1c6b      	adds	r3, r5, #1
   20b96:	b29b      	uxth	r3, r3
   20b98:	459b      	cmp	fp, r3
   20b9a:	d06d      	beq.n	20c78 <dir_register+0x240>
   20b9c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20b9e:	2101      	movs	r1, #1
   20ba0:	0020      	movs	r0, r4
   20ba2:	47c8      	blx	r9
	} while (res == FR_OK);
   20ba4:	2800      	cmp	r0, #0
   20ba6:	d112      	bne.n	20bce <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   20ba8:	6921      	ldr	r1, [r4, #16]
   20baa:	6820      	ldr	r0, [r4, #0]
   20bac:	47b8      	blx	r7
		if (res != FR_OK) break;
   20bae:	2800      	cmp	r0, #0
   20bb0:	d000      	beq.n	20bb4 <dir_register+0x17c>
   20bb2:	e098      	b.n	20ce6 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   20bb4:	6963      	ldr	r3, [r4, #20]
   20bb6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   20bb8:	2be5      	cmp	r3, #229	; 0xe5
   20bba:	d001      	beq.n	20bc0 <dir_register+0x188>
   20bbc:	2b00      	cmp	r3, #0
   20bbe:	d104      	bne.n	20bca <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   20bc0:	2d00      	cmp	r5, #0
   20bc2:	d1e7      	bne.n	20b94 <dir_register+0x15c>
   20bc4:	88e3      	ldrh	r3, [r4, #6]
   20bc6:	469a      	mov	sl, r3
   20bc8:	e7e4      	b.n	20b94 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   20bca:	0035      	movs	r5, r6
   20bcc:	e7e7      	b.n	20b9e <dir_register+0x166>
   20bce:	4680      	mov	r8, r0
   20bd0:	e7ab      	b.n	20b2a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   20bd2:	4651      	mov	r1, sl
   20bd4:	0020      	movs	r0, r4
   20bd6:	4b4a      	ldr	r3, [pc, #296]	; (20d00 <dir_register+0x2c8>)
   20bd8:	4798      	blx	r3
   20bda:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20bdc:	2800      	cmp	r0, #0
   20bde:	d1a4      	bne.n	20b2a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   20be0:	69a0      	ldr	r0, [r4, #24]
   20be2:	4b4a      	ldr	r3, [pc, #296]	; (20d0c <dir_register+0x2d4>)
   20be4:	4798      	blx	r3
   20be6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20be8:	46a8      	mov	r8, r5
   20bea:	e01f      	b.n	20c2c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20bec:	0022      	movs	r2, r4
   20bee:	e067      	b.n	20cc0 <dir_register+0x288>
   20bf0:	465e      	mov	r6, fp
   20bf2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   20bf4:	4946      	ldr	r1, [pc, #280]	; (20d10 <dir_register+0x2d8>)
   20bf6:	428b      	cmp	r3, r1
   20bf8:	d003      	beq.n	20c02 <dir_register+0x1ca>
   20bfa:	0052      	lsls	r2, r2, #1
   20bfc:	5b93      	ldrh	r3, [r2, r6]
   20bfe:	2b00      	cmp	r3, #0
   20c00:	d103      	bne.n	20c0a <dir_register+0x1d2>
   20c02:	2340      	movs	r3, #64	; 0x40
   20c04:	464a      	mov	r2, r9
   20c06:	431a      	orrs	r2, r3
   20c08:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   20c0a:	464b      	mov	r3, r9
   20c0c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   20c0e:	2301      	movs	r3, #1
   20c10:	6822      	ldr	r2, [r4, #0]
   20c12:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   20c14:	2100      	movs	r1, #0
   20c16:	0020      	movs	r0, r4
   20c18:	4b3b      	ldr	r3, [pc, #236]	; (20d08 <dir_register+0x2d0>)
   20c1a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   20c1c:	2800      	cmp	r0, #0
   20c1e:	d166      	bne.n	20cee <dir_register+0x2b6>
   20c20:	4645      	mov	r5, r8
   20c22:	3d01      	subs	r5, #1
   20c24:	b2ab      	uxth	r3, r5
   20c26:	4698      	mov	r8, r3
   20c28:	2b00      	cmp	r3, #0
   20c2a:	d027      	beq.n	20c7c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   20c2c:	6921      	ldr	r1, [r4, #16]
   20c2e:	6820      	ldr	r0, [r4, #0]
   20c30:	4b34      	ldr	r3, [pc, #208]	; (20d04 <dir_register+0x2cc>)
   20c32:	4798      	blx	r3
				if (res != FR_OK) break;
   20c34:	2800      	cmp	r0, #0
   20c36:	d158      	bne.n	20cea <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   20c38:	69e6      	ldr	r6, [r4, #28]
   20c3a:	6960      	ldr	r0, [r4, #20]
   20c3c:	4643      	mov	r3, r8
   20c3e:	466a      	mov	r2, sp
   20c40:	70d3      	strb	r3, [r2, #3]
   20c42:	78d3      	ldrb	r3, [r2, #3]
   20c44:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   20c46:	7913      	ldrb	r3, [r2, #4]
   20c48:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   20c4a:	230f      	movs	r3, #15
   20c4c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   20c4e:	2300      	movs	r3, #0
   20c50:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   20c52:	7683      	strb	r3, [r0, #26]
   20c54:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   20c56:	464b      	mov	r3, r9
   20c58:	3b01      	subs	r3, #1
   20c5a:	005a      	lsls	r2, r3, #1
   20c5c:	18d2      	adds	r2, r2, r3
   20c5e:	0092      	lsls	r2, r2, #2
   20c60:	18d2      	adds	r2, r2, r3
   20c62:	492c      	ldr	r1, [pc, #176]	; (20d14 <dir_register+0x2dc>)
   20c64:	000d      	movs	r5, r1
   20c66:	350d      	adds	r5, #13
	s = wc = 0;
   20c68:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20c6a:	4f29      	ldr	r7, [pc, #164]	; (20d10 <dir_register+0x2d8>)
   20c6c:	46b3      	mov	fp, r6
   20c6e:	46a4      	mov	ip, r4
   20c70:	e029      	b.n	20cc6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20c72:	2307      	movs	r3, #7
   20c74:	4698      	mov	r8, r3
   20c76:	e758      	b.n	20b2a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   20c78:	2b01      	cmp	r3, #1
   20c7a:	d8aa      	bhi.n	20bd2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   20c7c:	6921      	ldr	r1, [r4, #16]
   20c7e:	6820      	ldr	r0, [r4, #0]
   20c80:	4b20      	ldr	r3, [pc, #128]	; (20d04 <dir_register+0x2cc>)
   20c82:	4798      	blx	r3
   20c84:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20c86:	2800      	cmp	r0, #0
   20c88:	d000      	beq.n	20c8c <dir_register+0x254>
   20c8a:	e74e      	b.n	20b2a <dir_register+0xf2>
			dir = dj->dir;
   20c8c:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   20c8e:	2220      	movs	r2, #32
   20c90:	2100      	movs	r1, #0
   20c92:	0028      	movs	r0, r5
   20c94:	4b20      	ldr	r3, [pc, #128]	; (20d18 <dir_register+0x2e0>)
   20c96:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   20c98:	220b      	movs	r2, #11
   20c9a:	69a1      	ldr	r1, [r4, #24]
   20c9c:	0028      	movs	r0, r5
   20c9e:	4b15      	ldr	r3, [pc, #84]	; (20cf4 <dir_register+0x2bc>)
   20ca0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   20ca2:	69a3      	ldr	r3, [r4, #24]
   20ca4:	7ada      	ldrb	r2, [r3, #11]
   20ca6:	2318      	movs	r3, #24
   20ca8:	4013      	ands	r3, r2
   20caa:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   20cac:	6823      	ldr	r3, [r4, #0]
   20cae:	2201      	movs	r2, #1
   20cb0:	711a      	strb	r2, [r3, #4]
   20cb2:	e73a      	b.n	20b2a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20cb4:	780c      	ldrb	r4, [r1, #0]
   20cb6:	26ff      	movs	r6, #255	; 0xff
   20cb8:	5506      	strb	r6, [r0, r4]
   20cba:	1904      	adds	r4, r0, r4
   20cbc:	26ff      	movs	r6, #255	; 0xff
   20cbe:	7066      	strb	r6, [r4, #1]
   20cc0:	3101      	adds	r1, #1
	} while (++s < 13);
   20cc2:	42a9      	cmp	r1, r5
   20cc4:	d094      	beq.n	20bf0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20cc6:	42bb      	cmp	r3, r7
   20cc8:	d0f4      	beq.n	20cb4 <dir_register+0x27c>
   20cca:	1c54      	adds	r4, r2, #1
   20ccc:	0052      	lsls	r2, r2, #1
   20cce:	465b      	mov	r3, fp
   20cd0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20cd2:	780a      	ldrb	r2, [r1, #0]
   20cd4:	5483      	strb	r3, [r0, r2]
   20cd6:	1882      	adds	r2, r0, r2
   20cd8:	0a1e      	lsrs	r6, r3, #8
   20cda:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20cdc:	2b00      	cmp	r3, #0
   20cde:	d185      	bne.n	20bec <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20ce0:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20ce2:	003b      	movs	r3, r7
   20ce4:	e7ec      	b.n	20cc0 <dir_register+0x288>
   20ce6:	4680      	mov	r8, r0
   20ce8:	e71f      	b.n	20b2a <dir_register+0xf2>
   20cea:	4680      	mov	r8, r0
   20cec:	e71d      	b.n	20b2a <dir_register+0xf2>
   20cee:	4680      	mov	r8, r0
   20cf0:	e71b      	b.n	20b2a <dir_register+0xf2>
   20cf2:	46c0      	nop			; (mov r8, r8)
   20cf4:	0001fde5 	.word	0x0001fde5
   20cf8:	000208a1 	.word	0x000208a1
   20cfc:	000240fd 	.word	0x000240fd
   20d00:	00020461 	.word	0x00020461
   20d04:	000202c5 	.word	0x000202c5
   20d08:	0002077d 	.word	0x0002077d
   20d0c:	0001fe23 	.word	0x0001fe23
   20d10:	0000ffff 	.word	0x0000ffff
   20d14:	0002a424 	.word	0x0002a424
   20d18:	0001fdf9 	.word	0x0001fdf9

00020d1c <sync>:
{
   20d1c:	b570      	push	{r4, r5, r6, lr}
   20d1e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   20d20:	2100      	movs	r1, #0
   20d22:	4b2c      	ldr	r3, [pc, #176]	; (20dd4 <sync+0xb8>)
   20d24:	4798      	blx	r3
	if (res == FR_OK) {
   20d26:	2800      	cmp	r0, #0
   20d28:	d10a      	bne.n	20d40 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20d2a:	7823      	ldrb	r3, [r4, #0]
   20d2c:	2b03      	cmp	r3, #3
   20d2e:	d008      	beq.n	20d42 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   20d30:	7860      	ldrb	r0, [r4, #1]
   20d32:	2200      	movs	r2, #0
   20d34:	2100      	movs	r1, #0
   20d36:	4b28      	ldr	r3, [pc, #160]	; (20dd8 <sync+0xbc>)
   20d38:	4798      	blx	r3
   20d3a:	1e43      	subs	r3, r0, #1
   20d3c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   20d3e:	b2c0      	uxtb	r0, r0
}
   20d40:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20d42:	7963      	ldrb	r3, [r4, #5]
   20d44:	2b00      	cmp	r3, #0
   20d46:	d0f3      	beq.n	20d30 <sync+0x14>
			fs->winsect = 0;
   20d48:	2600      	movs	r6, #0
   20d4a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   20d4c:	0025      	movs	r5, r4
   20d4e:	3530      	adds	r5, #48	; 0x30
   20d50:	2280      	movs	r2, #128	; 0x80
   20d52:	0092      	lsls	r2, r2, #2
   20d54:	2100      	movs	r1, #0
   20d56:	0028      	movs	r0, r5
   20d58:	4b20      	ldr	r3, [pc, #128]	; (20ddc <sync+0xc0>)
   20d5a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   20d5c:	2255      	movs	r2, #85	; 0x55
   20d5e:	4b20      	ldr	r3, [pc, #128]	; (20de0 <sync+0xc4>)
   20d60:	54e2      	strb	r2, [r4, r3]
   20d62:	3255      	adds	r2, #85	; 0x55
   20d64:	4b1f      	ldr	r3, [pc, #124]	; (20de4 <sync+0xc8>)
   20d66:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   20d68:	3bde      	subs	r3, #222	; 0xde
   20d6a:	3bff      	subs	r3, #255	; 0xff
   20d6c:	3a7a      	subs	r2, #122	; 0x7a
   20d6e:	54a3      	strb	r3, [r4, r2]
   20d70:	3201      	adds	r2, #1
   20d72:	54a3      	strb	r3, [r4, r2]
   20d74:	330f      	adds	r3, #15
   20d76:	3201      	adds	r2, #1
   20d78:	54a3      	strb	r3, [r4, r2]
   20d7a:	320f      	adds	r2, #15
   20d7c:	2133      	movs	r1, #51	; 0x33
   20d7e:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   20d80:	313f      	adds	r1, #63	; 0x3f
   20d82:	2085      	movs	r0, #133	; 0x85
   20d84:	0080      	lsls	r0, r0, #2
   20d86:	5421      	strb	r1, [r4, r0]
   20d88:	4817      	ldr	r0, [pc, #92]	; (20de8 <sync+0xcc>)
   20d8a:	5421      	strb	r1, [r4, r0]
   20d8c:	4917      	ldr	r1, [pc, #92]	; (20dec <sync+0xd0>)
   20d8e:	5462      	strb	r2, [r4, r1]
   20d90:	4a17      	ldr	r2, [pc, #92]	; (20df0 <sync+0xd4>)
   20d92:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   20d94:	6923      	ldr	r3, [r4, #16]
   20d96:	3201      	adds	r2, #1
   20d98:	54a3      	strb	r3, [r4, r2]
   20d9a:	0a19      	lsrs	r1, r3, #8
   20d9c:	4a15      	ldr	r2, [pc, #84]	; (20df4 <sync+0xd8>)
   20d9e:	54a1      	strb	r1, [r4, r2]
   20da0:	0c19      	lsrs	r1, r3, #16
   20da2:	4a15      	ldr	r2, [pc, #84]	; (20df8 <sync+0xdc>)
   20da4:	54a1      	strb	r1, [r4, r2]
   20da6:	0e1b      	lsrs	r3, r3, #24
   20da8:	4a14      	ldr	r2, [pc, #80]	; (20dfc <sync+0xe0>)
   20daa:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   20dac:	68e3      	ldr	r3, [r4, #12]
   20dae:	3201      	adds	r2, #1
   20db0:	54a3      	strb	r3, [r4, r2]
   20db2:	0a19      	lsrs	r1, r3, #8
   20db4:	4a12      	ldr	r2, [pc, #72]	; (20e00 <sync+0xe4>)
   20db6:	54a1      	strb	r1, [r4, r2]
   20db8:	0c19      	lsrs	r1, r3, #16
   20dba:	4a12      	ldr	r2, [pc, #72]	; (20e04 <sync+0xe8>)
   20dbc:	54a1      	strb	r1, [r4, r2]
   20dbe:	0e1b      	lsrs	r3, r3, #24
   20dc0:	4a11      	ldr	r2, [pc, #68]	; (20e08 <sync+0xec>)
   20dc2:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   20dc4:	7860      	ldrb	r0, [r4, #1]
   20dc6:	2301      	movs	r3, #1
   20dc8:	6962      	ldr	r2, [r4, #20]
   20dca:	0029      	movs	r1, r5
   20dcc:	4d0f      	ldr	r5, [pc, #60]	; (20e0c <sync+0xf0>)
   20dce:	47a8      	blx	r5
			fs->fsi_flag = 0;
   20dd0:	7166      	strb	r6, [r4, #5]
   20dd2:	e7ad      	b.n	20d30 <sync+0x14>
   20dd4:	000202c5 	.word	0x000202c5
   20dd8:	0001fd29 	.word	0x0001fd29
   20ddc:	0001fdf9 	.word	0x0001fdf9
   20de0:	0000022e 	.word	0x0000022e
   20de4:	0000022f 	.word	0x0000022f
   20de8:	00000215 	.word	0x00000215
   20dec:	00000216 	.word	0x00000216
   20df0:	00000217 	.word	0x00000217
   20df4:	00000219 	.word	0x00000219
   20df8:	0000021a 	.word	0x0000021a
   20dfc:	0000021b 	.word	0x0000021b
   20e00:	0000021d 	.word	0x0000021d
   20e04:	0000021e 	.word	0x0000021e
   20e08:	0000021f 	.word	0x0000021f
   20e0c:	0001fca5 	.word	0x0001fca5

00020e10 <follow_path>:
{
   20e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e12:	46de      	mov	lr, fp
   20e14:	4657      	mov	r7, sl
   20e16:	464e      	mov	r6, r9
   20e18:	4645      	mov	r5, r8
   20e1a:	b5e0      	push	{r5, r6, r7, lr}
   20e1c:	b083      	sub	sp, #12
   20e1e:	4682      	mov	sl, r0
   20e20:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   20e22:	780b      	ldrb	r3, [r1, #0]
   20e24:	2b2f      	cmp	r3, #47	; 0x2f
   20e26:	d00f      	beq.n	20e48 <follow_path+0x38>
   20e28:	2b5c      	cmp	r3, #92	; 0x5c
   20e2a:	d00d      	beq.n	20e48 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   20e2c:	2300      	movs	r3, #0
   20e2e:	4652      	mov	r2, sl
   20e30:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   20e32:	782b      	ldrb	r3, [r5, #0]
   20e34:	4657      	mov	r7, sl
   20e36:	2b1f      	cmp	r3, #31
   20e38:	d809      	bhi.n	20e4e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   20e3a:	2100      	movs	r1, #0
   20e3c:	4650      	mov	r0, sl
   20e3e:	4bb2      	ldr	r3, [pc, #712]	; (21108 <follow_path+0x2f8>)
   20e40:	4798      	blx	r3
		dj->dir = 0;
   20e42:	2300      	movs	r3, #0
   20e44:	617b      	str	r3, [r7, #20]
   20e46:	e13a      	b.n	210be <follow_path+0x2ae>
		path++;
   20e48:	3501      	adds	r5, #1
   20e4a:	e7ef      	b.n	20e2c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   20e4c:	3501      	adds	r5, #1
   20e4e:	7828      	ldrb	r0, [r5, #0]
   20e50:	282f      	cmp	r0, #47	; 0x2f
   20e52:	d0fb      	beq.n	20e4c <follow_path+0x3c>
   20e54:	285c      	cmp	r0, #92	; 0x5c
   20e56:	d0f9      	beq.n	20e4c <follow_path+0x3c>
	lfn = dj->lfn;
   20e58:	69fb      	ldr	r3, [r7, #28]
   20e5a:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   20e5c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20e5e:	281f      	cmp	r0, #31
   20e60:	d800      	bhi.n	20e64 <follow_path+0x54>
   20e62:	e13b      	b.n	210dc <follow_path+0x2cc>
   20e64:	282f      	cmp	r0, #47	; 0x2f
   20e66:	d100      	bne.n	20e6a <follow_path+0x5a>
   20e68:	e13b      	b.n	210e2 <follow_path+0x2d2>
   20e6a:	285c      	cmp	r0, #92	; 0x5c
   20e6c:	d100      	bne.n	20e70 <follow_path+0x60>
   20e6e:	e13b      	b.n	210e8 <follow_path+0x2d8>
   20e70:	1c6e      	adds	r6, r5, #1
   20e72:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20e74:	2380      	movs	r3, #128	; 0x80
   20e76:	005b      	lsls	r3, r3, #1
   20e78:	4698      	mov	r8, r3
   20e7a:	46bb      	mov	fp, r7
   20e7c:	002b      	movs	r3, r5
   20e7e:	0025      	movs	r5, r4
   20e80:	0034      	movs	r4, r6
   20e82:	4656      	mov	r6, sl
   20e84:	4699      	mov	r9, r3
   20e86:	e011      	b.n	20eac <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20e88:	2b00      	cmp	r3, #0
   20e8a:	d135      	bne.n	20ef8 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   20e8c:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   20e8e:	1c6b      	adds	r3, r5, #1
   20e90:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20e92:	281f      	cmp	r0, #31
   20e94:	d91e      	bls.n	20ed4 <follow_path+0xc4>
   20e96:	282f      	cmp	r0, #47	; 0x2f
   20e98:	d100      	bne.n	20e9c <follow_path+0x8c>
   20e9a:	e128      	b.n	210ee <follow_path+0x2de>
   20e9c:	285c      	cmp	r0, #92	; 0x5c
   20e9e:	d100      	bne.n	20ea2 <follow_path+0x92>
   20ea0:	e142      	b.n	21128 <follow_path+0x318>
   20ea2:	3602      	adds	r6, #2
   20ea4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20ea6:	4543      	cmp	r3, r8
   20ea8:	d026      	beq.n	20ef8 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   20eaa:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   20eac:	2101      	movs	r1, #1
   20eae:	4b97      	ldr	r3, [pc, #604]	; (2110c <follow_path+0x2fc>)
   20eb0:	4798      	blx	r3
   20eb2:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   20eb4:	d020      	beq.n	20ef8 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20eb6:	287f      	cmp	r0, #127	; 0x7f
   20eb8:	d8e8      	bhi.n	20e8c <follow_path+0x7c>
	while (*str && *str != chr) str++;
   20eba:	2822      	cmp	r0, #34	; 0x22
   20ebc:	d100      	bne.n	20ec0 <follow_path+0xb0>
   20ebe:	e0fd      	b.n	210bc <follow_path+0x2ac>
   20ec0:	232a      	movs	r3, #42	; 0x2a
   20ec2:	4a93      	ldr	r2, [pc, #588]	; (21110 <follow_path+0x300>)
   20ec4:	b29f      	uxth	r7, r3
   20ec6:	428f      	cmp	r7, r1
   20ec8:	d0de      	beq.n	20e88 <follow_path+0x78>
   20eca:	3201      	adds	r2, #1
   20ecc:	7813      	ldrb	r3, [r2, #0]
   20ece:	2b00      	cmp	r3, #0
   20ed0:	d1f8      	bne.n	20ec4 <follow_path+0xb4>
   20ed2:	e7db      	b.n	20e8c <follow_path+0x7c>
   20ed4:	002c      	movs	r4, r5
   20ed6:	465f      	mov	r7, fp
   20ed8:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   20eda:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   20edc:	2604      	movs	r6, #4
   20ede:	e10b      	b.n	210f8 <follow_path+0x2e8>
		di--;
   20ee0:	3c01      	subs	r4, #1
   20ee2:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   20ee4:	2c00      	cmp	r4, #0
   20ee6:	d100      	bne.n	20eea <follow_path+0xda>
   20ee8:	e0e8      	b.n	210bc <follow_path+0x2ac>
		w = lfn[di-1];
   20eea:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   20eec:	2a20      	cmp	r2, #32
   20eee:	d0f7      	beq.n	20ee0 <follow_path+0xd0>
   20ef0:	2a2e      	cmp	r2, #46	; 0x2e
   20ef2:	d0f5      	beq.n	20ee0 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   20ef4:	2c00      	cmp	r4, #0
   20ef6:	d101      	bne.n	20efc <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   20ef8:	2006      	movs	r0, #6
	return res;
   20efa:	e0e0      	b.n	210be <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   20efc:	0063      	lsls	r3, r4, #1
   20efe:	4698      	mov	r8, r3
   20f00:	2300      	movs	r3, #0
   20f02:	4652      	mov	r2, sl
   20f04:	4641      	mov	r1, r8
   20f06:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   20f08:	220b      	movs	r2, #11
   20f0a:	2120      	movs	r1, #32
   20f0c:	69b8      	ldr	r0, [r7, #24]
   20f0e:	4b81      	ldr	r3, [pc, #516]	; (21114 <follow_path+0x304>)
   20f10:	4798      	blx	r3
   20f12:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   20f14:	2300      	movs	r3, #0
   20f16:	e001      	b.n	20f1c <follow_path+0x10c>
   20f18:	3301      	adds	r3, #1
   20f1a:	3202      	adds	r2, #2
   20f1c:	8811      	ldrh	r1, [r2, #0]
   20f1e:	2920      	cmp	r1, #32
   20f20:	d0fa      	beq.n	20f18 <follow_path+0x108>
   20f22:	292e      	cmp	r1, #46	; 0x2e
   20f24:	d0f8      	beq.n	20f18 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   20f26:	2b00      	cmp	r3, #0
   20f28:	d001      	beq.n	20f2e <follow_path+0x11e>
   20f2a:	2203      	movs	r2, #3
   20f2c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   20f2e:	4652      	mov	r2, sl
   20f30:	4442      	add	r2, r8
   20f32:	3a02      	subs	r2, #2
   20f34:	8812      	ldrh	r2, [r2, #0]
   20f36:	2a2e      	cmp	r2, #46	; 0x2e
   20f38:	d009      	beq.n	20f4e <follow_path+0x13e>
   20f3a:	4642      	mov	r2, r8
   20f3c:	3a04      	subs	r2, #4
   20f3e:	4452      	add	r2, sl
   20f40:	3c01      	subs	r4, #1
   20f42:	2c00      	cmp	r4, #0
   20f44:	d003      	beq.n	20f4e <follow_path+0x13e>
   20f46:	3a02      	subs	r2, #2
   20f48:	8851      	ldrh	r1, [r2, #2]
   20f4a:	292e      	cmp	r1, #46	; 0x2e
   20f4c:	d1f8      	bne.n	20f40 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   20f4e:	2208      	movs	r2, #8
   20f50:	9201      	str	r2, [sp, #4]
   20f52:	2200      	movs	r2, #0
   20f54:	4693      	mov	fp, r2
   20f56:	4691      	mov	r9, r2
   20f58:	46a0      	mov	r8, r4
   20f5a:	e006      	b.n	20f6a <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20f5c:	4544      	cmp	r4, r8
   20f5e:	d100      	bne.n	20f62 <follow_path+0x152>
   20f60:	e0e6      	b.n	21130 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   20f62:	2303      	movs	r3, #3
   20f64:	431e      	orrs	r6, r3
   20f66:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   20f68:	0023      	movs	r3, r4
   20f6a:	1c5c      	adds	r4, r3, #1
   20f6c:	005b      	lsls	r3, r3, #1
   20f6e:	4652      	mov	r2, sl
   20f70:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   20f72:	2800      	cmp	r0, #0
   20f74:	d02c      	beq.n	20fd0 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20f76:	2820      	cmp	r0, #32
   20f78:	d0f3      	beq.n	20f62 <follow_path+0x152>
   20f7a:	282e      	cmp	r0, #46	; 0x2e
   20f7c:	d0ee      	beq.n	20f5c <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   20f7e:	9b01      	ldr	r3, [sp, #4]
   20f80:	459b      	cmp	fp, r3
   20f82:	d219      	bcs.n	20fb8 <follow_path+0x1a8>
   20f84:	4544      	cmp	r4, r8
   20f86:	d100      	bne.n	20f8a <follow_path+0x17a>
   20f88:	e0d2      	b.n	21130 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   20f8a:	287f      	cmp	r0, #127	; 0x7f
   20f8c:	d85e      	bhi.n	2104c <follow_path+0x23c>
	while (*str && *str != chr) str++;
   20f8e:	282b      	cmp	r0, #43	; 0x2b
   20f90:	d06e      	beq.n	21070 <follow_path+0x260>
   20f92:	232c      	movs	r3, #44	; 0x2c
   20f94:	4a60      	ldr	r2, [pc, #384]	; (21118 <follow_path+0x308>)
   20f96:	b299      	uxth	r1, r3
   20f98:	4281      	cmp	r1, r0
   20f9a:	d067      	beq.n	2106c <follow_path+0x25c>
   20f9c:	3201      	adds	r2, #1
   20f9e:	7813      	ldrb	r3, [r2, #0]
   20fa0:	2b00      	cmp	r3, #0
   20fa2:	d1f8      	bne.n	20f96 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   20fa4:	0003      	movs	r3, r0
   20fa6:	3b41      	subs	r3, #65	; 0x41
   20fa8:	b29b      	uxth	r3, r3
   20faa:	2b19      	cmp	r3, #25
   20fac:	d86c      	bhi.n	21088 <follow_path+0x278>
					b |= 2;
   20fae:	2302      	movs	r3, #2
   20fb0:	464a      	mov	r2, r9
   20fb2:	431a      	orrs	r2, r3
   20fb4:	4691      	mov	r9, r2
   20fb6:	e05f      	b.n	21078 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   20fb8:	9b01      	ldr	r3, [sp, #4]
   20fba:	2b0b      	cmp	r3, #11
   20fbc:	d03b      	beq.n	21036 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   20fbe:	4544      	cmp	r4, r8
   20fc0:	d100      	bne.n	20fc4 <follow_path+0x1b4>
   20fc2:	e0b9      	b.n	21138 <follow_path+0x328>
   20fc4:	2303      	movs	r3, #3
   20fc6:	431e      	orrs	r6, r3
   20fc8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   20fca:	4544      	cmp	r4, r8
   20fcc:	d800      	bhi.n	20fd0 <follow_path+0x1c0>
   20fce:	e0b3      	b.n	21138 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   20fd0:	69bb      	ldr	r3, [r7, #24]
   20fd2:	781a      	ldrb	r2, [r3, #0]
   20fd4:	2ae5      	cmp	r2, #229	; 0xe5
   20fd6:	d036      	beq.n	21046 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   20fd8:	9b01      	ldr	r3, [sp, #4]
   20fda:	2b08      	cmp	r3, #8
   20fdc:	d060      	beq.n	210a0 <follow_path+0x290>
   20fde:	230c      	movs	r3, #12
   20fe0:	464a      	mov	r2, r9
   20fe2:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   20fe4:	2b0c      	cmp	r3, #12
   20fe6:	d060      	beq.n	210aa <follow_path+0x29a>
   20fe8:	43d2      	mvns	r2, r2
   20fea:	0792      	lsls	r2, r2, #30
   20fec:	d05d      	beq.n	210aa <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   20fee:	07b2      	lsls	r2, r6, #30
   20ff0:	d406      	bmi.n	21000 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   20ff2:	2203      	movs	r2, #3
   20ff4:	4649      	mov	r1, r9
   20ff6:	400a      	ands	r2, r1
   20ff8:	2a01      	cmp	r2, #1
   20ffa:	d059      	beq.n	210b0 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   20ffc:	2b04      	cmp	r3, #4
   20ffe:	d05a      	beq.n	210b6 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   21000:	69bb      	ldr	r3, [r7, #24]
   21002:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   21004:	0038      	movs	r0, r7
   21006:	4b45      	ldr	r3, [pc, #276]	; (2111c <follow_path+0x30c>)
   21008:	4798      	blx	r3
			ns = *(dj->fn+NS);
   2100a:	69bb      	ldr	r3, [r7, #24]
   2100c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   2100e:	2800      	cmp	r0, #0
   21010:	d15c      	bne.n	210cc <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   21012:	075b      	lsls	r3, r3, #29
   21014:	d453      	bmi.n	210be <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   21016:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   21018:	7ad3      	ldrb	r3, [r2, #11]
   2101a:	06db      	lsls	r3, r3, #27
   2101c:	d55c      	bpl.n	210d8 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   2101e:	7d51      	ldrb	r1, [r2, #21]
   21020:	0209      	lsls	r1, r1, #8
   21022:	7d13      	ldrb	r3, [r2, #20]
   21024:	430b      	orrs	r3, r1
   21026:	041b      	lsls	r3, r3, #16
   21028:	7ed1      	ldrb	r1, [r2, #27]
   2102a:	0209      	lsls	r1, r1, #8
   2102c:	7e92      	ldrb	r2, [r2, #26]
   2102e:	430a      	orrs	r2, r1
   21030:	4313      	orrs	r3, r2
   21032:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   21034:	e70b      	b.n	20e4e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   21036:	2303      	movs	r3, #3
   21038:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2103a:	69bb      	ldr	r3, [r7, #24]
   2103c:	781a      	ldrb	r2, [r3, #0]
   2103e:	2ae5      	cmp	r2, #229	; 0xe5
   21040:	d1cd      	bne.n	20fde <follow_path+0x1ce>
   21042:	220b      	movs	r2, #11
   21044:	9201      	str	r2, [sp, #4]
   21046:	2205      	movs	r2, #5
   21048:	701a      	strb	r2, [r3, #0]
   2104a:	e7c5      	b.n	20fd8 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2104c:	2100      	movs	r1, #0
   2104e:	4b2f      	ldr	r3, [pc, #188]	; (2110c <follow_path+0x2fc>)
   21050:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   21052:	2800      	cmp	r0, #0
   21054:	d100      	bne.n	21058 <follow_path+0x248>
   21056:	e079      	b.n	2114c <follow_path+0x33c>
   21058:	4b31      	ldr	r3, [pc, #196]	; (21120 <follow_path+0x310>)
   2105a:	469c      	mov	ip, r3
   2105c:	4460      	add	r0, ip
   2105e:	3880      	subs	r0, #128	; 0x80
   21060:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   21062:	2302      	movs	r3, #2
   21064:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   21066:	2800      	cmp	r0, #0
   21068:	d002      	beq.n	21070 <follow_path+0x260>
   2106a:	e790      	b.n	20f8e <follow_path+0x17e>
   2106c:	2b00      	cmp	r3, #0
   2106e:	d099      	beq.n	20fa4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   21070:	2303      	movs	r3, #3
   21072:	431e      	orrs	r6, r3
   21074:	b2f6      	uxtb	r6, r6
   21076:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   21078:	69bb      	ldr	r3, [r7, #24]
   2107a:	465a      	mov	r2, fp
   2107c:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   2107e:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   21080:	2201      	movs	r2, #1
   21082:	4694      	mov	ip, r2
   21084:	44e3      	add	fp, ip
   21086:	e770      	b.n	20f6a <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   21088:	0003      	movs	r3, r0
   2108a:	3b61      	subs	r3, #97	; 0x61
   2108c:	b29b      	uxth	r3, r3
   2108e:	2b19      	cmp	r3, #25
   21090:	d8f2      	bhi.n	21078 <follow_path+0x268>
						b |= 1; w -= 0x20;
   21092:	2301      	movs	r3, #1
   21094:	464a      	mov	r2, r9
   21096:	431a      	orrs	r2, r3
   21098:	4691      	mov	r9, r2
   2109a:	3820      	subs	r0, #32
   2109c:	b280      	uxth	r0, r0
   2109e:	e7eb      	b.n	21078 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   210a0:	464b      	mov	r3, r9
   210a2:	009b      	lsls	r3, r3, #2
   210a4:	b2db      	uxtb	r3, r3
   210a6:	4699      	mov	r9, r3
   210a8:	e799      	b.n	20fde <follow_path+0x1ce>
		cf |= NS_LFN;
   210aa:	2202      	movs	r2, #2
   210ac:	4316      	orrs	r6, r2
   210ae:	e79e      	b.n	20fee <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   210b0:	320f      	adds	r2, #15
   210b2:	4316      	orrs	r6, r2
   210b4:	e7a2      	b.n	20ffc <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   210b6:	3304      	adds	r3, #4
   210b8:	431e      	orrs	r6, r3
   210ba:	e7a1      	b.n	21000 <follow_path+0x1f0>
   210bc:	2006      	movs	r0, #6
}
   210be:	b003      	add	sp, #12
   210c0:	bc3c      	pop	{r2, r3, r4, r5}
   210c2:	4690      	mov	r8, r2
   210c4:	4699      	mov	r9, r3
   210c6:	46a2      	mov	sl, r4
   210c8:	46ab      	mov	fp, r5
   210ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   210cc:	2804      	cmp	r0, #4
   210ce:	d1f6      	bne.n	210be <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   210d0:	075b      	lsls	r3, r3, #29
   210d2:	d4f4      	bmi.n	210be <follow_path+0x2ae>
   210d4:	3001      	adds	r0, #1
   210d6:	e7f2      	b.n	210be <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   210d8:	2005      	movs	r0, #5
   210da:	e7f0      	b.n	210be <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   210dc:	2301      	movs	r3, #1
	si = di = 0;
   210de:	2400      	movs	r4, #0
   210e0:	e6fb      	b.n	20eda <follow_path+0xca>
		w = p[si++];					/* Get a character */
   210e2:	2301      	movs	r3, #1
	si = di = 0;
   210e4:	2400      	movs	r4, #0
   210e6:	e005      	b.n	210f4 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   210e8:	2301      	movs	r3, #1
	si = di = 0;
   210ea:	2400      	movs	r4, #0
   210ec:	e002      	b.n	210f4 <follow_path+0x2e4>
   210ee:	002c      	movs	r4, r5
   210f0:	465f      	mov	r7, fp
   210f2:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   210f4:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   210f6:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   210f8:	2c00      	cmp	r4, #0
   210fa:	d0df      	beq.n	210bc <follow_path+0x2ac>
   210fc:	4b09      	ldr	r3, [pc, #36]	; (21124 <follow_path+0x314>)
   210fe:	18e3      	adds	r3, r4, r3
   21100:	005b      	lsls	r3, r3, #1
   21102:	4453      	add	r3, sl
   21104:	e6f1      	b.n	20eea <follow_path+0xda>
   21106:	46c0      	nop			; (mov r8, r8)
   21108:	00020461 	.word	0x00020461
   2110c:	000215e9 	.word	0x000215e9
   21110:	0002a4b5 	.word	0x0002a4b5
   21114:	0001fdf9 	.word	0x0001fdf9
   21118:	0002a4c1 	.word	0x0002a4c1
   2111c:	000208a1 	.word	0x000208a1
   21120:	0002a434 	.word	0x0002a434
   21124:	7fffffff 	.word	0x7fffffff
   21128:	002c      	movs	r4, r5
   2112a:	465f      	mov	r7, fp
   2112c:	464d      	mov	r5, r9
   2112e:	e7e1      	b.n	210f4 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   21130:	9b01      	ldr	r3, [sp, #4]
   21132:	2b0b      	cmp	r3, #11
   21134:	d100      	bne.n	21138 <follow_path+0x328>
   21136:	e77e      	b.n	21036 <follow_path+0x226>
			b <<= 2; continue;
   21138:	464b      	mov	r3, r9
   2113a:	009b      	lsls	r3, r3, #2
   2113c:	b2db      	uxtb	r3, r3
   2113e:	4699      	mov	r9, r3
   21140:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   21142:	220b      	movs	r2, #11
   21144:	9201      	str	r2, [sp, #4]
   21146:	3a03      	subs	r2, #3
   21148:	4693      	mov	fp, r2
   2114a:	e70e      	b.n	20f6a <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   2114c:	2302      	movs	r3, #2
   2114e:	431e      	orrs	r6, r3
   21150:	e78e      	b.n	21070 <follow_path+0x260>
   21152:	46c0      	nop			; (mov r8, r8)

00021154 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   21154:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   21156:	2807      	cmp	r0, #7
   21158:	d901      	bls.n	2115e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   2115a:	0018      	movs	r0, r3
   2115c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   2115e:	0083      	lsls	r3, r0, #2
   21160:	4a07      	ldr	r2, [pc, #28]	; (21180 <f_mount+0x2c>)
   21162:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   21164:	2b00      	cmp	r3, #0
   21166:	d001      	beq.n	2116c <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   21168:	2200      	movs	r2, #0
   2116a:	701a      	strb	r2, [r3, #0]
	if (fs) {
   2116c:	2900      	cmp	r1, #0
   2116e:	d001      	beq.n	21174 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   21170:	2300      	movs	r3, #0
   21172:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   21174:	0080      	lsls	r0, r0, #2
   21176:	4b02      	ldr	r3, [pc, #8]	; (21180 <f_mount+0x2c>)
   21178:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   2117a:	2300      	movs	r3, #0
   2117c:	e7ed      	b.n	2115a <f_mount+0x6>
   2117e:	46c0      	nop			; (mov r8, r8)
   21180:	20003d34 	.word	0x20003d34

00021184 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   21184:	b5f0      	push	{r4, r5, r6, r7, lr}
   21186:	46c6      	mov	lr, r8
   21188:	b500      	push	{lr}
   2118a:	4c59      	ldr	r4, [pc, #356]	; (212f0 <f_open+0x16c>)
   2118c:	44a5      	add	sp, r4
   2118e:	0005      	movs	r5, r0
   21190:	9101      	str	r1, [sp, #4]
   21192:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   21194:	2300      	movs	r3, #0
   21196:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   21198:	261f      	movs	r6, #31
   2119a:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2119c:	221e      	movs	r2, #30
   2119e:	403a      	ands	r2, r7
   211a0:	a985      	add	r1, sp, #532	; 0x214
   211a2:	a801      	add	r0, sp, #4
   211a4:	4b53      	ldr	r3, [pc, #332]	; (212f4 <f_open+0x170>)
   211a6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   211a8:	ab82      	add	r3, sp, #520	; 0x208
   211aa:	938b      	str	r3, [sp, #556]	; 0x22c
   211ac:	ab02      	add	r3, sp, #8
   211ae:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   211b0:	2800      	cmp	r0, #0
   211b2:	d006      	beq.n	211c2 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   211b4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   211b6:	231c      	movs	r3, #28
   211b8:	423b      	tst	r3, r7
   211ba:	d145      	bne.n	21248 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   211bc:	2800      	cmp	r0, #0
   211be:	d13d      	bne.n	2123c <f_open+0xb8>
   211c0:	e00c      	b.n	211dc <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   211c2:	9901      	ldr	r1, [sp, #4]
   211c4:	a885      	add	r0, sp, #532	; 0x214
   211c6:	4b4c      	ldr	r3, [pc, #304]	; (212f8 <f_open+0x174>)
   211c8:	4798      	blx	r3
	dir = dj.dir;
   211ca:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   211cc:	2800      	cmp	r0, #0
   211ce:	d1f2      	bne.n	211b6 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   211d0:	2c00      	cmp	r4, #0
   211d2:	d100      	bne.n	211d6 <f_open+0x52>
   211d4:	e086      	b.n	212e4 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   211d6:	231c      	movs	r3, #28
   211d8:	423b      	tst	r3, r7
   211da:	d146      	bne.n	2126a <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   211dc:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   211de:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   211e0:	06da      	lsls	r2, r3, #27
   211e2:	d42b      	bmi.n	2123c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   211e4:	07ba      	lsls	r2, r7, #30
   211e6:	d502      	bpl.n	211ee <f_open+0x6a>
					res = FR_DENIED;
   211e8:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   211ea:	07db      	lsls	r3, r3, #31
   211ec:	d426      	bmi.n	2123c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   211ee:	073b      	lsls	r3, r7, #28
   211f0:	d501      	bpl.n	211f6 <f_open+0x72>
			mode |= FA__WRITTEN;
   211f2:	2320      	movs	r3, #32
   211f4:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   211f6:	9b85      	ldr	r3, [sp, #532]	; 0x214
   211f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   211fa:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   211fc:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   211fe:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   21200:	7d62      	ldrb	r2, [r4, #21]
   21202:	0212      	lsls	r2, r2, #8
   21204:	7d23      	ldrb	r3, [r4, #20]
   21206:	4313      	orrs	r3, r2
   21208:	041b      	lsls	r3, r3, #16
   2120a:	7ee1      	ldrb	r1, [r4, #27]
   2120c:	0209      	lsls	r1, r1, #8
   2120e:	7ea2      	ldrb	r2, [r4, #26]
   21210:	430a      	orrs	r2, r1
   21212:	4313      	orrs	r3, r2
   21214:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   21216:	7fe3      	ldrb	r3, [r4, #31]
   21218:	061b      	lsls	r3, r3, #24
   2121a:	7fa2      	ldrb	r2, [r4, #30]
   2121c:	0412      	lsls	r2, r2, #16
   2121e:	4313      	orrs	r3, r2
   21220:	7f22      	ldrb	r2, [r4, #28]
   21222:	4313      	orrs	r3, r2
   21224:	7f62      	ldrb	r2, [r4, #29]
   21226:	0212      	lsls	r2, r2, #8
   21228:	4313      	orrs	r3, r2
   2122a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   2122c:	2300      	movs	r3, #0
   2122e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   21230:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   21232:	9b85      	ldr	r3, [sp, #532]	; 0x214
   21234:	602b      	str	r3, [r5, #0]
   21236:	88db      	ldrh	r3, [r3, #6]
   21238:	80ab      	strh	r3, [r5, #4]
   2123a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   2123c:	238e      	movs	r3, #142	; 0x8e
   2123e:	009b      	lsls	r3, r3, #2
   21240:	449d      	add	sp, r3
   21242:	bc04      	pop	{r2}
   21244:	4690      	mov	r8, r2
   21246:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   21248:	2804      	cmp	r0, #4
   2124a:	d005      	beq.n	21258 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2124c:	2308      	movs	r3, #8
   2124e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   21250:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   21252:	2800      	cmp	r0, #0
   21254:	d0d3      	beq.n	211fe <f_open+0x7a>
   21256:	e7f1      	b.n	2123c <f_open+0xb8>
				res = dir_register(&dj);
   21258:	a885      	add	r0, sp, #532	; 0x214
   2125a:	4b28      	ldr	r3, [pc, #160]	; (212fc <f_open+0x178>)
   2125c:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2125e:	2308      	movs	r3, #8
   21260:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   21262:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   21264:	2800      	cmp	r0, #0
   21266:	d008      	beq.n	2127a <f_open+0xf6>
   21268:	e7e8      	b.n	2123c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2126a:	7ae3      	ldrb	r3, [r4, #11]
   2126c:	2211      	movs	r2, #17
				res = FR_DENIED;
   2126e:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   21270:	421a      	tst	r2, r3
   21272:	d1e3      	bne.n	2123c <f_open+0xb8>
					res = FR_EXIST;
   21274:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   21276:	077b      	lsls	r3, r7, #29
   21278:	d4e0      	bmi.n	2123c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2127a:	0733      	lsls	r3, r6, #28
   2127c:	d5bb      	bpl.n	211f6 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   2127e:	4b20      	ldr	r3, [pc, #128]	; (21300 <f_open+0x17c>)
   21280:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   21282:	73a0      	strb	r0, [r4, #14]
   21284:	0a03      	lsrs	r3, r0, #8
   21286:	73e3      	strb	r3, [r4, #15]
   21288:	0c03      	lsrs	r3, r0, #16
   2128a:	7423      	strb	r3, [r4, #16]
   2128c:	0e00      	lsrs	r0, r0, #24
   2128e:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   21290:	2300      	movs	r3, #0
   21292:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   21294:	7723      	strb	r3, [r4, #28]
   21296:	7763      	strb	r3, [r4, #29]
   21298:	77a3      	strb	r3, [r4, #30]
   2129a:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2129c:	7d62      	ldrb	r2, [r4, #21]
   2129e:	0212      	lsls	r2, r2, #8
   212a0:	7d27      	ldrb	r7, [r4, #20]
   212a2:	4317      	orrs	r7, r2
   212a4:	043f      	lsls	r7, r7, #16
   212a6:	7ee1      	ldrb	r1, [r4, #27]
   212a8:	0209      	lsls	r1, r1, #8
   212aa:	7ea2      	ldrb	r2, [r4, #26]
   212ac:	430a      	orrs	r2, r1
   212ae:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   212b0:	76a3      	strb	r3, [r4, #26]
   212b2:	76e3      	strb	r3, [r4, #27]
   212b4:	7523      	strb	r3, [r4, #20]
   212b6:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   212b8:	9885      	ldr	r0, [sp, #532]	; 0x214
   212ba:	3301      	adds	r3, #1
   212bc:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   212be:	2f00      	cmp	r7, #0
   212c0:	d097      	beq.n	211f2 <f_open+0x6e>
				dw = dj.fs->winsect;
   212c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   212c4:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   212c6:	0039      	movs	r1, r7
   212c8:	4b0e      	ldr	r3, [pc, #56]	; (21304 <f_open+0x180>)
   212ca:	4798      	blx	r3
				if (res == FR_OK) {
   212cc:	2800      	cmp	r0, #0
   212ce:	d1b5      	bne.n	2123c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   212d0:	9885      	ldr	r0, [sp, #532]	; 0x214
   212d2:	3f01      	subs	r7, #1
   212d4:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   212d6:	4641      	mov	r1, r8
   212d8:	4b0b      	ldr	r3, [pc, #44]	; (21308 <f_open+0x184>)
   212da:	4798      	blx	r3
	if (res == FR_OK) {
   212dc:	2800      	cmp	r0, #0
   212de:	d100      	bne.n	212e2 <f_open+0x15e>
   212e0:	e787      	b.n	211f2 <f_open+0x6e>
   212e2:	e7ab      	b.n	2123c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   212e4:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   212e6:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   212e8:	423b      	tst	r3, r7
   212ea:	d0b2      	beq.n	21252 <f_open+0xce>
			res = FR_INVALID_NAME;
   212ec:	2006      	movs	r0, #6
   212ee:	e7ad      	b.n	2124c <f_open+0xc8>
   212f0:	fffffdc8 	.word	0xfffffdc8
   212f4:	0001ff15 	.word	0x0001ff15
   212f8:	00020e11 	.word	0x00020e11
   212fc:	00020a39 	.word	0x00020a39
   21300:	0001fd95 	.word	0x0001fd95
   21304:	00020705 	.word	0x00020705
   21308:	000202c5 	.word	0x000202c5

0002130c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2130c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2130e:	46de      	mov	lr, fp
   21310:	4657      	mov	r7, sl
   21312:	464e      	mov	r6, r9
   21314:	4645      	mov	r5, r8
   21316:	b5e0      	push	{r5, r6, r7, lr}
   21318:	b083      	sub	sp, #12
   2131a:	0004      	movs	r4, r0
   2131c:	000d      	movs	r5, r1
   2131e:	0016      	movs	r6, r2
   21320:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   21322:	2300      	movs	r3, #0
   21324:	464a      	mov	r2, r9
   21326:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   21328:	8881      	ldrh	r1, [r0, #4]
   2132a:	6800      	ldr	r0, [r0, #0]
   2132c:	4b7f      	ldr	r3, [pc, #508]	; (2152c <f_write+0x220>)
   2132e:	4798      	blx	r3
   21330:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   21332:	2800      	cmp	r0, #0
   21334:	d000      	beq.n	21338 <f_write+0x2c>
   21336:	e0f1      	b.n	2151c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   21338:	79a3      	ldrb	r3, [r4, #6]
   2133a:	b25a      	sxtb	r2, r3
   2133c:	2a00      	cmp	r2, #0
   2133e:	da00      	bge.n	21342 <f_write+0x36>
   21340:	e0ea      	b.n	21518 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   21342:	079b      	lsls	r3, r3, #30
   21344:	d402      	bmi.n	2134c <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   21346:	2307      	movs	r3, #7
   21348:	9300      	str	r3, [sp, #0]
   2134a:	e0e7      	b.n	2151c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2134c:	68e3      	ldr	r3, [r4, #12]
   2134e:	199a      	adds	r2, r3, r6
   21350:	4293      	cmp	r3, r2
   21352:	d810      	bhi.n	21376 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   21354:	2e00      	cmp	r6, #0
   21356:	d00e      	beq.n	21376 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   21358:	002f      	movs	r7, r5
   2135a:	e07b      	b.n	21454 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2135c:	2100      	movs	r1, #0
   2135e:	4b74      	ldr	r3, [pc, #464]	; (21530 <f_write+0x224>)
   21360:	4798      	blx	r3
   21362:	0003      	movs	r3, r0
   21364:	6120      	str	r0, [r4, #16]
   21366:	e003      	b.n	21370 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   21368:	6961      	ldr	r1, [r4, #20]
   2136a:	4b71      	ldr	r3, [pc, #452]	; (21530 <f_write+0x224>)
   2136c:	4798      	blx	r3
   2136e:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   21370:	2b00      	cmp	r3, #0
   21372:	d000      	beq.n	21376 <f_write+0x6a>
   21374:	e080      	b.n	21478 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   21376:	68a3      	ldr	r3, [r4, #8]
   21378:	68e2      	ldr	r2, [r4, #12]
   2137a:	4293      	cmp	r3, r2
   2137c:	d900      	bls.n	21380 <f_write+0x74>
   2137e:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   21380:	79a3      	ldrb	r3, [r4, #6]
   21382:	2220      	movs	r2, #32
   21384:	4313      	orrs	r3, r2
   21386:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   21388:	e0c8      	b.n	2151c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2138a:	79a2      	ldrb	r2, [r4, #6]
   2138c:	3b81      	subs	r3, #129	; 0x81
   2138e:	4313      	orrs	r3, r2
   21390:	71a3      	strb	r3, [r4, #6]
   21392:	2302      	movs	r3, #2
   21394:	9300      	str	r3, [sp, #0]
   21396:	e0c1      	b.n	2151c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   21398:	79a2      	ldrb	r2, [r4, #6]
   2139a:	3b7f      	subs	r3, #127	; 0x7f
   2139c:	4313      	orrs	r3, r2
   2139e:	71a3      	strb	r3, [r4, #6]
   213a0:	2301      	movs	r3, #1
   213a2:	9300      	str	r3, [sp, #0]
   213a4:	e0ba      	b.n	2151c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   213a6:	2100      	movs	r1, #0
   213a8:	4b62      	ldr	r3, [pc, #392]	; (21534 <f_write+0x228>)
   213aa:	4798      	blx	r3
   213ac:	2800      	cmp	r0, #0
   213ae:	d06d      	beq.n	2148c <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   213b0:	79a2      	ldrb	r2, [r4, #6]
   213b2:	2380      	movs	r3, #128	; 0x80
   213b4:	425b      	negs	r3, r3
   213b6:	4313      	orrs	r3, r2
   213b8:	71a3      	strb	r3, [r4, #6]
   213ba:	2301      	movs	r3, #1
   213bc:	9300      	str	r3, [sp, #0]
   213be:	e0ad      	b.n	2151c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   213c0:	79a2      	ldrb	r2, [r4, #6]
   213c2:	2380      	movs	r3, #128	; 0x80
   213c4:	425b      	negs	r3, r3
   213c6:	4313      	orrs	r3, r2
   213c8:	71a3      	strb	r3, [r4, #6]
   213ca:	2302      	movs	r3, #2
   213cc:	9300      	str	r3, [sp, #0]
   213ce:	e0a5      	b.n	2151c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   213d0:	79a2      	ldrb	r2, [r4, #6]
   213d2:	2380      	movs	r3, #128	; 0x80
   213d4:	425b      	negs	r3, r3
   213d6:	4313      	orrs	r3, r2
   213d8:	71a3      	strb	r3, [r4, #6]
   213da:	2301      	movs	r3, #1
   213dc:	9300      	str	r3, [sp, #0]
   213de:	e09d      	b.n	2151c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   213e0:	0240      	lsls	r0, r0, #9
   213e2:	1839      	adds	r1, r7, r0
   213e4:	3330      	adds	r3, #48	; 0x30
   213e6:	0018      	movs	r0, r3
   213e8:	2280      	movs	r2, #128	; 0x80
   213ea:	0092      	lsls	r2, r2, #2
   213ec:	4b52      	ldr	r3, [pc, #328]	; (21538 <f_write+0x22c>)
   213ee:	4798      	blx	r3
					fp->fs->wflag = 0;
   213f0:	2300      	movs	r3, #0
   213f2:	6822      	ldr	r2, [r4, #0]
   213f4:	7113      	strb	r3, [r2, #4]
   213f6:	e072      	b.n	214de <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   213f8:	68a3      	ldr	r3, [r4, #8]
   213fa:	68e2      	ldr	r2, [r4, #12]
   213fc:	4293      	cmp	r3, r2
   213fe:	d271      	bcs.n	214e4 <f_write+0x1d8>
			fp->dsect = sect;
   21400:	4643      	mov	r3, r8
   21402:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   21404:	68a3      	ldr	r3, [r4, #8]
   21406:	05dd      	lsls	r5, r3, #23
   21408:	0ded      	lsrs	r5, r5, #23
   2140a:	2380      	movs	r3, #128	; 0x80
   2140c:	009b      	lsls	r3, r3, #2
   2140e:	1b5d      	subs	r5, r3, r5
   21410:	42b5      	cmp	r5, r6
   21412:	d900      	bls.n	21416 <f_write+0x10a>
   21414:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   21416:	69a1      	ldr	r1, [r4, #24]
   21418:	6820      	ldr	r0, [r4, #0]
   2141a:	4b46      	ldr	r3, [pc, #280]	; (21534 <f_write+0x228>)
   2141c:	4798      	blx	r3
   2141e:	2800      	cmp	r0, #0
   21420:	d172      	bne.n	21508 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   21422:	68a3      	ldr	r3, [r4, #8]
   21424:	05d8      	lsls	r0, r3, #23
   21426:	0dc0      	lsrs	r0, r0, #23
   21428:	3030      	adds	r0, #48	; 0x30
   2142a:	6823      	ldr	r3, [r4, #0]
   2142c:	469c      	mov	ip, r3
   2142e:	4460      	add	r0, ip
   21430:	002a      	movs	r2, r5
   21432:	0039      	movs	r1, r7
   21434:	4b40      	ldr	r3, [pc, #256]	; (21538 <f_write+0x22c>)
   21436:	4798      	blx	r3
		fp->fs->wflag = 1;
   21438:	2301      	movs	r3, #1
   2143a:	6822      	ldr	r2, [r4, #0]
   2143c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2143e:	197f      	adds	r7, r7, r5
   21440:	68a3      	ldr	r3, [r4, #8]
   21442:	195b      	adds	r3, r3, r5
   21444:	60a3      	str	r3, [r4, #8]
   21446:	464b      	mov	r3, r9
   21448:	681b      	ldr	r3, [r3, #0]
   2144a:	195b      	adds	r3, r3, r5
   2144c:	464a      	mov	r2, r9
   2144e:	6013      	str	r3, [r2, #0]
   21450:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   21452:	d090      	beq.n	21376 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   21454:	68a3      	ldr	r3, [r4, #8]
   21456:	05da      	lsls	r2, r3, #23
   21458:	d1d4      	bne.n	21404 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2145a:	6820      	ldr	r0, [r4, #0]
   2145c:	7882      	ldrb	r2, [r0, #2]
   2145e:	3a01      	subs	r2, #1
   21460:	0a5d      	lsrs	r5, r3, #9
   21462:	4015      	ands	r5, r2
   21464:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   21466:	2d00      	cmp	r5, #0
   21468:	d10b      	bne.n	21482 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2146a:	2b00      	cmp	r3, #0
   2146c:	d000      	beq.n	21470 <f_write+0x164>
   2146e:	e77b      	b.n	21368 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   21470:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   21472:	2b00      	cmp	r3, #0
   21474:	d100      	bne.n	21478 <f_write+0x16c>
   21476:	e771      	b.n	2135c <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   21478:	2b01      	cmp	r3, #1
   2147a:	d086      	beq.n	2138a <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2147c:	1c5a      	adds	r2, r3, #1
   2147e:	d08b      	beq.n	21398 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   21480:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   21482:	6820      	ldr	r0, [r4, #0]
   21484:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21486:	69a2      	ldr	r2, [r4, #24]
   21488:	4293      	cmp	r3, r2
   2148a:	d08c      	beq.n	213a6 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2148c:	6823      	ldr	r3, [r4, #0]
   2148e:	469a      	mov	sl, r3
   21490:	6961      	ldr	r1, [r4, #20]
   21492:	0018      	movs	r0, r3
   21494:	4b29      	ldr	r3, [pc, #164]	; (2153c <f_write+0x230>)
   21496:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   21498:	2800      	cmp	r0, #0
   2149a:	d091      	beq.n	213c0 <f_write+0xb4>
			sect += csect;
   2149c:	4680      	mov	r8, r0
   2149e:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   214a0:	0a73      	lsrs	r3, r6, #9
   214a2:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   214a4:	d0a8      	beq.n	213f8 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   214a6:	4653      	mov	r3, sl
   214a8:	789b      	ldrb	r3, [r3, #2]
   214aa:	465a      	mov	r2, fp
   214ac:	18aa      	adds	r2, r5, r2
   214ae:	429a      	cmp	r2, r3
   214b0:	d901      	bls.n	214b6 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   214b2:	1b5b      	subs	r3, r3, r5
   214b4:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   214b6:	465b      	mov	r3, fp
   214b8:	466a      	mov	r2, sp
   214ba:	71d3      	strb	r3, [r2, #7]
   214bc:	79d3      	ldrb	r3, [r2, #7]
   214be:	4652      	mov	r2, sl
   214c0:	7850      	ldrb	r0, [r2, #1]
   214c2:	4642      	mov	r2, r8
   214c4:	0039      	movs	r1, r7
   214c6:	4d1e      	ldr	r5, [pc, #120]	; (21540 <f_write+0x234>)
   214c8:	47a8      	blx	r5
   214ca:	2800      	cmp	r0, #0
   214cc:	d000      	beq.n	214d0 <f_write+0x1c4>
   214ce:	e77f      	b.n	213d0 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   214d0:	6823      	ldr	r3, [r4, #0]
   214d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   214d4:	4641      	mov	r1, r8
   214d6:	1a50      	subs	r0, r2, r1
   214d8:	4583      	cmp	fp, r0
   214da:	d900      	bls.n	214de <f_write+0x1d2>
   214dc:	e780      	b.n	213e0 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   214de:	465b      	mov	r3, fp
   214e0:	025d      	lsls	r5, r3, #9
				continue;
   214e2:	e7ac      	b.n	2143e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   214e4:	2100      	movs	r1, #0
   214e6:	4650      	mov	r0, sl
   214e8:	4b12      	ldr	r3, [pc, #72]	; (21534 <f_write+0x228>)
   214ea:	4798      	blx	r3
   214ec:	2800      	cmp	r0, #0
   214ee:	d103      	bne.n	214f8 <f_write+0x1ec>
				fp->fs->winsect = sect;
   214f0:	6823      	ldr	r3, [r4, #0]
   214f2:	4642      	mov	r2, r8
   214f4:	62da      	str	r2, [r3, #44]	; 0x2c
   214f6:	e783      	b.n	21400 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   214f8:	79a2      	ldrb	r2, [r4, #6]
   214fa:	2380      	movs	r3, #128	; 0x80
   214fc:	425b      	negs	r3, r3
   214fe:	4313      	orrs	r3, r2
   21500:	71a3      	strb	r3, [r4, #6]
   21502:	2301      	movs	r3, #1
   21504:	9300      	str	r3, [sp, #0]
   21506:	e009      	b.n	2151c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   21508:	79a2      	ldrb	r2, [r4, #6]
   2150a:	2380      	movs	r3, #128	; 0x80
   2150c:	425b      	negs	r3, r3
   2150e:	4313      	orrs	r3, r2
   21510:	71a3      	strb	r3, [r4, #6]
   21512:	2301      	movs	r3, #1
   21514:	9300      	str	r3, [sp, #0]
   21516:	e001      	b.n	2151c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   21518:	2302      	movs	r3, #2
   2151a:	9300      	str	r3, [sp, #0]
}
   2151c:	9800      	ldr	r0, [sp, #0]
   2151e:	b003      	add	sp, #12
   21520:	bc3c      	pop	{r2, r3, r4, r5}
   21522:	4690      	mov	r8, r2
   21524:	4699      	mov	r9, r3
   21526:	46a2      	mov	sl, r4
   21528:	46ab      	mov	fp, r5
   2152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2152c:	0001fe41 	.word	0x0001fe41
   21530:	00020641 	.word	0x00020641
   21534:	000202c5 	.word	0x000202c5
   21538:	0001fde5 	.word	0x0001fde5
   2153c:	0001fe0b 	.word	0x0001fe0b
   21540:	0001fca5 	.word	0x0001fca5

00021544 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   21544:	b570      	push	{r4, r5, r6, lr}
   21546:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   21548:	8881      	ldrh	r1, [r0, #4]
   2154a:	6800      	ldr	r0, [r0, #0]
   2154c:	4b1c      	ldr	r3, [pc, #112]	; (215c0 <f_sync+0x7c>)
   2154e:	4798      	blx	r3
	if (res == FR_OK) {
   21550:	2800      	cmp	r0, #0
   21552:	d102      	bne.n	2155a <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   21554:	79a3      	ldrb	r3, [r4, #6]
   21556:	069b      	lsls	r3, r3, #26
   21558:	d400      	bmi.n	2155c <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   2155a:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   2155c:	69e1      	ldr	r1, [r4, #28]
   2155e:	6820      	ldr	r0, [r4, #0]
   21560:	4b18      	ldr	r3, [pc, #96]	; (215c4 <f_sync+0x80>)
   21562:	4798      	blx	r3
			if (res == FR_OK) {
   21564:	2800      	cmp	r0, #0
   21566:	d1f8      	bne.n	2155a <f_sync+0x16>
				dir = fp->dir_ptr;
   21568:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2156a:	7aeb      	ldrb	r3, [r5, #11]
   2156c:	2220      	movs	r2, #32
   2156e:	4313      	orrs	r3, r2
   21570:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   21572:	7b23      	ldrb	r3, [r4, #12]
   21574:	772b      	strb	r3, [r5, #28]
   21576:	89a3      	ldrh	r3, [r4, #12]
   21578:	0a1b      	lsrs	r3, r3, #8
   2157a:	776b      	strb	r3, [r5, #29]
   2157c:	89e3      	ldrh	r3, [r4, #14]
   2157e:	77ab      	strb	r3, [r5, #30]
   21580:	7be3      	ldrb	r3, [r4, #15]
   21582:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   21584:	7c23      	ldrb	r3, [r4, #16]
   21586:	76ab      	strb	r3, [r5, #26]
   21588:	8a23      	ldrh	r3, [r4, #16]
   2158a:	0a1b      	lsrs	r3, r3, #8
   2158c:	76eb      	strb	r3, [r5, #27]
   2158e:	8a63      	ldrh	r3, [r4, #18]
   21590:	752b      	strb	r3, [r5, #20]
   21592:	8a63      	ldrh	r3, [r4, #18]
   21594:	0a1b      	lsrs	r3, r3, #8
   21596:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   21598:	4b0b      	ldr	r3, [pc, #44]	; (215c8 <f_sync+0x84>)
   2159a:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   2159c:	75a8      	strb	r0, [r5, #22]
   2159e:	0a03      	lsrs	r3, r0, #8
   215a0:	75eb      	strb	r3, [r5, #23]
   215a2:	0c03      	lsrs	r3, r0, #16
   215a4:	762b      	strb	r3, [r5, #24]
   215a6:	0e00      	lsrs	r0, r0, #24
   215a8:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   215aa:	79a3      	ldrb	r3, [r4, #6]
   215ac:	2220      	movs	r2, #32
   215ae:	4393      	bics	r3, r2
   215b0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   215b2:	2301      	movs	r3, #1
   215b4:	6822      	ldr	r2, [r4, #0]
   215b6:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   215b8:	6820      	ldr	r0, [r4, #0]
   215ba:	4b04      	ldr	r3, [pc, #16]	; (215cc <f_sync+0x88>)
   215bc:	4798      	blx	r3
   215be:	e7cc      	b.n	2155a <f_sync+0x16>
   215c0:	0001fe41 	.word	0x0001fe41
   215c4:	000202c5 	.word	0x000202c5
   215c8:	0001fd95 	.word	0x0001fd95
   215cc:	00020d1d 	.word	0x00020d1d

000215d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   215d0:	b510      	push	{r4, lr}
   215d2:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   215d4:	4b03      	ldr	r3, [pc, #12]	; (215e4 <f_close+0x14>)
   215d6:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   215d8:	2800      	cmp	r0, #0
   215da:	d101      	bne.n	215e0 <f_close+0x10>
   215dc:	2300      	movs	r3, #0
   215de:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   215e0:	bd10      	pop	{r4, pc}
   215e2:	46c0      	nop			; (mov r8, r8)
   215e4:	00021545 	.word	0x00021545

000215e8 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   215e8:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   215ea:	287f      	cmp	r0, #127	; 0x7f
   215ec:	d911      	bls.n	21612 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   215ee:	2900      	cmp	r1, #0
   215f0:	d111      	bne.n	21616 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   215f2:	28c7      	cmp	r0, #199	; 0xc7
   215f4:	d017      	beq.n	21626 <ff_convert+0x3e>
   215f6:	4a0d      	ldr	r2, [pc, #52]	; (2162c <ff_convert+0x44>)
   215f8:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   215fa:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   215fc:	8811      	ldrh	r1, [r2, #0]
   215fe:	4281      	cmp	r1, r0
   21600:	d004      	beq.n	2160c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   21602:	3301      	adds	r3, #1
   21604:	b29b      	uxth	r3, r3
   21606:	3202      	adds	r2, #2
   21608:	2b80      	cmp	r3, #128	; 0x80
   2160a:	d1f7      	bne.n	215fc <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   2160c:	3380      	adds	r3, #128	; 0x80
   2160e:	20ff      	movs	r0, #255	; 0xff
   21610:	4003      	ands	r3, r0
		}
	}

	return c;
}
   21612:	0018      	movs	r0, r3
   21614:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   21616:	2300      	movs	r3, #0
   21618:	28ff      	cmp	r0, #255	; 0xff
   2161a:	d8fa      	bhi.n	21612 <ff_convert+0x2a>
   2161c:	3880      	subs	r0, #128	; 0x80
   2161e:	0040      	lsls	r0, r0, #1
   21620:	4b02      	ldr	r3, [pc, #8]	; (2162c <ff_convert+0x44>)
   21622:	5ac3      	ldrh	r3, [r0, r3]
   21624:	e7f5      	b.n	21612 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   21626:	2300      	movs	r3, #0
   21628:	e7f0      	b.n	2160c <ff_convert+0x24>
   2162a:	46c0      	nop			; (mov r8, r8)
   2162c:	0002a4c8 	.word	0x0002a4c8

00021630 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   21630:	2861      	cmp	r0, #97	; 0x61
   21632:	d014      	beq.n	2165e <ff_wtoupper+0x2e>
   21634:	4b0b      	ldr	r3, [pc, #44]	; (21664 <ff_wtoupper+0x34>)
   21636:	3304      	adds	r3, #4
   21638:	2101      	movs	r1, #1
   2163a:	2262      	movs	r2, #98	; 0x62
   2163c:	4290      	cmp	r0, r2
   2163e:	d007      	beq.n	21650 <ff_wtoupper+0x20>
   21640:	3101      	adds	r1, #1
   21642:	3302      	adds	r3, #2
   21644:	1e9a      	subs	r2, r3, #2
   21646:	8812      	ldrh	r2, [r2, #0]
   21648:	2a00      	cmp	r2, #0
   2164a:	d1f7      	bne.n	2163c <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2164c:	0003      	movs	r3, r0
   2164e:	e004      	b.n	2165a <ff_wtoupper+0x2a>
   21650:	1e03      	subs	r3, r0, #0
   21652:	d002      	beq.n	2165a <ff_wtoupper+0x2a>
   21654:	0049      	lsls	r1, r1, #1
   21656:	4b04      	ldr	r3, [pc, #16]	; (21668 <ff_wtoupper+0x38>)
   21658:	5acb      	ldrh	r3, [r1, r3]
}
   2165a:	0018      	movs	r0, r3
   2165c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2165e:	2100      	movs	r1, #0
   21660:	e7f8      	b.n	21654 <ff_wtoupper+0x24>
   21662:	46c0      	nop			; (mov r8, r8)
   21664:	0002a5c8 	.word	0x0002a5c8
   21668:	0002a7a8 	.word	0x0002a7a8

0002166c <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2166c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2166e:	46de      	mov	lr, fp
   21670:	4657      	mov	r7, sl
   21672:	464e      	mov	r6, r9
   21674:	4645      	mov	r5, r8
   21676:	b5e0      	push	{r5, r6, r7, lr}
   21678:	b083      	sub	sp, #12
   2167a:	0007      	movs	r7, r0
   2167c:	4688      	mov	r8, r1
   2167e:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   21680:	2400      	movs	r4, #0
   21682:	2900      	cmp	r1, #0
   21684:	dd18      	ble.n	216b8 <sendPacket+0x4c>
   21686:	4b15      	ldr	r3, [pc, #84]	; (216dc <sendPacket+0x70>)
   21688:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2168a:	4b15      	ldr	r3, [pc, #84]	; (216e0 <sendPacket+0x74>)
   2168c:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   2168e:	9801      	ldr	r0, [sp, #4]
   21690:	47d0      	blx	sl
   21692:	2800      	cmp	r0, #0
   21694:	d110      	bne.n	216b8 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   21696:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   21698:	68f3      	ldr	r3, [r6, #12]
   2169a:	4699      	mov	r9, r3
   2169c:	693b      	ldr	r3, [r7, #16]
   2169e:	191d      	adds	r5, r3, r4
   216a0:	9801      	ldr	r0, [sp, #4]
   216a2:	47d8      	blx	fp
   216a4:	0003      	movs	r3, r0
   216a6:	4642      	mov	r2, r8
   216a8:	0029      	movs	r1, r5
   216aa:	0030      	movs	r0, r6
   216ac:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   216ae:	2800      	cmp	r0, #0
   216b0:	db02      	blt.n	216b8 <sendPacket+0x4c>
            break;
        sent += rc;
   216b2:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   216b4:	45a0      	cmp	r8, r4
   216b6:	dcea      	bgt.n	2168e <sendPacket+0x22>
    }
    if (sent == length)
   216b8:	45a0      	cmp	r8, r4
   216ba:	d10c      	bne.n	216d6 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   216bc:	69b9      	ldr	r1, [r7, #24]
   216be:	0038      	movs	r0, r7
   216c0:	3054      	adds	r0, #84	; 0x54
   216c2:	4b08      	ldr	r3, [pc, #32]	; (216e4 <sendPacket+0x78>)
   216c4:	4798      	blx	r3
        rc = SUCCESS;
   216c6:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   216c8:	b003      	add	sp, #12
   216ca:	bc3c      	pop	{r2, r3, r4, r5}
   216cc:	4690      	mov	r8, r2
   216ce:	4699      	mov	r9, r3
   216d0:	46a2      	mov	sl, r4
   216d2:	46ab      	mov	fp, r5
   216d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   216d6:	2001      	movs	r0, #1
   216d8:	4240      	negs	r0, r0
    return rc;
   216da:	e7f5      	b.n	216c8 <sendPacket+0x5c>
   216dc:	00021fd9 	.word	0x00021fd9
   216e0:	00022015 	.word	0x00022015
   216e4:	00022001 	.word	0x00022001

000216e8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   216e8:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   216ea:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   216ec:	2100      	movs	r1, #0
   216ee:	6241      	str	r1, [r0, #36]	; 0x24
   216f0:	62c1      	str	r1, [r0, #44]	; 0x2c
   216f2:	6341      	str	r1, [r0, #52]	; 0x34
   216f4:	63c1      	str	r1, [r0, #60]	; 0x3c
   216f6:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   216f8:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   216fa:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   216fc:	9b02      	ldr	r3, [sp, #8]
   216fe:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   21700:	9b03      	ldr	r3, [sp, #12]
   21702:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   21704:	9b04      	ldr	r3, [sp, #16]
   21706:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   21708:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   2170a:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   2170c:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   2170e:	2301      	movs	r3, #1
   21710:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   21712:	3054      	adds	r0, #84	; 0x54
   21714:	4b01      	ldr	r3, [pc, #4]	; (2171c <MQTTClientInit+0x34>)
   21716:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   21718:	bd10      	pop	{r4, pc}
   2171a:	46c0      	nop			; (mov r8, r8)
   2171c:	00022029 	.word	0x00022029

00021720 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   21720:	b5f0      	push	{r4, r5, r6, r7, lr}
   21722:	46de      	mov	lr, fp
   21724:	4657      	mov	r7, sl
   21726:	464e      	mov	r6, r9
   21728:	4645      	mov	r5, r8
   2172a:	b5e0      	push	{r5, r6, r7, lr}
   2172c:	b085      	sub	sp, #20
   2172e:	4682      	mov	sl, r0
   21730:	000f      	movs	r7, r1
   21732:	4691      	mov	r9, r2
   21734:	0004      	movs	r4, r0
   21736:	3424      	adds	r4, #36	; 0x24
   21738:	234c      	movs	r3, #76	; 0x4c
   2173a:	4453      	add	r3, sl
   2173c:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   2173e:	2301      	movs	r3, #1
   21740:	425b      	negs	r3, r3
   21742:	9301      	str	r3, [sp, #4]
   21744:	e056      	b.n	217f4 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   21746:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   21748:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   2174a:	687a      	ldr	r2, [r7, #4]
   2174c:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   2174e:	780a      	ldrb	r2, [r1, #0]
   21750:	2a00      	cmp	r2, #0
   21752:	d04a      	beq.n	217ea <deliverMessage+0xca>
   21754:	42b3      	cmp	r3, r6
   21756:	d24a      	bcs.n	217ee <deliverMessage+0xce>
   21758:	3101      	adds	r1, #1
   2175a:	1e70      	subs	r0, r6, #1
   2175c:	e008      	b.n	21770 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   2175e:	2a2f      	cmp	r2, #47	; 0x2f
   21760:	d10f      	bne.n	21782 <deliverMessage+0x62>
        curn++;
   21762:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   21764:	780a      	ldrb	r2, [r1, #0]
   21766:	2a00      	cmp	r2, #0
   21768:	d03f      	beq.n	217ea <deliverMessage+0xca>
   2176a:	429e      	cmp	r6, r3
   2176c:	d93f      	bls.n	217ee <deliverMessage+0xce>
   2176e:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   21770:	781d      	ldrb	r5, [r3, #0]
   21772:	2d2f      	cmp	r5, #47	; 0x2f
   21774:	d0f3      	beq.n	2175e <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   21776:	2a2b      	cmp	r2, #43	; 0x2b
   21778:	d008      	beq.n	2178c <deliverMessage+0x6c>
   2177a:	2a23      	cmp	r2, #35	; 0x23
   2177c:	d013      	beq.n	217a6 <deliverMessage+0x86>
   2177e:	4295      	cmp	r5, r2
   21780:	d0ef      	beq.n	21762 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   21782:	429e      	cmp	r6, r3
   21784:	d133      	bne.n	217ee <deliverMessage+0xce>
   21786:	2a00      	cmp	r2, #0
   21788:	d03d      	beq.n	21806 <deliverMessage+0xe6>
   2178a:	e030      	b.n	217ee <deliverMessage+0xce>
            char* nextpos = curn + 1;
   2178c:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   2178e:	42ae      	cmp	r6, r5
   21790:	d927      	bls.n	217e2 <deliverMessage+0xc2>
   21792:	785a      	ldrb	r2, [r3, #1]
   21794:	2a2f      	cmp	r2, #47	; 0x2f
   21796:	d01f      	beq.n	217d8 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   21798:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   2179a:	4283      	cmp	r3, r0
   2179c:	d0e1      	beq.n	21762 <deliverMessage+0x42>
   2179e:	785a      	ldrb	r2, [r3, #1]
   217a0:	2a2f      	cmp	r2, #47	; 0x2f
   217a2:	d1f9      	bne.n	21798 <deliverMessage+0x78>
   217a4:	e7dd      	b.n	21762 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   217a6:	1e73      	subs	r3, r6, #1
   217a8:	e7db      	b.n	21762 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   217aa:	9b01      	ldr	r3, [sp, #4]
   217ac:	3301      	adds	r3, #1
   217ae:	d007      	beq.n	217c0 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   217b0:	9801      	ldr	r0, [sp, #4]
   217b2:	b005      	add	sp, #20
   217b4:	bc3c      	pop	{r2, r3, r4, r5}
   217b6:	4690      	mov	r8, r2
   217b8:	4699      	mov	r9, r3
   217ba:	46a2      	mov	sl, r4
   217bc:	46ab      	mov	fp, r5
   217be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   217c0:	4653      	mov	r3, sl
   217c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   217c4:	2b00      	cmp	r3, #0
   217c6:	d0f3      	beq.n	217b0 <deliverMessage+0x90>
    md->topicName = aTopicName;
   217c8:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   217ca:	464a      	mov	r2, r9
   217cc:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   217ce:	a802      	add	r0, sp, #8
   217d0:	4798      	blx	r3
        rc = SUCCESS;
   217d2:	2300      	movs	r3, #0
   217d4:	9301      	str	r3, [sp, #4]
    return rc;
   217d6:	e7eb      	b.n	217b0 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   217d8:	780a      	ldrb	r2, [r1, #0]
   217da:	2a00      	cmp	r2, #0
   217dc:	d007      	beq.n	217ee <deliverMessage+0xce>
        curn++;
   217de:	002b      	movs	r3, r5
   217e0:	e7c5      	b.n	2176e <deliverMessage+0x4e>
   217e2:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   217e4:	780a      	ldrb	r2, [r1, #0]
   217e6:	2a00      	cmp	r2, #0
   217e8:	d101      	bne.n	217ee <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   217ea:	429e      	cmp	r6, r3
   217ec:	d00b      	beq.n	21806 <deliverMessage+0xe6>
   217ee:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   217f0:	4544      	cmp	r4, r8
   217f2:	d0da      	beq.n	217aa <deliverMessage+0x8a>
   217f4:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   217f6:	6821      	ldr	r1, [r4, #0]
   217f8:	2900      	cmp	r1, #0
   217fa:	d0f8      	beq.n	217ee <deliverMessage+0xce>
   217fc:	0038      	movs	r0, r7
   217fe:	4b08      	ldr	r3, [pc, #32]	; (21820 <deliverMessage+0x100>)
   21800:	4798      	blx	r3
   21802:	2800      	cmp	r0, #0
   21804:	d09f      	beq.n	21746 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   21806:	465b      	mov	r3, fp
   21808:	685b      	ldr	r3, [r3, #4]
   2180a:	2b00      	cmp	r3, #0
   2180c:	d0ef      	beq.n	217ee <deliverMessage+0xce>
    md->topicName = aTopicName;
   2180e:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   21810:	464a      	mov	r2, r9
   21812:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   21814:	a802      	add	r0, sp, #8
   21816:	4798      	blx	r3
                rc = SUCCESS;
   21818:	2300      	movs	r3, #0
   2181a:	9301      	str	r3, [sp, #4]
   2181c:	e7e7      	b.n	217ee <deliverMessage+0xce>
   2181e:	46c0      	nop			; (mov r8, r8)
   21820:	00022905 	.word	0x00022905

00021824 <keepalive>:


int keepalive(MQTTClient* c)
{
   21824:	b510      	push	{r4, lr}
   21826:	b084      	sub	sp, #16
   21828:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   2182a:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   2182c:	69a3      	ldr	r3, [r4, #24]
   2182e:	2b00      	cmp	r3, #0
   21830:	d101      	bne.n	21836 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   21832:	b004      	add	sp, #16
   21834:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   21836:	0020      	movs	r0, r4
   21838:	3054      	adds	r0, #84	; 0x54
   2183a:	4b14      	ldr	r3, [pc, #80]	; (2188c <keepalive+0x68>)
   2183c:	4798      	blx	r3
   2183e:	2800      	cmp	r0, #0
   21840:	d01d      	beq.n	2187e <keepalive+0x5a>
        if (!c->ping_outstanding)
   21842:	7f23      	ldrb	r3, [r4, #28]
   21844:	2b00      	cmp	r3, #0
   21846:	d11d      	bne.n	21884 <keepalive+0x60>
            TimerInit(&timer);
   21848:	a801      	add	r0, sp, #4
   2184a:	4b11      	ldr	r3, [pc, #68]	; (21890 <keepalive+0x6c>)
   2184c:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2184e:	21fa      	movs	r1, #250	; 0xfa
   21850:	0089      	lsls	r1, r1, #2
   21852:	a801      	add	r0, sp, #4
   21854:	4b0f      	ldr	r3, [pc, #60]	; (21894 <keepalive+0x70>)
   21856:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   21858:	68a1      	ldr	r1, [r4, #8]
   2185a:	6920      	ldr	r0, [r4, #16]
   2185c:	4b0e      	ldr	r3, [pc, #56]	; (21898 <keepalive+0x74>)
   2185e:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   21860:	2800      	cmp	r0, #0
   21862:	dd09      	ble.n	21878 <keepalive+0x54>
   21864:	aa01      	add	r2, sp, #4
   21866:	0001      	movs	r1, r0
   21868:	0020      	movs	r0, r4
   2186a:	4b0c      	ldr	r3, [pc, #48]	; (2189c <keepalive+0x78>)
   2186c:	4798      	blx	r3
   2186e:	2800      	cmp	r0, #0
   21870:	d1df      	bne.n	21832 <keepalive+0xe>
                c->ping_outstanding = 1;
   21872:	2301      	movs	r3, #1
   21874:	7723      	strb	r3, [r4, #28]
   21876:	e7dc      	b.n	21832 <keepalive+0xe>
    int rc = FAILURE;
   21878:	2001      	movs	r0, #1
   2187a:	4240      	negs	r0, r0
   2187c:	e7d9      	b.n	21832 <keepalive+0xe>
   2187e:	2001      	movs	r0, #1
   21880:	4240      	negs	r0, r0
   21882:	e7d6      	b.n	21832 <keepalive+0xe>
   21884:	2001      	movs	r0, #1
   21886:	4240      	negs	r0, r0
    return rc;
   21888:	e7d3      	b.n	21832 <keepalive+0xe>
   2188a:	46c0      	nop			; (mov r8, r8)
   2188c:	00021fd9 	.word	0x00021fd9
   21890:	00022029 	.word	0x00022029
   21894:	00021ff1 	.word	0x00021ff1
   21898:	000225ed 	.word	0x000225ed
   2189c:	0002166d 	.word	0x0002166d

000218a0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   218a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   218a2:	46de      	mov	lr, fp
   218a4:	464f      	mov	r7, r9
   218a6:	4646      	mov	r6, r8
   218a8:	b5c0      	push	{r6, r7, lr}
   218aa:	b090      	sub	sp, #64	; 0x40
   218ac:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   218ae:	6d05      	ldr	r5, [r0, #80]	; 0x50
   218b0:	68ae      	ldr	r6, [r5, #8]
   218b2:	6947      	ldr	r7, [r0, #20]
   218b4:	9107      	str	r1, [sp, #28]
   218b6:	0008      	movs	r0, r1
   218b8:	4b65      	ldr	r3, [pc, #404]	; (21a50 <cycle+0x1b0>)
   218ba:	4798      	blx	r3
   218bc:	0003      	movs	r3, r0
   218be:	2201      	movs	r2, #1
   218c0:	0039      	movs	r1, r7
   218c2:	0028      	movs	r0, r5
   218c4:	47b0      	blx	r6
   218c6:	0005      	movs	r5, r0
   218c8:	2801      	cmp	r0, #1
   218ca:	d000      	beq.n	218ce <cycle+0x2e>
   218cc:	e0bd      	b.n	21a4a <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   218ce:	9807      	ldr	r0, [sp, #28]
   218d0:	4b5f      	ldr	r3, [pc, #380]	; (21a50 <cycle+0x1b0>)
   218d2:	4798      	blx	r3
   218d4:	9006      	str	r0, [sp, #24]
   218d6:	2604      	movs	r6, #4
    *value = 0;
   218d8:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   218da:	237f      	movs	r3, #127	; 0x7f
   218dc:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   218de:	6d20      	ldr	r0, [r4, #80]	; 0x50
   218e0:	6883      	ldr	r3, [r0, #8]
   218e2:	4698      	mov	r8, r3
   218e4:	9b06      	ldr	r3, [sp, #24]
   218e6:	2201      	movs	r2, #1
   218e8:	a90c      	add	r1, sp, #48	; 0x30
   218ea:	47c0      	blx	r8
        if (rc != 1)
   218ec:	2801      	cmp	r0, #1
   218ee:	d10e      	bne.n	2190e <cycle+0x6e>
        *value += (i & 127) * multiplier;
   218f0:	ab02      	add	r3, sp, #8
   218f2:	2228      	movs	r2, #40	; 0x28
   218f4:	189b      	adds	r3, r3, r2
   218f6:	781b      	ldrb	r3, [r3, #0]
   218f8:	465a      	mov	r2, fp
   218fa:	401a      	ands	r2, r3
   218fc:	436a      	muls	r2, r5
   218fe:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   21900:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   21902:	b25b      	sxtb	r3, r3
   21904:	2b00      	cmp	r3, #0
   21906:	da02      	bge.n	2190e <cycle+0x6e>
   21908:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2190a:	2e00      	cmp	r6, #0
   2190c:	d1e7      	bne.n	218de <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2190e:	6963      	ldr	r3, [r4, #20]
   21910:	1c58      	adds	r0, r3, #1
   21912:	0039      	movs	r1, r7
   21914:	4b4f      	ldr	r3, [pc, #316]	; (21a54 <cycle+0x1b4>)
   21916:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   21918:	2f00      	cmp	r7, #0
   2191a:	dd10      	ble.n	2193e <cycle+0x9e>
   2191c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   2191e:	68b3      	ldr	r3, [r6, #8]
   21920:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   21922:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   21924:	6963      	ldr	r3, [r4, #20]
   21926:	181d      	adds	r5, r3, r0
   21928:	9807      	ldr	r0, [sp, #28]
   2192a:	4b49      	ldr	r3, [pc, #292]	; (21a50 <cycle+0x1b0>)
   2192c:	4798      	blx	r3
   2192e:	0003      	movs	r3, r0
   21930:	003a      	movs	r2, r7
   21932:	0029      	movs	r1, r5
   21934:	0030      	movs	r0, r6
   21936:	47c8      	blx	r9
   21938:	42b8      	cmp	r0, r7
   2193a:	d000      	beq.n	2193e <cycle+0x9e>
   2193c:	e085      	b.n	21a4a <cycle+0x1aa>
    header.byte = c->readbuf[0];
   2193e:	6963      	ldr	r3, [r4, #20]
   21940:	781d      	ldrb	r5, [r3, #0]
   21942:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   21944:	2d05      	cmp	r5, #5
   21946:	d051      	beq.n	219ec <cycle+0x14c>
   21948:	2d0d      	cmp	r5, #13
   2194a:	d06e      	beq.n	21a2a <cycle+0x18a>
        rc = SUCCESS;
   2194c:	2600      	movs	r6, #0
    switch (packet_type)
   2194e:	2d03      	cmp	r5, #3
   21950:	d16e      	bne.n	21a30 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   21952:	68e2      	ldr	r2, [r4, #12]
   21954:	9204      	str	r2, [sp, #16]
   21956:	9303      	str	r3, [sp, #12]
   21958:	ab0f      	add	r3, sp, #60	; 0x3c
   2195a:	9302      	str	r3, [sp, #8]
   2195c:	ab0e      	add	r3, sp, #56	; 0x38
   2195e:	9301      	str	r3, [sp, #4]
   21960:	ab09      	add	r3, sp, #36	; 0x24
   21962:	9300      	str	r3, [sp, #0]
   21964:	ab0d      	add	r3, sp, #52	; 0x34
   21966:	2229      	movs	r2, #41	; 0x29
   21968:	a902      	add	r1, sp, #8
   2196a:	468c      	mov	ip, r1
   2196c:	4462      	add	r2, ip
   2196e:	a908      	add	r1, sp, #32
   21970:	202a      	movs	r0, #42	; 0x2a
   21972:	4460      	add	r0, ip
   21974:	4e38      	ldr	r6, [pc, #224]	; (21a58 <cycle+0x1b8>)
   21976:	47b0      	blx	r6
        rc = SUCCESS;
   21978:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2197a:	2801      	cmp	r0, #1
   2197c:	d15b      	bne.n	21a36 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2197e:	ae0c      	add	r6, sp, #48	; 0x30
   21980:	ab02      	add	r3, sp, #8
   21982:	7e1b      	ldrb	r3, [r3, #24]
   21984:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   21986:	0032      	movs	r2, r6
   21988:	a909      	add	r1, sp, #36	; 0x24
   2198a:	0020      	movs	r0, r4
   2198c:	4b33      	ldr	r3, [pc, #204]	; (21a5c <cycle+0x1bc>)
   2198e:	4798      	blx	r3
            if (msg.qos != QOS0)
   21990:	7833      	ldrb	r3, [r6, #0]
   21992:	2b00      	cmp	r3, #0
   21994:	d028      	beq.n	219e8 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   21996:	2b01      	cmp	r3, #1
   21998:	d004      	beq.n	219a4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   2199a:	2b02      	cmp	r3, #2
   2199c:	d016      	beq.n	219cc <cycle+0x12c>
   2199e:	2601      	movs	r6, #1
   219a0:	4276      	negs	r6, r6
   219a2:	e048      	b.n	21a36 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   219a4:	ab0c      	add	r3, sp, #48	; 0x30
   219a6:	889b      	ldrh	r3, [r3, #4]
   219a8:	9300      	str	r3, [sp, #0]
   219aa:	2300      	movs	r3, #0
   219ac:	2204      	movs	r2, #4
   219ae:	68a1      	ldr	r1, [r4, #8]
   219b0:	6920      	ldr	r0, [r4, #16]
   219b2:	4e2b      	ldr	r6, [pc, #172]	; (21a60 <cycle+0x1c0>)
   219b4:	47b0      	blx	r6
   219b6:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   219b8:	2900      	cmp	r1, #0
   219ba:	dd12      	ble.n	219e2 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   219bc:	9a07      	ldr	r2, [sp, #28]
   219be:	0020      	movs	r0, r4
   219c0:	4b28      	ldr	r3, [pc, #160]	; (21a64 <cycle+0x1c4>)
   219c2:	4798      	blx	r3
   219c4:	0006      	movs	r6, r0
                if (rc == FAILURE)
   219c6:	1c43      	adds	r3, r0, #1
   219c8:	d132      	bne.n	21a30 <cycle+0x190>
   219ca:	e034      	b.n	21a36 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   219cc:	ab0c      	add	r3, sp, #48	; 0x30
   219ce:	889b      	ldrh	r3, [r3, #4]
   219d0:	9300      	str	r3, [sp, #0]
   219d2:	2300      	movs	r3, #0
   219d4:	2205      	movs	r2, #5
   219d6:	68a1      	ldr	r1, [r4, #8]
   219d8:	6920      	ldr	r0, [r4, #16]
   219da:	4e21      	ldr	r6, [pc, #132]	; (21a60 <cycle+0x1c0>)
   219dc:	47b0      	blx	r6
   219de:	0001      	movs	r1, r0
   219e0:	e7ea      	b.n	219b8 <cycle+0x118>
   219e2:	2601      	movs	r6, #1
   219e4:	4276      	negs	r6, r6
   219e6:	e026      	b.n	21a36 <cycle+0x196>
        rc = SUCCESS;
   219e8:	2600      	movs	r6, #0
   219ea:	e021      	b.n	21a30 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   219ec:	68e2      	ldr	r2, [r4, #12]
   219ee:	9200      	str	r2, [sp, #0]
   219f0:	aa0c      	add	r2, sp, #48	; 0x30
   219f2:	a908      	add	r1, sp, #32
   219f4:	a809      	add	r0, sp, #36	; 0x24
   219f6:	4e1c      	ldr	r6, [pc, #112]	; (21a68 <cycle+0x1c8>)
   219f8:	47b0      	blx	r6
   219fa:	2801      	cmp	r0, #1
   219fc:	d002      	beq.n	21a04 <cycle+0x164>
   219fe:	2601      	movs	r6, #1
   21a00:	4276      	negs	r6, r6
   21a02:	e01b      	b.n	21a3c <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   21a04:	ab0c      	add	r3, sp, #48	; 0x30
   21a06:	881b      	ldrh	r3, [r3, #0]
   21a08:	9300      	str	r3, [sp, #0]
   21a0a:	2300      	movs	r3, #0
   21a0c:	2206      	movs	r2, #6
   21a0e:	68a1      	ldr	r1, [r4, #8]
   21a10:	6920      	ldr	r0, [r4, #16]
   21a12:	4e13      	ldr	r6, [pc, #76]	; (21a60 <cycle+0x1c0>)
   21a14:	47b0      	blx	r6
   21a16:	2800      	cmp	r0, #0
   21a18:	ddf1      	ble.n	219fe <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   21a1a:	9a07      	ldr	r2, [sp, #28]
   21a1c:	0001      	movs	r1, r0
   21a1e:	0020      	movs	r0, r4
   21a20:	4b10      	ldr	r3, [pc, #64]	; (21a64 <cycle+0x1c4>)
   21a22:	4798      	blx	r3
   21a24:	1e06      	subs	r6, r0, #0
   21a26:	d1ea      	bne.n	219fe <cycle+0x15e>
   21a28:	e002      	b.n	21a30 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   21a2a:	2300      	movs	r3, #0
   21a2c:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   21a2e:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   21a30:	0020      	movs	r0, r4
   21a32:	4b0e      	ldr	r3, [pc, #56]	; (21a6c <cycle+0x1cc>)
   21a34:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   21a36:	2e00      	cmp	r6, #0
   21a38:	d100      	bne.n	21a3c <cycle+0x19c>
   21a3a:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   21a3c:	0030      	movs	r0, r6
   21a3e:	b010      	add	sp, #64	; 0x40
   21a40:	bc1c      	pop	{r2, r3, r4}
   21a42:	4690      	mov	r8, r2
   21a44:	4699      	mov	r9, r3
   21a46:	46a3      	mov	fp, r4
   21a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a4a:	4d09      	ldr	r5, [pc, #36]	; (21a70 <cycle+0x1d0>)
        rc = SUCCESS;
   21a4c:	2600      	movs	r6, #0
   21a4e:	e7ef      	b.n	21a30 <cycle+0x190>
   21a50:	00022015 	.word	0x00022015
   21a54:	00022705 	.word	0x00022705
   21a58:	000225fd 	.word	0x000225fd
   21a5c:	00021721 	.word	0x00021721
   21a60:	00022a39 	.word	0x00022a39
   21a64:	0002166d 	.word	0x0002166d
   21a68:	00022695 	.word	0x00022695
   21a6c:	00021825 	.word	0x00021825
   21a70:	0000ffff 	.word	0x0000ffff

00021a74 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   21a74:	b570      	push	{r4, r5, r6, lr}
   21a76:	b084      	sub	sp, #16
   21a78:	0005      	movs	r5, r0
   21a7a:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   21a7c:	a801      	add	r0, sp, #4
   21a7e:	4b0a      	ldr	r3, [pc, #40]	; (21aa8 <MQTTYield+0x34>)
   21a80:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   21a82:	0021      	movs	r1, r4
   21a84:	a801      	add	r0, sp, #4
   21a86:	4b09      	ldr	r3, [pc, #36]	; (21aac <MQTTYield+0x38>)
   21a88:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   21a8a:	4c09      	ldr	r4, [pc, #36]	; (21ab0 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   21a8c:	4e09      	ldr	r6, [pc, #36]	; (21ab4 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   21a8e:	a901      	add	r1, sp, #4
   21a90:	0028      	movs	r0, r5
   21a92:	47a0      	blx	r4
   21a94:	1c43      	adds	r3, r0, #1
   21a96:	d004      	beq.n	21aa2 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   21a98:	a801      	add	r0, sp, #4
   21a9a:	47b0      	blx	r6
   21a9c:	2800      	cmp	r0, #0
   21a9e:	d0f6      	beq.n	21a8e <MQTTYield+0x1a>
    int rc = SUCCESS;
   21aa0:	2000      	movs	r0, #0
        
    return rc;
}
   21aa2:	b004      	add	sp, #16
   21aa4:	bd70      	pop	{r4, r5, r6, pc}
   21aa6:	46c0      	nop			; (mov r8, r8)
   21aa8:	00022029 	.word	0x00022029
   21aac:	00021ff1 	.word	0x00021ff1
   21ab0:	000218a1 	.word	0x000218a1
   21ab4:	00021fd9 	.word	0x00021fd9

00021ab8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   21ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21aba:	b083      	sub	sp, #12
   21abc:	9001      	str	r0, [sp, #4]
   21abe:	000e      	movs	r6, r1
   21ac0:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   21ac2:	2401      	movs	r4, #1
   21ac4:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   21ac6:	4f08      	ldr	r7, [pc, #32]	; (21ae8 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   21ac8:	4d08      	ldr	r5, [pc, #32]	; (21aec <waitfor+0x34>)
        if (TimerIsExpired(timer))
   21aca:	9800      	ldr	r0, [sp, #0]
   21acc:	47b8      	blx	r7
   21ace:	2800      	cmp	r0, #0
   21ad0:	d106      	bne.n	21ae0 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   21ad2:	9900      	ldr	r1, [sp, #0]
   21ad4:	9801      	ldr	r0, [sp, #4]
   21ad6:	47a8      	blx	r5
   21ad8:	0004      	movs	r4, r0
   21ada:	42b0      	cmp	r0, r6
   21adc:	d1f5      	bne.n	21aca <waitfor+0x12>
   21ade:	0034      	movs	r4, r6
    
    return rc;
}
   21ae0:	0020      	movs	r0, r4
   21ae2:	b003      	add	sp, #12
   21ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ae6:	46c0      	nop			; (mov r8, r8)
   21ae8:	00021fd9 	.word	0x00021fd9
   21aec:	000218a1 	.word	0x000218a1

00021af0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   21af0:	b530      	push	{r4, r5, lr}
   21af2:	b09b      	sub	sp, #108	; 0x6c
   21af4:	0004      	movs	r4, r0
   21af6:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   21af8:	2258      	movs	r2, #88	; 0x58
   21afa:	4928      	ldr	r1, [pc, #160]	; (21b9c <MQTTConnect+0xac>)
   21afc:	a801      	add	r0, sp, #4
   21afe:	4b28      	ldr	r3, [pc, #160]	; (21ba0 <MQTTConnect+0xb0>)
   21b00:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   21b02:	6a23      	ldr	r3, [r4, #32]
   21b04:	2b00      	cmp	r3, #0
   21b06:	d13f      	bne.n	21b88 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   21b08:	a817      	add	r0, sp, #92	; 0x5c
   21b0a:	4b26      	ldr	r3, [pc, #152]	; (21ba4 <MQTTConnect+0xb4>)
   21b0c:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   21b0e:	6861      	ldr	r1, [r4, #4]
   21b10:	a817      	add	r0, sp, #92	; 0x5c
   21b12:	4b25      	ldr	r3, [pc, #148]	; (21ba8 <MQTTConnect+0xb8>)
   21b14:	4798      	blx	r3

    if (options == 0)
   21b16:	2d00      	cmp	r5, #0
   21b18:	d015      	beq.n	21b46 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   21b1a:	8b29      	ldrh	r1, [r5, #24]
   21b1c:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   21b1e:	0020      	movs	r0, r4
   21b20:	3054      	adds	r0, #84	; 0x54
   21b22:	4b22      	ldr	r3, [pc, #136]	; (21bac <MQTTConnect+0xbc>)
   21b24:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   21b26:	002a      	movs	r2, r5
   21b28:	68a1      	ldr	r1, [r4, #8]
   21b2a:	6920      	ldr	r0, [r4, #16]
   21b2c:	4b20      	ldr	r3, [pc, #128]	; (21bb0 <MQTTConnect+0xc0>)
   21b2e:	4798      	blx	r3
   21b30:	2800      	cmp	r0, #0
   21b32:	dd2c      	ble.n	21b8e <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   21b34:	aa17      	add	r2, sp, #92	; 0x5c
   21b36:	0001      	movs	r1, r0
   21b38:	0020      	movs	r0, r4
   21b3a:	4b1e      	ldr	r3, [pc, #120]	; (21bb4 <MQTTConnect+0xc4>)
   21b3c:	4798      	blx	r3
   21b3e:	2800      	cmp	r0, #0
   21b40:	d003      	beq.n	21b4a <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   21b42:	b01b      	add	sp, #108	; 0x6c
   21b44:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   21b46:	ad01      	add	r5, sp, #4
   21b48:	e7e7      	b.n	21b1a <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   21b4a:	aa17      	add	r2, sp, #92	; 0x5c
   21b4c:	2102      	movs	r1, #2
   21b4e:	0020      	movs	r0, r4
   21b50:	4b19      	ldr	r3, [pc, #100]	; (21bb8 <MQTTConnect+0xc8>)
   21b52:	4798      	blx	r3
   21b54:	2802      	cmp	r0, #2
   21b56:	d11d      	bne.n	21b94 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   21b58:	466b      	mov	r3, sp
   21b5a:	1c99      	adds	r1, r3, #2
   21b5c:	23ff      	movs	r3, #255	; 0xff
   21b5e:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   21b60:	466b      	mov	r3, sp
   21b62:	1cd8      	adds	r0, r3, #3
   21b64:	2300      	movs	r3, #0
   21b66:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   21b68:	68e3      	ldr	r3, [r4, #12]
   21b6a:	6962      	ldr	r2, [r4, #20]
   21b6c:	4d13      	ldr	r5, [pc, #76]	; (21bbc <MQTTConnect+0xcc>)
   21b6e:	47a8      	blx	r5
   21b70:	2801      	cmp	r0, #1
   21b72:	d002      	beq.n	21b7a <MQTTConnect+0x8a>
            rc = FAILURE;
   21b74:	2001      	movs	r0, #1
   21b76:	4240      	negs	r0, r0
   21b78:	e7e3      	b.n	21b42 <MQTTConnect+0x52>
            rc = connack_rc;
   21b7a:	466b      	mov	r3, sp
   21b7c:	7898      	ldrb	r0, [r3, #2]
    if (rc == SUCCESS)
   21b7e:	2800      	cmp	r0, #0
   21b80:	d1df      	bne.n	21b42 <MQTTConnect+0x52>
        c->isconnected = 1;
   21b82:	2301      	movs	r3, #1
   21b84:	6223      	str	r3, [r4, #32]
    return rc;
   21b86:	e7dc      	b.n	21b42 <MQTTConnect+0x52>
    int rc = FAILURE;
   21b88:	2001      	movs	r0, #1
   21b8a:	4240      	negs	r0, r0
   21b8c:	e7d9      	b.n	21b42 <MQTTConnect+0x52>
   21b8e:	2001      	movs	r0, #1
   21b90:	4240      	negs	r0, r0
   21b92:	e7d6      	b.n	21b42 <MQTTConnect+0x52>
        rc = FAILURE;
   21b94:	2001      	movs	r0, #1
   21b96:	4240      	negs	r0, r0
   21b98:	e7d3      	b.n	21b42 <MQTTConnect+0x52>
   21b9a:	46c0      	nop			; (mov r8, r8)
   21b9c:	0002a988 	.word	0x0002a988
   21ba0:	0002621d 	.word	0x0002621d
   21ba4:	00022029 	.word	0x00022029
   21ba8:	00021ff1 	.word	0x00021ff1
   21bac:	00022001 	.word	0x00022001
   21bb0:	00022409 	.word	0x00022409
   21bb4:	0002166d 	.word	0x0002166d
   21bb8:	00021ab9 	.word	0x00021ab9
   21bbc:	00022551 	.word	0x00022551

00021bc0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   21bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bc2:	b091      	sub	sp, #68	; 0x44
   21bc4:	0004      	movs	r4, r0
   21bc6:	000f      	movs	r7, r1
   21bc8:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   21bca:	2300      	movs	r3, #0
   21bcc:	930b      	str	r3, [sp, #44]	; 0x2c
   21bce:	930c      	str	r3, [sp, #48]	; 0x30
	int Qoss = (int) qos;
   21bd0:	9209      	str	r2, [sp, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
   21bd2:	910a      	str	r1, [sp, #40]	; 0x28
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21bd4:	6a03      	ldr	r3, [r0, #32]
   21bd6:	2b00      	cmp	r3, #0
   21bd8:	d05c      	beq.n	21c94 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   21bda:	a80d      	add	r0, sp, #52	; 0x34
   21bdc:	4b32      	ldr	r3, [pc, #200]	; (21ca8 <MQTTSubscribe+0xe8>)
   21bde:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21be0:	6861      	ldr	r1, [r4, #4]
   21be2:	a80d      	add	r0, sp, #52	; 0x34
   21be4:	4b31      	ldr	r3, [pc, #196]	; (21cac <MQTTSubscribe+0xec>)
   21be6:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21be8:	6920      	ldr	r0, [r4, #16]
   21bea:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21bec:	6823      	ldr	r3, [r4, #0]
   21bee:	4a30      	ldr	r2, [pc, #192]	; (21cb0 <MQTTSubscribe+0xf0>)
   21bf0:	4293      	cmp	r3, r2
   21bf2:	d017      	beq.n	21c24 <MQTTSubscribe+0x64>
   21bf4:	3301      	adds	r3, #1
   21bf6:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21bf8:	b29b      	uxth	r3, r3
   21bfa:	aa09      	add	r2, sp, #36	; 0x24
   21bfc:	9202      	str	r2, [sp, #8]
   21bfe:	aa0a      	add	r2, sp, #40	; 0x28
   21c00:	9201      	str	r2, [sp, #4]
   21c02:	2201      	movs	r2, #1
   21c04:	9200      	str	r2, [sp, #0]
   21c06:	2200      	movs	r2, #0
   21c08:	4e2a      	ldr	r6, [pc, #168]	; (21cb4 <MQTTSubscribe+0xf4>)
   21c0a:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   21c0c:	2800      	cmp	r0, #0
   21c0e:	dd44      	ble.n	21c9a <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21c10:	aa0d      	add	r2, sp, #52	; 0x34
   21c12:	0001      	movs	r1, r0
   21c14:	0020      	movs	r0, r4
   21c16:	4b28      	ldr	r3, [pc, #160]	; (21cb8 <MQTTSubscribe+0xf8>)
   21c18:	4798      	blx	r3
   21c1a:	1e06      	subs	r6, r0, #0
   21c1c:	d004      	beq.n	21c28 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21c1e:	0030      	movs	r0, r6
   21c20:	b011      	add	sp, #68	; 0x44
   21c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21c24:	2301      	movs	r3, #1
   21c26:	e7e6      	b.n	21bf6 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   21c28:	aa0d      	add	r2, sp, #52	; 0x34
   21c2a:	2109      	movs	r1, #9
   21c2c:	0020      	movs	r0, r4
   21c2e:	4b23      	ldr	r3, [pc, #140]	; (21cbc <MQTTSubscribe+0xfc>)
   21c30:	4798      	blx	r3
   21c32:	2809      	cmp	r0, #9
   21c34:	d134      	bne.n	21ca0 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   21c36:	2300      	movs	r3, #0
   21c38:	9307      	str	r3, [sp, #28]
   21c3a:	3b01      	subs	r3, #1
   21c3c:	9308      	str	r3, [sp, #32]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21c3e:	68e3      	ldr	r3, [r4, #12]
   21c40:	9301      	str	r3, [sp, #4]
   21c42:	6963      	ldr	r3, [r4, #20]
   21c44:	9300      	str	r3, [sp, #0]
   21c46:	ab08      	add	r3, sp, #32
   21c48:	aa07      	add	r2, sp, #28
   21c4a:	2101      	movs	r1, #1
   21c4c:	3009      	adds	r0, #9
   21c4e:	ad02      	add	r5, sp, #8
   21c50:	46ac      	mov	ip, r5
   21c52:	4460      	add	r0, ip
   21c54:	4d1a      	ldr	r5, [pc, #104]	; (21cc0 <MQTTSubscribe+0x100>)
   21c56:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21c58:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21c5a:	2801      	cmp	r0, #1
   21c5c:	d00e      	beq.n	21c7c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   21c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21c60:	2b00      	cmp	r3, #0
   21c62:	d010      	beq.n	21c86 <MQTTSubscribe+0xc6>
   21c64:	0022      	movs	r2, r4
   21c66:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21c68:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   21c6a:	6810      	ldr	r0, [r2, #0]
   21c6c:	2800      	cmp	r0, #0
   21c6e:	d00b      	beq.n	21c88 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21c70:	3301      	adds	r3, #1
   21c72:	3208      	adds	r2, #8
   21c74:	2b05      	cmp	r3, #5
   21c76:	d1f8      	bne.n	21c6a <MQTTSubscribe+0xaa>
   21c78:	000e      	movs	r6, r1
   21c7a:	e7d0      	b.n	21c1e <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   21c7c:	9908      	ldr	r1, [sp, #32]
        if (rc != 0x80)
   21c7e:	2980      	cmp	r1, #128	; 0x80
   21c80:	d1ed      	bne.n	21c5e <MQTTSubscribe+0x9e>
   21c82:	000e      	movs	r6, r1
   21c84:	e7cb      	b.n	21c1e <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   21c86:	0033      	movs	r3, r6
   21c88:	00db      	lsls	r3, r3, #3
   21c8a:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   21c8c:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   21c8e:	9b05      	ldr	r3, [sp, #20]
   21c90:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   21c92:	e7c4      	b.n	21c1e <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   21c94:	2601      	movs	r6, #1
   21c96:	4276      	negs	r6, r6
   21c98:	e7c1      	b.n	21c1e <MQTTSubscribe+0x5e>
   21c9a:	2601      	movs	r6, #1
   21c9c:	4276      	negs	r6, r6
   21c9e:	e7be      	b.n	21c1e <MQTTSubscribe+0x5e>
        rc = FAILURE;
   21ca0:	2601      	movs	r6, #1
   21ca2:	4276      	negs	r6, r6
    return rc;
   21ca4:	e7bb      	b.n	21c1e <MQTTSubscribe+0x5e>
   21ca6:	46c0      	nop			; (mov r8, r8)
   21ca8:	00022029 	.word	0x00022029
   21cac:	00021ff1 	.word	0x00021ff1
   21cb0:	0000ffff 	.word	0x0000ffff
   21cb4:	00022ad1 	.word	0x00022ad1
   21cb8:	0002166d 	.word	0x0002166d
   21cbc:	00021ab9 	.word	0x00021ab9
   21cc0:	00022b85 	.word	0x00022b85

00021cc4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   21cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21cc6:	b091      	sub	sp, #68	; 0x44
   21cc8:	0005      	movs	r5, r0
   21cca:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   21ccc:	2300      	movs	r3, #0
   21cce:	930b      	str	r3, [sp, #44]	; 0x2c
   21cd0:	930c      	str	r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicName;
   21cd2:	910a      	str	r1, [sp, #40]	; 0x28
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21cd4:	6a03      	ldr	r3, [r0, #32]
   21cd6:	2b00      	cmp	r3, #0
   21cd8:	d062      	beq.n	21da0 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   21cda:	a80d      	add	r0, sp, #52	; 0x34
   21cdc:	4b36      	ldr	r3, [pc, #216]	; (21db8 <MQTTPublish+0xf4>)
   21cde:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21ce0:	6869      	ldr	r1, [r5, #4]
   21ce2:	a80d      	add	r0, sp, #52	; 0x34
   21ce4:	4b35      	ldr	r3, [pc, #212]	; (21dbc <MQTTPublish+0xf8>)
   21ce6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   21ce8:	7823      	ldrb	r3, [r4, #0]
   21cea:	3b01      	subs	r3, #1
   21cec:	2b01      	cmp	r3, #1
   21cee:	d921      	bls.n	21d34 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   21cf0:	7823      	ldrb	r3, [r4, #0]
   21cf2:	68e2      	ldr	r2, [r4, #12]
   21cf4:	9206      	str	r2, [sp, #24]
   21cf6:	68a2      	ldr	r2, [r4, #8]
   21cf8:	9205      	str	r2, [sp, #20]
   21cfa:	aa0a      	add	r2, sp, #40	; 0x28
   21cfc:	a902      	add	r1, sp, #8
   21cfe:	cac1      	ldmia	r2!, {r0, r6, r7}
   21d00:	c1c1      	stmia	r1!, {r0, r6, r7}
   21d02:	88a2      	ldrh	r2, [r4, #4]
   21d04:	9201      	str	r2, [sp, #4]
   21d06:	7862      	ldrb	r2, [r4, #1]
   21d08:	9200      	str	r2, [sp, #0]
   21d0a:	2200      	movs	r2, #0
   21d0c:	68a9      	ldr	r1, [r5, #8]
   21d0e:	6928      	ldr	r0, [r5, #16]
   21d10:	4e2b      	ldr	r6, [pc, #172]	; (21dc0 <MQTTPublish+0xfc>)
   21d12:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   21d14:	2800      	cmp	r0, #0
   21d16:	dd46      	ble.n	21da6 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21d18:	aa0d      	add	r2, sp, #52	; 0x34
   21d1a:	0001      	movs	r1, r0
   21d1c:	0028      	movs	r0, r5
   21d1e:	4b29      	ldr	r3, [pc, #164]	; (21dc4 <MQTTPublish+0x100>)
   21d20:	4798      	blx	r3
   21d22:	2800      	cmp	r0, #0
   21d24:	d104      	bne.n	21d30 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   21d26:	7823      	ldrb	r3, [r4, #0]
   21d28:	2b01      	cmp	r3, #1
   21d2a:	d00d      	beq.n	21d48 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   21d2c:	2b02      	cmp	r3, #2
   21d2e:	d021      	beq.n	21d74 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21d30:	b011      	add	sp, #68	; 0x44
   21d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21d34:	682b      	ldr	r3, [r5, #0]
   21d36:	4a24      	ldr	r2, [pc, #144]	; (21dc8 <MQTTPublish+0x104>)
   21d38:	4293      	cmp	r3, r2
   21d3a:	d003      	beq.n	21d44 <MQTTPublish+0x80>
   21d3c:	3301      	adds	r3, #1
   21d3e:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   21d40:	80a3      	strh	r3, [r4, #4]
   21d42:	e7d5      	b.n	21cf0 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21d44:	2301      	movs	r3, #1
   21d46:	e7fa      	b.n	21d3e <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   21d48:	aa0d      	add	r2, sp, #52	; 0x34
   21d4a:	2104      	movs	r1, #4
   21d4c:	0028      	movs	r0, r5
   21d4e:	4b1f      	ldr	r3, [pc, #124]	; (21dcc <MQTTPublish+0x108>)
   21d50:	4798      	blx	r3
   21d52:	2804      	cmp	r0, #4
   21d54:	d12a      	bne.n	21dac <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21d56:	696b      	ldr	r3, [r5, #20]
   21d58:	68ea      	ldr	r2, [r5, #12]
   21d5a:	9200      	str	r2, [sp, #0]
   21d5c:	2226      	movs	r2, #38	; 0x26
   21d5e:	446a      	add	r2, sp
   21d60:	a909      	add	r1, sp, #36	; 0x24
   21d62:	3021      	adds	r0, #33	; 0x21
   21d64:	4468      	add	r0, sp
   21d66:	4c1a      	ldr	r4, [pc, #104]	; (21dd0 <MQTTPublish+0x10c>)
   21d68:	47a0      	blx	r4
   21d6a:	3801      	subs	r0, #1
   21d6c:	1e43      	subs	r3, r0, #1
   21d6e:	4198      	sbcs	r0, r3
   21d70:	4240      	negs	r0, r0
   21d72:	e7dd      	b.n	21d30 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   21d74:	aa0d      	add	r2, sp, #52	; 0x34
   21d76:	2107      	movs	r1, #7
   21d78:	0028      	movs	r0, r5
   21d7a:	4b14      	ldr	r3, [pc, #80]	; (21dcc <MQTTPublish+0x108>)
   21d7c:	4798      	blx	r3
   21d7e:	2807      	cmp	r0, #7
   21d80:	d117      	bne.n	21db2 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21d82:	696b      	ldr	r3, [r5, #20]
   21d84:	68ea      	ldr	r2, [r5, #12]
   21d86:	9200      	str	r2, [sp, #0]
   21d88:	2226      	movs	r2, #38	; 0x26
   21d8a:	446a      	add	r2, sp
   21d8c:	a909      	add	r1, sp, #36	; 0x24
   21d8e:	301e      	adds	r0, #30
   21d90:	4468      	add	r0, sp
   21d92:	4c0f      	ldr	r4, [pc, #60]	; (21dd0 <MQTTPublish+0x10c>)
   21d94:	47a0      	blx	r4
   21d96:	3801      	subs	r0, #1
   21d98:	1e43      	subs	r3, r0, #1
   21d9a:	4198      	sbcs	r0, r3
   21d9c:	4240      	negs	r0, r0
   21d9e:	e7c7      	b.n	21d30 <MQTTPublish+0x6c>
    int rc = FAILURE;
   21da0:	2001      	movs	r0, #1
   21da2:	4240      	negs	r0, r0
   21da4:	e7c4      	b.n	21d30 <MQTTPublish+0x6c>
   21da6:	2001      	movs	r0, #1
   21da8:	4240      	negs	r0, r0
   21daa:	e7c1      	b.n	21d30 <MQTTPublish+0x6c>
            rc = FAILURE;
   21dac:	2001      	movs	r0, #1
   21dae:	4240      	negs	r0, r0
   21db0:	e7be      	b.n	21d30 <MQTTPublish+0x6c>
            rc = FAILURE;
   21db2:	2001      	movs	r0, #1
   21db4:	4240      	negs	r0, r0
    return rc;
   21db6:	e7bb      	b.n	21d30 <MQTTPublish+0x6c>
   21db8:	00022029 	.word	0x00022029
   21dbc:	00021ff1 	.word	0x00021ff1
   21dc0:	00022971 	.word	0x00022971
   21dc4:	0002166d 	.word	0x0002166d
   21dc8:	0000ffff 	.word	0x0000ffff
   21dcc:	00021ab9 	.word	0x00021ab9
   21dd0:	00022695 	.word	0x00022695

00021dd4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   21dd4:	b510      	push	{r4, lr}
   21dd6:	b084      	sub	sp, #16
   21dd8:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   21dda:	a801      	add	r0, sp, #4
   21ddc:	4b0b      	ldr	r3, [pc, #44]	; (21e0c <MQTTDisconnect+0x38>)
   21dde:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21de0:	6861      	ldr	r1, [r4, #4]
   21de2:	a801      	add	r0, sp, #4
   21de4:	4b0a      	ldr	r3, [pc, #40]	; (21e10 <MQTTDisconnect+0x3c>)
   21de6:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   21de8:	68a1      	ldr	r1, [r4, #8]
   21dea:	6920      	ldr	r0, [r4, #16]
   21dec:	4b09      	ldr	r3, [pc, #36]	; (21e14 <MQTTDisconnect+0x40>)
   21dee:	4798      	blx	r3
    if (len > 0)
   21df0:	2800      	cmp	r0, #0
   21df2:	dd08      	ble.n	21e06 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   21df4:	aa01      	add	r2, sp, #4
   21df6:	0001      	movs	r1, r0
   21df8:	0020      	movs	r0, r4
   21dfa:	4b07      	ldr	r3, [pc, #28]	; (21e18 <MQTTDisconnect+0x44>)
   21dfc:	4798      	blx	r3
        
    c->isconnected = 0;
   21dfe:	2300      	movs	r3, #0
   21e00:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21e02:	b004      	add	sp, #16
   21e04:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   21e06:	2001      	movs	r0, #1
   21e08:	4240      	negs	r0, r0
   21e0a:	e7f8      	b.n	21dfe <MQTTDisconnect+0x2a>
   21e0c:	00022029 	.word	0x00022029
   21e10:	00021ff1 	.word	0x00021ff1
   21e14:	000225dd 	.word	0x000225dd
   21e18:	0002166d 	.word	0x0002166d

00021e1c <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   21e1c:	b510      	push	{r4, lr}
   21e1e:	0004      	movs	r4, r0
	close(n->socket);
   21e20:	2000      	movs	r0, #0
   21e22:	5620      	ldrsb	r0, [r4, r0]
   21e24:	4b04      	ldr	r3, [pc, #16]	; (21e38 <WINC1500_disconnect+0x1c>)
   21e26:	4798      	blx	r3
	n->socket=-1;
   21e28:	2301      	movs	r3, #1
   21e2a:	425b      	negs	r3, r3
   21e2c:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   21e2e:	2200      	movs	r2, #0
   21e30:	4b02      	ldr	r3, [pc, #8]	; (21e3c <WINC1500_disconnect+0x20>)
   21e32:	701a      	strb	r2, [r3, #0]
}
   21e34:	bd10      	pop	{r4, pc}
   21e36:	46c0      	nop			; (mov r8, r8)
   21e38:	0001d2dd 	.word	0x0001d2dd
   21e3c:	20003d56 	.word	0x20003d56

00021e40 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   21e40:	b570      	push	{r4, r5, r6, lr}
   21e42:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   21e44:	2200      	movs	r2, #0
   21e46:	4b0d      	ldr	r3, [pc, #52]	; (21e7c <WINC1500_write+0x3c>)
   21e48:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   21e4a:	b2b2      	uxth	r2, r6
   21e4c:	7800      	ldrb	r0, [r0, #0]
   21e4e:	b240      	sxtb	r0, r0
   21e50:	2300      	movs	r3, #0
   21e52:	4c0b      	ldr	r4, [pc, #44]	; (21e80 <WINC1500_write+0x40>)
   21e54:	47a0      	blx	r4
   21e56:	2800      	cmp	r0, #0
   21e58:	d10c      	bne.n	21e74 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   21e5a:	4b08      	ldr	r3, [pc, #32]	; (21e7c <WINC1500_write+0x3c>)
   21e5c:	781b      	ldrb	r3, [r3, #0]
   21e5e:	2b00      	cmp	r3, #0
   21e60:	d106      	bne.n	21e70 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   21e62:	4d08      	ldr	r5, [pc, #32]	; (21e84 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   21e64:	4c05      	ldr	r4, [pc, #20]	; (21e7c <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   21e66:	2000      	movs	r0, #0
   21e68:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   21e6a:	7823      	ldrb	r3, [r4, #0]
   21e6c:	2b00      	cmp	r3, #0
   21e6e:	d0fa      	beq.n	21e66 <WINC1500_write+0x26>
}
   21e70:	0030      	movs	r0, r6
   21e72:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   21e74:	2601      	movs	r6, #1
   21e76:	4276      	negs	r6, r6
   21e78:	e7fa      	b.n	21e70 <WINC1500_write+0x30>
   21e7a:	46c0      	nop			; (mov r8, r8)
   21e7c:	20003d59 	.word	0x20003d59
   21e80:	0001d1b1 	.word	0x0001d1b1
   21e84:	0001b1c9 	.word	0x0001b1c9

00021e88 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   21e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e8a:	b083      	sub	sp, #12
   21e8c:	9101      	str	r1, [sp, #4]
   21e8e:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   21e90:	2b00      	cmp	r3, #0
   21e92:	d100      	bne.n	21e96 <WINC1500_read+0xe>
   21e94:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   21e96:	4a22      	ldr	r2, [pc, #136]	; (21f20 <WINC1500_read+0x98>)
   21e98:	6812      	ldr	r2, [r2, #0]
   21e9a:	2a00      	cmp	r2, #0
   21e9c:	d013      	beq.n	21ec6 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   21e9e:	4b20      	ldr	r3, [pc, #128]	; (21f20 <WINC1500_read+0x98>)
   21ea0:	681d      	ldr	r5, [r3, #0]
   21ea2:	42a5      	cmp	r5, r4
   21ea4:	db39      	blt.n	21f1a <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   21ea6:	4e1f      	ldr	r6, [pc, #124]	; (21f24 <WINC1500_read+0x9c>)
   21ea8:	6837      	ldr	r7, [r6, #0]
   21eaa:	491f      	ldr	r1, [pc, #124]	; (21f28 <WINC1500_read+0xa0>)
   21eac:	19c9      	adds	r1, r1, r7
   21eae:	0022      	movs	r2, r4
   21eb0:	9801      	ldr	r0, [sp, #4]
   21eb2:	4b1e      	ldr	r3, [pc, #120]	; (21f2c <WINC1500_read+0xa4>)
   21eb4:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   21eb6:	1b2d      	subs	r5, r5, r4
   21eb8:	4b19      	ldr	r3, [pc, #100]	; (21f20 <WINC1500_read+0x98>)
   21eba:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   21ebc:	193f      	adds	r7, r7, r4
   21ebe:	6037      	str	r7, [r6, #0]
  return len;
   21ec0:	0020      	movs	r0, r4
}
   21ec2:	b003      	add	sp, #12
   21ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   21ec6:	2100      	movs	r1, #0
   21ec8:	4a19      	ldr	r2, [pc, #100]	; (21f30 <WINC1500_read+0xa8>)
   21eca:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   21ecc:	7800      	ldrb	r0, [r0, #0]
   21ece:	b240      	sxtb	r0, r0
   21ed0:	2280      	movs	r2, #128	; 0x80
   21ed2:	0052      	lsls	r2, r2, #1
   21ed4:	4914      	ldr	r1, [pc, #80]	; (21f28 <WINC1500_read+0xa0>)
   21ed6:	4d17      	ldr	r5, [pc, #92]	; (21f34 <WINC1500_read+0xac>)
   21ed8:	47a8      	blx	r5
   21eda:	2800      	cmp	r0, #0
   21edc:	d11a      	bne.n	21f14 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   21ede:	4b14      	ldr	r3, [pc, #80]	; (21f30 <WINC1500_read+0xa8>)
   21ee0:	781b      	ldrb	r3, [r3, #0]
   21ee2:	2b00      	cmp	r3, #0
   21ee4:	d106      	bne.n	21ef4 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   21ee6:	4f14      	ldr	r7, [pc, #80]	; (21f38 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   21ee8:	4d11      	ldr	r5, [pc, #68]	; (21f30 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   21eea:	2000      	movs	r0, #0
   21eec:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   21eee:	782b      	ldrb	r3, [r5, #0]
   21ef0:	2b00      	cmp	r3, #0
   21ef2:	d0fa      	beq.n	21eea <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   21ef4:	4b11      	ldr	r3, [pc, #68]	; (21f3c <WINC1500_read+0xb4>)
   21ef6:	6818      	ldr	r0, [r3, #0]
   21ef8:	2800      	cmp	r0, #0
   21efa:	dd05      	ble.n	21f08 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   21efc:	4b08      	ldr	r3, [pc, #32]	; (21f20 <WINC1500_read+0x98>)
   21efe:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   21f00:	2200      	movs	r2, #0
   21f02:	4b08      	ldr	r3, [pc, #32]	; (21f24 <WINC1500_read+0x9c>)
   21f04:	601a      	str	r2, [r3, #0]
   21f06:	e7ca      	b.n	21e9e <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   21f08:	2300      	movs	r3, #0
   21f0a:	4a05      	ldr	r2, [pc, #20]	; (21f20 <WINC1500_read+0x98>)
   21f0c:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   21f0e:	4a05      	ldr	r2, [pc, #20]	; (21f24 <WINC1500_read+0x9c>)
   21f10:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   21f12:	e7d6      	b.n	21ec2 <WINC1500_read+0x3a>
		  return -1;
   21f14:	2001      	movs	r0, #1
   21f16:	4240      	negs	r0, r0
   21f18:	e7d3      	b.n	21ec2 <WINC1500_read+0x3a>
	  return -1;
   21f1a:	2001      	movs	r0, #1
   21f1c:	4240      	negs	r0, r0
   21f1e:	e7d0      	b.n	21ec2 <WINC1500_read+0x3a>
   21f20:	20003e68 	.word	0x20003e68
   21f24:	20003e6c 	.word	0x20003e6c
   21f28:	20003d5c 	.word	0x20003d5c
   21f2c:	0002621d 	.word	0x0002621d
   21f30:	20003d58 	.word	0x20003d58
   21f34:	0001d249 	.word	0x0001d249
   21f38:	0001b1c9 	.word	0x0001b1c9
   21f3c:	20003e60 	.word	0x20003e60

00021f40 <dnsResolveCallback>:
{
   21f40:	b510      	push	{r4, lr}
   21f42:	0002      	movs	r2, r0
   21f44:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   21f46:	4b08      	ldr	r3, [pc, #32]	; (21f68 <dnsResolveCallback+0x28>)
   21f48:	781b      	ldrb	r3, [r3, #0]
   21f4a:	2b00      	cmp	r3, #0
   21f4c:	d10b      	bne.n	21f66 <dnsResolveCallback+0x26>
   21f4e:	4b07      	ldr	r3, [pc, #28]	; (21f6c <dnsResolveCallback+0x2c>)
   21f50:	6818      	ldr	r0, [r3, #0]
   21f52:	0011      	movs	r1, r2
   21f54:	4b06      	ldr	r3, [pc, #24]	; (21f70 <dnsResolveCallback+0x30>)
   21f56:	4798      	blx	r3
   21f58:	2800      	cmp	r0, #0
   21f5a:	d104      	bne.n	21f66 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   21f5c:	4b05      	ldr	r3, [pc, #20]	; (21f74 <dnsResolveCallback+0x34>)
   21f5e:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   21f60:	2201      	movs	r2, #1
   21f62:	4b01      	ldr	r3, [pc, #4]	; (21f68 <dnsResolveCallback+0x28>)
   21f64:	701a      	strb	r2, [r3, #0]
}
   21f66:	bd10      	pop	{r4, pc}
   21f68:	20003d57 	.word	0x20003d57
   21f6c:	20003e64 	.word	0x20003e64
   21f70:	00026607 	.word	0x00026607
   21f74:	20003e5c 	.word	0x20003e5c

00021f78 <tcpClientSocketEventHandler>:
{
   21f78:	b530      	push	{r4, r5, lr}
   21f7a:	4b12      	ldr	r3, [pc, #72]	; (21fc4 <tcpClientSocketEventHandler+0x4c>)
   21f7c:	24af      	movs	r4, #175	; 0xaf
   21f7e:	00a4      	lsls	r4, r4, #2
   21f80:	191d      	adds	r5, r3, r4
   21f82:	e002      	b.n	21f8a <tcpClientSocketEventHandler+0x12>
   21f84:	3364      	adds	r3, #100	; 0x64
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   21f86:	42ab      	cmp	r3, r5
   21f88:	d00b      	beq.n	21fa2 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   21f8a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   21f8c:	2c00      	cmp	r4, #0
   21f8e:	d0f9      	beq.n	21f84 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   21f90:	6a24      	ldr	r4, [r4, #32]
   21f92:	4284      	cmp	r4, r0
   21f94:	d1f6      	bne.n	21f84 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   21f96:	2906      	cmp	r1, #6
   21f98:	d00c      	beq.n	21fb4 <tcpClientSocketEventHandler+0x3c>
   21f9a:	2907      	cmp	r1, #7
   21f9c:	d006      	beq.n	21fac <tcpClientSocketEventHandler+0x34>
   21f9e:	2905      	cmp	r1, #5
   21fa0:	d000      	beq.n	21fa4 <tcpClientSocketEventHandler+0x2c>
}
   21fa2:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   21fa4:	2201      	movs	r2, #1
   21fa6:	4b08      	ldr	r3, [pc, #32]	; (21fc8 <tcpClientSocketEventHandler+0x50>)
   21fa8:	701a      	strb	r2, [r3, #0]
			break;
   21faa:	e7fa      	b.n	21fa2 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   21fac:	2201      	movs	r2, #1
   21fae:	4b07      	ldr	r3, [pc, #28]	; (21fcc <tcpClientSocketEventHandler+0x54>)
   21fb0:	701a      	strb	r2, [r3, #0]
			break;
   21fb2:	e7f6      	b.n	21fa2 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   21fb4:	2304      	movs	r3, #4
   21fb6:	5ed2      	ldrsh	r2, [r2, r3]
   21fb8:	4b05      	ldr	r3, [pc, #20]	; (21fd0 <tcpClientSocketEventHandler+0x58>)
   21fba:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   21fbc:	2201      	movs	r2, #1
   21fbe:	4b05      	ldr	r3, [pc, #20]	; (21fd4 <tcpClientSocketEventHandler+0x5c>)
   21fc0:	701a      	strb	r2, [r3, #0]
}
   21fc2:	e7ee      	b.n	21fa2 <tcpClientSocketEventHandler+0x2a>
   21fc4:	20003e70 	.word	0x20003e70
   21fc8:	20003d56 	.word	0x20003d56
   21fcc:	20003d59 	.word	0x20003d59
   21fd0:	20003e60 	.word	0x20003e60
   21fd4:	20003d58 	.word	0x20003d58

00021fd8 <TimerIsExpired>:
char TimerIsExpired(Timer* timer) {
   21fd8:	b510      	push	{r4, lr}
   21fda:	0001      	movs	r1, r0
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   21fdc:	3004      	adds	r0, #4
   21fde:	4b03      	ldr	r3, [pc, #12]	; (21fec <TimerIsExpired+0x14>)
   21fe0:	4798      	blx	r3
   21fe2:	3801      	subs	r0, #1
   21fe4:	4243      	negs	r3, r0
   21fe6:	4158      	adcs	r0, r3
   21fe8:	b2c0      	uxtb	r0, r0
}
   21fea:	bd10      	pop	{r4, pc}
   21fec:	00018575 	.word	0x00018575

00021ff0 <TimerCountdownMS>:
void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   21ff0:	b510      	push	{r4, lr}
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   21ff2:	c002      	stmia	r0!, {r1}
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   21ff4:	4b01      	ldr	r3, [pc, #4]	; (21ffc <TimerCountdownMS+0xc>)
   21ff6:	4798      	blx	r3
}
   21ff8:	bd10      	pop	{r4, pc}
   21ffa:	46c0      	nop			; (mov r8, r8)
   21ffc:	0001852d 	.word	0x0001852d

00022000 <TimerCountdown>:
void TimerCountdown(Timer* timer, unsigned int timeout) {
   22000:	b510      	push	{r4, lr}
	TimerCountdownMS(timer, timeout * 1000);
   22002:	23fa      	movs	r3, #250	; 0xfa
   22004:	009b      	lsls	r3, r3, #2
   22006:	4359      	muls	r1, r3
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   22008:	c002      	stmia	r0!, {r1}
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2200a:	4b01      	ldr	r3, [pc, #4]	; (22010 <TimerCountdown+0x10>)
   2200c:	4798      	blx	r3
}
   2200e:	bd10      	pop	{r4, pc}
   22010:	0001852d 	.word	0x0001852d

00022014 <TimerLeftMS>:
int TimerLeftMS(Timer* timer) {
   22014:	b510      	push	{r4, lr}
   22016:	0004      	movs	r4, r0
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   22018:	3004      	adds	r0, #4
   2201a:	0021      	movs	r1, r4
   2201c:	4b01      	ldr	r3, [pc, #4]	; (22024 <TimerLeftMS+0x10>)
   2201e:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   22020:	6820      	ldr	r0, [r4, #0]
}
   22022:	bd10      	pop	{r4, pc}
   22024:	00018575 	.word	0x00018575

00022028 <TimerInit>:
void TimerInit(Timer* timer) {
   22028:	b510      	push	{r4, lr}
	timer->xTicksToWait = 0;
   2202a:	2300      	movs	r3, #0
   2202c:	c008      	stmia	r0!, {r3}
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2202e:	2208      	movs	r2, #8
   22030:	2100      	movs	r1, #0
   22032:	4b01      	ldr	r3, [pc, #4]	; (22038 <TimerInit+0x10>)
   22034:	4798      	blx	r3
}
   22036:	bd10      	pop	{r4, pc}
   22038:	00026253 	.word	0x00026253

0002203c <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   2203c:	2301      	movs	r3, #1
   2203e:	425b      	negs	r3, r3
   22040:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   22042:	4b03      	ldr	r3, [pc, #12]	; (22050 <NetworkInit+0x14>)
   22044:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   22046:	4b03      	ldr	r3, [pc, #12]	; (22054 <NetworkInit+0x18>)
   22048:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   2204a:	4b03      	ldr	r3, [pc, #12]	; (22058 <NetworkInit+0x1c>)
   2204c:	6103      	str	r3, [r0, #16]
}
   2204e:	4770      	bx	lr
   22050:	00021e89 	.word	0x00021e89
   22054:	00021e41 	.word	0x00021e41
   22058:	00021e1d 	.word	0x00021e1d

0002205c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2205c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2205e:	b087      	sub	sp, #28
   22060:	0006      	movs	r6, r0
   22062:	0015      	movs	r5, r2
   22064:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   22066:	4c25      	ldr	r4, [pc, #148]	; (220fc <ConnectNetwork+0xa0>)
   22068:	2300      	movs	r3, #0
   2206a:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   2206c:	4b24      	ldr	r3, [pc, #144]	; (22100 <ConnectNetwork+0xa4>)
   2206e:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   22070:	0008      	movs	r0, r1
   22072:	4b24      	ldr	r3, [pc, #144]	; (22104 <ConnectNetwork+0xa8>)
   22074:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   22076:	7823      	ldrb	r3, [r4, #0]
   22078:	2b00      	cmp	r3, #0
   2207a:	d106      	bne.n	2208a <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   2207c:	4f22      	ldr	r7, [pc, #136]	; (22108 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   2207e:	4c1f      	ldr	r4, [pc, #124]	; (220fc <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   22080:	2000      	movs	r0, #0
   22082:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   22084:	7823      	ldrb	r3, [r4, #0]
   22086:	2b00      	cmp	r3, #0
   22088:	d0fa      	beq.n	22080 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2208a:	4b20      	ldr	r3, [pc, #128]	; (2210c <ConnectNetwork+0xb0>)
   2208c:	681a      	ldr	r2, [r3, #0]
   2208e:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   22090:	2302      	movs	r3, #2
   22092:	a902      	add	r1, sp, #8
   22094:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   22096:	022b      	lsls	r3, r5, #8
   22098:	491d      	ldr	r1, [pc, #116]	; (22110 <ConnectNetwork+0xb4>)
   2209a:	400b      	ands	r3, r1
   2209c:	b2ad      	uxth	r5, r5
   2209e:	0a2d      	lsrs	r5, r5, #8
   220a0:	431d      	orrs	r5, r3
   220a2:	ab02      	add	r3, sp, #8
   220a4:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   220a6:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   220a8:	6833      	ldr	r3, [r6, #0]
   220aa:	2b00      	cmp	r3, #0
   220ac:	db16      	blt.n	220dc <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   220ae:	6830      	ldr	r0, [r6, #0]
   220b0:	1c43      	adds	r3, r0, #1
   220b2:	d01b      	beq.n	220ec <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   220b4:	b240      	sxtb	r0, r0
   220b6:	2210      	movs	r2, #16
   220b8:	a902      	add	r1, sp, #8
   220ba:	4b16      	ldr	r3, [pc, #88]	; (22114 <ConnectNetwork+0xb8>)
   220bc:	4798      	blx	r3
   220be:	2800      	cmp	r0, #0
   220c0:	d119      	bne.n	220f6 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   220c2:	2200      	movs	r2, #0
   220c4:	4b14      	ldr	r3, [pc, #80]	; (22118 <ConnectNetwork+0xbc>)
   220c6:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   220c8:	4d0f      	ldr	r5, [pc, #60]	; (22108 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   220ca:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   220cc:	2000      	movs	r0, #0
   220ce:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   220d0:	7823      	ldrb	r3, [r4, #0]
   220d2:	2b00      	cmp	r3, #0
   220d4:	d0fa      	beq.n	220cc <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   220d6:	2000      	movs	r0, #0
   220d8:	b007      	add	sp, #28
   220da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   220dc:	466b      	mov	r3, sp
   220de:	791a      	ldrb	r2, [r3, #4]
   220e0:	2101      	movs	r1, #1
   220e2:	2002      	movs	r0, #2
   220e4:	4b0d      	ldr	r3, [pc, #52]	; (2211c <ConnectNetwork+0xc0>)
   220e6:	4798      	blx	r3
   220e8:	6030      	str	r0, [r6, #0]
   220ea:	e7e0      	b.n	220ae <ConnectNetwork+0x52>
   close(n->socket);
   220ec:	4b0c      	ldr	r3, [pc, #48]	; (22120 <ConnectNetwork+0xc4>)
   220ee:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   220f0:	2009      	movs	r0, #9
   220f2:	4240      	negs	r0, r0
   220f4:	e7f0      	b.n	220d8 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   220f6:	2009      	movs	r0, #9
   220f8:	4240      	negs	r0, r0
   220fa:	e7ed      	b.n	220d8 <ConnectNetwork+0x7c>
   220fc:	20003d57 	.word	0x20003d57
   22100:	20003e64 	.word	0x20003e64
   22104:	0001d3e1 	.word	0x0001d3e1
   22108:	0001b1c9 	.word	0x0001b1c9
   2210c:	20003e5c 	.word	0x20003e5c
   22110:	00ffff00 	.word	0x00ffff00
   22114:	0001d121 	.word	0x0001d121
   22118:	20003d56 	.word	0x20003d56
   2211c:	0001cfa1 	.word	0x0001cfa1
   22120:	0001d2dd 	.word	0x0001d2dd

00022124 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   22124:	b5f0      	push	{r4, r5, r6, r7, lr}
   22126:	b085      	sub	sp, #20
   22128:	0006      	movs	r6, r0
   2212a:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2212c:	2800      	cmp	r0, #0
   2212e:	d03c      	beq.n	221aa <mqtt_init+0x86>
   22130:	2900      	cmp	r1, #0
   22132:	d03d      	beq.n	221b0 <mqtt_init+0x8c>
   22134:	690b      	ldr	r3, [r1, #16]
   22136:	2b00      	cmp	r3, #0
   22138:	d03d      	beq.n	221b6 <mqtt_init+0x92>
   2213a:	688b      	ldr	r3, [r1, #8]
   2213c:	2b00      	cmp	r3, #0
   2213e:	d03d      	beq.n	221bc <mqtt_init+0x98>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   22140:	888b      	ldrh	r3, [r1, #4]
   22142:	27fa      	movs	r7, #250	; 0xfa
   22144:	00bf      	lsls	r7, r7, #2
   22146:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   22148:	0004      	movs	r4, r0
   2214a:	3420      	adds	r4, #32
   2214c:	0020      	movs	r0, r4
   2214e:	4b1e      	ldr	r3, [pc, #120]	; (221c8 <mqtt_init+0xa4>)
   22150:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   22152:	1d30      	adds	r0, r6, #4
   22154:	2218      	movs	r2, #24
   22156:	0029      	movs	r1, r5
   22158:	4b1c      	ldr	r3, [pc, #112]	; (221cc <mqtt_init+0xa8>)
   2215a:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2215c:	4b1c      	ldr	r3, [pc, #112]	; (221d0 <mqtt_init+0xac>)
   2215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   22160:	2b00      	cmp	r3, #0
   22162:	d01a      	beq.n	2219a <mqtt_init+0x76>
   22164:	4b1a      	ldr	r3, [pc, #104]	; (221d0 <mqtt_init+0xac>)
   22166:	33c4      	adds	r3, #196	; 0xc4
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   22168:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2216a:	6819      	ldr	r1, [r3, #0]
   2216c:	2900      	cmp	r1, #0
   2216e:	d015      	beq.n	2219c <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   22170:	3201      	adds	r2, #1
   22172:	3364      	adds	r3, #100	; 0x64
   22174:	2a07      	cmp	r2, #7
   22176:	d1f8      	bne.n	2216a <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   22178:	69f0      	ldr	r0, [r6, #28]
   2217a:	2800      	cmp	r0, #0
   2217c:	d021      	beq.n	221c2 <mqtt_init+0x9e>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2217e:	692b      	ldr	r3, [r5, #16]
   22180:	68ea      	ldr	r2, [r5, #12]
   22182:	9202      	str	r2, [sp, #8]
   22184:	68aa      	ldr	r2, [r5, #8]
   22186:	9201      	str	r2, [sp, #4]
   22188:	696a      	ldr	r2, [r5, #20]
   2218a:	9200      	str	r2, [sp, #0]
   2218c:	003a      	movs	r2, r7
   2218e:	0021      	movs	r1, r4
   22190:	4c10      	ldr	r4, [pc, #64]	; (221d4 <mqtt_init+0xb0>)
   22192:	47a0      	blx	r4
		return SUCCESS;
   22194:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   22196:	b005      	add	sp, #20
   22198:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2219a:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   2219c:	2364      	movs	r3, #100	; 0x64
   2219e:	4353      	muls	r3, r2
   221a0:	4a0b      	ldr	r2, [pc, #44]	; (221d0 <mqtt_init+0xac>)
   221a2:	18d2      	adds	r2, r2, r3
   221a4:	6616      	str	r6, [r2, #96]	; 0x60
			module->client = &(mqttClientPool[cIdx].client);
   221a6:	61f2      	str	r2, [r6, #28]
   221a8:	e7e6      	b.n	22178 <mqtt_init+0x54>
		return FAILURE;
   221aa:	2001      	movs	r0, #1
   221ac:	4240      	negs	r0, r0
   221ae:	e7f2      	b.n	22196 <mqtt_init+0x72>
   221b0:	2001      	movs	r0, #1
   221b2:	4240      	negs	r0, r0
   221b4:	e7ef      	b.n	22196 <mqtt_init+0x72>
   221b6:	2001      	movs	r0, #1
   221b8:	4240      	negs	r0, r0
   221ba:	e7ec      	b.n	22196 <mqtt_init+0x72>
   221bc:	2001      	movs	r0, #1
   221be:	4240      	negs	r0, r0
   221c0:	e7e9      	b.n	22196 <mqtt_init+0x72>
		return FAILURE;
   221c2:	2001      	movs	r0, #1
   221c4:	4240      	negs	r0, r0
   221c6:	e7e6      	b.n	22196 <mqtt_init+0x72>
   221c8:	0002203d 	.word	0x0002203d
   221cc:	0002621d 	.word	0x0002621d
   221d0:	20003e70 	.word	0x20003e70
   221d4:	000216e9 	.word	0x000216e9

000221d8 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   221d8:	4b05      	ldr	r3, [pc, #20]	; (221f0 <mqtt_get_config_defaults+0x18>)
   221da:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   221dc:	2300      	movs	r3, #0
   221de:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   221e0:	223c      	movs	r2, #60	; 0x3c
   221e2:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   221e4:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   221e6:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   221e8:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   221ea:	6143      	str	r3, [r0, #20]
}
   221ec:	4770      	bx	lr
   221ee:	46c0      	nop			; (mov r8, r8)
   221f0:	0000075b 	.word	0x0000075b

000221f4 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   221f4:	2800      	cmp	r0, #0
   221f6:	d002      	beq.n	221fe <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   221f8:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   221fa:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   221fc:	4770      	bx	lr
		return FAILURE;
   221fe:	2001      	movs	r0, #1
   22200:	4240      	negs	r0, r0
   22202:	e7fb      	b.n	221fc <mqtt_register_callback+0x8>

00022204 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   22204:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   22206:	4b01      	ldr	r3, [pc, #4]	; (2220c <mqtt_socket_event_handler+0x8>)
   22208:	4798      	blx	r3
}
   2220a:	bd10      	pop	{r4, pc}
   2220c:	00021f79 	.word	0x00021f79

00022210 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   22210:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   22212:	4b01      	ldr	r3, [pc, #4]	; (22218 <mqtt_socket_resolve_handler+0x8>)
   22214:	4798      	blx	r3
}
   22216:	bd10      	pop	{r4, pc}
   22218:	00021f41 	.word	0x00021f41

0002221c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2221c:	b530      	push	{r4, r5, lr}
   2221e:	b083      	sub	sp, #12
   22220:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   22222:	7983      	ldrb	r3, [r0, #6]
   22224:	8882      	ldrh	r2, [r0, #4]
   22226:	3020      	adds	r0, #32
   22228:	4d06      	ldr	r5, [pc, #24]	; (22244 <mqtt_connect+0x28>)
   2222a:	47a8      	blx	r5
   2222c:	9001      	str	r0, [sp, #4]
	if(module->callback)
   2222e:	6823      	ldr	r3, [r4, #0]
   22230:	2b00      	cmp	r3, #0
   22232:	d003      	beq.n	2223c <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   22234:	aa01      	add	r2, sp, #4
   22236:	2100      	movs	r1, #0
   22238:	0020      	movs	r0, r4
   2223a:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   2223c:	9801      	ldr	r0, [sp, #4]
   2223e:	b003      	add	sp, #12
   22240:	bd30      	pop	{r4, r5, pc}
   22242:	46c0      	nop			; (mov r8, r8)
   22244:	0002205d 	.word	0x0002205d

00022248 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   22248:	b5f0      	push	{r4, r5, r6, r7, lr}
   2224a:	46de      	mov	lr, fp
   2224c:	4657      	mov	r7, sl
   2224e:	464e      	mov	r6, r9
   22250:	b5c0      	push	{r6, r7, lr}
   22252:	b098      	sub	sp, #96	; 0x60
   22254:	0005      	movs	r5, r0
   22256:	4689      	mov	r9, r1
   22258:	4693      	mov	fp, r2
   2225a:	469a      	mov	sl, r3
   2225c:	ab24      	add	r3, sp, #144	; 0x90
   2225e:	781f      	ldrb	r7, [r3, #0]
   22260:	ab25      	add	r3, sp, #148	; 0x94
   22262:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   22264:	ac01      	add	r4, sp, #4
   22266:	2258      	movs	r2, #88	; 0x58
   22268:	491a      	ldr	r1, [pc, #104]	; (222d4 <mqtt_connect_broker+0x8c>)
   2226a:	0020      	movs	r0, r4
   2226c:	4b1a      	ldr	r3, [pc, #104]	; (222d8 <mqtt_connect_broker+0x90>)
   2226e:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   22270:	9b20      	ldr	r3, [sp, #128]	; 0x80
   22272:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   22274:	465b      	mov	r3, fp
   22276:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   22278:	4653      	mov	r3, sl
   2227a:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2227c:	464b      	mov	r3, r9
   2227e:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   22280:	9b21      	ldr	r3, [sp, #132]	; 0x84
   22282:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   22284:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22286:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   22288:	233c      	movs	r3, #60	; 0x3c
   2228a:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   2228c:	3301      	adds	r3, #1
   2228e:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   22290:	9b21      	ldr	r3, [sp, #132]	; 0x84
   22292:	2b00      	cmp	r3, #0
   22294:	d005      	beq.n	222a2 <mqtt_connect_broker+0x5a>
   22296:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22298:	2b00      	cmp	r3, #0
   2229a:	d002      	beq.n	222a2 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   2229c:	2201      	movs	r2, #1
   2229e:	ab01      	add	r3, sp, #4
   222a0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   222a2:	a901      	add	r1, sp, #4
   222a4:	69e8      	ldr	r0, [r5, #28]
   222a6:	4b0d      	ldr	r3, [pc, #52]	; (222dc <mqtt_connect_broker+0x94>)
   222a8:	4798      	blx	r3
   222aa:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   222ac:	ab17      	add	r3, sp, #92	; 0x5c
   222ae:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   222b0:	682b      	ldr	r3, [r5, #0]
   222b2:	2b00      	cmp	r3, #0
   222b4:	d003      	beq.n	222be <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   222b6:	aa17      	add	r2, sp, #92	; 0x5c
   222b8:	2101      	movs	r1, #1
   222ba:	0028      	movs	r0, r5
   222bc:	4798      	blx	r3
	
	module->isConnected = true;
   222be:	2201      	movs	r2, #1
   222c0:	2334      	movs	r3, #52	; 0x34
   222c2:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   222c4:	0020      	movs	r0, r4
   222c6:	b018      	add	sp, #96	; 0x60
   222c8:	bc1c      	pop	{r2, r3, r4}
   222ca:	4691      	mov	r9, r2
   222cc:	469a      	mov	sl, r3
   222ce:	46a3      	mov	fp, r4
   222d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   222d2:	46c0      	nop			; (mov r8, r8)
   222d4:	0002a9e0 	.word	0x0002a9e0
   222d8:	0002621d 	.word	0x0002621d
   222dc:	00021af1 	.word	0x00021af1

000222e0 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   222e0:	b530      	push	{r4, r5, lr}
   222e2:	b083      	sub	sp, #12
   222e4:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   222e6:	69c0      	ldr	r0, [r0, #28]
   222e8:	4b08      	ldr	r3, [pc, #32]	; (2230c <mqtt_disconnect+0x2c>)
   222ea:	4798      	blx	r3
   222ec:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   222ee:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   222f0:	6823      	ldr	r3, [r4, #0]
   222f2:	2b00      	cmp	r3, #0
   222f4:	d003      	beq.n	222fe <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   222f6:	aa01      	add	r2, sp, #4
   222f8:	2105      	movs	r1, #5
   222fa:	0020      	movs	r0, r4
   222fc:	4798      	blx	r3
	
	module->isConnected = false;
   222fe:	2200      	movs	r2, #0
   22300:	2334      	movs	r3, #52	; 0x34
   22302:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   22304:	0028      	movs	r0, r5
   22306:	b003      	add	sp, #12
   22308:	bd30      	pop	{r4, r5, pc}
   2230a:	46c0      	nop			; (mov r8, r8)
   2230c:	00021dd5 	.word	0x00021dd5

00022310 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   22310:	b570      	push	{r4, r5, r6, lr}
   22312:	b084      	sub	sp, #16
   22314:	0004      	movs	r4, r0
   22316:	a808      	add	r0, sp, #32
   22318:	7805      	ldrb	r5, [r0, #0]
   2231a:	a809      	add	r0, sp, #36	; 0x24
   2231c:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2231e:	466e      	mov	r6, sp
   22320:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   22322:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   22324:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   22326:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   22328:	466a      	mov	r2, sp
   2232a:	69e0      	ldr	r0, [r4, #28]
   2232c:	4b06      	ldr	r3, [pc, #24]	; (22348 <mqtt_publish+0x38>)
   2232e:	4798      	blx	r3
   22330:	0005      	movs	r5, r0
	
	if(module->callback)
   22332:	6823      	ldr	r3, [r4, #0]
   22334:	2b00      	cmp	r3, #0
   22336:	d003      	beq.n	22340 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   22338:	2200      	movs	r2, #0
   2233a:	2102      	movs	r1, #2
   2233c:	0020      	movs	r0, r4
   2233e:	4798      	blx	r3
	
	return rc;
}
   22340:	0028      	movs	r0, r5
   22342:	b004      	add	sp, #16
   22344:	bd70      	pop	{r4, r5, r6, pc}
   22346:	46c0      	nop			; (mov r8, r8)
   22348:	00021cc5 	.word	0x00021cc5

0002234c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2234c:	b570      	push	{r4, r5, r6, lr}
   2234e:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   22350:	69c0      	ldr	r0, [r0, #28]
   22352:	4d06      	ldr	r5, [pc, #24]	; (2236c <mqtt_subscribe+0x20>)
   22354:	47a8      	blx	r5
   22356:	0005      	movs	r5, r0
	
	if(module->callback)
   22358:	6823      	ldr	r3, [r4, #0]
   2235a:	2b00      	cmp	r3, #0
   2235c:	d003      	beq.n	22366 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2235e:	2200      	movs	r2, #0
   22360:	2103      	movs	r1, #3
   22362:	0020      	movs	r0, r4
   22364:	4798      	blx	r3
	
	return rc;
}
   22366:	0028      	movs	r0, r5
   22368:	bd70      	pop	{r4, r5, r6, pc}
   2236a:	46c0      	nop			; (mov r8, r8)
   2236c:	00021bc1 	.word	0x00021bc1

00022370 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   22370:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   22372:	69c0      	ldr	r0, [r0, #28]
   22374:	4b01      	ldr	r3, [pc, #4]	; (2237c <mqtt_yield+0xc>)
   22376:	4798      	blx	r3
   22378:	bd10      	pop	{r4, pc}
   2237a:	46c0      	nop			; (mov r8, r8)
   2237c:	00021a75 	.word	0x00021a75

00022380 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   22380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22382:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   22384:	7a03      	ldrb	r3, [r0, #8]
   22386:	2b03      	cmp	r3, #3
   22388:	d024      	beq.n	223d4 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   2238a:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   2238c:	2b04      	cmp	r3, #4
   2238e:	d01f      	beq.n	223d0 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   22390:	68e0      	ldr	r0, [r4, #12]
   22392:	6921      	ldr	r1, [r4, #16]
   22394:	6962      	ldr	r2, [r4, #20]
   22396:	4b1b      	ldr	r3, [pc, #108]	; (22404 <MQTTSerialize_connectLength+0x84>)
   22398:	4798      	blx	r3
   2239a:	1c85      	adds	r5, r0, #2
   2239c:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   2239e:	7ee3      	ldrb	r3, [r4, #27]
   223a0:	2b00      	cmp	r3, #0
   223a2:	d119      	bne.n	223d8 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   223a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   223a6:	2b00      	cmp	r3, #0
   223a8:	d024      	beq.n	223f4 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   223aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
   223ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
   223ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   223b0:	4b14      	ldr	r3, [pc, #80]	; (22404 <MQTTSerialize_connectLength+0x84>)
   223b2:	4798      	blx	r3
   223b4:	3002      	adds	r0, #2
   223b6:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   223b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   223ba:	2b00      	cmp	r3, #0
   223bc:	d01e      	beq.n	223fc <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   223be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   223c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   223c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   223c4:	4b0f      	ldr	r3, [pc, #60]	; (22404 <MQTTSerialize_connectLength+0x84>)
   223c6:	4798      	blx	r3
   223c8:	3002      	adds	r0, #2
   223ca:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   223cc:	0028      	movs	r0, r5
   223ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   223d0:	360a      	adds	r6, #10
   223d2:	e7dd      	b.n	22390 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   223d4:	260c      	movs	r6, #12
   223d6:	e7db      	b.n	22390 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   223d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   223da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   223dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   223de:	4f09      	ldr	r7, [pc, #36]	; (22404 <MQTTSerialize_connectLength+0x84>)
   223e0:	47b8      	blx	r7
   223e2:	0006      	movs	r6, r0
   223e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   223e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   223e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   223ea:	47b8      	blx	r7
   223ec:	1836      	adds	r6, r6, r0
   223ee:	3604      	adds	r6, #4
   223f0:	19ad      	adds	r5, r5, r6
   223f2:	e7d7      	b.n	223a4 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   223f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   223f6:	2b00      	cmp	r3, #0
   223f8:	d1d7      	bne.n	223aa <MQTTSerialize_connectLength+0x2a>
   223fa:	e7dd      	b.n	223b8 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   223fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   223fe:	2b00      	cmp	r3, #0
   22400:	d1dd      	bne.n	223be <MQTTSerialize_connectLength+0x3e>
   22402:	e7e3      	b.n	223cc <MQTTSerialize_connectLength+0x4c>
   22404:	000228e9 	.word	0x000228e9

00022408 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   22408:	b5f0      	push	{r4, r5, r6, r7, lr}
   2240a:	b083      	sub	sp, #12
   2240c:	0006      	movs	r6, r0
   2240e:	000f      	movs	r7, r1
   22410:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   22412:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   22414:	0010      	movs	r0, r2
   22416:	4b45      	ldr	r3, [pc, #276]	; (2252c <MQTTSerialize_connect+0x124>)
   22418:	4798      	blx	r3
   2241a:	0004      	movs	r4, r0
   2241c:	4b44      	ldr	r3, [pc, #272]	; (22530 <MQTTSerialize_connect+0x128>)
   2241e:	4798      	blx	r3
   22420:	42b8      	cmp	r0, r7
   22422:	dd00      	ble.n	22426 <MQTTSerialize_connect+0x1e>
   22424:	e07f      	b.n	22526 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   22426:	2110      	movs	r1, #16
   22428:	a801      	add	r0, sp, #4
   2242a:	4b42      	ldr	r3, [pc, #264]	; (22534 <MQTTSerialize_connect+0x12c>)
   2242c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2242e:	0021      	movs	r1, r4
   22430:	9801      	ldr	r0, [sp, #4]
   22432:	4b41      	ldr	r3, [pc, #260]	; (22538 <MQTTSerialize_connect+0x130>)
   22434:	4798      	blx	r3
   22436:	9b01      	ldr	r3, [sp, #4]
   22438:	469c      	mov	ip, r3
   2243a:	4460      	add	r0, ip
   2243c:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   2243e:	7a2b      	ldrb	r3, [r5, #8]
   22440:	2b04      	cmp	r3, #4
   22442:	d045      	beq.n	224d0 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   22444:	493d      	ldr	r1, [pc, #244]	; (2253c <MQTTSerialize_connect+0x134>)
   22446:	a801      	add	r0, sp, #4
   22448:	4b3d      	ldr	r3, [pc, #244]	; (22540 <MQTTSerialize_connect+0x138>)
   2244a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2244c:	2103      	movs	r1, #3
   2244e:	a801      	add	r0, sp, #4
   22450:	4b38      	ldr	r3, [pc, #224]	; (22534 <MQTTSerialize_connect+0x12c>)
   22452:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   22454:	7ea9      	ldrb	r1, [r5, #26]
   22456:	2301      	movs	r3, #1
   22458:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2245a:	7eea      	ldrb	r2, [r5, #27]
   2245c:	1e50      	subs	r0, r2, #1
   2245e:	4182      	sbcs	r2, r0
   22460:	b2d2      	uxtb	r2, r2
   22462:	4013      	ands	r3, r2
   22464:	009b      	lsls	r3, r3, #2
   22466:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   22468:	4319      	orrs	r1, r3
   2246a:	2b00      	cmp	r3, #0
   2246c:	d00b      	beq.n	22486 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   2246e:	233d      	movs	r3, #61	; 0x3d
   22470:	5cea      	ldrb	r2, [r5, r3]
   22472:	3b3a      	subs	r3, #58	; 0x3a
   22474:	4013      	ands	r3, r2
   22476:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   22478:	223c      	movs	r2, #60	; 0x3c
   2247a:	5ca8      	ldrb	r0, [r5, r2]
   2247c:	3a3b      	subs	r2, #59	; 0x3b
   2247e:	4002      	ands	r2, r0
   22480:	0152      	lsls	r2, r2, #5
   22482:	4319      	orrs	r1, r3
   22484:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   22486:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   22488:	2b00      	cmp	r3, #0
   2248a:	d02a      	beq.n	224e2 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   2248c:	2380      	movs	r3, #128	; 0x80
   2248e:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   22490:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   22492:	2b00      	cmp	r3, #0
   22494:	d029      	beq.n	224ea <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   22496:	2340      	movs	r3, #64	; 0x40
   22498:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   2249a:	b2cc      	uxtb	r4, r1
   2249c:	0021      	movs	r1, r4
   2249e:	a801      	add	r0, sp, #4
   224a0:	4b24      	ldr	r3, [pc, #144]	; (22534 <MQTTSerialize_connect+0x12c>)
   224a2:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   224a4:	8b29      	ldrh	r1, [r5, #24]
   224a6:	a801      	add	r0, sp, #4
   224a8:	4b26      	ldr	r3, [pc, #152]	; (22544 <MQTTSerialize_connect+0x13c>)
   224aa:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   224ac:	68e9      	ldr	r1, [r5, #12]
   224ae:	692a      	ldr	r2, [r5, #16]
   224b0:	696b      	ldr	r3, [r5, #20]
   224b2:	a801      	add	r0, sp, #4
   224b4:	4f24      	ldr	r7, [pc, #144]	; (22548 <MQTTSerialize_connect+0x140>)
   224b6:	47b8      	blx	r7
	if (options->willFlag)
   224b8:	7eeb      	ldrb	r3, [r5, #27]
   224ba:	2b00      	cmp	r3, #0
   224bc:	d119      	bne.n	224f2 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   224be:	b263      	sxtb	r3, r4
   224c0:	2b00      	cmp	r3, #0
   224c2:	db22      	blt.n	2250a <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   224c4:	0663      	lsls	r3, r4, #25
   224c6:	d427      	bmi.n	22518 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   224c8:	9b01      	ldr	r3, [sp, #4]
   224ca:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   224cc:	b003      	add	sp, #12
   224ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   224d0:	491e      	ldr	r1, [pc, #120]	; (2254c <MQTTSerialize_connect+0x144>)
   224d2:	a801      	add	r0, sp, #4
   224d4:	4b1a      	ldr	r3, [pc, #104]	; (22540 <MQTTSerialize_connect+0x138>)
   224d6:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   224d8:	2104      	movs	r1, #4
   224da:	a801      	add	r0, sp, #4
   224dc:	4b15      	ldr	r3, [pc, #84]	; (22534 <MQTTSerialize_connect+0x12c>)
   224de:	4798      	blx	r3
   224e0:	e7b8      	b.n	22454 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   224e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   224e4:	2b00      	cmp	r3, #0
   224e6:	d1d1      	bne.n	2248c <MQTTSerialize_connect+0x84>
   224e8:	e7d2      	b.n	22490 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   224ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   224ec:	2b00      	cmp	r3, #0
   224ee:	d1d2      	bne.n	22496 <MQTTSerialize_connect+0x8e>
   224f0:	e7d3      	b.n	2249a <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   224f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   224f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   224f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   224f8:	a801      	add	r0, sp, #4
   224fa:	4f13      	ldr	r7, [pc, #76]	; (22548 <MQTTSerialize_connect+0x140>)
   224fc:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   224fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22500:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   22502:	6bab      	ldr	r3, [r5, #56]	; 0x38
   22504:	a801      	add	r0, sp, #4
   22506:	47b8      	blx	r7
   22508:	e7d9      	b.n	224be <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   2250a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2250c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   2250e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   22510:	a801      	add	r0, sp, #4
   22512:	4f0d      	ldr	r7, [pc, #52]	; (22548 <MQTTSerialize_connect+0x140>)
   22514:	47b8      	blx	r7
   22516:	e7d5      	b.n	224c4 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   22518:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   2251a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2251c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2251e:	a801      	add	r0, sp, #4
   22520:	4c09      	ldr	r4, [pc, #36]	; (22548 <MQTTSerialize_connect+0x140>)
   22522:	47a0      	blx	r4
   22524:	e7d0      	b.n	224c8 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22526:	2002      	movs	r0, #2
   22528:	4240      	negs	r0, r0
	return rc;
   2252a:	e7cf      	b.n	224cc <MQTTSerialize_connect+0xc4>
   2252c:	00022381 	.word	0x00022381
   22530:	0002278d 	.word	0x0002278d
   22534:	000227ef 	.word	0x000227ef
   22538:	00022705 	.word	0x00022705
   2253c:	0002aa40 	.word	0x0002aa40
   22540:	00022825 	.word	0x00022825
   22544:	000227fb 	.word	0x000227fb
   22548:	0002285d 	.word	0x0002285d
   2254c:	0002aa38 	.word	0x0002aa38

00022550 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   22550:	b570      	push	{r4, r5, r6, lr}
   22552:	b082      	sub	sp, #8
   22554:	0005      	movs	r5, r0
   22556:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22558:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2255a:	a801      	add	r0, sp, #4
   2255c:	4b0e      	ldr	r3, [pc, #56]	; (22598 <MQTTDeserialize_connack+0x48>)
   2255e:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   22560:	23f0      	movs	r3, #240	; 0xf0
   22562:	4003      	ands	r3, r0
	int rc = 0;
   22564:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   22566:	2b20      	cmp	r3, #32
   22568:	d001      	beq.n	2256e <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   2256a:	b002      	add	sp, #8
   2256c:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2256e:	4669      	mov	r1, sp
   22570:	9801      	ldr	r0, [sp, #4]
   22572:	4b0a      	ldr	r3, [pc, #40]	; (2259c <MQTTDeserialize_connack+0x4c>)
   22574:	4798      	blx	r3
   22576:	9b01      	ldr	r3, [sp, #4]
   22578:	181b      	adds	r3, r3, r0
   2257a:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   2257c:	9b00      	ldr	r3, [sp, #0]
   2257e:	2b01      	cmp	r3, #1
   22580:	ddf3      	ble.n	2256a <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   22582:	a801      	add	r0, sp, #4
   22584:	4e04      	ldr	r6, [pc, #16]	; (22598 <MQTTDeserialize_connack+0x48>)
   22586:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   22588:	0600      	lsls	r0, r0, #24
   2258a:	0fc0      	lsrs	r0, r0, #31
   2258c:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   2258e:	a801      	add	r0, sp, #4
   22590:	47b0      	blx	r6
   22592:	7020      	strb	r0, [r4, #0]
	rc = 1;
   22594:	2001      	movs	r0, #1
   22596:	e7e8      	b.n	2256a <MQTTDeserialize_connack+0x1a>
   22598:	000227e3 	.word	0x000227e3
   2259c:	000227b5 	.word	0x000227b5

000225a0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   225a0:	b510      	push	{r4, lr}
   225a2:	b082      	sub	sp, #8
   225a4:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   225a6:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   225a8:	2901      	cmp	r1, #1
   225aa:	dd0f      	ble.n	225cc <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   225ac:	210f      	movs	r1, #15
   225ae:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   225b0:	0109      	lsls	r1, r1, #4
   225b2:	a801      	add	r0, sp, #4
   225b4:	4b07      	ldr	r3, [pc, #28]	; (225d4 <MQTTSerialize_zero+0x34>)
   225b6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   225b8:	2100      	movs	r1, #0
   225ba:	9801      	ldr	r0, [sp, #4]
   225bc:	4b06      	ldr	r3, [pc, #24]	; (225d8 <MQTTSerialize_zero+0x38>)
   225be:	4798      	blx	r3
   225c0:	9b01      	ldr	r3, [sp, #4]
   225c2:	469c      	mov	ip, r3
   225c4:	4460      	add	r0, ip
	rc = ptr - buf;
   225c6:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   225c8:	b002      	add	sp, #8
   225ca:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   225cc:	2002      	movs	r0, #2
   225ce:	4240      	negs	r0, r0
	return rc;
   225d0:	e7fa      	b.n	225c8 <MQTTSerialize_zero+0x28>
   225d2:	46c0      	nop			; (mov r8, r8)
   225d4:	000227ef 	.word	0x000227ef
   225d8:	00022705 	.word	0x00022705

000225dc <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   225dc:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   225de:	220e      	movs	r2, #14
   225e0:	4b01      	ldr	r3, [pc, #4]	; (225e8 <MQTTSerialize_disconnect+0xc>)
   225e2:	4798      	blx	r3
}
   225e4:	bd10      	pop	{r4, pc}
   225e6:	46c0      	nop			; (mov r8, r8)
   225e8:	000225a1 	.word	0x000225a1

000225ec <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   225ec:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   225ee:	220c      	movs	r2, #12
   225f0:	4b01      	ldr	r3, [pc, #4]	; (225f8 <MQTTSerialize_pingreq+0xc>)
   225f2:	4798      	blx	r3
}
   225f4:	bd10      	pop	{r4, pc}
   225f6:	46c0      	nop			; (mov r8, r8)
   225f8:	000225a1 	.word	0x000225a1

000225fc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   225fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   225fe:	b085      	sub	sp, #20
   22600:	0005      	movs	r5, r0
   22602:	000e      	movs	r6, r1
   22604:	0014      	movs	r4, r2
   22606:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2260a:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   2260c:	2300      	movs	r3, #0
   2260e:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22610:	a803      	add	r0, sp, #12
   22612:	4b1c      	ldr	r3, [pc, #112]	; (22684 <MQTTDeserialize_publish+0x88>)
   22614:	4798      	blx	r3
   22616:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   22618:	22f0      	movs	r2, #240	; 0xf0
   2261a:	4010      	ands	r0, r2
	int rc = 0;
   2261c:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   2261e:	2830      	cmp	r0, #48	; 0x30
   22620:	d002      	beq.n	22628 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22622:	0038      	movs	r0, r7
   22624:	b005      	add	sp, #20
   22626:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   22628:	071a      	lsls	r2, r3, #28
   2262a:	0fd2      	lsrs	r2, r2, #31
   2262c:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   2262e:	075a      	lsls	r2, r3, #29
   22630:	0f92      	lsrs	r2, r2, #30
   22632:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   22634:	07db      	lsls	r3, r3, #31
   22636:	0fdb      	lsrs	r3, r3, #31
   22638:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2263a:	a902      	add	r1, sp, #8
   2263c:	9803      	ldr	r0, [sp, #12]
   2263e:	4b12      	ldr	r3, [pc, #72]	; (22688 <MQTTDeserialize_publish+0x8c>)
   22640:	4798      	blx	r3
   22642:	0007      	movs	r7, r0
   22644:	9b03      	ldr	r3, [sp, #12]
   22646:	181c      	adds	r4, r3, r0
   22648:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   2264a:	9b02      	ldr	r3, [sp, #8]
   2264c:	469c      	mov	ip, r3
   2264e:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   22650:	0022      	movs	r2, r4
   22652:	a903      	add	r1, sp, #12
   22654:	980a      	ldr	r0, [sp, #40]	; 0x28
   22656:	4b0d      	ldr	r3, [pc, #52]	; (2268c <MQTTDeserialize_publish+0x90>)
   22658:	4798      	blx	r3
   2265a:	2800      	cmp	r0, #0
   2265c:	d0e1      	beq.n	22622 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2265e:	9b03      	ldr	r3, [sp, #12]
   22660:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   22662:	d4de      	bmi.n	22622 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   22664:	6833      	ldr	r3, [r6, #0]
   22666:	2b00      	cmp	r3, #0
   22668:	dd04      	ble.n	22674 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   2266a:	a803      	add	r0, sp, #12
   2266c:	4b08      	ldr	r3, [pc, #32]	; (22690 <MQTTDeserialize_publish+0x94>)
   2266e:	4798      	blx	r3
   22670:	9b01      	ldr	r3, [sp, #4]
   22672:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   22674:	9b03      	ldr	r3, [sp, #12]
   22676:	1ae4      	subs	r4, r4, r3
   22678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2267a:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   2267c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2267e:	6013      	str	r3, [r2, #0]
	rc = 1;
   22680:	2701      	movs	r7, #1
   22682:	e7ce      	b.n	22622 <MQTTDeserialize_publish+0x26>
   22684:	000227e3 	.word	0x000227e3
   22688:	000227b5 	.word	0x000227b5
   2268c:	000228a9 	.word	0x000228a9
   22690:	000227d1 	.word	0x000227d1

00022694 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   22694:	b570      	push	{r4, r5, r6, lr}
   22696:	b082      	sub	sp, #8
   22698:	0005      	movs	r5, r0
   2269a:	000e      	movs	r6, r1
   2269c:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   2269e:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   226a0:	a801      	add	r0, sp, #4
   226a2:	4b0c      	ldr	r3, [pc, #48]	; (226d4 <MQTTDeserialize_ack+0x40>)
   226a4:	4798      	blx	r3
	*dup = header.bits.dup;
   226a6:	0703      	lsls	r3, r0, #28
   226a8:	0fdb      	lsrs	r3, r3, #31
   226aa:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   226ac:	0600      	lsls	r0, r0, #24
   226ae:	0f00      	lsrs	r0, r0, #28
   226b0:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   226b2:	4669      	mov	r1, sp
   226b4:	9801      	ldr	r0, [sp, #4]
   226b6:	4b08      	ldr	r3, [pc, #32]	; (226d8 <MQTTDeserialize_ack+0x44>)
   226b8:	4798      	blx	r3
   226ba:	9b01      	ldr	r3, [sp, #4]
   226bc:	181b      	adds	r3, r3, r0
   226be:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   226c0:	9b00      	ldr	r3, [sp, #0]
   226c2:	2b01      	cmp	r3, #1
   226c4:	dd04      	ble.n	226d0 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   226c6:	a801      	add	r0, sp, #4
   226c8:	4b04      	ldr	r3, [pc, #16]	; (226dc <MQTTDeserialize_ack+0x48>)
   226ca:	4798      	blx	r3
   226cc:	8020      	strh	r0, [r4, #0]

	rc = 1;
   226ce:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   226d0:	b002      	add	sp, #8
   226d2:	bd70      	pop	{r4, r5, r6, pc}
   226d4:	000227e3 	.word	0x000227e3
   226d8:	000227b5 	.word	0x000227b5
   226dc:	000227d1 	.word	0x000227d1

000226e0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   226e0:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   226e2:	2900      	cmp	r1, #0
   226e4:	dd0a      	ble.n	226fc <bufchar+0x1c>
   226e6:	4b06      	ldr	r3, [pc, #24]	; (22700 <bufchar+0x20>)
   226e8:	681b      	ldr	r3, [r3, #0]
   226ea:	185d      	adds	r5, r3, r1
   226ec:	002c      	movs	r4, r5
		*c = *bufptr++;
   226ee:	781a      	ldrb	r2, [r3, #0]
   226f0:	7002      	strb	r2, [r0, #0]
   226f2:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   226f4:	42a3      	cmp	r3, r4
   226f6:	d1fa      	bne.n	226ee <bufchar+0xe>
   226f8:	4b01      	ldr	r3, [pc, #4]	; (22700 <bufchar+0x20>)
   226fa:	601d      	str	r5, [r3, #0]
	return count;
}
   226fc:	0008      	movs	r0, r1
   226fe:	bd30      	pop	{r4, r5, pc}
   22700:	2000412c 	.word	0x2000412c

00022704 <MQTTPacket_encode>:
{
   22704:	b5f0      	push	{r4, r5, r6, r7, lr}
   22706:	b083      	sub	sp, #12
   22708:	2500      	movs	r5, #0
		char d = length % 128;
   2270a:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   2270c:	2780      	movs	r7, #128	; 0x80
   2270e:	427f      	negs	r7, r7
   22710:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   22712:	17ca      	asrs	r2, r1, #31
   22714:	0e54      	lsrs	r4, r2, #25
   22716:	190b      	adds	r3, r1, r4
   22718:	4033      	ands	r3, r6
   2271a:	1b1b      	subs	r3, r3, r4
   2271c:	b2db      	uxtb	r3, r3
		length /= 128;
   2271e:	4032      	ands	r2, r6
   22720:	1851      	adds	r1, r2, r1
   22722:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   22724:	2900      	cmp	r1, #0
   22726:	dd03      	ble.n	22730 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   22728:	433b      	orrs	r3, r7
		buf[rc++] = d;
   2272a:	5543      	strb	r3, [r0, r5]
   2272c:	3501      	adds	r5, #1
   2272e:	e7ef      	b.n	22710 <MQTTPacket_encode+0xc>
   22730:	5543      	strb	r3, [r0, r5]
   22732:	9801      	ldr	r0, [sp, #4]
   22734:	3001      	adds	r0, #1
}
   22736:	b003      	add	sp, #12
   22738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002273a <MQTTPacket_decode>:
{
   2273a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2273c:	46ce      	mov	lr, r9
   2273e:	4647      	mov	r7, r8
   22740:	b580      	push	{r7, lr}
   22742:	b083      	sub	sp, #12
   22744:	4680      	mov	r8, r0
   22746:	000f      	movs	r7, r1
	*value = 0;
   22748:	2300      	movs	r3, #0
   2274a:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2274c:	2401      	movs	r4, #1
	int multiplier = 1;
   2274e:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   22750:	466b      	mov	r3, sp
   22752:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   22754:	237f      	movs	r3, #127	; 0x7f
   22756:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   22758:	2101      	movs	r1, #1
   2275a:	0028      	movs	r0, r5
   2275c:	47c0      	blx	r8
		if (rc != 1)
   2275e:	2801      	cmp	r0, #1
   22760:	d10e      	bne.n	22780 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   22762:	782b      	ldrb	r3, [r5, #0]
   22764:	464a      	mov	r2, r9
   22766:	401a      	ands	r2, r3
   22768:	4372      	muls	r2, r6
   2276a:	6839      	ldr	r1, [r7, #0]
   2276c:	468c      	mov	ip, r1
   2276e:	4462      	add	r2, ip
   22770:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   22772:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   22774:	b25b      	sxtb	r3, r3
   22776:	2b00      	cmp	r3, #0
   22778:	da02      	bge.n	22780 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2277a:	3401      	adds	r4, #1
   2277c:	2c05      	cmp	r4, #5
   2277e:	d1eb      	bne.n	22758 <MQTTPacket_decode+0x1e>
}
   22780:	0020      	movs	r0, r4
   22782:	b003      	add	sp, #12
   22784:	bc0c      	pop	{r2, r3}
   22786:	4690      	mov	r8, r2
   22788:	4699      	mov	r9, r3
   2278a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002278c <MQTTPacket_len>:
{
   2278c:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   2278e:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   22790:	3002      	adds	r0, #2
	if (rem_len < 128)
   22792:	2a7f      	cmp	r2, #127	; 0x7f
   22794:	dd07      	ble.n	227a6 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   22796:	4905      	ldr	r1, [pc, #20]	; (227ac <MQTTPacket_len+0x20>)
		rem_len += 2;
   22798:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   2279a:	428a      	cmp	r2, r1
   2279c:	dd03      	ble.n	227a6 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   2279e:	4904      	ldr	r1, [pc, #16]	; (227b0 <MQTTPacket_len+0x24>)
		rem_len += 4;
   227a0:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   227a2:	428a      	cmp	r2, r1
   227a4:	dd00      	ble.n	227a8 <MQTTPacket_len+0x1c>
}
   227a6:	4770      	bx	lr
		rem_len += 3;
   227a8:	1d18      	adds	r0, r3, #4
   227aa:	e7fc      	b.n	227a6 <MQTTPacket_len+0x1a>
   227ac:	00003fff 	.word	0x00003fff
   227b0:	001ffffe 	.word	0x001ffffe

000227b4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   227b4:	b510      	push	{r4, lr}
	bufptr = buf;
   227b6:	4b03      	ldr	r3, [pc, #12]	; (227c4 <MQTTPacket_decodeBuf+0x10>)
   227b8:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   227ba:	4803      	ldr	r0, [pc, #12]	; (227c8 <MQTTPacket_decodeBuf+0x14>)
   227bc:	4b03      	ldr	r3, [pc, #12]	; (227cc <MQTTPacket_decodeBuf+0x18>)
   227be:	4798      	blx	r3
}
   227c0:	bd10      	pop	{r4, pc}
   227c2:	46c0      	nop			; (mov r8, r8)
   227c4:	2000412c 	.word	0x2000412c
   227c8:	000226e1 	.word	0x000226e1
   227cc:	0002273b 	.word	0x0002273b

000227d0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   227d0:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   227d2:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   227d4:	7813      	ldrb	r3, [r2, #0]
   227d6:	021b      	lsls	r3, r3, #8
   227d8:	7850      	ldrb	r0, [r2, #1]
   227da:	1818      	adds	r0, r3, r0
	*pptr += 2;
   227dc:	3202      	adds	r2, #2
   227de:	600a      	str	r2, [r1, #0]
	return len;
}
   227e0:	4770      	bx	lr

000227e2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   227e2:	0002      	movs	r2, r0
	char c = **pptr;
   227e4:	6803      	ldr	r3, [r0, #0]
   227e6:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   227e8:	3301      	adds	r3, #1
   227ea:	6013      	str	r3, [r2, #0]
	return c;
}
   227ec:	4770      	bx	lr

000227ee <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   227ee:	6803      	ldr	r3, [r0, #0]
   227f0:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   227f2:	6803      	ldr	r3, [r0, #0]
   227f4:	3301      	adds	r3, #1
   227f6:	6003      	str	r3, [r0, #0]
}
   227f8:	4770      	bx	lr

000227fa <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   227fa:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   227fc:	17ca      	asrs	r2, r1, #31
   227fe:	23ff      	movs	r3, #255	; 0xff
   22800:	001c      	movs	r4, r3
   22802:	4014      	ands	r4, r2
   22804:	1864      	adds	r4, r4, r1
   22806:	1224      	asrs	r4, r4, #8
   22808:	6805      	ldr	r5, [r0, #0]
   2280a:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   2280c:	6804      	ldr	r4, [r0, #0]
   2280e:	1c65      	adds	r5, r4, #1
   22810:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   22812:	0e12      	lsrs	r2, r2, #24
   22814:	1889      	adds	r1, r1, r2
   22816:	400b      	ands	r3, r1
   22818:	1a9b      	subs	r3, r3, r2
   2281a:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   2281c:	6803      	ldr	r3, [r0, #0]
   2281e:	3301      	adds	r3, #1
   22820:	6003      	str	r3, [r0, #0]
}
   22822:	bd30      	pop	{r4, r5, pc}

00022824 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   22824:	b570      	push	{r4, r5, r6, lr}
   22826:	0004      	movs	r4, r0
   22828:	000e      	movs	r6, r1
	int len = strlen(string);
   2282a:	0008      	movs	r0, r1
   2282c:	4b08      	ldr	r3, [pc, #32]	; (22850 <writeCString+0x2c>)
   2282e:	4798      	blx	r3
   22830:	0005      	movs	r5, r0
	writeInt(pptr, len);
   22832:	0001      	movs	r1, r0
   22834:	0020      	movs	r0, r4
   22836:	4b07      	ldr	r3, [pc, #28]	; (22854 <writeCString+0x30>)
   22838:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2283a:	002a      	movs	r2, r5
   2283c:	0031      	movs	r1, r6
   2283e:	6820      	ldr	r0, [r4, #0]
   22840:	4b05      	ldr	r3, [pc, #20]	; (22858 <writeCString+0x34>)
   22842:	4798      	blx	r3
	*pptr += len;
   22844:	6823      	ldr	r3, [r4, #0]
   22846:	469c      	mov	ip, r3
   22848:	4465      	add	r5, ip
   2284a:	6025      	str	r5, [r4, #0]
}
   2284c:	bd70      	pop	{r4, r5, r6, pc}
   2284e:	46c0      	nop			; (mov r8, r8)
   22850:	00026667 	.word	0x00026667
   22854:	000227fb 	.word	0x000227fb
   22858:	0002621d 	.word	0x0002621d

0002285c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2285c:	b530      	push	{r4, r5, lr}
   2285e:	b085      	sub	sp, #20
   22860:	0005      	movs	r5, r0
   22862:	9101      	str	r1, [sp, #4]
   22864:	9303      	str	r3, [sp, #12]
   22866:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   22868:	dc06      	bgt.n	22878 <writeMQTTString+0x1c>
   2286a:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   2286c:	2900      	cmp	r1, #0
   2286e:	d010      	beq.n	22892 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   22870:	4b0a      	ldr	r3, [pc, #40]	; (2289c <writeMQTTString+0x40>)
   22872:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   22874:	b005      	add	sp, #20
   22876:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   22878:	0011      	movs	r1, r2
   2287a:	4b09      	ldr	r3, [pc, #36]	; (228a0 <writeMQTTString+0x44>)
   2287c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2287e:	0022      	movs	r2, r4
   22880:	9903      	ldr	r1, [sp, #12]
   22882:	6828      	ldr	r0, [r5, #0]
   22884:	4b07      	ldr	r3, [pc, #28]	; (228a4 <writeMQTTString+0x48>)
   22886:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   22888:	682b      	ldr	r3, [r5, #0]
   2288a:	469c      	mov	ip, r3
   2288c:	4464      	add	r4, ip
   2288e:	602c      	str	r4, [r5, #0]
   22890:	e7f0      	b.n	22874 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   22892:	2100      	movs	r1, #0
   22894:	4b02      	ldr	r3, [pc, #8]	; (228a0 <writeMQTTString+0x44>)
   22896:	4798      	blx	r3
}
   22898:	e7ec      	b.n	22874 <writeMQTTString+0x18>
   2289a:	46c0      	nop			; (mov r8, r8)
   2289c:	00022825 	.word	0x00022825
   228a0:	000227fb 	.word	0x000227fb
   228a4:	0002621d 	.word	0x0002621d

000228a8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   228a8:	b570      	push	{r4, r5, r6, lr}
   228aa:	0005      	movs	r5, r0
   228ac:	000c      	movs	r4, r1
   228ae:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   228b0:	680b      	ldr	r3, [r1, #0]
   228b2:	1ad3      	subs	r3, r2, r3
   228b4:	2b01      	cmp	r3, #1
   228b6:	dd12      	ble.n	228de <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   228b8:	0008      	movs	r0, r1
   228ba:	4b0a      	ldr	r3, [pc, #40]	; (228e4 <readMQTTLenString+0x3c>)
   228bc:	4798      	blx	r3
   228be:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   228c0:	6822      	ldr	r2, [r4, #0]
   228c2:	1811      	adds	r1, r2, r0
	int rc = 0;
   228c4:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   228c6:	428e      	cmp	r6, r1
   228c8:	d305      	bcc.n	228d6 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   228ca:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   228cc:	6823      	ldr	r3, [r4, #0]
   228ce:	469c      	mov	ip, r3
   228d0:	4460      	add	r0, ip
   228d2:	6020      	str	r0, [r4, #0]
			rc = 1;
   228d4:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   228d6:	2200      	movs	r2, #0
   228d8:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   228da:	0018      	movs	r0, r3
   228dc:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   228de:	2300      	movs	r3, #0
   228e0:	e7f9      	b.n	228d6 <readMQTTLenString+0x2e>
   228e2:	46c0      	nop			; (mov r8, r8)
   228e4:	000227d1 	.word	0x000227d1

000228e8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   228e8:	b500      	push	{lr}
   228ea:	b085      	sub	sp, #20
   228ec:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   228ee:	2800      	cmp	r0, #0
   228f0:	d003      	beq.n	228fa <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   228f2:	4b03      	ldr	r3, [pc, #12]	; (22900 <MQTTstrlen+0x18>)
   228f4:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   228f6:	b005      	add	sp, #20
   228f8:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   228fa:	9802      	ldr	r0, [sp, #8]
	return rc;
   228fc:	e7fb      	b.n	228f6 <MQTTstrlen+0xe>
   228fe:	46c0      	nop			; (mov r8, r8)
   22900:	00026667 	.word	0x00026667

00022904 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   22904:	b570      	push	{r4, r5, r6, lr}
   22906:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   22908:	6806      	ldr	r6, [r0, #0]
   2290a:	2e00      	cmp	r6, #0
   2290c:	d00b      	beq.n	22926 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   2290e:	0030      	movs	r0, r6
   22910:	4b0b      	ldr	r3, [pc, #44]	; (22940 <MQTTPacket_equals+0x3c>)
   22912:	4798      	blx	r3
   22914:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   22916:	0028      	movs	r0, r5
   22918:	4b09      	ldr	r3, [pc, #36]	; (22940 <MQTTPacket_equals+0x3c>)
   2291a:	4798      	blx	r3
   2291c:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2291e:	4284      	cmp	r4, r0
   22920:	d004      	beq.n	2292c <MQTTPacket_equals+0x28>
}
   22922:	0018      	movs	r0, r3
   22924:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   22926:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   22928:	6844      	ldr	r4, [r0, #4]
   2292a:	e7f4      	b.n	22916 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2292c:	0022      	movs	r2, r4
   2292e:	0029      	movs	r1, r5
   22930:	0030      	movs	r0, r6
   22932:	4b04      	ldr	r3, [pc, #16]	; (22944 <MQTTPacket_equals+0x40>)
   22934:	4798      	blx	r3
   22936:	4243      	negs	r3, r0
   22938:	4143      	adcs	r3, r0
   2293a:	b2db      	uxtb	r3, r3
   2293c:	e7f1      	b.n	22922 <MQTTPacket_equals+0x1e>
   2293e:	46c0      	nop			; (mov r8, r8)
   22940:	00026667 	.word	0x00026667
   22944:	00026675 	.word	0x00026675

00022948 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   22948:	b510      	push	{r4, lr}
   2294a:	b084      	sub	sp, #16
   2294c:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2294e:	0008      	movs	r0, r1
   22950:	0011      	movs	r1, r2
   22952:	001a      	movs	r2, r3
   22954:	4b05      	ldr	r3, [pc, #20]	; (2296c <MQTTSerialize_publishLength+0x24>)
   22956:	4798      	blx	r3
   22958:	3002      	adds	r0, #2
   2295a:	9b06      	ldr	r3, [sp, #24]
   2295c:	469c      	mov	ip, r3
   2295e:	4460      	add	r0, ip
	if (qos > 0)
   22960:	2c00      	cmp	r4, #0
   22962:	dd00      	ble.n	22966 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   22964:	3002      	adds	r0, #2
	return len;
}
   22966:	b004      	add	sp, #16
   22968:	bd10      	pop	{r4, pc}
   2296a:	46c0      	nop			; (mov r8, r8)
   2296c:	000228e9 	.word	0x000228e9

00022970 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   22970:	b5f0      	push	{r4, r5, r6, r7, lr}
   22972:	46de      	mov	lr, fp
   22974:	4657      	mov	r7, sl
   22976:	464e      	mov	r6, r9
   22978:	b5c0      	push	{r6, r7, lr}
   2297a:	b084      	sub	sp, #16
   2297c:	0007      	movs	r7, r0
   2297e:	468b      	mov	fp, r1
   22980:	4692      	mov	sl, r2
   22982:	001e      	movs	r6, r3
   22984:	ab0c      	add	r3, sp, #48	; 0x30
   22986:	781b      	ldrb	r3, [r3, #0]
   22988:	4699      	mov	r9, r3
   2298a:	ab0d      	add	r3, sp, #52	; 0x34
   2298c:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   2298e:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   22990:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22992:	9300      	str	r3, [sp, #0]
   22994:	990e      	ldr	r1, [sp, #56]	; 0x38
   22996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22998:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2299a:	0030      	movs	r0, r6
   2299c:	4d1f      	ldr	r5, [pc, #124]	; (22a1c <MQTTSerialize_publish+0xac>)
   2299e:	47a8      	blx	r5
   229a0:	0005      	movs	r5, r0
   229a2:	4b1f      	ldr	r3, [pc, #124]	; (22a20 <MQTTSerialize_publish+0xb0>)
   229a4:	4798      	blx	r3
   229a6:	4558      	cmp	r0, fp
   229a8:	dc34      	bgt.n	22a14 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   229aa:	2201      	movs	r2, #1
   229ac:	4653      	mov	r3, sl
   229ae:	4013      	ands	r3, r2
   229b0:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   229b2:	2103      	movs	r1, #3
   229b4:	4031      	ands	r1, r6
   229b6:	0048      	lsls	r0, r1, #1
   229b8:	2130      	movs	r1, #48	; 0x30
   229ba:	4319      	orrs	r1, r3
   229bc:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   229be:	464b      	mov	r3, r9
   229c0:	4013      	ands	r3, r2
   229c2:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   229c4:	4319      	orrs	r1, r3
   229c6:	a803      	add	r0, sp, #12
   229c8:	4b16      	ldr	r3, [pc, #88]	; (22a24 <MQTTSerialize_publish+0xb4>)
   229ca:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   229cc:	0029      	movs	r1, r5
   229ce:	9803      	ldr	r0, [sp, #12]
   229d0:	4b15      	ldr	r3, [pc, #84]	; (22a28 <MQTTSerialize_publish+0xb8>)
   229d2:	4798      	blx	r3
   229d4:	9b03      	ldr	r3, [sp, #12]
   229d6:	469c      	mov	ip, r3
   229d8:	4460      	add	r0, ip
   229da:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   229dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   229de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   229e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   229e2:	a803      	add	r0, sp, #12
   229e4:	4d11      	ldr	r5, [pc, #68]	; (22a2c <MQTTSerialize_publish+0xbc>)
   229e6:	47a8      	blx	r5

	if (qos > 0)
   229e8:	2e00      	cmp	r6, #0
   229ea:	dd03      	ble.n	229f4 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   229ec:	0021      	movs	r1, r4
   229ee:	a803      	add	r0, sp, #12
   229f0:	4b0f      	ldr	r3, [pc, #60]	; (22a30 <MQTTSerialize_publish+0xc0>)
   229f2:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   229f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   229f6:	9911      	ldr	r1, [sp, #68]	; 0x44
   229f8:	9803      	ldr	r0, [sp, #12]
   229fa:	4b0e      	ldr	r3, [pc, #56]	; (22a34 <MQTTSerialize_publish+0xc4>)
   229fc:	4798      	blx	r3
	ptr += payloadlen;
   229fe:	9b03      	ldr	r3, [sp, #12]
   22a00:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22a02:	4694      	mov	ip, r2
   22a04:	4463      	add	r3, ip

	rc = ptr - buf;
   22a06:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22a08:	b004      	add	sp, #16
   22a0a:	bc1c      	pop	{r2, r3, r4}
   22a0c:	4691      	mov	r9, r2
   22a0e:	469a      	mov	sl, r3
   22a10:	46a3      	mov	fp, r4
   22a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22a14:	2002      	movs	r0, #2
   22a16:	4240      	negs	r0, r0
	return rc;
   22a18:	e7f6      	b.n	22a08 <MQTTSerialize_publish+0x98>
   22a1a:	46c0      	nop			; (mov r8, r8)
   22a1c:	00022949 	.word	0x00022949
   22a20:	0002278d 	.word	0x0002278d
   22a24:	000227ef 	.word	0x000227ef
   22a28:	00022705 	.word	0x00022705
   22a2c:	0002285d 	.word	0x0002285d
   22a30:	000227fb 	.word	0x000227fb
   22a34:	0002621d 	.word	0x0002621d

00022a38 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   22a38:	b530      	push	{r4, r5, lr}
   22a3a:	b083      	sub	sp, #12
   22a3c:	0004      	movs	r4, r0
   22a3e:	a806      	add	r0, sp, #24
   22a40:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   22a42:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   22a44:	2903      	cmp	r1, #3
   22a46:	dd1e      	ble.n	22a86 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   22a48:	210f      	movs	r1, #15
   22a4a:	4011      	ands	r1, r2
	header.bits.dup = dup;
   22a4c:	2001      	movs	r0, #1
   22a4e:	4003      	ands	r3, r0
   22a50:	00db      	lsls	r3, r3, #3
   22a52:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   22a54:	3a06      	subs	r2, #6
   22a56:	4250      	negs	r0, r2
   22a58:	4142      	adcs	r2, r0
   22a5a:	0052      	lsls	r2, r2, #1
   22a5c:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   22a5e:	4311      	orrs	r1, r2
   22a60:	a801      	add	r0, sp, #4
   22a62:	4b0a      	ldr	r3, [pc, #40]	; (22a8c <MQTTSerialize_ack+0x54>)
   22a64:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   22a66:	2102      	movs	r1, #2
   22a68:	9801      	ldr	r0, [sp, #4]
   22a6a:	4b09      	ldr	r3, [pc, #36]	; (22a90 <MQTTSerialize_ack+0x58>)
   22a6c:	4798      	blx	r3
   22a6e:	9b01      	ldr	r3, [sp, #4]
   22a70:	469c      	mov	ip, r3
   22a72:	4460      	add	r0, ip
   22a74:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   22a76:	0029      	movs	r1, r5
   22a78:	a801      	add	r0, sp, #4
   22a7a:	4b06      	ldr	r3, [pc, #24]	; (22a94 <MQTTSerialize_ack+0x5c>)
   22a7c:	4798      	blx	r3
	rc = ptr - buf;
   22a7e:	9b01      	ldr	r3, [sp, #4]
   22a80:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22a82:	b003      	add	sp, #12
   22a84:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22a86:	2002      	movs	r0, #2
   22a88:	4240      	negs	r0, r0
	return rc;
   22a8a:	e7fa      	b.n	22a82 <MQTTSerialize_ack+0x4a>
   22a8c:	000227ef 	.word	0x000227ef
   22a90:	00022705 	.word	0x00022705
   22a94:	000227fb 	.word	0x000227fb

00022a98 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   22a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a9a:	46c6      	mov	lr, r8
   22a9c:	b500      	push	{lr}
   22a9e:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   22aa0:	dd12      	ble.n	22ac8 <MQTTSerialize_subscribeLength+0x30>
   22aa2:	000c      	movs	r4, r1
   22aa4:	2602      	movs	r6, #2
   22aa6:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   22aa8:	4b08      	ldr	r3, [pc, #32]	; (22acc <MQTTSerialize_subscribeLength+0x34>)
   22aaa:	4698      	mov	r8, r3
   22aac:	6820      	ldr	r0, [r4, #0]
   22aae:	6861      	ldr	r1, [r4, #4]
   22ab0:	68a2      	ldr	r2, [r4, #8]
   22ab2:	47c0      	blx	r8
   22ab4:	3003      	adds	r0, #3
   22ab6:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   22ab8:	3501      	adds	r5, #1
   22aba:	340c      	adds	r4, #12
   22abc:	42af      	cmp	r7, r5
   22abe:	d1f5      	bne.n	22aac <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   22ac0:	0030      	movs	r0, r6
   22ac2:	bc04      	pop	{r2}
   22ac4:	4690      	mov	r8, r2
   22ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   22ac8:	2602      	movs	r6, #2
	return len;
   22aca:	e7f9      	b.n	22ac0 <MQTTSerialize_subscribeLength+0x28>
   22acc:	000228e9 	.word	0x000228e9

00022ad0 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   22ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ad2:	46d6      	mov	lr, sl
   22ad4:	464f      	mov	r7, r9
   22ad6:	4646      	mov	r6, r8
   22ad8:	b5c0      	push	{r6, r7, lr}
   22ada:	b084      	sub	sp, #16
   22adc:	4682      	mov	sl, r0
   22ade:	000e      	movs	r6, r1
   22ae0:	0015      	movs	r5, r2
   22ae2:	9301      	str	r3, [sp, #4]
   22ae4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   22ae6:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   22ae8:	990d      	ldr	r1, [sp, #52]	; 0x34
   22aea:	0038      	movs	r0, r7
   22aec:	4b1f      	ldr	r3, [pc, #124]	; (22b6c <MQTTSerialize_subscribe+0x9c>)
   22aee:	4798      	blx	r3
   22af0:	0004      	movs	r4, r0
   22af2:	4b1f      	ldr	r3, [pc, #124]	; (22b70 <MQTTSerialize_subscribe+0xa0>)
   22af4:	4798      	blx	r3
   22af6:	42b0      	cmp	r0, r6
   22af8:	dc34      	bgt.n	22b64 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   22afa:	2101      	movs	r1, #1
   22afc:	4029      	ands	r1, r5
   22afe:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   22b00:	2180      	movs	r1, #128	; 0x80
   22b02:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22b04:	2302      	movs	r3, #2
   22b06:	4319      	orrs	r1, r3
   22b08:	a803      	add	r0, sp, #12
   22b0a:	4b1a      	ldr	r3, [pc, #104]	; (22b74 <MQTTSerialize_subscribe+0xa4>)
   22b0c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   22b0e:	0021      	movs	r1, r4
   22b10:	9803      	ldr	r0, [sp, #12]
   22b12:	4b19      	ldr	r3, [pc, #100]	; (22b78 <MQTTSerialize_subscribe+0xa8>)
   22b14:	4798      	blx	r3
   22b16:	9a03      	ldr	r2, [sp, #12]
   22b18:	4694      	mov	ip, r2
   22b1a:	4460      	add	r0, ip
   22b1c:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   22b1e:	9901      	ldr	r1, [sp, #4]
   22b20:	a803      	add	r0, sp, #12
   22b22:	4b16      	ldr	r3, [pc, #88]	; (22b7c <MQTTSerialize_subscribe+0xac>)
   22b24:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   22b26:	2f00      	cmp	r7, #0
   22b28:	dd13      	ble.n	22b52 <MQTTSerialize_subscribe+0x82>
   22b2a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   22b2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   22b2e:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   22b30:	4b13      	ldr	r3, [pc, #76]	; (22b80 <MQTTSerialize_subscribe+0xb0>)
   22b32:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   22b34:	4b0f      	ldr	r3, [pc, #60]	; (22b74 <MQTTSerialize_subscribe+0xa4>)
   22b36:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   22b38:	6821      	ldr	r1, [r4, #0]
   22b3a:	6862      	ldr	r2, [r4, #4]
   22b3c:	68a3      	ldr	r3, [r4, #8]
   22b3e:	a803      	add	r0, sp, #12
   22b40:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   22b42:	ce02      	ldmia	r6!, {r1}
   22b44:	b2c9      	uxtb	r1, r1
   22b46:	a803      	add	r0, sp, #12
   22b48:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   22b4a:	3501      	adds	r5, #1
   22b4c:	340c      	adds	r4, #12
   22b4e:	42af      	cmp	r7, r5
   22b50:	d1f2      	bne.n	22b38 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   22b52:	9b03      	ldr	r3, [sp, #12]
   22b54:	4652      	mov	r2, sl
   22b56:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22b58:	b004      	add	sp, #16
   22b5a:	bc1c      	pop	{r2, r3, r4}
   22b5c:	4690      	mov	r8, r2
   22b5e:	4699      	mov	r9, r3
   22b60:	46a2      	mov	sl, r4
   22b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22b64:	2002      	movs	r0, #2
   22b66:	4240      	negs	r0, r0
	return rc;
   22b68:	e7f6      	b.n	22b58 <MQTTSerialize_subscribe+0x88>
   22b6a:	46c0      	nop			; (mov r8, r8)
   22b6c:	00022a99 	.word	0x00022a99
   22b70:	0002278d 	.word	0x0002278d
   22b74:	000227ef 	.word	0x000227ef
   22b78:	00022705 	.word	0x00022705
   22b7c:	000227fb 	.word	0x000227fb
   22b80:	0002285d 	.word	0x0002285d

00022b84 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   22b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b86:	46ce      	mov	lr, r9
   22b88:	4647      	mov	r7, r8
   22b8a:	b580      	push	{r7, lr}
   22b8c:	b083      	sub	sp, #12
   22b8e:	0004      	movs	r4, r0
   22b90:	000e      	movs	r6, r1
   22b92:	0015      	movs	r5, r2
   22b94:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22b98:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22b9a:	a801      	add	r0, sp, #4
   22b9c:	4b1e      	ldr	r3, [pc, #120]	; (22c18 <MQTTDeserialize_suback+0x94>)
   22b9e:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   22ba0:	23f0      	movs	r3, #240	; 0xf0
   22ba2:	4003      	ands	r3, r0
	int rc = 0;
   22ba4:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   22ba6:	2b90      	cmp	r3, #144	; 0x90
   22ba8:	d004      	beq.n	22bb4 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22baa:	b003      	add	sp, #12
   22bac:	bc0c      	pop	{r2, r3}
   22bae:	4690      	mov	r8, r2
   22bb0:	4699      	mov	r9, r3
   22bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   22bb4:	4669      	mov	r1, sp
   22bb6:	9801      	ldr	r0, [sp, #4]
   22bb8:	4b18      	ldr	r3, [pc, #96]	; (22c1c <MQTTDeserialize_suback+0x98>)
   22bba:	4798      	blx	r3
   22bbc:	9b01      	ldr	r3, [sp, #4]
   22bbe:	181b      	adds	r3, r3, r0
   22bc0:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   22bc2:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   22bc4:	2a01      	cmp	r2, #1
   22bc6:	ddf0      	ble.n	22baa <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   22bc8:	4698      	mov	r8, r3
   22bca:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   22bcc:	a801      	add	r0, sp, #4
   22bce:	4b14      	ldr	r3, [pc, #80]	; (22c20 <MQTTDeserialize_suback+0x9c>)
   22bd0:	4798      	blx	r3
   22bd2:	8020      	strh	r0, [r4, #0]
	*count = 0;
   22bd4:	2300      	movs	r3, #0
   22bd6:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   22bd8:	9b01      	ldr	r3, [sp, #4]
   22bda:	4598      	cmp	r8, r3
   22bdc:	d916      	bls.n	22c0c <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   22bde:	2e00      	cmp	r6, #0
   22be0:	db16      	blt.n	22c10 <MQTTDeserialize_suback+0x8c>
   22be2:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   22be4:	4a0c      	ldr	r2, [pc, #48]	; (22c18 <MQTTDeserialize_suback+0x94>)
   22be6:	4691      	mov	r9, r2
   22be8:	1c5a      	adds	r2, r3, #1
   22bea:	602a      	str	r2, [r5, #0]
   22bec:	009b      	lsls	r3, r3, #2
   22bee:	18fc      	adds	r4, r7, r3
   22bf0:	a801      	add	r0, sp, #4
   22bf2:	47c8      	blx	r9
   22bf4:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   22bf6:	9b01      	ldr	r3, [sp, #4]
   22bf8:	4598      	cmp	r8, r3
   22bfa:	d905      	bls.n	22c08 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   22bfc:	682b      	ldr	r3, [r5, #0]
   22bfe:	42b3      	cmp	r3, r6
   22c00:	ddf2      	ble.n	22be8 <MQTTDeserialize_suback+0x64>
			rc = -1;
   22c02:	2001      	movs	r0, #1
   22c04:	4240      	negs	r0, r0
	return rc;
   22c06:	e7d0      	b.n	22baa <MQTTDeserialize_suback+0x26>
	rc = 1;
   22c08:	2001      	movs	r0, #1
   22c0a:	e7ce      	b.n	22baa <MQTTDeserialize_suback+0x26>
   22c0c:	2001      	movs	r0, #1
   22c0e:	e7cc      	b.n	22baa <MQTTDeserialize_suback+0x26>
			rc = -1;
   22c10:	2001      	movs	r0, #1
   22c12:	4240      	negs	r0, r0
   22c14:	e7c9      	b.n	22baa <MQTTDeserialize_suback+0x26>
   22c16:	46c0      	nop			; (mov r8, r8)
   22c18:	000227e3 	.word	0x000227e3
   22c1c:	000227b5 	.word	0x000227b5
   22c20:	000227d1 	.word	0x000227d1

00022c24 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   22c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c26:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   22c28:	2041      	movs	r0, #65	; 0x41
   22c2a:	5c23      	ldrb	r3, [r4, r0]
   22c2c:	2501      	movs	r5, #1
   22c2e:	432b      	orrs	r3, r5
   22c30:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   22c32:	b292      	uxth	r2, r2
   22c34:	2000      	movs	r0, #0
   22c36:	5620      	ldrsb	r0, [r4, r0]
   22c38:	2300      	movs	r3, #0
   22c3a:	4d12      	ldr	r5, [pc, #72]	; (22c84 <_http_client_send_wait+0x60>)
   22c3c:	47a8      	blx	r5
   22c3e:	2800      	cmp	r0, #0
   22c40:	db16      	blt.n	22c70 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c42:	2341      	movs	r3, #65	; 0x41
   22c44:	5ce3      	ldrb	r3, [r4, r3]
   22c46:	07db      	lsls	r3, r3, #31
   22c48:	d518      	bpl.n	22c7c <_http_client_send_wait+0x58>
   22c4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   22c4c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c4e:	2b02      	cmp	r3, #2
   22c50:	d917      	bls.n	22c82 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   22c52:	4f0d      	ldr	r7, [pc, #52]	; (22c88 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   22c54:	4e0d      	ldr	r6, [pc, #52]	; (22c8c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c56:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   22c58:	2000      	movs	r0, #0
   22c5a:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   22c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   22c5e:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c60:	5d63      	ldrb	r3, [r4, r5]
   22c62:	07db      	lsls	r3, r3, #31
   22c64:	d50c      	bpl.n	22c80 <_http_client_send_wait+0x5c>
   22c66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22c68:	2b02      	cmp	r3, #2
   22c6a:	d8f5      	bhi.n	22c58 <_http_client_send_wait+0x34>
	return 0;
   22c6c:	2000      	movs	r0, #0
   22c6e:	e008      	b.n	22c82 <_http_client_send_wait+0x5e>
		module->sending = 0;
   22c70:	2241      	movs	r2, #65	; 0x41
   22c72:	5ca3      	ldrb	r3, [r4, r2]
   22c74:	2101      	movs	r1, #1
   22c76:	438b      	bics	r3, r1
   22c78:	54a3      	strb	r3, [r4, r2]
		return result;
   22c7a:	e002      	b.n	22c82 <_http_client_send_wait+0x5e>
	return 0;
   22c7c:	2000      	movs	r0, #0
   22c7e:	e000      	b.n	22c82 <_http_client_send_wait+0x5e>
   22c80:	2000      	movs	r0, #0
}
   22c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c84:	0001d1b1 	.word	0x0001d1b1
   22c88:	0001b1c9 	.word	0x0001b1c9
   22c8c:	00023db9 	.word	0x00023db9

00022c90 <http_client_get_config_defaults>:
	config->port = 80;
   22c90:	2350      	movs	r3, #80	; 0x50
   22c92:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   22c94:	2300      	movs	r3, #0
   22c96:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   22c98:	4a05      	ldr	r2, [pc, #20]	; (22cb0 <http_client_get_config_defaults+0x20>)
   22c9a:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   22c9c:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   22c9e:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   22ca0:	3301      	adds	r3, #1
   22ca2:	33ff      	adds	r3, #255	; 0xff
   22ca4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   22ca6:	3bae      	subs	r3, #174	; 0xae
   22ca8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   22caa:	4b02      	ldr	r3, [pc, #8]	; (22cb4 <http_client_get_config_defaults+0x24>)
   22cac:	6183      	str	r3, [r0, #24]
}
   22cae:	4770      	bx	lr
   22cb0:	00004e20 	.word	0x00004e20
   22cb4:	0002ac10 	.word	0x0002ac10

00022cb8 <http_client_init>:
{
   22cb8:	b570      	push	{r4, r5, r6, lr}
   22cba:	0004      	movs	r4, r0
   22cbc:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   22cbe:	2800      	cmp	r0, #0
   22cc0:	d038      	beq.n	22d34 <http_client_init+0x7c>
   22cc2:	2900      	cmp	r1, #0
   22cc4:	d039      	beq.n	22d3a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   22cc6:	690b      	ldr	r3, [r1, #16]
   22cc8:	2b00      	cmp	r3, #0
   22cca:	d039      	beq.n	22d40 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   22ccc:	684b      	ldr	r3, [r1, #4]
   22cce:	2b00      	cmp	r3, #0
   22cd0:	d039      	beq.n	22d46 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   22cd2:	694b      	ldr	r3, [r1, #20]
   22cd4:	2b51      	cmp	r3, #81	; 0x51
   22cd6:	d939      	bls.n	22d4c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   22cd8:	22e8      	movs	r2, #232	; 0xe8
   22cda:	2100      	movs	r1, #0
   22cdc:	4b1e      	ldr	r3, [pc, #120]	; (22d58 <http_client_init+0xa0>)
   22cde:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   22ce0:	0020      	movs	r0, r4
   22ce2:	3050      	adds	r0, #80	; 0x50
   22ce4:	221c      	movs	r2, #28
   22ce6:	0029      	movs	r1, r5
   22ce8:	4b1c      	ldr	r3, [pc, #112]	; (22d5c <http_client_init+0xa4>)
   22cea:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   22cec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22cee:	2b00      	cmp	r3, #0
   22cf0:	d008      	beq.n	22d04 <http_client_init+0x4c>
	if (config->timeout > 0) {
   22cf2:	892b      	ldrh	r3, [r5, #8]
   22cf4:	2b00      	cmp	r3, #0
   22cf6:	d111      	bne.n	22d1c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   22cf8:	2300      	movs	r3, #0
   22cfa:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22cfc:	22d8      	movs	r2, #216	; 0xd8
   22cfe:	50a3      	str	r3, [r4, r2]
	return 0;
   22d00:	2000      	movs	r0, #0
}
   22d02:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   22d04:	6928      	ldr	r0, [r5, #16]
   22d06:	4b16      	ldr	r3, [pc, #88]	; (22d60 <http_client_init+0xa8>)
   22d08:	4798      	blx	r3
   22d0a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   22d0c:	2800      	cmp	r0, #0
   22d0e:	d020      	beq.n	22d52 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   22d10:	2241      	movs	r2, #65	; 0x41
   22d12:	5ca3      	ldrb	r3, [r4, r2]
   22d14:	2104      	movs	r1, #4
   22d16:	430b      	orrs	r3, r1
   22d18:	54a3      	strb	r3, [r4, r2]
   22d1a:	e7ea      	b.n	22cf2 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   22d1c:	6868      	ldr	r0, [r5, #4]
   22d1e:	2300      	movs	r3, #0
   22d20:	0022      	movs	r2, r4
   22d22:	4910      	ldr	r1, [pc, #64]	; (22d64 <http_client_init+0xac>)
   22d24:	4d10      	ldr	r5, [pc, #64]	; (22d68 <http_client_init+0xb0>)
   22d26:	47a8      	blx	r5
   22d28:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   22d2a:	2800      	cmp	r0, #0
   22d2c:	dae4      	bge.n	22cf8 <http_client_init+0x40>
			return -ENOSPC;
   22d2e:	201c      	movs	r0, #28
   22d30:	4240      	negs	r0, r0
   22d32:	e7e6      	b.n	22d02 <http_client_init+0x4a>
		return -EINVAL;
   22d34:	2016      	movs	r0, #22
   22d36:	4240      	negs	r0, r0
   22d38:	e7e3      	b.n	22d02 <http_client_init+0x4a>
   22d3a:	2016      	movs	r0, #22
   22d3c:	4240      	negs	r0, r0
   22d3e:	e7e0      	b.n	22d02 <http_client_init+0x4a>
		return -EINVAL;
   22d40:	2016      	movs	r0, #22
   22d42:	4240      	negs	r0, r0
   22d44:	e7dd      	b.n	22d02 <http_client_init+0x4a>
		return -EINVAL;
   22d46:	2016      	movs	r0, #22
   22d48:	4240      	negs	r0, r0
   22d4a:	e7da      	b.n	22d02 <http_client_init+0x4a>
		return -EINVAL;
   22d4c:	2016      	movs	r0, #22
   22d4e:	4240      	negs	r0, r0
   22d50:	e7d7      	b.n	22d02 <http_client_init+0x4a>
			return -ENOMEM;
   22d52:	200c      	movs	r0, #12
   22d54:	4240      	negs	r0, r0
   22d56:	e7d4      	b.n	22d02 <http_client_init+0x4a>
   22d58:	00026253 	.word	0x00026253
   22d5c:	0002621d 	.word	0x0002621d
   22d60:	000261f5 	.word	0x000261f5
   22d64:	00022e7d 	.word	0x00022e7d
   22d68:	00023d45 	.word	0x00023d45

00022d6c <http_client_register_callback>:
	if (module == NULL) {
   22d6c:	2800      	cmp	r0, #0
   22d6e:	d002      	beq.n	22d76 <http_client_register_callback+0xa>
	module->cb = callback;
   22d70:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   22d72:	2000      	movs	r0, #0
}
   22d74:	4770      	bx	lr
		return -EINVAL;
   22d76:	2016      	movs	r0, #22
   22d78:	4240      	negs	r0, r0
   22d7a:	e7fb      	b.n	22d74 <http_client_register_callback+0x8>

00022d7c <_http_client_clear_conn>:
{
   22d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d7e:	b085      	sub	sp, #20
   22d80:	0004      	movs	r4, r0
   22d82:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   22d84:	23c0      	movs	r3, #192	; 0xc0
   22d86:	58c3      	ldr	r3, [r0, r3]
   22d88:	2b00      	cmp	r3, #0
   22d8a:	d002      	beq.n	22d92 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   22d8c:	22c4      	movs	r2, #196	; 0xc4
   22d8e:	5880      	ldr	r0, [r0, r2]
   22d90:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   22d92:	0020      	movs	r0, r4
   22d94:	30b0      	adds	r0, #176	; 0xb0
   22d96:	2218      	movs	r2, #24
   22d98:	2100      	movs	r1, #0
   22d9a:	4b17      	ldr	r3, [pc, #92]	; (22df8 <_http_client_clear_conn+0x7c>)
   22d9c:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   22d9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22da0:	2b00      	cmp	r3, #0
   22da2:	d124      	bne.n	22dee <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   22da4:	2300      	movs	r3, #0
   22da6:	56e3      	ldrsb	r3, [r4, r3]
   22da8:	009b      	lsls	r3, r3, #2
   22daa:	2500      	movs	r5, #0
   22dac:	4a13      	ldr	r2, [pc, #76]	; (22dfc <_http_client_clear_conn+0x80>)
   22dae:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   22db0:	0020      	movs	r0, r4
   22db2:	306c      	adds	r0, #108	; 0x6c
   22db4:	226c      	movs	r2, #108	; 0x6c
   22db6:	2100      	movs	r1, #0
   22db8:	4f0f      	ldr	r7, [pc, #60]	; (22df8 <_http_client_clear_conn+0x7c>)
   22dba:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   22dbc:	0020      	movs	r0, r4
   22dbe:	30d8      	adds	r0, #216	; 0xd8
   22dc0:	2210      	movs	r2, #16
   22dc2:	2100      	movs	r1, #0
   22dc4:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   22dc6:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22dc8:	23d8      	movs	r3, #216	; 0xd8
   22dca:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   22dcc:	2241      	movs	r2, #65	; 0x41
   22dce:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   22dd0:	2101      	movs	r1, #1
   22dd2:	438b      	bics	r3, r1
   22dd4:	3101      	adds	r1, #1
   22dd6:	438b      	bics	r3, r1
   22dd8:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   22dda:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   22ddc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22dde:	2b00      	cmp	r3, #0
   22de0:	d003      	beq.n	22dea <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   22de2:	aa01      	add	r2, sp, #4
   22de4:	3102      	adds	r1, #2
   22de6:	0020      	movs	r0, r4
   22de8:	4798      	blx	r3
}
   22dea:	b005      	add	sp, #20
   22dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   22dee:	2000      	movs	r0, #0
   22df0:	5620      	ldrsb	r0, [r4, r0]
   22df2:	4b03      	ldr	r3, [pc, #12]	; (22e00 <_http_client_clear_conn+0x84>)
   22df4:	4798      	blx	r3
   22df6:	e7d5      	b.n	22da4 <_http_client_clear_conn+0x28>
   22df8:	00026253 	.word	0x00026253
   22dfc:	20004130 	.word	0x20004130
   22e00:	0001d2dd 	.word	0x0001d2dd

00022e04 <http_client_socket_resolve_handler>:
{
   22e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e06:	b087      	sub	sp, #28
   22e08:	9000      	str	r0, [sp, #0]
   22e0a:	9101      	str	r1, [sp, #4]
   22e0c:	4c17      	ldr	r4, [pc, #92]	; (22e6c <http_client_socket_resolve_handler+0x68>)
   22e0e:	0026      	movs	r6, r4
   22e10:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22e12:	4f17      	ldr	r7, [pc, #92]	; (22e70 <http_client_socket_resolve_handler+0x6c>)
   22e14:	e015      	b.n	22e42 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   22e16:	2302      	movs	r3, #2
   22e18:	aa02      	add	r2, sp, #8
   22e1a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   22e1c:	334e      	adds	r3, #78	; 0x4e
   22e1e:	5aeb      	ldrh	r3, [r5, r3]
   22e20:	021a      	lsls	r2, r3, #8
   22e22:	0a1b      	lsrs	r3, r3, #8
   22e24:	4313      	orrs	r3, r2
   22e26:	aa02      	add	r2, sp, #8
   22e28:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   22e2a:	9b01      	ldr	r3, [sp, #4]
   22e2c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   22e2e:	2000      	movs	r0, #0
   22e30:	5628      	ldrsb	r0, [r5, r0]
   22e32:	2210      	movs	r2, #16
   22e34:	a902      	add	r1, sp, #8
   22e36:	4b0f      	ldr	r3, [pc, #60]	; (22e74 <http_client_socket_resolve_handler+0x70>)
   22e38:	4798      	blx	r3
				return;
   22e3a:	e015      	b.n	22e68 <http_client_socket_resolve_handler+0x64>
   22e3c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   22e3e:	42b4      	cmp	r4, r6
   22e40:	d012      	beq.n	22e68 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   22e42:	6825      	ldr	r5, [r4, #0]
   22e44:	2d00      	cmp	r5, #0
   22e46:	d0f9      	beq.n	22e3c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22e48:	1c69      	adds	r1, r5, #1
   22e4a:	9800      	ldr	r0, [sp, #0]
   22e4c:	47b8      	blx	r7
   22e4e:	2800      	cmp	r0, #0
   22e50:	d1f4      	bne.n	22e3c <http_client_socket_resolve_handler+0x38>
   22e52:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   22e54:	2b01      	cmp	r3, #1
   22e56:	d1f1      	bne.n	22e3c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   22e58:	9b01      	ldr	r3, [sp, #4]
   22e5a:	2b00      	cmp	r3, #0
   22e5c:	d1db      	bne.n	22e16 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   22e5e:	2176      	movs	r1, #118	; 0x76
   22e60:	4249      	negs	r1, r1
   22e62:	0028      	movs	r0, r5
   22e64:	4b04      	ldr	r3, [pc, #16]	; (22e78 <http_client_socket_resolve_handler+0x74>)
   22e66:	4798      	blx	r3
}
   22e68:	b007      	add	sp, #28
   22e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22e6c:	20004130 	.word	0x20004130
   22e70:	00026607 	.word	0x00026607
   22e74:	0001d121 	.word	0x0001d121
   22e78:	00022d7d 	.word	0x00022d7d

00022e7c <http_client_timer_callback>:
{
   22e7c:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   22e7e:	2a00      	cmp	r2, #0
   22e80:	d004      	beq.n	22e8c <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   22e82:	213e      	movs	r1, #62	; 0x3e
   22e84:	4249      	negs	r1, r1
   22e86:	0010      	movs	r0, r2
   22e88:	4b01      	ldr	r3, [pc, #4]	; (22e90 <http_client_timer_callback+0x14>)
   22e8a:	4798      	blx	r3
}
   22e8c:	bd10      	pop	{r4, pc}
   22e8e:	46c0      	nop			; (mov r8, r8)
   22e90:	00022d7d 	.word	0x00022d7d

00022e94 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   22e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e96:	46de      	mov	lr, fp
   22e98:	4657      	mov	r7, sl
   22e9a:	b580      	push	{r7, lr}
   22e9c:	b095      	sub	sp, #84	; 0x54
   22e9e:	af02      	add	r7, sp, #8
   22ea0:	0004      	movs	r4, r0
   22ea2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   22ea4:	2310      	movs	r3, #16
   22ea6:	2208      	movs	r2, #8
   22ea8:	18ba      	adds	r2, r7, r2
   22eaa:	18d2      	adds	r2, r2, r3
   22eac:	4bb1      	ldr	r3, [pc, #708]	; (23174 <_http_client_request+0x2e0>)
   22eae:	cb23      	ldmia	r3!, {r0, r1, r5}
   22eb0:	c223      	stmia	r2!, {r0, r1, r5}
   22eb2:	681b      	ldr	r3, [r3, #0]
   22eb4:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   22eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   22eb8:	1dd3      	adds	r3, r2, #7
   22eba:	08db      	lsrs	r3, r3, #3
   22ebc:	00db      	lsls	r3, r3, #3
   22ebe:	4669      	mov	r1, sp
   22ec0:	1acb      	subs	r3, r1, r3
   22ec2:	469d      	mov	sp, r3
   22ec4:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   22ec6:	2c00      	cmp	r4, #0
   22ec8:	d100      	bne.n	22ecc <_http_client_request+0x38>
   22eca:	e1f0      	b.n	232ae <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   22ecc:	2341      	movs	r3, #65	; 0x41
   22ece:	5ce3      	ldrb	r3, [r4, r3]
   22ed0:	07db      	lsls	r3, r3, #31
   22ed2:	d500      	bpl.n	22ed6 <_http_client_request+0x42>
   22ed4:	e1eb      	b.n	232ae <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   22ed6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22ed8:	2b03      	cmp	r3, #3
   22eda:	d004      	beq.n	22ee6 <_http_client_request+0x52>
   22edc:	2b04      	cmp	r3, #4
   22ede:	d100      	bne.n	22ee2 <_http_client_request+0x4e>
   22ee0:	e120      	b.n	23124 <_http_client_request+0x290>
   22ee2:	46dd      	mov	sp, fp
   22ee4:	e1e4      	b.n	232b0 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   22ee6:	2300      	movs	r3, #0
   22ee8:	21cc      	movs	r1, #204	; 0xcc
   22eea:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   22eec:	3104      	adds	r1, #4
   22eee:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   22ef0:	9400      	str	r4, [sp, #0]
   22ef2:	4ba1      	ldr	r3, [pc, #644]	; (23178 <_http_client_request+0x2e4>)
   22ef4:	0031      	movs	r1, r6
   22ef6:	202c      	movs	r0, #44	; 0x2c
   22ef8:	2508      	movs	r5, #8
   22efa:	46ac      	mov	ip, r5
   22efc:	44bc      	add	ip, r7
   22efe:	4460      	add	r0, ip
   22f00:	4d9e      	ldr	r5, [pc, #632]	; (2317c <_http_client_request+0x2e8>)
   22f02:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   22f04:	23c8      	movs	r3, #200	; 0xc8
   22f06:	5ce3      	ldrb	r3, [r4, r3]
   22f08:	2b01      	cmp	r3, #1
   22f0a:	d100      	bne.n	22f0e <_http_client_request+0x7a>
   22f0c:	e0a9      	b.n	23062 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   22f0e:	2b02      	cmp	r3, #2
   22f10:	d100      	bne.n	22f14 <_http_client_request+0x80>
   22f12:	e0af      	b.n	23074 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   22f14:	2b03      	cmp	r3, #3
   22f16:	d100      	bne.n	22f1a <_http_client_request+0x86>
   22f18:	e0b5      	b.n	23086 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   22f1a:	2b04      	cmp	r3, #4
   22f1c:	d100      	bne.n	22f20 <_http_client_request+0x8c>
   22f1e:	e0bb      	b.n	23098 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   22f20:	2b05      	cmp	r3, #5
   22f22:	d100      	bne.n	22f26 <_http_client_request+0x92>
   22f24:	e0c1      	b.n	230aa <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   22f26:	2b06      	cmp	r3, #6
   22f28:	d100      	bne.n	22f2c <_http_client_request+0x98>
   22f2a:	e0c7      	b.n	230bc <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   22f2c:	0025      	movs	r5, r4
   22f2e:	3570      	adds	r5, #112	; 0x70
   22f30:	0028      	movs	r0, r5
   22f32:	4b93      	ldr	r3, [pc, #588]	; (23180 <_http_client_request+0x2ec>)
   22f34:	469a      	mov	sl, r3
   22f36:	4798      	blx	r3
   22f38:	0002      	movs	r2, r0
   22f3a:	0029      	movs	r1, r5
   22f3c:	232c      	movs	r3, #44	; 0x2c
   22f3e:	2008      	movs	r0, #8
   22f40:	1838      	adds	r0, r7, r0
   22f42:	18c0      	adds	r0, r0, r3
   22f44:	4d8f      	ldr	r5, [pc, #572]	; (23184 <_http_client_request+0x2f0>)
   22f46:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   22f48:	220b      	movs	r2, #11
   22f4a:	498f      	ldr	r1, [pc, #572]	; (23188 <_http_client_request+0x2f4>)
   22f4c:	232c      	movs	r3, #44	; 0x2c
   22f4e:	2008      	movs	r0, #8
   22f50:	1838      	adds	r0, r7, r0
   22f52:	18c0      	adds	r0, r0, r3
   22f54:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   22f56:	220c      	movs	r2, #12
   22f58:	498c      	ldr	r1, [pc, #560]	; (2318c <_http_client_request+0x2f8>)
   22f5a:	232c      	movs	r3, #44	; 0x2c
   22f5c:	2008      	movs	r0, #8
   22f5e:	1838      	adds	r0, r7, r0
   22f60:	18c0      	adds	r0, r0, r3
   22f62:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   22f64:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22f66:	607b      	str	r3, [r7, #4]
   22f68:	0018      	movs	r0, r3
   22f6a:	47d0      	blx	sl
   22f6c:	0002      	movs	r2, r0
   22f6e:	6879      	ldr	r1, [r7, #4]
   22f70:	232c      	movs	r3, #44	; 0x2c
   22f72:	2008      	movs	r0, #8
   22f74:	1838      	adds	r0, r7, r0
   22f76:	18c0      	adds	r0, r0, r3
   22f78:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22f7a:	2202      	movs	r2, #2
   22f7c:	4984      	ldr	r1, [pc, #528]	; (23190 <_http_client_request+0x2fc>)
   22f7e:	232c      	movs	r3, #44	; 0x2c
   22f80:	2008      	movs	r0, #8
   22f82:	1838      	adds	r0, r7, r0
   22f84:	18c0      	adds	r0, r0, r3
   22f86:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   22f88:	2206      	movs	r2, #6
   22f8a:	4982      	ldr	r1, [pc, #520]	; (23194 <_http_client_request+0x300>)
   22f8c:	232c      	movs	r3, #44	; 0x2c
   22f8e:	2008      	movs	r0, #8
   22f90:	1838      	adds	r0, r7, r0
   22f92:	18c0      	adds	r0, r0, r3
   22f94:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   22f96:	1c63      	adds	r3, r4, #1
   22f98:	607b      	str	r3, [r7, #4]
   22f9a:	0018      	movs	r0, r3
   22f9c:	47d0      	blx	sl
   22f9e:	0002      	movs	r2, r0
   22fa0:	6879      	ldr	r1, [r7, #4]
   22fa2:	232c      	movs	r3, #44	; 0x2c
   22fa4:	2008      	movs	r0, #8
   22fa6:	1838      	adds	r0, r7, r0
   22fa8:	18c0      	adds	r0, r0, r3
   22faa:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22fac:	2202      	movs	r2, #2
   22fae:	4978      	ldr	r1, [pc, #480]	; (23190 <_http_client_request+0x2fc>)
   22fb0:	232c      	movs	r3, #44	; 0x2c
   22fb2:	2008      	movs	r0, #8
   22fb4:	1838      	adds	r0, r7, r0
   22fb6:	18c0      	adds	r0, r0, r3
   22fb8:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   22fba:	2218      	movs	r2, #24
   22fbc:	4976      	ldr	r1, [pc, #472]	; (23198 <_http_client_request+0x304>)
   22fbe:	232c      	movs	r3, #44	; 0x2c
   22fc0:	2008      	movs	r0, #8
   22fc2:	1838      	adds	r0, r7, r0
   22fc4:	18c0      	adds	r0, r0, r3
   22fc6:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   22fc8:	2213      	movs	r2, #19
   22fca:	4974      	ldr	r1, [pc, #464]	; (2319c <_http_client_request+0x308>)
   22fcc:	232c      	movs	r3, #44	; 0x2c
   22fce:	2008      	movs	r0, #8
   22fd0:	1838      	adds	r0, r7, r0
   22fd2:	18c0      	adds	r0, r0, r3
   22fd4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   22fd6:	2217      	movs	r2, #23
   22fd8:	4971      	ldr	r1, [pc, #452]	; (231a0 <_http_client_request+0x30c>)
   22fda:	232c      	movs	r3, #44	; 0x2c
   22fdc:	2008      	movs	r0, #8
   22fde:	1838      	adds	r0, r7, r0
   22fe0:	18c0      	adds	r0, r0, r3
   22fe2:	47a8      	blx	r5

		if (entity->read != NULL) {
   22fe4:	0023      	movs	r3, r4
   22fe6:	33b0      	adds	r3, #176	; 0xb0
   22fe8:	68db      	ldr	r3, [r3, #12]
   22fea:	2b00      	cmp	r3, #0
   22fec:	d07b      	beq.n	230e6 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   22fee:	23b0      	movs	r3, #176	; 0xb0
   22ff0:	5ce3      	ldrb	r3, [r4, r3]
   22ff2:	2b00      	cmp	r3, #0
   22ff4:	d16b      	bne.n	230ce <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   22ff6:	0023      	movs	r3, r4
   22ff8:	33b0      	adds	r3, #176	; 0xb0
   22ffa:	689b      	ldr	r3, [r3, #8]
   22ffc:	2b00      	cmp	r3, #0
   22ffe:	d072      	beq.n	230e6 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   23000:	0022      	movs	r2, r4
   23002:	32b0      	adds	r2, #176	; 0xb0
   23004:	6950      	ldr	r0, [r2, #20]
   23006:	4798      	blx	r3
   23008:	23cc      	movs	r3, #204	; 0xcc
   2300a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   2300c:	2800      	cmp	r0, #0
   2300e:	da00      	bge.n	23012 <_http_client_request+0x17e>
   23010:	e0ac      	b.n	2316c <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   23012:	0002      	movs	r2, r0
   23014:	4963      	ldr	r1, [pc, #396]	; (231a4 <_http_client_request+0x310>)
   23016:	2320      	movs	r3, #32
   23018:	2008      	movs	r0, #8
   2301a:	1838      	adds	r0, r7, r0
   2301c:	18c0      	adds	r0, r0, r3
   2301e:	4b62      	ldr	r3, [pc, #392]	; (231a8 <_http_client_request+0x314>)
   23020:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   23022:	2210      	movs	r2, #16
   23024:	4961      	ldr	r1, [pc, #388]	; (231ac <_http_client_request+0x318>)
   23026:	232c      	movs	r3, #44	; 0x2c
   23028:	2008      	movs	r0, #8
   2302a:	1838      	adds	r0, r7, r0
   2302c:	18c0      	adds	r0, r0, r3
   2302e:	4d55      	ldr	r5, [pc, #340]	; (23184 <_http_client_request+0x2f0>)
   23030:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   23032:	2320      	movs	r3, #32
   23034:	2208      	movs	r2, #8
   23036:	18ba      	adds	r2, r7, r2
   23038:	18d0      	adds	r0, r2, r3
   2303a:	4b51      	ldr	r3, [pc, #324]	; (23180 <_http_client_request+0x2ec>)
   2303c:	4798      	blx	r3
   2303e:	0002      	movs	r2, r0
   23040:	2320      	movs	r3, #32
   23042:	2108      	movs	r1, #8
   23044:	1879      	adds	r1, r7, r1
   23046:	18c9      	adds	r1, r1, r3
   23048:	330c      	adds	r3, #12
   2304a:	2008      	movs	r0, #8
   2304c:	1838      	adds	r0, r7, r0
   2304e:	18c0      	adds	r0, r0, r3
   23050:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   23052:	2202      	movs	r2, #2
   23054:	494e      	ldr	r1, [pc, #312]	; (23190 <_http_client_request+0x2fc>)
   23056:	232c      	movs	r3, #44	; 0x2c
   23058:	2008      	movs	r0, #8
   2305a:	1838      	adds	r0, r7, r0
   2305c:	18c0      	adds	r0, r0, r3
   2305e:	47a8      	blx	r5
   23060:	e041      	b.n	230e6 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   23062:	2204      	movs	r2, #4
   23064:	4952      	ldr	r1, [pc, #328]	; (231b0 <_http_client_request+0x31c>)
   23066:	332b      	adds	r3, #43	; 0x2b
   23068:	2008      	movs	r0, #8
   2306a:	1838      	adds	r0, r7, r0
   2306c:	18c0      	adds	r0, r0, r3
   2306e:	4b45      	ldr	r3, [pc, #276]	; (23184 <_http_client_request+0x2f0>)
   23070:	4798      	blx	r3
   23072:	e75b      	b.n	22f2c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   23074:	2205      	movs	r2, #5
   23076:	494f      	ldr	r1, [pc, #316]	; (231b4 <_http_client_request+0x320>)
   23078:	332a      	adds	r3, #42	; 0x2a
   2307a:	2008      	movs	r0, #8
   2307c:	1838      	adds	r0, r7, r0
   2307e:	18c0      	adds	r0, r0, r3
   23080:	4b40      	ldr	r3, [pc, #256]	; (23184 <_http_client_request+0x2f0>)
   23082:	4798      	blx	r3
   23084:	e752      	b.n	22f2c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   23086:	2207      	movs	r2, #7
   23088:	494b      	ldr	r1, [pc, #300]	; (231b8 <_http_client_request+0x324>)
   2308a:	3329      	adds	r3, #41	; 0x29
   2308c:	2008      	movs	r0, #8
   2308e:	1838      	adds	r0, r7, r0
   23090:	18c0      	adds	r0, r0, r3
   23092:	4b3c      	ldr	r3, [pc, #240]	; (23184 <_http_client_request+0x2f0>)
   23094:	4798      	blx	r3
   23096:	e749      	b.n	22f2c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   23098:	2204      	movs	r2, #4
   2309a:	4948      	ldr	r1, [pc, #288]	; (231bc <_http_client_request+0x328>)
   2309c:	3328      	adds	r3, #40	; 0x28
   2309e:	2008      	movs	r0, #8
   230a0:	1838      	adds	r0, r7, r0
   230a2:	18c0      	adds	r0, r0, r3
   230a4:	4b37      	ldr	r3, [pc, #220]	; (23184 <_http_client_request+0x2f0>)
   230a6:	4798      	blx	r3
   230a8:	e740      	b.n	22f2c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   230aa:	2208      	movs	r2, #8
   230ac:	4944      	ldr	r1, [pc, #272]	; (231c0 <_http_client_request+0x32c>)
   230ae:	3327      	adds	r3, #39	; 0x27
   230b0:	2008      	movs	r0, #8
   230b2:	1838      	adds	r0, r7, r0
   230b4:	18c0      	adds	r0, r0, r3
   230b6:	4b33      	ldr	r3, [pc, #204]	; (23184 <_http_client_request+0x2f0>)
   230b8:	4798      	blx	r3
   230ba:	e737      	b.n	22f2c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   230bc:	2205      	movs	r2, #5
   230be:	4941      	ldr	r1, [pc, #260]	; (231c4 <_http_client_request+0x330>)
   230c0:	3326      	adds	r3, #38	; 0x26
   230c2:	2008      	movs	r0, #8
   230c4:	1838      	adds	r0, r7, r0
   230c6:	18c0      	adds	r0, r0, r3
   230c8:	4b2e      	ldr	r3, [pc, #184]	; (23184 <_http_client_request+0x2f0>)
   230ca:	4798      	blx	r3
   230cc:	e72e      	b.n	22f2c <_http_client_request+0x98>
				module->req.content_length = -1;
   230ce:	2201      	movs	r2, #1
   230d0:	4252      	negs	r2, r2
   230d2:	23cc      	movs	r3, #204	; 0xcc
   230d4:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   230d6:	321d      	adds	r2, #29
   230d8:	493b      	ldr	r1, [pc, #236]	; (231c8 <_http_client_request+0x334>)
   230da:	3ba0      	subs	r3, #160	; 0xa0
   230dc:	2008      	movs	r0, #8
   230de:	1838      	adds	r0, r7, r0
   230e0:	18c0      	adds	r0, r0, r3
   230e2:	4b28      	ldr	r3, [pc, #160]	; (23184 <_http_client_request+0x2f0>)
   230e4:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   230e6:	23d4      	movs	r3, #212	; 0xd4
   230e8:	58e5      	ldr	r5, [r4, r3]
   230ea:	2d00      	cmp	r5, #0
   230ec:	d00a      	beq.n	23104 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   230ee:	0028      	movs	r0, r5
   230f0:	4b23      	ldr	r3, [pc, #140]	; (23180 <_http_client_request+0x2ec>)
   230f2:	4798      	blx	r3
   230f4:	0002      	movs	r2, r0
   230f6:	0029      	movs	r1, r5
   230f8:	232c      	movs	r3, #44	; 0x2c
   230fa:	2008      	movs	r0, #8
   230fc:	1838      	adds	r0, r7, r0
   230fe:	18c0      	adds	r0, r0, r3
   23100:	4b20      	ldr	r3, [pc, #128]	; (23184 <_http_client_request+0x2f0>)
   23102:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   23104:	2202      	movs	r2, #2
   23106:	4922      	ldr	r1, [pc, #136]	; (23190 <_http_client_request+0x2fc>)
   23108:	232c      	movs	r3, #44	; 0x2c
   2310a:	2008      	movs	r0, #8
   2310c:	1838      	adds	r0, r7, r0
   2310e:	18c0      	adds	r0, r0, r3
   23110:	4b1c      	ldr	r3, [pc, #112]	; (23184 <_http_client_request+0x2f0>)
   23112:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   23114:	232c      	movs	r3, #44	; 0x2c
   23116:	2208      	movs	r2, #8
   23118:	18ba      	adds	r2, r7, r2
   2311a:	18d0      	adds	r0, r2, r3
   2311c:	4b2b      	ldr	r3, [pc, #172]	; (231cc <_http_client_request+0x338>)
   2311e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   23120:	2304      	movs	r3, #4
   23122:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   23124:	23cc      	movs	r3, #204	; 0xcc
   23126:	58e2      	ldr	r2, [r4, r3]
   23128:	2a00      	cmp	r2, #0
   2312a:	db51      	blt.n	231d0 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   2312c:	dc00      	bgt.n	23130 <_http_client_request+0x29c>
   2312e:	e0f0      	b.n	23312 <_http_client_request+0x47e>
   23130:	0023      	movs	r3, r4
   23132:	33b0      	adds	r3, #176	; 0xb0
   23134:	68dd      	ldr	r5, [r3, #12]
   23136:	2d00      	cmp	r5, #0
   23138:	d100      	bne.n	2313c <_http_client_request+0x2a8>
   2313a:	e0ea      	b.n	23312 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   2313c:	23d0      	movs	r3, #208	; 0xd0
   2313e:	58e3      	ldr	r3, [r4, r3]
   23140:	429a      	cmp	r2, r3
   23142:	dd00      	ble.n	23146 <_http_client_request+0x2b2>
   23144:	e0ba      	b.n	232bc <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   23146:	23c0      	movs	r3, #192	; 0xc0
   23148:	58e3      	ldr	r3, [r4, r3]
   2314a:	2b00      	cmp	r3, #0
   2314c:	d002      	beq.n	23154 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   2314e:	22c4      	movs	r2, #196	; 0xc4
   23150:	58a0      	ldr	r0, [r4, r2]
   23152:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   23154:	2302      	movs	r3, #2
   23156:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   23158:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2315a:	2b00      	cmp	r3, #0
   2315c:	d100      	bne.n	23160 <_http_client_request+0x2cc>
   2315e:	e6c0      	b.n	22ee2 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   23160:	220c      	movs	r2, #12
   23162:	18ba      	adds	r2, r7, r2
   23164:	2101      	movs	r1, #1
   23166:	0020      	movs	r0, r4
   23168:	4798      	blx	r3
   2316a:	e6ba      	b.n	22ee2 <_http_client_request+0x4e>
					module->req.content_length = 0;
   2316c:	2200      	movs	r2, #0
   2316e:	50e2      	str	r2, [r4, r3]
   23170:	e7b9      	b.n	230e6 <_http_client_request+0x252>
   23172:	46c0      	nop			; (mov r8, r8)
   23174:	0002aaf8 	.word	0x0002aaf8
   23178:	00022c25 	.word	0x00022c25
   2317c:	00023bf1 	.word	0x00023bf1
   23180:	00026667 	.word	0x00026667
   23184:	00023c45 	.word	0x00023c45
   23188:	0002ab6c 	.word	0x0002ab6c
   2318c:	0002ab78 	.word	0x0002ab78
   23190:	0002ae7c 	.word	0x0002ae7c
   23194:	0002ab88 	.word	0x0002ab88
   23198:	0002ab90 	.word	0x0002ab90
   2319c:	0002abac 	.word	0x0002abac
   231a0:	0002abc0 	.word	0x0002abc0
   231a4:	0002abf8 	.word	0x0002abf8
   231a8:	0002656d 	.word	0x0002656d
   231ac:	0002abfc 	.word	0x0002abfc
   231b0:	0002ab38 	.word	0x0002ab38
   231b4:	0002ab40 	.word	0x0002ab40
   231b8:	0002ab48 	.word	0x0002ab48
   231bc:	0002ab50 	.word	0x0002ab50
   231c0:	0002ab58 	.word	0x0002ab58
   231c4:	0002ab64 	.word	0x0002ab64
   231c8:	0002abd8 	.word	0x0002abd8
   231cc:	00023c01 	.word	0x00023c01
		if (module->req.content_length < 0 && entity->read) {
   231d0:	0023      	movs	r3, r4
   231d2:	33b0      	adds	r3, #176	; 0xb0
   231d4:	68dd      	ldr	r5, [r3, #12]
   231d6:	2d00      	cmp	r5, #0
   231d8:	d100      	bne.n	231dc <_http_client_request+0x348>
   231da:	e09a      	b.n	23312 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   231dc:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   231de:	58e3      	ldr	r3, [r4, r3]
   231e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   231e2:	3a07      	subs	r2, #7
   231e4:	1d71      	adds	r1, r6, #5
   231e6:	0020      	movs	r0, r4
   231e8:	30b0      	adds	r0, #176	; 0xb0
   231ea:	6940      	ldr	r0, [r0, #20]
   231ec:	47a8      	blx	r5
   231ee:	0005      	movs	r5, r0
   231f0:	43c3      	mvns	r3, r0
   231f2:	17db      	asrs	r3, r3, #31
   231f4:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   231f6:	220a      	movs	r2, #10
   231f8:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   231fa:	210d      	movs	r1, #13
   231fc:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   231fe:	1973      	adds	r3, r6, r5
   23200:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   23202:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   23204:	230f      	movs	r3, #15
   23206:	402b      	ands	r3, r5
   23208:	3206      	adds	r2, #6
   2320a:	3905      	subs	r1, #5
   2320c:	468c      	mov	ip, r1
   2320e:	44bc      	add	ip, r7
   23210:	4462      	add	r2, ip
   23212:	5cd3      	ldrb	r3, [r2, r3]
   23214:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   23216:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   23218:	2d0f      	cmp	r5, #15
   2321a:	dd0d      	ble.n	23238 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   2321c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   2321e:	17eb      	asrs	r3, r5, #31
   23220:	220f      	movs	r2, #15
   23222:	4013      	ands	r3, r2
   23224:	195b      	adds	r3, r3, r5
   23226:	111b      	asrs	r3, r3, #4
   23228:	4013      	ands	r3, r2
   2322a:	3201      	adds	r2, #1
   2322c:	2008      	movs	r0, #8
   2322e:	4684      	mov	ip, r0
   23230:	44bc      	add	ip, r7
   23232:	4462      	add	r2, ip
   23234:	5cd3      	ldrb	r3, [r2, r3]
   23236:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   23238:	2dff      	cmp	r5, #255	; 0xff
   2323a:	dd0d      	ble.n	23258 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   2323c:	17ea      	asrs	r2, r5, #31
   2323e:	23ff      	movs	r3, #255	; 0xff
   23240:	4013      	ands	r3, r2
   23242:	195b      	adds	r3, r3, r5
   23244:	051b      	lsls	r3, r3, #20
   23246:	0f1b      	lsrs	r3, r3, #28
   23248:	2210      	movs	r2, #16
   2324a:	2108      	movs	r1, #8
   2324c:	468c      	mov	ip, r1
   2324e:	44bc      	add	ip, r7
   23250:	4462      	add	r2, ip
   23252:	5cd3      	ldrb	r3, [r2, r3]
   23254:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   23256:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   23258:	1cca      	adds	r2, r1, #3
   2325a:	1b92      	subs	r2, r2, r6
   2325c:	1d2b      	adds	r3, r5, #4
   2325e:	18d2      	adds	r2, r2, r3
   23260:	b292      	uxth	r2, r2
   23262:	2000      	movs	r0, #0
   23264:	5620      	ldrsb	r0, [r4, r0]
   23266:	2300      	movs	r3, #0
   23268:	4e30      	ldr	r6, [pc, #192]	; (2332c <_http_client_request+0x498>)
   2326a:	47b0      	blx	r6
   2326c:	2800      	cmp	r0, #0
   2326e:	db19      	blt.n	232a4 <_http_client_request+0x410>
			module->req.sent_length += size;
   23270:	22d0      	movs	r2, #208	; 0xd0
   23272:	58a3      	ldr	r3, [r4, r2]
   23274:	195b      	adds	r3, r3, r5
   23276:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   23278:	2d00      	cmp	r5, #0
   2327a:	d000      	beq.n	2327e <_http_client_request+0x3ea>
   2327c:	e631      	b.n	22ee2 <_http_client_request+0x4e>
				if (module->req.entity.close) {
   2327e:	23c0      	movs	r3, #192	; 0xc0
   23280:	58e3      	ldr	r3, [r4, r3]
   23282:	2b00      	cmp	r3, #0
   23284:	d002      	beq.n	2328c <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   23286:	3a0c      	subs	r2, #12
   23288:	58a0      	ldr	r0, [r4, r2]
   2328a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2328c:	2302      	movs	r3, #2
   2328e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   23290:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23292:	2b00      	cmp	r3, #0
   23294:	d100      	bne.n	23298 <_http_client_request+0x404>
   23296:	e624      	b.n	22ee2 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   23298:	220c      	movs	r2, #12
   2329a:	18ba      	adds	r2, r7, r2
   2329c:	2101      	movs	r1, #1
   2329e:	0020      	movs	r0, r4
   232a0:	4798      	blx	r3
   232a2:	e61e      	b.n	22ee2 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   232a4:	2105      	movs	r1, #5
   232a6:	4249      	negs	r1, r1
   232a8:	0020      	movs	r0, r4
   232aa:	4b21      	ldr	r3, [pc, #132]	; (23330 <_http_client_request+0x49c>)
   232ac:	4798      	blx	r3
   232ae:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   232b0:	46bd      	mov	sp, r7
   232b2:	b013      	add	sp, #76	; 0x4c
   232b4:	bc0c      	pop	{r2, r3}
   232b6:	4692      	mov	sl, r2
   232b8:	469b      	mov	fp, r3
   232ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   232bc:	0022      	movs	r2, r4
   232be:	32b0      	adds	r2, #176	; 0xb0
   232c0:	6950      	ldr	r0, [r2, #20]
   232c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   232c4:	0031      	movs	r1, r6
   232c6:	47a8      	blx	r5
			if (size < 0) {
   232c8:	2800      	cmp	r0, #0
   232ca:	db16      	blt.n	232fa <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   232cc:	23cc      	movs	r3, #204	; 0xcc
   232ce:	58e5      	ldr	r5, [r4, r3]
   232d0:	3304      	adds	r3, #4
   232d2:	58e3      	ldr	r3, [r4, r3]
   232d4:	1aed      	subs	r5, r5, r3
   232d6:	4285      	cmp	r5, r0
   232d8:	dd00      	ble.n	232dc <_http_client_request+0x448>
   232da:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   232dc:	b2aa      	uxth	r2, r5
   232de:	2000      	movs	r0, #0
   232e0:	5620      	ldrsb	r0, [r4, r0]
   232e2:	2300      	movs	r3, #0
   232e4:	0031      	movs	r1, r6
   232e6:	4e11      	ldr	r6, [pc, #68]	; (2332c <_http_client_request+0x498>)
   232e8:	47b0      	blx	r6
   232ea:	2800      	cmp	r0, #0
   232ec:	db0b      	blt.n	23306 <_http_client_request+0x472>
				module->req.sent_length += size;
   232ee:	23d0      	movs	r3, #208	; 0xd0
   232f0:	58e2      	ldr	r2, [r4, r3]
   232f2:	4694      	mov	ip, r2
   232f4:	4465      	add	r5, ip
   232f6:	50e5      	str	r5, [r4, r3]
   232f8:	e5f3      	b.n	22ee2 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   232fa:	2105      	movs	r1, #5
   232fc:	4249      	negs	r1, r1
   232fe:	0020      	movs	r0, r4
   23300:	4b0b      	ldr	r3, [pc, #44]	; (23330 <_http_client_request+0x49c>)
   23302:	4798      	blx	r3
   23304:	e5ed      	b.n	22ee2 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   23306:	2105      	movs	r1, #5
   23308:	4249      	negs	r1, r1
   2330a:	0020      	movs	r0, r4
   2330c:	4b08      	ldr	r3, [pc, #32]	; (23330 <_http_client_request+0x49c>)
   2330e:	4798      	blx	r3
					return;
   23310:	e7cd      	b.n	232ae <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   23312:	2302      	movs	r3, #2
   23314:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   23316:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23318:	2b00      	cmp	r3, #0
   2331a:	d100      	bne.n	2331e <_http_client_request+0x48a>
   2331c:	e5e1      	b.n	22ee2 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2331e:	220c      	movs	r2, #12
   23320:	18ba      	adds	r2, r7, r2
   23322:	2101      	movs	r1, #1
   23324:	0020      	movs	r0, r4
   23326:	4798      	blx	r3
   23328:	e5db      	b.n	22ee2 <_http_client_request+0x4e>
   2332a:	46c0      	nop			; (mov r8, r8)
   2332c:	0001d1b1 	.word	0x0001d1b1
   23330:	00022d7d 	.word	0x00022d7d

00023334 <http_client_send_request>:
{
   23334:	b5f0      	push	{r4, r5, r6, r7, lr}
   23336:	46d6      	mov	lr, sl
   23338:	b500      	push	{lr}
   2333a:	b088      	sub	sp, #32
   2333c:	0004      	movs	r4, r0
   2333e:	000f      	movs	r7, r1
   23340:	4692      	mov	sl, r2
   23342:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   23344:	2800      	cmp	r0, #0
   23346:	d100      	bne.n	2334a <http_client_send_request+0x16>
   23348:	e0d3      	b.n	234f2 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   2334a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2334c:	2b02      	cmp	r3, #2
   2334e:	d900      	bls.n	23352 <http_client_send_request+0x1e>
   23350:	e0d3      	b.n	234fa <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   23352:	2207      	movs	r2, #7
   23354:	4981      	ldr	r1, [pc, #516]	; (2355c <http_client_send_request+0x228>)
   23356:	0038      	movs	r0, r7
   23358:	4b81      	ldr	r3, [pc, #516]	; (23560 <http_client_send_request+0x22c>)
   2335a:	4798      	blx	r3
		i = 7;
   2335c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   2335e:	2800      	cmp	r0, #0
   23360:	d007      	beq.n	23372 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   23362:	2208      	movs	r2, #8
   23364:	497f      	ldr	r1, [pc, #508]	; (23564 <http_client_send_request+0x230>)
   23366:	0038      	movs	r0, r7
   23368:	4b7d      	ldr	r3, [pc, #500]	; (23560 <http_client_send_request+0x22c>)
   2336a:	4798      	blx	r3
		i = 8;
   2336c:	4246      	negs	r6, r0
   2336e:	4146      	adcs	r6, r0
   23370:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   23372:	1c63      	adds	r3, r4, #1
   23374:	19bd      	adds	r5, r7, r6
   23376:	9302      	str	r3, [sp, #8]
   23378:	0018      	movs	r0, r3
   2337a:	4b7b      	ldr	r3, [pc, #492]	; (23568 <http_client_send_request+0x234>)
   2337c:	4798      	blx	r3
   2337e:	0002      	movs	r2, r0
   23380:	0029      	movs	r1, r5
   23382:	9802      	ldr	r0, [sp, #8]
   23384:	4b76      	ldr	r3, [pc, #472]	; (23560 <http_client_send_request+0x22c>)
   23386:	4798      	blx	r3
   23388:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2338a:	782b      	ldrb	r3, [r5, #0]
   2338c:	2b00      	cmp	r3, #0
   2338e:	d052      	beq.n	23436 <http_client_send_request+0x102>
   23390:	2b2f      	cmp	r3, #47	; 0x2f
   23392:	d052      	beq.n	2343a <http_client_send_request+0x106>
   23394:	1c71      	adds	r1, r6, #1
   23396:	1879      	adds	r1, r7, r1
   23398:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   2339a:	3201      	adds	r2, #1
   2339c:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2339e:	000d      	movs	r5, r1
   233a0:	780b      	ldrb	r3, [r1, #0]
   233a2:	2b00      	cmp	r3, #0
   233a4:	d002      	beq.n	233ac <http_client_send_request+0x78>
   233a6:	3101      	adds	r1, #1
   233a8:	2b2f      	cmp	r3, #47	; 0x2f
   233aa:	d1f6      	bne.n	2339a <http_client_send_request+0x66>
	module->host[j] = '\0';
   233ac:	18a2      	adds	r2, r4, r2
   233ae:	2300      	movs	r3, #0
   233b0:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   233b2:	7863      	ldrb	r3, [r4, #1]
   233b4:	2b00      	cmp	r3, #0
   233b6:	d100      	bne.n	233ba <http_client_send_request+0x86>
   233b8:	e0a3      	b.n	23502 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   233ba:	0028      	movs	r0, r5
   233bc:	4b6a      	ldr	r3, [pc, #424]	; (23568 <http_client_send_request+0x234>)
   233be:	4798      	blx	r3
   233c0:	283f      	cmp	r0, #63	; 0x3f
   233c2:	d900      	bls.n	233c6 <http_client_send_request+0x92>
   233c4:	e0a1      	b.n	2350a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   233c6:	23d4      	movs	r3, #212	; 0xd4
   233c8:	58e0      	ldr	r0, [r4, r3]
   233ca:	2800      	cmp	r0, #0
   233cc:	d001      	beq.n	233d2 <http_client_send_request+0x9e>
		free(module->req.ext_header);
   233ce:	4b67      	ldr	r3, [pc, #412]	; (2356c <http_client_send_request+0x238>)
   233d0:	4798      	blx	r3
	if (ext_header != NULL) {
   233d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   233d4:	2b00      	cmp	r3, #0
   233d6:	d032      	beq.n	2343e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   233d8:	0018      	movs	r0, r3
   233da:	4b65      	ldr	r3, [pc, #404]	; (23570 <http_client_send_request+0x23c>)
   233dc:	4798      	blx	r3
   233de:	23d4      	movs	r3, #212	; 0xd4
   233e0:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   233e2:	2800      	cmp	r0, #0
   233e4:	d100      	bne.n	233e8 <http_client_send_request+0xb4>
   233e6:	e094      	b.n	23512 <http_client_send_request+0x1de>
	module->sending = 0;
   233e8:	2241      	movs	r2, #65	; 0x41
   233ea:	5ca3      	ldrb	r3, [r4, r2]
   233ec:	2101      	movs	r1, #1
   233ee:	438b      	bics	r3, r1
   233f0:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   233f2:	2300      	movs	r3, #0
   233f4:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   233f6:	782b      	ldrb	r3, [r5, #0]
   233f8:	2b2f      	cmp	r3, #47	; 0x2f
   233fa:	d024      	beq.n	23446 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   233fc:	222f      	movs	r2, #47	; 0x2f
   233fe:	2370      	movs	r3, #112	; 0x70
   23400:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   23402:	782b      	ldrb	r3, [r5, #0]
   23404:	2b00      	cmp	r3, #0
   23406:	d124      	bne.n	23452 <http_client_send_request+0x11e>
	if (entity != NULL) {
   23408:	9b03      	ldr	r3, [sp, #12]
   2340a:	2b00      	cmp	r3, #0
   2340c:	d027      	beq.n	2345e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2340e:	0020      	movs	r0, r4
   23410:	30b0      	adds	r0, #176	; 0xb0
   23412:	2218      	movs	r2, #24
   23414:	0019      	movs	r1, r3
   23416:	4b57      	ldr	r3, [pc, #348]	; (23574 <http_client_send_request+0x240>)
   23418:	4798      	blx	r3
	module->req.method = method;
   2341a:	23c8      	movs	r3, #200	; 0xc8
   2341c:	4652      	mov	r2, sl
   2341e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   23420:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   23422:	2b01      	cmp	r3, #1
   23424:	d022      	beq.n	2346c <http_client_send_request+0x138>
   23426:	2b00      	cmp	r3, #0
   23428:	d027      	beq.n	2347a <http_client_send_request+0x146>
   2342a:	2b02      	cmp	r3, #2
   2342c:	d03a      	beq.n	234a4 <http_client_send_request+0x170>
		return -EAGAIN;
   2342e:	230b      	movs	r3, #11
   23430:	425b      	negs	r3, r3
   23432:	9301      	str	r3, [sp, #4]
   23434:	e08d      	b.n	23552 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   23436:	2200      	movs	r2, #0
   23438:	e7b8      	b.n	233ac <http_client_send_request+0x78>
   2343a:	2200      	movs	r2, #0
   2343c:	e7b6      	b.n	233ac <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   2343e:	2200      	movs	r2, #0
   23440:	23d4      	movs	r3, #212	; 0xd4
   23442:	50e2      	str	r2, [r4, r3]
   23444:	e7d0      	b.n	233e8 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   23446:	0020      	movs	r0, r4
   23448:	3070      	adds	r0, #112	; 0x70
   2344a:	0029      	movs	r1, r5
   2344c:	4b4a      	ldr	r3, [pc, #296]	; (23578 <http_client_send_request+0x244>)
   2344e:	4798      	blx	r3
   23450:	e7da      	b.n	23408 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   23452:	0029      	movs	r1, r5
   23454:	0020      	movs	r0, r4
   23456:	3071      	adds	r0, #113	; 0x71
   23458:	4b47      	ldr	r3, [pc, #284]	; (23578 <http_client_send_request+0x244>)
   2345a:	4798      	blx	r3
   2345c:	e7d4      	b.n	23408 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2345e:	0020      	movs	r0, r4
   23460:	30b0      	adds	r0, #176	; 0xb0
   23462:	2218      	movs	r2, #24
   23464:	2100      	movs	r1, #0
   23466:	4b45      	ldr	r3, [pc, #276]	; (2357c <http_client_send_request+0x248>)
   23468:	4798      	blx	r3
   2346a:	e7d6      	b.n	2341a <http_client_send_request+0xe6>
		if (!reconnect) {
   2346c:	9b01      	ldr	r3, [sp, #4]
   2346e:	2b00      	cmp	r3, #0
   23470:	d06f      	beq.n	23552 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   23472:	2100      	movs	r1, #0
   23474:	0020      	movs	r0, r4
   23476:	4b42      	ldr	r3, [pc, #264]	; (23580 <http_client_send_request+0x24c>)
   23478:	4798      	blx	r3
		if (module->config.tls) {
   2347a:	2352      	movs	r3, #82	; 0x52
   2347c:	5ce2      	ldrb	r2, [r4, r3]
   2347e:	1e53      	subs	r3, r2, #1
   23480:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   23482:	b2d2      	uxtb	r2, r2
   23484:	2101      	movs	r1, #1
   23486:	2002      	movs	r0, #2
   23488:	4b3e      	ldr	r3, [pc, #248]	; (23584 <http_client_send_request+0x250>)
   2348a:	4798      	blx	r3
   2348c:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   2348e:	2800      	cmp	r0, #0
   23490:	db43      	blt.n	2351a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   23492:	0080      	lsls	r0, r0, #2
   23494:	4b3c      	ldr	r3, [pc, #240]	; (23588 <http_client_send_request+0x254>)
   23496:	50c4      	str	r4, [r0, r3]
   23498:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   2349a:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   2349c:	2620      	movs	r6, #32
			isv6 = 1;
   2349e:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   234a0:	2730      	movs	r7, #48	; 0x30
   234a2:	e00c      	b.n	234be <http_client_send_request+0x18a>
		if (!reconnect) {
   234a4:	9b01      	ldr	r3, [sp, #4]
   234a6:	2b00      	cmp	r3, #0
   234a8:	d1e3      	bne.n	23472 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   234aa:	3303      	adds	r3, #3
   234ac:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   234ae:	0020      	movs	r0, r4
   234b0:	4b36      	ldr	r3, [pc, #216]	; (2358c <http_client_send_request+0x258>)
   234b2:	4798      	blx	r3
			break;
   234b4:	e04d      	b.n	23552 <http_client_send_request+0x21e>
			if (isv6) {
   234b6:	2900      	cmp	r1, #0
   234b8:	d001      	beq.n	234be <http_client_send_request+0x18a>
   234ba:	e012      	b.n	234e2 <http_client_send_request+0x1ae>
			isv6 = 1;
   234bc:	0001      	movs	r1, r0
	while (*host != '\0') {
   234be:	782a      	ldrb	r2, [r5, #0]
   234c0:	2a00      	cmp	r2, #0
   234c2:	d02e      	beq.n	23522 <http_client_send_request+0x1ee>
		ch = *host++;
   234c4:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   234c6:	0013      	movs	r3, r2
   234c8:	43b3      	bics	r3, r6
   234ca:	3b41      	subs	r3, #65	; 0x41
   234cc:	2b05      	cmp	r3, #5
   234ce:	d9f5      	bls.n	234bc <http_client_send_request+0x188>
   234d0:	2a3a      	cmp	r2, #58	; 0x3a
   234d2:	d00a      	beq.n	234ea <http_client_send_request+0x1b6>
   234d4:	2a2f      	cmp	r2, #47	; 0x2f
   234d6:	d00a      	beq.n	234ee <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   234d8:	2a2e      	cmp	r2, #46	; 0x2e
   234da:	d0ec      	beq.n	234b6 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   234dc:	403a      	ands	r2, r7
   234de:	2a30      	cmp	r2, #48	; 0x30
   234e0:	d0ed      	beq.n	234be <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   234e2:	9802      	ldr	r0, [sp, #8]
   234e4:	4b2a      	ldr	r3, [pc, #168]	; (23590 <http_client_send_request+0x25c>)
   234e6:	4798      	blx	r3
   234e8:	e02f      	b.n	2354a <http_client_send_request+0x216>
			isv6 = 1;
   234ea:	0001      	movs	r1, r0
   234ec:	e7e7      	b.n	234be <http_client_send_request+0x18a>
   234ee:	0001      	movs	r1, r0
   234f0:	e7e5      	b.n	234be <http_client_send_request+0x18a>
		return -EINVAL;
   234f2:	2316      	movs	r3, #22
   234f4:	425b      	negs	r3, r3
   234f6:	9301      	str	r3, [sp, #4]
   234f8:	e02b      	b.n	23552 <http_client_send_request+0x21e>
		return -EBUSY;
   234fa:	2310      	movs	r3, #16
   234fc:	425b      	negs	r3, r3
   234fe:	9301      	str	r3, [sp, #4]
   23500:	e027      	b.n	23552 <http_client_send_request+0x21e>
		return -EINVAL;
   23502:	2316      	movs	r3, #22
   23504:	425b      	negs	r3, r3
   23506:	9301      	str	r3, [sp, #4]
   23508:	e023      	b.n	23552 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   2350a:	235b      	movs	r3, #91	; 0x5b
   2350c:	425b      	negs	r3, r3
   2350e:	9301      	str	r3, [sp, #4]
   23510:	e01f      	b.n	23552 <http_client_send_request+0x21e>
			return -ENOMEM;
   23512:	230c      	movs	r3, #12
   23514:	425b      	negs	r3, r3
   23516:	9301      	str	r3, [sp, #4]
   23518:	e01b      	b.n	23552 <http_client_send_request+0x21e>
			return -ENOSPC;
   2351a:	231c      	movs	r3, #28
   2351c:	425b      	negs	r3, r3
   2351e:	9301      	str	r3, [sp, #4]
   23520:	e017      	b.n	23552 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   23522:	2302      	movs	r3, #2
   23524:	aa04      	add	r2, sp, #16
   23526:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   23528:	334e      	adds	r3, #78	; 0x4e
   2352a:	5ae3      	ldrh	r3, [r4, r3]
   2352c:	021a      	lsls	r2, r3, #8
   2352e:	0a1b      	lsrs	r3, r3, #8
   23530:	4313      	orrs	r3, r2
   23532:	aa04      	add	r2, sp, #16
   23534:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   23536:	9802      	ldr	r0, [sp, #8]
   23538:	4b16      	ldr	r3, [pc, #88]	; (23594 <http_client_send_request+0x260>)
   2353a:	4798      	blx	r3
   2353c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2353e:	2000      	movs	r0, #0
   23540:	5620      	ldrsb	r0, [r4, r0]
   23542:	2210      	movs	r2, #16
   23544:	a904      	add	r1, sp, #16
   23546:	4b14      	ldr	r3, [pc, #80]	; (23598 <http_client_send_request+0x264>)
   23548:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2354a:	2301      	movs	r3, #1
   2354c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   2354e:	2300      	movs	r3, #0
   23550:	9301      	str	r3, [sp, #4]
}
   23552:	9801      	ldr	r0, [sp, #4]
   23554:	b008      	add	sp, #32
   23556:	bc04      	pop	{r2}
   23558:	4692      	mov	sl, r2
   2355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2355c:	0002ac1c 	.word	0x0002ac1c
   23560:	00026675 	.word	0x00026675
   23564:	0002ac24 	.word	0x0002ac24
   23568:	00026667 	.word	0x00026667
   2356c:	00026209 	.word	0x00026209
   23570:	0002662d 	.word	0x0002662d
   23574:	0002621d 	.word	0x0002621d
   23578:	0002661b 	.word	0x0002661b
   2357c:	00026253 	.word	0x00026253
   23580:	00022d7d 	.word	0x00022d7d
   23584:	0001cfa1 	.word	0x0001cfa1
   23588:	20004130 	.word	0x20004130
   2358c:	00022e95 	.word	0x00022e95
   23590:	0001d3e1 	.word	0x0001d3e1
   23594:	0001d375 	.word	0x0001d375
   23598:	0001d121 	.word	0x0001d121

0002359c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   2359c:	b510      	push	{r4, lr}
	if (module == NULL) {
   2359e:	2800      	cmp	r0, #0
   235a0:	d00d      	beq.n	235be <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   235a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
   235a4:	6e02      	ldr	r2, [r0, #96]	; 0x60
   235a6:	4291      	cmp	r1, r2
   235a8:	d20a      	bcs.n	235c0 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   235aa:	1a52      	subs	r2, r2, r1
   235ac:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   235ae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   235b0:	469c      	mov	ip, r3
   235b2:	4461      	add	r1, ip
	recv(module->sock,
   235b4:	7800      	ldrb	r0, [r0, #0]
   235b6:	b240      	sxtb	r0, r0
   235b8:	2300      	movs	r3, #0
   235ba:	4c04      	ldr	r4, [pc, #16]	; (235cc <_http_client_recv_packet+0x30>)
   235bc:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   235be:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   235c0:	218b      	movs	r1, #139	; 0x8b
   235c2:	4249      	negs	r1, r1
   235c4:	4b02      	ldr	r3, [pc, #8]	; (235d0 <_http_client_recv_packet+0x34>)
   235c6:	4798      	blx	r3
		return;
   235c8:	e7f9      	b.n	235be <_http_client_recv_packet+0x22>
   235ca:	46c0      	nop			; (mov r8, r8)
   235cc:	0001d249 	.word	0x0001d249
   235d0:	00022d7d 	.word	0x00022d7d

000235d4 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   235d4:	b570      	push	{r4, r5, r6, lr}
   235d6:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   235d8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   235da:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   235dc:	1a5c      	subs	r4, r3, r1
   235de:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   235e0:	2c00      	cmp	r4, #0
   235e2:	dc02      	bgt.n	235ea <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   235e4:	2300      	movs	r3, #0
   235e6:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   235e8:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   235ea:	0022      	movs	r2, r4
   235ec:	4b01      	ldr	r3, [pc, #4]	; (235f4 <_http_client_move_buffer+0x20>)
   235ee:	4798      	blx	r3
		module->recved_size = remain;
   235f0:	646c      	str	r4, [r5, #68]	; 0x44
   235f2:	e7f9      	b.n	235e8 <_http_client_move_buffer+0x14>
   235f4:	0002622f 	.word	0x0002622f

000235f8 <_http_client_handle_header>:
{
   235f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   235fa:	46ce      	mov	lr, r9
   235fc:	b500      	push	{lr}
   235fe:	b084      	sub	sp, #16
   23600:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   23602:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   23604:	4b62      	ldr	r3, [pc, #392]	; (23790 <_http_client_handle_header+0x198>)
   23606:	4699      	mov	r9, r3
   23608:	e049      	b.n	2369e <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   2360a:	0021      	movs	r1, r4
   2360c:	0038      	movs	r0, r7
   2360e:	4b61      	ldr	r3, [pc, #388]	; (23794 <_http_client_handle_header+0x19c>)
   23610:	4798      	blx	r3
			return 0;
   23612:	2600      	movs	r6, #0
}
   23614:	0030      	movs	r0, r6
   23616:	b004      	add	sp, #16
   23618:	bc04      	pop	{r2}
   2361a:	4691      	mov	r9, r2
   2361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   2361e:	1ca1      	adds	r1, r4, #2
   23620:	0038      	movs	r0, r7
   23622:	4b5c      	ldr	r3, [pc, #368]	; (23794 <_http_client_handle_header+0x19c>)
   23624:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   23626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23628:	2b00      	cmp	r3, #0
   2362a:	d00a      	beq.n	23642 <_http_client_handle_header+0x4a>
   2362c:	22e4      	movs	r2, #228	; 0xe4
   2362e:	5ab9      	ldrh	r1, [r7, r2]
   23630:	2900      	cmp	r1, #0
   23632:	d006      	beq.n	23642 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   23634:	3a08      	subs	r2, #8
   23636:	58b8      	ldr	r0, [r7, r2]
   23638:	2800      	cmp	r0, #0
   2363a:	db07      	blt.n	2364c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   2363c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2363e:	4290      	cmp	r0, r2
   23640:	dc10      	bgt.n	23664 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   23642:	2201      	movs	r2, #1
   23644:	23d8      	movs	r3, #216	; 0xd8
   23646:	50fa      	str	r2, [r7, r3]
			return 1;
   23648:	2601      	movs	r6, #1
   2364a:	e7e3      	b.n	23614 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   2364c:	aa01      	add	r2, sp, #4
   2364e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   23650:	2101      	movs	r1, #1
   23652:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   23654:	2100      	movs	r1, #0
   23656:	20e0      	movs	r0, #224	; 0xe0
   23658:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   2365a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2365c:	3102      	adds	r1, #2
   2365e:	0038      	movs	r0, r7
   23660:	4798      	blx	r3
   23662:	e7ee      	b.n	23642 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   23664:	aa01      	add	r2, sp, #4
   23666:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   23668:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   2366a:	2100      	movs	r1, #0
   2366c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   2366e:	20e0      	movs	r0, #224	; 0xe0
   23670:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   23672:	3102      	adds	r1, #2
   23674:	0038      	movs	r0, r7
   23676:	4798      	blx	r3
   23678:	e7e3      	b.n	23642 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   2367a:	0020      	movs	r0, r4
   2367c:	3010      	adds	r0, #16
   2367e:	4b46      	ldr	r3, [pc, #280]	; (23798 <_http_client_handle_header+0x1a0>)
   23680:	4798      	blx	r3
   23682:	23dc      	movs	r3, #220	; 0xdc
   23684:	50f8      	str	r0, [r7, r3]
   23686:	e009      	b.n	2369c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23688:	3201      	adds	r2, #1
   2368a:	4295      	cmp	r5, r2
   2368c:	d006      	beq.n	2369c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   2368e:	7813      	ldrb	r3, [r2, #0]
   23690:	2b20      	cmp	r3, #32
   23692:	d12b      	bne.n	236ec <_http_client_handle_header+0xf4>
   23694:	e7f8      	b.n	23688 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   23696:	3a21      	subs	r2, #33	; 0x21
   23698:	3389      	adds	r3, #137	; 0x89
   2369a:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   2369c:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   2369e:	493f      	ldr	r1, [pc, #252]	; (2379c <_http_client_handle_header+0x1a4>)
   236a0:	0020      	movs	r0, r4
   236a2:	47c8      	blx	r9
   236a4:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   236a6:	d0b0      	beq.n	2360a <_http_client_handle_header+0x12>
   236a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   236aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   236ac:	4694      	mov	ip, r2
   236ae:	4463      	add	r3, ip
   236b0:	4298      	cmp	r0, r3
   236b2:	d2aa      	bcs.n	2360a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   236b4:	2202      	movs	r2, #2
   236b6:	4939      	ldr	r1, [pc, #228]	; (2379c <_http_client_handle_header+0x1a4>)
   236b8:	0020      	movs	r0, r4
   236ba:	4b39      	ldr	r3, [pc, #228]	; (237a0 <_http_client_handle_header+0x1a8>)
   236bc:	4798      	blx	r3
   236be:	2800      	cmp	r0, #0
   236c0:	d0ad      	beq.n	2361e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   236c2:	2210      	movs	r2, #16
   236c4:	4937      	ldr	r1, [pc, #220]	; (237a4 <_http_client_handle_header+0x1ac>)
   236c6:	0020      	movs	r0, r4
   236c8:	4b35      	ldr	r3, [pc, #212]	; (237a0 <_http_client_handle_header+0x1a8>)
   236ca:	4798      	blx	r3
   236cc:	2800      	cmp	r0, #0
   236ce:	d0d4      	beq.n	2367a <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   236d0:	2213      	movs	r2, #19
   236d2:	4935      	ldr	r1, [pc, #212]	; (237a8 <_http_client_handle_header+0x1b0>)
   236d4:	0020      	movs	r0, r4
   236d6:	4b32      	ldr	r3, [pc, #200]	; (237a0 <_http_client_handle_header+0x1a8>)
   236d8:	4798      	blx	r3
   236da:	1e06      	subs	r6, r0, #0
   236dc:	d110      	bne.n	23700 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   236de:	0022      	movs	r2, r4
   236e0:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   236e2:	4295      	cmp	r5, r2
   236e4:	d9da      	bls.n	2369c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   236e6:	7ce3      	ldrb	r3, [r4, #19]
   236e8:	2b20      	cmp	r3, #32
   236ea:	d0cd      	beq.n	23688 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   236ec:	2220      	movs	r2, #32
   236ee:	4393      	bics	r3, r2
   236f0:	2b43      	cmp	r3, #67	; 0x43
   236f2:	d0d0      	beq.n	23696 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   236f4:	2186      	movs	r1, #134	; 0x86
   236f6:	4249      	negs	r1, r1
   236f8:	0038      	movs	r0, r7
   236fa:	4b2c      	ldr	r3, [pc, #176]	; (237ac <_http_client_handle_header+0x1b4>)
   236fc:	4798      	blx	r3
					return 0;
   236fe:	e789      	b.n	23614 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   23700:	220c      	movs	r2, #12
   23702:	492b      	ldr	r1, [pc, #172]	; (237b0 <_http_client_handle_header+0x1b8>)
   23704:	0020      	movs	r0, r4
   23706:	4b26      	ldr	r3, [pc, #152]	; (237a0 <_http_client_handle_header+0x1a8>)
   23708:	4798      	blx	r3
   2370a:	2800      	cmp	r0, #0
   2370c:	d11d      	bne.n	2374a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   2370e:	0022      	movs	r2, r4
   23710:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23712:	4295      	cmp	r5, r2
   23714:	d9c2      	bls.n	2369c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23716:	7b23      	ldrb	r3, [r4, #12]
   23718:	2b20      	cmp	r3, #32
   2371a:	d009      	beq.n	23730 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   2371c:	2220      	movs	r2, #32
   2371e:	4393      	bics	r3, r2
   23720:	2b4b      	cmp	r3, #75	; 0x4b
   23722:	d00c      	beq.n	2373e <_http_client_handle_header+0x146>
					module->permanent = 0;
   23724:	2241      	movs	r2, #65	; 0x41
   23726:	5cbb      	ldrb	r3, [r7, r2]
   23728:	2102      	movs	r1, #2
   2372a:	438b      	bics	r3, r1
   2372c:	54bb      	strb	r3, [r7, r2]
   2372e:	e7b5      	b.n	2369c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23730:	3201      	adds	r2, #1
   23732:	4295      	cmp	r5, r2
   23734:	d0b2      	beq.n	2369c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23736:	7813      	ldrb	r3, [r2, #0]
   23738:	2b20      	cmp	r3, #32
   2373a:	d1ef      	bne.n	2371c <_http_client_handle_header+0x124>
   2373c:	e7f8      	b.n	23730 <_http_client_handle_header+0x138>
					module->permanent = 1;
   2373e:	3221      	adds	r2, #33	; 0x21
   23740:	5cbb      	ldrb	r3, [r7, r2]
   23742:	2102      	movs	r1, #2
   23744:	430b      	orrs	r3, r1
   23746:	54bb      	strb	r3, [r7, r2]
   23748:	e7a8      	b.n	2369c <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   2374a:	2205      	movs	r2, #5
   2374c:	4919      	ldr	r1, [pc, #100]	; (237b4 <_http_client_handle_header+0x1bc>)
   2374e:	0020      	movs	r0, r4
   23750:	4b13      	ldr	r3, [pc, #76]	; (237a0 <_http_client_handle_header+0x1a8>)
   23752:	4798      	blx	r3
   23754:	2800      	cmp	r0, #0
   23756:	d1a1      	bne.n	2369c <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   23758:	0020      	movs	r0, r4
   2375a:	3009      	adds	r0, #9
   2375c:	4b0e      	ldr	r3, [pc, #56]	; (23798 <_http_client_handle_header+0x1a0>)
   2375e:	4798      	blx	r3
   23760:	23e4      	movs	r3, #228	; 0xe4
   23762:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   23764:	2200      	movs	r2, #0
   23766:	3b08      	subs	r3, #8
   23768:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   2376a:	7963      	ldrb	r3, [r4, #5]
   2376c:	2b31      	cmp	r3, #49	; 0x31
   2376e:	d802      	bhi.n	23776 <_http_client_handle_header+0x17e>
   23770:	79e3      	ldrb	r3, [r4, #7]
   23772:	2b30      	cmp	r3, #48	; 0x30
   23774:	d905      	bls.n	23782 <_http_client_handle_header+0x18a>
				module->permanent = 1;
   23776:	2241      	movs	r2, #65	; 0x41
   23778:	5cbb      	ldrb	r3, [r7, r2]
   2377a:	2102      	movs	r1, #2
   2377c:	430b      	orrs	r3, r1
   2377e:	54bb      	strb	r3, [r7, r2]
   23780:	e78c      	b.n	2369c <_http_client_handle_header+0xa4>
				module->permanent = 0;
   23782:	2241      	movs	r2, #65	; 0x41
   23784:	5cbb      	ldrb	r3, [r7, r2]
   23786:	2102      	movs	r1, #2
   23788:	438b      	bics	r3, r1
   2378a:	54bb      	strb	r3, [r7, r2]
   2378c:	e786      	b.n	2369c <_http_client_handle_header+0xa4>
   2378e:	46c0      	nop			; (mov r8, r8)
   23790:	000266e5 	.word	0x000266e5
   23794:	000235d5 	.word	0x000235d5
   23798:	000261a1 	.word	0x000261a1
   2379c:	0002ae7c 	.word	0x0002ae7c
   237a0:	00026675 	.word	0x00026675
   237a4:	0002abfc 	.word	0x0002abfc
   237a8:	0002ab0c 	.word	0x0002ab0c
   237ac:	00022d7d 	.word	0x00022d7d
   237b0:	0002ab20 	.word	0x0002ab20
   237b4:	0002ab30 	.word	0x0002ab30

000237b8 <_http_client_handle_entity>:
{
   237b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   237ba:	46ce      	mov	lr, r9
   237bc:	b500      	push	{lr}
   237be:	b086      	sub	sp, #24
   237c0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   237c2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   237c4:	23dc      	movs	r3, #220	; 0xdc
   237c6:	58c3      	ldr	r3, [r0, r3]
   237c8:	2b00      	cmp	r3, #0
   237ca:	db69      	blt.n	238a0 <_http_client_handle_entity+0xe8>
   237cc:	6e02      	ldr	r2, [r0, #96]	; 0x60
   237ce:	4293      	cmp	r3, r2
   237d0:	dc2b      	bgt.n	2382a <_http_client_handle_entity+0x72>
	return 0;
   237d2:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   237d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   237d6:	4293      	cmp	r3, r2
   237d8:	dc4e      	bgt.n	23878 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   237da:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   237dc:	2e00      	cmp	r6, #0
   237de:	d003      	beq.n	237e8 <_http_client_handle_entity+0x30>
   237e0:	22e4      	movs	r2, #228	; 0xe4
   237e2:	5aa1      	ldrh	r1, [r4, r2]
   237e4:	2900      	cmp	r1, #0
   237e6:	d10e      	bne.n	23806 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   237e8:	2300      	movs	r3, #0
   237ea:	22d8      	movs	r2, #216	; 0xd8
   237ec:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   237ee:	320c      	adds	r2, #12
   237f0:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   237f2:	3341      	adds	r3, #65	; 0x41
   237f4:	5ce3      	ldrb	r3, [r4, r3]
   237f6:	079b      	lsls	r3, r3, #30
   237f8:	d40f      	bmi.n	2381a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   237fa:	2100      	movs	r1, #0
   237fc:	0020      	movs	r0, r4
   237fe:	4b71      	ldr	r3, [pc, #452]	; (239c4 <_http_client_handle_entity+0x20c>)
   23800:	4798      	blx	r3
	return 0;
   23802:	2000      	movs	r0, #0
   23804:	e038      	b.n	23878 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   23806:	aa03      	add	r2, sp, #12
   23808:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   2380a:	2100      	movs	r1, #0
   2380c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   2380e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   23810:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   23812:	3102      	adds	r1, #2
   23814:	0020      	movs	r0, r4
   23816:	47b0      	blx	r6
   23818:	e7e6      	b.n	237e8 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2381a:	23dc      	movs	r3, #220	; 0xdc
   2381c:	58e1      	ldr	r1, [r4, r3]
   2381e:	1869      	adds	r1, r5, r1
   23820:	0020      	movs	r0, r4
   23822:	4b69      	ldr	r3, [pc, #420]	; (239c8 <_http_client_handle_entity+0x210>)
   23824:	4798      	blx	r3
				return module->recved_size;
   23826:	6c60      	ldr	r0, [r4, #68]	; 0x44
   23828:	e026      	b.n	23878 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   2382a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2382c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   2382e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   23830:	21e0      	movs	r1, #224	; 0xe0
   23832:	5840      	ldr	r0, [r0, r1]
   23834:	4684      	mov	ip, r0
   23836:	4462      	add	r2, ip
   23838:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   2383a:	4293      	cmp	r3, r2
   2383c:	dc20      	bgt.n	23880 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   2383e:	2300      	movs	r3, #0
   23840:	22d8      	movs	r2, #216	; 0xd8
   23842:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   23844:	320c      	adds	r2, #12
   23846:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   23848:	3ae3      	subs	r2, #227	; 0xe3
   2384a:	ab03      	add	r3, sp, #12
   2384c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   2384e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23850:	2b00      	cmp	r3, #0
   23852:	d007      	beq.n	23864 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   23854:	ae03      	add	r6, sp, #12
   23856:	0032      	movs	r2, r6
   23858:	2103      	movs	r1, #3
   2385a:	0020      	movs	r0, r4
   2385c:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   2385e:	7a33      	ldrb	r3, [r6, #8]
   23860:	2b01      	cmp	r3, #1
   23862:	d103      	bne.n	2386c <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   23864:	2341      	movs	r3, #65	; 0x41
   23866:	5ce3      	ldrb	r3, [r4, r3]
   23868:	079b      	lsls	r3, r3, #30
   2386a:	d510      	bpl.n	2388e <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   2386c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2386e:	18e9      	adds	r1, r5, r3
   23870:	0020      	movs	r0, r4
   23872:	4b55      	ldr	r3, [pc, #340]	; (239c8 <_http_client_handle_entity+0x210>)
   23874:	4798      	blx	r3
	return 0;
   23876:	2000      	movs	r0, #0
}
   23878:	b006      	add	sp, #24
   2387a:	bc04      	pop	{r2}
   2387c:	4691      	mov	r9, r2
   2387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   23880:	2200      	movs	r2, #0
   23882:	ab03      	add	r3, sp, #12
   23884:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   23886:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23888:	2b00      	cmp	r3, #0
   2388a:	d0ef      	beq.n	2386c <_http_client_handle_entity+0xb4>
   2388c:	e7e2      	b.n	23854 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   2388e:	484f      	ldr	r0, [pc, #316]	; (239cc <_http_client_handle_entity+0x214>)
   23890:	4b4f      	ldr	r3, [pc, #316]	; (239d0 <_http_client_handle_entity+0x218>)
   23892:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   23894:	2100      	movs	r1, #0
   23896:	0020      	movs	r0, r4
   23898:	4b4a      	ldr	r3, [pc, #296]	; (239c4 <_http_client_handle_entity+0x20c>)
   2389a:	4798      	blx	r3
					return 0;
   2389c:	2000      	movs	r0, #0
   2389e:	e7eb      	b.n	23878 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   238a0:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   238a2:	2300      	movs	r3, #0
   238a4:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   238a6:	26e0      	movs	r6, #224	; 0xe0
   238a8:	e00a      	b.n	238c0 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   238aa:	2341      	movs	r3, #65	; 0x41
   238ac:	5ce3      	ldrb	r3, [r4, r3]
   238ae:	079b      	lsls	r3, r3, #30
   238b0:	d51b      	bpl.n	238ea <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   238b2:	1ca9      	adds	r1, r5, #2
   238b4:	0020      	movs	r0, r4
   238b6:	4b44      	ldr	r3, [pc, #272]	; (239c8 <_http_client_handle_entity+0x210>)
   238b8:	4798      	blx	r3
	} while(module->recved_size > 0);
   238ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   238bc:	2b00      	cmp	r3, #0
   238be:	d073      	beq.n	239a8 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   238c0:	59a3      	ldr	r3, [r4, r6]
   238c2:	2b00      	cmp	r3, #0
   238c4:	db30      	blt.n	23928 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   238c6:	d116      	bne.n	238f6 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   238c8:	22d8      	movs	r2, #216	; 0xd8
   238ca:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   238cc:	320c      	adds	r2, #12
   238ce:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   238d0:	3ae3      	subs	r2, #227	; 0xe3
   238d2:	4669      	mov	r1, sp
   238d4:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   238d6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   238d8:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   238da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   238dc:	2b00      	cmp	r3, #0
   238de:	d0e4      	beq.n	238aa <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   238e0:	466a      	mov	r2, sp
   238e2:	2103      	movs	r1, #3
   238e4:	0020      	movs	r0, r4
   238e6:	4798      	blx	r3
   238e8:	e7df      	b.n	238aa <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   238ea:	2100      	movs	r1, #0
   238ec:	0020      	movs	r0, r4
   238ee:	4b35      	ldr	r3, [pc, #212]	; (239c4 <_http_client_handle_entity+0x20c>)
   238f0:	4798      	blx	r3
	return 0;
   238f2:	2000      	movs	r0, #0
   238f4:	e7c0      	b.n	23878 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   238f6:	42bb      	cmp	r3, r7
   238f8:	dcdf      	bgt.n	238ba <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   238fa:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   238fc:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   238fe:	2300      	movs	r3, #0
   23900:	466a      	mov	r2, sp
   23902:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   23904:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23906:	2b00      	cmp	r3, #0
   23908:	d002      	beq.n	23910 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2390a:	2103      	movs	r1, #3
   2390c:	0020      	movs	r0, r4
   2390e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   23910:	59a3      	ldr	r3, [r4, r6]
   23912:	1c99      	adds	r1, r3, #2
   23914:	1869      	adds	r1, r5, r1
   23916:	0020      	movs	r0, r4
   23918:	4b2b      	ldr	r3, [pc, #172]	; (239c8 <_http_client_handle_entity+0x210>)
   2391a:	4798      	blx	r3
				length = (int)module->recved_size;
   2391c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   2391e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   23920:	2301      	movs	r3, #1
   23922:	425b      	negs	r3, r3
   23924:	51a3      	str	r3, [r4, r6]
   23926:	e7c8      	b.n	238ba <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   23928:	2300      	movs	r3, #0
   2392a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   2392c:	2f00      	cmp	r7, #0
   2392e:	dd04      	ble.n	2393a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   23930:	782b      	ldrb	r3, [r5, #0]
   23932:	2b0a      	cmp	r3, #10
   23934:	d11c      	bne.n	23970 <_http_client_handle_entity+0x1b8>
					buffer++;
   23936:	3501      	adds	r5, #1
					length--;
   23938:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   2393a:	59a3      	ldr	r3, [r4, r6]
   2393c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2393e:	4293      	cmp	r3, r2
   23940:	dc39      	bgt.n	239b6 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   23942:	2f00      	cmp	r7, #0
   23944:	d1b9      	bne.n	238ba <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   23946:	2201      	movs	r2, #1
   23948:	4252      	negs	r2, r2
   2394a:	23e0      	movs	r3, #224	; 0xe0
   2394c:	50e2      	str	r2, [r4, r3]
   2394e:	e7d0      	b.n	238f2 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   23950:	001a      	movs	r2, r3
   23952:	3a61      	subs	r2, #97	; 0x61
   23954:	2a05      	cmp	r2, #5
   23956:	d818      	bhi.n	2398a <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   23958:	59a2      	ldr	r2, [r4, r6]
   2395a:	0112      	lsls	r2, r2, #4
   2395c:	18d3      	adds	r3, r2, r3
   2395e:	3b61      	subs	r3, #97	; 0x61
   23960:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   23962:	3501      	adds	r5, #1
   23964:	3f01      	subs	r7, #1
   23966:	2f00      	cmp	r7, #0
   23968:	d020      	beq.n	239ac <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   2396a:	782b      	ldrb	r3, [r5, #0]
   2396c:	2b0a      	cmp	r3, #10
   2396e:	d0e2      	beq.n	23936 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   23970:	464a      	mov	r2, r9
   23972:	2a00      	cmp	r2, #0
   23974:	d1f5      	bne.n	23962 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   23976:	001a      	movs	r2, r3
   23978:	3a30      	subs	r2, #48	; 0x30
   2397a:	2a09      	cmp	r2, #9
   2397c:	d8e8      	bhi.n	23950 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   2397e:	59a2      	ldr	r2, [r4, r6]
   23980:	0112      	lsls	r2, r2, #4
   23982:	18d3      	adds	r3, r2, r3
   23984:	3b30      	subs	r3, #48	; 0x30
   23986:	51a3      	str	r3, [r4, r6]
   23988:	e7eb      	b.n	23962 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   2398a:	001a      	movs	r2, r3
   2398c:	3a41      	subs	r2, #65	; 0x41
   2398e:	2a05      	cmp	r2, #5
   23990:	d805      	bhi.n	2399e <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   23992:	59a2      	ldr	r2, [r4, r6]
   23994:	0112      	lsls	r2, r2, #4
   23996:	18d3      	adds	r3, r2, r3
   23998:	3b41      	subs	r3, #65	; 0x41
   2399a:	51a3      	str	r3, [r4, r6]
   2399c:	e7e1      	b.n	23962 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   2399e:	3b3b      	subs	r3, #59	; 0x3b
   239a0:	425a      	negs	r2, r3
   239a2:	415a      	adcs	r2, r3
   239a4:	4691      	mov	r9, r2
   239a6:	e7dc      	b.n	23962 <_http_client_handle_entity+0x1aa>
	return 0;
   239a8:	2000      	movs	r0, #0
   239aa:	e765      	b.n	23878 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   239ac:	23e0      	movs	r3, #224	; 0xe0
   239ae:	58e3      	ldr	r3, [r4, r3]
   239b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   239b2:	4293      	cmp	r3, r2
   239b4:	ddc7      	ble.n	23946 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   239b6:	218b      	movs	r1, #139	; 0x8b
   239b8:	4249      	negs	r1, r1
   239ba:	0020      	movs	r0, r4
   239bc:	4b01      	ldr	r3, [pc, #4]	; (239c4 <_http_client_handle_entity+0x20c>)
   239be:	4798      	blx	r3
   239c0:	e797      	b.n	238f2 <_http_client_handle_entity+0x13a>
   239c2:	46c0      	nop			; (mov r8, r8)
   239c4:	00022d7d 	.word	0x00022d7d
   239c8:	000235d5 	.word	0x000235d5
   239cc:	0002ab08 	.word	0x0002ab08
   239d0:	00026475 	.word	0x00026475

000239d4 <_http_client_handle_response>:
{
   239d4:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   239d6:	23d8      	movs	r3, #216	; 0xd8
   239d8:	58c3      	ldr	r3, [r0, r3]
   239da:	2b00      	cmp	r3, #0
   239dc:	d003      	beq.n	239e6 <_http_client_handle_response+0x12>
   239de:	2b01      	cmp	r3, #1
   239e0:	d004      	beq.n	239ec <_http_client_handle_response+0x18>
	return 0;
   239e2:	2000      	movs	r0, #0
   239e4:	e001      	b.n	239ea <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   239e6:	4b03      	ldr	r3, [pc, #12]	; (239f4 <_http_client_handle_response+0x20>)
   239e8:	4798      	blx	r3
}
   239ea:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   239ec:	4b02      	ldr	r3, [pc, #8]	; (239f8 <_http_client_handle_response+0x24>)
   239ee:	4798      	blx	r3
   239f0:	e7fb      	b.n	239ea <_http_client_handle_response+0x16>
   239f2:	46c0      	nop			; (mov r8, r8)
   239f4:	000235f9 	.word	0x000235f9
   239f8:	000237b9 	.word	0x000237b9

000239fc <_http_client_recved_packet>:
{
   239fc:	b570      	push	{r4, r5, r6, lr}
   239fe:	0004      	movs	r4, r0
	module->recved_size += read_len;
   23a00:	6c43      	ldr	r3, [r0, #68]	; 0x44
   23a02:	469c      	mov	ip, r3
   23a04:	4461      	add	r1, ip
   23a06:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   23a08:	2358      	movs	r3, #88	; 0x58
   23a0a:	5ac3      	ldrh	r3, [r0, r3]
   23a0c:	2b00      	cmp	r3, #0
   23a0e:	d105      	bne.n	23a1c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   23a10:	4d05      	ldr	r5, [pc, #20]	; (23a28 <_http_client_recved_packet+0x2c>)
   23a12:	0020      	movs	r0, r4
   23a14:	47a8      	blx	r5
   23a16:	2800      	cmp	r0, #0
   23a18:	d1fb      	bne.n	23a12 <_http_client_recved_packet+0x16>
}
   23a1a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   23a1c:	6c81      	ldr	r1, [r0, #72]	; 0x48
   23a1e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   23a20:	4b02      	ldr	r3, [pc, #8]	; (23a2c <_http_client_recved_packet+0x30>)
   23a22:	4798      	blx	r3
   23a24:	e7f4      	b.n	23a10 <_http_client_recved_packet+0x14>
   23a26:	46c0      	nop			; (mov r8, r8)
   23a28:	000239d5 	.word	0x000239d5
   23a2c:	00023da9 	.word	0x00023da9

00023a30 <http_client_socket_event_handler>:
{
   23a30:	b510      	push	{r4, lr}
   23a32:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   23a34:	0080      	lsls	r0, r0, #2
   23a36:	4b65      	ldr	r3, [pc, #404]	; (23bcc <http_client_socket_event_handler+0x19c>)
   23a38:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   23a3a:	2c00      	cmp	r4, #0
   23a3c:	d006      	beq.n	23a4c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   23a3e:	2906      	cmp	r1, #6
   23a40:	d051      	beq.n	23ae6 <http_client_socket_event_handler+0xb6>
   23a42:	2907      	cmp	r1, #7
   23a44:	d100      	bne.n	23a48 <http_client_socket_event_handler+0x18>
   23a46:	e08a      	b.n	23b5e <http_client_socket_event_handler+0x12e>
   23a48:	2905      	cmp	r1, #5
   23a4a:	d001      	beq.n	23a50 <http_client_socket_event_handler+0x20>
}
   23a4c:	b004      	add	sp, #16
   23a4e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   23a50:	2301      	movs	r3, #1
   23a52:	56d3      	ldrsb	r3, [r2, r3]
   23a54:	1e1a      	subs	r2, r3, #0
   23a56:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   23a58:	db15      	blt.n	23a86 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   23a5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23a5c:	2b00      	cmp	r3, #0
   23a5e:	d003      	beq.n	23a68 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   23a60:	aa01      	add	r2, sp, #4
   23a62:	2100      	movs	r1, #0
   23a64:	0020      	movs	r0, r4
   23a66:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   23a68:	2303      	movs	r3, #3
   23a6a:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   23a6c:	3355      	adds	r3, #85	; 0x55
   23a6e:	5ae2      	ldrh	r2, [r4, r3]
   23a70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   23a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
   23a74:	4b56      	ldr	r3, [pc, #344]	; (23bd0 <http_client_socket_event_handler+0x1a0>)
   23a76:	4798      	blx	r3
    		_http_client_recv_packet(module);
   23a78:	0020      	movs	r0, r4
   23a7a:	4b56      	ldr	r3, [pc, #344]	; (23bd4 <http_client_socket_event_handler+0x1a4>)
   23a7c:	4798      	blx	r3
			_http_client_request(module);
   23a7e:	0020      	movs	r0, r4
   23a80:	4b55      	ldr	r3, [pc, #340]	; (23bd8 <http_client_socket_event_handler+0x1a8>)
   23a82:	4798      	blx	r3
   23a84:	e7e2      	b.n	23a4c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23a86:	330e      	adds	r3, #14
   23a88:	b2d9      	uxtb	r1, r3
   23a8a:	290e      	cmp	r1, #14
   23a8c:	d81e      	bhi.n	23acc <http_client_socket_event_handler+0x9c>
   23a8e:	008b      	lsls	r3, r1, #2
   23a90:	4952      	ldr	r1, [pc, #328]	; (23bdc <http_client_socket_event_handler+0x1ac>)
   23a92:	58cb      	ldr	r3, [r1, r3]
   23a94:	469f      	mov	pc, r3
			return -ENOENT;
   23a96:	2102      	movs	r1, #2
   23a98:	4249      	negs	r1, r1
   23a9a:	e01d      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   23a9c:	2170      	movs	r1, #112	; 0x70
   23a9e:	4249      	negs	r1, r1
   23aa0:	e01a      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   23aa2:	210c      	movs	r1, #12
   23aa4:	4249      	negs	r1, r1
   23aa6:	e017      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   23aa8:	2116      	movs	r1, #22
   23aaa:	4249      	negs	r1, r1
   23aac:	e014      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   23aae:	210c      	movs	r1, #12
   23ab0:	4249      	negs	r1, r1
   23ab2:	e011      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   23ab4:	2179      	movs	r1, #121	; 0x79
   23ab6:	4249      	negs	r1, r1
   23ab8:	e00e      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   23aba:	2168      	movs	r1, #104	; 0x68
   23abc:	4249      	negs	r1, r1
   23abe:	e00b      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   23ac0:	210b      	movs	r1, #11
   23ac2:	4249      	negs	r1, r1
   23ac4:	e008      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   23ac6:	2110      	movs	r1, #16
   23ac8:	4249      	negs	r1, r1
   23aca:	e005      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   23acc:	2a00      	cmp	r2, #0
   23ace:	db07      	blt.n	23ae0 <http_client_socket_event_handler+0xb0>
			return 0;
   23ad0:	2100      	movs	r1, #0
   23ad2:	e001      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
			return -EIO;
   23ad4:	2105      	movs	r1, #5
   23ad6:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   23ad8:	0020      	movs	r0, r4
   23ada:	4b41      	ldr	r3, [pc, #260]	; (23be0 <http_client_socket_event_handler+0x1b0>)
   23adc:	4798      	blx	r3
   23ade:	e7b5      	b.n	23a4c <http_client_socket_event_handler+0x1c>
				return -EIO;
   23ae0:	2105      	movs	r1, #5
   23ae2:	4249      	negs	r1, r1
   23ae4:	e7f8      	b.n	23ad8 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   23ae6:	2304      	movs	r3, #4
   23ae8:	5ed1      	ldrsh	r1, [r2, r3]
   23aea:	2900      	cmp	r1, #0
   23aec:	dd06      	ble.n	23afc <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   23aee:	0020      	movs	r0, r4
   23af0:	4b3c      	ldr	r3, [pc, #240]	; (23be4 <http_client_socket_event_handler+0x1b4>)
   23af2:	4798      	blx	r3
		_http_client_recv_packet(module);
   23af4:	0020      	movs	r0, r4
   23af6:	4b37      	ldr	r3, [pc, #220]	; (23bd4 <http_client_socket_event_handler+0x1a4>)
   23af8:	4798      	blx	r3
		break;
   23afa:	e7a7      	b.n	23a4c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23afc:	000b      	movs	r3, r1
   23afe:	330e      	adds	r3, #14
   23b00:	b29a      	uxth	r2, r3
   23b02:	2a0e      	cmp	r2, #14
   23b04:	d81e      	bhi.n	23b44 <http_client_socket_event_handler+0x114>
   23b06:	0093      	lsls	r3, r2, #2
   23b08:	4a37      	ldr	r2, [pc, #220]	; (23be8 <http_client_socket_event_handler+0x1b8>)
   23b0a:	58d3      	ldr	r3, [r2, r3]
   23b0c:	469f      	mov	pc, r3
			return -ENOENT;
   23b0e:	2102      	movs	r1, #2
   23b10:	4249      	negs	r1, r1
   23b12:	e01d      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   23b14:	2170      	movs	r1, #112	; 0x70
   23b16:	4249      	negs	r1, r1
   23b18:	e01a      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23b1a:	210c      	movs	r1, #12
   23b1c:	4249      	negs	r1, r1
   23b1e:	e017      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   23b20:	2116      	movs	r1, #22
   23b22:	4249      	negs	r1, r1
   23b24:	e014      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23b26:	210c      	movs	r1, #12
   23b28:	4249      	negs	r1, r1
   23b2a:	e011      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   23b2c:	2179      	movs	r1, #121	; 0x79
   23b2e:	4249      	negs	r1, r1
   23b30:	e00e      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   23b32:	2168      	movs	r1, #104	; 0x68
   23b34:	4249      	negs	r1, r1
   23b36:	e00b      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   23b38:	210b      	movs	r1, #11
   23b3a:	4249      	negs	r1, r1
   23b3c:	e008      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   23b3e:	2110      	movs	r1, #16
   23b40:	4249      	negs	r1, r1
   23b42:	e005      	b.n	23b50 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   23b44:	2900      	cmp	r1, #0
   23b46:	db07      	blt.n	23b58 <http_client_socket_event_handler+0x128>
			return 0;
   23b48:	2100      	movs	r1, #0
   23b4a:	e001      	b.n	23b50 <http_client_socket_event_handler+0x120>
			return -EIO;
   23b4c:	2105      	movs	r1, #5
   23b4e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   23b50:	0020      	movs	r0, r4
   23b52:	4b23      	ldr	r3, [pc, #140]	; (23be0 <http_client_socket_event_handler+0x1b0>)
   23b54:	4798      	blx	r3
   23b56:	e7cd      	b.n	23af4 <http_client_socket_event_handler+0xc4>
				return -EIO;
   23b58:	2105      	movs	r1, #5
   23b5a:	4249      	negs	r1, r1
   23b5c:	e7f8      	b.n	23b50 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   23b5e:	2300      	movs	r3, #0
   23b60:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   23b62:	2b00      	cmp	r3, #0
   23b64:	db08      	blt.n	23b78 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   23b66:	0020      	movs	r0, r4
   23b68:	4b1b      	ldr	r3, [pc, #108]	; (23bd8 <http_client_socket_event_handler+0x1a8>)
   23b6a:	4798      	blx	r3
		module->sending = 0;
   23b6c:	2241      	movs	r2, #65	; 0x41
   23b6e:	5ca3      	ldrb	r3, [r4, r2]
   23b70:	2101      	movs	r1, #1
   23b72:	438b      	bics	r3, r1
   23b74:	54a3      	strb	r3, [r4, r2]
    	break;
   23b76:	e769      	b.n	23a4c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23b78:	330e      	adds	r3, #14
   23b7a:	b29a      	uxth	r2, r3
   23b7c:	2a0d      	cmp	r2, #13
   23b7e:	d81e      	bhi.n	23bbe <http_client_socket_event_handler+0x18e>
   23b80:	0093      	lsls	r3, r2, #2
   23b82:	4a1a      	ldr	r2, [pc, #104]	; (23bec <http_client_socket_event_handler+0x1bc>)
   23b84:	58d3      	ldr	r3, [r2, r3]
   23b86:	469f      	mov	pc, r3
			return -ENOENT;
   23b88:	2102      	movs	r1, #2
   23b8a:	4249      	negs	r1, r1
   23b8c:	e019      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   23b8e:	2170      	movs	r1, #112	; 0x70
   23b90:	4249      	negs	r1, r1
   23b92:	e016      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23b94:	210c      	movs	r1, #12
   23b96:	4249      	negs	r1, r1
   23b98:	e013      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -EINVAL;
   23b9a:	2116      	movs	r1, #22
   23b9c:	4249      	negs	r1, r1
   23b9e:	e010      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23ba0:	210c      	movs	r1, #12
   23ba2:	4249      	negs	r1, r1
   23ba4:	e00d      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   23ba6:	2179      	movs	r1, #121	; 0x79
   23ba8:	4249      	negs	r1, r1
   23baa:	e00a      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   23bac:	2168      	movs	r1, #104	; 0x68
   23bae:	4249      	negs	r1, r1
   23bb0:	e007      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   23bb2:	210b      	movs	r1, #11
   23bb4:	4249      	negs	r1, r1
   23bb6:	e004      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   23bb8:	2110      	movs	r1, #16
   23bba:	4249      	negs	r1, r1
   23bbc:	e001      	b.n	23bc2 <http_client_socket_event_handler+0x192>
			return -EIO;
   23bbe:	2105      	movs	r1, #5
   23bc0:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   23bc2:	0020      	movs	r0, r4
   23bc4:	4b06      	ldr	r3, [pc, #24]	; (23be0 <http_client_socket_event_handler+0x1b0>)
   23bc6:	4798      	blx	r3
   23bc8:	e7d0      	b.n	23b6c <http_client_socket_event_handler+0x13c>
   23bca:	46c0      	nop			; (mov r8, r8)
   23bcc:	20004130 	.word	0x20004130
   23bd0:	00023d7d 	.word	0x00023d7d
   23bd4:	0002359d 	.word	0x0002359d
   23bd8:	00022e95 	.word	0x00022e95
   23bdc:	0002aa48 	.word	0x0002aa48
   23be0:	00022d7d 	.word	0x00022d7d
   23be4:	000239fd 	.word	0x000239fd
   23be8:	0002aa84 	.word	0x0002aa84
   23bec:	0002aac0 	.word	0x0002aac0

00023bf0 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   23bf0:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   23bf2:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   23bf4:	2200      	movs	r2, #0
   23bf6:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   23bf8:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   23bfa:	9b00      	ldr	r3, [sp, #0]
   23bfc:	60c3      	str	r3, [r0, #12]
}
   23bfe:	4770      	bx	lr

00023c00 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   23c00:	b510      	push	{r4, lr}
   23c02:	0004      	movs	r4, r0
	if(writer->written > 0) {
   23c04:	6842      	ldr	r2, [r0, #4]
   23c06:	2a00      	cmp	r2, #0
   23c08:	d100      	bne.n	23c0c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   23c0a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   23c0c:	6901      	ldr	r1, [r0, #16]
   23c0e:	68c0      	ldr	r0, [r0, #12]
   23c10:	68a3      	ldr	r3, [r4, #8]
   23c12:	4798      	blx	r3
		writer->written = 0;
   23c14:	2300      	movs	r3, #0
   23c16:	6063      	str	r3, [r4, #4]
}
   23c18:	e7f7      	b.n	23c0a <stream_writer_send_remain+0xa>
	...

00023c1c <stream_writer_send_8>:
{
   23c1c:	b570      	push	{r4, r5, r6, lr}
   23c1e:	0004      	movs	r4, r0
   23c20:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   23c22:	6803      	ldr	r3, [r0, #0]
   23c24:	6842      	ldr	r2, [r0, #4]
   23c26:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   23c28:	2b00      	cmp	r3, #0
   23c2a:	dd05      	ble.n	23c38 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   23c2c:	6922      	ldr	r2, [r4, #16]
   23c2e:	6863      	ldr	r3, [r4, #4]
   23c30:	1c59      	adds	r1, r3, #1
   23c32:	6061      	str	r1, [r4, #4]
   23c34:	54d5      	strb	r5, [r2, r3]
}
   23c36:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   23c38:	4b01      	ldr	r3, [pc, #4]	; (23c40 <stream_writer_send_8+0x24>)
   23c3a:	4798      	blx	r3
   23c3c:	e7f6      	b.n	23c2c <stream_writer_send_8+0x10>
   23c3e:	46c0      	nop			; (mov r8, r8)
   23c40:	00023c01 	.word	0x00023c01

00023c44 <stream_writer_send_buffer>:
{
   23c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c46:	0006      	movs	r6, r0
   23c48:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   23c4a:	2a00      	cmp	r2, #0
   23c4c:	d008      	beq.n	23c60 <stream_writer_send_buffer+0x1c>
   23c4e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   23c50:	4f04      	ldr	r7, [pc, #16]	; (23c64 <stream_writer_send_buffer+0x20>)
   23c52:	2100      	movs	r1, #0
   23c54:	5661      	ldrsb	r1, [r4, r1]
   23c56:	0030      	movs	r0, r6
   23c58:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   23c5a:	3401      	adds	r4, #1
   23c5c:	42a5      	cmp	r5, r4
   23c5e:	d1f8      	bne.n	23c52 <stream_writer_send_buffer+0xe>
}
   23c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23c62:	46c0      	nop			; (mov r8, r8)
   23c64:	00023c1d 	.word	0x00023c1d

00023c68 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   23c68:	4a02      	ldr	r2, [pc, #8]	; (23c74 <sw_timer_tcc_callback+0xc>)
   23c6a:	6813      	ldr	r3, [r2, #0]
   23c6c:	3301      	adds	r3, #1
   23c6e:	6013      	str	r3, [r2, #0]
}
   23c70:	4770      	bx	lr
   23c72:	46c0      	nop			; (mov r8, r8)
   23c74:	2000414c 	.word	0x2000414c

00023c78 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   23c78:	2364      	movs	r3, #100	; 0x64
   23c7a:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   23c7c:	2300      	movs	r3, #0
   23c7e:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   23c80:	7043      	strb	r3, [r0, #1]
}
   23c82:	4770      	bx	lr

00023c84 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   23c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c86:	46c6      	mov	lr, r8
   23c88:	b500      	push	{lr}
   23c8a:	b0ac      	sub	sp, #176	; 0xb0
   23c8c:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   23c8e:	466e      	mov	r6, sp
   23c90:	4b1d      	ldr	r3, [pc, #116]	; (23d08 <sw_timer_init+0x84>)
   23c92:	466a      	mov	r2, sp
   23c94:	cb92      	ldmia	r3!, {r1, r4, r7}
   23c96:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   23c98:	886b      	ldrh	r3, [r5, #2]
   23c9a:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   23c9c:	3014      	adds	r0, #20
   23c9e:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   23ca0:	782b      	ldrb	r3, [r5, #0]
   23ca2:	009b      	lsls	r3, r3, #2
   23ca4:	5999      	ldr	r1, [r3, r6]
   23ca6:	0017      	movs	r7, r2
   23ca8:	0010      	movs	r0, r2
   23caa:	4b18      	ldr	r3, [pc, #96]	; (23d0c <sw_timer_init+0x88>)
   23cac:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   23cae:	2000      	movs	r0, #0
   23cb0:	4b17      	ldr	r3, [pc, #92]	; (23d10 <sw_timer_init+0x8c>)
   23cb2:	4798      	blx	r3
   23cb4:	4b17      	ldr	r3, [pc, #92]	; (23d14 <sw_timer_init+0x90>)
   23cb6:	7a1b      	ldrb	r3, [r3, #8]
   23cb8:	b2db      	uxtb	r3, r3
   23cba:	40d8      	lsrs	r0, r3
   23cbc:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   23cbe:	8869      	ldrh	r1, [r5, #2]
   23cc0:	20fa      	movs	r0, #250	; 0xfa
   23cc2:	0200      	lsls	r0, r0, #8
   23cc4:	4b14      	ldr	r3, [pc, #80]	; (23d18 <sw_timer_init+0x94>)
   23cc6:	4798      	blx	r3
   23cc8:	0001      	movs	r1, r0
   23cca:	4640      	mov	r0, r8
   23ccc:	4b13      	ldr	r3, [pc, #76]	; (23d1c <sw_timer_init+0x98>)
   23cce:	4798      	blx	r3
   23cd0:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   23cd2:	2305      	movs	r3, #5
   23cd4:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   23cd6:	782b      	ldrb	r3, [r5, #0]
   23cd8:	009b      	lsls	r3, r3, #2
   23cda:	5999      	ldr	r1, [r3, r6]
   23cdc:	003a      	movs	r2, r7
   23cde:	0020      	movs	r0, r4
   23ce0:	4b0f      	ldr	r3, [pc, #60]	; (23d20 <sw_timer_init+0x9c>)
   23ce2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23ce4:	786a      	ldrb	r2, [r5, #1]
   23ce6:	3208      	adds	r2, #8
   23ce8:	b2d2      	uxtb	r2, r2
   23cea:	490e      	ldr	r1, [pc, #56]	; (23d24 <sw_timer_init+0xa0>)
   23cec:	0020      	movs	r0, r4
   23cee:	4b0e      	ldr	r3, [pc, #56]	; (23d28 <sw_timer_init+0xa4>)
   23cf0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23cf2:	7869      	ldrb	r1, [r5, #1]
   23cf4:	3108      	adds	r1, #8
   23cf6:	b2c9      	uxtb	r1, r1
   23cf8:	0020      	movs	r0, r4
   23cfa:	4b0c      	ldr	r3, [pc, #48]	; (23d2c <sw_timer_init+0xa8>)
   23cfc:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   23cfe:	b02c      	add	sp, #176	; 0xb0
   23d00:	bc04      	pop	{r2}
   23d02:	4690      	mov	r8, r2
   23d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23d06:	46c0      	nop			; (mov r8, r8)
   23d08:	0002ac30 	.word	0x0002ac30
   23d0c:	0001f309 	.word	0x0001f309
   23d10:	0001f035 	.word	0x0001f035
   23d14:	40000400 	.word	0x40000400
   23d18:	000240fd 	.word	0x000240fd
   23d1c:	00023fe9 	.word	0x00023fe9
   23d20:	0001f455 	.word	0x0001f455
   23d24:	00023c69 	.word	0x00023c69
   23d28:	0001f861 	.word	0x0001f861
   23d2c:	0001f879 	.word	0x0001f879

00023d30 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   23d30:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   23d32:	2102      	movs	r1, #2
   23d34:	6893      	ldr	r3, [r2, #8]
   23d36:	4219      	tst	r1, r3
   23d38:	d1fc      	bne.n	23d34 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   23d3a:	6813      	ldr	r3, [r2, #0]
   23d3c:	2102      	movs	r1, #2
   23d3e:	430b      	orrs	r3, r1
   23d40:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   23d42:	4770      	bx	lr

00023d44 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   23d44:	b570      	push	{r4, r5, r6, lr}
   23d46:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   23d48:	7805      	ldrb	r5, [r0, #0]
   23d4a:	07e8      	lsls	r0, r5, #31
   23d4c:	d502      	bpl.n	23d54 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   23d4e:	2001      	movs	r0, #1
   23d50:	4240      	negs	r0, r0
}
   23d52:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   23d54:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   23d56:	0029      	movs	r1, r5
   23d58:	2002      	movs	r0, #2
   23d5a:	4381      	bics	r1, r0
   23d5c:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   23d5e:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   23d60:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23d62:	0018      	movs	r0, r3
   23d64:	4b04      	ldr	r3, [pc, #16]	; (23d78 <sw_timer_register_callback+0x34>)
   23d66:	4798      	blx	r3
   23d68:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   23d6a:	7823      	ldrb	r3, [r4, #0]
   23d6c:	2201      	movs	r2, #1
   23d6e:	4313      	orrs	r3, r2
   23d70:	7023      	strb	r3, [r4, #0]
			return index;
   23d72:	2000      	movs	r0, #0
   23d74:	e7ed      	b.n	23d52 <sw_timer_register_callback+0xe>
   23d76:	46c0      	nop			; (mov r8, r8)
   23d78:	00023fe9 	.word	0x00023fe9

00023d7c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   23d7c:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   23d7e:	008b      	lsls	r3, r1, #2
   23d80:	185d      	adds	r5, r3, r1
   23d82:	00ad      	lsls	r5, r5, #2
   23d84:	5c29      	ldrb	r1, [r5, r0]
   23d86:	2602      	movs	r6, #2
   23d88:	4331      	orrs	r1, r6
   23d8a:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   23d8c:	1944      	adds	r4, r0, r5
   23d8e:	6d41      	ldr	r1, [r0, #84]	; 0x54
   23d90:	0010      	movs	r0, r2
   23d92:	4b03      	ldr	r3, [pc, #12]	; (23da0 <sw_timer_enable_callback+0x24>)
   23d94:	4798      	blx	r3
   23d96:	4b03      	ldr	r3, [pc, #12]	; (23da4 <sw_timer_enable_callback+0x28>)
   23d98:	681b      	ldr	r3, [r3, #0]
   23d9a:	18c0      	adds	r0, r0, r3
   23d9c:	6120      	str	r0, [r4, #16]
}
   23d9e:	bd70      	pop	{r4, r5, r6, pc}
   23da0:	00023fe9 	.word	0x00023fe9
   23da4:	2000414c 	.word	0x2000414c

00023da8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   23da8:	008b      	lsls	r3, r1, #2
   23daa:	1859      	adds	r1, r3, r1
   23dac:	0089      	lsls	r1, r1, #2
   23dae:	5c0b      	ldrb	r3, [r1, r0]
   23db0:	2202      	movs	r2, #2
   23db2:	4393      	bics	r3, r2
   23db4:	540b      	strb	r3, [r1, r0]
}
   23db6:	4770      	bx	lr

00023db8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   23db8:	b570      	push	{r4, r5, r6, lr}
   23dba:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   23dbc:	7803      	ldrb	r3, [r0, #0]
   23dbe:	07db      	lsls	r3, r3, #31
   23dc0:	d507      	bpl.n	23dd2 <sw_timer_task+0x1a>
   23dc2:	7803      	ldrb	r3, [r0, #0]
   23dc4:	079b      	lsls	r3, r3, #30
   23dc6:	d504      	bpl.n	23dd2 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23dc8:	4b10      	ldr	r3, [pc, #64]	; (23e0c <sw_timer_task+0x54>)
   23dca:	681a      	ldr	r2, [r3, #0]
   23dcc:	6903      	ldr	r3, [r0, #16]
   23dce:	1a9b      	subs	r3, r3, r2
   23dd0:	d400      	bmi.n	23dd4 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   23dd2:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23dd4:	7803      	ldrb	r3, [r0, #0]
   23dd6:	075b      	lsls	r3, r3, #29
   23dd8:	d4fb      	bmi.n	23dd2 <sw_timer_task+0x1a>
				handler->busy = 1;
   23dda:	7803      	ldrb	r3, [r0, #0]
   23ddc:	2104      	movs	r1, #4
   23dde:	430b      	orrs	r3, r1
   23de0:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   23de2:	68c3      	ldr	r3, [r0, #12]
   23de4:	2b00      	cmp	r3, #0
   23de6:	d00b      	beq.n	23e00 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   23de8:	18d2      	adds	r2, r2, r3
   23dea:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   23dec:	68a2      	ldr	r2, [r4, #8]
   23dee:	2100      	movs	r1, #0
   23df0:	0020      	movs	r0, r4
   23df2:	6865      	ldr	r5, [r4, #4]
   23df4:	47a8      	blx	r5
				handler->busy = 0;
   23df6:	7823      	ldrb	r3, [r4, #0]
   23df8:	2204      	movs	r2, #4
   23dfa:	4393      	bics	r3, r2
   23dfc:	7023      	strb	r3, [r4, #0]
}
   23dfe:	e7e8      	b.n	23dd2 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   23e00:	7802      	ldrb	r2, [r0, #0]
   23e02:	2102      	movs	r1, #2
   23e04:	438a      	bics	r2, r1
   23e06:	7002      	strb	r2, [r0, #0]
   23e08:	e7f0      	b.n	23dec <sw_timer_task+0x34>
   23e0a:	46c0      	nop			; (mov r8, r8)
   23e0c:	2000414c 	.word	0x2000414c

00023e10 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   23e10:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
   23e12:	4b05      	ldr	r3, [pc, #20]	; (23e28 <main+0x18>)
   23e14:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   23e16:	4b05      	ldr	r3, [pc, #20]	; (23e2c <main+0x1c>)
   23e18:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   23e1a:	2001      	movs	r0, #1
   23e1c:	4b04      	ldr	r3, [pc, #16]	; (23e30 <main+0x20>)
   23e1e:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   23e20:	4b04      	ldr	r3, [pc, #16]	; (23e34 <main+0x24>)
   23e22:	4798      	blx	r3

	return 0; //Will not get here
}
   23e24:	2000      	movs	r0, #0
   23e26:	bd10      	pop	{r4, pc}
   23e28:	0001f2a9 	.word	0x0001f2a9
   23e2c:	00018e45 	.word	0x00018e45
   23e30:	000154bd 	.word	0x000154bd
   23e34:	00017db1 	.word	0x00017db1

00023e38 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initilized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   23e38:	b530      	push	{r4, r5, lr}
   23e3a:	b083      	sub	sp, #12
#ifdef BOOT_TEST
	//TestA(); //Comment me for Test B
	//TestB(); //Comment me for Test A
#endif
SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   23e3c:	4841      	ldr	r0, [pc, #260]	; (23f44 <vApplicationDaemonTaskStartupHook+0x10c>)
   23e3e:	4c42      	ldr	r4, [pc, #264]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23e40:	47a0      	blx	r4

//Initialize HW that needs FreeRTOS Initialization
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   23e42:	4842      	ldr	r0, [pc, #264]	; (23f4c <vApplicationDaemonTaskStartupHook+0x114>)
   23e44:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
   23e46:	4b42      	ldr	r3, [pc, #264]	; (23f50 <vApplicationDaemonTaskStartupHook+0x118>)
   23e48:	4798      	blx	r3
   23e4a:	2800      	cmp	r0, #0
   23e4c:	d100      	bne.n	23e50 <vApplicationDaemonTaskStartupHook+0x18>
   23e4e:	e071      	b.n	23f34 <vApplicationDaemonTaskStartupHook+0xfc>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   23e50:	4840      	ldr	r0, [pc, #256]	; (23f54 <vApplicationDaemonTaskStartupHook+0x11c>)
   23e52:	4b3d      	ldr	r3, [pc, #244]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23e54:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if(0 != InitializeSeesaw())
   23e56:	4b40      	ldr	r3, [pc, #256]	; (23f58 <vApplicationDaemonTaskStartupHook+0x120>)
   23e58:	4798      	blx	r3
   23e5a:	2800      	cmp	r0, #0
   23e5c:	d000      	beq.n	23e60 <vApplicationDaemonTaskStartupHook+0x28>
   23e5e:	e06d      	b.n	23f3c <vApplicationDaemonTaskStartupHook+0x104>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
	}	
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
   23e60:	483e      	ldr	r0, [pc, #248]	; (23f5c <vApplicationDaemonTaskStartupHook+0x124>)
   23e62:	4b39      	ldr	r3, [pc, #228]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23e64:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   23e66:	4b3e      	ldr	r3, [pc, #248]	; (23f60 <vApplicationDaemonTaskStartupHook+0x128>)
   23e68:	4798      	blx	r3
   23e6a:	0003      	movs	r3, r0
   23e6c:	4c3d      	ldr	r4, [pc, #244]	; (23f64 <vApplicationDaemonTaskStartupHook+0x12c>)
   23e6e:	4a3e      	ldr	r2, [pc, #248]	; (23f68 <vApplicationDaemonTaskStartupHook+0x130>)
   23e70:	2140      	movs	r1, #64	; 0x40
   23e72:	0020      	movs	r0, r4
   23e74:	4d3d      	ldr	r5, [pc, #244]	; (23f6c <vApplicationDaemonTaskStartupHook+0x134>)
   23e76:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23e78:	0020      	movs	r0, r4
   23e7a:	4b33      	ldr	r3, [pc, #204]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23e7c:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   23e7e:	4b3c      	ldr	r3, [pc, #240]	; (23f70 <vApplicationDaemonTaskStartupHook+0x138>)
   23e80:	9301      	str	r3, [sp, #4]
   23e82:	2304      	movs	r3, #4
   23e84:	9300      	str	r3, [sp, #0]
   23e86:	2300      	movs	r3, #0
   23e88:	2280      	movs	r2, #128	; 0x80
   23e8a:	0052      	lsls	r2, r2, #1
   23e8c:	4939      	ldr	r1, [pc, #228]	; (23f74 <vApplicationDaemonTaskStartupHook+0x13c>)
   23e8e:	483a      	ldr	r0, [pc, #232]	; (23f78 <vApplicationDaemonTaskStartupHook+0x140>)
   23e90:	4c3a      	ldr	r4, [pc, #232]	; (23f7c <vApplicationDaemonTaskStartupHook+0x144>)
   23e92:	47a0      	blx	r4
   23e94:	2801      	cmp	r0, #1
   23e96:	d002      	beq.n	23e9e <vApplicationDaemonTaskStartupHook+0x66>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   23e98:	4839      	ldr	r0, [pc, #228]	; (23f80 <vApplicationDaemonTaskStartupHook+0x148>)
   23e9a:	4b2b      	ldr	r3, [pc, #172]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23e9c:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   23e9e:	4b30      	ldr	r3, [pc, #192]	; (23f60 <vApplicationDaemonTaskStartupHook+0x128>)
   23ea0:	4798      	blx	r3
   23ea2:	0003      	movs	r3, r0
   23ea4:	4c2f      	ldr	r4, [pc, #188]	; (23f64 <vApplicationDaemonTaskStartupHook+0x12c>)
   23ea6:	4a37      	ldr	r2, [pc, #220]	; (23f84 <vApplicationDaemonTaskStartupHook+0x14c>)
   23ea8:	2140      	movs	r1, #64	; 0x40
   23eaa:	0020      	movs	r0, r4
   23eac:	4d2f      	ldr	r5, [pc, #188]	; (23f6c <vApplicationDaemonTaskStartupHook+0x134>)
   23eae:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23eb0:	0020      	movs	r0, r4
   23eb2:	4b25      	ldr	r3, [pc, #148]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23eb4:	4798      	blx	r3


if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   23eb6:	4b34      	ldr	r3, [pc, #208]	; (23f88 <vApplicationDaemonTaskStartupHook+0x150>)
   23eb8:	9301      	str	r3, [sp, #4]
   23eba:	2303      	movs	r3, #3
   23ebc:	9300      	str	r3, [sp, #0]
   23ebe:	2300      	movs	r3, #0
   23ec0:	22fa      	movs	r2, #250	; 0xfa
   23ec2:	0092      	lsls	r2, r2, #2
   23ec4:	4931      	ldr	r1, [pc, #196]	; (23f8c <vApplicationDaemonTaskStartupHook+0x154>)
   23ec6:	4832      	ldr	r0, [pc, #200]	; (23f90 <vApplicationDaemonTaskStartupHook+0x158>)
   23ec8:	4c2c      	ldr	r4, [pc, #176]	; (23f7c <vApplicationDaemonTaskStartupHook+0x144>)
   23eca:	47a0      	blx	r4
   23ecc:	2801      	cmp	r0, #1
   23ece:	d002      	beq.n	23ed6 <vApplicationDaemonTaskStartupHook+0x9e>
	SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   23ed0:	4830      	ldr	r0, [pc, #192]	; (23f94 <vApplicationDaemonTaskStartupHook+0x15c>)
   23ed2:	4b1d      	ldr	r3, [pc, #116]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23ed4:	4798      	blx	r3
}
snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   23ed6:	4b22      	ldr	r3, [pc, #136]	; (23f60 <vApplicationDaemonTaskStartupHook+0x128>)
   23ed8:	4798      	blx	r3
   23eda:	0003      	movs	r3, r0
   23edc:	4c21      	ldr	r4, [pc, #132]	; (23f64 <vApplicationDaemonTaskStartupHook+0x12c>)
   23ede:	4a2e      	ldr	r2, [pc, #184]	; (23f98 <vApplicationDaemonTaskStartupHook+0x160>)
   23ee0:	2140      	movs	r1, #64	; 0x40
   23ee2:	0020      	movs	r0, r4
   23ee4:	4d21      	ldr	r5, [pc, #132]	; (23f6c <vApplicationDaemonTaskStartupHook+0x134>)
   23ee6:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23ee8:	0020      	movs	r0, r4
   23eea:	4b17      	ldr	r3, [pc, #92]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23eec:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
SerialConsoleWriteString(bufferPrint);
*/
if(xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   23eee:	4b2b      	ldr	r3, [pc, #172]	; (23f9c <vApplicationDaemonTaskStartupHook+0x164>)
   23ef0:	9301      	str	r3, [sp, #4]
   23ef2:	2304      	movs	r3, #4
   23ef4:	9300      	str	r3, [sp, #0]
   23ef6:	2300      	movs	r3, #0
   23ef8:	2280      	movs	r2, #128	; 0x80
   23efa:	0092      	lsls	r2, r2, #2
   23efc:	4928      	ldr	r1, [pc, #160]	; (23fa0 <vApplicationDaemonTaskStartupHook+0x168>)
   23efe:	4829      	ldr	r0, [pc, #164]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x16c>)
   23f00:	4c1e      	ldr	r4, [pc, #120]	; (23f7c <vApplicationDaemonTaskStartupHook+0x144>)
   23f02:	47a0      	blx	r4
   23f04:	2801      	cmp	r0, #1
   23f06:	d002      	beq.n	23f0e <vApplicationDaemonTaskStartupHook+0xd6>
	SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   23f08:	4827      	ldr	r0, [pc, #156]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x170>)
   23f0a:	4b0f      	ldr	r3, [pc, #60]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23f0c:	4798      	blx	r3
}
snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   23f0e:	4b14      	ldr	r3, [pc, #80]	; (23f60 <vApplicationDaemonTaskStartupHook+0x128>)
   23f10:	4798      	blx	r3
   23f12:	0003      	movs	r3, r0
   23f14:	4c13      	ldr	r4, [pc, #76]	; (23f64 <vApplicationDaemonTaskStartupHook+0x12c>)
   23f16:	4a25      	ldr	r2, [pc, #148]	; (23fac <vApplicationDaemonTaskStartupHook+0x174>)
   23f18:	2140      	movs	r1, #64	; 0x40
   23f1a:	0020      	movs	r0, r4
   23f1c:	4d13      	ldr	r5, [pc, #76]	; (23f6c <vApplicationDaemonTaskStartupHook+0x134>)
   23f1e:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23f20:	0020      	movs	r0, r4
   23f22:	4b09      	ldr	r3, [pc, #36]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23f24:	4798      	blx	r3
	initialize_thumbstick();
   23f26:	4b22      	ldr	r3, [pc, #136]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x178>)
   23f28:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   23f2a:	2000      	movs	r0, #0
   23f2c:	4b21      	ldr	r3, [pc, #132]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x17c>)
   23f2e:	4798      	blx	r3
}
   23f30:	b003      	add	sp, #12
   23f32:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   23f34:	4820      	ldr	r0, [pc, #128]	; (23fb8 <vApplicationDaemonTaskStartupHook+0x180>)
   23f36:	4b04      	ldr	r3, [pc, #16]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23f38:	4798      	blx	r3
   23f3a:	e78c      	b.n	23e56 <vApplicationDaemonTaskStartupHook+0x1e>
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   23f3c:	481f      	ldr	r0, [pc, #124]	; (23fbc <vApplicationDaemonTaskStartupHook+0x184>)
   23f3e:	4b02      	ldr	r3, [pc, #8]	; (23f48 <vApplicationDaemonTaskStartupHook+0x110>)
   23f40:	4798      	blx	r3
   23f42:	e790      	b.n	23e66 <vApplicationDaemonTaskStartupHook+0x2e>
   23f44:	0002ac3c 	.word	0x0002ac3c
   23f48:	00018f6d 	.word	0x00018f6d
   23f4c:	0002ac60 	.word	0x0002ac60
   23f50:	00013525 	.word	0x00013525
   23f54:	0002ac78 	.word	0x0002ac78
   23f58:	00013a3d 	.word	0x00013a3d
   23f5c:	0002acd8 	.word	0x0002acd8
   23f60:	00016811 	.word	0x00016811
   23f64:	20005608 	.word	0x20005608
   23f68:	0002acf0 	.word	0x0002acf0
   23f6c:	00026509 	.word	0x00026509
   23f70:	20004150 	.word	0x20004150
   23f74:	0002ad14 	.word	0x0002ad14
   23f78:	00012e31 	.word	0x00012e31
   23f7c:	00017b05 	.word	0x00017b05
   23f80:	0002ad20 	.word	0x0002ad20
   23f84:	0002ad4c 	.word	0x0002ad4c
   23f88:	20004158 	.word	0x20004158
   23f8c:	0002ad6c 	.word	0x0002ad6c
   23f90:	00014775 	.word	0x00014775
   23f94:	0002ad78 	.word	0x0002ad78
   23f98:	0002ada4 	.word	0x0002ada4
   23f9c:	20004154 	.word	0x20004154
   23fa0:	0002adc4 	.word	0x0002adc4
   23fa4:	00013019 	.word	0x00013019
   23fa8:	0002add4 	.word	0x0002add4
   23fac:	0002ae04 	.word	0x0002ae04
   23fb0:	00013bc5 	.word	0x00013bc5
   23fb4:	00018295 	.word	0x00018295
   23fb8:	0002ac9c 	.word	0x0002ac9c
   23fbc:	0002acb8 	.word	0x0002acb8

00023fc0 <vApplicationMallocFailedHook>:

#endif


void vApplicationMallocFailedHook(void)
{
   23fc0:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   23fc2:	4802      	ldr	r0, [pc, #8]	; (23fcc <vApplicationMallocFailedHook+0xc>)
   23fc4:	4b02      	ldr	r3, [pc, #8]	; (23fd0 <vApplicationMallocFailedHook+0x10>)
   23fc6:	4798      	blx	r3
   23fc8:	e7fe      	b.n	23fc8 <vApplicationMallocFailedHook+0x8>
   23fca:	46c0      	nop			; (mov r8, r8)
   23fcc:	0002ae2c 	.word	0x0002ae2c
   23fd0:	00018f6d 	.word	0x00018f6d

00023fd4 <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
   23fd4:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   23fd6:	4802      	ldr	r0, [pc, #8]	; (23fe0 <vApplicationStackOverflowHook+0xc>)
   23fd8:	4b02      	ldr	r3, [pc, #8]	; (23fe4 <vApplicationStackOverflowHook+0x10>)
   23fda:	4798      	blx	r3
   23fdc:	e7fe      	b.n	23fdc <vApplicationStackOverflowHook+0x8>
   23fde:	46c0      	nop			; (mov r8, r8)
   23fe0:	0002ae58 	.word	0x0002ae58
   23fe4:	00018f6d 	.word	0x00018f6d

00023fe8 <__udivsi3>:
   23fe8:	2200      	movs	r2, #0
   23fea:	0843      	lsrs	r3, r0, #1
   23fec:	428b      	cmp	r3, r1
   23fee:	d374      	bcc.n	240da <__udivsi3+0xf2>
   23ff0:	0903      	lsrs	r3, r0, #4
   23ff2:	428b      	cmp	r3, r1
   23ff4:	d35f      	bcc.n	240b6 <__udivsi3+0xce>
   23ff6:	0a03      	lsrs	r3, r0, #8
   23ff8:	428b      	cmp	r3, r1
   23ffa:	d344      	bcc.n	24086 <__udivsi3+0x9e>
   23ffc:	0b03      	lsrs	r3, r0, #12
   23ffe:	428b      	cmp	r3, r1
   24000:	d328      	bcc.n	24054 <__udivsi3+0x6c>
   24002:	0c03      	lsrs	r3, r0, #16
   24004:	428b      	cmp	r3, r1
   24006:	d30d      	bcc.n	24024 <__udivsi3+0x3c>
   24008:	22ff      	movs	r2, #255	; 0xff
   2400a:	0209      	lsls	r1, r1, #8
   2400c:	ba12      	rev	r2, r2
   2400e:	0c03      	lsrs	r3, r0, #16
   24010:	428b      	cmp	r3, r1
   24012:	d302      	bcc.n	2401a <__udivsi3+0x32>
   24014:	1212      	asrs	r2, r2, #8
   24016:	0209      	lsls	r1, r1, #8
   24018:	d065      	beq.n	240e6 <__udivsi3+0xfe>
   2401a:	0b03      	lsrs	r3, r0, #12
   2401c:	428b      	cmp	r3, r1
   2401e:	d319      	bcc.n	24054 <__udivsi3+0x6c>
   24020:	e000      	b.n	24024 <__udivsi3+0x3c>
   24022:	0a09      	lsrs	r1, r1, #8
   24024:	0bc3      	lsrs	r3, r0, #15
   24026:	428b      	cmp	r3, r1
   24028:	d301      	bcc.n	2402e <__udivsi3+0x46>
   2402a:	03cb      	lsls	r3, r1, #15
   2402c:	1ac0      	subs	r0, r0, r3
   2402e:	4152      	adcs	r2, r2
   24030:	0b83      	lsrs	r3, r0, #14
   24032:	428b      	cmp	r3, r1
   24034:	d301      	bcc.n	2403a <__udivsi3+0x52>
   24036:	038b      	lsls	r3, r1, #14
   24038:	1ac0      	subs	r0, r0, r3
   2403a:	4152      	adcs	r2, r2
   2403c:	0b43      	lsrs	r3, r0, #13
   2403e:	428b      	cmp	r3, r1
   24040:	d301      	bcc.n	24046 <__udivsi3+0x5e>
   24042:	034b      	lsls	r3, r1, #13
   24044:	1ac0      	subs	r0, r0, r3
   24046:	4152      	adcs	r2, r2
   24048:	0b03      	lsrs	r3, r0, #12
   2404a:	428b      	cmp	r3, r1
   2404c:	d301      	bcc.n	24052 <__udivsi3+0x6a>
   2404e:	030b      	lsls	r3, r1, #12
   24050:	1ac0      	subs	r0, r0, r3
   24052:	4152      	adcs	r2, r2
   24054:	0ac3      	lsrs	r3, r0, #11
   24056:	428b      	cmp	r3, r1
   24058:	d301      	bcc.n	2405e <__udivsi3+0x76>
   2405a:	02cb      	lsls	r3, r1, #11
   2405c:	1ac0      	subs	r0, r0, r3
   2405e:	4152      	adcs	r2, r2
   24060:	0a83      	lsrs	r3, r0, #10
   24062:	428b      	cmp	r3, r1
   24064:	d301      	bcc.n	2406a <__udivsi3+0x82>
   24066:	028b      	lsls	r3, r1, #10
   24068:	1ac0      	subs	r0, r0, r3
   2406a:	4152      	adcs	r2, r2
   2406c:	0a43      	lsrs	r3, r0, #9
   2406e:	428b      	cmp	r3, r1
   24070:	d301      	bcc.n	24076 <__udivsi3+0x8e>
   24072:	024b      	lsls	r3, r1, #9
   24074:	1ac0      	subs	r0, r0, r3
   24076:	4152      	adcs	r2, r2
   24078:	0a03      	lsrs	r3, r0, #8
   2407a:	428b      	cmp	r3, r1
   2407c:	d301      	bcc.n	24082 <__udivsi3+0x9a>
   2407e:	020b      	lsls	r3, r1, #8
   24080:	1ac0      	subs	r0, r0, r3
   24082:	4152      	adcs	r2, r2
   24084:	d2cd      	bcs.n	24022 <__udivsi3+0x3a>
   24086:	09c3      	lsrs	r3, r0, #7
   24088:	428b      	cmp	r3, r1
   2408a:	d301      	bcc.n	24090 <__udivsi3+0xa8>
   2408c:	01cb      	lsls	r3, r1, #7
   2408e:	1ac0      	subs	r0, r0, r3
   24090:	4152      	adcs	r2, r2
   24092:	0983      	lsrs	r3, r0, #6
   24094:	428b      	cmp	r3, r1
   24096:	d301      	bcc.n	2409c <__udivsi3+0xb4>
   24098:	018b      	lsls	r3, r1, #6
   2409a:	1ac0      	subs	r0, r0, r3
   2409c:	4152      	adcs	r2, r2
   2409e:	0943      	lsrs	r3, r0, #5
   240a0:	428b      	cmp	r3, r1
   240a2:	d301      	bcc.n	240a8 <__udivsi3+0xc0>
   240a4:	014b      	lsls	r3, r1, #5
   240a6:	1ac0      	subs	r0, r0, r3
   240a8:	4152      	adcs	r2, r2
   240aa:	0903      	lsrs	r3, r0, #4
   240ac:	428b      	cmp	r3, r1
   240ae:	d301      	bcc.n	240b4 <__udivsi3+0xcc>
   240b0:	010b      	lsls	r3, r1, #4
   240b2:	1ac0      	subs	r0, r0, r3
   240b4:	4152      	adcs	r2, r2
   240b6:	08c3      	lsrs	r3, r0, #3
   240b8:	428b      	cmp	r3, r1
   240ba:	d301      	bcc.n	240c0 <__udivsi3+0xd8>
   240bc:	00cb      	lsls	r3, r1, #3
   240be:	1ac0      	subs	r0, r0, r3
   240c0:	4152      	adcs	r2, r2
   240c2:	0883      	lsrs	r3, r0, #2
   240c4:	428b      	cmp	r3, r1
   240c6:	d301      	bcc.n	240cc <__udivsi3+0xe4>
   240c8:	008b      	lsls	r3, r1, #2
   240ca:	1ac0      	subs	r0, r0, r3
   240cc:	4152      	adcs	r2, r2
   240ce:	0843      	lsrs	r3, r0, #1
   240d0:	428b      	cmp	r3, r1
   240d2:	d301      	bcc.n	240d8 <__udivsi3+0xf0>
   240d4:	004b      	lsls	r3, r1, #1
   240d6:	1ac0      	subs	r0, r0, r3
   240d8:	4152      	adcs	r2, r2
   240da:	1a41      	subs	r1, r0, r1
   240dc:	d200      	bcs.n	240e0 <__udivsi3+0xf8>
   240de:	4601      	mov	r1, r0
   240e0:	4152      	adcs	r2, r2
   240e2:	4610      	mov	r0, r2
   240e4:	4770      	bx	lr
   240e6:	e7ff      	b.n	240e8 <__udivsi3+0x100>
   240e8:	b501      	push	{r0, lr}
   240ea:	2000      	movs	r0, #0
   240ec:	f000 f8f0 	bl	242d0 <__aeabi_idiv0>
   240f0:	bd02      	pop	{r1, pc}
   240f2:	46c0      	nop			; (mov r8, r8)

000240f4 <__aeabi_uidivmod>:
   240f4:	2900      	cmp	r1, #0
   240f6:	d0f7      	beq.n	240e8 <__udivsi3+0x100>
   240f8:	e776      	b.n	23fe8 <__udivsi3>
   240fa:	4770      	bx	lr

000240fc <__divsi3>:
   240fc:	4603      	mov	r3, r0
   240fe:	430b      	orrs	r3, r1
   24100:	d47f      	bmi.n	24202 <__divsi3+0x106>
   24102:	2200      	movs	r2, #0
   24104:	0843      	lsrs	r3, r0, #1
   24106:	428b      	cmp	r3, r1
   24108:	d374      	bcc.n	241f4 <__divsi3+0xf8>
   2410a:	0903      	lsrs	r3, r0, #4
   2410c:	428b      	cmp	r3, r1
   2410e:	d35f      	bcc.n	241d0 <__divsi3+0xd4>
   24110:	0a03      	lsrs	r3, r0, #8
   24112:	428b      	cmp	r3, r1
   24114:	d344      	bcc.n	241a0 <__divsi3+0xa4>
   24116:	0b03      	lsrs	r3, r0, #12
   24118:	428b      	cmp	r3, r1
   2411a:	d328      	bcc.n	2416e <__divsi3+0x72>
   2411c:	0c03      	lsrs	r3, r0, #16
   2411e:	428b      	cmp	r3, r1
   24120:	d30d      	bcc.n	2413e <__divsi3+0x42>
   24122:	22ff      	movs	r2, #255	; 0xff
   24124:	0209      	lsls	r1, r1, #8
   24126:	ba12      	rev	r2, r2
   24128:	0c03      	lsrs	r3, r0, #16
   2412a:	428b      	cmp	r3, r1
   2412c:	d302      	bcc.n	24134 <__divsi3+0x38>
   2412e:	1212      	asrs	r2, r2, #8
   24130:	0209      	lsls	r1, r1, #8
   24132:	d065      	beq.n	24200 <__divsi3+0x104>
   24134:	0b03      	lsrs	r3, r0, #12
   24136:	428b      	cmp	r3, r1
   24138:	d319      	bcc.n	2416e <__divsi3+0x72>
   2413a:	e000      	b.n	2413e <__divsi3+0x42>
   2413c:	0a09      	lsrs	r1, r1, #8
   2413e:	0bc3      	lsrs	r3, r0, #15
   24140:	428b      	cmp	r3, r1
   24142:	d301      	bcc.n	24148 <__divsi3+0x4c>
   24144:	03cb      	lsls	r3, r1, #15
   24146:	1ac0      	subs	r0, r0, r3
   24148:	4152      	adcs	r2, r2
   2414a:	0b83      	lsrs	r3, r0, #14
   2414c:	428b      	cmp	r3, r1
   2414e:	d301      	bcc.n	24154 <__divsi3+0x58>
   24150:	038b      	lsls	r3, r1, #14
   24152:	1ac0      	subs	r0, r0, r3
   24154:	4152      	adcs	r2, r2
   24156:	0b43      	lsrs	r3, r0, #13
   24158:	428b      	cmp	r3, r1
   2415a:	d301      	bcc.n	24160 <__divsi3+0x64>
   2415c:	034b      	lsls	r3, r1, #13
   2415e:	1ac0      	subs	r0, r0, r3
   24160:	4152      	adcs	r2, r2
   24162:	0b03      	lsrs	r3, r0, #12
   24164:	428b      	cmp	r3, r1
   24166:	d301      	bcc.n	2416c <__divsi3+0x70>
   24168:	030b      	lsls	r3, r1, #12
   2416a:	1ac0      	subs	r0, r0, r3
   2416c:	4152      	adcs	r2, r2
   2416e:	0ac3      	lsrs	r3, r0, #11
   24170:	428b      	cmp	r3, r1
   24172:	d301      	bcc.n	24178 <__divsi3+0x7c>
   24174:	02cb      	lsls	r3, r1, #11
   24176:	1ac0      	subs	r0, r0, r3
   24178:	4152      	adcs	r2, r2
   2417a:	0a83      	lsrs	r3, r0, #10
   2417c:	428b      	cmp	r3, r1
   2417e:	d301      	bcc.n	24184 <__divsi3+0x88>
   24180:	028b      	lsls	r3, r1, #10
   24182:	1ac0      	subs	r0, r0, r3
   24184:	4152      	adcs	r2, r2
   24186:	0a43      	lsrs	r3, r0, #9
   24188:	428b      	cmp	r3, r1
   2418a:	d301      	bcc.n	24190 <__divsi3+0x94>
   2418c:	024b      	lsls	r3, r1, #9
   2418e:	1ac0      	subs	r0, r0, r3
   24190:	4152      	adcs	r2, r2
   24192:	0a03      	lsrs	r3, r0, #8
   24194:	428b      	cmp	r3, r1
   24196:	d301      	bcc.n	2419c <__divsi3+0xa0>
   24198:	020b      	lsls	r3, r1, #8
   2419a:	1ac0      	subs	r0, r0, r3
   2419c:	4152      	adcs	r2, r2
   2419e:	d2cd      	bcs.n	2413c <__divsi3+0x40>
   241a0:	09c3      	lsrs	r3, r0, #7
   241a2:	428b      	cmp	r3, r1
   241a4:	d301      	bcc.n	241aa <__divsi3+0xae>
   241a6:	01cb      	lsls	r3, r1, #7
   241a8:	1ac0      	subs	r0, r0, r3
   241aa:	4152      	adcs	r2, r2
   241ac:	0983      	lsrs	r3, r0, #6
   241ae:	428b      	cmp	r3, r1
   241b0:	d301      	bcc.n	241b6 <__divsi3+0xba>
   241b2:	018b      	lsls	r3, r1, #6
   241b4:	1ac0      	subs	r0, r0, r3
   241b6:	4152      	adcs	r2, r2
   241b8:	0943      	lsrs	r3, r0, #5
   241ba:	428b      	cmp	r3, r1
   241bc:	d301      	bcc.n	241c2 <__divsi3+0xc6>
   241be:	014b      	lsls	r3, r1, #5
   241c0:	1ac0      	subs	r0, r0, r3
   241c2:	4152      	adcs	r2, r2
   241c4:	0903      	lsrs	r3, r0, #4
   241c6:	428b      	cmp	r3, r1
   241c8:	d301      	bcc.n	241ce <__divsi3+0xd2>
   241ca:	010b      	lsls	r3, r1, #4
   241cc:	1ac0      	subs	r0, r0, r3
   241ce:	4152      	adcs	r2, r2
   241d0:	08c3      	lsrs	r3, r0, #3
   241d2:	428b      	cmp	r3, r1
   241d4:	d301      	bcc.n	241da <__divsi3+0xde>
   241d6:	00cb      	lsls	r3, r1, #3
   241d8:	1ac0      	subs	r0, r0, r3
   241da:	4152      	adcs	r2, r2
   241dc:	0883      	lsrs	r3, r0, #2
   241de:	428b      	cmp	r3, r1
   241e0:	d301      	bcc.n	241e6 <__divsi3+0xea>
   241e2:	008b      	lsls	r3, r1, #2
   241e4:	1ac0      	subs	r0, r0, r3
   241e6:	4152      	adcs	r2, r2
   241e8:	0843      	lsrs	r3, r0, #1
   241ea:	428b      	cmp	r3, r1
   241ec:	d301      	bcc.n	241f2 <__divsi3+0xf6>
   241ee:	004b      	lsls	r3, r1, #1
   241f0:	1ac0      	subs	r0, r0, r3
   241f2:	4152      	adcs	r2, r2
   241f4:	1a41      	subs	r1, r0, r1
   241f6:	d200      	bcs.n	241fa <__divsi3+0xfe>
   241f8:	4601      	mov	r1, r0
   241fa:	4152      	adcs	r2, r2
   241fc:	4610      	mov	r0, r2
   241fe:	4770      	bx	lr
   24200:	e05d      	b.n	242be <__divsi3+0x1c2>
   24202:	0fca      	lsrs	r2, r1, #31
   24204:	d000      	beq.n	24208 <__divsi3+0x10c>
   24206:	4249      	negs	r1, r1
   24208:	1003      	asrs	r3, r0, #32
   2420a:	d300      	bcc.n	2420e <__divsi3+0x112>
   2420c:	4240      	negs	r0, r0
   2420e:	4053      	eors	r3, r2
   24210:	2200      	movs	r2, #0
   24212:	469c      	mov	ip, r3
   24214:	0903      	lsrs	r3, r0, #4
   24216:	428b      	cmp	r3, r1
   24218:	d32d      	bcc.n	24276 <__divsi3+0x17a>
   2421a:	0a03      	lsrs	r3, r0, #8
   2421c:	428b      	cmp	r3, r1
   2421e:	d312      	bcc.n	24246 <__divsi3+0x14a>
   24220:	22fc      	movs	r2, #252	; 0xfc
   24222:	0189      	lsls	r1, r1, #6
   24224:	ba12      	rev	r2, r2
   24226:	0a03      	lsrs	r3, r0, #8
   24228:	428b      	cmp	r3, r1
   2422a:	d30c      	bcc.n	24246 <__divsi3+0x14a>
   2422c:	0189      	lsls	r1, r1, #6
   2422e:	1192      	asrs	r2, r2, #6
   24230:	428b      	cmp	r3, r1
   24232:	d308      	bcc.n	24246 <__divsi3+0x14a>
   24234:	0189      	lsls	r1, r1, #6
   24236:	1192      	asrs	r2, r2, #6
   24238:	428b      	cmp	r3, r1
   2423a:	d304      	bcc.n	24246 <__divsi3+0x14a>
   2423c:	0189      	lsls	r1, r1, #6
   2423e:	d03a      	beq.n	242b6 <__divsi3+0x1ba>
   24240:	1192      	asrs	r2, r2, #6
   24242:	e000      	b.n	24246 <__divsi3+0x14a>
   24244:	0989      	lsrs	r1, r1, #6
   24246:	09c3      	lsrs	r3, r0, #7
   24248:	428b      	cmp	r3, r1
   2424a:	d301      	bcc.n	24250 <__divsi3+0x154>
   2424c:	01cb      	lsls	r3, r1, #7
   2424e:	1ac0      	subs	r0, r0, r3
   24250:	4152      	adcs	r2, r2
   24252:	0983      	lsrs	r3, r0, #6
   24254:	428b      	cmp	r3, r1
   24256:	d301      	bcc.n	2425c <__divsi3+0x160>
   24258:	018b      	lsls	r3, r1, #6
   2425a:	1ac0      	subs	r0, r0, r3
   2425c:	4152      	adcs	r2, r2
   2425e:	0943      	lsrs	r3, r0, #5
   24260:	428b      	cmp	r3, r1
   24262:	d301      	bcc.n	24268 <__divsi3+0x16c>
   24264:	014b      	lsls	r3, r1, #5
   24266:	1ac0      	subs	r0, r0, r3
   24268:	4152      	adcs	r2, r2
   2426a:	0903      	lsrs	r3, r0, #4
   2426c:	428b      	cmp	r3, r1
   2426e:	d301      	bcc.n	24274 <__divsi3+0x178>
   24270:	010b      	lsls	r3, r1, #4
   24272:	1ac0      	subs	r0, r0, r3
   24274:	4152      	adcs	r2, r2
   24276:	08c3      	lsrs	r3, r0, #3
   24278:	428b      	cmp	r3, r1
   2427a:	d301      	bcc.n	24280 <__divsi3+0x184>
   2427c:	00cb      	lsls	r3, r1, #3
   2427e:	1ac0      	subs	r0, r0, r3
   24280:	4152      	adcs	r2, r2
   24282:	0883      	lsrs	r3, r0, #2
   24284:	428b      	cmp	r3, r1
   24286:	d301      	bcc.n	2428c <__divsi3+0x190>
   24288:	008b      	lsls	r3, r1, #2
   2428a:	1ac0      	subs	r0, r0, r3
   2428c:	4152      	adcs	r2, r2
   2428e:	d2d9      	bcs.n	24244 <__divsi3+0x148>
   24290:	0843      	lsrs	r3, r0, #1
   24292:	428b      	cmp	r3, r1
   24294:	d301      	bcc.n	2429a <__divsi3+0x19e>
   24296:	004b      	lsls	r3, r1, #1
   24298:	1ac0      	subs	r0, r0, r3
   2429a:	4152      	adcs	r2, r2
   2429c:	1a41      	subs	r1, r0, r1
   2429e:	d200      	bcs.n	242a2 <__divsi3+0x1a6>
   242a0:	4601      	mov	r1, r0
   242a2:	4663      	mov	r3, ip
   242a4:	4152      	adcs	r2, r2
   242a6:	105b      	asrs	r3, r3, #1
   242a8:	4610      	mov	r0, r2
   242aa:	d301      	bcc.n	242b0 <__divsi3+0x1b4>
   242ac:	4240      	negs	r0, r0
   242ae:	2b00      	cmp	r3, #0
   242b0:	d500      	bpl.n	242b4 <__divsi3+0x1b8>
   242b2:	4249      	negs	r1, r1
   242b4:	4770      	bx	lr
   242b6:	4663      	mov	r3, ip
   242b8:	105b      	asrs	r3, r3, #1
   242ba:	d300      	bcc.n	242be <__divsi3+0x1c2>
   242bc:	4240      	negs	r0, r0
   242be:	b501      	push	{r0, lr}
   242c0:	2000      	movs	r0, #0
   242c2:	f000 f805 	bl	242d0 <__aeabi_idiv0>
   242c6:	bd02      	pop	{r1, pc}

000242c8 <__aeabi_idivmod>:
   242c8:	2900      	cmp	r1, #0
   242ca:	d0f8      	beq.n	242be <__divsi3+0x1c2>
   242cc:	e716      	b.n	240fc <__divsi3>
   242ce:	4770      	bx	lr

000242d0 <__aeabi_idiv0>:
   242d0:	4770      	bx	lr
   242d2:	46c0      	nop			; (mov r8, r8)

000242d4 <__aeabi_lmul>:
   242d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   242d6:	46ce      	mov	lr, r9
   242d8:	4647      	mov	r7, r8
   242da:	0415      	lsls	r5, r2, #16
   242dc:	0c2d      	lsrs	r5, r5, #16
   242de:	002e      	movs	r6, r5
   242e0:	b580      	push	{r7, lr}
   242e2:	0407      	lsls	r7, r0, #16
   242e4:	0c14      	lsrs	r4, r2, #16
   242e6:	0c3f      	lsrs	r7, r7, #16
   242e8:	4699      	mov	r9, r3
   242ea:	0c03      	lsrs	r3, r0, #16
   242ec:	437e      	muls	r6, r7
   242ee:	435d      	muls	r5, r3
   242f0:	4367      	muls	r7, r4
   242f2:	4363      	muls	r3, r4
   242f4:	197f      	adds	r7, r7, r5
   242f6:	0c34      	lsrs	r4, r6, #16
   242f8:	19e4      	adds	r4, r4, r7
   242fa:	469c      	mov	ip, r3
   242fc:	42a5      	cmp	r5, r4
   242fe:	d903      	bls.n	24308 <__aeabi_lmul+0x34>
   24300:	2380      	movs	r3, #128	; 0x80
   24302:	025b      	lsls	r3, r3, #9
   24304:	4698      	mov	r8, r3
   24306:	44c4      	add	ip, r8
   24308:	464b      	mov	r3, r9
   2430a:	4351      	muls	r1, r2
   2430c:	4343      	muls	r3, r0
   2430e:	0436      	lsls	r6, r6, #16
   24310:	0c36      	lsrs	r6, r6, #16
   24312:	0c25      	lsrs	r5, r4, #16
   24314:	0424      	lsls	r4, r4, #16
   24316:	4465      	add	r5, ip
   24318:	19a4      	adds	r4, r4, r6
   2431a:	1859      	adds	r1, r3, r1
   2431c:	1949      	adds	r1, r1, r5
   2431e:	0020      	movs	r0, r4
   24320:	bc0c      	pop	{r2, r3}
   24322:	4690      	mov	r8, r2
   24324:	4699      	mov	r9, r3
   24326:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024328 <__aeabi_fdiv>:
   24328:	b5f0      	push	{r4, r5, r6, r7, lr}
   2432a:	4657      	mov	r7, sl
   2432c:	464e      	mov	r6, r9
   2432e:	46de      	mov	lr, fp
   24330:	4645      	mov	r5, r8
   24332:	b5e0      	push	{r5, r6, r7, lr}
   24334:	0244      	lsls	r4, r0, #9
   24336:	0043      	lsls	r3, r0, #1
   24338:	0fc6      	lsrs	r6, r0, #31
   2433a:	b083      	sub	sp, #12
   2433c:	1c0f      	adds	r7, r1, #0
   2433e:	0a64      	lsrs	r4, r4, #9
   24340:	0e1b      	lsrs	r3, r3, #24
   24342:	46b2      	mov	sl, r6
   24344:	d053      	beq.n	243ee <__aeabi_fdiv+0xc6>
   24346:	2bff      	cmp	r3, #255	; 0xff
   24348:	d027      	beq.n	2439a <__aeabi_fdiv+0x72>
   2434a:	2280      	movs	r2, #128	; 0x80
   2434c:	00e4      	lsls	r4, r4, #3
   2434e:	04d2      	lsls	r2, r2, #19
   24350:	4314      	orrs	r4, r2
   24352:	227f      	movs	r2, #127	; 0x7f
   24354:	4252      	negs	r2, r2
   24356:	4690      	mov	r8, r2
   24358:	4498      	add	r8, r3
   2435a:	2300      	movs	r3, #0
   2435c:	4699      	mov	r9, r3
   2435e:	469b      	mov	fp, r3
   24360:	027d      	lsls	r5, r7, #9
   24362:	0078      	lsls	r0, r7, #1
   24364:	0ffb      	lsrs	r3, r7, #31
   24366:	0a6d      	lsrs	r5, r5, #9
   24368:	0e00      	lsrs	r0, r0, #24
   2436a:	9300      	str	r3, [sp, #0]
   2436c:	d024      	beq.n	243b8 <__aeabi_fdiv+0x90>
   2436e:	28ff      	cmp	r0, #255	; 0xff
   24370:	d046      	beq.n	24400 <__aeabi_fdiv+0xd8>
   24372:	2380      	movs	r3, #128	; 0x80
   24374:	2100      	movs	r1, #0
   24376:	00ed      	lsls	r5, r5, #3
   24378:	04db      	lsls	r3, r3, #19
   2437a:	431d      	orrs	r5, r3
   2437c:	387f      	subs	r0, #127	; 0x7f
   2437e:	4647      	mov	r7, r8
   24380:	1a38      	subs	r0, r7, r0
   24382:	464f      	mov	r7, r9
   24384:	430f      	orrs	r7, r1
   24386:	00bf      	lsls	r7, r7, #2
   24388:	46b9      	mov	r9, r7
   2438a:	0033      	movs	r3, r6
   2438c:	9a00      	ldr	r2, [sp, #0]
   2438e:	4f87      	ldr	r7, [pc, #540]	; (245ac <__aeabi_fdiv+0x284>)
   24390:	4053      	eors	r3, r2
   24392:	464a      	mov	r2, r9
   24394:	58ba      	ldr	r2, [r7, r2]
   24396:	9301      	str	r3, [sp, #4]
   24398:	4697      	mov	pc, r2
   2439a:	2c00      	cmp	r4, #0
   2439c:	d14e      	bne.n	2443c <__aeabi_fdiv+0x114>
   2439e:	2308      	movs	r3, #8
   243a0:	4699      	mov	r9, r3
   243a2:	33f7      	adds	r3, #247	; 0xf7
   243a4:	4698      	mov	r8, r3
   243a6:	3bfd      	subs	r3, #253	; 0xfd
   243a8:	469b      	mov	fp, r3
   243aa:	027d      	lsls	r5, r7, #9
   243ac:	0078      	lsls	r0, r7, #1
   243ae:	0ffb      	lsrs	r3, r7, #31
   243b0:	0a6d      	lsrs	r5, r5, #9
   243b2:	0e00      	lsrs	r0, r0, #24
   243b4:	9300      	str	r3, [sp, #0]
   243b6:	d1da      	bne.n	2436e <__aeabi_fdiv+0x46>
   243b8:	2d00      	cmp	r5, #0
   243ba:	d126      	bne.n	2440a <__aeabi_fdiv+0xe2>
   243bc:	2000      	movs	r0, #0
   243be:	2101      	movs	r1, #1
   243c0:	0033      	movs	r3, r6
   243c2:	9a00      	ldr	r2, [sp, #0]
   243c4:	4f7a      	ldr	r7, [pc, #488]	; (245b0 <__aeabi_fdiv+0x288>)
   243c6:	4053      	eors	r3, r2
   243c8:	4642      	mov	r2, r8
   243ca:	1a10      	subs	r0, r2, r0
   243cc:	464a      	mov	r2, r9
   243ce:	430a      	orrs	r2, r1
   243d0:	0092      	lsls	r2, r2, #2
   243d2:	58ba      	ldr	r2, [r7, r2]
   243d4:	001d      	movs	r5, r3
   243d6:	4697      	mov	pc, r2
   243d8:	9b00      	ldr	r3, [sp, #0]
   243da:	002c      	movs	r4, r5
   243dc:	469a      	mov	sl, r3
   243de:	468b      	mov	fp, r1
   243e0:	465b      	mov	r3, fp
   243e2:	2b02      	cmp	r3, #2
   243e4:	d131      	bne.n	2444a <__aeabi_fdiv+0x122>
   243e6:	4653      	mov	r3, sl
   243e8:	21ff      	movs	r1, #255	; 0xff
   243ea:	2400      	movs	r4, #0
   243ec:	e038      	b.n	24460 <__aeabi_fdiv+0x138>
   243ee:	2c00      	cmp	r4, #0
   243f0:	d117      	bne.n	24422 <__aeabi_fdiv+0xfa>
   243f2:	2304      	movs	r3, #4
   243f4:	4699      	mov	r9, r3
   243f6:	2300      	movs	r3, #0
   243f8:	4698      	mov	r8, r3
   243fa:	3301      	adds	r3, #1
   243fc:	469b      	mov	fp, r3
   243fe:	e7af      	b.n	24360 <__aeabi_fdiv+0x38>
   24400:	20ff      	movs	r0, #255	; 0xff
   24402:	2d00      	cmp	r5, #0
   24404:	d10b      	bne.n	2441e <__aeabi_fdiv+0xf6>
   24406:	2102      	movs	r1, #2
   24408:	e7da      	b.n	243c0 <__aeabi_fdiv+0x98>
   2440a:	0028      	movs	r0, r5
   2440c:	f001 feaa 	bl	26164 <__clzsi2>
   24410:	1f43      	subs	r3, r0, #5
   24412:	409d      	lsls	r5, r3
   24414:	2376      	movs	r3, #118	; 0x76
   24416:	425b      	negs	r3, r3
   24418:	1a18      	subs	r0, r3, r0
   2441a:	2100      	movs	r1, #0
   2441c:	e7af      	b.n	2437e <__aeabi_fdiv+0x56>
   2441e:	2103      	movs	r1, #3
   24420:	e7ad      	b.n	2437e <__aeabi_fdiv+0x56>
   24422:	0020      	movs	r0, r4
   24424:	f001 fe9e 	bl	26164 <__clzsi2>
   24428:	1f43      	subs	r3, r0, #5
   2442a:	409c      	lsls	r4, r3
   2442c:	2376      	movs	r3, #118	; 0x76
   2442e:	425b      	negs	r3, r3
   24430:	1a1b      	subs	r3, r3, r0
   24432:	4698      	mov	r8, r3
   24434:	2300      	movs	r3, #0
   24436:	4699      	mov	r9, r3
   24438:	469b      	mov	fp, r3
   2443a:	e791      	b.n	24360 <__aeabi_fdiv+0x38>
   2443c:	230c      	movs	r3, #12
   2443e:	4699      	mov	r9, r3
   24440:	33f3      	adds	r3, #243	; 0xf3
   24442:	4698      	mov	r8, r3
   24444:	3bfc      	subs	r3, #252	; 0xfc
   24446:	469b      	mov	fp, r3
   24448:	e78a      	b.n	24360 <__aeabi_fdiv+0x38>
   2444a:	2b03      	cmp	r3, #3
   2444c:	d100      	bne.n	24450 <__aeabi_fdiv+0x128>
   2444e:	e0a5      	b.n	2459c <__aeabi_fdiv+0x274>
   24450:	4655      	mov	r5, sl
   24452:	2b01      	cmp	r3, #1
   24454:	d000      	beq.n	24458 <__aeabi_fdiv+0x130>
   24456:	e081      	b.n	2455c <__aeabi_fdiv+0x234>
   24458:	2301      	movs	r3, #1
   2445a:	2100      	movs	r1, #0
   2445c:	2400      	movs	r4, #0
   2445e:	402b      	ands	r3, r5
   24460:	0264      	lsls	r4, r4, #9
   24462:	05c9      	lsls	r1, r1, #23
   24464:	0a60      	lsrs	r0, r4, #9
   24466:	07db      	lsls	r3, r3, #31
   24468:	4308      	orrs	r0, r1
   2446a:	4318      	orrs	r0, r3
   2446c:	b003      	add	sp, #12
   2446e:	bc3c      	pop	{r2, r3, r4, r5}
   24470:	4690      	mov	r8, r2
   24472:	4699      	mov	r9, r3
   24474:	46a2      	mov	sl, r4
   24476:	46ab      	mov	fp, r5
   24478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2447a:	2480      	movs	r4, #128	; 0x80
   2447c:	2300      	movs	r3, #0
   2447e:	03e4      	lsls	r4, r4, #15
   24480:	21ff      	movs	r1, #255	; 0xff
   24482:	e7ed      	b.n	24460 <__aeabi_fdiv+0x138>
   24484:	21ff      	movs	r1, #255	; 0xff
   24486:	2400      	movs	r4, #0
   24488:	e7ea      	b.n	24460 <__aeabi_fdiv+0x138>
   2448a:	2301      	movs	r3, #1
   2448c:	1a59      	subs	r1, r3, r1
   2448e:	291b      	cmp	r1, #27
   24490:	dd66      	ble.n	24560 <__aeabi_fdiv+0x238>
   24492:	9a01      	ldr	r2, [sp, #4]
   24494:	4013      	ands	r3, r2
   24496:	2100      	movs	r1, #0
   24498:	2400      	movs	r4, #0
   2449a:	e7e1      	b.n	24460 <__aeabi_fdiv+0x138>
   2449c:	2380      	movs	r3, #128	; 0x80
   2449e:	03db      	lsls	r3, r3, #15
   244a0:	421c      	tst	r4, r3
   244a2:	d038      	beq.n	24516 <__aeabi_fdiv+0x1ee>
   244a4:	421d      	tst	r5, r3
   244a6:	d051      	beq.n	2454c <__aeabi_fdiv+0x224>
   244a8:	431c      	orrs	r4, r3
   244aa:	0264      	lsls	r4, r4, #9
   244ac:	0a64      	lsrs	r4, r4, #9
   244ae:	0033      	movs	r3, r6
   244b0:	21ff      	movs	r1, #255	; 0xff
   244b2:	e7d5      	b.n	24460 <__aeabi_fdiv+0x138>
   244b4:	0163      	lsls	r3, r4, #5
   244b6:	016c      	lsls	r4, r5, #5
   244b8:	42a3      	cmp	r3, r4
   244ba:	d23b      	bcs.n	24534 <__aeabi_fdiv+0x20c>
   244bc:	261b      	movs	r6, #27
   244be:	2100      	movs	r1, #0
   244c0:	3801      	subs	r0, #1
   244c2:	2501      	movs	r5, #1
   244c4:	001f      	movs	r7, r3
   244c6:	0049      	lsls	r1, r1, #1
   244c8:	005b      	lsls	r3, r3, #1
   244ca:	2f00      	cmp	r7, #0
   244cc:	db01      	blt.n	244d2 <__aeabi_fdiv+0x1aa>
   244ce:	429c      	cmp	r4, r3
   244d0:	d801      	bhi.n	244d6 <__aeabi_fdiv+0x1ae>
   244d2:	1b1b      	subs	r3, r3, r4
   244d4:	4329      	orrs	r1, r5
   244d6:	3e01      	subs	r6, #1
   244d8:	2e00      	cmp	r6, #0
   244da:	d1f3      	bne.n	244c4 <__aeabi_fdiv+0x19c>
   244dc:	001c      	movs	r4, r3
   244de:	1e63      	subs	r3, r4, #1
   244e0:	419c      	sbcs	r4, r3
   244e2:	430c      	orrs	r4, r1
   244e4:	0001      	movs	r1, r0
   244e6:	317f      	adds	r1, #127	; 0x7f
   244e8:	2900      	cmp	r1, #0
   244ea:	ddce      	ble.n	2448a <__aeabi_fdiv+0x162>
   244ec:	0763      	lsls	r3, r4, #29
   244ee:	d004      	beq.n	244fa <__aeabi_fdiv+0x1d2>
   244f0:	230f      	movs	r3, #15
   244f2:	4023      	ands	r3, r4
   244f4:	2b04      	cmp	r3, #4
   244f6:	d000      	beq.n	244fa <__aeabi_fdiv+0x1d2>
   244f8:	3404      	adds	r4, #4
   244fa:	0123      	lsls	r3, r4, #4
   244fc:	d503      	bpl.n	24506 <__aeabi_fdiv+0x1de>
   244fe:	0001      	movs	r1, r0
   24500:	4b2c      	ldr	r3, [pc, #176]	; (245b4 <__aeabi_fdiv+0x28c>)
   24502:	3180      	adds	r1, #128	; 0x80
   24504:	401c      	ands	r4, r3
   24506:	29fe      	cmp	r1, #254	; 0xfe
   24508:	dd0d      	ble.n	24526 <__aeabi_fdiv+0x1fe>
   2450a:	2301      	movs	r3, #1
   2450c:	9a01      	ldr	r2, [sp, #4]
   2450e:	21ff      	movs	r1, #255	; 0xff
   24510:	4013      	ands	r3, r2
   24512:	2400      	movs	r4, #0
   24514:	e7a4      	b.n	24460 <__aeabi_fdiv+0x138>
   24516:	2380      	movs	r3, #128	; 0x80
   24518:	03db      	lsls	r3, r3, #15
   2451a:	431c      	orrs	r4, r3
   2451c:	0264      	lsls	r4, r4, #9
   2451e:	0a64      	lsrs	r4, r4, #9
   24520:	0033      	movs	r3, r6
   24522:	21ff      	movs	r1, #255	; 0xff
   24524:	e79c      	b.n	24460 <__aeabi_fdiv+0x138>
   24526:	2301      	movs	r3, #1
   24528:	9a01      	ldr	r2, [sp, #4]
   2452a:	01a4      	lsls	r4, r4, #6
   2452c:	0a64      	lsrs	r4, r4, #9
   2452e:	b2c9      	uxtb	r1, r1
   24530:	4013      	ands	r3, r2
   24532:	e795      	b.n	24460 <__aeabi_fdiv+0x138>
   24534:	1b1b      	subs	r3, r3, r4
   24536:	261a      	movs	r6, #26
   24538:	2101      	movs	r1, #1
   2453a:	e7c2      	b.n	244c2 <__aeabi_fdiv+0x19a>
   2453c:	9b00      	ldr	r3, [sp, #0]
   2453e:	468b      	mov	fp, r1
   24540:	469a      	mov	sl, r3
   24542:	2400      	movs	r4, #0
   24544:	e74c      	b.n	243e0 <__aeabi_fdiv+0xb8>
   24546:	0263      	lsls	r3, r4, #9
   24548:	d5e5      	bpl.n	24516 <__aeabi_fdiv+0x1ee>
   2454a:	2500      	movs	r5, #0
   2454c:	2480      	movs	r4, #128	; 0x80
   2454e:	03e4      	lsls	r4, r4, #15
   24550:	432c      	orrs	r4, r5
   24552:	0264      	lsls	r4, r4, #9
   24554:	0a64      	lsrs	r4, r4, #9
   24556:	9b00      	ldr	r3, [sp, #0]
   24558:	21ff      	movs	r1, #255	; 0xff
   2455a:	e781      	b.n	24460 <__aeabi_fdiv+0x138>
   2455c:	9501      	str	r5, [sp, #4]
   2455e:	e7c1      	b.n	244e4 <__aeabi_fdiv+0x1bc>
   24560:	0023      	movs	r3, r4
   24562:	2020      	movs	r0, #32
   24564:	40cb      	lsrs	r3, r1
   24566:	1a41      	subs	r1, r0, r1
   24568:	408c      	lsls	r4, r1
   2456a:	1e61      	subs	r1, r4, #1
   2456c:	418c      	sbcs	r4, r1
   2456e:	431c      	orrs	r4, r3
   24570:	0763      	lsls	r3, r4, #29
   24572:	d004      	beq.n	2457e <__aeabi_fdiv+0x256>
   24574:	230f      	movs	r3, #15
   24576:	4023      	ands	r3, r4
   24578:	2b04      	cmp	r3, #4
   2457a:	d000      	beq.n	2457e <__aeabi_fdiv+0x256>
   2457c:	3404      	adds	r4, #4
   2457e:	0163      	lsls	r3, r4, #5
   24580:	d505      	bpl.n	2458e <__aeabi_fdiv+0x266>
   24582:	2301      	movs	r3, #1
   24584:	9a01      	ldr	r2, [sp, #4]
   24586:	2101      	movs	r1, #1
   24588:	4013      	ands	r3, r2
   2458a:	2400      	movs	r4, #0
   2458c:	e768      	b.n	24460 <__aeabi_fdiv+0x138>
   2458e:	2301      	movs	r3, #1
   24590:	9a01      	ldr	r2, [sp, #4]
   24592:	01a4      	lsls	r4, r4, #6
   24594:	0a64      	lsrs	r4, r4, #9
   24596:	4013      	ands	r3, r2
   24598:	2100      	movs	r1, #0
   2459a:	e761      	b.n	24460 <__aeabi_fdiv+0x138>
   2459c:	2380      	movs	r3, #128	; 0x80
   2459e:	03db      	lsls	r3, r3, #15
   245a0:	431c      	orrs	r4, r3
   245a2:	0264      	lsls	r4, r4, #9
   245a4:	0a64      	lsrs	r4, r4, #9
   245a6:	4653      	mov	r3, sl
   245a8:	21ff      	movs	r1, #255	; 0xff
   245aa:	e759      	b.n	24460 <__aeabi_fdiv+0x138>
   245ac:	0002ae80 	.word	0x0002ae80
   245b0:	0002aec0 	.word	0x0002aec0
   245b4:	f7ffffff 	.word	0xf7ffffff

000245b8 <__aeabi_fmul>:
   245b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245ba:	4657      	mov	r7, sl
   245bc:	464e      	mov	r6, r9
   245be:	4645      	mov	r5, r8
   245c0:	46de      	mov	lr, fp
   245c2:	b5e0      	push	{r5, r6, r7, lr}
   245c4:	0247      	lsls	r7, r0, #9
   245c6:	0046      	lsls	r6, r0, #1
   245c8:	4688      	mov	r8, r1
   245ca:	0a7f      	lsrs	r7, r7, #9
   245cc:	0e36      	lsrs	r6, r6, #24
   245ce:	0fc4      	lsrs	r4, r0, #31
   245d0:	2e00      	cmp	r6, #0
   245d2:	d047      	beq.n	24664 <__aeabi_fmul+0xac>
   245d4:	2eff      	cmp	r6, #255	; 0xff
   245d6:	d024      	beq.n	24622 <__aeabi_fmul+0x6a>
   245d8:	00fb      	lsls	r3, r7, #3
   245da:	2780      	movs	r7, #128	; 0x80
   245dc:	04ff      	lsls	r7, r7, #19
   245de:	431f      	orrs	r7, r3
   245e0:	2300      	movs	r3, #0
   245e2:	4699      	mov	r9, r3
   245e4:	469a      	mov	sl, r3
   245e6:	3e7f      	subs	r6, #127	; 0x7f
   245e8:	4643      	mov	r3, r8
   245ea:	025d      	lsls	r5, r3, #9
   245ec:	0058      	lsls	r0, r3, #1
   245ee:	0fdb      	lsrs	r3, r3, #31
   245f0:	0a6d      	lsrs	r5, r5, #9
   245f2:	0e00      	lsrs	r0, r0, #24
   245f4:	4698      	mov	r8, r3
   245f6:	d043      	beq.n	24680 <__aeabi_fmul+0xc8>
   245f8:	28ff      	cmp	r0, #255	; 0xff
   245fa:	d03b      	beq.n	24674 <__aeabi_fmul+0xbc>
   245fc:	00eb      	lsls	r3, r5, #3
   245fe:	2580      	movs	r5, #128	; 0x80
   24600:	2200      	movs	r2, #0
   24602:	04ed      	lsls	r5, r5, #19
   24604:	431d      	orrs	r5, r3
   24606:	387f      	subs	r0, #127	; 0x7f
   24608:	1836      	adds	r6, r6, r0
   2460a:	1c73      	adds	r3, r6, #1
   2460c:	4641      	mov	r1, r8
   2460e:	469b      	mov	fp, r3
   24610:	464b      	mov	r3, r9
   24612:	4061      	eors	r1, r4
   24614:	4313      	orrs	r3, r2
   24616:	2b0f      	cmp	r3, #15
   24618:	d864      	bhi.n	246e4 <__aeabi_fmul+0x12c>
   2461a:	4875      	ldr	r0, [pc, #468]	; (247f0 <__aeabi_fmul+0x238>)
   2461c:	009b      	lsls	r3, r3, #2
   2461e:	58c3      	ldr	r3, [r0, r3]
   24620:	469f      	mov	pc, r3
   24622:	2f00      	cmp	r7, #0
   24624:	d142      	bne.n	246ac <__aeabi_fmul+0xf4>
   24626:	2308      	movs	r3, #8
   24628:	4699      	mov	r9, r3
   2462a:	3b06      	subs	r3, #6
   2462c:	26ff      	movs	r6, #255	; 0xff
   2462e:	469a      	mov	sl, r3
   24630:	e7da      	b.n	245e8 <__aeabi_fmul+0x30>
   24632:	4641      	mov	r1, r8
   24634:	2a02      	cmp	r2, #2
   24636:	d028      	beq.n	2468a <__aeabi_fmul+0xd2>
   24638:	2a03      	cmp	r2, #3
   2463a:	d100      	bne.n	2463e <__aeabi_fmul+0x86>
   2463c:	e0ce      	b.n	247dc <__aeabi_fmul+0x224>
   2463e:	2a01      	cmp	r2, #1
   24640:	d000      	beq.n	24644 <__aeabi_fmul+0x8c>
   24642:	e0ac      	b.n	2479e <__aeabi_fmul+0x1e6>
   24644:	4011      	ands	r1, r2
   24646:	2000      	movs	r0, #0
   24648:	2200      	movs	r2, #0
   2464a:	b2cc      	uxtb	r4, r1
   2464c:	0240      	lsls	r0, r0, #9
   2464e:	05d2      	lsls	r2, r2, #23
   24650:	0a40      	lsrs	r0, r0, #9
   24652:	07e4      	lsls	r4, r4, #31
   24654:	4310      	orrs	r0, r2
   24656:	4320      	orrs	r0, r4
   24658:	bc3c      	pop	{r2, r3, r4, r5}
   2465a:	4690      	mov	r8, r2
   2465c:	4699      	mov	r9, r3
   2465e:	46a2      	mov	sl, r4
   24660:	46ab      	mov	fp, r5
   24662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24664:	2f00      	cmp	r7, #0
   24666:	d115      	bne.n	24694 <__aeabi_fmul+0xdc>
   24668:	2304      	movs	r3, #4
   2466a:	4699      	mov	r9, r3
   2466c:	3b03      	subs	r3, #3
   2466e:	2600      	movs	r6, #0
   24670:	469a      	mov	sl, r3
   24672:	e7b9      	b.n	245e8 <__aeabi_fmul+0x30>
   24674:	20ff      	movs	r0, #255	; 0xff
   24676:	2202      	movs	r2, #2
   24678:	2d00      	cmp	r5, #0
   2467a:	d0c5      	beq.n	24608 <__aeabi_fmul+0x50>
   2467c:	2203      	movs	r2, #3
   2467e:	e7c3      	b.n	24608 <__aeabi_fmul+0x50>
   24680:	2d00      	cmp	r5, #0
   24682:	d119      	bne.n	246b8 <__aeabi_fmul+0x100>
   24684:	2000      	movs	r0, #0
   24686:	2201      	movs	r2, #1
   24688:	e7be      	b.n	24608 <__aeabi_fmul+0x50>
   2468a:	2401      	movs	r4, #1
   2468c:	22ff      	movs	r2, #255	; 0xff
   2468e:	400c      	ands	r4, r1
   24690:	2000      	movs	r0, #0
   24692:	e7db      	b.n	2464c <__aeabi_fmul+0x94>
   24694:	0038      	movs	r0, r7
   24696:	f001 fd65 	bl	26164 <__clzsi2>
   2469a:	2676      	movs	r6, #118	; 0x76
   2469c:	1f43      	subs	r3, r0, #5
   2469e:	409f      	lsls	r7, r3
   246a0:	2300      	movs	r3, #0
   246a2:	4276      	negs	r6, r6
   246a4:	1a36      	subs	r6, r6, r0
   246a6:	4699      	mov	r9, r3
   246a8:	469a      	mov	sl, r3
   246aa:	e79d      	b.n	245e8 <__aeabi_fmul+0x30>
   246ac:	230c      	movs	r3, #12
   246ae:	4699      	mov	r9, r3
   246b0:	3b09      	subs	r3, #9
   246b2:	26ff      	movs	r6, #255	; 0xff
   246b4:	469a      	mov	sl, r3
   246b6:	e797      	b.n	245e8 <__aeabi_fmul+0x30>
   246b8:	0028      	movs	r0, r5
   246ba:	f001 fd53 	bl	26164 <__clzsi2>
   246be:	1f43      	subs	r3, r0, #5
   246c0:	409d      	lsls	r5, r3
   246c2:	2376      	movs	r3, #118	; 0x76
   246c4:	425b      	negs	r3, r3
   246c6:	1a18      	subs	r0, r3, r0
   246c8:	2200      	movs	r2, #0
   246ca:	e79d      	b.n	24608 <__aeabi_fmul+0x50>
   246cc:	2080      	movs	r0, #128	; 0x80
   246ce:	2400      	movs	r4, #0
   246d0:	03c0      	lsls	r0, r0, #15
   246d2:	22ff      	movs	r2, #255	; 0xff
   246d4:	e7ba      	b.n	2464c <__aeabi_fmul+0x94>
   246d6:	003d      	movs	r5, r7
   246d8:	4652      	mov	r2, sl
   246da:	e7ab      	b.n	24634 <__aeabi_fmul+0x7c>
   246dc:	003d      	movs	r5, r7
   246de:	0021      	movs	r1, r4
   246e0:	4652      	mov	r2, sl
   246e2:	e7a7      	b.n	24634 <__aeabi_fmul+0x7c>
   246e4:	0c3b      	lsrs	r3, r7, #16
   246e6:	469c      	mov	ip, r3
   246e8:	042a      	lsls	r2, r5, #16
   246ea:	0c12      	lsrs	r2, r2, #16
   246ec:	0c2b      	lsrs	r3, r5, #16
   246ee:	0014      	movs	r4, r2
   246f0:	4660      	mov	r0, ip
   246f2:	4665      	mov	r5, ip
   246f4:	043f      	lsls	r7, r7, #16
   246f6:	0c3f      	lsrs	r7, r7, #16
   246f8:	437c      	muls	r4, r7
   246fa:	4342      	muls	r2, r0
   246fc:	435d      	muls	r5, r3
   246fe:	437b      	muls	r3, r7
   24700:	0c27      	lsrs	r7, r4, #16
   24702:	189b      	adds	r3, r3, r2
   24704:	18ff      	adds	r7, r7, r3
   24706:	42ba      	cmp	r2, r7
   24708:	d903      	bls.n	24712 <__aeabi_fmul+0x15a>
   2470a:	2380      	movs	r3, #128	; 0x80
   2470c:	025b      	lsls	r3, r3, #9
   2470e:	469c      	mov	ip, r3
   24710:	4465      	add	r5, ip
   24712:	0424      	lsls	r4, r4, #16
   24714:	043a      	lsls	r2, r7, #16
   24716:	0c24      	lsrs	r4, r4, #16
   24718:	1912      	adds	r2, r2, r4
   2471a:	0193      	lsls	r3, r2, #6
   2471c:	1e5c      	subs	r4, r3, #1
   2471e:	41a3      	sbcs	r3, r4
   24720:	0c3f      	lsrs	r7, r7, #16
   24722:	0e92      	lsrs	r2, r2, #26
   24724:	197d      	adds	r5, r7, r5
   24726:	431a      	orrs	r2, r3
   24728:	01ad      	lsls	r5, r5, #6
   2472a:	4315      	orrs	r5, r2
   2472c:	012b      	lsls	r3, r5, #4
   2472e:	d504      	bpl.n	2473a <__aeabi_fmul+0x182>
   24730:	2301      	movs	r3, #1
   24732:	465e      	mov	r6, fp
   24734:	086a      	lsrs	r2, r5, #1
   24736:	401d      	ands	r5, r3
   24738:	4315      	orrs	r5, r2
   2473a:	0032      	movs	r2, r6
   2473c:	327f      	adds	r2, #127	; 0x7f
   2473e:	2a00      	cmp	r2, #0
   24740:	dd25      	ble.n	2478e <__aeabi_fmul+0x1d6>
   24742:	076b      	lsls	r3, r5, #29
   24744:	d004      	beq.n	24750 <__aeabi_fmul+0x198>
   24746:	230f      	movs	r3, #15
   24748:	402b      	ands	r3, r5
   2474a:	2b04      	cmp	r3, #4
   2474c:	d000      	beq.n	24750 <__aeabi_fmul+0x198>
   2474e:	3504      	adds	r5, #4
   24750:	012b      	lsls	r3, r5, #4
   24752:	d503      	bpl.n	2475c <__aeabi_fmul+0x1a4>
   24754:	0032      	movs	r2, r6
   24756:	4b27      	ldr	r3, [pc, #156]	; (247f4 <__aeabi_fmul+0x23c>)
   24758:	3280      	adds	r2, #128	; 0x80
   2475a:	401d      	ands	r5, r3
   2475c:	2afe      	cmp	r2, #254	; 0xfe
   2475e:	dc94      	bgt.n	2468a <__aeabi_fmul+0xd2>
   24760:	2401      	movs	r4, #1
   24762:	01a8      	lsls	r0, r5, #6
   24764:	0a40      	lsrs	r0, r0, #9
   24766:	b2d2      	uxtb	r2, r2
   24768:	400c      	ands	r4, r1
   2476a:	e76f      	b.n	2464c <__aeabi_fmul+0x94>
   2476c:	2080      	movs	r0, #128	; 0x80
   2476e:	03c0      	lsls	r0, r0, #15
   24770:	4207      	tst	r7, r0
   24772:	d007      	beq.n	24784 <__aeabi_fmul+0x1cc>
   24774:	4205      	tst	r5, r0
   24776:	d105      	bne.n	24784 <__aeabi_fmul+0x1cc>
   24778:	4328      	orrs	r0, r5
   2477a:	0240      	lsls	r0, r0, #9
   2477c:	0a40      	lsrs	r0, r0, #9
   2477e:	4644      	mov	r4, r8
   24780:	22ff      	movs	r2, #255	; 0xff
   24782:	e763      	b.n	2464c <__aeabi_fmul+0x94>
   24784:	4338      	orrs	r0, r7
   24786:	0240      	lsls	r0, r0, #9
   24788:	0a40      	lsrs	r0, r0, #9
   2478a:	22ff      	movs	r2, #255	; 0xff
   2478c:	e75e      	b.n	2464c <__aeabi_fmul+0x94>
   2478e:	2401      	movs	r4, #1
   24790:	1aa3      	subs	r3, r4, r2
   24792:	2b1b      	cmp	r3, #27
   24794:	dd05      	ble.n	247a2 <__aeabi_fmul+0x1ea>
   24796:	400c      	ands	r4, r1
   24798:	2200      	movs	r2, #0
   2479a:	2000      	movs	r0, #0
   2479c:	e756      	b.n	2464c <__aeabi_fmul+0x94>
   2479e:	465e      	mov	r6, fp
   247a0:	e7cb      	b.n	2473a <__aeabi_fmul+0x182>
   247a2:	002a      	movs	r2, r5
   247a4:	2020      	movs	r0, #32
   247a6:	40da      	lsrs	r2, r3
   247a8:	1ac3      	subs	r3, r0, r3
   247aa:	409d      	lsls	r5, r3
   247ac:	002b      	movs	r3, r5
   247ae:	1e5d      	subs	r5, r3, #1
   247b0:	41ab      	sbcs	r3, r5
   247b2:	4313      	orrs	r3, r2
   247b4:	075a      	lsls	r2, r3, #29
   247b6:	d004      	beq.n	247c2 <__aeabi_fmul+0x20a>
   247b8:	220f      	movs	r2, #15
   247ba:	401a      	ands	r2, r3
   247bc:	2a04      	cmp	r2, #4
   247be:	d000      	beq.n	247c2 <__aeabi_fmul+0x20a>
   247c0:	3304      	adds	r3, #4
   247c2:	015a      	lsls	r2, r3, #5
   247c4:	d504      	bpl.n	247d0 <__aeabi_fmul+0x218>
   247c6:	2401      	movs	r4, #1
   247c8:	2201      	movs	r2, #1
   247ca:	400c      	ands	r4, r1
   247cc:	2000      	movs	r0, #0
   247ce:	e73d      	b.n	2464c <__aeabi_fmul+0x94>
   247d0:	2401      	movs	r4, #1
   247d2:	019b      	lsls	r3, r3, #6
   247d4:	0a58      	lsrs	r0, r3, #9
   247d6:	400c      	ands	r4, r1
   247d8:	2200      	movs	r2, #0
   247da:	e737      	b.n	2464c <__aeabi_fmul+0x94>
   247dc:	2080      	movs	r0, #128	; 0x80
   247de:	2401      	movs	r4, #1
   247e0:	03c0      	lsls	r0, r0, #15
   247e2:	4328      	orrs	r0, r5
   247e4:	0240      	lsls	r0, r0, #9
   247e6:	0a40      	lsrs	r0, r0, #9
   247e8:	400c      	ands	r4, r1
   247ea:	22ff      	movs	r2, #255	; 0xff
   247ec:	e72e      	b.n	2464c <__aeabi_fmul+0x94>
   247ee:	46c0      	nop			; (mov r8, r8)
   247f0:	0002af00 	.word	0x0002af00
   247f4:	f7ffffff 	.word	0xf7ffffff

000247f8 <__aeabi_f2iz>:
   247f8:	0241      	lsls	r1, r0, #9
   247fa:	0043      	lsls	r3, r0, #1
   247fc:	0fc2      	lsrs	r2, r0, #31
   247fe:	0a49      	lsrs	r1, r1, #9
   24800:	0e1b      	lsrs	r3, r3, #24
   24802:	2000      	movs	r0, #0
   24804:	2b7e      	cmp	r3, #126	; 0x7e
   24806:	dd0d      	ble.n	24824 <__aeabi_f2iz+0x2c>
   24808:	2b9d      	cmp	r3, #157	; 0x9d
   2480a:	dc0c      	bgt.n	24826 <__aeabi_f2iz+0x2e>
   2480c:	2080      	movs	r0, #128	; 0x80
   2480e:	0400      	lsls	r0, r0, #16
   24810:	4301      	orrs	r1, r0
   24812:	2b95      	cmp	r3, #149	; 0x95
   24814:	dc0a      	bgt.n	2482c <__aeabi_f2iz+0x34>
   24816:	2096      	movs	r0, #150	; 0x96
   24818:	1ac3      	subs	r3, r0, r3
   2481a:	40d9      	lsrs	r1, r3
   2481c:	4248      	negs	r0, r1
   2481e:	2a00      	cmp	r2, #0
   24820:	d100      	bne.n	24824 <__aeabi_f2iz+0x2c>
   24822:	0008      	movs	r0, r1
   24824:	4770      	bx	lr
   24826:	4b03      	ldr	r3, [pc, #12]	; (24834 <__aeabi_f2iz+0x3c>)
   24828:	18d0      	adds	r0, r2, r3
   2482a:	e7fb      	b.n	24824 <__aeabi_f2iz+0x2c>
   2482c:	3b96      	subs	r3, #150	; 0x96
   2482e:	4099      	lsls	r1, r3
   24830:	e7f4      	b.n	2481c <__aeabi_f2iz+0x24>
   24832:	46c0      	nop			; (mov r8, r8)
   24834:	7fffffff 	.word	0x7fffffff

00024838 <__aeabi_i2f>:
   24838:	b570      	push	{r4, r5, r6, lr}
   2483a:	2800      	cmp	r0, #0
   2483c:	d030      	beq.n	248a0 <__aeabi_i2f+0x68>
   2483e:	17c3      	asrs	r3, r0, #31
   24840:	18c4      	adds	r4, r0, r3
   24842:	405c      	eors	r4, r3
   24844:	0fc5      	lsrs	r5, r0, #31
   24846:	0020      	movs	r0, r4
   24848:	f001 fc8c 	bl	26164 <__clzsi2>
   2484c:	239e      	movs	r3, #158	; 0x9e
   2484e:	1a1b      	subs	r3, r3, r0
   24850:	2b96      	cmp	r3, #150	; 0x96
   24852:	dc0d      	bgt.n	24870 <__aeabi_i2f+0x38>
   24854:	2296      	movs	r2, #150	; 0x96
   24856:	1ad2      	subs	r2, r2, r3
   24858:	4094      	lsls	r4, r2
   2485a:	002a      	movs	r2, r5
   2485c:	0264      	lsls	r4, r4, #9
   2485e:	0a64      	lsrs	r4, r4, #9
   24860:	b2db      	uxtb	r3, r3
   24862:	0264      	lsls	r4, r4, #9
   24864:	05db      	lsls	r3, r3, #23
   24866:	0a60      	lsrs	r0, r4, #9
   24868:	07d2      	lsls	r2, r2, #31
   2486a:	4318      	orrs	r0, r3
   2486c:	4310      	orrs	r0, r2
   2486e:	bd70      	pop	{r4, r5, r6, pc}
   24870:	2b99      	cmp	r3, #153	; 0x99
   24872:	dc19      	bgt.n	248a8 <__aeabi_i2f+0x70>
   24874:	2299      	movs	r2, #153	; 0x99
   24876:	1ad2      	subs	r2, r2, r3
   24878:	2a00      	cmp	r2, #0
   2487a:	dd29      	ble.n	248d0 <__aeabi_i2f+0x98>
   2487c:	4094      	lsls	r4, r2
   2487e:	0022      	movs	r2, r4
   24880:	4c14      	ldr	r4, [pc, #80]	; (248d4 <__aeabi_i2f+0x9c>)
   24882:	4014      	ands	r4, r2
   24884:	0751      	lsls	r1, r2, #29
   24886:	d004      	beq.n	24892 <__aeabi_i2f+0x5a>
   24888:	210f      	movs	r1, #15
   2488a:	400a      	ands	r2, r1
   2488c:	2a04      	cmp	r2, #4
   2488e:	d000      	beq.n	24892 <__aeabi_i2f+0x5a>
   24890:	3404      	adds	r4, #4
   24892:	0162      	lsls	r2, r4, #5
   24894:	d413      	bmi.n	248be <__aeabi_i2f+0x86>
   24896:	01a4      	lsls	r4, r4, #6
   24898:	0a64      	lsrs	r4, r4, #9
   2489a:	b2db      	uxtb	r3, r3
   2489c:	002a      	movs	r2, r5
   2489e:	e7e0      	b.n	24862 <__aeabi_i2f+0x2a>
   248a0:	2200      	movs	r2, #0
   248a2:	2300      	movs	r3, #0
   248a4:	2400      	movs	r4, #0
   248a6:	e7dc      	b.n	24862 <__aeabi_i2f+0x2a>
   248a8:	2205      	movs	r2, #5
   248aa:	0021      	movs	r1, r4
   248ac:	1a12      	subs	r2, r2, r0
   248ae:	40d1      	lsrs	r1, r2
   248b0:	22b9      	movs	r2, #185	; 0xb9
   248b2:	1ad2      	subs	r2, r2, r3
   248b4:	4094      	lsls	r4, r2
   248b6:	1e62      	subs	r2, r4, #1
   248b8:	4194      	sbcs	r4, r2
   248ba:	430c      	orrs	r4, r1
   248bc:	e7da      	b.n	24874 <__aeabi_i2f+0x3c>
   248be:	4b05      	ldr	r3, [pc, #20]	; (248d4 <__aeabi_i2f+0x9c>)
   248c0:	002a      	movs	r2, r5
   248c2:	401c      	ands	r4, r3
   248c4:	239f      	movs	r3, #159	; 0x9f
   248c6:	01a4      	lsls	r4, r4, #6
   248c8:	1a1b      	subs	r3, r3, r0
   248ca:	0a64      	lsrs	r4, r4, #9
   248cc:	b2db      	uxtb	r3, r3
   248ce:	e7c8      	b.n	24862 <__aeabi_i2f+0x2a>
   248d0:	0022      	movs	r2, r4
   248d2:	e7d5      	b.n	24880 <__aeabi_i2f+0x48>
   248d4:	fbffffff 	.word	0xfbffffff

000248d8 <__aeabi_dadd>:
   248d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248da:	4645      	mov	r5, r8
   248dc:	46de      	mov	lr, fp
   248de:	4657      	mov	r7, sl
   248e0:	464e      	mov	r6, r9
   248e2:	030c      	lsls	r4, r1, #12
   248e4:	b5e0      	push	{r5, r6, r7, lr}
   248e6:	004e      	lsls	r6, r1, #1
   248e8:	0fc9      	lsrs	r1, r1, #31
   248ea:	4688      	mov	r8, r1
   248ec:	000d      	movs	r5, r1
   248ee:	0a61      	lsrs	r1, r4, #9
   248f0:	0f44      	lsrs	r4, r0, #29
   248f2:	430c      	orrs	r4, r1
   248f4:	00c7      	lsls	r7, r0, #3
   248f6:	0319      	lsls	r1, r3, #12
   248f8:	0058      	lsls	r0, r3, #1
   248fa:	0fdb      	lsrs	r3, r3, #31
   248fc:	469b      	mov	fp, r3
   248fe:	0a4b      	lsrs	r3, r1, #9
   24900:	0f51      	lsrs	r1, r2, #29
   24902:	430b      	orrs	r3, r1
   24904:	0d76      	lsrs	r6, r6, #21
   24906:	0d40      	lsrs	r0, r0, #21
   24908:	0019      	movs	r1, r3
   2490a:	00d2      	lsls	r2, r2, #3
   2490c:	45d8      	cmp	r8, fp
   2490e:	d100      	bne.n	24912 <__aeabi_dadd+0x3a>
   24910:	e0ae      	b.n	24a70 <__aeabi_dadd+0x198>
   24912:	1a35      	subs	r5, r6, r0
   24914:	2d00      	cmp	r5, #0
   24916:	dc00      	bgt.n	2491a <__aeabi_dadd+0x42>
   24918:	e0f6      	b.n	24b08 <__aeabi_dadd+0x230>
   2491a:	2800      	cmp	r0, #0
   2491c:	d10f      	bne.n	2493e <__aeabi_dadd+0x66>
   2491e:	4313      	orrs	r3, r2
   24920:	d100      	bne.n	24924 <__aeabi_dadd+0x4c>
   24922:	e0db      	b.n	24adc <__aeabi_dadd+0x204>
   24924:	1e6b      	subs	r3, r5, #1
   24926:	2b00      	cmp	r3, #0
   24928:	d000      	beq.n	2492c <__aeabi_dadd+0x54>
   2492a:	e137      	b.n	24b9c <__aeabi_dadd+0x2c4>
   2492c:	1aba      	subs	r2, r7, r2
   2492e:	4297      	cmp	r7, r2
   24930:	41bf      	sbcs	r7, r7
   24932:	1a64      	subs	r4, r4, r1
   24934:	427f      	negs	r7, r7
   24936:	1be4      	subs	r4, r4, r7
   24938:	2601      	movs	r6, #1
   2493a:	0017      	movs	r7, r2
   2493c:	e024      	b.n	24988 <__aeabi_dadd+0xb0>
   2493e:	4bc6      	ldr	r3, [pc, #792]	; (24c58 <__aeabi_dadd+0x380>)
   24940:	429e      	cmp	r6, r3
   24942:	d04d      	beq.n	249e0 <__aeabi_dadd+0x108>
   24944:	2380      	movs	r3, #128	; 0x80
   24946:	041b      	lsls	r3, r3, #16
   24948:	4319      	orrs	r1, r3
   2494a:	2d38      	cmp	r5, #56	; 0x38
   2494c:	dd00      	ble.n	24950 <__aeabi_dadd+0x78>
   2494e:	e107      	b.n	24b60 <__aeabi_dadd+0x288>
   24950:	2d1f      	cmp	r5, #31
   24952:	dd00      	ble.n	24956 <__aeabi_dadd+0x7e>
   24954:	e138      	b.n	24bc8 <__aeabi_dadd+0x2f0>
   24956:	2020      	movs	r0, #32
   24958:	1b43      	subs	r3, r0, r5
   2495a:	469a      	mov	sl, r3
   2495c:	000b      	movs	r3, r1
   2495e:	4650      	mov	r0, sl
   24960:	4083      	lsls	r3, r0
   24962:	4699      	mov	r9, r3
   24964:	0013      	movs	r3, r2
   24966:	4648      	mov	r0, r9
   24968:	40eb      	lsrs	r3, r5
   2496a:	4318      	orrs	r0, r3
   2496c:	0003      	movs	r3, r0
   2496e:	4650      	mov	r0, sl
   24970:	4082      	lsls	r2, r0
   24972:	1e50      	subs	r0, r2, #1
   24974:	4182      	sbcs	r2, r0
   24976:	40e9      	lsrs	r1, r5
   24978:	431a      	orrs	r2, r3
   2497a:	1aba      	subs	r2, r7, r2
   2497c:	1a61      	subs	r1, r4, r1
   2497e:	4297      	cmp	r7, r2
   24980:	41a4      	sbcs	r4, r4
   24982:	0017      	movs	r7, r2
   24984:	4264      	negs	r4, r4
   24986:	1b0c      	subs	r4, r1, r4
   24988:	0223      	lsls	r3, r4, #8
   2498a:	d562      	bpl.n	24a52 <__aeabi_dadd+0x17a>
   2498c:	0264      	lsls	r4, r4, #9
   2498e:	0a65      	lsrs	r5, r4, #9
   24990:	2d00      	cmp	r5, #0
   24992:	d100      	bne.n	24996 <__aeabi_dadd+0xbe>
   24994:	e0df      	b.n	24b56 <__aeabi_dadd+0x27e>
   24996:	0028      	movs	r0, r5
   24998:	f001 fbe4 	bl	26164 <__clzsi2>
   2499c:	0003      	movs	r3, r0
   2499e:	3b08      	subs	r3, #8
   249a0:	2b1f      	cmp	r3, #31
   249a2:	dd00      	ble.n	249a6 <__aeabi_dadd+0xce>
   249a4:	e0d2      	b.n	24b4c <__aeabi_dadd+0x274>
   249a6:	2220      	movs	r2, #32
   249a8:	003c      	movs	r4, r7
   249aa:	1ad2      	subs	r2, r2, r3
   249ac:	409d      	lsls	r5, r3
   249ae:	40d4      	lsrs	r4, r2
   249b0:	409f      	lsls	r7, r3
   249b2:	4325      	orrs	r5, r4
   249b4:	429e      	cmp	r6, r3
   249b6:	dd00      	ble.n	249ba <__aeabi_dadd+0xe2>
   249b8:	e0c4      	b.n	24b44 <__aeabi_dadd+0x26c>
   249ba:	1b9e      	subs	r6, r3, r6
   249bc:	1c73      	adds	r3, r6, #1
   249be:	2b1f      	cmp	r3, #31
   249c0:	dd00      	ble.n	249c4 <__aeabi_dadd+0xec>
   249c2:	e0f1      	b.n	24ba8 <__aeabi_dadd+0x2d0>
   249c4:	2220      	movs	r2, #32
   249c6:	0038      	movs	r0, r7
   249c8:	0029      	movs	r1, r5
   249ca:	1ad2      	subs	r2, r2, r3
   249cc:	40d8      	lsrs	r0, r3
   249ce:	4091      	lsls	r1, r2
   249d0:	4097      	lsls	r7, r2
   249d2:	002c      	movs	r4, r5
   249d4:	4301      	orrs	r1, r0
   249d6:	1e78      	subs	r0, r7, #1
   249d8:	4187      	sbcs	r7, r0
   249da:	40dc      	lsrs	r4, r3
   249dc:	2600      	movs	r6, #0
   249de:	430f      	orrs	r7, r1
   249e0:	077b      	lsls	r3, r7, #29
   249e2:	d009      	beq.n	249f8 <__aeabi_dadd+0x120>
   249e4:	230f      	movs	r3, #15
   249e6:	403b      	ands	r3, r7
   249e8:	2b04      	cmp	r3, #4
   249ea:	d005      	beq.n	249f8 <__aeabi_dadd+0x120>
   249ec:	1d3b      	adds	r3, r7, #4
   249ee:	42bb      	cmp	r3, r7
   249f0:	41bf      	sbcs	r7, r7
   249f2:	427f      	negs	r7, r7
   249f4:	19e4      	adds	r4, r4, r7
   249f6:	001f      	movs	r7, r3
   249f8:	0223      	lsls	r3, r4, #8
   249fa:	d52c      	bpl.n	24a56 <__aeabi_dadd+0x17e>
   249fc:	4b96      	ldr	r3, [pc, #600]	; (24c58 <__aeabi_dadd+0x380>)
   249fe:	3601      	adds	r6, #1
   24a00:	429e      	cmp	r6, r3
   24a02:	d100      	bne.n	24a06 <__aeabi_dadd+0x12e>
   24a04:	e09a      	b.n	24b3c <__aeabi_dadd+0x264>
   24a06:	4645      	mov	r5, r8
   24a08:	4b94      	ldr	r3, [pc, #592]	; (24c5c <__aeabi_dadd+0x384>)
   24a0a:	08ff      	lsrs	r7, r7, #3
   24a0c:	401c      	ands	r4, r3
   24a0e:	0760      	lsls	r0, r4, #29
   24a10:	0576      	lsls	r6, r6, #21
   24a12:	0264      	lsls	r4, r4, #9
   24a14:	4307      	orrs	r7, r0
   24a16:	0b24      	lsrs	r4, r4, #12
   24a18:	0d76      	lsrs	r6, r6, #21
   24a1a:	2100      	movs	r1, #0
   24a1c:	0324      	lsls	r4, r4, #12
   24a1e:	0b23      	lsrs	r3, r4, #12
   24a20:	0d0c      	lsrs	r4, r1, #20
   24a22:	4a8f      	ldr	r2, [pc, #572]	; (24c60 <__aeabi_dadd+0x388>)
   24a24:	0524      	lsls	r4, r4, #20
   24a26:	431c      	orrs	r4, r3
   24a28:	4014      	ands	r4, r2
   24a2a:	0533      	lsls	r3, r6, #20
   24a2c:	4323      	orrs	r3, r4
   24a2e:	005b      	lsls	r3, r3, #1
   24a30:	07ed      	lsls	r5, r5, #31
   24a32:	085b      	lsrs	r3, r3, #1
   24a34:	432b      	orrs	r3, r5
   24a36:	0038      	movs	r0, r7
   24a38:	0019      	movs	r1, r3
   24a3a:	bc3c      	pop	{r2, r3, r4, r5}
   24a3c:	4690      	mov	r8, r2
   24a3e:	4699      	mov	r9, r3
   24a40:	46a2      	mov	sl, r4
   24a42:	46ab      	mov	fp, r5
   24a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a46:	4664      	mov	r4, ip
   24a48:	4304      	orrs	r4, r0
   24a4a:	d100      	bne.n	24a4e <__aeabi_dadd+0x176>
   24a4c:	e211      	b.n	24e72 <__aeabi_dadd+0x59a>
   24a4e:	0004      	movs	r4, r0
   24a50:	4667      	mov	r7, ip
   24a52:	077b      	lsls	r3, r7, #29
   24a54:	d1c6      	bne.n	249e4 <__aeabi_dadd+0x10c>
   24a56:	4645      	mov	r5, r8
   24a58:	0760      	lsls	r0, r4, #29
   24a5a:	08ff      	lsrs	r7, r7, #3
   24a5c:	4307      	orrs	r7, r0
   24a5e:	08e4      	lsrs	r4, r4, #3
   24a60:	4b7d      	ldr	r3, [pc, #500]	; (24c58 <__aeabi_dadd+0x380>)
   24a62:	429e      	cmp	r6, r3
   24a64:	d030      	beq.n	24ac8 <__aeabi_dadd+0x1f0>
   24a66:	0324      	lsls	r4, r4, #12
   24a68:	0576      	lsls	r6, r6, #21
   24a6a:	0b24      	lsrs	r4, r4, #12
   24a6c:	0d76      	lsrs	r6, r6, #21
   24a6e:	e7d4      	b.n	24a1a <__aeabi_dadd+0x142>
   24a70:	1a33      	subs	r3, r6, r0
   24a72:	469a      	mov	sl, r3
   24a74:	2b00      	cmp	r3, #0
   24a76:	dd78      	ble.n	24b6a <__aeabi_dadd+0x292>
   24a78:	2800      	cmp	r0, #0
   24a7a:	d031      	beq.n	24ae0 <__aeabi_dadd+0x208>
   24a7c:	4876      	ldr	r0, [pc, #472]	; (24c58 <__aeabi_dadd+0x380>)
   24a7e:	4286      	cmp	r6, r0
   24a80:	d0ae      	beq.n	249e0 <__aeabi_dadd+0x108>
   24a82:	2080      	movs	r0, #128	; 0x80
   24a84:	0400      	lsls	r0, r0, #16
   24a86:	4301      	orrs	r1, r0
   24a88:	4653      	mov	r3, sl
   24a8a:	2b38      	cmp	r3, #56	; 0x38
   24a8c:	dc00      	bgt.n	24a90 <__aeabi_dadd+0x1b8>
   24a8e:	e0e9      	b.n	24c64 <__aeabi_dadd+0x38c>
   24a90:	430a      	orrs	r2, r1
   24a92:	1e51      	subs	r1, r2, #1
   24a94:	418a      	sbcs	r2, r1
   24a96:	2100      	movs	r1, #0
   24a98:	19d2      	adds	r2, r2, r7
   24a9a:	42ba      	cmp	r2, r7
   24a9c:	41bf      	sbcs	r7, r7
   24a9e:	1909      	adds	r1, r1, r4
   24aa0:	427c      	negs	r4, r7
   24aa2:	0017      	movs	r7, r2
   24aa4:	190c      	adds	r4, r1, r4
   24aa6:	0223      	lsls	r3, r4, #8
   24aa8:	d5d3      	bpl.n	24a52 <__aeabi_dadd+0x17a>
   24aaa:	4b6b      	ldr	r3, [pc, #428]	; (24c58 <__aeabi_dadd+0x380>)
   24aac:	3601      	adds	r6, #1
   24aae:	429e      	cmp	r6, r3
   24ab0:	d100      	bne.n	24ab4 <__aeabi_dadd+0x1dc>
   24ab2:	e13a      	b.n	24d2a <__aeabi_dadd+0x452>
   24ab4:	2001      	movs	r0, #1
   24ab6:	4b69      	ldr	r3, [pc, #420]	; (24c5c <__aeabi_dadd+0x384>)
   24ab8:	401c      	ands	r4, r3
   24aba:	087b      	lsrs	r3, r7, #1
   24abc:	4007      	ands	r7, r0
   24abe:	431f      	orrs	r7, r3
   24ac0:	07e0      	lsls	r0, r4, #31
   24ac2:	4307      	orrs	r7, r0
   24ac4:	0864      	lsrs	r4, r4, #1
   24ac6:	e78b      	b.n	249e0 <__aeabi_dadd+0x108>
   24ac8:	0023      	movs	r3, r4
   24aca:	433b      	orrs	r3, r7
   24acc:	d100      	bne.n	24ad0 <__aeabi_dadd+0x1f8>
   24ace:	e1cb      	b.n	24e68 <__aeabi_dadd+0x590>
   24ad0:	2280      	movs	r2, #128	; 0x80
   24ad2:	0312      	lsls	r2, r2, #12
   24ad4:	4314      	orrs	r4, r2
   24ad6:	0324      	lsls	r4, r4, #12
   24ad8:	0b24      	lsrs	r4, r4, #12
   24ada:	e79e      	b.n	24a1a <__aeabi_dadd+0x142>
   24adc:	002e      	movs	r6, r5
   24ade:	e77f      	b.n	249e0 <__aeabi_dadd+0x108>
   24ae0:	0008      	movs	r0, r1
   24ae2:	4310      	orrs	r0, r2
   24ae4:	d100      	bne.n	24ae8 <__aeabi_dadd+0x210>
   24ae6:	e0b4      	b.n	24c52 <__aeabi_dadd+0x37a>
   24ae8:	1e58      	subs	r0, r3, #1
   24aea:	2800      	cmp	r0, #0
   24aec:	d000      	beq.n	24af0 <__aeabi_dadd+0x218>
   24aee:	e0de      	b.n	24cae <__aeabi_dadd+0x3d6>
   24af0:	18ba      	adds	r2, r7, r2
   24af2:	42ba      	cmp	r2, r7
   24af4:	419b      	sbcs	r3, r3
   24af6:	1864      	adds	r4, r4, r1
   24af8:	425b      	negs	r3, r3
   24afa:	18e4      	adds	r4, r4, r3
   24afc:	0017      	movs	r7, r2
   24afe:	2601      	movs	r6, #1
   24b00:	0223      	lsls	r3, r4, #8
   24b02:	d5a6      	bpl.n	24a52 <__aeabi_dadd+0x17a>
   24b04:	2602      	movs	r6, #2
   24b06:	e7d5      	b.n	24ab4 <__aeabi_dadd+0x1dc>
   24b08:	2d00      	cmp	r5, #0
   24b0a:	d16e      	bne.n	24bea <__aeabi_dadd+0x312>
   24b0c:	1c70      	adds	r0, r6, #1
   24b0e:	0540      	lsls	r0, r0, #21
   24b10:	0d40      	lsrs	r0, r0, #21
   24b12:	2801      	cmp	r0, #1
   24b14:	dc00      	bgt.n	24b18 <__aeabi_dadd+0x240>
   24b16:	e0f9      	b.n	24d0c <__aeabi_dadd+0x434>
   24b18:	1ab8      	subs	r0, r7, r2
   24b1a:	4684      	mov	ip, r0
   24b1c:	4287      	cmp	r7, r0
   24b1e:	4180      	sbcs	r0, r0
   24b20:	1ae5      	subs	r5, r4, r3
   24b22:	4240      	negs	r0, r0
   24b24:	1a2d      	subs	r5, r5, r0
   24b26:	0228      	lsls	r0, r5, #8
   24b28:	d400      	bmi.n	24b2c <__aeabi_dadd+0x254>
   24b2a:	e089      	b.n	24c40 <__aeabi_dadd+0x368>
   24b2c:	1bd7      	subs	r7, r2, r7
   24b2e:	42ba      	cmp	r2, r7
   24b30:	4192      	sbcs	r2, r2
   24b32:	1b1c      	subs	r4, r3, r4
   24b34:	4252      	negs	r2, r2
   24b36:	1aa5      	subs	r5, r4, r2
   24b38:	46d8      	mov	r8, fp
   24b3a:	e729      	b.n	24990 <__aeabi_dadd+0xb8>
   24b3c:	4645      	mov	r5, r8
   24b3e:	2400      	movs	r4, #0
   24b40:	2700      	movs	r7, #0
   24b42:	e76a      	b.n	24a1a <__aeabi_dadd+0x142>
   24b44:	4c45      	ldr	r4, [pc, #276]	; (24c5c <__aeabi_dadd+0x384>)
   24b46:	1af6      	subs	r6, r6, r3
   24b48:	402c      	ands	r4, r5
   24b4a:	e749      	b.n	249e0 <__aeabi_dadd+0x108>
   24b4c:	003d      	movs	r5, r7
   24b4e:	3828      	subs	r0, #40	; 0x28
   24b50:	4085      	lsls	r5, r0
   24b52:	2700      	movs	r7, #0
   24b54:	e72e      	b.n	249b4 <__aeabi_dadd+0xdc>
   24b56:	0038      	movs	r0, r7
   24b58:	f001 fb04 	bl	26164 <__clzsi2>
   24b5c:	3020      	adds	r0, #32
   24b5e:	e71d      	b.n	2499c <__aeabi_dadd+0xc4>
   24b60:	430a      	orrs	r2, r1
   24b62:	1e51      	subs	r1, r2, #1
   24b64:	418a      	sbcs	r2, r1
   24b66:	2100      	movs	r1, #0
   24b68:	e707      	b.n	2497a <__aeabi_dadd+0xa2>
   24b6a:	2b00      	cmp	r3, #0
   24b6c:	d000      	beq.n	24b70 <__aeabi_dadd+0x298>
   24b6e:	e0f3      	b.n	24d58 <__aeabi_dadd+0x480>
   24b70:	1c70      	adds	r0, r6, #1
   24b72:	0543      	lsls	r3, r0, #21
   24b74:	0d5b      	lsrs	r3, r3, #21
   24b76:	2b01      	cmp	r3, #1
   24b78:	dc00      	bgt.n	24b7c <__aeabi_dadd+0x2a4>
   24b7a:	e0ad      	b.n	24cd8 <__aeabi_dadd+0x400>
   24b7c:	4b36      	ldr	r3, [pc, #216]	; (24c58 <__aeabi_dadd+0x380>)
   24b7e:	4298      	cmp	r0, r3
   24b80:	d100      	bne.n	24b84 <__aeabi_dadd+0x2ac>
   24b82:	e0d1      	b.n	24d28 <__aeabi_dadd+0x450>
   24b84:	18ba      	adds	r2, r7, r2
   24b86:	42ba      	cmp	r2, r7
   24b88:	41bf      	sbcs	r7, r7
   24b8a:	1864      	adds	r4, r4, r1
   24b8c:	427f      	negs	r7, r7
   24b8e:	19e4      	adds	r4, r4, r7
   24b90:	07e7      	lsls	r7, r4, #31
   24b92:	0852      	lsrs	r2, r2, #1
   24b94:	4317      	orrs	r7, r2
   24b96:	0864      	lsrs	r4, r4, #1
   24b98:	0006      	movs	r6, r0
   24b9a:	e721      	b.n	249e0 <__aeabi_dadd+0x108>
   24b9c:	482e      	ldr	r0, [pc, #184]	; (24c58 <__aeabi_dadd+0x380>)
   24b9e:	4285      	cmp	r5, r0
   24ba0:	d100      	bne.n	24ba4 <__aeabi_dadd+0x2cc>
   24ba2:	e093      	b.n	24ccc <__aeabi_dadd+0x3f4>
   24ba4:	001d      	movs	r5, r3
   24ba6:	e6d0      	b.n	2494a <__aeabi_dadd+0x72>
   24ba8:	0029      	movs	r1, r5
   24baa:	3e1f      	subs	r6, #31
   24bac:	40f1      	lsrs	r1, r6
   24bae:	2b20      	cmp	r3, #32
   24bb0:	d100      	bne.n	24bb4 <__aeabi_dadd+0x2dc>
   24bb2:	e08d      	b.n	24cd0 <__aeabi_dadd+0x3f8>
   24bb4:	2240      	movs	r2, #64	; 0x40
   24bb6:	1ad3      	subs	r3, r2, r3
   24bb8:	409d      	lsls	r5, r3
   24bba:	432f      	orrs	r7, r5
   24bbc:	1e7d      	subs	r5, r7, #1
   24bbe:	41af      	sbcs	r7, r5
   24bc0:	2400      	movs	r4, #0
   24bc2:	430f      	orrs	r7, r1
   24bc4:	2600      	movs	r6, #0
   24bc6:	e744      	b.n	24a52 <__aeabi_dadd+0x17a>
   24bc8:	002b      	movs	r3, r5
   24bca:	0008      	movs	r0, r1
   24bcc:	3b20      	subs	r3, #32
   24bce:	40d8      	lsrs	r0, r3
   24bd0:	0003      	movs	r3, r0
   24bd2:	2d20      	cmp	r5, #32
   24bd4:	d100      	bne.n	24bd8 <__aeabi_dadd+0x300>
   24bd6:	e07d      	b.n	24cd4 <__aeabi_dadd+0x3fc>
   24bd8:	2040      	movs	r0, #64	; 0x40
   24bda:	1b45      	subs	r5, r0, r5
   24bdc:	40a9      	lsls	r1, r5
   24bde:	430a      	orrs	r2, r1
   24be0:	1e51      	subs	r1, r2, #1
   24be2:	418a      	sbcs	r2, r1
   24be4:	2100      	movs	r1, #0
   24be6:	431a      	orrs	r2, r3
   24be8:	e6c7      	b.n	2497a <__aeabi_dadd+0xa2>
   24bea:	2e00      	cmp	r6, #0
   24bec:	d050      	beq.n	24c90 <__aeabi_dadd+0x3b8>
   24bee:	4e1a      	ldr	r6, [pc, #104]	; (24c58 <__aeabi_dadd+0x380>)
   24bf0:	42b0      	cmp	r0, r6
   24bf2:	d057      	beq.n	24ca4 <__aeabi_dadd+0x3cc>
   24bf4:	2680      	movs	r6, #128	; 0x80
   24bf6:	426b      	negs	r3, r5
   24bf8:	4699      	mov	r9, r3
   24bfa:	0436      	lsls	r6, r6, #16
   24bfc:	4334      	orrs	r4, r6
   24bfe:	464b      	mov	r3, r9
   24c00:	2b38      	cmp	r3, #56	; 0x38
   24c02:	dd00      	ble.n	24c06 <__aeabi_dadd+0x32e>
   24c04:	e0d6      	b.n	24db4 <__aeabi_dadd+0x4dc>
   24c06:	2b1f      	cmp	r3, #31
   24c08:	dd00      	ble.n	24c0c <__aeabi_dadd+0x334>
   24c0a:	e135      	b.n	24e78 <__aeabi_dadd+0x5a0>
   24c0c:	2620      	movs	r6, #32
   24c0e:	1af5      	subs	r5, r6, r3
   24c10:	0026      	movs	r6, r4
   24c12:	40ae      	lsls	r6, r5
   24c14:	46b2      	mov	sl, r6
   24c16:	003e      	movs	r6, r7
   24c18:	40de      	lsrs	r6, r3
   24c1a:	46ac      	mov	ip, r5
   24c1c:	0035      	movs	r5, r6
   24c1e:	4656      	mov	r6, sl
   24c20:	432e      	orrs	r6, r5
   24c22:	4665      	mov	r5, ip
   24c24:	40af      	lsls	r7, r5
   24c26:	1e7d      	subs	r5, r7, #1
   24c28:	41af      	sbcs	r7, r5
   24c2a:	40dc      	lsrs	r4, r3
   24c2c:	4337      	orrs	r7, r6
   24c2e:	1bd7      	subs	r7, r2, r7
   24c30:	42ba      	cmp	r2, r7
   24c32:	4192      	sbcs	r2, r2
   24c34:	1b0c      	subs	r4, r1, r4
   24c36:	4252      	negs	r2, r2
   24c38:	1aa4      	subs	r4, r4, r2
   24c3a:	0006      	movs	r6, r0
   24c3c:	46d8      	mov	r8, fp
   24c3e:	e6a3      	b.n	24988 <__aeabi_dadd+0xb0>
   24c40:	4664      	mov	r4, ip
   24c42:	4667      	mov	r7, ip
   24c44:	432c      	orrs	r4, r5
   24c46:	d000      	beq.n	24c4a <__aeabi_dadd+0x372>
   24c48:	e6a2      	b.n	24990 <__aeabi_dadd+0xb8>
   24c4a:	2500      	movs	r5, #0
   24c4c:	2600      	movs	r6, #0
   24c4e:	2700      	movs	r7, #0
   24c50:	e706      	b.n	24a60 <__aeabi_dadd+0x188>
   24c52:	001e      	movs	r6, r3
   24c54:	e6c4      	b.n	249e0 <__aeabi_dadd+0x108>
   24c56:	46c0      	nop			; (mov r8, r8)
   24c58:	000007ff 	.word	0x000007ff
   24c5c:	ff7fffff 	.word	0xff7fffff
   24c60:	800fffff 	.word	0x800fffff
   24c64:	2b1f      	cmp	r3, #31
   24c66:	dc63      	bgt.n	24d30 <__aeabi_dadd+0x458>
   24c68:	2020      	movs	r0, #32
   24c6a:	1ac3      	subs	r3, r0, r3
   24c6c:	0008      	movs	r0, r1
   24c6e:	4098      	lsls	r0, r3
   24c70:	469c      	mov	ip, r3
   24c72:	4683      	mov	fp, r0
   24c74:	4653      	mov	r3, sl
   24c76:	0010      	movs	r0, r2
   24c78:	40d8      	lsrs	r0, r3
   24c7a:	0003      	movs	r3, r0
   24c7c:	4658      	mov	r0, fp
   24c7e:	4318      	orrs	r0, r3
   24c80:	4663      	mov	r3, ip
   24c82:	409a      	lsls	r2, r3
   24c84:	1e53      	subs	r3, r2, #1
   24c86:	419a      	sbcs	r2, r3
   24c88:	4653      	mov	r3, sl
   24c8a:	4302      	orrs	r2, r0
   24c8c:	40d9      	lsrs	r1, r3
   24c8e:	e703      	b.n	24a98 <__aeabi_dadd+0x1c0>
   24c90:	0026      	movs	r6, r4
   24c92:	433e      	orrs	r6, r7
   24c94:	d006      	beq.n	24ca4 <__aeabi_dadd+0x3cc>
   24c96:	43eb      	mvns	r3, r5
   24c98:	4699      	mov	r9, r3
   24c9a:	2b00      	cmp	r3, #0
   24c9c:	d0c7      	beq.n	24c2e <__aeabi_dadd+0x356>
   24c9e:	4e94      	ldr	r6, [pc, #592]	; (24ef0 <__aeabi_dadd+0x618>)
   24ca0:	42b0      	cmp	r0, r6
   24ca2:	d1ac      	bne.n	24bfe <__aeabi_dadd+0x326>
   24ca4:	000c      	movs	r4, r1
   24ca6:	0017      	movs	r7, r2
   24ca8:	0006      	movs	r6, r0
   24caa:	46d8      	mov	r8, fp
   24cac:	e698      	b.n	249e0 <__aeabi_dadd+0x108>
   24cae:	4b90      	ldr	r3, [pc, #576]	; (24ef0 <__aeabi_dadd+0x618>)
   24cb0:	459a      	cmp	sl, r3
   24cb2:	d00b      	beq.n	24ccc <__aeabi_dadd+0x3f4>
   24cb4:	4682      	mov	sl, r0
   24cb6:	e6e7      	b.n	24a88 <__aeabi_dadd+0x1b0>
   24cb8:	2800      	cmp	r0, #0
   24cba:	d000      	beq.n	24cbe <__aeabi_dadd+0x3e6>
   24cbc:	e09e      	b.n	24dfc <__aeabi_dadd+0x524>
   24cbe:	0018      	movs	r0, r3
   24cc0:	4310      	orrs	r0, r2
   24cc2:	d100      	bne.n	24cc6 <__aeabi_dadd+0x3ee>
   24cc4:	e0e9      	b.n	24e9a <__aeabi_dadd+0x5c2>
   24cc6:	001c      	movs	r4, r3
   24cc8:	0017      	movs	r7, r2
   24cca:	46d8      	mov	r8, fp
   24ccc:	4e88      	ldr	r6, [pc, #544]	; (24ef0 <__aeabi_dadd+0x618>)
   24cce:	e687      	b.n	249e0 <__aeabi_dadd+0x108>
   24cd0:	2500      	movs	r5, #0
   24cd2:	e772      	b.n	24bba <__aeabi_dadd+0x2e2>
   24cd4:	2100      	movs	r1, #0
   24cd6:	e782      	b.n	24bde <__aeabi_dadd+0x306>
   24cd8:	0023      	movs	r3, r4
   24cda:	433b      	orrs	r3, r7
   24cdc:	2e00      	cmp	r6, #0
   24cde:	d000      	beq.n	24ce2 <__aeabi_dadd+0x40a>
   24ce0:	e0ab      	b.n	24e3a <__aeabi_dadd+0x562>
   24ce2:	2b00      	cmp	r3, #0
   24ce4:	d100      	bne.n	24ce8 <__aeabi_dadd+0x410>
   24ce6:	e0e7      	b.n	24eb8 <__aeabi_dadd+0x5e0>
   24ce8:	000b      	movs	r3, r1
   24cea:	4313      	orrs	r3, r2
   24cec:	d100      	bne.n	24cf0 <__aeabi_dadd+0x418>
   24cee:	e677      	b.n	249e0 <__aeabi_dadd+0x108>
   24cf0:	18ba      	adds	r2, r7, r2
   24cf2:	42ba      	cmp	r2, r7
   24cf4:	41bf      	sbcs	r7, r7
   24cf6:	1864      	adds	r4, r4, r1
   24cf8:	427f      	negs	r7, r7
   24cfa:	19e4      	adds	r4, r4, r7
   24cfc:	0223      	lsls	r3, r4, #8
   24cfe:	d400      	bmi.n	24d02 <__aeabi_dadd+0x42a>
   24d00:	e0f2      	b.n	24ee8 <__aeabi_dadd+0x610>
   24d02:	4b7c      	ldr	r3, [pc, #496]	; (24ef4 <__aeabi_dadd+0x61c>)
   24d04:	0017      	movs	r7, r2
   24d06:	401c      	ands	r4, r3
   24d08:	0006      	movs	r6, r0
   24d0a:	e669      	b.n	249e0 <__aeabi_dadd+0x108>
   24d0c:	0020      	movs	r0, r4
   24d0e:	4338      	orrs	r0, r7
   24d10:	2e00      	cmp	r6, #0
   24d12:	d1d1      	bne.n	24cb8 <__aeabi_dadd+0x3e0>
   24d14:	2800      	cmp	r0, #0
   24d16:	d15b      	bne.n	24dd0 <__aeabi_dadd+0x4f8>
   24d18:	001c      	movs	r4, r3
   24d1a:	4314      	orrs	r4, r2
   24d1c:	d100      	bne.n	24d20 <__aeabi_dadd+0x448>
   24d1e:	e0a8      	b.n	24e72 <__aeabi_dadd+0x59a>
   24d20:	001c      	movs	r4, r3
   24d22:	0017      	movs	r7, r2
   24d24:	46d8      	mov	r8, fp
   24d26:	e65b      	b.n	249e0 <__aeabi_dadd+0x108>
   24d28:	0006      	movs	r6, r0
   24d2a:	2400      	movs	r4, #0
   24d2c:	2700      	movs	r7, #0
   24d2e:	e697      	b.n	24a60 <__aeabi_dadd+0x188>
   24d30:	4650      	mov	r0, sl
   24d32:	000b      	movs	r3, r1
   24d34:	3820      	subs	r0, #32
   24d36:	40c3      	lsrs	r3, r0
   24d38:	4699      	mov	r9, r3
   24d3a:	4653      	mov	r3, sl
   24d3c:	2b20      	cmp	r3, #32
   24d3e:	d100      	bne.n	24d42 <__aeabi_dadd+0x46a>
   24d40:	e095      	b.n	24e6e <__aeabi_dadd+0x596>
   24d42:	2340      	movs	r3, #64	; 0x40
   24d44:	4650      	mov	r0, sl
   24d46:	1a1b      	subs	r3, r3, r0
   24d48:	4099      	lsls	r1, r3
   24d4a:	430a      	orrs	r2, r1
   24d4c:	1e51      	subs	r1, r2, #1
   24d4e:	418a      	sbcs	r2, r1
   24d50:	464b      	mov	r3, r9
   24d52:	2100      	movs	r1, #0
   24d54:	431a      	orrs	r2, r3
   24d56:	e69f      	b.n	24a98 <__aeabi_dadd+0x1c0>
   24d58:	2e00      	cmp	r6, #0
   24d5a:	d130      	bne.n	24dbe <__aeabi_dadd+0x4e6>
   24d5c:	0026      	movs	r6, r4
   24d5e:	433e      	orrs	r6, r7
   24d60:	d067      	beq.n	24e32 <__aeabi_dadd+0x55a>
   24d62:	43db      	mvns	r3, r3
   24d64:	469a      	mov	sl, r3
   24d66:	2b00      	cmp	r3, #0
   24d68:	d01c      	beq.n	24da4 <__aeabi_dadd+0x4cc>
   24d6a:	4e61      	ldr	r6, [pc, #388]	; (24ef0 <__aeabi_dadd+0x618>)
   24d6c:	42b0      	cmp	r0, r6
   24d6e:	d060      	beq.n	24e32 <__aeabi_dadd+0x55a>
   24d70:	4653      	mov	r3, sl
   24d72:	2b38      	cmp	r3, #56	; 0x38
   24d74:	dd00      	ble.n	24d78 <__aeabi_dadd+0x4a0>
   24d76:	e096      	b.n	24ea6 <__aeabi_dadd+0x5ce>
   24d78:	2b1f      	cmp	r3, #31
   24d7a:	dd00      	ble.n	24d7e <__aeabi_dadd+0x4a6>
   24d7c:	e09f      	b.n	24ebe <__aeabi_dadd+0x5e6>
   24d7e:	2620      	movs	r6, #32
   24d80:	1af3      	subs	r3, r6, r3
   24d82:	0026      	movs	r6, r4
   24d84:	409e      	lsls	r6, r3
   24d86:	469c      	mov	ip, r3
   24d88:	46b3      	mov	fp, r6
   24d8a:	4653      	mov	r3, sl
   24d8c:	003e      	movs	r6, r7
   24d8e:	40de      	lsrs	r6, r3
   24d90:	0033      	movs	r3, r6
   24d92:	465e      	mov	r6, fp
   24d94:	431e      	orrs	r6, r3
   24d96:	4663      	mov	r3, ip
   24d98:	409f      	lsls	r7, r3
   24d9a:	1e7b      	subs	r3, r7, #1
   24d9c:	419f      	sbcs	r7, r3
   24d9e:	4653      	mov	r3, sl
   24da0:	40dc      	lsrs	r4, r3
   24da2:	4337      	orrs	r7, r6
   24da4:	18bf      	adds	r7, r7, r2
   24da6:	4297      	cmp	r7, r2
   24da8:	4192      	sbcs	r2, r2
   24daa:	1864      	adds	r4, r4, r1
   24dac:	4252      	negs	r2, r2
   24dae:	18a4      	adds	r4, r4, r2
   24db0:	0006      	movs	r6, r0
   24db2:	e678      	b.n	24aa6 <__aeabi_dadd+0x1ce>
   24db4:	4327      	orrs	r7, r4
   24db6:	1e7c      	subs	r4, r7, #1
   24db8:	41a7      	sbcs	r7, r4
   24dba:	2400      	movs	r4, #0
   24dbc:	e737      	b.n	24c2e <__aeabi_dadd+0x356>
   24dbe:	4e4c      	ldr	r6, [pc, #304]	; (24ef0 <__aeabi_dadd+0x618>)
   24dc0:	42b0      	cmp	r0, r6
   24dc2:	d036      	beq.n	24e32 <__aeabi_dadd+0x55a>
   24dc4:	2680      	movs	r6, #128	; 0x80
   24dc6:	425b      	negs	r3, r3
   24dc8:	0436      	lsls	r6, r6, #16
   24dca:	469a      	mov	sl, r3
   24dcc:	4334      	orrs	r4, r6
   24dce:	e7cf      	b.n	24d70 <__aeabi_dadd+0x498>
   24dd0:	0018      	movs	r0, r3
   24dd2:	4310      	orrs	r0, r2
   24dd4:	d100      	bne.n	24dd8 <__aeabi_dadd+0x500>
   24dd6:	e603      	b.n	249e0 <__aeabi_dadd+0x108>
   24dd8:	1ab8      	subs	r0, r7, r2
   24dda:	4684      	mov	ip, r0
   24ddc:	4567      	cmp	r7, ip
   24dde:	41ad      	sbcs	r5, r5
   24de0:	1ae0      	subs	r0, r4, r3
   24de2:	426d      	negs	r5, r5
   24de4:	1b40      	subs	r0, r0, r5
   24de6:	0205      	lsls	r5, r0, #8
   24de8:	d400      	bmi.n	24dec <__aeabi_dadd+0x514>
   24dea:	e62c      	b.n	24a46 <__aeabi_dadd+0x16e>
   24dec:	1bd7      	subs	r7, r2, r7
   24dee:	42ba      	cmp	r2, r7
   24df0:	4192      	sbcs	r2, r2
   24df2:	1b1c      	subs	r4, r3, r4
   24df4:	4252      	negs	r2, r2
   24df6:	1aa4      	subs	r4, r4, r2
   24df8:	46d8      	mov	r8, fp
   24dfa:	e5f1      	b.n	249e0 <__aeabi_dadd+0x108>
   24dfc:	0018      	movs	r0, r3
   24dfe:	4310      	orrs	r0, r2
   24e00:	d100      	bne.n	24e04 <__aeabi_dadd+0x52c>
   24e02:	e763      	b.n	24ccc <__aeabi_dadd+0x3f4>
   24e04:	08f8      	lsrs	r0, r7, #3
   24e06:	0767      	lsls	r7, r4, #29
   24e08:	4307      	orrs	r7, r0
   24e0a:	2080      	movs	r0, #128	; 0x80
   24e0c:	08e4      	lsrs	r4, r4, #3
   24e0e:	0300      	lsls	r0, r0, #12
   24e10:	4204      	tst	r4, r0
   24e12:	d008      	beq.n	24e26 <__aeabi_dadd+0x54e>
   24e14:	08dd      	lsrs	r5, r3, #3
   24e16:	4205      	tst	r5, r0
   24e18:	d105      	bne.n	24e26 <__aeabi_dadd+0x54e>
   24e1a:	08d2      	lsrs	r2, r2, #3
   24e1c:	0759      	lsls	r1, r3, #29
   24e1e:	4311      	orrs	r1, r2
   24e20:	000f      	movs	r7, r1
   24e22:	002c      	movs	r4, r5
   24e24:	46d8      	mov	r8, fp
   24e26:	0f7b      	lsrs	r3, r7, #29
   24e28:	00e4      	lsls	r4, r4, #3
   24e2a:	431c      	orrs	r4, r3
   24e2c:	00ff      	lsls	r7, r7, #3
   24e2e:	4e30      	ldr	r6, [pc, #192]	; (24ef0 <__aeabi_dadd+0x618>)
   24e30:	e5d6      	b.n	249e0 <__aeabi_dadd+0x108>
   24e32:	000c      	movs	r4, r1
   24e34:	0017      	movs	r7, r2
   24e36:	0006      	movs	r6, r0
   24e38:	e5d2      	b.n	249e0 <__aeabi_dadd+0x108>
   24e3a:	2b00      	cmp	r3, #0
   24e3c:	d038      	beq.n	24eb0 <__aeabi_dadd+0x5d8>
   24e3e:	000b      	movs	r3, r1
   24e40:	4313      	orrs	r3, r2
   24e42:	d100      	bne.n	24e46 <__aeabi_dadd+0x56e>
   24e44:	e742      	b.n	24ccc <__aeabi_dadd+0x3f4>
   24e46:	08f8      	lsrs	r0, r7, #3
   24e48:	0767      	lsls	r7, r4, #29
   24e4a:	4307      	orrs	r7, r0
   24e4c:	2080      	movs	r0, #128	; 0x80
   24e4e:	08e4      	lsrs	r4, r4, #3
   24e50:	0300      	lsls	r0, r0, #12
   24e52:	4204      	tst	r4, r0
   24e54:	d0e7      	beq.n	24e26 <__aeabi_dadd+0x54e>
   24e56:	08cb      	lsrs	r3, r1, #3
   24e58:	4203      	tst	r3, r0
   24e5a:	d1e4      	bne.n	24e26 <__aeabi_dadd+0x54e>
   24e5c:	08d2      	lsrs	r2, r2, #3
   24e5e:	0749      	lsls	r1, r1, #29
   24e60:	4311      	orrs	r1, r2
   24e62:	000f      	movs	r7, r1
   24e64:	001c      	movs	r4, r3
   24e66:	e7de      	b.n	24e26 <__aeabi_dadd+0x54e>
   24e68:	2700      	movs	r7, #0
   24e6a:	2400      	movs	r4, #0
   24e6c:	e5d5      	b.n	24a1a <__aeabi_dadd+0x142>
   24e6e:	2100      	movs	r1, #0
   24e70:	e76b      	b.n	24d4a <__aeabi_dadd+0x472>
   24e72:	2500      	movs	r5, #0
   24e74:	2700      	movs	r7, #0
   24e76:	e5f3      	b.n	24a60 <__aeabi_dadd+0x188>
   24e78:	464e      	mov	r6, r9
   24e7a:	0025      	movs	r5, r4
   24e7c:	3e20      	subs	r6, #32
   24e7e:	40f5      	lsrs	r5, r6
   24e80:	464b      	mov	r3, r9
   24e82:	002e      	movs	r6, r5
   24e84:	2b20      	cmp	r3, #32
   24e86:	d02d      	beq.n	24ee4 <__aeabi_dadd+0x60c>
   24e88:	2540      	movs	r5, #64	; 0x40
   24e8a:	1aed      	subs	r5, r5, r3
   24e8c:	40ac      	lsls	r4, r5
   24e8e:	4327      	orrs	r7, r4
   24e90:	1e7c      	subs	r4, r7, #1
   24e92:	41a7      	sbcs	r7, r4
   24e94:	2400      	movs	r4, #0
   24e96:	4337      	orrs	r7, r6
   24e98:	e6c9      	b.n	24c2e <__aeabi_dadd+0x356>
   24e9a:	2480      	movs	r4, #128	; 0x80
   24e9c:	2500      	movs	r5, #0
   24e9e:	0324      	lsls	r4, r4, #12
   24ea0:	4e13      	ldr	r6, [pc, #76]	; (24ef0 <__aeabi_dadd+0x618>)
   24ea2:	2700      	movs	r7, #0
   24ea4:	e5dc      	b.n	24a60 <__aeabi_dadd+0x188>
   24ea6:	4327      	orrs	r7, r4
   24ea8:	1e7c      	subs	r4, r7, #1
   24eaa:	41a7      	sbcs	r7, r4
   24eac:	2400      	movs	r4, #0
   24eae:	e779      	b.n	24da4 <__aeabi_dadd+0x4cc>
   24eb0:	000c      	movs	r4, r1
   24eb2:	0017      	movs	r7, r2
   24eb4:	4e0e      	ldr	r6, [pc, #56]	; (24ef0 <__aeabi_dadd+0x618>)
   24eb6:	e593      	b.n	249e0 <__aeabi_dadd+0x108>
   24eb8:	000c      	movs	r4, r1
   24eba:	0017      	movs	r7, r2
   24ebc:	e590      	b.n	249e0 <__aeabi_dadd+0x108>
   24ebe:	4656      	mov	r6, sl
   24ec0:	0023      	movs	r3, r4
   24ec2:	3e20      	subs	r6, #32
   24ec4:	40f3      	lsrs	r3, r6
   24ec6:	4699      	mov	r9, r3
   24ec8:	4653      	mov	r3, sl
   24eca:	2b20      	cmp	r3, #32
   24ecc:	d00e      	beq.n	24eec <__aeabi_dadd+0x614>
   24ece:	2340      	movs	r3, #64	; 0x40
   24ed0:	4656      	mov	r6, sl
   24ed2:	1b9b      	subs	r3, r3, r6
   24ed4:	409c      	lsls	r4, r3
   24ed6:	4327      	orrs	r7, r4
   24ed8:	1e7c      	subs	r4, r7, #1
   24eda:	41a7      	sbcs	r7, r4
   24edc:	464b      	mov	r3, r9
   24ede:	2400      	movs	r4, #0
   24ee0:	431f      	orrs	r7, r3
   24ee2:	e75f      	b.n	24da4 <__aeabi_dadd+0x4cc>
   24ee4:	2400      	movs	r4, #0
   24ee6:	e7d2      	b.n	24e8e <__aeabi_dadd+0x5b6>
   24ee8:	0017      	movs	r7, r2
   24eea:	e5b2      	b.n	24a52 <__aeabi_dadd+0x17a>
   24eec:	2400      	movs	r4, #0
   24eee:	e7f2      	b.n	24ed6 <__aeabi_dadd+0x5fe>
   24ef0:	000007ff 	.word	0x000007ff
   24ef4:	ff7fffff 	.word	0xff7fffff

00024ef8 <__aeabi_ddiv>:
   24ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24efa:	4657      	mov	r7, sl
   24efc:	4645      	mov	r5, r8
   24efe:	46de      	mov	lr, fp
   24f00:	464e      	mov	r6, r9
   24f02:	b5e0      	push	{r5, r6, r7, lr}
   24f04:	004c      	lsls	r4, r1, #1
   24f06:	030e      	lsls	r6, r1, #12
   24f08:	b087      	sub	sp, #28
   24f0a:	4683      	mov	fp, r0
   24f0c:	4692      	mov	sl, r2
   24f0e:	001d      	movs	r5, r3
   24f10:	4680      	mov	r8, r0
   24f12:	0b36      	lsrs	r6, r6, #12
   24f14:	0d64      	lsrs	r4, r4, #21
   24f16:	0fcf      	lsrs	r7, r1, #31
   24f18:	2c00      	cmp	r4, #0
   24f1a:	d04f      	beq.n	24fbc <__aeabi_ddiv+0xc4>
   24f1c:	4b6f      	ldr	r3, [pc, #444]	; (250dc <__aeabi_ddiv+0x1e4>)
   24f1e:	429c      	cmp	r4, r3
   24f20:	d035      	beq.n	24f8e <__aeabi_ddiv+0x96>
   24f22:	2380      	movs	r3, #128	; 0x80
   24f24:	0f42      	lsrs	r2, r0, #29
   24f26:	041b      	lsls	r3, r3, #16
   24f28:	00f6      	lsls	r6, r6, #3
   24f2a:	4313      	orrs	r3, r2
   24f2c:	4333      	orrs	r3, r6
   24f2e:	4699      	mov	r9, r3
   24f30:	00c3      	lsls	r3, r0, #3
   24f32:	4698      	mov	r8, r3
   24f34:	4b6a      	ldr	r3, [pc, #424]	; (250e0 <__aeabi_ddiv+0x1e8>)
   24f36:	2600      	movs	r6, #0
   24f38:	469c      	mov	ip, r3
   24f3a:	2300      	movs	r3, #0
   24f3c:	4464      	add	r4, ip
   24f3e:	9303      	str	r3, [sp, #12]
   24f40:	032b      	lsls	r3, r5, #12
   24f42:	0b1b      	lsrs	r3, r3, #12
   24f44:	469b      	mov	fp, r3
   24f46:	006b      	lsls	r3, r5, #1
   24f48:	0fed      	lsrs	r5, r5, #31
   24f4a:	4650      	mov	r0, sl
   24f4c:	0d5b      	lsrs	r3, r3, #21
   24f4e:	9501      	str	r5, [sp, #4]
   24f50:	d05e      	beq.n	25010 <__aeabi_ddiv+0x118>
   24f52:	4a62      	ldr	r2, [pc, #392]	; (250dc <__aeabi_ddiv+0x1e4>)
   24f54:	4293      	cmp	r3, r2
   24f56:	d053      	beq.n	25000 <__aeabi_ddiv+0x108>
   24f58:	465a      	mov	r2, fp
   24f5a:	00d1      	lsls	r1, r2, #3
   24f5c:	2280      	movs	r2, #128	; 0x80
   24f5e:	0f40      	lsrs	r0, r0, #29
   24f60:	0412      	lsls	r2, r2, #16
   24f62:	4302      	orrs	r2, r0
   24f64:	430a      	orrs	r2, r1
   24f66:	4693      	mov	fp, r2
   24f68:	4652      	mov	r2, sl
   24f6a:	00d1      	lsls	r1, r2, #3
   24f6c:	4a5c      	ldr	r2, [pc, #368]	; (250e0 <__aeabi_ddiv+0x1e8>)
   24f6e:	4694      	mov	ip, r2
   24f70:	2200      	movs	r2, #0
   24f72:	4463      	add	r3, ip
   24f74:	0038      	movs	r0, r7
   24f76:	4068      	eors	r0, r5
   24f78:	4684      	mov	ip, r0
   24f7a:	9002      	str	r0, [sp, #8]
   24f7c:	1ae4      	subs	r4, r4, r3
   24f7e:	4316      	orrs	r6, r2
   24f80:	2e0f      	cmp	r6, #15
   24f82:	d900      	bls.n	24f86 <__aeabi_ddiv+0x8e>
   24f84:	e0b4      	b.n	250f0 <__aeabi_ddiv+0x1f8>
   24f86:	4b57      	ldr	r3, [pc, #348]	; (250e4 <__aeabi_ddiv+0x1ec>)
   24f88:	00b6      	lsls	r6, r6, #2
   24f8a:	599b      	ldr	r3, [r3, r6]
   24f8c:	469f      	mov	pc, r3
   24f8e:	0003      	movs	r3, r0
   24f90:	4333      	orrs	r3, r6
   24f92:	4699      	mov	r9, r3
   24f94:	d16c      	bne.n	25070 <__aeabi_ddiv+0x178>
   24f96:	2300      	movs	r3, #0
   24f98:	4698      	mov	r8, r3
   24f9a:	3302      	adds	r3, #2
   24f9c:	2608      	movs	r6, #8
   24f9e:	9303      	str	r3, [sp, #12]
   24fa0:	e7ce      	b.n	24f40 <__aeabi_ddiv+0x48>
   24fa2:	46cb      	mov	fp, r9
   24fa4:	4641      	mov	r1, r8
   24fa6:	9a03      	ldr	r2, [sp, #12]
   24fa8:	9701      	str	r7, [sp, #4]
   24faa:	2a02      	cmp	r2, #2
   24fac:	d165      	bne.n	2507a <__aeabi_ddiv+0x182>
   24fae:	9b01      	ldr	r3, [sp, #4]
   24fb0:	4c4a      	ldr	r4, [pc, #296]	; (250dc <__aeabi_ddiv+0x1e4>)
   24fb2:	469c      	mov	ip, r3
   24fb4:	2300      	movs	r3, #0
   24fb6:	2200      	movs	r2, #0
   24fb8:	4698      	mov	r8, r3
   24fba:	e06b      	b.n	25094 <__aeabi_ddiv+0x19c>
   24fbc:	0003      	movs	r3, r0
   24fbe:	4333      	orrs	r3, r6
   24fc0:	4699      	mov	r9, r3
   24fc2:	d04e      	beq.n	25062 <__aeabi_ddiv+0x16a>
   24fc4:	2e00      	cmp	r6, #0
   24fc6:	d100      	bne.n	24fca <__aeabi_ddiv+0xd2>
   24fc8:	e1bc      	b.n	25344 <__aeabi_ddiv+0x44c>
   24fca:	0030      	movs	r0, r6
   24fcc:	f001 f8ca 	bl	26164 <__clzsi2>
   24fd0:	0003      	movs	r3, r0
   24fd2:	3b0b      	subs	r3, #11
   24fd4:	2b1c      	cmp	r3, #28
   24fd6:	dd00      	ble.n	24fda <__aeabi_ddiv+0xe2>
   24fd8:	e1ac      	b.n	25334 <__aeabi_ddiv+0x43c>
   24fda:	221d      	movs	r2, #29
   24fdc:	1ad3      	subs	r3, r2, r3
   24fde:	465a      	mov	r2, fp
   24fe0:	0001      	movs	r1, r0
   24fe2:	40da      	lsrs	r2, r3
   24fe4:	3908      	subs	r1, #8
   24fe6:	408e      	lsls	r6, r1
   24fe8:	0013      	movs	r3, r2
   24fea:	4333      	orrs	r3, r6
   24fec:	4699      	mov	r9, r3
   24fee:	465b      	mov	r3, fp
   24ff0:	408b      	lsls	r3, r1
   24ff2:	4698      	mov	r8, r3
   24ff4:	2300      	movs	r3, #0
   24ff6:	4c3c      	ldr	r4, [pc, #240]	; (250e8 <__aeabi_ddiv+0x1f0>)
   24ff8:	2600      	movs	r6, #0
   24ffa:	1a24      	subs	r4, r4, r0
   24ffc:	9303      	str	r3, [sp, #12]
   24ffe:	e79f      	b.n	24f40 <__aeabi_ddiv+0x48>
   25000:	4651      	mov	r1, sl
   25002:	465a      	mov	r2, fp
   25004:	4311      	orrs	r1, r2
   25006:	d129      	bne.n	2505c <__aeabi_ddiv+0x164>
   25008:	2200      	movs	r2, #0
   2500a:	4693      	mov	fp, r2
   2500c:	3202      	adds	r2, #2
   2500e:	e7b1      	b.n	24f74 <__aeabi_ddiv+0x7c>
   25010:	4659      	mov	r1, fp
   25012:	4301      	orrs	r1, r0
   25014:	d01e      	beq.n	25054 <__aeabi_ddiv+0x15c>
   25016:	465b      	mov	r3, fp
   25018:	2b00      	cmp	r3, #0
   2501a:	d100      	bne.n	2501e <__aeabi_ddiv+0x126>
   2501c:	e19e      	b.n	2535c <__aeabi_ddiv+0x464>
   2501e:	4658      	mov	r0, fp
   25020:	f001 f8a0 	bl	26164 <__clzsi2>
   25024:	0003      	movs	r3, r0
   25026:	3b0b      	subs	r3, #11
   25028:	2b1c      	cmp	r3, #28
   2502a:	dd00      	ble.n	2502e <__aeabi_ddiv+0x136>
   2502c:	e18f      	b.n	2534e <__aeabi_ddiv+0x456>
   2502e:	0002      	movs	r2, r0
   25030:	4659      	mov	r1, fp
   25032:	3a08      	subs	r2, #8
   25034:	4091      	lsls	r1, r2
   25036:	468b      	mov	fp, r1
   25038:	211d      	movs	r1, #29
   2503a:	1acb      	subs	r3, r1, r3
   2503c:	4651      	mov	r1, sl
   2503e:	40d9      	lsrs	r1, r3
   25040:	000b      	movs	r3, r1
   25042:	4659      	mov	r1, fp
   25044:	430b      	orrs	r3, r1
   25046:	4651      	mov	r1, sl
   25048:	469b      	mov	fp, r3
   2504a:	4091      	lsls	r1, r2
   2504c:	4b26      	ldr	r3, [pc, #152]	; (250e8 <__aeabi_ddiv+0x1f0>)
   2504e:	2200      	movs	r2, #0
   25050:	1a1b      	subs	r3, r3, r0
   25052:	e78f      	b.n	24f74 <__aeabi_ddiv+0x7c>
   25054:	2300      	movs	r3, #0
   25056:	2201      	movs	r2, #1
   25058:	469b      	mov	fp, r3
   2505a:	e78b      	b.n	24f74 <__aeabi_ddiv+0x7c>
   2505c:	4651      	mov	r1, sl
   2505e:	2203      	movs	r2, #3
   25060:	e788      	b.n	24f74 <__aeabi_ddiv+0x7c>
   25062:	2300      	movs	r3, #0
   25064:	4698      	mov	r8, r3
   25066:	3301      	adds	r3, #1
   25068:	2604      	movs	r6, #4
   2506a:	2400      	movs	r4, #0
   2506c:	9303      	str	r3, [sp, #12]
   2506e:	e767      	b.n	24f40 <__aeabi_ddiv+0x48>
   25070:	2303      	movs	r3, #3
   25072:	46b1      	mov	r9, r6
   25074:	9303      	str	r3, [sp, #12]
   25076:	260c      	movs	r6, #12
   25078:	e762      	b.n	24f40 <__aeabi_ddiv+0x48>
   2507a:	2a03      	cmp	r2, #3
   2507c:	d100      	bne.n	25080 <__aeabi_ddiv+0x188>
   2507e:	e25c      	b.n	2553a <__aeabi_ddiv+0x642>
   25080:	9b01      	ldr	r3, [sp, #4]
   25082:	2a01      	cmp	r2, #1
   25084:	d000      	beq.n	25088 <__aeabi_ddiv+0x190>
   25086:	e1e4      	b.n	25452 <__aeabi_ddiv+0x55a>
   25088:	4013      	ands	r3, r2
   2508a:	469c      	mov	ip, r3
   2508c:	2300      	movs	r3, #0
   2508e:	2400      	movs	r4, #0
   25090:	2200      	movs	r2, #0
   25092:	4698      	mov	r8, r3
   25094:	2100      	movs	r1, #0
   25096:	0312      	lsls	r2, r2, #12
   25098:	0b13      	lsrs	r3, r2, #12
   2509a:	0d0a      	lsrs	r2, r1, #20
   2509c:	0512      	lsls	r2, r2, #20
   2509e:	431a      	orrs	r2, r3
   250a0:	0523      	lsls	r3, r4, #20
   250a2:	4c12      	ldr	r4, [pc, #72]	; (250ec <__aeabi_ddiv+0x1f4>)
   250a4:	4640      	mov	r0, r8
   250a6:	4022      	ands	r2, r4
   250a8:	4313      	orrs	r3, r2
   250aa:	4662      	mov	r2, ip
   250ac:	005b      	lsls	r3, r3, #1
   250ae:	07d2      	lsls	r2, r2, #31
   250b0:	085b      	lsrs	r3, r3, #1
   250b2:	4313      	orrs	r3, r2
   250b4:	0019      	movs	r1, r3
   250b6:	b007      	add	sp, #28
   250b8:	bc3c      	pop	{r2, r3, r4, r5}
   250ba:	4690      	mov	r8, r2
   250bc:	4699      	mov	r9, r3
   250be:	46a2      	mov	sl, r4
   250c0:	46ab      	mov	fp, r5
   250c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   250c4:	2300      	movs	r3, #0
   250c6:	2280      	movs	r2, #128	; 0x80
   250c8:	469c      	mov	ip, r3
   250ca:	0312      	lsls	r2, r2, #12
   250cc:	4698      	mov	r8, r3
   250ce:	4c03      	ldr	r4, [pc, #12]	; (250dc <__aeabi_ddiv+0x1e4>)
   250d0:	e7e0      	b.n	25094 <__aeabi_ddiv+0x19c>
   250d2:	2300      	movs	r3, #0
   250d4:	4c01      	ldr	r4, [pc, #4]	; (250dc <__aeabi_ddiv+0x1e4>)
   250d6:	2200      	movs	r2, #0
   250d8:	4698      	mov	r8, r3
   250da:	e7db      	b.n	25094 <__aeabi_ddiv+0x19c>
   250dc:	000007ff 	.word	0x000007ff
   250e0:	fffffc01 	.word	0xfffffc01
   250e4:	0002af40 	.word	0x0002af40
   250e8:	fffffc0d 	.word	0xfffffc0d
   250ec:	800fffff 	.word	0x800fffff
   250f0:	45d9      	cmp	r9, fp
   250f2:	d900      	bls.n	250f6 <__aeabi_ddiv+0x1fe>
   250f4:	e139      	b.n	2536a <__aeabi_ddiv+0x472>
   250f6:	d100      	bne.n	250fa <__aeabi_ddiv+0x202>
   250f8:	e134      	b.n	25364 <__aeabi_ddiv+0x46c>
   250fa:	2300      	movs	r3, #0
   250fc:	4646      	mov	r6, r8
   250fe:	464d      	mov	r5, r9
   25100:	469a      	mov	sl, r3
   25102:	3c01      	subs	r4, #1
   25104:	465b      	mov	r3, fp
   25106:	0e0a      	lsrs	r2, r1, #24
   25108:	021b      	lsls	r3, r3, #8
   2510a:	431a      	orrs	r2, r3
   2510c:	020b      	lsls	r3, r1, #8
   2510e:	0c17      	lsrs	r7, r2, #16
   25110:	9303      	str	r3, [sp, #12]
   25112:	0413      	lsls	r3, r2, #16
   25114:	0c1b      	lsrs	r3, r3, #16
   25116:	0039      	movs	r1, r7
   25118:	0028      	movs	r0, r5
   2511a:	4690      	mov	r8, r2
   2511c:	9301      	str	r3, [sp, #4]
   2511e:	f7fe ff63 	bl	23fe8 <__udivsi3>
   25122:	0002      	movs	r2, r0
   25124:	9b01      	ldr	r3, [sp, #4]
   25126:	4683      	mov	fp, r0
   25128:	435a      	muls	r2, r3
   2512a:	0028      	movs	r0, r5
   2512c:	0039      	movs	r1, r7
   2512e:	4691      	mov	r9, r2
   25130:	f7fe ffe0 	bl	240f4 <__aeabi_uidivmod>
   25134:	0c35      	lsrs	r5, r6, #16
   25136:	0409      	lsls	r1, r1, #16
   25138:	430d      	orrs	r5, r1
   2513a:	45a9      	cmp	r9, r5
   2513c:	d90d      	bls.n	2515a <__aeabi_ddiv+0x262>
   2513e:	465b      	mov	r3, fp
   25140:	4445      	add	r5, r8
   25142:	3b01      	subs	r3, #1
   25144:	45a8      	cmp	r8, r5
   25146:	d900      	bls.n	2514a <__aeabi_ddiv+0x252>
   25148:	e13a      	b.n	253c0 <__aeabi_ddiv+0x4c8>
   2514a:	45a9      	cmp	r9, r5
   2514c:	d800      	bhi.n	25150 <__aeabi_ddiv+0x258>
   2514e:	e137      	b.n	253c0 <__aeabi_ddiv+0x4c8>
   25150:	2302      	movs	r3, #2
   25152:	425b      	negs	r3, r3
   25154:	469c      	mov	ip, r3
   25156:	4445      	add	r5, r8
   25158:	44e3      	add	fp, ip
   2515a:	464b      	mov	r3, r9
   2515c:	1aeb      	subs	r3, r5, r3
   2515e:	0039      	movs	r1, r7
   25160:	0018      	movs	r0, r3
   25162:	9304      	str	r3, [sp, #16]
   25164:	f7fe ff40 	bl	23fe8 <__udivsi3>
   25168:	9b01      	ldr	r3, [sp, #4]
   2516a:	0005      	movs	r5, r0
   2516c:	4343      	muls	r3, r0
   2516e:	0039      	movs	r1, r7
   25170:	9804      	ldr	r0, [sp, #16]
   25172:	4699      	mov	r9, r3
   25174:	f7fe ffbe 	bl	240f4 <__aeabi_uidivmod>
   25178:	0433      	lsls	r3, r6, #16
   2517a:	0409      	lsls	r1, r1, #16
   2517c:	0c1b      	lsrs	r3, r3, #16
   2517e:	430b      	orrs	r3, r1
   25180:	4599      	cmp	r9, r3
   25182:	d909      	bls.n	25198 <__aeabi_ddiv+0x2a0>
   25184:	4443      	add	r3, r8
   25186:	1e6a      	subs	r2, r5, #1
   25188:	4598      	cmp	r8, r3
   2518a:	d900      	bls.n	2518e <__aeabi_ddiv+0x296>
   2518c:	e11a      	b.n	253c4 <__aeabi_ddiv+0x4cc>
   2518e:	4599      	cmp	r9, r3
   25190:	d800      	bhi.n	25194 <__aeabi_ddiv+0x29c>
   25192:	e117      	b.n	253c4 <__aeabi_ddiv+0x4cc>
   25194:	3d02      	subs	r5, #2
   25196:	4443      	add	r3, r8
   25198:	464a      	mov	r2, r9
   2519a:	1a9b      	subs	r3, r3, r2
   2519c:	465a      	mov	r2, fp
   2519e:	0412      	lsls	r2, r2, #16
   251a0:	432a      	orrs	r2, r5
   251a2:	9903      	ldr	r1, [sp, #12]
   251a4:	4693      	mov	fp, r2
   251a6:	0c10      	lsrs	r0, r2, #16
   251a8:	0c0a      	lsrs	r2, r1, #16
   251aa:	4691      	mov	r9, r2
   251ac:	0409      	lsls	r1, r1, #16
   251ae:	465a      	mov	r2, fp
   251b0:	0c09      	lsrs	r1, r1, #16
   251b2:	464e      	mov	r6, r9
   251b4:	000d      	movs	r5, r1
   251b6:	0412      	lsls	r2, r2, #16
   251b8:	0c12      	lsrs	r2, r2, #16
   251ba:	4345      	muls	r5, r0
   251bc:	9105      	str	r1, [sp, #20]
   251be:	4351      	muls	r1, r2
   251c0:	4372      	muls	r2, r6
   251c2:	4370      	muls	r0, r6
   251c4:	1952      	adds	r2, r2, r5
   251c6:	0c0e      	lsrs	r6, r1, #16
   251c8:	18b2      	adds	r2, r6, r2
   251ca:	4295      	cmp	r5, r2
   251cc:	d903      	bls.n	251d6 <__aeabi_ddiv+0x2de>
   251ce:	2580      	movs	r5, #128	; 0x80
   251d0:	026d      	lsls	r5, r5, #9
   251d2:	46ac      	mov	ip, r5
   251d4:	4460      	add	r0, ip
   251d6:	0c15      	lsrs	r5, r2, #16
   251d8:	0409      	lsls	r1, r1, #16
   251da:	0412      	lsls	r2, r2, #16
   251dc:	0c09      	lsrs	r1, r1, #16
   251de:	1828      	adds	r0, r5, r0
   251e0:	1852      	adds	r2, r2, r1
   251e2:	4283      	cmp	r3, r0
   251e4:	d200      	bcs.n	251e8 <__aeabi_ddiv+0x2f0>
   251e6:	e0ce      	b.n	25386 <__aeabi_ddiv+0x48e>
   251e8:	d100      	bne.n	251ec <__aeabi_ddiv+0x2f4>
   251ea:	e0c8      	b.n	2537e <__aeabi_ddiv+0x486>
   251ec:	1a1d      	subs	r5, r3, r0
   251ee:	4653      	mov	r3, sl
   251f0:	1a9e      	subs	r6, r3, r2
   251f2:	45b2      	cmp	sl, r6
   251f4:	4192      	sbcs	r2, r2
   251f6:	4252      	negs	r2, r2
   251f8:	1aab      	subs	r3, r5, r2
   251fa:	469a      	mov	sl, r3
   251fc:	4598      	cmp	r8, r3
   251fe:	d100      	bne.n	25202 <__aeabi_ddiv+0x30a>
   25200:	e117      	b.n	25432 <__aeabi_ddiv+0x53a>
   25202:	0039      	movs	r1, r7
   25204:	0018      	movs	r0, r3
   25206:	f7fe feef 	bl	23fe8 <__udivsi3>
   2520a:	9b01      	ldr	r3, [sp, #4]
   2520c:	0005      	movs	r5, r0
   2520e:	4343      	muls	r3, r0
   25210:	0039      	movs	r1, r7
   25212:	4650      	mov	r0, sl
   25214:	9304      	str	r3, [sp, #16]
   25216:	f7fe ff6d 	bl	240f4 <__aeabi_uidivmod>
   2521a:	9804      	ldr	r0, [sp, #16]
   2521c:	040b      	lsls	r3, r1, #16
   2521e:	0c31      	lsrs	r1, r6, #16
   25220:	4319      	orrs	r1, r3
   25222:	4288      	cmp	r0, r1
   25224:	d909      	bls.n	2523a <__aeabi_ddiv+0x342>
   25226:	4441      	add	r1, r8
   25228:	1e6b      	subs	r3, r5, #1
   2522a:	4588      	cmp	r8, r1
   2522c:	d900      	bls.n	25230 <__aeabi_ddiv+0x338>
   2522e:	e107      	b.n	25440 <__aeabi_ddiv+0x548>
   25230:	4288      	cmp	r0, r1
   25232:	d800      	bhi.n	25236 <__aeabi_ddiv+0x33e>
   25234:	e104      	b.n	25440 <__aeabi_ddiv+0x548>
   25236:	3d02      	subs	r5, #2
   25238:	4441      	add	r1, r8
   2523a:	9b04      	ldr	r3, [sp, #16]
   2523c:	1acb      	subs	r3, r1, r3
   2523e:	0018      	movs	r0, r3
   25240:	0039      	movs	r1, r7
   25242:	9304      	str	r3, [sp, #16]
   25244:	f7fe fed0 	bl	23fe8 <__udivsi3>
   25248:	9b01      	ldr	r3, [sp, #4]
   2524a:	4682      	mov	sl, r0
   2524c:	4343      	muls	r3, r0
   2524e:	0039      	movs	r1, r7
   25250:	9804      	ldr	r0, [sp, #16]
   25252:	9301      	str	r3, [sp, #4]
   25254:	f7fe ff4e 	bl	240f4 <__aeabi_uidivmod>
   25258:	9801      	ldr	r0, [sp, #4]
   2525a:	040b      	lsls	r3, r1, #16
   2525c:	0431      	lsls	r1, r6, #16
   2525e:	0c09      	lsrs	r1, r1, #16
   25260:	4319      	orrs	r1, r3
   25262:	4288      	cmp	r0, r1
   25264:	d90d      	bls.n	25282 <__aeabi_ddiv+0x38a>
   25266:	4653      	mov	r3, sl
   25268:	4441      	add	r1, r8
   2526a:	3b01      	subs	r3, #1
   2526c:	4588      	cmp	r8, r1
   2526e:	d900      	bls.n	25272 <__aeabi_ddiv+0x37a>
   25270:	e0e8      	b.n	25444 <__aeabi_ddiv+0x54c>
   25272:	4288      	cmp	r0, r1
   25274:	d800      	bhi.n	25278 <__aeabi_ddiv+0x380>
   25276:	e0e5      	b.n	25444 <__aeabi_ddiv+0x54c>
   25278:	2302      	movs	r3, #2
   2527a:	425b      	negs	r3, r3
   2527c:	469c      	mov	ip, r3
   2527e:	4441      	add	r1, r8
   25280:	44e2      	add	sl, ip
   25282:	9b01      	ldr	r3, [sp, #4]
   25284:	042d      	lsls	r5, r5, #16
   25286:	1ace      	subs	r6, r1, r3
   25288:	4651      	mov	r1, sl
   2528a:	4329      	orrs	r1, r5
   2528c:	9d05      	ldr	r5, [sp, #20]
   2528e:	464f      	mov	r7, r9
   25290:	002a      	movs	r2, r5
   25292:	040b      	lsls	r3, r1, #16
   25294:	0c08      	lsrs	r0, r1, #16
   25296:	0c1b      	lsrs	r3, r3, #16
   25298:	435a      	muls	r2, r3
   2529a:	4345      	muls	r5, r0
   2529c:	437b      	muls	r3, r7
   2529e:	4378      	muls	r0, r7
   252a0:	195b      	adds	r3, r3, r5
   252a2:	0c17      	lsrs	r7, r2, #16
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	429d      	cmp	r5, r3
   252a8:	d903      	bls.n	252b2 <__aeabi_ddiv+0x3ba>
   252aa:	2580      	movs	r5, #128	; 0x80
   252ac:	026d      	lsls	r5, r5, #9
   252ae:	46ac      	mov	ip, r5
   252b0:	4460      	add	r0, ip
   252b2:	0c1d      	lsrs	r5, r3, #16
   252b4:	0412      	lsls	r2, r2, #16
   252b6:	041b      	lsls	r3, r3, #16
   252b8:	0c12      	lsrs	r2, r2, #16
   252ba:	1828      	adds	r0, r5, r0
   252bc:	189b      	adds	r3, r3, r2
   252be:	4286      	cmp	r6, r0
   252c0:	d200      	bcs.n	252c4 <__aeabi_ddiv+0x3cc>
   252c2:	e093      	b.n	253ec <__aeabi_ddiv+0x4f4>
   252c4:	d100      	bne.n	252c8 <__aeabi_ddiv+0x3d0>
   252c6:	e08e      	b.n	253e6 <__aeabi_ddiv+0x4ee>
   252c8:	2301      	movs	r3, #1
   252ca:	4319      	orrs	r1, r3
   252cc:	4ba0      	ldr	r3, [pc, #640]	; (25550 <__aeabi_ddiv+0x658>)
   252ce:	18e3      	adds	r3, r4, r3
   252d0:	2b00      	cmp	r3, #0
   252d2:	dc00      	bgt.n	252d6 <__aeabi_ddiv+0x3de>
   252d4:	e099      	b.n	2540a <__aeabi_ddiv+0x512>
   252d6:	074a      	lsls	r2, r1, #29
   252d8:	d000      	beq.n	252dc <__aeabi_ddiv+0x3e4>
   252da:	e09e      	b.n	2541a <__aeabi_ddiv+0x522>
   252dc:	465a      	mov	r2, fp
   252de:	01d2      	lsls	r2, r2, #7
   252e0:	d506      	bpl.n	252f0 <__aeabi_ddiv+0x3f8>
   252e2:	465a      	mov	r2, fp
   252e4:	4b9b      	ldr	r3, [pc, #620]	; (25554 <__aeabi_ddiv+0x65c>)
   252e6:	401a      	ands	r2, r3
   252e8:	2380      	movs	r3, #128	; 0x80
   252ea:	4693      	mov	fp, r2
   252ec:	00db      	lsls	r3, r3, #3
   252ee:	18e3      	adds	r3, r4, r3
   252f0:	4a99      	ldr	r2, [pc, #612]	; (25558 <__aeabi_ddiv+0x660>)
   252f2:	4293      	cmp	r3, r2
   252f4:	dd68      	ble.n	253c8 <__aeabi_ddiv+0x4d0>
   252f6:	2301      	movs	r3, #1
   252f8:	9a02      	ldr	r2, [sp, #8]
   252fa:	4c98      	ldr	r4, [pc, #608]	; (2555c <__aeabi_ddiv+0x664>)
   252fc:	401a      	ands	r2, r3
   252fe:	2300      	movs	r3, #0
   25300:	4694      	mov	ip, r2
   25302:	4698      	mov	r8, r3
   25304:	2200      	movs	r2, #0
   25306:	e6c5      	b.n	25094 <__aeabi_ddiv+0x19c>
   25308:	2280      	movs	r2, #128	; 0x80
   2530a:	464b      	mov	r3, r9
   2530c:	0312      	lsls	r2, r2, #12
   2530e:	4213      	tst	r3, r2
   25310:	d00a      	beq.n	25328 <__aeabi_ddiv+0x430>
   25312:	465b      	mov	r3, fp
   25314:	4213      	tst	r3, r2
   25316:	d106      	bne.n	25326 <__aeabi_ddiv+0x42e>
   25318:	431a      	orrs	r2, r3
   2531a:	0312      	lsls	r2, r2, #12
   2531c:	0b12      	lsrs	r2, r2, #12
   2531e:	46ac      	mov	ip, r5
   25320:	4688      	mov	r8, r1
   25322:	4c8e      	ldr	r4, [pc, #568]	; (2555c <__aeabi_ddiv+0x664>)
   25324:	e6b6      	b.n	25094 <__aeabi_ddiv+0x19c>
   25326:	464b      	mov	r3, r9
   25328:	431a      	orrs	r2, r3
   2532a:	0312      	lsls	r2, r2, #12
   2532c:	0b12      	lsrs	r2, r2, #12
   2532e:	46bc      	mov	ip, r7
   25330:	4c8a      	ldr	r4, [pc, #552]	; (2555c <__aeabi_ddiv+0x664>)
   25332:	e6af      	b.n	25094 <__aeabi_ddiv+0x19c>
   25334:	0003      	movs	r3, r0
   25336:	465a      	mov	r2, fp
   25338:	3b28      	subs	r3, #40	; 0x28
   2533a:	409a      	lsls	r2, r3
   2533c:	2300      	movs	r3, #0
   2533e:	4691      	mov	r9, r2
   25340:	4698      	mov	r8, r3
   25342:	e657      	b.n	24ff4 <__aeabi_ddiv+0xfc>
   25344:	4658      	mov	r0, fp
   25346:	f000 ff0d 	bl	26164 <__clzsi2>
   2534a:	3020      	adds	r0, #32
   2534c:	e640      	b.n	24fd0 <__aeabi_ddiv+0xd8>
   2534e:	0003      	movs	r3, r0
   25350:	4652      	mov	r2, sl
   25352:	3b28      	subs	r3, #40	; 0x28
   25354:	409a      	lsls	r2, r3
   25356:	2100      	movs	r1, #0
   25358:	4693      	mov	fp, r2
   2535a:	e677      	b.n	2504c <__aeabi_ddiv+0x154>
   2535c:	f000 ff02 	bl	26164 <__clzsi2>
   25360:	3020      	adds	r0, #32
   25362:	e65f      	b.n	25024 <__aeabi_ddiv+0x12c>
   25364:	4588      	cmp	r8, r1
   25366:	d200      	bcs.n	2536a <__aeabi_ddiv+0x472>
   25368:	e6c7      	b.n	250fa <__aeabi_ddiv+0x202>
   2536a:	464b      	mov	r3, r9
   2536c:	07de      	lsls	r6, r3, #31
   2536e:	085d      	lsrs	r5, r3, #1
   25370:	4643      	mov	r3, r8
   25372:	085b      	lsrs	r3, r3, #1
   25374:	431e      	orrs	r6, r3
   25376:	4643      	mov	r3, r8
   25378:	07db      	lsls	r3, r3, #31
   2537a:	469a      	mov	sl, r3
   2537c:	e6c2      	b.n	25104 <__aeabi_ddiv+0x20c>
   2537e:	2500      	movs	r5, #0
   25380:	4592      	cmp	sl, r2
   25382:	d300      	bcc.n	25386 <__aeabi_ddiv+0x48e>
   25384:	e733      	b.n	251ee <__aeabi_ddiv+0x2f6>
   25386:	9e03      	ldr	r6, [sp, #12]
   25388:	4659      	mov	r1, fp
   2538a:	46b4      	mov	ip, r6
   2538c:	44e2      	add	sl, ip
   2538e:	45b2      	cmp	sl, r6
   25390:	41ad      	sbcs	r5, r5
   25392:	426d      	negs	r5, r5
   25394:	4445      	add	r5, r8
   25396:	18eb      	adds	r3, r5, r3
   25398:	3901      	subs	r1, #1
   2539a:	4598      	cmp	r8, r3
   2539c:	d207      	bcs.n	253ae <__aeabi_ddiv+0x4b6>
   2539e:	4298      	cmp	r0, r3
   253a0:	d900      	bls.n	253a4 <__aeabi_ddiv+0x4ac>
   253a2:	e07f      	b.n	254a4 <__aeabi_ddiv+0x5ac>
   253a4:	d100      	bne.n	253a8 <__aeabi_ddiv+0x4b0>
   253a6:	e0bc      	b.n	25522 <__aeabi_ddiv+0x62a>
   253a8:	1a1d      	subs	r5, r3, r0
   253aa:	468b      	mov	fp, r1
   253ac:	e71f      	b.n	251ee <__aeabi_ddiv+0x2f6>
   253ae:	4598      	cmp	r8, r3
   253b0:	d1fa      	bne.n	253a8 <__aeabi_ddiv+0x4b0>
   253b2:	9d03      	ldr	r5, [sp, #12]
   253b4:	4555      	cmp	r5, sl
   253b6:	d9f2      	bls.n	2539e <__aeabi_ddiv+0x4a6>
   253b8:	4643      	mov	r3, r8
   253ba:	468b      	mov	fp, r1
   253bc:	1a1d      	subs	r5, r3, r0
   253be:	e716      	b.n	251ee <__aeabi_ddiv+0x2f6>
   253c0:	469b      	mov	fp, r3
   253c2:	e6ca      	b.n	2515a <__aeabi_ddiv+0x262>
   253c4:	0015      	movs	r5, r2
   253c6:	e6e7      	b.n	25198 <__aeabi_ddiv+0x2a0>
   253c8:	465a      	mov	r2, fp
   253ca:	08c9      	lsrs	r1, r1, #3
   253cc:	0752      	lsls	r2, r2, #29
   253ce:	430a      	orrs	r2, r1
   253d0:	055b      	lsls	r3, r3, #21
   253d2:	4690      	mov	r8, r2
   253d4:	0d5c      	lsrs	r4, r3, #21
   253d6:	465a      	mov	r2, fp
   253d8:	2301      	movs	r3, #1
   253da:	9902      	ldr	r1, [sp, #8]
   253dc:	0252      	lsls	r2, r2, #9
   253de:	4019      	ands	r1, r3
   253e0:	0b12      	lsrs	r2, r2, #12
   253e2:	468c      	mov	ip, r1
   253e4:	e656      	b.n	25094 <__aeabi_ddiv+0x19c>
   253e6:	2b00      	cmp	r3, #0
   253e8:	d100      	bne.n	253ec <__aeabi_ddiv+0x4f4>
   253ea:	e76f      	b.n	252cc <__aeabi_ddiv+0x3d4>
   253ec:	4446      	add	r6, r8
   253ee:	1e4a      	subs	r2, r1, #1
   253f0:	45b0      	cmp	r8, r6
   253f2:	d929      	bls.n	25448 <__aeabi_ddiv+0x550>
   253f4:	0011      	movs	r1, r2
   253f6:	4286      	cmp	r6, r0
   253f8:	d000      	beq.n	253fc <__aeabi_ddiv+0x504>
   253fa:	e765      	b.n	252c8 <__aeabi_ddiv+0x3d0>
   253fc:	9a03      	ldr	r2, [sp, #12]
   253fe:	4293      	cmp	r3, r2
   25400:	d000      	beq.n	25404 <__aeabi_ddiv+0x50c>
   25402:	e761      	b.n	252c8 <__aeabi_ddiv+0x3d0>
   25404:	e762      	b.n	252cc <__aeabi_ddiv+0x3d4>
   25406:	2101      	movs	r1, #1
   25408:	4249      	negs	r1, r1
   2540a:	2001      	movs	r0, #1
   2540c:	1ac2      	subs	r2, r0, r3
   2540e:	2a38      	cmp	r2, #56	; 0x38
   25410:	dd21      	ble.n	25456 <__aeabi_ddiv+0x55e>
   25412:	9b02      	ldr	r3, [sp, #8]
   25414:	4003      	ands	r3, r0
   25416:	469c      	mov	ip, r3
   25418:	e638      	b.n	2508c <__aeabi_ddiv+0x194>
   2541a:	220f      	movs	r2, #15
   2541c:	400a      	ands	r2, r1
   2541e:	2a04      	cmp	r2, #4
   25420:	d100      	bne.n	25424 <__aeabi_ddiv+0x52c>
   25422:	e75b      	b.n	252dc <__aeabi_ddiv+0x3e4>
   25424:	000a      	movs	r2, r1
   25426:	1d11      	adds	r1, r2, #4
   25428:	4291      	cmp	r1, r2
   2542a:	4192      	sbcs	r2, r2
   2542c:	4252      	negs	r2, r2
   2542e:	4493      	add	fp, r2
   25430:	e754      	b.n	252dc <__aeabi_ddiv+0x3e4>
   25432:	4b47      	ldr	r3, [pc, #284]	; (25550 <__aeabi_ddiv+0x658>)
   25434:	18e3      	adds	r3, r4, r3
   25436:	2b00      	cmp	r3, #0
   25438:	dde5      	ble.n	25406 <__aeabi_ddiv+0x50e>
   2543a:	2201      	movs	r2, #1
   2543c:	4252      	negs	r2, r2
   2543e:	e7f2      	b.n	25426 <__aeabi_ddiv+0x52e>
   25440:	001d      	movs	r5, r3
   25442:	e6fa      	b.n	2523a <__aeabi_ddiv+0x342>
   25444:	469a      	mov	sl, r3
   25446:	e71c      	b.n	25282 <__aeabi_ddiv+0x38a>
   25448:	42b0      	cmp	r0, r6
   2544a:	d839      	bhi.n	254c0 <__aeabi_ddiv+0x5c8>
   2544c:	d06e      	beq.n	2552c <__aeabi_ddiv+0x634>
   2544e:	0011      	movs	r1, r2
   25450:	e73a      	b.n	252c8 <__aeabi_ddiv+0x3d0>
   25452:	9302      	str	r3, [sp, #8]
   25454:	e73a      	b.n	252cc <__aeabi_ddiv+0x3d4>
   25456:	2a1f      	cmp	r2, #31
   25458:	dc3c      	bgt.n	254d4 <__aeabi_ddiv+0x5dc>
   2545a:	2320      	movs	r3, #32
   2545c:	1a9b      	subs	r3, r3, r2
   2545e:	000c      	movs	r4, r1
   25460:	4658      	mov	r0, fp
   25462:	4099      	lsls	r1, r3
   25464:	4098      	lsls	r0, r3
   25466:	1e4b      	subs	r3, r1, #1
   25468:	4199      	sbcs	r1, r3
   2546a:	465b      	mov	r3, fp
   2546c:	40d4      	lsrs	r4, r2
   2546e:	40d3      	lsrs	r3, r2
   25470:	4320      	orrs	r0, r4
   25472:	4308      	orrs	r0, r1
   25474:	001a      	movs	r2, r3
   25476:	0743      	lsls	r3, r0, #29
   25478:	d009      	beq.n	2548e <__aeabi_ddiv+0x596>
   2547a:	230f      	movs	r3, #15
   2547c:	4003      	ands	r3, r0
   2547e:	2b04      	cmp	r3, #4
   25480:	d005      	beq.n	2548e <__aeabi_ddiv+0x596>
   25482:	0001      	movs	r1, r0
   25484:	1d08      	adds	r0, r1, #4
   25486:	4288      	cmp	r0, r1
   25488:	419b      	sbcs	r3, r3
   2548a:	425b      	negs	r3, r3
   2548c:	18d2      	adds	r2, r2, r3
   2548e:	0213      	lsls	r3, r2, #8
   25490:	d53a      	bpl.n	25508 <__aeabi_ddiv+0x610>
   25492:	2301      	movs	r3, #1
   25494:	9a02      	ldr	r2, [sp, #8]
   25496:	2401      	movs	r4, #1
   25498:	401a      	ands	r2, r3
   2549a:	2300      	movs	r3, #0
   2549c:	4694      	mov	ip, r2
   2549e:	4698      	mov	r8, r3
   254a0:	2200      	movs	r2, #0
   254a2:	e5f7      	b.n	25094 <__aeabi_ddiv+0x19c>
   254a4:	2102      	movs	r1, #2
   254a6:	4249      	negs	r1, r1
   254a8:	468c      	mov	ip, r1
   254aa:	9d03      	ldr	r5, [sp, #12]
   254ac:	44e3      	add	fp, ip
   254ae:	46ac      	mov	ip, r5
   254b0:	44e2      	add	sl, ip
   254b2:	45aa      	cmp	sl, r5
   254b4:	41ad      	sbcs	r5, r5
   254b6:	426d      	negs	r5, r5
   254b8:	4445      	add	r5, r8
   254ba:	18ed      	adds	r5, r5, r3
   254bc:	1a2d      	subs	r5, r5, r0
   254be:	e696      	b.n	251ee <__aeabi_ddiv+0x2f6>
   254c0:	1e8a      	subs	r2, r1, #2
   254c2:	9903      	ldr	r1, [sp, #12]
   254c4:	004d      	lsls	r5, r1, #1
   254c6:	428d      	cmp	r5, r1
   254c8:	4189      	sbcs	r1, r1
   254ca:	4249      	negs	r1, r1
   254cc:	4441      	add	r1, r8
   254ce:	1876      	adds	r6, r6, r1
   254d0:	9503      	str	r5, [sp, #12]
   254d2:	e78f      	b.n	253f4 <__aeabi_ddiv+0x4fc>
   254d4:	201f      	movs	r0, #31
   254d6:	4240      	negs	r0, r0
   254d8:	1ac3      	subs	r3, r0, r3
   254da:	4658      	mov	r0, fp
   254dc:	40d8      	lsrs	r0, r3
   254de:	0003      	movs	r3, r0
   254e0:	2a20      	cmp	r2, #32
   254e2:	d028      	beq.n	25536 <__aeabi_ddiv+0x63e>
   254e4:	2040      	movs	r0, #64	; 0x40
   254e6:	465d      	mov	r5, fp
   254e8:	1a82      	subs	r2, r0, r2
   254ea:	4095      	lsls	r5, r2
   254ec:	4329      	orrs	r1, r5
   254ee:	1e4a      	subs	r2, r1, #1
   254f0:	4191      	sbcs	r1, r2
   254f2:	4319      	orrs	r1, r3
   254f4:	2307      	movs	r3, #7
   254f6:	2200      	movs	r2, #0
   254f8:	400b      	ands	r3, r1
   254fa:	d009      	beq.n	25510 <__aeabi_ddiv+0x618>
   254fc:	230f      	movs	r3, #15
   254fe:	2200      	movs	r2, #0
   25500:	400b      	ands	r3, r1
   25502:	0008      	movs	r0, r1
   25504:	2b04      	cmp	r3, #4
   25506:	d1bd      	bne.n	25484 <__aeabi_ddiv+0x58c>
   25508:	0001      	movs	r1, r0
   2550a:	0753      	lsls	r3, r2, #29
   2550c:	0252      	lsls	r2, r2, #9
   2550e:	0b12      	lsrs	r2, r2, #12
   25510:	08c9      	lsrs	r1, r1, #3
   25512:	4319      	orrs	r1, r3
   25514:	2301      	movs	r3, #1
   25516:	4688      	mov	r8, r1
   25518:	9902      	ldr	r1, [sp, #8]
   2551a:	2400      	movs	r4, #0
   2551c:	4019      	ands	r1, r3
   2551e:	468c      	mov	ip, r1
   25520:	e5b8      	b.n	25094 <__aeabi_ddiv+0x19c>
   25522:	4552      	cmp	r2, sl
   25524:	d8be      	bhi.n	254a4 <__aeabi_ddiv+0x5ac>
   25526:	468b      	mov	fp, r1
   25528:	2500      	movs	r5, #0
   2552a:	e660      	b.n	251ee <__aeabi_ddiv+0x2f6>
   2552c:	9d03      	ldr	r5, [sp, #12]
   2552e:	429d      	cmp	r5, r3
   25530:	d3c6      	bcc.n	254c0 <__aeabi_ddiv+0x5c8>
   25532:	0011      	movs	r1, r2
   25534:	e762      	b.n	253fc <__aeabi_ddiv+0x504>
   25536:	2500      	movs	r5, #0
   25538:	e7d8      	b.n	254ec <__aeabi_ddiv+0x5f4>
   2553a:	2280      	movs	r2, #128	; 0x80
   2553c:	465b      	mov	r3, fp
   2553e:	0312      	lsls	r2, r2, #12
   25540:	431a      	orrs	r2, r3
   25542:	9b01      	ldr	r3, [sp, #4]
   25544:	0312      	lsls	r2, r2, #12
   25546:	0b12      	lsrs	r2, r2, #12
   25548:	469c      	mov	ip, r3
   2554a:	4688      	mov	r8, r1
   2554c:	4c03      	ldr	r4, [pc, #12]	; (2555c <__aeabi_ddiv+0x664>)
   2554e:	e5a1      	b.n	25094 <__aeabi_ddiv+0x19c>
   25550:	000003ff 	.word	0x000003ff
   25554:	feffffff 	.word	0xfeffffff
   25558:	000007fe 	.word	0x000007fe
   2555c:	000007ff 	.word	0x000007ff

00025560 <__aeabi_dmul>:
   25560:	b5f0      	push	{r4, r5, r6, r7, lr}
   25562:	4657      	mov	r7, sl
   25564:	4645      	mov	r5, r8
   25566:	46de      	mov	lr, fp
   25568:	464e      	mov	r6, r9
   2556a:	b5e0      	push	{r5, r6, r7, lr}
   2556c:	030c      	lsls	r4, r1, #12
   2556e:	4698      	mov	r8, r3
   25570:	004e      	lsls	r6, r1, #1
   25572:	0b23      	lsrs	r3, r4, #12
   25574:	b087      	sub	sp, #28
   25576:	0007      	movs	r7, r0
   25578:	4692      	mov	sl, r2
   2557a:	469b      	mov	fp, r3
   2557c:	0d76      	lsrs	r6, r6, #21
   2557e:	0fcd      	lsrs	r5, r1, #31
   25580:	2e00      	cmp	r6, #0
   25582:	d06b      	beq.n	2565c <__aeabi_dmul+0xfc>
   25584:	4b6d      	ldr	r3, [pc, #436]	; (2573c <__aeabi_dmul+0x1dc>)
   25586:	429e      	cmp	r6, r3
   25588:	d035      	beq.n	255f6 <__aeabi_dmul+0x96>
   2558a:	2480      	movs	r4, #128	; 0x80
   2558c:	465b      	mov	r3, fp
   2558e:	0f42      	lsrs	r2, r0, #29
   25590:	0424      	lsls	r4, r4, #16
   25592:	00db      	lsls	r3, r3, #3
   25594:	4314      	orrs	r4, r2
   25596:	431c      	orrs	r4, r3
   25598:	00c3      	lsls	r3, r0, #3
   2559a:	4699      	mov	r9, r3
   2559c:	4b68      	ldr	r3, [pc, #416]	; (25740 <__aeabi_dmul+0x1e0>)
   2559e:	46a3      	mov	fp, r4
   255a0:	469c      	mov	ip, r3
   255a2:	2300      	movs	r3, #0
   255a4:	2700      	movs	r7, #0
   255a6:	4466      	add	r6, ip
   255a8:	9302      	str	r3, [sp, #8]
   255aa:	4643      	mov	r3, r8
   255ac:	031c      	lsls	r4, r3, #12
   255ae:	005a      	lsls	r2, r3, #1
   255b0:	0fdb      	lsrs	r3, r3, #31
   255b2:	4650      	mov	r0, sl
   255b4:	0b24      	lsrs	r4, r4, #12
   255b6:	0d52      	lsrs	r2, r2, #21
   255b8:	4698      	mov	r8, r3
   255ba:	d100      	bne.n	255be <__aeabi_dmul+0x5e>
   255bc:	e076      	b.n	256ac <__aeabi_dmul+0x14c>
   255be:	4b5f      	ldr	r3, [pc, #380]	; (2573c <__aeabi_dmul+0x1dc>)
   255c0:	429a      	cmp	r2, r3
   255c2:	d06d      	beq.n	256a0 <__aeabi_dmul+0x140>
   255c4:	2380      	movs	r3, #128	; 0x80
   255c6:	0f41      	lsrs	r1, r0, #29
   255c8:	041b      	lsls	r3, r3, #16
   255ca:	430b      	orrs	r3, r1
   255cc:	495c      	ldr	r1, [pc, #368]	; (25740 <__aeabi_dmul+0x1e0>)
   255ce:	00e4      	lsls	r4, r4, #3
   255d0:	468c      	mov	ip, r1
   255d2:	431c      	orrs	r4, r3
   255d4:	00c3      	lsls	r3, r0, #3
   255d6:	2000      	movs	r0, #0
   255d8:	4462      	add	r2, ip
   255da:	4641      	mov	r1, r8
   255dc:	18b6      	adds	r6, r6, r2
   255de:	4069      	eors	r1, r5
   255e0:	1c72      	adds	r2, r6, #1
   255e2:	9101      	str	r1, [sp, #4]
   255e4:	4694      	mov	ip, r2
   255e6:	4307      	orrs	r7, r0
   255e8:	2f0f      	cmp	r7, #15
   255ea:	d900      	bls.n	255ee <__aeabi_dmul+0x8e>
   255ec:	e0b0      	b.n	25750 <__aeabi_dmul+0x1f0>
   255ee:	4a55      	ldr	r2, [pc, #340]	; (25744 <__aeabi_dmul+0x1e4>)
   255f0:	00bf      	lsls	r7, r7, #2
   255f2:	59d2      	ldr	r2, [r2, r7]
   255f4:	4697      	mov	pc, r2
   255f6:	465b      	mov	r3, fp
   255f8:	4303      	orrs	r3, r0
   255fa:	4699      	mov	r9, r3
   255fc:	d000      	beq.n	25600 <__aeabi_dmul+0xa0>
   255fe:	e087      	b.n	25710 <__aeabi_dmul+0x1b0>
   25600:	2300      	movs	r3, #0
   25602:	469b      	mov	fp, r3
   25604:	3302      	adds	r3, #2
   25606:	2708      	movs	r7, #8
   25608:	9302      	str	r3, [sp, #8]
   2560a:	e7ce      	b.n	255aa <__aeabi_dmul+0x4a>
   2560c:	4642      	mov	r2, r8
   2560e:	9201      	str	r2, [sp, #4]
   25610:	2802      	cmp	r0, #2
   25612:	d067      	beq.n	256e4 <__aeabi_dmul+0x184>
   25614:	2803      	cmp	r0, #3
   25616:	d100      	bne.n	2561a <__aeabi_dmul+0xba>
   25618:	e20e      	b.n	25a38 <__aeabi_dmul+0x4d8>
   2561a:	2801      	cmp	r0, #1
   2561c:	d000      	beq.n	25620 <__aeabi_dmul+0xc0>
   2561e:	e162      	b.n	258e6 <__aeabi_dmul+0x386>
   25620:	2300      	movs	r3, #0
   25622:	2400      	movs	r4, #0
   25624:	2200      	movs	r2, #0
   25626:	4699      	mov	r9, r3
   25628:	9901      	ldr	r1, [sp, #4]
   2562a:	4001      	ands	r1, r0
   2562c:	b2cd      	uxtb	r5, r1
   2562e:	2100      	movs	r1, #0
   25630:	0312      	lsls	r2, r2, #12
   25632:	0d0b      	lsrs	r3, r1, #20
   25634:	0b12      	lsrs	r2, r2, #12
   25636:	051b      	lsls	r3, r3, #20
   25638:	4313      	orrs	r3, r2
   2563a:	4a43      	ldr	r2, [pc, #268]	; (25748 <__aeabi_dmul+0x1e8>)
   2563c:	0524      	lsls	r4, r4, #20
   2563e:	4013      	ands	r3, r2
   25640:	431c      	orrs	r4, r3
   25642:	0064      	lsls	r4, r4, #1
   25644:	07ed      	lsls	r5, r5, #31
   25646:	0864      	lsrs	r4, r4, #1
   25648:	432c      	orrs	r4, r5
   2564a:	4648      	mov	r0, r9
   2564c:	0021      	movs	r1, r4
   2564e:	b007      	add	sp, #28
   25650:	bc3c      	pop	{r2, r3, r4, r5}
   25652:	4690      	mov	r8, r2
   25654:	4699      	mov	r9, r3
   25656:	46a2      	mov	sl, r4
   25658:	46ab      	mov	fp, r5
   2565a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2565c:	4303      	orrs	r3, r0
   2565e:	4699      	mov	r9, r3
   25660:	d04f      	beq.n	25702 <__aeabi_dmul+0x1a2>
   25662:	465b      	mov	r3, fp
   25664:	2b00      	cmp	r3, #0
   25666:	d100      	bne.n	2566a <__aeabi_dmul+0x10a>
   25668:	e189      	b.n	2597e <__aeabi_dmul+0x41e>
   2566a:	4658      	mov	r0, fp
   2566c:	f000 fd7a 	bl	26164 <__clzsi2>
   25670:	0003      	movs	r3, r0
   25672:	3b0b      	subs	r3, #11
   25674:	2b1c      	cmp	r3, #28
   25676:	dd00      	ble.n	2567a <__aeabi_dmul+0x11a>
   25678:	e17a      	b.n	25970 <__aeabi_dmul+0x410>
   2567a:	221d      	movs	r2, #29
   2567c:	1ad3      	subs	r3, r2, r3
   2567e:	003a      	movs	r2, r7
   25680:	0001      	movs	r1, r0
   25682:	465c      	mov	r4, fp
   25684:	40da      	lsrs	r2, r3
   25686:	3908      	subs	r1, #8
   25688:	408c      	lsls	r4, r1
   2568a:	0013      	movs	r3, r2
   2568c:	408f      	lsls	r7, r1
   2568e:	4323      	orrs	r3, r4
   25690:	469b      	mov	fp, r3
   25692:	46b9      	mov	r9, r7
   25694:	2300      	movs	r3, #0
   25696:	4e2d      	ldr	r6, [pc, #180]	; (2574c <__aeabi_dmul+0x1ec>)
   25698:	2700      	movs	r7, #0
   2569a:	1a36      	subs	r6, r6, r0
   2569c:	9302      	str	r3, [sp, #8]
   2569e:	e784      	b.n	255aa <__aeabi_dmul+0x4a>
   256a0:	4653      	mov	r3, sl
   256a2:	4323      	orrs	r3, r4
   256a4:	d12a      	bne.n	256fc <__aeabi_dmul+0x19c>
   256a6:	2400      	movs	r4, #0
   256a8:	2002      	movs	r0, #2
   256aa:	e796      	b.n	255da <__aeabi_dmul+0x7a>
   256ac:	4653      	mov	r3, sl
   256ae:	4323      	orrs	r3, r4
   256b0:	d020      	beq.n	256f4 <__aeabi_dmul+0x194>
   256b2:	2c00      	cmp	r4, #0
   256b4:	d100      	bne.n	256b8 <__aeabi_dmul+0x158>
   256b6:	e157      	b.n	25968 <__aeabi_dmul+0x408>
   256b8:	0020      	movs	r0, r4
   256ba:	f000 fd53 	bl	26164 <__clzsi2>
   256be:	0003      	movs	r3, r0
   256c0:	3b0b      	subs	r3, #11
   256c2:	2b1c      	cmp	r3, #28
   256c4:	dd00      	ble.n	256c8 <__aeabi_dmul+0x168>
   256c6:	e149      	b.n	2595c <__aeabi_dmul+0x3fc>
   256c8:	211d      	movs	r1, #29
   256ca:	1acb      	subs	r3, r1, r3
   256cc:	4651      	mov	r1, sl
   256ce:	0002      	movs	r2, r0
   256d0:	40d9      	lsrs	r1, r3
   256d2:	4653      	mov	r3, sl
   256d4:	3a08      	subs	r2, #8
   256d6:	4094      	lsls	r4, r2
   256d8:	4093      	lsls	r3, r2
   256da:	430c      	orrs	r4, r1
   256dc:	4a1b      	ldr	r2, [pc, #108]	; (2574c <__aeabi_dmul+0x1ec>)
   256de:	1a12      	subs	r2, r2, r0
   256e0:	2000      	movs	r0, #0
   256e2:	e77a      	b.n	255da <__aeabi_dmul+0x7a>
   256e4:	2501      	movs	r5, #1
   256e6:	9b01      	ldr	r3, [sp, #4]
   256e8:	4c14      	ldr	r4, [pc, #80]	; (2573c <__aeabi_dmul+0x1dc>)
   256ea:	401d      	ands	r5, r3
   256ec:	2300      	movs	r3, #0
   256ee:	2200      	movs	r2, #0
   256f0:	4699      	mov	r9, r3
   256f2:	e79c      	b.n	2562e <__aeabi_dmul+0xce>
   256f4:	2400      	movs	r4, #0
   256f6:	2200      	movs	r2, #0
   256f8:	2001      	movs	r0, #1
   256fa:	e76e      	b.n	255da <__aeabi_dmul+0x7a>
   256fc:	4653      	mov	r3, sl
   256fe:	2003      	movs	r0, #3
   25700:	e76b      	b.n	255da <__aeabi_dmul+0x7a>
   25702:	2300      	movs	r3, #0
   25704:	469b      	mov	fp, r3
   25706:	3301      	adds	r3, #1
   25708:	2704      	movs	r7, #4
   2570a:	2600      	movs	r6, #0
   2570c:	9302      	str	r3, [sp, #8]
   2570e:	e74c      	b.n	255aa <__aeabi_dmul+0x4a>
   25710:	2303      	movs	r3, #3
   25712:	4681      	mov	r9, r0
   25714:	270c      	movs	r7, #12
   25716:	9302      	str	r3, [sp, #8]
   25718:	e747      	b.n	255aa <__aeabi_dmul+0x4a>
   2571a:	2280      	movs	r2, #128	; 0x80
   2571c:	2300      	movs	r3, #0
   2571e:	2500      	movs	r5, #0
   25720:	0312      	lsls	r2, r2, #12
   25722:	4699      	mov	r9, r3
   25724:	4c05      	ldr	r4, [pc, #20]	; (2573c <__aeabi_dmul+0x1dc>)
   25726:	e782      	b.n	2562e <__aeabi_dmul+0xce>
   25728:	465c      	mov	r4, fp
   2572a:	464b      	mov	r3, r9
   2572c:	9802      	ldr	r0, [sp, #8]
   2572e:	e76f      	b.n	25610 <__aeabi_dmul+0xb0>
   25730:	465c      	mov	r4, fp
   25732:	464b      	mov	r3, r9
   25734:	9501      	str	r5, [sp, #4]
   25736:	9802      	ldr	r0, [sp, #8]
   25738:	e76a      	b.n	25610 <__aeabi_dmul+0xb0>
   2573a:	46c0      	nop			; (mov r8, r8)
   2573c:	000007ff 	.word	0x000007ff
   25740:	fffffc01 	.word	0xfffffc01
   25744:	0002af80 	.word	0x0002af80
   25748:	800fffff 	.word	0x800fffff
   2574c:	fffffc0d 	.word	0xfffffc0d
   25750:	464a      	mov	r2, r9
   25752:	4649      	mov	r1, r9
   25754:	0c17      	lsrs	r7, r2, #16
   25756:	0c1a      	lsrs	r2, r3, #16
   25758:	041b      	lsls	r3, r3, #16
   2575a:	0c1b      	lsrs	r3, r3, #16
   2575c:	0408      	lsls	r0, r1, #16
   2575e:	0019      	movs	r1, r3
   25760:	0c00      	lsrs	r0, r0, #16
   25762:	4341      	muls	r1, r0
   25764:	0015      	movs	r5, r2
   25766:	4688      	mov	r8, r1
   25768:	0019      	movs	r1, r3
   2576a:	437d      	muls	r5, r7
   2576c:	4379      	muls	r1, r7
   2576e:	9503      	str	r5, [sp, #12]
   25770:	4689      	mov	r9, r1
   25772:	0029      	movs	r1, r5
   25774:	0015      	movs	r5, r2
   25776:	4345      	muls	r5, r0
   25778:	444d      	add	r5, r9
   2577a:	9502      	str	r5, [sp, #8]
   2577c:	4645      	mov	r5, r8
   2577e:	0c2d      	lsrs	r5, r5, #16
   25780:	46aa      	mov	sl, r5
   25782:	9d02      	ldr	r5, [sp, #8]
   25784:	4455      	add	r5, sl
   25786:	45a9      	cmp	r9, r5
   25788:	d906      	bls.n	25798 <__aeabi_dmul+0x238>
   2578a:	468a      	mov	sl, r1
   2578c:	2180      	movs	r1, #128	; 0x80
   2578e:	0249      	lsls	r1, r1, #9
   25790:	4689      	mov	r9, r1
   25792:	44ca      	add	sl, r9
   25794:	4651      	mov	r1, sl
   25796:	9103      	str	r1, [sp, #12]
   25798:	0c29      	lsrs	r1, r5, #16
   2579a:	9104      	str	r1, [sp, #16]
   2579c:	4641      	mov	r1, r8
   2579e:	0409      	lsls	r1, r1, #16
   257a0:	042d      	lsls	r5, r5, #16
   257a2:	0c09      	lsrs	r1, r1, #16
   257a4:	4688      	mov	r8, r1
   257a6:	0029      	movs	r1, r5
   257a8:	0c25      	lsrs	r5, r4, #16
   257aa:	0424      	lsls	r4, r4, #16
   257ac:	4441      	add	r1, r8
   257ae:	0c24      	lsrs	r4, r4, #16
   257b0:	9105      	str	r1, [sp, #20]
   257b2:	0021      	movs	r1, r4
   257b4:	4341      	muls	r1, r0
   257b6:	4688      	mov	r8, r1
   257b8:	0021      	movs	r1, r4
   257ba:	4379      	muls	r1, r7
   257bc:	468a      	mov	sl, r1
   257be:	4368      	muls	r0, r5
   257c0:	4641      	mov	r1, r8
   257c2:	4450      	add	r0, sl
   257c4:	4681      	mov	r9, r0
   257c6:	0c08      	lsrs	r0, r1, #16
   257c8:	4448      	add	r0, r9
   257ca:	436f      	muls	r7, r5
   257cc:	4582      	cmp	sl, r0
   257ce:	d903      	bls.n	257d8 <__aeabi_dmul+0x278>
   257d0:	2180      	movs	r1, #128	; 0x80
   257d2:	0249      	lsls	r1, r1, #9
   257d4:	4689      	mov	r9, r1
   257d6:	444f      	add	r7, r9
   257d8:	0c01      	lsrs	r1, r0, #16
   257da:	4689      	mov	r9, r1
   257dc:	0039      	movs	r1, r7
   257de:	4449      	add	r1, r9
   257e0:	9102      	str	r1, [sp, #8]
   257e2:	4641      	mov	r1, r8
   257e4:	040f      	lsls	r7, r1, #16
   257e6:	9904      	ldr	r1, [sp, #16]
   257e8:	0c3f      	lsrs	r7, r7, #16
   257ea:	4688      	mov	r8, r1
   257ec:	0400      	lsls	r0, r0, #16
   257ee:	19c0      	adds	r0, r0, r7
   257f0:	4480      	add	r8, r0
   257f2:	4641      	mov	r1, r8
   257f4:	9104      	str	r1, [sp, #16]
   257f6:	4659      	mov	r1, fp
   257f8:	0c0f      	lsrs	r7, r1, #16
   257fa:	0409      	lsls	r1, r1, #16
   257fc:	0c09      	lsrs	r1, r1, #16
   257fe:	4688      	mov	r8, r1
   25800:	4359      	muls	r1, r3
   25802:	468a      	mov	sl, r1
   25804:	0039      	movs	r1, r7
   25806:	4351      	muls	r1, r2
   25808:	4689      	mov	r9, r1
   2580a:	4641      	mov	r1, r8
   2580c:	434a      	muls	r2, r1
   2580e:	4651      	mov	r1, sl
   25810:	0c09      	lsrs	r1, r1, #16
   25812:	468b      	mov	fp, r1
   25814:	437b      	muls	r3, r7
   25816:	18d2      	adds	r2, r2, r3
   25818:	445a      	add	r2, fp
   2581a:	4293      	cmp	r3, r2
   2581c:	d903      	bls.n	25826 <__aeabi_dmul+0x2c6>
   2581e:	2380      	movs	r3, #128	; 0x80
   25820:	025b      	lsls	r3, r3, #9
   25822:	469b      	mov	fp, r3
   25824:	44d9      	add	r9, fp
   25826:	4651      	mov	r1, sl
   25828:	0409      	lsls	r1, r1, #16
   2582a:	0c09      	lsrs	r1, r1, #16
   2582c:	468a      	mov	sl, r1
   2582e:	4641      	mov	r1, r8
   25830:	4361      	muls	r1, r4
   25832:	437c      	muls	r4, r7
   25834:	0c13      	lsrs	r3, r2, #16
   25836:	0412      	lsls	r2, r2, #16
   25838:	444b      	add	r3, r9
   2583a:	4452      	add	r2, sl
   2583c:	46a1      	mov	r9, r4
   2583e:	468a      	mov	sl, r1
   25840:	003c      	movs	r4, r7
   25842:	4641      	mov	r1, r8
   25844:	436c      	muls	r4, r5
   25846:	434d      	muls	r5, r1
   25848:	4651      	mov	r1, sl
   2584a:	444d      	add	r5, r9
   2584c:	0c0f      	lsrs	r7, r1, #16
   2584e:	197d      	adds	r5, r7, r5
   25850:	45a9      	cmp	r9, r5
   25852:	d903      	bls.n	2585c <__aeabi_dmul+0x2fc>
   25854:	2180      	movs	r1, #128	; 0x80
   25856:	0249      	lsls	r1, r1, #9
   25858:	4688      	mov	r8, r1
   2585a:	4444      	add	r4, r8
   2585c:	9f04      	ldr	r7, [sp, #16]
   2585e:	9903      	ldr	r1, [sp, #12]
   25860:	46b8      	mov	r8, r7
   25862:	4441      	add	r1, r8
   25864:	468b      	mov	fp, r1
   25866:	4583      	cmp	fp, r0
   25868:	4180      	sbcs	r0, r0
   2586a:	4241      	negs	r1, r0
   2586c:	4688      	mov	r8, r1
   2586e:	4651      	mov	r1, sl
   25870:	0408      	lsls	r0, r1, #16
   25872:	042f      	lsls	r7, r5, #16
   25874:	0c00      	lsrs	r0, r0, #16
   25876:	183f      	adds	r7, r7, r0
   25878:	4658      	mov	r0, fp
   2587a:	9902      	ldr	r1, [sp, #8]
   2587c:	1810      	adds	r0, r2, r0
   2587e:	4689      	mov	r9, r1
   25880:	4290      	cmp	r0, r2
   25882:	4192      	sbcs	r2, r2
   25884:	444f      	add	r7, r9
   25886:	46ba      	mov	sl, r7
   25888:	4252      	negs	r2, r2
   2588a:	4699      	mov	r9, r3
   2588c:	4693      	mov	fp, r2
   2588e:	44c2      	add	sl, r8
   25890:	44d1      	add	r9, sl
   25892:	44cb      	add	fp, r9
   25894:	428f      	cmp	r7, r1
   25896:	41bf      	sbcs	r7, r7
   25898:	45c2      	cmp	sl, r8
   2589a:	4189      	sbcs	r1, r1
   2589c:	4599      	cmp	r9, r3
   2589e:	419b      	sbcs	r3, r3
   258a0:	4593      	cmp	fp, r2
   258a2:	4192      	sbcs	r2, r2
   258a4:	427f      	negs	r7, r7
   258a6:	4249      	negs	r1, r1
   258a8:	0c2d      	lsrs	r5, r5, #16
   258aa:	4252      	negs	r2, r2
   258ac:	430f      	orrs	r7, r1
   258ae:	425b      	negs	r3, r3
   258b0:	4313      	orrs	r3, r2
   258b2:	197f      	adds	r7, r7, r5
   258b4:	18ff      	adds	r7, r7, r3
   258b6:	465b      	mov	r3, fp
   258b8:	193c      	adds	r4, r7, r4
   258ba:	0ddb      	lsrs	r3, r3, #23
   258bc:	9a05      	ldr	r2, [sp, #20]
   258be:	0264      	lsls	r4, r4, #9
   258c0:	431c      	orrs	r4, r3
   258c2:	0243      	lsls	r3, r0, #9
   258c4:	4313      	orrs	r3, r2
   258c6:	1e5d      	subs	r5, r3, #1
   258c8:	41ab      	sbcs	r3, r5
   258ca:	465a      	mov	r2, fp
   258cc:	0dc0      	lsrs	r0, r0, #23
   258ce:	4303      	orrs	r3, r0
   258d0:	0252      	lsls	r2, r2, #9
   258d2:	4313      	orrs	r3, r2
   258d4:	01e2      	lsls	r2, r4, #7
   258d6:	d556      	bpl.n	25986 <__aeabi_dmul+0x426>
   258d8:	2001      	movs	r0, #1
   258da:	085a      	lsrs	r2, r3, #1
   258dc:	4003      	ands	r3, r0
   258de:	4313      	orrs	r3, r2
   258e0:	07e2      	lsls	r2, r4, #31
   258e2:	4313      	orrs	r3, r2
   258e4:	0864      	lsrs	r4, r4, #1
   258e6:	485a      	ldr	r0, [pc, #360]	; (25a50 <__aeabi_dmul+0x4f0>)
   258e8:	4460      	add	r0, ip
   258ea:	2800      	cmp	r0, #0
   258ec:	dd4d      	ble.n	2598a <__aeabi_dmul+0x42a>
   258ee:	075a      	lsls	r2, r3, #29
   258f0:	d009      	beq.n	25906 <__aeabi_dmul+0x3a6>
   258f2:	220f      	movs	r2, #15
   258f4:	401a      	ands	r2, r3
   258f6:	2a04      	cmp	r2, #4
   258f8:	d005      	beq.n	25906 <__aeabi_dmul+0x3a6>
   258fa:	1d1a      	adds	r2, r3, #4
   258fc:	429a      	cmp	r2, r3
   258fe:	419b      	sbcs	r3, r3
   25900:	425b      	negs	r3, r3
   25902:	18e4      	adds	r4, r4, r3
   25904:	0013      	movs	r3, r2
   25906:	01e2      	lsls	r2, r4, #7
   25908:	d504      	bpl.n	25914 <__aeabi_dmul+0x3b4>
   2590a:	2080      	movs	r0, #128	; 0x80
   2590c:	4a51      	ldr	r2, [pc, #324]	; (25a54 <__aeabi_dmul+0x4f4>)
   2590e:	00c0      	lsls	r0, r0, #3
   25910:	4014      	ands	r4, r2
   25912:	4460      	add	r0, ip
   25914:	4a50      	ldr	r2, [pc, #320]	; (25a58 <__aeabi_dmul+0x4f8>)
   25916:	4290      	cmp	r0, r2
   25918:	dd00      	ble.n	2591c <__aeabi_dmul+0x3bc>
   2591a:	e6e3      	b.n	256e4 <__aeabi_dmul+0x184>
   2591c:	2501      	movs	r5, #1
   2591e:	08db      	lsrs	r3, r3, #3
   25920:	0762      	lsls	r2, r4, #29
   25922:	431a      	orrs	r2, r3
   25924:	0264      	lsls	r4, r4, #9
   25926:	9b01      	ldr	r3, [sp, #4]
   25928:	4691      	mov	r9, r2
   2592a:	0b22      	lsrs	r2, r4, #12
   2592c:	0544      	lsls	r4, r0, #21
   2592e:	0d64      	lsrs	r4, r4, #21
   25930:	401d      	ands	r5, r3
   25932:	e67c      	b.n	2562e <__aeabi_dmul+0xce>
   25934:	2280      	movs	r2, #128	; 0x80
   25936:	4659      	mov	r1, fp
   25938:	0312      	lsls	r2, r2, #12
   2593a:	4211      	tst	r1, r2
   2593c:	d008      	beq.n	25950 <__aeabi_dmul+0x3f0>
   2593e:	4214      	tst	r4, r2
   25940:	d106      	bne.n	25950 <__aeabi_dmul+0x3f0>
   25942:	4322      	orrs	r2, r4
   25944:	0312      	lsls	r2, r2, #12
   25946:	0b12      	lsrs	r2, r2, #12
   25948:	4645      	mov	r5, r8
   2594a:	4699      	mov	r9, r3
   2594c:	4c43      	ldr	r4, [pc, #268]	; (25a5c <__aeabi_dmul+0x4fc>)
   2594e:	e66e      	b.n	2562e <__aeabi_dmul+0xce>
   25950:	465b      	mov	r3, fp
   25952:	431a      	orrs	r2, r3
   25954:	0312      	lsls	r2, r2, #12
   25956:	0b12      	lsrs	r2, r2, #12
   25958:	4c40      	ldr	r4, [pc, #256]	; (25a5c <__aeabi_dmul+0x4fc>)
   2595a:	e668      	b.n	2562e <__aeabi_dmul+0xce>
   2595c:	0003      	movs	r3, r0
   2595e:	4654      	mov	r4, sl
   25960:	3b28      	subs	r3, #40	; 0x28
   25962:	409c      	lsls	r4, r3
   25964:	2300      	movs	r3, #0
   25966:	e6b9      	b.n	256dc <__aeabi_dmul+0x17c>
   25968:	f000 fbfc 	bl	26164 <__clzsi2>
   2596c:	3020      	adds	r0, #32
   2596e:	e6a6      	b.n	256be <__aeabi_dmul+0x15e>
   25970:	0003      	movs	r3, r0
   25972:	3b28      	subs	r3, #40	; 0x28
   25974:	409f      	lsls	r7, r3
   25976:	2300      	movs	r3, #0
   25978:	46bb      	mov	fp, r7
   2597a:	4699      	mov	r9, r3
   2597c:	e68a      	b.n	25694 <__aeabi_dmul+0x134>
   2597e:	f000 fbf1 	bl	26164 <__clzsi2>
   25982:	3020      	adds	r0, #32
   25984:	e674      	b.n	25670 <__aeabi_dmul+0x110>
   25986:	46b4      	mov	ip, r6
   25988:	e7ad      	b.n	258e6 <__aeabi_dmul+0x386>
   2598a:	2501      	movs	r5, #1
   2598c:	1a2a      	subs	r2, r5, r0
   2598e:	2a38      	cmp	r2, #56	; 0x38
   25990:	dd06      	ble.n	259a0 <__aeabi_dmul+0x440>
   25992:	9b01      	ldr	r3, [sp, #4]
   25994:	2400      	movs	r4, #0
   25996:	401d      	ands	r5, r3
   25998:	2300      	movs	r3, #0
   2599a:	2200      	movs	r2, #0
   2599c:	4699      	mov	r9, r3
   2599e:	e646      	b.n	2562e <__aeabi_dmul+0xce>
   259a0:	2a1f      	cmp	r2, #31
   259a2:	dc21      	bgt.n	259e8 <__aeabi_dmul+0x488>
   259a4:	2520      	movs	r5, #32
   259a6:	0020      	movs	r0, r4
   259a8:	1aad      	subs	r5, r5, r2
   259aa:	001e      	movs	r6, r3
   259ac:	40ab      	lsls	r3, r5
   259ae:	40a8      	lsls	r0, r5
   259b0:	40d6      	lsrs	r6, r2
   259b2:	1e5d      	subs	r5, r3, #1
   259b4:	41ab      	sbcs	r3, r5
   259b6:	4330      	orrs	r0, r6
   259b8:	4318      	orrs	r0, r3
   259ba:	40d4      	lsrs	r4, r2
   259bc:	0743      	lsls	r3, r0, #29
   259be:	d009      	beq.n	259d4 <__aeabi_dmul+0x474>
   259c0:	230f      	movs	r3, #15
   259c2:	4003      	ands	r3, r0
   259c4:	2b04      	cmp	r3, #4
   259c6:	d005      	beq.n	259d4 <__aeabi_dmul+0x474>
   259c8:	0003      	movs	r3, r0
   259ca:	1d18      	adds	r0, r3, #4
   259cc:	4298      	cmp	r0, r3
   259ce:	419b      	sbcs	r3, r3
   259d0:	425b      	negs	r3, r3
   259d2:	18e4      	adds	r4, r4, r3
   259d4:	0223      	lsls	r3, r4, #8
   259d6:	d521      	bpl.n	25a1c <__aeabi_dmul+0x4bc>
   259d8:	2501      	movs	r5, #1
   259da:	9b01      	ldr	r3, [sp, #4]
   259dc:	2401      	movs	r4, #1
   259de:	401d      	ands	r5, r3
   259e0:	2300      	movs	r3, #0
   259e2:	2200      	movs	r2, #0
   259e4:	4699      	mov	r9, r3
   259e6:	e622      	b.n	2562e <__aeabi_dmul+0xce>
   259e8:	251f      	movs	r5, #31
   259ea:	0021      	movs	r1, r4
   259ec:	426d      	negs	r5, r5
   259ee:	1a28      	subs	r0, r5, r0
   259f0:	40c1      	lsrs	r1, r0
   259f2:	0008      	movs	r0, r1
   259f4:	2a20      	cmp	r2, #32
   259f6:	d01d      	beq.n	25a34 <__aeabi_dmul+0x4d4>
   259f8:	355f      	adds	r5, #95	; 0x5f
   259fa:	1aaa      	subs	r2, r5, r2
   259fc:	4094      	lsls	r4, r2
   259fe:	4323      	orrs	r3, r4
   25a00:	1e5c      	subs	r4, r3, #1
   25a02:	41a3      	sbcs	r3, r4
   25a04:	2507      	movs	r5, #7
   25a06:	4303      	orrs	r3, r0
   25a08:	401d      	ands	r5, r3
   25a0a:	2200      	movs	r2, #0
   25a0c:	2d00      	cmp	r5, #0
   25a0e:	d009      	beq.n	25a24 <__aeabi_dmul+0x4c4>
   25a10:	220f      	movs	r2, #15
   25a12:	2400      	movs	r4, #0
   25a14:	401a      	ands	r2, r3
   25a16:	0018      	movs	r0, r3
   25a18:	2a04      	cmp	r2, #4
   25a1a:	d1d6      	bne.n	259ca <__aeabi_dmul+0x46a>
   25a1c:	0003      	movs	r3, r0
   25a1e:	0765      	lsls	r5, r4, #29
   25a20:	0264      	lsls	r4, r4, #9
   25a22:	0b22      	lsrs	r2, r4, #12
   25a24:	08db      	lsrs	r3, r3, #3
   25a26:	432b      	orrs	r3, r5
   25a28:	2501      	movs	r5, #1
   25a2a:	4699      	mov	r9, r3
   25a2c:	9b01      	ldr	r3, [sp, #4]
   25a2e:	2400      	movs	r4, #0
   25a30:	401d      	ands	r5, r3
   25a32:	e5fc      	b.n	2562e <__aeabi_dmul+0xce>
   25a34:	2400      	movs	r4, #0
   25a36:	e7e2      	b.n	259fe <__aeabi_dmul+0x49e>
   25a38:	2280      	movs	r2, #128	; 0x80
   25a3a:	2501      	movs	r5, #1
   25a3c:	0312      	lsls	r2, r2, #12
   25a3e:	4322      	orrs	r2, r4
   25a40:	9901      	ldr	r1, [sp, #4]
   25a42:	0312      	lsls	r2, r2, #12
   25a44:	0b12      	lsrs	r2, r2, #12
   25a46:	400d      	ands	r5, r1
   25a48:	4699      	mov	r9, r3
   25a4a:	4c04      	ldr	r4, [pc, #16]	; (25a5c <__aeabi_dmul+0x4fc>)
   25a4c:	e5ef      	b.n	2562e <__aeabi_dmul+0xce>
   25a4e:	46c0      	nop			; (mov r8, r8)
   25a50:	000003ff 	.word	0x000003ff
   25a54:	feffffff 	.word	0xfeffffff
   25a58:	000007fe 	.word	0x000007fe
   25a5c:	000007ff 	.word	0x000007ff

00025a60 <__aeabi_dsub>:
   25a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a62:	4646      	mov	r6, r8
   25a64:	46d6      	mov	lr, sl
   25a66:	464f      	mov	r7, r9
   25a68:	030c      	lsls	r4, r1, #12
   25a6a:	b5c0      	push	{r6, r7, lr}
   25a6c:	0fcd      	lsrs	r5, r1, #31
   25a6e:	004e      	lsls	r6, r1, #1
   25a70:	0a61      	lsrs	r1, r4, #9
   25a72:	0f44      	lsrs	r4, r0, #29
   25a74:	430c      	orrs	r4, r1
   25a76:	00c1      	lsls	r1, r0, #3
   25a78:	0058      	lsls	r0, r3, #1
   25a7a:	0d40      	lsrs	r0, r0, #21
   25a7c:	4684      	mov	ip, r0
   25a7e:	468a      	mov	sl, r1
   25a80:	000f      	movs	r7, r1
   25a82:	0319      	lsls	r1, r3, #12
   25a84:	0f50      	lsrs	r0, r2, #29
   25a86:	0a49      	lsrs	r1, r1, #9
   25a88:	4301      	orrs	r1, r0
   25a8a:	48c6      	ldr	r0, [pc, #792]	; (25da4 <__aeabi_dsub+0x344>)
   25a8c:	0d76      	lsrs	r6, r6, #21
   25a8e:	46a8      	mov	r8, r5
   25a90:	0fdb      	lsrs	r3, r3, #31
   25a92:	00d2      	lsls	r2, r2, #3
   25a94:	4584      	cmp	ip, r0
   25a96:	d100      	bne.n	25a9a <__aeabi_dsub+0x3a>
   25a98:	e0d8      	b.n	25c4c <__aeabi_dsub+0x1ec>
   25a9a:	2001      	movs	r0, #1
   25a9c:	4043      	eors	r3, r0
   25a9e:	42ab      	cmp	r3, r5
   25aa0:	d100      	bne.n	25aa4 <__aeabi_dsub+0x44>
   25aa2:	e0a6      	b.n	25bf2 <__aeabi_dsub+0x192>
   25aa4:	4660      	mov	r0, ip
   25aa6:	1a35      	subs	r5, r6, r0
   25aa8:	2d00      	cmp	r5, #0
   25aaa:	dc00      	bgt.n	25aae <__aeabi_dsub+0x4e>
   25aac:	e105      	b.n	25cba <__aeabi_dsub+0x25a>
   25aae:	2800      	cmp	r0, #0
   25ab0:	d110      	bne.n	25ad4 <__aeabi_dsub+0x74>
   25ab2:	000b      	movs	r3, r1
   25ab4:	4313      	orrs	r3, r2
   25ab6:	d100      	bne.n	25aba <__aeabi_dsub+0x5a>
   25ab8:	e0d7      	b.n	25c6a <__aeabi_dsub+0x20a>
   25aba:	1e6b      	subs	r3, r5, #1
   25abc:	2b00      	cmp	r3, #0
   25abe:	d000      	beq.n	25ac2 <__aeabi_dsub+0x62>
   25ac0:	e14b      	b.n	25d5a <__aeabi_dsub+0x2fa>
   25ac2:	4653      	mov	r3, sl
   25ac4:	1a9f      	subs	r7, r3, r2
   25ac6:	45ba      	cmp	sl, r7
   25ac8:	4180      	sbcs	r0, r0
   25aca:	1a64      	subs	r4, r4, r1
   25acc:	4240      	negs	r0, r0
   25ace:	1a24      	subs	r4, r4, r0
   25ad0:	2601      	movs	r6, #1
   25ad2:	e01e      	b.n	25b12 <__aeabi_dsub+0xb2>
   25ad4:	4bb3      	ldr	r3, [pc, #716]	; (25da4 <__aeabi_dsub+0x344>)
   25ad6:	429e      	cmp	r6, r3
   25ad8:	d048      	beq.n	25b6c <__aeabi_dsub+0x10c>
   25ada:	2380      	movs	r3, #128	; 0x80
   25adc:	041b      	lsls	r3, r3, #16
   25ade:	4319      	orrs	r1, r3
   25ae0:	2d38      	cmp	r5, #56	; 0x38
   25ae2:	dd00      	ble.n	25ae6 <__aeabi_dsub+0x86>
   25ae4:	e119      	b.n	25d1a <__aeabi_dsub+0x2ba>
   25ae6:	2d1f      	cmp	r5, #31
   25ae8:	dd00      	ble.n	25aec <__aeabi_dsub+0x8c>
   25aea:	e14c      	b.n	25d86 <__aeabi_dsub+0x326>
   25aec:	2320      	movs	r3, #32
   25aee:	000f      	movs	r7, r1
   25af0:	1b5b      	subs	r3, r3, r5
   25af2:	0010      	movs	r0, r2
   25af4:	409a      	lsls	r2, r3
   25af6:	409f      	lsls	r7, r3
   25af8:	40e8      	lsrs	r0, r5
   25afa:	1e53      	subs	r3, r2, #1
   25afc:	419a      	sbcs	r2, r3
   25afe:	40e9      	lsrs	r1, r5
   25b00:	4307      	orrs	r7, r0
   25b02:	4317      	orrs	r7, r2
   25b04:	4653      	mov	r3, sl
   25b06:	1bdf      	subs	r7, r3, r7
   25b08:	1a61      	subs	r1, r4, r1
   25b0a:	45ba      	cmp	sl, r7
   25b0c:	41a4      	sbcs	r4, r4
   25b0e:	4264      	negs	r4, r4
   25b10:	1b0c      	subs	r4, r1, r4
   25b12:	0223      	lsls	r3, r4, #8
   25b14:	d400      	bmi.n	25b18 <__aeabi_dsub+0xb8>
   25b16:	e0c5      	b.n	25ca4 <__aeabi_dsub+0x244>
   25b18:	0264      	lsls	r4, r4, #9
   25b1a:	0a65      	lsrs	r5, r4, #9
   25b1c:	2d00      	cmp	r5, #0
   25b1e:	d100      	bne.n	25b22 <__aeabi_dsub+0xc2>
   25b20:	e0f6      	b.n	25d10 <__aeabi_dsub+0x2b0>
   25b22:	0028      	movs	r0, r5
   25b24:	f000 fb1e 	bl	26164 <__clzsi2>
   25b28:	0003      	movs	r3, r0
   25b2a:	3b08      	subs	r3, #8
   25b2c:	2b1f      	cmp	r3, #31
   25b2e:	dd00      	ble.n	25b32 <__aeabi_dsub+0xd2>
   25b30:	e0e9      	b.n	25d06 <__aeabi_dsub+0x2a6>
   25b32:	2220      	movs	r2, #32
   25b34:	003c      	movs	r4, r7
   25b36:	1ad2      	subs	r2, r2, r3
   25b38:	409d      	lsls	r5, r3
   25b3a:	40d4      	lsrs	r4, r2
   25b3c:	409f      	lsls	r7, r3
   25b3e:	4325      	orrs	r5, r4
   25b40:	429e      	cmp	r6, r3
   25b42:	dd00      	ble.n	25b46 <__aeabi_dsub+0xe6>
   25b44:	e0db      	b.n	25cfe <__aeabi_dsub+0x29e>
   25b46:	1b9e      	subs	r6, r3, r6
   25b48:	1c73      	adds	r3, r6, #1
   25b4a:	2b1f      	cmp	r3, #31
   25b4c:	dd00      	ble.n	25b50 <__aeabi_dsub+0xf0>
   25b4e:	e10a      	b.n	25d66 <__aeabi_dsub+0x306>
   25b50:	2220      	movs	r2, #32
   25b52:	0038      	movs	r0, r7
   25b54:	1ad2      	subs	r2, r2, r3
   25b56:	0029      	movs	r1, r5
   25b58:	4097      	lsls	r7, r2
   25b5a:	002c      	movs	r4, r5
   25b5c:	4091      	lsls	r1, r2
   25b5e:	40d8      	lsrs	r0, r3
   25b60:	1e7a      	subs	r2, r7, #1
   25b62:	4197      	sbcs	r7, r2
   25b64:	40dc      	lsrs	r4, r3
   25b66:	2600      	movs	r6, #0
   25b68:	4301      	orrs	r1, r0
   25b6a:	430f      	orrs	r7, r1
   25b6c:	077b      	lsls	r3, r7, #29
   25b6e:	d009      	beq.n	25b84 <__aeabi_dsub+0x124>
   25b70:	230f      	movs	r3, #15
   25b72:	403b      	ands	r3, r7
   25b74:	2b04      	cmp	r3, #4
   25b76:	d005      	beq.n	25b84 <__aeabi_dsub+0x124>
   25b78:	1d3b      	adds	r3, r7, #4
   25b7a:	42bb      	cmp	r3, r7
   25b7c:	41bf      	sbcs	r7, r7
   25b7e:	427f      	negs	r7, r7
   25b80:	19e4      	adds	r4, r4, r7
   25b82:	001f      	movs	r7, r3
   25b84:	0223      	lsls	r3, r4, #8
   25b86:	d525      	bpl.n	25bd4 <__aeabi_dsub+0x174>
   25b88:	4b86      	ldr	r3, [pc, #536]	; (25da4 <__aeabi_dsub+0x344>)
   25b8a:	3601      	adds	r6, #1
   25b8c:	429e      	cmp	r6, r3
   25b8e:	d100      	bne.n	25b92 <__aeabi_dsub+0x132>
   25b90:	e0af      	b.n	25cf2 <__aeabi_dsub+0x292>
   25b92:	4b85      	ldr	r3, [pc, #532]	; (25da8 <__aeabi_dsub+0x348>)
   25b94:	2501      	movs	r5, #1
   25b96:	401c      	ands	r4, r3
   25b98:	4643      	mov	r3, r8
   25b9a:	0762      	lsls	r2, r4, #29
   25b9c:	08ff      	lsrs	r7, r7, #3
   25b9e:	0264      	lsls	r4, r4, #9
   25ba0:	0576      	lsls	r6, r6, #21
   25ba2:	4317      	orrs	r7, r2
   25ba4:	0b24      	lsrs	r4, r4, #12
   25ba6:	0d76      	lsrs	r6, r6, #21
   25ba8:	401d      	ands	r5, r3
   25baa:	2100      	movs	r1, #0
   25bac:	0324      	lsls	r4, r4, #12
   25bae:	0b23      	lsrs	r3, r4, #12
   25bb0:	0d0c      	lsrs	r4, r1, #20
   25bb2:	4a7e      	ldr	r2, [pc, #504]	; (25dac <__aeabi_dsub+0x34c>)
   25bb4:	0524      	lsls	r4, r4, #20
   25bb6:	431c      	orrs	r4, r3
   25bb8:	4014      	ands	r4, r2
   25bba:	0533      	lsls	r3, r6, #20
   25bbc:	4323      	orrs	r3, r4
   25bbe:	005b      	lsls	r3, r3, #1
   25bc0:	07ed      	lsls	r5, r5, #31
   25bc2:	085b      	lsrs	r3, r3, #1
   25bc4:	432b      	orrs	r3, r5
   25bc6:	0038      	movs	r0, r7
   25bc8:	0019      	movs	r1, r3
   25bca:	bc1c      	pop	{r2, r3, r4}
   25bcc:	4690      	mov	r8, r2
   25bce:	4699      	mov	r9, r3
   25bd0:	46a2      	mov	sl, r4
   25bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25bd4:	2501      	movs	r5, #1
   25bd6:	4643      	mov	r3, r8
   25bd8:	0762      	lsls	r2, r4, #29
   25bda:	08ff      	lsrs	r7, r7, #3
   25bdc:	4317      	orrs	r7, r2
   25bde:	08e4      	lsrs	r4, r4, #3
   25be0:	401d      	ands	r5, r3
   25be2:	4b70      	ldr	r3, [pc, #448]	; (25da4 <__aeabi_dsub+0x344>)
   25be4:	429e      	cmp	r6, r3
   25be6:	d036      	beq.n	25c56 <__aeabi_dsub+0x1f6>
   25be8:	0324      	lsls	r4, r4, #12
   25bea:	0576      	lsls	r6, r6, #21
   25bec:	0b24      	lsrs	r4, r4, #12
   25bee:	0d76      	lsrs	r6, r6, #21
   25bf0:	e7db      	b.n	25baa <__aeabi_dsub+0x14a>
   25bf2:	4663      	mov	r3, ip
   25bf4:	1af3      	subs	r3, r6, r3
   25bf6:	2b00      	cmp	r3, #0
   25bf8:	dc00      	bgt.n	25bfc <__aeabi_dsub+0x19c>
   25bfa:	e094      	b.n	25d26 <__aeabi_dsub+0x2c6>
   25bfc:	4660      	mov	r0, ip
   25bfe:	2800      	cmp	r0, #0
   25c00:	d035      	beq.n	25c6e <__aeabi_dsub+0x20e>
   25c02:	4868      	ldr	r0, [pc, #416]	; (25da4 <__aeabi_dsub+0x344>)
   25c04:	4286      	cmp	r6, r0
   25c06:	d0b1      	beq.n	25b6c <__aeabi_dsub+0x10c>
   25c08:	2780      	movs	r7, #128	; 0x80
   25c0a:	043f      	lsls	r7, r7, #16
   25c0c:	4339      	orrs	r1, r7
   25c0e:	2b38      	cmp	r3, #56	; 0x38
   25c10:	dc00      	bgt.n	25c14 <__aeabi_dsub+0x1b4>
   25c12:	e0fd      	b.n	25e10 <__aeabi_dsub+0x3b0>
   25c14:	430a      	orrs	r2, r1
   25c16:	0017      	movs	r7, r2
   25c18:	2100      	movs	r1, #0
   25c1a:	1e7a      	subs	r2, r7, #1
   25c1c:	4197      	sbcs	r7, r2
   25c1e:	4457      	add	r7, sl
   25c20:	4557      	cmp	r7, sl
   25c22:	4180      	sbcs	r0, r0
   25c24:	1909      	adds	r1, r1, r4
   25c26:	4244      	negs	r4, r0
   25c28:	190c      	adds	r4, r1, r4
   25c2a:	0223      	lsls	r3, r4, #8
   25c2c:	d53a      	bpl.n	25ca4 <__aeabi_dsub+0x244>
   25c2e:	4b5d      	ldr	r3, [pc, #372]	; (25da4 <__aeabi_dsub+0x344>)
   25c30:	3601      	adds	r6, #1
   25c32:	429e      	cmp	r6, r3
   25c34:	d100      	bne.n	25c38 <__aeabi_dsub+0x1d8>
   25c36:	e14b      	b.n	25ed0 <__aeabi_dsub+0x470>
   25c38:	2201      	movs	r2, #1
   25c3a:	4b5b      	ldr	r3, [pc, #364]	; (25da8 <__aeabi_dsub+0x348>)
   25c3c:	401c      	ands	r4, r3
   25c3e:	087b      	lsrs	r3, r7, #1
   25c40:	4017      	ands	r7, r2
   25c42:	431f      	orrs	r7, r3
   25c44:	07e2      	lsls	r2, r4, #31
   25c46:	4317      	orrs	r7, r2
   25c48:	0864      	lsrs	r4, r4, #1
   25c4a:	e78f      	b.n	25b6c <__aeabi_dsub+0x10c>
   25c4c:	0008      	movs	r0, r1
   25c4e:	4310      	orrs	r0, r2
   25c50:	d000      	beq.n	25c54 <__aeabi_dsub+0x1f4>
   25c52:	e724      	b.n	25a9e <__aeabi_dsub+0x3e>
   25c54:	e721      	b.n	25a9a <__aeabi_dsub+0x3a>
   25c56:	0023      	movs	r3, r4
   25c58:	433b      	orrs	r3, r7
   25c5a:	d100      	bne.n	25c5e <__aeabi_dsub+0x1fe>
   25c5c:	e1b9      	b.n	25fd2 <__aeabi_dsub+0x572>
   25c5e:	2280      	movs	r2, #128	; 0x80
   25c60:	0312      	lsls	r2, r2, #12
   25c62:	4314      	orrs	r4, r2
   25c64:	0324      	lsls	r4, r4, #12
   25c66:	0b24      	lsrs	r4, r4, #12
   25c68:	e79f      	b.n	25baa <__aeabi_dsub+0x14a>
   25c6a:	002e      	movs	r6, r5
   25c6c:	e77e      	b.n	25b6c <__aeabi_dsub+0x10c>
   25c6e:	0008      	movs	r0, r1
   25c70:	4310      	orrs	r0, r2
   25c72:	d100      	bne.n	25c76 <__aeabi_dsub+0x216>
   25c74:	e0ca      	b.n	25e0c <__aeabi_dsub+0x3ac>
   25c76:	1e58      	subs	r0, r3, #1
   25c78:	4684      	mov	ip, r0
   25c7a:	2800      	cmp	r0, #0
   25c7c:	d000      	beq.n	25c80 <__aeabi_dsub+0x220>
   25c7e:	e0e7      	b.n	25e50 <__aeabi_dsub+0x3f0>
   25c80:	4452      	add	r2, sl
   25c82:	4552      	cmp	r2, sl
   25c84:	4180      	sbcs	r0, r0
   25c86:	1864      	adds	r4, r4, r1
   25c88:	4240      	negs	r0, r0
   25c8a:	1824      	adds	r4, r4, r0
   25c8c:	0017      	movs	r7, r2
   25c8e:	2601      	movs	r6, #1
   25c90:	0223      	lsls	r3, r4, #8
   25c92:	d507      	bpl.n	25ca4 <__aeabi_dsub+0x244>
   25c94:	2602      	movs	r6, #2
   25c96:	e7cf      	b.n	25c38 <__aeabi_dsub+0x1d8>
   25c98:	4664      	mov	r4, ip
   25c9a:	432c      	orrs	r4, r5
   25c9c:	d100      	bne.n	25ca0 <__aeabi_dsub+0x240>
   25c9e:	e1b3      	b.n	26008 <__aeabi_dsub+0x5a8>
   25ca0:	002c      	movs	r4, r5
   25ca2:	4667      	mov	r7, ip
   25ca4:	077b      	lsls	r3, r7, #29
   25ca6:	d000      	beq.n	25caa <__aeabi_dsub+0x24a>
   25ca8:	e762      	b.n	25b70 <__aeabi_dsub+0x110>
   25caa:	0763      	lsls	r3, r4, #29
   25cac:	08ff      	lsrs	r7, r7, #3
   25cae:	431f      	orrs	r7, r3
   25cb0:	2501      	movs	r5, #1
   25cb2:	4643      	mov	r3, r8
   25cb4:	08e4      	lsrs	r4, r4, #3
   25cb6:	401d      	ands	r5, r3
   25cb8:	e793      	b.n	25be2 <__aeabi_dsub+0x182>
   25cba:	2d00      	cmp	r5, #0
   25cbc:	d178      	bne.n	25db0 <__aeabi_dsub+0x350>
   25cbe:	1c75      	adds	r5, r6, #1
   25cc0:	056d      	lsls	r5, r5, #21
   25cc2:	0d6d      	lsrs	r5, r5, #21
   25cc4:	2d01      	cmp	r5, #1
   25cc6:	dc00      	bgt.n	25cca <__aeabi_dsub+0x26a>
   25cc8:	e0f2      	b.n	25eb0 <__aeabi_dsub+0x450>
   25cca:	4650      	mov	r0, sl
   25ccc:	1a80      	subs	r0, r0, r2
   25cce:	4582      	cmp	sl, r0
   25cd0:	41bf      	sbcs	r7, r7
   25cd2:	1a65      	subs	r5, r4, r1
   25cd4:	427f      	negs	r7, r7
   25cd6:	1bed      	subs	r5, r5, r7
   25cd8:	4684      	mov	ip, r0
   25cda:	0228      	lsls	r0, r5, #8
   25cdc:	d400      	bmi.n	25ce0 <__aeabi_dsub+0x280>
   25cde:	e08c      	b.n	25dfa <__aeabi_dsub+0x39a>
   25ce0:	4650      	mov	r0, sl
   25ce2:	1a17      	subs	r7, r2, r0
   25ce4:	42ba      	cmp	r2, r7
   25ce6:	4192      	sbcs	r2, r2
   25ce8:	1b0c      	subs	r4, r1, r4
   25cea:	4255      	negs	r5, r2
   25cec:	1b65      	subs	r5, r4, r5
   25cee:	4698      	mov	r8, r3
   25cf0:	e714      	b.n	25b1c <__aeabi_dsub+0xbc>
   25cf2:	2501      	movs	r5, #1
   25cf4:	4643      	mov	r3, r8
   25cf6:	2400      	movs	r4, #0
   25cf8:	401d      	ands	r5, r3
   25cfa:	2700      	movs	r7, #0
   25cfc:	e755      	b.n	25baa <__aeabi_dsub+0x14a>
   25cfe:	4c2a      	ldr	r4, [pc, #168]	; (25da8 <__aeabi_dsub+0x348>)
   25d00:	1af6      	subs	r6, r6, r3
   25d02:	402c      	ands	r4, r5
   25d04:	e732      	b.n	25b6c <__aeabi_dsub+0x10c>
   25d06:	003d      	movs	r5, r7
   25d08:	3828      	subs	r0, #40	; 0x28
   25d0a:	4085      	lsls	r5, r0
   25d0c:	2700      	movs	r7, #0
   25d0e:	e717      	b.n	25b40 <__aeabi_dsub+0xe0>
   25d10:	0038      	movs	r0, r7
   25d12:	f000 fa27 	bl	26164 <__clzsi2>
   25d16:	3020      	adds	r0, #32
   25d18:	e706      	b.n	25b28 <__aeabi_dsub+0xc8>
   25d1a:	430a      	orrs	r2, r1
   25d1c:	0017      	movs	r7, r2
   25d1e:	2100      	movs	r1, #0
   25d20:	1e7a      	subs	r2, r7, #1
   25d22:	4197      	sbcs	r7, r2
   25d24:	e6ee      	b.n	25b04 <__aeabi_dsub+0xa4>
   25d26:	2b00      	cmp	r3, #0
   25d28:	d000      	beq.n	25d2c <__aeabi_dsub+0x2cc>
   25d2a:	e0e5      	b.n	25ef8 <__aeabi_dsub+0x498>
   25d2c:	1c73      	adds	r3, r6, #1
   25d2e:	469c      	mov	ip, r3
   25d30:	055b      	lsls	r3, r3, #21
   25d32:	0d5b      	lsrs	r3, r3, #21
   25d34:	2b01      	cmp	r3, #1
   25d36:	dc00      	bgt.n	25d3a <__aeabi_dsub+0x2da>
   25d38:	e09f      	b.n	25e7a <__aeabi_dsub+0x41a>
   25d3a:	4b1a      	ldr	r3, [pc, #104]	; (25da4 <__aeabi_dsub+0x344>)
   25d3c:	459c      	cmp	ip, r3
   25d3e:	d100      	bne.n	25d42 <__aeabi_dsub+0x2e2>
   25d40:	e0c5      	b.n	25ece <__aeabi_dsub+0x46e>
   25d42:	4452      	add	r2, sl
   25d44:	4552      	cmp	r2, sl
   25d46:	4180      	sbcs	r0, r0
   25d48:	1864      	adds	r4, r4, r1
   25d4a:	4240      	negs	r0, r0
   25d4c:	1824      	adds	r4, r4, r0
   25d4e:	07e7      	lsls	r7, r4, #31
   25d50:	0852      	lsrs	r2, r2, #1
   25d52:	4317      	orrs	r7, r2
   25d54:	0864      	lsrs	r4, r4, #1
   25d56:	4666      	mov	r6, ip
   25d58:	e708      	b.n	25b6c <__aeabi_dsub+0x10c>
   25d5a:	4812      	ldr	r0, [pc, #72]	; (25da4 <__aeabi_dsub+0x344>)
   25d5c:	4285      	cmp	r5, r0
   25d5e:	d100      	bne.n	25d62 <__aeabi_dsub+0x302>
   25d60:	e085      	b.n	25e6e <__aeabi_dsub+0x40e>
   25d62:	001d      	movs	r5, r3
   25d64:	e6bc      	b.n	25ae0 <__aeabi_dsub+0x80>
   25d66:	0029      	movs	r1, r5
   25d68:	3e1f      	subs	r6, #31
   25d6a:	40f1      	lsrs	r1, r6
   25d6c:	2b20      	cmp	r3, #32
   25d6e:	d100      	bne.n	25d72 <__aeabi_dsub+0x312>
   25d70:	e07f      	b.n	25e72 <__aeabi_dsub+0x412>
   25d72:	2240      	movs	r2, #64	; 0x40
   25d74:	1ad3      	subs	r3, r2, r3
   25d76:	409d      	lsls	r5, r3
   25d78:	432f      	orrs	r7, r5
   25d7a:	1e7d      	subs	r5, r7, #1
   25d7c:	41af      	sbcs	r7, r5
   25d7e:	2400      	movs	r4, #0
   25d80:	430f      	orrs	r7, r1
   25d82:	2600      	movs	r6, #0
   25d84:	e78e      	b.n	25ca4 <__aeabi_dsub+0x244>
   25d86:	002b      	movs	r3, r5
   25d88:	000f      	movs	r7, r1
   25d8a:	3b20      	subs	r3, #32
   25d8c:	40df      	lsrs	r7, r3
   25d8e:	2d20      	cmp	r5, #32
   25d90:	d071      	beq.n	25e76 <__aeabi_dsub+0x416>
   25d92:	2340      	movs	r3, #64	; 0x40
   25d94:	1b5d      	subs	r5, r3, r5
   25d96:	40a9      	lsls	r1, r5
   25d98:	430a      	orrs	r2, r1
   25d9a:	1e51      	subs	r1, r2, #1
   25d9c:	418a      	sbcs	r2, r1
   25d9e:	2100      	movs	r1, #0
   25da0:	4317      	orrs	r7, r2
   25da2:	e6af      	b.n	25b04 <__aeabi_dsub+0xa4>
   25da4:	000007ff 	.word	0x000007ff
   25da8:	ff7fffff 	.word	0xff7fffff
   25dac:	800fffff 	.word	0x800fffff
   25db0:	2e00      	cmp	r6, #0
   25db2:	d03e      	beq.n	25e32 <__aeabi_dsub+0x3d2>
   25db4:	4eb3      	ldr	r6, [pc, #716]	; (26084 <__aeabi_dsub+0x624>)
   25db6:	45b4      	cmp	ip, r6
   25db8:	d045      	beq.n	25e46 <__aeabi_dsub+0x3e6>
   25dba:	2680      	movs	r6, #128	; 0x80
   25dbc:	0436      	lsls	r6, r6, #16
   25dbe:	426d      	negs	r5, r5
   25dc0:	4334      	orrs	r4, r6
   25dc2:	2d38      	cmp	r5, #56	; 0x38
   25dc4:	dd00      	ble.n	25dc8 <__aeabi_dsub+0x368>
   25dc6:	e0a8      	b.n	25f1a <__aeabi_dsub+0x4ba>
   25dc8:	2d1f      	cmp	r5, #31
   25dca:	dd00      	ble.n	25dce <__aeabi_dsub+0x36e>
   25dcc:	e11f      	b.n	2600e <__aeabi_dsub+0x5ae>
   25dce:	2620      	movs	r6, #32
   25dd0:	0027      	movs	r7, r4
   25dd2:	4650      	mov	r0, sl
   25dd4:	1b76      	subs	r6, r6, r5
   25dd6:	40b7      	lsls	r7, r6
   25dd8:	40e8      	lsrs	r0, r5
   25dda:	4307      	orrs	r7, r0
   25ddc:	4650      	mov	r0, sl
   25dde:	40b0      	lsls	r0, r6
   25de0:	1e46      	subs	r6, r0, #1
   25de2:	41b0      	sbcs	r0, r6
   25de4:	40ec      	lsrs	r4, r5
   25de6:	4338      	orrs	r0, r7
   25de8:	1a17      	subs	r7, r2, r0
   25dea:	42ba      	cmp	r2, r7
   25dec:	4192      	sbcs	r2, r2
   25dee:	1b0c      	subs	r4, r1, r4
   25df0:	4252      	negs	r2, r2
   25df2:	1aa4      	subs	r4, r4, r2
   25df4:	4666      	mov	r6, ip
   25df6:	4698      	mov	r8, r3
   25df8:	e68b      	b.n	25b12 <__aeabi_dsub+0xb2>
   25dfa:	4664      	mov	r4, ip
   25dfc:	4667      	mov	r7, ip
   25dfe:	432c      	orrs	r4, r5
   25e00:	d000      	beq.n	25e04 <__aeabi_dsub+0x3a4>
   25e02:	e68b      	b.n	25b1c <__aeabi_dsub+0xbc>
   25e04:	2500      	movs	r5, #0
   25e06:	2600      	movs	r6, #0
   25e08:	2700      	movs	r7, #0
   25e0a:	e6ea      	b.n	25be2 <__aeabi_dsub+0x182>
   25e0c:	001e      	movs	r6, r3
   25e0e:	e6ad      	b.n	25b6c <__aeabi_dsub+0x10c>
   25e10:	2b1f      	cmp	r3, #31
   25e12:	dc60      	bgt.n	25ed6 <__aeabi_dsub+0x476>
   25e14:	2720      	movs	r7, #32
   25e16:	1af8      	subs	r0, r7, r3
   25e18:	000f      	movs	r7, r1
   25e1a:	4684      	mov	ip, r0
   25e1c:	4087      	lsls	r7, r0
   25e1e:	0010      	movs	r0, r2
   25e20:	40d8      	lsrs	r0, r3
   25e22:	4307      	orrs	r7, r0
   25e24:	4660      	mov	r0, ip
   25e26:	4082      	lsls	r2, r0
   25e28:	1e50      	subs	r0, r2, #1
   25e2a:	4182      	sbcs	r2, r0
   25e2c:	40d9      	lsrs	r1, r3
   25e2e:	4317      	orrs	r7, r2
   25e30:	e6f5      	b.n	25c1e <__aeabi_dsub+0x1be>
   25e32:	0026      	movs	r6, r4
   25e34:	4650      	mov	r0, sl
   25e36:	4306      	orrs	r6, r0
   25e38:	d005      	beq.n	25e46 <__aeabi_dsub+0x3e6>
   25e3a:	43ed      	mvns	r5, r5
   25e3c:	2d00      	cmp	r5, #0
   25e3e:	d0d3      	beq.n	25de8 <__aeabi_dsub+0x388>
   25e40:	4e90      	ldr	r6, [pc, #576]	; (26084 <__aeabi_dsub+0x624>)
   25e42:	45b4      	cmp	ip, r6
   25e44:	d1bd      	bne.n	25dc2 <__aeabi_dsub+0x362>
   25e46:	000c      	movs	r4, r1
   25e48:	0017      	movs	r7, r2
   25e4a:	4666      	mov	r6, ip
   25e4c:	4698      	mov	r8, r3
   25e4e:	e68d      	b.n	25b6c <__aeabi_dsub+0x10c>
   25e50:	488c      	ldr	r0, [pc, #560]	; (26084 <__aeabi_dsub+0x624>)
   25e52:	4283      	cmp	r3, r0
   25e54:	d00b      	beq.n	25e6e <__aeabi_dsub+0x40e>
   25e56:	4663      	mov	r3, ip
   25e58:	e6d9      	b.n	25c0e <__aeabi_dsub+0x1ae>
   25e5a:	2d00      	cmp	r5, #0
   25e5c:	d000      	beq.n	25e60 <__aeabi_dsub+0x400>
   25e5e:	e096      	b.n	25f8e <__aeabi_dsub+0x52e>
   25e60:	0008      	movs	r0, r1
   25e62:	4310      	orrs	r0, r2
   25e64:	d100      	bne.n	25e68 <__aeabi_dsub+0x408>
   25e66:	e0e2      	b.n	2602e <__aeabi_dsub+0x5ce>
   25e68:	000c      	movs	r4, r1
   25e6a:	0017      	movs	r7, r2
   25e6c:	4698      	mov	r8, r3
   25e6e:	4e85      	ldr	r6, [pc, #532]	; (26084 <__aeabi_dsub+0x624>)
   25e70:	e67c      	b.n	25b6c <__aeabi_dsub+0x10c>
   25e72:	2500      	movs	r5, #0
   25e74:	e780      	b.n	25d78 <__aeabi_dsub+0x318>
   25e76:	2100      	movs	r1, #0
   25e78:	e78e      	b.n	25d98 <__aeabi_dsub+0x338>
   25e7a:	0023      	movs	r3, r4
   25e7c:	4650      	mov	r0, sl
   25e7e:	4303      	orrs	r3, r0
   25e80:	2e00      	cmp	r6, #0
   25e82:	d000      	beq.n	25e86 <__aeabi_dsub+0x426>
   25e84:	e0a8      	b.n	25fd8 <__aeabi_dsub+0x578>
   25e86:	2b00      	cmp	r3, #0
   25e88:	d100      	bne.n	25e8c <__aeabi_dsub+0x42c>
   25e8a:	e0de      	b.n	2604a <__aeabi_dsub+0x5ea>
   25e8c:	000b      	movs	r3, r1
   25e8e:	4313      	orrs	r3, r2
   25e90:	d100      	bne.n	25e94 <__aeabi_dsub+0x434>
   25e92:	e66b      	b.n	25b6c <__aeabi_dsub+0x10c>
   25e94:	4452      	add	r2, sl
   25e96:	4552      	cmp	r2, sl
   25e98:	4180      	sbcs	r0, r0
   25e9a:	1864      	adds	r4, r4, r1
   25e9c:	4240      	negs	r0, r0
   25e9e:	1824      	adds	r4, r4, r0
   25ea0:	0017      	movs	r7, r2
   25ea2:	0223      	lsls	r3, r4, #8
   25ea4:	d400      	bmi.n	25ea8 <__aeabi_dsub+0x448>
   25ea6:	e6fd      	b.n	25ca4 <__aeabi_dsub+0x244>
   25ea8:	4b77      	ldr	r3, [pc, #476]	; (26088 <__aeabi_dsub+0x628>)
   25eaa:	4666      	mov	r6, ip
   25eac:	401c      	ands	r4, r3
   25eae:	e65d      	b.n	25b6c <__aeabi_dsub+0x10c>
   25eb0:	0025      	movs	r5, r4
   25eb2:	4650      	mov	r0, sl
   25eb4:	4305      	orrs	r5, r0
   25eb6:	2e00      	cmp	r6, #0
   25eb8:	d1cf      	bne.n	25e5a <__aeabi_dsub+0x3fa>
   25eba:	2d00      	cmp	r5, #0
   25ebc:	d14f      	bne.n	25f5e <__aeabi_dsub+0x4fe>
   25ebe:	000c      	movs	r4, r1
   25ec0:	4314      	orrs	r4, r2
   25ec2:	d100      	bne.n	25ec6 <__aeabi_dsub+0x466>
   25ec4:	e0a0      	b.n	26008 <__aeabi_dsub+0x5a8>
   25ec6:	000c      	movs	r4, r1
   25ec8:	0017      	movs	r7, r2
   25eca:	4698      	mov	r8, r3
   25ecc:	e64e      	b.n	25b6c <__aeabi_dsub+0x10c>
   25ece:	4666      	mov	r6, ip
   25ed0:	2400      	movs	r4, #0
   25ed2:	2700      	movs	r7, #0
   25ed4:	e685      	b.n	25be2 <__aeabi_dsub+0x182>
   25ed6:	001f      	movs	r7, r3
   25ed8:	0008      	movs	r0, r1
   25eda:	3f20      	subs	r7, #32
   25edc:	40f8      	lsrs	r0, r7
   25ede:	0007      	movs	r7, r0
   25ee0:	2b20      	cmp	r3, #32
   25ee2:	d100      	bne.n	25ee6 <__aeabi_dsub+0x486>
   25ee4:	e08e      	b.n	26004 <__aeabi_dsub+0x5a4>
   25ee6:	2040      	movs	r0, #64	; 0x40
   25ee8:	1ac3      	subs	r3, r0, r3
   25eea:	4099      	lsls	r1, r3
   25eec:	430a      	orrs	r2, r1
   25eee:	1e51      	subs	r1, r2, #1
   25ef0:	418a      	sbcs	r2, r1
   25ef2:	2100      	movs	r1, #0
   25ef4:	4317      	orrs	r7, r2
   25ef6:	e692      	b.n	25c1e <__aeabi_dsub+0x1be>
   25ef8:	2e00      	cmp	r6, #0
   25efa:	d114      	bne.n	25f26 <__aeabi_dsub+0x4c6>
   25efc:	0026      	movs	r6, r4
   25efe:	4650      	mov	r0, sl
   25f00:	4306      	orrs	r6, r0
   25f02:	d062      	beq.n	25fca <__aeabi_dsub+0x56a>
   25f04:	43db      	mvns	r3, r3
   25f06:	2b00      	cmp	r3, #0
   25f08:	d15c      	bne.n	25fc4 <__aeabi_dsub+0x564>
   25f0a:	1887      	adds	r7, r0, r2
   25f0c:	4297      	cmp	r7, r2
   25f0e:	4192      	sbcs	r2, r2
   25f10:	1864      	adds	r4, r4, r1
   25f12:	4252      	negs	r2, r2
   25f14:	18a4      	adds	r4, r4, r2
   25f16:	4666      	mov	r6, ip
   25f18:	e687      	b.n	25c2a <__aeabi_dsub+0x1ca>
   25f1a:	4650      	mov	r0, sl
   25f1c:	4320      	orrs	r0, r4
   25f1e:	1e44      	subs	r4, r0, #1
   25f20:	41a0      	sbcs	r0, r4
   25f22:	2400      	movs	r4, #0
   25f24:	e760      	b.n	25de8 <__aeabi_dsub+0x388>
   25f26:	4e57      	ldr	r6, [pc, #348]	; (26084 <__aeabi_dsub+0x624>)
   25f28:	45b4      	cmp	ip, r6
   25f2a:	d04e      	beq.n	25fca <__aeabi_dsub+0x56a>
   25f2c:	2680      	movs	r6, #128	; 0x80
   25f2e:	0436      	lsls	r6, r6, #16
   25f30:	425b      	negs	r3, r3
   25f32:	4334      	orrs	r4, r6
   25f34:	2b38      	cmp	r3, #56	; 0x38
   25f36:	dd00      	ble.n	25f3a <__aeabi_dsub+0x4da>
   25f38:	e07f      	b.n	2603a <__aeabi_dsub+0x5da>
   25f3a:	2b1f      	cmp	r3, #31
   25f3c:	dd00      	ble.n	25f40 <__aeabi_dsub+0x4e0>
   25f3e:	e08b      	b.n	26058 <__aeabi_dsub+0x5f8>
   25f40:	2620      	movs	r6, #32
   25f42:	0027      	movs	r7, r4
   25f44:	4650      	mov	r0, sl
   25f46:	1af6      	subs	r6, r6, r3
   25f48:	40b7      	lsls	r7, r6
   25f4a:	40d8      	lsrs	r0, r3
   25f4c:	4307      	orrs	r7, r0
   25f4e:	4650      	mov	r0, sl
   25f50:	40b0      	lsls	r0, r6
   25f52:	1e46      	subs	r6, r0, #1
   25f54:	41b0      	sbcs	r0, r6
   25f56:	4307      	orrs	r7, r0
   25f58:	40dc      	lsrs	r4, r3
   25f5a:	18bf      	adds	r7, r7, r2
   25f5c:	e7d6      	b.n	25f0c <__aeabi_dsub+0x4ac>
   25f5e:	000d      	movs	r5, r1
   25f60:	4315      	orrs	r5, r2
   25f62:	d100      	bne.n	25f66 <__aeabi_dsub+0x506>
   25f64:	e602      	b.n	25b6c <__aeabi_dsub+0x10c>
   25f66:	4650      	mov	r0, sl
   25f68:	1a80      	subs	r0, r0, r2
   25f6a:	4582      	cmp	sl, r0
   25f6c:	41bf      	sbcs	r7, r7
   25f6e:	1a65      	subs	r5, r4, r1
   25f70:	427f      	negs	r7, r7
   25f72:	1bed      	subs	r5, r5, r7
   25f74:	4684      	mov	ip, r0
   25f76:	0228      	lsls	r0, r5, #8
   25f78:	d400      	bmi.n	25f7c <__aeabi_dsub+0x51c>
   25f7a:	e68d      	b.n	25c98 <__aeabi_dsub+0x238>
   25f7c:	4650      	mov	r0, sl
   25f7e:	1a17      	subs	r7, r2, r0
   25f80:	42ba      	cmp	r2, r7
   25f82:	4192      	sbcs	r2, r2
   25f84:	1b0c      	subs	r4, r1, r4
   25f86:	4252      	negs	r2, r2
   25f88:	1aa4      	subs	r4, r4, r2
   25f8a:	4698      	mov	r8, r3
   25f8c:	e5ee      	b.n	25b6c <__aeabi_dsub+0x10c>
   25f8e:	000d      	movs	r5, r1
   25f90:	4315      	orrs	r5, r2
   25f92:	d100      	bne.n	25f96 <__aeabi_dsub+0x536>
   25f94:	e76b      	b.n	25e6e <__aeabi_dsub+0x40e>
   25f96:	4650      	mov	r0, sl
   25f98:	0767      	lsls	r7, r4, #29
   25f9a:	08c0      	lsrs	r0, r0, #3
   25f9c:	4307      	orrs	r7, r0
   25f9e:	2080      	movs	r0, #128	; 0x80
   25fa0:	08e4      	lsrs	r4, r4, #3
   25fa2:	0300      	lsls	r0, r0, #12
   25fa4:	4204      	tst	r4, r0
   25fa6:	d007      	beq.n	25fb8 <__aeabi_dsub+0x558>
   25fa8:	08cd      	lsrs	r5, r1, #3
   25faa:	4205      	tst	r5, r0
   25fac:	d104      	bne.n	25fb8 <__aeabi_dsub+0x558>
   25fae:	002c      	movs	r4, r5
   25fb0:	4698      	mov	r8, r3
   25fb2:	08d7      	lsrs	r7, r2, #3
   25fb4:	0749      	lsls	r1, r1, #29
   25fb6:	430f      	orrs	r7, r1
   25fb8:	0f7b      	lsrs	r3, r7, #29
   25fba:	00e4      	lsls	r4, r4, #3
   25fbc:	431c      	orrs	r4, r3
   25fbe:	00ff      	lsls	r7, r7, #3
   25fc0:	4e30      	ldr	r6, [pc, #192]	; (26084 <__aeabi_dsub+0x624>)
   25fc2:	e5d3      	b.n	25b6c <__aeabi_dsub+0x10c>
   25fc4:	4e2f      	ldr	r6, [pc, #188]	; (26084 <__aeabi_dsub+0x624>)
   25fc6:	45b4      	cmp	ip, r6
   25fc8:	d1b4      	bne.n	25f34 <__aeabi_dsub+0x4d4>
   25fca:	000c      	movs	r4, r1
   25fcc:	0017      	movs	r7, r2
   25fce:	4666      	mov	r6, ip
   25fd0:	e5cc      	b.n	25b6c <__aeabi_dsub+0x10c>
   25fd2:	2700      	movs	r7, #0
   25fd4:	2400      	movs	r4, #0
   25fd6:	e5e8      	b.n	25baa <__aeabi_dsub+0x14a>
   25fd8:	2b00      	cmp	r3, #0
   25fda:	d039      	beq.n	26050 <__aeabi_dsub+0x5f0>
   25fdc:	000b      	movs	r3, r1
   25fde:	4313      	orrs	r3, r2
   25fe0:	d100      	bne.n	25fe4 <__aeabi_dsub+0x584>
   25fe2:	e744      	b.n	25e6e <__aeabi_dsub+0x40e>
   25fe4:	08c0      	lsrs	r0, r0, #3
   25fe6:	0767      	lsls	r7, r4, #29
   25fe8:	4307      	orrs	r7, r0
   25fea:	2080      	movs	r0, #128	; 0x80
   25fec:	08e4      	lsrs	r4, r4, #3
   25fee:	0300      	lsls	r0, r0, #12
   25ff0:	4204      	tst	r4, r0
   25ff2:	d0e1      	beq.n	25fb8 <__aeabi_dsub+0x558>
   25ff4:	08cb      	lsrs	r3, r1, #3
   25ff6:	4203      	tst	r3, r0
   25ff8:	d1de      	bne.n	25fb8 <__aeabi_dsub+0x558>
   25ffa:	08d7      	lsrs	r7, r2, #3
   25ffc:	0749      	lsls	r1, r1, #29
   25ffe:	430f      	orrs	r7, r1
   26000:	001c      	movs	r4, r3
   26002:	e7d9      	b.n	25fb8 <__aeabi_dsub+0x558>
   26004:	2100      	movs	r1, #0
   26006:	e771      	b.n	25eec <__aeabi_dsub+0x48c>
   26008:	2500      	movs	r5, #0
   2600a:	2700      	movs	r7, #0
   2600c:	e5e9      	b.n	25be2 <__aeabi_dsub+0x182>
   2600e:	002e      	movs	r6, r5
   26010:	0027      	movs	r7, r4
   26012:	3e20      	subs	r6, #32
   26014:	40f7      	lsrs	r7, r6
   26016:	2d20      	cmp	r5, #32
   26018:	d02f      	beq.n	2607a <__aeabi_dsub+0x61a>
   2601a:	2640      	movs	r6, #64	; 0x40
   2601c:	1b75      	subs	r5, r6, r5
   2601e:	40ac      	lsls	r4, r5
   26020:	4650      	mov	r0, sl
   26022:	4320      	orrs	r0, r4
   26024:	1e44      	subs	r4, r0, #1
   26026:	41a0      	sbcs	r0, r4
   26028:	2400      	movs	r4, #0
   2602a:	4338      	orrs	r0, r7
   2602c:	e6dc      	b.n	25de8 <__aeabi_dsub+0x388>
   2602e:	2480      	movs	r4, #128	; 0x80
   26030:	2500      	movs	r5, #0
   26032:	0324      	lsls	r4, r4, #12
   26034:	4e13      	ldr	r6, [pc, #76]	; (26084 <__aeabi_dsub+0x624>)
   26036:	2700      	movs	r7, #0
   26038:	e5d3      	b.n	25be2 <__aeabi_dsub+0x182>
   2603a:	4650      	mov	r0, sl
   2603c:	4320      	orrs	r0, r4
   2603e:	0007      	movs	r7, r0
   26040:	1e78      	subs	r0, r7, #1
   26042:	4187      	sbcs	r7, r0
   26044:	2400      	movs	r4, #0
   26046:	18bf      	adds	r7, r7, r2
   26048:	e760      	b.n	25f0c <__aeabi_dsub+0x4ac>
   2604a:	000c      	movs	r4, r1
   2604c:	0017      	movs	r7, r2
   2604e:	e58d      	b.n	25b6c <__aeabi_dsub+0x10c>
   26050:	000c      	movs	r4, r1
   26052:	0017      	movs	r7, r2
   26054:	4e0b      	ldr	r6, [pc, #44]	; (26084 <__aeabi_dsub+0x624>)
   26056:	e589      	b.n	25b6c <__aeabi_dsub+0x10c>
   26058:	001e      	movs	r6, r3
   2605a:	0027      	movs	r7, r4
   2605c:	3e20      	subs	r6, #32
   2605e:	40f7      	lsrs	r7, r6
   26060:	2b20      	cmp	r3, #32
   26062:	d00c      	beq.n	2607e <__aeabi_dsub+0x61e>
   26064:	2640      	movs	r6, #64	; 0x40
   26066:	1af3      	subs	r3, r6, r3
   26068:	409c      	lsls	r4, r3
   2606a:	4650      	mov	r0, sl
   2606c:	4320      	orrs	r0, r4
   2606e:	1e44      	subs	r4, r0, #1
   26070:	41a0      	sbcs	r0, r4
   26072:	4307      	orrs	r7, r0
   26074:	2400      	movs	r4, #0
   26076:	18bf      	adds	r7, r7, r2
   26078:	e748      	b.n	25f0c <__aeabi_dsub+0x4ac>
   2607a:	2400      	movs	r4, #0
   2607c:	e7d0      	b.n	26020 <__aeabi_dsub+0x5c0>
   2607e:	2400      	movs	r4, #0
   26080:	e7f3      	b.n	2606a <__aeabi_dsub+0x60a>
   26082:	46c0      	nop			; (mov r8, r8)
   26084:	000007ff 	.word	0x000007ff
   26088:	ff7fffff 	.word	0xff7fffff

0002608c <__aeabi_d2iz>:
   2608c:	b530      	push	{r4, r5, lr}
   2608e:	4d13      	ldr	r5, [pc, #76]	; (260dc <__aeabi_d2iz+0x50>)
   26090:	030a      	lsls	r2, r1, #12
   26092:	004b      	lsls	r3, r1, #1
   26094:	0b12      	lsrs	r2, r2, #12
   26096:	0d5b      	lsrs	r3, r3, #21
   26098:	0fc9      	lsrs	r1, r1, #31
   2609a:	2400      	movs	r4, #0
   2609c:	42ab      	cmp	r3, r5
   2609e:	dd10      	ble.n	260c2 <__aeabi_d2iz+0x36>
   260a0:	4c0f      	ldr	r4, [pc, #60]	; (260e0 <__aeabi_d2iz+0x54>)
   260a2:	42a3      	cmp	r3, r4
   260a4:	dc0f      	bgt.n	260c6 <__aeabi_d2iz+0x3a>
   260a6:	2480      	movs	r4, #128	; 0x80
   260a8:	4d0e      	ldr	r5, [pc, #56]	; (260e4 <__aeabi_d2iz+0x58>)
   260aa:	0364      	lsls	r4, r4, #13
   260ac:	4322      	orrs	r2, r4
   260ae:	1aed      	subs	r5, r5, r3
   260b0:	2d1f      	cmp	r5, #31
   260b2:	dd0b      	ble.n	260cc <__aeabi_d2iz+0x40>
   260b4:	480c      	ldr	r0, [pc, #48]	; (260e8 <__aeabi_d2iz+0x5c>)
   260b6:	1ac3      	subs	r3, r0, r3
   260b8:	40da      	lsrs	r2, r3
   260ba:	4254      	negs	r4, r2
   260bc:	2900      	cmp	r1, #0
   260be:	d100      	bne.n	260c2 <__aeabi_d2iz+0x36>
   260c0:	0014      	movs	r4, r2
   260c2:	0020      	movs	r0, r4
   260c4:	bd30      	pop	{r4, r5, pc}
   260c6:	4b09      	ldr	r3, [pc, #36]	; (260ec <__aeabi_d2iz+0x60>)
   260c8:	18cc      	adds	r4, r1, r3
   260ca:	e7fa      	b.n	260c2 <__aeabi_d2iz+0x36>
   260cc:	4c08      	ldr	r4, [pc, #32]	; (260f0 <__aeabi_d2iz+0x64>)
   260ce:	40e8      	lsrs	r0, r5
   260d0:	46a4      	mov	ip, r4
   260d2:	4463      	add	r3, ip
   260d4:	409a      	lsls	r2, r3
   260d6:	4302      	orrs	r2, r0
   260d8:	e7ef      	b.n	260ba <__aeabi_d2iz+0x2e>
   260da:	46c0      	nop			; (mov r8, r8)
   260dc:	000003fe 	.word	0x000003fe
   260e0:	0000041d 	.word	0x0000041d
   260e4:	00000433 	.word	0x00000433
   260e8:	00000413 	.word	0x00000413
   260ec:	7fffffff 	.word	0x7fffffff
   260f0:	fffffbed 	.word	0xfffffbed

000260f4 <__aeabi_ui2d>:
   260f4:	b510      	push	{r4, lr}
   260f6:	1e04      	subs	r4, r0, #0
   260f8:	d028      	beq.n	2614c <__aeabi_ui2d+0x58>
   260fa:	f000 f833 	bl	26164 <__clzsi2>
   260fe:	4b15      	ldr	r3, [pc, #84]	; (26154 <__aeabi_ui2d+0x60>)
   26100:	4a15      	ldr	r2, [pc, #84]	; (26158 <__aeabi_ui2d+0x64>)
   26102:	1a1b      	subs	r3, r3, r0
   26104:	1ad2      	subs	r2, r2, r3
   26106:	2a1f      	cmp	r2, #31
   26108:	dd15      	ble.n	26136 <__aeabi_ui2d+0x42>
   2610a:	4a14      	ldr	r2, [pc, #80]	; (2615c <__aeabi_ui2d+0x68>)
   2610c:	1ad2      	subs	r2, r2, r3
   2610e:	4094      	lsls	r4, r2
   26110:	2200      	movs	r2, #0
   26112:	0324      	lsls	r4, r4, #12
   26114:	055b      	lsls	r3, r3, #21
   26116:	0b24      	lsrs	r4, r4, #12
   26118:	0d5b      	lsrs	r3, r3, #21
   2611a:	2100      	movs	r1, #0
   2611c:	0010      	movs	r0, r2
   2611e:	0324      	lsls	r4, r4, #12
   26120:	0d0a      	lsrs	r2, r1, #20
   26122:	0b24      	lsrs	r4, r4, #12
   26124:	0512      	lsls	r2, r2, #20
   26126:	4322      	orrs	r2, r4
   26128:	4c0d      	ldr	r4, [pc, #52]	; (26160 <__aeabi_ui2d+0x6c>)
   2612a:	051b      	lsls	r3, r3, #20
   2612c:	4022      	ands	r2, r4
   2612e:	4313      	orrs	r3, r2
   26130:	005b      	lsls	r3, r3, #1
   26132:	0859      	lsrs	r1, r3, #1
   26134:	bd10      	pop	{r4, pc}
   26136:	0021      	movs	r1, r4
   26138:	4091      	lsls	r1, r2
   2613a:	000a      	movs	r2, r1
   2613c:	210b      	movs	r1, #11
   2613e:	1a08      	subs	r0, r1, r0
   26140:	40c4      	lsrs	r4, r0
   26142:	055b      	lsls	r3, r3, #21
   26144:	0324      	lsls	r4, r4, #12
   26146:	0b24      	lsrs	r4, r4, #12
   26148:	0d5b      	lsrs	r3, r3, #21
   2614a:	e7e6      	b.n	2611a <__aeabi_ui2d+0x26>
   2614c:	2300      	movs	r3, #0
   2614e:	2400      	movs	r4, #0
   26150:	2200      	movs	r2, #0
   26152:	e7e2      	b.n	2611a <__aeabi_ui2d+0x26>
   26154:	0000041e 	.word	0x0000041e
   26158:	00000433 	.word	0x00000433
   2615c:	00000413 	.word	0x00000413
   26160:	800fffff 	.word	0x800fffff

00026164 <__clzsi2>:
   26164:	211c      	movs	r1, #28
   26166:	2301      	movs	r3, #1
   26168:	041b      	lsls	r3, r3, #16
   2616a:	4298      	cmp	r0, r3
   2616c:	d301      	bcc.n	26172 <__clzsi2+0xe>
   2616e:	0c00      	lsrs	r0, r0, #16
   26170:	3910      	subs	r1, #16
   26172:	0a1b      	lsrs	r3, r3, #8
   26174:	4298      	cmp	r0, r3
   26176:	d301      	bcc.n	2617c <__clzsi2+0x18>
   26178:	0a00      	lsrs	r0, r0, #8
   2617a:	3908      	subs	r1, #8
   2617c:	091b      	lsrs	r3, r3, #4
   2617e:	4298      	cmp	r0, r3
   26180:	d301      	bcc.n	26186 <__clzsi2+0x22>
   26182:	0900      	lsrs	r0, r0, #4
   26184:	3904      	subs	r1, #4
   26186:	a202      	add	r2, pc, #8	; (adr r2, 26190 <__clzsi2+0x2c>)
   26188:	5c10      	ldrb	r0, [r2, r0]
   2618a:	1840      	adds	r0, r0, r1
   2618c:	4770      	bx	lr
   2618e:	46c0      	nop			; (mov r8, r8)
   26190:	02020304 	.word	0x02020304
   26194:	01010101 	.word	0x01010101
	...

000261a0 <atoi>:
   261a0:	b510      	push	{r4, lr}
   261a2:	220a      	movs	r2, #10
   261a4:	2100      	movs	r1, #0
   261a6:	f000 fb3b 	bl	26820 <strtol>
   261aa:	bd10      	pop	{r4, pc}

000261ac <__libc_init_array>:
   261ac:	b570      	push	{r4, r5, r6, lr}
   261ae:	2600      	movs	r6, #0
   261b0:	4d0c      	ldr	r5, [pc, #48]	; (261e4 <__libc_init_array+0x38>)
   261b2:	4c0d      	ldr	r4, [pc, #52]	; (261e8 <__libc_init_array+0x3c>)
   261b4:	1b64      	subs	r4, r4, r5
   261b6:	10a4      	asrs	r4, r4, #2
   261b8:	42a6      	cmp	r6, r4
   261ba:	d109      	bne.n	261d0 <__libc_init_array+0x24>
   261bc:	2600      	movs	r6, #0
   261be:	f004 ffd1 	bl	2b164 <_init>
   261c2:	4d0a      	ldr	r5, [pc, #40]	; (261ec <__libc_init_array+0x40>)
   261c4:	4c0a      	ldr	r4, [pc, #40]	; (261f0 <__libc_init_array+0x44>)
   261c6:	1b64      	subs	r4, r4, r5
   261c8:	10a4      	asrs	r4, r4, #2
   261ca:	42a6      	cmp	r6, r4
   261cc:	d105      	bne.n	261da <__libc_init_array+0x2e>
   261ce:	bd70      	pop	{r4, r5, r6, pc}
   261d0:	00b3      	lsls	r3, r6, #2
   261d2:	58eb      	ldr	r3, [r5, r3]
   261d4:	4798      	blx	r3
   261d6:	3601      	adds	r6, #1
   261d8:	e7ee      	b.n	261b8 <__libc_init_array+0xc>
   261da:	00b3      	lsls	r3, r6, #2
   261dc:	58eb      	ldr	r3, [r5, r3]
   261de:	4798      	blx	r3
   261e0:	3601      	adds	r6, #1
   261e2:	e7f2      	b.n	261ca <__libc_init_array+0x1e>
   261e4:	0002b170 	.word	0x0002b170
   261e8:	0002b170 	.word	0x0002b170
   261ec:	0002b170 	.word	0x0002b170
   261f0:	0002b174 	.word	0x0002b174

000261f4 <malloc>:
   261f4:	b510      	push	{r4, lr}
   261f6:	4b03      	ldr	r3, [pc, #12]	; (26204 <malloc+0x10>)
   261f8:	0001      	movs	r1, r0
   261fa:	6818      	ldr	r0, [r3, #0]
   261fc:	f000 f87c 	bl	262f8 <_malloc_r>
   26200:	bd10      	pop	{r4, pc}
   26202:	46c0      	nop			; (mov r8, r8)
   26204:	200000dc 	.word	0x200000dc

00026208 <free>:
   26208:	b510      	push	{r4, lr}
   2620a:	4b03      	ldr	r3, [pc, #12]	; (26218 <free+0x10>)
   2620c:	0001      	movs	r1, r0
   2620e:	6818      	ldr	r0, [r3, #0]
   26210:	f000 f828 	bl	26264 <_free_r>
   26214:	bd10      	pop	{r4, pc}
   26216:	46c0      	nop			; (mov r8, r8)
   26218:	200000dc 	.word	0x200000dc

0002621c <memcpy>:
   2621c:	2300      	movs	r3, #0
   2621e:	b510      	push	{r4, lr}
   26220:	429a      	cmp	r2, r3
   26222:	d100      	bne.n	26226 <memcpy+0xa>
   26224:	bd10      	pop	{r4, pc}
   26226:	5ccc      	ldrb	r4, [r1, r3]
   26228:	54c4      	strb	r4, [r0, r3]
   2622a:	3301      	adds	r3, #1
   2622c:	e7f8      	b.n	26220 <memcpy+0x4>

0002622e <memmove>:
   2622e:	b510      	push	{r4, lr}
   26230:	4288      	cmp	r0, r1
   26232:	d902      	bls.n	2623a <memmove+0xc>
   26234:	188b      	adds	r3, r1, r2
   26236:	4298      	cmp	r0, r3
   26238:	d308      	bcc.n	2624c <memmove+0x1e>
   2623a:	2300      	movs	r3, #0
   2623c:	429a      	cmp	r2, r3
   2623e:	d007      	beq.n	26250 <memmove+0x22>
   26240:	5ccc      	ldrb	r4, [r1, r3]
   26242:	54c4      	strb	r4, [r0, r3]
   26244:	3301      	adds	r3, #1
   26246:	e7f9      	b.n	2623c <memmove+0xe>
   26248:	5c8b      	ldrb	r3, [r1, r2]
   2624a:	5483      	strb	r3, [r0, r2]
   2624c:	3a01      	subs	r2, #1
   2624e:	d2fb      	bcs.n	26248 <memmove+0x1a>
   26250:	bd10      	pop	{r4, pc}

00026252 <memset>:
   26252:	0003      	movs	r3, r0
   26254:	1882      	adds	r2, r0, r2
   26256:	4293      	cmp	r3, r2
   26258:	d100      	bne.n	2625c <memset+0xa>
   2625a:	4770      	bx	lr
   2625c:	7019      	strb	r1, [r3, #0]
   2625e:	3301      	adds	r3, #1
   26260:	e7f9      	b.n	26256 <memset+0x4>
	...

00026264 <_free_r>:
   26264:	b570      	push	{r4, r5, r6, lr}
   26266:	0005      	movs	r5, r0
   26268:	2900      	cmp	r1, #0
   2626a:	d010      	beq.n	2628e <_free_r+0x2a>
   2626c:	1f0c      	subs	r4, r1, #4
   2626e:	6823      	ldr	r3, [r4, #0]
   26270:	2b00      	cmp	r3, #0
   26272:	da00      	bge.n	26276 <_free_r+0x12>
   26274:	18e4      	adds	r4, r4, r3
   26276:	0028      	movs	r0, r5
   26278:	f000 fe06 	bl	26e88 <__malloc_lock>
   2627c:	4a1d      	ldr	r2, [pc, #116]	; (262f4 <_free_r+0x90>)
   2627e:	6813      	ldr	r3, [r2, #0]
   26280:	2b00      	cmp	r3, #0
   26282:	d105      	bne.n	26290 <_free_r+0x2c>
   26284:	6063      	str	r3, [r4, #4]
   26286:	6014      	str	r4, [r2, #0]
   26288:	0028      	movs	r0, r5
   2628a:	f000 fdfe 	bl	26e8a <__malloc_unlock>
   2628e:	bd70      	pop	{r4, r5, r6, pc}
   26290:	42a3      	cmp	r3, r4
   26292:	d909      	bls.n	262a8 <_free_r+0x44>
   26294:	6821      	ldr	r1, [r4, #0]
   26296:	1860      	adds	r0, r4, r1
   26298:	4283      	cmp	r3, r0
   2629a:	d1f3      	bne.n	26284 <_free_r+0x20>
   2629c:	6818      	ldr	r0, [r3, #0]
   2629e:	685b      	ldr	r3, [r3, #4]
   262a0:	1841      	adds	r1, r0, r1
   262a2:	6021      	str	r1, [r4, #0]
   262a4:	e7ee      	b.n	26284 <_free_r+0x20>
   262a6:	0013      	movs	r3, r2
   262a8:	685a      	ldr	r2, [r3, #4]
   262aa:	2a00      	cmp	r2, #0
   262ac:	d001      	beq.n	262b2 <_free_r+0x4e>
   262ae:	42a2      	cmp	r2, r4
   262b0:	d9f9      	bls.n	262a6 <_free_r+0x42>
   262b2:	6819      	ldr	r1, [r3, #0]
   262b4:	1858      	adds	r0, r3, r1
   262b6:	42a0      	cmp	r0, r4
   262b8:	d10b      	bne.n	262d2 <_free_r+0x6e>
   262ba:	6820      	ldr	r0, [r4, #0]
   262bc:	1809      	adds	r1, r1, r0
   262be:	1858      	adds	r0, r3, r1
   262c0:	6019      	str	r1, [r3, #0]
   262c2:	4282      	cmp	r2, r0
   262c4:	d1e0      	bne.n	26288 <_free_r+0x24>
   262c6:	6810      	ldr	r0, [r2, #0]
   262c8:	6852      	ldr	r2, [r2, #4]
   262ca:	1841      	adds	r1, r0, r1
   262cc:	6019      	str	r1, [r3, #0]
   262ce:	605a      	str	r2, [r3, #4]
   262d0:	e7da      	b.n	26288 <_free_r+0x24>
   262d2:	42a0      	cmp	r0, r4
   262d4:	d902      	bls.n	262dc <_free_r+0x78>
   262d6:	230c      	movs	r3, #12
   262d8:	602b      	str	r3, [r5, #0]
   262da:	e7d5      	b.n	26288 <_free_r+0x24>
   262dc:	6821      	ldr	r1, [r4, #0]
   262de:	1860      	adds	r0, r4, r1
   262e0:	4282      	cmp	r2, r0
   262e2:	d103      	bne.n	262ec <_free_r+0x88>
   262e4:	6810      	ldr	r0, [r2, #0]
   262e6:	6852      	ldr	r2, [r2, #4]
   262e8:	1841      	adds	r1, r0, r1
   262ea:	6021      	str	r1, [r4, #0]
   262ec:	6062      	str	r2, [r4, #4]
   262ee:	605c      	str	r4, [r3, #4]
   262f0:	e7ca      	b.n	26288 <_free_r+0x24>
   262f2:	46c0      	nop			; (mov r8, r8)
   262f4:	2000415c 	.word	0x2000415c

000262f8 <_malloc_r>:
   262f8:	2303      	movs	r3, #3
   262fa:	b570      	push	{r4, r5, r6, lr}
   262fc:	1ccd      	adds	r5, r1, #3
   262fe:	439d      	bics	r5, r3
   26300:	3508      	adds	r5, #8
   26302:	0006      	movs	r6, r0
   26304:	2d0c      	cmp	r5, #12
   26306:	d21e      	bcs.n	26346 <_malloc_r+0x4e>
   26308:	250c      	movs	r5, #12
   2630a:	42a9      	cmp	r1, r5
   2630c:	d81d      	bhi.n	2634a <_malloc_r+0x52>
   2630e:	0030      	movs	r0, r6
   26310:	f000 fdba 	bl	26e88 <__malloc_lock>
   26314:	4a25      	ldr	r2, [pc, #148]	; (263ac <_malloc_r+0xb4>)
   26316:	6814      	ldr	r4, [r2, #0]
   26318:	0021      	movs	r1, r4
   2631a:	2900      	cmp	r1, #0
   2631c:	d119      	bne.n	26352 <_malloc_r+0x5a>
   2631e:	4c24      	ldr	r4, [pc, #144]	; (263b0 <_malloc_r+0xb8>)
   26320:	6823      	ldr	r3, [r4, #0]
   26322:	2b00      	cmp	r3, #0
   26324:	d103      	bne.n	2632e <_malloc_r+0x36>
   26326:	0030      	movs	r0, r6
   26328:	f000 f8dc 	bl	264e4 <_sbrk_r>
   2632c:	6020      	str	r0, [r4, #0]
   2632e:	0029      	movs	r1, r5
   26330:	0030      	movs	r0, r6
   26332:	f000 f8d7 	bl	264e4 <_sbrk_r>
   26336:	1c43      	adds	r3, r0, #1
   26338:	d12c      	bne.n	26394 <_malloc_r+0x9c>
   2633a:	230c      	movs	r3, #12
   2633c:	0030      	movs	r0, r6
   2633e:	6033      	str	r3, [r6, #0]
   26340:	f000 fda3 	bl	26e8a <__malloc_unlock>
   26344:	e003      	b.n	2634e <_malloc_r+0x56>
   26346:	2d00      	cmp	r5, #0
   26348:	dadf      	bge.n	2630a <_malloc_r+0x12>
   2634a:	230c      	movs	r3, #12
   2634c:	6033      	str	r3, [r6, #0]
   2634e:	2000      	movs	r0, #0
   26350:	bd70      	pop	{r4, r5, r6, pc}
   26352:	680b      	ldr	r3, [r1, #0]
   26354:	1b5b      	subs	r3, r3, r5
   26356:	d41a      	bmi.n	2638e <_malloc_r+0x96>
   26358:	2b0b      	cmp	r3, #11
   2635a:	d903      	bls.n	26364 <_malloc_r+0x6c>
   2635c:	600b      	str	r3, [r1, #0]
   2635e:	18cc      	adds	r4, r1, r3
   26360:	6025      	str	r5, [r4, #0]
   26362:	e003      	b.n	2636c <_malloc_r+0x74>
   26364:	428c      	cmp	r4, r1
   26366:	d10e      	bne.n	26386 <_malloc_r+0x8e>
   26368:	6863      	ldr	r3, [r4, #4]
   2636a:	6013      	str	r3, [r2, #0]
   2636c:	0030      	movs	r0, r6
   2636e:	f000 fd8c 	bl	26e8a <__malloc_unlock>
   26372:	0020      	movs	r0, r4
   26374:	2207      	movs	r2, #7
   26376:	300b      	adds	r0, #11
   26378:	1d23      	adds	r3, r4, #4
   2637a:	4390      	bics	r0, r2
   2637c:	1ac3      	subs	r3, r0, r3
   2637e:	d0e7      	beq.n	26350 <_malloc_r+0x58>
   26380:	425a      	negs	r2, r3
   26382:	50e2      	str	r2, [r4, r3]
   26384:	e7e4      	b.n	26350 <_malloc_r+0x58>
   26386:	684b      	ldr	r3, [r1, #4]
   26388:	6063      	str	r3, [r4, #4]
   2638a:	000c      	movs	r4, r1
   2638c:	e7ee      	b.n	2636c <_malloc_r+0x74>
   2638e:	000c      	movs	r4, r1
   26390:	6849      	ldr	r1, [r1, #4]
   26392:	e7c2      	b.n	2631a <_malloc_r+0x22>
   26394:	2303      	movs	r3, #3
   26396:	1cc4      	adds	r4, r0, #3
   26398:	439c      	bics	r4, r3
   2639a:	42a0      	cmp	r0, r4
   2639c:	d0e0      	beq.n	26360 <_malloc_r+0x68>
   2639e:	1a21      	subs	r1, r4, r0
   263a0:	0030      	movs	r0, r6
   263a2:	f000 f89f 	bl	264e4 <_sbrk_r>
   263a6:	1c43      	adds	r3, r0, #1
   263a8:	d1da      	bne.n	26360 <_malloc_r+0x68>
   263aa:	e7c6      	b.n	2633a <_malloc_r+0x42>
   263ac:	2000415c 	.word	0x2000415c
   263b0:	20004160 	.word	0x20004160

000263b4 <_puts_r>:
   263b4:	b570      	push	{r4, r5, r6, lr}
   263b6:	0005      	movs	r5, r0
   263b8:	000e      	movs	r6, r1
   263ba:	2800      	cmp	r0, #0
   263bc:	d004      	beq.n	263c8 <_puts_r+0x14>
   263be:	6983      	ldr	r3, [r0, #24]
   263c0:	2b00      	cmp	r3, #0
   263c2:	d101      	bne.n	263c8 <_puts_r+0x14>
   263c4:	f000 fc3c 	bl	26c40 <__sinit>
   263c8:	69ab      	ldr	r3, [r5, #24]
   263ca:	68ac      	ldr	r4, [r5, #8]
   263cc:	2b00      	cmp	r3, #0
   263ce:	d102      	bne.n	263d6 <_puts_r+0x22>
   263d0:	0028      	movs	r0, r5
   263d2:	f000 fc35 	bl	26c40 <__sinit>
   263d6:	4b24      	ldr	r3, [pc, #144]	; (26468 <_puts_r+0xb4>)
   263d8:	429c      	cmp	r4, r3
   263da:	d10f      	bne.n	263fc <_puts_r+0x48>
   263dc:	686c      	ldr	r4, [r5, #4]
   263de:	89a3      	ldrh	r3, [r4, #12]
   263e0:	071b      	lsls	r3, r3, #28
   263e2:	d502      	bpl.n	263ea <_puts_r+0x36>
   263e4:	6923      	ldr	r3, [r4, #16]
   263e6:	2b00      	cmp	r3, #0
   263e8:	d120      	bne.n	2642c <_puts_r+0x78>
   263ea:	0021      	movs	r1, r4
   263ec:	0028      	movs	r0, r5
   263ee:	f000 fab9 	bl	26964 <__swsetup_r>
   263f2:	2800      	cmp	r0, #0
   263f4:	d01a      	beq.n	2642c <_puts_r+0x78>
   263f6:	2001      	movs	r0, #1
   263f8:	4240      	negs	r0, r0
   263fa:	bd70      	pop	{r4, r5, r6, pc}
   263fc:	4b1b      	ldr	r3, [pc, #108]	; (2646c <_puts_r+0xb8>)
   263fe:	429c      	cmp	r4, r3
   26400:	d101      	bne.n	26406 <_puts_r+0x52>
   26402:	68ac      	ldr	r4, [r5, #8]
   26404:	e7eb      	b.n	263de <_puts_r+0x2a>
   26406:	4b1a      	ldr	r3, [pc, #104]	; (26470 <_puts_r+0xbc>)
   26408:	429c      	cmp	r4, r3
   2640a:	d1e8      	bne.n	263de <_puts_r+0x2a>
   2640c:	68ec      	ldr	r4, [r5, #12]
   2640e:	e7e6      	b.n	263de <_puts_r+0x2a>
   26410:	3b01      	subs	r3, #1
   26412:	3601      	adds	r6, #1
   26414:	60a3      	str	r3, [r4, #8]
   26416:	2b00      	cmp	r3, #0
   26418:	da04      	bge.n	26424 <_puts_r+0x70>
   2641a:	69a2      	ldr	r2, [r4, #24]
   2641c:	4293      	cmp	r3, r2
   2641e:	db16      	blt.n	2644e <_puts_r+0x9a>
   26420:	290a      	cmp	r1, #10
   26422:	d014      	beq.n	2644e <_puts_r+0x9a>
   26424:	6823      	ldr	r3, [r4, #0]
   26426:	1c5a      	adds	r2, r3, #1
   26428:	6022      	str	r2, [r4, #0]
   2642a:	7019      	strb	r1, [r3, #0]
   2642c:	7831      	ldrb	r1, [r6, #0]
   2642e:	68a3      	ldr	r3, [r4, #8]
   26430:	2900      	cmp	r1, #0
   26432:	d1ed      	bne.n	26410 <_puts_r+0x5c>
   26434:	3b01      	subs	r3, #1
   26436:	60a3      	str	r3, [r4, #8]
   26438:	2b00      	cmp	r3, #0
   2643a:	da0f      	bge.n	2645c <_puts_r+0xa8>
   2643c:	0022      	movs	r2, r4
   2643e:	310a      	adds	r1, #10
   26440:	0028      	movs	r0, r5
   26442:	f000 fa39 	bl	268b8 <__swbuf_r>
   26446:	1c43      	adds	r3, r0, #1
   26448:	d0d5      	beq.n	263f6 <_puts_r+0x42>
   2644a:	200a      	movs	r0, #10
   2644c:	e7d5      	b.n	263fa <_puts_r+0x46>
   2644e:	0022      	movs	r2, r4
   26450:	0028      	movs	r0, r5
   26452:	f000 fa31 	bl	268b8 <__swbuf_r>
   26456:	1c43      	adds	r3, r0, #1
   26458:	d1e8      	bne.n	2642c <_puts_r+0x78>
   2645a:	e7cc      	b.n	263f6 <_puts_r+0x42>
   2645c:	200a      	movs	r0, #10
   2645e:	6823      	ldr	r3, [r4, #0]
   26460:	1c5a      	adds	r2, r3, #1
   26462:	6022      	str	r2, [r4, #0]
   26464:	7018      	strb	r0, [r3, #0]
   26466:	e7c8      	b.n	263fa <_puts_r+0x46>
   26468:	0002afe4 	.word	0x0002afe4
   2646c:	0002b004 	.word	0x0002b004
   26470:	0002afc4 	.word	0x0002afc4

00026474 <puts>:
   26474:	b510      	push	{r4, lr}
   26476:	4b03      	ldr	r3, [pc, #12]	; (26484 <puts+0x10>)
   26478:	0001      	movs	r1, r0
   2647a:	6818      	ldr	r0, [r3, #0]
   2647c:	f7ff ff9a 	bl	263b4 <_puts_r>
   26480:	bd10      	pop	{r4, pc}
   26482:	46c0      	nop			; (mov r8, r8)
   26484:	200000dc 	.word	0x200000dc

00026488 <srand>:
   26488:	4b10      	ldr	r3, [pc, #64]	; (264cc <srand+0x44>)
   2648a:	b570      	push	{r4, r5, r6, lr}
   2648c:	681c      	ldr	r4, [r3, #0]
   2648e:	0005      	movs	r5, r0
   26490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26492:	2b00      	cmp	r3, #0
   26494:	d115      	bne.n	264c2 <srand+0x3a>
   26496:	2018      	movs	r0, #24
   26498:	f7ff feac 	bl	261f4 <malloc>
   2649c:	4b0c      	ldr	r3, [pc, #48]	; (264d0 <srand+0x48>)
   2649e:	63a0      	str	r0, [r4, #56]	; 0x38
   264a0:	8003      	strh	r3, [r0, #0]
   264a2:	4b0c      	ldr	r3, [pc, #48]	; (264d4 <srand+0x4c>)
   264a4:	2201      	movs	r2, #1
   264a6:	8043      	strh	r3, [r0, #2]
   264a8:	4b0b      	ldr	r3, [pc, #44]	; (264d8 <srand+0x50>)
   264aa:	8083      	strh	r3, [r0, #4]
   264ac:	4b0b      	ldr	r3, [pc, #44]	; (264dc <srand+0x54>)
   264ae:	80c3      	strh	r3, [r0, #6]
   264b0:	4b0b      	ldr	r3, [pc, #44]	; (264e0 <srand+0x58>)
   264b2:	8103      	strh	r3, [r0, #8]
   264b4:	2305      	movs	r3, #5
   264b6:	8143      	strh	r3, [r0, #10]
   264b8:	3306      	adds	r3, #6
   264ba:	8183      	strh	r3, [r0, #12]
   264bc:	2300      	movs	r3, #0
   264be:	6102      	str	r2, [r0, #16]
   264c0:	6143      	str	r3, [r0, #20]
   264c2:	2200      	movs	r2, #0
   264c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   264c6:	611d      	str	r5, [r3, #16]
   264c8:	615a      	str	r2, [r3, #20]
   264ca:	bd70      	pop	{r4, r5, r6, pc}
   264cc:	200000dc 	.word	0x200000dc
   264d0:	0000330e 	.word	0x0000330e
   264d4:	ffffabcd 	.word	0xffffabcd
   264d8:	00001234 	.word	0x00001234
   264dc:	ffffe66d 	.word	0xffffe66d
   264e0:	ffffdeec 	.word	0xffffdeec

000264e4 <_sbrk_r>:
   264e4:	2300      	movs	r3, #0
   264e6:	b570      	push	{r4, r5, r6, lr}
   264e8:	4c06      	ldr	r4, [pc, #24]	; (26504 <_sbrk_r+0x20>)
   264ea:	0005      	movs	r5, r0
   264ec:	0008      	movs	r0, r1
   264ee:	6023      	str	r3, [r4, #0]
   264f0:	f7f9 fb1c 	bl	1fb2c <_sbrk>
   264f4:	1c43      	adds	r3, r0, #1
   264f6:	d103      	bne.n	26500 <_sbrk_r+0x1c>
   264f8:	6823      	ldr	r3, [r4, #0]
   264fa:	2b00      	cmp	r3, #0
   264fc:	d000      	beq.n	26500 <_sbrk_r+0x1c>
   264fe:	602b      	str	r3, [r5, #0]
   26500:	bd70      	pop	{r4, r5, r6, pc}
   26502:	46c0      	nop			; (mov r8, r8)
   26504:	20005648 	.word	0x20005648

00026508 <sniprintf>:
   26508:	b40c      	push	{r2, r3}
   2650a:	b530      	push	{r4, r5, lr}
   2650c:	4b16      	ldr	r3, [pc, #88]	; (26568 <sniprintf+0x60>)
   2650e:	b09d      	sub	sp, #116	; 0x74
   26510:	1e0c      	subs	r4, r1, #0
   26512:	681d      	ldr	r5, [r3, #0]
   26514:	da08      	bge.n	26528 <sniprintf+0x20>
   26516:	238b      	movs	r3, #139	; 0x8b
   26518:	2001      	movs	r0, #1
   2651a:	602b      	str	r3, [r5, #0]
   2651c:	4240      	negs	r0, r0
   2651e:	b01d      	add	sp, #116	; 0x74
   26520:	bc30      	pop	{r4, r5}
   26522:	bc08      	pop	{r3}
   26524:	b002      	add	sp, #8
   26526:	4718      	bx	r3
   26528:	2382      	movs	r3, #130	; 0x82
   2652a:	a902      	add	r1, sp, #8
   2652c:	009b      	lsls	r3, r3, #2
   2652e:	818b      	strh	r3, [r1, #12]
   26530:	2300      	movs	r3, #0
   26532:	9002      	str	r0, [sp, #8]
   26534:	6108      	str	r0, [r1, #16]
   26536:	429c      	cmp	r4, r3
   26538:	d000      	beq.n	2653c <sniprintf+0x34>
   2653a:	1e63      	subs	r3, r4, #1
   2653c:	608b      	str	r3, [r1, #8]
   2653e:	614b      	str	r3, [r1, #20]
   26540:	2301      	movs	r3, #1
   26542:	425b      	negs	r3, r3
   26544:	81cb      	strh	r3, [r1, #14]
   26546:	9a20      	ldr	r2, [sp, #128]	; 0x80
   26548:	ab21      	add	r3, sp, #132	; 0x84
   2654a:	0028      	movs	r0, r5
   2654c:	9301      	str	r3, [sp, #4]
   2654e:	f000 fcff 	bl	26f50 <_svfiprintf_r>
   26552:	1c43      	adds	r3, r0, #1
   26554:	da01      	bge.n	2655a <sniprintf+0x52>
   26556:	238b      	movs	r3, #139	; 0x8b
   26558:	602b      	str	r3, [r5, #0]
   2655a:	2c00      	cmp	r4, #0
   2655c:	d0df      	beq.n	2651e <sniprintf+0x16>
   2655e:	2300      	movs	r3, #0
   26560:	9a02      	ldr	r2, [sp, #8]
   26562:	7013      	strb	r3, [r2, #0]
   26564:	e7db      	b.n	2651e <sniprintf+0x16>
   26566:	46c0      	nop			; (mov r8, r8)
   26568:	200000dc 	.word	0x200000dc

0002656c <siprintf>:
   2656c:	b40e      	push	{r1, r2, r3}
   2656e:	b510      	push	{r4, lr}
   26570:	b09d      	sub	sp, #116	; 0x74
   26572:	a902      	add	r1, sp, #8
   26574:	9002      	str	r0, [sp, #8]
   26576:	6108      	str	r0, [r1, #16]
   26578:	480b      	ldr	r0, [pc, #44]	; (265a8 <siprintf+0x3c>)
   2657a:	2482      	movs	r4, #130	; 0x82
   2657c:	6088      	str	r0, [r1, #8]
   2657e:	6148      	str	r0, [r1, #20]
   26580:	2001      	movs	r0, #1
   26582:	4240      	negs	r0, r0
   26584:	ab1f      	add	r3, sp, #124	; 0x7c
   26586:	81c8      	strh	r0, [r1, #14]
   26588:	4808      	ldr	r0, [pc, #32]	; (265ac <siprintf+0x40>)
   2658a:	cb04      	ldmia	r3!, {r2}
   2658c:	00a4      	lsls	r4, r4, #2
   2658e:	6800      	ldr	r0, [r0, #0]
   26590:	9301      	str	r3, [sp, #4]
   26592:	818c      	strh	r4, [r1, #12]
   26594:	f000 fcdc 	bl	26f50 <_svfiprintf_r>
   26598:	2300      	movs	r3, #0
   2659a:	9a02      	ldr	r2, [sp, #8]
   2659c:	7013      	strb	r3, [r2, #0]
   2659e:	b01d      	add	sp, #116	; 0x74
   265a0:	bc10      	pop	{r4}
   265a2:	bc08      	pop	{r3}
   265a4:	b003      	add	sp, #12
   265a6:	4718      	bx	r3
   265a8:	7fffffff 	.word	0x7fffffff
   265ac:	200000dc 	.word	0x200000dc

000265b0 <strcasecmp>:
   265b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265b2:	0007      	movs	r7, r0
   265b4:	000e      	movs	r6, r1
   265b6:	783c      	ldrb	r4, [r7, #0]
   265b8:	f000 fbda 	bl	26d70 <__locale_ctype_ptr>
   265bc:	2203      	movs	r2, #3
   265be:	1900      	adds	r0, r0, r4
   265c0:	7843      	ldrb	r3, [r0, #1]
   265c2:	4013      	ands	r3, r2
   265c4:	2b01      	cmp	r3, #1
   265c6:	d100      	bne.n	265ca <strcasecmp+0x1a>
   265c8:	3420      	adds	r4, #32
   265ca:	7835      	ldrb	r5, [r6, #0]
   265cc:	f000 fbd0 	bl	26d70 <__locale_ctype_ptr>
   265d0:	2203      	movs	r2, #3
   265d2:	1940      	adds	r0, r0, r5
   265d4:	7843      	ldrb	r3, [r0, #1]
   265d6:	4013      	ands	r3, r2
   265d8:	2b01      	cmp	r3, #1
   265da:	d100      	bne.n	265de <strcasecmp+0x2e>
   265dc:	3520      	adds	r5, #32
   265de:	1b60      	subs	r0, r4, r5
   265e0:	d103      	bne.n	265ea <strcasecmp+0x3a>
   265e2:	3701      	adds	r7, #1
   265e4:	3601      	adds	r6, #1
   265e6:	2d00      	cmp	r5, #0
   265e8:	d1e5      	bne.n	265b6 <strcasecmp+0x6>
   265ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000265ec <strcat>:
   265ec:	0002      	movs	r2, r0
   265ee:	b510      	push	{r4, lr}
   265f0:	7813      	ldrb	r3, [r2, #0]
   265f2:	2b00      	cmp	r3, #0
   265f4:	d105      	bne.n	26602 <strcat+0x16>
   265f6:	5ccc      	ldrb	r4, [r1, r3]
   265f8:	54d4      	strb	r4, [r2, r3]
   265fa:	3301      	adds	r3, #1
   265fc:	2c00      	cmp	r4, #0
   265fe:	d1fa      	bne.n	265f6 <strcat+0xa>
   26600:	bd10      	pop	{r4, pc}
   26602:	3201      	adds	r2, #1
   26604:	e7f4      	b.n	265f0 <strcat+0x4>

00026606 <strcmp>:
   26606:	7802      	ldrb	r2, [r0, #0]
   26608:	780b      	ldrb	r3, [r1, #0]
   2660a:	2a00      	cmp	r2, #0
   2660c:	d003      	beq.n	26616 <strcmp+0x10>
   2660e:	3001      	adds	r0, #1
   26610:	3101      	adds	r1, #1
   26612:	429a      	cmp	r2, r3
   26614:	d0f7      	beq.n	26606 <strcmp>
   26616:	1ad0      	subs	r0, r2, r3
   26618:	4770      	bx	lr

0002661a <strcpy>:
   2661a:	1c03      	adds	r3, r0, #0
   2661c:	780a      	ldrb	r2, [r1, #0]
   2661e:	3101      	adds	r1, #1
   26620:	701a      	strb	r2, [r3, #0]
   26622:	3301      	adds	r3, #1
   26624:	2a00      	cmp	r2, #0
   26626:	d1f9      	bne.n	2661c <strcpy+0x2>
   26628:	4770      	bx	lr
	...

0002662c <strdup>:
   2662c:	b510      	push	{r4, lr}
   2662e:	4b03      	ldr	r3, [pc, #12]	; (2663c <strdup+0x10>)
   26630:	0001      	movs	r1, r0
   26632:	6818      	ldr	r0, [r3, #0]
   26634:	f000 f804 	bl	26640 <_strdup_r>
   26638:	bd10      	pop	{r4, pc}
   2663a:	46c0      	nop			; (mov r8, r8)
   2663c:	200000dc 	.word	0x200000dc

00026640 <_strdup_r>:
   26640:	b570      	push	{r4, r5, r6, lr}
   26642:	0005      	movs	r5, r0
   26644:	0008      	movs	r0, r1
   26646:	000e      	movs	r6, r1
   26648:	f000 f80d 	bl	26666 <strlen>
   2664c:	1c44      	adds	r4, r0, #1
   2664e:	0021      	movs	r1, r4
   26650:	0028      	movs	r0, r5
   26652:	f7ff fe51 	bl	262f8 <_malloc_r>
   26656:	1e05      	subs	r5, r0, #0
   26658:	d003      	beq.n	26662 <_strdup_r+0x22>
   2665a:	0022      	movs	r2, r4
   2665c:	0031      	movs	r1, r6
   2665e:	f7ff fddd 	bl	2621c <memcpy>
   26662:	0028      	movs	r0, r5
   26664:	bd70      	pop	{r4, r5, r6, pc}

00026666 <strlen>:
   26666:	2300      	movs	r3, #0
   26668:	5cc2      	ldrb	r2, [r0, r3]
   2666a:	3301      	adds	r3, #1
   2666c:	2a00      	cmp	r2, #0
   2666e:	d1fb      	bne.n	26668 <strlen+0x2>
   26670:	1e58      	subs	r0, r3, #1
   26672:	4770      	bx	lr

00026674 <strncmp>:
   26674:	2300      	movs	r3, #0
   26676:	b530      	push	{r4, r5, lr}
   26678:	429a      	cmp	r2, r3
   2667a:	d00a      	beq.n	26692 <strncmp+0x1e>
   2667c:	3a01      	subs	r2, #1
   2667e:	5cc4      	ldrb	r4, [r0, r3]
   26680:	5ccd      	ldrb	r5, [r1, r3]
   26682:	42ac      	cmp	r4, r5
   26684:	d104      	bne.n	26690 <strncmp+0x1c>
   26686:	429a      	cmp	r2, r3
   26688:	d002      	beq.n	26690 <strncmp+0x1c>
   2668a:	3301      	adds	r3, #1
   2668c:	2c00      	cmp	r4, #0
   2668e:	d1f6      	bne.n	2667e <strncmp+0xa>
   26690:	1b63      	subs	r3, r4, r5
   26692:	0018      	movs	r0, r3
   26694:	bd30      	pop	{r4, r5, pc}

00026696 <strncpy>:
   26696:	b570      	push	{r4, r5, r6, lr}
   26698:	0004      	movs	r4, r0
   2669a:	2a00      	cmp	r2, #0
   2669c:	d100      	bne.n	266a0 <strncpy+0xa>
   2669e:	bd70      	pop	{r4, r5, r6, pc}
   266a0:	780d      	ldrb	r5, [r1, #0]
   266a2:	1e56      	subs	r6, r2, #1
   266a4:	1c63      	adds	r3, r4, #1
   266a6:	7025      	strb	r5, [r4, #0]
   266a8:	3101      	adds	r1, #1
   266aa:	2d00      	cmp	r5, #0
   266ac:	d105      	bne.n	266ba <strncpy+0x24>
   266ae:	18a4      	adds	r4, r4, r2
   266b0:	429c      	cmp	r4, r3
   266b2:	d0f4      	beq.n	2669e <strncpy+0x8>
   266b4:	701d      	strb	r5, [r3, #0]
   266b6:	3301      	adds	r3, #1
   266b8:	e7fa      	b.n	266b0 <strncpy+0x1a>
   266ba:	001c      	movs	r4, r3
   266bc:	0032      	movs	r2, r6
   266be:	e7ec      	b.n	2669a <strncpy+0x4>

000266c0 <strrchr>:
   266c0:	b570      	push	{r4, r5, r6, lr}
   266c2:	000d      	movs	r5, r1
   266c4:	2400      	movs	r4, #0
   266c6:	2900      	cmp	r1, #0
   266c8:	d105      	bne.n	266d6 <strrchr+0x16>
   266ca:	f000 ff19 	bl	27500 <strchr>
   266ce:	0004      	movs	r4, r0
   266d0:	e006      	b.n	266e0 <strrchr+0x20>
   266d2:	001c      	movs	r4, r3
   266d4:	1c58      	adds	r0, r3, #1
   266d6:	0029      	movs	r1, r5
   266d8:	f000 ff12 	bl	27500 <strchr>
   266dc:	1e03      	subs	r3, r0, #0
   266de:	d1f8      	bne.n	266d2 <strrchr+0x12>
   266e0:	0020      	movs	r0, r4
   266e2:	bd70      	pop	{r4, r5, r6, pc}

000266e4 <strstr>:
   266e4:	b510      	push	{r4, lr}
   266e6:	0002      	movs	r2, r0
   266e8:	7800      	ldrb	r0, [r0, #0]
   266ea:	2800      	cmp	r0, #0
   266ec:	d104      	bne.n	266f8 <strstr+0x14>
   266ee:	7809      	ldrb	r1, [r1, #0]
   266f0:	2900      	cmp	r1, #0
   266f2:	d00d      	beq.n	26710 <strstr+0x2c>
   266f4:	bd10      	pop	{r4, pc}
   266f6:	3201      	adds	r2, #1
   266f8:	7810      	ldrb	r0, [r2, #0]
   266fa:	2800      	cmp	r0, #0
   266fc:	d0fa      	beq.n	266f4 <strstr+0x10>
   266fe:	2300      	movs	r3, #0
   26700:	5cc8      	ldrb	r0, [r1, r3]
   26702:	2800      	cmp	r0, #0
   26704:	d004      	beq.n	26710 <strstr+0x2c>
   26706:	5cd4      	ldrb	r4, [r2, r3]
   26708:	4284      	cmp	r4, r0
   2670a:	d1f4      	bne.n	266f6 <strstr+0x12>
   2670c:	3301      	adds	r3, #1
   2670e:	e7f7      	b.n	26700 <strstr+0x1c>
   26710:	0010      	movs	r0, r2
   26712:	e7ef      	b.n	266f4 <strstr+0x10>

00026714 <_strtol_l.isra.0>:
   26714:	b5f0      	push	{r4, r5, r6, r7, lr}
   26716:	001f      	movs	r7, r3
   26718:	000e      	movs	r6, r1
   2671a:	b087      	sub	sp, #28
   2671c:	9005      	str	r0, [sp, #20]
   2671e:	9103      	str	r1, [sp, #12]
   26720:	9202      	str	r2, [sp, #8]
   26722:	980c      	ldr	r0, [sp, #48]	; 0x30
   26724:	7834      	ldrb	r4, [r6, #0]
   26726:	f000 fb20 	bl	26d6a <__locale_ctype_ptr_l>
   2672a:	2208      	movs	r2, #8
   2672c:	1900      	adds	r0, r0, r4
   2672e:	7843      	ldrb	r3, [r0, #1]
   26730:	1c75      	adds	r5, r6, #1
   26732:	4013      	ands	r3, r2
   26734:	d10c      	bne.n	26750 <_strtol_l.isra.0+0x3c>
   26736:	2c2d      	cmp	r4, #45	; 0x2d
   26738:	d10c      	bne.n	26754 <_strtol_l.isra.0+0x40>
   2673a:	3301      	adds	r3, #1
   2673c:	782c      	ldrb	r4, [r5, #0]
   2673e:	9301      	str	r3, [sp, #4]
   26740:	1cb5      	adds	r5, r6, #2
   26742:	2f00      	cmp	r7, #0
   26744:	d00c      	beq.n	26760 <_strtol_l.isra.0+0x4c>
   26746:	2f10      	cmp	r7, #16
   26748:	d114      	bne.n	26774 <_strtol_l.isra.0+0x60>
   2674a:	2c30      	cmp	r4, #48	; 0x30
   2674c:	d00a      	beq.n	26764 <_strtol_l.isra.0+0x50>
   2674e:	e011      	b.n	26774 <_strtol_l.isra.0+0x60>
   26750:	002e      	movs	r6, r5
   26752:	e7e6      	b.n	26722 <_strtol_l.isra.0+0xe>
   26754:	9301      	str	r3, [sp, #4]
   26756:	2c2b      	cmp	r4, #43	; 0x2b
   26758:	d1f3      	bne.n	26742 <_strtol_l.isra.0+0x2e>
   2675a:	782c      	ldrb	r4, [r5, #0]
   2675c:	1cb5      	adds	r5, r6, #2
   2675e:	e7f0      	b.n	26742 <_strtol_l.isra.0+0x2e>
   26760:	2c30      	cmp	r4, #48	; 0x30
   26762:	d12f      	bne.n	267c4 <_strtol_l.isra.0+0xb0>
   26764:	2220      	movs	r2, #32
   26766:	782b      	ldrb	r3, [r5, #0]
   26768:	4393      	bics	r3, r2
   2676a:	2b58      	cmp	r3, #88	; 0x58
   2676c:	d151      	bne.n	26812 <_strtol_l.isra.0+0xfe>
   2676e:	2710      	movs	r7, #16
   26770:	786c      	ldrb	r4, [r5, #1]
   26772:	3502      	adds	r5, #2
   26774:	9b01      	ldr	r3, [sp, #4]
   26776:	4a29      	ldr	r2, [pc, #164]	; (2681c <_strtol_l.isra.0+0x108>)
   26778:	0039      	movs	r1, r7
   2677a:	189e      	adds	r6, r3, r2
   2677c:	0030      	movs	r0, r6
   2677e:	f7fd fcb9 	bl	240f4 <__aeabi_uidivmod>
   26782:	0030      	movs	r0, r6
   26784:	9104      	str	r1, [sp, #16]
   26786:	0039      	movs	r1, r7
   26788:	f7fd fc2e 	bl	23fe8 <__udivsi3>
   2678c:	2101      	movs	r1, #1
   2678e:	2300      	movs	r3, #0
   26790:	4249      	negs	r1, r1
   26792:	0002      	movs	r2, r0
   26794:	468c      	mov	ip, r1
   26796:	0018      	movs	r0, r3
   26798:	0021      	movs	r1, r4
   2679a:	3930      	subs	r1, #48	; 0x30
   2679c:	2909      	cmp	r1, #9
   2679e:	d813      	bhi.n	267c8 <_strtol_l.isra.0+0xb4>
   267a0:	000c      	movs	r4, r1
   267a2:	42a7      	cmp	r7, r4
   267a4:	dd1c      	ble.n	267e0 <_strtol_l.isra.0+0xcc>
   267a6:	1c59      	adds	r1, r3, #1
   267a8:	d009      	beq.n	267be <_strtol_l.isra.0+0xaa>
   267aa:	4663      	mov	r3, ip
   267ac:	4282      	cmp	r2, r0
   267ae:	d306      	bcc.n	267be <_strtol_l.isra.0+0xaa>
   267b0:	d102      	bne.n	267b8 <_strtol_l.isra.0+0xa4>
   267b2:	9904      	ldr	r1, [sp, #16]
   267b4:	42a1      	cmp	r1, r4
   267b6:	db02      	blt.n	267be <_strtol_l.isra.0+0xaa>
   267b8:	2301      	movs	r3, #1
   267ba:	4378      	muls	r0, r7
   267bc:	1820      	adds	r0, r4, r0
   267be:	782c      	ldrb	r4, [r5, #0]
   267c0:	3501      	adds	r5, #1
   267c2:	e7e9      	b.n	26798 <_strtol_l.isra.0+0x84>
   267c4:	270a      	movs	r7, #10
   267c6:	e7d5      	b.n	26774 <_strtol_l.isra.0+0x60>
   267c8:	0021      	movs	r1, r4
   267ca:	3941      	subs	r1, #65	; 0x41
   267cc:	2919      	cmp	r1, #25
   267ce:	d801      	bhi.n	267d4 <_strtol_l.isra.0+0xc0>
   267d0:	3c37      	subs	r4, #55	; 0x37
   267d2:	e7e6      	b.n	267a2 <_strtol_l.isra.0+0x8e>
   267d4:	0021      	movs	r1, r4
   267d6:	3961      	subs	r1, #97	; 0x61
   267d8:	2919      	cmp	r1, #25
   267da:	d801      	bhi.n	267e0 <_strtol_l.isra.0+0xcc>
   267dc:	3c57      	subs	r4, #87	; 0x57
   267de:	e7e0      	b.n	267a2 <_strtol_l.isra.0+0x8e>
   267e0:	1c5a      	adds	r2, r3, #1
   267e2:	d108      	bne.n	267f6 <_strtol_l.isra.0+0xe2>
   267e4:	9a05      	ldr	r2, [sp, #20]
   267e6:	3323      	adds	r3, #35	; 0x23
   267e8:	6013      	str	r3, [r2, #0]
   267ea:	9b02      	ldr	r3, [sp, #8]
   267ec:	0030      	movs	r0, r6
   267ee:	2b00      	cmp	r3, #0
   267f0:	d10b      	bne.n	2680a <_strtol_l.isra.0+0xf6>
   267f2:	b007      	add	sp, #28
   267f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267f6:	9a01      	ldr	r2, [sp, #4]
   267f8:	2a00      	cmp	r2, #0
   267fa:	d000      	beq.n	267fe <_strtol_l.isra.0+0xea>
   267fc:	4240      	negs	r0, r0
   267fe:	9a02      	ldr	r2, [sp, #8]
   26800:	2a00      	cmp	r2, #0
   26802:	d0f6      	beq.n	267f2 <_strtol_l.isra.0+0xde>
   26804:	9a03      	ldr	r2, [sp, #12]
   26806:	2b00      	cmp	r3, #0
   26808:	d000      	beq.n	2680c <_strtol_l.isra.0+0xf8>
   2680a:	1e6a      	subs	r2, r5, #1
   2680c:	9b02      	ldr	r3, [sp, #8]
   2680e:	601a      	str	r2, [r3, #0]
   26810:	e7ef      	b.n	267f2 <_strtol_l.isra.0+0xde>
   26812:	2430      	movs	r4, #48	; 0x30
   26814:	2f00      	cmp	r7, #0
   26816:	d1ad      	bne.n	26774 <_strtol_l.isra.0+0x60>
   26818:	3708      	adds	r7, #8
   2681a:	e7ab      	b.n	26774 <_strtol_l.isra.0+0x60>
   2681c:	7fffffff 	.word	0x7fffffff

00026820 <strtol>:
   26820:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26822:	0013      	movs	r3, r2
   26824:	4a06      	ldr	r2, [pc, #24]	; (26840 <strtol+0x20>)
   26826:	0005      	movs	r5, r0
   26828:	6810      	ldr	r0, [r2, #0]
   2682a:	6a04      	ldr	r4, [r0, #32]
   2682c:	2c00      	cmp	r4, #0
   2682e:	d100      	bne.n	26832 <strtol+0x12>
   26830:	4c04      	ldr	r4, [pc, #16]	; (26844 <strtol+0x24>)
   26832:	000a      	movs	r2, r1
   26834:	9400      	str	r4, [sp, #0]
   26836:	0029      	movs	r1, r5
   26838:	f7ff ff6c 	bl	26714 <_strtol_l.isra.0>
   2683c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2683e:	46c0      	nop			; (mov r8, r8)
   26840:	200000dc 	.word	0x200000dc
   26844:	20000140 	.word	0x20000140

00026848 <_vsniprintf_r>:
   26848:	b530      	push	{r4, r5, lr}
   2684a:	0014      	movs	r4, r2
   2684c:	b09b      	sub	sp, #108	; 0x6c
   2684e:	0005      	movs	r5, r0
   26850:	001a      	movs	r2, r3
   26852:	2c00      	cmp	r4, #0
   26854:	da05      	bge.n	26862 <_vsniprintf_r+0x1a>
   26856:	238b      	movs	r3, #139	; 0x8b
   26858:	6003      	str	r3, [r0, #0]
   2685a:	2001      	movs	r0, #1
   2685c:	4240      	negs	r0, r0
   2685e:	b01b      	add	sp, #108	; 0x6c
   26860:	bd30      	pop	{r4, r5, pc}
   26862:	2382      	movs	r3, #130	; 0x82
   26864:	4668      	mov	r0, sp
   26866:	009b      	lsls	r3, r3, #2
   26868:	8183      	strh	r3, [r0, #12]
   2686a:	2300      	movs	r3, #0
   2686c:	9100      	str	r1, [sp, #0]
   2686e:	9104      	str	r1, [sp, #16]
   26870:	429c      	cmp	r4, r3
   26872:	d000      	beq.n	26876 <_vsniprintf_r+0x2e>
   26874:	1e63      	subs	r3, r4, #1
   26876:	9302      	str	r3, [sp, #8]
   26878:	9305      	str	r3, [sp, #20]
   2687a:	2301      	movs	r3, #1
   2687c:	4669      	mov	r1, sp
   2687e:	425b      	negs	r3, r3
   26880:	81cb      	strh	r3, [r1, #14]
   26882:	0028      	movs	r0, r5
   26884:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   26886:	f000 fb63 	bl	26f50 <_svfiprintf_r>
   2688a:	1c43      	adds	r3, r0, #1
   2688c:	da01      	bge.n	26892 <_vsniprintf_r+0x4a>
   2688e:	238b      	movs	r3, #139	; 0x8b
   26890:	602b      	str	r3, [r5, #0]
   26892:	2c00      	cmp	r4, #0
   26894:	d0e3      	beq.n	2685e <_vsniprintf_r+0x16>
   26896:	2300      	movs	r3, #0
   26898:	9a00      	ldr	r2, [sp, #0]
   2689a:	7013      	strb	r3, [r2, #0]
   2689c:	e7df      	b.n	2685e <_vsniprintf_r+0x16>
	...

000268a0 <vsniprintf>:
   268a0:	b507      	push	{r0, r1, r2, lr}
   268a2:	9300      	str	r3, [sp, #0]
   268a4:	0013      	movs	r3, r2
   268a6:	000a      	movs	r2, r1
   268a8:	0001      	movs	r1, r0
   268aa:	4802      	ldr	r0, [pc, #8]	; (268b4 <vsniprintf+0x14>)
   268ac:	6800      	ldr	r0, [r0, #0]
   268ae:	f7ff ffcb 	bl	26848 <_vsniprintf_r>
   268b2:	bd0e      	pop	{r1, r2, r3, pc}
   268b4:	200000dc 	.word	0x200000dc

000268b8 <__swbuf_r>:
   268b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   268ba:	0005      	movs	r5, r0
   268bc:	000e      	movs	r6, r1
   268be:	0014      	movs	r4, r2
   268c0:	2800      	cmp	r0, #0
   268c2:	d004      	beq.n	268ce <__swbuf_r+0x16>
   268c4:	6983      	ldr	r3, [r0, #24]
   268c6:	2b00      	cmp	r3, #0
   268c8:	d101      	bne.n	268ce <__swbuf_r+0x16>
   268ca:	f000 f9b9 	bl	26c40 <__sinit>
   268ce:	4b22      	ldr	r3, [pc, #136]	; (26958 <__swbuf_r+0xa0>)
   268d0:	429c      	cmp	r4, r3
   268d2:	d12d      	bne.n	26930 <__swbuf_r+0x78>
   268d4:	686c      	ldr	r4, [r5, #4]
   268d6:	69a3      	ldr	r3, [r4, #24]
   268d8:	60a3      	str	r3, [r4, #8]
   268da:	89a3      	ldrh	r3, [r4, #12]
   268dc:	071b      	lsls	r3, r3, #28
   268de:	d531      	bpl.n	26944 <__swbuf_r+0x8c>
   268e0:	6923      	ldr	r3, [r4, #16]
   268e2:	2b00      	cmp	r3, #0
   268e4:	d02e      	beq.n	26944 <__swbuf_r+0x8c>
   268e6:	6823      	ldr	r3, [r4, #0]
   268e8:	6922      	ldr	r2, [r4, #16]
   268ea:	b2f7      	uxtb	r7, r6
   268ec:	1a98      	subs	r0, r3, r2
   268ee:	6963      	ldr	r3, [r4, #20]
   268f0:	b2f6      	uxtb	r6, r6
   268f2:	4298      	cmp	r0, r3
   268f4:	db05      	blt.n	26902 <__swbuf_r+0x4a>
   268f6:	0021      	movs	r1, r4
   268f8:	0028      	movs	r0, r5
   268fa:	f000 f933 	bl	26b64 <_fflush_r>
   268fe:	2800      	cmp	r0, #0
   26900:	d126      	bne.n	26950 <__swbuf_r+0x98>
   26902:	68a3      	ldr	r3, [r4, #8]
   26904:	3001      	adds	r0, #1
   26906:	3b01      	subs	r3, #1
   26908:	60a3      	str	r3, [r4, #8]
   2690a:	6823      	ldr	r3, [r4, #0]
   2690c:	1c5a      	adds	r2, r3, #1
   2690e:	6022      	str	r2, [r4, #0]
   26910:	701f      	strb	r7, [r3, #0]
   26912:	6963      	ldr	r3, [r4, #20]
   26914:	4298      	cmp	r0, r3
   26916:	d004      	beq.n	26922 <__swbuf_r+0x6a>
   26918:	89a3      	ldrh	r3, [r4, #12]
   2691a:	07db      	lsls	r3, r3, #31
   2691c:	d51a      	bpl.n	26954 <__swbuf_r+0x9c>
   2691e:	2e0a      	cmp	r6, #10
   26920:	d118      	bne.n	26954 <__swbuf_r+0x9c>
   26922:	0021      	movs	r1, r4
   26924:	0028      	movs	r0, r5
   26926:	f000 f91d 	bl	26b64 <_fflush_r>
   2692a:	2800      	cmp	r0, #0
   2692c:	d012      	beq.n	26954 <__swbuf_r+0x9c>
   2692e:	e00f      	b.n	26950 <__swbuf_r+0x98>
   26930:	4b0a      	ldr	r3, [pc, #40]	; (2695c <__swbuf_r+0xa4>)
   26932:	429c      	cmp	r4, r3
   26934:	d101      	bne.n	2693a <__swbuf_r+0x82>
   26936:	68ac      	ldr	r4, [r5, #8]
   26938:	e7cd      	b.n	268d6 <__swbuf_r+0x1e>
   2693a:	4b09      	ldr	r3, [pc, #36]	; (26960 <__swbuf_r+0xa8>)
   2693c:	429c      	cmp	r4, r3
   2693e:	d1ca      	bne.n	268d6 <__swbuf_r+0x1e>
   26940:	68ec      	ldr	r4, [r5, #12]
   26942:	e7c8      	b.n	268d6 <__swbuf_r+0x1e>
   26944:	0021      	movs	r1, r4
   26946:	0028      	movs	r0, r5
   26948:	f000 f80c 	bl	26964 <__swsetup_r>
   2694c:	2800      	cmp	r0, #0
   2694e:	d0ca      	beq.n	268e6 <__swbuf_r+0x2e>
   26950:	2601      	movs	r6, #1
   26952:	4276      	negs	r6, r6
   26954:	0030      	movs	r0, r6
   26956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26958:	0002afe4 	.word	0x0002afe4
   2695c:	0002b004 	.word	0x0002b004
   26960:	0002afc4 	.word	0x0002afc4

00026964 <__swsetup_r>:
   26964:	4b36      	ldr	r3, [pc, #216]	; (26a40 <__swsetup_r+0xdc>)
   26966:	b570      	push	{r4, r5, r6, lr}
   26968:	681d      	ldr	r5, [r3, #0]
   2696a:	0006      	movs	r6, r0
   2696c:	000c      	movs	r4, r1
   2696e:	2d00      	cmp	r5, #0
   26970:	d005      	beq.n	2697e <__swsetup_r+0x1a>
   26972:	69ab      	ldr	r3, [r5, #24]
   26974:	2b00      	cmp	r3, #0
   26976:	d102      	bne.n	2697e <__swsetup_r+0x1a>
   26978:	0028      	movs	r0, r5
   2697a:	f000 f961 	bl	26c40 <__sinit>
   2697e:	4b31      	ldr	r3, [pc, #196]	; (26a44 <__swsetup_r+0xe0>)
   26980:	429c      	cmp	r4, r3
   26982:	d10f      	bne.n	269a4 <__swsetup_r+0x40>
   26984:	686c      	ldr	r4, [r5, #4]
   26986:	230c      	movs	r3, #12
   26988:	5ee2      	ldrsh	r2, [r4, r3]
   2698a:	b293      	uxth	r3, r2
   2698c:	0719      	lsls	r1, r3, #28
   2698e:	d42d      	bmi.n	269ec <__swsetup_r+0x88>
   26990:	06d9      	lsls	r1, r3, #27
   26992:	d411      	bmi.n	269b8 <__swsetup_r+0x54>
   26994:	2309      	movs	r3, #9
   26996:	2001      	movs	r0, #1
   26998:	6033      	str	r3, [r6, #0]
   2699a:	3337      	adds	r3, #55	; 0x37
   2699c:	4313      	orrs	r3, r2
   2699e:	81a3      	strh	r3, [r4, #12]
   269a0:	4240      	negs	r0, r0
   269a2:	bd70      	pop	{r4, r5, r6, pc}
   269a4:	4b28      	ldr	r3, [pc, #160]	; (26a48 <__swsetup_r+0xe4>)
   269a6:	429c      	cmp	r4, r3
   269a8:	d101      	bne.n	269ae <__swsetup_r+0x4a>
   269aa:	68ac      	ldr	r4, [r5, #8]
   269ac:	e7eb      	b.n	26986 <__swsetup_r+0x22>
   269ae:	4b27      	ldr	r3, [pc, #156]	; (26a4c <__swsetup_r+0xe8>)
   269b0:	429c      	cmp	r4, r3
   269b2:	d1e8      	bne.n	26986 <__swsetup_r+0x22>
   269b4:	68ec      	ldr	r4, [r5, #12]
   269b6:	e7e6      	b.n	26986 <__swsetup_r+0x22>
   269b8:	075b      	lsls	r3, r3, #29
   269ba:	d513      	bpl.n	269e4 <__swsetup_r+0x80>
   269bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   269be:	2900      	cmp	r1, #0
   269c0:	d008      	beq.n	269d4 <__swsetup_r+0x70>
   269c2:	0023      	movs	r3, r4
   269c4:	3344      	adds	r3, #68	; 0x44
   269c6:	4299      	cmp	r1, r3
   269c8:	d002      	beq.n	269d0 <__swsetup_r+0x6c>
   269ca:	0030      	movs	r0, r6
   269cc:	f7ff fc4a 	bl	26264 <_free_r>
   269d0:	2300      	movs	r3, #0
   269d2:	6363      	str	r3, [r4, #52]	; 0x34
   269d4:	2224      	movs	r2, #36	; 0x24
   269d6:	89a3      	ldrh	r3, [r4, #12]
   269d8:	4393      	bics	r3, r2
   269da:	81a3      	strh	r3, [r4, #12]
   269dc:	2300      	movs	r3, #0
   269de:	6063      	str	r3, [r4, #4]
   269e0:	6923      	ldr	r3, [r4, #16]
   269e2:	6023      	str	r3, [r4, #0]
   269e4:	2308      	movs	r3, #8
   269e6:	89a2      	ldrh	r2, [r4, #12]
   269e8:	4313      	orrs	r3, r2
   269ea:	81a3      	strh	r3, [r4, #12]
   269ec:	6923      	ldr	r3, [r4, #16]
   269ee:	2b00      	cmp	r3, #0
   269f0:	d10b      	bne.n	26a0a <__swsetup_r+0xa6>
   269f2:	21a0      	movs	r1, #160	; 0xa0
   269f4:	2280      	movs	r2, #128	; 0x80
   269f6:	89a3      	ldrh	r3, [r4, #12]
   269f8:	0089      	lsls	r1, r1, #2
   269fa:	0092      	lsls	r2, r2, #2
   269fc:	400b      	ands	r3, r1
   269fe:	4293      	cmp	r3, r2
   26a00:	d003      	beq.n	26a0a <__swsetup_r+0xa6>
   26a02:	0021      	movs	r1, r4
   26a04:	0030      	movs	r0, r6
   26a06:	f000 f9e9 	bl	26ddc <__smakebuf_r>
   26a0a:	2301      	movs	r3, #1
   26a0c:	89a2      	ldrh	r2, [r4, #12]
   26a0e:	4013      	ands	r3, r2
   26a10:	d011      	beq.n	26a36 <__swsetup_r+0xd2>
   26a12:	2300      	movs	r3, #0
   26a14:	60a3      	str	r3, [r4, #8]
   26a16:	6963      	ldr	r3, [r4, #20]
   26a18:	425b      	negs	r3, r3
   26a1a:	61a3      	str	r3, [r4, #24]
   26a1c:	2000      	movs	r0, #0
   26a1e:	6923      	ldr	r3, [r4, #16]
   26a20:	4283      	cmp	r3, r0
   26a22:	d1be      	bne.n	269a2 <__swsetup_r+0x3e>
   26a24:	230c      	movs	r3, #12
   26a26:	5ee2      	ldrsh	r2, [r4, r3]
   26a28:	0613      	lsls	r3, r2, #24
   26a2a:	d5ba      	bpl.n	269a2 <__swsetup_r+0x3e>
   26a2c:	2340      	movs	r3, #64	; 0x40
   26a2e:	4313      	orrs	r3, r2
   26a30:	81a3      	strh	r3, [r4, #12]
   26a32:	3801      	subs	r0, #1
   26a34:	e7b5      	b.n	269a2 <__swsetup_r+0x3e>
   26a36:	0792      	lsls	r2, r2, #30
   26a38:	d400      	bmi.n	26a3c <__swsetup_r+0xd8>
   26a3a:	6963      	ldr	r3, [r4, #20]
   26a3c:	60a3      	str	r3, [r4, #8]
   26a3e:	e7ed      	b.n	26a1c <__swsetup_r+0xb8>
   26a40:	200000dc 	.word	0x200000dc
   26a44:	0002afe4 	.word	0x0002afe4
   26a48:	0002b004 	.word	0x0002b004
   26a4c:	0002afc4 	.word	0x0002afc4

00026a50 <__sflush_r>:
   26a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26a52:	898a      	ldrh	r2, [r1, #12]
   26a54:	0005      	movs	r5, r0
   26a56:	000c      	movs	r4, r1
   26a58:	0713      	lsls	r3, r2, #28
   26a5a:	d460      	bmi.n	26b1e <__sflush_r+0xce>
   26a5c:	684b      	ldr	r3, [r1, #4]
   26a5e:	2b00      	cmp	r3, #0
   26a60:	dc04      	bgt.n	26a6c <__sflush_r+0x1c>
   26a62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   26a64:	2b00      	cmp	r3, #0
   26a66:	dc01      	bgt.n	26a6c <__sflush_r+0x1c>
   26a68:	2000      	movs	r0, #0
   26a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26a6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26a6e:	2f00      	cmp	r7, #0
   26a70:	d0fa      	beq.n	26a68 <__sflush_r+0x18>
   26a72:	2300      	movs	r3, #0
   26a74:	682e      	ldr	r6, [r5, #0]
   26a76:	602b      	str	r3, [r5, #0]
   26a78:	2380      	movs	r3, #128	; 0x80
   26a7a:	015b      	lsls	r3, r3, #5
   26a7c:	401a      	ands	r2, r3
   26a7e:	d034      	beq.n	26aea <__sflush_r+0x9a>
   26a80:	6d60      	ldr	r0, [r4, #84]	; 0x54
   26a82:	89a3      	ldrh	r3, [r4, #12]
   26a84:	075b      	lsls	r3, r3, #29
   26a86:	d506      	bpl.n	26a96 <__sflush_r+0x46>
   26a88:	6863      	ldr	r3, [r4, #4]
   26a8a:	1ac0      	subs	r0, r0, r3
   26a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26a8e:	2b00      	cmp	r3, #0
   26a90:	d001      	beq.n	26a96 <__sflush_r+0x46>
   26a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26a94:	1ac0      	subs	r0, r0, r3
   26a96:	0002      	movs	r2, r0
   26a98:	6a21      	ldr	r1, [r4, #32]
   26a9a:	2300      	movs	r3, #0
   26a9c:	0028      	movs	r0, r5
   26a9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26aa0:	47b8      	blx	r7
   26aa2:	89a1      	ldrh	r1, [r4, #12]
   26aa4:	1c43      	adds	r3, r0, #1
   26aa6:	d106      	bne.n	26ab6 <__sflush_r+0x66>
   26aa8:	682b      	ldr	r3, [r5, #0]
   26aaa:	2b1d      	cmp	r3, #29
   26aac:	d831      	bhi.n	26b12 <__sflush_r+0xc2>
   26aae:	4a2c      	ldr	r2, [pc, #176]	; (26b60 <__sflush_r+0x110>)
   26ab0:	40da      	lsrs	r2, r3
   26ab2:	07d3      	lsls	r3, r2, #31
   26ab4:	d52d      	bpl.n	26b12 <__sflush_r+0xc2>
   26ab6:	2300      	movs	r3, #0
   26ab8:	6063      	str	r3, [r4, #4]
   26aba:	6923      	ldr	r3, [r4, #16]
   26abc:	6023      	str	r3, [r4, #0]
   26abe:	04cb      	lsls	r3, r1, #19
   26ac0:	d505      	bpl.n	26ace <__sflush_r+0x7e>
   26ac2:	1c43      	adds	r3, r0, #1
   26ac4:	d102      	bne.n	26acc <__sflush_r+0x7c>
   26ac6:	682b      	ldr	r3, [r5, #0]
   26ac8:	2b00      	cmp	r3, #0
   26aca:	d100      	bne.n	26ace <__sflush_r+0x7e>
   26acc:	6560      	str	r0, [r4, #84]	; 0x54
   26ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26ad0:	602e      	str	r6, [r5, #0]
   26ad2:	2900      	cmp	r1, #0
   26ad4:	d0c8      	beq.n	26a68 <__sflush_r+0x18>
   26ad6:	0023      	movs	r3, r4
   26ad8:	3344      	adds	r3, #68	; 0x44
   26ada:	4299      	cmp	r1, r3
   26adc:	d002      	beq.n	26ae4 <__sflush_r+0x94>
   26ade:	0028      	movs	r0, r5
   26ae0:	f7ff fbc0 	bl	26264 <_free_r>
   26ae4:	2000      	movs	r0, #0
   26ae6:	6360      	str	r0, [r4, #52]	; 0x34
   26ae8:	e7bf      	b.n	26a6a <__sflush_r+0x1a>
   26aea:	2301      	movs	r3, #1
   26aec:	6a21      	ldr	r1, [r4, #32]
   26aee:	0028      	movs	r0, r5
   26af0:	47b8      	blx	r7
   26af2:	1c43      	adds	r3, r0, #1
   26af4:	d1c5      	bne.n	26a82 <__sflush_r+0x32>
   26af6:	682b      	ldr	r3, [r5, #0]
   26af8:	2b00      	cmp	r3, #0
   26afa:	d0c2      	beq.n	26a82 <__sflush_r+0x32>
   26afc:	2b1d      	cmp	r3, #29
   26afe:	d001      	beq.n	26b04 <__sflush_r+0xb4>
   26b00:	2b16      	cmp	r3, #22
   26b02:	d101      	bne.n	26b08 <__sflush_r+0xb8>
   26b04:	602e      	str	r6, [r5, #0]
   26b06:	e7af      	b.n	26a68 <__sflush_r+0x18>
   26b08:	2340      	movs	r3, #64	; 0x40
   26b0a:	89a2      	ldrh	r2, [r4, #12]
   26b0c:	4313      	orrs	r3, r2
   26b0e:	81a3      	strh	r3, [r4, #12]
   26b10:	e7ab      	b.n	26a6a <__sflush_r+0x1a>
   26b12:	2340      	movs	r3, #64	; 0x40
   26b14:	430b      	orrs	r3, r1
   26b16:	2001      	movs	r0, #1
   26b18:	81a3      	strh	r3, [r4, #12]
   26b1a:	4240      	negs	r0, r0
   26b1c:	e7a5      	b.n	26a6a <__sflush_r+0x1a>
   26b1e:	690f      	ldr	r7, [r1, #16]
   26b20:	2f00      	cmp	r7, #0
   26b22:	d0a1      	beq.n	26a68 <__sflush_r+0x18>
   26b24:	680b      	ldr	r3, [r1, #0]
   26b26:	600f      	str	r7, [r1, #0]
   26b28:	1bdb      	subs	r3, r3, r7
   26b2a:	9301      	str	r3, [sp, #4]
   26b2c:	2300      	movs	r3, #0
   26b2e:	0792      	lsls	r2, r2, #30
   26b30:	d100      	bne.n	26b34 <__sflush_r+0xe4>
   26b32:	694b      	ldr	r3, [r1, #20]
   26b34:	60a3      	str	r3, [r4, #8]
   26b36:	9b01      	ldr	r3, [sp, #4]
   26b38:	2b00      	cmp	r3, #0
   26b3a:	dc00      	bgt.n	26b3e <__sflush_r+0xee>
   26b3c:	e794      	b.n	26a68 <__sflush_r+0x18>
   26b3e:	9b01      	ldr	r3, [sp, #4]
   26b40:	003a      	movs	r2, r7
   26b42:	6a21      	ldr	r1, [r4, #32]
   26b44:	0028      	movs	r0, r5
   26b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   26b48:	47b0      	blx	r6
   26b4a:	2800      	cmp	r0, #0
   26b4c:	dc03      	bgt.n	26b56 <__sflush_r+0x106>
   26b4e:	2340      	movs	r3, #64	; 0x40
   26b50:	89a2      	ldrh	r2, [r4, #12]
   26b52:	4313      	orrs	r3, r2
   26b54:	e7df      	b.n	26b16 <__sflush_r+0xc6>
   26b56:	9b01      	ldr	r3, [sp, #4]
   26b58:	183f      	adds	r7, r7, r0
   26b5a:	1a1b      	subs	r3, r3, r0
   26b5c:	9301      	str	r3, [sp, #4]
   26b5e:	e7ea      	b.n	26b36 <__sflush_r+0xe6>
   26b60:	20400001 	.word	0x20400001

00026b64 <_fflush_r>:
   26b64:	690b      	ldr	r3, [r1, #16]
   26b66:	b570      	push	{r4, r5, r6, lr}
   26b68:	0005      	movs	r5, r0
   26b6a:	000c      	movs	r4, r1
   26b6c:	2b00      	cmp	r3, #0
   26b6e:	d101      	bne.n	26b74 <_fflush_r+0x10>
   26b70:	2000      	movs	r0, #0
   26b72:	bd70      	pop	{r4, r5, r6, pc}
   26b74:	2800      	cmp	r0, #0
   26b76:	d004      	beq.n	26b82 <_fflush_r+0x1e>
   26b78:	6983      	ldr	r3, [r0, #24]
   26b7a:	2b00      	cmp	r3, #0
   26b7c:	d101      	bne.n	26b82 <_fflush_r+0x1e>
   26b7e:	f000 f85f 	bl	26c40 <__sinit>
   26b82:	4b0b      	ldr	r3, [pc, #44]	; (26bb0 <_fflush_r+0x4c>)
   26b84:	429c      	cmp	r4, r3
   26b86:	d109      	bne.n	26b9c <_fflush_r+0x38>
   26b88:	686c      	ldr	r4, [r5, #4]
   26b8a:	220c      	movs	r2, #12
   26b8c:	5ea3      	ldrsh	r3, [r4, r2]
   26b8e:	2b00      	cmp	r3, #0
   26b90:	d0ee      	beq.n	26b70 <_fflush_r+0xc>
   26b92:	0021      	movs	r1, r4
   26b94:	0028      	movs	r0, r5
   26b96:	f7ff ff5b 	bl	26a50 <__sflush_r>
   26b9a:	e7ea      	b.n	26b72 <_fflush_r+0xe>
   26b9c:	4b05      	ldr	r3, [pc, #20]	; (26bb4 <_fflush_r+0x50>)
   26b9e:	429c      	cmp	r4, r3
   26ba0:	d101      	bne.n	26ba6 <_fflush_r+0x42>
   26ba2:	68ac      	ldr	r4, [r5, #8]
   26ba4:	e7f1      	b.n	26b8a <_fflush_r+0x26>
   26ba6:	4b04      	ldr	r3, [pc, #16]	; (26bb8 <_fflush_r+0x54>)
   26ba8:	429c      	cmp	r4, r3
   26baa:	d1ee      	bne.n	26b8a <_fflush_r+0x26>
   26bac:	68ec      	ldr	r4, [r5, #12]
   26bae:	e7ec      	b.n	26b8a <_fflush_r+0x26>
   26bb0:	0002afe4 	.word	0x0002afe4
   26bb4:	0002b004 	.word	0x0002b004
   26bb8:	0002afc4 	.word	0x0002afc4

00026bbc <_cleanup_r>:
   26bbc:	b510      	push	{r4, lr}
   26bbe:	4902      	ldr	r1, [pc, #8]	; (26bc8 <_cleanup_r+0xc>)
   26bc0:	f000 f8b2 	bl	26d28 <_fwalk_reent>
   26bc4:	bd10      	pop	{r4, pc}
   26bc6:	46c0      	nop			; (mov r8, r8)
   26bc8:	00026b65 	.word	0x00026b65

00026bcc <std.isra.0>:
   26bcc:	2300      	movs	r3, #0
   26bce:	b510      	push	{r4, lr}
   26bd0:	0004      	movs	r4, r0
   26bd2:	6003      	str	r3, [r0, #0]
   26bd4:	6043      	str	r3, [r0, #4]
   26bd6:	6083      	str	r3, [r0, #8]
   26bd8:	8181      	strh	r1, [r0, #12]
   26bda:	6643      	str	r3, [r0, #100]	; 0x64
   26bdc:	81c2      	strh	r2, [r0, #14]
   26bde:	6103      	str	r3, [r0, #16]
   26be0:	6143      	str	r3, [r0, #20]
   26be2:	6183      	str	r3, [r0, #24]
   26be4:	0019      	movs	r1, r3
   26be6:	2208      	movs	r2, #8
   26be8:	305c      	adds	r0, #92	; 0x5c
   26bea:	f7ff fb32 	bl	26252 <memset>
   26bee:	4b05      	ldr	r3, [pc, #20]	; (26c04 <std.isra.0+0x38>)
   26bf0:	6224      	str	r4, [r4, #32]
   26bf2:	6263      	str	r3, [r4, #36]	; 0x24
   26bf4:	4b04      	ldr	r3, [pc, #16]	; (26c08 <std.isra.0+0x3c>)
   26bf6:	62a3      	str	r3, [r4, #40]	; 0x28
   26bf8:	4b04      	ldr	r3, [pc, #16]	; (26c0c <std.isra.0+0x40>)
   26bfa:	62e3      	str	r3, [r4, #44]	; 0x2c
   26bfc:	4b04      	ldr	r3, [pc, #16]	; (26c10 <std.isra.0+0x44>)
   26bfe:	6323      	str	r3, [r4, #48]	; 0x30
   26c00:	bd10      	pop	{r4, pc}
   26c02:	46c0      	nop			; (mov r8, r8)
   26c04:	00027469 	.word	0x00027469
   26c08:	00027491 	.word	0x00027491
   26c0c:	000274c9 	.word	0x000274c9
   26c10:	000274f5 	.word	0x000274f5

00026c14 <__sfmoreglue>:
   26c14:	b570      	push	{r4, r5, r6, lr}
   26c16:	2568      	movs	r5, #104	; 0x68
   26c18:	1e4a      	subs	r2, r1, #1
   26c1a:	4355      	muls	r5, r2
   26c1c:	000e      	movs	r6, r1
   26c1e:	0029      	movs	r1, r5
   26c20:	3174      	adds	r1, #116	; 0x74
   26c22:	f7ff fb69 	bl	262f8 <_malloc_r>
   26c26:	1e04      	subs	r4, r0, #0
   26c28:	d008      	beq.n	26c3c <__sfmoreglue+0x28>
   26c2a:	2100      	movs	r1, #0
   26c2c:	002a      	movs	r2, r5
   26c2e:	6001      	str	r1, [r0, #0]
   26c30:	6046      	str	r6, [r0, #4]
   26c32:	300c      	adds	r0, #12
   26c34:	60a0      	str	r0, [r4, #8]
   26c36:	3268      	adds	r2, #104	; 0x68
   26c38:	f7ff fb0b 	bl	26252 <memset>
   26c3c:	0020      	movs	r0, r4
   26c3e:	bd70      	pop	{r4, r5, r6, pc}

00026c40 <__sinit>:
   26c40:	6983      	ldr	r3, [r0, #24]
   26c42:	b513      	push	{r0, r1, r4, lr}
   26c44:	0004      	movs	r4, r0
   26c46:	2b00      	cmp	r3, #0
   26c48:	d128      	bne.n	26c9c <__sinit+0x5c>
   26c4a:	6483      	str	r3, [r0, #72]	; 0x48
   26c4c:	64c3      	str	r3, [r0, #76]	; 0x4c
   26c4e:	6503      	str	r3, [r0, #80]	; 0x50
   26c50:	4b13      	ldr	r3, [pc, #76]	; (26ca0 <__sinit+0x60>)
   26c52:	4a14      	ldr	r2, [pc, #80]	; (26ca4 <__sinit+0x64>)
   26c54:	681b      	ldr	r3, [r3, #0]
   26c56:	6282      	str	r2, [r0, #40]	; 0x28
   26c58:	9301      	str	r3, [sp, #4]
   26c5a:	4298      	cmp	r0, r3
   26c5c:	d101      	bne.n	26c62 <__sinit+0x22>
   26c5e:	2301      	movs	r3, #1
   26c60:	6183      	str	r3, [r0, #24]
   26c62:	0020      	movs	r0, r4
   26c64:	f000 f820 	bl	26ca8 <__sfp>
   26c68:	6060      	str	r0, [r4, #4]
   26c6a:	0020      	movs	r0, r4
   26c6c:	f000 f81c 	bl	26ca8 <__sfp>
   26c70:	60a0      	str	r0, [r4, #8]
   26c72:	0020      	movs	r0, r4
   26c74:	f000 f818 	bl	26ca8 <__sfp>
   26c78:	2200      	movs	r2, #0
   26c7a:	60e0      	str	r0, [r4, #12]
   26c7c:	2104      	movs	r1, #4
   26c7e:	6860      	ldr	r0, [r4, #4]
   26c80:	f7ff ffa4 	bl	26bcc <std.isra.0>
   26c84:	2201      	movs	r2, #1
   26c86:	2109      	movs	r1, #9
   26c88:	68a0      	ldr	r0, [r4, #8]
   26c8a:	f7ff ff9f 	bl	26bcc <std.isra.0>
   26c8e:	2202      	movs	r2, #2
   26c90:	2112      	movs	r1, #18
   26c92:	68e0      	ldr	r0, [r4, #12]
   26c94:	f7ff ff9a 	bl	26bcc <std.isra.0>
   26c98:	2301      	movs	r3, #1
   26c9a:	61a3      	str	r3, [r4, #24]
   26c9c:	bd13      	pop	{r0, r1, r4, pc}
   26c9e:	46c0      	nop			; (mov r8, r8)
   26ca0:	0002afc0 	.word	0x0002afc0
   26ca4:	00026bbd 	.word	0x00026bbd

00026ca8 <__sfp>:
   26ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26caa:	4b1e      	ldr	r3, [pc, #120]	; (26d24 <__sfp+0x7c>)
   26cac:	0007      	movs	r7, r0
   26cae:	681e      	ldr	r6, [r3, #0]
   26cb0:	69b3      	ldr	r3, [r6, #24]
   26cb2:	2b00      	cmp	r3, #0
   26cb4:	d102      	bne.n	26cbc <__sfp+0x14>
   26cb6:	0030      	movs	r0, r6
   26cb8:	f7ff ffc2 	bl	26c40 <__sinit>
   26cbc:	3648      	adds	r6, #72	; 0x48
   26cbe:	68b4      	ldr	r4, [r6, #8]
   26cc0:	6873      	ldr	r3, [r6, #4]
   26cc2:	3b01      	subs	r3, #1
   26cc4:	d504      	bpl.n	26cd0 <__sfp+0x28>
   26cc6:	6833      	ldr	r3, [r6, #0]
   26cc8:	2b00      	cmp	r3, #0
   26cca:	d007      	beq.n	26cdc <__sfp+0x34>
   26ccc:	6836      	ldr	r6, [r6, #0]
   26cce:	e7f6      	b.n	26cbe <__sfp+0x16>
   26cd0:	220c      	movs	r2, #12
   26cd2:	5ea5      	ldrsh	r5, [r4, r2]
   26cd4:	2d00      	cmp	r5, #0
   26cd6:	d00d      	beq.n	26cf4 <__sfp+0x4c>
   26cd8:	3468      	adds	r4, #104	; 0x68
   26cda:	e7f2      	b.n	26cc2 <__sfp+0x1a>
   26cdc:	2104      	movs	r1, #4
   26cde:	0038      	movs	r0, r7
   26ce0:	f7ff ff98 	bl	26c14 <__sfmoreglue>
   26ce4:	6030      	str	r0, [r6, #0]
   26ce6:	2800      	cmp	r0, #0
   26ce8:	d1f0      	bne.n	26ccc <__sfp+0x24>
   26cea:	230c      	movs	r3, #12
   26cec:	0004      	movs	r4, r0
   26cee:	603b      	str	r3, [r7, #0]
   26cf0:	0020      	movs	r0, r4
   26cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cf4:	2301      	movs	r3, #1
   26cf6:	0020      	movs	r0, r4
   26cf8:	425b      	negs	r3, r3
   26cfa:	81e3      	strh	r3, [r4, #14]
   26cfc:	3302      	adds	r3, #2
   26cfe:	81a3      	strh	r3, [r4, #12]
   26d00:	6665      	str	r5, [r4, #100]	; 0x64
   26d02:	6025      	str	r5, [r4, #0]
   26d04:	60a5      	str	r5, [r4, #8]
   26d06:	6065      	str	r5, [r4, #4]
   26d08:	6125      	str	r5, [r4, #16]
   26d0a:	6165      	str	r5, [r4, #20]
   26d0c:	61a5      	str	r5, [r4, #24]
   26d0e:	2208      	movs	r2, #8
   26d10:	0029      	movs	r1, r5
   26d12:	305c      	adds	r0, #92	; 0x5c
   26d14:	f7ff fa9d 	bl	26252 <memset>
   26d18:	6365      	str	r5, [r4, #52]	; 0x34
   26d1a:	63a5      	str	r5, [r4, #56]	; 0x38
   26d1c:	64a5      	str	r5, [r4, #72]	; 0x48
   26d1e:	64e5      	str	r5, [r4, #76]	; 0x4c
   26d20:	e7e6      	b.n	26cf0 <__sfp+0x48>
   26d22:	46c0      	nop			; (mov r8, r8)
   26d24:	0002afc0 	.word	0x0002afc0

00026d28 <_fwalk_reent>:
   26d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26d2a:	0004      	movs	r4, r0
   26d2c:	0007      	movs	r7, r0
   26d2e:	2600      	movs	r6, #0
   26d30:	9101      	str	r1, [sp, #4]
   26d32:	3448      	adds	r4, #72	; 0x48
   26d34:	2c00      	cmp	r4, #0
   26d36:	d101      	bne.n	26d3c <_fwalk_reent+0x14>
   26d38:	0030      	movs	r0, r6
   26d3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26d3c:	6863      	ldr	r3, [r4, #4]
   26d3e:	68a5      	ldr	r5, [r4, #8]
   26d40:	9300      	str	r3, [sp, #0]
   26d42:	9b00      	ldr	r3, [sp, #0]
   26d44:	3b01      	subs	r3, #1
   26d46:	9300      	str	r3, [sp, #0]
   26d48:	d501      	bpl.n	26d4e <_fwalk_reent+0x26>
   26d4a:	6824      	ldr	r4, [r4, #0]
   26d4c:	e7f2      	b.n	26d34 <_fwalk_reent+0xc>
   26d4e:	89ab      	ldrh	r3, [r5, #12]
   26d50:	2b01      	cmp	r3, #1
   26d52:	d908      	bls.n	26d66 <_fwalk_reent+0x3e>
   26d54:	220e      	movs	r2, #14
   26d56:	5eab      	ldrsh	r3, [r5, r2]
   26d58:	3301      	adds	r3, #1
   26d5a:	d004      	beq.n	26d66 <_fwalk_reent+0x3e>
   26d5c:	0029      	movs	r1, r5
   26d5e:	0038      	movs	r0, r7
   26d60:	9b01      	ldr	r3, [sp, #4]
   26d62:	4798      	blx	r3
   26d64:	4306      	orrs	r6, r0
   26d66:	3568      	adds	r5, #104	; 0x68
   26d68:	e7eb      	b.n	26d42 <_fwalk_reent+0x1a>

00026d6a <__locale_ctype_ptr_l>:
   26d6a:	30ec      	adds	r0, #236	; 0xec
   26d6c:	6800      	ldr	r0, [r0, #0]
   26d6e:	4770      	bx	lr

00026d70 <__locale_ctype_ptr>:
   26d70:	4b04      	ldr	r3, [pc, #16]	; (26d84 <__locale_ctype_ptr+0x14>)
   26d72:	681b      	ldr	r3, [r3, #0]
   26d74:	6a1b      	ldr	r3, [r3, #32]
   26d76:	2b00      	cmp	r3, #0
   26d78:	d100      	bne.n	26d7c <__locale_ctype_ptr+0xc>
   26d7a:	4b03      	ldr	r3, [pc, #12]	; (26d88 <__locale_ctype_ptr+0x18>)
   26d7c:	33ec      	adds	r3, #236	; 0xec
   26d7e:	6818      	ldr	r0, [r3, #0]
   26d80:	4770      	bx	lr
   26d82:	46c0      	nop			; (mov r8, r8)
   26d84:	200000dc 	.word	0x200000dc
   26d88:	20000140 	.word	0x20000140

00026d8c <__swhatbuf_r>:
   26d8c:	b570      	push	{r4, r5, r6, lr}
   26d8e:	000e      	movs	r6, r1
   26d90:	001d      	movs	r5, r3
   26d92:	230e      	movs	r3, #14
   26d94:	5ec9      	ldrsh	r1, [r1, r3]
   26d96:	b090      	sub	sp, #64	; 0x40
   26d98:	0014      	movs	r4, r2
   26d9a:	2900      	cmp	r1, #0
   26d9c:	da07      	bge.n	26dae <__swhatbuf_r+0x22>
   26d9e:	2300      	movs	r3, #0
   26da0:	602b      	str	r3, [r5, #0]
   26da2:	89b3      	ldrh	r3, [r6, #12]
   26da4:	061b      	lsls	r3, r3, #24
   26da6:	d411      	bmi.n	26dcc <__swhatbuf_r+0x40>
   26da8:	2380      	movs	r3, #128	; 0x80
   26daa:	00db      	lsls	r3, r3, #3
   26dac:	e00f      	b.n	26dce <__swhatbuf_r+0x42>
   26dae:	aa01      	add	r2, sp, #4
   26db0:	f000 fbe6 	bl	27580 <_fstat_r>
   26db4:	2800      	cmp	r0, #0
   26db6:	dbf2      	blt.n	26d9e <__swhatbuf_r+0x12>
   26db8:	22f0      	movs	r2, #240	; 0xf0
   26dba:	9b02      	ldr	r3, [sp, #8]
   26dbc:	0212      	lsls	r2, r2, #8
   26dbe:	4013      	ands	r3, r2
   26dc0:	4a05      	ldr	r2, [pc, #20]	; (26dd8 <__swhatbuf_r+0x4c>)
   26dc2:	189b      	adds	r3, r3, r2
   26dc4:	425a      	negs	r2, r3
   26dc6:	4153      	adcs	r3, r2
   26dc8:	602b      	str	r3, [r5, #0]
   26dca:	e7ed      	b.n	26da8 <__swhatbuf_r+0x1c>
   26dcc:	2340      	movs	r3, #64	; 0x40
   26dce:	2000      	movs	r0, #0
   26dd0:	6023      	str	r3, [r4, #0]
   26dd2:	b010      	add	sp, #64	; 0x40
   26dd4:	bd70      	pop	{r4, r5, r6, pc}
   26dd6:	46c0      	nop			; (mov r8, r8)
   26dd8:	ffffe000 	.word	0xffffe000

00026ddc <__smakebuf_r>:
   26ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26dde:	2602      	movs	r6, #2
   26de0:	898b      	ldrh	r3, [r1, #12]
   26de2:	0005      	movs	r5, r0
   26de4:	000c      	movs	r4, r1
   26de6:	4233      	tst	r3, r6
   26de8:	d006      	beq.n	26df8 <__smakebuf_r+0x1c>
   26dea:	0023      	movs	r3, r4
   26dec:	3347      	adds	r3, #71	; 0x47
   26dee:	6023      	str	r3, [r4, #0]
   26df0:	6123      	str	r3, [r4, #16]
   26df2:	2301      	movs	r3, #1
   26df4:	6163      	str	r3, [r4, #20]
   26df6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   26df8:	ab01      	add	r3, sp, #4
   26dfa:	466a      	mov	r2, sp
   26dfc:	f7ff ffc6 	bl	26d8c <__swhatbuf_r>
   26e00:	9900      	ldr	r1, [sp, #0]
   26e02:	0007      	movs	r7, r0
   26e04:	0028      	movs	r0, r5
   26e06:	f7ff fa77 	bl	262f8 <_malloc_r>
   26e0a:	2800      	cmp	r0, #0
   26e0c:	d108      	bne.n	26e20 <__smakebuf_r+0x44>
   26e0e:	220c      	movs	r2, #12
   26e10:	5ea3      	ldrsh	r3, [r4, r2]
   26e12:	059a      	lsls	r2, r3, #22
   26e14:	d4ef      	bmi.n	26df6 <__smakebuf_r+0x1a>
   26e16:	2203      	movs	r2, #3
   26e18:	4393      	bics	r3, r2
   26e1a:	431e      	orrs	r6, r3
   26e1c:	81a6      	strh	r6, [r4, #12]
   26e1e:	e7e4      	b.n	26dea <__smakebuf_r+0xe>
   26e20:	4b0f      	ldr	r3, [pc, #60]	; (26e60 <__smakebuf_r+0x84>)
   26e22:	62ab      	str	r3, [r5, #40]	; 0x28
   26e24:	2380      	movs	r3, #128	; 0x80
   26e26:	89a2      	ldrh	r2, [r4, #12]
   26e28:	6020      	str	r0, [r4, #0]
   26e2a:	4313      	orrs	r3, r2
   26e2c:	81a3      	strh	r3, [r4, #12]
   26e2e:	9b00      	ldr	r3, [sp, #0]
   26e30:	6120      	str	r0, [r4, #16]
   26e32:	6163      	str	r3, [r4, #20]
   26e34:	9b01      	ldr	r3, [sp, #4]
   26e36:	2b00      	cmp	r3, #0
   26e38:	d00d      	beq.n	26e56 <__smakebuf_r+0x7a>
   26e3a:	230e      	movs	r3, #14
   26e3c:	5ee1      	ldrsh	r1, [r4, r3]
   26e3e:	0028      	movs	r0, r5
   26e40:	f000 fbb0 	bl	275a4 <_isatty_r>
   26e44:	2800      	cmp	r0, #0
   26e46:	d006      	beq.n	26e56 <__smakebuf_r+0x7a>
   26e48:	2203      	movs	r2, #3
   26e4a:	89a3      	ldrh	r3, [r4, #12]
   26e4c:	4393      	bics	r3, r2
   26e4e:	001a      	movs	r2, r3
   26e50:	2301      	movs	r3, #1
   26e52:	4313      	orrs	r3, r2
   26e54:	81a3      	strh	r3, [r4, #12]
   26e56:	89a0      	ldrh	r0, [r4, #12]
   26e58:	4338      	orrs	r0, r7
   26e5a:	81a0      	strh	r0, [r4, #12]
   26e5c:	e7cb      	b.n	26df6 <__smakebuf_r+0x1a>
   26e5e:	46c0      	nop			; (mov r8, r8)
   26e60:	00026bbd 	.word	0x00026bbd

00026e64 <__ascii_mbtowc>:
   26e64:	b082      	sub	sp, #8
   26e66:	2900      	cmp	r1, #0
   26e68:	d100      	bne.n	26e6c <__ascii_mbtowc+0x8>
   26e6a:	a901      	add	r1, sp, #4
   26e6c:	1e10      	subs	r0, r2, #0
   26e6e:	d006      	beq.n	26e7e <__ascii_mbtowc+0x1a>
   26e70:	2b00      	cmp	r3, #0
   26e72:	d006      	beq.n	26e82 <__ascii_mbtowc+0x1e>
   26e74:	7813      	ldrb	r3, [r2, #0]
   26e76:	600b      	str	r3, [r1, #0]
   26e78:	7810      	ldrb	r0, [r2, #0]
   26e7a:	1e43      	subs	r3, r0, #1
   26e7c:	4198      	sbcs	r0, r3
   26e7e:	b002      	add	sp, #8
   26e80:	4770      	bx	lr
   26e82:	2002      	movs	r0, #2
   26e84:	4240      	negs	r0, r0
   26e86:	e7fa      	b.n	26e7e <__ascii_mbtowc+0x1a>

00026e88 <__malloc_lock>:
   26e88:	4770      	bx	lr

00026e8a <__malloc_unlock>:
   26e8a:	4770      	bx	lr

00026e8c <__ssputs_r>:
   26e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e8e:	688e      	ldr	r6, [r1, #8]
   26e90:	b085      	sub	sp, #20
   26e92:	0007      	movs	r7, r0
   26e94:	000c      	movs	r4, r1
   26e96:	9203      	str	r2, [sp, #12]
   26e98:	9301      	str	r3, [sp, #4]
   26e9a:	429e      	cmp	r6, r3
   26e9c:	d839      	bhi.n	26f12 <__ssputs_r+0x86>
   26e9e:	2390      	movs	r3, #144	; 0x90
   26ea0:	898a      	ldrh	r2, [r1, #12]
   26ea2:	00db      	lsls	r3, r3, #3
   26ea4:	421a      	tst	r2, r3
   26ea6:	d034      	beq.n	26f12 <__ssputs_r+0x86>
   26ea8:	2503      	movs	r5, #3
   26eaa:	6909      	ldr	r1, [r1, #16]
   26eac:	6823      	ldr	r3, [r4, #0]
   26eae:	1a5b      	subs	r3, r3, r1
   26eb0:	9302      	str	r3, [sp, #8]
   26eb2:	6963      	ldr	r3, [r4, #20]
   26eb4:	9802      	ldr	r0, [sp, #8]
   26eb6:	435d      	muls	r5, r3
   26eb8:	0feb      	lsrs	r3, r5, #31
   26eba:	195d      	adds	r5, r3, r5
   26ebc:	9b01      	ldr	r3, [sp, #4]
   26ebe:	106d      	asrs	r5, r5, #1
   26ec0:	3301      	adds	r3, #1
   26ec2:	181b      	adds	r3, r3, r0
   26ec4:	42ab      	cmp	r3, r5
   26ec6:	d900      	bls.n	26eca <__ssputs_r+0x3e>
   26ec8:	001d      	movs	r5, r3
   26eca:	0553      	lsls	r3, r2, #21
   26ecc:	d532      	bpl.n	26f34 <__ssputs_r+0xa8>
   26ece:	0029      	movs	r1, r5
   26ed0:	0038      	movs	r0, r7
   26ed2:	f7ff fa11 	bl	262f8 <_malloc_r>
   26ed6:	1e06      	subs	r6, r0, #0
   26ed8:	d109      	bne.n	26eee <__ssputs_r+0x62>
   26eda:	230c      	movs	r3, #12
   26edc:	603b      	str	r3, [r7, #0]
   26ede:	2340      	movs	r3, #64	; 0x40
   26ee0:	2001      	movs	r0, #1
   26ee2:	89a2      	ldrh	r2, [r4, #12]
   26ee4:	4240      	negs	r0, r0
   26ee6:	4313      	orrs	r3, r2
   26ee8:	81a3      	strh	r3, [r4, #12]
   26eea:	b005      	add	sp, #20
   26eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26eee:	9a02      	ldr	r2, [sp, #8]
   26ef0:	6921      	ldr	r1, [r4, #16]
   26ef2:	f7ff f993 	bl	2621c <memcpy>
   26ef6:	89a3      	ldrh	r3, [r4, #12]
   26ef8:	4a14      	ldr	r2, [pc, #80]	; (26f4c <__ssputs_r+0xc0>)
   26efa:	401a      	ands	r2, r3
   26efc:	2380      	movs	r3, #128	; 0x80
   26efe:	4313      	orrs	r3, r2
   26f00:	81a3      	strh	r3, [r4, #12]
   26f02:	9b02      	ldr	r3, [sp, #8]
   26f04:	6126      	str	r6, [r4, #16]
   26f06:	18f6      	adds	r6, r6, r3
   26f08:	6026      	str	r6, [r4, #0]
   26f0a:	6165      	str	r5, [r4, #20]
   26f0c:	9e01      	ldr	r6, [sp, #4]
   26f0e:	1aed      	subs	r5, r5, r3
   26f10:	60a5      	str	r5, [r4, #8]
   26f12:	9b01      	ldr	r3, [sp, #4]
   26f14:	42b3      	cmp	r3, r6
   26f16:	d200      	bcs.n	26f1a <__ssputs_r+0x8e>
   26f18:	001e      	movs	r6, r3
   26f1a:	0032      	movs	r2, r6
   26f1c:	9903      	ldr	r1, [sp, #12]
   26f1e:	6820      	ldr	r0, [r4, #0]
   26f20:	f7ff f985 	bl	2622e <memmove>
   26f24:	68a3      	ldr	r3, [r4, #8]
   26f26:	2000      	movs	r0, #0
   26f28:	1b9b      	subs	r3, r3, r6
   26f2a:	60a3      	str	r3, [r4, #8]
   26f2c:	6823      	ldr	r3, [r4, #0]
   26f2e:	199e      	adds	r6, r3, r6
   26f30:	6026      	str	r6, [r4, #0]
   26f32:	e7da      	b.n	26eea <__ssputs_r+0x5e>
   26f34:	002a      	movs	r2, r5
   26f36:	0038      	movs	r0, r7
   26f38:	f000 fb65 	bl	27606 <_realloc_r>
   26f3c:	1e06      	subs	r6, r0, #0
   26f3e:	d1e0      	bne.n	26f02 <__ssputs_r+0x76>
   26f40:	6921      	ldr	r1, [r4, #16]
   26f42:	0038      	movs	r0, r7
   26f44:	f7ff f98e 	bl	26264 <_free_r>
   26f48:	e7c7      	b.n	26eda <__ssputs_r+0x4e>
   26f4a:	46c0      	nop			; (mov r8, r8)
   26f4c:	fffffb7f 	.word	0xfffffb7f

00026f50 <_svfiprintf_r>:
   26f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f52:	b09f      	sub	sp, #124	; 0x7c
   26f54:	9002      	str	r0, [sp, #8]
   26f56:	9305      	str	r3, [sp, #20]
   26f58:	898b      	ldrh	r3, [r1, #12]
   26f5a:	000f      	movs	r7, r1
   26f5c:	0016      	movs	r6, r2
   26f5e:	061b      	lsls	r3, r3, #24
   26f60:	d511      	bpl.n	26f86 <_svfiprintf_r+0x36>
   26f62:	690b      	ldr	r3, [r1, #16]
   26f64:	2b00      	cmp	r3, #0
   26f66:	d10e      	bne.n	26f86 <_svfiprintf_r+0x36>
   26f68:	2140      	movs	r1, #64	; 0x40
   26f6a:	f7ff f9c5 	bl	262f8 <_malloc_r>
   26f6e:	6038      	str	r0, [r7, #0]
   26f70:	6138      	str	r0, [r7, #16]
   26f72:	2800      	cmp	r0, #0
   26f74:	d105      	bne.n	26f82 <_svfiprintf_r+0x32>
   26f76:	230c      	movs	r3, #12
   26f78:	9a02      	ldr	r2, [sp, #8]
   26f7a:	3801      	subs	r0, #1
   26f7c:	6013      	str	r3, [r2, #0]
   26f7e:	b01f      	add	sp, #124	; 0x7c
   26f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f82:	2340      	movs	r3, #64	; 0x40
   26f84:	617b      	str	r3, [r7, #20]
   26f86:	2300      	movs	r3, #0
   26f88:	ad06      	add	r5, sp, #24
   26f8a:	616b      	str	r3, [r5, #20]
   26f8c:	3320      	adds	r3, #32
   26f8e:	766b      	strb	r3, [r5, #25]
   26f90:	3310      	adds	r3, #16
   26f92:	76ab      	strb	r3, [r5, #26]
   26f94:	0034      	movs	r4, r6
   26f96:	7823      	ldrb	r3, [r4, #0]
   26f98:	2b00      	cmp	r3, #0
   26f9a:	d147      	bne.n	2702c <_svfiprintf_r+0xdc>
   26f9c:	1ba3      	subs	r3, r4, r6
   26f9e:	9304      	str	r3, [sp, #16]
   26fa0:	d00d      	beq.n	26fbe <_svfiprintf_r+0x6e>
   26fa2:	1ba3      	subs	r3, r4, r6
   26fa4:	0032      	movs	r2, r6
   26fa6:	0039      	movs	r1, r7
   26fa8:	9802      	ldr	r0, [sp, #8]
   26faa:	f7ff ff6f 	bl	26e8c <__ssputs_r>
   26fae:	1c43      	adds	r3, r0, #1
   26fb0:	d100      	bne.n	26fb4 <_svfiprintf_r+0x64>
   26fb2:	e0b5      	b.n	27120 <_svfiprintf_r+0x1d0>
   26fb4:	696a      	ldr	r2, [r5, #20]
   26fb6:	9b04      	ldr	r3, [sp, #16]
   26fb8:	4694      	mov	ip, r2
   26fba:	4463      	add	r3, ip
   26fbc:	616b      	str	r3, [r5, #20]
   26fbe:	7823      	ldrb	r3, [r4, #0]
   26fc0:	2b00      	cmp	r3, #0
   26fc2:	d100      	bne.n	26fc6 <_svfiprintf_r+0x76>
   26fc4:	e0ac      	b.n	27120 <_svfiprintf_r+0x1d0>
   26fc6:	2201      	movs	r2, #1
   26fc8:	2300      	movs	r3, #0
   26fca:	4252      	negs	r2, r2
   26fcc:	606a      	str	r2, [r5, #4]
   26fce:	a902      	add	r1, sp, #8
   26fd0:	3254      	adds	r2, #84	; 0x54
   26fd2:	1852      	adds	r2, r2, r1
   26fd4:	3401      	adds	r4, #1
   26fd6:	602b      	str	r3, [r5, #0]
   26fd8:	60eb      	str	r3, [r5, #12]
   26fda:	60ab      	str	r3, [r5, #8]
   26fdc:	7013      	strb	r3, [r2, #0]
   26fde:	65ab      	str	r3, [r5, #88]	; 0x58
   26fe0:	4e58      	ldr	r6, [pc, #352]	; (27144 <_svfiprintf_r+0x1f4>)
   26fe2:	2205      	movs	r2, #5
   26fe4:	7821      	ldrb	r1, [r4, #0]
   26fe6:	0030      	movs	r0, r6
   26fe8:	f000 fb02 	bl	275f0 <memchr>
   26fec:	1c62      	adds	r2, r4, #1
   26fee:	2800      	cmp	r0, #0
   26ff0:	d120      	bne.n	27034 <_svfiprintf_r+0xe4>
   26ff2:	6829      	ldr	r1, [r5, #0]
   26ff4:	06cb      	lsls	r3, r1, #27
   26ff6:	d504      	bpl.n	27002 <_svfiprintf_r+0xb2>
   26ff8:	2353      	movs	r3, #83	; 0x53
   26ffa:	ae02      	add	r6, sp, #8
   26ffc:	3020      	adds	r0, #32
   26ffe:	199b      	adds	r3, r3, r6
   27000:	7018      	strb	r0, [r3, #0]
   27002:	070b      	lsls	r3, r1, #28
   27004:	d504      	bpl.n	27010 <_svfiprintf_r+0xc0>
   27006:	2353      	movs	r3, #83	; 0x53
   27008:	202b      	movs	r0, #43	; 0x2b
   2700a:	ae02      	add	r6, sp, #8
   2700c:	199b      	adds	r3, r3, r6
   2700e:	7018      	strb	r0, [r3, #0]
   27010:	7823      	ldrb	r3, [r4, #0]
   27012:	2b2a      	cmp	r3, #42	; 0x2a
   27014:	d016      	beq.n	27044 <_svfiprintf_r+0xf4>
   27016:	2000      	movs	r0, #0
   27018:	210a      	movs	r1, #10
   2701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2701c:	7822      	ldrb	r2, [r4, #0]
   2701e:	3a30      	subs	r2, #48	; 0x30
   27020:	2a09      	cmp	r2, #9
   27022:	d955      	bls.n	270d0 <_svfiprintf_r+0x180>
   27024:	2800      	cmp	r0, #0
   27026:	d015      	beq.n	27054 <_svfiprintf_r+0x104>
   27028:	9309      	str	r3, [sp, #36]	; 0x24
   2702a:	e013      	b.n	27054 <_svfiprintf_r+0x104>
   2702c:	2b25      	cmp	r3, #37	; 0x25
   2702e:	d0b5      	beq.n	26f9c <_svfiprintf_r+0x4c>
   27030:	3401      	adds	r4, #1
   27032:	e7b0      	b.n	26f96 <_svfiprintf_r+0x46>
   27034:	2301      	movs	r3, #1
   27036:	1b80      	subs	r0, r0, r6
   27038:	4083      	lsls	r3, r0
   2703a:	6829      	ldr	r1, [r5, #0]
   2703c:	0014      	movs	r4, r2
   2703e:	430b      	orrs	r3, r1
   27040:	602b      	str	r3, [r5, #0]
   27042:	e7cd      	b.n	26fe0 <_svfiprintf_r+0x90>
   27044:	9b05      	ldr	r3, [sp, #20]
   27046:	1d18      	adds	r0, r3, #4
   27048:	681b      	ldr	r3, [r3, #0]
   2704a:	9005      	str	r0, [sp, #20]
   2704c:	2b00      	cmp	r3, #0
   2704e:	db39      	blt.n	270c4 <_svfiprintf_r+0x174>
   27050:	9309      	str	r3, [sp, #36]	; 0x24
   27052:	0014      	movs	r4, r2
   27054:	7823      	ldrb	r3, [r4, #0]
   27056:	2b2e      	cmp	r3, #46	; 0x2e
   27058:	d10b      	bne.n	27072 <_svfiprintf_r+0x122>
   2705a:	7863      	ldrb	r3, [r4, #1]
   2705c:	1c62      	adds	r2, r4, #1
   2705e:	2b2a      	cmp	r3, #42	; 0x2a
   27060:	d13e      	bne.n	270e0 <_svfiprintf_r+0x190>
   27062:	9b05      	ldr	r3, [sp, #20]
   27064:	3402      	adds	r4, #2
   27066:	1d1a      	adds	r2, r3, #4
   27068:	681b      	ldr	r3, [r3, #0]
   2706a:	9205      	str	r2, [sp, #20]
   2706c:	2b00      	cmp	r3, #0
   2706e:	db34      	blt.n	270da <_svfiprintf_r+0x18a>
   27070:	9307      	str	r3, [sp, #28]
   27072:	4e35      	ldr	r6, [pc, #212]	; (27148 <_svfiprintf_r+0x1f8>)
   27074:	7821      	ldrb	r1, [r4, #0]
   27076:	2203      	movs	r2, #3
   27078:	0030      	movs	r0, r6
   2707a:	f000 fab9 	bl	275f0 <memchr>
   2707e:	2800      	cmp	r0, #0
   27080:	d006      	beq.n	27090 <_svfiprintf_r+0x140>
   27082:	2340      	movs	r3, #64	; 0x40
   27084:	1b80      	subs	r0, r0, r6
   27086:	4083      	lsls	r3, r0
   27088:	682a      	ldr	r2, [r5, #0]
   2708a:	3401      	adds	r4, #1
   2708c:	4313      	orrs	r3, r2
   2708e:	602b      	str	r3, [r5, #0]
   27090:	7821      	ldrb	r1, [r4, #0]
   27092:	2206      	movs	r2, #6
   27094:	482d      	ldr	r0, [pc, #180]	; (2714c <_svfiprintf_r+0x1fc>)
   27096:	1c66      	adds	r6, r4, #1
   27098:	7629      	strb	r1, [r5, #24]
   2709a:	f000 faa9 	bl	275f0 <memchr>
   2709e:	2800      	cmp	r0, #0
   270a0:	d046      	beq.n	27130 <_svfiprintf_r+0x1e0>
   270a2:	4b2b      	ldr	r3, [pc, #172]	; (27150 <_svfiprintf_r+0x200>)
   270a4:	2b00      	cmp	r3, #0
   270a6:	d12f      	bne.n	27108 <_svfiprintf_r+0x1b8>
   270a8:	6829      	ldr	r1, [r5, #0]
   270aa:	9b05      	ldr	r3, [sp, #20]
   270ac:	2207      	movs	r2, #7
   270ae:	05c9      	lsls	r1, r1, #23
   270b0:	d528      	bpl.n	27104 <_svfiprintf_r+0x1b4>
   270b2:	189b      	adds	r3, r3, r2
   270b4:	4393      	bics	r3, r2
   270b6:	3308      	adds	r3, #8
   270b8:	9305      	str	r3, [sp, #20]
   270ba:	696b      	ldr	r3, [r5, #20]
   270bc:	9a03      	ldr	r2, [sp, #12]
   270be:	189b      	adds	r3, r3, r2
   270c0:	616b      	str	r3, [r5, #20]
   270c2:	e767      	b.n	26f94 <_svfiprintf_r+0x44>
   270c4:	425b      	negs	r3, r3
   270c6:	60eb      	str	r3, [r5, #12]
   270c8:	2302      	movs	r3, #2
   270ca:	430b      	orrs	r3, r1
   270cc:	602b      	str	r3, [r5, #0]
   270ce:	e7c0      	b.n	27052 <_svfiprintf_r+0x102>
   270d0:	434b      	muls	r3, r1
   270d2:	3401      	adds	r4, #1
   270d4:	189b      	adds	r3, r3, r2
   270d6:	2001      	movs	r0, #1
   270d8:	e7a0      	b.n	2701c <_svfiprintf_r+0xcc>
   270da:	2301      	movs	r3, #1
   270dc:	425b      	negs	r3, r3
   270de:	e7c7      	b.n	27070 <_svfiprintf_r+0x120>
   270e0:	2300      	movs	r3, #0
   270e2:	0014      	movs	r4, r2
   270e4:	200a      	movs	r0, #10
   270e6:	001a      	movs	r2, r3
   270e8:	606b      	str	r3, [r5, #4]
   270ea:	7821      	ldrb	r1, [r4, #0]
   270ec:	3930      	subs	r1, #48	; 0x30
   270ee:	2909      	cmp	r1, #9
   270f0:	d903      	bls.n	270fa <_svfiprintf_r+0x1aa>
   270f2:	2b00      	cmp	r3, #0
   270f4:	d0bd      	beq.n	27072 <_svfiprintf_r+0x122>
   270f6:	9207      	str	r2, [sp, #28]
   270f8:	e7bb      	b.n	27072 <_svfiprintf_r+0x122>
   270fa:	4342      	muls	r2, r0
   270fc:	3401      	adds	r4, #1
   270fe:	1852      	adds	r2, r2, r1
   27100:	2301      	movs	r3, #1
   27102:	e7f2      	b.n	270ea <_svfiprintf_r+0x19a>
   27104:	3307      	adds	r3, #7
   27106:	e7d5      	b.n	270b4 <_svfiprintf_r+0x164>
   27108:	ab05      	add	r3, sp, #20
   2710a:	9300      	str	r3, [sp, #0]
   2710c:	003a      	movs	r2, r7
   2710e:	4b11      	ldr	r3, [pc, #68]	; (27154 <_svfiprintf_r+0x204>)
   27110:	0029      	movs	r1, r5
   27112:	9802      	ldr	r0, [sp, #8]
   27114:	e000      	b.n	27118 <_svfiprintf_r+0x1c8>
   27116:	bf00      	nop
   27118:	9003      	str	r0, [sp, #12]
   2711a:	9b03      	ldr	r3, [sp, #12]
   2711c:	3301      	adds	r3, #1
   2711e:	d1cc      	bne.n	270ba <_svfiprintf_r+0x16a>
   27120:	89bb      	ldrh	r3, [r7, #12]
   27122:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27124:	065b      	lsls	r3, r3, #25
   27126:	d400      	bmi.n	2712a <_svfiprintf_r+0x1da>
   27128:	e729      	b.n	26f7e <_svfiprintf_r+0x2e>
   2712a:	2001      	movs	r0, #1
   2712c:	4240      	negs	r0, r0
   2712e:	e726      	b.n	26f7e <_svfiprintf_r+0x2e>
   27130:	ab05      	add	r3, sp, #20
   27132:	9300      	str	r3, [sp, #0]
   27134:	003a      	movs	r2, r7
   27136:	4b07      	ldr	r3, [pc, #28]	; (27154 <_svfiprintf_r+0x204>)
   27138:	0029      	movs	r1, r5
   2713a:	9802      	ldr	r0, [sp, #8]
   2713c:	f000 f87a 	bl	27234 <_printf_i>
   27140:	e7ea      	b.n	27118 <_svfiprintf_r+0x1c8>
   27142:	46c0      	nop			; (mov r8, r8)
   27144:	0002b02e 	.word	0x0002b02e
   27148:	0002b034 	.word	0x0002b034
   2714c:	0002b038 	.word	0x0002b038
   27150:	00000000 	.word	0x00000000
   27154:	00026e8d 	.word	0x00026e8d

00027158 <_printf_common>:
   27158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2715a:	0015      	movs	r5, r2
   2715c:	9301      	str	r3, [sp, #4]
   2715e:	688a      	ldr	r2, [r1, #8]
   27160:	690b      	ldr	r3, [r1, #16]
   27162:	9000      	str	r0, [sp, #0]
   27164:	000c      	movs	r4, r1
   27166:	4293      	cmp	r3, r2
   27168:	da00      	bge.n	2716c <_printf_common+0x14>
   2716a:	0013      	movs	r3, r2
   2716c:	0022      	movs	r2, r4
   2716e:	602b      	str	r3, [r5, #0]
   27170:	3243      	adds	r2, #67	; 0x43
   27172:	7812      	ldrb	r2, [r2, #0]
   27174:	2a00      	cmp	r2, #0
   27176:	d001      	beq.n	2717c <_printf_common+0x24>
   27178:	3301      	adds	r3, #1
   2717a:	602b      	str	r3, [r5, #0]
   2717c:	6823      	ldr	r3, [r4, #0]
   2717e:	069b      	lsls	r3, r3, #26
   27180:	d502      	bpl.n	27188 <_printf_common+0x30>
   27182:	682b      	ldr	r3, [r5, #0]
   27184:	3302      	adds	r3, #2
   27186:	602b      	str	r3, [r5, #0]
   27188:	2706      	movs	r7, #6
   2718a:	6823      	ldr	r3, [r4, #0]
   2718c:	401f      	ands	r7, r3
   2718e:	d027      	beq.n	271e0 <_printf_common+0x88>
   27190:	0023      	movs	r3, r4
   27192:	3343      	adds	r3, #67	; 0x43
   27194:	781b      	ldrb	r3, [r3, #0]
   27196:	1e5a      	subs	r2, r3, #1
   27198:	4193      	sbcs	r3, r2
   2719a:	6822      	ldr	r2, [r4, #0]
   2719c:	0692      	lsls	r2, r2, #26
   2719e:	d430      	bmi.n	27202 <_printf_common+0xaa>
   271a0:	0022      	movs	r2, r4
   271a2:	9901      	ldr	r1, [sp, #4]
   271a4:	3243      	adds	r2, #67	; 0x43
   271a6:	9800      	ldr	r0, [sp, #0]
   271a8:	9e08      	ldr	r6, [sp, #32]
   271aa:	47b0      	blx	r6
   271ac:	1c43      	adds	r3, r0, #1
   271ae:	d025      	beq.n	271fc <_printf_common+0xa4>
   271b0:	2306      	movs	r3, #6
   271b2:	6820      	ldr	r0, [r4, #0]
   271b4:	682a      	ldr	r2, [r5, #0]
   271b6:	68e1      	ldr	r1, [r4, #12]
   271b8:	4003      	ands	r3, r0
   271ba:	2500      	movs	r5, #0
   271bc:	2b04      	cmp	r3, #4
   271be:	d103      	bne.n	271c8 <_printf_common+0x70>
   271c0:	1a8d      	subs	r5, r1, r2
   271c2:	43eb      	mvns	r3, r5
   271c4:	17db      	asrs	r3, r3, #31
   271c6:	401d      	ands	r5, r3
   271c8:	68a3      	ldr	r3, [r4, #8]
   271ca:	6922      	ldr	r2, [r4, #16]
   271cc:	4293      	cmp	r3, r2
   271ce:	dd01      	ble.n	271d4 <_printf_common+0x7c>
   271d0:	1a9b      	subs	r3, r3, r2
   271d2:	18ed      	adds	r5, r5, r3
   271d4:	2700      	movs	r7, #0
   271d6:	42bd      	cmp	r5, r7
   271d8:	d120      	bne.n	2721c <_printf_common+0xc4>
   271da:	2000      	movs	r0, #0
   271dc:	e010      	b.n	27200 <_printf_common+0xa8>
   271de:	3701      	adds	r7, #1
   271e0:	68e3      	ldr	r3, [r4, #12]
   271e2:	682a      	ldr	r2, [r5, #0]
   271e4:	1a9b      	subs	r3, r3, r2
   271e6:	429f      	cmp	r7, r3
   271e8:	dad2      	bge.n	27190 <_printf_common+0x38>
   271ea:	0022      	movs	r2, r4
   271ec:	2301      	movs	r3, #1
   271ee:	3219      	adds	r2, #25
   271f0:	9901      	ldr	r1, [sp, #4]
   271f2:	9800      	ldr	r0, [sp, #0]
   271f4:	9e08      	ldr	r6, [sp, #32]
   271f6:	47b0      	blx	r6
   271f8:	1c43      	adds	r3, r0, #1
   271fa:	d1f0      	bne.n	271de <_printf_common+0x86>
   271fc:	2001      	movs	r0, #1
   271fe:	4240      	negs	r0, r0
   27200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   27202:	2030      	movs	r0, #48	; 0x30
   27204:	18e1      	adds	r1, r4, r3
   27206:	3143      	adds	r1, #67	; 0x43
   27208:	7008      	strb	r0, [r1, #0]
   2720a:	0021      	movs	r1, r4
   2720c:	1c5a      	adds	r2, r3, #1
   2720e:	3145      	adds	r1, #69	; 0x45
   27210:	7809      	ldrb	r1, [r1, #0]
   27212:	18a2      	adds	r2, r4, r2
   27214:	3243      	adds	r2, #67	; 0x43
   27216:	3302      	adds	r3, #2
   27218:	7011      	strb	r1, [r2, #0]
   2721a:	e7c1      	b.n	271a0 <_printf_common+0x48>
   2721c:	0022      	movs	r2, r4
   2721e:	2301      	movs	r3, #1
   27220:	321a      	adds	r2, #26
   27222:	9901      	ldr	r1, [sp, #4]
   27224:	9800      	ldr	r0, [sp, #0]
   27226:	9e08      	ldr	r6, [sp, #32]
   27228:	47b0      	blx	r6
   2722a:	1c43      	adds	r3, r0, #1
   2722c:	d0e6      	beq.n	271fc <_printf_common+0xa4>
   2722e:	3701      	adds	r7, #1
   27230:	e7d1      	b.n	271d6 <_printf_common+0x7e>
	...

00027234 <_printf_i>:
   27234:	b5f0      	push	{r4, r5, r6, r7, lr}
   27236:	b08b      	sub	sp, #44	; 0x2c
   27238:	9206      	str	r2, [sp, #24]
   2723a:	000a      	movs	r2, r1
   2723c:	3243      	adds	r2, #67	; 0x43
   2723e:	9307      	str	r3, [sp, #28]
   27240:	9005      	str	r0, [sp, #20]
   27242:	9204      	str	r2, [sp, #16]
   27244:	7e0a      	ldrb	r2, [r1, #24]
   27246:	000c      	movs	r4, r1
   27248:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2724a:	2a6e      	cmp	r2, #110	; 0x6e
   2724c:	d100      	bne.n	27250 <_printf_i+0x1c>
   2724e:	e08f      	b.n	27370 <_printf_i+0x13c>
   27250:	d817      	bhi.n	27282 <_printf_i+0x4e>
   27252:	2a63      	cmp	r2, #99	; 0x63
   27254:	d02c      	beq.n	272b0 <_printf_i+0x7c>
   27256:	d808      	bhi.n	2726a <_printf_i+0x36>
   27258:	2a00      	cmp	r2, #0
   2725a:	d100      	bne.n	2725e <_printf_i+0x2a>
   2725c:	e099      	b.n	27392 <_printf_i+0x15e>
   2725e:	2a58      	cmp	r2, #88	; 0x58
   27260:	d054      	beq.n	2730c <_printf_i+0xd8>
   27262:	0026      	movs	r6, r4
   27264:	3642      	adds	r6, #66	; 0x42
   27266:	7032      	strb	r2, [r6, #0]
   27268:	e029      	b.n	272be <_printf_i+0x8a>
   2726a:	2a64      	cmp	r2, #100	; 0x64
   2726c:	d001      	beq.n	27272 <_printf_i+0x3e>
   2726e:	2a69      	cmp	r2, #105	; 0x69
   27270:	d1f7      	bne.n	27262 <_printf_i+0x2e>
   27272:	6821      	ldr	r1, [r4, #0]
   27274:	681a      	ldr	r2, [r3, #0]
   27276:	0608      	lsls	r0, r1, #24
   27278:	d523      	bpl.n	272c2 <_printf_i+0x8e>
   2727a:	1d11      	adds	r1, r2, #4
   2727c:	6019      	str	r1, [r3, #0]
   2727e:	6815      	ldr	r5, [r2, #0]
   27280:	e025      	b.n	272ce <_printf_i+0x9a>
   27282:	2a73      	cmp	r2, #115	; 0x73
   27284:	d100      	bne.n	27288 <_printf_i+0x54>
   27286:	e088      	b.n	2739a <_printf_i+0x166>
   27288:	d808      	bhi.n	2729c <_printf_i+0x68>
   2728a:	2a6f      	cmp	r2, #111	; 0x6f
   2728c:	d029      	beq.n	272e2 <_printf_i+0xae>
   2728e:	2a70      	cmp	r2, #112	; 0x70
   27290:	d1e7      	bne.n	27262 <_printf_i+0x2e>
   27292:	2220      	movs	r2, #32
   27294:	6809      	ldr	r1, [r1, #0]
   27296:	430a      	orrs	r2, r1
   27298:	6022      	str	r2, [r4, #0]
   2729a:	e003      	b.n	272a4 <_printf_i+0x70>
   2729c:	2a75      	cmp	r2, #117	; 0x75
   2729e:	d020      	beq.n	272e2 <_printf_i+0xae>
   272a0:	2a78      	cmp	r2, #120	; 0x78
   272a2:	d1de      	bne.n	27262 <_printf_i+0x2e>
   272a4:	0022      	movs	r2, r4
   272a6:	2178      	movs	r1, #120	; 0x78
   272a8:	3245      	adds	r2, #69	; 0x45
   272aa:	7011      	strb	r1, [r2, #0]
   272ac:	4a6c      	ldr	r2, [pc, #432]	; (27460 <_printf_i+0x22c>)
   272ae:	e030      	b.n	27312 <_printf_i+0xde>
   272b0:	000e      	movs	r6, r1
   272b2:	681a      	ldr	r2, [r3, #0]
   272b4:	3642      	adds	r6, #66	; 0x42
   272b6:	1d11      	adds	r1, r2, #4
   272b8:	6019      	str	r1, [r3, #0]
   272ba:	6813      	ldr	r3, [r2, #0]
   272bc:	7033      	strb	r3, [r6, #0]
   272be:	2301      	movs	r3, #1
   272c0:	e079      	b.n	273b6 <_printf_i+0x182>
   272c2:	0649      	lsls	r1, r1, #25
   272c4:	d5d9      	bpl.n	2727a <_printf_i+0x46>
   272c6:	1d11      	adds	r1, r2, #4
   272c8:	6019      	str	r1, [r3, #0]
   272ca:	2300      	movs	r3, #0
   272cc:	5ed5      	ldrsh	r5, [r2, r3]
   272ce:	2d00      	cmp	r5, #0
   272d0:	da03      	bge.n	272da <_printf_i+0xa6>
   272d2:	232d      	movs	r3, #45	; 0x2d
   272d4:	9a04      	ldr	r2, [sp, #16]
   272d6:	426d      	negs	r5, r5
   272d8:	7013      	strb	r3, [r2, #0]
   272da:	4b62      	ldr	r3, [pc, #392]	; (27464 <_printf_i+0x230>)
   272dc:	270a      	movs	r7, #10
   272de:	9303      	str	r3, [sp, #12]
   272e0:	e02f      	b.n	27342 <_printf_i+0x10e>
   272e2:	6820      	ldr	r0, [r4, #0]
   272e4:	6819      	ldr	r1, [r3, #0]
   272e6:	0605      	lsls	r5, r0, #24
   272e8:	d503      	bpl.n	272f2 <_printf_i+0xbe>
   272ea:	1d08      	adds	r0, r1, #4
   272ec:	6018      	str	r0, [r3, #0]
   272ee:	680d      	ldr	r5, [r1, #0]
   272f0:	e005      	b.n	272fe <_printf_i+0xca>
   272f2:	0640      	lsls	r0, r0, #25
   272f4:	d5f9      	bpl.n	272ea <_printf_i+0xb6>
   272f6:	680d      	ldr	r5, [r1, #0]
   272f8:	1d08      	adds	r0, r1, #4
   272fa:	6018      	str	r0, [r3, #0]
   272fc:	b2ad      	uxth	r5, r5
   272fe:	4b59      	ldr	r3, [pc, #356]	; (27464 <_printf_i+0x230>)
   27300:	2708      	movs	r7, #8
   27302:	9303      	str	r3, [sp, #12]
   27304:	2a6f      	cmp	r2, #111	; 0x6f
   27306:	d018      	beq.n	2733a <_printf_i+0x106>
   27308:	270a      	movs	r7, #10
   2730a:	e016      	b.n	2733a <_printf_i+0x106>
   2730c:	3145      	adds	r1, #69	; 0x45
   2730e:	700a      	strb	r2, [r1, #0]
   27310:	4a54      	ldr	r2, [pc, #336]	; (27464 <_printf_i+0x230>)
   27312:	9203      	str	r2, [sp, #12]
   27314:	681a      	ldr	r2, [r3, #0]
   27316:	6821      	ldr	r1, [r4, #0]
   27318:	1d10      	adds	r0, r2, #4
   2731a:	6018      	str	r0, [r3, #0]
   2731c:	6815      	ldr	r5, [r2, #0]
   2731e:	0608      	lsls	r0, r1, #24
   27320:	d522      	bpl.n	27368 <_printf_i+0x134>
   27322:	07cb      	lsls	r3, r1, #31
   27324:	d502      	bpl.n	2732c <_printf_i+0xf8>
   27326:	2320      	movs	r3, #32
   27328:	4319      	orrs	r1, r3
   2732a:	6021      	str	r1, [r4, #0]
   2732c:	2710      	movs	r7, #16
   2732e:	2d00      	cmp	r5, #0
   27330:	d103      	bne.n	2733a <_printf_i+0x106>
   27332:	2320      	movs	r3, #32
   27334:	6822      	ldr	r2, [r4, #0]
   27336:	439a      	bics	r2, r3
   27338:	6022      	str	r2, [r4, #0]
   2733a:	0023      	movs	r3, r4
   2733c:	2200      	movs	r2, #0
   2733e:	3343      	adds	r3, #67	; 0x43
   27340:	701a      	strb	r2, [r3, #0]
   27342:	6863      	ldr	r3, [r4, #4]
   27344:	60a3      	str	r3, [r4, #8]
   27346:	2b00      	cmp	r3, #0
   27348:	db5c      	blt.n	27404 <_printf_i+0x1d0>
   2734a:	2204      	movs	r2, #4
   2734c:	6821      	ldr	r1, [r4, #0]
   2734e:	4391      	bics	r1, r2
   27350:	6021      	str	r1, [r4, #0]
   27352:	2d00      	cmp	r5, #0
   27354:	d158      	bne.n	27408 <_printf_i+0x1d4>
   27356:	9e04      	ldr	r6, [sp, #16]
   27358:	2b00      	cmp	r3, #0
   2735a:	d064      	beq.n	27426 <_printf_i+0x1f2>
   2735c:	0026      	movs	r6, r4
   2735e:	9b03      	ldr	r3, [sp, #12]
   27360:	3642      	adds	r6, #66	; 0x42
   27362:	781b      	ldrb	r3, [r3, #0]
   27364:	7033      	strb	r3, [r6, #0]
   27366:	e05e      	b.n	27426 <_printf_i+0x1f2>
   27368:	0648      	lsls	r0, r1, #25
   2736a:	d5da      	bpl.n	27322 <_printf_i+0xee>
   2736c:	b2ad      	uxth	r5, r5
   2736e:	e7d8      	b.n	27322 <_printf_i+0xee>
   27370:	6809      	ldr	r1, [r1, #0]
   27372:	681a      	ldr	r2, [r3, #0]
   27374:	0608      	lsls	r0, r1, #24
   27376:	d505      	bpl.n	27384 <_printf_i+0x150>
   27378:	1d11      	adds	r1, r2, #4
   2737a:	6019      	str	r1, [r3, #0]
   2737c:	6813      	ldr	r3, [r2, #0]
   2737e:	6962      	ldr	r2, [r4, #20]
   27380:	601a      	str	r2, [r3, #0]
   27382:	e006      	b.n	27392 <_printf_i+0x15e>
   27384:	0649      	lsls	r1, r1, #25
   27386:	d5f7      	bpl.n	27378 <_printf_i+0x144>
   27388:	1d11      	adds	r1, r2, #4
   2738a:	6019      	str	r1, [r3, #0]
   2738c:	6813      	ldr	r3, [r2, #0]
   2738e:	8aa2      	ldrh	r2, [r4, #20]
   27390:	801a      	strh	r2, [r3, #0]
   27392:	2300      	movs	r3, #0
   27394:	9e04      	ldr	r6, [sp, #16]
   27396:	6123      	str	r3, [r4, #16]
   27398:	e054      	b.n	27444 <_printf_i+0x210>
   2739a:	681a      	ldr	r2, [r3, #0]
   2739c:	1d11      	adds	r1, r2, #4
   2739e:	6019      	str	r1, [r3, #0]
   273a0:	6816      	ldr	r6, [r2, #0]
   273a2:	2100      	movs	r1, #0
   273a4:	6862      	ldr	r2, [r4, #4]
   273a6:	0030      	movs	r0, r6
   273a8:	f000 f922 	bl	275f0 <memchr>
   273ac:	2800      	cmp	r0, #0
   273ae:	d001      	beq.n	273b4 <_printf_i+0x180>
   273b0:	1b80      	subs	r0, r0, r6
   273b2:	6060      	str	r0, [r4, #4]
   273b4:	6863      	ldr	r3, [r4, #4]
   273b6:	6123      	str	r3, [r4, #16]
   273b8:	2300      	movs	r3, #0
   273ba:	9a04      	ldr	r2, [sp, #16]
   273bc:	7013      	strb	r3, [r2, #0]
   273be:	e041      	b.n	27444 <_printf_i+0x210>
   273c0:	6923      	ldr	r3, [r4, #16]
   273c2:	0032      	movs	r2, r6
   273c4:	9906      	ldr	r1, [sp, #24]
   273c6:	9805      	ldr	r0, [sp, #20]
   273c8:	9d07      	ldr	r5, [sp, #28]
   273ca:	47a8      	blx	r5
   273cc:	1c43      	adds	r3, r0, #1
   273ce:	d043      	beq.n	27458 <_printf_i+0x224>
   273d0:	6823      	ldr	r3, [r4, #0]
   273d2:	2500      	movs	r5, #0
   273d4:	079b      	lsls	r3, r3, #30
   273d6:	d40f      	bmi.n	273f8 <_printf_i+0x1c4>
   273d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   273da:	68e0      	ldr	r0, [r4, #12]
   273dc:	4298      	cmp	r0, r3
   273de:	da3d      	bge.n	2745c <_printf_i+0x228>
   273e0:	0018      	movs	r0, r3
   273e2:	e03b      	b.n	2745c <_printf_i+0x228>
   273e4:	0022      	movs	r2, r4
   273e6:	2301      	movs	r3, #1
   273e8:	3219      	adds	r2, #25
   273ea:	9906      	ldr	r1, [sp, #24]
   273ec:	9805      	ldr	r0, [sp, #20]
   273ee:	9e07      	ldr	r6, [sp, #28]
   273f0:	47b0      	blx	r6
   273f2:	1c43      	adds	r3, r0, #1
   273f4:	d030      	beq.n	27458 <_printf_i+0x224>
   273f6:	3501      	adds	r5, #1
   273f8:	68e3      	ldr	r3, [r4, #12]
   273fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   273fc:	1a9b      	subs	r3, r3, r2
   273fe:	429d      	cmp	r5, r3
   27400:	dbf0      	blt.n	273e4 <_printf_i+0x1b0>
   27402:	e7e9      	b.n	273d8 <_printf_i+0x1a4>
   27404:	2d00      	cmp	r5, #0
   27406:	d0a9      	beq.n	2735c <_printf_i+0x128>
   27408:	9e04      	ldr	r6, [sp, #16]
   2740a:	0028      	movs	r0, r5
   2740c:	0039      	movs	r1, r7
   2740e:	f7fc fe71 	bl	240f4 <__aeabi_uidivmod>
   27412:	9b03      	ldr	r3, [sp, #12]
   27414:	3e01      	subs	r6, #1
   27416:	5c5b      	ldrb	r3, [r3, r1]
   27418:	0028      	movs	r0, r5
   2741a:	7033      	strb	r3, [r6, #0]
   2741c:	0039      	movs	r1, r7
   2741e:	f7fc fde3 	bl	23fe8 <__udivsi3>
   27422:	1e05      	subs	r5, r0, #0
   27424:	d1f1      	bne.n	2740a <_printf_i+0x1d6>
   27426:	2f08      	cmp	r7, #8
   27428:	d109      	bne.n	2743e <_printf_i+0x20a>
   2742a:	6823      	ldr	r3, [r4, #0]
   2742c:	07db      	lsls	r3, r3, #31
   2742e:	d506      	bpl.n	2743e <_printf_i+0x20a>
   27430:	6863      	ldr	r3, [r4, #4]
   27432:	6922      	ldr	r2, [r4, #16]
   27434:	4293      	cmp	r3, r2
   27436:	dc02      	bgt.n	2743e <_printf_i+0x20a>
   27438:	2330      	movs	r3, #48	; 0x30
   2743a:	3e01      	subs	r6, #1
   2743c:	7033      	strb	r3, [r6, #0]
   2743e:	9b04      	ldr	r3, [sp, #16]
   27440:	1b9b      	subs	r3, r3, r6
   27442:	6123      	str	r3, [r4, #16]
   27444:	9b07      	ldr	r3, [sp, #28]
   27446:	aa09      	add	r2, sp, #36	; 0x24
   27448:	9300      	str	r3, [sp, #0]
   2744a:	0021      	movs	r1, r4
   2744c:	9b06      	ldr	r3, [sp, #24]
   2744e:	9805      	ldr	r0, [sp, #20]
   27450:	f7ff fe82 	bl	27158 <_printf_common>
   27454:	1c43      	adds	r3, r0, #1
   27456:	d1b3      	bne.n	273c0 <_printf_i+0x18c>
   27458:	2001      	movs	r0, #1
   2745a:	4240      	negs	r0, r0
   2745c:	b00b      	add	sp, #44	; 0x2c
   2745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27460:	0002b050 	.word	0x0002b050
   27464:	0002b03f 	.word	0x0002b03f

00027468 <__sread>:
   27468:	b570      	push	{r4, r5, r6, lr}
   2746a:	000c      	movs	r4, r1
   2746c:	250e      	movs	r5, #14
   2746e:	5f49      	ldrsh	r1, [r1, r5]
   27470:	f000 f8f0 	bl	27654 <_read_r>
   27474:	2800      	cmp	r0, #0
   27476:	db03      	blt.n	27480 <__sread+0x18>
   27478:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2747a:	181b      	adds	r3, r3, r0
   2747c:	6563      	str	r3, [r4, #84]	; 0x54
   2747e:	bd70      	pop	{r4, r5, r6, pc}
   27480:	89a3      	ldrh	r3, [r4, #12]
   27482:	4a02      	ldr	r2, [pc, #8]	; (2748c <__sread+0x24>)
   27484:	4013      	ands	r3, r2
   27486:	81a3      	strh	r3, [r4, #12]
   27488:	e7f9      	b.n	2747e <__sread+0x16>
   2748a:	46c0      	nop			; (mov r8, r8)
   2748c:	ffffefff 	.word	0xffffefff

00027490 <__swrite>:
   27490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27492:	001f      	movs	r7, r3
   27494:	898b      	ldrh	r3, [r1, #12]
   27496:	0005      	movs	r5, r0
   27498:	000c      	movs	r4, r1
   2749a:	0016      	movs	r6, r2
   2749c:	05db      	lsls	r3, r3, #23
   2749e:	d505      	bpl.n	274ac <__swrite+0x1c>
   274a0:	230e      	movs	r3, #14
   274a2:	5ec9      	ldrsh	r1, [r1, r3]
   274a4:	2200      	movs	r2, #0
   274a6:	2302      	movs	r3, #2
   274a8:	f000 f88e 	bl	275c8 <_lseek_r>
   274ac:	89a3      	ldrh	r3, [r4, #12]
   274ae:	4a05      	ldr	r2, [pc, #20]	; (274c4 <__swrite+0x34>)
   274b0:	0028      	movs	r0, r5
   274b2:	4013      	ands	r3, r2
   274b4:	81a3      	strh	r3, [r4, #12]
   274b6:	0032      	movs	r2, r6
   274b8:	230e      	movs	r3, #14
   274ba:	5ee1      	ldrsh	r1, [r4, r3]
   274bc:	003b      	movs	r3, r7
   274be:	f000 f839 	bl	27534 <_write_r>
   274c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   274c4:	ffffefff 	.word	0xffffefff

000274c8 <__sseek>:
   274c8:	b570      	push	{r4, r5, r6, lr}
   274ca:	000c      	movs	r4, r1
   274cc:	250e      	movs	r5, #14
   274ce:	5f49      	ldrsh	r1, [r1, r5]
   274d0:	f000 f87a 	bl	275c8 <_lseek_r>
   274d4:	89a3      	ldrh	r3, [r4, #12]
   274d6:	1c42      	adds	r2, r0, #1
   274d8:	d103      	bne.n	274e2 <__sseek+0x1a>
   274da:	4a05      	ldr	r2, [pc, #20]	; (274f0 <__sseek+0x28>)
   274dc:	4013      	ands	r3, r2
   274de:	81a3      	strh	r3, [r4, #12]
   274e0:	bd70      	pop	{r4, r5, r6, pc}
   274e2:	2280      	movs	r2, #128	; 0x80
   274e4:	0152      	lsls	r2, r2, #5
   274e6:	4313      	orrs	r3, r2
   274e8:	81a3      	strh	r3, [r4, #12]
   274ea:	6560      	str	r0, [r4, #84]	; 0x54
   274ec:	e7f8      	b.n	274e0 <__sseek+0x18>
   274ee:	46c0      	nop			; (mov r8, r8)
   274f0:	ffffefff 	.word	0xffffefff

000274f4 <__sclose>:
   274f4:	b510      	push	{r4, lr}
   274f6:	230e      	movs	r3, #14
   274f8:	5ec9      	ldrsh	r1, [r1, r3]
   274fa:	f000 f82f 	bl	2755c <_close_r>
   274fe:	bd10      	pop	{r4, pc}

00027500 <strchr>:
   27500:	b2c9      	uxtb	r1, r1
   27502:	7803      	ldrb	r3, [r0, #0]
   27504:	2b00      	cmp	r3, #0
   27506:	d004      	beq.n	27512 <strchr+0x12>
   27508:	4299      	cmp	r1, r3
   2750a:	d100      	bne.n	2750e <strchr+0xe>
   2750c:	4770      	bx	lr
   2750e:	3001      	adds	r0, #1
   27510:	e7f7      	b.n	27502 <strchr+0x2>
   27512:	424b      	negs	r3, r1
   27514:	4159      	adcs	r1, r3
   27516:	4249      	negs	r1, r1
   27518:	4008      	ands	r0, r1
   2751a:	e7f7      	b.n	2750c <strchr+0xc>

0002751c <__ascii_wctomb>:
   2751c:	1e0b      	subs	r3, r1, #0
   2751e:	d004      	beq.n	2752a <__ascii_wctomb+0xe>
   27520:	2aff      	cmp	r2, #255	; 0xff
   27522:	d904      	bls.n	2752e <__ascii_wctomb+0x12>
   27524:	238a      	movs	r3, #138	; 0x8a
   27526:	6003      	str	r3, [r0, #0]
   27528:	3b8b      	subs	r3, #139	; 0x8b
   2752a:	0018      	movs	r0, r3
   2752c:	4770      	bx	lr
   2752e:	700a      	strb	r2, [r1, #0]
   27530:	2301      	movs	r3, #1
   27532:	e7fa      	b.n	2752a <__ascii_wctomb+0xe>

00027534 <_write_r>:
   27534:	b570      	push	{r4, r5, r6, lr}
   27536:	0005      	movs	r5, r0
   27538:	0008      	movs	r0, r1
   2753a:	0011      	movs	r1, r2
   2753c:	2200      	movs	r2, #0
   2753e:	4c06      	ldr	r4, [pc, #24]	; (27558 <_write_r+0x24>)
   27540:	6022      	str	r2, [r4, #0]
   27542:	001a      	movs	r2, r3
   27544:	f7f8 faca 	bl	1fadc <_write>
   27548:	1c43      	adds	r3, r0, #1
   2754a:	d103      	bne.n	27554 <_write_r+0x20>
   2754c:	6823      	ldr	r3, [r4, #0]
   2754e:	2b00      	cmp	r3, #0
   27550:	d000      	beq.n	27554 <_write_r+0x20>
   27552:	602b      	str	r3, [r5, #0]
   27554:	bd70      	pop	{r4, r5, r6, pc}
   27556:	46c0      	nop			; (mov r8, r8)
   27558:	20005648 	.word	0x20005648

0002755c <_close_r>:
   2755c:	2300      	movs	r3, #0
   2755e:	b570      	push	{r4, r5, r6, lr}
   27560:	4c06      	ldr	r4, [pc, #24]	; (2757c <_close_r+0x20>)
   27562:	0005      	movs	r5, r0
   27564:	0008      	movs	r0, r1
   27566:	6023      	str	r3, [r4, #0]
   27568:	f7f8 faf2 	bl	1fb50 <_close>
   2756c:	1c43      	adds	r3, r0, #1
   2756e:	d103      	bne.n	27578 <_close_r+0x1c>
   27570:	6823      	ldr	r3, [r4, #0]
   27572:	2b00      	cmp	r3, #0
   27574:	d000      	beq.n	27578 <_close_r+0x1c>
   27576:	602b      	str	r3, [r5, #0]
   27578:	bd70      	pop	{r4, r5, r6, pc}
   2757a:	46c0      	nop			; (mov r8, r8)
   2757c:	20005648 	.word	0x20005648

00027580 <_fstat_r>:
   27580:	2300      	movs	r3, #0
   27582:	b570      	push	{r4, r5, r6, lr}
   27584:	4c06      	ldr	r4, [pc, #24]	; (275a0 <_fstat_r+0x20>)
   27586:	0005      	movs	r5, r0
   27588:	0008      	movs	r0, r1
   2758a:	0011      	movs	r1, r2
   2758c:	6023      	str	r3, [r4, #0]
   2758e:	f7f8 fae2 	bl	1fb56 <_fstat>
   27592:	1c43      	adds	r3, r0, #1
   27594:	d103      	bne.n	2759e <_fstat_r+0x1e>
   27596:	6823      	ldr	r3, [r4, #0]
   27598:	2b00      	cmp	r3, #0
   2759a:	d000      	beq.n	2759e <_fstat_r+0x1e>
   2759c:	602b      	str	r3, [r5, #0]
   2759e:	bd70      	pop	{r4, r5, r6, pc}
   275a0:	20005648 	.word	0x20005648

000275a4 <_isatty_r>:
   275a4:	2300      	movs	r3, #0
   275a6:	b570      	push	{r4, r5, r6, lr}
   275a8:	4c06      	ldr	r4, [pc, #24]	; (275c4 <_isatty_r+0x20>)
   275aa:	0005      	movs	r5, r0
   275ac:	0008      	movs	r0, r1
   275ae:	6023      	str	r3, [r4, #0]
   275b0:	f7f8 fad6 	bl	1fb60 <_isatty>
   275b4:	1c43      	adds	r3, r0, #1
   275b6:	d103      	bne.n	275c0 <_isatty_r+0x1c>
   275b8:	6823      	ldr	r3, [r4, #0]
   275ba:	2b00      	cmp	r3, #0
   275bc:	d000      	beq.n	275c0 <_isatty_r+0x1c>
   275be:	602b      	str	r3, [r5, #0]
   275c0:	bd70      	pop	{r4, r5, r6, pc}
   275c2:	46c0      	nop			; (mov r8, r8)
   275c4:	20005648 	.word	0x20005648

000275c8 <_lseek_r>:
   275c8:	b570      	push	{r4, r5, r6, lr}
   275ca:	0005      	movs	r5, r0
   275cc:	0008      	movs	r0, r1
   275ce:	0011      	movs	r1, r2
   275d0:	2200      	movs	r2, #0
   275d2:	4c06      	ldr	r4, [pc, #24]	; (275ec <_lseek_r+0x24>)
   275d4:	6022      	str	r2, [r4, #0]
   275d6:	001a      	movs	r2, r3
   275d8:	f7f8 fac4 	bl	1fb64 <_lseek>
   275dc:	1c43      	adds	r3, r0, #1
   275de:	d103      	bne.n	275e8 <_lseek_r+0x20>
   275e0:	6823      	ldr	r3, [r4, #0]
   275e2:	2b00      	cmp	r3, #0
   275e4:	d000      	beq.n	275e8 <_lseek_r+0x20>
   275e6:	602b      	str	r3, [r5, #0]
   275e8:	bd70      	pop	{r4, r5, r6, pc}
   275ea:	46c0      	nop			; (mov r8, r8)
   275ec:	20005648 	.word	0x20005648

000275f0 <memchr>:
   275f0:	b2c9      	uxtb	r1, r1
   275f2:	1882      	adds	r2, r0, r2
   275f4:	4290      	cmp	r0, r2
   275f6:	d101      	bne.n	275fc <memchr+0xc>
   275f8:	2000      	movs	r0, #0
   275fa:	4770      	bx	lr
   275fc:	7803      	ldrb	r3, [r0, #0]
   275fe:	428b      	cmp	r3, r1
   27600:	d0fb      	beq.n	275fa <memchr+0xa>
   27602:	3001      	adds	r0, #1
   27604:	e7f6      	b.n	275f4 <memchr+0x4>

00027606 <_realloc_r>:
   27606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27608:	0007      	movs	r7, r0
   2760a:	000d      	movs	r5, r1
   2760c:	0016      	movs	r6, r2
   2760e:	2900      	cmp	r1, #0
   27610:	d105      	bne.n	2761e <_realloc_r+0x18>
   27612:	0011      	movs	r1, r2
   27614:	f7fe fe70 	bl	262f8 <_malloc_r>
   27618:	0004      	movs	r4, r0
   2761a:	0020      	movs	r0, r4
   2761c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2761e:	2a00      	cmp	r2, #0
   27620:	d103      	bne.n	2762a <_realloc_r+0x24>
   27622:	f7fe fe1f 	bl	26264 <_free_r>
   27626:	0034      	movs	r4, r6
   27628:	e7f7      	b.n	2761a <_realloc_r+0x14>
   2762a:	f000 f827 	bl	2767c <_malloc_usable_size_r>
   2762e:	002c      	movs	r4, r5
   27630:	4286      	cmp	r6, r0
   27632:	d9f2      	bls.n	2761a <_realloc_r+0x14>
   27634:	0031      	movs	r1, r6
   27636:	0038      	movs	r0, r7
   27638:	f7fe fe5e 	bl	262f8 <_malloc_r>
   2763c:	1e04      	subs	r4, r0, #0
   2763e:	d0ec      	beq.n	2761a <_realloc_r+0x14>
   27640:	0029      	movs	r1, r5
   27642:	0032      	movs	r2, r6
   27644:	f7fe fdea 	bl	2621c <memcpy>
   27648:	0029      	movs	r1, r5
   2764a:	0038      	movs	r0, r7
   2764c:	f7fe fe0a 	bl	26264 <_free_r>
   27650:	e7e3      	b.n	2761a <_realloc_r+0x14>
	...

00027654 <_read_r>:
   27654:	b570      	push	{r4, r5, r6, lr}
   27656:	0005      	movs	r5, r0
   27658:	0008      	movs	r0, r1
   2765a:	0011      	movs	r1, r2
   2765c:	2200      	movs	r2, #0
   2765e:	4c06      	ldr	r4, [pc, #24]	; (27678 <_read_r+0x24>)
   27660:	6022      	str	r2, [r4, #0]
   27662:	001a      	movs	r2, r3
   27664:	f7f8 fa18 	bl	1fa98 <_read>
   27668:	1c43      	adds	r3, r0, #1
   2766a:	d103      	bne.n	27674 <_read_r+0x20>
   2766c:	6823      	ldr	r3, [r4, #0]
   2766e:	2b00      	cmp	r3, #0
   27670:	d000      	beq.n	27674 <_read_r+0x20>
   27672:	602b      	str	r3, [r5, #0]
   27674:	bd70      	pop	{r4, r5, r6, pc}
   27676:	46c0      	nop			; (mov r8, r8)
   27678:	20005648 	.word	0x20005648

0002767c <_malloc_usable_size_r>:
   2767c:	1f0b      	subs	r3, r1, #4
   2767e:	681b      	ldr	r3, [r3, #0]
   27680:	1f18      	subs	r0, r3, #4
   27682:	2b00      	cmp	r3, #0
   27684:	da01      	bge.n	2768a <_malloc_usable_size_r+0xe>
   27686:	580b      	ldr	r3, [r1, r0]
   27688:	18c0      	adds	r0, r0, r3
   2768a:	4770      	bx	lr
   2768c:	000122fa 	.word	0x000122fa
   27690:	00012540 	.word	0x00012540
   27694:	00012540 	.word	0x00012540
   27698:	00012540 	.word	0x00012540
   2769c:	00012540 	.word	0x00012540
   276a0:	00012540 	.word	0x00012540
   276a4:	00012540 	.word	0x00012540
   276a8:	00012540 	.word	0x00012540
   276ac:	00012540 	.word	0x00012540
   276b0:	00012540 	.word	0x00012540
   276b4:	00012540 	.word	0x00012540
   276b8:	00012540 	.word	0x00012540
   276bc:	00012540 	.word	0x00012540
   276c0:	00012540 	.word	0x00012540
   276c4:	00012540 	.word	0x00012540
   276c8:	00012540 	.word	0x00012540
   276cc:	000122e2 	.word	0x000122e2
   276d0:	00012540 	.word	0x00012540
   276d4:	00012540 	.word	0x00012540
   276d8:	00012540 	.word	0x00012540
   276dc:	00012540 	.word	0x00012540
   276e0:	00012540 	.word	0x00012540
   276e4:	00012540 	.word	0x00012540
   276e8:	00012540 	.word	0x00012540
   276ec:	00012540 	.word	0x00012540
   276f0:	00012540 	.word	0x00012540
   276f4:	00012540 	.word	0x00012540
   276f8:	00012540 	.word	0x00012540
   276fc:	00012540 	.word	0x00012540
   27700:	00012540 	.word	0x00012540
   27704:	00012540 	.word	0x00012540
   27708:	00012540 	.word	0x00012540
   2770c:	000122f2 	.word	0x000122f2
   27710:	00012540 	.word	0x00012540
   27714:	00012540 	.word	0x00012540
   27718:	00012540 	.word	0x00012540
   2771c:	00012540 	.word	0x00012540
   27720:	00012540 	.word	0x00012540
   27724:	00012540 	.word	0x00012540
   27728:	00012540 	.word	0x00012540
   2772c:	00012540 	.word	0x00012540
   27730:	00012540 	.word	0x00012540
   27734:	00012540 	.word	0x00012540
   27738:	00012540 	.word	0x00012540
   2773c:	00012540 	.word	0x00012540
   27740:	00012540 	.word	0x00012540
   27744:	00012540 	.word	0x00012540
   27748:	00012540 	.word	0x00012540
   2774c:	000122ea 	.word	0x000122ea
   27750:	00012302 	.word	0x00012302
   27754:	000122ca 	.word	0x000122ca
   27758:	000122da 	.word	0x000122da
   2775c:	000122d2 	.word	0x000122d2
   27760:	00000002 	.word	0x00000002
   27764:	00000003 	.word	0x00000003
   27768:	00000028 	.word	0x00000028
   2776c:	00000029 	.word	0x00000029
   27770:	00000004 	.word	0x00000004
   27774:	00000005 	.word	0x00000005
   27778:	00000006 	.word	0x00000006
   2777c:	00000007 	.word	0x00000007
   27780:	0000ffff 	.word	0x0000ffff
   27784:	0000ffff 	.word	0x0000ffff
   27788:	00000022 	.word	0x00000022
   2778c:	00000023 	.word	0x00000023
   27790:	0000ffff 	.word	0x0000ffff
   27794:	0000ffff 	.word	0x0000ffff
   27798:	0000ffff 	.word	0x0000ffff
   2779c:	0000ffff 	.word	0x0000ffff
   277a0:	00000008 	.word	0x00000008
   277a4:	00000009 	.word	0x00000009
   277a8:	0000000a 	.word	0x0000000a
   277ac:	0000000b 	.word	0x0000000b
   277b0:	00082008 	.word	0x00082008
   277b4:	736e6553 	.word	0x736e6553
   277b8:	4520726f 	.word	0x4520726f
   277bc:	726f7272 	.word	0x726f7272
   277c0:	21642520 	.word	0x21642520
   277c4:	00000a0d 	.word	0x00000a0d
   277c8:	74736944 	.word	0x74736944
   277cc:	65636e61 	.word	0x65636e61
   277d0:	6425203a 	.word	0x6425203a
   277d4:	0d6d6d20 	.word	0x0d6d6d20
   277d8:	0000000a 	.word	0x0000000a
   277dc:	74736944 	.word	0x74736944
   277e0:	65636e61 	.word	0x65636e61
   277e4:	74614420 	.word	0x74614420
   277e8:	514d2061 	.word	0x514d2061
   277ec:	50205454 	.word	0x50205454
   277f0:	0d74736f 	.word	0x0d74736f
   277f4:	0000000a 	.word	0x0000000a
   277f8:	65636341 	.word	0x65636341
   277fc:	6172656c 	.word	0x6172656c
   27800:	6e6f6974 	.word	0x6e6f6974
   27804:	676d5b20 	.word	0x676d5b20
   27808:	20583a5d 	.word	0x20583a5d
   2780c:	59096425 	.word	0x59096425
   27810:	09642520 	.word	0x09642520
   27814:	25205a25 	.word	0x25205a25
   27818:	000a0d64 	.word	0x000a0d64
   2781c:	64206f4e 	.word	0x64206f4e
   27820:	20617461 	.word	0x20617461
   27824:	64616572 	.word	0x64616572
   27828:	0d202179 	.word	0x0d202179
   2782c:	0000000a 	.word	0x0000000a
   27830:	20554d49 	.word	0x20554d49
   27834:	61746144 	.word	0x61746144
   27838:	54514d20 	.word	0x54514d20
   2783c:	6f502054 	.word	0x6f502054
   27840:	0a0d7473 	.word	0x0a0d7473
   27844:	00000000 	.word	0x00000000
   27848:	74747542 	.word	0x74747542
   2784c:	23206e6f 	.word	0x23206e6f
   27850:	69206425 	.word	0x69206425
   27854:	65722073 	.word	0x65722073
   27858:	7361656c 	.word	0x7361656c
   2785c:	0a0d6465 	.word	0x0a0d6465
   27860:	00000000 	.word	0x00000000
   27864:	74747542 	.word	0x74747542
   27868:	23206e6f 	.word	0x23206e6f
   2786c:	69206425 	.word	0x69206425
   27870:	72702073 	.word	0x72702073
   27874:	65737365 	.word	0x65737365
   27878:	000a0d64 	.word	0x000a0d64
   2787c:	64757453 	.word	0x64757453
   27880:	73746e65 	.word	0x73746e65
   27884:	206f7420 	.word	0x206f7420
   27888:	6c6c6966 	.word	0x6c6c6966
   2788c:	74756f20 	.word	0x74756f20
   27890:	00000021 	.word	0x00000021
   27894:	6d6d7544 	.word	0x6d6d7544
   27898:	61472079 	.word	0x61472079
   2789c:	4420656d 	.word	0x4420656d
   278a0:	20617461 	.word	0x20617461
   278a4:	5454514d 	.word	0x5454514d
   278a8:	736f5020 	.word	0x736f5020
   278ac:	000a0d74 	.word	0x000a0d74
   278b0:	00736c63 	.word	0x00736c63
   278b4:	3a736c63 	.word	0x3a736c63
   278b8:	656c4320 	.word	0x656c4320
   278bc:	20737261 	.word	0x20737261
   278c0:	20656874 	.word	0x20656874
   278c4:	6d726574 	.word	0x6d726574
   278c8:	6c616e69 	.word	0x6c616e69
   278cc:	72637320 	.word	0x72637320
   278d0:	0d6e6565 	.word	0x0d6e6565
   278d4:	0000000a 	.word	0x0000000a
   278d8:	656d6167 	.word	0x656d6167
   278dc:	00000000 	.word	0x00000000
   278e0:	656d6167 	.word	0x656d6167
   278e4:	6553203a 	.word	0x6553203a
   278e8:	2073646e 	.word	0x2073646e
   278ec:	6d6d7564 	.word	0x6d6d7564
   278f0:	61672079 	.word	0x61672079
   278f4:	6420656d 	.word	0x6420656d
   278f8:	0d617461 	.word	0x0d617461
   278fc:	0000000a 	.word	0x0000000a
   27900:	64746567 	.word	0x64746567
   27904:	61747369 	.word	0x61747369
   27908:	0065636e 	.word	0x0065636e
   2790c:	64746567 	.word	0x64746567
   27910:	61747369 	.word	0x61747369
   27914:	3a65636e 	.word	0x3a65636e
   27918:	74655220 	.word	0x74655220
   2791c:	736e7275 	.word	0x736e7275
   27920:	65687420 	.word	0x65687420
   27924:	73696420 	.word	0x73696420
   27928:	636e6174 	.word	0x636e6174
   2792c:	72662065 	.word	0x72662065
   27930:	74206d6f 	.word	0x74206d6f
   27934:	55206568 	.word	0x55206568
   27938:	30312d53 	.word	0x30312d53
   2793c:	65532030 	.word	0x65532030
   27940:	726f736e 	.word	0x726f736e
   27944:	000a0d2e 	.word	0x000a0d2e
   27948:	62746567 	.word	0x62746567
   2794c:	6f747475 	.word	0x6f747475
   27950:	0000006e 	.word	0x0000006e
   27954:	62746567 	.word	0x62746567
   27958:	6f747475 	.word	0x6f747475
   2795c:	50203a6e 	.word	0x50203a6e
   27960:	65636f72 	.word	0x65636f72
   27964:	73657373 	.word	0x73657373
   27968:	646e6120 	.word	0x646e6120
   2796c:	69727020 	.word	0x69727020
   27970:	2073746e 	.word	0x2073746e
   27974:	20656874 	.word	0x20656874
   27978:	4f464946 	.word	0x4f464946
   2797c:	74756220 	.word	0x74756220
   27980:	206e6f74 	.word	0x206e6f74
   27984:	66667562 	.word	0x66667562
   27988:	66207265 	.word	0x66207265
   2798c:	206d6f72 	.word	0x206d6f72
   27990:	20656874 	.word	0x20656874
   27994:	73656573 	.word	0x73656573
   27998:	0d2e7761 	.word	0x0d2e7761
   2799c:	0000000a 	.word	0x0000000a
   279a0:	0064656c 	.word	0x0064656c
   279a4:	2064656c 	.word	0x2064656c
   279a8:	79656b5b 	.word	0x79656b5b
   279ac:	5d6d756e 	.word	0x5d6d756e
   279b0:	5b5d525b 	.word	0x5b5d525b
   279b4:	425b5d47 	.word	0x425b5d47
   279b8:	53203a5d 	.word	0x53203a5d
   279bc:	20737465 	.word	0x20737465
   279c0:	20656874 	.word	0x20656874
   279c4:	65766967 	.word	0x65766967
   279c8:	454c206e 	.word	0x454c206e
   279cc:	6f742044 	.word	0x6f742044
   279d0:	65687420 	.word	0x65687420
   279d4:	76696720 	.word	0x76696720
   279d8:	52206e65 	.word	0x52206e65
   279dc:	422c472c 	.word	0x422c472c
   279e0:	6c617620 	.word	0x6c617620
   279e4:	2e736575 	.word	0x2e736575
   279e8:	00000a0d 	.word	0x00000a0d
   279ec:	65736572 	.word	0x65736572
   279f0:	00000074 	.word	0x00000074
   279f4:	65736572 	.word	0x65736572
   279f8:	52203a74 	.word	0x52203a74
   279fc:	74657365 	.word	0x74657365
   27a00:	68742073 	.word	0x68742073
   27a04:	65642065 	.word	0x65642065
   27a08:	65636976 	.word	0x65636976
   27a0c:	00000a0d 	.word	0x00000a0d
   27a10:	00007766 	.word	0x00007766
   27a14:	203a7766 	.word	0x203a7766
   27a18:	6e776f44 	.word	0x6e776f44
   27a1c:	64616f6c 	.word	0x64616f6c
   27a20:	66206120 	.word	0x66206120
   27a24:	20656c69 	.word	0x20656c69
   27a28:	20646e61 	.word	0x20646e61
   27a2c:	66726570 	.word	0x66726570
   27a30:	206d726f 	.word	0x206d726f
   27a34:	46206e61 	.word	0x46206e61
   27a38:	70752057 	.word	0x70752057
   27a3c:	65746164 	.word	0x65746164
   27a40:	00000a0d 	.word	0x00000a0d
   27a44:	00756d69 	.word	0x00756d69
   27a48:	3a756d69 	.word	0x3a756d69
   27a4c:	74655220 	.word	0x74655220
   27a50:	736e7275 	.word	0x736e7275
   27a54:	76206120 	.word	0x76206120
   27a58:	65756c61 	.word	0x65756c61
   27a5c:	6f726620 	.word	0x6f726620
   27a60:	6874206d 	.word	0x6874206d
   27a64:	4d492065 	.word	0x4d492065
   27a68:	000a0d55 	.word	0x000a0d55
   27a6c:	65657246 	.word	0x65657246
   27a70:	534f5452 	.word	0x534f5452
   27a74:	494c4320 	.word	0x494c4320
   27a78:	540a0d2e 	.word	0x540a0d2e
   27a7c:	20657079 	.word	0x20657079
   27a80:	706c6548 	.word	0x706c6548
   27a84:	206f7420 	.word	0x206f7420
   27a88:	77656976 	.word	0x77656976
   27a8c:	6c206120 	.word	0x6c206120
   27a90:	20747369 	.word	0x20747369
   27a94:	7220666f 	.word	0x7220666f
   27a98:	73696765 	.word	0x73696765
   27a9c:	65726574 	.word	0x65726574
   27aa0:	6f632064 	.word	0x6f632064
   27aa4:	6e616d6d 	.word	0x6e616d6d
   27aa8:	0d2e7364 	.word	0x0d2e7364
   27aac:	0000000a 	.word	0x0000000a
   27ab0:	0000616f 	.word	0x0000616f
   27ab4:	325b6325 	.word	0x325b6325
   27ab8:	003e0d4b 	.word	0x003e0d4b

00027abc <xClearScreen>:
   27abc:	000278b0 000278b4 00012b6d 00000000     .x...x..m+......
   27acc:	325b6325 0000004a                       %c[2J...

00027ad4 <xDistanceSensorGetDistance>:
   27ad4:	00027900 0002790c 00012d59 00000000     .y...y..Y-......

00027ae4 <xImuGetCommand>:
   27ae4:	00027a44 00027a48 00012bad 00000000     Dz..Hz...+......

00027af4 <xNeotrellisProcessButtonCommand>:
   27af4:	00027948 00027954 00012cb5 00000000     Hy..Ty...,......

00027b04 <xNeotrellisTurnLEDCommand>:
   27b04:	000279a0 000279a4 00012b99 00000004     .y...y...+......

00027b14 <xOTAUCommand>:
   27b14:	00027a10 00027a14 00012ca5 00000000     .z...z...,......

00027b24 <xResetCommand>:
   27b24:	000279ec 000279f4 00012b55 00000000     .y...y..U+......

00027b34 <xSendDummyGameData>:
   27b34:	000278d8 000278e0 00012dd5 00000000     .x...x...-......
   27b44:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   27b54:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   27b64:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   27b74:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   27b84:	75657571 0d217365 0000000a 20776f4e     queues!.....Now 
   27b94:	20657261 74207461 70206568 6563616c     are at the place
   27ba4:	20666f20 74696177 20676e69 20726f66      of waiting for 
   27bb4:	656d6167 61747320 0a0d7472 00000000     game start......
   27bc4:	72727563 20746e65 75706e69 73692074     current input is
   27bd4:	0d642520 0000000a 252c6425 64252c64      %d.....%d,%d,%d
   27be4:	2c64252c 252c6425 00000064 20656854     ,%d,%d,%d...The 
   27bf4:	32727375 706e6920 69207475 68742073     usr2 input is th
   27c04:	6f662065 776f6c6c 00676e69 65636552     e following.Rece
   27c14:	64657669 6d614720 6e6f2065 736e6920     ived Game on ins
   27c24:	63757274 6e6f6974 0a0d2021 00000000     truction! ......
   27c34:	00001010 0000050e 6f727245 6e692072     ........Error in
   27c44:	61697469 697a696c 5320676e 61736565     itializing Seesa
   27c54:	722f2177 00006e2f 6f727245 2f722f72     w!/r/n..Error/r/
   27c64:	0000006e 6e756f46 65532064 77617365     n...Found Seesaw
   27c74:	2f722f21 0000006e 6c756f43 6f6e2064     !/r/n...Could no
   27c84:	72772074 20657469 73656553 70207761     t write Seesaw p
   27c94:	2f216e69 006e2f72 6c756f43 6f6e2064     in!/r/n.Could no
   27ca4:	65732074 65732074 77617365 6f654e20     t set seesaw Neo
   27cb4:	65786970 7073206c 21646565 6e2f722f     pixel speed!/r/n
   27cc4:	00000000 6c756f43 6f6e2064 65732074     ....Could not se
   27cd4:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   27ce4:	756e206c 7265626d 20666f20 69766564     l number of devi
   27cf4:	2f736563 006e2f72 6c756f43 6f6e2064     ces/r/n.Could no
   27d04:	6e692074 61697469 657a696c 79654b20     t initialize Key
   27d14:	21646170 6e2f722f 00000000 6f727245     pad!/r/n....Erro
   27d24:	65722072 6e696461 65532067 77617365     r reading Seesaw
   27d34:	756f6320 2173746e 6e2f722f 00000000      counts!/r/n....

00027d44 <msgBaseGetHWID>:
   27d44:	00000100                                ....

00027d48 <msgKeypadEnableInt>:
   27d48:	00010210                                ....

00027d4c <msgKeypadGetCount>:
   27d4c:	00000410                                ....

00027d50 <msgNeopixelBufLength>:
   27d50:	3000030e                                ...0

00027d54 <msgNeopixelPin>:
   27d54:	0003010e                                ....

00027d58 <msgNeopixelSpeed>:
   27d58:	0001020e 000143c0 000143ca 000143da     .....C...C...C..
   27d68:	00014416 0001442c 00006425 656d6167     .D..,D..%d..game
   27d78:	7365725f 7273755f 00000032 252c6425     _res_usr2...%d,%
   27d88:	00000064 755f5452 5f317273 75706e69     d...RT_usr1_inpu
   27d98:	00000074 755f5452 5f327273 75706e69     t...RT_usr2_inpu
   27da8:	00000074 6167227b 3a22656d 0000005b     t...{"game":[...
   27db8:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   27dc8:	69656365 21646576 00000a0d 732a2e25     eceived!....%.*s
   27dd8:	00000000 61500a0d 64657372 6d6f4320     ......Parsed Com
   27de8:	646e616d 0000203a 002c6425 65530a0d     mand: ..%d,...Se
   27df8:	7020746e 2079616c 63206f74 72746e6f     nt play to contr
   27e08:	0d216c6f 0000000a 61470a0d 6d20656d     ol!.......Game m
   27e18:	61737365 72206567 69656365 20646576     essage received 
   27e28:	20747562 20746f6e 65646e75 6f747372     but not understo
   27e38:	0d21646f 0000000a 25200a0d 00732a2e     od!....... %.*s.
   27e48:	28626772 00000000 47520a0d 64252042     rgb(......RGB %d
   27e58:	20642520 0a0d6425 00000000 20746547      %d %d......Get 
   27e68:	20656874 77736e41 4b207265 20217965     the Answer Key! 
   27e78:	72657355 6f777420 61747320 65207472     User two start e
   27e88:	7265746e 79656b20 000a0d21 5454514d     nter key!...MQTT
   27e98:	696e6920 6c616974 74617a69 206e6f69      initialization 
   27ea8:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   27eb8:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   27ec8:	5454514d 67657220 65747369 61632072     MQTT register ca
   27ed8:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   27ee8:	726f7272 646f6320 73692065 64252820     rror code is (%d
   27ef8:	000a0d29 70747468 696c635f 5f746e65     )...http_client_
   27f08:	6c6c6163 6b636162 5448203a 63205054     callback: HTTP c
   27f18:	6e65696c 6f732074 74656b63 6e6f6320     lient socket con
   27f28:	7463656e 0d2e6465 0000000a 70747468     nected......http
   27f38:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   27f48:	6572203a 73657571 6f632074 656c706d     : request comple
   27f58:	2e646574 00000a0d 70747468 696c635f     ted.....http_cli
   27f68:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
   27f78:	76696563 72206465 6f707365 2065736e     ceived response 
   27f88:	64207525 20617461 657a6973 0d752520     %u data size %u.
   27f98:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   27fa8:	6c6c6163 6b636162 6964203a 6e6f6373     callback: discon
   27fb8:	7463656e 206e6f69 73616572 253a6e6f     nection reason:%
   27fc8:	000a0d64 74696e69 6f74735f 65676172     d...init_storage
   27fd8:	6c70203a 65736165 756c7020 6e612067     : please plug an
   27fe8:	2f445320 20434d4d 64726163 206e6920      SD/MMC card in 
   27ff8:	746f6c73 0d2e2e2e 0000000a 74696e69     slot........init
   28008:	6f74735f 65676172 4453203a 72614320     _storage: SD Car
   28018:	6e692064 6c617473 6166206c 64656c69     d install failed
   28028:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   28038:	7274203a 6e752079 67756c70 646e6120     : try unplug and
   28048:	2d657220 67756c70 65687420 72616320      re-plug the car
   28058:	0a0d2e64 00000000 74696e69 6f74735f     d.......init_sto
   28068:	65676172 6f6d203a 69746e75 5320676e     rage: mounting S
   28078:	61632044 2e2e6472 000a0d2e 74696e69     D card......init
   28088:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   28098:	6f6d2064 20746e75 6c696166 20216465     d mount failed! 
   280a8:	73657228 29642520 00000a0d 74696e69     (res %d)....init
   280b8:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   280c8:	6f6d2064 20746e75 0d2e4b4f 0000000a     d mount OK......

000280d8 <main_mqtt_broker>:
   280d8:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   280e8:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   280f8:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   28108:	4a737242 6f564e42 376c4251 00000000     BrsJBNVoQBl7....
   28118:	6167786a 0000656d 5454514d 72452020     jxgame..MQTT  Er
   28128:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   28138:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   28148:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   28158:	7262206f 72656b6f 00000a0d 6e6e6f43     o broker....Conn
   28168:	20746365 6c696166 206f7420 76726573     ect fail to serv
   28178:	25287265 20212973 72746572 74692079     er(%s)! retry it
   28188:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   28198:	0000000a 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   281a8:	545f3631 00000030 4c5f3250 455f4445     16_T0...P2_LED_E
   281b8:	31354553 30545f36 00000000 615f6c63     SE516_T0....cl_a
   281c8:	735f736e 755f7165 00317273 5454514d     ns_seq_usr1.MQTT
   281d8:	6e6f4320 7463656e 0a0d6465 00000000      Connected......
   281e8:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   281f8:	20656e69 72756f79 63636120 21737365     ine your access!
   28208:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   28218:	00000000 5454514d 73696420 6e6e6f63     ....MQTT disconn
   28228:	65746365 000a0d64 6f736572 5f65766c     ected...resolve_
   28238:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   28248:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   28258:	0a0d0a0d 00000000 72617473 6f645f74     ........start_do
   28268:	6f6c6e77 203a6461 20434d4d 726f7473     wnload: MMC stor
   28278:	20656761 20746f6e 64616572 0a0d2e79     age not ready...
   28288:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   28298:	203a6461 462d6957 73692069 746f6e20     ad: Wi-Fi is not
   282a8:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   282b8:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   282c8:	75716572 20747365 73207369 20746e65     request is sent 
   282d8:	65726c61 2e796461 00000a0d 72617473     already.....star
   282e8:	6f645f74 6f6c6e77 203a6461 6e6e7572     t_download: runn
   282f8:	20676e69 6e776f64 64616f6c 726c6120     ing download alr
   28308:	79646165 000a0d2e 72617473 6f645f74     eady....start_do
   28318:	6f6c6e77 203a6461 646e6573 20676e69     wnload: sending 
   28328:	50545448 71657220 74736575 0d2e2e2e     HTTP request....
   28338:	0000000a 70747468 2f2f3a73 2e777777     ....https://www.
   28348:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   28358:	72666a6a 2f6b6e61 46415455 69622e4f     jjfrank/UTAFO.bi
   28368:	0000006e 726f7473 69665f65 705f656c     n...store_file_p
   28378:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   28388:	0a0d2e61 00000000 64333025 00000000     a.......%03d....
   28398:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   283a8:	63203a74 74616572 20676e69 656c6966     t: creating file
   283b8:	73255b20 000a0d5d 726f7473 69665f65      [%s]...store_fi
   283c8:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   283d8:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   283e8:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   283f8:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   28408:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   28418:	61657263 6e6f6974 72726520 2021726f     creation error! 
   28428:	3a746572 0a0d6425 00000000 726f7473     ret:%d......stor
   28438:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   28448:	20656c69 74697277 72652065 2c726f72     ile write error,
   28458:	776f6420 616f6c6e 61632064 6c65636e      download cancel
   28468:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   28478:	705f656c 656b6361 72203a74 69656365     le_packet: recei
   28488:	5b646576 5d756c25 6966202c 7320656c     ved[%lu], file s
   28498:	5b657a69 5d756c25 00000a0d 726f7473     ize[%lu]....stor
   284a8:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   284b8:	20656c69 6e776f64 64616f6c 73206465     ile downloaded s
   284c8:	65636375 75667373 2e796c6c 00000a0d     uccessfully.....
   284d8:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   284e8:	5720676e 20696669 61746144 65757120     ng Wifi Data que
   284f8:	21736575 00000a0d 35455345 2d203631     ues!....ESE516 -
   28508:	66695720 6e492069 43207469 0d65646f      Wifi Init Code.
   28518:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   28528:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   28538:	65696c63 6920746e 6974696e 7a696c61     client initializ
   28548:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   28558:	25207365 0a0d2964 00000000 6e69616d     es %d)......main
   28568:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   28578:	6c6c6163 72726520 2021726f 73657228     call error! (res
   28588:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   28598:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   285a8:	20504120 2e2e7325 000a0d2e 6e6e6f43      AP %s......Conn
   285b8:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   285c8:	72656b6f 000a0d21 00007d5d 475f3150     oker!...]}..P1_G
   285d8:	5f454d41 35455345 545f3631 00000030     AME_ESE516_T0...
   285e8:	6d69227b 3a227875 202c6425 756d6922     {"imux":%d, "imu
   285f8:	203a2279 202c6425 756d6922 203a227a     y": %d, "imuz": 
   28608:	007d6425 495f3250 455f554d 31354553     %d}.P2_IMU_ESE51
   28618:	30545f36 00000000 4941465b 72205d4c     6_T0....[FAIL] r
   28628:	25207365 000a0d64 67616c46 78742e41     es %d...FlagA.tx
   28638:	64612074 21646564 00000a0d 6c463a30     t added!....0:Fl
   28648:	2e416761 00747874 69666977 3a62635f     agA.txt.wifi_cb:
   28658:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   28668:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   28678:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   28688:	5443454e 0a0d4445 00000000 6e6c6177     NECTED......waln
   28698:	31337475 00000031 33545041 322d3131     ut311...APT311-2
   286a8:	0000342e 69666977 3a62635f 20504920     .4..wifi_cb: IP 
   286b8:	72646461 20737365 25207369 75252e75     address is %u.%u
   286c8:	2e75252e 0a0d7525 00000000 6f727245     .%u.%u......Erro
   286d8:	6f632072 63656e6e 676e6974 206f7420     r connecting to 
   286e8:	5454514d 6f724220 2172656b 00000a0d     MQTT Broker!....
   286f8:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
   28708:	61702064 656d6172 28726574 202e2973     d parameter(s). 
   28718:	746e4520 22207265 706c6568 6f742022      Enter "help" to
   28728:	65697620 20612077 7473696c 20666f20      view a list of 
   28738:	69617661 6c62616c 6f632065 6e616d6d     available comman
   28748:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
   28758:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
   28768:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
   28778:	65697620 20612077 7473696c 20666f20      view a list of 
   28788:	69617661 6c62616c 6f632065 6e616d6d     available comman
   28798:	0d2e7364 000a0d0a 706c6568 00000000     ds......help....
   287a8:	65680a0d 0d3a706c 694c200a 20737473     ..help:.. Lists 
   287b8:	206c6c61 20656874 69676572 72657473     all the register
   287c8:	63206465 616d6d6f 0d73646e 000a0d0a     ed commands.....

000287d8 <xHelpCommand>:
   287d8:	000287a0 000287a8 0001514d 00000000     ........MQ......
   287e8:	00015684 0001567c 00015680 0001569c     .V..|V...V...V..
   287f8:	00015678 00015688 0001568c 00015690     xV...V...V...V..
   28808:	00015694 20746f4e 756f6e65 54206867     .V..Not enough T
   28818:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
   28828:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
   28838:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
   28848:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
   28858:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
   28868:	2d207365 636e6920 73616572 52542065     es - increase TR
   28878:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
   28888:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   28898:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
   288a8:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
   288b8:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   288c8:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
   288d8:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   288e8:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   288f8:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
   28908:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   28918:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
   28928:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   28938:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
   28948:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
   28958:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   28968:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
   28978:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   28988:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
   28998:	6e616820 73656c64 69202d20 6572636e      handles - incre
   289a8:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
   289b8:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   289c8:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   289d8:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
   289e8:	61682050 656c646e 202d2073 72636e69     P handles - incr
   289f8:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
   28a08:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
   28a18:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   28a28:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
   28a38:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
   28a48:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
   28a58:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
   28a68:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   28a78:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   28a88:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
   28a98:	6e616820 73656c64 69202d20 6572636e      handles - incre
   28aa8:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
   28ab8:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
   28ac8:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   28ad8:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
   28ae8:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
   28af8:	64696c61 6a626f20 63746365 7373616c     alid objectclass
   28b08:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
   28b18:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
   28b28:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
   28b38:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
   28b48:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
   28b58:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
   28b68:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
   28b78:	6f6d2074 00296564 74437a54 00006c72     t mode).TzCtrl..
   28b88:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28b98:	65684376 61446b63 6f546174 764f6542     vCheckDataToBeOv
   28ba8:	72777265 65747469 726f466e 746c754d     erwrittenForMult
   28bb8:	746e4569 76457972 73746e65 6f6e203a     iEntryEvents: no
   28bc8:	746e4566 73656972 68436f54 206b6365     fEntriesToCheck 
   28bd8:	30203d3d 00000000 43415254 53415f45     == 0....TRACE_AS
   28be8:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   28bf8:	53544474 6e49203a 696c6176 61762064     tDTS: Invalid va
   28c08:	2065756c 20726f66 61726170 616d5f6d     lue for param_ma
   28c18:	53544478 00000000 20646142 61726170     xDTS....Bad para
   28c28:	616d5f6d 53544478 206e6920 54767270     m_maxDTS in prvT
   28c38:	65636172 44746547 00005354 43415254     raceGetDTS..TRAC
   28c48:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28c58:	65476563 6a624f74 48746365 6c646e61     ceGetObjectHandl
   28c68:	49203a65 6c61766e 76206469 65756c61     e: Invalid value
   28c78:	726f6620 6a626f20 63746365 7373616c      for objectclass
   28c88:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   28c98:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   28ca8:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   28cb8:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   28cc8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28cd8:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   28ce8:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   28cf8:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   28d08:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   28d18:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28d28:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   28d38:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   28d48:	65756c61 726f6620 00646920 63617254     alue for id.Trac
   28d58:	65522065 64726f63 44207265 006f6d65     e Recorder Demo.
   28d68:	65747441 2074706d 69206f74 7865646e     Attempt to index
   28d78:	74756f20 65646973 65766520 6220746e      outside event b
   28d88:	65666675 00002172 43415254 53415f45     uffer!..TRACE_AS
   28d98:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28da8:	6a624f74 4e746365 3a656d61 6d616e20     tObjectName: nam
   28db8:	3d3d2065 4c554e20 0000004c 656c6c49     e == NULL...Ille
   28dc8:	206c6167 656a626f 63207463 7373616c     gal object class
   28dd8:	206e6920 54767270 65636172 4f746553      in prvTraceSetO
   28de8:	63656a62 6d614e74 00000065 656c6c49     bjectName...Ille
   28df8:	206c6167 646e6168 2820656c 69202930     gal handle (0) i
   28e08:	7270206e 61725476 65536563 6a624f74     n prvTraceSetObj
   28e18:	4e746365 2e656d61 00000000 43415254     ectName.....TRAC
   28e28:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28e38:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   28e48:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   28e58:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   28e68:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28e78:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   28e88:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   28e98:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   28ea8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28eb8:	65536563 69725074 7469726f 6f725079     ceSetPriorityPro
   28ec8:	74726570 6f203a79 63656a62 616c6374     perty: objectcla
   28ed8:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
   28ee8:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
   28ef8:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28f08:	69725074 7469726f 6f725079 74726570     tPriorityPropert
   28f18:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
   28f28:	726f6620 00646920 43415254 53415f45      for id.TRACE_AS
   28f38:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28f48:	73615474 736e496b 636e6174 6e694665     tTaskInstanceFin
   28f58:	65687369 49203a64 6c61766e 76206469     ished: Invalid v
   28f68:	65756c61 726f6620 6e616820 00656c64     alue for handle.
   28f78:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28f88:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   28f98:	6c61436c 65203a6c 65646f63 203d3e20     lCall: ecode >= 
   28fa8:	46467830 00000000 43415254 53415f45     0xFF....TRACE_AS
   28fb8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   28fc8:	4b65726f 656e7265 6c61436c 6f203a6c     oreKernelCall: o
   28fd8:	63656a62 616c4374 3e207373 5254203d     bjectClass >= TR
   28fe8:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   28ff8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29008:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29018:	6c61436c 49203a6c 6c61766e 76206469     lCall: Invalid v
   29028:	65756c61 726f6620 6a626f20 4e746365     alue for objectN
   29038:	65626d75 00000072 6f636552 72656472     umber...Recorder
   29048:	73756220 202d2079 68676968 69727020      busy - high pri
   29058:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29068:	63737973 3f6c6c61 29322820 00000000     syscall? (2)....
   29078:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29088:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29098:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   290a8:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   290b8:	76206469 65756c61 726f6620 74766520     id value for evt
   290c8:	65646f63 00000000 6f636552 72656472     code....Recorder
   290d8:	73756220 202d2079 68676968 69727020      busy - high pri
   290e8:	7469726f 53492079 73752052 20676e69     ority ISR using 
   290f8:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   29108:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29118:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29128:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29138:	63747665 2065646f 30203d3e 00464678     evtcode >= 0xFF.
   29148:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29158:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29168:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29178:	656a626f 6c437463 20737361 54203d3e     objectClass >= T
   29188:	45434152 4c434e5f 45535341 00000053     RACE_NCLASSES...
   29198:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   291a8:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   291b8:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   291c8:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   291d8:	626f2072 7463656a 626d754e 00007265     r objectNumber..
   291e8:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   291f8:	68676968 69727020 7469726f 53492079     high priority IS
   29208:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   29218:	29332820 00000000 43415254 53415f45      (3)....TRACE_AS
   29228:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   29238:	5465726f 526b7361 79646165 6e49203a     oreTaskReady: In
   29248:	696c6176 61762064 2065756c 20726f66     valid value for 
   29258:	646e6168 0000656c 6f636552 72656472     handle..Recorder
   29268:	73756220 202d2079 68676968 69727020      busy - high pri
   29278:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29288:	63737973 3f6c6c61 29312820 00000000     syscall? (1)....
   29298:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   292a8:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   292b8:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   292c8:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   292d8:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   292e8:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   292f8:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   29308:	696c6176 61762064 2065756c 20726f66     valid value for 
   29318:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   29328:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   29338:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   29348:	726f6620 6a626f20 63746365 7373616c      for objectclass
   29358:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   29368:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   29378:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   29388:	726f6620 6a626f20 68746365 6c646e61      for objecthandl
   29398:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   293a8:	6552203a 64726f63 6e207265 6920746f     : Recorder not i
   293b8:	6974696e 7a696c61 202e6465 20657355     nitialized. Use 
   293c8:	61725476 6e456563 656c6261 69202928     vTraceEnable() i
   293d8:	6574736e 00216461 61747328 70757472     nstead!.(startup
   293e8:	00000029 43415254 53415f45 54524553     )...TRACE_ASSERT
   293f8:	5478203a 65636172 69676552 72657473     : xTraceRegister
   29408:	69727453 203a676e 6562616c 3d3d206c     String: label ==
   29418:	4c554e20 0000004c 43415254 53415f45      NULL...TRACE_AS
   29428:	54524553 6552203a 64726f63 6e207265     SERT: Recorder n
   29438:	6920746f 6974696e 7a696c61 202c6465     ot initialized, 
   29448:	6c6c6163 72547620 45656361 6c62616e     call vTraceEnabl
   29458:	20292865 73726966 00002174 454c4449     e() first!..IDLE
   29468:	00000000 00018c8c 00018c8c 00018c8c     ................
   29478:	00018c04 00018cce 00018ce8 00018c8c     ................
   29488:	00018c8c 00018c04 00018cce 20726d54     ............Tmr 
   29498:	00637653                                Svc.

0002949c <mmc_trans_multipliers>:
   2949c:	00000000 0000000a 0000000c 0000000d     ................
   294ac:	0000000f 00000014 0000001a 0000001e     ................
   294bc:	00000023 00000028 0000002d 00000034     #...(...-...4...
   294cc:	00000037 0000003c 00000046 00000050     7...<...F...P...

000294dc <sd_mmc_trans_units>:
   294dc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000294f8 <sd_trans_multipliers>:
   294f8:	00000000 0000000a 0000000c 0000000d     ................
   29508:	0000000f 00000014 00000019 0000001e     ................
   29518:	00000023 00000028 0000002d 00000032     #...(...-...2...
   29528:	00000037 0000003c 00000046 00000050     7...<...F...P...

00029538 <__FUNCTION__.17045>:
   29538:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   29548:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   29558:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   29568:	6320746c 000a646d 0000000d 0001ad80     lt cmd..........
   29578:	0001ad50 0001ad48 0001ad60 0001ad58     P...H...`...X...
   29588:	0001ad78 0001ad68 0001ad70              x...h...p...

00029594 <__FUNCTION__.17913>:
   29594:	5f666968 646e6573 00000000              hif_send....

000295a0 <__FUNCTION__.17923>:
   295a0:	5f666968 00727369                       hif_isr.

000295a8 <__FUNCTION__.17932>:
   295a8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000295b8 <__FUNCTION__.17944>:
   295b8:	5f666968 65636572 00657669              hif_receive.

000295c4 <__FUNCTION__.17960>:
   295c4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   295d4:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   295e4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   295f4:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   29604:	73657264 75622073 61662073 000a6c69     dress bus fail..
   29614:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   29624:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   29634:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   29644:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   29654:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   29664:	746f6e20 67657220 65747369 0a646572      not registered.
   29674:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   29684:	206b6361 6e207369 7220746f 73696765     ack is not regis
   29694:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   296a4:	6b636162 20736920 20746f6e 69676572     back is not regi
   296b4:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   296c4:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   296d4:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   296e4:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   296f4:	65722074 74736967 64657265 0000000a     t registered....
   29704:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   29714:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   29724:	61207473 64207070 276e6469 65732074     st app didn't se
   29734:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   29744:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   29754:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   29764:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   29774:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   29784:	6552206f 69206461 7265746e 74707572     o Read interrupt
   29794:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   297a4:	74206c69 6168206f 656c646e 746e6920     il to handle int
   297b4:	75727265 25207470 72742064 67412079     errupt %d try Ag
   297c4:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   297d4:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   297e4:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   297f4:	65747365 69532064 6920657a 616c2073     ested Size is la
   29804:	72656772 61687420 6874206e 65722065     rger than the re
   29814:	65766963 75622064 72656666 7a697320     cived buffer siz
   29824:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   29834:	20505041 75716552 65747365 64412064     APP Requested Ad
   29844:	73657264 65622073 646e6f79 65687420     dress beyond the
   29854:	63657220 64657669 66756220 20726566      recived buffer 
   29864:	72646461 20737365 20646e61 676e656c     address and leng
   29874:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   29884:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   29894:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   298a4:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   298b4:	74207075 63206568 0a706968 00000000     up the chip.....

000298c4 <__FUNCTION__.17895>:
   298c4:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000298d0 <__FUNCTION__.17924>:
   298d0:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000298e0 <__FUNCTION__.17955>:
   298e0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   298f0:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   29900:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   29910:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   29920:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   29930:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   29940:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   29950:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   29960:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   29970:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   29980:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   29990:	20706557 2079656b 676e656c 25206874     Wep key length %
   299a0:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   299b0:	656b204b 656c2079 6874676e 0000000a     K key length....
   299c0:	65646e75 656e6966 65732064 79742063     undefined sec ty
   299d0:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   299e0:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   299f0:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   29a00:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   29a10:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   29a20:	6e694d20 69726420 20726576 20726576      Min driver ver 
   29a30:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   29a40:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   29a50:	0000000a 343a3531 34353a31 00000000     ....15:41:54....
   29a60:	2079614d 32203920 00313230 76697244     May  9 2021.Driv
   29a70:	62207265 746c6975 20746120 25097325     er built at %s.%
   29a80:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   29a90:	7277616d 65562065 6f697372 00000a6e     mawre Version...

00029aa0 <__FUNCTION__.17752>:
   29aa0:	70696863 6b61775f 00000065              chip_wake...

00029aac <__FUNCTION__.17801>:
   29aac:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   29abc:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   29acc:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   29adc:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   29aec:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   29afc:	20656874 70696863 0000000a 76697244     the chip....Driv
   29b0c:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   29b1c:	000a786c                                lx..

00029b20 <__FUNCTION__.17799>:
   29b20:	645f6d6e 695f7672 0074696e              nm_drv_init.

00029b2c <__FUNCTION__.17806>:
   29b2c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   29b3c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   29b4c:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   29b5c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   29b6c:	73616c66 69642068 6c626173 61662065     flash disable fa
   29b7c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   29b8c:	6c696166 696e6920 75622074 00000a73     fail init bus...
   29b9c:	6c696166 74206465 6e65206f 656c6261     failed to enable
   29bac:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   29bbc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   29bcc:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   29bdc:	20444920 0a786c25 00000000 0001bcfc      ID %lx.........
   29bec:	0001bcfc 0001bd2c 0001bcae 0001bcd2     ....,...........
   29bfc:	0001bce0 0001bd12 0001bd12 0001bd5a     ............Z...
   29c0c:	0001bc92 0001bd90 0001bd90 0001bd90     ................
   29c1c:	0001bd90 0001bcee 0001bf7e 0001bf7e     ........~...~...
   29c2c:	0001bfb6 0001bf28 0001bf4e 0001bf5e     ....(...N...^...
   29c3c:	0001bf98 0001bf98 0001bff0 0001bf04     ................
   29c4c:	0001c3c4 0001c3c4 0001c3c4 0001c3c4     ................
   29c5c:	0001bf6e cac4c9c3                       n.......

00029c64 <__FUNCTION__.17074>:
   29c64:	5f697073 00646d63                       spi_cmd.

00029c6c <__FUNCTION__.17081>:
   29c6c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00029c7c <__FUNCTION__.17090>:
   29c7c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00029c88 <__FUNCTION__.17123>:
   29c88:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   29c98:	00000000                                ....

00029c9c <__FUNCTION__.17169>:
   29c9c:	5f697073 61746164 6972775f 00006574     spi_data_write..

00029cac <__FUNCTION__.17181>:
   29cac:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00029cbc <__FUNCTION__.17192>:
   29cbc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00029ccc <__FUNCTION__.17204>:
   29ccc:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00029cdc <__FUNCTION__.17215>:
   29cdc:	735f6d6e 725f6970 00646165              nm_spi_read.

00029ce8 <__FUNCTION__.17236>:
   29ce8:	735f6d6e 695f6970 0074696e              nm_spi_init.

00029cf4 <crc7_syndrome_table>:
   29cf4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   29d04:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   29d14:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   29d24:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   29d34:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   29d44:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   29d54:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   29d64:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   29d74:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   29d84:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   29d94:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   29da4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   29db4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   29dc4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   29dd4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   29de4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   29df4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29e04:	6e692064 6e726574 72206c61 20646165     d internal read 
   29e14:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   29e24:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   29e34:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   29e44:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29e54:	6e692064 6e726574 72206c61 20646165     d internal read 
   29e64:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   29e74:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29e84:	6e692064 6e726574 77206c61 65746972     d internal write
   29e94:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   29ea4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   29eb4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   29ec4:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   29ed4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   29ee4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   29ef4:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   29f04:	6e612074 65722064 20797274 25206425     t and retry %d %
   29f14:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   29f24:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   29f34:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   29f44:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   29f54:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   29f64:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   29f74:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   29f84:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29f94:	61642064 62206174 6b636f6c 69727720     d data block wri
   29fa4:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   29fb4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   29fc4:	656c6961 61642064 62206174 6b636f6c     ailed data block
   29fd4:	63726320 69727720 202c6574 20737562      crc write, bus 
   29fe4:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   29ff4:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   2a004:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   2a014:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2a024:	72206174 6f707365 2065736e 64616572     ta response read
   2a034:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   2a044:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   2a054:	206b636f 61746164 69727720 2e2e6574     ock data write..
   2a064:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a074:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   2a084:	73756220 72726520 2e2e726f 00000a2e      bus error......
   2a094:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   2a0a4:	65666675 69732072 7420657a 73206f6f     uffer size too s
   2a0b4:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   2a0c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a0d4:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   2a0e4:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   2a0f4:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   2a104:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   2a114:	74732064 20657461 70736572 65736e6f     d state response
   2a124:	61747320 28206574 78323025 00000a29      state (%02x)...
   2a134:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   2a144:	6164202c 72206174 20646165 70736572     , data read resp
   2a154:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   2a164:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2a174:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2a184:	69646165 6420676e 2e617461 0000000a     eading data.....
   2a194:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2a1a4:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2a1b4:	69646165 6320676e 0a2e6372 00000000     eading crc......
   2a1c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a1d4:	61642064 62206174 6b636f6c 61657220     d data block rea
   2a1e4:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   2a1f4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a204:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2a214:	63726320 61657220 62202c64 65207375      crc read, bus e
   2a224:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   2a234:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2a244:	72206174 6f707365 2065736e 64616572     ta response read
   2a254:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   2a264:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a274:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   2a284:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   2a294:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a2a4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   2a2b4:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   2a2c4:	65736552 6e612074 65722064 20797274     Reset and retry 
   2a2d4:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   2a2e4:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   2a2f4:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   2a304:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   2a314:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   2a324:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   2a334:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   2a344:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   2a354:	25207465 65732064 6f697373 4449206e     et %d session ID
   2a364:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   2a374:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   2a384:	0001eb92 0001eb8e 0001eb8e 0001ebf4     ................
   2a394:	0001ebf4 0001eba6 0001eb98 0001ebac     ................
   2a3a4:	0001ebe2 0001ed20 0001ed00 0001ed00     .... ...........
   2a3b4:	0001ed8c 0001ed12 0001ed2e 0001ed04     ................
   2a3c4:	0001ed3c 0001ed7c                       <...|...

0002a3cc <_tcc_apbcmasks>:
   2a3cc:	00000100 00000200 00000400              ............

0002a3d8 <_tcc_cc_nums>:
   2a3d8:	00020204                                ....

0002a3dc <_tcc_gclk_ids>:
   2a3dc:	001b1a1a                                ....

0002a3e0 <_tcc_maxs>:
   2a3e0:	00ffffff 00ffffff 0000ffff              ............

0002a3ec <_tcc_ow_nums>:
   2a3ec:	00020408                                ....

0002a3f0 <_tcc_intflag>:
   2a3f0:	00000001 00000002 00000004 00000008     ................
   2a400:	00001000 00002000 00004000 00008000     ..... ...@......
   2a410:	00010000 00020000 00040000 00080000     ................

0002a420 <tcc_interrupt_vectors.12458>:
   2a420:	0011100f                                ....

0002a424 <LfnOfs>:
   2a424:	07050301 12100e09 1c181614 0000001e     ................

0002a434 <excvt.4558>:
   2a434:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   2a444:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   2a454:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   2a464:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   2a474:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2a484:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2a494:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2a4a4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   2a4b4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   2a4c4:	00005d5b                                []..

0002a4c8 <Tbl>:
   2a4c8:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   2a4d8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   2a4e8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   2a4f8:	00d600ff 00f800dc 00d800a3 019200d7     ................
   2a508:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   2a518:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   2a528:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   2a538:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   2a548:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   2a558:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   2a568:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   2a578:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   2a588:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   2a598:	00da00de 00d900db 00dd00fd 00b400af     ................
   2a5a8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   2a5b8:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0002a5c8 <tbl_lower.4308>:
   2a5c8:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   2a5d8:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   2a5e8:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   2a5f8:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   2a608:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   2a618:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   2a628:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   2a638:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   2a648:	01050103 01090107 010d010b 0111010f     ................
   2a658:	01150113 01190117 011d011b 0121011f     ..............!.
   2a668:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   2a678:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   2a688:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   2a698:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   2a6a8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   2a6b8:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   2a6c8:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   2a6d8:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   2a6e8:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   2a6f8:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   2a708:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   2a718:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   2a728:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   2a738:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   2a748:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   2a758:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   2a768:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   2a778:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   2a788:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   2a798:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0002a7a8 <tbl_upper.4309>:
   2a7a8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   2a7b8:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   2a7c8:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   2a7d8:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   2a7e8:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   2a7f8:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   2a808:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   2a818:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   2a828:	01040102 01080106 010c010a 0110010e     ................
   2a838:	01140112 01180116 011c011a 0120011e     .............. .
   2a848:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   2a858:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   2a868:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   2a878:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   2a888:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   2a898:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   2a8a8:	03940393 03960395 03980397 039a0399     ................
   2a8b8:	039c039b 039e039d 03a0039f 03a303a1     ................
   2a8c8:	03a503a4 03a703a6 03a903a8 041003aa     ................
   2a8d8:	04120411 04140413 04160415 04180417     ................
   2a8e8:	041a0419 041c041b 041e041d 0420041f     .............. .
   2a8f8:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   2a908:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   2a918:	04030402 04050404 04070406 04090408     ................
   2a928:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   2a938:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   2a948:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   2a958:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   2a968:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   2a978:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   2a988:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2a9a0:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2a9e0:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2a9f8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2aa38:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   2aa48:	00023ac6 00023ac0 00023aba 00023ab4     .:...:...:...:..
   2aa58:	00023acc 00023ad4 00023acc 00023aae     .:...:...:...:..
   2aa68:	00023aa8 00023acc 00023aa2 00023aa2     .:...:...:...:..
   2aa78:	00023a9c 00023a96 00023ad4 00023b3e     .:...:...:..>;..
   2aa88:	00023b38 00023b32 00023b2c 00023b44     8;..2;..,;..D;..
   2aa98:	00023b4c 00023b44 00023b26 00023b20     L;..D;..&;.. ;..
   2aaa8:	00023b44 00023b1a 00023b1a 00023b14     D;...;...;...;..
   2aab8:	00023b0e 00023b4c 00023bb8 00023bb2     .;..L;...;...;..
   2aac8:	00023bac 00023ba6 00023bbe 00023bbe     .;...;...;...;..
   2aad8:	00023bbe 00023ba0 00023b9a 00023bbe     .;...;...;...;..
   2aae8:	00023b94 00023b94 00023b8e 00023b88     .;...;...;...;..
   2aaf8:	33323130 37363534 62613938 66656463     0123456789abcdef
   2ab08:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   2ab18:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   2ab28:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   2ab38:	20544547 00000000 54534f50 00000020     GET ....POST ...
   2ab48:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   2ab58:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   2ab68:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   2ab78:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   2ab88:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   2ab98:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   2aba8:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   2abb8:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   2abc8:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   2abd8:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   2abe8:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   2abf8:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   2ac08:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   2ac18:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   2ac28:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   2ac38:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   2ac48:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   2ac58:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   2ac68:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   2ac78:	6f727245 6e692072 61697469 697a696c     Error initializi
   2ac88:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   2ac98:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   2aca8:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   2acb8:	6f727245 6e692072 61697469 697a696c     Error initializi
   2acc8:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   2acd8:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   2ace8:	0d217761 0000000a 70616548 66656220     aw!.....Heap bef
   2acf8:	2065726f 72617473 676e6974 73617420     ore starting tas
   2ad08:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
   2ad18:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
   2ad28:	73617420 6f63206b 20646c75 20746f6e      task could not 
   2ad38:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   2ad48:	0000000a 70616548 74666120 73207265     ....Heap after s
   2ad58:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
   2ad68:	0000000a 49464957 5341545f 0000004b     ....WIFI_TASK...
   2ad78:	3a525245 46495720 61742049 63206b73     ERR: WIFI task c
   2ad88:	646c756f 746f6e20 20656220 74696e69     ould not be init
   2ad98:	696c6169 2164657a 00000a0d 70616548     ialized!....Heap
   2ada8:	74666120 73207265 74726174 20676e69      after starting 
   2adb8:	49464957 6425203a 00000a0d 746e6f43     WIFI: %d....Cont
   2adc8:	206c6f72 6b736154 00000000 3a525245     rol Task....ERR:
   2add8:	6e6f4320 6c6f7274 73617420 6f63206b      Control task co
   2ade8:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   2adf8:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   2ae08:	74666120 73207265 74726174 20676e69      after starting 
   2ae18:	746e6f43 206c6f72 6b736154 6425203a     Control Task: %d
   2ae28:	00000a0d 6f727245 6e6f2072 6d656d20     ....Error on mem
   2ae38:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
   2ae48:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
   2ae58:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
   2ae68:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
   2ae78:	21534f54 00000a0d 000244b4 00024484     TOS!.....D...D..
   2ae88:	00024496 000243d8 00024496 0002447a     .D...C...D..zD..
   2ae98:	00024496 000243d8 00024484 00024484     .D...C...D...D..
   2aea8:	0002447a 000243d8 000243e0 000243e0     zD...C...C...C..
   2aeb8:	000243e0 0002449c 00024484 00024484     .C...D...D...D..
   2aec8:	00024458 0002453c 00024458 0002447a     XD..<E..XD..zD..
   2aed8:	00024458 0002453c 00024484 00024484     XD..<E...D...D..
   2aee8:	0002447a 0002453c 000243e0 000243e0     zD..<E...C...C..
   2aef8:	000243e0 00024546 000246e4 00024634     .C..FE...F..4F..
   2af08:	00024634 00024632 000246d6 000246d6     4F..2F...F...F..
   2af18:	000246cc 00024632 000246d6 000246cc     .F..2F...F...F..
   2af28:	000246d6 00024632 000246dc 000246dc     .F..2F...F...F..
   2af38:	000246dc 0002476c 000250f0 000250d2     .F..lG...P...P..
   2af48:	0002508c 00024faa 0002508c 000250c4     .P...O...P...P..
   2af58:	0002508c 00024faa 000250d2 000250d2     .P...O...P...P..
   2af68:	000250c4 00024faa 00024fa2 00024fa2     .P...O...O...O..
   2af78:	00024fa2 00025308 00025750 00025610     .O...S..PW...V..
   2af88:	00025610 0002560c 00025728 00025728     .V...V..(W..(W..
   2af98:	0002571a 0002560c 00025728 0002571a     .W...V..(W...W..
   2afa8:	00025728 0002560c 00025730 00025730     (W...V..0W..0W..
   2afb8:	00025730 00025934                       0W..4Y..

0002afc0 <_global_impure_ptr>:
   2afc0:	200000e0                                ... 

0002afc4 <__sf_fake_stderr>:
	...

0002afe4 <__sf_fake_stdin>:
	...

0002b004 <__sf_fake_stdout>:
	...
   2b024:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   2b034:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   2b044:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   2b054:	37363534 62613938 66656463 20200000              456789abcdef.

0002b061 <_ctype_>:
   2b061:	20202000 20202020 28282020 20282828     .         ((((( 
   2b071:	20202020 20202020 20202020 20202020                     
   2b081:	10108820 10101010 10101010 10101010      ...............
   2b091:	04040410 04040404 10040404 10101010     ................
   2b0a1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2b0b1:	01010101 01010101 01010101 10101010     ................
   2b0c1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2b0d1:	02020202 02020202 02020202 10101010     ................
   2b0e1:	00000020 00000000 00000000 00000000      ...............
	...

0002b164 <_init>:
   2b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b166:	46c0      	nop			; (mov r8, r8)
   2b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b16a:	bc08      	pop	{r3}
   2b16c:	469e      	mov	lr, r3
   2b16e:	4770      	bx	lr

0002b170 <__init_array_start>:
   2b170:	000120dd 	.word	0x000120dd

0002b174 <_fini>:
   2b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b176:	46c0      	nop			; (mov r8, r8)
   2b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b17a:	bc08      	pop	{r3}
   2b17c:	469e      	mov	lr, r3
   2b17e:	4770      	bx	lr

0002b180 <__fini_array_start>:
   2b180:	000120b5 	.word	0x000120b5
