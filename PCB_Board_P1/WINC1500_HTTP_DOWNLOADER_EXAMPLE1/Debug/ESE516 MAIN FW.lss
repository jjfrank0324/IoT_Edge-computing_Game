
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019264  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002ac  20000000  0002b264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005340  200002b0  0002b520  000202b0  2**4
                  ALLOC
  3 .stack        00002000  200055f0  00030860  000202b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0011af72  00000000  00000000  0002032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000137b1  00000000  00000000  0013b29f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00039f75  00000000  00000000  0014ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002d00  00000000  00000000  001889c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003b00  00000000  00000000  0018b6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029e2e  00000000  00000000  0018f1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000568cc  00000000  00000000  001b8ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c127f  00000000  00000000  0020f8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00009314  00000000  00000000  002d0b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	f0 75 00 20 a1 f9 01 00 85 f9 01 00 85 f9 01 00     .u. ............
	...
   1202c:	75 66 01 00 00 00 00 00 00 00 00 00 51 67 01 00     uf..........Qg..
   1203c:	95 67 01 00 85 f9 01 00 85 f9 01 00 85 f9 01 00     .g..............
   1204c:	7d da 01 00 fd d6 01 00 85 f9 01 00 f5 25 01 00     }............%..
   1205c:	85 f9 01 00 a9 26 01 00 a5 de 01 00 b5 de 01 00     .....&..........
   1206c:	c5 de 01 00 d5 de 01 00 e5 de 01 00 f5 de 01 00     ................
   1207c:	55 f9 01 00 65 f9 01 00 75 f9 01 00 71 51 01 00     U...e...u...qQ..
   1208c:	81 51 01 00 91 51 01 00 00 00 00 00 00 00 00 00     .Q...Q..........
   1209c:	85 f9 01 00 85 f9 01 00 4d 25 01 00 85 f9 01 00     ........M%......
   120ac:	85 f9 01 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	0002b264 	.word	0x0002b264

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	0002b264 	.word	0x0002b264
   1210c:	0002b264 	.word	0x0002b264
   12110:	00000000 	.word	0x00000000

00012114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   12114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   12116:	2200      	movs	r2, #0
   12118:	2300      	movs	r3, #0
   1211a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1211c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1211e:	2100      	movs	r1, #0
   12120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   12122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   12124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
   12126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
   12128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1212a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1212c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1212e:	24c0      	movs	r4, #192	; 0xc0
   12130:	0164      	lsls	r4, r4, #5
   12132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   12134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   12136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
   12138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
   1213a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
   1213c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1213e:	242a      	movs	r4, #42	; 0x2a
   12140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
   12142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
   12144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
   12146:	3c06      	subs	r4, #6
   12148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1214a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1214c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
   1214e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
   12150:	232b      	movs	r3, #43	; 0x2b
   12152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
   12154:	3301      	adds	r3, #1
   12156:	54c1      	strb	r1, [r0, r3]
}
   12158:	bd10      	pop	{r4, pc}
	...

0001215c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1215c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1215e:	46d6      	mov	lr, sl
   12160:	464f      	mov	r7, r9
   12162:	4646      	mov	r6, r8
   12164:	b5c0      	push	{r6, r7, lr}
   12166:	b096      	sub	sp, #88	; 0x58
   12168:	0007      	movs	r7, r0
   1216a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1216c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1216e:	4acb      	ldr	r2, [pc, #812]	; (1249c <adc_init+0x340>)
   12170:	6a10      	ldr	r0, [r2, #32]
   12172:	2380      	movs	r3, #128	; 0x80
   12174:	025b      	lsls	r3, r3, #9
   12176:	4303      	orrs	r3, r0
   12178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1217a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1217c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1217e:	07db      	lsls	r3, r3, #31
   12180:	d505      	bpl.n	1218e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
   12182:	b016      	add	sp, #88	; 0x58
   12184:	bc1c      	pop	{r2, r3, r4}
   12186:	4690      	mov	r8, r2
   12188:	4699      	mov	r9, r3
   1218a:	46a2      	mov	sl, r4
   1218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1218e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
   12190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   12192:	079b      	lsls	r3, r3, #30
   12194:	d4f5      	bmi.n	12182 <adc_init+0x26>
	module_inst->reference = config->reference;
   12196:	7873      	ldrb	r3, [r6, #1]
   12198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1219a:	2b00      	cmp	r3, #0
   1219c:	d104      	bne.n	121a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1219e:	4ac0      	ldr	r2, [pc, #768]	; (124a0 <adc_init+0x344>)
   121a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
   121a2:	2104      	movs	r1, #4
   121a4:	430b      	orrs	r3, r1
   121a6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
   121a8:	683b      	ldr	r3, [r7, #0]
   121aa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
   121ac:	7833      	ldrb	r3, [r6, #0]
   121ae:	466a      	mov	r2, sp
   121b0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   121b2:	4669      	mov	r1, sp
   121b4:	201e      	movs	r0, #30
   121b6:	4bbb      	ldr	r3, [pc, #748]	; (124a4 <adc_init+0x348>)
   121b8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   121ba:	201e      	movs	r0, #30
   121bc:	4bba      	ldr	r3, [pc, #744]	; (124a8 <adc_init+0x34c>)
   121be:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
   121c0:	232c      	movs	r3, #44	; 0x2c
   121c2:	5cf2      	ldrb	r2, [r6, r3]
   121c4:	2a00      	cmp	r2, #0
   121c6:	d054      	beq.n	12272 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
   121c8:	3b01      	subs	r3, #1
   121ca:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
   121cc:	7b33      	ldrb	r3, [r6, #12]
   121ce:	18eb      	adds	r3, r5, r3
   121d0:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
   121d2:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
   121d4:	b2c9      	uxtb	r1, r1
   121d6:	428b      	cmp	r3, r1
   121d8:	d221      	bcs.n	1221e <adc_init+0xc2>
   121da:	1952      	adds	r2, r2, r5
   121dc:	b2d3      	uxtb	r3, r2
   121de:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
   121e0:	4bb2      	ldr	r3, [pc, #712]	; (124ac <adc_init+0x350>)
   121e2:	469a      	mov	sl, r3
   121e4:	e003      	b.n	121ee <adc_init+0x92>
			offset++;
   121e6:	3501      	adds	r5, #1
   121e8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
   121ea:	45a9      	cmp	r9, r5
   121ec:	d017      	beq.n	1221e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   121ee:	240f      	movs	r4, #15
   121f0:	402c      	ands	r4, r5
   121f2:	7b33      	ldrb	r3, [r6, #12]
   121f4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
   121f6:	2250      	movs	r2, #80	; 0x50
   121f8:	49ad      	ldr	r1, [pc, #692]	; (124b0 <adc_init+0x354>)
   121fa:	a802      	add	r0, sp, #8
   121fc:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
   121fe:	2c13      	cmp	r4, #19
   12200:	d8f1      	bhi.n	121e6 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   12202:	00a4      	lsls	r4, r4, #2
   12204:	ab02      	add	r3, sp, #8
   12206:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12208:	a901      	add	r1, sp, #4
   1220a:	2300      	movs	r3, #0
   1220c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
   1220e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   12210:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   12212:	3301      	adds	r3, #1
   12214:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   12216:	b2c0      	uxtb	r0, r0
   12218:	4ba6      	ldr	r3, [pc, #664]	; (124b4 <adc_init+0x358>)
   1221a:	4798      	blx	r3
   1221c:	e7e3      	b.n	121e6 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
   1221e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
   12220:	2250      	movs	r2, #80	; 0x50
   12222:	49a3      	ldr	r1, [pc, #652]	; (124b0 <adc_init+0x354>)
   12224:	a802      	add	r0, sp, #8
   12226:	4ba1      	ldr	r3, [pc, #644]	; (124ac <adc_init+0x350>)
   12228:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
   1222a:	2c13      	cmp	r4, #19
   1222c:	d913      	bls.n	12256 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1222e:	7d73      	ldrb	r3, [r6, #21]
   12230:	009b      	lsls	r3, r3, #2
   12232:	b2db      	uxtb	r3, r3
   12234:	4642      	mov	r2, r8
   12236:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12238:	7db3      	ldrb	r3, [r6, #22]
   1223a:	01db      	lsls	r3, r3, #7
   1223c:	7872      	ldrb	r2, [r6, #1]
   1223e:	4313      	orrs	r3, r2
   12240:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
   12242:	4642      	mov	r2, r8
   12244:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
   12246:	7933      	ldrb	r3, [r6, #4]
   12248:	2b34      	cmp	r3, #52	; 0x34
   1224a:	d900      	bls.n	1224e <adc_init+0xf2>
   1224c:	e178      	b.n	12540 <adc_init+0x3e4>
   1224e:	009b      	lsls	r3, r3, #2
   12250:	4a99      	ldr	r2, [pc, #612]	; (124b8 <adc_init+0x35c>)
   12252:	58d3      	ldr	r3, [r2, r3]
   12254:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   12256:	00a4      	lsls	r4, r4, #2
   12258:	ab02      	add	r3, sp, #8
   1225a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1225c:	a901      	add	r1, sp, #4
   1225e:	2300      	movs	r3, #0
   12260:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   12262:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   12264:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   12266:	3301      	adds	r3, #1
   12268:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   1226a:	b2c0      	uxtb	r0, r0
   1226c:	4b91      	ldr	r3, [pc, #580]	; (124b4 <adc_init+0x358>)
   1226e:	4798      	blx	r3
   12270:	e7dd      	b.n	1222e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
   12272:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
   12274:	2250      	movs	r2, #80	; 0x50
   12276:	498e      	ldr	r1, [pc, #568]	; (124b0 <adc_init+0x354>)
   12278:	a802      	add	r0, sp, #8
   1227a:	4b8c      	ldr	r3, [pc, #560]	; (124ac <adc_init+0x350>)
   1227c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
   1227e:	2c13      	cmp	r4, #19
   12280:	d915      	bls.n	122ae <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
   12282:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
   12284:	2250      	movs	r2, #80	; 0x50
   12286:	498a      	ldr	r1, [pc, #552]	; (124b0 <adc_init+0x354>)
   12288:	a802      	add	r0, sp, #8
   1228a:	4b88      	ldr	r3, [pc, #544]	; (124ac <adc_init+0x350>)
   1228c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
   1228e:	2c13      	cmp	r4, #19
   12290:	d8cd      	bhi.n	1222e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   12292:	00a4      	lsls	r4, r4, #2
   12294:	ab02      	add	r3, sp, #8
   12296:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12298:	a901      	add	r1, sp, #4
   1229a:	2300      	movs	r3, #0
   1229c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   1229e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   122a2:	3301      	adds	r3, #1
   122a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   122a6:	b2c0      	uxtb	r0, r0
   122a8:	4b82      	ldr	r3, [pc, #520]	; (124b4 <adc_init+0x358>)
   122aa:	4798      	blx	r3
   122ac:	e7bf      	b.n	1222e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   122ae:	00a4      	lsls	r4, r4, #2
   122b0:	ab02      	add	r3, sp, #8
   122b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   122b4:	a901      	add	r1, sp, #4
   122b6:	2300      	movs	r3, #0
   122b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   122ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
   122be:	3301      	adds	r3, #1
   122c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
   122c2:	b2c0      	uxtb	r0, r0
   122c4:	4b7b      	ldr	r3, [pc, #492]	; (124b4 <adc_init+0x358>)
   122c6:	4798      	blx	r3
   122c8:	e7db      	b.n	12282 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   122ca:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
   122cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
   122ce:	2102      	movs	r1, #2
   122d0:	e01a      	b.n	12308 <adc_init+0x1ac>
		adjres = config->divide_result;
   122d2:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
   122d4:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
   122d6:	2410      	movs	r4, #16
   122d8:	e016      	b.n	12308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   122da:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
   122dc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
   122de:	2101      	movs	r1, #1
   122e0:	e012      	b.n	12308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   122e2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
   122e4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   122e6:	2100      	movs	r1, #0
   122e8:	e00e      	b.n	12308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   122ea:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
   122ec:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
   122ee:	2100      	movs	r1, #0
   122f0:	e00a      	b.n	12308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   122f2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
   122f4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
   122f6:	2100      	movs	r1, #0
   122f8:	e006      	b.n	12308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   122fa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
   122fc:	2400      	movs	r4, #0
	uint8_t adjres = 0;
   122fe:	2100      	movs	r1, #0
   12300:	e002      	b.n	12308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   12302:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
   12304:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
   12306:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   12308:	0109      	lsls	r1, r1, #4
   1230a:	2270      	movs	r2, #112	; 0x70
   1230c:	400a      	ands	r2, r1
   1230e:	4313      	orrs	r3, r2
   12310:	4642      	mov	r2, r8
   12312:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
   12314:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
   12316:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
   12318:	2b3f      	cmp	r3, #63	; 0x3f
   1231a:	d900      	bls.n	1231e <adc_init+0x1c2>
   1231c:	e731      	b.n	12182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
   1231e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12320:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12322:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   12324:	b25b      	sxtb	r3, r3
   12326:	2b00      	cmp	r3, #0
   12328:	dbfb      	blt.n	12322 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1232a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1232c:	8872      	ldrh	r2, [r6, #2]
   1232e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   12330:	2224      	movs	r2, #36	; 0x24
   12332:	5cb2      	ldrb	r2, [r6, r2]
   12334:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   12336:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12338:	7d32      	ldrb	r2, [r6, #20]
   1233a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1233c:	4313      	orrs	r3, r2
   1233e:	7cb2      	ldrb	r2, [r6, #18]
   12340:	0052      	lsls	r2, r2, #1
   12342:	4313      	orrs	r3, r2
   12344:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
   12346:	4642      	mov	r2, r8
   12348:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1234a:	7e33      	ldrb	r3, [r6, #24]
   1234c:	2b00      	cmp	r3, #0
   1234e:	d020      	beq.n	12392 <adc_init+0x236>
		switch (resolution) {
   12350:	2c10      	cmp	r4, #16
   12352:	d100      	bne.n	12356 <adc_init+0x1fa>
   12354:	e0d6      	b.n	12504 <adc_init+0x3a8>
   12356:	d800      	bhi.n	1235a <adc_init+0x1fe>
   12358:	e080      	b.n	1245c <adc_init+0x300>
   1235a:	2c20      	cmp	r4, #32
   1235c:	d100      	bne.n	12360 <adc_init+0x204>
   1235e:	e0b3      	b.n	124c8 <adc_init+0x36c>
   12360:	2c30      	cmp	r4, #48	; 0x30
   12362:	d116      	bne.n	12392 <adc_init+0x236>
			if (config->differential_mode &&
   12364:	7cf2      	ldrb	r2, [r6, #19]
   12366:	2a00      	cmp	r2, #0
   12368:	d00a      	beq.n	12380 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
   1236a:	69f2      	ldr	r2, [r6, #28]
   1236c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
   1236e:	2017      	movs	r0, #23
			if (config->differential_mode &&
   12370:	2aff      	cmp	r2, #255	; 0xff
   12372:	d900      	bls.n	12376 <adc_init+0x21a>
   12374:	e705      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
   12376:	6a32      	ldr	r2, [r6, #32]
   12378:	3280      	adds	r2, #128	; 0x80
   1237a:	2aff      	cmp	r2, #255	; 0xff
   1237c:	d900      	bls.n	12380 <adc_init+0x224>
   1237e:	e700      	b.n	12182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
   12380:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
   12382:	69f2      	ldr	r2, [r6, #28]
   12384:	2aff      	cmp	r2, #255	; 0xff
   12386:	dd00      	ble.n	1238a <adc_init+0x22e>
   12388:	e6fb      	b.n	12182 <adc_init+0x26>
   1238a:	6a32      	ldr	r2, [r6, #32]
   1238c:	2aff      	cmp	r2, #255	; 0xff
   1238e:	dd00      	ble.n	12392 <adc_init+0x236>
   12390:	e6f7      	b.n	12182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
   12392:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12394:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
   12396:	b252      	sxtb	r2, r2
   12398:	2a00      	cmp	r2, #0
   1239a:	dbfb      	blt.n	12394 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
   1239c:	4642      	mov	r2, r8
   1239e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
   123a0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   123a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   123a4:	b25b      	sxtb	r3, r3
   123a6:	2b00      	cmp	r3, #0
   123a8:	dbfb      	blt.n	123a2 <adc_init+0x246>
	adc_module->WINLT.reg =
   123aa:	8bb3      	ldrh	r3, [r6, #28]
   123ac:	4642      	mov	r2, r8
   123ae:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
   123b0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   123b2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   123b4:	b25b      	sxtb	r3, r3
   123b6:	2b00      	cmp	r3, #0
   123b8:	dbfb      	blt.n	123b2 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
   123ba:	8c33      	ldrh	r3, [r6, #32]
   123bc:	4642      	mov	r2, r8
   123be:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   123c0:	232c      	movs	r3, #44	; 0x2c
   123c2:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
   123c4:	2b00      	cmp	r3, #0
   123c6:	d005      	beq.n	123d4 <adc_init+0x278>
		inputs_to_scan--;
   123c8:	3b01      	subs	r3, #1
   123ca:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
   123cc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   123ce:	2b0f      	cmp	r3, #15
   123d0:	d900      	bls.n	123d4 <adc_init+0x278>
   123d2:	e6d6      	b.n	12182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   123d4:	222b      	movs	r2, #43	; 0x2b
   123d6:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
   123d8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   123da:	290f      	cmp	r1, #15
   123dc:	d900      	bls.n	123e0 <adc_init+0x284>
   123de:	e6d0      	b.n	12182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
   123e0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   123e2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
   123e4:	b252      	sxtb	r2, r2
   123e6:	2a00      	cmp	r2, #0
   123e8:	dbfb      	blt.n	123e2 <adc_init+0x286>
			config->negative_input |
   123ea:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
   123ec:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
   123ee:	4302      	orrs	r2, r0
   123f0:	68b0      	ldr	r0, [r6, #8]
   123f2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
   123f4:	0509      	lsls	r1, r1, #20
			config->negative_input |
   123f6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   123f8:	041b      	lsls	r3, r3, #16
			config->negative_input |
   123fa:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
   123fc:	4642      	mov	r2, r8
   123fe:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
   12400:	232a      	movs	r3, #42	; 0x2a
   12402:	5cf3      	ldrb	r3, [r6, r3]
   12404:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
   12406:	230f      	movs	r3, #15
   12408:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
   1240a:	3315      	adds	r3, #21
   1240c:	5cf3      	ldrb	r3, [r6, r3]
   1240e:	2b00      	cmp	r3, #0
   12410:	d012      	beq.n	12438 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   12412:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
   12414:	4a29      	ldr	r2, [pc, #164]	; (124bc <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
   12416:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   12418:	4293      	cmp	r3, r2
   1241a:	d900      	bls.n	1241e <adc_init+0x2c2>
   1241c:	e6b1      	b.n	12182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1241e:	4642      	mov	r2, r8
   12420:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
   12422:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   12424:	2380      	movs	r3, #128	; 0x80
   12426:	011b      	lsls	r3, r3, #4
   12428:	18d3      	adds	r3, r2, r3
   1242a:	4924      	ldr	r1, [pc, #144]	; (124bc <adc_init+0x360>)
   1242c:	b29b      	uxth	r3, r3
   1242e:	428b      	cmp	r3, r1
   12430:	d900      	bls.n	12434 <adc_init+0x2d8>
   12432:	e6a6      	b.n	12182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   12434:	4643      	mov	r3, r8
   12436:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
   12438:	4b21      	ldr	r3, [pc, #132]	; (124c0 <adc_init+0x364>)
   1243a:	681b      	ldr	r3, [r3, #0]
   1243c:	015b      	lsls	r3, r3, #5
   1243e:	22e0      	movs	r2, #224	; 0xe0
   12440:	00d2      	lsls	r2, r2, #3
   12442:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
   12444:	4a1f      	ldr	r2, [pc, #124]	; (124c4 <adc_init+0x368>)
   12446:	6851      	ldr	r1, [r2, #4]
   12448:	0149      	lsls	r1, r1, #5
   1244a:	6812      	ldr	r2, [r2, #0]
   1244c:	0ed2      	lsrs	r2, r2, #27
   1244e:	430a      	orrs	r2, r1
   12450:	b2d2      	uxtb	r2, r2
			) |
   12452:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
   12454:	4642      	mov	r2, r8
   12456:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
   12458:	2000      	movs	r0, #0
   1245a:	e692      	b.n	12182 <adc_init+0x26>
		switch (resolution) {
   1245c:	2c00      	cmp	r4, #0
   1245e:	d198      	bne.n	12392 <adc_init+0x236>
			if (config->differential_mode &&
   12460:	7cf2      	ldrb	r2, [r6, #19]
   12462:	2a00      	cmp	r2, #0
   12464:	d00f      	beq.n	12486 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
   12466:	69f2      	ldr	r2, [r6, #28]
   12468:	2180      	movs	r1, #128	; 0x80
   1246a:	0109      	lsls	r1, r1, #4
   1246c:	468c      	mov	ip, r1
   1246e:	4462      	add	r2, ip
			if (config->differential_mode &&
   12470:	4912      	ldr	r1, [pc, #72]	; (124bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
   12472:	2017      	movs	r0, #23
			if (config->differential_mode &&
   12474:	428a      	cmp	r2, r1
   12476:	d900      	bls.n	1247a <adc_init+0x31e>
   12478:	e683      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
   1247a:	6a32      	ldr	r2, [r6, #32]
   1247c:	4462      	add	r2, ip
   1247e:	490f      	ldr	r1, [pc, #60]	; (124bc <adc_init+0x360>)
   12480:	428a      	cmp	r2, r1
   12482:	d900      	bls.n	12486 <adc_init+0x32a>
   12484:	e67d      	b.n	12182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
   12486:	4a0d      	ldr	r2, [pc, #52]	; (124bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
   12488:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
   1248a:	69f1      	ldr	r1, [r6, #28]
   1248c:	4291      	cmp	r1, r2
   1248e:	dd00      	ble.n	12492 <adc_init+0x336>
   12490:	e677      	b.n	12182 <adc_init+0x26>
   12492:	6a31      	ldr	r1, [r6, #32]
   12494:	4291      	cmp	r1, r2
   12496:	dd00      	ble.n	1249a <adc_init+0x33e>
   12498:	e673      	b.n	12182 <adc_init+0x26>
   1249a:	e77a      	b.n	12392 <adc_init+0x236>
   1249c:	40000400 	.word	0x40000400
   124a0:	40000800 	.word	0x40000800
   124a4:	0001f19d 	.word	0x0001f19d
   124a8:	0001f111 	.word	0x0001f111
   124ac:	0002626d 	.word	0x0002626d
   124b0:	00027828 	.word	0x00027828
   124b4:	0001f2c5 	.word	0x0001f2c5
   124b8:	00027754 	.word	0x00027754
   124bc:	00000fff 	.word	0x00000fff
   124c0:	00806024 	.word	0x00806024
   124c4:	00806020 	.word	0x00806020
			if (config->differential_mode &&
   124c8:	7cf2      	ldrb	r2, [r6, #19]
   124ca:	2a00      	cmp	r2, #0
   124cc:	d00f      	beq.n	124ee <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
   124ce:	69f2      	ldr	r2, [r6, #28]
   124d0:	2180      	movs	r1, #128	; 0x80
   124d2:	0089      	lsls	r1, r1, #2
   124d4:	468c      	mov	ip, r1
   124d6:	4462      	add	r2, ip
			if (config->differential_mode &&
   124d8:	491a      	ldr	r1, [pc, #104]	; (12544 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
   124da:	2017      	movs	r0, #23
			if (config->differential_mode &&
   124dc:	428a      	cmp	r2, r1
   124de:	d900      	bls.n	124e2 <adc_init+0x386>
   124e0:	e64f      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
   124e2:	6a32      	ldr	r2, [r6, #32]
   124e4:	4462      	add	r2, ip
   124e6:	4917      	ldr	r1, [pc, #92]	; (12544 <adc_init+0x3e8>)
   124e8:	428a      	cmp	r2, r1
   124ea:	d900      	bls.n	124ee <adc_init+0x392>
   124ec:	e649      	b.n	12182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
   124ee:	4a15      	ldr	r2, [pc, #84]	; (12544 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
   124f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
   124f2:	69f1      	ldr	r1, [r6, #28]
   124f4:	4291      	cmp	r1, r2
   124f6:	dd00      	ble.n	124fa <adc_init+0x39e>
   124f8:	e643      	b.n	12182 <adc_init+0x26>
   124fa:	6a31      	ldr	r1, [r6, #32]
   124fc:	4291      	cmp	r1, r2
   124fe:	dd00      	ble.n	12502 <adc_init+0x3a6>
   12500:	e63f      	b.n	12182 <adc_init+0x26>
   12502:	e746      	b.n	12392 <adc_init+0x236>
			if (config->differential_mode &&
   12504:	7cf2      	ldrb	r2, [r6, #19]
   12506:	2a00      	cmp	r2, #0
   12508:	d00f      	beq.n	1252a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
   1250a:	69f2      	ldr	r2, [r6, #28]
   1250c:	2180      	movs	r1, #128	; 0x80
   1250e:	0209      	lsls	r1, r1, #8
   12510:	468c      	mov	ip, r1
   12512:	4462      	add	r2, ip
			if (config->differential_mode &&
   12514:	490c      	ldr	r1, [pc, #48]	; (12548 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
   12516:	2017      	movs	r0, #23
			if (config->differential_mode &&
   12518:	428a      	cmp	r2, r1
   1251a:	d900      	bls.n	1251e <adc_init+0x3c2>
   1251c:	e631      	b.n	12182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
   1251e:	6a32      	ldr	r2, [r6, #32]
   12520:	4462      	add	r2, ip
   12522:	4909      	ldr	r1, [pc, #36]	; (12548 <adc_init+0x3ec>)
   12524:	428a      	cmp	r2, r1
   12526:	d900      	bls.n	1252a <adc_init+0x3ce>
   12528:	e62b      	b.n	12182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
   1252a:	4a07      	ldr	r2, [pc, #28]	; (12548 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
   1252c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
   1252e:	69f1      	ldr	r1, [r6, #28]
   12530:	4291      	cmp	r1, r2
   12532:	dd00      	ble.n	12536 <adc_init+0x3da>
   12534:	e625      	b.n	12182 <adc_init+0x26>
   12536:	6a31      	ldr	r1, [r6, #32]
   12538:	4291      	cmp	r1, r2
   1253a:	dd00      	ble.n	1253e <adc_init+0x3e2>
   1253c:	e621      	b.n	12182 <adc_init+0x26>
   1253e:	e728      	b.n	12392 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
   12540:	2017      	movs	r0, #23
   12542:	e61e      	b.n	12182 <adc_init+0x26>
   12544:	000003ff 	.word	0x000003ff
   12548:	0000ffff 	.word	0x0000ffff

0001254c <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1254c:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
   1254e:	4b27      	ldr	r3, [pc, #156]	; (125ec <DAC_Handler+0xa0>)
   12550:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
   12552:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12554:	79ab      	ldrb	r3, [r5, #6]
   12556:	07db      	lsls	r3, r3, #31
   12558:	d507      	bpl.n	1256a <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1255a:	2301      	movs	r3, #1
   1255c:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
   1255e:	0023      	movs	r3, r4
   12560:	3314      	adds	r3, #20
   12562:	d002      	beq.n	1256a <DAC_Handler+0x1e>
   12564:	7c63      	ldrb	r3, [r4, #17]
   12566:	2b00      	cmp	r3, #0
   12568:	d131      	bne.n	125ce <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1256a:	79ab      	ldrb	r3, [r5, #6]
   1256c:	079b      	lsls	r3, r3, #30
   1256e:	d538      	bpl.n	125e2 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12570:	2302      	movs	r3, #2
   12572:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
   12574:	89a3      	ldrh	r3, [r4, #12]
   12576:	b29b      	uxth	r3, r3
   12578:	2b00      	cmp	r3, #0
   1257a:	d02c      	beq.n	125d6 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
   1257c:	89e3      	ldrh	r3, [r4, #14]
   1257e:	b29b      	uxth	r3, r3
   12580:	1c5a      	adds	r2, r3, #1
   12582:	b292      	uxth	r2, r2
   12584:	81e2      	strh	r2, [r4, #14]
   12586:	005b      	lsls	r3, r3, #1
   12588:	68a2      	ldr	r2, [r4, #8]
   1258a:	4694      	mov	ip, r2
   1258c:	4463      	add	r3, ip
   1258e:	881b      	ldrh	r3, [r3, #0]
   12590:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
   12592:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
   12594:	89a3      	ldrh	r3, [r4, #12]
   12596:	3b01      	subs	r3, #1
   12598:	b29b      	uxth	r3, r3
   1259a:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
   1259c:	89a3      	ldrh	r3, [r4, #12]
   1259e:	b29b      	uxth	r3, r3
   125a0:	2b00      	cmp	r3, #0
   125a2:	d118      	bne.n	125d6 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
   125a4:	2200      	movs	r2, #0
   125a6:	3320      	adds	r3, #32
   125a8:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   125aa:	3b1e      	subs	r3, #30
   125ac:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   125ae:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   125b0:	2180      	movs	r1, #128	; 0x80
   125b2:	0489      	lsls	r1, r1, #18
   125b4:	337e      	adds	r3, #126	; 0x7e
   125b6:	4a0e      	ldr	r2, [pc, #56]	; (125f0 <DAC_Handler+0xa4>)
   125b8:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
   125ba:	0023      	movs	r3, r4
   125bc:	3314      	adds	r3, #20
   125be:	d010      	beq.n	125e2 <DAC_Handler+0x96>
   125c0:	7ca3      	ldrb	r3, [r4, #18]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d00a      	beq.n	125dc <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   125c6:	2000      	movs	r0, #0
   125c8:	69e3      	ldr	r3, [r4, #28]
   125ca:	4798      	blx	r3
   125cc:	e006      	b.n	125dc <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   125ce:	2000      	movs	r0, #0
   125d0:	69a3      	ldr	r3, [r4, #24]
   125d2:	4798      	blx	r3
   125d4:	e7c9      	b.n	1256a <DAC_Handler+0x1e>
		if ((module->callback) &&
   125d6:	0023      	movs	r3, r4
   125d8:	3314      	adds	r3, #20
   125da:	d002      	beq.n	125e2 <DAC_Handler+0x96>
   125dc:	7c23      	ldrb	r3, [r4, #16]
   125de:	2b00      	cmp	r3, #0
   125e0:	d100      	bne.n	125e4 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
   125e2:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   125e4:	6963      	ldr	r3, [r4, #20]
   125e6:	2000      	movs	r0, #0
   125e8:	4798      	blx	r3
}
   125ea:	e7fa      	b.n	125e2 <DAC_Handler+0x96>
   125ec:	20004164 	.word	0x20004164
   125f0:	e000e100 	.word	0xe000e100

000125f4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   125f4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
   125f6:	4b26      	ldr	r3, [pc, #152]	; (12690 <DMAC_Handler+0x9c>)
   125f8:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   125fa:	4926      	ldr	r1, [pc, #152]	; (12694 <DMAC_Handler+0xa0>)
   125fc:	8c0b      	ldrh	r3, [r1, #32]
   125fe:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12600:	4013      	ands	r3, r2
   12602:	009b      	lsls	r3, r3, #2
   12604:	4824      	ldr	r0, [pc, #144]	; (12698 <DMAC_Handler+0xa4>)
   12606:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12608:	7803      	ldrb	r3, [r0, #0]
   1260a:	401a      	ands	r2, r3
   1260c:	233f      	movs	r3, #63	; 0x3f
   1260e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
   12610:	330f      	adds	r3, #15
   12612:	5cca      	ldrb	r2, [r1, r3]
   12614:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12616:	7803      	ldrb	r3, [r0, #0]
   12618:	011b      	lsls	r3, r3, #4
   1261a:	4920      	ldr	r1, [pc, #128]	; (1269c <DMAC_Handler+0xa8>)
   1261c:	18c9      	adds	r1, r1, r3
   1261e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12620:	4c1f      	ldr	r4, [pc, #124]	; (126a0 <DMAC_Handler+0xac>)
   12622:	18e3      	adds	r3, r4, r3
   12624:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
   12626:	1acb      	subs	r3, r1, r3
   12628:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1262a:	07d3      	lsls	r3, r2, #31
   1262c:	d50f      	bpl.n	1264e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1262e:	2101      	movs	r1, #1
   12630:	234e      	movs	r3, #78	; 0x4e
   12632:	4a18      	ldr	r2, [pc, #96]	; (12694 <DMAC_Handler+0xa0>)
   12634:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12636:	3b3e      	subs	r3, #62	; 0x3e
   12638:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1263a:	7c03      	ldrb	r3, [r0, #16]
   1263c:	07db      	lsls	r3, r3, #31
   1263e:	d503      	bpl.n	12648 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12640:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12642:	2b00      	cmp	r3, #0
   12644:	d000      	beq.n	12648 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12646:	4798      	blx	r3
	cpu_irq_leave_critical();
   12648:	4b16      	ldr	r3, [pc, #88]	; (126a4 <DMAC_Handler+0xb0>)
   1264a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
   1264c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1264e:	0793      	lsls	r3, r2, #30
   12650:	d50d      	bpl.n	1266e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12652:	2102      	movs	r1, #2
   12654:	234e      	movs	r3, #78	; 0x4e
   12656:	4a0f      	ldr	r2, [pc, #60]	; (12694 <DMAC_Handler+0xa0>)
   12658:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
   1265a:	2300      	movs	r3, #0
   1265c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1265e:	7c03      	ldrb	r3, [r0, #16]
   12660:	079b      	lsls	r3, r3, #30
   12662:	d5f1      	bpl.n	12648 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12664:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12666:	2b00      	cmp	r3, #0
   12668:	d0ee      	beq.n	12648 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1266a:	4798      	blx	r3
   1266c:	e7ec      	b.n	12648 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1266e:	0753      	lsls	r3, r2, #29
   12670:	d5ea      	bpl.n	12648 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12672:	2104      	movs	r1, #4
   12674:	234e      	movs	r3, #78	; 0x4e
   12676:	4a07      	ldr	r2, [pc, #28]	; (12694 <DMAC_Handler+0xa0>)
   12678:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
   1267a:	3b48      	subs	r3, #72	; 0x48
   1267c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1267e:	7c03      	ldrb	r3, [r0, #16]
   12680:	075b      	lsls	r3, r3, #29
   12682:	d5e1      	bpl.n	12648 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12684:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12686:	2b00      	cmp	r3, #0
   12688:	d0de      	beq.n	12648 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1268a:	4798      	blx	r3
   1268c:	e7dc      	b.n	12648 <DMAC_Handler+0x54>
   1268e:	46c0      	nop			; (mov r8, r8)
   12690:	0001d5e9 	.word	0x0001d5e9
   12694:	41004800 	.word	0x41004800
   12698:	200002cc 	.word	0x200002cc
   1269c:	20004170 	.word	0x20004170
   126a0:	200002e0 	.word	0x200002e0
   126a4:	0001d629 	.word	0x0001d629

000126a8 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   126a8:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
   126aa:	4b0b      	ldr	r3, [pc, #44]	; (126d8 <EVSYS_Handler+0x30>)
   126ac:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   126ae:	490b      	ldr	r1, [pc, #44]	; (126dc <EVSYS_Handler+0x34>)
   126b0:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
   126b2:	6898      	ldr	r0, [r3, #8]
   126b4:	4302      	orrs	r2, r0
   126b6:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   126b8:	4b09      	ldr	r3, [pc, #36]	; (126e0 <EVSYS_Handler+0x38>)
   126ba:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   126bc:	2c00      	cmp	r4, #0
   126be:	d005      	beq.n	126cc <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
   126c0:	6820      	ldr	r0, [r4, #0]
   126c2:	6863      	ldr	r3, [r4, #4]
   126c4:	4798      	blx	r3
		current_hook = current_hook->next;
   126c6:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
   126c8:	2c00      	cmp	r4, #0
   126ca:	d1f9      	bne.n	126c0 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   126cc:	4b02      	ldr	r3, [pc, #8]	; (126d8 <EVSYS_Handler+0x30>)
   126ce:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
   126d0:	689a      	ldr	r2, [r3, #8]
   126d2:	438a      	bics	r2, r1
   126d4:	609a      	str	r2, [r3, #8]
}
   126d6:	bd10      	pop	{r4, pc}
   126d8:	20000000 	.word	0x20000000
   126dc:	42000400 	.word	0x42000400
   126e0:	0f0fffff 	.word	0x0f0fffff

000126e4 <_system_events_init>:
   126e4:	4a06      	ldr	r2, [pc, #24]	; (12700 <_system_events_init+0x1c>)
   126e6:	6a13      	ldr	r3, [r2, #32]
   126e8:	2102      	movs	r1, #2
   126ea:	430b      	orrs	r3, r1
   126ec:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   126ee:	2201      	movs	r2, #1
   126f0:	4b04      	ldr	r3, [pc, #16]	; (12704 <_system_events_init+0x20>)
   126f2:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   126f4:	0019      	movs	r1, r3
   126f6:	780b      	ldrb	r3, [r1, #0]
   126f8:	4213      	tst	r3, r2
   126fa:	d1fc      	bne.n	126f6 <_system_events_init+0x12>
	}
}
   126fc:	4770      	bx	lr
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	40000400 	.word	0x40000400
   12704:	42000400 	.word	0x42000400

00012708 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12708:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1270a:	2207      	movs	r2, #7
   1270c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1270e:	421a      	tst	r2, r3
   12710:	d1fc      	bne.n	1270c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
   12712:	4770      	bx	lr

00012714 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   12714:	b570      	push	{r4, r5, r6, lr}
   12716:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12718:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1271a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   1271c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
   1271e:	8b83      	ldrh	r3, [r0, #28]
   12720:	1aed      	subs	r5, r5, r3
   12722:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
   12724:	8b83      	ldrh	r3, [r0, #28]
   12726:	3b01      	subs	r3, #1
   12728:	b29b      	uxth	r3, r3
   1272a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
   1272c:	0113      	lsls	r3, r2, #4
   1272e:	d51d      	bpl.n	1276c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
   12730:	7ac3      	ldrb	r3, [r0, #11]
   12732:	2b00      	cmp	r3, #0
   12734:	d003      	beq.n	1273e <_i2c_master_read+0x2a>
   12736:	8b83      	ldrh	r3, [r0, #28]
   12738:	b29b      	uxth	r3, r3
   1273a:	2b01      	cmp	r3, #1
   1273c:	d010      	beq.n	12760 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
   1273e:	8ba3      	ldrh	r3, [r4, #28]
   12740:	b29b      	uxth	r3, r3
   12742:	2b00      	cmp	r3, #0
   12744:	d102      	bne.n	1274c <_i2c_master_read+0x38>
		if (module->send_stop) {
   12746:	7aa3      	ldrb	r3, [r4, #10]
   12748:	2b00      	cmp	r3, #0
   1274a:	d11c      	bne.n	12786 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1274c:	0020      	movs	r0, r4
   1274e:	4b12      	ldr	r3, [pc, #72]	; (12798 <_i2c_master_read+0x84>)
   12750:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12752:	6a23      	ldr	r3, [r4, #32]
   12754:	195d      	adds	r5, r3, r5
   12756:	2328      	movs	r3, #40	; 0x28
   12758:	5cf3      	ldrb	r3, [r6, r3]
   1275a:	b2db      	uxtb	r3, r3
   1275c:	702b      	strb	r3, [r5, #0]
}
   1275e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12760:	6872      	ldr	r2, [r6, #4]
   12762:	2380      	movs	r3, #128	; 0x80
   12764:	02db      	lsls	r3, r3, #11
   12766:	4313      	orrs	r3, r2
   12768:	6073      	str	r3, [r6, #4]
   1276a:	e7e8      	b.n	1273e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
   1276c:	7ac3      	ldrb	r3, [r0, #11]
   1276e:	2b00      	cmp	r3, #0
   12770:	d0e5      	beq.n	1273e <_i2c_master_read+0x2a>
   12772:	8b83      	ldrh	r3, [r0, #28]
   12774:	b29b      	uxth	r3, r3
   12776:	2b00      	cmp	r3, #0
   12778:	d1e1      	bne.n	1273e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1277a:	6872      	ldr	r2, [r6, #4]
   1277c:	2380      	movs	r3, #128	; 0x80
   1277e:	02db      	lsls	r3, r3, #11
   12780:	4313      	orrs	r3, r2
   12782:	6073      	str	r3, [r6, #4]
   12784:	e7db      	b.n	1273e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
   12786:	0020      	movs	r0, r4
   12788:	4b03      	ldr	r3, [pc, #12]	; (12798 <_i2c_master_read+0x84>)
   1278a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1278c:	6872      	ldr	r2, [r6, #4]
   1278e:	23c0      	movs	r3, #192	; 0xc0
   12790:	029b      	lsls	r3, r3, #10
   12792:	4313      	orrs	r3, r2
   12794:	6073      	str	r3, [r6, #4]
   12796:	e7d9      	b.n	1274c <_i2c_master_read+0x38>
   12798:	00012709 	.word	0x00012709

0001279c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   1279c:	b570      	push	{r4, r5, r6, lr}
   1279e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127a0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127a2:	8b6b      	ldrh	r3, [r5, #26]
   127a4:	075b      	lsls	r3, r3, #29
   127a6:	d503      	bpl.n	127b0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127a8:	221e      	movs	r2, #30
   127aa:	2325      	movs	r3, #37	; 0x25
   127ac:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
   127ae:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
   127b0:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
   127b2:	8b83      	ldrh	r3, [r0, #28]
   127b4:	1af6      	subs	r6, r6, r3
   127b6:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
   127b8:	8b83      	ldrh	r3, [r0, #28]
   127ba:	3b01      	subs	r3, #1
   127bc:	b29b      	uxth	r3, r3
   127be:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
   127c0:	4b04      	ldr	r3, [pc, #16]	; (127d4 <_i2c_master_write+0x38>)
   127c2:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   127c4:	6a23      	ldr	r3, [r4, #32]
   127c6:	199e      	adds	r6, r3, r6
   127c8:	7833      	ldrb	r3, [r6, #0]
   127ca:	b2db      	uxtb	r3, r3
   127cc:	2228      	movs	r2, #40	; 0x28
   127ce:	54ab      	strb	r3, [r5, r2]
   127d0:	e7ed      	b.n	127ae <_i2c_master_write+0x12>
   127d2:	46c0      	nop			; (mov r8, r8)
   127d4:	00012709 	.word	0x00012709

000127d8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   127d8:	b570      	push	{r4, r5, r6, lr}
   127da:	0005      	movs	r5, r0
   127dc:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127de:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   127e0:	7a4b      	ldrb	r3, [r1, #9]
   127e2:	2b00      	cmp	r3, #0
   127e4:	d11a      	bne.n	1281c <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   127e6:	6873      	ldr	r3, [r6, #4]
   127e8:	4a13      	ldr	r2, [pc, #76]	; (12838 <_i2c_master_write_packet+0x60>)
   127ea:	4013      	ands	r3, r2
   127ec:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   127ee:	6863      	ldr	r3, [r4, #4]
   127f0:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
   127f2:	8863      	ldrh	r3, [r4, #2]
   127f4:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   127f6:	2200      	movs	r2, #0
   127f8:	2324      	movs	r3, #36	; 0x24
   127fa:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
   127fc:	3205      	adds	r2, #5
   127fe:	3301      	adds	r3, #1
   12800:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12802:	3b22      	subs	r3, #34	; 0x22
   12804:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12806:	7a23      	ldrb	r3, [r4, #8]
   12808:	2b00      	cmp	r3, #0
   1280a:	d10b      	bne.n	12824 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1280c:	8823      	ldrh	r3, [r4, #0]
   1280e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12810:	7a62      	ldrb	r2, [r4, #9]
   12812:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12814:	4313      	orrs	r3, r2
   12816:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
   12818:	2000      	movs	r0, #0
   1281a:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1281c:	7a89      	ldrb	r1, [r1, #10]
   1281e:	4b07      	ldr	r3, [pc, #28]	; (1283c <_i2c_master_write_packet+0x64>)
   12820:	4798      	blx	r3
   12822:	e7e0      	b.n	127e6 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12824:	8823      	ldrh	r3, [r4, #0]
   12826:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12828:	7a62      	ldrb	r2, [r4, #9]
   1282a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1282c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1282e:	2280      	movs	r2, #128	; 0x80
   12830:	0212      	lsls	r2, r2, #8
   12832:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12834:	6273      	str	r3, [r6, #36]	; 0x24
   12836:	e7ef      	b.n	12818 <_i2c_master_write_packet+0x40>
   12838:	fffbffff 	.word	0xfffbffff
   1283c:	000150ed 	.word	0x000150ed

00012840 <_i2c_master_read_packet>:
{
   12840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12842:	0005      	movs	r5, r0
   12844:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12846:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
   12848:	684b      	ldr	r3, [r1, #4]
   1284a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
   1284c:	884b      	ldrh	r3, [r1, #2]
   1284e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12850:	2201      	movs	r2, #1
   12852:	2324      	movs	r3, #36	; 0x24
   12854:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
   12856:	3204      	adds	r2, #4
   12858:	3301      	adds	r3, #1
   1285a:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1285c:	6837      	ldr	r7, [r6, #0]
   1285e:	013f      	lsls	r7, r7, #4
   12860:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
   12862:	7a4b      	ldrb	r3, [r1, #9]
   12864:	2b00      	cmp	r3, #0
   12866:	d117      	bne.n	12898 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12868:	2f00      	cmp	r7, #0
   1286a:	d002      	beq.n	12872 <_i2c_master_read_packet+0x32>
   1286c:	8863      	ldrh	r3, [r4, #2]
   1286e:	2b01      	cmp	r3, #1
   12870:	d016      	beq.n	128a0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12872:	6873      	ldr	r3, [r6, #4]
   12874:	4a20      	ldr	r2, [pc, #128]	; (128f8 <_i2c_master_read_packet+0xb8>)
   12876:	4013      	ands	r3, r2
   12878:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
   1287a:	7a23      	ldrb	r3, [r4, #8]
   1287c:	2b00      	cmp	r3, #0
   1287e:	d115      	bne.n	128ac <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
   12880:	2303      	movs	r3, #3
   12882:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12884:	8823      	ldrh	r3, [r4, #0]
   12886:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12888:	7a62      	ldrb	r2, [r4, #9]
   1288a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1288c:	4313      	orrs	r3, r2
   1288e:	2201      	movs	r2, #1
   12890:	4313      	orrs	r3, r2
   12892:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
   12894:	2000      	movs	r0, #0
}
   12896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12898:	7a89      	ldrb	r1, [r1, #10]
   1289a:	4b18      	ldr	r3, [pc, #96]	; (128fc <_i2c_master_read_packet+0xbc>)
   1289c:	4798      	blx	r3
   1289e:	e7e3      	b.n	12868 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   128a0:	6872      	ldr	r2, [r6, #4]
   128a2:	2380      	movs	r3, #128	; 0x80
   128a4:	02db      	lsls	r3, r3, #11
   128a6:	4313      	orrs	r3, r2
   128a8:	6073      	str	r3, [r6, #4]
   128aa:	e7e6      	b.n	1287a <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
   128ac:	8823      	ldrh	r3, [r4, #0]
   128ae:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   128b0:	7a62      	ldrb	r2, [r4, #9]
   128b2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   128b4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   128b6:	2280      	movs	r2, #128	; 0x80
   128b8:	0212      	lsls	r2, r2, #8
   128ba:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
   128bc:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
   128be:	0028      	movs	r0, r5
   128c0:	4b0f      	ldr	r3, [pc, #60]	; (12900 <_i2c_master_read_packet+0xc0>)
   128c2:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   128c4:	6873      	ldr	r3, [r6, #4]
   128c6:	4a0c      	ldr	r2, [pc, #48]	; (128f8 <_i2c_master_read_packet+0xb8>)
   128c8:	4013      	ands	r3, r2
   128ca:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
   128cc:	2800      	cmp	r0, #0
   128ce:	d1e2      	bne.n	12896 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
   128d0:	0028      	movs	r0, r5
   128d2:	4b0c      	ldr	r3, [pc, #48]	; (12904 <_i2c_master_read_packet+0xc4>)
   128d4:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
   128d6:	2800      	cmp	r0, #0
   128d8:	d1dd      	bne.n	12896 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
   128da:	2303      	movs	r3, #3
   128dc:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   128de:	8823      	ldrh	r3, [r4, #0]
   128e0:	0a1b      	lsrs	r3, r3, #8
   128e2:	2278      	movs	r2, #120	; 0x78
   128e4:	4313      	orrs	r3, r2
   128e6:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   128e8:	7a62      	ldrb	r2, [r4, #9]
   128ea:	0392      	lsls	r2, r2, #14
   128ec:	2101      	movs	r1, #1
   128ee:	430a      	orrs	r2, r1
   128f0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   128f2:	6273      	str	r3, [r6, #36]	; 0x24
   128f4:	e7cf      	b.n	12896 <_i2c_master_read_packet+0x56>
   128f6:	46c0      	nop			; (mov r8, r8)
   128f8:	fffbffff 	.word	0xfffbffff
   128fc:	000150ed 	.word	0x000150ed
   12900:	000150c1 	.word	0x000150c1
   12904:	00015091 	.word	0x00015091

00012908 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
   12908:	1c93      	adds	r3, r2, #2
   1290a:	009b      	lsls	r3, r3, #2
   1290c:	18c3      	adds	r3, r0, r3
   1290e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
   12910:	7e03      	ldrb	r3, [r0, #24]
   12912:	2101      	movs	r1, #1
   12914:	4091      	lsls	r1, r2
   12916:	430b      	orrs	r3, r1
   12918:	b2db      	uxtb	r3, r3
   1291a:	7603      	strb	r3, [r0, #24]
}
   1291c:	4770      	bx	lr
	...

00012920 <i2c_master_read_packet_job>:
{
   12920:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
   12922:	8b83      	ldrh	r3, [r0, #28]
   12924:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12926:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12928:	2b00      	cmp	r3, #0
   1292a:	d001      	beq.n	12930 <i2c_master_read_packet_job+0x10>
}
   1292c:	0010      	movs	r0, r2
   1292e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12930:	3301      	adds	r3, #1
   12932:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12934:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
   12936:	4b02      	ldr	r3, [pc, #8]	; (12940 <i2c_master_read_packet_job+0x20>)
   12938:	4798      	blx	r3
   1293a:	0002      	movs	r2, r0
   1293c:	e7f6      	b.n	1292c <i2c_master_read_packet_job+0xc>
   1293e:	46c0      	nop			; (mov r8, r8)
   12940:	00012841 	.word	0x00012841

00012944 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12944:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12946:	8b83      	ldrh	r3, [r0, #28]
   12948:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   1294a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   1294c:	2b00      	cmp	r3, #0
   1294e:	d001      	beq.n	12954 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
   12950:	0010      	movs	r0, r2
   12952:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12954:	3301      	adds	r3, #1
   12956:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12958:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
   1295a:	4b02      	ldr	r3, [pc, #8]	; (12964 <i2c_master_write_packet_job+0x20>)
   1295c:	4798      	blx	r3
   1295e:	0002      	movs	r2, r0
   12960:	e7f6      	b.n	12950 <i2c_master_write_packet_job+0xc>
   12962:	46c0      	nop			; (mov r8, r8)
   12964:	000127d9 	.word	0x000127d9

00012968 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12968:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
   1296a:	0080      	lsls	r0, r0, #2
   1296c:	4b75      	ldr	r3, [pc, #468]	; (12b44 <_i2c_master_interrupt_handler+0x1dc>)
   1296e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12970:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12972:	682b      	ldr	r3, [r5, #0]
   12974:	011b      	lsls	r3, r3, #4
   12976:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12978:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
   1297a:	7e26      	ldrb	r6, [r4, #24]
   1297c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   1297e:	8b63      	ldrh	r3, [r4, #26]
   12980:	b29b      	uxth	r3, r3
   12982:	2b00      	cmp	r3, #0
   12984:	d103      	bne.n	1298e <_i2c_master_interrupt_handler+0x26>
   12986:	8ba3      	ldrh	r3, [r4, #28]
   12988:	b29b      	uxth	r3, r3
   1298a:	2b00      	cmp	r3, #0
   1298c:	d123      	bne.n	129d6 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   1298e:	8b63      	ldrh	r3, [r4, #26]
   12990:	b29b      	uxth	r3, r3
   12992:	2b00      	cmp	r3, #0
   12994:	d008      	beq.n	129a8 <_i2c_master_interrupt_handler+0x40>
   12996:	8ba3      	ldrh	r3, [r4, #28]
   12998:	b29b      	uxth	r3, r3
   1299a:	2b00      	cmp	r3, #0
   1299c:	d104      	bne.n	129a8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
   1299e:	3325      	adds	r3, #37	; 0x25
   129a0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   129a2:	2b05      	cmp	r3, #5
   129a4:	d100      	bne.n	129a8 <_i2c_master_interrupt_handler+0x40>
   129a6:	e06d      	b.n	12a84 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   129a8:	8b63      	ldrh	r3, [r4, #26]
   129aa:	b29b      	uxth	r3, r3
   129ac:	2b00      	cmp	r3, #0
   129ae:	d024      	beq.n	129fa <_i2c_master_interrupt_handler+0x92>
   129b0:	8ba3      	ldrh	r3, [r4, #28]
   129b2:	b29b      	uxth	r3, r3
   129b4:	2b00      	cmp	r3, #0
   129b6:	d020      	beq.n	129fa <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   129b8:	8b6b      	ldrh	r3, [r5, #26]
   129ba:	069b      	lsls	r3, r3, #26
   129bc:	d500      	bpl.n	129c0 <_i2c_master_interrupt_handler+0x58>
   129be:	e081      	b.n	12ac4 <_i2c_master_interrupt_handler+0x15c>
   129c0:	2a00      	cmp	r2, #0
   129c2:	d004      	beq.n	129ce <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   129c4:	8ba3      	ldrh	r3, [r4, #28]
   129c6:	b29b      	uxth	r3, r3
   129c8:	2b01      	cmp	r3, #1
   129ca:	d100      	bne.n	129ce <_i2c_master_interrupt_handler+0x66>
   129cc:	e07a      	b.n	12ac4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
   129ce:	2241      	movs	r2, #65	; 0x41
   129d0:	2325      	movs	r3, #37	; 0x25
   129d2:	54e2      	strb	r2, [r4, r3]
   129d4:	e011      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   129d6:	7e2b      	ldrb	r3, [r5, #24]
   129d8:	07db      	lsls	r3, r3, #31
   129da:	d507      	bpl.n	129ec <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   129dc:	2301      	movs	r3, #1
   129de:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   129e0:	8b6b      	ldrh	r3, [r5, #26]
   129e2:	079b      	lsls	r3, r3, #30
   129e4:	d52e      	bpl.n	12a44 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
   129e6:	2241      	movs	r2, #65	; 0x41
   129e8:	2325      	movs	r3, #37	; 0x25
   129ea:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
   129ec:	8ba3      	ldrh	r3, [r4, #28]
   129ee:	b29b      	uxth	r3, r3
   129f0:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
   129f2:	2325      	movs	r3, #37	; 0x25
   129f4:	5ce3      	ldrb	r3, [r4, r3]
   129f6:	2b05      	cmp	r3, #5
   129f8:	d038      	beq.n	12a6c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   129fa:	8b63      	ldrh	r3, [r4, #26]
   129fc:	b29b      	uxth	r3, r3
   129fe:	2b00      	cmp	r3, #0
   12a00:	d007      	beq.n	12a12 <_i2c_master_interrupt_handler+0xaa>
   12a02:	8ba3      	ldrh	r3, [r4, #28]
   12a04:	b29b      	uxth	r3, r3
   12a06:	2b00      	cmp	r3, #0
   12a08:	d103      	bne.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
   12a0a:	3325      	adds	r3, #37	; 0x25
   12a0c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12a0e:	2b05      	cmp	r3, #5
   12a10:	d064      	beq.n	12adc <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12a12:	2325      	movs	r3, #37	; 0x25
   12a14:	5ce3      	ldrb	r3, [r4, r3]
   12a16:	2b05      	cmp	r3, #5
   12a18:	d013      	beq.n	12a42 <_i2c_master_interrupt_handler+0xda>
   12a1a:	2325      	movs	r3, #37	; 0x25
   12a1c:	5ce3      	ldrb	r3, [r4, r3]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d00f      	beq.n	12a42 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12a22:	2303      	movs	r3, #3
   12a24:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12a26:	2300      	movs	r3, #0
   12a28:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
   12a2a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12a2c:	3325      	adds	r3, #37	; 0x25
   12a2e:	5ce3      	ldrb	r3, [r4, r3]
   12a30:	2b41      	cmp	r3, #65	; 0x41
   12a32:	d003      	beq.n	12a3c <_i2c_master_interrupt_handler+0xd4>
   12a34:	7aa3      	ldrb	r3, [r4, #10]
   12a36:	2b00      	cmp	r3, #0
   12a38:	d000      	beq.n	12a3c <_i2c_master_interrupt_handler+0xd4>
   12a3a:	e075      	b.n	12b28 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12a3c:	0773      	lsls	r3, r6, #29
   12a3e:	d500      	bpl.n	12a42 <_i2c_master_interrupt_handler+0xda>
   12a40:	e07b      	b.n	12b3a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
   12a42:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12a44:	8b6b      	ldrh	r3, [r5, #26]
   12a46:	075b      	lsls	r3, r3, #29
   12a48:	d5d0      	bpl.n	129ec <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12a4a:	2218      	movs	r2, #24
   12a4c:	2325      	movs	r3, #37	; 0x25
   12a4e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
   12a50:	2300      	movs	r3, #0
   12a52:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
   12a54:	7aa3      	ldrb	r3, [r4, #10]
   12a56:	2b00      	cmp	r3, #0
   12a58:	d0c8      	beq.n	129ec <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
   12a5a:	0020      	movs	r0, r4
   12a5c:	4b3a      	ldr	r3, [pc, #232]	; (12b48 <_i2c_master_interrupt_handler+0x1e0>)
   12a5e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12a60:	686a      	ldr	r2, [r5, #4]
   12a62:	23c0      	movs	r3, #192	; 0xc0
   12a64:	029b      	lsls	r3, r3, #10
   12a66:	4313      	orrs	r3, r2
   12a68:	606b      	str	r3, [r5, #4]
   12a6a:	e7bf      	b.n	129ec <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12a6c:	331f      	adds	r3, #31
   12a6e:	5ce3      	ldrb	r3, [r4, r3]
   12a70:	2b00      	cmp	r3, #0
   12a72:	d003      	beq.n	12a7c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
   12a74:	0020      	movs	r0, r4
   12a76:	4b35      	ldr	r3, [pc, #212]	; (12b4c <_i2c_master_interrupt_handler+0x1e4>)
   12a78:	4798      	blx	r3
   12a7a:	e7be      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
   12a7c:	0020      	movs	r0, r4
   12a7e:	4b34      	ldr	r3, [pc, #208]	; (12b50 <_i2c_master_interrupt_handler+0x1e8>)
   12a80:	4798      	blx	r3
   12a82:	e7ba      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12a84:	331f      	adds	r3, #31
   12a86:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12a88:	2b00      	cmp	r3, #0
   12a8a:	d000      	beq.n	12a8e <_i2c_master_interrupt_handler+0x126>
   12a8c:	e78c      	b.n	129a8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
   12a8e:	3303      	adds	r3, #3
   12a90:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12a92:	2300      	movs	r3, #0
   12a94:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12a96:	3325      	adds	r3, #37	; 0x25
   12a98:	2200      	movs	r2, #0
   12a9a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
   12a9c:	7aa3      	ldrb	r3, [r4, #10]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d107      	bne.n	12ab2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12aa2:	2301      	movs	r3, #1
   12aa4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12aa6:	07f3      	lsls	r3, r6, #31
   12aa8:	d5a7      	bpl.n	129fa <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12aaa:	68e3      	ldr	r3, [r4, #12]
   12aac:	0020      	movs	r0, r4
   12aae:	4798      	blx	r3
   12ab0:	e7a3      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
   12ab2:	0020      	movs	r0, r4
   12ab4:	4b24      	ldr	r3, [pc, #144]	; (12b48 <_i2c_master_interrupt_handler+0x1e0>)
   12ab6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12ab8:	686a      	ldr	r2, [r5, #4]
   12aba:	23c0      	movs	r3, #192	; 0xc0
   12abc:	029b      	lsls	r3, r3, #10
   12abe:	4313      	orrs	r3, r2
   12ac0:	606b      	str	r3, [r5, #4]
   12ac2:	e7f0      	b.n	12aa6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12ac4:	2324      	movs	r3, #36	; 0x24
   12ac6:	5ce3      	ldrb	r3, [r4, r3]
   12ac8:	2b00      	cmp	r3, #0
   12aca:	d103      	bne.n	12ad4 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
   12acc:	0020      	movs	r0, r4
   12ace:	4b20      	ldr	r3, [pc, #128]	; (12b50 <_i2c_master_interrupt_handler+0x1e8>)
   12ad0:	4798      	blx	r3
   12ad2:	e792      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
   12ad4:	0020      	movs	r0, r4
   12ad6:	4b1d      	ldr	r3, [pc, #116]	; (12b4c <_i2c_master_interrupt_handler+0x1e4>)
   12ad8:	4798      	blx	r3
   12ada:	e78e      	b.n	129fa <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12adc:	331f      	adds	r3, #31
   12ade:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12ae0:	2b01      	cmp	r3, #1
   12ae2:	d196      	bne.n	12a12 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12ae4:	7e2b      	ldrb	r3, [r5, #24]
   12ae6:	079b      	lsls	r3, r3, #30
   12ae8:	d501      	bpl.n	12aee <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12aea:	2302      	movs	r3, #2
   12aec:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
   12aee:	2303      	movs	r3, #3
   12af0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12af2:	2300      	movs	r3, #0
   12af4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12af6:	3325      	adds	r3, #37	; 0x25
   12af8:	2200      	movs	r2, #0
   12afa:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12afc:	07b3      	lsls	r3, r6, #30
   12afe:	d503      	bpl.n	12b08 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12b00:	2324      	movs	r3, #36	; 0x24
   12b02:	5ce3      	ldrb	r3, [r4, r3]
   12b04:	2b01      	cmp	r3, #1
   12b06:	d00b      	beq.n	12b20 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12b08:	07f3      	lsls	r3, r6, #31
   12b0a:	d400      	bmi.n	12b0e <_i2c_master_interrupt_handler+0x1a6>
   12b0c:	e781      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12b0e:	2324      	movs	r3, #36	; 0x24
   12b10:	5ce3      	ldrb	r3, [r4, r3]
   12b12:	2b00      	cmp	r3, #0
   12b14:	d000      	beq.n	12b18 <_i2c_master_interrupt_handler+0x1b0>
   12b16:	e77c      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12b18:	68e3      	ldr	r3, [r4, #12]
   12b1a:	0020      	movs	r0, r4
   12b1c:	4798      	blx	r3
   12b1e:	e778      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12b20:	6923      	ldr	r3, [r4, #16]
   12b22:	0020      	movs	r0, r4
   12b24:	4798      	blx	r3
   12b26:	e774      	b.n	12a12 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
   12b28:	0020      	movs	r0, r4
   12b2a:	4b07      	ldr	r3, [pc, #28]	; (12b48 <_i2c_master_interrupt_handler+0x1e0>)
   12b2c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12b2e:	686a      	ldr	r2, [r5, #4]
   12b30:	23e0      	movs	r3, #224	; 0xe0
   12b32:	02db      	lsls	r3, r3, #11
   12b34:	4313      	orrs	r3, r2
   12b36:	606b      	str	r3, [r5, #4]
   12b38:	e780      	b.n	12a3c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12b3a:	6963      	ldr	r3, [r4, #20]
   12b3c:	0020      	movs	r0, r4
   12b3e:	4798      	blx	r3
}
   12b40:	e77f      	b.n	12a42 <_i2c_master_interrupt_handler+0xda>
   12b42:	46c0      	nop			; (mov r8, r8)
   12b44:	20005564 	.word	0x20005564
   12b48:	00012709 	.word	0x00012709
   12b4c:	00012715 	.word	0x00012715
   12b50:	0001279d 	.word	0x0001279d

00012b54 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12b54:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12b58:	4a02      	ldr	r2, [pc, #8]	; (12b64 <CLI_ResetDevice+0x10>)
   12b5a:	4b03      	ldr	r3, [pc, #12]	; (12b68 <CLI_ResetDevice+0x14>)
   12b5c:	60da      	str	r2, [r3, #12]
   12b5e:	f3bf 8f4f 	dsb	sy
   12b62:	e7fe      	b.n	12b62 <CLI_ResetDevice+0xe>
   12b64:	05fa0004 	.word	0x05fa0004
   12b68:	e000ed00 	.word	0xe000ed00

00012b6c <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b6e:	0006      	movs	r6, r0
   12b70:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   12b72:	4d06      	ldr	r5, [pc, #24]	; (12b8c <xCliClearTerminalScreen+0x20>)
   12b74:	231b      	movs	r3, #27
   12b76:	4a06      	ldr	r2, [pc, #24]	; (12b90 <xCliClearTerminalScreen+0x24>)
   12b78:	210f      	movs	r1, #15
   12b7a:	0028      	movs	r0, r5
   12b7c:	4c05      	ldr	r4, [pc, #20]	; (12b94 <xCliClearTerminalScreen+0x28>)
   12b7e:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   12b80:	002a      	movs	r2, r5
   12b82:	0039      	movs	r1, r7
   12b84:	0030      	movs	r0, r6
   12b86:	47a0      	blx	r4
	return pdFALSE;
}
   12b88:	2000      	movs	r0, #0
   12b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b8c:	2000033c 	.word	0x2000033c
   12b90:	00027b94 	.word	0x00027b94
   12b94:	000265d1 	.word	0x000265d1

00012b98 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12b98:	b510      	push	{r4, lr}
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
   12b9a:	4a02      	ldr	r2, [pc, #8]	; (12ba4 <CLI_NeotrellisSetLed+0xc>)
   12b9c:	4b02      	ldr	r3, [pc, #8]	; (12ba8 <CLI_NeotrellisSetLed+0x10>)
   12b9e:	4798      	blx	r3
	//How do you get parameters? Checl link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
}
   12ba0:	2000      	movs	r0, #0
   12ba2:	bd10      	pop	{r4, pc}
   12ba4:	00027944 	.word	0x00027944
   12ba8:	000265d1 	.word	0x000265d1

00012bac <CLI_GetImuData>:
{
   12bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bae:	b087      	sub	sp, #28
   12bb0:	0007      	movs	r7, r0
   12bb2:	9102      	str	r1, [sp, #8]
lsm6ds3_xl_flag_data_ready_get(GetImuStruct(), &reg);
   12bb4:	4b2c      	ldr	r3, [pc, #176]	; (12c68 <CLI_GetImuData+0xbc>)
   12bb6:	4798      	blx	r3
   12bb8:	250f      	movs	r5, #15
   12bba:	ab02      	add	r3, sp, #8
   12bbc:	469c      	mov	ip, r3
   12bbe:	4465      	add	r5, ip
   12bc0:	0029      	movs	r1, r5
   12bc2:	4b2a      	ldr	r3, [pc, #168]	; (12c6c <CLI_GetImuData+0xc0>)
   12bc4:	4798      	blx	r3
if(reg){
   12bc6:	782b      	ldrb	r3, [r5, #0]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d03d      	beq.n	12c48 <CLI_GetImuData+0x9c>
	memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
   12bcc:	4d28      	ldr	r5, [pc, #160]	; (12c70 <CLI_GetImuData+0xc4>)
   12bce:	2206      	movs	r2, #6
   12bd0:	2100      	movs	r1, #0
   12bd2:	0028      	movs	r0, r5
   12bd4:	4b27      	ldr	r3, [pc, #156]	; (12c74 <CLI_GetImuData+0xc8>)
   12bd6:	4798      	blx	r3
	lsm6ds3_acceleration_raw_get(GetImuStruct(), data_raw_acceleration.u8bit);
   12bd8:	4b23      	ldr	r3, [pc, #140]	; (12c68 <CLI_GetImuData+0xbc>)
   12bda:	4798      	blx	r3
   12bdc:	0029      	movs	r1, r5
   12bde:	4b26      	ldr	r3, [pc, #152]	; (12c78 <CLI_GetImuData+0xcc>)
   12be0:	4798      	blx	r3
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
   12be2:	2300      	movs	r3, #0
   12be4:	5ee8      	ldrsh	r0, [r5, r3]
   12be6:	4e25      	ldr	r6, [pc, #148]	; (12c7c <CLI_GetImuData+0xd0>)
   12be8:	47b0      	blx	r6
	acceleration_mg[0] =
   12bea:	4c25      	ldr	r4, [pc, #148]	; (12c80 <CLI_GetImuData+0xd4>)
   12bec:	6020      	str	r0, [r4, #0]
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
   12bee:	2302      	movs	r3, #2
   12bf0:	5ee8      	ldrsh	r0, [r5, r3]
   12bf2:	47b0      	blx	r6
	acceleration_mg[1] =
   12bf4:	6060      	str	r0, [r4, #4]
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
   12bf6:	2304      	movs	r3, #4
   12bf8:	5ee8      	ldrsh	r0, [r5, r3]
   12bfa:	47b0      	blx	r6
   12bfc:	1c05      	adds	r5, r0, #0
	acceleration_mg[2] =
   12bfe:	60a0      	str	r0, [r4, #8]
snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\t%Z %d\r\n",
   12c00:	4e20      	ldr	r6, [pc, #128]	; (12c84 <CLI_GetImuData+0xd8>)
   12c02:	6820      	ldr	r0, [r4, #0]
   12c04:	47b0      	blx	r6
   12c06:	9003      	str	r0, [sp, #12]
   12c08:	1c28      	adds	r0, r5, #0
   12c0a:	47b0      	blx	r6
   12c0c:	9001      	str	r0, [sp, #4]
   12c0e:	6860      	ldr	r0, [r4, #4]
   12c10:	47b0      	blx	r6
   12c12:	9000      	str	r0, [sp, #0]
   12c14:	9b03      	ldr	r3, [sp, #12]
   12c16:	4a1c      	ldr	r2, [pc, #112]	; (12c88 <CLI_GetImuData+0xdc>)
   12c18:	9902      	ldr	r1, [sp, #8]
   12c1a:	0038      	movs	r0, r7
   12c1c:	4c1b      	ldr	r4, [pc, #108]	; (12c8c <CLI_GetImuData+0xe0>)
   12c1e:	47a0      	blx	r4
imuPacketTemp.xmg = (int16_t)acceleration_mg[0];
   12c20:	ac04      	add	r4, sp, #16
   12c22:	4e17      	ldr	r6, [pc, #92]	; (12c80 <CLI_GetImuData+0xd4>)
   12c24:	4d17      	ldr	r5, [pc, #92]	; (12c84 <CLI_GetImuData+0xd8>)
   12c26:	6830      	ldr	r0, [r6, #0]
   12c28:	47a8      	blx	r5
   12c2a:	8020      	strh	r0, [r4, #0]
imuPacketTemp.ymg = (int16_t)acceleration_mg[1];
   12c2c:	6870      	ldr	r0, [r6, #4]
   12c2e:	47a8      	blx	r5
   12c30:	8060      	strh	r0, [r4, #2]
imuPacketTemp.zmg = (int16_t)acceleration_mg[2];
   12c32:	68b0      	ldr	r0, [r6, #8]
   12c34:	47a8      	blx	r5
   12c36:	80a0      	strh	r0, [r4, #4]
int error = WifiAddImuDataToQueue(&imuPacketTemp);
   12c38:	0020      	movs	r0, r4
   12c3a:	4b15      	ldr	r3, [pc, #84]	; (12c90 <CLI_GetImuData+0xe4>)
   12c3c:	4798      	blx	r3
if(error == pdTRUE)
   12c3e:	2801      	cmp	r0, #1
   12c40:	d008      	beq.n	12c54 <CLI_GetImuData+0xa8>
}
   12c42:	2000      	movs	r0, #0
   12c44:	b007      	add	sp, #28
   12c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
   12c48:	4a12      	ldr	r2, [pc, #72]	; (12c94 <CLI_GetImuData+0xe8>)
   12c4a:	9902      	ldr	r1, [sp, #8]
   12c4c:	0038      	movs	r0, r7
   12c4e:	4b0f      	ldr	r3, [pc, #60]	; (12c8c <CLI_GetImuData+0xe0>)
   12c50:	4798      	blx	r3
   12c52:	e7e5      	b.n	12c20 <CLI_GetImuData+0x74>
	strcat(pcWriteBuffer, "IMU Data MQTT Post\r\n");
   12c54:	0038      	movs	r0, r7
   12c56:	4b10      	ldr	r3, [pc, #64]	; (12c98 <CLI_GetImuData+0xec>)
   12c58:	4798      	blx	r3
   12c5a:	1838      	adds	r0, r7, r0
   12c5c:	2215      	movs	r2, #21
   12c5e:	490f      	ldr	r1, [pc, #60]	; (12c9c <CLI_GetImuData+0xf0>)
   12c60:	4b0f      	ldr	r3, [pc, #60]	; (12ca0 <CLI_GetImuData+0xf4>)
   12c62:	4798      	blx	r3
   12c64:	e7ed      	b.n	12c42 <CLI_GetImuData+0x96>
   12c66:	46c0      	nop			; (mov r8, r8)
   12c68:	000138ad 	.word	0x000138ad
   12c6c:	00013875 	.word	0x00013875
   12c70:	2000034c 	.word	0x2000034c
   12c74:	000262a3 	.word	0x000262a3
   12c78:	00013899 	.word	0x00013899
   12c7c:	0001384d 	.word	0x0001384d
   12c80:	20000330 	.word	0x20000330
   12c84:	00024849 	.word	0x00024849
   12c88:	000278c0 	.word	0x000278c0
   12c8c:	000265d1 	.word	0x000265d1
   12c90:	00014cc1 	.word	0x00014cc1
   12c94:	000278e4 	.word	0x000278e4
   12c98:	0002672f 	.word	0x0002672f
   12c9c:	000278f8 	.word	0x000278f8
   12ca0:	0002626d 	.word	0x0002626d

00012ca4 <CLI_OTAU>:
{
   12ca4:	b510      	push	{r4, lr}
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   12ca6:	2002      	movs	r0, #2
   12ca8:	4b01      	ldr	r3, [pc, #4]	; (12cb0 <CLI_OTAU+0xc>)
   12caa:	4798      	blx	r3
}
   12cac:	2000      	movs	r0, #0
   12cae:	bd10      	pop	{r4, pc}
   12cb0:	00014c95 	.word	0x00014c95

00012cb4 <CLI_NeotrellProcessButtonBuffer>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellProcessButtonBuffer( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12cb4:	b570      	push	{r4, r5, r6, lr}
   12cb6:	b090      	sub	sp, #64	; 0x40
   12cb8:	0004      	movs	r4, r0
   12cba:	000d      	movs	r5, r1
	//snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
	//Print to pcWriteBuffer in order.
	//If the string is too long to print, print what you can.
	//The function you write will be useful in the future.
	uint8_t buffer[64];
	uint8_t count = SeesawGetKeypadCount();
   12cbc:	4b21      	ldr	r3, [pc, #132]	; (12d44 <CLI_NeotrellProcessButtonBuffer+0x90>)
   12cbe:	4798      	blx	r3
		return pdTRUE;
	}
	else
	{
	pcWriteBuffer = 0;
		return pdFALSE;
   12cc0:	2300      	movs	r3, #0
	if(count >= 1)
   12cc2:	2800      	cmp	r0, #0
   12cc4:	d102      	bne.n	12ccc <CLI_NeotrellProcessButtonBuffer+0x18>
	}
	

}
   12cc6:	0018      	movs	r0, r3
   12cc8:	b010      	add	sp, #64	; 0x40
   12cca:	bd70      	pop	{r4, r5, r6, pc}
	int32_t res = SeesawReadKeypad(buffer,1);
   12ccc:	2101      	movs	r1, #1
   12cce:	4668      	mov	r0, sp
   12cd0:	4b1d      	ldr	r3, [pc, #116]	; (12d48 <CLI_NeotrellProcessButtonBuffer+0x94>)
   12cd2:	4798      	blx	r3
		return pdTRUE;
   12cd4:	2301      	movs	r3, #1
	if(res==0)
   12cd6:	2800      	cmp	r0, #0
   12cd8:	d1f5      	bne.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
			press = buffer[0] & 0x3;
   12cda:	466b      	mov	r3, sp
   12cdc:	781b      	ldrb	r3, [r3, #0]
   12cde:	2203      	movs	r2, #3
   12ce0:	401a      	ands	r2, r3
			pos =  buffer[0]>>2;
   12ce2:	089b      	lsrs	r3, r3, #2
			int num = NEO_TRELLIS_SEESAW_KEY(pos);
   12ce4:	08d8      	lsrs	r0, r3, #3
   12ce6:	0080      	lsls	r0, r0, #2
   12ce8:	2107      	movs	r1, #7
   12cea:	400b      	ands	r3, r1
   12cec:	18c0      	adds	r0, r0, r3
			if(press == 0x2){
   12cee:	2a02      	cmp	r2, #2
   12cf0:	d015      	beq.n	12d1e <CLI_NeotrellProcessButtonBuffer+0x6a>
		return pdTRUE;
   12cf2:	2301      	movs	r3, #1
			else if(press == 0x3){
   12cf4:	2a03      	cmp	r2, #3
   12cf6:	d1e6      	bne.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12cf8:	17c1      	asrs	r1, r0, #31
   12cfa:	3204      	adds	r2, #4
   12cfc:	0013      	movs	r3, r2
   12cfe:	400b      	ands	r3, r1
   12d00:	181b      	adds	r3, r3, r0
   12d02:	10db      	asrs	r3, r3, #3
   12d04:	009b      	lsls	r3, r3, #2
   12d06:	0f49      	lsrs	r1, r1, #29
   12d08:	1840      	adds	r0, r0, r1
   12d0a:	4010      	ands	r0, r2
   12d0c:	1a40      	subs	r0, r0, r1
   12d0e:	181b      	adds	r3, r3, r0
   12d10:	4a0e      	ldr	r2, [pc, #56]	; (12d4c <CLI_NeotrellProcessButtonBuffer+0x98>)
   12d12:	0029      	movs	r1, r5
   12d14:	0020      	movs	r0, r4
   12d16:	4c0e      	ldr	r4, [pc, #56]	; (12d50 <CLI_NeotrellProcessButtonBuffer+0x9c>)
   12d18:	47a0      	blx	r4
		return pdTRUE;
   12d1a:	2301      	movs	r3, #1
   12d1c:	e7d3      	b.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12d1e:	17c6      	asrs	r6, r0, #31
   12d20:	000b      	movs	r3, r1
   12d22:	4033      	ands	r3, r6
   12d24:	181b      	adds	r3, r3, r0
   12d26:	10db      	asrs	r3, r3, #3
   12d28:	009a      	lsls	r2, r3, #2
   12d2a:	0f76      	lsrs	r6, r6, #29
   12d2c:	1983      	adds	r3, r0, r6
   12d2e:	400b      	ands	r3, r1
   12d30:	1b9b      	subs	r3, r3, r6
   12d32:	18d3      	adds	r3, r2, r3
   12d34:	4a07      	ldr	r2, [pc, #28]	; (12d54 <CLI_NeotrellProcessButtonBuffer+0xa0>)
   12d36:	0029      	movs	r1, r5
   12d38:	0020      	movs	r0, r4
   12d3a:	4c05      	ldr	r4, [pc, #20]	; (12d50 <CLI_NeotrellProcessButtonBuffer+0x9c>)
   12d3c:	47a0      	blx	r4
		return pdTRUE;
   12d3e:	2301      	movs	r3, #1
   12d40:	e7c1      	b.n	12cc6 <CLI_NeotrellProcessButtonBuffer+0x12>
   12d42:	46c0      	nop			; (mov r8, r8)
   12d44:	000138b5 	.word	0x000138b5
   12d48:	00013905 	.word	0x00013905
   12d4c:	0002792c 	.word	0x0002792c
   12d50:	000265d1 	.word	0x000265d1
   12d54:	00027910 	.word	0x00027910

00012d58 <CLI_DistanceSensorGetDistance>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_DistanceSensorGetDistance( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12d58:	b530      	push	{r4, r5, lr}
   12d5a:	b083      	sub	sp, #12
   12d5c:	0004      	movs	r4, r0
   12d5e:	000d      	movs	r5, r1

	uint16_t distance = 0;
   12d60:	466b      	mov	r3, sp
   12d62:	1d98      	adds	r0, r3, #6
   12d64:	2300      	movs	r3, #0
   12d66:	8003      	strh	r3, [r0, #0]
	int error = DistanceSensorGetDistance(&distance, 100);
   12d68:	2164      	movs	r1, #100	; 0x64
   12d6a:	4b12      	ldr	r3, [pc, #72]	; (12db4 <CLI_DistanceSensorGetDistance+0x5c>)
   12d6c:	4798      	blx	r3
	if (0 != error )
   12d6e:	2800      	cmp	r0, #0
   12d70:	d00e      	beq.n	12d90 <CLI_DistanceSensorGetDistance+0x38>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Sensor Error %d!\r\n", error);
   12d72:	0003      	movs	r3, r0
   12d74:	4a10      	ldr	r2, [pc, #64]	; (12db8 <CLI_DistanceSensorGetDistance+0x60>)
   12d76:	0029      	movs	r1, r5
   12d78:	0020      	movs	r0, r4
   12d7a:	4d10      	ldr	r5, [pc, #64]	; (12dbc <CLI_DistanceSensorGetDistance+0x64>)
   12d7c:	47a8      	blx	r5
	else
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Distance: %d mm\r\n", distance);
	}

	error = WifiAddDistanceDataToQueue(&distance);
   12d7e:	466b      	mov	r3, sp
   12d80:	1d98      	adds	r0, r3, #6
   12d82:	4b0f      	ldr	r3, [pc, #60]	; (12dc0 <CLI_DistanceSensorGetDistance+0x68>)
   12d84:	4798      	blx	r3
	if(error == pdTRUE)
   12d86:	2801      	cmp	r0, #1
   12d88:	d00b      	beq.n	12da2 <CLI_DistanceSensorGetDistance+0x4a>
	{
		strcat(pcWriteBuffer, "Distance Data MQTT Post\r\n");
	}
	return pdFALSE;
}
   12d8a:	2000      	movs	r0, #0
   12d8c:	b003      	add	sp, #12
   12d8e:	bd30      	pop	{r4, r5, pc}
		snprintf(pcWriteBuffer,xWriteBufferLen, "Distance: %d mm\r\n", distance);
   12d90:	466b      	mov	r3, sp
   12d92:	3306      	adds	r3, #6
   12d94:	881b      	ldrh	r3, [r3, #0]
   12d96:	4a0b      	ldr	r2, [pc, #44]	; (12dc4 <CLI_DistanceSensorGetDistance+0x6c>)
   12d98:	0029      	movs	r1, r5
   12d9a:	0020      	movs	r0, r4
   12d9c:	4d07      	ldr	r5, [pc, #28]	; (12dbc <CLI_DistanceSensorGetDistance+0x64>)
   12d9e:	47a8      	blx	r5
   12da0:	e7ed      	b.n	12d7e <CLI_DistanceSensorGetDistance+0x26>
		strcat(pcWriteBuffer, "Distance Data MQTT Post\r\n");
   12da2:	0020      	movs	r0, r4
   12da4:	4b08      	ldr	r3, [pc, #32]	; (12dc8 <CLI_DistanceSensorGetDistance+0x70>)
   12da6:	4798      	blx	r3
   12da8:	1820      	adds	r0, r4, r0
   12daa:	221a      	movs	r2, #26
   12dac:	4907      	ldr	r1, [pc, #28]	; (12dcc <CLI_DistanceSensorGetDistance+0x74>)
   12dae:	4b08      	ldr	r3, [pc, #32]	; (12dd0 <CLI_DistanceSensorGetDistance+0x78>)
   12db0:	4798      	blx	r3
   12db2:	e7ea      	b.n	12d8a <CLI_DistanceSensorGetDistance+0x32>
   12db4:	00013355 	.word	0x00013355
   12db8:	0002787c 	.word	0x0002787c
   12dbc:	000265d1 	.word	0x000265d1
   12dc0:	00014cdd 	.word	0x00014cdd
   12dc4:	00027890 	.word	0x00027890
   12dc8:	0002672f 	.word	0x0002672f
   12dcc:	000278a4 	.word	0x000278a4
   12dd0:	0002626d 	.word	0x0002626d

00012dd4 <CLI_SendDummyGameData>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_SendDummyGameData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12dd4:	b530      	push	{r4, r5, lr}
   12dd6:	b087      	sub	sp, #28
   12dd8:	0004      	movs	r4, r0
   12dda:	000d      	movs	r5, r1
struct GameDataPacket gamevar;

gamevar.game[0] = 0;
   12ddc:	a801      	add	r0, sp, #4
   12dde:	2300      	movs	r3, #0
   12de0:	7003      	strb	r3, [r0, #0]
gamevar.game[1] = 1;
   12de2:	3301      	adds	r3, #1
   12de4:	7043      	strb	r3, [r0, #1]
gamevar.game[2] = 2;
   12de6:	3301      	adds	r3, #1
   12de8:	7083      	strb	r3, [r0, #2]
gamevar.game[3] = 3;
   12dea:	3301      	adds	r3, #1
   12dec:	70c3      	strb	r3, [r0, #3]
gamevar.game[4] = 4;
   12dee:	3301      	adds	r3, #1
   12df0:	7103      	strb	r3, [r0, #4]
gamevar.game[5] = 5;
   12df2:	3301      	adds	r3, #1
   12df4:	7143      	strb	r3, [r0, #5]
gamevar.game[6] = 6;
   12df6:	3301      	adds	r3, #1
   12df8:	7183      	strb	r3, [r0, #6]
gamevar.game[7] = 7;
   12dfa:	3301      	adds	r3, #1
   12dfc:	71c3      	strb	r3, [r0, #7]
gamevar.game[8] = 8;
   12dfe:	3301      	adds	r3, #1
   12e00:	7203      	strb	r3, [r0, #8]
gamevar.game[9] = 9;
   12e02:	3301      	adds	r3, #1
   12e04:	7243      	strb	r3, [r0, #9]
gamevar.game[10] = 0xFF;
   12e06:	33f6      	adds	r3, #246	; 0xf6
   12e08:	7283      	strb	r3, [r0, #10]

	int error = WifiAddGameDataToQueue(&gamevar);
   12e0a:	4b06      	ldr	r3, [pc, #24]	; (12e24 <CLI_SendDummyGameData+0x50>)
   12e0c:	4798      	blx	r3
	if(error == pdTRUE)
   12e0e:	2801      	cmp	r0, #1
   12e10:	d002      	beq.n	12e18 <CLI_SendDummyGameData+0x44>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
	}
	return pdFALSE;
}
   12e12:	2000      	movs	r0, #0
   12e14:	b007      	add	sp, #28
   12e16:	bd30      	pop	{r4, r5, pc}
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   12e18:	4a03      	ldr	r2, [pc, #12]	; (12e28 <CLI_SendDummyGameData+0x54>)
   12e1a:	0029      	movs	r1, r5
   12e1c:	0020      	movs	r0, r4
   12e1e:	4b03      	ldr	r3, [pc, #12]	; (12e2c <CLI_SendDummyGameData+0x58>)
   12e20:	4798      	blx	r3
   12e22:	e7f6      	b.n	12e12 <CLI_SendDummyGameData+0x3e>
   12e24:	00014cf9 	.word	0x00014cf9
   12e28:	0002795c 	.word	0x0002795c
   12e2c:	000265d1 	.word	0x000265d1

00012e30 <vCommandConsoleTask>:
{
   12e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e32:	46c6      	mov	lr, r8
   12e34:	b500      	push	{lr}
   12e36:	b082      	sub	sp, #8
FreeRTOS_CLIRegisterCommand( &xOTAUCommand);
   12e38:	485a      	ldr	r0, [pc, #360]	; (12fa4 <vCommandConsoleTask+0x174>)
   12e3a:	4c5b      	ldr	r4, [pc, #364]	; (12fa8 <vCommandConsoleTask+0x178>)
   12e3c:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
   12e3e:	485b      	ldr	r0, [pc, #364]	; (12fac <vCommandConsoleTask+0x17c>)
   12e40:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   12e42:	485b      	ldr	r0, [pc, #364]	; (12fb0 <vCommandConsoleTask+0x180>)
   12e44:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   12e46:	485b      	ldr	r0, [pc, #364]	; (12fb4 <vCommandConsoleTask+0x184>)
   12e48:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   12e4a:	485b      	ldr	r0, [pc, #364]	; (12fb8 <vCommandConsoleTask+0x188>)
   12e4c:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisProcessButtonCommand );
   12e4e:	485b      	ldr	r0, [pc, #364]	; (12fbc <vCommandConsoleTask+0x18c>)
   12e50:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xDistanceSensorGetDistance);
   12e52:	485b      	ldr	r0, [pc, #364]	; (12fc0 <vCommandConsoleTask+0x190>)
   12e54:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xSendDummyGameData);
   12e56:	485b      	ldr	r0, [pc, #364]	; (12fc4 <vCommandConsoleTask+0x194>)
   12e58:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
   12e5a:	485b      	ldr	r0, [pc, #364]	; (12fc8 <vCommandConsoleTask+0x198>)
   12e5c:	4b5b      	ldr	r3, [pc, #364]	; (12fcc <vCommandConsoleTask+0x19c>)
   12e5e:	4798      	blx	r3
uint8_t cRxedChar[2], cInputIndex = 0;
   12e60:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12e62:	4f5b      	ldr	r7, [pc, #364]	; (12fd0 <vCommandConsoleTask+0x1a0>)
            SerialConsoleWriteString("\r\n");
   12e64:	4b59      	ldr	r3, [pc, #356]	; (12fcc <vCommandConsoleTask+0x19c>)
   12e66:	4698      	mov	r8, r3
   12e68:	e027      	b.n	12eba <vCommandConsoleTask+0x8a>
			vTaskDelay( CLI_TASK_DELAY);
   12e6a:	3097      	adds	r0, #151	; 0x97
   12e6c:	4b59      	ldr	r3, [pc, #356]	; (12fd4 <vCommandConsoleTask+0x1a4>)
   12e6e:	4798      	blx	r3
   12e70:	e023      	b.n	12eba <vCommandConsoleTask+0x8a>
            SerialConsoleWriteString("\r\n");
   12e72:	4859      	ldr	r0, [pc, #356]	; (12fd8 <vCommandConsoleTask+0x1a8>)
   12e74:	47c0      	blx	r8
			isEscapeCode = false; pcEscapeCodePos = 0;
   12e76:	2400      	movs	r4, #0
   12e78:	4b58      	ldr	r3, [pc, #352]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12e7a:	701c      	strb	r4, [r3, #0]
   12e7c:	4b58      	ldr	r3, [pc, #352]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12e7e:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   12e80:	4d58      	ldr	r5, [pc, #352]	; (12fe4 <vCommandConsoleTask+0x1b4>)
   12e82:	2231      	movs	r2, #49	; 0x31
   12e84:	4958      	ldr	r1, [pc, #352]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12e86:	0028      	movs	r0, r5
   12e88:	4b58      	ldr	r3, [pc, #352]	; (12fec <vCommandConsoleTask+0x1bc>)
   12e8a:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   12e8c:	2331      	movs	r3, #49	; 0x31
   12e8e:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   12e90:	4c57      	ldr	r4, [pc, #348]	; (12ff0 <vCommandConsoleTask+0x1c0>)
   12e92:	4e58      	ldr	r6, [pc, #352]	; (12ff4 <vCommandConsoleTask+0x1c4>)
   12e94:	2282      	movs	r2, #130	; 0x82
   12e96:	0021      	movs	r1, r4
   12e98:	4853      	ldr	r0, [pc, #332]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12e9a:	47b0      	blx	r6
   12e9c:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12e9e:	2200      	movs	r2, #0
   12ea0:	2381      	movs	r3, #129	; 0x81
   12ea2:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
   12ea4:	0020      	movs	r0, r4
   12ea6:	4b49      	ldr	r3, [pc, #292]	; (12fcc <vCommandConsoleTask+0x19c>)
   12ea8:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
   12eaa:	2d00      	cmp	r5, #0
   12eac:	d1f2      	bne.n	12e94 <vCommandConsoleTask+0x64>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12eae:	2232      	movs	r2, #50	; 0x32
   12eb0:	2100      	movs	r1, #0
   12eb2:	484d      	ldr	r0, [pc, #308]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12eb4:	4b50      	ldr	r3, [pc, #320]	; (12ff8 <vCommandConsoleTask+0x1c8>)
   12eb6:	4798      	blx	r3
            cInputIndex = 0;
   12eb8:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12eba:	a801      	add	r0, sp, #4
   12ebc:	47b8      	blx	r7
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   12ebe:	1c43      	adds	r3, r0, #1
   12ec0:	d0d3      	beq.n	12e6a <vCommandConsoleTask+0x3a>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   12ec2:	ab01      	add	r3, sp, #4
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	2b0a      	cmp	r3, #10
   12ec8:	d0d3      	beq.n	12e72 <vCommandConsoleTask+0x42>
   12eca:	2b0d      	cmp	r3, #13
   12ecc:	d0d1      	beq.n	12e72 <vCommandConsoleTask+0x42>
			if (true == isEscapeCode) {
   12ece:	4a43      	ldr	r2, [pc, #268]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12ed0:	7812      	ldrb	r2, [r2, #0]
   12ed2:	2a00      	cmp	r2, #0
   12ed4:	d03f      	beq.n	12f56 <vCommandConsoleTask+0x126>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12ed6:	4a42      	ldr	r2, [pc, #264]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12ed8:	7812      	ldrb	r2, [r2, #0]
   12eda:	2a03      	cmp	r2, #3
   12edc:	d813      	bhi.n	12f06 <vCommandConsoleTask+0xd6>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12ede:	1c51      	adds	r1, r2, #1
   12ee0:	b2c9      	uxtb	r1, r1
   12ee2:	483f      	ldr	r0, [pc, #252]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12ee4:	7001      	strb	r1, [r0, #0]
   12ee6:	4845      	ldr	r0, [pc, #276]	; (12ffc <vCommandConsoleTask+0x1cc>)
   12ee8:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12eea:	2901      	cmp	r1, #1
   12eec:	d9e5      	bls.n	12eba <vCommandConsoleTask+0x8a>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   12eee:	4944      	ldr	r1, [pc, #272]	; (13000 <vCommandConsoleTask+0x1d0>)
   12ef0:	4842      	ldr	r0, [pc, #264]	; (12ffc <vCommandConsoleTask+0x1cc>)
   12ef2:	4b44      	ldr	r3, [pc, #272]	; (13004 <vCommandConsoleTask+0x1d4>)
   12ef4:	4798      	blx	r3
   12ef6:	2800      	cmp	r0, #0
   12ef8:	d10b      	bne.n	12f12 <vCommandConsoleTask+0xe2>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12efa:	2300      	movs	r3, #0
   12efc:	4a37      	ldr	r2, [pc, #220]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12efe:	7013      	strb	r3, [r2, #0]
   12f00:	4a37      	ldr	r2, [pc, #220]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12f02:	7013      	strb	r3, [r2, #0]
   12f04:	e7d9      	b.n	12eba <vCommandConsoleTask+0x8a>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12f06:	2300      	movs	r3, #0
   12f08:	4a34      	ldr	r2, [pc, #208]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12f0a:	7013      	strb	r3, [r2, #0]
   12f0c:	4a34      	ldr	r2, [pc, #208]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12f0e:	7013      	strb	r3, [r2, #0]
   12f10:	e7d3      	b.n	12eba <vCommandConsoleTask+0x8a>
                            sprintf(pcInputString, "%c[2K\r>", 27);
   12f12:	4c35      	ldr	r4, [pc, #212]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f14:	221b      	movs	r2, #27
   12f16:	493c      	ldr	r1, [pc, #240]	; (13008 <vCommandConsoleTask+0x1d8>)
   12f18:	0020      	movs	r0, r4
   12f1a:	4b3c      	ldr	r3, [pc, #240]	; (1300c <vCommandConsoleTask+0x1dc>)
   12f1c:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   12f1e:	0020      	movs	r0, r4
   12f20:	4b2a      	ldr	r3, [pc, #168]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f22:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12f24:	2232      	movs	r2, #50	; 0x32
   12f26:	2100      	movs	r1, #0
   12f28:	0020      	movs	r0, r4
   12f2a:	4b33      	ldr	r3, [pc, #204]	; (12ff8 <vCommandConsoleTask+0x1c8>)
   12f2c:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   12f2e:	2231      	movs	r2, #49	; 0x31
   12f30:	492c      	ldr	r1, [pc, #176]	; (12fe4 <vCommandConsoleTask+0x1b4>)
   12f32:	0020      	movs	r0, r4
   12f34:	4b2d      	ldr	r3, [pc, #180]	; (12fec <vCommandConsoleTask+0x1bc>)
   12f36:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12f38:	0020      	movs	r0, r4
   12f3a:	4b35      	ldr	r3, [pc, #212]	; (13010 <vCommandConsoleTask+0x1e0>)
   12f3c:	4798      	blx	r3
   12f3e:	2431      	movs	r4, #49	; 0x31
   12f40:	2830      	cmp	r0, #48	; 0x30
   12f42:	d803      	bhi.n	12f4c <vCommandConsoleTask+0x11c>
   12f44:	4827      	ldr	r0, [pc, #156]	; (12fe4 <vCommandConsoleTask+0x1b4>)
   12f46:	4b32      	ldr	r3, [pc, #200]	; (13010 <vCommandConsoleTask+0x1e0>)
   12f48:	4798      	blx	r3
   12f4a:	0004      	movs	r4, r0
   12f4c:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
   12f4e:	4826      	ldr	r0, [pc, #152]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f50:	4b1e      	ldr	r3, [pc, #120]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f52:	4798      	blx	r3
   12f54:	e7d1      	b.n	12efa <vCommandConsoleTask+0xca>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   12f56:	2b08      	cmp	r3, #8
   12f58:	d00f      	beq.n	12f7a <vCommandConsoleTask+0x14a>
   12f5a:	2b7f      	cmp	r3, #127	; 0x7f
   12f5c:	d00d      	beq.n	12f7a <vCommandConsoleTask+0x14a>
			else if( cRxedChar[0] == ASCII_ESC) {
   12f5e:	2b1b      	cmp	r3, #27
   12f60:	d019      	beq.n	12f96 <vCommandConsoleTask+0x166>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   12f62:	2c31      	cmp	r4, #49	; 0x31
   12f64:	d803      	bhi.n	12f6e <vCommandConsoleTask+0x13e>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   12f66:	4a20      	ldr	r2, [pc, #128]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f68:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
   12f6a:	3401      	adds	r4, #1
   12f6c:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
   12f6e:	a801      	add	r0, sp, #4
   12f70:	2300      	movs	r3, #0
   12f72:	7043      	strb	r3, [r0, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   12f74:	4b15      	ldr	r3, [pc, #84]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f76:	4798      	blx	r3
   12f78:	e79f      	b.n	12eba <vCommandConsoleTask+0x8a>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12f7a:	4b26      	ldr	r3, [pc, #152]	; (13014 <vCommandConsoleTask+0x1e4>)
   12f7c:	681b      	ldr	r3, [r3, #0]
   12f7e:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
   12f80:	4668      	mov	r0, sp
   12f82:	4b12      	ldr	r3, [pc, #72]	; (12fcc <vCommandConsoleTask+0x19c>)
   12f84:	4798      	blx	r3
                if( cInputIndex > 0 )
   12f86:	2c00      	cmp	r4, #0
   12f88:	d097      	beq.n	12eba <vCommandConsoleTask+0x8a>
                    cInputIndex--;
   12f8a:	3c01      	subs	r4, #1
   12f8c:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
   12f8e:	2200      	movs	r2, #0
   12f90:	4b15      	ldr	r3, [pc, #84]	; (12fe8 <vCommandConsoleTask+0x1b8>)
   12f92:	551a      	strb	r2, [r3, r4]
            {
   12f94:	e791      	b.n	12eba <vCommandConsoleTask+0x8a>
				isEscapeCode = true; //Next characters will be code arguments
   12f96:	2201      	movs	r2, #1
   12f98:	4b10      	ldr	r3, [pc, #64]	; (12fdc <vCommandConsoleTask+0x1ac>)
   12f9a:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   12f9c:	2200      	movs	r2, #0
   12f9e:	4b10      	ldr	r3, [pc, #64]	; (12fe0 <vCommandConsoleTask+0x1b0>)
   12fa0:	701a      	strb	r2, [r3, #0]
   12fa2:	e78a      	b.n	12eba <vCommandConsoleTask+0x8a>
   12fa4:	00027bdc 	.word	0x00027bdc
   12fa8:	000151d9 	.word	0x000151d9
   12fac:	00027bac 	.word	0x00027bac
   12fb0:	00027b84 	.word	0x00027b84
   12fb4:	00027bec 	.word	0x00027bec
   12fb8:	00027bcc 	.word	0x00027bcc
   12fbc:	00027bbc 	.word	0x00027bbc
   12fc0:	00027b9c 	.word	0x00027b9c
   12fc4:	00027bfc 	.word	0x00027bfc
   12fc8:	00027b34 	.word	0x00027b34
   12fcc:	00018fbd 	.word	0x00018fbd
   12fd0:	00019041 	.word	0x00019041
   12fd4:	00018145 	.word	0x00018145
   12fd8:	0002af5c 	.word	0x0002af5c
   12fdc:	20000352 	.word	0x20000352
   12fe0:	20000353 	.word	0x20000353
   12fe4:	2000038c 	.word	0x2000038c
   12fe8:	20000358 	.word	0x20000358
   12fec:	0002675f 	.word	0x0002675f
   12ff0:	200003c0 	.word	0x200003c0
   12ff4:	0001521d 	.word	0x0001521d
   12ff8:	000262a3 	.word	0x000262a3
   12ffc:	20000354 	.word	0x20000354
   13000:	00027b78 	.word	0x00027b78
   13004:	00026679 	.word	0x00026679
   13008:	00027b7c 	.word	0x00027b7c
   1300c:	00026635 	.word	0x00026635
   13010:	0002672f 	.word	0x0002672f
   13014:	00027878 	.word	0x00027878

00013018 <vControlHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vControlHandlerTask( void *pvParameters )
{
   13018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1301a:	b08f      	sub	sp, #60	; 0x3c
   1301c:	af06      	add	r7, sp, #24
   1301e:	6078      	str	r0, [r7, #4]
SerialConsoleWriteString("ESE516 - Control Init Code\r\n");
   13020:	4b9e      	ldr	r3, [pc, #632]	; (1329c <vControlHandlerTask+0x284>)
   13022:	0018      	movs	r0, r3
   13024:	4b9e      	ldr	r3, [pc, #632]	; (132a0 <vControlHandlerTask+0x288>)
   13026:	4798      	blx	r3


srand(50);
   13028:	2032      	movs	r0, #50	; 0x32
   1302a:	4b9e      	ldr	r3, [pc, #632]	; (132a4 <vControlHandlerTask+0x28c>)
   1302c:	4798      	blx	r3

//Initialize Queues
xQueueGameBufferIn = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   1302e:	2200      	movs	r2, #0
   13030:	2114      	movs	r1, #20
   13032:	2002      	movs	r0, #2
   13034:	4b9c      	ldr	r3, [pc, #624]	; (132a8 <vControlHandlerTask+0x290>)
   13036:	4798      	blx	r3
   13038:	0002      	movs	r2, r0
   1303a:	4b9c      	ldr	r3, [pc, #624]	; (132ac <vControlHandlerTask+0x294>)
   1303c:	601a      	str	r2, [r3, #0]
xQueueRgbColorBuffer = xQueueCreate( 2, sizeof( struct RgbColorPacket ) );
   1303e:	2200      	movs	r2, #0
   13040:	2103      	movs	r1, #3
   13042:	2002      	movs	r0, #2
   13044:	4b98      	ldr	r3, [pc, #608]	; (132a8 <vControlHandlerTask+0x290>)
   13046:	4798      	blx	r3
   13048:	0002      	movs	r2, r0
   1304a:	4b99      	ldr	r3, [pc, #612]	; (132b0 <vControlHandlerTask+0x298>)
   1304c:	601a      	str	r2, [r3, #0]

if(xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL){
   1304e:	4b97      	ldr	r3, [pc, #604]	; (132ac <vControlHandlerTask+0x294>)
   13050:	681b      	ldr	r3, [r3, #0]
   13052:	2b00      	cmp	r3, #0
   13054:	d003      	beq.n	1305e <vControlHandlerTask+0x46>
   13056:	4b96      	ldr	r3, [pc, #600]	; (132b0 <vControlHandlerTask+0x298>)
   13058:	681b      	ldr	r3, [r3, #0]
   1305a:	2b00      	cmp	r3, #0
   1305c:	d103      	bne.n	13066 <vControlHandlerTask+0x4e>
	SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
   1305e:	4b95      	ldr	r3, [pc, #596]	; (132b4 <vControlHandlerTask+0x29c>)
   13060:	0018      	movs	r0, r3
   13062:	4b8f      	ldr	r3, [pc, #572]	; (132a0 <vControlHandlerTask+0x288>)
   13064:	4798      	blx	r3
}
controlState = CONTROL_WAIT_FOR_GAME; //Initial state
   13066:	4b94      	ldr	r3, [pc, #592]	; (132b8 <vControlHandlerTask+0x2a0>)
   13068:	2200      	movs	r2, #0
   1306a:	701a      	strb	r2, [r3, #0]
int i = 0;
   1306c:	2300      	movs	r3, #0
   1306e:	61fb      	str	r3, [r7, #28]
while(1)
{
	switch(controlState)
   13070:	4b91      	ldr	r3, [pc, #580]	; (132b8 <vControlHandlerTask+0x2a0>)
   13072:	781b      	ldrb	r3, [r3, #0]
   13074:	2b01      	cmp	r3, #1
   13076:	d023      	beq.n	130c0 <vControlHandlerTask+0xa8>
   13078:	2b02      	cmp	r3, #2
   1307a:	d100      	bne.n	1307e <vControlHandlerTask+0x66>
   1307c:	e106      	b.n	1328c <vControlHandlerTask+0x274>
   1307e:	2b00      	cmp	r3, #0
   13080:	d000      	beq.n	13084 <vControlHandlerTask+0x6c>
   13082:	e0ff      	b.n	13284 <vControlHandlerTask+0x26c>
		
		SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
		break;
		*/
		//SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
		if(i == 0)
   13084:	69fb      	ldr	r3, [r7, #28]
   13086:	2b00      	cmp	r3, #0
   13088:	d000      	beq.n	1308c <vControlHandlerTask+0x74>
   1308a:	e101      	b.n	13290 <vControlHandlerTask+0x278>
		{	
		//	SeesawSetLed(15,30,60,90); //Turn button 15 off
		//	SeesawOrderLedUpdate();
			SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
   1308c:	4b8b      	ldr	r3, [pc, #556]	; (132bc <vControlHandlerTask+0x2a4>)
   1308e:	0018      	movs	r0, r3
   13090:	4b83      	ldr	r3, [pc, #524]	; (132a0 <vControlHandlerTask+0x288>)
   13092:	4798      	blx	r3
			i++;
   13094:	69fb      	ldr	r3, [r7, #28]
   13096:	3301      	adds	r3, #1
   13098:	61fb      	str	r3, [r7, #28]
			
		//	SerialConsoleWriteString("Now are at the place of waiting for game start\r\n");
		//	i++;
			for(int j = 0; j < 15; j++)
   1309a:	2300      	movs	r3, #0
   1309c:	61bb      	str	r3, [r7, #24]
   1309e:	e00b      	b.n	130b8 <vControlHandlerTask+0xa0>
			{
				SeesawSetLed(j,0,0,0); //Turn button 15 off
   130a0:	69bb      	ldr	r3, [r7, #24]
   130a2:	b2d8      	uxtb	r0, r3
   130a4:	2300      	movs	r3, #0
   130a6:	2200      	movs	r2, #0
   130a8:	2100      	movs	r1, #0
   130aa:	4c85      	ldr	r4, [pc, #532]	; (132c0 <vControlHandlerTask+0x2a8>)
   130ac:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   130ae:	4b85      	ldr	r3, [pc, #532]	; (132c4 <vControlHandlerTask+0x2ac>)
   130b0:	4798      	blx	r3
			for(int j = 0; j < 15; j++)
   130b2:	69bb      	ldr	r3, [r7, #24]
   130b4:	3301      	adds	r3, #1
   130b6:	61bb      	str	r3, [r7, #24]
   130b8:	69bb      	ldr	r3, [r7, #24]
   130ba:	2b0e      	cmp	r3, #14
   130bc:	ddf0      	ble.n	130a0 <vControlHandlerTask+0x88>
			
		}
		*/
		

		break;
   130be:	e0e7      	b.n	13290 <vControlHandlerTask+0x278>
			controlState = CONTROL_WAIT_FOR_GAME;
		}

		break;
		*/
		int location = (rand() % 16) + 1;
   130c0:	4b81      	ldr	r3, [pc, #516]	; (132c8 <vControlHandlerTask+0x2b0>)
   130c2:	4798      	blx	r3
   130c4:	0002      	movs	r2, r0
   130c6:	4b81      	ldr	r3, [pc, #516]	; (132cc <vControlHandlerTask+0x2b4>)
   130c8:	4013      	ands	r3, r2
   130ca:	d504      	bpl.n	130d6 <vControlHandlerTask+0xbe>
   130cc:	3b01      	subs	r3, #1
   130ce:	2210      	movs	r2, #16
   130d0:	4252      	negs	r2, r2
   130d2:	4313      	orrs	r3, r2
   130d4:	3301      	adds	r3, #1
   130d6:	3301      	adds	r3, #1
   130d8:	617b      	str	r3, [r7, #20]
		int prev_led = 15;
   130da:	230f      	movs	r3, #15
   130dc:	613b      	str	r3, [r7, #16]
		snprintf(buffer,63, "Starting location is -> %d\r\n", location);
   130de:	697b      	ldr	r3, [r7, #20]
   130e0:	4a7b      	ldr	r2, [pc, #492]	; (132d0 <vControlHandlerTask+0x2b8>)
   130e2:	487c      	ldr	r0, [pc, #496]	; (132d4 <vControlHandlerTask+0x2bc>)
   130e4:	213f      	movs	r1, #63	; 0x3f
   130e6:	4c7c      	ldr	r4, [pc, #496]	; (132d8 <vControlHandlerTask+0x2c0>)
   130e8:	47a0      	blx	r4
		SerialConsoleWriteString(buffer);
   130ea:	4b7a      	ldr	r3, [pc, #488]	; (132d4 <vControlHandlerTask+0x2bc>)
   130ec:	0018      	movs	r0, r3
   130ee:	4b6c      	ldr	r3, [pc, #432]	; (132a0 <vControlHandlerTask+0x288>)
   130f0:	4798      	blx	r3
		int step_move = 1;
   130f2:	2301      	movs	r3, #1
   130f4:	60fb      	str	r3, [r7, #12]
		steps[0] = location;
   130f6:	4b79      	ldr	r3, [pc, #484]	; (132dc <vControlHandlerTask+0x2c4>)
   130f8:	697a      	ldr	r2, [r7, #20]
   130fa:	601a      	str	r2, [r3, #0]
		
		//update the first led
		SeesawSetLed(location-1, 90,0,200);
   130fc:	697b      	ldr	r3, [r7, #20]
   130fe:	b2db      	uxtb	r3, r3
   13100:	3b01      	subs	r3, #1
   13102:	b2d8      	uxtb	r0, r3
   13104:	23c8      	movs	r3, #200	; 0xc8
   13106:	2200      	movs	r2, #0
   13108:	215a      	movs	r1, #90	; 0x5a
   1310a:	4c6d      	ldr	r4, [pc, #436]	; (132c0 <vControlHandlerTask+0x2a8>)
   1310c:	47a0      	blx	r4
		SeesawOrderLedUpdate();
   1310e:	4b6d      	ldr	r3, [pc, #436]	; (132c4 <vControlHandlerTask+0x2ac>)
   13110:	4798      	blx	r3
		SendRealTimeUserGameInput(1,location,1);
   13112:	697b      	ldr	r3, [r7, #20]
   13114:	2201      	movs	r2, #1
   13116:	0019      	movs	r1, r3
   13118:	2001      	movs	r0, #1
   1311a:	4b71      	ldr	r3, [pc, #452]	; (132e0 <vControlHandlerTask+0x2c8>)
   1311c:	4798      	blx	r3
		prev_led = location;
   1311e:	697b      	ldr	r3, [r7, #20]
   13120:	613b      	str	r3, [r7, #16]
		for(;step_move < 6;step_move++)
   13122:	e085      	b.n	13230 <vControlHandlerTask+0x218>
		{	
			
			//1.first step: read until joystick have a signal
			raw_value = ts_read_x();
   13124:	4b6f      	ldr	r3, [pc, #444]	; (132e4 <vControlHandlerTask+0x2cc>)
   13126:	4798      	blx	r3
   13128:	0003      	movs	r3, r0
   1312a:	001a      	movs	r2, r3
   1312c:	4b6e      	ldr	r3, [pc, #440]	; (132e8 <vControlHandlerTask+0x2d0>)
   1312e:	801a      	strh	r2, [r3, #0]
			while(raw_value < TS_X_THRESHOLD_RIGHT && raw_value > TS_X_THRESHOLD_LEFT)
   13130:	e008      	b.n	13144 <vControlHandlerTask+0x12c>
			{
				vTaskDelay(40);
   13132:	2028      	movs	r0, #40	; 0x28
   13134:	4b6d      	ldr	r3, [pc, #436]	; (132ec <vControlHandlerTask+0x2d4>)
   13136:	4798      	blx	r3
				raw_value = ts_read_x();
   13138:	4b6a      	ldr	r3, [pc, #424]	; (132e4 <vControlHandlerTask+0x2cc>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	001a      	movs	r2, r3
   13140:	4b69      	ldr	r3, [pc, #420]	; (132e8 <vControlHandlerTask+0x2d0>)
   13142:	801a      	strh	r2, [r3, #0]
			while(raw_value < TS_X_THRESHOLD_RIGHT && raw_value > TS_X_THRESHOLD_LEFT)
   13144:	4b68      	ldr	r3, [pc, #416]	; (132e8 <vControlHandlerTask+0x2d0>)
   13146:	881b      	ldrh	r3, [r3, #0]
   13148:	4a69      	ldr	r2, [pc, #420]	; (132f0 <vControlHandlerTask+0x2d8>)
   1314a:	4293      	cmp	r3, r2
   1314c:	d803      	bhi.n	13156 <vControlHandlerTask+0x13e>
   1314e:	4b66      	ldr	r3, [pc, #408]	; (132e8 <vControlHandlerTask+0x2d0>)
   13150:	881b      	ldrh	r3, [r3, #0]
   13152:	2bc8      	cmp	r3, #200	; 0xc8
   13154:	d8ed      	bhi.n	13132 <vControlHandlerTask+0x11a>
		//		snprintf(buffer,63, "Raw value -> %d\r\n", raw_value);
		//		SerialConsoleWriteString(buffer);
			}
			
			//2.get the next location
			if(raw_value > TS_X_THRESHOLD_RIGHT)
   13156:	4b64      	ldr	r3, [pc, #400]	; (132e8 <vControlHandlerTask+0x2d0>)
   13158:	881b      	ldrh	r3, [r3, #0]
   1315a:	4a66      	ldr	r2, [pc, #408]	; (132f4 <vControlHandlerTask+0x2dc>)
   1315c:	4293      	cmp	r3, r2
   1315e:	d902      	bls.n	13166 <vControlHandlerTask+0x14e>
			{
				location += 1;
   13160:	697b      	ldr	r3, [r7, #20]
   13162:	3301      	adds	r3, #1
   13164:	617b      	str	r3, [r7, #20]
			}
			
			if(raw_value < TS_X_THRESHOLD_LEFT)
   13166:	4b60      	ldr	r3, [pc, #384]	; (132e8 <vControlHandlerTask+0x2d0>)
   13168:	881b      	ldrh	r3, [r3, #0]
   1316a:	2bc7      	cmp	r3, #199	; 0xc7
   1316c:	d802      	bhi.n	13174 <vControlHandlerTask+0x15c>
			{
				location -= 1;
   1316e:	697b      	ldr	r3, [r7, #20]
   13170:	3b01      	subs	r3, #1
   13172:	617b      	str	r3, [r7, #20]
			}
			
			if(location < 1)
   13174:	697b      	ldr	r3, [r7, #20]
   13176:	2b00      	cmp	r3, #0
   13178:	dc01      	bgt.n	1317e <vControlHandlerTask+0x166>
				location = 1;
   1317a:	2301      	movs	r3, #1
   1317c:	617b      	str	r3, [r7, #20]
			if(location > 16)
   1317e:	697b      	ldr	r3, [r7, #20]
   13180:	2b10      	cmp	r3, #16
   13182:	dd01      	ble.n	13188 <vControlHandlerTask+0x170>
				location = 16;
   13184:	2310      	movs	r3, #16
   13186:	617b      	str	r3, [r7, #20]
			snprintf(buffer,63, "%d th move is at %d\r\n", step_move, location);
   13188:	68f9      	ldr	r1, [r7, #12]
   1318a:	4a5b      	ldr	r2, [pc, #364]	; (132f8 <vControlHandlerTask+0x2e0>)
   1318c:	4851      	ldr	r0, [pc, #324]	; (132d4 <vControlHandlerTask+0x2bc>)
   1318e:	697b      	ldr	r3, [r7, #20]
   13190:	9300      	str	r3, [sp, #0]
   13192:	000b      	movs	r3, r1
   13194:	213f      	movs	r1, #63	; 0x3f
   13196:	4c50      	ldr	r4, [pc, #320]	; (132d8 <vControlHandlerTask+0x2c0>)
   13198:	47a0      	blx	r4
			SerialConsoleWriteString(buffer);
   1319a:	4b4e      	ldr	r3, [pc, #312]	; (132d4 <vControlHandlerTask+0x2bc>)
   1319c:	0018      	movs	r0, r3
   1319e:	4b40      	ldr	r3, [pc, #256]	; (132a0 <vControlHandlerTask+0x288>)
   131a0:	4798      	blx	r3
			vTaskDelay(400);
   131a2:	23c8      	movs	r3, #200	; 0xc8
   131a4:	005b      	lsls	r3, r3, #1
   131a6:	0018      	movs	r0, r3
   131a8:	4b50      	ldr	r3, [pc, #320]	; (132ec <vControlHandlerTask+0x2d4>)
   131aa:	4798      	blx	r3
			
			//3.wait tail the joystick reach neutral position
			raw_value = ts_read_x();
   131ac:	4b4d      	ldr	r3, [pc, #308]	; (132e4 <vControlHandlerTask+0x2cc>)
   131ae:	4798      	blx	r3
   131b0:	0003      	movs	r3, r0
   131b2:	001a      	movs	r2, r3
   131b4:	4b4c      	ldr	r3, [pc, #304]	; (132e8 <vControlHandlerTask+0x2d0>)
   131b6:	801a      	strh	r2, [r3, #0]
			while(raw_value > TS_X_THRESHOLD_RIGHT || raw_value < TS_X_THRESHOLD_LEFT)
   131b8:	e008      	b.n	131cc <vControlHandlerTask+0x1b4>
			{
				vTaskDelay(40);
   131ba:	2028      	movs	r0, #40	; 0x28
   131bc:	4b4b      	ldr	r3, [pc, #300]	; (132ec <vControlHandlerTask+0x2d4>)
   131be:	4798      	blx	r3
				raw_value = ts_read_x();
   131c0:	4b48      	ldr	r3, [pc, #288]	; (132e4 <vControlHandlerTask+0x2cc>)
   131c2:	4798      	blx	r3
   131c4:	0003      	movs	r3, r0
   131c6:	001a      	movs	r2, r3
   131c8:	4b47      	ldr	r3, [pc, #284]	; (132e8 <vControlHandlerTask+0x2d0>)
   131ca:	801a      	strh	r2, [r3, #0]
			while(raw_value > TS_X_THRESHOLD_RIGHT || raw_value < TS_X_THRESHOLD_LEFT)
   131cc:	4b46      	ldr	r3, [pc, #280]	; (132e8 <vControlHandlerTask+0x2d0>)
   131ce:	881b      	ldrh	r3, [r3, #0]
   131d0:	4a48      	ldr	r2, [pc, #288]	; (132f4 <vControlHandlerTask+0x2dc>)
   131d2:	4293      	cmp	r3, r2
   131d4:	d8f1      	bhi.n	131ba <vControlHandlerTask+0x1a2>
   131d6:	4b44      	ldr	r3, [pc, #272]	; (132e8 <vControlHandlerTask+0x2d0>)
   131d8:	881b      	ldrh	r3, [r3, #0]
   131da:	2bc7      	cmp	r3, #199	; 0xc7
   131dc:	d9ed      	bls.n	131ba <vControlHandlerTask+0x1a2>
			//4.update led, send the real time signal
			SeesawSetLed(prev_led-1,0,0,0); //Turn button 15 off
			SendRealTimeUserGameInput(1,prev_led,0);
			prev_led = location;
			*/
			SeesawSetLed(prev_led-1,0,0,0);
   131de:	693b      	ldr	r3, [r7, #16]
   131e0:	b2db      	uxtb	r3, r3
   131e2:	3b01      	subs	r3, #1
   131e4:	b2d8      	uxtb	r0, r3
   131e6:	2300      	movs	r3, #0
   131e8:	2200      	movs	r2, #0
   131ea:	2100      	movs	r1, #0
   131ec:	4c34      	ldr	r4, [pc, #208]	; (132c0 <vControlHandlerTask+0x2a8>)
   131ee:	47a0      	blx	r4
			SeesawSetLed(location-1, 90,0,200);
   131f0:	697b      	ldr	r3, [r7, #20]
   131f2:	b2db      	uxtb	r3, r3
   131f4:	3b01      	subs	r3, #1
   131f6:	b2d8      	uxtb	r0, r3
   131f8:	23c8      	movs	r3, #200	; 0xc8
   131fa:	2200      	movs	r2, #0
   131fc:	215a      	movs	r1, #90	; 0x5a
   131fe:	4c30      	ldr	r4, [pc, #192]	; (132c0 <vControlHandlerTask+0x2a8>)
   13200:	47a0      	blx	r4
			SeesawOrderLedUpdate();
   13202:	4b30      	ldr	r3, [pc, #192]	; (132c4 <vControlHandlerTask+0x2ac>)
   13204:	4798      	blx	r3
			prev_led = location;
   13206:	697b      	ldr	r3, [r7, #20]
   13208:	613b      	str	r3, [r7, #16]
			vTaskDelay(40);
   1320a:	2028      	movs	r0, #40	; 0x28
   1320c:	4b37      	ldr	r3, [pc, #220]	; (132ec <vControlHandlerTask+0x2d4>)
   1320e:	4798      	blx	r3
			SendRealTimeUserGameInput(1,location,1);
   13210:	697b      	ldr	r3, [r7, #20]
   13212:	2201      	movs	r2, #1
   13214:	0019      	movs	r1, r3
   13216:	2001      	movs	r0, #1
   13218:	4b31      	ldr	r3, [pc, #196]	; (132e0 <vControlHandlerTask+0x2c8>)
   1321a:	4798      	blx	r3
			
			
			steps[step_move] = location;
   1321c:	4b2f      	ldr	r3, [pc, #188]	; (132dc <vControlHandlerTask+0x2c4>)
   1321e:	68fa      	ldr	r2, [r7, #12]
   13220:	0092      	lsls	r2, r2, #2
   13222:	6979      	ldr	r1, [r7, #20]
   13224:	50d1      	str	r1, [r2, r3]
			i=0;
   13226:	2300      	movs	r3, #0
   13228:	61fb      	str	r3, [r7, #28]
		for(;step_move < 6;step_move++)
   1322a:	68fb      	ldr	r3, [r7, #12]
   1322c:	3301      	adds	r3, #1
   1322e:	60fb      	str	r3, [r7, #12]
   13230:	68fb      	ldr	r3, [r7, #12]
   13232:	2b05      	cmp	r3, #5
   13234:	dc00      	bgt.n	13238 <vControlHandlerTask+0x220>
   13236:	e775      	b.n	13124 <vControlHandlerTask+0x10c>
			
					
			
		}
		
		snprintf(buffer,63, "the answer key is %d |%d |%d |%d |%d |%d | \r\n", steps[0], steps[1],steps[2],steps[3],steps[4],steps[5]);
   13238:	4b28      	ldr	r3, [pc, #160]	; (132dc <vControlHandlerTask+0x2c4>)
   1323a:	681b      	ldr	r3, [r3, #0]
   1323c:	469c      	mov	ip, r3
   1323e:	4b27      	ldr	r3, [pc, #156]	; (132dc <vControlHandlerTask+0x2c4>)
   13240:	685a      	ldr	r2, [r3, #4]
   13242:	4b26      	ldr	r3, [pc, #152]	; (132dc <vControlHandlerTask+0x2c4>)
   13244:	6899      	ldr	r1, [r3, #8]
   13246:	4b25      	ldr	r3, [pc, #148]	; (132dc <vControlHandlerTask+0x2c4>)
   13248:	68d8      	ldr	r0, [r3, #12]
   1324a:	4b24      	ldr	r3, [pc, #144]	; (132dc <vControlHandlerTask+0x2c4>)
   1324c:	691c      	ldr	r4, [r3, #16]
   1324e:	4b23      	ldr	r3, [pc, #140]	; (132dc <vControlHandlerTask+0x2c4>)
   13250:	695b      	ldr	r3, [r3, #20]
   13252:	4e2a      	ldr	r6, [pc, #168]	; (132fc <vControlHandlerTask+0x2e4>)
   13254:	4d1f      	ldr	r5, [pc, #124]	; (132d4 <vControlHandlerTask+0x2bc>)
   13256:	9304      	str	r3, [sp, #16]
   13258:	9403      	str	r4, [sp, #12]
   1325a:	9002      	str	r0, [sp, #8]
   1325c:	9101      	str	r1, [sp, #4]
   1325e:	9200      	str	r2, [sp, #0]
   13260:	4663      	mov	r3, ip
   13262:	0032      	movs	r2, r6
   13264:	213f      	movs	r1, #63	; 0x3f
   13266:	0028      	movs	r0, r5
   13268:	4c1b      	ldr	r4, [pc, #108]	; (132d8 <vControlHandlerTask+0x2c0>)
   1326a:	47a0      	blx	r4
		SerialConsoleWriteString(buffer);
   1326c:	4b19      	ldr	r3, [pc, #100]	; (132d4 <vControlHandlerTask+0x2bc>)
   1326e:	0018      	movs	r0, r3
   13270:	4b0b      	ldr	r3, [pc, #44]	; (132a0 <vControlHandlerTask+0x288>)
   13272:	4798      	blx	r3
		SendAnswerKey(steps);
   13274:	4b19      	ldr	r3, [pc, #100]	; (132dc <vControlHandlerTask+0x2c4>)
   13276:	0018      	movs	r0, r3
   13278:	4b21      	ldr	r3, [pc, #132]	; (13300 <vControlHandlerTask+0x2e8>)
   1327a:	4798      	blx	r3
		
		controlState = CONTROL_WAIT_FOR_GAME;
   1327c:	4b0e      	ldr	r3, [pc, #56]	; (132b8 <vControlHandlerTask+0x2a0>)
   1327e:	2200      	movs	r2, #0
   13280:	701a      	strb	r2, [r3, #0]
		
		break;
   13282:	e006      	b.n	13292 <vControlHandlerTask+0x27a>
		break;
	}


	default:
		controlState = CONTROL_WAIT_FOR_GAME;
   13284:	4b0c      	ldr	r3, [pc, #48]	; (132b8 <vControlHandlerTask+0x2a0>)
   13286:	2200      	movs	r2, #0
   13288:	701a      	strb	r2, [r3, #0]
	break;
   1328a:	e002      	b.n	13292 <vControlHandlerTask+0x27a>
		break;
   1328c:	46c0      	nop			; (mov r8, r8)
   1328e:	e000      	b.n	13292 <vControlHandlerTask+0x27a>
		break;
   13290:	46c0      	nop			; (mov r8, r8)



	}
vTaskDelay(40);
   13292:	2028      	movs	r0, #40	; 0x28
   13294:	4b15      	ldr	r3, [pc, #84]	; (132ec <vControlHandlerTask+0x2d4>)
   13296:	4798      	blx	r3
	switch(controlState)
   13298:	e6ea      	b.n	13070 <vControlHandlerTask+0x58>
   1329a:	46c0      	nop			; (mov r8, r8)
   1329c:	00027c0c 	.word	0x00027c0c
   132a0:	00018fbd 	.word	0x00018fbd
   132a4:	000264d9 	.word	0x000264d9
   132a8:	00016b7d 	.word	0x00016b7d
   132ac:	20000444 	.word	0x20000444
   132b0:	20000448 	.word	0x20000448
   132b4:	00027c2c 	.word	0x00027c2c
   132b8:	2000421c 	.word	0x2000421c
   132bc:	00027c58 	.word	0x00027c58
   132c0:	000139a1 	.word	0x000139a1
   132c4:	000139d9 	.word	0x000139d9
   132c8:	00026535 	.word	0x00026535
   132cc:	8000000f 	.word	0x8000000f
   132d0:	00027c8c 	.word	0x00027c8c
   132d4:	200041dc 	.word	0x200041dc
   132d8:	000265d1 	.word	0x000265d1
   132dc:	200041c0 	.word	0x200041c0
   132e0:	000146f1 	.word	0x000146f1
   132e4:	00013c35 	.word	0x00013c35
   132e8:	200041d8 	.word	0x200041d8
   132ec:	00018145 	.word	0x00018145
   132f0:	0000044b 	.word	0x0000044b
   132f4:	0000044c 	.word	0x0000044c
   132f8:	00027cac 	.word	0x00027cac
   132fc:	00027cc4 	.word	0x00027cc4
   13300:	00014769 	.word	0x00014769

00013304 <ControlAddGameData>:
* @return		Returns pdTrue if data can be added to queue, 0 if queue is full
* @note         

*****************************************************************************/
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13304:	b590      	push	{r4, r7, lr}
   13306:	b085      	sub	sp, #20
   13308:	af00      	add	r7, sp, #0
   1330a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBufferIn , gameIn, ( TickType_t ) 10);
   1330c:	4b06      	ldr	r3, [pc, #24]	; (13328 <ControlAddGameData+0x24>)
   1330e:	6818      	ldr	r0, [r3, #0]
   13310:	6879      	ldr	r1, [r7, #4]
   13312:	2300      	movs	r3, #0
   13314:	220a      	movs	r2, #10
   13316:	4c05      	ldr	r4, [pc, #20]	; (1332c <ControlAddGameData+0x28>)
   13318:	47a0      	blx	r4
   1331a:	0003      	movs	r3, r0
   1331c:	60fb      	str	r3, [r7, #12]
	return error;
   1331e:	68fb      	ldr	r3, [r7, #12]
}
   13320:	0018      	movs	r0, r3
   13322:	46bd      	mov	sp, r7
   13324:	b005      	add	sp, #20
   13326:	bd90      	pop	{r4, r7, pc}
   13328:	20000444 	.word	0x20000444
   1332c:	00016cb9 	.word	0x00016cb9

00013330 <StartJXGame>:

void StartJXGame(void)
{	
   13330:	b580      	push	{r7, lr}
   13332:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Received Game on instruction! \r\n");
   13334:	4b04      	ldr	r3, [pc, #16]	; (13348 <StartJXGame+0x18>)
   13336:	0018      	movs	r0, r3
   13338:	4b04      	ldr	r3, [pc, #16]	; (1334c <StartJXGame+0x1c>)
   1333a:	4798      	blx	r3
	controlState = CONTROL_PLAYING_MOVE;
   1333c:	4b04      	ldr	r3, [pc, #16]	; (13350 <StartJXGame+0x20>)
   1333e:	2201      	movs	r2, #1
   13340:	701a      	strb	r2, [r3, #0]
	
}
   13342:	46c0      	nop			; (mov r8, r8)
   13344:	46bd      	mov	sp, r7
   13346:	bd80      	pop	{r7, pc}
   13348:	00027cf4 	.word	0x00027cf4
   1334c:	00018fbd 	.word	0x00018fbd
   13350:	2000421c 	.word	0x2000421c

00013354 <DistanceSensorGetDistance>:
* @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
* @brief		Gets the distance from the distance sensor.
* @note			Returns 0 if successful. -1 if an error occurred
*****************************************************************************/
int32_t DistanceSensorGetDistance (uint16_t *distance, const TickType_t xMaxBlockTime)
{
   13354:	b570      	push	{r4, r5, r6, lr}
   13356:	0006      	movs	r6, r0
   13358:	000d      	movs	r5, r1
 * @note        
 *****************************************************************************/
static int32_t DistanceSensorGetMutex(TickType_t waitTime){
	
	int32_t error = ERROR_NONE;
	if(xSemaphoreTake( sensorDistanceMutexHandle, waitTime ) != pdTRUE)
   1335a:	4b1f      	ldr	r3, [pc, #124]	; (133d8 <DistanceSensorGetDistance+0x84>)
   1335c:	6818      	ldr	r0, [r3, #0]
   1335e:	2196      	movs	r1, #150	; 0x96
   13360:	0049      	lsls	r1, r1, #1
   13362:	4b1e      	ldr	r3, [pc, #120]	; (133dc <DistanceSensorGetDistance+0x88>)
   13364:	4798      	blx	r3
   13366:	2801      	cmp	r0, #1
   13368:	d12d      	bne.n	133c6 <DistanceSensorGetDistance+0x72>
distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   1336a:	491d      	ldr	r1, [pc, #116]	; (133e0 <DistanceSensorGetDistance+0x8c>)
   1336c:	2355      	movs	r3, #85	; 0x55
   1336e:	700b      	strb	r3, [r1, #0]
if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t*) &distTx, 1))
   13370:	2201      	movs	r2, #1
   13372:	481c      	ldr	r0, [pc, #112]	; (133e4 <DistanceSensorGetDistance+0x90>)
   13374:	4b1c      	ldr	r3, [pc, #112]	; (133e8 <DistanceSensorGetDistance+0x94>)
   13376:	4798      	blx	r3
error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   13378:	2400      	movs	r4, #0
if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t*) &distTx, 1))
   1337a:	2800      	cmp	r0, #0
   1337c:	d008      	beq.n	13390 <DistanceSensorGetDistance+0x3c>
	if( xSemaphoreGive( sensorDistanceMutexHandle ) != pdTRUE ){
   1337e:	4b16      	ldr	r3, [pc, #88]	; (133d8 <DistanceSensorGetDistance+0x84>)
   13380:	6818      	ldr	r0, [r3, #0]
   13382:	2300      	movs	r3, #0
   13384:	2200      	movs	r2, #0
   13386:	2100      	movs	r1, #0
   13388:	4d18      	ldr	r5, [pc, #96]	; (133ec <DistanceSensorGetDistance+0x98>)
   1338a:	47a8      	blx	r5
}
   1338c:	0020      	movs	r0, r4
   1338e:	bd70      	pop	{r4, r5, r6, pc}
if( xSemaphoreTake( sensorDistanceSemaphoreHandle, xMaxBlockTime ) == pdTRUE ){
   13390:	4b17      	ldr	r3, [pc, #92]	; (133f0 <DistanceSensorGetDistance+0x9c>)
   13392:	6818      	ldr	r0, [r3, #0]
   13394:	0029      	movs	r1, r5
   13396:	4b11      	ldr	r3, [pc, #68]	; (133dc <DistanceSensorGetDistance+0x88>)
   13398:	4798      	blx	r3
   1339a:	2801      	cmp	r0, #1
   1339c:	d116      	bne.n	133cc <DistanceSensorGetDistance+0x78>
usart_read_buffer_job(&usart_instance_dist, (uint8_t*) &latestRxDistance, 2);	//Kicks off constant reading of characters
   1339e:	2202      	movs	r2, #2
   133a0:	4914      	ldr	r1, [pc, #80]	; (133f4 <DistanceSensorGetDistance+0xa0>)
   133a2:	4810      	ldr	r0, [pc, #64]	; (133e4 <DistanceSensorGetDistance+0x90>)
   133a4:	4b14      	ldr	r3, [pc, #80]	; (133f8 <DistanceSensorGetDistance+0xa4>)
   133a6:	4798      	blx	r3
if( xSemaphoreTake( sensorDistanceSemaphoreHandle, xMaxBlockTime ) == pdTRUE ){
   133a8:	4b11      	ldr	r3, [pc, #68]	; (133f0 <DistanceSensorGetDistance+0x9c>)
   133aa:	6818      	ldr	r0, [r3, #0]
   133ac:	0029      	movs	r1, r5
   133ae:	4b0b      	ldr	r3, [pc, #44]	; (133dc <DistanceSensorGetDistance+0x88>)
   133b0:	4798      	blx	r3
   133b2:	2801      	cmp	r0, #1
   133b4:	d10d      	bne.n	133d2 <DistanceSensorGetDistance+0x7e>
	*distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   133b6:	490f      	ldr	r1, [pc, #60]	; (133f4 <DistanceSensorGetDistance+0xa0>)
   133b8:	780a      	ldrb	r2, [r1, #0]
   133ba:	0212      	lsls	r2, r2, #8
   133bc:	784b      	ldrb	r3, [r1, #1]
   133be:	189b      	adds	r3, r3, r2
   133c0:	8033      	strh	r3, [r6, #0]
error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   133c2:	2400      	movs	r4, #0
   133c4:	e7db      	b.n	1337e <DistanceSensorGetDistance+0x2a>
	{
		error = ERROR_NOT_READY;
   133c6:	241d      	movs	r4, #29
   133c8:	4264      	negs	r4, r4
   133ca:	e7d8      	b.n	1337e <DistanceSensorGetDistance+0x2a>
	error = ERR_TIMEOUT;
   133cc:	2403      	movs	r4, #3
   133ce:	4264      	negs	r4, r4
   133d0:	e7d5      	b.n	1337e <DistanceSensorGetDistance+0x2a>
	error = ERR_TIMEOUT;
   133d2:	2403      	movs	r4, #3
   133d4:	4264      	negs	r4, r4
   133d6:	e7d2      	b.n	1337e <DistanceSensorGetDistance+0x2a>
   133d8:	20004228 	.word	0x20004228
   133dc:	00017661 	.word	0x00017661
   133e0:	20004222 	.word	0x20004222
   133e4:	2000422c 	.word	0x2000422c
   133e8:	0001e9e1 	.word	0x0001e9e1
   133ec:	00016cb9 	.word	0x00016cb9
   133f0:	20004224 	.word	0x20004224
   133f4:	20004220 	.word	0x20004220
   133f8:	0001ea01 	.word	0x0001ea01

000133fc <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   133fc:	b510      	push	{r4, lr}
   133fe:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13400:	2400      	movs	r4, #0
   13402:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   13404:	4b07      	ldr	r3, [pc, #28]	; (13424 <I2cSensorsTxComplete+0x28>)
   13406:	6818      	ldr	r0, [r3, #0]
   13408:	a901      	add	r1, sp, #4
   1340a:	4b07      	ldr	r3, [pc, #28]	; (13428 <I2cSensorsTxComplete+0x2c>)
   1340c:	4798      	blx	r3
	sensorTransmitError = false;
   1340e:	4b07      	ldr	r3, [pc, #28]	; (1342c <I2cSensorsTxComplete+0x30>)
   13410:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   13412:	9b01      	ldr	r3, [sp, #4]
   13414:	2b00      	cmp	r3, #0
   13416:	d003      	beq.n	13420 <I2cSensorsTxComplete+0x24>
   13418:	2280      	movs	r2, #128	; 0x80
   1341a:	0552      	lsls	r2, r2, #21
   1341c:	4b04      	ldr	r3, [pc, #16]	; (13430 <I2cSensorsTxComplete+0x34>)
   1341e:	601a      	str	r2, [r3, #0]
}
   13420:	b002      	add	sp, #8
   13422:	bd10      	pop	{r4, pc}
   13424:	2000428c 	.word	0x2000428c
   13428:	00017345 	.word	0x00017345
   1342c:	2000044c 	.word	0x2000044c
   13430:	e000ed04 	.word	0xe000ed04

00013434 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   13434:	b510      	push	{r4, lr}
   13436:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13438:	2400      	movs	r4, #0
   1343a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   1343c:	4b07      	ldr	r3, [pc, #28]	; (1345c <I2cSensorsRxComplete+0x28>)
   1343e:	6818      	ldr	r0, [r3, #0]
   13440:	a901      	add	r1, sp, #4
   13442:	4b07      	ldr	r3, [pc, #28]	; (13460 <I2cSensorsRxComplete+0x2c>)
   13444:	4798      	blx	r3
	sensorTransmitError = false;
   13446:	4b07      	ldr	r3, [pc, #28]	; (13464 <I2cSensorsRxComplete+0x30>)
   13448:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   1344a:	9b01      	ldr	r3, [sp, #4]
   1344c:	2b00      	cmp	r3, #0
   1344e:	d003      	beq.n	13458 <I2cSensorsRxComplete+0x24>
   13450:	2280      	movs	r2, #128	; 0x80
   13452:	0552      	lsls	r2, r2, #21
   13454:	4b04      	ldr	r3, [pc, #16]	; (13468 <I2cSensorsRxComplete+0x34>)
   13456:	601a      	str	r2, [r3, #0]
}
   13458:	b002      	add	sp, #8
   1345a:	bd10      	pop	{r4, pc}
   1345c:	2000428c 	.word	0x2000428c
   13460:	00017345 	.word	0x00017345
   13464:	2000044c 	.word	0x2000044c
   13468:	e000ed04 	.word	0xe000ed04

0001346c <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   1346c:	b510      	push	{r4, lr}
   1346e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13470:	2400      	movs	r4, #0
   13472:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   13474:	4b07      	ldr	r3, [pc, #28]	; (13494 <I2cSensorsError+0x28>)
   13476:	6818      	ldr	r0, [r3, #0]
   13478:	a901      	add	r1, sp, #4
   1347a:	4b07      	ldr	r3, [pc, #28]	; (13498 <I2cSensorsError+0x2c>)
   1347c:	4798      	blx	r3
	sensorTransmitError = false;
   1347e:	4b07      	ldr	r3, [pc, #28]	; (1349c <I2cSensorsError+0x30>)
   13480:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   13482:	9b01      	ldr	r3, [sp, #4]
   13484:	2b00      	cmp	r3, #0
   13486:	d003      	beq.n	13490 <I2cSensorsError+0x24>
   13488:	2280      	movs	r2, #128	; 0x80
   1348a:	0552      	lsls	r2, r2, #21
   1348c:	4b04      	ldr	r3, [pc, #16]	; (134a0 <I2cSensorsError+0x34>)
   1348e:	601a      	str	r2, [r3, #0]
}
   13490:	b002      	add	sp, #8
   13492:	bd10      	pop	{r4, pc}
   13494:	2000428c 	.word	0x2000428c
   13498:	00017345 	.word	0x00017345
   1349c:	2000044c 	.word	0x2000044c
   134a0:	e000ed04 	.word	0xe000ed04

000134a4 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   134a4:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   134a6:	4c0c      	ldr	r4, [pc, #48]	; (134d8 <I2cDriverRegisterSensorBusCallbacks+0x34>)
   134a8:	2200      	movs	r2, #0
   134aa:	490c      	ldr	r1, [pc, #48]	; (134dc <I2cDriverRegisterSensorBusCallbacks+0x38>)
   134ac:	0020      	movs	r0, r4
   134ae:	4d0c      	ldr	r5, [pc, #48]	; (134e0 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
   134b0:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   134b2:	7e63      	ldrb	r3, [r4, #25]
   134b4:	2201      	movs	r2, #1
   134b6:	4313      	orrs	r3, r2
   134b8:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   134ba:	490a      	ldr	r1, [pc, #40]	; (134e4 <I2cDriverRegisterSensorBusCallbacks+0x40>)
   134bc:	0020      	movs	r0, r4
   134be:	47a8      	blx	r5
   134c0:	7e63      	ldrb	r3, [r4, #25]
   134c2:	2202      	movs	r2, #2
   134c4:	4313      	orrs	r3, r2
   134c6:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   134c8:	4907      	ldr	r1, [pc, #28]	; (134e8 <I2cDriverRegisterSensorBusCallbacks+0x44>)
   134ca:	0020      	movs	r0, r4
   134cc:	47a8      	blx	r5
   134ce:	7e63      	ldrb	r3, [r4, #25]
   134d0:	2204      	movs	r2, #4
   134d2:	4313      	orrs	r3, r2
   134d4:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
   134d6:	bd70      	pop	{r4, r5, r6, pc}
   134d8:	20004264 	.word	0x20004264
   134dc:	000133fd 	.word	0x000133fd
   134e0:	00012909 	.word	0x00012909
   134e4:	00013435 	.word	0x00013435
   134e8:	0001346d 	.word	0x0001346d

000134ec <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   134ec:	b570      	push	{r4, r5, r6, lr}
   134ee:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   134f0:	ab01      	add	r3, sp, #4
   134f2:	2264      	movs	r2, #100	; 0x64
   134f4:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   134f6:	4a33      	ldr	r2, [pc, #204]	; (135c4 <I2cInitializeDriver+0xd8>)
   134f8:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   134fa:	2200      	movs	r2, #0
   134fc:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   134fe:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13500:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13502:	2180      	movs	r1, #128	; 0x80
   13504:	0389      	lsls	r1, r1, #14
   13506:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
   13508:	2101      	movs	r1, #1
   1350a:	4249      	negs	r1, r1
   1350c:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
   1350e:	3125      	adds	r1, #37	; 0x25
   13510:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13512:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13514:	3108      	adds	r1, #8
   13516:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13518:	3101      	adds	r1, #1
   1351a:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
   1351c:	3101      	adds	r1, #1
   1351e:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13520:	32d7      	adds	r2, #215	; 0xd7
   13522:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13524:	4a28      	ldr	r2, [pc, #160]	; (135c8 <I2cInitializeDriver+0xdc>)
   13526:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13528:	4a28      	ldr	r2, [pc, #160]	; (135cc <I2cInitializeDriver+0xe0>)
   1352a:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
   1352c:	22fa      	movs	r2, #250	; 0xfa
   1352e:	0092      	lsls	r2, r2, #2
   13530:	82da      	strh	r2, [r3, #22]
   13532:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13534:	4d26      	ldr	r5, [pc, #152]	; (135d0 <I2cInitializeDriver+0xe4>)
   13536:	4e27      	ldr	r6, [pc, #156]	; (135d4 <I2cInitializeDriver+0xe8>)
   13538:	aa01      	add	r2, sp, #4
   1353a:	4927      	ldr	r1, [pc, #156]	; (135d8 <I2cInitializeDriver+0xec>)
   1353c:	0028      	movs	r0, r5
   1353e:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
   13540:	2800      	cmp	r0, #0
   13542:	d006      	beq.n	13552 <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
   13544:	4822      	ldr	r0, [pc, #136]	; (135d0 <I2cInitializeDriver+0xe4>)
   13546:	4b25      	ldr	r3, [pc, #148]	; (135dc <I2cInitializeDriver+0xf0>)
   13548:	4798      	blx	r3
   1354a:	3c01      	subs	r4, #1
   1354c:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   1354e:	2c00      	cmp	r4, #0
   13550:	d1f2      	bne.n	13538 <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13552:	4b1f      	ldr	r3, [pc, #124]	; (135d0 <I2cInitializeDriver+0xe4>)
   13554:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13556:	2207      	movs	r2, #7
   13558:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   1355a:	421a      	tst	r2, r3
   1355c:	d1fc      	bne.n	13558 <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1355e:	6823      	ldr	r3, [r4, #0]
   13560:	2202      	movs	r2, #2
   13562:	4313      	orrs	r3, r2
   13564:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13566:	4d1a      	ldr	r5, [pc, #104]	; (135d0 <I2cInitializeDriver+0xe4>)
   13568:	6828      	ldr	r0, [r5, #0]
   1356a:	4b1d      	ldr	r3, [pc, #116]	; (135e0 <I2cInitializeDriver+0xf4>)
   1356c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1356e:	231f      	movs	r3, #31
   13570:	4018      	ands	r0, r3
   13572:	3b1e      	subs	r3, #30
   13574:	4083      	lsls	r3, r0
   13576:	4a1b      	ldr	r2, [pc, #108]	; (135e4 <I2cInitializeDriver+0xf8>)
   13578:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   1357a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   1357c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1357e:	2110      	movs	r1, #16
   13580:	8b62      	ldrh	r2, [r4, #26]
   13582:	420a      	tst	r2, r1
   13584:	d104      	bne.n	13590 <I2cInitializeDriver+0xa4>
		timeout_counter++;
   13586:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13588:	4283      	cmp	r3, r0
   1358a:	d3f9      	bcc.n	13580 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1358c:	2310      	movs	r3, #16
   1358e:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
   13590:	4b15      	ldr	r3, [pc, #84]	; (135e8 <I2cInitializeDriver+0xfc>)
   13592:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13594:	2001      	movs	r0, #1
   13596:	4b15      	ldr	r3, [pc, #84]	; (135ec <I2cInitializeDriver+0x100>)
   13598:	4798      	blx	r3
   1359a:	4c15      	ldr	r4, [pc, #84]	; (135f0 <I2cInitializeDriver+0x104>)
   1359c:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   1359e:	2203      	movs	r2, #3
   135a0:	2100      	movs	r1, #0
   135a2:	2001      	movs	r0, #1
   135a4:	4b13      	ldr	r3, [pc, #76]	; (135f4 <I2cInitializeDriver+0x108>)
   135a6:	4798      	blx	r3
   135a8:	4b13      	ldr	r3, [pc, #76]	; (135f8 <I2cInitializeDriver+0x10c>)
   135aa:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   135ac:	6823      	ldr	r3, [r4, #0]
   135ae:	2b00      	cmp	r3, #0
   135b0:	d004      	beq.n	135bc <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
   135b2:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   135b4:	2800      	cmp	r0, #0
   135b6:	d102      	bne.n	135be <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   135b8:	3306      	adds	r3, #6
   135ba:	e000      	b.n	135be <I2cInitializeDriver+0xd2>
   135bc:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
   135be:	0018      	movs	r0, r3
   135c0:	b00e      	add	sp, #56	; 0x38
   135c2:	bd70      	pop	{r4, r5, r6, pc}
   135c4:	00000d48 	.word	0x00000d48
   135c8:	00080002 	.word	0x00080002
   135cc:	00090002 	.word	0x00090002
   135d0:	20004264 	.word	0x20004264
   135d4:	00014d21 	.word	0x00014d21
   135d8:	42000800 	.word	0x42000800
   135dc:	00015019 	.word	0x00015019
   135e0:	0001de75 	.word	0x0001de75
   135e4:	e000e100 	.word	0xe000e100
   135e8:	000134a5 	.word	0x000134a5
   135ec:	00016fe1 	.word	0x00016fe1
   135f0:	20004260 	.word	0x20004260
   135f4:	00016b7d 	.word	0x00016b7d
   135f8:	2000428c 	.word	0x2000428c

000135fc <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   135fc:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   135fe:	2800      	cmp	r0, #0
   13600:	d012      	beq.n	13628 <I2cWriteData+0x2c>
   13602:	6843      	ldr	r3, [r0, #4]
   13604:	2b00      	cmp	r3, #0
   13606:	d012      	beq.n	1362e <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   13608:	490a      	ldr	r1, [pc, #40]	; (13634 <I2cWriteData+0x38>)
   1360a:	7802      	ldrb	r2, [r0, #0]
   1360c:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   1360e:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
   13610:	89c3      	ldrh	r3, [r0, #14]
   13612:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13614:	4808      	ldr	r0, [pc, #32]	; (13638 <I2cWriteData+0x3c>)
   13616:	4b09      	ldr	r3, [pc, #36]	; (1363c <I2cWriteData+0x40>)
   13618:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   1361a:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   1361c:	2800      	cmp	r0, #0
   1361e:	d101      	bne.n	13624 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
   13620:	0018      	movs	r0, r3
   13622:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   13624:	3b06      	subs	r3, #6
   13626:	e7fb      	b.n	13620 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
   13628:	2308      	movs	r3, #8
   1362a:	425b      	negs	r3, r3
   1362c:	e7f8      	b.n	13620 <I2cWriteData+0x24>
   1362e:	2308      	movs	r3, #8
   13630:	425b      	negs	r3, r3
   13632:	e7f5      	b.n	13620 <I2cWriteData+0x24>
   13634:	20004290 	.word	0x20004290
   13638:	20004264 	.word	0x20004264
   1363c:	00012945 	.word	0x00012945

00013640 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   13640:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   13642:	2800      	cmp	r0, #0
   13644:	d013      	beq.n	1366e <I2cReadData+0x2e>
   13646:	6843      	ldr	r3, [r0, #4]
   13648:	2b00      	cmp	r3, #0
   1364a:	d013      	beq.n	13674 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   1364c:	490b      	ldr	r1, [pc, #44]	; (1367c <I2cReadData+0x3c>)
   1364e:	7803      	ldrb	r3, [r0, #0]
   13650:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
   13652:	6883      	ldr	r3, [r0, #8]
   13654:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
   13656:	8983      	ldrh	r3, [r0, #12]
   13658:	804b      	strh	r3, [r1, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1365a:	4809      	ldr	r0, [pc, #36]	; (13680 <I2cReadData+0x40>)
   1365c:	4b09      	ldr	r3, [pc, #36]	; (13684 <I2cReadData+0x44>)
   1365e:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   13660:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   13662:	2800      	cmp	r0, #0
   13664:	d101      	bne.n	1366a <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
   13666:	0018      	movs	r0, r3
   13668:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   1366a:	3b06      	subs	r3, #6
   1366c:	e7fb      	b.n	13666 <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
   1366e:	2308      	movs	r3, #8
   13670:	425b      	negs	r3, r3
   13672:	e7f8      	b.n	13666 <I2cReadData+0x26>
   13674:	2308      	movs	r3, #8
   13676:	425b      	negs	r3, r3
   13678:	e7f5      	b.n	13666 <I2cReadData+0x26>
   1367a:	46c0      	nop			; (mov r8, r8)
   1367c:	20004290 	.word	0x20004290
   13680:	20004264 	.word	0x20004264
   13684:	00012921 	.word	0x00012921

00013688 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   13688:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   1368a:	4b07      	ldr	r3, [pc, #28]	; (136a8 <I2cFreeMutex+0x20>)
   1368c:	6818      	ldr	r0, [r3, #0]
   1368e:	2300      	movs	r3, #0
   13690:	2200      	movs	r2, #0
   13692:	2100      	movs	r1, #0
   13694:	4c05      	ldr	r4, [pc, #20]	; (136ac <I2cFreeMutex+0x24>)
   13696:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
   13698:	2300      	movs	r3, #0
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   1369a:	2801      	cmp	r0, #1
   1369c:	d101      	bne.n	136a2 <I2cFreeMutex+0x1a>
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
	}
	return error;
}
   1369e:	0018      	movs	r0, r3
   136a0:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
   136a2:	3b14      	subs	r3, #20
   136a4:	e7fb      	b.n	1369e <I2cFreeMutex+0x16>
   136a6:	46c0      	nop			; (mov r8, r8)
   136a8:	20004260 	.word	0x20004260
   136ac:	00016cb9 	.word	0x00016cb9

000136b0 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   136b0:	b510      	push	{r4, lr}
   136b2:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   136b4:	4b05      	ldr	r3, [pc, #20]	; (136cc <I2cGetMutex+0x1c>)
   136b6:	6818      	ldr	r0, [r3, #0]
   136b8:	4b05      	ldr	r3, [pc, #20]	; (136d0 <I2cGetMutex+0x20>)
   136ba:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   136bc:	2300      	movs	r3, #0
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   136be:	2801      	cmp	r0, #1
   136c0:	d101      	bne.n	136c6 <I2cGetMutex+0x16>
	{
		error = ERROR_NOT_READY;
	}
	return error;
}
   136c2:	0018      	movs	r0, r3
   136c4:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
   136c6:	3b1d      	subs	r3, #29
   136c8:	e7fb      	b.n	136c2 <I2cGetMutex+0x12>
   136ca:	46c0      	nop			; (mov r8, r8)
   136cc:	20004260 	.word	0x20004260
   136d0:	00017661 	.word	0x00017661

000136d4 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   136d4:	b570      	push	{r4, r5, r6, lr}
   136d6:	0004      	movs	r4, r0
   136d8:	000d      	movs	r5, r1
int32_t error = ERROR_NONE;
SemaphoreHandle_t semHandle = NULL;


//---0. Get Mutex
error = I2cGetMutex(WAIT_I2C_LINE_MS);
   136da:	2096      	movs	r0, #150	; 0x96
   136dc:	0040      	lsls	r0, r0, #1
   136de:	4b10      	ldr	r3, [pc, #64]	; (13720 <I2cWriteDataWait+0x4c>)
   136e0:	4798      	blx	r3
if(ERROR_NONE != error) goto exit;
   136e2:	2800      	cmp	r0, #0
   136e4:	d000      	beq.n	136e8 <I2cWriteDataWait+0x14>
exitError0:
error = I2cFreeMutex();
//xSemaphoreGive(semHandle);
return error;

}
   136e6:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
   136e8:	4b0e      	ldr	r3, [pc, #56]	; (13724 <I2cWriteDataWait+0x50>)
   136ea:	681e      	ldr	r6, [r3, #0]
error = I2cWriteData(data);
   136ec:	0020      	movs	r0, r4
   136ee:	4b0e      	ldr	r3, [pc, #56]	; (13728 <I2cWriteDataWait+0x54>)
   136f0:	4798      	blx	r3
if (ERROR_NONE != error){
   136f2:	2800      	cmp	r0, #0
   136f4:	d105      	bne.n	13702 <I2cWriteDataWait+0x2e>
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   136f6:	0029      	movs	r1, r5
   136f8:	0030      	movs	r0, r6
   136fa:	4b0c      	ldr	r3, [pc, #48]	; (1372c <I2cWriteDataWait+0x58>)
   136fc:	4798      	blx	r3
   136fe:	2801      	cmp	r0, #1
   13700:	d002      	beq.n	13708 <I2cWriteDataWait+0x34>
error = I2cFreeMutex();
   13702:	4b0b      	ldr	r3, [pc, #44]	; (13730 <I2cWriteDataWait+0x5c>)
   13704:	4798      	blx	r3
return error;
   13706:	e7ee      	b.n	136e6 <I2cWriteDataWait+0x12>
	 return sensorTransmitError;
   13708:	4b0a      	ldr	r3, [pc, #40]	; (13734 <I2cWriteDataWait+0x60>)
	if(I2cGetTaskErrorStatus()){
   1370a:	781b      	ldrb	r3, [r3, #0]
   1370c:	2b00      	cmp	r3, #0
   1370e:	d003      	beq.n	13718 <I2cWriteDataWait+0x44>
	sensorTransmitError = value;
   13710:	2200      	movs	r2, #0
   13712:	4b08      	ldr	r3, [pc, #32]	; (13734 <I2cWriteDataWait+0x60>)
   13714:	701a      	strb	r2, [r3, #0]
   13716:	e7f4      	b.n	13702 <I2cWriteDataWait+0x2e>
error |= I2cFreeMutex();
   13718:	4b05      	ldr	r3, [pc, #20]	; (13730 <I2cWriteDataWait+0x5c>)
   1371a:	4798      	blx	r3
   1371c:	e7e3      	b.n	136e6 <I2cWriteDataWait+0x12>
   1371e:	46c0      	nop			; (mov r8, r8)
   13720:	000136b1 	.word	0x000136b1
   13724:	2000428c 	.word	0x2000428c
   13728:	000135fd 	.word	0x000135fd
   1372c:	00017661 	.word	0x00017661
   13730:	00013689 	.word	0x00013689
   13734:	2000044c 	.word	0x2000044c

00013738 <I2cReadDataWait>:
 * @param[in]   delay Delay that the I2C device needs to return the response. Can be 0 if the response is ready instantly. It can be the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   13738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1373a:	0004      	movs	r4, r0
   1373c:	000e      	movs	r6, r1
   1373e:	0015      	movs	r5, r2
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	

	//---0. Get Mutex
	error = I2cGetMutex( WAIT_I2C_LINE_MS);
   13740:	2096      	movs	r0, #150	; 0x96
   13742:	0040      	lsls	r0, r0, #1
   13744:	4b1a      	ldr	r3, [pc, #104]	; (137b0 <I2cReadDataWait+0x78>)
   13746:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
   13748:	2800      	cmp	r0, #0
   1374a:	d000      	beq.n	1374e <I2cReadDataWait+0x16>
	error = I2cFreeMutex();
	//xSemaphoreGive(semHandle);
	return error;

	
}
   1374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
   1374e:	4b19      	ldr	r3, [pc, #100]	; (137b4 <I2cReadDataWait+0x7c>)
   13750:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
   13752:	0020      	movs	r0, r4
   13754:	4b18      	ldr	r3, [pc, #96]	; (137b8 <I2cReadDataWait+0x80>)
   13756:	4798      	blx	r3
	if (ERROR_NONE != error){
   13758:	2800      	cmp	r0, #0
   1375a:	d105      	bne.n	13768 <I2cReadDataWait+0x30>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1375c:	0029      	movs	r1, r5
   1375e:	0038      	movs	r0, r7
   13760:	4b16      	ldr	r3, [pc, #88]	; (137bc <I2cReadDataWait+0x84>)
   13762:	4798      	blx	r3
   13764:	2801      	cmp	r0, #1
   13766:	d002      	beq.n	1376e <I2cReadDataWait+0x36>
	error = I2cFreeMutex();
   13768:	4b15      	ldr	r3, [pc, #84]	; (137c0 <I2cReadDataWait+0x88>)
   1376a:	4798      	blx	r3
	return error;
   1376c:	e7ee      	b.n	1374c <I2cReadDataWait+0x14>
	 return sensorTransmitError;
   1376e:	4b15      	ldr	r3, [pc, #84]	; (137c4 <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
   13770:	781b      	ldrb	r3, [r3, #0]
   13772:	2b00      	cmp	r3, #0
   13774:	d003      	beq.n	1377e <I2cReadDataWait+0x46>
	sensorTransmitError = value;
   13776:	2200      	movs	r2, #0
   13778:	4b12      	ldr	r3, [pc, #72]	; (137c4 <I2cReadDataWait+0x8c>)
   1377a:	701a      	strb	r2, [r3, #0]
   1377c:	e7f4      	b.n	13768 <I2cReadDataWait+0x30>
		vTaskDelay( delay );
   1377e:	0030      	movs	r0, r6
   13780:	4b11      	ldr	r3, [pc, #68]	; (137c8 <I2cReadDataWait+0x90>)
   13782:	4798      	blx	r3
	error = I2cReadData(data);
   13784:	0020      	movs	r0, r4
   13786:	4b11      	ldr	r3, [pc, #68]	; (137cc <I2cReadDataWait+0x94>)
   13788:	4798      	blx	r3
	if (ERROR_NONE != error){
   1378a:	2800      	cmp	r0, #0
   1378c:	d1ec      	bne.n	13768 <I2cReadDataWait+0x30>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1378e:	0029      	movs	r1, r5
   13790:	0038      	movs	r0, r7
   13792:	4b0a      	ldr	r3, [pc, #40]	; (137bc <I2cReadDataWait+0x84>)
   13794:	4798      	blx	r3
   13796:	2801      	cmp	r0, #1
   13798:	d1e6      	bne.n	13768 <I2cReadDataWait+0x30>
	 return sensorTransmitError;
   1379a:	4b0a      	ldr	r3, [pc, #40]	; (137c4 <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
   1379c:	781b      	ldrb	r3, [r3, #0]
   1379e:	2b00      	cmp	r3, #0
   137a0:	d003      	beq.n	137aa <I2cReadDataWait+0x72>
	sensorTransmitError = value;
   137a2:	2200      	movs	r2, #0
   137a4:	4b07      	ldr	r3, [pc, #28]	; (137c4 <I2cReadDataWait+0x8c>)
   137a6:	701a      	strb	r2, [r3, #0]
   137a8:	e7de      	b.n	13768 <I2cReadDataWait+0x30>
	error = I2cFreeMutex();
   137aa:	4b05      	ldr	r3, [pc, #20]	; (137c0 <I2cReadDataWait+0x88>)
   137ac:	4798      	blx	r3
   137ae:	e7cd      	b.n	1374c <I2cReadDataWait+0x14>
   137b0:	000136b1 	.word	0x000136b1
   137b4:	2000428c 	.word	0x2000428c
   137b8:	000135fd 	.word	0x000135fd
   137bc:	00017661 	.word	0x00017661
   137c0:	00013689 	.word	0x00013689
   137c4:	2000044c 	.word	0x2000044c
   137c8:	00018145 	.word	0x00018145
   137cc:	00013641 	.word	0x00013641

000137d0 <platform_read>:
return I2cWriteDataWait(&imuData, 100);

}

static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   137d0:	b510      	push	{r4, lr}
   137d2:	b082      	sub	sp, #8
   137d4:	4668      	mov	r0, sp
   137d6:	1dc4      	adds	r4, r0, #7
   137d8:	71c1      	strb	r1, [r0, #7]

imuData.address = (LSM6DS3_I2C_ADD_L>>1);
   137da:	4807      	ldr	r0, [pc, #28]	; (137f8 <platform_read+0x28>)
   137dc:	216a      	movs	r1, #106	; 0x6a
   137de:	7001      	strb	r1, [r0, #0]
imuData.msgOut = &reg;
   137e0:	6044      	str	r4, [r0, #4]
imuData.msgIn = bufp;
   137e2:	6082      	str	r2, [r0, #8]
imuData.lenOut = 1;
   137e4:	2201      	movs	r2, #1
   137e6:	81c2      	strh	r2, [r0, #14]
imuData.lenIn = len;
   137e8:	8183      	strh	r3, [r0, #12]
return I2cReadDataWait(&imuData,0, 100);
   137ea:	3263      	adds	r2, #99	; 0x63
   137ec:	2100      	movs	r1, #0
   137ee:	4b03      	ldr	r3, [pc, #12]	; (137fc <platform_read+0x2c>)
   137f0:	4798      	blx	r3


}
   137f2:	b002      	add	sp, #8
   137f4:	bd10      	pop	{r4, pc}
   137f6:	46c0      	nop			; (mov r8, r8)
   137f8:	200042dc 	.word	0x200042dc
   137fc:	00013739 	.word	0x00013739

00013800 <platform_write>:
{
   13800:	b570      	push	{r4, r5, r6, lr}
   13802:	000e      	movs	r6, r1
   13804:	0011      	movs	r1, r2
   13806:	001d      	movs	r5, r3
memcpy(&msgOutImu[1],bufp,len);
   13808:	4c09      	ldr	r4, [pc, #36]	; (13830 <platform_write+0x30>)
   1380a:	001a      	movs	r2, r3
   1380c:	0020      	movs	r0, r4
   1380e:	4b09      	ldr	r3, [pc, #36]	; (13834 <platform_write+0x34>)
   13810:	4798      	blx	r3
msgOutImu[0] = reg;
   13812:	3c01      	subs	r4, #1
   13814:	7026      	strb	r6, [r4, #0]
imuData.address = (LSM6DS3_I2C_ADD_L>>1);
   13816:	4808      	ldr	r0, [pc, #32]	; (13838 <platform_write+0x38>)
   13818:	236a      	movs	r3, #106	; 0x6a
   1381a:	7003      	strb	r3, [r0, #0]
imuData.msgOut = &msgOutImu;
   1381c:	6044      	str	r4, [r0, #4]
imuData.lenOut = len+1; //+1 because we are adding the REG address.
   1381e:	3501      	adds	r5, #1
   13820:	81c5      	strh	r5, [r0, #14]
imuData.lenIn = 0;
   13822:	2300      	movs	r3, #0
   13824:	8183      	strh	r3, [r0, #12]
return I2cWriteDataWait(&imuData, 100);
   13826:	2164      	movs	r1, #100	; 0x64
   13828:	4b04      	ldr	r3, [pc, #16]	; (1383c <platform_write+0x3c>)
   1382a:	4798      	blx	r3
}
   1382c:	bd70      	pop	{r4, r5, r6, pc}
   1382e:	46c0      	nop			; (mov r8, r8)
   13830:	2000429d 	.word	0x2000429d
   13834:	0002626d 	.word	0x0002626d
   13838:	200042dc 	.word	0x200042dc
   1383c:	000136d5 	.word	0x000136d5

00013840 <lsm6ds3_read_reg>:
{
   13840:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   13842:	6885      	ldr	r5, [r0, #8]
   13844:	6844      	ldr	r4, [r0, #4]
   13846:	0028      	movs	r0, r5
   13848:	47a0      	blx	r4
}
   1384a:	bd70      	pop	{r4, r5, r6, pc}

0001384c <lsm6ds3_from_fs2g_to_mg>:
{
   1384c:	b510      	push	{r4, lr}
  return ((float_t)lsb * 61.0f / 1000.0f);
   1384e:	4b04      	ldr	r3, [pc, #16]	; (13860 <lsm6ds3_from_fs2g_to_mg+0x14>)
   13850:	4798      	blx	r3
   13852:	4904      	ldr	r1, [pc, #16]	; (13864 <lsm6ds3_from_fs2g_to_mg+0x18>)
   13854:	4b04      	ldr	r3, [pc, #16]	; (13868 <lsm6ds3_from_fs2g_to_mg+0x1c>)
   13856:	4798      	blx	r3
   13858:	4904      	ldr	r1, [pc, #16]	; (1386c <lsm6ds3_from_fs2g_to_mg+0x20>)
   1385a:	4b05      	ldr	r3, [pc, #20]	; (13870 <lsm6ds3_from_fs2g_to_mg+0x24>)
   1385c:	4798      	blx	r3
}
   1385e:	bd10      	pop	{r4, pc}
   13860:	00024889 	.word	0x00024889
   13864:	42740000 	.word	0x42740000
   13868:	00024609 	.word	0x00024609
   1386c:	447a0000 	.word	0x447a0000
   13870:	00024379 	.word	0x00024379

00013874 <lsm6ds3_xl_flag_data_ready_get>:
{
   13874:	b570      	push	{r4, r5, r6, lr}
   13876:	b082      	sub	sp, #8
   13878:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
   1387a:	ac01      	add	r4, sp, #4
   1387c:	2301      	movs	r3, #1
   1387e:	0022      	movs	r2, r4
   13880:	211e      	movs	r1, #30
   13882:	4e04      	ldr	r6, [pc, #16]	; (13894 <lsm6ds3_xl_flag_data_ready_get+0x20>)
   13884:	47b0      	blx	r6
  *val = (uint8_t)status_reg.xlda;
   13886:	7823      	ldrb	r3, [r4, #0]
   13888:	07db      	lsls	r3, r3, #31
   1388a:	0fdb      	lsrs	r3, r3, #31
   1388c:	702b      	strb	r3, [r5, #0]
}
   1388e:	b002      	add	sp, #8
   13890:	bd70      	pop	{r4, r5, r6, pc}
   13892:	46c0      	nop			; (mov r8, r8)
   13894:	00013841 	.word	0x00013841

00013898 <lsm6ds3_acceleration_raw_get>:
{
   13898:	b510      	push	{r4, lr}
   1389a:	000a      	movs	r2, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
   1389c:	2306      	movs	r3, #6
   1389e:	2128      	movs	r1, #40	; 0x28
   138a0:	4c01      	ldr	r4, [pc, #4]	; (138a8 <lsm6ds3_acceleration_raw_get+0x10>)
   138a2:	47a0      	blx	r4
}
   138a4:	bd10      	pop	{r4, pc}
   138a6:	46c0      	nop			; (mov r8, r8)
   138a8:	00013841 	.word	0x00013841

000138ac <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
   138ac:	4800      	ldr	r0, [pc, #0]	; (138b0 <GetImuStruct+0x4>)
   138ae:	4770      	bx	lr
   138b0:	20000014 	.word	0x20000014

000138b4 <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
   138b4:	b500      	push	{lr}
   138b6:	b083      	sub	sp, #12
	uint8_t count = 0;
   138b8:	466b      	mov	r3, sp
   138ba:	2200      	movs	r2, #0
   138bc:	71da      	strb	r2, [r3, #7]
   138be:	3307      	adds	r3, #7
	seesawData.address = NEO_TRELLIS_ADDR;
   138c0:	480b      	ldr	r0, [pc, #44]	; (138f0 <SeesawGetKeypadCount+0x3c>)
   138c2:	322e      	adds	r2, #46	; 0x2e
   138c4:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &msgKeypadGetCount;
   138c6:	4a0b      	ldr	r2, [pc, #44]	; (138f4 <SeesawGetKeypadCount+0x40>)
   138c8:	6042      	str	r2, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
   138ca:	2202      	movs	r2, #2
   138cc:	81c2      	strh	r2, [r0, #14]
	seesawData.msgIn = &count;
   138ce:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   138d0:	2301      	movs	r3, #1
   138d2:	8183      	strh	r3, [r0, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   138d4:	3262      	adds	r2, #98	; 0x62
   138d6:	2100      	movs	r1, #0
   138d8:	4b07      	ldr	r3, [pc, #28]	; (138f8 <SeesawGetKeypadCount+0x44>)
   138da:	4798      	blx	r3

	if(ERROR_NONE != error)
   138dc:	2800      	cmp	r0, #0
   138de:	d103      	bne.n	138e8 <SeesawGetKeypadCount+0x34>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return count;
   138e0:	466b      	mov	r3, sp
   138e2:	79d8      	ldrb	r0, [r3, #7]
}
   138e4:	b003      	add	sp, #12
   138e6:	bd00      	pop	{pc}
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   138e8:	4804      	ldr	r0, [pc, #16]	; (138fc <SeesawGetKeypadCount+0x48>)
   138ea:	4b05      	ldr	r3, [pc, #20]	; (13900 <SeesawGetKeypadCount+0x4c>)
   138ec:	4798      	blx	r3
   138ee:	e7f7      	b.n	138e0 <SeesawGetKeypadCount+0x2c>
   138f0:	200042ec 	.word	0x200042ec
   138f4:	00027e30 	.word	0x00027e30
   138f8:	00013739 	.word	0x00013739
   138fc:	00027e04 	.word	0x00027e04
   13900:	00018fbd 	.word	0x00018fbd

00013904 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
   13904:	b510      	push	{r4, lr}
   13906:	b082      	sub	sp, #8
	if (count == 0) return ERROR_NONE;
   13908:	2300      	movs	r3, #0
   1390a:	2900      	cmp	r1, #0
   1390c:	d102      	bne.n	13914 <SeesawReadKeypad+0x10>
	if(ERROR_NONE != error)
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return error;
}
   1390e:	0018      	movs	r0, r3
   13910:	b002      	add	sp, #8
   13912:	bd10      	pop	{r4, pc}
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   13914:	aa01      	add	r2, sp, #4
   13916:	4b0c      	ldr	r3, [pc, #48]	; (13948 <SeesawReadKeypad+0x44>)
   13918:	881b      	ldrh	r3, [r3, #0]
   1391a:	8013      	strh	r3, [r2, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   1391c:	4b0b      	ldr	r3, [pc, #44]	; (1394c <SeesawReadKeypad+0x48>)
   1391e:	242e      	movs	r4, #46	; 0x2e
   13920:	701c      	strb	r4, [r3, #0]
	seesawData.msgOut = &cmd;
   13922:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   13924:	2202      	movs	r2, #2
   13926:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
   13928:	6098      	str	r0, [r3, #8]
	seesawData.lenIn = count;
   1392a:	8199      	strh	r1, [r3, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   1392c:	3262      	adds	r2, #98	; 0x62
   1392e:	2100      	movs	r1, #0
   13930:	0018      	movs	r0, r3
   13932:	4b07      	ldr	r3, [pc, #28]	; (13950 <SeesawReadKeypad+0x4c>)
   13934:	4798      	blx	r3
   13936:	0004      	movs	r4, r0
	return error;
   13938:	1e03      	subs	r3, r0, #0
	if(ERROR_NONE != error)
   1393a:	d0e8      	beq.n	1390e <SeesawReadKeypad+0xa>
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   1393c:	4805      	ldr	r0, [pc, #20]	; (13954 <SeesawReadKeypad+0x50>)
   1393e:	4b06      	ldr	r3, [pc, #24]	; (13958 <SeesawReadKeypad+0x54>)
   13940:	4798      	blx	r3
	return error;
   13942:	0023      	movs	r3, r4
   13944:	e7e3      	b.n	1390e <SeesawReadKeypad+0xa>
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	00027d18 	.word	0x00027d18
   1394c:	200042ec 	.word	0x200042ec
   13950:	00013739 	.word	0x00013739
   13954:	00027e04 	.word	0x00027e04
   13958:	00018fbd 	.word	0x00018fbd

0001395c <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
   1395c:	b510      	push	{r4, lr}
   1395e:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
   13960:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
   13962:	0023      	movs	r3, r4
   13964:	408b      	lsls	r3, r1
   13966:	210f      	movs	r1, #15
   13968:	4019      	ands	r1, r3
   1396a:	0049      	lsls	r1, r1, #1
   1396c:	2301      	movs	r3, #1
   1396e:	401a      	ands	r2, r3
   13970:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   13972:	ab01      	add	r3, sp, #4
   13974:	2110      	movs	r1, #16
   13976:	7019      	strb	r1, [r3, #0]
   13978:	705c      	strb	r4, [r3, #1]
   1397a:	7098      	strb	r0, [r3, #2]
   1397c:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
   1397e:	4806      	ldr	r0, [pc, #24]	; (13998 <SeesawActivateKey+0x3c>)
   13980:	222e      	movs	r2, #46	; 0x2e
   13982:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
   13984:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
   13986:	2304      	movs	r3, #4
   13988:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   1398a:	2300      	movs	r3, #0
   1398c:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   1398e:	3154      	adds	r1, #84	; 0x54
   13990:	4b02      	ldr	r3, [pc, #8]	; (1399c <SeesawActivateKey+0x40>)
   13992:	4798      	blx	r3
	return error;
}
   13994:	b002      	add	sp, #8
   13996:	bd10      	pop	{r4, pc}
   13998:	200042ec 	.word	0x200042ec
   1399c:	000136d5 	.word	0x000136d5

000139a0 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   139a0:	b530      	push	{r4, r5, lr}
   139a2:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green,red, blue};
   139a4:	240e      	movs	r4, #14
   139a6:	466d      	mov	r5, sp
   139a8:	702c      	strb	r4, [r5, #0]
   139aa:	3c0a      	subs	r4, #10
   139ac:	706c      	strb	r4, [r5, #1]
   139ae:	712a      	strb	r2, [r5, #4]
   139b0:	7169      	strb	r1, [r5, #5]
   139b2:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
   139b4:	0043      	lsls	r3, r0, #1
   139b6:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
   139b8:	0a03      	lsrs	r3, r0, #8
   139ba:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
   139bc:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
   139be:	4804      	ldr	r0, [pc, #16]	; (139d0 <SeesawSetLed+0x30>)
   139c0:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   139c2:	2307      	movs	r3, #7
   139c4:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   139c6:	2164      	movs	r1, #100	; 0x64
   139c8:	4b02      	ldr	r3, [pc, #8]	; (139d4 <SeesawSetLed+0x34>)
   139ca:	4798      	blx	r3
	return error;

}
   139cc:	b003      	add	sp, #12
   139ce:	bd30      	pop	{r4, r5, pc}
   139d0:	200042ec 	.word	0x200042ec
   139d4:	000136d5 	.word	0x000136d5

000139d8 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   139d8:	b500      	push	{lr}
   139da:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   139dc:	ab01      	add	r3, sp, #4
   139de:	4a06      	ldr	r2, [pc, #24]	; (139f8 <SeesawOrderLedUpdate+0x20>)
   139e0:	8892      	ldrh	r2, [r2, #4]
   139e2:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   139e4:	4805      	ldr	r0, [pc, #20]	; (139fc <SeesawOrderLedUpdate+0x24>)
   139e6:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   139e8:	2302      	movs	r3, #2
   139ea:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   139ec:	2164      	movs	r1, #100	; 0x64
   139ee:	4b04      	ldr	r3, [pc, #16]	; (13a00 <SeesawOrderLedUpdate+0x28>)
   139f0:	4798      	blx	r3
	return error;
}
   139f2:	b003      	add	sp, #12
   139f4:	bd00      	pop	{pc}
   139f6:	46c0      	nop			; (mov r8, r8)
   139f8:	00027d18 	.word	0x00027d18
   139fc:	200042ec 	.word	0x200042ec
   13a00:	000136d5 	.word	0x000136d5

00013a04 <InitializeSeesaw>:
{
   13a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a06:	46ce      	mov	lr, r9
   13a08:	b500      	push	{lr}
   13a0a:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
   13a0c:	484b      	ldr	r0, [pc, #300]	; (13b3c <InitializeSeesaw+0x138>)
   13a0e:	232e      	movs	r3, #46	; 0x2e
   13a10:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
   13a12:	4b4b      	ldr	r3, [pc, #300]	; (13b40 <InitializeSeesaw+0x13c>)
   13a14:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
   13a16:	2302      	movs	r3, #2
   13a18:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
   13a1a:	ab03      	add	r3, sp, #12
   13a1c:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   13a1e:	2301      	movs	r3, #1
   13a20:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   13a22:	2264      	movs	r2, #100	; 0x64
   13a24:	2100      	movs	r1, #0
   13a26:	4b47      	ldr	r3, [pc, #284]	; (13b44 <InitializeSeesaw+0x140>)
   13a28:	4798      	blx	r3
	if(ERROR_NONE != error)
   13a2a:	2800      	cmp	r0, #0
   13a2c:	d149      	bne.n	13ac2 <InitializeSeesaw+0xbe>
		if(readData[0] != SEESAW_HW_ID_CODE )
   13a2e:	ab03      	add	r3, sp, #12
   13a30:	781b      	ldrb	r3, [r3, #0]
   13a32:	2b55      	cmp	r3, #85	; 0x55
   13a34:	d049      	beq.n	13aca <InitializeSeesaw+0xc6>
			SerialConsoleWriteString("Error/r/n");
   13a36:	4844      	ldr	r0, [pc, #272]	; (13b48 <InitializeSeesaw+0x144>)
   13a38:	4b44      	ldr	r3, [pc, #272]	; (13b4c <InitializeSeesaw+0x148>)
   13a3a:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
   13a3c:	483f      	ldr	r0, [pc, #252]	; (13b3c <InitializeSeesaw+0x138>)
   13a3e:	4b44      	ldr	r3, [pc, #272]	; (13b50 <InitializeSeesaw+0x14c>)
   13a40:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
   13a42:	2303      	movs	r3, #3
   13a44:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13a46:	2164      	movs	r1, #100	; 0x64
   13a48:	4b42      	ldr	r3, [pc, #264]	; (13b54 <InitializeSeesaw+0x150>)
   13a4a:	4798      	blx	r3
	if(ERROR_NONE != error)
   13a4c:	2800      	cmp	r0, #0
   13a4e:	d140      	bne.n	13ad2 <InitializeSeesaw+0xce>
	seesawData.msgOut = &msgNeopixelSpeed;
   13a50:	483a      	ldr	r0, [pc, #232]	; (13b3c <InitializeSeesaw+0x138>)
   13a52:	4b41      	ldr	r3, [pc, #260]	; (13b58 <InitializeSeesaw+0x154>)
   13a54:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
   13a56:	2303      	movs	r3, #3
   13a58:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13a5a:	2164      	movs	r1, #100	; 0x64
   13a5c:	4b3d      	ldr	r3, [pc, #244]	; (13b54 <InitializeSeesaw+0x150>)
   13a5e:	4798      	blx	r3
	if(ERROR_NONE != error)
   13a60:	2800      	cmp	r0, #0
   13a62:	d13a      	bne.n	13ada <InitializeSeesaw+0xd6>
	seesawData.msgOut = &msgNeopixelBufLength;
   13a64:	4835      	ldr	r0, [pc, #212]	; (13b3c <InitializeSeesaw+0x138>)
   13a66:	4b3d      	ldr	r3, [pc, #244]	; (13b5c <InitializeSeesaw+0x158>)
   13a68:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
   13a6a:	2304      	movs	r3, #4
   13a6c:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13a6e:	2164      	movs	r1, #100	; 0x64
   13a70:	4b38      	ldr	r3, [pc, #224]	; (13b54 <InitializeSeesaw+0x150>)
   13a72:	4798      	blx	r3
   13a74:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
   13a76:	2800      	cmp	r0, #0
   13a78:	d133      	bne.n	13ae2 <InitializeSeesaw+0xde>
}


static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
   13a7a:	23ff      	movs	r3, #255	; 0xff
   13a7c:	22ff      	movs	r2, #255	; 0xff
   13a7e:	21ff      	movs	r1, #255	; 0xff
   13a80:	200f      	movs	r0, #15
   13a82:	4e37      	ldr	r6, [pc, #220]	; (13b60 <InitializeSeesaw+0x15c>)
   13a84:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   13a86:	4c37      	ldr	r4, [pc, #220]	; (13b64 <InitializeSeesaw+0x160>)
   13a88:	47a0      	blx	r4
	vTaskDelay(400);
   13a8a:	20c8      	movs	r0, #200	; 0xc8
   13a8c:	0040      	lsls	r0, r0, #1
   13a8e:	4b36      	ldr	r3, [pc, #216]	; (13b68 <InitializeSeesaw+0x164>)
   13a90:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
   13a92:	2300      	movs	r3, #0
   13a94:	2200      	movs	r2, #0
   13a96:	2100      	movs	r1, #0
   13a98:	200f      	movs	r0, #15
   13a9a:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   13a9c:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
   13a9e:	4827      	ldr	r0, [pc, #156]	; (13b3c <InitializeSeesaw+0x138>)
   13aa0:	232e      	movs	r3, #46	; 0x2e
   13aa2:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
   13aa4:	4b31      	ldr	r3, [pc, #196]	; (13b6c <InitializeSeesaw+0x168>)
   13aa6:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
   13aa8:	2303      	movs	r3, #3
   13aaa:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   13aac:	2300      	movs	r3, #0
   13aae:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   13ab0:	2164      	movs	r1, #100	; 0x64
   13ab2:	4b28      	ldr	r3, [pc, #160]	; (13b54 <InitializeSeesaw+0x150>)
   13ab4:	4798      	blx	r3
	if(ERROR_NONE != error)
   13ab6:	2800      	cmp	r0, #0
   13ab8:	d117      	bne.n	13aea <InitializeSeesaw+0xe6>
{
   13aba:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   13abc:	2703      	movs	r7, #3
   13abe:	4d2c      	ldr	r5, [pc, #176]	; (13b70 <InitializeSeesaw+0x16c>)
   13ac0:	e01a      	b.n	13af8 <InitializeSeesaw+0xf4>
		SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   13ac2:	482c      	ldr	r0, [pc, #176]	; (13b74 <InitializeSeesaw+0x170>)
   13ac4:	4b21      	ldr	r3, [pc, #132]	; (13b4c <InitializeSeesaw+0x148>)
   13ac6:	4798      	blx	r3
   13ac8:	e7b8      	b.n	13a3c <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Found Seesaw!/r/n");
   13aca:	482b      	ldr	r0, [pc, #172]	; (13b78 <InitializeSeesaw+0x174>)
   13acc:	4b1f      	ldr	r3, [pc, #124]	; (13b4c <InitializeSeesaw+0x148>)
   13ace:	4798      	blx	r3
   13ad0:	e7b4      	b.n	13a3c <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   13ad2:	482a      	ldr	r0, [pc, #168]	; (13b7c <InitializeSeesaw+0x178>)
   13ad4:	4b1d      	ldr	r3, [pc, #116]	; (13b4c <InitializeSeesaw+0x148>)
   13ad6:	4798      	blx	r3
   13ad8:	e7ba      	b.n	13a50 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   13ada:	4829      	ldr	r0, [pc, #164]	; (13b80 <InitializeSeesaw+0x17c>)
   13adc:	4b1b      	ldr	r3, [pc, #108]	; (13b4c <InitializeSeesaw+0x148>)
   13ade:	4798      	blx	r3
   13ae0:	e7c0      	b.n	13a64 <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   13ae2:	4828      	ldr	r0, [pc, #160]	; (13b84 <InitializeSeesaw+0x180>)
   13ae4:	4b19      	ldr	r3, [pc, #100]	; (13b4c <InitializeSeesaw+0x148>)
   13ae6:	4798      	blx	r3
   13ae8:	e7c7      	b.n	13a7a <InitializeSeesaw+0x76>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   13aea:	4827      	ldr	r0, [pc, #156]	; (13b88 <InitializeSeesaw+0x184>)
   13aec:	4b17      	ldr	r3, [pc, #92]	; (13b4c <InitializeSeesaw+0x148>)
   13aee:	4798      	blx	r3
   13af0:	e7e3      	b.n	13aba <InitializeSeesaw+0xb6>
	for(int i=0; i<16; i++){
   13af2:	3601      	adds	r6, #1
   13af4:	2e10      	cmp	r6, #16
   13af6:	d01b      	beq.n	13b30 <InitializeSeesaw+0x12c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   13af8:	17f2      	asrs	r2, r6, #31
   13afa:	003c      	movs	r4, r7
   13afc:	4014      	ands	r4, r2
   13afe:	19a4      	adds	r4, r4, r6
   13b00:	10a4      	asrs	r4, r4, #2
   13b02:	00e4      	lsls	r4, r4, #3
   13b04:	0f92      	lsrs	r2, r2, #30
   13b06:	18b3      	adds	r3, r6, r2
   13b08:	403b      	ands	r3, r7
   13b0a:	1a9b      	subs	r3, r3, r2
   13b0c:	18e4      	adds	r4, r4, r3
   13b0e:	b2e4      	uxtb	r4, r4
   13b10:	2201      	movs	r2, #1
   13b12:	0039      	movs	r1, r7
   13b14:	0020      	movs	r0, r4
   13b16:	47a8      	blx	r5
   13b18:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   13b1a:	2201      	movs	r2, #1
   13b1c:	2102      	movs	r1, #2
   13b1e:	0020      	movs	r0, r4
   13b20:	47a8      	blx	r5
   13b22:	464b      	mov	r3, r9
   13b24:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
   13b26:	d0e4      	beq.n	13af2 <InitializeSeesaw+0xee>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   13b28:	4817      	ldr	r0, [pc, #92]	; (13b88 <InitializeSeesaw+0x184>)
   13b2a:	4b08      	ldr	r3, [pc, #32]	; (13b4c <InitializeSeesaw+0x148>)
   13b2c:	4798      	blx	r3
   13b2e:	e7e0      	b.n	13af2 <InitializeSeesaw+0xee>
}
   13b30:	9801      	ldr	r0, [sp, #4]
   13b32:	b004      	add	sp, #16
   13b34:	bc04      	pop	{r2}
   13b36:	4691      	mov	r9, r2
   13b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b3a:	46c0      	nop			; (mov r8, r8)
   13b3c:	200042ec 	.word	0x200042ec
   13b40:	00027e28 	.word	0x00027e28
   13b44:	00013739 	.word	0x00013739
   13b48:	00027d40 	.word	0x00027d40
   13b4c:	00018fbd 	.word	0x00018fbd
   13b50:	00027e38 	.word	0x00027e38
   13b54:	000136d5 	.word	0x000136d5
   13b58:	00027e3c 	.word	0x00027e3c
   13b5c:	00027e34 	.word	0x00027e34
   13b60:	000139a1 	.word	0x000139a1
   13b64:	000139d9 	.word	0x000139d9
   13b68:	00018145 	.word	0x00018145
   13b6c:	00027e2c 	.word	0x00027e2c
   13b70:	0001395d 	.word	0x0001395d
   13b74:	00027d20 	.word	0x00027d20
   13b78:	00027d4c 	.word	0x00027d4c
   13b7c:	00027d60 	.word	0x00027d60
   13b80:	00027d80 	.word	0x00027d80
   13b84:	00027dac 	.word	0x00027dac
   13b88:	00027de0 	.word	0x00027de0

00013b8c <initialize_thumbstick>:
	? No added sampling time
	? Pin scan mode disabled      				
* @note	change positive_input and negative_input for future work
*****************************************************************************/
void initialize_thumbstick(void)
{	
   13b8c:	b530      	push	{r4, r5, lr}
   13b8e:	b099      	sub	sp, #100	; 0x64

	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
   13b90:	ac0c      	add	r4, sp, #48	; 0x30
   13b92:	0020      	movs	r0, r4
   13b94:	4b22      	ldr	r3, [pc, #136]	; (13c20 <initialize_thumbstick+0x94>)
   13b96:	4798      	blx	r3
	
	
	config_adc.reference = ADC_REFERENCE_INTVCC1;
   13b98:	2302      	movs	r3, #2
   13b9a:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN6;
   13b9c:	3304      	adds	r3, #4
   13b9e:	7323      	strb	r3, [r4, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
   13ba0:	23c0      	movs	r3, #192	; 0xc0
   13ba2:	015b      	lsls	r3, r3, #5
   13ba4:	81e3      	strh	r3, [r4, #14]


	adc_init(&adc_instance, ADC, &config_adc);
   13ba6:	4d1f      	ldr	r5, [pc, #124]	; (13c24 <initialize_thumbstick+0x98>)
   13ba8:	0022      	movs	r2, r4
   13baa:	491f      	ldr	r1, [pc, #124]	; (13c28 <initialize_thumbstick+0x9c>)
   13bac:	0028      	movs	r0, r5
   13bae:	4b1f      	ldr	r3, [pc, #124]	; (13c2c <initialize_thumbstick+0xa0>)
   13bb0:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13bb2:	682a      	ldr	r2, [r5, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13bb4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   13bb6:	b25b      	sxtb	r3, r3
   13bb8:	2b00      	cmp	r3, #0
   13bba:	dbfb      	blt.n	13bb4 <initialize_thumbstick+0x28>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   13bbc:	230f      	movs	r3, #15
   13bbe:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   13bc0:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   13bc2:	7813      	ldrb	r3, [r2, #0]
   13bc4:	2102      	movs	r1, #2
   13bc6:	430b      	orrs	r3, r1
   13bc8:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
   13bca:	4b16      	ldr	r3, [pc, #88]	; (13c24 <initialize_thumbstick+0x98>)
   13bcc:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13bce:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   13bd0:	b25b      	sxtb	r3, r3
   13bd2:	2b00      	cmp	r3, #0
   13bd4:	dbfb      	blt.n	13bce <initialize_thumbstick+0x42>
	adc_enable(&adc_instance);
	
	
	struct adc_config config_adc2;

	adc_get_config_defaults(&config_adc2);
   13bd6:	4668      	mov	r0, sp
   13bd8:	4b11      	ldr	r3, [pc, #68]	; (13c20 <initialize_thumbstick+0x94>)
   13bda:	4798      	blx	r3
	config_adc2.reference = ADC_REFERENCE_INTVCC1;
   13bdc:	2302      	movs	r3, #2
   13bde:	466a      	mov	r2, sp
   13be0:	7053      	strb	r3, [r2, #1]
	config_adc2.positive_input = ADC_POSITIVE_INPUT_PIN19;
   13be2:	3311      	adds	r3, #17
   13be4:	7313      	strb	r3, [r2, #12]
	config_adc2.negative_input = ADC_NEGATIVE_INPUT_GND;
   13be6:	23c0      	movs	r3, #192	; 0xc0
   13be8:	015b      	lsls	r3, r3, #5
   13bea:	81d3      	strh	r3, [r2, #14]


	adc_init(&adc_instance2, ADC, &config_adc2);
   13bec:	4c10      	ldr	r4, [pc, #64]	; (13c30 <initialize_thumbstick+0xa4>)
   13bee:	490e      	ldr	r1, [pc, #56]	; (13c28 <initialize_thumbstick+0x9c>)
   13bf0:	0020      	movs	r0, r4
   13bf2:	4b0e      	ldr	r3, [pc, #56]	; (13c2c <initialize_thumbstick+0xa0>)
   13bf4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
   13bf6:	6822      	ldr	r2, [r4, #0]
   13bf8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   13bfa:	b25b      	sxtb	r3, r3
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	dbfb      	blt.n	13bf8 <initialize_thumbstick+0x6c>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   13c00:	230f      	movs	r3, #15
   13c02:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   13c04:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   13c06:	7813      	ldrb	r3, [r2, #0]
   13c08:	2102      	movs	r1, #2
   13c0a:	430b      	orrs	r3, r1
   13c0c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
   13c0e:	4b08      	ldr	r3, [pc, #32]	; (13c30 <initialize_thumbstick+0xa4>)
   13c10:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13c12:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
   13c14:	b25b      	sxtb	r3, r3
   13c16:	2b00      	cmp	r3, #0
   13c18:	dbfb      	blt.n	13c12 <initialize_thumbstick+0x86>
	adc_enable(&adc_instance2);



}
   13c1a:	b019      	add	sp, #100	; 0x64
   13c1c:	bd30      	pop	{r4, r5, pc}
   13c1e:	46c0      	nop			; (mov r8, r8)
   13c20:	00012115 	.word	0x00012115
   13c24:	20004304 	.word	0x20004304
   13c28:	42004000 	.word	0x42004000
   13c2c:	0001215d 	.word	0x0001215d
   13c30:	200042fc 	.word	0x200042fc

00013c34 <ts_read_x>:
* @brief	read the X axis ADC raw value from the thumb stick				
* @return	uint16_t Reading result 
* @note     Polling method of reading
*****************************************************************************/
uint16_t ts_read_x(void)
{
   13c34:	b530      	push	{r4, r5, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13c36:	4b1b      	ldr	r3, [pc, #108]	; (13ca4 <ts_read_x+0x70>)
   13c38:	6819      	ldr	r1, [r3, #0]
   13c3a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
   13c3c:	b25b      	sxtb	r3, r3
   13c3e:	2b00      	cmp	r3, #0
   13c40:	dbfb      	blt.n	13c3a <ts_read_x+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   13c42:	7b0b      	ldrb	r3, [r1, #12]
   13c44:	2202      	movs	r2, #2
   13c46:	4313      	orrs	r3, r2
   13c48:	730b      	strb	r3, [r1, #12]
   13c4a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
   13c4c:	b25b      	sxtb	r3, r3
   13c4e:	2b00      	cmp	r3, #0
   13c50:	dbfb      	blt.n	13c4a <ts_read_x+0x16>
	if (int_flags & ADC_INTFLAG_RESRDY) {
   13c52:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
   13c54:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
   13c56:	2402      	movs	r4, #2
   13c58:	e001      	b.n	13c5e <ts_read_x+0x2a>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   13c5a:	4210      	tst	r0, r2
   13c5c:	d10a      	bne.n	13c74 <ts_read_x+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
   13c5e:	7e0b      	ldrb	r3, [r1, #24]
   13c60:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
   13c62:	0002      	movs	r2, r0
   13c64:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
   13c66:	421d      	tst	r5, r3
   13c68:	d000      	beq.n	13c6c <ts_read_x+0x38>
		status_flags |= ADC_STATUS_WINDOW;
   13c6a:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   13c6c:	421c      	tst	r4, r3
   13c6e:	d0f4      	beq.n	13c5a <ts_read_x+0x26>
		status_flags |= ADC_STATUS_OVERRUN;
   13c70:	432a      	orrs	r2, r5
   13c72:	e7f2      	b.n	13c5a <ts_read_x+0x26>
   13c74:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   13c76:	b25b      	sxtb	r3, r3
   13c78:	2b00      	cmp	r3, #0
   13c7a:	dbfb      	blt.n	13c74 <ts_read_x+0x40>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   13c7c:	8b48      	ldrh	r0, [r1, #26]
   13c7e:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
   13c80:	2301      	movs	r3, #1
   13c82:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
   13c84:	7e0a      	ldrb	r2, [r1, #24]
   13c86:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
   13c88:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
   13c8a:	0754      	lsls	r4, r2, #29
   13c8c:	d501      	bpl.n	13c92 <ts_read_x+0x5e>
		status_flags |= ADC_STATUS_WINDOW;
   13c8e:	2402      	movs	r4, #2
   13c90:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   13c92:	0792      	lsls	r2, r2, #30
   13c94:	d501      	bpl.n	13c9a <ts_read_x+0x66>
		status_flags |= ADC_STATUS_OVERRUN;
   13c96:	2204      	movs	r2, #4
   13c98:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   13c9a:	075b      	lsls	r3, r3, #29
   13c9c:	d501      	bpl.n	13ca2 <ts_read_x+0x6e>
	adc_module->INTFLAG.reg = int_flags;
   13c9e:	2302      	movs	r3, #2
   13ca0:	760b      	strb	r3, [r1, #24]
	 
		 stat = adc_read(&adc_instance, &result);
	 } while (stat == STATUS_BUSY);
	
	return result;
}
   13ca2:	bd30      	pop	{r4, r5, pc}
   13ca4:	20004304 	.word	0x20004304

00013ca8 <UIChangeColors>:
* @return		
* @note         

*****************************************************************************/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   13ca8:	b590      	push	{r4, r7, lr}
   13caa:	b083      	sub	sp, #12
   13cac:	af00      	add	r7, sp, #0
   13cae:	0004      	movs	r4, r0
   13cb0:	0008      	movs	r0, r1
   13cb2:	0011      	movs	r1, r2
   13cb4:	1dfb      	adds	r3, r7, #7
   13cb6:	1c22      	adds	r2, r4, #0
   13cb8:	701a      	strb	r2, [r3, #0]
   13cba:	1dbb      	adds	r3, r7, #6
   13cbc:	1c02      	adds	r2, r0, #0
   13cbe:	701a      	strb	r2, [r3, #0]
   13cc0:	1d7b      	adds	r3, r7, #5
   13cc2:	1c0a      	adds	r2, r1, #0
   13cc4:	701a      	strb	r2, [r3, #0]
	red = r;
   13cc6:	4b08      	ldr	r3, [pc, #32]	; (13ce8 <UIChangeColors+0x40>)
   13cc8:	1dfa      	adds	r2, r7, #7
   13cca:	7812      	ldrb	r2, [r2, #0]
   13ccc:	701a      	strb	r2, [r3, #0]
	green = g;
   13cce:	4b07      	ldr	r3, [pc, #28]	; (13cec <UIChangeColors+0x44>)
   13cd0:	1dba      	adds	r2, r7, #6
   13cd2:	7812      	ldrb	r2, [r2, #0]
   13cd4:	701a      	strb	r2, [r3, #0]
	blue = b;
   13cd6:	4b06      	ldr	r3, [pc, #24]	; (13cf0 <UIChangeColors+0x48>)
   13cd8:	1d7a      	adds	r2, r7, #5
   13cda:	7812      	ldrb	r2, [r2, #0]
   13cdc:	701a      	strb	r2, [r3, #0]
   13cde:	46c0      	nop			; (mov r8, r8)
   13ce0:	46bd      	mov	sp, r7
   13ce2:	b003      	add	sp, #12
   13ce4:	bd90      	pop	{r4, r7, pc}
   13ce6:	46c0      	nop			; (mov r8, r8)
   13ce8:	2000044d 	.word	0x2000044d
   13cec:	20000020 	.word	0x20000020
   13cf0:	20000021 	.word	0x20000021

00013cf4 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   13cf4:	4b02      	ldr	r3, [pc, #8]	; (13d00 <add_state+0xc>)
   13cf6:	781a      	ldrb	r2, [r3, #0]
   13cf8:	4310      	orrs	r0, r2
   13cfa:	7018      	strb	r0, [r3, #0]
}
   13cfc:	4770      	bx	lr
   13cfe:	46c0      	nop			; (mov r8, r8)
   13d00:	2000044f 	.word	0x2000044f

00013d04 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   13d04:	4b06      	ldr	r3, [pc, #24]	; (13d20 <extint_detection_callback+0x1c>)
   13d06:	681a      	ldr	r2, [r3, #0]
   13d08:	3201      	adds	r2, #1
   13d0a:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   13d0c:	681b      	ldr	r3, [r3, #0]
   13d0e:	2b28      	cmp	r3, #40	; 0x28
   13d10:	d902      	bls.n	13d18 <extint_detection_callback+0x14>
   13d12:	2201      	movs	r2, #1
   13d14:	4b02      	ldr	r3, [pc, #8]	; (13d20 <extint_detection_callback+0x1c>)
   13d16:	601a      	str	r2, [r3, #0]
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);imuDataVar
	isPressed = true;
   13d18:	2201      	movs	r2, #1
   13d1a:	4b02      	ldr	r3, [pc, #8]	; (13d24 <extint_detection_callback+0x20>)
   13d1c:	701a      	strb	r2, [r3, #0]
	
}
   13d1e:	4770      	bx	lr
   13d20:	200000a8 	.word	0x200000a8
   13d24:	200006a8 	.word	0x200006a8

00013d28 <SubscribeHandlerLedTopic>:
{
   13d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d2a:	b085      	sub	sp, #20
   13d2c:	0004      	movs	r4, r0
	uint8_t rgb[3] = {0,0,0};
   13d2e:	ab03      	add	r3, sp, #12
   13d30:	2200      	movs	r2, #0
   13d32:	701a      	strb	r2, [r3, #0]
   13d34:	705a      	strb	r2, [r3, #1]
   13d36:	709a      	strb	r2, [r3, #2]
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13d38:	6842      	ldr	r2, [r0, #4]
   13d3a:	6893      	ldr	r3, [r2, #8]
   13d3c:	6852      	ldr	r2, [r2, #4]
   13d3e:	491b      	ldr	r1, [pc, #108]	; (13dac <SubscribeHandlerLedTopic+0x84>)
   13d40:	2001      	movs	r0, #1
   13d42:	4d1b      	ldr	r5, [pc, #108]	; (13db0 <SubscribeHandlerLedTopic+0x88>)
   13d44:	47a8      	blx	r5
	if (strncmp(msgData->message->payload, "rgb(", 4)== 0)
   13d46:	6823      	ldr	r3, [r4, #0]
   13d48:	689c      	ldr	r4, [r3, #8]
   13d4a:	2204      	movs	r2, #4
   13d4c:	4919      	ldr	r1, [pc, #100]	; (13db4 <SubscribeHandlerLedTopic+0x8c>)
   13d4e:	0020      	movs	r0, r4
   13d50:	4b19      	ldr	r3, [pc, #100]	; (13db8 <SubscribeHandlerLedTopic+0x90>)
   13d52:	4798      	blx	r3
   13d54:	2800      	cmp	r0, #0
   13d56:	d127      	bne.n	13da8 <SubscribeHandlerLedTopic+0x80>
	char *p = (char *)&msgData->message->payload[4];
   13d58:	1d20      	adds	r0, r4, #4
   13d5a:	9002      	str	r0, [sp, #8]
	while(nb <=2  && *p)
   13d5c:	7923      	ldrb	r3, [r4, #4]
   13d5e:	2b00      	cmp	r3, #0
   13d60:	d012      	beq.n	13d88 <SubscribeHandlerLedTopic+0x60>
   13d62:	2400      	movs	r4, #0
		rgb[nb++] = strtol(p, &p, 10);
   13d64:	4e15      	ldr	r6, [pc, #84]	; (13dbc <SubscribeHandlerLedTopic+0x94>)
   13d66:	ad03      	add	r5, sp, #12
   13d68:	220a      	movs	r2, #10
   13d6a:	a902      	add	r1, sp, #8
   13d6c:	47b0      	blx	r6
   13d6e:	5560      	strb	r0, [r4, r5]
		if (*p != ',')
   13d70:	9b02      	ldr	r3, [sp, #8]
   13d72:	781a      	ldrb	r2, [r3, #0]
   13d74:	2a2c      	cmp	r2, #44	; 0x2c
   13d76:	d107      	bne.n	13d88 <SubscribeHandlerLedTopic+0x60>
		p++; /* skip, */
   13d78:	1c58      	adds	r0, r3, #1
   13d7a:	9002      	str	r0, [sp, #8]
	while(nb <=2  && *p)
   13d7c:	2c02      	cmp	r4, #2
   13d7e:	d003      	beq.n	13d88 <SubscribeHandlerLedTopic+0x60>
   13d80:	3401      	adds	r4, #1
   13d82:	785b      	ldrb	r3, [r3, #1]
   13d84:	2b00      	cmp	r3, #0
   13d86:	d1ef      	bne.n	13d68 <SubscribeHandlerLedTopic+0x40>
	LogMessage(LOG_DEBUG_LVL,"\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   13d88:	ab03      	add	r3, sp, #12
   13d8a:	781c      	ldrb	r4, [r3, #0]
   13d8c:	785d      	ldrb	r5, [r3, #1]
   13d8e:	789e      	ldrb	r6, [r3, #2]
   13d90:	9600      	str	r6, [sp, #0]
   13d92:	002b      	movs	r3, r5
   13d94:	0022      	movs	r2, r4
   13d96:	490a      	ldr	r1, [pc, #40]	; (13dc0 <SubscribeHandlerLedTopic+0x98>)
   13d98:	2001      	movs	r0, #1
   13d9a:	4f05      	ldr	r7, [pc, #20]	; (13db0 <SubscribeHandlerLedTopic+0x88>)
   13d9c:	47b8      	blx	r7
	UIChangeColors(rgb[0],rgb[1], rgb[2]);
   13d9e:	0032      	movs	r2, r6
   13da0:	0029      	movs	r1, r5
   13da2:	0020      	movs	r0, r4
   13da4:	4b07      	ldr	r3, [pc, #28]	; (13dc4 <SubscribeHandlerLedTopic+0x9c>)
   13da6:	4798      	blx	r3
}
   13da8:	b005      	add	sp, #20
   13daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13dac:	00027f48 	.word	0x00027f48
   13db0:	0001906d 	.word	0x0001906d
   13db4:	00027f50 	.word	0x00027f50
   13db8:	0002673d 	.word	0x0002673d
   13dbc:	000268e9 	.word	0x000268e9
   13dc0:	00027f58 	.word	0x00027f58
   13dc4:	00013ca9 	.word	0x00013ca9

00013dc8 <SubscribeHandlerGameTopic>:
{
   13dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dca:	b087      	sub	sp, #28
   13dcc:	0004      	movs	r4, r0
	memset(game.game, 0xff, sizeof(game.game));
   13dce:	2214      	movs	r2, #20
   13dd0:	21ff      	movs	r1, #255	; 0xff
   13dd2:	a801      	add	r0, sp, #4
   13dd4:	4b2f      	ldr	r3, [pc, #188]	; (13e94 <SubscribeHandlerGameTopic+0xcc>)
   13dd6:	4798      	blx	r3
	if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0)
   13dd8:	6823      	ldr	r3, [r4, #0]
   13dda:	6898      	ldr	r0, [r3, #8]
   13ddc:	2209      	movs	r2, #9
   13dde:	492e      	ldr	r1, [pc, #184]	; (13e98 <SubscribeHandlerGameTopic+0xd0>)
   13de0:	4b2e      	ldr	r3, [pc, #184]	; (13e9c <SubscribeHandlerGameTopic+0xd4>)
   13de2:	4798      	blx	r3
   13de4:	2800      	cmp	r0, #0
   13de6:	d143      	bne.n	13e70 <SubscribeHandlerGameTopic+0xa8>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received!\r\n");
   13de8:	492d      	ldr	r1, [pc, #180]	; (13ea0 <SubscribeHandlerGameTopic+0xd8>)
   13dea:	3001      	adds	r0, #1
   13dec:	4d2d      	ldr	r5, [pc, #180]	; (13ea4 <SubscribeHandlerGameTopic+0xdc>)
   13dee:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13df0:	6862      	ldr	r2, [r4, #4]
   13df2:	6893      	ldr	r3, [r2, #8]
   13df4:	6852      	ldr	r2, [r2, #4]
   13df6:	492c      	ldr	r1, [pc, #176]	; (13ea8 <SubscribeHandlerGameTopic+0xe0>)
   13df8:	2001      	movs	r0, #1
   13dfa:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13dfc:	6822      	ldr	r2, [r4, #0]
   13dfe:	6893      	ldr	r3, [r2, #8]
   13e00:	68d2      	ldr	r2, [r2, #12]
   13e02:	492a      	ldr	r1, [pc, #168]	; (13eac <SubscribeHandlerGameTopic+0xe4>)
   13e04:	2001      	movs	r0, #1
   13e06:	47a8      	blx	r5
		char *p = &msgData->message->payload[9];
   13e08:	6823      	ldr	r3, [r4, #0]
   13e0a:	689b      	ldr	r3, [r3, #8]
   13e0c:	0018      	movs	r0, r3
   13e0e:	3009      	adds	r0, #9
   13e10:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   13e12:	7a5b      	ldrb	r3, [r3, #9]
   13e14:	2b00      	cmp	r3, #0
   13e16:	d013      	beq.n	13e40 <SubscribeHandlerGameTopic+0x78>
   13e18:	ac01      	add	r4, sp, #4
   13e1a:	2517      	movs	r5, #23
   13e1c:	446d      	add	r5, sp
			game.game[nb++] = strtol(p, &p, 10);
   13e1e:	4e24      	ldr	r6, [pc, #144]	; (13eb0 <SubscribeHandlerGameTopic+0xe8>)
   13e20:	220a      	movs	r2, #10
   13e22:	4669      	mov	r1, sp
   13e24:	47b0      	blx	r6
   13e26:	7020      	strb	r0, [r4, #0]
			if (*p != ',')
   13e28:	9b00      	ldr	r3, [sp, #0]
   13e2a:	781a      	ldrb	r2, [r3, #0]
   13e2c:	2a2c      	cmp	r2, #44	; 0x2c
   13e2e:	d107      	bne.n	13e40 <SubscribeHandlerGameTopic+0x78>
			p++; /* skip, */
   13e30:	1c58      	adds	r0, r3, #1
   13e32:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   13e34:	42ac      	cmp	r4, r5
   13e36:	d003      	beq.n	13e40 <SubscribeHandlerGameTopic+0x78>
   13e38:	3401      	adds	r4, #1
   13e3a:	785b      	ldrb	r3, [r3, #1]
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	d1ef      	bne.n	13e20 <SubscribeHandlerGameTopic+0x58>
		LogMessage(LOG_DEBUG_LVL,"\r\nParsed Command: ");
   13e40:	491c      	ldr	r1, [pc, #112]	; (13eb4 <SubscribeHandlerGameTopic+0xec>)
   13e42:	2001      	movs	r0, #1
   13e44:	4b17      	ldr	r3, [pc, #92]	; (13ea4 <SubscribeHandlerGameTopic+0xdc>)
   13e46:	4798      	blx	r3
   13e48:	ac01      	add	r4, sp, #4
   13e4a:	af06      	add	r7, sp, #24
			LogMessage(LOG_DEBUG_LVL,"%d,", game.game[i]);
   13e4c:	4e1a      	ldr	r6, [pc, #104]	; (13eb8 <SubscribeHandlerGameTopic+0xf0>)
   13e4e:	4d15      	ldr	r5, [pc, #84]	; (13ea4 <SubscribeHandlerGameTopic+0xdc>)
   13e50:	7822      	ldrb	r2, [r4, #0]
   13e52:	0031      	movs	r1, r6
   13e54:	2001      	movs	r0, #1
   13e56:	47a8      	blx	r5
   13e58:	3401      	adds	r4, #1
		for(int i = 0; i < GAME_SIZE; i++)
   13e5a:	42a7      	cmp	r7, r4
   13e5c:	d1f8      	bne.n	13e50 <SubscribeHandlerGameTopic+0x88>
		if(pdTRUE == ControlAddGameData(&game))
   13e5e:	a801      	add	r0, sp, #4
   13e60:	4b16      	ldr	r3, [pc, #88]	; (13ebc <SubscribeHandlerGameTopic+0xf4>)
   13e62:	4798      	blx	r3
   13e64:	2801      	cmp	r0, #1
   13e66:	d113      	bne.n	13e90 <SubscribeHandlerGameTopic+0xc8>
			LogMessage(LOG_DEBUG_LVL,"\r\nSent play to control!\r\n");
   13e68:	4915      	ldr	r1, [pc, #84]	; (13ec0 <SubscribeHandlerGameTopic+0xf8>)
   13e6a:	4b0e      	ldr	r3, [pc, #56]	; (13ea4 <SubscribeHandlerGameTopic+0xdc>)
   13e6c:	4798      	blx	r3
   13e6e:	e00f      	b.n	13e90 <SubscribeHandlerGameTopic+0xc8>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received but not understood!\r\n");
   13e70:	4914      	ldr	r1, [pc, #80]	; (13ec4 <SubscribeHandlerGameTopic+0xfc>)
   13e72:	2001      	movs	r0, #1
   13e74:	4d0b      	ldr	r5, [pc, #44]	; (13ea4 <SubscribeHandlerGameTopic+0xdc>)
   13e76:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13e78:	6862      	ldr	r2, [r4, #4]
   13e7a:	6893      	ldr	r3, [r2, #8]
   13e7c:	6852      	ldr	r2, [r2, #4]
   13e7e:	490a      	ldr	r1, [pc, #40]	; (13ea8 <SubscribeHandlerGameTopic+0xe0>)
   13e80:	2001      	movs	r0, #1
   13e82:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13e84:	6822      	ldr	r2, [r4, #0]
   13e86:	6893      	ldr	r3, [r2, #8]
   13e88:	68d2      	ldr	r2, [r2, #12]
   13e8a:	4908      	ldr	r1, [pc, #32]	; (13eac <SubscribeHandlerGameTopic+0xe4>)
   13e8c:	2001      	movs	r0, #1
   13e8e:	47a8      	blx	r5
}
   13e90:	b007      	add	sp, #28
   13e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e94:	000262a3 	.word	0x000262a3
   13e98:	00027eb4 	.word	0x00027eb4
   13e9c:	0002673d 	.word	0x0002673d
   13ea0:	00027ec0 	.word	0x00027ec0
   13ea4:	0001906d 	.word	0x0001906d
   13ea8:	00027f48 	.word	0x00027f48
   13eac:	00027edc 	.word	0x00027edc
   13eb0:	000268e9 	.word	0x000268e9
   13eb4:	00027ee4 	.word	0x00027ee4
   13eb8:	00027ef8 	.word	0x00027ef8
   13ebc:	00013305 	.word	0x00013305
   13ec0:	00027efc 	.word	0x00027efc
   13ec4:	00027f18 	.word	0x00027f18

00013ec8 <SubscribeHandlerGameOnTopic>:
{
   13ec8:	b510      	push	{r4, lr}
	StartJXGame();
   13eca:	4b03      	ldr	r3, [pc, #12]	; (13ed8 <SubscribeHandlerGameOnTopic+0x10>)
   13ecc:	4798      	blx	r3
	SerialConsoleWriteString("Get the message! Game Om!\r\n");
   13ece:	4803      	ldr	r0, [pc, #12]	; (13edc <SubscribeHandlerGameOnTopic+0x14>)
   13ed0:	4b03      	ldr	r3, [pc, #12]	; (13ee0 <SubscribeHandlerGameOnTopic+0x18>)
   13ed2:	4798      	blx	r3
}
   13ed4:	bd10      	pop	{r4, pc}
   13ed6:	46c0      	nop			; (mov r8, r8)
   13ed8:	00013331 	.word	0x00013331
   13edc:	00027e98 	.word	0x00027e98
   13ee0:	00018fbd 	.word	0x00018fbd

00013ee4 <socket_resolve_handler>:
{
   13ee4:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   13ee6:	4b01      	ldr	r3, [pc, #4]	; (13eec <socket_resolve_handler+0x8>)
   13ee8:	4798      	blx	r3
}
   13eea:	bd10      	pop	{r4, pc}
   13eec:	00022261 	.word	0x00022261

00013ef0 <socket_event_handler>:
{
   13ef0:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   13ef2:	4b01      	ldr	r3, [pc, #4]	; (13ef8 <socket_event_handler+0x8>)
   13ef4:	4798      	blx	r3
}
   13ef6:	bd10      	pop	{r4, pc}
   13ef8:	00022255 	.word	0x00022255

00013efc <start_download>:
{
   13efc:	b510      	push	{r4, lr}
   13efe:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   13f00:	4b15      	ldr	r3, [pc, #84]	; (13f58 <start_download+0x5c>)
   13f02:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   13f04:	07da      	lsls	r2, r3, #31
   13f06:	d512      	bpl.n	13f2e <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   13f08:	079a      	lsls	r2, r3, #30
   13f0a:	d515      	bpl.n	13f38 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
   13f0c:	075a      	lsls	r2, r3, #29
   13f0e:	d418      	bmi.n	13f42 <start_download+0x46>
	if (is_state_set(DOWNLOADING)) {
   13f10:	071b      	lsls	r3, r3, #28
   13f12:	d41b      	bmi.n	13f4c <start_download+0x50>
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   13f14:	4911      	ldr	r1, [pc, #68]	; (13f5c <start_download+0x60>)
   13f16:	2001      	movs	r0, #1
   13f18:	4b11      	ldr	r3, [pc, #68]	; (13f60 <start_download+0x64>)
   13f1a:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   13f1c:	2300      	movs	r3, #0
   13f1e:	9300      	str	r3, [sp, #0]
   13f20:	2201      	movs	r2, #1
   13f22:	4910      	ldr	r1, [pc, #64]	; (13f64 <start_download+0x68>)
   13f24:	4810      	ldr	r0, [pc, #64]	; (13f68 <start_download+0x6c>)
   13f26:	4c11      	ldr	r4, [pc, #68]	; (13f6c <start_download+0x70>)
   13f28:	47a0      	blx	r4
}
   13f2a:	b002      	add	sp, #8
   13f2c:	bd10      	pop	{r4, pc}
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   13f2e:	4910      	ldr	r1, [pc, #64]	; (13f70 <start_download+0x74>)
   13f30:	2001      	movs	r0, #1
   13f32:	4b0b      	ldr	r3, [pc, #44]	; (13f60 <start_download+0x64>)
   13f34:	4798      	blx	r3
		return;
   13f36:	e7f8      	b.n	13f2a <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   13f38:	490e      	ldr	r1, [pc, #56]	; (13f74 <start_download+0x78>)
   13f3a:	2001      	movs	r0, #1
   13f3c:	4b08      	ldr	r3, [pc, #32]	; (13f60 <start_download+0x64>)
   13f3e:	4798      	blx	r3
		return;
   13f40:	e7f3      	b.n	13f2a <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   13f42:	490d      	ldr	r1, [pc, #52]	; (13f78 <start_download+0x7c>)
   13f44:	2001      	movs	r0, #1
   13f46:	4b06      	ldr	r3, [pc, #24]	; (13f60 <start_download+0x64>)
   13f48:	4798      	blx	r3
		return;
   13f4a:	e7ee      	b.n	13f2a <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   13f4c:	490b      	ldr	r1, [pc, #44]	; (13f7c <start_download+0x80>)
   13f4e:	2001      	movs	r0, #1
   13f50:	4b03      	ldr	r3, [pc, #12]	; (13f60 <start_download+0x64>)
   13f52:	4798      	blx	r3
		return;
   13f54:	e7e9      	b.n	13f2a <start_download+0x2e>
   13f56:	46c0      	nop			; (mov r8, r8)
   13f58:	2000044f 	.word	0x2000044f
   13f5c:	000283ec 	.word	0x000283ec
   13f60:	0001906d 	.word	0x0001906d
   13f64:	00028418 	.word	0x00028418
   13f68:	20004364 	.word	0x20004364
   13f6c:	00023385 	.word	0x00023385
   13f70:	0002833c 	.word	0x0002833c
   13f74:	00028368 	.word	0x00028368
   13f78:	00028394 	.word	0x00028394
   13f7c:	000283c0 	.word	0x000283c0

00013f80 <configure_mqtt>:
{
   13f80:	b500      	push	{lr}
   13f82:	b087      	sub	sp, #28
	mqtt_get_config_defaults(&mqtt_conf);
   13f84:	4668      	mov	r0, sp
   13f86:	4b13      	ldr	r3, [pc, #76]	; (13fd4 <configure_mqtt+0x54>)
   13f88:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   13f8a:	4b13      	ldr	r3, [pc, #76]	; (13fd8 <configure_mqtt+0x58>)
   13f8c:	9302      	str	r3, [sp, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13f8e:	2380      	movs	r3, #128	; 0x80
   13f90:	009b      	lsls	r3, r3, #2
   13f92:	9303      	str	r3, [sp, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   13f94:	4a11      	ldr	r2, [pc, #68]	; (13fdc <configure_mqtt+0x5c>)
   13f96:	9204      	str	r2, [sp, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13f98:	9305      	str	r3, [sp, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   13f9a:	4b11      	ldr	r3, [pc, #68]	; (13fe0 <configure_mqtt+0x60>)
   13f9c:	466a      	mov	r2, sp
   13f9e:	8013      	strh	r3, [r2, #0]
	mqtt_conf.keep_alive = 6000;
   13fa0:	4b10      	ldr	r3, [pc, #64]	; (13fe4 <configure_mqtt+0x64>)
   13fa2:	8093      	strh	r3, [r2, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   13fa4:	4669      	mov	r1, sp
   13fa6:	4810      	ldr	r0, [pc, #64]	; (13fe8 <configure_mqtt+0x68>)
   13fa8:	4b10      	ldr	r3, [pc, #64]	; (13fec <configure_mqtt+0x6c>)
   13faa:	4798      	blx	r3
   13fac:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   13fae:	db07      	blt.n	13fc0 <configure_mqtt+0x40>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   13fb0:	490f      	ldr	r1, [pc, #60]	; (13ff0 <configure_mqtt+0x70>)
   13fb2:	480d      	ldr	r0, [pc, #52]	; (13fe8 <configure_mqtt+0x68>)
   13fb4:	4b0f      	ldr	r3, [pc, #60]	; (13ff4 <configure_mqtt+0x74>)
   13fb6:	4798      	blx	r3
   13fb8:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   13fba:	db06      	blt.n	13fca <configure_mqtt+0x4a>
}
   13fbc:	b007      	add	sp, #28
   13fbe:	bd00      	pop	{pc}
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   13fc0:	490d      	ldr	r1, [pc, #52]	; (13ff8 <configure_mqtt+0x78>)
   13fc2:	2001      	movs	r0, #1
   13fc4:	4b0d      	ldr	r3, [pc, #52]	; (13ffc <configure_mqtt+0x7c>)
   13fc6:	4798      	blx	r3
   13fc8:	e7fe      	b.n	13fc8 <configure_mqtt+0x48>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   13fca:	490d      	ldr	r1, [pc, #52]	; (14000 <configure_mqtt+0x80>)
   13fcc:	2001      	movs	r0, #1
   13fce:	4b0b      	ldr	r3, [pc, #44]	; (13ffc <configure_mqtt+0x7c>)
   13fd0:	4798      	blx	r3
   13fd2:	e7fe      	b.n	13fd2 <configure_mqtt+0x52>
   13fd4:	00022229 	.word	0x00022229
   13fd8:	200006e4 	.word	0x200006e4
   13fdc:	200008e4 	.word	0x200008e4
   13fe0:	0000075b 	.word	0x0000075b
   13fe4:	00001770 	.word	0x00001770
   13fe8:	200006ac 	.word	0x200006ac
   13fec:	00022175 	.word	0x00022175
   13ff0:	00014005 	.word	0x00014005
   13ff4:	00022245 	.word	0x00022245
   13ff8:	00027f6c 	.word	0x00027f6c
   13ffc:	0001906d 	.word	0x0001906d
   14000:	00027fa0 	.word	0x00027fa0

00014004 <mqtt_callback>:
{
   14004:	b530      	push	{r4, r5, lr}
   14006:	b087      	sub	sp, #28
   14008:	0004      	movs	r4, r0
	switch (type) {
   1400a:	2901      	cmp	r1, #1
   1400c:	d030      	beq.n	14070 <mqtt_callback+0x6c>
   1400e:	2905      	cmp	r1, #5
   14010:	d04a      	beq.n	140a8 <mqtt_callback+0xa4>
   14012:	2900      	cmp	r1, #0
   14014:	d001      	beq.n	1401a <mqtt_callback+0x16>
}
   14016:	b007      	add	sp, #28
   14018:	bd30      	pop	{r4, r5, pc}
		if (data->sock_connected.result >= 0) {
   1401a:	6813      	ldr	r3, [r2, #0]
   1401c:	2b00      	cmp	r3, #0
   1401e:	db1c      	blt.n	1405a <mqtt_callback+0x56>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   14020:	4924      	ldr	r1, [pc, #144]	; (140b4 <mqtt_callback+0xb0>)
   14022:	2001      	movs	r0, #1
   14024:	4b24      	ldr	r3, [pc, #144]	; (140b8 <mqtt_callback+0xb4>)
   14026:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   14028:	4a24      	ldr	r2, [pc, #144]	; (140bc <mqtt_callback+0xb8>)
   1402a:	2300      	movs	r3, #0
   1402c:	9305      	str	r3, [sp, #20]
   1402e:	9304      	str	r3, [sp, #16]
   14030:	9303      	str	r3, [sp, #12]
   14032:	9302      	str	r3, [sp, #8]
   14034:	9301      	str	r3, [sp, #4]
   14036:	9200      	str	r2, [sp, #0]
   14038:	4b21      	ldr	r3, [pc, #132]	; (140c0 <mqtt_callback+0xbc>)
   1403a:	2101      	movs	r1, #1
   1403c:	0020      	movs	r0, r4
   1403e:	4c21      	ldr	r4, [pc, #132]	; (140c4 <mqtt_callback+0xc0>)
   14040:	47a0      	blx	r4
   14042:	2800      	cmp	r0, #0
   14044:	d004      	beq.n	14050 <mqtt_callback+0x4c>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   14046:	4920      	ldr	r1, [pc, #128]	; (140c8 <mqtt_callback+0xc4>)
   14048:	2001      	movs	r0, #1
   1404a:	4b1b      	ldr	r3, [pc, #108]	; (140b8 <mqtt_callback+0xb4>)
   1404c:	4798      	blx	r3
   1404e:	e7e2      	b.n	14016 <mqtt_callback+0x12>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   14050:	491e      	ldr	r1, [pc, #120]	; (140cc <mqtt_callback+0xc8>)
   14052:	2001      	movs	r0, #1
   14054:	4b18      	ldr	r3, [pc, #96]	; (140b8 <mqtt_callback+0xb4>)
   14056:	4798      	blx	r3
   14058:	e7dd      	b.n	14016 <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   1405a:	4d1d      	ldr	r5, [pc, #116]	; (140d0 <mqtt_callback+0xcc>)
   1405c:	002a      	movs	r2, r5
   1405e:	491d      	ldr	r1, [pc, #116]	; (140d4 <mqtt_callback+0xd0>)
   14060:	2001      	movs	r0, #1
   14062:	4b15      	ldr	r3, [pc, #84]	; (140b8 <mqtt_callback+0xb4>)
   14064:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   14066:	0029      	movs	r1, r5
   14068:	0020      	movs	r0, r4
   1406a:	4b1b      	ldr	r3, [pc, #108]	; (140d8 <mqtt_callback+0xd4>)
   1406c:	4798      	blx	r3
   1406e:	e7d2      	b.n	14016 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   14070:	7812      	ldrb	r2, [r2, #0]
   14072:	2a00      	cmp	r2, #0
   14074:	d113      	bne.n	1409e <mqtt_callback+0x9a>
			mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   14076:	4b19      	ldr	r3, [pc, #100]	; (140dc <mqtt_callback+0xd8>)
   14078:	3202      	adds	r2, #2
   1407a:	4919      	ldr	r1, [pc, #100]	; (140e0 <mqtt_callback+0xdc>)
   1407c:	4d19      	ldr	r5, [pc, #100]	; (140e4 <mqtt_callback+0xe0>)
   1407e:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   14080:	4b19      	ldr	r3, [pc, #100]	; (140e8 <mqtt_callback+0xe4>)
   14082:	2202      	movs	r2, #2
   14084:	4919      	ldr	r1, [pc, #100]	; (140ec <mqtt_callback+0xe8>)
   14086:	0020      	movs	r0, r4
   14088:	47a8      	blx	r5
			mqtt_subscribe(module_inst, JX_GAME_ON, 2, SubscribeHandlerGameOnTopic);
   1408a:	4b19      	ldr	r3, [pc, #100]	; (140f0 <mqtt_callback+0xec>)
   1408c:	2202      	movs	r2, #2
   1408e:	4919      	ldr	r1, [pc, #100]	; (140f4 <mqtt_callback+0xf0>)
   14090:	0020      	movs	r0, r4
   14092:	47a8      	blx	r5
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   14094:	4918      	ldr	r1, [pc, #96]	; (140f8 <mqtt_callback+0xf4>)
   14096:	2001      	movs	r0, #1
   14098:	4b07      	ldr	r3, [pc, #28]	; (140b8 <mqtt_callback+0xb4>)
   1409a:	4798      	blx	r3
   1409c:	e7bb      	b.n	14016 <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1409e:	4917      	ldr	r1, [pc, #92]	; (140fc <mqtt_callback+0xf8>)
   140a0:	2001      	movs	r0, #1
   140a2:	4b05      	ldr	r3, [pc, #20]	; (140b8 <mqtt_callback+0xb4>)
   140a4:	4798      	blx	r3
   140a6:	e7b6      	b.n	14016 <mqtt_callback+0x12>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   140a8:	4915      	ldr	r1, [pc, #84]	; (14100 <mqtt_callback+0xfc>)
   140aa:	2001      	movs	r0, #1
   140ac:	4b02      	ldr	r3, [pc, #8]	; (140b8 <mqtt_callback+0xb4>)
   140ae:	4798      	blx	r3
}
   140b0:	e7b1      	b.n	14016 <mqtt_callback+0x12>
   140b2:	46c0      	nop			; (mov r8, r8)
   140b4:	000281c4 	.word	0x000281c4
   140b8:	0001906d 	.word	0x0001906d
   140bc:	000281f0 	.word	0x000281f0
   140c0:	000281e0 	.word	0x000281e0
   140c4:	00022299 	.word	0x00022299
   140c8:	000281fc 	.word	0x000281fc
   140cc:	00028224 	.word	0x00028224
   140d0:	000281b0 	.word	0x000281b0
   140d4:	00028240 	.word	0x00028240
   140d8:	0002226d 	.word	0x0002226d
   140dc:	00013dc9 	.word	0x00013dc9
   140e0:	00028278 	.word	0x00028278
   140e4:	0002239d 	.word	0x0002239d
   140e8:	00013d29 	.word	0x00013d29
   140ec:	0002828c 	.word	0x0002828c
   140f0:	00013ec9 	.word	0x00013ec9
   140f4:	000282a0 	.word	0x000282a0
   140f8:	000282b0 	.word	0x000282b0
   140fc:	000282c4 	.word	0x000282c4
   14100:	000282f8 	.word	0x000282f8

00014104 <resolve_cb>:
{
   14104:	b570      	push	{r4, r5, r6, lr}
   14106:	b084      	sub	sp, #16
   14108:	0005      	movs	r5, r0
   1410a:	000c      	movs	r4, r1
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1410c:	22ff      	movs	r2, #255	; 0xff
   1410e:	0013      	movs	r3, r2
   14110:	400b      	ands	r3, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   14112:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14114:	9102      	str	r1, [sp, #8]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   14116:	0c21      	lsrs	r1, r4, #16
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14118:	4011      	ands	r1, r2
   1411a:	9101      	str	r1, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   1411c:	0a21      	lsrs	r1, r4, #8
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1411e:	400a      	ands	r2, r1
   14120:	9200      	str	r2, [sp, #0]
   14122:	0002      	movs	r2, r0
   14124:	4904      	ldr	r1, [pc, #16]	; (14138 <resolve_cb+0x34>)
   14126:	2001      	movs	r0, #1
   14128:	4e04      	ldr	r6, [pc, #16]	; (1413c <resolve_cb+0x38>)
   1412a:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1412c:	0021      	movs	r1, r4
   1412e:	0028      	movs	r0, r5
   14130:	4b03      	ldr	r3, [pc, #12]	; (14140 <resolve_cb+0x3c>)
   14132:	4798      	blx	r3
}
   14134:	b004      	add	sp, #16
   14136:	bd70      	pop	{r4, r5, r6, pc}
   14138:	0002830c 	.word	0x0002830c
   1413c:	0001906d 	.word	0x0001906d
   14140:	00022e55 	.word	0x00022e55

00014144 <socket_cb>:
{
   14144:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   14146:	4b01      	ldr	r3, [pc, #4]	; (1414c <socket_cb+0x8>)
   14148:	4798      	blx	r3
}
   1414a:	bd10      	pop	{r4, pc}
   1414c:	00023a81 	.word	0x00023a81

00014150 <store_file_packet>:
{
   14150:	b5f0      	push	{r4, r5, r6, r7, lr}
   14152:	46d6      	mov	lr, sl
   14154:	b500      	push	{lr}
   14156:	b09a      	sub	sp, #104	; 0x68
   14158:	9001      	str	r0, [sp, #4]
   1415a:	9102      	str	r1, [sp, #8]
	if ((data == NULL) || (length < 1)) {
   1415c:	2800      	cmp	r0, #0
   1415e:	d00d      	beq.n	1417c <store_file_packet+0x2c>
   14160:	2900      	cmp	r1, #0
   14162:	d00b      	beq.n	1417c <store_file_packet+0x2c>
	return ((down_state & mask) != 0);
   14164:	4b87      	ldr	r3, [pc, #540]	; (14384 <store_file_packet+0x234>)
   14166:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   14168:	071b      	lsls	r3, r3, #28
   1416a:	d500      	bpl.n	1416e <store_file_packet+0x1e>
   1416c:	e0c5      	b.n	142fa <store_file_packet+0x1aa>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1416e:	4b86      	ldr	r3, [pc, #536]	; (14388 <store_file_packet+0x238>)
   14170:	2230      	movs	r2, #48	; 0x30
   14172:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   14174:	320a      	adds	r2, #10
   14176:	705a      	strb	r2, [r3, #1]
   14178:	4c84      	ldr	r4, [pc, #528]	; (1438c <store_file_packet+0x23c>)
   1417a:	e008      	b.n	1418e <store_file_packet+0x3e>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   1417c:	4984      	ldr	r1, [pc, #528]	; (14390 <store_file_packet+0x240>)
   1417e:	2001      	movs	r0, #1
   14180:	4b84      	ldr	r3, [pc, #528]	; (14394 <store_file_packet+0x244>)
   14182:	4798      	blx	r3
}
   14184:	b01a      	add	sp, #104	; 0x68
   14186:	bc04      	pop	{r2}
   14188:	4692      	mov	sl, r2
   1418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   1418c:	0004      	movs	r4, r0
   1418e:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   14190:	7803      	ldrb	r3, [r0, #0]
   14192:	2b2f      	cmp	r3, #47	; 0x2f
   14194:	d1fa      	bne.n	1418c <store_file_packet+0x3c>
		if (strlen(cp) > 1) {
   14196:	4b80      	ldr	r3, [pc, #512]	; (14398 <store_file_packet+0x248>)
   14198:	4798      	blx	r3
   1419a:	2801      	cmp	r0, #1
   1419c:	d800      	bhi.n	141a0 <store_file_packet+0x50>
   1419e:	e0c1      	b.n	14324 <store_file_packet+0x1d4>
			strcpy(&save_file_name[2], cp);
   141a0:	4f79      	ldr	r7, [pc, #484]	; (14388 <store_file_packet+0x238>)
   141a2:	1cb8      	adds	r0, r7, #2
   141a4:	0021      	movs	r1, r4
   141a6:	4b7d      	ldr	r3, [pc, #500]	; (1439c <store_file_packet+0x24c>)
   141a8:	4798      	blx	r3
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   141aa:	2241      	movs	r2, #65	; 0x41
   141ac:	2100      	movs	r1, #0
   141ae:	a809      	add	r0, sp, #36	; 0x24
   141b0:	4c7b      	ldr	r4, [pc, #492]	; (143a0 <store_file_packet+0x250>)
   141b2:	47a0      	blx	r4
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   141b4:	2209      	movs	r2, #9
   141b6:	2100      	movs	r1, #0
   141b8:	a806      	add	r0, sp, #24
   141ba:	47a0      	blx	r4
	char numbering[NUMBRING_MAX + 1] = {0};
   141bc:	2300      	movs	r3, #0
   141be:	9305      	str	r3, [sp, #20]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   141c0:	4c78      	ldr	r4, [pc, #480]	; (143a4 <store_file_packet+0x254>)
   141c2:	2200      	movs	r2, #0
   141c4:	0039      	movs	r1, r7
   141c6:	0020      	movs	r0, r4
   141c8:	4b77      	ldr	r3, [pc, #476]	; (143a8 <store_file_packet+0x258>)
   141ca:	4798      	blx	r3
   141cc:	0007      	movs	r7, r0
	f_close(&file_object);
   141ce:	0020      	movs	r0, r4
   141d0:	4b76      	ldr	r3, [pc, #472]	; (143ac <store_file_packet+0x25c>)
   141d2:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   141d4:	2f00      	cmp	r7, #0
   141d6:	d17d      	bne.n	142d4 <store_file_packet+0x184>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   141d8:	486b      	ldr	r0, [pc, #428]	; (14388 <store_file_packet+0x238>)
   141da:	4b6f      	ldr	r3, [pc, #444]	; (14398 <store_file_packet+0x248>)
   141dc:	4798      	blx	r3
   141de:	2840      	cmp	r0, #64	; 0x40
   141e0:	d878      	bhi.n	142d4 <store_file_packet+0x184>
	p = strrchr(file_path_name, '.');
   141e2:	212e      	movs	r1, #46	; 0x2e
   141e4:	4868      	ldr	r0, [pc, #416]	; (14388 <store_file_packet+0x238>)
   141e6:	4b72      	ldr	r3, [pc, #456]	; (143b0 <store_file_packet+0x260>)
   141e8:	4798      	blx	r3
   141ea:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
   141ec:	d03b      	beq.n	14266 <store_file_packet+0x116>
		ext_len = strlen(p);
   141ee:	4b6a      	ldr	r3, [pc, #424]	; (14398 <store_file_packet+0x248>)
   141f0:	4798      	blx	r3
   141f2:	0007      	movs	r7, r0
   141f4:	b286      	uxth	r6, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   141f6:	2e07      	cmp	r6, #7
   141f8:	d821      	bhi.n	1423e <store_file_packet+0xee>
			strcpy(ext, p);
   141fa:	0021      	movs	r1, r4
   141fc:	a806      	add	r0, sp, #24
   141fe:	4b67      	ldr	r3, [pc, #412]	; (1439c <store_file_packet+0x24c>)
   14200:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   14202:	4861      	ldr	r0, [pc, #388]	; (14388 <store_file_packet+0x238>)
   14204:	4b64      	ldr	r3, [pc, #400]	; (14398 <store_file_packet+0x248>)
   14206:	4798      	blx	r3
   14208:	043f      	lsls	r7, r7, #16
   1420a:	0c3f      	lsrs	r7, r7, #16
   1420c:	1bc7      	subs	r7, r0, r7
   1420e:	2f3c      	cmp	r7, #60	; 0x3c
   14210:	d90a      	bls.n	14228 <store_file_packet+0xd8>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   14212:	273c      	movs	r7, #60	; 0x3c
   14214:	1bbf      	subs	r7, r7, r6
   14216:	b2bf      	uxth	r7, r7
				strncpy(name, file_path_name, name_len);
   14218:	003a      	movs	r2, r7
   1421a:	495b      	ldr	r1, [pc, #364]	; (14388 <store_file_packet+0x238>)
   1421c:	a809      	add	r0, sp, #36	; 0x24
   1421e:	4b65      	ldr	r3, [pc, #404]	; (143b4 <store_file_packet+0x264>)
   14220:	4798      	blx	r3
			valid_ext = true;
   14222:	2301      	movs	r3, #1
   14224:	469a      	mov	sl, r3
   14226:	e012      	b.n	1424e <store_file_packet+0xfe>
				name_len = (p - file_path_name);
   14228:	4957      	ldr	r1, [pc, #348]	; (14388 <store_file_packet+0x238>)
   1422a:	1a64      	subs	r4, r4, r1
   1422c:	b2a7      	uxth	r7, r4
				strncpy(name, file_path_name, name_len);
   1422e:	0424      	lsls	r4, r4, #16
   14230:	0c22      	lsrs	r2, r4, #16
   14232:	a809      	add	r0, sp, #36	; 0x24
   14234:	4b5f      	ldr	r3, [pc, #380]	; (143b4 <store_file_packet+0x264>)
   14236:	4798      	blx	r3
			valid_ext = true;
   14238:	2301      	movs	r3, #1
   1423a:	469a      	mov	sl, r3
   1423c:	e007      	b.n	1424e <store_file_packet+0xfe>
			strncpy(name, file_path_name, name_len);
   1423e:	223c      	movs	r2, #60	; 0x3c
   14240:	4951      	ldr	r1, [pc, #324]	; (14388 <store_file_packet+0x238>)
   14242:	a809      	add	r0, sp, #36	; 0x24
   14244:	4b5b      	ldr	r3, [pc, #364]	; (143b4 <store_file_packet+0x264>)
   14246:	4798      	blx	r3
	bool valid_ext = false;
   14248:	2300      	movs	r3, #0
   1424a:	469a      	mov	sl, r3
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1424c:	273c      	movs	r7, #60	; 0x3c
	name[name_len++] = '-';
   1424e:	1c7c      	adds	r4, r7, #1
   14250:	b2a4      	uxth	r4, r4
   14252:	222d      	movs	r2, #45	; 0x2d
   14254:	ab09      	add	r3, sp, #36	; 0x24
   14256:	55da      	strb	r2, [r3, r7]
   14258:	2601      	movs	r6, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   1425a:	1ce3      	adds	r3, r4, #3
   1425c:	aa09      	add	r2, sp, #36	; 0x24
   1425e:	4694      	mov	ip, r2
   14260:	4463      	add	r3, ip
   14262:	9303      	str	r3, [sp, #12]
   14264:	e019      	b.n	1429a <store_file_packet+0x14a>
		strncpy(name, file_path_name, name_len);
   14266:	223c      	movs	r2, #60	; 0x3c
   14268:	4947      	ldr	r1, [pc, #284]	; (14388 <store_file_packet+0x238>)
   1426a:	a809      	add	r0, sp, #36	; 0x24
   1426c:	4b51      	ldr	r3, [pc, #324]	; (143b4 <store_file_packet+0x264>)
   1426e:	4798      	blx	r3
	bool valid_ext = false;
   14270:	2300      	movs	r3, #0
   14272:	469a      	mov	sl, r3
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14274:	273c      	movs	r7, #60	; 0x3c
   14276:	e7ea      	b.n	1424e <store_file_packet+0xfe>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14278:	4f4a      	ldr	r7, [pc, #296]	; (143a4 <store_file_packet+0x254>)
   1427a:	2200      	movs	r2, #0
   1427c:	a909      	add	r1, sp, #36	; 0x24
   1427e:	0038      	movs	r0, r7
   14280:	4b49      	ldr	r3, [pc, #292]	; (143a8 <store_file_packet+0x258>)
   14282:	4798      	blx	r3
   14284:	0005      	movs	r5, r0
	f_close(&file_object);
   14286:	0038      	movs	r0, r7
   14288:	4b48      	ldr	r3, [pc, #288]	; (143ac <store_file_packet+0x25c>)
   1428a:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   1428c:	2d00      	cmp	r5, #0
   1428e:	d117      	bne.n	142c0 <store_file_packet+0x170>
   14290:	3601      	adds	r6, #1
	for (i = 1; i < count; i++) {
   14292:	4b49      	ldr	r3, [pc, #292]	; (143b8 <store_file_packet+0x268>)
   14294:	b2b2      	uxth	r2, r6
   14296:	429a      	cmp	r2, r3
   14298:	d81c      	bhi.n	142d4 <store_file_packet+0x184>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   1429a:	0032      	movs	r2, r6
   1429c:	4947      	ldr	r1, [pc, #284]	; (143bc <store_file_packet+0x26c>)
   1429e:	a805      	add	r0, sp, #20
   142a0:	4b47      	ldr	r3, [pc, #284]	; (143c0 <store_file_packet+0x270>)
   142a2:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   142a4:	ab09      	add	r3, sp, #36	; 0x24
   142a6:	1918      	adds	r0, r3, r4
   142a8:	2203      	movs	r2, #3
   142aa:	a905      	add	r1, sp, #20
   142ac:	4b41      	ldr	r3, [pc, #260]	; (143b4 <store_file_packet+0x264>)
   142ae:	4798      	blx	r3
		if (valid_ext) {
   142b0:	4653      	mov	r3, sl
   142b2:	2b00      	cmp	r3, #0
   142b4:	d0e0      	beq.n	14278 <store_file_packet+0x128>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   142b6:	a906      	add	r1, sp, #24
   142b8:	9803      	ldr	r0, [sp, #12]
   142ba:	4b38      	ldr	r3, [pc, #224]	; (1439c <store_file_packet+0x24c>)
   142bc:	4798      	blx	r3
   142be:	e7db      	b.n	14278 <store_file_packet+0x128>
			memset(file_path_name, 0, max_len);
   142c0:	4c31      	ldr	r4, [pc, #196]	; (14388 <store_file_packet+0x238>)
   142c2:	2240      	movs	r2, #64	; 0x40
   142c4:	2100      	movs	r1, #0
   142c6:	0020      	movs	r0, r4
   142c8:	4b35      	ldr	r3, [pc, #212]	; (143a0 <store_file_packet+0x250>)
   142ca:	4798      	blx	r3
			strcpy(file_path_name, name);
   142cc:	a909      	add	r1, sp, #36	; 0x24
   142ce:	0020      	movs	r0, r4
   142d0:	4b32      	ldr	r3, [pc, #200]	; (1439c <store_file_packet+0x24c>)
   142d2:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   142d4:	4c2c      	ldr	r4, [pc, #176]	; (14388 <store_file_packet+0x238>)
   142d6:	0022      	movs	r2, r4
   142d8:	493a      	ldr	r1, [pc, #232]	; (143c4 <store_file_packet+0x274>)
   142da:	2001      	movs	r0, #1
   142dc:	4b2d      	ldr	r3, [pc, #180]	; (14394 <store_file_packet+0x244>)
   142de:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   142e0:	220a      	movs	r2, #10
   142e2:	0021      	movs	r1, r4
   142e4:	482f      	ldr	r0, [pc, #188]	; (143a4 <store_file_packet+0x254>)
   142e6:	4b30      	ldr	r3, [pc, #192]	; (143a8 <store_file_packet+0x258>)
   142e8:	4798      	blx	r3
		if (ret != FR_OK) {
   142ea:	2800      	cmp	r0, #0
   142ec:	d122      	bne.n	14334 <store_file_packet+0x1e4>
		received_file_size = 0;
   142ee:	2200      	movs	r2, #0
   142f0:	4b35      	ldr	r3, [pc, #212]	; (143c8 <store_file_packet+0x278>)
   142f2:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   142f4:	2008      	movs	r0, #8
   142f6:	4b35      	ldr	r3, [pc, #212]	; (143cc <store_file_packet+0x27c>)
   142f8:	4798      	blx	r3
		UINT wsize = 0;
   142fa:	2300      	movs	r3, #0
   142fc:	9309      	str	r3, [sp, #36]	; 0x24
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   142fe:	ab09      	add	r3, sp, #36	; 0x24
   14300:	9a02      	ldr	r2, [sp, #8]
   14302:	9901      	ldr	r1, [sp, #4]
   14304:	4827      	ldr	r0, [pc, #156]	; (143a4 <store_file_packet+0x254>)
   14306:	4c32      	ldr	r4, [pc, #200]	; (143d0 <store_file_packet+0x280>)
   14308:	47a0      	blx	r4
		if (ret != FR_OK) {
   1430a:	2800      	cmp	r0, #0
   1430c:	d018      	beq.n	14340 <store_file_packet+0x1f0>
			f_close(&file_object);
   1430e:	4825      	ldr	r0, [pc, #148]	; (143a4 <store_file_packet+0x254>)
   14310:	4b26      	ldr	r3, [pc, #152]	; (143ac <store_file_packet+0x25c>)
   14312:	4798      	blx	r3
			add_state(CANCELED);
   14314:	2020      	movs	r0, #32
   14316:	4b2d      	ldr	r3, [pc, #180]	; (143cc <store_file_packet+0x27c>)
   14318:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   1431a:	492e      	ldr	r1, [pc, #184]	; (143d4 <store_file_packet+0x284>)
   1431c:	2001      	movs	r0, #1
   1431e:	4b1d      	ldr	r3, [pc, #116]	; (14394 <store_file_packet+0x244>)
   14320:	4798      	blx	r3
			return;
   14322:	e72f      	b.n	14184 <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   14324:	492c      	ldr	r1, [pc, #176]	; (143d8 <store_file_packet+0x288>)
   14326:	2001      	movs	r0, #1
   14328:	4b1a      	ldr	r3, [pc, #104]	; (14394 <store_file_packet+0x244>)
   1432a:	4798      	blx	r3
			add_state(CANCELED);
   1432c:	2020      	movs	r0, #32
   1432e:	4b27      	ldr	r3, [pc, #156]	; (143cc <store_file_packet+0x27c>)
   14330:	4798      	blx	r3
			return;
   14332:	e727      	b.n	14184 <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   14334:	0002      	movs	r2, r0
   14336:	4929      	ldr	r1, [pc, #164]	; (143dc <store_file_packet+0x28c>)
   14338:	2001      	movs	r0, #1
   1433a:	4b16      	ldr	r3, [pc, #88]	; (14394 <store_file_packet+0x244>)
   1433c:	4798      	blx	r3
			return;
   1433e:	e721      	b.n	14184 <store_file_packet+0x34>
		received_file_size += wsize;
   14340:	4c21      	ldr	r4, [pc, #132]	; (143c8 <store_file_packet+0x278>)
   14342:	6823      	ldr	r3, [r4, #0]
   14344:	9909      	ldr	r1, [sp, #36]	; 0x24
   14346:	468c      	mov	ip, r1
   14348:	4463      	add	r3, ip
   1434a:	001a      	movs	r2, r3
   1434c:	6023      	str	r3, [r4, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1434e:	4d24      	ldr	r5, [pc, #144]	; (143e0 <store_file_packet+0x290>)
   14350:	682b      	ldr	r3, [r5, #0]
   14352:	4924      	ldr	r1, [pc, #144]	; (143e4 <store_file_packet+0x294>)
   14354:	2001      	movs	r0, #1
   14356:	4e0f      	ldr	r6, [pc, #60]	; (14394 <store_file_packet+0x244>)
   14358:	47b0      	blx	r6
		if (received_file_size >= http_file_size) {
   1435a:	6822      	ldr	r2, [r4, #0]
   1435c:	682b      	ldr	r3, [r5, #0]
   1435e:	429a      	cmp	r2, r3
   14360:	d200      	bcs.n	14364 <store_file_packet+0x214>
   14362:	e70f      	b.n	14184 <store_file_packet+0x34>
			f_close(&file_object);
   14364:	480f      	ldr	r0, [pc, #60]	; (143a4 <store_file_packet+0x254>)
   14366:	4b11      	ldr	r3, [pc, #68]	; (143ac <store_file_packet+0x25c>)
   14368:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   1436a:	491f      	ldr	r1, [pc, #124]	; (143e8 <store_file_packet+0x298>)
   1436c:	2001      	movs	r0, #1
   1436e:	4b09      	ldr	r3, [pc, #36]	; (14394 <store_file_packet+0x244>)
   14370:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   14372:	2280      	movs	r2, #128	; 0x80
   14374:	0412      	lsls	r2, r2, #16
   14376:	4b1d      	ldr	r3, [pc, #116]	; (143ec <store_file_packet+0x29c>)
   14378:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   1437a:	2010      	movs	r0, #16
   1437c:	4b13      	ldr	r3, [pc, #76]	; (143cc <store_file_packet+0x27c>)
   1437e:	4798      	blx	r3
			return;
   14380:	e700      	b.n	14184 <store_file_packet+0x34>
   14382:	46c0      	nop			; (mov r8, r8)
   14384:	2000044f 	.word	0x2000044f
   14388:	20000064 	.word	0x20000064
   1438c:	00028445 	.word	0x00028445
   14390:	00028448 	.word	0x00028448
   14394:	0001906d 	.word	0x0001906d
   14398:	0002672f 	.word	0x0002672f
   1439c:	000266e3 	.word	0x000266e3
   143a0:	000262a3 	.word	0x000262a3
   143a4:	20000680 	.word	0x20000680
   143a8:	000211d5 	.word	0x000211d5
   143ac:	00021621 	.word	0x00021621
   143b0:	00026789 	.word	0x00026789
   143b4:	0002675f 	.word	0x0002675f
   143b8:	000003e7 	.word	0x000003e7
   143bc:	0002846c 	.word	0x0002846c
   143c0:	00026635 	.word	0x00026635
   143c4:	00028474 	.word	0x00028474
   143c8:	20000ae4 	.word	0x20000ae4
   143cc:	00013cf5 	.word	0x00013cf5
   143d0:	0002135d 	.word	0x0002135d
   143d4:	00028510 	.word	0x00028510
   143d8:	0002849c 	.word	0x0002849c
   143dc:	000284dc 	.word	0x000284dc
   143e0:	200006a4 	.word	0x200006a4
   143e4:	0002854c 	.word	0x0002854c
   143e8:	00028580 	.word	0x00028580
   143ec:	41004400 	.word	0x41004400

000143f0 <http_client_callback>:
{
   143f0:	b570      	push	{r4, r5, r6, lr}
   143f2:	0014      	movs	r4, r2
	switch (type) {
   143f4:	2904      	cmp	r1, #4
   143f6:	d807      	bhi.n	14408 <http_client_callback+0x18>
   143f8:	0089      	lsls	r1, r1, #2
   143fa:	4b2d      	ldr	r3, [pc, #180]	; (144b0 <http_client_callback+0xc0>)
   143fc:	585b      	ldr	r3, [r3, r1]
   143fe:	469f      	mov	pc, r3
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   14400:	492c      	ldr	r1, [pc, #176]	; (144b4 <http_client_callback+0xc4>)
   14402:	2001      	movs	r0, #1
   14404:	4b2c      	ldr	r3, [pc, #176]	; (144b8 <http_client_callback+0xc8>)
   14406:	4798      	blx	r3
}
   14408:	bd70      	pop	{r4, r5, r6, pc}
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   1440a:	492c      	ldr	r1, [pc, #176]	; (144bc <http_client_callback+0xcc>)
   1440c:	2001      	movs	r0, #1
   1440e:	4b2a      	ldr	r3, [pc, #168]	; (144b8 <http_client_callback+0xc8>)
   14410:	4798      	blx	r3
		add_state(GET_REQUESTED);
   14412:	2004      	movs	r0, #4
   14414:	4b2a      	ldr	r3, [pc, #168]	; (144c0 <http_client_callback+0xd0>)
   14416:	4798      	blx	r3
		break;
   14418:	e7f6      	b.n	14408 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   1441a:	8812      	ldrh	r2, [r2, #0]
   1441c:	6863      	ldr	r3, [r4, #4]
   1441e:	4929      	ldr	r1, [pc, #164]	; (144c4 <http_client_callback+0xd4>)
   14420:	2001      	movs	r0, #1
   14422:	4d25      	ldr	r5, [pc, #148]	; (144b8 <http_client_callback+0xc8>)
   14424:	47a8      	blx	r5
		if ((unsigned int)data->recv_response.response_code == 200) {
   14426:	8823      	ldrh	r3, [r4, #0]
   14428:	2bc8      	cmp	r3, #200	; 0xc8
   1442a:	d110      	bne.n	1444e <http_client_callback+0x5e>
			http_file_size = data->recv_response.content_length;
   1442c:	6861      	ldr	r1, [r4, #4]
   1442e:	4b26      	ldr	r3, [pc, #152]	; (144c8 <http_client_callback+0xd8>)
   14430:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   14432:	2200      	movs	r2, #0
   14434:	4b25      	ldr	r3, [pc, #148]	; (144cc <http_client_callback+0xdc>)
   14436:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   14438:	2380      	movs	r3, #128	; 0x80
   1443a:	009b      	lsls	r3, r3, #2
   1443c:	4299      	cmp	r1, r3
   1443e:	d8e3      	bhi.n	14408 <http_client_callback+0x18>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14440:	68a0      	ldr	r0, [r4, #8]
   14442:	4b23      	ldr	r3, [pc, #140]	; (144d0 <http_client_callback+0xe0>)
   14444:	4798      	blx	r3
			add_state(COMPLETED);
   14446:	2010      	movs	r0, #16
   14448:	4b1d      	ldr	r3, [pc, #116]	; (144c0 <http_client_callback+0xd0>)
   1444a:	4798      	blx	r3
   1444c:	e7dc      	b.n	14408 <http_client_callback+0x18>
			add_state(CANCELED);
   1444e:	2020      	movs	r0, #32
   14450:	4b1b      	ldr	r3, [pc, #108]	; (144c0 <http_client_callback+0xd0>)
   14452:	4798      	blx	r3
			return;
   14454:	e7d8      	b.n	14408 <http_client_callback+0x18>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14456:	6811      	ldr	r1, [r2, #0]
   14458:	6850      	ldr	r0, [r2, #4]
   1445a:	4b1d      	ldr	r3, [pc, #116]	; (144d0 <http_client_callback+0xe0>)
   1445c:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   1445e:	7a23      	ldrb	r3, [r4, #8]
   14460:	2b00      	cmp	r3, #0
   14462:	d0d1      	beq.n	14408 <http_client_callback+0x18>
			add_state(COMPLETED);
   14464:	2010      	movs	r0, #16
   14466:	4b16      	ldr	r3, [pc, #88]	; (144c0 <http_client_callback+0xd0>)
   14468:	4798      	blx	r3
   1446a:	e7cd      	b.n	14408 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   1446c:	6812      	ldr	r2, [r2, #0]
   1446e:	4919      	ldr	r1, [pc, #100]	; (144d4 <http_client_callback+0xe4>)
   14470:	2001      	movs	r0, #1
   14472:	4b11      	ldr	r3, [pc, #68]	; (144b8 <http_client_callback+0xc8>)
   14474:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   14476:	6823      	ldr	r3, [r4, #0]
   14478:	330b      	adds	r3, #11
   1447a:	d1c5      	bne.n	14408 <http_client_callback+0x18>
	return ((down_state & mask) != 0);
   1447c:	4b16      	ldr	r3, [pc, #88]	; (144d8 <http_client_callback+0xe8>)
   1447e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   14480:	071b      	lsls	r3, r3, #28
   14482:	d406      	bmi.n	14492 <http_client_callback+0xa2>
	return ((down_state & mask) != 0);
   14484:	4b14      	ldr	r3, [pc, #80]	; (144d8 <http_client_callback+0xe8>)
   14486:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   14488:	075a      	lsls	r2, r3, #29
   1448a:	d40b      	bmi.n	144a4 <http_client_callback+0xb4>
			start_download();
   1448c:	4b13      	ldr	r3, [pc, #76]	; (144dc <http_client_callback+0xec>)
   1448e:	4798      	blx	r3
   14490:	e7ba      	b.n	14408 <http_client_callback+0x18>
				f_close(&file_object);
   14492:	4813      	ldr	r0, [pc, #76]	; (144e0 <http_client_callback+0xf0>)
   14494:	4b13      	ldr	r3, [pc, #76]	; (144e4 <http_client_callback+0xf4>)
   14496:	4798      	blx	r3
	down_state &= ~mask;
   14498:	4a0f      	ldr	r2, [pc, #60]	; (144d8 <http_client_callback+0xe8>)
   1449a:	7813      	ldrb	r3, [r2, #0]
   1449c:	2108      	movs	r1, #8
   1449e:	438b      	bics	r3, r1
   144a0:	7013      	strb	r3, [r2, #0]
   144a2:	e7ef      	b.n	14484 <http_client_callback+0x94>
   144a4:	2204      	movs	r2, #4
   144a6:	4393      	bics	r3, r2
   144a8:	4a0b      	ldr	r2, [pc, #44]	; (144d8 <http_client_callback+0xe8>)
   144aa:	7013      	strb	r3, [r2, #0]
   144ac:	e7ee      	b.n	1448c <http_client_callback+0x9c>
   144ae:	46c0      	nop			; (mov r8, r8)
   144b0:	00027e40 	.word	0x00027e40
   144b4:	00027fd4 	.word	0x00027fd4
   144b8:	0001906d 	.word	0x0001906d
   144bc:	0002800c 	.word	0x0002800c
   144c0:	00013cf5 	.word	0x00013cf5
   144c4:	00028038 	.word	0x00028038
   144c8:	200006a4 	.word	0x200006a4
   144cc:	20000ae4 	.word	0x20000ae4
   144d0:	00014151 	.word	0x00014151
   144d4:	00028074 	.word	0x00028074
   144d8:	2000044f 	.word	0x2000044f
   144dc:	00013efd 	.word	0x00013efd
   144e0:	20000680 	.word	0x20000680
   144e4:	00021621 	.word	0x00021621

000144e8 <wifi_cb>:
{
   144e8:	b510      	push	{r4, lr}
   144ea:	b082      	sub	sp, #8
	switch (u8MsgType) {
   144ec:	282c      	cmp	r0, #44	; 0x2c
   144ee:	d003      	beq.n	144f8 <wifi_cb+0x10>
   144f0:	2832      	cmp	r0, #50	; 0x32
   144f2:	d037      	beq.n	14564 <wifi_cb+0x7c>
}
   144f4:	b002      	add	sp, #8
   144f6:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   144f8:	780b      	ldrb	r3, [r1, #0]
   144fa:	2b01      	cmp	r3, #1
   144fc:	d01d      	beq.n	1453a <wifi_cb+0x52>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   144fe:	2b00      	cmp	r3, #0
   14500:	d1f8      	bne.n	144f4 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   14502:	4928      	ldr	r1, [pc, #160]	; (145a4 <wifi_cb+0xbc>)
   14504:	2001      	movs	r0, #1
   14506:	4b28      	ldr	r3, [pc, #160]	; (145a8 <wifi_cb+0xc0>)
   14508:	4798      	blx	r3
	down_state &= ~mask;
   1450a:	4a28      	ldr	r2, [pc, #160]	; (145ac <wifi_cb+0xc4>)
   1450c:	7813      	ldrb	r3, [r2, #0]
   1450e:	2102      	movs	r1, #2
   14510:	438b      	bics	r3, r1
   14512:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   14514:	071b      	lsls	r3, r3, #28
   14516:	d417      	bmi.n	14548 <wifi_cb+0x60>
	return ((down_state & mask) != 0);
   14518:	4b24      	ldr	r3, [pc, #144]	; (145ac <wifi_cb+0xc4>)
   1451a:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   1451c:	075a      	lsls	r2, r3, #29
   1451e:	d41c      	bmi.n	1455a <wifi_cb+0x72>
			mqtt_disconnect(&mqtt_inst, 1);
   14520:	2101      	movs	r1, #1
   14522:	4823      	ldr	r0, [pc, #140]	; (145b0 <wifi_cb+0xc8>)
   14524:	4b23      	ldr	r3, [pc, #140]	; (145b4 <wifi_cb+0xcc>)
   14526:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   14528:	23ff      	movs	r3, #255	; 0xff
   1452a:	9300      	str	r3, [sp, #0]
   1452c:	4b22      	ldr	r3, [pc, #136]	; (145b8 <wifi_cb+0xd0>)
   1452e:	2202      	movs	r2, #2
   14530:	210b      	movs	r1, #11
   14532:	4822      	ldr	r0, [pc, #136]	; (145bc <wifi_cb+0xd4>)
   14534:	4c22      	ldr	r4, [pc, #136]	; (145c0 <wifi_cb+0xd8>)
   14536:	47a0      	blx	r4
   14538:	e7dc      	b.n	144f4 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   1453a:	4922      	ldr	r1, [pc, #136]	; (145c4 <wifi_cb+0xdc>)
   1453c:	2001      	movs	r0, #1
   1453e:	4b1a      	ldr	r3, [pc, #104]	; (145a8 <wifi_cb+0xc0>)
   14540:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   14542:	4b21      	ldr	r3, [pc, #132]	; (145c8 <wifi_cb+0xe0>)
   14544:	4798      	blx	r3
   14546:	e7d5      	b.n	144f4 <wifi_cb+0xc>
				f_close(&file_object);
   14548:	4820      	ldr	r0, [pc, #128]	; (145cc <wifi_cb+0xe4>)
   1454a:	4b21      	ldr	r3, [pc, #132]	; (145d0 <wifi_cb+0xe8>)
   1454c:	4798      	blx	r3
	down_state &= ~mask;
   1454e:	4a17      	ldr	r2, [pc, #92]	; (145ac <wifi_cb+0xc4>)
   14550:	7813      	ldrb	r3, [r2, #0]
   14552:	2108      	movs	r1, #8
   14554:	438b      	bics	r3, r1
   14556:	7013      	strb	r3, [r2, #0]
   14558:	e7de      	b.n	14518 <wifi_cb+0x30>
   1455a:	2204      	movs	r2, #4
   1455c:	4393      	bics	r3, r2
   1455e:	4a13      	ldr	r2, [pc, #76]	; (145ac <wifi_cb+0xc4>)
   14560:	7013      	strb	r3, [r2, #0]
   14562:	e7dd      	b.n	14520 <wifi_cb+0x38>
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14564:	784b      	ldrb	r3, [r1, #1]
   14566:	780a      	ldrb	r2, [r1, #0]
   14568:	78c8      	ldrb	r0, [r1, #3]
   1456a:	9001      	str	r0, [sp, #4]
   1456c:	7889      	ldrb	r1, [r1, #2]
   1456e:	9100      	str	r1, [sp, #0]
   14570:	4918      	ldr	r1, [pc, #96]	; (145d4 <wifi_cb+0xec>)
   14572:	2001      	movs	r0, #1
   14574:	4c0c      	ldr	r4, [pc, #48]	; (145a8 <wifi_cb+0xc0>)
   14576:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   14578:	2002      	movs	r0, #2
   1457a:	4b17      	ldr	r3, [pc, #92]	; (145d8 <wifi_cb+0xf0>)
   1457c:	4798      	blx	r3
		if(do_download_flag == 1)
   1457e:	4b17      	ldr	r3, [pc, #92]	; (145dc <wifi_cb+0xf4>)
   14580:	781b      	ldrb	r3, [r3, #0]
   14582:	2b01      	cmp	r3, #1
   14584:	d00a      	beq.n	1459c <wifi_cb+0xb4>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   14586:	4916      	ldr	r1, [pc, #88]	; (145e0 <wifi_cb+0xf8>)
   14588:	4809      	ldr	r0, [pc, #36]	; (145b0 <wifi_cb+0xc8>)
   1458a:	4b16      	ldr	r3, [pc, #88]	; (145e4 <wifi_cb+0xfc>)
   1458c:	4798      	blx	r3
   1458e:	2800      	cmp	r0, #0
   14590:	d0b0      	beq.n	144f4 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14592:	4915      	ldr	r1, [pc, #84]	; (145e8 <wifi_cb+0x100>)
   14594:	2001      	movs	r0, #1
   14596:	4b04      	ldr	r3, [pc, #16]	; (145a8 <wifi_cb+0xc0>)
   14598:	4798      	blx	r3
}
   1459a:	e7ab      	b.n	144f4 <wifi_cb+0xc>
			start_download();
   1459c:	4b13      	ldr	r3, [pc, #76]	; (145ec <wifi_cb+0x104>)
   1459e:	4798      	blx	r3
   145a0:	e7a8      	b.n	144f4 <wifi_cb+0xc>
   145a2:	46c0      	nop			; (mov r8, r8)
   145a4:	00028750 	.word	0x00028750
   145a8:	0001906d 	.word	0x0001906d
   145ac:	2000044f 	.word	0x2000044f
   145b0:	200006ac 	.word	0x200006ac
   145b4:	00022331 	.word	0x00022331
   145b8:	00028774 	.word	0x00028774
   145bc:	00028780 	.word	0x00028780
   145c0:	0001b491 	.word	0x0001b491
   145c4:	00028730 	.word	0x00028730
   145c8:	0001b4ad 	.word	0x0001b4ad
   145cc:	20000680 	.word	0x20000680
   145d0:	00021621 	.word	0x00021621
   145d4:	0002878c 	.word	0x0002878c
   145d8:	00013cf5 	.word	0x00013cf5
   145dc:	2000044e 	.word	0x2000044e
   145e0:	000281b0 	.word	0x000281b0
   145e4:	0002226d 	.word	0x0002226d
   145e8:	000287b4 	.word	0x000287b4
   145ec:	00013efd 	.word	0x00013efd

000145f0 <init_storage>:
{
   145f0:	b570      	push	{r4, r5, r6, lr}
	sd_mmc_init();
   145f2:	4b1c      	ldr	r3, [pc, #112]	; (14664 <init_storage+0x74>)
   145f4:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"init_storage: please plug an SD/MMC card in slot...\r\n");
   145f6:	491c      	ldr	r1, [pc, #112]	; (14668 <init_storage+0x78>)
   145f8:	2001      	movs	r0, #1
   145fa:	4b1c      	ldr	r3, [pc, #112]	; (1466c <init_storage+0x7c>)
   145fc:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   145fe:	4e1c      	ldr	r6, [pc, #112]	; (14670 <init_storage+0x80>)
				LogMessage(LOG_DEBUG_LVL,"init_storage: SD Card install failed.\r\n");
   14600:	4c1a      	ldr	r4, [pc, #104]	; (1466c <init_storage+0x7c>)
   14602:	e009      	b.n	14618 <init_storage+0x28>
   14604:	491b      	ldr	r1, [pc, #108]	; (14674 <init_storage+0x84>)
   14606:	47a0      	blx	r4
				LogMessage(LOG_DEBUG_LVL,"init_storage: try unplug and re-plug the card.\r\n");
   14608:	491b      	ldr	r1, [pc, #108]	; (14678 <init_storage+0x88>)
   1460a:	2001      	movs	r0, #1
   1460c:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1460e:	4d1b      	ldr	r5, [pc, #108]	; (1467c <init_storage+0x8c>)
   14610:	2000      	movs	r0, #0
   14612:	47a8      	blx	r5
   14614:	2802      	cmp	r0, #2
   14616:	d1fb      	bne.n	14610 <init_storage+0x20>
			status = sd_mmc_test_unit_ready(0);
   14618:	2000      	movs	r0, #0
   1461a:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
   1461c:	2801      	cmp	r0, #1
   1461e:	d0f1      	beq.n	14604 <init_storage+0x14>
		} while (CTRL_GOOD != status);
   14620:	2800      	cmp	r0, #0
   14622:	d1f9      	bne.n	14618 <init_storage+0x28>
		LogMessage(LOG_DEBUG_LVL,"init_storage: mounting SD card...\r\n");
   14624:	4916      	ldr	r1, [pc, #88]	; (14680 <init_storage+0x90>)
   14626:	3001      	adds	r0, #1
   14628:	4b10      	ldr	r3, [pc, #64]	; (1466c <init_storage+0x7c>)
   1462a:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   1462c:	4c15      	ldr	r4, [pc, #84]	; (14684 <init_storage+0x94>)
   1462e:	228c      	movs	r2, #140	; 0x8c
   14630:	0092      	lsls	r2, r2, #2
   14632:	2100      	movs	r1, #0
   14634:	0020      	movs	r0, r4
   14636:	4b14      	ldr	r3, [pc, #80]	; (14688 <init_storage+0x98>)
   14638:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1463a:	0021      	movs	r1, r4
   1463c:	2000      	movs	r0, #0
   1463e:	4b13      	ldr	r3, [pc, #76]	; (1468c <init_storage+0x9c>)
   14640:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   14642:	280b      	cmp	r0, #11
   14644:	d007      	beq.n	14656 <init_storage+0x66>
		LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount OK.\r\n");
   14646:	4912      	ldr	r1, [pc, #72]	; (14690 <init_storage+0xa0>)
   14648:	2001      	movs	r0, #1
   1464a:	4b08      	ldr	r3, [pc, #32]	; (1466c <init_storage+0x7c>)
   1464c:	4798      	blx	r3
		add_state(STORAGE_READY);
   1464e:	2001      	movs	r0, #1
   14650:	4b10      	ldr	r3, [pc, #64]	; (14694 <init_storage+0xa4>)
   14652:	4798      	blx	r3
}
   14654:	bd70      	pop	{r4, r5, r6, pc}
			LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount failed! (res %d)\r\n", res);
   14656:	220b      	movs	r2, #11
   14658:	490f      	ldr	r1, [pc, #60]	; (14698 <init_storage+0xa8>)
   1465a:	380a      	subs	r0, #10
   1465c:	4b03      	ldr	r3, [pc, #12]	; (1466c <init_storage+0x7c>)
   1465e:	4798      	blx	r3
			return;
   14660:	e7f8      	b.n	14654 <init_storage+0x64>
   14662:	46c0      	nop			; (mov r8, r8)
   14664:	000191e9 	.word	0x000191e9
   14668:	000280a4 	.word	0x000280a4
   1466c:	0001906d 	.word	0x0001906d
   14670:	0001991d 	.word	0x0001991d
   14674:	000280dc 	.word	0x000280dc
   14678:	00028104 	.word	0x00028104
   1467c:	00019209 	.word	0x00019209
   14680:	00028138 	.word	0x00028138
   14684:	20000450 	.word	0x20000450
   14688:	000262a3 	.word	0x000262a3
   1468c:	000211a5 	.word	0x000211a5
   14690:	0002818c 	.word	0x0002818c
   14694:	00013cf5 	.word	0x00013cf5
   14698:	0002815c 	.word	0x0002815c

0001469c <configure_extint_channel>:
{
   1469c:	b510      	push	{r4, lr}
   1469e:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   146a0:	ac01      	add	r4, sp, #4
   146a2:	0020      	movs	r0, r4
   146a4:	4b07      	ldr	r3, [pc, #28]	; (146c4 <configure_extint_channel+0x28>)
   146a6:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   146a8:	2337      	movs	r3, #55	; 0x37
   146aa:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   146ac:	2300      	movs	r3, #0
   146ae:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   146b0:	3301      	adds	r3, #1
   146b2:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   146b4:	3301      	adds	r3, #1
   146b6:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   146b8:	0021      	movs	r1, r4
   146ba:	2007      	movs	r0, #7
   146bc:	4b02      	ldr	r3, [pc, #8]	; (146c8 <configure_extint_channel+0x2c>)
   146be:	4798      	blx	r3
}
   146c0:	b004      	add	sp, #16
   146c2:	bd10      	pop	{r4, pc}
   146c4:	0001d7d5 	.word	0x0001d7d5
   146c8:	0001d7e9 	.word	0x0001d7e9

000146cc <configure_extint_callbacks>:
{
   146cc:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   146ce:	2200      	movs	r2, #0
   146d0:	2107      	movs	r1, #7
   146d2:	4804      	ldr	r0, [pc, #16]	; (146e4 <configure_extint_callbacks+0x18>)
   146d4:	4b04      	ldr	r3, [pc, #16]	; (146e8 <configure_extint_callbacks+0x1c>)
   146d6:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   146d8:	2100      	movs	r1, #0
   146da:	2007      	movs	r0, #7
   146dc:	4b03      	ldr	r3, [pc, #12]	; (146ec <configure_extint_callbacks+0x20>)
   146de:	4798      	blx	r3
}
   146e0:	bd10      	pop	{r4, pc}
   146e2:	46c0      	nop			; (mov r8, r8)
   146e4:	00013d05 	.word	0x00013d05
   146e8:	0001d691 	.word	0x0001d691
   146ec:	0001d6bd 	.word	0x0001d6bd

000146f0 <SendRealTimeUserGameInput>:
		mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
	}
}

void SendRealTimeUserGameInput(int usr, int led, int act)
{	
   146f0:	b530      	push	{r4, r5, lr}
   146f2:	b083      	sub	sp, #12
   146f4:	0004      	movs	r4, r0
   146f6:	000b      	movs	r3, r1
	
	snprintf(mqtt_msg, 63, "%d,%d", led, act);
   146f8:	9200      	str	r2, [sp, #0]
   146fa:	4a13      	ldr	r2, [pc, #76]	; (14748 <SendRealTimeUserGameInput+0x58>)
   146fc:	213f      	movs	r1, #63	; 0x3f
   146fe:	4813      	ldr	r0, [pc, #76]	; (1474c <SendRealTimeUserGameInput+0x5c>)
   14700:	4d13      	ldr	r5, [pc, #76]	; (14750 <SendRealTimeUserGameInput+0x60>)
   14702:	47a8      	blx	r5
	if(usr == 1)
   14704:	2c01      	cmp	r4, #1
   14706:	d00f      	beq.n	14728 <SendRealTimeUserGameInput+0x38>
	{	
		mqtt_publish(&mqtt_inst, "RT_usr1_input", mqtt_msg, strlen(mqtt_msg), 1, 0);
	}
	else
	{
		mqtt_publish(&mqtt_inst, RT_GAME_INPUT_USR2, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14708:	4c10      	ldr	r4, [pc, #64]	; (1474c <SendRealTimeUserGameInput+0x5c>)
   1470a:	0020      	movs	r0, r4
   1470c:	4b11      	ldr	r3, [pc, #68]	; (14754 <SendRealTimeUserGameInput+0x64>)
   1470e:	4798      	blx	r3
   14710:	0003      	movs	r3, r0
   14712:	2200      	movs	r2, #0
   14714:	9201      	str	r2, [sp, #4]
   14716:	3201      	adds	r2, #1
   14718:	9200      	str	r2, [sp, #0]
   1471a:	0022      	movs	r2, r4
   1471c:	490e      	ldr	r1, [pc, #56]	; (14758 <SendRealTimeUserGameInput+0x68>)
   1471e:	480f      	ldr	r0, [pc, #60]	; (1475c <SendRealTimeUserGameInput+0x6c>)
   14720:	4c0f      	ldr	r4, [pc, #60]	; (14760 <SendRealTimeUserGameInput+0x70>)
   14722:	47a0      	blx	r4
	}
}
   14724:	b003      	add	sp, #12
   14726:	bd30      	pop	{r4, r5, pc}
		mqtt_publish(&mqtt_inst, "RT_usr1_input", mqtt_msg, strlen(mqtt_msg), 1, 0);
   14728:	4c08      	ldr	r4, [pc, #32]	; (1474c <SendRealTimeUserGameInput+0x5c>)
   1472a:	0020      	movs	r0, r4
   1472c:	4b09      	ldr	r3, [pc, #36]	; (14754 <SendRealTimeUserGameInput+0x64>)
   1472e:	4798      	blx	r3
   14730:	0003      	movs	r3, r0
   14732:	2200      	movs	r2, #0
   14734:	9201      	str	r2, [sp, #4]
   14736:	3201      	adds	r2, #1
   14738:	9200      	str	r2, [sp, #0]
   1473a:	0022      	movs	r2, r4
   1473c:	4909      	ldr	r1, [pc, #36]	; (14764 <SendRealTimeUserGameInput+0x74>)
   1473e:	4807      	ldr	r0, [pc, #28]	; (1475c <SendRealTimeUserGameInput+0x6c>)
   14740:	4c07      	ldr	r4, [pc, #28]	; (14760 <SendRealTimeUserGameInput+0x70>)
   14742:	47a0      	blx	r4
   14744:	e7ee      	b.n	14724 <SendRealTimeUserGameInput+0x34>
   14746:	46c0      	nop			; (mov r8, r8)
   14748:	00027e60 	.word	0x00027e60
   1474c:	20000024 	.word	0x20000024
   14750:	000265d1 	.word	0x000265d1
   14754:	0002672f 	.word	0x0002672f
   14758:	00027e88 	.word	0x00027e88
   1475c:	200006ac 	.word	0x200006ac
   14760:	00022361 	.word	0x00022361
   14764:	00027e78 	.word	0x00027e78

00014768 <SendAnswerKey>:

void SendAnswerKey(int steps[6])
{
   14768:	b530      	push	{r4, r5, lr}
   1476a:	b087      	sub	sp, #28
	snprintf(mqtt_msg,63, "%d,%d,%d,%d,%d,%d", steps[0], steps[1],steps[2],steps[3],steps[4],steps[5]);
   1476c:	6803      	ldr	r3, [r0, #0]
   1476e:	4c0f      	ldr	r4, [pc, #60]	; (147ac <SendAnswerKey+0x44>)
   14770:	6942      	ldr	r2, [r0, #20]
   14772:	9204      	str	r2, [sp, #16]
   14774:	6902      	ldr	r2, [r0, #16]
   14776:	9203      	str	r2, [sp, #12]
   14778:	68c2      	ldr	r2, [r0, #12]
   1477a:	9202      	str	r2, [sp, #8]
   1477c:	6882      	ldr	r2, [r0, #8]
   1477e:	9201      	str	r2, [sp, #4]
   14780:	6842      	ldr	r2, [r0, #4]
   14782:	9200      	str	r2, [sp, #0]
   14784:	4a0a      	ldr	r2, [pc, #40]	; (147b0 <SendAnswerKey+0x48>)
   14786:	213f      	movs	r1, #63	; 0x3f
   14788:	0020      	movs	r0, r4
   1478a:	4d0a      	ldr	r5, [pc, #40]	; (147b4 <SendAnswerKey+0x4c>)
   1478c:	47a8      	blx	r5
	mqtt_publish(&mqtt_inst, ANS_SEQ_USR1, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1478e:	0020      	movs	r0, r4
   14790:	4b09      	ldr	r3, [pc, #36]	; (147b8 <SendAnswerKey+0x50>)
   14792:	4798      	blx	r3
   14794:	0003      	movs	r3, r0
   14796:	2200      	movs	r2, #0
   14798:	9201      	str	r2, [sp, #4]
   1479a:	3201      	adds	r2, #1
   1479c:	9200      	str	r2, [sp, #0]
   1479e:	0022      	movs	r2, r4
   147a0:	4906      	ldr	r1, [pc, #24]	; (147bc <SendAnswerKey+0x54>)
   147a2:	4807      	ldr	r0, [pc, #28]	; (147c0 <SendAnswerKey+0x58>)
   147a4:	4c07      	ldr	r4, [pc, #28]	; (147c4 <SendAnswerKey+0x5c>)
   147a6:	47a0      	blx	r4
}
   147a8:	b007      	add	sp, #28
   147aa:	bd30      	pop	{r4, r5, pc}
   147ac:	20000024 	.word	0x20000024
   147b0:	00027e54 	.word	0x00027e54
   147b4:	000265d1 	.word	0x000265d1
   147b8:	0002672f 	.word	0x0002672f
   147bc:	00027e68 	.word	0x00027e68
   147c0:	200006ac 	.word	0x200006ac
   147c4:	00022361 	.word	0x00022361

000147c8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask( void *pvParameters )
{
   147c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ca:	46c6      	mov	lr, r8
   147cc:	b500      	push	{lr}
   147ce:	b092      	sub	sp, #72	; 0x48
	tstrWifiInitParam param;
	int8_t ret;
	vTaskDelay(100);
   147d0:	2064      	movs	r0, #100	; 0x64
   147d2:	4bdb      	ldr	r3, [pc, #876]	; (14b40 <vWifiTask+0x378>)
   147d4:	4798      	blx	r3
	down_state = NOT_READY;
   147d6:	2200      	movs	r2, #0
   147d8:	4bda      	ldr	r3, [pc, #872]	; (14b44 <vWifiTask+0x37c>)
   147da:	701a      	strb	r2, [r3, #0]
	init_state();
	//Create buffers to send data
	xQueueWifiState = xQueueCreate( 5, sizeof( uint32_t ) );
   147dc:	2104      	movs	r1, #4
   147de:	2005      	movs	r0, #5
   147e0:	4cd9      	ldr	r4, [pc, #868]	; (14b48 <vWifiTask+0x380>)
   147e2:	47a0      	blx	r4
   147e4:	4dd9      	ldr	r5, [pc, #868]	; (14b4c <vWifiTask+0x384>)
   147e6:	6028      	str	r0, [r5, #0]
	xQueueImuBuffer  = xQueueCreate( 5, sizeof( struct ImuDataPacket ) );
   147e8:	2200      	movs	r2, #0
   147ea:	2106      	movs	r1, #6
   147ec:	2005      	movs	r0, #5
   147ee:	47a0      	blx	r4
   147f0:	4bd7      	ldr	r3, [pc, #860]	; (14b50 <vWifiTask+0x388>)
   147f2:	6018      	str	r0, [r3, #0]
	xQueueGameBuffer = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   147f4:	2200      	movs	r2, #0
   147f6:	2114      	movs	r1, #20
   147f8:	2002      	movs	r0, #2
   147fa:	47a0      	blx	r4
   147fc:	4bd5      	ldr	r3, [pc, #852]	; (14b54 <vWifiTask+0x38c>)
   147fe:	6018      	str	r0, [r3, #0]
	xQueueDistanceBuffer = xQueueCreate ( 5, sizeof( uint16_t ) );
   14800:	2200      	movs	r2, #0
   14802:	2102      	movs	r1, #2
   14804:	2005      	movs	r0, #5
   14806:	47a0      	blx	r4
   14808:	4bd3      	ldr	r3, [pc, #844]	; (14b58 <vWifiTask+0x390>)
   1480a:	6018      	str	r0, [r3, #0]

	if(xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL)
   1480c:	682b      	ldr	r3, [r5, #0]
   1480e:	2b00      	cmp	r3, #0
   14810:	d04a      	beq.n	148a8 <vWifiTask+0xe0>
   14812:	4bcf      	ldr	r3, [pc, #828]	; (14b50 <vWifiTask+0x388>)
   14814:	681b      	ldr	r3, [r3, #0]
   14816:	2b00      	cmp	r3, #0
   14818:	d046      	beq.n	148a8 <vWifiTask+0xe0>
   1481a:	4bce      	ldr	r3, [pc, #824]	; (14b54 <vWifiTask+0x38c>)
   1481c:	681b      	ldr	r3, [r3, #0]
   1481e:	2b00      	cmp	r3, #0
   14820:	d042      	beq.n	148a8 <vWifiTask+0xe0>
   14822:	2800      	cmp	r0, #0
   14824:	d040      	beq.n	148a8 <vWifiTask+0xe0>
	{
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
	}

	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   14826:	48cd      	ldr	r0, [pc, #820]	; (14b5c <vWifiTask+0x394>)
   14828:	4bcd      	ldr	r3, [pc, #820]	; (14b60 <vWifiTask+0x398>)
   1482a:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   1482c:	ac05      	add	r4, sp, #20
   1482e:	0020      	movs	r0, r4
   14830:	4bcc      	ldr	r3, [pc, #816]	; (14b64 <vWifiTask+0x39c>)
   14832:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   14834:	4dcc      	ldr	r5, [pc, #816]	; (14b68 <vWifiTask+0x3a0>)
   14836:	0021      	movs	r1, r4
   14838:	0028      	movs	r0, r5
   1483a:	4bcc      	ldr	r3, [pc, #816]	; (14b6c <vWifiTask+0x3a4>)
   1483c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   1483e:	0028      	movs	r0, r5
   14840:	4bcb      	ldr	r3, [pc, #812]	; (14b70 <vWifiTask+0x3a8>)
   14842:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   14844:	0020      	movs	r0, r4
   14846:	4bcb      	ldr	r3, [pc, #812]	; (14b74 <vWifiTask+0x3ac>)
   14848:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1484a:	2380      	movs	r3, #128	; 0x80
   1484c:	009b      	lsls	r3, r3, #2
   1484e:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   14850:	6065      	str	r5, [r4, #4]
	httpc_conf.port = 443;
   14852:	23bc      	movs	r3, #188	; 0xbc
   14854:	33ff      	adds	r3, #255	; 0xff
   14856:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   14858:	3bbb      	subs	r3, #187	; 0xbb
   1485a:	3bff      	subs	r3, #255	; 0xff
   1485c:	70a3      	strb	r3, [r4, #2]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1485e:	0021      	movs	r1, r4
   14860:	48c5      	ldr	r0, [pc, #788]	; (14b78 <vWifiTask+0x3b0>)
   14862:	4bc6      	ldr	r3, [pc, #792]	; (14b7c <vWifiTask+0x3b4>)
   14864:	4798      	blx	r3
   14866:	1e02      	subs	r2, r0, #0
	if (ret < 0) {
   14868:	db22      	blt.n	148b0 <vWifiTask+0xe8>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   1486a:	49c5      	ldr	r1, [pc, #788]	; (14b80 <vWifiTask+0x3b8>)
   1486c:	48c2      	ldr	r0, [pc, #776]	; (14b78 <vWifiTask+0x3b0>)
   1486e:	4bc5      	ldr	r3, [pc, #788]	; (14b84 <vWifiTask+0x3bc>)
   14870:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();

	/* Initialize the MQTT service. */
	configure_mqtt();
   14872:	4bc5      	ldr	r3, [pc, #788]	; (14b88 <vWifiTask+0x3c0>)
   14874:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	init_storage();
   14876:	4bc5      	ldr	r3, [pc, #788]	; (14b8c <vWifiTask+0x3c4>)
   14878:	4798      	blx	r3

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   1487a:	4bc5      	ldr	r3, [pc, #788]	; (14b90 <vWifiTask+0x3c8>)
   1487c:	4798      	blx	r3
	configure_extint_callbacks();
   1487e:	4bc5      	ldr	r3, [pc, #788]	; (14b94 <vWifiTask+0x3cc>)
   14880:	4798      	blx	r3

	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   14882:	2218      	movs	r2, #24
   14884:	2100      	movs	r1, #0
   14886:	a80c      	add	r0, sp, #48	; 0x30
   14888:	4bc3      	ldr	r3, [pc, #780]	; (14b98 <vWifiTask+0x3d0>)
   1488a:	4798      	blx	r3

	nm_bsp_init();
   1488c:	4bc3      	ldr	r3, [pc, #780]	; (14b9c <vWifiTask+0x3d4>)
   1488e:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   14890:	4bc3      	ldr	r3, [pc, #780]	; (14ba0 <vWifiTask+0x3d8>)
   14892:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
   14894:	a80c      	add	r0, sp, #48	; 0x30
   14896:	4bc3      	ldr	r3, [pc, #780]	; (14ba4 <vWifiTask+0x3dc>)
   14898:	4798      	blx	r3
   1489a:	1e02      	subs	r2, r0, #0
	if (M2M_SUCCESS != ret) {
   1489c:	d00d      	beq.n	148ba <vWifiTask+0xf2>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1489e:	49c2      	ldr	r1, [pc, #776]	; (14ba8 <vWifiTask+0x3e0>)
   148a0:	2001      	movs	r0, #1
   148a2:	4bc2      	ldr	r3, [pc, #776]	; (14bac <vWifiTask+0x3e4>)
   148a4:	4798      	blx	r3
   148a6:	e7fe      	b.n	148a6 <vWifiTask+0xde>
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   148a8:	48c1      	ldr	r0, [pc, #772]	; (14bb0 <vWifiTask+0x3e8>)
   148aa:	4bad      	ldr	r3, [pc, #692]	; (14b60 <vWifiTask+0x398>)
   148ac:	4798      	blx	r3
   148ae:	e7ba      	b.n	14826 <vWifiTask+0x5e>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   148b0:	49c0      	ldr	r1, [pc, #768]	; (14bb4 <vWifiTask+0x3ec>)
   148b2:	2001      	movs	r0, #1
   148b4:	4bbd      	ldr	r3, [pc, #756]	; (14bac <vWifiTask+0x3e4>)
   148b6:	4798      	blx	r3
   148b8:	e7fe      	b.n	148b8 <vWifiTask+0xf0>
		while (1) {
				}
		}

	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   148ba:	4cbf      	ldr	r4, [pc, #764]	; (14bb8 <vWifiTask+0x3f0>)
   148bc:	0022      	movs	r2, r4
   148be:	49bf      	ldr	r1, [pc, #764]	; (14bbc <vWifiTask+0x3f4>)
   148c0:	2001      	movs	r0, #1
   148c2:	4bba      	ldr	r3, [pc, #744]	; (14bac <vWifiTask+0x3e4>)
   148c4:	4798      	blx	r3
	
	//Re-enable socket for MQTT Transfer
	socketInit();
   148c6:	4bbe      	ldr	r3, [pc, #760]	; (14bc0 <vWifiTask+0x3f8>)
   148c8:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   148ca:	49be      	ldr	r1, [pc, #760]	; (14bc4 <vWifiTask+0x3fc>)
   148cc:	48be      	ldr	r0, [pc, #760]	; (14bc8 <vWifiTask+0x400>)
   148ce:	4bbf      	ldr	r3, [pc, #764]	; (14bcc <vWifiTask+0x404>)
   148d0:	4798      	blx	r3

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   148d2:	23ff      	movs	r3, #255	; 0xff
   148d4:	9300      	str	r3, [sp, #0]
   148d6:	4bbe      	ldr	r3, [pc, #760]	; (14bd0 <vWifiTask+0x408>)
   148d8:	2202      	movs	r2, #2
   148da:	210b      	movs	r1, #11
   148dc:	0020      	movs	r0, r4
   148de:	4cbd      	ldr	r4, [pc, #756]	; (14bd4 <vWifiTask+0x40c>)
   148e0:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   148e2:	4b98      	ldr	r3, [pc, #608]	; (14b44 <vWifiTask+0x37c>)
   148e4:	781b      	ldrb	r3, [r3, #0]

	while (!(is_state_set(WIFI_CONNECTED)))
   148e6:	079b      	lsls	r3, r3, #30
   148e8:	d40a      	bmi.n	14900 <vWifiTask+0x138>
	{
			/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   148ea:	4ebb      	ldr	r6, [pc, #748]	; (14bd8 <vWifiTask+0x410>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   148ec:	4d9e      	ldr	r5, [pc, #632]	; (14b68 <vWifiTask+0x3a0>)
   148ee:	4cbb      	ldr	r4, [pc, #748]	; (14bdc <vWifiTask+0x414>)
		m2m_wifi_handle_events(NULL);
   148f0:	2000      	movs	r0, #0
   148f2:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   148f4:	0028      	movs	r0, r5
   148f6:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   148f8:	4b92      	ldr	r3, [pc, #584]	; (14b44 <vWifiTask+0x37c>)
   148fa:	781b      	ldrb	r3, [r3, #0]
	while (!(is_state_set(WIFI_CONNECTED)))
   148fc:	079b      	lsls	r3, r3, #30
   148fe:	d5f7      	bpl.n	148f0 <vWifiTask+0x128>
	}

	vTaskDelay(1000);
   14900:	20fa      	movs	r0, #250	; 0xfa
   14902:	0080      	lsls	r0, r0, #2
   14904:	4b8e      	ldr	r3, [pc, #568]	; (14b40 <vWifiTask+0x378>)
   14906:	4798      	blx	r3
	
	wifiStateMachine = WIFI_MQTT_HANDLE;
   14908:	2201      	movs	r2, #1
   1490a:	4bb5      	ldr	r3, [pc, #724]	; (14be0 <vWifiTask+0x418>)
   1490c:	701a      	strb	r2, [r3, #0]
	while (1) {

	switch(wifiStateMachine)
   1490e:	001e      	movs	r6, r3
	m2m_wifi_handle_events(NULL);
   14910:	4bb1      	ldr	r3, [pc, #708]	; (14bd8 <vWifiTask+0x410>)
   14912:	4698      	mov	r8, r3
   14914:	e026      	b.n	14964 <vWifiTask+0x19c>
	switch(wifiStateMachine)
   14916:	2b00      	cmp	r3, #0
   14918:	d000      	beq.n	1491c <vWifiTask+0x154>
   1491a:	e1aa      	b.n	14c72 <vWifiTask+0x4aa>
	socketDeinit();
   1491c:	4bb1      	ldr	r3, [pc, #708]	; (14be4 <vWifiTask+0x41c>)
   1491e:	4798      	blx	r3
	configure_mqtt();
   14920:	4b99      	ldr	r3, [pc, #612]	; (14b88 <vWifiTask+0x3c0>)
   14922:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   14924:	49a7      	ldr	r1, [pc, #668]	; (14bc4 <vWifiTask+0x3fc>)
   14926:	48a8      	ldr	r0, [pc, #672]	; (14bc8 <vWifiTask+0x400>)
   14928:	4ba8      	ldr	r3, [pc, #672]	; (14bcc <vWifiTask+0x404>)
   1492a:	4798      	blx	r3
	socketInit();
   1492c:	4ba4      	ldr	r3, [pc, #656]	; (14bc0 <vWifiTask+0x3f8>)
   1492e:	4798      	blx	r3
	if(!(mqtt_inst.isConnected))
   14930:	2334      	movs	r3, #52	; 0x34
   14932:	4aad      	ldr	r2, [pc, #692]	; (14be8 <vWifiTask+0x420>)
   14934:	5cd3      	ldrb	r3, [r2, r3]
   14936:	2b00      	cmp	r3, #0
   14938:	d050      	beq.n	149dc <vWifiTask+0x214>
		LogMessage(LOG_DEBUG_LVL,"Connected to MQTT Broker!\r\n");
   1493a:	49ac      	ldr	r1, [pc, #688]	; (14bec <vWifiTask+0x424>)
   1493c:	2001      	movs	r0, #1
   1493e:	4b9b      	ldr	r3, [pc, #620]	; (14bac <vWifiTask+0x3e4>)
   14940:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_HANDLE;
   14942:	2201      	movs	r2, #1
   14944:	4ba6      	ldr	r3, [pc, #664]	; (14be0 <vWifiTask+0x418>)
   14946:	701a      	strb	r2, [r3, #0]
		default:
		wifiStateMachine = WIFI_MQTT_INIT;
		break;
		}
	//Check if a new state was called
	uint8_t DataToReceive = 0;
   14948:	a905      	add	r1, sp, #20
   1494a:	2300      	movs	r3, #0
   1494c:	700b      	strb	r3, [r1, #0]
	if (pdPASS == xQueueReceive( xQueueWifiState, &DataToReceive, 0 ))
   1494e:	4b7f      	ldr	r3, [pc, #508]	; (14b4c <vWifiTask+0x384>)
   14950:	6818      	ldr	r0, [r3, #0]
   14952:	2200      	movs	r2, #0
   14954:	4ba6      	ldr	r3, [pc, #664]	; (14bf0 <vWifiTask+0x428>)
   14956:	4798      	blx	r3
   14958:	2801      	cmp	r0, #1
   1495a:	d100      	bne.n	1495e <vWifiTask+0x196>
   1495c:	e18d      	b.n	14c7a <vWifiTask+0x4b2>
	{
		wifiStateMachine = DataToReceive; // Update new state
	}
	
	vTaskDelay(100);	
   1495e:	2064      	movs	r0, #100	; 0x64
   14960:	4b77      	ldr	r3, [pc, #476]	; (14b40 <vWifiTask+0x378>)
   14962:	4798      	blx	r3
	switch(wifiStateMachine)
   14964:	7833      	ldrb	r3, [r6, #0]
   14966:	2b01      	cmp	r3, #1
   14968:	d049      	beq.n	149fe <vWifiTask+0x236>
   1496a:	b25a      	sxtb	r2, r3
   1496c:	2a01      	cmp	r2, #1
   1496e:	ddd2      	ble.n	14916 <vWifiTask+0x14e>
   14970:	2b02      	cmp	r3, #2
   14972:	d100      	bne.n	14976 <vWifiTask+0x1ae>
   14974:	e0bf      	b.n	14af6 <vWifiTask+0x32e>
   14976:	2b03      	cmp	r3, #3
   14978:	d000      	beq.n	1497c <vWifiTask+0x1b4>
   1497a:	e17a      	b.n	14c72 <vWifiTask+0x4aa>
	return ((down_state & mask) != 0);
   1497c:	4b71      	ldr	r3, [pc, #452]	; (14b44 <vWifiTask+0x37c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1497e:	781b      	ldrb	r3, [r3, #0]
   14980:	2230      	movs	r2, #48	; 0x30
   14982:	421a      	tst	r2, r3
   14984:	d10e      	bne.n	149a4 <vWifiTask+0x1dc>
		m2m_wifi_handle_events(NULL);
   14986:	4d94      	ldr	r5, [pc, #592]	; (14bd8 <vWifiTask+0x410>)
		sw_timer_task(&swt_module_inst);
   14988:	4c77      	ldr	r4, [pc, #476]	; (14b68 <vWifiTask+0x3a0>)
   1498a:	4f94      	ldr	r7, [pc, #592]	; (14bdc <vWifiTask+0x414>)
		m2m_wifi_handle_events(NULL);
   1498c:	2000      	movs	r0, #0
   1498e:	47a8      	blx	r5
		sw_timer_task(&swt_module_inst);
   14990:	0020      	movs	r0, r4
   14992:	47b8      	blx	r7
		vTaskDelay(5);
   14994:	2005      	movs	r0, #5
   14996:	4b6a      	ldr	r3, [pc, #424]	; (14b40 <vWifiTask+0x378>)
   14998:	4798      	blx	r3
	return ((down_state & mask) != 0);
   1499a:	4b6a      	ldr	r3, [pc, #424]	; (14b44 <vWifiTask+0x37c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1499c:	781b      	ldrb	r3, [r3, #0]
   1499e:	2230      	movs	r2, #48	; 0x30
   149a0:	421a      	tst	r2, r3
   149a2:	d0f3      	beq.n	1498c <vWifiTask+0x1c4>
	socketDeinit();
   149a4:	4b8f      	ldr	r3, [pc, #572]	; (14be4 <vWifiTask+0x41c>)
   149a6:	4798      	blx	r3
	vTaskDelay(1000);
   149a8:	20fa      	movs	r0, #250	; 0xfa
   149aa:	0080      	lsls	r0, r0, #2
   149ac:	4b64      	ldr	r3, [pc, #400]	; (14b40 <vWifiTask+0x378>)
   149ae:	4798      	blx	r3
	do_download_flag = false;
   149b0:	2200      	movs	r2, #0
   149b2:	4b90      	ldr	r3, [pc, #576]	; (14bf4 <vWifiTask+0x42c>)
   149b4:	701a      	strb	r2, [r3, #0]
	char test_file_name[] = "0:FlagA.txt";
   149b6:	a905      	add	r1, sp, #20
   149b8:	4b8f      	ldr	r3, [pc, #572]	; (14bf8 <vWifiTask+0x430>)
   149ba:	000a      	movs	r2, r1
   149bc:	cb31      	ldmia	r3!, {r0, r4, r5}
   149be:	c231      	stmia	r2!, {r0, r4, r5}
	FRESULT res = f_open(&file_object,
   149c0:	220a      	movs	r2, #10
   149c2:	488e      	ldr	r0, [pc, #568]	; (14bfc <vWifiTask+0x434>)
   149c4:	4b8e      	ldr	r3, [pc, #568]	; (14c00 <vWifiTask+0x438>)
   149c6:	4798      	blx	r3
	if (res != FR_OK)
   149c8:	2800      	cmp	r0, #0
   149ca:	d000      	beq.n	149ce <vWifiTask+0x206>
   149cc:	e14b      	b.n	14c66 <vWifiTask+0x49e>
		SerialConsoleWriteString("FlagA.txt added!\r\n");
   149ce:	488d      	ldr	r0, [pc, #564]	; (14c04 <vWifiTask+0x43c>)
   149d0:	4b63      	ldr	r3, [pc, #396]	; (14b60 <vWifiTask+0x398>)
   149d2:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_INIT;	
   149d4:	2200      	movs	r2, #0
   149d6:	4b82      	ldr	r3, [pc, #520]	; (14be0 <vWifiTask+0x418>)
   149d8:	701a      	strb	r2, [r3, #0]
   149da:	e7b5      	b.n	14948 <vWifiTask+0x180>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   149dc:	498a      	ldr	r1, [pc, #552]	; (14c08 <vWifiTask+0x440>)
   149de:	0010      	movs	r0, r2
   149e0:	4b8a      	ldr	r3, [pc, #552]	; (14c0c <vWifiTask+0x444>)
   149e2:	4798      	blx	r3
   149e4:	2800      	cmp	r0, #0
   149e6:	d105      	bne.n	149f4 <vWifiTask+0x22c>
	if(mqtt_inst.isConnected)
   149e8:	2334      	movs	r3, #52	; 0x34
   149ea:	4a7f      	ldr	r2, [pc, #508]	; (14be8 <vWifiTask+0x420>)
   149ec:	5cd3      	ldrb	r3, [r2, r3]
   149ee:	2b00      	cmp	r3, #0
   149f0:	d0a7      	beq.n	14942 <vWifiTask+0x17a>
   149f2:	e7a2      	b.n	1493a <vWifiTask+0x172>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   149f4:	4986      	ldr	r1, [pc, #536]	; (14c10 <vWifiTask+0x448>)
   149f6:	2001      	movs	r0, #1
   149f8:	4b6c      	ldr	r3, [pc, #432]	; (14bac <vWifiTask+0x3e4>)
   149fa:	4798      	blx	r3
   149fc:	e7f4      	b.n	149e8 <vWifiTask+0x220>
	m2m_wifi_handle_events(NULL);
   149fe:	2000      	movs	r0, #0
   14a00:	47c0      	blx	r8
	sw_timer_task(&swt_module_inst);
   14a02:	4859      	ldr	r0, [pc, #356]	; (14b68 <vWifiTask+0x3a0>)
   14a04:	4b75      	ldr	r3, [pc, #468]	; (14bdc <vWifiTask+0x414>)
   14a06:	4798      	blx	r3
	if  (pdPASS == xQueueReceive( xQueueGameBuffer , &gamePacket, 0 ))
   14a08:	4b52      	ldr	r3, [pc, #328]	; (14b54 <vWifiTask+0x38c>)
   14a0a:	6818      	ldr	r0, [r3, #0]
   14a0c:	2200      	movs	r2, #0
   14a0e:	a905      	add	r1, sp, #20
   14a10:	4b77      	ldr	r3, [pc, #476]	; (14bf0 <vWifiTask+0x428>)
   14a12:	4798      	blx	r3
   14a14:	2801      	cmp	r0, #1
   14a16:	d011      	beq.n	14a3c <vWifiTask+0x274>
	if (pdPASS == xQueueReceive( xQueueImuBuffer , &imuDataVar, 0 ))
   14a18:	4b4d      	ldr	r3, [pc, #308]	; (14b50 <vWifiTask+0x388>)
   14a1a:	6818      	ldr	r0, [r3, #0]
   14a1c:	2200      	movs	r2, #0
   14a1e:	a905      	add	r1, sp, #20
   14a20:	4b73      	ldr	r3, [pc, #460]	; (14bf0 <vWifiTask+0x428>)
   14a22:	4798      	blx	r3
   14a24:	2801      	cmp	r0, #1
   14a26:	d049      	beq.n	14abc <vWifiTask+0x2f4>
	if(mqtt_inst.isConnected)
   14a28:	2334      	movs	r3, #52	; 0x34
   14a2a:	4a6f      	ldr	r2, [pc, #444]	; (14be8 <vWifiTask+0x420>)
   14a2c:	5cd3      	ldrb	r3, [r2, r3]
   14a2e:	2b00      	cmp	r3, #0
   14a30:	d08a      	beq.n	14948 <vWifiTask+0x180>
	mqtt_yield(&mqtt_inst, 100);	
   14a32:	2164      	movs	r1, #100	; 0x64
   14a34:	0010      	movs	r0, r2
   14a36:	4b77      	ldr	r3, [pc, #476]	; (14c14 <vWifiTask+0x44c>)
   14a38:	4798      	blx	r3
   14a3a:	e785      	b.n	14948 <vWifiTask+0x180>
		snprintf(mqtt_msg, 63, "{\"game\":[");
   14a3c:	4a76      	ldr	r2, [pc, #472]	; (14c18 <vWifiTask+0x450>)
   14a3e:	4b77      	ldr	r3, [pc, #476]	; (14c1c <vWifiTask+0x454>)
   14a40:	cb03      	ldmia	r3!, {r0, r1}
   14a42:	c203      	stmia	r2!, {r0, r1}
   14a44:	881b      	ldrh	r3, [r3, #0]
   14a46:	8013      	strh	r3, [r2, #0]
				if(gamePacket.game[iter] != 0xFF)
   14a48:	ab05      	add	r3, sp, #20
   14a4a:	781f      	ldrb	r7, [r3, #0]
   14a4c:	2fff      	cmp	r7, #255	; 0xff
   14a4e:	d018      	beq.n	14a82 <vWifiTask+0x2ba>
   14a50:	2400      	movs	r4, #0
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14a52:	4d73      	ldr	r5, [pc, #460]	; (14c20 <vWifiTask+0x458>)
   14a54:	e005      	b.n	14a62 <vWifiTask+0x29a>
						snprintf(numGame, 5, ",");
   14a56:	a903      	add	r1, sp, #12
   14a58:	232c      	movs	r3, #44	; 0x2c
   14a5a:	800b      	strh	r3, [r1, #0]
						strcat(mqtt_msg, numGame);
   14a5c:	486e      	ldr	r0, [pc, #440]	; (14c18 <vWifiTask+0x450>)
   14a5e:	4b71      	ldr	r3, [pc, #452]	; (14c24 <vWifiTask+0x45c>)
   14a60:	4798      	blx	r3
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14a62:	003b      	movs	r3, r7
   14a64:	4a70      	ldr	r2, [pc, #448]	; (14c28 <vWifiTask+0x460>)
   14a66:	2103      	movs	r1, #3
   14a68:	a803      	add	r0, sp, #12
   14a6a:	47a8      	blx	r5
					strcat(mqtt_msg, numGame);
   14a6c:	a903      	add	r1, sp, #12
   14a6e:	486a      	ldr	r0, [pc, #424]	; (14c18 <vWifiTask+0x450>)
   14a70:	4b6c      	ldr	r3, [pc, #432]	; (14c24 <vWifiTask+0x45c>)
   14a72:	4798      	blx	r3
					if(gamePacket.game[iter+1] != 0xFF && iter+1 <GAME_SIZE)
   14a74:	3401      	adds	r4, #1
   14a76:	ab05      	add	r3, sp, #20
   14a78:	5ce7      	ldrb	r7, [r4, r3]
   14a7a:	2fff      	cmp	r7, #255	; 0xff
   14a7c:	d001      	beq.n	14a82 <vWifiTask+0x2ba>
   14a7e:	2c14      	cmp	r4, #20
   14a80:	d1e9      	bne.n	14a56 <vWifiTask+0x28e>
		strcat(mqtt_msg, "]}");
   14a82:	4c65      	ldr	r4, [pc, #404]	; (14c18 <vWifiTask+0x450>)
   14a84:	0020      	movs	r0, r4
   14a86:	4f69      	ldr	r7, [pc, #420]	; (14c2c <vWifiTask+0x464>)
   14a88:	47b8      	blx	r7
   14a8a:	1820      	adds	r0, r4, r0
   14a8c:	2203      	movs	r2, #3
   14a8e:	4968      	ldr	r1, [pc, #416]	; (14c30 <vWifiTask+0x468>)
   14a90:	4b68      	ldr	r3, [pc, #416]	; (14c34 <vWifiTask+0x46c>)
   14a92:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,mqtt_msg);LogMessage(LOG_DEBUG_LVL,"\r\n");
   14a94:	0021      	movs	r1, r4
   14a96:	2001      	movs	r0, #1
   14a98:	4d44      	ldr	r5, [pc, #272]	; (14bac <vWifiTask+0x3e4>)
   14a9a:	47a8      	blx	r5
   14a9c:	4966      	ldr	r1, [pc, #408]	; (14c38 <vWifiTask+0x470>)
   14a9e:	2001      	movs	r0, #1
   14aa0:	47a8      	blx	r5
		mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14aa2:	0020      	movs	r0, r4
   14aa4:	47b8      	blx	r7
   14aa6:	0003      	movs	r3, r0
   14aa8:	2200      	movs	r2, #0
   14aaa:	9201      	str	r2, [sp, #4]
   14aac:	3201      	adds	r2, #1
   14aae:	9200      	str	r2, [sp, #0]
   14ab0:	0022      	movs	r2, r4
   14ab2:	4962      	ldr	r1, [pc, #392]	; (14c3c <vWifiTask+0x474>)
   14ab4:	484c      	ldr	r0, [pc, #304]	; (14be8 <vWifiTask+0x420>)
   14ab6:	4c62      	ldr	r4, [pc, #392]	; (14c40 <vWifiTask+0x478>)
   14ab8:	47a0      	blx	r4
   14aba:	e7ad      	b.n	14a18 <vWifiTask+0x250>
		snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   14abc:	aa05      	add	r2, sp, #20
   14abe:	2100      	movs	r1, #0
   14ac0:	5e53      	ldrsh	r3, [r2, r1]
   14ac2:	4c55      	ldr	r4, [pc, #340]	; (14c18 <vWifiTask+0x450>)
   14ac4:	2004      	movs	r0, #4
   14ac6:	5e11      	ldrsh	r1, [r2, r0]
   14ac8:	9101      	str	r1, [sp, #4]
   14aca:	2102      	movs	r1, #2
   14acc:	5e52      	ldrsh	r2, [r2, r1]
   14ace:	9200      	str	r2, [sp, #0]
   14ad0:	4a5c      	ldr	r2, [pc, #368]	; (14c44 <vWifiTask+0x47c>)
   14ad2:	213f      	movs	r1, #63	; 0x3f
   14ad4:	0020      	movs	r0, r4
   14ad6:	4f52      	ldr	r7, [pc, #328]	; (14c20 <vWifiTask+0x458>)
   14ad8:	47b8      	blx	r7
		mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14ada:	0020      	movs	r0, r4
   14adc:	4b53      	ldr	r3, [pc, #332]	; (14c2c <vWifiTask+0x464>)
   14ade:	4798      	blx	r3
   14ae0:	0003      	movs	r3, r0
   14ae2:	2200      	movs	r2, #0
   14ae4:	9201      	str	r2, [sp, #4]
   14ae6:	3201      	adds	r2, #1
   14ae8:	9200      	str	r2, [sp, #0]
   14aea:	0022      	movs	r2, r4
   14aec:	4956      	ldr	r1, [pc, #344]	; (14c48 <vWifiTask+0x480>)
   14aee:	483e      	ldr	r0, [pc, #248]	; (14be8 <vWifiTask+0x420>)
   14af0:	4c53      	ldr	r4, [pc, #332]	; (14c40 <vWifiTask+0x478>)
   14af2:	47a0      	blx	r4
   14af4:	e798      	b.n	14a28 <vWifiTask+0x260>
	if(mqtt_disconnect(&mqtt_inst, main_mqtt_broker))
   14af6:	4944      	ldr	r1, [pc, #272]	; (14c08 <vWifiTask+0x440>)
   14af8:	483b      	ldr	r0, [pc, #236]	; (14be8 <vWifiTask+0x420>)
   14afa:	4b54      	ldr	r3, [pc, #336]	; (14c4c <vWifiTask+0x484>)
   14afc:	4798      	blx	r3
   14afe:	2800      	cmp	r0, #0
   14b00:	d000      	beq.n	14b04 <vWifiTask+0x33c>
   14b02:	e0ab      	b.n	14c5c <vWifiTask+0x494>
	while((mqtt_inst.isConnected))
   14b04:	2334      	movs	r3, #52	; 0x34
   14b06:	4a38      	ldr	r2, [pc, #224]	; (14be8 <vWifiTask+0x420>)
   14b08:	5cd3      	ldrb	r3, [r2, r3]
   14b0a:	2b00      	cmp	r3, #0
   14b0c:	d007      	beq.n	14b1e <vWifiTask+0x356>
		m2m_wifi_handle_events(NULL);
   14b0e:	4d32      	ldr	r5, [pc, #200]	; (14bd8 <vWifiTask+0x410>)
	while((mqtt_inst.isConnected))
   14b10:	0017      	movs	r7, r2
   14b12:	2434      	movs	r4, #52	; 0x34
		m2m_wifi_handle_events(NULL);
   14b14:	2000      	movs	r0, #0
   14b16:	47a8      	blx	r5
	while((mqtt_inst.isConnected))
   14b18:	5d3b      	ldrb	r3, [r7, r4]
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d1fa      	bne.n	14b14 <vWifiTask+0x34c>
	socketDeinit();
   14b1e:	4b31      	ldr	r3, [pc, #196]	; (14be4 <vWifiTask+0x41c>)
   14b20:	4798      	blx	r3
	do_download_flag = true;
   14b22:	2201      	movs	r2, #1
   14b24:	4b33      	ldr	r3, [pc, #204]	; (14bf4 <vWifiTask+0x42c>)
   14b26:	701a      	strb	r2, [r3, #0]
	registerSocketCallback(socket_cb, resolve_cb);
   14b28:	4949      	ldr	r1, [pc, #292]	; (14c50 <vWifiTask+0x488>)
   14b2a:	484a      	ldr	r0, [pc, #296]	; (14c54 <vWifiTask+0x48c>)
   14b2c:	4b27      	ldr	r3, [pc, #156]	; (14bcc <vWifiTask+0x404>)
   14b2e:	4798      	blx	r3
	socketInit();
   14b30:	4b23      	ldr	r3, [pc, #140]	; (14bc0 <vWifiTask+0x3f8>)
   14b32:	4798      	blx	r3
	start_download();
   14b34:	4b48      	ldr	r3, [pc, #288]	; (14c58 <vWifiTask+0x490>)
   14b36:	4798      	blx	r3
	wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   14b38:	2203      	movs	r2, #3
   14b3a:	4b29      	ldr	r3, [pc, #164]	; (14be0 <vWifiTask+0x418>)
   14b3c:	701a      	strb	r2, [r3, #0]
   14b3e:	e703      	b.n	14948 <vWifiTask+0x180>
   14b40:	00018145 	.word	0x00018145
   14b44:	2000044f 	.word	0x2000044f
   14b48:	00016b7d 	.word	0x00016b7d
   14b4c:	20000af8 	.word	0x20000af8
   14b50:	20000af4 	.word	0x20000af4
   14b54:	20000af0 	.word	0x20000af0
   14b58:	20000aec 	.word	0x20000aec
   14b5c:	000285dc 	.word	0x000285dc
   14b60:	00018fbd 	.word	0x00018fbd
   14b64:	00023cc9 	.word	0x00023cc9
   14b68:	2000430c 	.word	0x2000430c
   14b6c:	00023cd5 	.word	0x00023cd5
   14b70:	00023d81 	.word	0x00023d81
   14b74:	00022ce1 	.word	0x00022ce1
   14b78:	20004364 	.word	0x20004364
   14b7c:	00022d09 	.word	0x00022d09
   14b80:	000143f1 	.word	0x000143f1
   14b84:	00022dbd 	.word	0x00022dbd
   14b88:	00013f81 	.word	0x00013f81
   14b8c:	000145f1 	.word	0x000145f1
   14b90:	0001469d 	.word	0x0001469d
   14b94:	000146cd 	.word	0x000146cd
   14b98:	000262a3 	.word	0x000262a3
   14b9c:	0001a1d5 	.word	0x0001a1d5
   14ba0:	000144e9 	.word	0x000144e9
   14ba4:	0001b0ed 	.word	0x0001b0ed
   14ba8:	00028640 	.word	0x00028640
   14bac:	0001906d 	.word	0x0001906d
   14bb0:	000285b4 	.word	0x000285b4
   14bb4:	000285f8 	.word	0x000285f8
   14bb8:	00028780 	.word	0x00028780
   14bbc:	0002866c 	.word	0x0002866c
   14bc0:	0001cf5d 	.word	0x0001cf5d
   14bc4:	00013ee5 	.word	0x00013ee5
   14bc8:	00013ef1 	.word	0x00013ef1
   14bcc:	0001cfdd 	.word	0x0001cfdd
   14bd0:	00028774 	.word	0x00028774
   14bd4:	0001b491 	.word	0x0001b491
   14bd8:	0001b219 	.word	0x0001b219
   14bdc:	00023e09 	.word	0x00023e09
   14be0:	20000ae8 	.word	0x20000ae8
   14be4:	0001cfa1 	.word	0x0001cfa1
   14be8:	200006ac 	.word	0x200006ac
   14bec:	00028690 	.word	0x00028690
   14bf0:	00017355 	.word	0x00017355
   14bf4:	2000044e 	.word	0x2000044e
   14bf8:	00028724 	.word	0x00028724
   14bfc:	20000680 	.word	0x20000680
   14c00:	000211d5 	.word	0x000211d5
   14c04:	00028710 	.word	0x00028710
   14c08:	000281b0 	.word	0x000281b0
   14c0c:	0002226d 	.word	0x0002226d
   14c10:	000287b4 	.word	0x000287b4
   14c14:	000223c1 	.word	0x000223c1
   14c18:	20000024 	.word	0x20000024
   14c1c:	00027eb4 	.word	0x00027eb4
   14c20:	000265d1 	.word	0x000265d1
   14c24:	000266b5 	.word	0x000266b5
   14c28:	000286ac 	.word	0x000286ac
   14c2c:	0002672f 	.word	0x0002672f
   14c30:	000286b0 	.word	0x000286b0
   14c34:	0002626d 	.word	0x0002626d
   14c38:	0002af5c 	.word	0x0002af5c
   14c3c:	000286b4 	.word	0x000286b4
   14c40:	00022361 	.word	0x00022361
   14c44:	000286c8 	.word	0x000286c8
   14c48:	000286ec 	.word	0x000286ec
   14c4c:	00022331 	.word	0x00022331
   14c50:	00014105 	.word	0x00014105
   14c54:	00014145 	.word	0x00014145
   14c58:	00013efd 	.word	0x00013efd
		LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14c5c:	4909      	ldr	r1, [pc, #36]	; (14c84 <vWifiTask+0x4bc>)
   14c5e:	2001      	movs	r0, #1
   14c60:	4b09      	ldr	r3, [pc, #36]	; (14c88 <vWifiTask+0x4c0>)
   14c62:	4798      	blx	r3
   14c64:	e74e      	b.n	14b04 <vWifiTask+0x33c>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   14c66:	0002      	movs	r2, r0
   14c68:	4908      	ldr	r1, [pc, #32]	; (14c8c <vWifiTask+0x4c4>)
   14c6a:	2000      	movs	r0, #0
   14c6c:	4b06      	ldr	r3, [pc, #24]	; (14c88 <vWifiTask+0x4c0>)
   14c6e:	4798      	blx	r3
   14c70:	e6b0      	b.n	149d4 <vWifiTask+0x20c>
		wifiStateMachine = WIFI_MQTT_INIT;
   14c72:	2200      	movs	r2, #0
   14c74:	4b06      	ldr	r3, [pc, #24]	; (14c90 <vWifiTask+0x4c8>)
   14c76:	701a      	strb	r2, [r3, #0]
		break;
   14c78:	e666      	b.n	14948 <vWifiTask+0x180>
		wifiStateMachine = DataToReceive; // Update new state
   14c7a:	ab05      	add	r3, sp, #20
   14c7c:	781a      	ldrb	r2, [r3, #0]
   14c7e:	4b04      	ldr	r3, [pc, #16]	; (14c90 <vWifiTask+0x4c8>)
   14c80:	701a      	strb	r2, [r3, #0]
   14c82:	e66c      	b.n	1495e <vWifiTask+0x196>
   14c84:	000287b4 	.word	0x000287b4
   14c88:	0001906d 	.word	0x0001906d
   14c8c:	00028700 	.word	0x00028700
   14c90:	20000ae8 	.word	0x20000ae8

00014c94 <WifiHandlerSetState>:
	return 0;
}


void WifiHandlerSetState(uint8_t state)
{
   14c94:	b510      	push	{r4, lr}
   14c96:	b082      	sub	sp, #8
   14c98:	466b      	mov	r3, sp
   14c9a:	71d8      	strb	r0, [r3, #7]
if( state <= WIFI_DOWNLOAD_HANDLE){
   14c9c:	2803      	cmp	r0, #3
   14c9e:	d901      	bls.n	14ca4 <WifiHandlerSetState+0x10>
	xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
}
}
   14ca0:	b002      	add	sp, #8
   14ca2:	bd10      	pop	{r4, pc}
	xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
   14ca4:	4b04      	ldr	r3, [pc, #16]	; (14cb8 <WifiHandlerSetState+0x24>)
   14ca6:	6818      	ldr	r0, [r3, #0]
   14ca8:	2300      	movs	r3, #0
   14caa:	220a      	movs	r2, #10
   14cac:	4669      	mov	r1, sp
   14cae:	3107      	adds	r1, #7
   14cb0:	4c02      	ldr	r4, [pc, #8]	; (14cbc <WifiHandlerSetState+0x28>)
   14cb2:	47a0      	blx	r4
}
   14cb4:	e7f4      	b.n	14ca0 <WifiHandlerSetState+0xc>
   14cb6:	46c0      	nop			; (mov r8, r8)
   14cb8:	20000af8 	.word	0x20000af8
   14cbc:	00016cb9 	.word	0x00016cb9

00014cc0 <WifiAddImuDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddImuDataToQueue(struct ImuDataPacket* imuPacket)
{
   14cc0:	b510      	push	{r4, lr}
   14cc2:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueImuBuffer , imuPacket, ( TickType_t ) 10);
   14cc4:	4b03      	ldr	r3, [pc, #12]	; (14cd4 <WifiAddImuDataToQueue+0x14>)
   14cc6:	6818      	ldr	r0, [r3, #0]
   14cc8:	2300      	movs	r3, #0
   14cca:	220a      	movs	r2, #10
   14ccc:	4c02      	ldr	r4, [pc, #8]	; (14cd8 <WifiAddImuDataToQueue+0x18>)
   14cce:	47a0      	blx	r4
	return error;
}
   14cd0:	bd10      	pop	{r4, pc}
   14cd2:	46c0      	nop			; (mov r8, r8)
   14cd4:	20000af4 	.word	0x20000af4
   14cd8:	00016cb9 	.word	0x00016cb9

00014cdc <WifiAddDistanceDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   14cdc:	b510      	push	{r4, lr}
   14cde:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueDistanceBuffer  , distance, ( TickType_t ) 10);
   14ce0:	4b03      	ldr	r3, [pc, #12]	; (14cf0 <WifiAddDistanceDataToQueue+0x14>)
   14ce2:	6818      	ldr	r0, [r3, #0]
   14ce4:	2300      	movs	r3, #0
   14ce6:	220a      	movs	r2, #10
   14ce8:	4c02      	ldr	r4, [pc, #8]	; (14cf4 <WifiAddDistanceDataToQueue+0x18>)
   14cea:	47a0      	blx	r4
	return error;
}
   14cec:	bd10      	pop	{r4, pc}
   14cee:	46c0      	nop			; (mov r8, r8)
   14cf0:	20000aec 	.word	0x20000aec
   14cf4:	00016cb9 	.word	0x00016cb9

00014cf8 <WifiAddGameDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   14cf8:	b510      	push	{r4, lr}
   14cfa:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueGameBuffer , game, ( TickType_t ) 10);
   14cfc:	4b03      	ldr	r3, [pc, #12]	; (14d0c <WifiAddGameDataToQueue+0x14>)
   14cfe:	6818      	ldr	r0, [r3, #0]
   14d00:	2300      	movs	r3, #0
   14d02:	220a      	movs	r2, #10
   14d04:	4c02      	ldr	r4, [pc, #8]	; (14d10 <WifiAddGameDataToQueue+0x18>)
   14d06:	47a0      	blx	r4
	return error;
   14d08:	bd10      	pop	{r4, pc}
   14d0a:	46c0      	nop			; (mov r8, r8)
   14d0c:	20000af0 	.word	0x20000af0
   14d10:	00016cb9 	.word	0x00016cb9

00014d14 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14d14:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14d16:	2207      	movs	r2, #7
   14d18:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   14d1a:	421a      	tst	r2, r3
   14d1c:	d1fc      	bne.n	14d18 <_i2c_master_wait_for_sync+0x4>
}
   14d1e:	4770      	bx	lr

00014d20 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   14d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d22:	46d6      	mov	lr, sl
   14d24:	464f      	mov	r7, r9
   14d26:	4646      	mov	r6, r8
   14d28:	b5c0      	push	{r6, r7, lr}
   14d2a:	b08a      	sub	sp, #40	; 0x28
   14d2c:	0006      	movs	r6, r0
   14d2e:	000f      	movs	r7, r1
   14d30:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   14d32:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14d34:	0008      	movs	r0, r1
   14d36:	4ba0      	ldr	r3, [pc, #640]	; (14fb8 <i2c_master_init+0x298>)
   14d38:	4798      	blx	r3
   14d3a:	4aa0      	ldr	r2, [pc, #640]	; (14fbc <i2c_master_init+0x29c>)
   14d3c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   14d3e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14d40:	2301      	movs	r3, #1
   14d42:	40ab      	lsls	r3, r5
   14d44:	430b      	orrs	r3, r1
   14d46:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
   14d48:	a909      	add	r1, sp, #36	; 0x24
   14d4a:	7b23      	ldrb	r3, [r4, #12]
   14d4c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14d4e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14d50:	b2c5      	uxtb	r5, r0
   14d52:	0028      	movs	r0, r5
   14d54:	4b9a      	ldr	r3, [pc, #616]	; (14fc0 <i2c_master_init+0x2a0>)
   14d56:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14d58:	0028      	movs	r0, r5
   14d5a:	4b9a      	ldr	r3, [pc, #616]	; (14fc4 <i2c_master_init+0x2a4>)
   14d5c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14d5e:	7b20      	ldrb	r0, [r4, #12]
   14d60:	2100      	movs	r1, #0
   14d62:	4b99      	ldr	r3, [pc, #612]	; (14fc8 <i2c_master_init+0x2a8>)
   14d64:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14d66:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
   14d68:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14d6a:	079b      	lsls	r3, r3, #30
   14d6c:	d505      	bpl.n	14d7a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
   14d6e:	b00a      	add	sp, #40	; 0x28
   14d70:	bc1c      	pop	{r2, r3, r4}
   14d72:	4690      	mov	r8, r2
   14d74:	4699      	mov	r9, r3
   14d76:	46a2      	mov	sl, r4
   14d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14d7a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
   14d7c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14d7e:	07db      	lsls	r3, r3, #31
   14d80:	d4f5      	bmi.n	14d6e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   14d82:	6830      	ldr	r0, [r6, #0]
   14d84:	4b8c      	ldr	r3, [pc, #560]	; (14fb8 <i2c_master_init+0x298>)
   14d86:	4699      	mov	r9, r3
   14d88:	4798      	blx	r3
   14d8a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   14d8c:	498f      	ldr	r1, [pc, #572]	; (14fcc <i2c_master_init+0x2ac>)
   14d8e:	4b90      	ldr	r3, [pc, #576]	; (14fd0 <i2c_master_init+0x2b0>)
   14d90:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14d92:	00ad      	lsls	r5, r5, #2
   14d94:	4b8f      	ldr	r3, [pc, #572]	; (14fd4 <i2c_master_init+0x2b4>)
   14d96:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
   14d98:	2300      	movs	r3, #0
   14d9a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
   14d9c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
   14d9e:	2500      	movs	r5, #0
   14da0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
   14da2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
   14da4:	2225      	movs	r2, #37	; 0x25
   14da6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
   14da8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   14daa:	3314      	adds	r3, #20
   14dac:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14dae:	6833      	ldr	r3, [r6, #0]
   14db0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   14db2:	0018      	movs	r0, r3
   14db4:	47c8      	blx	r9
   14db6:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14db8:	2380      	movs	r3, #128	; 0x80
   14dba:	aa08      	add	r2, sp, #32
   14dbc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14dbe:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14dc0:	2301      	movs	r3, #1
   14dc2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
   14dc4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
   14dc6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
   14dc8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
   14dca:	2800      	cmp	r0, #0
   14dcc:	d100      	bne.n	14dd0 <i2c_master_init+0xb0>
   14dce:	e0af      	b.n	14f30 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
   14dd0:	ab08      	add	r3, sp, #32
   14dd2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14dd4:	2302      	movs	r3, #2
   14dd6:	aa08      	add	r2, sp, #32
   14dd8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   14dda:	0c00      	lsrs	r0, r0, #16
   14ddc:	b2c0      	uxtb	r0, r0
   14dde:	0011      	movs	r1, r2
   14de0:	4b7d      	ldr	r3, [pc, #500]	; (14fd8 <i2c_master_init+0x2b8>)
   14de2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
   14de4:	2f00      	cmp	r7, #0
   14de6:	d100      	bne.n	14dea <i2c_master_init+0xca>
   14de8:	e0a7      	b.n	14f3a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
   14dea:	ab08      	add	r3, sp, #32
   14dec:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14dee:	2302      	movs	r3, #2
   14df0:	aa08      	add	r2, sp, #32
   14df2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   14df4:	0c3f      	lsrs	r7, r7, #16
   14df6:	b2f8      	uxtb	r0, r7
   14df8:	0011      	movs	r1, r2
   14dfa:	4b77      	ldr	r3, [pc, #476]	; (14fd8 <i2c_master_init+0x2b8>)
   14dfc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   14dfe:	8aa3      	ldrh	r3, [r4, #20]
   14e00:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
   14e02:	8ae3      	ldrh	r3, [r4, #22]
   14e04:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
   14e06:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14e08:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
   14e0a:	2b00      	cmp	r3, #0
   14e0c:	d104      	bne.n	14e18 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14e0e:	4b73      	ldr	r3, [pc, #460]	; (14fdc <i2c_master_init+0x2bc>)
   14e10:	789b      	ldrb	r3, [r3, #2]
   14e12:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14e14:	0fdb      	lsrs	r3, r3, #31
   14e16:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
   14e18:	68a1      	ldr	r1, [r4, #8]
   14e1a:	6923      	ldr	r3, [r4, #16]
   14e1c:	430b      	orrs	r3, r1
   14e1e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
   14e20:	2224      	movs	r2, #36	; 0x24
   14e22:	5ca2      	ldrb	r2, [r4, r2]
   14e24:	2a00      	cmp	r2, #0
   14e26:	d002      	beq.n	14e2e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   14e28:	2280      	movs	r2, #128	; 0x80
   14e2a:	05d2      	lsls	r2, r2, #23
   14e2c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
   14e2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14e30:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   14e32:	222c      	movs	r2, #44	; 0x2c
   14e34:	5ca2      	ldrb	r2, [r4, r2]
   14e36:	2a00      	cmp	r2, #0
   14e38:	d103      	bne.n	14e42 <i2c_master_init+0x122>
   14e3a:	2280      	movs	r2, #128	; 0x80
   14e3c:	0492      	lsls	r2, r2, #18
   14e3e:	4291      	cmp	r1, r2
   14e40:	d102      	bne.n	14e48 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   14e42:	2280      	movs	r2, #128	; 0x80
   14e44:	0512      	lsls	r2, r2, #20
   14e46:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
   14e48:	222d      	movs	r2, #45	; 0x2d
   14e4a:	5ca2      	ldrb	r2, [r4, r2]
   14e4c:	2a00      	cmp	r2, #0
   14e4e:	d002      	beq.n	14e56 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   14e50:	2280      	movs	r2, #128	; 0x80
   14e52:	0412      	lsls	r2, r2, #16
   14e54:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
   14e56:	222e      	movs	r2, #46	; 0x2e
   14e58:	5ca2      	ldrb	r2, [r4, r2]
   14e5a:	2a00      	cmp	r2, #0
   14e5c:	d002      	beq.n	14e64 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   14e5e:	2280      	movs	r2, #128	; 0x80
   14e60:	03d2      	lsls	r2, r2, #15
   14e62:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
   14e64:	4642      	mov	r2, r8
   14e66:	6812      	ldr	r2, [r2, #0]
   14e68:	4313      	orrs	r3, r2
   14e6a:	4642      	mov	r2, r8
   14e6c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   14e6e:	2380      	movs	r3, #128	; 0x80
   14e70:	005b      	lsls	r3, r3, #1
   14e72:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   14e74:	4648      	mov	r0, r9
   14e76:	3014      	adds	r0, #20
   14e78:	b2c0      	uxtb	r0, r0
   14e7a:	4b59      	ldr	r3, [pc, #356]	; (14fe0 <i2c_master_init+0x2c0>)
   14e7c:	4798      	blx	r3
   14e7e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
   14e80:	23fa      	movs	r3, #250	; 0xfa
   14e82:	009b      	lsls	r3, r3, #2
   14e84:	6822      	ldr	r2, [r4, #0]
   14e86:	435a      	muls	r2, r3
   14e88:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14e8a:	6863      	ldr	r3, [r4, #4]
   14e8c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
   14e8e:	4d55      	ldr	r5, [pc, #340]	; (14fe4 <i2c_master_init+0x2c4>)
   14e90:	47a8      	blx	r5
   14e92:	9000      	str	r0, [sp, #0]
   14e94:	9101      	str	r1, [sp, #4]
   14e96:	464b      	mov	r3, r9
   14e98:	0058      	lsls	r0, r3, #1
   14e9a:	47a8      	blx	r5
   14e9c:	9002      	str	r0, [sp, #8]
   14e9e:	9103      	str	r1, [sp, #12]
   14ea0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   14ea2:	47a8      	blx	r5
   14ea4:	9004      	str	r0, [sp, #16]
   14ea6:	9105      	str	r1, [sp, #20]
   14ea8:	4f4f      	ldr	r7, [pc, #316]	; (14fe8 <i2c_master_init+0x2c8>)
   14eaa:	4a50      	ldr	r2, [pc, #320]	; (14fec <i2c_master_init+0x2cc>)
   14eac:	4b50      	ldr	r3, [pc, #320]	; (14ff0 <i2c_master_init+0x2d0>)
   14eae:	9800      	ldr	r0, [sp, #0]
   14eb0:	9901      	ldr	r1, [sp, #4]
   14eb2:	47b8      	blx	r7
   14eb4:	0002      	movs	r2, r0
   14eb6:	000b      	movs	r3, r1
   14eb8:	9804      	ldr	r0, [sp, #16]
   14eba:	9905      	ldr	r1, [sp, #20]
   14ebc:	47b8      	blx	r7
   14ebe:	4e4d      	ldr	r6, [pc, #308]	; (14ff4 <i2c_master_init+0x2d4>)
   14ec0:	2200      	movs	r2, #0
   14ec2:	4b4d      	ldr	r3, [pc, #308]	; (14ff8 <i2c_master_init+0x2d8>)
   14ec4:	47b0      	blx	r6
   14ec6:	9004      	str	r0, [sp, #16]
   14ec8:	9105      	str	r1, [sp, #20]
   14eca:	4648      	mov	r0, r9
   14ecc:	47a8      	blx	r5
   14ece:	0002      	movs	r2, r0
   14ed0:	000b      	movs	r3, r1
   14ed2:	9804      	ldr	r0, [sp, #16]
   14ed4:	9905      	ldr	r1, [sp, #20]
   14ed6:	47b8      	blx	r7
   14ed8:	0002      	movs	r2, r0
   14eda:	000b      	movs	r3, r1
   14edc:	4d47      	ldr	r5, [pc, #284]	; (14ffc <i2c_master_init+0x2dc>)
   14ede:	9800      	ldr	r0, [sp, #0]
   14ee0:	9901      	ldr	r1, [sp, #4]
   14ee2:	47a8      	blx	r5
   14ee4:	9a02      	ldr	r2, [sp, #8]
   14ee6:	9b03      	ldr	r3, [sp, #12]
   14ee8:	47b0      	blx	r6
   14eea:	2200      	movs	r2, #0
   14eec:	4b44      	ldr	r3, [pc, #272]	; (15000 <i2c_master_init+0x2e0>)
   14eee:	47a8      	blx	r5
   14ef0:	9a02      	ldr	r2, [sp, #8]
   14ef2:	9b03      	ldr	r3, [sp, #12]
   14ef4:	4d43      	ldr	r5, [pc, #268]	; (15004 <i2c_master_init+0x2e4>)
   14ef6:	47a8      	blx	r5
   14ef8:	4b43      	ldr	r3, [pc, #268]	; (15008 <i2c_master_init+0x2e8>)
   14efa:	4798      	blx	r3
   14efc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   14efe:	2380      	movs	r3, #128	; 0x80
   14f00:	049b      	lsls	r3, r3, #18
   14f02:	68a2      	ldr	r2, [r4, #8]
   14f04:	429a      	cmp	r2, r3
   14f06:	d01e      	beq.n	14f46 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14f08:	0003      	movs	r3, r0
   14f0a:	2040      	movs	r0, #64	; 0x40
   14f0c:	2dff      	cmp	r5, #255	; 0xff
   14f0e:	d900      	bls.n	14f12 <i2c_master_init+0x1f2>
   14f10:	e72d      	b.n	14d6e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
   14f12:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
   14f14:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14f16:	25ff      	movs	r5, #255	; 0xff
   14f18:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   14f1a:	0624      	lsls	r4, r4, #24
   14f1c:	4325      	orrs	r5, r4
   14f1e:	0400      	lsls	r0, r0, #16
   14f20:	23ff      	movs	r3, #255	; 0xff
   14f22:	041b      	lsls	r3, r3, #16
   14f24:	4018      	ands	r0, r3
   14f26:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14f28:	4643      	mov	r3, r8
   14f2a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
   14f2c:	2000      	movs	r0, #0
   14f2e:	e71e      	b.n	14d6e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   14f30:	2100      	movs	r1, #0
   14f32:	4640      	mov	r0, r8
   14f34:	4b35      	ldr	r3, [pc, #212]	; (1500c <i2c_master_init+0x2ec>)
   14f36:	4798      	blx	r3
   14f38:	e74a      	b.n	14dd0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   14f3a:	2101      	movs	r1, #1
   14f3c:	4640      	mov	r0, r8
   14f3e:	4b33      	ldr	r3, [pc, #204]	; (1500c <i2c_master_init+0x2ec>)
   14f40:	4798      	blx	r3
   14f42:	0007      	movs	r7, r0
   14f44:	e751      	b.n	14dea <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14f46:	26fa      	movs	r6, #250	; 0xfa
   14f48:	00b6      	lsls	r6, r6, #2
   14f4a:	4653      	mov	r3, sl
   14f4c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   14f4e:	9800      	ldr	r0, [sp, #0]
   14f50:	9901      	ldr	r1, [sp, #4]
   14f52:	0002      	movs	r2, r0
   14f54:	000b      	movs	r3, r1
   14f56:	4c27      	ldr	r4, [pc, #156]	; (14ff4 <i2c_master_init+0x2d4>)
   14f58:	47a0      	blx	r4
   14f5a:	9000      	str	r0, [sp, #0]
   14f5c:	9101      	str	r1, [sp, #4]
   14f5e:	0030      	movs	r0, r6
   14f60:	4b20      	ldr	r3, [pc, #128]	; (14fe4 <i2c_master_init+0x2c4>)
   14f62:	4798      	blx	r3
   14f64:	2200      	movs	r2, #0
   14f66:	4b2a      	ldr	r3, [pc, #168]	; (15010 <i2c_master_init+0x2f0>)
   14f68:	47b8      	blx	r7
   14f6a:	0002      	movs	r2, r0
   14f6c:	000b      	movs	r3, r1
   14f6e:	9800      	ldr	r0, [sp, #0]
   14f70:	9901      	ldr	r1, [sp, #4]
   14f72:	4c24      	ldr	r4, [pc, #144]	; (15004 <i2c_master_init+0x2e4>)
   14f74:	47a0      	blx	r4
   14f76:	2200      	movs	r2, #0
   14f78:	4b21      	ldr	r3, [pc, #132]	; (15000 <i2c_master_init+0x2e0>)
   14f7a:	4c20      	ldr	r4, [pc, #128]	; (14ffc <i2c_master_init+0x2dc>)
   14f7c:	47a0      	blx	r4
   14f7e:	4b22      	ldr	r3, [pc, #136]	; (15008 <i2c_master_init+0x2e8>)
   14f80:	4798      	blx	r3
   14f82:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
   14f84:	d00c      	beq.n	14fa0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   14f86:	0031      	movs	r1, r6
   14f88:	9807      	ldr	r0, [sp, #28]
   14f8a:	4b22      	ldr	r3, [pc, #136]	; (15014 <i2c_master_init+0x2f4>)
   14f8c:	4798      	blx	r3
   14f8e:	3802      	subs	r0, #2
   14f90:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14f92:	002b      	movs	r3, r5
   14f94:	2dff      	cmp	r5, #255	; 0xff
   14f96:	d80c      	bhi.n	14fb2 <i2c_master_init+0x292>
   14f98:	28ff      	cmp	r0, #255	; 0xff
   14f9a:	d9bc      	bls.n	14f16 <i2c_master_init+0x1f6>
   14f9c:	2040      	movs	r0, #64	; 0x40
   14f9e:	e6e6      	b.n	14d6e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   14fa0:	0071      	lsls	r1, r6, #1
   14fa2:	1e48      	subs	r0, r1, #1
   14fa4:	9b07      	ldr	r3, [sp, #28]
   14fa6:	469c      	mov	ip, r3
   14fa8:	4460      	add	r0, ip
   14faa:	4b1a      	ldr	r3, [pc, #104]	; (15014 <i2c_master_init+0x2f4>)
   14fac:	4798      	blx	r3
   14fae:	3801      	subs	r0, #1
   14fb0:	e7ef      	b.n	14f92 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14fb2:	2040      	movs	r0, #64	; 0x40
   14fb4:	e6db      	b.n	14d6e <i2c_master_init+0x4e>
   14fb6:	46c0      	nop			; (mov r8, r8)
   14fb8:	0001ddfd 	.word	0x0001ddfd
   14fbc:	40000400 	.word	0x40000400
   14fc0:	0001f19d 	.word	0x0001f19d
   14fc4:	0001f111 	.word	0x0001f111
   14fc8:	0001dc39 	.word	0x0001dc39
   14fcc:	00012969 	.word	0x00012969
   14fd0:	0001de39 	.word	0x0001de39
   14fd4:	20005564 	.word	0x20005564
   14fd8:	0001f2c5 	.word	0x0001f2c5
   14fdc:	41002000 	.word	0x41002000
   14fe0:	0001f1b9 	.word	0x0001f1b9
   14fe4:	00026145 	.word	0x00026145
   14fe8:	000255b1 	.word	0x000255b1
   14fec:	e826d695 	.word	0xe826d695
   14ff0:	3e112e0b 	.word	0x3e112e0b
   14ff4:	00024929 	.word	0x00024929
   14ff8:	40240000 	.word	0x40240000
   14ffc:	00025ab1 	.word	0x00025ab1
   15000:	3ff00000 	.word	0x3ff00000
   15004:	00024f49 	.word	0x00024f49
   15008:	000260dd 	.word	0x000260dd
   1500c:	0001dc85 	.word	0x0001dc85
   15010:	40080000 	.word	0x40080000
   15014:	00024039 	.word	0x00024039

00015018 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   15018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1501a:	46ce      	mov	lr, r9
   1501c:	4647      	mov	r7, r8
   1501e:	b580      	push	{r7, lr}
   15020:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15022:	6803      	ldr	r3, [r0, #0]
   15024:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   15026:	4e14      	ldr	r6, [pc, #80]	; (15078 <i2c_master_reset+0x60>)
   15028:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1502a:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1502c:	0028      	movs	r0, r5
   1502e:	4b13      	ldr	r3, [pc, #76]	; (1507c <i2c_master_reset+0x64>)
   15030:	4698      	mov	r8, r3
   15032:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15034:	231f      	movs	r3, #31
   15036:	4018      	ands	r0, r3
   15038:	2701      	movs	r7, #1
   1503a:	0039      	movs	r1, r7
   1503c:	4081      	lsls	r1, r0
   1503e:	3361      	adds	r3, #97	; 0x61
   15040:	4a0f      	ldr	r2, [pc, #60]	; (15080 <i2c_master_reset+0x68>)
   15042:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   15044:	0020      	movs	r0, r4
   15046:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   15048:	2383      	movs	r3, #131	; 0x83
   1504a:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1504c:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1504e:	682b      	ldr	r3, [r5, #0]
   15050:	2202      	movs	r2, #2
   15052:	4393      	bics	r3, r2
   15054:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
   15056:	4b0b      	ldr	r3, [pc, #44]	; (15084 <i2c_master_reset+0x6c>)
   15058:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1505a:	6820      	ldr	r0, [r4, #0]
   1505c:	47c0      	blx	r8
   1505e:	4b0a      	ldr	r3, [pc, #40]	; (15088 <i2c_master_reset+0x70>)
   15060:	4798      	blx	r3
	cpu_irq_leave_critical();
   15062:	4b0a      	ldr	r3, [pc, #40]	; (1508c <i2c_master_reset+0x74>)
   15064:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   15066:	0020      	movs	r0, r4
   15068:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1506a:	464b      	mov	r3, r9
   1506c:	601f      	str	r7, [r3, #0]
}
   1506e:	bc0c      	pop	{r2, r3}
   15070:	4690      	mov	r8, r2
   15072:	4699      	mov	r9, r3
   15074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15076:	46c0      	nop			; (mov r8, r8)
   15078:	00014d15 	.word	0x00014d15
   1507c:	0001de75 	.word	0x0001de75
   15080:	e000e100 	.word	0xe000e100
   15084:	0001d5e9 	.word	0x0001d5e9
   15088:	0001f1ed 	.word	0x0001f1ed
   1508c:	0001d629 	.word	0x0001d629

00015090 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15090:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   15092:	7e1a      	ldrb	r2, [r3, #24]
   15094:	0792      	lsls	r2, r2, #30
   15096:	d507      	bpl.n	150a8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   15098:	2202      	movs	r2, #2
   1509a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1509c:	8b5b      	ldrh	r3, [r3, #26]
   1509e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   150a0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
   150a2:	17db      	asrs	r3, r3, #31
   150a4:	4018      	ands	r0, r3
}
   150a6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   150a8:	8b5a      	ldrh	r2, [r3, #26]
   150aa:	0752      	lsls	r2, r2, #29
   150ac:	d506      	bpl.n	150bc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   150ae:	6859      	ldr	r1, [r3, #4]
   150b0:	22c0      	movs	r2, #192	; 0xc0
   150b2:	0292      	lsls	r2, r2, #10
   150b4:	430a      	orrs	r2, r1
   150b6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
   150b8:	2018      	movs	r0, #24
   150ba:	e7f4      	b.n	150a6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
   150bc:	2000      	movs	r0, #0
   150be:	e7f2      	b.n	150a6 <_i2c_master_address_response+0x16>

000150c0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   150c0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   150c2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   150c4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   150c6:	2401      	movs	r4, #1
   150c8:	2502      	movs	r5, #2
   150ca:	7e11      	ldrb	r1, [r2, #24]
   150cc:	4221      	tst	r1, r4
   150ce:	d10b      	bne.n	150e8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   150d0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   150d2:	4229      	tst	r1, r5
   150d4:	d106      	bne.n	150e4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   150d6:	3301      	adds	r3, #1
   150d8:	b29b      	uxth	r3, r3
   150da:	8901      	ldrh	r1, [r0, #8]
   150dc:	4299      	cmp	r1, r3
   150de:	d8f4      	bhi.n	150ca <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
   150e0:	2012      	movs	r0, #18
   150e2:	e002      	b.n	150ea <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
   150e4:	2000      	movs	r0, #0
   150e6:	e000      	b.n	150ea <_i2c_master_wait_for_bus+0x2a>
   150e8:	2000      	movs	r0, #0
}
   150ea:	bd30      	pop	{r4, r5, pc}

000150ec <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   150ec:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   150ee:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   150f0:	6862      	ldr	r2, [r4, #4]
   150f2:	2380      	movs	r3, #128	; 0x80
   150f4:	02db      	lsls	r3, r3, #11
   150f6:	4313      	orrs	r3, r2
   150f8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   150fa:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   150fc:	4b02      	ldr	r3, [pc, #8]	; (15108 <_i2c_master_send_hs_master_code+0x1c>)
   150fe:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   15100:	2301      	movs	r3, #1
   15102:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
   15104:	bd10      	pop	{r4, pc}
   15106:	46c0      	nop			; (mov r8, r8)
   15108:	000150c1 	.word	0x000150c1

0001510c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1510c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
   1510e:	0080      	lsls	r0, r0, #2
   15110:	4b16      	ldr	r3, [pc, #88]	; (1516c <_tc_interrupt_handler+0x60>)
   15112:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   15114:	6823      	ldr	r3, [r4, #0]
   15116:	7b9d      	ldrb	r5, [r3, #14]
   15118:	7e22      	ldrb	r2, [r4, #24]
   1511a:	7e63      	ldrb	r3, [r4, #25]
   1511c:	4013      	ands	r3, r2
   1511e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   15120:	07eb      	lsls	r3, r5, #31
   15122:	d406      	bmi.n	15132 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   15124:	07ab      	lsls	r3, r5, #30
   15126:	d40b      	bmi.n	15140 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   15128:	06eb      	lsls	r3, r5, #27
   1512a:	d410      	bmi.n	1514e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1512c:	06ab      	lsls	r3, r5, #26
   1512e:	d415      	bmi.n	1515c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
   15130:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   15132:	0020      	movs	r0, r4
   15134:	68a3      	ldr	r3, [r4, #8]
   15136:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   15138:	2301      	movs	r3, #1
   1513a:	6822      	ldr	r2, [r4, #0]
   1513c:	7393      	strb	r3, [r2, #14]
   1513e:	e7f1      	b.n	15124 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
   15140:	0020      	movs	r0, r4
   15142:	68e3      	ldr	r3, [r4, #12]
   15144:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   15146:	2302      	movs	r3, #2
   15148:	6822      	ldr	r2, [r4, #0]
   1514a:	7393      	strb	r3, [r2, #14]
   1514c:	e7ec      	b.n	15128 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1514e:	0020      	movs	r0, r4
   15150:	6923      	ldr	r3, [r4, #16]
   15152:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   15154:	2310      	movs	r3, #16
   15156:	6822      	ldr	r2, [r4, #0]
   15158:	7393      	strb	r3, [r2, #14]
   1515a:	e7e7      	b.n	1512c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1515c:	0020      	movs	r0, r4
   1515e:	6963      	ldr	r3, [r4, #20]
   15160:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   15162:	6823      	ldr	r3, [r4, #0]
   15164:	2220      	movs	r2, #32
   15166:	739a      	strb	r2, [r3, #14]
}
   15168:	e7e2      	b.n	15130 <_tc_interrupt_handler+0x24>
   1516a:	46c0      	nop			; (mov r8, r8)
   1516c:	2000444c 	.word	0x2000444c

00015170 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   15170:	b510      	push	{r4, lr}
   15172:	2000      	movs	r0, #0
   15174:	4b01      	ldr	r3, [pc, #4]	; (1517c <TC3_Handler+0xc>)
   15176:	4798      	blx	r3
   15178:	bd10      	pop	{r4, pc}
   1517a:	46c0      	nop			; (mov r8, r8)
   1517c:	0001510d 	.word	0x0001510d

00015180 <TC4_Handler>:
   15180:	b510      	push	{r4, lr}
   15182:	2001      	movs	r0, #1
   15184:	4b01      	ldr	r3, [pc, #4]	; (1518c <TC4_Handler+0xc>)
   15186:	4798      	blx	r3
   15188:	bd10      	pop	{r4, pc}
   1518a:	46c0      	nop			; (mov r8, r8)
   1518c:	0001510d 	.word	0x0001510d

00015190 <TC5_Handler>:
   15190:	b510      	push	{r4, lr}
   15192:	2002      	movs	r0, #2
   15194:	4b01      	ldr	r3, [pc, #4]	; (1519c <TC5_Handler+0xc>)
   15196:	4798      	blx	r3
   15198:	bd10      	pop	{r4, pc}
   1519a:	46c0      	nop			; (mov r8, r8)
   1519c:	0001510d 	.word	0x0001510d

000151a0 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   151a0:	b570      	push	{r4, r5, r6, lr}
   151a2:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   151a4:	4b09      	ldr	r3, [pc, #36]	; (151cc <prvHelpCommand+0x2c>)
   151a6:	681b      	ldr	r3, [r3, #0]
   151a8:	2b00      	cmp	r3, #0
   151aa:	d00a      	beq.n	151c2 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   151ac:	4c07      	ldr	r4, [pc, #28]	; (151cc <prvHelpCommand+0x2c>)
   151ae:	6825      	ldr	r5, [r4, #0]
   151b0:	682b      	ldr	r3, [r5, #0]
   151b2:	6859      	ldr	r1, [r3, #4]
   151b4:	4b06      	ldr	r3, [pc, #24]	; (151d0 <prvHelpCommand+0x30>)
   151b6:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   151b8:	6868      	ldr	r0, [r5, #4]
   151ba:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
   151bc:	1e43      	subs	r3, r0, #1
   151be:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
   151c0:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
   151c2:	4904      	ldr	r1, [pc, #16]	; (151d4 <prvHelpCommand+0x34>)
   151c4:	4b01      	ldr	r3, [pc, #4]	; (151cc <prvHelpCommand+0x2c>)
   151c6:	6019      	str	r1, [r3, #0]
   151c8:	e7f0      	b.n	151ac <prvHelpCommand+0xc>
   151ca:	46c0      	nop			; (mov r8, r8)
   151cc:	20000b00 	.word	0x20000b00
   151d0:	0002675f 	.word	0x0002675f
   151d4:	200000b0 	.word	0x200000b0

000151d8 <FreeRTOS_CLIRegisterCommand>:
{
   151d8:	b570      	push	{r4, r5, r6, lr}
   151da:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
   151dc:	d006      	beq.n	151ec <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   151de:	2008      	movs	r0, #8
   151e0:	4b0a      	ldr	r3, [pc, #40]	; (1520c <FreeRTOS_CLIRegisterCommand+0x34>)
   151e2:	4798      	blx	r3
   151e4:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
   151e6:	d103      	bne.n	151f0 <FreeRTOS_CLIRegisterCommand+0x18>
   151e8:	b672      	cpsid	i
   151ea:	e7fe      	b.n	151ea <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
   151ec:	b672      	cpsid	i
   151ee:	e7fe      	b.n	151ee <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
   151f0:	4b07      	ldr	r3, [pc, #28]	; (15210 <FreeRTOS_CLIRegisterCommand+0x38>)
   151f2:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   151f4:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
   151f6:	2300      	movs	r3, #0
   151f8:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
   151fa:	4b06      	ldr	r3, [pc, #24]	; (15214 <FreeRTOS_CLIRegisterCommand+0x3c>)
   151fc:	681a      	ldr	r2, [r3, #0]
   151fe:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
   15200:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
   15202:	4b05      	ldr	r3, [pc, #20]	; (15218 <FreeRTOS_CLIRegisterCommand+0x40>)
   15204:	4798      	blx	r3
}
   15206:	2001      	movs	r0, #1
   15208:	bd70      	pop	{r4, r5, r6, pc}
   1520a:	46c0      	nop			; (mov r8, r8)
   1520c:	000167c5 	.word	0x000167c5
   15210:	00016701 	.word	0x00016701
   15214:	200000ac 	.word	0x200000ac
   15218:	00016719 	.word	0x00016719

0001521c <FreeRTOS_CLIProcessCommand>:
{
   1521c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1521e:	46de      	mov	lr, fp
   15220:	4657      	mov	r7, sl
   15222:	464e      	mov	r6, r9
   15224:	4645      	mov	r5, r8
   15226:	b5e0      	push	{r5, r6, r7, lr}
   15228:	b083      	sub	sp, #12
   1522a:	0006      	movs	r6, r0
   1522c:	9100      	str	r1, [sp, #0]
   1522e:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
   15230:	4b39      	ldr	r3, [pc, #228]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   15232:	681b      	ldr	r3, [r3, #0]
   15234:	2b00      	cmp	r3, #0
   15236:	d011      	beq.n	1525c <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   15238:	681b      	ldr	r3, [r3, #0]
   1523a:	689b      	ldr	r3, [r3, #8]
   1523c:	0032      	movs	r2, r6
   1523e:	9901      	ldr	r1, [sp, #4]
   15240:	9800      	ldr	r0, [sp, #0]
   15242:	4798      	blx	r3
		if( xReturn == pdFALSE )
   15244:	2800      	cmp	r0, #0
   15246:	d102      	bne.n	1524e <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
   15248:	2200      	movs	r2, #0
   1524a:	4b33      	ldr	r3, [pc, #204]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   1524c:	601a      	str	r2, [r3, #0]
}
   1524e:	b003      	add	sp, #12
   15250:	bc3c      	pop	{r2, r3, r4, r5}
   15252:	4690      	mov	r8, r2
   15254:	4699      	mov	r9, r3
   15256:	46a2      	mov	sl, r4
   15258:	46ab      	mov	fp, r5
   1525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1525c:	4c2f      	ldr	r4, [pc, #188]	; (1531c <FreeRTOS_CLIProcessCommand+0x100>)
   1525e:	4b2e      	ldr	r3, [pc, #184]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   15260:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   15262:	4b2f      	ldr	r3, [pc, #188]	; (15320 <FreeRTOS_CLIProcessCommand+0x104>)
   15264:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   15266:	2320      	movs	r3, #32
   15268:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1526a:	4b2e      	ldr	r3, [pc, #184]	; (15324 <FreeRTOS_CLIProcessCommand+0x108>)
   1526c:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1526e:	4b2a      	ldr	r3, [pc, #168]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   15270:	469a      	mov	sl, r3
   15272:	e00a      	b.n	1528a <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   15274:	0002      	movs	r2, r0
   15276:	0029      	movs	r1, r5
   15278:	0030      	movs	r0, r6
   1527a:	47d8      	blx	fp
   1527c:	2800      	cmp	r0, #0
   1527e:	d00d      	beq.n	1529c <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15280:	6864      	ldr	r4, [r4, #4]
   15282:	4653      	mov	r3, sl
   15284:	601c      	str	r4, [r3, #0]
   15286:	2c00      	cmp	r4, #0
   15288:	d03e      	beq.n	15308 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1528a:	6827      	ldr	r7, [r4, #0]
   1528c:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1528e:	0028      	movs	r0, r5
   15290:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   15292:	5c33      	ldrb	r3, [r6, r0]
   15294:	4642      	mov	r2, r8
   15296:	4393      	bics	r3, r2
   15298:	d1f2      	bne.n	15280 <FreeRTOS_CLIProcessCommand+0x64>
   1529a:	e7eb      	b.n	15274 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1529c:	7b3f      	ldrb	r7, [r7, #12]
   1529e:	b27f      	sxtb	r7, r7
   152a0:	2f00      	cmp	r7, #0
   152a2:	db2d      	blt.n	15300 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   152a4:	7833      	ldrb	r3, [r6, #0]
   152a6:	2b00      	cmp	r3, #0
   152a8:	d028      	beq.n	152fc <FreeRTOS_CLIProcessCommand+0xe0>
   152aa:	0032      	movs	r2, r6
   152ac:	2500      	movs	r5, #0
   152ae:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
   152b0:	2401      	movs	r4, #1
   152b2:	e008      	b.n	152c6 <FreeRTOS_CLIProcessCommand+0xaa>
   152b4:	2901      	cmp	r1, #1
   152b6:	d00a      	beq.n	152ce <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
   152b8:	3501      	adds	r5, #1
   152ba:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
   152bc:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
   152be:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
   152c0:	7813      	ldrb	r3, [r2, #0]
   152c2:	2b00      	cmp	r3, #0
   152c4:	d005      	beq.n	152d2 <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
   152c6:	2b20      	cmp	r3, #32
   152c8:	d0f4      	beq.n	152b4 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
   152ca:	0001      	movs	r1, r0
   152cc:	e7f7      	b.n	152be <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
   152ce:	0021      	movs	r1, r4
   152d0:	e7f5      	b.n	152be <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   152d2:	2901      	cmp	r1, #1
   152d4:	d00f      	beq.n	152f6 <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   152d6:	4b10      	ldr	r3, [pc, #64]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   152d8:	681b      	ldr	r3, [r3, #0]
   152da:	2b00      	cmp	r3, #0
   152dc:	d014      	beq.n	15308 <FreeRTOS_CLIProcessCommand+0xec>
   152de:	42af      	cmp	r7, r5
   152e0:	d0aa      	beq.n	15238 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   152e2:	9a01      	ldr	r2, [sp, #4]
   152e4:	4910      	ldr	r1, [pc, #64]	; (15328 <FreeRTOS_CLIProcessCommand+0x10c>)
   152e6:	9800      	ldr	r0, [sp, #0]
   152e8:	4b10      	ldr	r3, [pc, #64]	; (1532c <FreeRTOS_CLIProcessCommand+0x110>)
   152ea:	4798      	blx	r3
		pxCommand = NULL;
   152ec:	2200      	movs	r2, #0
   152ee:	4b0a      	ldr	r3, [pc, #40]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   152f0:	601a      	str	r2, [r3, #0]
   152f2:	2000      	movs	r0, #0
   152f4:	e7ab      	b.n	1524e <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
   152f6:	3d01      	subs	r5, #1
   152f8:	b26d      	sxtb	r5, r5
   152fa:	e7ec      	b.n	152d6 <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
   152fc:	2500      	movs	r5, #0
   152fe:	e7ea      	b.n	152d6 <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   15300:	4b05      	ldr	r3, [pc, #20]	; (15318 <FreeRTOS_CLIProcessCommand+0xfc>)
   15302:	681b      	ldr	r3, [r3, #0]
   15304:	2b00      	cmp	r3, #0
   15306:	d197      	bne.n	15238 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   15308:	9a01      	ldr	r2, [sp, #4]
   1530a:	4909      	ldr	r1, [pc, #36]	; (15330 <FreeRTOS_CLIProcessCommand+0x114>)
   1530c:	9800      	ldr	r0, [sp, #0]
   1530e:	4b07      	ldr	r3, [pc, #28]	; (1532c <FreeRTOS_CLIProcessCommand+0x110>)
   15310:	4798      	blx	r3
		xReturn = pdFALSE;
   15312:	2000      	movs	r0, #0
	return xReturn;
   15314:	e79b      	b.n	1524e <FreeRTOS_CLIProcessCommand+0x32>
   15316:	46c0      	nop			; (mov r8, r8)
   15318:	20000afc 	.word	0x20000afc
   1531c:	200000b0 	.word	0x200000b0
   15320:	0002672f 	.word	0x0002672f
   15324:	0002673d 	.word	0x0002673d
   15328:	000287d8 	.word	0x000287d8
   1532c:	0002675f 	.word	0x0002675f
   15330:	00028830 	.word	0x00028830

00015334 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   15334:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   15336:	4b01      	ldr	r3, [pc, #4]	; (1533c <prvTraceGetQueueType+0x8>)
   15338:	4798      	blx	r3
}
   1533a:	bd10      	pop	{r4, pc}
   1533c:	000179b9 	.word	0x000179b9

00015340 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   15340:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   15342:	4b02      	ldr	r3, [pc, #8]	; (1534c <prvTraceGetTaskNumberLow16+0xc>)
   15344:	4798      	blx	r3
   15346:	b280      	uxth	r0, r0
}
   15348:	bd10      	pop	{r4, pc}
   1534a:	46c0      	nop			; (mov r8, r8)
   1534c:	00018641 	.word	0x00018641

00015350 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   15350:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   15352:	4b02      	ldr	r3, [pc, #8]	; (1535c <prvTraceGetTaskNumberHigh16+0xc>)
   15354:	4798      	blx	r3
   15356:	0c00      	lsrs	r0, r0, #16
}
   15358:	bd10      	pop	{r4, pc}
   1535a:	46c0      	nop			; (mov r8, r8)
   1535c:	00018641 	.word	0x00018641

00015360 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   15360:	b570      	push	{r4, r5, r6, lr}
   15362:	0004      	movs	r4, r0
   15364:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   15366:	4b04      	ldr	r3, [pc, #16]	; (15378 <prvTraceSetTaskNumberLow16+0x18>)
   15368:	4798      	blx	r3
   1536a:	0c01      	lsrs	r1, r0, #16
   1536c:	0409      	lsls	r1, r1, #16
   1536e:	4329      	orrs	r1, r5
   15370:	0020      	movs	r0, r4
   15372:	4b02      	ldr	r3, [pc, #8]	; (1537c <prvTraceSetTaskNumberLow16+0x1c>)
   15374:	4798      	blx	r3
}
   15376:	bd70      	pop	{r4, r5, r6, pc}
   15378:	00018641 	.word	0x00018641
   1537c:	0001864d 	.word	0x0001864d

00015380 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   15380:	b570      	push	{r4, r5, r6, lr}
   15382:	0004      	movs	r4, r0
   15384:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   15386:	4b05      	ldr	r3, [pc, #20]	; (1539c <prvTraceSetTaskNumberHigh16+0x1c>)
   15388:	4798      	blx	r3
   1538a:	0401      	lsls	r1, r0, #16
   1538c:	0c09      	lsrs	r1, r1, #16
   1538e:	042d      	lsls	r5, r5, #16
   15390:	4329      	orrs	r1, r5
   15392:	0020      	movs	r0, r4
   15394:	4b02      	ldr	r3, [pc, #8]	; (153a0 <prvTraceSetTaskNumberHigh16+0x20>)
   15396:	4798      	blx	r3
}
   15398:	bd70      	pop	{r4, r5, r6, pc}
   1539a:	46c0      	nop			; (mov r8, r8)
   1539c:	00018641 	.word	0x00018641
   153a0:	0001864d 	.word	0x0001864d

000153a4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   153a4:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   153a6:	4b02      	ldr	r3, [pc, #8]	; (153b0 <prvTraceGetQueueNumberLow16+0xc>)
   153a8:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   153aa:	b280      	uxth	r0, r0
}
   153ac:	bd10      	pop	{r4, pc}
   153ae:	46c0      	nop			; (mov r8, r8)
   153b0:	000179b1 	.word	0x000179b1

000153b4 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   153b4:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   153b6:	4b02      	ldr	r3, [pc, #8]	; (153c0 <prvTraceGetQueueNumberHigh16+0xc>)
   153b8:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   153ba:	0c00      	lsrs	r0, r0, #16
}
   153bc:	bd10      	pop	{r4, pc}
   153be:	46c0      	nop			; (mov r8, r8)
   153c0:	000179b1 	.word	0x000179b1

000153c4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   153c4:	b570      	push	{r4, r5, r6, lr}
   153c6:	0004      	movs	r4, r0
   153c8:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   153ca:	4b04      	ldr	r3, [pc, #16]	; (153dc <prvTraceSetQueueNumberLow16+0x18>)
   153cc:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   153ce:	0c01      	lsrs	r1, r0, #16
   153d0:	0409      	lsls	r1, r1, #16
   153d2:	4329      	orrs	r1, r5
   153d4:	0020      	movs	r0, r4
   153d6:	4b02      	ldr	r3, [pc, #8]	; (153e0 <prvTraceSetQueueNumberLow16+0x1c>)
   153d8:	4798      	blx	r3
}
   153da:	bd70      	pop	{r4, r5, r6, pc}
   153dc:	000179b1 	.word	0x000179b1
   153e0:	000179b5 	.word	0x000179b5

000153e4 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   153e4:	b570      	push	{r4, r5, r6, lr}
   153e6:	0004      	movs	r4, r0
   153e8:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   153ea:	4b05      	ldr	r3, [pc, #20]	; (15400 <prvTraceSetQueueNumberHigh16+0x1c>)
   153ec:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   153ee:	0401      	lsls	r1, r0, #16
   153f0:	0c09      	lsrs	r1, r1, #16
   153f2:	042d      	lsls	r5, r5, #16
   153f4:	4329      	orrs	r1, r5
   153f6:	0020      	movs	r0, r4
   153f8:	4b02      	ldr	r3, [pc, #8]	; (15404 <prvTraceSetQueueNumberHigh16+0x20>)
   153fa:	4798      	blx	r3
}
   153fc:	bd70      	pop	{r4, r5, r6, pc}
   153fe:	46c0      	nop			; (mov r8, r8)
   15400:	000179b1 	.word	0x000179b1
   15404:	000179b5 	.word	0x000179b5

00015408 <prvAddTaskToStackMonitor>:
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   15408:	4b0d      	ldr	r3, [pc, #52]	; (15440 <prvAddTaskToStackMonitor+0x38>)
   1540a:	681b      	ldr	r3, [r3, #0]
   1540c:	2b00      	cmp	r3, #0
   1540e:	d00d      	beq.n	1542c <prvAddTaskToStackMonitor+0x24>
   15410:	2301      	movs	r3, #1
   15412:	490b      	ldr	r1, [pc, #44]	; (15440 <prvAddTaskToStackMonitor+0x38>)
   15414:	00da      	lsls	r2, r3, #3
   15416:	5852      	ldr	r2, [r2, r1]
   15418:	2a00      	cmp	r2, #0
   1541a:	d008      	beq.n	1542e <prvAddTaskToStackMonitor+0x26>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1541c:	3301      	adds	r3, #1
   1541e:	2b0a      	cmp	r3, #10
   15420:	d1f8      	bne.n	15414 <prvAddTaskToStackMonitor+0xc>
		}
	}

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
   15422:	4a08      	ldr	r2, [pc, #32]	; (15444 <prvAddTaskToStackMonitor+0x3c>)
   15424:	6813      	ldr	r3, [r2, #0]
   15426:	3301      	adds	r3, #1
   15428:	6013      	str	r3, [r2, #0]
	}
}
   1542a:	4770      	bx	lr
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1542c:	2300      	movs	r3, #0
			tasksInStackMonitor[i].tcb = task;
   1542e:	4a04      	ldr	r2, [pc, #16]	; (15440 <prvAddTaskToStackMonitor+0x38>)
   15430:	00db      	lsls	r3, r3, #3
   15432:	5098      	str	r0, [r3, r2]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   15434:	18d3      	adds	r3, r2, r3
   15436:	2201      	movs	r2, #1
   15438:	4252      	negs	r2, r2
   1543a:	605a      	str	r2, [r3, #4]
   1543c:	e7f5      	b.n	1542a <prvAddTaskToStackMonitor+0x22>
   1543e:	46c0      	nop			; (mov r8, r8)
   15440:	20000b0c 	.word	0x20000b0c
   15444:	20000b5c 	.word	0x20000b5c

00015448 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   15448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1544a:	46ce      	mov	lr, r9
   1544c:	4647      	mov	r7, r8
   1544e:	b580      	push	{r7, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   15450:	4b1d      	ldr	r3, [pc, #116]	; (154c8 <prvReportStackUsage+0x80>)
   15452:	681b      	ldr	r3, [r3, #0]
   15454:	4699      	mov	r9, r3
	int count = 0;		/* The number of generated reports */
   15456:	2400      	movs	r4, #0
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   15458:	4e1c      	ldr	r6, [pc, #112]	; (154cc <prvReportStackUsage+0x84>)
   1545a:	4d1b      	ldr	r5, [pc, #108]	; (154c8 <prvReportStackUsage+0x80>)
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1545c:	4b1c      	ldr	r3, [pc, #112]	; (154d0 <prvReportStackUsage+0x88>)
   1545e:	4698      	mov	r8, r3
   15460:	e01b      	b.n	1549a <prvReportStackUsage+0x52>
			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   15462:	4f1a      	ldr	r7, [pc, #104]	; (154cc <prvReportStackUsage+0x84>)
   15464:	00db      	lsls	r3, r3, #3
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   15466:	59d8      	ldr	r0, [r3, r7]
   15468:	4b1a      	ldr	r3, [pc, #104]	; (154d4 <prvReportStackUsage+0x8c>)
   1546a:	4798      	blx	r3
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1546c:	4b16      	ldr	r3, [pc, #88]	; (154c8 <prvReportStackUsage+0x80>)
   1546e:	681b      	ldr	r3, [r3, #0]
   15470:	00db      	lsls	r3, r3, #3
   15472:	18fb      	adds	r3, r7, r3
   15474:	685b      	ldr	r3, [r3, #4]
   15476:	22ff      	movs	r2, #255	; 0xff
   15478:	4002      	ands	r2, r0
   1547a:	2103      	movs	r1, #3
   1547c:	20ea      	movs	r0, #234	; 0xea
   1547e:	4f16      	ldr	r7, [pc, #88]	; (154d8 <prvReportStackUsage+0x90>)
   15480:	47b8      	blx	r7
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   15482:	3401      	adds	r4, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   15484:	4f10      	ldr	r7, [pc, #64]	; (154c8 <prvReportStackUsage+0x80>)
   15486:	683b      	ldr	r3, [r7, #0]
   15488:	1c58      	adds	r0, r3, #1
   1548a:	210a      	movs	r1, #10
   1548c:	4b13      	ldr	r3, [pc, #76]	; (154dc <prvReportStackUsage+0x94>)
   1548e:	4798      	blx	r3
   15490:	6039      	str	r1, [r7, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   15492:	2c00      	cmp	r4, #0
   15494:	dc13      	bgt.n	154be <prvReportStackUsage+0x76>
   15496:	4589      	cmp	r9, r1
   15498:	d011      	beq.n	154be <prvReportStackUsage+0x76>
		if (tasksInStackMonitor[i].tcb != NULL)
   1549a:	682b      	ldr	r3, [r5, #0]
   1549c:	00db      	lsls	r3, r3, #3
   1549e:	5998      	ldr	r0, [r3, r6]
   154a0:	2800      	cmp	r0, #0
   154a2:	d0ef      	beq.n	15484 <prvReportStackUsage+0x3c>
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   154a4:	47c0      	blx	r8
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   154a6:	4b08      	ldr	r3, [pc, #32]	; (154c8 <prvReportStackUsage+0x80>)
   154a8:	681b      	ldr	r3, [r3, #0]
   154aa:	00d9      	lsls	r1, r3, #3
   154ac:	4a07      	ldr	r2, [pc, #28]	; (154cc <prvReportStackUsage+0x84>)
   154ae:	1852      	adds	r2, r2, r1
   154b0:	6852      	ldr	r2, [r2, #4]
   154b2:	4290      	cmp	r0, r2
   154b4:	d2d5      	bcs.n	15462 <prvReportStackUsage+0x1a>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   154b6:	4a05      	ldr	r2, [pc, #20]	; (154cc <prvReportStackUsage+0x84>)
   154b8:	1852      	adds	r2, r2, r1
   154ba:	6050      	str	r0, [r2, #4]
   154bc:	e7d1      	b.n	15462 <prvReportStackUsage+0x1a>
}
   154be:	bc0c      	pop	{r2, r3}
   154c0:	4690      	mov	r8, r2
   154c2:	4699      	mov	r9, r3
   154c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154c6:	46c0      	nop			; (mov r8, r8)
   154c8:	20000b08 	.word	0x20000b08
   154cc:	20000b0c 	.word	0x20000b0c
   154d0:	00018655 	.word	0x00018655
   154d4:	00018641 	.word	0x00018641
   154d8:	0001624d 	.word	0x0001624d
   154dc:	00024319 	.word	0x00024319

000154e0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   154e0:	b570      	push	{r4, r5, r6, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   154e2:	4d05      	ldr	r5, [pc, #20]	; (154f8 <TzCtrl+0x18>)
		{
			prvReportStackUsage();
   154e4:	4e05      	ldr	r6, [pc, #20]	; (154fc <TzCtrl+0x1c>)
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   154e6:	4c06      	ldr	r4, [pc, #24]	; (15500 <TzCtrl+0x20>)
   154e8:	e001      	b.n	154ee <TzCtrl+0xe>
   154ea:	2004      	movs	r0, #4
   154ec:	47a0      	blx	r4
		if (xTraceIsRecordingEnabled())
   154ee:	47a8      	blx	r5
   154f0:	2800      	cmp	r0, #0
   154f2:	d0fa      	beq.n	154ea <TzCtrl+0xa>
			prvReportStackUsage();
   154f4:	47b0      	blx	r6
   154f6:	e7f8      	b.n	154ea <TzCtrl+0xa>
   154f8:	00015769 	.word	0x00015769
   154fc:	00015449 	.word	0x00015449
   15500:	00018145 	.word	0x00018145

00015504 <prvTraceGetCurrentTaskHandle>:
{
   15504:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
   15506:	4b01      	ldr	r3, [pc, #4]	; (1550c <prvTraceGetCurrentTaskHandle+0x8>)
   15508:	4798      	blx	r3
}
   1550a:	bd10      	pop	{r4, pc}
   1550c:	00018681 	.word	0x00018681

00015510 <vTraceEnable>:
{
   15510:	b510      	push	{r4, lr}
   15512:	b082      	sub	sp, #8
   15514:	0004      	movs	r4, r0
	prvTraceInitTraceData();
   15516:	4b12      	ldr	r3, [pc, #72]	; (15560 <vTraceEnable+0x50>)
   15518:	4798      	blx	r3
	if (startOption == TRC_START)
   1551a:	2c01      	cmp	r4, #1
   1551c:	d009      	beq.n	15532 <vTraceEnable+0x22>
	else if (startOption == TRC_START_AWAIT_HOST)
   1551e:	2c02      	cmp	r4, #2
   15520:	d00a      	beq.n	15538 <vTraceEnable+0x28>
	else if (startOption != TRC_INIT)
   15522:	2c00      	cmp	r4, #0
   15524:	d10c      	bne.n	15540 <vTraceEnable+0x30>
	if (HandleTzCtrl == NULL)
   15526:	4b0f      	ldr	r3, [pc, #60]	; (15564 <vTraceEnable+0x54>)
   15528:	681b      	ldr	r3, [r3, #0]
   1552a:	2b00      	cmp	r3, #0
   1552c:	d00c      	beq.n	15548 <vTraceEnable+0x38>
}
   1552e:	b002      	add	sp, #8
   15530:	bd10      	pop	{r4, pc}
		vTraceStart();
   15532:	4b0d      	ldr	r3, [pc, #52]	; (15568 <vTraceEnable+0x58>)
   15534:	4798      	blx	r3
   15536:	e7f6      	b.n	15526 <vTraceEnable+0x16>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   15538:	480c      	ldr	r0, [pc, #48]	; (1556c <vTraceEnable+0x5c>)
   1553a:	4b0d      	ldr	r3, [pc, #52]	; (15570 <vTraceEnable+0x60>)
   1553c:	4798      	blx	r3
   1553e:	e7f2      	b.n	15526 <vTraceEnable+0x16>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   15540:	480c      	ldr	r0, [pc, #48]	; (15574 <vTraceEnable+0x64>)
   15542:	4b0b      	ldr	r3, [pc, #44]	; (15570 <vTraceEnable+0x60>)
   15544:	4798      	blx	r3
   15546:	e7ee      	b.n	15526 <vTraceEnable+0x16>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   15548:	4b06      	ldr	r3, [pc, #24]	; (15564 <vTraceEnable+0x54>)
   1554a:	9301      	str	r3, [sp, #4]
   1554c:	2304      	movs	r3, #4
   1554e:	9300      	str	r3, [sp, #0]
   15550:	2300      	movs	r3, #0
   15552:	22c8      	movs	r2, #200	; 0xc8
   15554:	4908      	ldr	r1, [pc, #32]	; (15578 <vTraceEnable+0x68>)
   15556:	4809      	ldr	r0, [pc, #36]	; (1557c <vTraceEnable+0x6c>)
   15558:	4c09      	ldr	r4, [pc, #36]	; (15580 <vTraceEnable+0x70>)
   1555a:	47a0      	blx	r4
}
   1555c:	e7e7      	b.n	1552e <vTraceEnable+0x1e>
   1555e:	46c0      	nop			; (mov r8, r8)
   15560:	0001577d 	.word	0x0001577d
   15564:	20000b04 	.word	0x20000b04
   15568:	00016561 	.word	0x00016561
   1556c:	00028bec 	.word	0x00028bec
   15570:	00015955 	.word	0x00015955
   15574:	00028c2c 	.word	0x00028c2c
   15578:	00028c60 	.word	0x00028c60
   1557c:	000154e1 	.word	0x000154e1
   15580:	00017b55 	.word	0x00017b55

00015584 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   15584:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   15586:	4b2f      	ldr	r3, [pc, #188]	; (15644 <vTraceInitObjectPropertyTable+0xc0>)
   15588:	681b      	ldr	r3, [r3, #0]
   1558a:	2209      	movs	r2, #9
   1558c:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1558e:	3201      	adds	r2, #1
   15590:	2164      	movs	r1, #100	; 0x64
   15592:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   15594:	3101      	adds	r1, #1
   15596:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   15598:	3101      	adds	r1, #1
   1559a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1559c:	3205      	adds	r2, #5
   1559e:	3101      	adds	r1, #1
   155a0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   155a2:	3962      	subs	r1, #98	; 0x62
   155a4:	2068      	movs	r0, #104	; 0x68
   155a6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   155a8:	3001      	adds	r0, #1
   155aa:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   155ac:	3001      	adds	r0, #1
   155ae:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   155b0:	3001      	adds	r0, #1
   155b2:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   155b4:	3001      	adds	r0, #1
   155b6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   155b8:	316b      	adds	r1, #107	; 0x6b
   155ba:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   155bc:	3101      	adds	r1, #1
   155be:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   155c0:	3101      	adds	r1, #1
   155c2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   155c4:	3101      	adds	r1, #1
   155c6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   155c8:	3101      	adds	r1, #1
   155ca:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   155cc:	3101      	adds	r1, #1
   155ce:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   155d0:	3101      	adds	r1, #1
   155d2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   155d4:	3101      	adds	r1, #1
   155d6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   155d8:	3101      	adds	r1, #1
   155da:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   155dc:	3968      	subs	r1, #104	; 0x68
   155de:	326d      	adds	r2, #109	; 0x6d
   155e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   155e2:	3201      	adds	r2, #1
   155e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   155e6:	3201      	adds	r2, #1
   155e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   155ea:	3a6b      	subs	r2, #107	; 0x6b
   155ec:	3013      	adds	r0, #19
   155ee:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   155f0:	2411      	movs	r4, #17
   155f2:	3001      	adds	r0, #1
   155f4:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   155f6:	3001      	adds	r0, #1
   155f8:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   155fa:	3172      	adds	r1, #114	; 0x72
   155fc:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   155fe:	3101      	adds	r1, #1
   15600:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   15602:	3101      	adds	r1, #1
   15604:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   15606:	2100      	movs	r1, #0
   15608:	3275      	adds	r2, #117	; 0x75
   1560a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1560c:	31a0      	adds	r1, #160	; 0xa0
   1560e:	3202      	adds	r2, #2
   15610:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   15612:	31a0      	adds	r1, #160	; 0xa0
   15614:	3202      	adds	r2, #2
   15616:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   15618:	31a0      	adds	r1, #160	; 0xa0
   1561a:	3202      	adds	r2, #2
   1561c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1561e:	490a      	ldr	r1, [pc, #40]	; (15648 <vTraceInitObjectPropertyTable+0xc4>)
   15620:	3202      	adds	r2, #2
   15622:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   15624:	4909      	ldr	r1, [pc, #36]	; (1564c <vTraceInitObjectPropertyTable+0xc8>)
   15626:	3202      	adds	r2, #2
   15628:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1562a:	4909      	ldr	r1, [pc, #36]	; (15650 <vTraceInitObjectPropertyTable+0xcc>)
   1562c:	3202      	adds	r2, #2
   1562e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   15630:	4908      	ldr	r1, [pc, #32]	; (15654 <vTraceInitObjectPropertyTable+0xd0>)
   15632:	3202      	adds	r2, #2
   15634:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   15636:	315f      	adds	r1, #95	; 0x5f
   15638:	3202      	adds	r2, #2
   1563a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1563c:	4a06      	ldr	r2, [pc, #24]	; (15658 <vTraceInitObjectPropertyTable+0xd4>)
   1563e:	661a      	str	r2, [r3, #96]	; 0x60
}
   15640:	bd10      	pop	{r4, pc}
   15642:	46c0      	nop			; (mov r8, r8)
   15644:	20000b60 	.word	0x20000b60
   15648:	000002fd 	.word	0x000002fd
   1564c:	00000352 	.word	0x00000352
   15650:	000003a2 	.word	0x000003a2
   15654:	00000401 	.word	0x00000401
   15658:	000004bf 	.word	0x000004bf

0001565c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1565c:	4b17      	ldr	r3, [pc, #92]	; (156bc <vTraceInitObjectHandleStack+0x60>)
   1565e:	2200      	movs	r2, #0
   15660:	825a      	strh	r2, [r3, #18]
   15662:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   15664:	320a      	adds	r2, #10
   15666:	829a      	strh	r2, [r3, #20]
   15668:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1566a:	320a      	adds	r2, #10
   1566c:	82da      	strh	r2, [r3, #22]
   1566e:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   15670:	320a      	adds	r2, #10
   15672:	831a      	strh	r2, [r3, #24]
   15674:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   15676:	320f      	adds	r2, #15
   15678:	835a      	strh	r2, [r3, #26]
   1567a:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1567c:	3205      	adds	r2, #5
   1567e:	839a      	strh	r2, [r3, #28]
   15680:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   15682:	3205      	adds	r2, #5
   15684:	83da      	strh	r2, [r3, #30]
   15686:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   15688:	3205      	adds	r2, #5
   1568a:	841a      	strh	r2, [r3, #32]
   1568c:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1568e:	3205      	adds	r2, #5
   15690:	845a      	strh	r2, [r3, #34]	; 0x22
   15692:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   15694:	3a38      	subs	r2, #56	; 0x38
   15696:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   15698:	320a      	adds	r2, #10
   1569a:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1569c:	320a      	adds	r2, #10
   1569e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   156a0:	320f      	adds	r2, #15
   156a2:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   156a4:	3205      	adds	r2, #5
   156a6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   156a8:	3205      	adds	r2, #5
   156aa:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   156ac:	3205      	adds	r2, #5
   156ae:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   156b0:	3205      	adds	r2, #5
   156b2:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   156b4:	3205      	adds	r2, #5
   156b6:	869a      	strh	r2, [r3, #52]	; 0x34
}
   156b8:	4770      	bx	lr
   156ba:	46c0      	nop			; (mov r8, r8)
   156bc:	20000b7c 	.word	0x20000b7c

000156c0 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   156c0:	2808      	cmp	r0, #8
   156c2:	d813      	bhi.n	156ec <pszTraceGetErrorNotEnoughHandles+0x2c>
   156c4:	0080      	lsls	r0, r0, #2
   156c6:	4b0b      	ldr	r3, [pc, #44]	; (156f4 <pszTraceGetErrorNotEnoughHandles+0x34>)
   156c8:	581b      	ldr	r3, [r3, r0]
   156ca:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   156cc:	480a      	ldr	r0, [pc, #40]	; (156f8 <pszTraceGetErrorNotEnoughHandles+0x38>)
   156ce:	e010      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   156d0:	480a      	ldr	r0, [pc, #40]	; (156fc <pszTraceGetErrorNotEnoughHandles+0x3c>)
   156d2:	e00e      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   156d4:	480a      	ldr	r0, [pc, #40]	; (15700 <pszTraceGetErrorNotEnoughHandles+0x40>)
   156d6:	e00c      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   156d8:	480a      	ldr	r0, [pc, #40]	; (15704 <pszTraceGetErrorNotEnoughHandles+0x44>)
   156da:	e00a      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   156dc:	480a      	ldr	r0, [pc, #40]	; (15708 <pszTraceGetErrorNotEnoughHandles+0x48>)
   156de:	e008      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   156e0:	480a      	ldr	r0, [pc, #40]	; (1570c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   156e2:	e006      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   156e4:	480a      	ldr	r0, [pc, #40]	; (15710 <pszTraceGetErrorNotEnoughHandles+0x50>)
   156e6:	e004      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   156e8:	480a      	ldr	r0, [pc, #40]	; (15714 <pszTraceGetErrorNotEnoughHandles+0x54>)
   156ea:	e002      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   156ec:	480a      	ldr	r0, [pc, #40]	; (15718 <pszTraceGetErrorNotEnoughHandles+0x58>)
   156ee:	e000      	b.n	156f2 <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   156f0:	480a      	ldr	r0, [pc, #40]	; (1571c <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
   156f2:	4770      	bx	lr
   156f4:	000288c8 	.word	0x000288c8
   156f8:	00028934 	.word	0x00028934
   156fc:	0002897c 	.word	0x0002897c
   15700:	000289d0 	.word	0x000289d0
   15704:	00028a1c 	.word	0x00028a1c
   15708:	00028a68 	.word	0x00028a68
   1570c:	00028ab4 	.word	0x00028ab4
   15710:	00028b08 	.word	0x00028b08
   15714:	00028b60 	.word	0x00028b60
   15718:	00028bbc 	.word	0x00028bbc
   1571c:	000288ec 	.word	0x000288ec

00015720 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   15720:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   15722:	2a00      	cmp	r2, #0
   15724:	d00d      	beq.n	15742 <prvStrncpy+0x22>
	{
		dst[i] = src[i];
   15726:	780b      	ldrb	r3, [r1, #0]
   15728:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
   1572a:	780b      	ldrb	r3, [r1, #0]
   1572c:	2b00      	cmp	r3, #0
   1572e:	d008      	beq.n	15742 <prvStrncpy+0x22>
   15730:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
   15732:	3301      	adds	r3, #1
   15734:	429a      	cmp	r2, r3
   15736:	d004      	beq.n	15742 <prvStrncpy+0x22>
		dst[i] = src[i];
   15738:	5ccc      	ldrb	r4, [r1, r3]
   1573a:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
   1573c:	5ccc      	ldrb	r4, [r1, r3]
   1573e:	2c00      	cmp	r4, #0
   15740:	d1f7      	bne.n	15732 <prvStrncpy+0x12>
			break;
	}
}
   15742:	bd10      	pop	{r4, pc}

00015744 <vTraceStop>:
{
   15744:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
   15746:	4b06      	ldr	r3, [pc, #24]	; (15760 <vTraceStop+0x1c>)
   15748:	681b      	ldr	r3, [r3, #0]
   1574a:	2b00      	cmp	r3, #0
   1574c:	d001      	beq.n	15752 <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
   1574e:	2200      	movs	r2, #0
   15750:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   15752:	4b04      	ldr	r3, [pc, #16]	; (15764 <vTraceStop+0x20>)
   15754:	681b      	ldr	r3, [r3, #0]
   15756:	2b00      	cmp	r3, #0
   15758:	d000      	beq.n	1575c <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1575a:	4798      	blx	r3
}
   1575c:	bd10      	pop	{r4, pc}
   1575e:	46c0      	nop			; (mov r8, r8)
   15760:	20000b60 	.word	0x20000b60
   15764:	20000c28 	.word	0x20000c28

00015768 <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
   15768:	4b03      	ldr	r3, [pc, #12]	; (15778 <xTraceIsRecordingEnabled+0x10>)
   1576a:	681b      	ldr	r3, [r3, #0]
   1576c:	2b00      	cmp	r3, #0
   1576e:	d001      	beq.n	15774 <xTraceIsRecordingEnabled+0xc>
		return (int)RecorderDataPtr->recorderActive;
   15770:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   15772:	4770      	bx	lr
   15774:	2000      	movs	r0, #0
   15776:	e7fc      	b.n	15772 <xTraceIsRecordingEnabled+0xa>
   15778:	20000b60 	.word	0x20000b60

0001577c <prvTraceInitTraceData>:
{	
   1577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1577e:	46de      	mov	lr, fp
   15780:	4657      	mov	r7, sl
   15782:	464e      	mov	r6, r9
   15784:	4645      	mov	r5, r8
   15786:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   15788:	4b51      	ldr	r3, [pc, #324]	; (158d0 <prvTraceInitTraceData+0x154>)
   1578a:	681b      	ldr	r3, [r3, #0]
   1578c:	2b00      	cmp	r3, #0
   1578e:	d100      	bne.n	15792 <prvTraceInitTraceData+0x16>
   15790:	e099      	b.n	158c6 <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
   15792:	781b      	ldrb	r3, [r3, #0]
   15794:	2b01      	cmp	r3, #1
   15796:	d100      	bne.n	1579a <prvTraceInitTraceData+0x1e>
   15798:	e08f      	b.n	158ba <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
   1579a:	4b4e      	ldr	r3, [pc, #312]	; (158d4 <prvTraceInitTraceData+0x158>)
   1579c:	681a      	ldr	r2, [r3, #0]
   1579e:	4b4e      	ldr	r3, [pc, #312]	; (158d8 <prvTraceInitTraceData+0x15c>)
   157a0:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   157a2:	4c4b      	ldr	r4, [pc, #300]	; (158d0 <prvTraceInitTraceData+0x154>)
   157a4:	25bd      	movs	r5, #189	; 0xbd
   157a6:	012d      	lsls	r5, r5, #4
   157a8:	002a      	movs	r2, r5
   157aa:	2100      	movs	r1, #0
   157ac:	6820      	ldr	r0, [r4, #0]
   157ae:	4b4b      	ldr	r3, [pc, #300]	; (158dc <prvTraceInitTraceData+0x160>)
   157b0:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   157b2:	6823      	ldr	r3, [r4, #0]
   157b4:	4a4a      	ldr	r2, [pc, #296]	; (158e0 <prvTraceInitTraceData+0x164>)
   157b6:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   157b8:	2205      	movs	r2, #5
   157ba:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   157bc:	2200      	movs	r2, #0
   157be:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   157c0:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   157c2:	2196      	movs	r1, #150	; 0x96
   157c4:	0049      	lsls	r1, r1, #1
   157c6:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   157c8:	4946      	ldr	r1, [pc, #280]	; (158e4 <prvTraceInitTraceData+0x168>)
   157ca:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   157cc:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   157ce:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
   157d0:	4b45      	ldr	r3, [pc, #276]	; (158e8 <prvTraceInitTraceData+0x16c>)
   157d2:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   157d4:	6820      	ldr	r0, [r4, #0]
   157d6:	4a45      	ldr	r2, [pc, #276]	; (158ec <prvTraceInitTraceData+0x170>)
   157d8:	4b45      	ldr	r3, [pc, #276]	; (158f0 <prvTraceInitTraceData+0x174>)
   157da:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   157dc:	22c8      	movs	r2, #200	; 0xc8
   157de:	3304      	adds	r3, #4
   157e0:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   157e2:	4b44      	ldr	r3, [pc, #272]	; (158f4 <prvTraceInitTraceData+0x178>)
   157e4:	3ac7      	subs	r2, #199	; 0xc7
   157e6:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   157e8:	4a43      	ldr	r2, [pc, #268]	; (158f8 <prvTraceInitTraceData+0x17c>)
   157ea:	3355      	adds	r3, #85	; 0x55
   157ec:	33ff      	adds	r3, #255	; 0xff
   157ee:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   157f0:	4b42      	ldr	r3, [pc, #264]	; (158fc <prvTraceInitTraceData+0x180>)
   157f2:	469c      	mov	ip, r3
   157f4:	4460      	add	r0, ip
   157f6:	2250      	movs	r2, #80	; 0x50
   157f8:	4941      	ldr	r1, [pc, #260]	; (15900 <prvTraceInitTraceData+0x184>)
   157fa:	4b42      	ldr	r3, [pc, #264]	; (15904 <prvTraceInitTraceData+0x188>)
   157fc:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   157fe:	6823      	ldr	r3, [r4, #0]
   15800:	4941      	ldr	r1, [pc, #260]	; (15908 <prvTraceInitTraceData+0x18c>)
   15802:	4a42      	ldr	r2, [pc, #264]	; (1590c <prvTraceInitTraceData+0x190>)
   15804:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   15806:	210a      	movs	r1, #10
   15808:	4a41      	ldr	r2, [pc, #260]	; (15910 <prvTraceInitTraceData+0x194>)
   1580a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1580c:	3101      	adds	r1, #1
   1580e:	4a41      	ldr	r2, [pc, #260]	; (15914 <prvTraceInitTraceData+0x198>)
   15810:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   15812:	3101      	adds	r1, #1
   15814:	4a40      	ldr	r2, [pc, #256]	; (15918 <prvTraceInitTraceData+0x19c>)
   15816:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   15818:	3101      	adds	r1, #1
   1581a:	4a40      	ldr	r2, [pc, #256]	; (1591c <prvTraceInitTraceData+0x1a0>)
   1581c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1581e:	4a40      	ldr	r2, [pc, #256]	; (15920 <prvTraceInitTraceData+0x1a4>)
   15820:	3164      	adds	r1, #100	; 0x64
   15822:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   15824:	2572      	movs	r5, #114	; 0x72
   15826:	4a3f      	ldr	r2, [pc, #252]	; (15924 <prvTraceInitTraceData+0x1a8>)
   15828:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1582a:	2673      	movs	r6, #115	; 0x73
   1582c:	4a3e      	ldr	r2, [pc, #248]	; (15928 <prvTraceInitTraceData+0x1ac>)
   1582e:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   15830:	2774      	movs	r7, #116	; 0x74
   15832:	4a3e      	ldr	r2, [pc, #248]	; (1592c <prvTraceInitTraceData+0x1b0>)
   15834:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   15836:	22f1      	movs	r2, #241	; 0xf1
   15838:	4690      	mov	r8, r2
   1583a:	4a3d      	ldr	r2, [pc, #244]	; (15930 <prvTraceInitTraceData+0x1b4>)
   1583c:	4641      	mov	r1, r8
   1583e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   15840:	22f2      	movs	r2, #242	; 0xf2
   15842:	4691      	mov	r9, r2
   15844:	4a3b      	ldr	r2, [pc, #236]	; (15934 <prvTraceInitTraceData+0x1b8>)
   15846:	4649      	mov	r1, r9
   15848:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1584a:	22f3      	movs	r2, #243	; 0xf3
   1584c:	4692      	mov	sl, r2
   1584e:	4a3a      	ldr	r2, [pc, #232]	; (15938 <prvTraceInitTraceData+0x1bc>)
   15850:	4651      	mov	r1, sl
   15852:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   15854:	22f4      	movs	r2, #244	; 0xf4
   15856:	4693      	mov	fp, r2
   15858:	4a38      	ldr	r2, [pc, #224]	; (1593c <prvTraceInitTraceData+0x1c0>)
   1585a:	4659      	mov	r1, fp
   1585c:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
   1585e:	4b38      	ldr	r3, [pc, #224]	; (15940 <prvTraceInitTraceData+0x1c4>)
   15860:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
   15862:	6823      	ldr	r3, [r4, #0]
   15864:	465a      	mov	r2, fp
   15866:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   15868:	4652      	mov	r2, sl
   1586a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1586c:	464a      	mov	r2, r9
   1586e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   15870:	4642      	mov	r2, r8
   15872:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   15874:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   15876:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   15878:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1587a:	2271      	movs	r2, #113	; 0x71
   1587c:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1587e:	2204      	movs	r2, #4
   15880:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   15882:	2303      	movs	r3, #3
   15884:	6822      	ldr	r2, [r4, #0]
   15886:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   15888:	3b01      	subs	r3, #1
   1588a:	6822      	ldr	r2, [r4, #0]
   1588c:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1588e:	6823      	ldr	r3, [r4, #0]
   15890:	2201      	movs	r2, #1
   15892:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
   15894:	4b2b      	ldr	r3, [pc, #172]	; (15944 <prvTraceInitTraceData+0x1c8>)
   15896:	6819      	ldr	r1, [r3, #0]
   15898:	2900      	cmp	r1, #0
   1589a:	d00e      	beq.n	158ba <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1589c:	4c0c      	ldr	r4, [pc, #48]	; (158d0 <prvTraceInitTraceData+0x154>)
   1589e:	6823      	ldr	r3, [r4, #0]
   158a0:	4a16      	ldr	r2, [pc, #88]	; (158fc <prvTraceInitTraceData+0x180>)
   158a2:	4694      	mov	ip, r2
   158a4:	4463      	add	r3, ip
   158a6:	0018      	movs	r0, r3
   158a8:	2250      	movs	r2, #80	; 0x50
   158aa:	4b16      	ldr	r3, [pc, #88]	; (15904 <prvTraceInitTraceData+0x188>)
   158ac:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   158ae:	6822      	ldr	r2, [r4, #0]
   158b0:	2101      	movs	r1, #1
   158b2:	4b25      	ldr	r3, [pc, #148]	; (15948 <prvTraceInitTraceData+0x1cc>)
   158b4:	50d1      	str	r1, [r2, r3]
		vTraceStop();
   158b6:	4b25      	ldr	r3, [pc, #148]	; (1594c <prvTraceInitTraceData+0x1d0>)
   158b8:	4798      	blx	r3
}
   158ba:	bc3c      	pop	{r2, r3, r4, r5}
   158bc:	4690      	mov	r8, r2
   158be:	4699      	mov	r9, r3
   158c0:	46a2      	mov	sl, r4
   158c2:	46ab      	mov	fp, r5
   158c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
   158c6:	4a22      	ldr	r2, [pc, #136]	; (15950 <prvTraceInitTraceData+0x1d4>)
   158c8:	4b01      	ldr	r3, [pc, #4]	; (158d0 <prvTraceInitTraceData+0x154>)
   158ca:	601a      	str	r2, [r3, #0]
   158cc:	e765      	b.n	1579a <prvTraceInitTraceData+0x1e>
   158ce:	46c0      	nop			; (mov r8, r8)
   158d0:	20000b60 	.word	0x20000b60
   158d4:	e000e018 	.word	0xe000e018
   158d8:	20005028 	.word	0x20005028
   158dc:	000262a3 	.word	0x000262a3
   158e0:	00001aa1 	.word	0x00001aa1
   158e4:	f0f0f0f0 	.word	0xf0f0f0f0
   158e8:	00015585 	.word	0x00015585
   158ec:	f1f1f1f1 	.word	0xf1f1f1f1
   158f0:	0000055c 	.word	0x0000055c
   158f4:	00000564 	.word	0x00000564
   158f8:	f2f2f2f2 	.word	0xf2f2f2f2
   158fc:	000006bc 	.word	0x000006bc
   15900:	00028e34 	.word	0x00028e34
   15904:	00015721 	.word	0x00015721
   15908:	f3f3f3f3 	.word	0xf3f3f3f3
   1590c:	0000070c 	.word	0x0000070c
   15910:	00000bc4 	.word	0x00000bc4
   15914:	00000bc5 	.word	0x00000bc5
   15918:	00000bc6 	.word	0x00000bc6
   1591c:	00000bc7 	.word	0x00000bc7
   15920:	00000bc8 	.word	0x00000bc8
   15924:	00000bc9 	.word	0x00000bc9
   15928:	00000bca 	.word	0x00000bca
   1592c:	00000bcb 	.word	0x00000bcb
   15930:	00000bcc 	.word	0x00000bcc
   15934:	00000bcd 	.word	0x00000bcd
   15938:	00000bce 	.word	0x00000bce
   1593c:	00000bcf 	.word	0x00000bcf
   15940:	0001565d 	.word	0x0001565d
   15944:	20000c18 	.word	0x20000c18
   15948:	000006b4 	.word	0x000006b4
   1594c:	00015745 	.word	0x00015745
   15950:	20004458 	.word	0x20004458

00015954 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   15954:	b510      	push	{r4, lr}
   15956:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   15958:	4b0e      	ldr	r3, [pc, #56]	; (15994 <prvTraceError+0x40>)
   1595a:	681b      	ldr	r3, [r3, #0]
   1595c:	2b00      	cmp	r3, #0
   1595e:	d001      	beq.n	15964 <prvTraceError+0x10>
	{
		vTraceStop();
   15960:	4b0d      	ldr	r3, [pc, #52]	; (15998 <prvTraceError+0x44>)
   15962:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   15964:	4b0d      	ldr	r3, [pc, #52]	; (1599c <prvTraceError+0x48>)
   15966:	681b      	ldr	r3, [r3, #0]
   15968:	2b00      	cmp	r3, #0
   1596a:	d000      	beq.n	1596e <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
   1596c:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
   1596e:	4b0b      	ldr	r3, [pc, #44]	; (1599c <prvTraceError+0x48>)
   15970:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
   15972:	4b08      	ldr	r3, [pc, #32]	; (15994 <prvTraceError+0x40>)
   15974:	6818      	ldr	r0, [r3, #0]
   15976:	2800      	cmp	r0, #0
   15978:	d0f8      	beq.n	1596c <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1597a:	4b09      	ldr	r3, [pc, #36]	; (159a0 <prvTraceError+0x4c>)
   1597c:	469c      	mov	ip, r3
   1597e:	4460      	add	r0, ip
   15980:	2250      	movs	r2, #80	; 0x50
   15982:	0021      	movs	r1, r4
   15984:	4b07      	ldr	r3, [pc, #28]	; (159a4 <prvTraceError+0x50>)
   15986:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   15988:	4b02      	ldr	r3, [pc, #8]	; (15994 <prvTraceError+0x40>)
   1598a:	681a      	ldr	r2, [r3, #0]
   1598c:	2101      	movs	r1, #1
   1598e:	4b06      	ldr	r3, [pc, #24]	; (159a8 <prvTraceError+0x54>)
   15990:	50d1      	str	r1, [r2, r3]
}
   15992:	e7eb      	b.n	1596c <prvTraceError+0x18>
   15994:	20000b60 	.word	0x20000b60
   15998:	00015745 	.word	0x00015745
   1599c:	20000c18 	.word	0x20000c18
   159a0:	000006bc 	.word	0x000006bc
   159a4:	00015721 	.word	0x00015721
   159a8:	000006b4 	.word	0x000006b4

000159ac <prvTraceNextFreeEventBufferSlot>:
{
   159ac:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
   159ae:	4b0c      	ldr	r3, [pc, #48]	; (159e0 <prvTraceNextFreeEventBufferSlot+0x34>)
   159b0:	6818      	ldr	r0, [r3, #0]
   159b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   159b4:	2b00      	cmp	r3, #0
   159b6:	d010      	beq.n	159da <prvTraceNextFreeEventBufferSlot+0x2e>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   159b8:	69c3      	ldr	r3, [r0, #28]
   159ba:	222c      	movs	r2, #44	; 0x2c
   159bc:	32ff      	adds	r2, #255	; 0xff
   159be:	4293      	cmp	r3, r2
   159c0:	d806      	bhi.n	159d0 <prvTraceNextFreeEventBufferSlot+0x24>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   159c2:	009b      	lsls	r3, r3, #2
   159c4:	22e2      	movs	r2, #226	; 0xe2
   159c6:	00d2      	lsls	r2, r2, #3
   159c8:	4694      	mov	ip, r2
   159ca:	4463      	add	r3, ip
   159cc:	18c0      	adds	r0, r0, r3
}
   159ce:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
   159d0:	4804      	ldr	r0, [pc, #16]	; (159e4 <prvTraceNextFreeEventBufferSlot+0x38>)
   159d2:	4b05      	ldr	r3, [pc, #20]	; (159e8 <prvTraceNextFreeEventBufferSlot+0x3c>)
   159d4:	4798      	blx	r3
		return NULL;
   159d6:	2000      	movs	r0, #0
   159d8:	e7f9      	b.n	159ce <prvTraceNextFreeEventBufferSlot+0x22>
		return NULL;
   159da:	2000      	movs	r0, #0
   159dc:	e7f7      	b.n	159ce <prvTraceNextFreeEventBufferSlot+0x22>
   159de:	46c0      	nop			; (mov r8, r8)
   159e0:	20000b60 	.word	0x20000b60
   159e4:	00028e48 	.word	0x00028e48
   159e8:	00015955 	.word	0x00015955

000159ec <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   159ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   159ee:	46c6      	mov	lr, r8
   159f0:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   159f2:	2800      	cmp	r0, #0
   159f4:	d006      	beq.n	15a04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
   159f6:	0007      	movs	r7, r0
   159f8:	2500      	movs	r5, #0
   159fa:	2800      	cmp	r0, #0
   159fc:	d005      	beq.n	15a0a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   159fe:	4b25      	ldr	r3, [pc, #148]	; (15a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
   15a00:	4698      	mov	r8, r3
   15a02:	e00a      	b.n	15a1a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
   15a04:	4824      	ldr	r0, [pc, #144]	; (15a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
   15a06:	4b25      	ldr	r3, [pc, #148]	; (15a9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
   15a08:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
   15a0a:	bc04      	pop	{r2}
   15a0c:	4690      	mov	r8, r2
   15a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   15a10:	2a01      	cmp	r2, #1
   15a12:	d021      	beq.n	15a58 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
		i++;
   15a14:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
   15a16:	42bd      	cmp	r5, r7
   15a18:	d2f7      	bcs.n	15a0a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
   15a1a:	4643      	mov	r3, r8
   15a1c:	681c      	ldr	r4, [r3, #0]
   15a1e:	69e3      	ldr	r3, [r4, #28]
   15a20:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   15a22:	009e      	lsls	r6, r3, #2
   15a24:	19a2      	adds	r2, r4, r6
   15a26:	21e2      	movs	r1, #226	; 0xe2
   15a28:	00c9      	lsls	r1, r1, #3
   15a2a:	468c      	mov	ip, r1
   15a2c:	4462      	add	r2, ip
   15a2e:	7812      	ldrb	r2, [r2, #0]
   15a30:	0011      	movs	r1, r2
   15a32:	3167      	adds	r1, #103	; 0x67
   15a34:	b2c9      	uxtb	r1, r1
   15a36:	290e      	cmp	r1, #14
   15a38:	d8ea      	bhi.n	15a10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   15a3a:	3268      	adds	r2, #104	; 0x68
   15a3c:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   15a3e:	18d3      	adds	r3, r2, r3
   15a40:	69a1      	ldr	r1, [r4, #24]
   15a42:	428b      	cmp	r3, r1
   15a44:	d2e6      	bcs.n	15a14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   15a46:	3201      	adds	r2, #1
   15a48:	0092      	lsls	r2, r2, #2
   15a4a:	4663      	mov	r3, ip
   15a4c:	18f0      	adds	r0, r6, r3
   15a4e:	1820      	adds	r0, r4, r0
   15a50:	2100      	movs	r1, #0
   15a52:	4b13      	ldr	r3, [pc, #76]	; (15aa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a54:	4798      	blx	r3
   15a56:	e7dd      	b.n	15a14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
   15a58:	3301      	adds	r3, #1
   15a5a:	69a2      	ldr	r2, [r4, #24]
   15a5c:	4293      	cmp	r3, r2
   15a5e:	d208      	bcs.n	15a72 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   15a60:	23e2      	movs	r3, #226	; 0xe2
   15a62:	00db      	lsls	r3, r3, #3
   15a64:	18f0      	adds	r0, r6, r3
   15a66:	1820      	adds	r0, r4, r0
   15a68:	2208      	movs	r2, #8
   15a6a:	2100      	movs	r1, #0
   15a6c:	4b0c      	ldr	r3, [pc, #48]	; (15aa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a6e:	4798      	blx	r3
   15a70:	e7d0      	b.n	15a14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   15a72:	23e2      	movs	r3, #226	; 0xe2
   15a74:	00db      	lsls	r3, r3, #3
   15a76:	18e0      	adds	r0, r4, r3
   15a78:	2204      	movs	r2, #4
   15a7a:	2100      	movs	r1, #0
   15a7c:	4b08      	ldr	r3, [pc, #32]	; (15aa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a7e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   15a80:	23e2      	movs	r3, #226	; 0xe2
   15a82:	00db      	lsls	r3, r3, #3
   15a84:	18f0      	adds	r0, r6, r3
   15a86:	1820      	adds	r0, r4, r0
   15a88:	2204      	movs	r2, #4
   15a8a:	2100      	movs	r1, #0
   15a8c:	4b04      	ldr	r3, [pc, #16]	; (15aa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15a8e:	4798      	blx	r3
   15a90:	e7c0      	b.n	15a14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   15a92:	46c0      	nop			; (mov r8, r8)
   15a94:	20000b60 	.word	0x20000b60
   15a98:	00028c68 	.word	0x00028c68
   15a9c:	00015955 	.word	0x00015955
   15aa0:	000262a3 	.word	0x000262a3

00015aa4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   15aa4:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
   15aa6:	4b0b      	ldr	r3, [pc, #44]	; (15ad4 <prvTraceUpdateCounters+0x30>)
   15aa8:	681b      	ldr	r3, [r3, #0]
   15aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   15aac:	2a00      	cmp	r2, #0
   15aae:	d010      	beq.n	15ad2 <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   15ab0:	695a      	ldr	r2, [r3, #20]
   15ab2:	3201      	adds	r2, #1
   15ab4:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   15ab6:	69da      	ldr	r2, [r3, #28]
   15ab8:	3201      	adds	r2, #1
   15aba:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   15abc:	212c      	movs	r1, #44	; 0x2c
   15abe:	31ff      	adds	r1, #255	; 0xff
   15ac0:	428a      	cmp	r2, r1
   15ac2:	d903      	bls.n	15acc <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   15ac4:	2201      	movs	r2, #1
   15ac6:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   15ac8:	2200      	movs	r2, #0
   15aca:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   15acc:	2001      	movs	r0, #1
   15ace:	4b02      	ldr	r3, [pc, #8]	; (15ad8 <prvTraceUpdateCounters+0x34>)
   15ad0:	4798      	blx	r3
#endif
}
   15ad2:	bd10      	pop	{r4, pc}
   15ad4:	20000b60 	.word	0x20000b60
   15ad8:	000159ed 	.word	0x000159ed

00015adc <prvTraceGetParam>:
{
   15adc:	b570      	push	{r4, r5, r6, lr}
   15ade:	0004      	movs	r4, r0
   15ae0:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   15ae2:	28ff      	cmp	r0, #255	; 0xff
   15ae4:	d002      	beq.n	15aec <prvTraceGetParam+0x10>
   15ae6:	4b0d      	ldr	r3, [pc, #52]	; (15b1c <prvTraceGetParam+0x40>)
   15ae8:	4298      	cmp	r0, r3
   15aea:	d103      	bne.n	15af4 <prvTraceGetParam+0x18>
	if (param <= param_max)
   15aec:	42ac      	cmp	r4, r5
   15aee:	d305      	bcc.n	15afc <prvTraceGetParam+0x20>
}
   15af0:	0028      	movs	r0, r5
   15af2:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   15af4:	480a      	ldr	r0, [pc, #40]	; (15b20 <prvTraceGetParam+0x44>)
   15af6:	4b0b      	ldr	r3, [pc, #44]	; (15b24 <prvTraceGetParam+0x48>)
   15af8:	4798      	blx	r3
   15afa:	e7f9      	b.n	15af0 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   15afc:	4b0a      	ldr	r3, [pc, #40]	; (15b28 <prvTraceGetParam+0x4c>)
   15afe:	4798      	blx	r3
		if (xps != NULL)
   15b00:	2800      	cmp	r0, #0
   15b02:	d009      	beq.n	15b18 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
   15b04:	2301      	movs	r3, #1
   15b06:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   15b08:	002b      	movs	r3, r5
   15b0a:	43a3      	bics	r3, r4
   15b0c:	0a1a      	lsrs	r2, r3, #8
   15b0e:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   15b10:	0c1b      	lsrs	r3, r3, #16
   15b12:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   15b14:	4b05      	ldr	r3, [pc, #20]	; (15b2c <prvTraceGetParam+0x50>)
   15b16:	4798      	blx	r3
		return param & param_max;
   15b18:	4025      	ands	r5, r4
   15b1a:	e7e9      	b.n	15af0 <prvTraceGetParam+0x14>
   15b1c:	0000ffff 	.word	0x0000ffff
   15b20:	00028d6c 	.word	0x00028d6c
   15b24:	00015955 	.word	0x00015955
   15b28:	000159ad 	.word	0x000159ad
   15b2c:	00015aa5 	.word	0x00015aa5

00015b30 <uiIndexOfObject>:
{
   15b30:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15b32:	2908      	cmp	r1, #8
   15b34:	d814      	bhi.n	15b60 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15b36:	2800      	cmp	r0, #0
   15b38:	d017      	beq.n	15b6a <uiIndexOfObject+0x3a>
   15b3a:	4b0e      	ldr	r3, [pc, #56]	; (15b74 <uiIndexOfObject+0x44>)
   15b3c:	681a      	ldr	r2, [r3, #0]
   15b3e:	1853      	adds	r3, r2, r1
   15b40:	3364      	adds	r3, #100	; 0x64
   15b42:	781b      	ldrb	r3, [r3, #0]
   15b44:	4283      	cmp	r3, r0
   15b46:	d310      	bcc.n	15b6a <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15b48:	1853      	adds	r3, r2, r1
   15b4a:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15b4c:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15b4e:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15b50:	4358      	muls	r0, r3
   15b52:	3140      	adds	r1, #64	; 0x40
   15b54:	0049      	lsls	r1, r1, #1
   15b56:	1851      	adds	r1, r2, r1
   15b58:	890b      	ldrh	r3, [r1, #8]
   15b5a:	18c0      	adds	r0, r0, r3
   15b5c:	b280      	uxth	r0, r0
   15b5e:	e008      	b.n	15b72 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15b60:	4805      	ldr	r0, [pc, #20]	; (15b78 <uiIndexOfObject+0x48>)
   15b62:	4b06      	ldr	r3, [pc, #24]	; (15b7c <uiIndexOfObject+0x4c>)
   15b64:	4798      	blx	r3
   15b66:	2000      	movs	r0, #0
   15b68:	e003      	b.n	15b72 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15b6a:	4805      	ldr	r0, [pc, #20]	; (15b80 <uiIndexOfObject+0x50>)
   15b6c:	4b03      	ldr	r3, [pc, #12]	; (15b7c <uiIndexOfObject+0x4c>)
   15b6e:	4798      	blx	r3
   15b70:	2000      	movs	r0, #0
}
   15b72:	bd10      	pop	{r4, pc}
   15b74:	20000b60 	.word	0x20000b60
   15b78:	000293fc 	.word	0x000293fc
   15b7c:	00015955 	.word	0x00015955
   15b80:	0002943c 	.word	0x0002943c

00015b84 <prvMarkObjectAsUsed>:
{
   15b84:	b510      	push	{r4, lr}
   15b86:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   15b88:	0001      	movs	r1, r0
   15b8a:	0018      	movs	r0, r3
   15b8c:	4b04      	ldr	r3, [pc, #16]	; (15ba0 <prvMarkObjectAsUsed+0x1c>)
   15b8e:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   15b90:	4b04      	ldr	r3, [pc, #16]	; (15ba4 <prvMarkObjectAsUsed+0x20>)
   15b92:	681b      	ldr	r3, [r3, #0]
   15b94:	1818      	adds	r0, r3, r0
   15b96:	309c      	adds	r0, #156	; 0x9c
   15b98:	2301      	movs	r3, #1
   15b9a:	7003      	strb	r3, [r0, #0]
}
   15b9c:	bd10      	pop	{r4, pc}
   15b9e:	46c0      	nop			; (mov r8, r8)
   15ba0:	00015b31 	.word	0x00015b31
   15ba4:	20000b60 	.word	0x20000b60

00015ba8 <prvTraceSetPriorityProperty>:
{
   15ba8:	b570      	push	{r4, r5, r6, lr}
   15baa:	0004      	movs	r4, r0
   15bac:	0008      	movs	r0, r1
   15bae:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15bb0:	2c08      	cmp	r4, #8
   15bb2:	d813      	bhi.n	15bdc <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15bb4:	4b0d      	ldr	r3, [pc, #52]	; (15bec <prvTraceSetPriorityProperty+0x44>)
   15bb6:	681b      	ldr	r3, [r3, #0]
   15bb8:	191b      	adds	r3, r3, r4
   15bba:	3364      	adds	r3, #100	; 0x64
   15bbc:	781b      	ldrb	r3, [r3, #0]
   15bbe:	428b      	cmp	r3, r1
   15bc0:	d310      	bcc.n	15be4 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   15bc2:	0021      	movs	r1, r4
   15bc4:	4b0a      	ldr	r3, [pc, #40]	; (15bf0 <prvTraceSetPriorityProperty+0x48>)
   15bc6:	4798      	blx	r3
   15bc8:	4b08      	ldr	r3, [pc, #32]	; (15bec <prvTraceSetPriorityProperty+0x44>)
   15bca:	681b      	ldr	r3, [r3, #0]
   15bcc:	191c      	adds	r4, r3, r4
   15bce:	3470      	adds	r4, #112	; 0x70
   15bd0:	7822      	ldrb	r2, [r4, #0]
   15bd2:	181b      	adds	r3, r3, r0
   15bd4:	189b      	adds	r3, r3, r2
   15bd6:	339d      	adds	r3, #157	; 0x9d
   15bd8:	701d      	strb	r5, [r3, #0]
}
   15bda:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15bdc:	4805      	ldr	r0, [pc, #20]	; (15bf4 <prvTraceSetPriorityProperty+0x4c>)
   15bde:	4b06      	ldr	r3, [pc, #24]	; (15bf8 <prvTraceSetPriorityProperty+0x50>)
   15be0:	4798      	blx	r3
   15be2:	e7fa      	b.n	15bda <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15be4:	4805      	ldr	r0, [pc, #20]	; (15bfc <prvTraceSetPriorityProperty+0x54>)
   15be6:	4b04      	ldr	r3, [pc, #16]	; (15bf8 <prvTraceSetPriorityProperty+0x50>)
   15be8:	4798      	blx	r3
   15bea:	e7f6      	b.n	15bda <prvTraceSetPriorityProperty+0x32>
   15bec:	20000b60 	.word	0x20000b60
   15bf0:	00015b31 	.word	0x00015b31
   15bf4:	00028f84 	.word	0x00028f84
   15bf8:	00015955 	.word	0x00015955
   15bfc:	00028fd0 	.word	0x00028fd0

00015c00 <prvTraceGetPriorityProperty>:
{
   15c00:	b510      	push	{r4, lr}
   15c02:	0004      	movs	r4, r0
   15c04:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c06:	2c08      	cmp	r4, #8
   15c08:	d813      	bhi.n	15c32 <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c0a:	4b0f      	ldr	r3, [pc, #60]	; (15c48 <prvTraceGetPriorityProperty+0x48>)
   15c0c:	681b      	ldr	r3, [r3, #0]
   15c0e:	191b      	adds	r3, r3, r4
   15c10:	3364      	adds	r3, #100	; 0x64
   15c12:	781b      	ldrb	r3, [r3, #0]
   15c14:	428b      	cmp	r3, r1
   15c16:	d311      	bcc.n	15c3c <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   15c18:	0021      	movs	r1, r4
   15c1a:	4b0c      	ldr	r3, [pc, #48]	; (15c4c <prvTraceGetPriorityProperty+0x4c>)
   15c1c:	4798      	blx	r3
   15c1e:	4b0a      	ldr	r3, [pc, #40]	; (15c48 <prvTraceGetPriorityProperty+0x48>)
   15c20:	681b      	ldr	r3, [r3, #0]
   15c22:	191c      	adds	r4, r3, r4
   15c24:	3470      	adds	r4, #112	; 0x70
   15c26:	7822      	ldrb	r2, [r4, #0]
   15c28:	181b      	adds	r3, r3, r0
   15c2a:	189b      	adds	r3, r3, r2
   15c2c:	339d      	adds	r3, #157	; 0x9d
   15c2e:	7818      	ldrb	r0, [r3, #0]
}
   15c30:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c32:	4807      	ldr	r0, [pc, #28]	; (15c50 <prvTraceGetPriorityProperty+0x50>)
   15c34:	4b07      	ldr	r3, [pc, #28]	; (15c54 <prvTraceGetPriorityProperty+0x54>)
   15c36:	4798      	blx	r3
   15c38:	2000      	movs	r0, #0
   15c3a:	e7f9      	b.n	15c30 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c3c:	4806      	ldr	r0, [pc, #24]	; (15c58 <prvTraceGetPriorityProperty+0x58>)
   15c3e:	4b05      	ldr	r3, [pc, #20]	; (15c54 <prvTraceGetPriorityProperty+0x54>)
   15c40:	4798      	blx	r3
   15c42:	2000      	movs	r0, #0
   15c44:	e7f4      	b.n	15c30 <prvTraceGetPriorityProperty+0x30>
   15c46:	46c0      	nop			; (mov r8, r8)
   15c48:	20000b60 	.word	0x20000b60
   15c4c:	00015b31 	.word	0x00015b31
   15c50:	00028da8 	.word	0x00028da8
   15c54:	00015955 	.word	0x00015955
   15c58:	00028df4 	.word	0x00028df4

00015c5c <prvTraceSetObjectState>:
{
   15c5c:	b570      	push	{r4, r5, r6, lr}
   15c5e:	0004      	movs	r4, r0
   15c60:	0008      	movs	r0, r1
   15c62:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c64:	2c08      	cmp	r4, #8
   15c66:	d813      	bhi.n	15c90 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c68:	4b0d      	ldr	r3, [pc, #52]	; (15ca0 <prvTraceSetObjectState+0x44>)
   15c6a:	681b      	ldr	r3, [r3, #0]
   15c6c:	191b      	adds	r3, r3, r4
   15c6e:	3364      	adds	r3, #100	; 0x64
   15c70:	781b      	ldrb	r3, [r3, #0]
   15c72:	428b      	cmp	r3, r1
   15c74:	d310      	bcc.n	15c98 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   15c76:	0021      	movs	r1, r4
   15c78:	4b0a      	ldr	r3, [pc, #40]	; (15ca4 <prvTraceSetObjectState+0x48>)
   15c7a:	4798      	blx	r3
   15c7c:	4b08      	ldr	r3, [pc, #32]	; (15ca0 <prvTraceSetObjectState+0x44>)
   15c7e:	681b      	ldr	r3, [r3, #0]
   15c80:	191c      	adds	r4, r3, r4
   15c82:	3470      	adds	r4, #112	; 0x70
   15c84:	7822      	ldrb	r2, [r4, #0]
   15c86:	181b      	adds	r3, r3, r0
   15c88:	189b      	adds	r3, r3, r2
   15c8a:	339c      	adds	r3, #156	; 0x9c
   15c8c:	701d      	strb	r5, [r3, #0]
}
   15c8e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c90:	4805      	ldr	r0, [pc, #20]	; (15ca8 <prvTraceSetObjectState+0x4c>)
   15c92:	4b06      	ldr	r3, [pc, #24]	; (15cac <prvTraceSetObjectState+0x50>)
   15c94:	4798      	blx	r3
   15c96:	e7fa      	b.n	15c8e <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c98:	4805      	ldr	r0, [pc, #20]	; (15cb0 <prvTraceSetObjectState+0x54>)
   15c9a:	4b04      	ldr	r3, [pc, #16]	; (15cac <prvTraceSetObjectState+0x50>)
   15c9c:	4798      	blx	r3
   15c9e:	e7f6      	b.n	15c8e <prvTraceSetObjectState+0x32>
   15ca0:	20000b60 	.word	0x20000b60
   15ca4:	00015b31 	.word	0x00015b31
   15ca8:	00028f04 	.word	0x00028f04
   15cac:	00015955 	.word	0x00015955
   15cb0:	00028f48 	.word	0x00028f48

00015cb4 <prvTraceSetTaskInstanceFinished>:
{
   15cb4:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15cb6:	4b0b      	ldr	r3, [pc, #44]	; (15ce4 <prvTraceSetTaskInstanceFinished+0x30>)
   15cb8:	681a      	ldr	r2, [r3, #0]
   15cba:	2367      	movs	r3, #103	; 0x67
   15cbc:	5cd3      	ldrb	r3, [r2, r3]
   15cbe:	4283      	cmp	r3, r0
   15cc0:	d30c      	bcc.n	15cdc <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   15cc2:	2103      	movs	r1, #3
   15cc4:	4b08      	ldr	r3, [pc, #32]	; (15ce8 <prvTraceSetTaskInstanceFinished+0x34>)
   15cc6:	4798      	blx	r3
   15cc8:	4b06      	ldr	r3, [pc, #24]	; (15ce4 <prvTraceSetTaskInstanceFinished+0x30>)
   15cca:	681b      	ldr	r3, [r3, #0]
   15ccc:	2273      	movs	r2, #115	; 0x73
   15cce:	5c9a      	ldrb	r2, [r3, r2]
   15cd0:	181b      	adds	r3, r3, r0
   15cd2:	189b      	adds	r3, r3, r2
   15cd4:	339c      	adds	r3, #156	; 0x9c
   15cd6:	2200      	movs	r2, #0
   15cd8:	701a      	strb	r2, [r3, #0]
}
   15cda:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15cdc:	4803      	ldr	r0, [pc, #12]	; (15cec <prvTraceSetTaskInstanceFinished+0x38>)
   15cde:	4b04      	ldr	r3, [pc, #16]	; (15cf0 <prvTraceSetTaskInstanceFinished+0x3c>)
   15ce0:	4798      	blx	r3
   15ce2:	e7fa      	b.n	15cda <prvTraceSetTaskInstanceFinished+0x26>
   15ce4:	20000b60 	.word	0x20000b60
   15ce8:	00015b31 	.word	0x00015b31
   15cec:	00029010 	.word	0x00029010
   15cf0:	00015955 	.word	0x00015955

00015cf4 <prvTraceGetObjectHandle>:
{
   15cf4:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15cf6:	4b2d      	ldr	r3, [pc, #180]	; (15dac <prvTraceGetObjectHandle+0xb8>)
   15cf8:	681b      	ldr	r3, [r3, #0]
   15cfa:	2b00      	cmp	r3, #0
   15cfc:	d046      	beq.n	15d8c <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15cfe:	2808      	cmp	r0, #8
   15d00:	d849      	bhi.n	15d96 <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15d02:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15d06:	2301      	movs	r3, #1
   15d08:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15d0c:	4a28      	ldr	r2, [pc, #160]	; (15db0 <prvTraceGetObjectHandle+0xbc>)
   15d0e:	6813      	ldr	r3, [r2, #0]
   15d10:	3301      	adds	r3, #1
   15d12:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   15d14:	4a27      	ldr	r2, [pc, #156]	; (15db4 <prvTraceGetObjectHandle+0xc0>)
   15d16:	0043      	lsls	r3, r0, #1
   15d18:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   15d1a:	18d2      	adds	r2, r2, r3
   15d1c:	3248      	adds	r2, #72	; 0x48
   15d1e:	7812      	ldrb	r2, [r2, #0]
   15d20:	2a00      	cmp	r2, #0
   15d22:	d10a      	bne.n	15d3a <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
   15d24:	4923      	ldr	r1, [pc, #140]	; (15db4 <prvTraceGetObjectHandle+0xc0>)
   15d26:	18cd      	adds	r5, r1, r3
   15d28:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
   15d2a:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   15d2c:	0006      	movs	r6, r0
   15d2e:	3608      	adds	r6, #8
   15d30:	0076      	lsls	r6, r6, #1
   15d32:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
   15d34:	8849      	ldrh	r1, [r1, #2]
   15d36:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
   15d38:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   15d3a:	0001      	movs	r1, r0
   15d3c:	3110      	adds	r1, #16
   15d3e:	0049      	lsls	r1, r1, #1
   15d40:	4a1c      	ldr	r2, [pc, #112]	; (15db4 <prvTraceGetObjectHandle+0xc0>)
   15d42:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   15d44:	8892      	ldrh	r2, [r2, #4]
   15d46:	429a      	cmp	r2, r3
   15d48:	d32a      	bcc.n	15da0 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   15d4a:	491a      	ldr	r1, [pc, #104]	; (15db4 <prvTraceGetObjectHandle+0xc0>)
   15d4c:	18ca      	adds	r2, r1, r3
   15d4e:	3248      	adds	r2, #72	; 0x48
   15d50:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   15d52:	3301      	adds	r3, #1
   15d54:	b29b      	uxth	r3, r3
   15d56:	0045      	lsls	r5, r0, #1
   15d58:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
   15d5a:	0005      	movs	r5, r0
   15d5c:	3508      	adds	r5, #8
   15d5e:	006d      	lsls	r5, r5, #1
   15d60:	194d      	adds	r5, r1, r5
   15d62:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   15d64:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   15d66:	0005      	movs	r5, r0
   15d68:	3518      	adds	r5, #24
   15d6a:	006d      	lsls	r5, r5, #1
   15d6c:	1949      	adds	r1, r1, r5
   15d6e:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
   15d70:	428b      	cmp	r3, r1
   15d72:	dd03      	ble.n	15d7c <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15d74:	490f      	ldr	r1, [pc, #60]	; (15db4 <prvTraceGetObjectHandle+0xc0>)
   15d76:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
   15d78:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15d7a:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
   15d7c:	490c      	ldr	r1, [pc, #48]	; (15db0 <prvTraceGetObjectHandle+0xbc>)
   15d7e:	680b      	ldr	r3, [r1, #0]
   15d80:	3b01      	subs	r3, #1
   15d82:	600b      	str	r3, [r1, #0]
   15d84:	f384 8810 	msr	PRIMASK, r4
}
   15d88:	0010      	movs	r0, r2
   15d8a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15d8c:	480a      	ldr	r0, [pc, #40]	; (15db8 <prvTraceGetObjectHandle+0xc4>)
   15d8e:	4b0b      	ldr	r3, [pc, #44]	; (15dbc <prvTraceGetObjectHandle+0xc8>)
   15d90:	4798      	blx	r3
   15d92:	2200      	movs	r2, #0
   15d94:	e7f8      	b.n	15d88 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15d96:	480a      	ldr	r0, [pc, #40]	; (15dc0 <prvTraceGetObjectHandle+0xcc>)
   15d98:	4b08      	ldr	r3, [pc, #32]	; (15dbc <prvTraceGetObjectHandle+0xc8>)
   15d9a:	4798      	blx	r3
   15d9c:	2200      	movs	r2, #0
   15d9e:	e7f3      	b.n	15d88 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15da0:	4b08      	ldr	r3, [pc, #32]	; (15dc4 <prvTraceGetObjectHandle+0xd0>)
   15da2:	4798      	blx	r3
   15da4:	4b05      	ldr	r3, [pc, #20]	; (15dbc <prvTraceGetObjectHandle+0xc8>)
   15da6:	4798      	blx	r3
		handle = 0;
   15da8:	2200      	movs	r2, #0
   15daa:	e7e7      	b.n	15d7c <prvTraceGetObjectHandle+0x88>
   15dac:	20000b60 	.word	0x20000b60
   15db0:	20000c10 	.word	0x20000c10
   15db4:	20000b7c 	.word	0x20000b7c
   15db8:	00029500 	.word	0x00029500
   15dbc:	00015955 	.word	0x00015955
   15dc0:	00028d24 	.word	0x00028d24
   15dc4:	000156c1 	.word	0x000156c1

00015dc8 <prvTraceSetObjectName>:
{
   15dc8:	b570      	push	{r4, r5, r6, lr}
   15dca:	0004      	movs	r4, r0
   15dcc:	0008      	movs	r0, r1
   15dce:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15dd0:	d012      	beq.n	15df8 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
   15dd2:	2c08      	cmp	r4, #8
   15dd4:	d814      	bhi.n	15e00 <prvTraceSetObjectName+0x38>
	if (handle == 0)
   15dd6:	2900      	cmp	r1, #0
   15dd8:	d016      	beq.n	15e08 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   15dda:	4b16      	ldr	r3, [pc, #88]	; (15e34 <prvTraceSetObjectName+0x6c>)
   15ddc:	681b      	ldr	r3, [r3, #0]
   15dde:	191b      	adds	r3, r3, r4
   15de0:	3364      	adds	r3, #100	; 0x64
   15de2:	781b      	ldrb	r3, [r3, #0]
   15de4:	428b      	cmp	r3, r1
   15de6:	d313      	bcc.n	15e10 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
   15de8:	0021      	movs	r1, r4
   15dea:	4b13      	ldr	r3, [pc, #76]	; (15e38 <prvTraceSetObjectName+0x70>)
   15dec:	4798      	blx	r3
		if (traceErrorMessage == NULL)
   15dee:	4b13      	ldr	r3, [pc, #76]	; (15e3c <prvTraceSetObjectName+0x74>)
   15df0:	681b      	ldr	r3, [r3, #0]
   15df2:	2b00      	cmp	r3, #0
   15df4:	d012      	beq.n	15e1c <prvTraceSetObjectName+0x54>
}
   15df6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15df8:	4811      	ldr	r0, [pc, #68]	; (15e40 <prvTraceSetObjectName+0x78>)
   15dfa:	4b12      	ldr	r3, [pc, #72]	; (15e44 <prvTraceSetObjectName+0x7c>)
   15dfc:	4798      	blx	r3
   15dfe:	e7fa      	b.n	15df6 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   15e00:	4811      	ldr	r0, [pc, #68]	; (15e48 <prvTraceSetObjectName+0x80>)
   15e02:	4b10      	ldr	r3, [pc, #64]	; (15e44 <prvTraceSetObjectName+0x7c>)
   15e04:	4798      	blx	r3
		return;
   15e06:	e7f6      	b.n	15df6 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   15e08:	4810      	ldr	r0, [pc, #64]	; (15e4c <prvTraceSetObjectName+0x84>)
   15e0a:	4b0e      	ldr	r3, [pc, #56]	; (15e44 <prvTraceSetObjectName+0x7c>)
   15e0c:	4798      	blx	r3
		return;
   15e0e:	e7f2      	b.n	15df6 <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15e10:	0020      	movs	r0, r4
   15e12:	4b0f      	ldr	r3, [pc, #60]	; (15e50 <prvTraceSetObjectName+0x88>)
   15e14:	4798      	blx	r3
   15e16:	4b0b      	ldr	r3, [pc, #44]	; (15e44 <prvTraceSetObjectName+0x7c>)
   15e18:	4798      	blx	r3
   15e1a:	e7ec      	b.n	15df6 <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15e1c:	4b05      	ldr	r3, [pc, #20]	; (15e34 <prvTraceSetObjectName+0x6c>)
   15e1e:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   15e20:	191c      	adds	r4, r3, r4
   15e22:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15e24:	7822      	ldrb	r2, [r4, #0]
   15e26:	309c      	adds	r0, #156	; 0x9c
   15e28:	1818      	adds	r0, r3, r0
   15e2a:	0029      	movs	r1, r5
   15e2c:	4b09      	ldr	r3, [pc, #36]	; (15e54 <prvTraceSetObjectName+0x8c>)
   15e2e:	4798      	blx	r3
   15e30:	e7e1      	b.n	15df6 <prvTraceSetObjectName+0x2e>
   15e32:	46c0      	nop			; (mov r8, r8)
   15e34:	20000b60 	.word	0x20000b60
   15e38:	00015b31 	.word	0x00015b31
   15e3c:	20000c18 	.word	0x20000c18
   15e40:	00028e70 	.word	0x00028e70
   15e44:	00015955 	.word	0x00015955
   15e48:	00028ea4 	.word	0x00028ea4
   15e4c:	00028ed4 	.word	0x00028ed4
   15e50:	000156c1 	.word	0x000156c1
   15e54:	00015721 	.word	0x00015721

00015e58 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   15e58:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   15e5a:	4b1e      	ldr	r3, [pc, #120]	; (15ed4 <prvTracePortGetTimeStamp+0x7c>)
   15e5c:	681b      	ldr	r3, [r3, #0]
   15e5e:	2b01      	cmp	r3, #1
   15e60:	d02b      	beq.n	15eba <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   15e62:	4b1d      	ldr	r3, [pc, #116]	; (15ed8 <prvTracePortGetTimeStamp+0x80>)
   15e64:	6819      	ldr	r1, [r3, #0]
   15e66:	4b1d      	ldr	r3, [pc, #116]	; (15edc <prvTracePortGetTimeStamp+0x84>)
   15e68:	681b      	ldr	r3, [r3, #0]
   15e6a:	3101      	adds	r1, #1
   15e6c:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   15e6e:	4b1c      	ldr	r3, [pc, #112]	; (15ee0 <prvTracePortGetTimeStamp+0x88>)
   15e70:	681b      	ldr	r3, [r3, #0]
   15e72:	4a1c      	ldr	r2, [pc, #112]	; (15ee4 <prvTracePortGetTimeStamp+0x8c>)
   15e74:	6814      	ldr	r4, [r2, #0]
   15e76:	43e2      	mvns	r2, r4
   15e78:	42da      	cmn	r2, r3
   15e7a:	d424      	bmi.n	15ec6 <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15e7c:	4a1a      	ldr	r2, [pc, #104]	; (15ee8 <prvTracePortGetTimeStamp+0x90>)
   15e7e:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   15e80:	42a1      	cmp	r1, r4
   15e82:	41a4      	sbcs	r4, r4
   15e84:	4264      	negs	r4, r4
   15e86:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   15e88:	2800      	cmp	r0, #0
   15e8a:	d01f      	beq.n	15ecc <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   15e8c:	4d12      	ldr	r5, [pc, #72]	; (15ed8 <prvTracePortGetTimeStamp+0x80>)
   15e8e:	682b      	ldr	r3, [r5, #0]
   15e90:	3301      	adds	r3, #1
   15e92:	089b      	lsrs	r3, r3, #2
   15e94:	4363      	muls	r3, r4
   15e96:	001a      	movs	r2, r3
   15e98:	4e14      	ldr	r6, [pc, #80]	; (15eec <prvTracePortGetTimeStamp+0x94>)
   15e9a:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   15e9c:	682d      	ldr	r5, [r5, #0]
   15e9e:	3501      	adds	r5, #1
   15ea0:	2303      	movs	r3, #3
   15ea2:	402b      	ands	r3, r5
   15ea4:	4363      	muls	r3, r4
   15ea6:	185b      	adds	r3, r3, r1
   15ea8:	089b      	lsrs	r3, r3, #2
   15eaa:	189b      	adds	r3, r3, r2
   15eac:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   15eae:	4a0c      	ldr	r2, [pc, #48]	; (15ee0 <prvTracePortGetTimeStamp+0x88>)
   15eb0:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
   15eb2:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   15eb4:	4b0c      	ldr	r3, [pc, #48]	; (15ee8 <prvTracePortGetTimeStamp+0x90>)
   15eb6:	6019      	str	r1, [r3, #0]
}
   15eb8:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
   15eba:	2800      	cmp	r0, #0
   15ebc:	d0fc      	beq.n	15eb8 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
   15ebe:	4b0b      	ldr	r3, [pc, #44]	; (15eec <prvTracePortGetTimeStamp+0x94>)
   15ec0:	681b      	ldr	r3, [r3, #0]
   15ec2:	6003      	str	r3, [r0, #0]
   15ec4:	e7f8      	b.n	15eb8 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15ec6:	42a3      	cmp	r3, r4
   15ec8:	d1de      	bne.n	15e88 <prvTracePortGetTimeStamp+0x30>
   15eca:	e7d7      	b.n	15e7c <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
   15ecc:	4b04      	ldr	r3, [pc, #16]	; (15ee0 <prvTracePortGetTimeStamp+0x88>)
   15ece:	601c      	str	r4, [r3, #0]
   15ed0:	e7f0      	b.n	15eb4 <prvTracePortGetTimeStamp+0x5c>
   15ed2:	46c0      	nop			; (mov r8, r8)
   15ed4:	20000c1c 	.word	0x20000c1c
   15ed8:	e000e014 	.word	0xe000e014
   15edc:	e000e018 	.word	0xe000e018
   15ee0:	20000b78 	.word	0x20000b78
   15ee4:	20000c24 	.word	0x20000c24
   15ee8:	20000b70 	.word	0x20000b70
   15eec:	20000b74 	.word	0x20000b74

00015ef0 <prvTraceGetDTS>:
{
   15ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ef2:	b083      	sub	sp, #12
   15ef4:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
   15ef6:	2300      	movs	r3, #0
   15ef8:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15efa:	28ff      	cmp	r0, #255	; 0xff
   15efc:	d002      	beq.n	15f04 <prvTraceGetDTS+0x14>
   15efe:	4b39      	ldr	r3, [pc, #228]	; (15fe4 <prvTraceGetDTS+0xf4>)
   15f00:	4298      	cmp	r0, r3
   15f02:	d135      	bne.n	15f70 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
   15f04:	4b38      	ldr	r3, [pc, #224]	; (15fe8 <prvTraceGetDTS+0xf8>)
   15f06:	681c      	ldr	r4, [r3, #0]
   15f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15f0a:	2b00      	cmp	r3, #0
   15f0c:	d105      	bne.n	15f1a <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
   15f0e:	4b37      	ldr	r3, [pc, #220]	; (15fec <prvTraceGetDTS+0xfc>)
   15f10:	681b      	ldr	r3, [r3, #0]
   15f12:	2b00      	cmp	r3, #0
   15f14:	d031      	beq.n	15f7a <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   15f16:	089b      	lsrs	r3, r3, #2
   15f18:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
   15f1a:	a801      	add	r0, sp, #4
   15f1c:	4b34      	ldr	r3, [pc, #208]	; (15ff0 <prvTraceGetDTS+0x100>)
   15f1e:	4798      	blx	r3
	dts = timestamp - old_timestamp;
   15f20:	9b01      	ldr	r3, [sp, #4]
   15f22:	4a34      	ldr	r2, [pc, #208]	; (15ff4 <prvTraceGetDTS+0x104>)
   15f24:	6811      	ldr	r1, [r2, #0]
   15f26:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
   15f28:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
   15f2a:	4a2f      	ldr	r2, [pc, #188]	; (15fe8 <prvTraceGetDTS+0xf8>)
   15f2c:	6816      	ldr	r6, [r2, #0]
   15f2e:	6a77      	ldr	r7, [r6, #36]	; 0x24
   15f30:	2f00      	cmp	r7, #0
   15f32:	d032      	beq.n	15f9a <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
   15f34:	42bc      	cmp	r4, r7
   15f36:	d92c      	bls.n	15f92 <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   15f38:	0039      	movs	r1, r7
   15f3a:	0020      	movs	r0, r4
   15f3c:	4b2e      	ldr	r3, [pc, #184]	; (15ff8 <prvTraceGetDTS+0x108>)
   15f3e:	4798      	blx	r3
   15f40:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   15f42:	469c      	mov	ip, r3
   15f44:	4460      	add	r0, ip
   15f46:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   15f48:	0039      	movs	r1, r7
   15f4a:	0020      	movs	r0, r4
   15f4c:	4b2b      	ldr	r3, [pc, #172]	; (15ffc <prvTraceGetDTS+0x10c>)
   15f4e:	4798      	blx	r3
   15f50:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15f52:	469c      	mov	ip, r3
   15f54:	4461      	add	r1, ip
   15f56:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   15f58:	4b23      	ldr	r3, [pc, #140]	; (15fe8 <prvTraceGetDTS+0xf8>)
   15f5a:	681b      	ldr	r3, [r3, #0]
   15f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15f5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   15f60:	428a      	cmp	r2, r1
   15f62:	d31b      	bcc.n	15f9c <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
   15f64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   15f66:	3001      	adds	r0, #1
   15f68:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   15f6a:	1a52      	subs	r2, r2, r1
   15f6c:	629a      	str	r2, [r3, #40]	; 0x28
   15f6e:	e015      	b.n	15f9c <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15f70:	4823      	ldr	r0, [pc, #140]	; (16000 <prvTraceGetDTS+0x110>)
   15f72:	4b24      	ldr	r3, [pc, #144]	; (16004 <prvTraceGetDTS+0x114>)
   15f74:	4798      	blx	r3
   15f76:	2000      	movs	r0, #0
   15f78:	e014      	b.n	15fa4 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   15f7a:	4b23      	ldr	r3, [pc, #140]	; (16008 <prvTraceGetDTS+0x118>)
   15f7c:	681a      	ldr	r2, [r3, #0]
   15f7e:	4b23      	ldr	r3, [pc, #140]	; (1600c <prvTraceGetDTS+0x11c>)
   15f80:	681b      	ldr	r3, [r3, #0]
   15f82:	429a      	cmp	r2, r3
   15f84:	d0c9      	beq.n	15f1a <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   15f86:	2000      	movs	r0, #0
   15f88:	4b21      	ldr	r3, [pc, #132]	; (16010 <prvTraceGetDTS+0x120>)
   15f8a:	4798      	blx	r3
   15f8c:	0880      	lsrs	r0, r0, #2
   15f8e:	6260      	str	r0, [r4, #36]	; 0x24
   15f90:	e7c3      	b.n	15f1a <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
   15f92:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15f94:	191b      	adds	r3, r3, r4
   15f96:	62b3      	str	r3, [r6, #40]	; 0x28
   15f98:	e7de      	b.n	15f58 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
   15f9a:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
   15f9c:	42ac      	cmp	r4, r5
   15f9e:	d803      	bhi.n	15fa8 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
   15fa0:	0020      	movs	r0, r4
   15fa2:	4028      	ands	r0, r5
}
   15fa4:	b003      	add	sp, #12
   15fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   15fa8:	4b1a      	ldr	r3, [pc, #104]	; (16014 <prvTraceGetDTS+0x124>)
   15faa:	4798      	blx	r3
		if (xts != NULL)
   15fac:	2800      	cmp	r0, #0
   15fae:	d0f7      	beq.n	15fa0 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
   15fb0:	4b0c      	ldr	r3, [pc, #48]	; (15fe4 <prvTraceGetDTS+0xf4>)
   15fb2:	429d      	cmp	r5, r3
   15fb4:	d007      	beq.n	15fc6 <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
   15fb6:	2dff      	cmp	r5, #255	; 0xff
   15fb8:	d00c      	beq.n	15fd4 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   15fba:	4817      	ldr	r0, [pc, #92]	; (16018 <prvTraceGetDTS+0x128>)
   15fbc:	4b11      	ldr	r3, [pc, #68]	; (16004 <prvTraceGetDTS+0x114>)
   15fbe:	4798      	blx	r3
			prvTraceUpdateCounters();
   15fc0:	4b16      	ldr	r3, [pc, #88]	; (1601c <prvTraceGetDTS+0x12c>)
   15fc2:	4798      	blx	r3
   15fc4:	e7ec      	b.n	15fa0 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
   15fc6:	23a9      	movs	r3, #169	; 0xa9
   15fc8:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   15fca:	0c23      	lsrs	r3, r4, #16
   15fcc:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
   15fce:	2300      	movs	r3, #0
   15fd0:	7043      	strb	r3, [r0, #1]
   15fd2:	e7f5      	b.n	15fc0 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
   15fd4:	23a8      	movs	r3, #168	; 0xa8
   15fd6:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   15fd8:	0a23      	lsrs	r3, r4, #8
   15fda:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   15fdc:	0e23      	lsrs	r3, r4, #24
   15fde:	7043      	strb	r3, [r0, #1]
   15fe0:	e7ee      	b.n	15fc0 <prvTraceGetDTS+0xd0>
   15fe2:	46c0      	nop			; (mov r8, r8)
   15fe4:	0000ffff 	.word	0x0000ffff
   15fe8:	20000b60 	.word	0x20000b60
   15fec:	20000c14 	.word	0x20000c14
   15ff0:	00015e59 	.word	0x00015e59
   15ff4:	20000c0c 	.word	0x20000c0c
   15ff8:	00024039 	.word	0x00024039
   15ffc:	00024145 	.word	0x00024145
   16000:	00028cc0 	.word	0x00028cc0
   16004:	00015955 	.word	0x00015955
   16008:	e000e018 	.word	0xe000e018
   1600c:	20005028 	.word	0x20005028
   16010:	0001f085 	.word	0x0001f085
   16014:	000159ad 	.word	0x000159ad
   16018:	00028d00 	.word	0x00028d00
   1601c:	00015aa5 	.word	0x00015aa5

00016020 <prvTraceStoreTaskReady>:
{
   16020:	b570      	push	{r4, r5, r6, lr}
   16022:	1e04      	subs	r4, r0, #0
	if (handle == 0)
   16024:	d01d      	beq.n	16062 <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
   16026:	4b1b      	ldr	r3, [pc, #108]	; (16094 <prvTraceStoreTaskReady+0x74>)
   16028:	681b      	ldr	r3, [r3, #0]
   1602a:	2b00      	cmp	r3, #0
   1602c:	d019      	beq.n	16062 <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1602e:	280f      	cmp	r0, #15
   16030:	d818      	bhi.n	16064 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
   16032:	4b19      	ldr	r3, [pc, #100]	; (16098 <prvTraceStoreTaskReady+0x78>)
   16034:	681b      	ldr	r3, [r3, #0]
   16036:	2b00      	cmp	r3, #0
   16038:	d118      	bne.n	1606c <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1603a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1603e:	2301      	movs	r3, #1
   16040:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16044:	4a14      	ldr	r2, [pc, #80]	; (16098 <prvTraceStoreTaskReady+0x78>)
   16046:	6813      	ldr	r3, [r2, #0]
   16048:	3301      	adds	r3, #1
   1604a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1604c:	4b13      	ldr	r3, [pc, #76]	; (1609c <prvTraceStoreTaskReady+0x7c>)
   1604e:	681b      	ldr	r3, [r3, #0]
   16050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16052:	2b00      	cmp	r3, #0
   16054:	d10e      	bne.n	16074 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
   16056:	4a10      	ldr	r2, [pc, #64]	; (16098 <prvTraceStoreTaskReady+0x78>)
   16058:	6813      	ldr	r3, [r2, #0]
   1605a:	3b01      	subs	r3, #1
   1605c:	6013      	str	r3, [r2, #0]
   1605e:	f385 8810 	msr	PRIMASK, r5
}
   16062:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   16064:	480e      	ldr	r0, [pc, #56]	; (160a0 <prvTraceStoreTaskReady+0x80>)
   16066:	4b0f      	ldr	r3, [pc, #60]	; (160a4 <prvTraceStoreTaskReady+0x84>)
   16068:	4798      	blx	r3
   1606a:	e7fa      	b.n	16062 <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1606c:	480e      	ldr	r0, [pc, #56]	; (160a8 <prvTraceStoreTaskReady+0x88>)
   1606e:	4b0d      	ldr	r3, [pc, #52]	; (160a4 <prvTraceStoreTaskReady+0x84>)
   16070:	4798      	blx	r3
		return;
   16072:	e7f6      	b.n	16062 <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16074:	480d      	ldr	r0, [pc, #52]	; (160ac <prvTraceStoreTaskReady+0x8c>)
   16076:	4b0e      	ldr	r3, [pc, #56]	; (160b0 <prvTraceStoreTaskReady+0x90>)
   16078:	4798      	blx	r3
   1607a:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1607c:	4b0d      	ldr	r3, [pc, #52]	; (160b4 <prvTraceStoreTaskReady+0x94>)
   1607e:	4798      	blx	r3
		if (tr != NULL)
   16080:	2800      	cmp	r0, #0
   16082:	d0e8      	beq.n	16056 <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
   16084:	2302      	movs	r3, #2
   16086:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
   16088:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
   1608a:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   1608c:	4b0a      	ldr	r3, [pc, #40]	; (160b8 <prvTraceStoreTaskReady+0x98>)
   1608e:	4798      	blx	r3
   16090:	e7e1      	b.n	16056 <prvTraceStoreTaskReady+0x36>
   16092:	46c0      	nop			; (mov r8, r8)
   16094:	200000c4 	.word	0x200000c4
   16098:	20000c10 	.word	0x20000c10
   1609c:	20000b60 	.word	0x20000b60
   160a0:	00029300 	.word	0x00029300
   160a4:	00015955 	.word	0x00015955
   160a8:	00029340 	.word	0x00029340
   160ac:	0000ffff 	.word	0x0000ffff
   160b0:	00015ef1 	.word	0x00015ef1
   160b4:	000159ad 	.word	0x000159ad
   160b8:	00015aa5 	.word	0x00015aa5

000160bc <vTraceStoreMemMangEvent>:
{
   160bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   160be:	b083      	sub	sp, #12
   160c0:	9000      	str	r0, [sp, #0]
   160c2:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
   160c4:	4b28      	ldr	r3, [pc, #160]	; (16168 <vTraceStoreMemMangEvent+0xac>)
   160c6:	681b      	ldr	r3, [r3, #0]
   160c8:	2b00      	cmp	r3, #0
   160ca:	d01d      	beq.n	16108 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
   160cc:	17d3      	asrs	r3, r2, #31
   160ce:	18d6      	adds	r6, r2, r3
   160d0:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   160d2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   160d6:	2301      	movs	r3, #1
   160d8:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   160dc:	4923      	ldr	r1, [pc, #140]	; (1616c <vTraceStoreMemMangEvent+0xb0>)
   160de:	680b      	ldr	r3, [r1, #0]
   160e0:	3301      	adds	r3, #1
   160e2:	600b      	str	r3, [r1, #0]
	if (address != 0)
   160e4:	2c00      	cmp	r4, #0
   160e6:	d004      	beq.n	160f2 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
   160e8:	4b21      	ldr	r3, [pc, #132]	; (16170 <vTraceStoreMemMangEvent+0xb4>)
   160ea:	6819      	ldr	r1, [r3, #0]
   160ec:	468c      	mov	ip, r1
   160ee:	4462      	add	r2, ip
   160f0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   160f2:	4b1d      	ldr	r3, [pc, #116]	; (16168 <vTraceStoreMemMangEvent+0xac>)
   160f4:	681b      	ldr	r3, [r3, #0]
   160f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   160f8:	2b00      	cmp	r3, #0
   160fa:	d107      	bne.n	1610c <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
   160fc:	4a1b      	ldr	r2, [pc, #108]	; (1616c <vTraceStoreMemMangEvent+0xb0>)
   160fe:	6813      	ldr	r3, [r2, #0]
   16100:	3b01      	subs	r3, #1
   16102:	6013      	str	r3, [r2, #0]
   16104:	f385 8810 	msr	PRIMASK, r5
}
   16108:	b003      	add	sp, #12
   1610a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1610c:	20ff      	movs	r0, #255	; 0xff
   1610e:	4b19      	ldr	r3, [pc, #100]	; (16174 <vTraceStoreMemMangEvent+0xb8>)
   16110:	4798      	blx	r3
   16112:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   16114:	0031      	movs	r1, r6
   16116:	4818      	ldr	r0, [pc, #96]	; (16178 <vTraceStoreMemMangEvent+0xbc>)
   16118:	4b18      	ldr	r3, [pc, #96]	; (1617c <vTraceStoreMemMangEvent+0xc0>)
   1611a:	4798      	blx	r3
   1611c:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1611e:	4b18      	ldr	r3, [pc, #96]	; (16180 <vTraceStoreMemMangEvent+0xc4>)
   16120:	4798      	blx	r3
   16122:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
   16124:	d0ea      	beq.n	160fc <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
   16126:	466b      	mov	r3, sp
   16128:	791b      	ldrb	r3, [r3, #4]
   1612a:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1612c:	2300      	movs	r3, #0
   1612e:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
   16130:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
   16132:	4b14      	ldr	r3, [pc, #80]	; (16184 <vTraceStoreMemMangEvent+0xc8>)
   16134:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   16136:	0021      	movs	r1, r4
   16138:	480f      	ldr	r0, [pc, #60]	; (16178 <vTraceStoreMemMangEvent+0xbc>)
   1613a:	4b10      	ldr	r3, [pc, #64]	; (1617c <vTraceStoreMemMangEvent+0xc0>)
   1613c:	4798      	blx	r3
   1613e:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   16140:	4b0f      	ldr	r3, [pc, #60]	; (16180 <vTraceStoreMemMangEvent+0xc4>)
   16142:	4798      	blx	r3
			if (ma != NULL)
   16144:	2800      	cmp	r0, #0
   16146:	d0d9      	beq.n	160fc <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
   16148:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
   1614a:	2300      	movs	r3, #0
   1614c:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1614e:	466b      	mov	r3, sp
   16150:	781c      	ldrb	r4, [r3, #0]
   16152:	1c63      	adds	r3, r4, #1
   16154:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
   16156:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
   16158:	4b0a      	ldr	r3, [pc, #40]	; (16184 <vTraceStoreMemMangEvent+0xc8>)
   1615a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1615c:	4b02      	ldr	r3, [pc, #8]	; (16168 <vTraceStoreMemMangEvent+0xac>)
   1615e:	681b      	ldr	r3, [r3, #0]
   16160:	4a03      	ldr	r2, [pc, #12]	; (16170 <vTraceStoreMemMangEvent+0xb4>)
   16162:	6812      	ldr	r2, [r2, #0]
   16164:	651a      	str	r2, [r3, #80]	; 0x50
   16166:	e7c9      	b.n	160fc <vTraceStoreMemMangEvent+0x40>
   16168:	20000b60 	.word	0x20000b60
   1616c:	20000c10 	.word	0x20000c10
   16170:	20000b68 	.word	0x20000b68
   16174:	00015ef1 	.word	0x00015ef1
   16178:	0000ffff 	.word	0x0000ffff
   1617c:	00015add 	.word	0x00015add
   16180:	000159ad 	.word	0x000159ad
   16184:	00015aa5 	.word	0x00015aa5

00016188 <prvTraceStoreKernelCall>:
{
   16188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1618a:	0005      	movs	r5, r0
   1618c:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1618e:	28fe      	cmp	r0, #254	; 0xfe
   16190:	d825      	bhi.n	161de <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16192:	2908      	cmp	r1, #8
   16194:	d827      	bhi.n	161e6 <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   16196:	4b21      	ldr	r3, [pc, #132]	; (1621c <prvTraceStoreKernelCall+0x94>)
   16198:	681b      	ldr	r3, [r3, #0]
   1619a:	1859      	adds	r1, r3, r1
   1619c:	3164      	adds	r1, #100	; 0x64
   1619e:	780b      	ldrb	r3, [r1, #0]
   161a0:	4293      	cmp	r3, r2
   161a2:	d324      	bcc.n	161ee <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
   161a4:	4b1e      	ldr	r3, [pc, #120]	; (16220 <prvTraceStoreKernelCall+0x98>)
   161a6:	681b      	ldr	r3, [r3, #0]
   161a8:	2b00      	cmp	r3, #0
   161aa:	d124      	bne.n	161f6 <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
   161ac:	4b1d      	ldr	r3, [pc, #116]	; (16224 <prvTraceStoreKernelCall+0x9c>)
   161ae:	781b      	ldrb	r3, [r3, #0]
   161b0:	2b00      	cmp	r3, #0
   161b2:	d013      	beq.n	161dc <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   161b4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   161b8:	2301      	movs	r3, #1
   161ba:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   161be:	4a18      	ldr	r2, [pc, #96]	; (16220 <prvTraceStoreKernelCall+0x98>)
   161c0:	6813      	ldr	r3, [r2, #0]
   161c2:	3301      	adds	r3, #1
   161c4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
   161c6:	4b15      	ldr	r3, [pc, #84]	; (1621c <prvTraceStoreKernelCall+0x94>)
   161c8:	681b      	ldr	r3, [r3, #0]
   161ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   161cc:	2b00      	cmp	r3, #0
   161ce:	d116      	bne.n	161fe <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
   161d0:	4a13      	ldr	r2, [pc, #76]	; (16220 <prvTraceStoreKernelCall+0x98>)
   161d2:	6813      	ldr	r3, [r2, #0]
   161d4:	3b01      	subs	r3, #1
   161d6:	6013      	str	r3, [r2, #0]
   161d8:	f386 8810 	msr	PRIMASK, r6
}
   161dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   161de:	4812      	ldr	r0, [pc, #72]	; (16228 <prvTraceStoreKernelCall+0xa0>)
   161e0:	4b12      	ldr	r3, [pc, #72]	; (1622c <prvTraceStoreKernelCall+0xa4>)
   161e2:	4798      	blx	r3
   161e4:	e7fa      	b.n	161dc <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   161e6:	4812      	ldr	r0, [pc, #72]	; (16230 <prvTraceStoreKernelCall+0xa8>)
   161e8:	4b10      	ldr	r3, [pc, #64]	; (1622c <prvTraceStoreKernelCall+0xa4>)
   161ea:	4798      	blx	r3
   161ec:	e7f6      	b.n	161dc <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   161ee:	4811      	ldr	r0, [pc, #68]	; (16234 <prvTraceStoreKernelCall+0xac>)
   161f0:	4b0e      	ldr	r3, [pc, #56]	; (1622c <prvTraceStoreKernelCall+0xa4>)
   161f2:	4798      	blx	r3
   161f4:	e7f2      	b.n	161dc <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   161f6:	4810      	ldr	r0, [pc, #64]	; (16238 <prvTraceStoreKernelCall+0xb0>)
   161f8:	4b0c      	ldr	r3, [pc, #48]	; (1622c <prvTraceStoreKernelCall+0xa4>)
   161fa:	4798      	blx	r3
		return;
   161fc:	e7ee      	b.n	161dc <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   161fe:	480f      	ldr	r0, [pc, #60]	; (1623c <prvTraceStoreKernelCall+0xb4>)
   16200:	4b0f      	ldr	r3, [pc, #60]	; (16240 <prvTraceStoreKernelCall+0xb8>)
   16202:	4798      	blx	r3
   16204:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   16206:	4b0f      	ldr	r3, [pc, #60]	; (16244 <prvTraceStoreKernelCall+0xbc>)
   16208:	4798      	blx	r3
		if (kse != NULL)
   1620a:	2800      	cmp	r0, #0
   1620c:	d0e0      	beq.n	161d0 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
   1620e:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
   16210:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
   16212:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   16214:	4b0c      	ldr	r3, [pc, #48]	; (16248 <prvTraceStoreKernelCall+0xc0>)
   16216:	4798      	blx	r3
   16218:	e7da      	b.n	161d0 <prvTraceStoreKernelCall+0x48>
   1621a:	46c0      	nop			; (mov r8, r8)
   1621c:	20000b60 	.word	0x20000b60
   16220:	20000c10 	.word	0x20000c10
   16224:	20000b64 	.word	0x20000b64
   16228:	00029058 	.word	0x00029058
   1622c:	00015955 	.word	0x00015955
   16230:	00029090 	.word	0x00029090
   16234:	000290d8 	.word	0x000290d8
   16238:	00029120 	.word	0x00029120
   1623c:	0000ffff 	.word	0x0000ffff
   16240:	00015ef1 	.word	0x00015ef1
   16244:	000159ad 	.word	0x000159ad
   16248:	00015aa5 	.word	0x00015aa5

0001624c <prvTraceStoreKernelCallWithParam>:
{
   1624c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1624e:	46c6      	mov	lr, r8
   16250:	b500      	push	{lr}
   16252:	0006      	movs	r6, r0
   16254:	0014      	movs	r4, r2
   16256:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   16258:	28fe      	cmp	r0, #254	; 0xfe
   1625a:	d827      	bhi.n	162ac <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1625c:	2908      	cmp	r1, #8
   1625e:	d829      	bhi.n	162b4 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   16260:	4b24      	ldr	r3, [pc, #144]	; (162f4 <prvTraceStoreKernelCallWithParam+0xa8>)
   16262:	681b      	ldr	r3, [r3, #0]
   16264:	1859      	adds	r1, r3, r1
   16266:	3164      	adds	r1, #100	; 0x64
   16268:	780b      	ldrb	r3, [r1, #0]
   1626a:	4293      	cmp	r3, r2
   1626c:	d326      	bcc.n	162bc <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
   1626e:	4b22      	ldr	r3, [pc, #136]	; (162f8 <prvTraceStoreKernelCallWithParam+0xac>)
   16270:	681b      	ldr	r3, [r3, #0]
   16272:	2b00      	cmp	r3, #0
   16274:	d126      	bne.n	162c4 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16276:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1627a:	2301      	movs	r3, #1
   1627c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16280:	4a1d      	ldr	r2, [pc, #116]	; (162f8 <prvTraceStoreKernelCallWithParam+0xac>)
   16282:	6813      	ldr	r3, [r2, #0]
   16284:	3301      	adds	r3, #1
   16286:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   16288:	4b1a      	ldr	r3, [pc, #104]	; (162f4 <prvTraceStoreKernelCallWithParam+0xa8>)
   1628a:	681b      	ldr	r3, [r3, #0]
   1628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1628e:	2b00      	cmp	r3, #0
   16290:	d003      	beq.n	1629a <prvTraceStoreKernelCallWithParam+0x4e>
   16292:	4b1a      	ldr	r3, [pc, #104]	; (162fc <prvTraceStoreKernelCallWithParam+0xb0>)
   16294:	781b      	ldrb	r3, [r3, #0]
   16296:	2b00      	cmp	r3, #0
   16298:	d118      	bne.n	162cc <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
   1629a:	4a17      	ldr	r2, [pc, #92]	; (162f8 <prvTraceStoreKernelCallWithParam+0xac>)
   1629c:	6813      	ldr	r3, [r2, #0]
   1629e:	3b01      	subs	r3, #1
   162a0:	6013      	str	r3, [r2, #0]
   162a2:	f388 8810 	msr	PRIMASK, r8
}
   162a6:	bc04      	pop	{r2}
   162a8:	4690      	mov	r8, r2
   162aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   162ac:	4814      	ldr	r0, [pc, #80]	; (16300 <prvTraceStoreKernelCallWithParam+0xb4>)
   162ae:	4b15      	ldr	r3, [pc, #84]	; (16304 <prvTraceStoreKernelCallWithParam+0xb8>)
   162b0:	4798      	blx	r3
   162b2:	e7f8      	b.n	162a6 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   162b4:	4814      	ldr	r0, [pc, #80]	; (16308 <prvTraceStoreKernelCallWithParam+0xbc>)
   162b6:	4b13      	ldr	r3, [pc, #76]	; (16304 <prvTraceStoreKernelCallWithParam+0xb8>)
   162b8:	4798      	blx	r3
   162ba:	e7f4      	b.n	162a6 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   162bc:	4813      	ldr	r0, [pc, #76]	; (1630c <prvTraceStoreKernelCallWithParam+0xc0>)
   162be:	4b11      	ldr	r3, [pc, #68]	; (16304 <prvTraceStoreKernelCallWithParam+0xb8>)
   162c0:	4798      	blx	r3
   162c2:	e7f0      	b.n	162a6 <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   162c4:	4812      	ldr	r0, [pc, #72]	; (16310 <prvTraceStoreKernelCallWithParam+0xc4>)
   162c6:	4b0f      	ldr	r3, [pc, #60]	; (16304 <prvTraceStoreKernelCallWithParam+0xb8>)
   162c8:	4798      	blx	r3
		return;
   162ca:	e7ec      	b.n	162a6 <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   162cc:	20ff      	movs	r0, #255	; 0xff
   162ce:	4b11      	ldr	r3, [pc, #68]	; (16314 <prvTraceStoreKernelCallWithParam+0xc8>)
   162d0:	4798      	blx	r3
   162d2:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   162d4:	0029      	movs	r1, r5
   162d6:	20ff      	movs	r0, #255	; 0xff
   162d8:	4b0f      	ldr	r3, [pc, #60]	; (16318 <prvTraceStoreKernelCallWithParam+0xcc>)
   162da:	4798      	blx	r3
   162dc:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   162de:	4b0f      	ldr	r3, [pc, #60]	; (1631c <prvTraceStoreKernelCallWithParam+0xd0>)
   162e0:	4798      	blx	r3
		if (kse != NULL)
   162e2:	2800      	cmp	r0, #0
   162e4:	d0d9      	beq.n	1629a <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
   162e6:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
   162e8:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
   162ea:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
   162ec:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
   162ee:	4b0c      	ldr	r3, [pc, #48]	; (16320 <prvTraceStoreKernelCallWithParam+0xd4>)
   162f0:	4798      	blx	r3
   162f2:	e7d2      	b.n	1629a <prvTraceStoreKernelCallWithParam+0x4e>
   162f4:	20000b60 	.word	0x20000b60
   162f8:	20000c10 	.word	0x20000c10
   162fc:	20000b64 	.word	0x20000b64
   16300:	000291e8 	.word	0x000291e8
   16304:	00015955 	.word	0x00015955
   16308:	00029228 	.word	0x00029228
   1630c:	00029278 	.word	0x00029278
   16310:	000292c8 	.word	0x000292c8
   16314:	00015ef1 	.word	0x00015ef1
   16318:	00015add 	.word	0x00015add
   1631c:	000159ad 	.word	0x000159ad
   16320:	00015aa5 	.word	0x00015aa5

00016324 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
   16324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16326:	0004      	movs	r4, r0
   16328:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1632a:	28fe      	cmp	r0, #254	; 0xfe
   1632c:	d81c      	bhi.n	16368 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
   1632e:	4b1c      	ldr	r3, [pc, #112]	; (163a0 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   16330:	681b      	ldr	r3, [r3, #0]
   16332:	2b00      	cmp	r3, #0
   16334:	d11c      	bne.n	16370 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16336:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1633a:	2301      	movs	r3, #1
   1633c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16340:	4a17      	ldr	r2, [pc, #92]	; (163a0 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   16342:	6813      	ldr	r3, [r2, #0]
   16344:	3301      	adds	r3, #1
   16346:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   16348:	4b16      	ldr	r3, [pc, #88]	; (163a4 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
   1634a:	681b      	ldr	r3, [r3, #0]
   1634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1634e:	2b00      	cmp	r3, #0
   16350:	d003      	beq.n	1635a <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   16352:	4b15      	ldr	r3, [pc, #84]	; (163a8 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
   16354:	781b      	ldrb	r3, [r3, #0]
   16356:	2b00      	cmp	r3, #0
   16358:	d10e      	bne.n	16378 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
   1635a:	4a11      	ldr	r2, [pc, #68]	; (163a0 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   1635c:	6813      	ldr	r3, [r2, #0]
   1635e:	3b01      	subs	r3, #1
   16360:	6013      	str	r3, [r2, #0]
   16362:	f386 8810 	msr	PRIMASK, r6
}
   16366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   16368:	4810      	ldr	r0, [pc, #64]	; (163ac <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
   1636a:	4b11      	ldr	r3, [pc, #68]	; (163b0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   1636c:	4798      	blx	r3
   1636e:	e7fa      	b.n	16366 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   16370:	4810      	ldr	r0, [pc, #64]	; (163b4 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
   16372:	4b0f      	ldr	r3, [pc, #60]	; (163b0 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16374:	4798      	blx	r3
		return;
   16376:	e7f6      	b.n	16366 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   16378:	20ff      	movs	r0, #255	; 0xff
   1637a:	4b0f      	ldr	r3, [pc, #60]	; (163b8 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
   1637c:	4798      	blx	r3
   1637e:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   16380:	0029      	movs	r1, r5
   16382:	480e      	ldr	r0, [pc, #56]	; (163bc <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
   16384:	4b0e      	ldr	r3, [pc, #56]	; (163c0 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   16386:	4798      	blx	r3
   16388:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1638a:	4b0e      	ldr	r3, [pc, #56]	; (163c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   1638c:	4798      	blx	r3
		if (kse != NULL)
   1638e:	2800      	cmp	r0, #0
   16390:	d0e3      	beq.n	1635a <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
   16392:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
   16394:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
   16396:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
   16398:	4b0b      	ldr	r3, [pc, #44]	; (163c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   1639a:	4798      	blx	r3
   1639c:	e7dd      	b.n	1635a <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   1639e:	46c0      	nop			; (mov r8, r8)
   163a0:	20000c10 	.word	0x20000c10
   163a4:	20000b60 	.word	0x20000b60
   163a8:	20000b64 	.word	0x20000b64
   163ac:	00029158 	.word	0x00029158
   163b0:	00015955 	.word	0x00015955
   163b4:	000291b0 	.word	0x000291b0
   163b8:	00015ef1 	.word	0x00015ef1
   163bc:	0000ffff 	.word	0x0000ffff
   163c0:	00015add 	.word	0x00015add
   163c4:	000159ad 	.word	0x000159ad
   163c8:	00015aa5 	.word	0x00015aa5

000163cc <prvTraceStoreTaskswitch>:
{
   163cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163ce:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   163d0:	280f      	cmp	r0, #15
   163d2:	d818      	bhi.n	16406 <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   163d4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   163d8:	2301      	movs	r3, #1
   163da:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   163de:	4a26      	ldr	r2, [pc, #152]	; (16478 <prvTraceStoreTaskswitch+0xac>)
   163e0:	6813      	ldr	r3, [r2, #0]
   163e2:	3301      	adds	r3, #1
   163e4:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   163e6:	4b25      	ldr	r3, [pc, #148]	; (1647c <prvTraceStoreTaskswitch+0xb0>)
   163e8:	781b      	ldrb	r3, [r3, #0]
   163ea:	4283      	cmp	r3, r0
   163ec:	d004      	beq.n	163f8 <prvTraceStoreTaskswitch+0x2c>
   163ee:	4b24      	ldr	r3, [pc, #144]	; (16480 <prvTraceStoreTaskswitch+0xb4>)
   163f0:	681b      	ldr	r3, [r3, #0]
   163f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   163f4:	2b00      	cmp	r3, #0
   163f6:	d10a      	bne.n	1640e <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   163f8:	4a1f      	ldr	r2, [pc, #124]	; (16478 <prvTraceStoreTaskswitch+0xac>)
   163fa:	6813      	ldr	r3, [r2, #0]
   163fc:	3b01      	subs	r3, #1
   163fe:	6013      	str	r3, [r2, #0]
   16400:	f385 8810 	msr	PRIMASK, r5
}
   16404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   16406:	481f      	ldr	r0, [pc, #124]	; (16484 <prvTraceStoreTaskswitch+0xb8>)
   16408:	4b1f      	ldr	r3, [pc, #124]	; (16488 <prvTraceStoreTaskswitch+0xbc>)
   1640a:	4798      	blx	r3
   1640c:	e7fa      	b.n	16404 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
   1640e:	2200      	movs	r2, #0
   16410:	4b1e      	ldr	r3, [pc, #120]	; (1648c <prvTraceStoreTaskswitch+0xc0>)
   16412:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16414:	481e      	ldr	r0, [pc, #120]	; (16490 <prvTraceStoreTaskswitch+0xc4>)
   16416:	4b1f      	ldr	r3, [pc, #124]	; (16494 <prvTraceStoreTaskswitch+0xc8>)
   16418:	4798      	blx	r3
   1641a:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
   1641c:	4b17      	ldr	r3, [pc, #92]	; (1647c <prvTraceStoreTaskswitch+0xb0>)
   1641e:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   16420:	4b1d      	ldr	r3, [pc, #116]	; (16498 <prvTraceStoreTaskswitch+0xcc>)
   16422:	4798      	blx	r3
   16424:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
   16426:	d0e7      	beq.n	163f8 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   16428:	4b14      	ldr	r3, [pc, #80]	; (1647c <prvTraceStoreTaskswitch+0xb0>)
   1642a:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1642c:	4b14      	ldr	r3, [pc, #80]	; (16480 <prvTraceStoreTaskswitch+0xb4>)
   1642e:	681a      	ldr	r2, [r3, #0]
   16430:	2367      	movs	r3, #103	; 0x67
   16432:	5cd3      	ldrb	r3, [r2, r3]
   16434:	4283      	cmp	r3, r0
   16436:	d30f      	bcc.n	16458 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   16438:	2103      	movs	r1, #3
   1643a:	4b18      	ldr	r3, [pc, #96]	; (1649c <prvTraceStoreTaskswitch+0xd0>)
   1643c:	4798      	blx	r3
   1643e:	4b10      	ldr	r3, [pc, #64]	; (16480 <prvTraceStoreTaskswitch+0xb4>)
   16440:	681b      	ldr	r3, [r3, #0]
   16442:	2273      	movs	r2, #115	; 0x73
   16444:	5c9a      	ldrb	r2, [r3, r2]
   16446:	181b      	adds	r3, r3, r0
   16448:	189b      	adds	r3, r3, r2
   1644a:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	2b01      	cmp	r3, #1
   16450:	d105      	bne.n	1645e <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
   16452:	3306      	adds	r3, #6
   16454:	7033      	strb	r3, [r6, #0]
   16456:	e004      	b.n	16462 <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16458:	4811      	ldr	r0, [pc, #68]	; (164a0 <prvTraceStoreTaskswitch+0xd4>)
   1645a:	4b0b      	ldr	r3, [pc, #44]	; (16488 <prvTraceStoreTaskswitch+0xbc>)
   1645c:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
   1645e:	2306      	movs	r3, #6
   16460:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
   16462:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   16464:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
   16466:	4b05      	ldr	r3, [pc, #20]	; (1647c <prvTraceStoreTaskswitch+0xb0>)
   16468:	7819      	ldrb	r1, [r3, #0]
   1646a:	2201      	movs	r2, #1
   1646c:	2003      	movs	r0, #3
   1646e:	4b0d      	ldr	r3, [pc, #52]	; (164a4 <prvTraceStoreTaskswitch+0xd8>)
   16470:	4798      	blx	r3
			prvTraceUpdateCounters();
   16472:	4b0d      	ldr	r3, [pc, #52]	; (164a8 <prvTraceStoreTaskswitch+0xdc>)
   16474:	4798      	blx	r3
   16476:	e7bf      	b.n	163f8 <prvTraceStoreTaskswitch+0x2c>
   16478:	20000c10 	.word	0x20000c10
   1647c:	20000b64 	.word	0x20000b64
   16480:	20000b60 	.word	0x20000b60
   16484:	00029378 	.word	0x00029378
   16488:	00015955 	.word	0x00015955
   1648c:	20000b6c 	.word	0x20000b6c
   16490:	0000ffff 	.word	0x0000ffff
   16494:	00015ef1 	.word	0x00015ef1
   16498:	000159ad 	.word	0x000159ad
   1649c:	00015b31 	.word	0x00015b31
   164a0:	000293c0 	.word	0x000293c0
   164a4:	00015c5d 	.word	0x00015c5d
   164a8:	00015aa5 	.word	0x00015aa5

000164ac <uiTraceStart>:
{
   164ac:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
   164ae:	4b20      	ldr	r3, [pc, #128]	; (16530 <uiTraceStart+0x84>)
   164b0:	681b      	ldr	r3, [r3, #0]
   164b2:	2b00      	cmp	r3, #0
   164b4:	d00a      	beq.n	164cc <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
   164b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   164b8:	2801      	cmp	r0, #1
   164ba:	d006      	beq.n	164ca <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
   164bc:	4b1d      	ldr	r3, [pc, #116]	; (16534 <uiTraceStart+0x88>)
   164be:	681b      	ldr	r3, [r3, #0]
   164c0:	2b00      	cmp	r3, #0
   164c2:	d008      	beq.n	164d6 <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
   164c4:	4b1a      	ldr	r3, [pc, #104]	; (16530 <uiTraceStart+0x84>)
   164c6:	681b      	ldr	r3, [r3, #0]
   164c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   164ca:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   164cc:	481a      	ldr	r0, [pc, #104]	; (16538 <uiTraceStart+0x8c>)
   164ce:	4b1b      	ldr	r3, [pc, #108]	; (1653c <uiTraceStart+0x90>)
   164d0:	4798      	blx	r3
   164d2:	2000      	movs	r0, #0
   164d4:	e7f9      	b.n	164ca <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   164d6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   164da:	2201      	movs	r2, #1
   164dc:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
   164e0:	4917      	ldr	r1, [pc, #92]	; (16540 <uiTraceStart+0x94>)
   164e2:	680b      	ldr	r3, [r1, #0]
   164e4:	3301      	adds	r3, #1
   164e6:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   164e8:	4b11      	ldr	r3, [pc, #68]	; (16530 <uiTraceStart+0x84>)
   164ea:	681b      	ldr	r3, [r3, #0]
   164ec:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   164ee:	4b15      	ldr	r3, [pc, #84]	; (16544 <uiTraceStart+0x98>)
   164f0:	4798      	blx	r3
   164f2:	4b15      	ldr	r3, [pc, #84]	; (16548 <uiTraceStart+0x9c>)
   164f4:	4798      	blx	r3
   164f6:	b2c4      	uxtb	r4, r0
		if (handle == 0)
   164f8:	2c00      	cmp	r4, #0
   164fa:	d009      	beq.n	16510 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   164fc:	0020      	movs	r0, r4
   164fe:	4b13      	ldr	r3, [pc, #76]	; (1654c <uiTraceStart+0xa0>)
   16500:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   16502:	4a0f      	ldr	r2, [pc, #60]	; (16540 <uiTraceStart+0x94>)
   16504:	6813      	ldr	r3, [r2, #0]
   16506:	3b01      	subs	r3, #1
   16508:	6013      	str	r3, [r2, #0]
   1650a:	f385 8810 	msr	PRIMASK, r5
   1650e:	e7d9      	b.n	164c4 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   16510:	2003      	movs	r0, #3
   16512:	4b0f      	ldr	r3, [pc, #60]	; (16550 <uiTraceStart+0xa4>)
   16514:	4798      	blx	r3
   16516:	0006      	movs	r6, r0
   16518:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1651a:	4a0e      	ldr	r2, [pc, #56]	; (16554 <uiTraceStart+0xa8>)
   1651c:	0001      	movs	r1, r0
   1651e:	2003      	movs	r0, #3
   16520:	4b0d      	ldr	r3, [pc, #52]	; (16558 <uiTraceStart+0xac>)
   16522:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   16524:	2200      	movs	r2, #0
   16526:	0031      	movs	r1, r6
   16528:	2003      	movs	r0, #3
   1652a:	4b0c      	ldr	r3, [pc, #48]	; (1655c <uiTraceStart+0xb0>)
   1652c:	4798      	blx	r3
   1652e:	e7e5      	b.n	164fc <uiTraceStart+0x50>
   16530:	20000b60 	.word	0x20000b60
   16534:	20000c18 	.word	0x20000c18
   16538:	0002947c 	.word	0x0002947c
   1653c:	00015955 	.word	0x00015955
   16540:	20000c10 	.word	0x20000c10
   16544:	00015505 	.word	0x00015505
   16548:	00015341 	.word	0x00015341
   1654c:	000163cd 	.word	0x000163cd
   16550:	00015cf5 	.word	0x00015cf5
   16554:	000294c0 	.word	0x000294c0
   16558:	00015dc9 	.word	0x00015dc9
   1655c:	00015ba9 	.word	0x00015ba9

00016560 <vTraceStart>:
{
   16560:	b510      	push	{r4, lr}
	(void)uiTraceStart();
   16562:	4b01      	ldr	r3, [pc, #4]	; (16568 <vTraceStart+0x8>)
   16564:	4798      	blx	r3
}
   16566:	bd10      	pop	{r4, pc}
   16568:	000164ad 	.word	0x000164ad

0001656c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1656c:	0003      	movs	r3, r0
   1656e:	3308      	adds	r3, #8
   16570:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   16572:	2201      	movs	r2, #1
   16574:	4252      	negs	r2, r2
   16576:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16578:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1657a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1657c:	2300      	movs	r3, #0
   1657e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   16580:	4770      	bx	lr

00016582 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   16582:	2300      	movs	r3, #0
   16584:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   16586:	4770      	bx	lr

00016588 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   16588:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1658a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1658c:	689a      	ldr	r2, [r3, #8]
   1658e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   16590:	689a      	ldr	r2, [r3, #8]
   16592:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   16594:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   16596:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   16598:	6803      	ldr	r3, [r0, #0]
   1659a:	3301      	adds	r3, #1
   1659c:	6003      	str	r3, [r0, #0]
}
   1659e:	4770      	bx	lr

000165a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   165a0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   165a2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   165a4:	0002      	movs	r2, r0
   165a6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
   165a8:	1c63      	adds	r3, r4, #1
   165aa:	d102      	bne.n	165b2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
   165ac:	6902      	ldr	r2, [r0, #16]
   165ae:	e004      	b.n	165ba <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   165b0:	001a      	movs	r2, r3
   165b2:	6853      	ldr	r3, [r2, #4]
   165b4:	681d      	ldr	r5, [r3, #0]
   165b6:	42ac      	cmp	r4, r5
   165b8:	d2fa      	bcs.n	165b0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   165ba:	6853      	ldr	r3, [r2, #4]
   165bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   165be:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   165c0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   165c2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   165c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   165c6:	6803      	ldr	r3, [r0, #0]
   165c8:	3301      	adds	r3, #1
   165ca:	6003      	str	r3, [r0, #0]
}
   165cc:	bd30      	pop	{r4, r5, pc}

000165ce <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   165ce:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   165d0:	6842      	ldr	r2, [r0, #4]
   165d2:	6881      	ldr	r1, [r0, #8]
   165d4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   165d6:	6882      	ldr	r2, [r0, #8]
   165d8:	6841      	ldr	r1, [r0, #4]
   165da:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   165dc:	685a      	ldr	r2, [r3, #4]
   165de:	4290      	cmp	r0, r2
   165e0:	d006      	beq.n	165f0 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   165e2:	2200      	movs	r2, #0
   165e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   165e6:	681a      	ldr	r2, [r3, #0]
   165e8:	3a01      	subs	r2, #1
   165ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   165ec:	6818      	ldr	r0, [r3, #0]
}
   165ee:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   165f0:	6882      	ldr	r2, [r0, #8]
   165f2:	605a      	str	r2, [r3, #4]
   165f4:	e7f5      	b.n	165e2 <uxListRemove+0x14>
	...

000165f8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   165f8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   165fa:	2300      	movs	r3, #0
   165fc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   165fe:	4b06      	ldr	r3, [pc, #24]	; (16618 <prvTaskExitError+0x20>)
   16600:	681b      	ldr	r3, [r3, #0]
   16602:	3301      	adds	r3, #1
   16604:	d001      	beq.n	1660a <prvTaskExitError+0x12>
   16606:	b672      	cpsid	i
   16608:	e7fe      	b.n	16608 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
   1660a:	b672      	cpsid	i
	while( ulDummy == 0 )
   1660c:	9b01      	ldr	r3, [sp, #4]
   1660e:	2b00      	cmp	r3, #0
   16610:	d0fc      	beq.n	1660c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   16612:	b002      	add	sp, #8
   16614:	4770      	bx	lr
   16616:	46c0      	nop			; (mov r8, r8)
   16618:	200000c8 	.word	0x200000c8
   1661c:	00000000 	.word	0x00000000

00016620 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   16620:	4a0b      	ldr	r2, [pc, #44]	; (16650 <pxCurrentTCBConst2>)
   16622:	6813      	ldr	r3, [r2, #0]
   16624:	6818      	ldr	r0, [r3, #0]
   16626:	3020      	adds	r0, #32
   16628:	f380 8809 	msr	PSP, r0
   1662c:	2002      	movs	r0, #2
   1662e:	f380 8814 	msr	CONTROL, r0
   16632:	f3bf 8f6f 	isb	sy
   16636:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   16638:	46ae      	mov	lr, r5
   1663a:	bc08      	pop	{r3}
   1663c:	bc04      	pop	{r2}
   1663e:	b662      	cpsie	i
   16640:	4718      	bx	r3
   16642:	46c0      	nop			; (mov r8, r8)
   16644:	46c0      	nop			; (mov r8, r8)
   16646:	46c0      	nop			; (mov r8, r8)
   16648:	46c0      	nop			; (mov r8, r8)
   1664a:	46c0      	nop			; (mov r8, r8)
   1664c:	46c0      	nop			; (mov r8, r8)
   1664e:	46c0      	nop			; (mov r8, r8)

00016650 <pxCurrentTCBConst2>:
   16650:	20003b14 	.word	0x20003b14

00016654 <pxPortInitialiseStack>:
{
   16654:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   16656:	1f03      	subs	r3, r0, #4
   16658:	2480      	movs	r4, #128	; 0x80
   1665a:	0464      	lsls	r4, r4, #17
   1665c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1665e:	3b04      	subs	r3, #4
   16660:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   16662:	3b04      	subs	r3, #4
   16664:	4902      	ldr	r1, [pc, #8]	; (16670 <pxPortInitialiseStack+0x1c>)
   16666:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   16668:	3b14      	subs	r3, #20
   1666a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1666c:	3840      	subs	r0, #64	; 0x40
}
   1666e:	bd10      	pop	{r4, pc}
   16670:	000165f9 	.word	0x000165f9

00016674 <SVC_Handler>:
}
   16674:	4770      	bx	lr
	...

00016678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   16678:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1667a:	4b13      	ldr	r3, [pc, #76]	; (166c8 <xPortStartScheduler+0x50>)
   1667c:	6819      	ldr	r1, [r3, #0]
   1667e:	22ff      	movs	r2, #255	; 0xff
   16680:	0412      	lsls	r2, r2, #16
   16682:	430a      	orrs	r2, r1
   16684:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   16686:	6819      	ldr	r1, [r3, #0]
   16688:	22ff      	movs	r2, #255	; 0xff
   1668a:	0612      	lsls	r2, r2, #24
   1668c:	430a      	orrs	r2, r1
   1668e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   16690:	4d0e      	ldr	r5, [pc, #56]	; (166cc <xPortStartScheduler+0x54>)
   16692:	2400      	movs	r4, #0
   16694:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   16696:	4b0e      	ldr	r3, [pc, #56]	; (166d0 <xPortStartScheduler+0x58>)
   16698:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1669a:	2000      	movs	r0, #0
   1669c:	4b0d      	ldr	r3, [pc, #52]	; (166d4 <xPortStartScheduler+0x5c>)
   1669e:	4798      	blx	r3
   166a0:	21fa      	movs	r1, #250	; 0xfa
   166a2:	0089      	lsls	r1, r1, #2
   166a4:	4b0c      	ldr	r3, [pc, #48]	; (166d8 <xPortStartScheduler+0x60>)
   166a6:	4798      	blx	r3
   166a8:	3801      	subs	r0, #1
   166aa:	4b0c      	ldr	r3, [pc, #48]	; (166dc <xPortStartScheduler+0x64>)
   166ac:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   166ae:	2307      	movs	r3, #7
   166b0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
   166b2:	4b0b      	ldr	r3, [pc, #44]	; (166e0 <xPortStartScheduler+0x68>)
   166b4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
   166b6:	4b0b      	ldr	r3, [pc, #44]	; (166e4 <xPortStartScheduler+0x6c>)
   166b8:	4798      	blx	r3
	vTaskSwitchContext();
   166ba:	4b0b      	ldr	r3, [pc, #44]	; (166e8 <xPortStartScheduler+0x70>)
   166bc:	4798      	blx	r3
	prvTaskExitError();
   166be:	4b0b      	ldr	r3, [pc, #44]	; (166ec <xPortStartScheduler+0x74>)
   166c0:	4798      	blx	r3
}
   166c2:	2000      	movs	r0, #0
   166c4:	bd70      	pop	{r4, r5, r6, pc}
   166c6:	46c0      	nop			; (mov r8, r8)
   166c8:	e000ed20 	.word	0xe000ed20
   166cc:	e000e010 	.word	0xe000e010
   166d0:	e000e018 	.word	0xe000e018
   166d4:	0001f085 	.word	0x0001f085
   166d8:	00024039 	.word	0x00024039
   166dc:	e000e014 	.word	0xe000e014
   166e0:	200000c8 	.word	0x200000c8
   166e4:	00016621 	.word	0x00016621
   166e8:	000181e5 	.word	0x000181e5
   166ec:	000165f9 	.word	0x000165f9

000166f0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   166f0:	2280      	movs	r2, #128	; 0x80
   166f2:	0552      	lsls	r2, r2, #21
   166f4:	4b01      	ldr	r3, [pc, #4]	; (166fc <vPortYield+0xc>)
   166f6:	601a      	str	r2, [r3, #0]
}
   166f8:	4770      	bx	lr
   166fa:	46c0      	nop			; (mov r8, r8)
   166fc:	e000ed04 	.word	0xe000ed04

00016700 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
   16700:	b672      	cpsid	i
    uxCriticalNesting++;
   16702:	4a04      	ldr	r2, [pc, #16]	; (16714 <vPortEnterCritical+0x14>)
   16704:	6813      	ldr	r3, [r2, #0]
   16706:	3301      	adds	r3, #1
   16708:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
   1670a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1670e:	f3bf 8f6f 	isb	sy
}
   16712:	4770      	bx	lr
   16714:	200000c8 	.word	0x200000c8

00016718 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   16718:	4b06      	ldr	r3, [pc, #24]	; (16734 <vPortExitCritical+0x1c>)
   1671a:	681b      	ldr	r3, [r3, #0]
   1671c:	2b00      	cmp	r3, #0
   1671e:	d101      	bne.n	16724 <vPortExitCritical+0xc>
   16720:	b672      	cpsid	i
   16722:	e7fe      	b.n	16722 <vPortExitCritical+0xa>
    uxCriticalNesting--;
   16724:	3b01      	subs	r3, #1
   16726:	4a03      	ldr	r2, [pc, #12]	; (16734 <vPortExitCritical+0x1c>)
   16728:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
   1672a:	2b00      	cmp	r3, #0
   1672c:	d100      	bne.n	16730 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
   1672e:	b662      	cpsie	i
}
   16730:	4770      	bx	lr
   16732:	46c0      	nop			; (mov r8, r8)
   16734:	200000c8 	.word	0x200000c8

00016738 <ulSetInterruptMaskFromISR>:
	__asm volatile(
   16738:	f3ef 8010 	mrs	r0, PRIMASK
   1673c:	b672      	cpsid	i
   1673e:	4770      	bx	lr

00016740 <vClearInterruptMaskFromISR>:
	__asm volatile(
   16740:	f380 8810 	msr	PRIMASK, r0
   16744:	4770      	bx	lr
	...

00016750 <PendSV_Handler>:
	__asm volatile
   16750:	f3ef 8009 	mrs	r0, PSP
   16754:	4b0e      	ldr	r3, [pc, #56]	; (16790 <pxCurrentTCBConst>)
   16756:	681a      	ldr	r2, [r3, #0]
   16758:	3820      	subs	r0, #32
   1675a:	6010      	str	r0, [r2, #0]
   1675c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1675e:	4644      	mov	r4, r8
   16760:	464d      	mov	r5, r9
   16762:	4656      	mov	r6, sl
   16764:	465f      	mov	r7, fp
   16766:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   16768:	b508      	push	{r3, lr}
   1676a:	b672      	cpsid	i
   1676c:	f001 fd3a 	bl	181e4 <vTaskSwitchContext>
   16770:	b662      	cpsie	i
   16772:	bc0c      	pop	{r2, r3}
   16774:	6811      	ldr	r1, [r2, #0]
   16776:	6808      	ldr	r0, [r1, #0]
   16778:	3010      	adds	r0, #16
   1677a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1677c:	46a0      	mov	r8, r4
   1677e:	46a9      	mov	r9, r5
   16780:	46b2      	mov	sl, r6
   16782:	46bb      	mov	fp, r7
   16784:	f380 8809 	msr	PSP, r0
   16788:	3820      	subs	r0, #32
   1678a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1678c:	4718      	bx	r3
   1678e:	46c0      	nop			; (mov r8, r8)

00016790 <pxCurrentTCBConst>:
   16790:	20003b14 	.word	0x20003b14

00016794 <SysTick_Handler>:
{
   16794:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   16796:	4b07      	ldr	r3, [pc, #28]	; (167b4 <SysTick_Handler+0x20>)
   16798:	4798      	blx	r3
   1679a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
   1679c:	4b06      	ldr	r3, [pc, #24]	; (167b8 <SysTick_Handler+0x24>)
   1679e:	4798      	blx	r3
   167a0:	2800      	cmp	r0, #0
   167a2:	d003      	beq.n	167ac <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   167a4:	2280      	movs	r2, #128	; 0x80
   167a6:	0552      	lsls	r2, r2, #21
   167a8:	4b04      	ldr	r3, [pc, #16]	; (167bc <SysTick_Handler+0x28>)
   167aa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   167ac:	0020      	movs	r0, r4
   167ae:	4b04      	ldr	r3, [pc, #16]	; (167c0 <SysTick_Handler+0x2c>)
   167b0:	4798      	blx	r3
}
   167b2:	bd10      	pop	{r4, pc}
   167b4:	00016739 	.word	0x00016739
   167b8:	00017e8d 	.word	0x00017e8d
   167bc:	e000ed04 	.word	0xe000ed04
   167c0:	00016741 	.word	0x00016741

000167c4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   167c4:	b570      	push	{r4, r5, r6, lr}
   167c6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   167c8:	0743      	lsls	r3, r0, #29
   167ca:	d002      	beq.n	167d2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   167cc:	2307      	movs	r3, #7
   167ce:	439c      	bics	r4, r3
   167d0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   167d2:	4b18      	ldr	r3, [pc, #96]	; (16834 <pvPortMalloc+0x70>)
   167d4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   167d6:	4b18      	ldr	r3, [pc, #96]	; (16838 <pvPortMalloc+0x74>)
   167d8:	681b      	ldr	r3, [r3, #0]
   167da:	2b00      	cmp	r3, #0
   167dc:	d017      	beq.n	1680e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   167de:	4b17      	ldr	r3, [pc, #92]	; (1683c <pvPortMalloc+0x78>)
   167e0:	681a      	ldr	r2, [r3, #0]
   167e2:	18a3      	adds	r3, r4, r2
   167e4:	4916      	ldr	r1, [pc, #88]	; (16840 <pvPortMalloc+0x7c>)
   167e6:	428b      	cmp	r3, r1
   167e8:	d818      	bhi.n	1681c <pvPortMalloc+0x58>
   167ea:	429a      	cmp	r2, r3
   167ec:	d216      	bcs.n	1681c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   167ee:	4912      	ldr	r1, [pc, #72]	; (16838 <pvPortMalloc+0x74>)
   167f0:	680d      	ldr	r5, [r1, #0]
   167f2:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
   167f4:	4a11      	ldr	r2, [pc, #68]	; (1683c <pvPortMalloc+0x78>)
   167f6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   167f8:	2d00      	cmp	r5, #0
   167fa:	d00f      	beq.n	1681c <pvPortMalloc+0x58>
   167fc:	0022      	movs	r2, r4
   167fe:	0029      	movs	r1, r5
   16800:	2094      	movs	r0, #148	; 0x94
   16802:	4b10      	ldr	r3, [pc, #64]	; (16844 <pvPortMalloc+0x80>)
   16804:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   16806:	4b10      	ldr	r3, [pc, #64]	; (16848 <pvPortMalloc+0x84>)
   16808:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   1680a:	0028      	movs	r0, r5
   1680c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1680e:	2207      	movs	r2, #7
   16810:	4b0e      	ldr	r3, [pc, #56]	; (1684c <pvPortMalloc+0x88>)
   16812:	3308      	adds	r3, #8
   16814:	4393      	bics	r3, r2
   16816:	4a08      	ldr	r2, [pc, #32]	; (16838 <pvPortMalloc+0x74>)
   16818:	6013      	str	r3, [r2, #0]
   1681a:	e7e0      	b.n	167de <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
   1681c:	0022      	movs	r2, r4
   1681e:	2100      	movs	r1, #0
   16820:	20e8      	movs	r0, #232	; 0xe8
   16822:	4b08      	ldr	r3, [pc, #32]	; (16844 <pvPortMalloc+0x80>)
   16824:	4798      	blx	r3
	( void ) xTaskResumeAll();
   16826:	4b08      	ldr	r3, [pc, #32]	; (16848 <pvPortMalloc+0x84>)
   16828:	4798      	blx	r3
			vApplicationMallocFailedHook();
   1682a:	4b09      	ldr	r3, [pc, #36]	; (16850 <pvPortMalloc+0x8c>)
   1682c:	4798      	blx	r3
   1682e:	2500      	movs	r5, #0
	return pvReturn;
   16830:	e7eb      	b.n	1680a <pvPortMalloc+0x46>
   16832:	46c0      	nop			; (mov r8, r8)
   16834:	00017e71 	.word	0x00017e71
   16838:	20000c2c 	.word	0x20000c2c
   1683c:	20003b10 	.word	0x20003b10
   16840:	00002ed7 	.word	0x00002ed7
   16844:	000160bd 	.word	0x000160bd
   16848:	00018019 	.word	0x00018019
   1684c:	20000c30 	.word	0x20000c30
   16850:	00024011 	.word	0x00024011

00016854 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   16854:	2800      	cmp	r0, #0
   16856:	d001      	beq.n	1685c <vPortFree+0x8>
   16858:	b672      	cpsid	i
   1685a:	e7fe      	b.n	1685a <vPortFree+0x6>
}
   1685c:	4770      	bx	lr
	...

00016860 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   16860:	4b02      	ldr	r3, [pc, #8]	; (1686c <xPortGetFreeHeapSize+0xc>)
   16862:	681b      	ldr	r3, [r3, #0]
   16864:	4802      	ldr	r0, [pc, #8]	; (16870 <xPortGetFreeHeapSize+0x10>)
   16866:	1ac0      	subs	r0, r0, r3
}
   16868:	4770      	bx	lr
   1686a:	46c0      	nop			; (mov r8, r8)
   1686c:	20003b10 	.word	0x20003b10
   16870:	00002ed8 	.word	0x00002ed8

00016874 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   16874:	b510      	push	{r4, lr}
   16876:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   16878:	4b03      	ldr	r3, [pc, #12]	; (16888 <prvIsQueueEmpty+0x14>)
   1687a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1687c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1687e:	4b03      	ldr	r3, [pc, #12]	; (1688c <prvIsQueueEmpty+0x18>)
   16880:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   16882:	4260      	negs	r0, r4
   16884:	4160      	adcs	r0, r4

	return xReturn;
}
   16886:	bd10      	pop	{r4, pc}
   16888:	00016701 	.word	0x00016701
   1688c:	00016719 	.word	0x00016719

00016890 <prvCopyDataToQueue>:
{
   16890:	b570      	push	{r4, r5, r6, lr}
   16892:	0004      	movs	r4, r0
   16894:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   16896:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   16898:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1689a:	2a00      	cmp	r2, #0
   1689c:	d10b      	bne.n	168b6 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
   1689e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   168a0:	6823      	ldr	r3, [r4, #0]
   168a2:	4283      	cmp	r3, r0
   168a4:	d104      	bne.n	168b0 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   168a6:	6860      	ldr	r0, [r4, #4]
   168a8:	4b16      	ldr	r3, [pc, #88]	; (16904 <prvCopyDataToQueue+0x74>)
   168aa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   168ac:	2300      	movs	r3, #0
   168ae:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   168b0:	3501      	adds	r5, #1
   168b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
   168b4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   168b6:	2e00      	cmp	r6, #0
   168b8:	d10e      	bne.n	168d8 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   168ba:	6880      	ldr	r0, [r0, #8]
   168bc:	4b12      	ldr	r3, [pc, #72]	; (16908 <prvCopyDataToQueue+0x78>)
   168be:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   168c0:	68a3      	ldr	r3, [r4, #8]
   168c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   168c4:	4694      	mov	ip, r2
   168c6:	4463      	add	r3, ip
   168c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   168ca:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   168cc:	6862      	ldr	r2, [r4, #4]
   168ce:	4293      	cmp	r3, r2
   168d0:	d3ee      	bcc.n	168b0 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   168d2:	6823      	ldr	r3, [r4, #0]
   168d4:	60a3      	str	r3, [r4, #8]
   168d6:	e7eb      	b.n	168b0 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   168d8:	68c0      	ldr	r0, [r0, #12]
   168da:	4b0b      	ldr	r3, [pc, #44]	; (16908 <prvCopyDataToQueue+0x78>)
   168dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   168de:	6c23      	ldr	r3, [r4, #64]	; 0x40
   168e0:	425b      	negs	r3, r3
   168e2:	68e2      	ldr	r2, [r4, #12]
   168e4:	18d2      	adds	r2, r2, r3
   168e6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   168e8:	6821      	ldr	r1, [r4, #0]
   168ea:	428a      	cmp	r2, r1
   168ec:	d203      	bcs.n	168f6 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   168ee:	6862      	ldr	r2, [r4, #4]
   168f0:	4694      	mov	ip, r2
   168f2:	4463      	add	r3, ip
   168f4:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
   168f6:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
   168f8:	2e02      	cmp	r6, #2
   168fa:	d1d9      	bne.n	168b0 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   168fc:	4285      	cmp	r5, r0
   168fe:	d0d7      	beq.n	168b0 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
   16900:	3d01      	subs	r5, #1
   16902:	e7d5      	b.n	168b0 <prvCopyDataToQueue+0x20>
   16904:	000187c5 	.word	0x000187c5
   16908:	0002626d 	.word	0x0002626d

0001690c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1690c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1690e:	46ce      	mov	lr, r9
   16910:	4647      	mov	r7, r8
   16912:	b580      	push	{r7, lr}
   16914:	b083      	sub	sp, #12
   16916:	9001      	str	r0, [sp, #4]
   16918:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1691a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1691c:	2c00      	cmp	r4, #0
   1691e:	d005      	beq.n	1692c <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   16920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16924:	429a      	cmp	r2, r3
   16926:	d303      	bcc.n	16930 <prvNotifyQueueSetContainer+0x24>
   16928:	b672      	cpsid	i
   1692a:	e7fe      	b.n	1692a <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
   1692c:	b672      	cpsid	i
   1692e:	e7fe      	b.n	1692e <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   16930:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
   16932:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   16934:	4293      	cmp	r3, r2
   16936:	d805      	bhi.n	16944 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
   16938:	0030      	movs	r0, r6
   1693a:	b003      	add	sp, #12
   1693c:	bc0c      	pop	{r2, r3}
   1693e:	4690      	mov	r8, r2
   16940:	4699      	mov	r9, r3
   16942:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   16944:	2345      	movs	r3, #69	; 0x45
   16946:	5ce5      	ldrb	r5, [r4, r3]
   16948:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
   1694a:	4b2c      	ldr	r3, [pc, #176]	; (169fc <prvNotifyQueueSetContainer+0xf0>)
   1694c:	4798      	blx	r3
   1694e:	4b2c      	ldr	r3, [pc, #176]	; (16a00 <prvNotifyQueueSetContainer+0xf4>)
   16950:	4798      	blx	r3
   16952:	4b2c      	ldr	r3, [pc, #176]	; (16a04 <prvNotifyQueueSetContainer+0xf8>)
   16954:	881b      	ldrh	r3, [r3, #0]
   16956:	4203      	tst	r3, r0
   16958:	d01e      	beq.n	16998 <prvNotifyQueueSetContainer+0x8c>
   1695a:	0020      	movs	r0, r4
   1695c:	4b2a      	ldr	r3, [pc, #168]	; (16a08 <prvNotifyQueueSetContainer+0xfc>)
   1695e:	4798      	blx	r3
   16960:	4b28      	ldr	r3, [pc, #160]	; (16a04 <prvNotifyQueueSetContainer+0xf8>)
   16962:	881b      	ldrh	r3, [r3, #0]
   16964:	4203      	tst	r3, r0
   16966:	d017      	beq.n	16998 <prvNotifyQueueSetContainer+0x8c>
   16968:	3625      	adds	r6, #37	; 0x25
   1696a:	9b00      	ldr	r3, [sp, #0]
   1696c:	2b00      	cmp	r3, #0
   1696e:	d106      	bne.n	1697e <prvNotifyQueueSetContainer+0x72>
   16970:	0020      	movs	r0, r4
   16972:	4b26      	ldr	r3, [pc, #152]	; (16a0c <prvNotifyQueueSetContainer+0x100>)
   16974:	4798      	blx	r3
   16976:	4b26      	ldr	r3, [pc, #152]	; (16a10 <prvNotifyQueueSetContainer+0x104>)
   16978:	5c1e      	ldrb	r6, [r3, r0]
   1697a:	3620      	adds	r6, #32
   1697c:	b2f6      	uxtb	r6, r6
   1697e:	0020      	movs	r0, r4
   16980:	4b22      	ldr	r3, [pc, #136]	; (16a0c <prvNotifyQueueSetContainer+0x100>)
   16982:	4798      	blx	r3
   16984:	4b22      	ldr	r3, [pc, #136]	; (16a10 <prvNotifyQueueSetContainer+0x104>)
   16986:	5c1f      	ldrb	r7, [r3, r0]
   16988:	0020      	movs	r0, r4
   1698a:	4b22      	ldr	r3, [pc, #136]	; (16a14 <prvNotifyQueueSetContainer+0x108>)
   1698c:	4798      	blx	r3
   1698e:	b2c2      	uxtb	r2, r0
   16990:	0039      	movs	r1, r7
   16992:	0030      	movs	r0, r6
   16994:	4b20      	ldr	r3, [pc, #128]	; (16a18 <prvNotifyQueueSetContainer+0x10c>)
   16996:	4798      	blx	r3
   16998:	0020      	movs	r0, r4
   1699a:	4f1c      	ldr	r7, [pc, #112]	; (16a0c <prvNotifyQueueSetContainer+0x100>)
   1699c:	47b8      	blx	r7
   1699e:	4e1c      	ldr	r6, [pc, #112]	; (16a10 <prvNotifyQueueSetContainer+0x104>)
   169a0:	5c33      	ldrb	r3, [r6, r0]
   169a2:	4698      	mov	r8, r3
   169a4:	0020      	movs	r0, r4
   169a6:	4b1b      	ldr	r3, [pc, #108]	; (16a14 <prvNotifyQueueSetContainer+0x108>)
   169a8:	4798      	blx	r3
   169aa:	b2c3      	uxtb	r3, r0
   169ac:	4699      	mov	r9, r3
   169ae:	0020      	movs	r0, r4
   169b0:	47b8      	blx	r7
   169b2:	5c33      	ldrb	r3, [r6, r0]
   169b4:	2b02      	cmp	r3, #2
   169b6:	d019      	beq.n	169ec <prvNotifyQueueSetContainer+0xe0>
   169b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   169ba:	3201      	adds	r2, #1
   169bc:	b2d2      	uxtb	r2, r2
   169be:	4649      	mov	r1, r9
   169c0:	4640      	mov	r0, r8
   169c2:	4b16      	ldr	r3, [pc, #88]	; (16a1c <prvNotifyQueueSetContainer+0x110>)
   169c4:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   169c6:	9a00      	ldr	r2, [sp, #0]
   169c8:	a901      	add	r1, sp, #4
   169ca:	0020      	movs	r0, r4
   169cc:	4b14      	ldr	r3, [pc, #80]	; (16a20 <prvNotifyQueueSetContainer+0x114>)
   169ce:	4798      	blx	r3
   169d0:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
   169d2:	1c6b      	adds	r3, r5, #1
   169d4:	d10c      	bne.n	169f0 <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   169d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   169d8:	2b00      	cmp	r3, #0
   169da:	d0ad      	beq.n	16938 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   169dc:	0020      	movs	r0, r4
   169de:	3024      	adds	r0, #36	; 0x24
   169e0:	4b10      	ldr	r3, [pc, #64]	; (16a24 <prvNotifyQueueSetContainer+0x118>)
   169e2:	4798      	blx	r3
   169e4:	2800      	cmp	r0, #0
   169e6:	d0a7      	beq.n	16938 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
   169e8:	2601      	movs	r6, #1
   169ea:	e7a5      	b.n	16938 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
   169ec:	2200      	movs	r2, #0
   169ee:	e7e6      	b.n	169be <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   169f0:	3501      	adds	r5, #1
   169f2:	b26d      	sxtb	r5, r5
   169f4:	2345      	movs	r3, #69	; 0x45
   169f6:	54e5      	strb	r5, [r4, r3]
   169f8:	e79e      	b.n	16938 <prvNotifyQueueSetContainer+0x2c>
   169fa:	46c0      	nop			; (mov r8, r8)
   169fc:	00015505 	.word	0x00015505
   16a00:	00015351 	.word	0x00015351
   16a04:	200000c0 	.word	0x200000c0
   16a08:	000153b5 	.word	0x000153b5
   16a0c:	00015335 	.word	0x00015335
   16a10:	200000b8 	.word	0x200000b8
   16a14:	000153a5 	.word	0x000153a5
   16a18:	00016189 	.word	0x00016189
   16a1c:	00015c5d 	.word	0x00015c5d
   16a20:	00016891 	.word	0x00016891
   16a24:	000184c9 	.word	0x000184c9

00016a28 <prvCopyDataFromQueue>:
{
   16a28:	b510      	push	{r4, lr}
   16a2a:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   16a2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   16a2e:	2a00      	cmp	r2, #0
   16a30:	d00b      	beq.n	16a4a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   16a32:	68c3      	ldr	r3, [r0, #12]
   16a34:	189b      	adds	r3, r3, r2
   16a36:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   16a38:	6841      	ldr	r1, [r0, #4]
   16a3a:	428b      	cmp	r3, r1
   16a3c:	d301      	bcc.n	16a42 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   16a3e:	6803      	ldr	r3, [r0, #0]
   16a40:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   16a42:	68c1      	ldr	r1, [r0, #12]
   16a44:	0020      	movs	r0, r4
   16a46:	4b01      	ldr	r3, [pc, #4]	; (16a4c <prvCopyDataFromQueue+0x24>)
   16a48:	4798      	blx	r3
}
   16a4a:	bd10      	pop	{r4, pc}
   16a4c:	0002626d 	.word	0x0002626d

00016a50 <prvUnlockQueue>:
{
   16a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a52:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
   16a54:	4b25      	ldr	r3, [pc, #148]	; (16aec <prvUnlockQueue+0x9c>)
   16a56:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   16a58:	2345      	movs	r3, #69	; 0x45
   16a5a:	5cfc      	ldrb	r4, [r7, r3]
   16a5c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16a5e:	2c00      	cmp	r4, #0
   16a60:	dd1c      	ble.n	16a9c <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16a62:	4e23      	ldr	r6, [pc, #140]	; (16af0 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16a64:	4d23      	ldr	r5, [pc, #140]	; (16af4 <prvUnlockQueue+0xa4>)
   16a66:	e00b      	b.n	16a80 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16a6a:	2b00      	cmp	r3, #0
   16a6c:	d016      	beq.n	16a9c <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16a6e:	0038      	movs	r0, r7
   16a70:	3024      	adds	r0, #36	; 0x24
   16a72:	47a8      	blx	r5
   16a74:	2800      	cmp	r0, #0
   16a76:	d10e      	bne.n	16a96 <prvUnlockQueue+0x46>
   16a78:	3c01      	subs	r4, #1
   16a7a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16a7c:	2c00      	cmp	r4, #0
   16a7e:	d00d      	beq.n	16a9c <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
   16a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16a82:	2b00      	cmp	r3, #0
   16a84:	d0f0      	beq.n	16a68 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16a86:	2100      	movs	r1, #0
   16a88:	0038      	movs	r0, r7
   16a8a:	47b0      	blx	r6
   16a8c:	2800      	cmp	r0, #0
   16a8e:	d0f3      	beq.n	16a78 <prvUnlockQueue+0x28>
						vTaskMissedYield();
   16a90:	4b19      	ldr	r3, [pc, #100]	; (16af8 <prvUnlockQueue+0xa8>)
   16a92:	4798      	blx	r3
   16a94:	e7f0      	b.n	16a78 <prvUnlockQueue+0x28>
							vTaskMissedYield();
   16a96:	4b18      	ldr	r3, [pc, #96]	; (16af8 <prvUnlockQueue+0xa8>)
   16a98:	4798      	blx	r3
   16a9a:	e7ed      	b.n	16a78 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
   16a9c:	22ff      	movs	r2, #255	; 0xff
   16a9e:	2345      	movs	r3, #69	; 0x45
   16aa0:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   16aa2:	4b16      	ldr	r3, [pc, #88]	; (16afc <prvUnlockQueue+0xac>)
   16aa4:	4798      	blx	r3
	taskENTER_CRITICAL();
   16aa6:	4b11      	ldr	r3, [pc, #68]	; (16aec <prvUnlockQueue+0x9c>)
   16aa8:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   16aaa:	2344      	movs	r3, #68	; 0x44
   16aac:	5cfc      	ldrb	r4, [r7, r3]
   16aae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16ab0:	2c00      	cmp	r4, #0
   16ab2:	dd14      	ble.n	16ade <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16ab4:	693b      	ldr	r3, [r7, #16]
   16ab6:	2b00      	cmp	r3, #0
   16ab8:	d011      	beq.n	16ade <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16aba:	003d      	movs	r5, r7
   16abc:	3510      	adds	r5, #16
   16abe:	4e0d      	ldr	r6, [pc, #52]	; (16af4 <prvUnlockQueue+0xa4>)
   16ac0:	e006      	b.n	16ad0 <prvUnlockQueue+0x80>
   16ac2:	3c01      	subs	r4, #1
   16ac4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16ac6:	2c00      	cmp	r4, #0
   16ac8:	d009      	beq.n	16ade <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16aca:	693b      	ldr	r3, [r7, #16]
   16acc:	2b00      	cmp	r3, #0
   16ace:	d006      	beq.n	16ade <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16ad0:	0028      	movs	r0, r5
   16ad2:	47b0      	blx	r6
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d0f4      	beq.n	16ac2 <prvUnlockQueue+0x72>
					vTaskMissedYield();
   16ad8:	4b07      	ldr	r3, [pc, #28]	; (16af8 <prvUnlockQueue+0xa8>)
   16ada:	4798      	blx	r3
   16adc:	e7f1      	b.n	16ac2 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
   16ade:	22ff      	movs	r2, #255	; 0xff
   16ae0:	2344      	movs	r3, #68	; 0x44
   16ae2:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   16ae4:	4b05      	ldr	r3, [pc, #20]	; (16afc <prvUnlockQueue+0xac>)
   16ae6:	4798      	blx	r3
}
   16ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16aea:	46c0      	nop			; (mov r8, r8)
   16aec:	00016701 	.word	0x00016701
   16af0:	0001690d 	.word	0x0001690d
   16af4:	000184c9 	.word	0x000184c9
   16af8:	00018635 	.word	0x00018635
   16afc:	00016719 	.word	0x00016719

00016b00 <xQueueGenericReset>:
{
   16b00:	b570      	push	{r4, r5, r6, lr}
   16b02:	0004      	movs	r4, r0
   16b04:	000d      	movs	r5, r1
	configASSERT( pxQueue );
   16b06:	2800      	cmp	r0, #0
   16b08:	d021      	beq.n	16b4e <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
   16b0a:	4b17      	ldr	r3, [pc, #92]	; (16b68 <xQueueGenericReset+0x68>)
   16b0c:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   16b0e:	6822      	ldr	r2, [r4, #0]
   16b10:	6c21      	ldr	r1, [r4, #64]	; 0x40
   16b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16b14:	434b      	muls	r3, r1
   16b16:	18d0      	adds	r0, r2, r3
   16b18:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   16b1a:	2000      	movs	r0, #0
   16b1c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   16b1e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   16b20:	1a5b      	subs	r3, r3, r1
   16b22:	18d3      	adds	r3, r2, r3
   16b24:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   16b26:	23ff      	movs	r3, #255	; 0xff
   16b28:	2244      	movs	r2, #68	; 0x44
   16b2a:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   16b2c:	3201      	adds	r2, #1
   16b2e:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
   16b30:	2d00      	cmp	r5, #0
   16b32:	d111      	bne.n	16b58 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16b34:	6923      	ldr	r3, [r4, #16]
   16b36:	2b00      	cmp	r3, #0
   16b38:	d005      	beq.n	16b46 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16b3a:	0020      	movs	r0, r4
   16b3c:	3010      	adds	r0, #16
   16b3e:	4b0b      	ldr	r3, [pc, #44]	; (16b6c <xQueueGenericReset+0x6c>)
   16b40:	4798      	blx	r3
   16b42:	2800      	cmp	r0, #0
   16b44:	d105      	bne.n	16b52 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
   16b46:	4b0a      	ldr	r3, [pc, #40]	; (16b70 <xQueueGenericReset+0x70>)
   16b48:	4798      	blx	r3
}
   16b4a:	2001      	movs	r0, #1
   16b4c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
   16b4e:	b672      	cpsid	i
   16b50:	e7fe      	b.n	16b50 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
   16b52:	4b08      	ldr	r3, [pc, #32]	; (16b74 <xQueueGenericReset+0x74>)
   16b54:	4798      	blx	r3
   16b56:	e7f6      	b.n	16b46 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   16b58:	0020      	movs	r0, r4
   16b5a:	3010      	adds	r0, #16
   16b5c:	4d06      	ldr	r5, [pc, #24]	; (16b78 <xQueueGenericReset+0x78>)
   16b5e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   16b60:	0020      	movs	r0, r4
   16b62:	3024      	adds	r0, #36	; 0x24
   16b64:	47a8      	blx	r5
   16b66:	e7ee      	b.n	16b46 <xQueueGenericReset+0x46>
   16b68:	00016701 	.word	0x00016701
   16b6c:	000184c9 	.word	0x000184c9
   16b70:	00016719 	.word	0x00016719
   16b74:	000166f1 	.word	0x000166f1
   16b78:	0001656d 	.word	0x0001656d

00016b7c <xQueueGenericCreate>:
	{
   16b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b7e:	0006      	movs	r6, r0
   16b80:	000d      	movs	r5, r1
   16b82:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   16b84:	2800      	cmp	r0, #0
   16b86:	d101      	bne.n	16b8c <xQueueGenericCreate+0x10>
   16b88:	b672      	cpsid	i
   16b8a:	e7fe      	b.n	16b8a <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16b8c:	0008      	movs	r0, r1
   16b8e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   16b90:	3054      	adds	r0, #84	; 0x54
   16b92:	4b38      	ldr	r3, [pc, #224]	; (16c74 <xQueueGenericCreate+0xf8>)
   16b94:	4798      	blx	r3
   16b96:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16b98:	d05b      	beq.n	16c52 <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
   16b9a:	2d00      	cmp	r5, #0
   16b9c:	d13b      	bne.n	16c16 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   16b9e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   16ba0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   16ba2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   16ba4:	2101      	movs	r1, #1
   16ba6:	0020      	movs	r0, r4
   16ba8:	4b33      	ldr	r3, [pc, #204]	; (16c78 <xQueueGenericCreate+0xfc>)
   16baa:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   16bac:	2350      	movs	r3, #80	; 0x50
   16bae:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
   16bb0:	2300      	movs	r3, #0
   16bb2:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
   16bb4:	0020      	movs	r0, r4
   16bb6:	4e31      	ldr	r6, [pc, #196]	; (16c7c <xQueueGenericCreate+0x100>)
   16bb8:	47b0      	blx	r6
   16bba:	4d31      	ldr	r5, [pc, #196]	; (16c80 <xQueueGenericCreate+0x104>)
   16bbc:	5c28      	ldrb	r0, [r5, r0]
   16bbe:	4b31      	ldr	r3, [pc, #196]	; (16c84 <xQueueGenericCreate+0x108>)
   16bc0:	4798      	blx	r3
   16bc2:	b281      	uxth	r1, r0
   16bc4:	0020      	movs	r0, r4
   16bc6:	4b30      	ldr	r3, [pc, #192]	; (16c88 <xQueueGenericCreate+0x10c>)
   16bc8:	4798      	blx	r3
   16bca:	4b30      	ldr	r3, [pc, #192]	; (16c8c <xQueueGenericCreate+0x110>)
   16bcc:	8819      	ldrh	r1, [r3, #0]
   16bce:	0020      	movs	r0, r4
   16bd0:	4b2f      	ldr	r3, [pc, #188]	; (16c90 <xQueueGenericCreate+0x114>)
   16bd2:	4798      	blx	r3
   16bd4:	0020      	movs	r0, r4
   16bd6:	47b0      	blx	r6
   16bd8:	5c2d      	ldrb	r5, [r5, r0]
   16bda:	0020      	movs	r0, r4
   16bdc:	4b2d      	ldr	r3, [pc, #180]	; (16c94 <xQueueGenericCreate+0x118>)
   16bde:	4798      	blx	r3
   16be0:	b2c1      	uxtb	r1, r0
   16be2:	0028      	movs	r0, r5
   16be4:	4b2c      	ldr	r3, [pc, #176]	; (16c98 <xQueueGenericCreate+0x11c>)
   16be6:	4798      	blx	r3
   16be8:	4b2c      	ldr	r3, [pc, #176]	; (16c9c <xQueueGenericCreate+0x120>)
   16bea:	4798      	blx	r3
   16bec:	4b2c      	ldr	r3, [pc, #176]	; (16ca0 <xQueueGenericCreate+0x124>)
   16bee:	4798      	blx	r3
   16bf0:	4b2c      	ldr	r3, [pc, #176]	; (16ca4 <xQueueGenericCreate+0x128>)
   16bf2:	881b      	ldrh	r3, [r3, #0]
   16bf4:	4203      	tst	r3, r0
   16bf6:	d112      	bne.n	16c1e <xQueueGenericCreate+0xa2>
   16bf8:	0020      	movs	r0, r4
   16bfa:	4b20      	ldr	r3, [pc, #128]	; (16c7c <xQueueGenericCreate+0x100>)
   16bfc:	4798      	blx	r3
   16bfe:	4b20      	ldr	r3, [pc, #128]	; (16c80 <xQueueGenericCreate+0x104>)
   16c00:	5c1d      	ldrb	r5, [r3, r0]
   16c02:	0020      	movs	r0, r4
   16c04:	4b23      	ldr	r3, [pc, #140]	; (16c94 <xQueueGenericCreate+0x118>)
   16c06:	4798      	blx	r3
   16c08:	b2c1      	uxtb	r1, r0
   16c0a:	2200      	movs	r2, #0
   16c0c:	0028      	movs	r0, r5
   16c0e:	4b26      	ldr	r3, [pc, #152]	; (16ca8 <xQueueGenericCreate+0x12c>)
   16c10:	4798      	blx	r3
	}
   16c12:	0020      	movs	r0, r4
   16c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   16c16:	0003      	movs	r3, r0
   16c18:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   16c1a:	6003      	str	r3, [r0, #0]
   16c1c:	e7c0      	b.n	16ba0 <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
   16c1e:	0020      	movs	r0, r4
   16c20:	4b22      	ldr	r3, [pc, #136]	; (16cac <xQueueGenericCreate+0x130>)
   16c22:	4798      	blx	r3
   16c24:	4b1f      	ldr	r3, [pc, #124]	; (16ca4 <xQueueGenericCreate+0x128>)
   16c26:	881b      	ldrh	r3, [r3, #0]
   16c28:	4203      	tst	r3, r0
   16c2a:	d0e5      	beq.n	16bf8 <xQueueGenericCreate+0x7c>
   16c2c:	0020      	movs	r0, r4
   16c2e:	4f13      	ldr	r7, [pc, #76]	; (16c7c <xQueueGenericCreate+0x100>)
   16c30:	47b8      	blx	r7
   16c32:	4e13      	ldr	r6, [pc, #76]	; (16c80 <xQueueGenericCreate+0x104>)
   16c34:	5c35      	ldrb	r5, [r6, r0]
   16c36:	3518      	adds	r5, #24
   16c38:	b2ed      	uxtb	r5, r5
   16c3a:	0020      	movs	r0, r4
   16c3c:	47b8      	blx	r7
   16c3e:	5c36      	ldrb	r6, [r6, r0]
   16c40:	0020      	movs	r0, r4
   16c42:	4b14      	ldr	r3, [pc, #80]	; (16c94 <xQueueGenericCreate+0x118>)
   16c44:	4798      	blx	r3
   16c46:	b2c2      	uxtb	r2, r0
   16c48:	0031      	movs	r1, r6
   16c4a:	0028      	movs	r0, r5
   16c4c:	4b18      	ldr	r3, [pc, #96]	; (16cb0 <xQueueGenericCreate+0x134>)
   16c4e:	4798      	blx	r3
   16c50:	e7d2      	b.n	16bf8 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
   16c52:	4b12      	ldr	r3, [pc, #72]	; (16c9c <xQueueGenericCreate+0x120>)
   16c54:	4798      	blx	r3
   16c56:	4b12      	ldr	r3, [pc, #72]	; (16ca0 <xQueueGenericCreate+0x124>)
   16c58:	4798      	blx	r3
   16c5a:	4b12      	ldr	r3, [pc, #72]	; (16ca4 <xQueueGenericCreate+0x128>)
   16c5c:	881b      	ldrh	r3, [r3, #0]
   16c5e:	4203      	tst	r3, r0
   16c60:	d0d7      	beq.n	16c12 <xQueueGenericCreate+0x96>
   16c62:	4b07      	ldr	r3, [pc, #28]	; (16c80 <xQueueGenericCreate+0x104>)
   16c64:	5dd8      	ldrb	r0, [r3, r7]
   16c66:	3040      	adds	r0, #64	; 0x40
   16c68:	b2c0      	uxtb	r0, r0
   16c6a:	2100      	movs	r1, #0
   16c6c:	4b11      	ldr	r3, [pc, #68]	; (16cb4 <xQueueGenericCreate+0x138>)
   16c6e:	4798      	blx	r3
   16c70:	e7cf      	b.n	16c12 <xQueueGenericCreate+0x96>
   16c72:	46c0      	nop			; (mov r8, r8)
   16c74:	000167c5 	.word	0x000167c5
   16c78:	00016b01 	.word	0x00016b01
   16c7c:	00015335 	.word	0x00015335
   16c80:	200000b8 	.word	0x200000b8
   16c84:	00015cf5 	.word	0x00015cf5
   16c88:	000153c5 	.word	0x000153c5
   16c8c:	200000be 	.word	0x200000be
   16c90:	000153e5 	.word	0x000153e5
   16c94:	000153a5 	.word	0x000153a5
   16c98:	00015b85 	.word	0x00015b85
   16c9c:	00015505 	.word	0x00015505
   16ca0:	00015351 	.word	0x00015351
   16ca4:	200000c0 	.word	0x200000c0
   16ca8:	00015c5d 	.word	0x00015c5d
   16cac:	000153b5 	.word	0x000153b5
   16cb0:	00016189 	.word	0x00016189
   16cb4:	00016325 	.word	0x00016325

00016cb8 <xQueueGenericSend>:
{
   16cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cba:	46ce      	mov	lr, r9
   16cbc:	4647      	mov	r7, r8
   16cbe:	b580      	push	{r7, lr}
   16cc0:	b085      	sub	sp, #20
   16cc2:	0004      	movs	r4, r0
   16cc4:	9100      	str	r1, [sp, #0]
   16cc6:	9201      	str	r2, [sp, #4]
   16cc8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
   16cca:	2800      	cmp	r0, #0
   16ccc:	d00d      	beq.n	16cea <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16cce:	9b00      	ldr	r3, [sp, #0]
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d00c      	beq.n	16cee <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16cd4:	2d02      	cmp	r5, #2
   16cd6:	d00f      	beq.n	16cf8 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   16cd8:	4bab      	ldr	r3, [pc, #684]	; (16f88 <xQueueGenericSend+0x2d0>)
   16cda:	4798      	blx	r3
   16cdc:	2800      	cmp	r0, #0
   16cde:	d110      	bne.n	16d02 <xQueueGenericSend+0x4a>
   16ce0:	9b01      	ldr	r3, [sp, #4]
   16ce2:	2b00      	cmp	r3, #0
   16ce4:	d010      	beq.n	16d08 <xQueueGenericSend+0x50>
   16ce6:	b672      	cpsid	i
   16ce8:	e7fe      	b.n	16ce8 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
   16cea:	b672      	cpsid	i
   16cec:	e7fe      	b.n	16cec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16cee:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d0ef      	beq.n	16cd4 <xQueueGenericSend+0x1c>
   16cf4:	b672      	cpsid	i
   16cf6:	e7fe      	b.n	16cf6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16cfa:	2b01      	cmp	r3, #1
   16cfc:	d0ec      	beq.n	16cd8 <xQueueGenericSend+0x20>
   16cfe:	b672      	cpsid	i
   16d00:	e7fe      	b.n	16d00 <xQueueGenericSend+0x48>
   16d02:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   16d04:	4ea1      	ldr	r6, [pc, #644]	; (16f8c <xQueueGenericSend+0x2d4>)
   16d06:	e0bc      	b.n	16e82 <xQueueGenericSend+0x1ca>
   16d08:	2700      	movs	r7, #0
   16d0a:	e7fb      	b.n	16d04 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
   16d0c:	4ba0      	ldr	r3, [pc, #640]	; (16f90 <xQueueGenericSend+0x2d8>)
   16d0e:	4798      	blx	r3
   16d10:	4ba0      	ldr	r3, [pc, #640]	; (16f94 <xQueueGenericSend+0x2dc>)
   16d12:	4798      	blx	r3
   16d14:	4ba0      	ldr	r3, [pc, #640]	; (16f98 <xQueueGenericSend+0x2e0>)
   16d16:	881b      	ldrh	r3, [r3, #0]
   16d18:	4203      	tst	r3, r0
   16d1a:	d01d      	beq.n	16d58 <xQueueGenericSend+0xa0>
   16d1c:	0020      	movs	r0, r4
   16d1e:	4b9f      	ldr	r3, [pc, #636]	; (16f9c <xQueueGenericSend+0x2e4>)
   16d20:	4798      	blx	r3
   16d22:	4b9d      	ldr	r3, [pc, #628]	; (16f98 <xQueueGenericSend+0x2e0>)
   16d24:	881b      	ldrh	r3, [r3, #0]
   16d26:	4203      	tst	r3, r0
   16d28:	d016      	beq.n	16d58 <xQueueGenericSend+0xa0>
   16d2a:	2725      	movs	r7, #37	; 0x25
   16d2c:	2d00      	cmp	r5, #0
   16d2e:	d106      	bne.n	16d3e <xQueueGenericSend+0x86>
   16d30:	0020      	movs	r0, r4
   16d32:	4b9b      	ldr	r3, [pc, #620]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16d34:	4798      	blx	r3
   16d36:	4b9b      	ldr	r3, [pc, #620]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16d38:	5c1f      	ldrb	r7, [r3, r0]
   16d3a:	3720      	adds	r7, #32
   16d3c:	b2ff      	uxtb	r7, r7
   16d3e:	0020      	movs	r0, r4
   16d40:	4b97      	ldr	r3, [pc, #604]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16d42:	4798      	blx	r3
   16d44:	4b97      	ldr	r3, [pc, #604]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16d46:	5c1e      	ldrb	r6, [r3, r0]
   16d48:	0020      	movs	r0, r4
   16d4a:	4b97      	ldr	r3, [pc, #604]	; (16fa8 <xQueueGenericSend+0x2f0>)
   16d4c:	4798      	blx	r3
   16d4e:	b2c2      	uxtb	r2, r0
   16d50:	0031      	movs	r1, r6
   16d52:	0038      	movs	r0, r7
   16d54:	4b95      	ldr	r3, [pc, #596]	; (16fac <xQueueGenericSend+0x2f4>)
   16d56:	4798      	blx	r3
   16d58:	0020      	movs	r0, r4
   16d5a:	4e91      	ldr	r6, [pc, #580]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16d5c:	47b0      	blx	r6
   16d5e:	4f91      	ldr	r7, [pc, #580]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16d60:	5c3b      	ldrb	r3, [r7, r0]
   16d62:	4698      	mov	r8, r3
   16d64:	0020      	movs	r0, r4
   16d66:	4b90      	ldr	r3, [pc, #576]	; (16fa8 <xQueueGenericSend+0x2f0>)
   16d68:	4798      	blx	r3
   16d6a:	b2c3      	uxtb	r3, r0
   16d6c:	4699      	mov	r9, r3
   16d6e:	0020      	movs	r0, r4
   16d70:	47b0      	blx	r6
   16d72:	5c3b      	ldrb	r3, [r7, r0]
   16d74:	2b02      	cmp	r3, #2
   16d76:	d01f      	beq.n	16db8 <xQueueGenericSend+0x100>
   16d78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16d7a:	3201      	adds	r2, #1
   16d7c:	b2d2      	uxtb	r2, r2
   16d7e:	4649      	mov	r1, r9
   16d80:	4640      	mov	r0, r8
   16d82:	4b8b      	ldr	r3, [pc, #556]	; (16fb0 <xQueueGenericSend+0x2f8>)
   16d84:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   16d86:	002a      	movs	r2, r5
   16d88:	9900      	ldr	r1, [sp, #0]
   16d8a:	0020      	movs	r0, r4
   16d8c:	4b89      	ldr	r3, [pc, #548]	; (16fb4 <xQueueGenericSend+0x2fc>)
   16d8e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
   16d90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16d92:	2b00      	cmp	r3, #0
   16d94:	d012      	beq.n	16dbc <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   16d96:	0029      	movs	r1, r5
   16d98:	0020      	movs	r0, r4
   16d9a:	4b87      	ldr	r3, [pc, #540]	; (16fb8 <xQueueGenericSend+0x300>)
   16d9c:	4798      	blx	r3
   16d9e:	2800      	cmp	r0, #0
   16da0:	d001      	beq.n	16da6 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16da2:	4b86      	ldr	r3, [pc, #536]	; (16fbc <xQueueGenericSend+0x304>)
   16da4:	4798      	blx	r3
				taskEXIT_CRITICAL();
   16da6:	4b86      	ldr	r3, [pc, #536]	; (16fc0 <xQueueGenericSend+0x308>)
   16da8:	4798      	blx	r3
				return pdPASS;
   16daa:	2301      	movs	r3, #1
}
   16dac:	0018      	movs	r0, r3
   16dae:	b005      	add	sp, #20
   16db0:	bc0c      	pop	{r2, r3}
   16db2:	4690      	mov	r8, r2
   16db4:	4699      	mov	r9, r3
   16db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
   16db8:	2200      	movs	r2, #0
   16dba:	e7e0      	b.n	16d7e <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d008      	beq.n	16dd4 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16dc2:	0020      	movs	r0, r4
   16dc4:	3024      	adds	r0, #36	; 0x24
   16dc6:	4b7f      	ldr	r3, [pc, #508]	; (16fc4 <xQueueGenericSend+0x30c>)
   16dc8:	4798      	blx	r3
   16dca:	2800      	cmp	r0, #0
   16dcc:	d0eb      	beq.n	16da6 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
   16dce:	4b7b      	ldr	r3, [pc, #492]	; (16fbc <xQueueGenericSend+0x304>)
   16dd0:	4798      	blx	r3
   16dd2:	e7e8      	b.n	16da6 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
   16dd4:	2800      	cmp	r0, #0
   16dd6:	d0e6      	beq.n	16da6 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16dd8:	4b78      	ldr	r3, [pc, #480]	; (16fbc <xQueueGenericSend+0x304>)
   16dda:	4798      	blx	r3
   16ddc:	e7e3      	b.n	16da6 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
   16dde:	4b78      	ldr	r3, [pc, #480]	; (16fc0 <xQueueGenericSend+0x308>)
   16de0:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
   16de2:	4b6b      	ldr	r3, [pc, #428]	; (16f90 <xQueueGenericSend+0x2d8>)
   16de4:	4798      	blx	r3
   16de6:	4b6b      	ldr	r3, [pc, #428]	; (16f94 <xQueueGenericSend+0x2dc>)
   16de8:	4798      	blx	r3
   16dea:	4b6b      	ldr	r3, [pc, #428]	; (16f98 <xQueueGenericSend+0x2e0>)
   16dec:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16dee:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16df0:	4202      	tst	r2, r0
   16df2:	d0db      	beq.n	16dac <xQueueGenericSend+0xf4>
   16df4:	0020      	movs	r0, r4
   16df6:	4b69      	ldr	r3, [pc, #420]	; (16f9c <xQueueGenericSend+0x2e4>)
   16df8:	4798      	blx	r3
   16dfa:	4b67      	ldr	r3, [pc, #412]	; (16f98 <xQueueGenericSend+0x2e0>)
   16dfc:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16dfe:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16e00:	4202      	tst	r2, r0
   16e02:	d0d3      	beq.n	16dac <xQueueGenericSend+0xf4>
   16e04:	264d      	movs	r6, #77	; 0x4d
   16e06:	2d00      	cmp	r5, #0
   16e08:	d106      	bne.n	16e18 <xQueueGenericSend+0x160>
   16e0a:	0020      	movs	r0, r4
   16e0c:	4b64      	ldr	r3, [pc, #400]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16e0e:	4798      	blx	r3
   16e10:	4b64      	ldr	r3, [pc, #400]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16e12:	5c1e      	ldrb	r6, [r3, r0]
   16e14:	3648      	adds	r6, #72	; 0x48
   16e16:	b2f6      	uxtb	r6, r6
   16e18:	0020      	movs	r0, r4
   16e1a:	4b61      	ldr	r3, [pc, #388]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16e1c:	4798      	blx	r3
   16e1e:	4b61      	ldr	r3, [pc, #388]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16e20:	5c1d      	ldrb	r5, [r3, r0]
   16e22:	0020      	movs	r0, r4
   16e24:	4b60      	ldr	r3, [pc, #384]	; (16fa8 <xQueueGenericSend+0x2f0>)
   16e26:	4798      	blx	r3
   16e28:	b2c2      	uxtb	r2, r0
   16e2a:	0029      	movs	r1, r5
   16e2c:	0030      	movs	r0, r6
   16e2e:	4b5f      	ldr	r3, [pc, #380]	; (16fac <xQueueGenericSend+0x2f4>)
   16e30:	4798      	blx	r3
					return errQUEUE_FULL;
   16e32:	2300      	movs	r3, #0
   16e34:	e7ba      	b.n	16dac <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
   16e36:	4b62      	ldr	r3, [pc, #392]	; (16fc0 <xQueueGenericSend+0x308>)
   16e38:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   16e3a:	a901      	add	r1, sp, #4
   16e3c:	a802      	add	r0, sp, #8
   16e3e:	4b62      	ldr	r3, [pc, #392]	; (16fc8 <xQueueGenericSend+0x310>)
   16e40:	4798      	blx	r3
   16e42:	2800      	cmp	r0, #0
   16e44:	d16e      	bne.n	16f24 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
   16e46:	4b51      	ldr	r3, [pc, #324]	; (16f8c <xQueueGenericSend+0x2d4>)
   16e48:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   16e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16e4c:	4699      	mov	r9, r3
   16e4e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   16e50:	4b5b      	ldr	r3, [pc, #364]	; (16fc0 <xQueueGenericSend+0x308>)
   16e52:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   16e54:	45b9      	cmp	r9, r7
   16e56:	d15f      	bne.n	16f18 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16e58:	4b4d      	ldr	r3, [pc, #308]	; (16f90 <xQueueGenericSend+0x2d8>)
   16e5a:	4798      	blx	r3
   16e5c:	4b4d      	ldr	r3, [pc, #308]	; (16f94 <xQueueGenericSend+0x2dc>)
   16e5e:	4798      	blx	r3
   16e60:	4b4d      	ldr	r3, [pc, #308]	; (16f98 <xQueueGenericSend+0x2e0>)
   16e62:	881b      	ldrh	r3, [r3, #0]
   16e64:	4203      	tst	r3, r0
   16e66:	d134      	bne.n	16ed2 <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   16e68:	0020      	movs	r0, r4
   16e6a:	3010      	adds	r0, #16
   16e6c:	9901      	ldr	r1, [sp, #4]
   16e6e:	4b57      	ldr	r3, [pc, #348]	; (16fcc <xQueueGenericSend+0x314>)
   16e70:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   16e72:	0020      	movs	r0, r4
   16e74:	4b56      	ldr	r3, [pc, #344]	; (16fd0 <xQueueGenericSend+0x318>)
   16e76:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   16e78:	4b56      	ldr	r3, [pc, #344]	; (16fd4 <xQueueGenericSend+0x31c>)
   16e7a:	4798      	blx	r3
   16e7c:	2800      	cmp	r0, #0
   16e7e:	d048      	beq.n	16f12 <xQueueGenericSend+0x25a>
   16e80:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   16e82:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16e86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16e88:	4293      	cmp	r3, r2
   16e8a:	d200      	bcs.n	16e8e <xQueueGenericSend+0x1d6>
   16e8c:	e73e      	b.n	16d0c <xQueueGenericSend+0x54>
   16e8e:	2d02      	cmp	r5, #2
   16e90:	d100      	bne.n	16e94 <xQueueGenericSend+0x1dc>
   16e92:	e73b      	b.n	16d0c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
   16e94:	9b01      	ldr	r3, [sp, #4]
   16e96:	2b00      	cmp	r3, #0
   16e98:	d0a1      	beq.n	16dde <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
   16e9a:	2f00      	cmp	r7, #0
   16e9c:	d102      	bne.n	16ea4 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
   16e9e:	a802      	add	r0, sp, #8
   16ea0:	4b4d      	ldr	r3, [pc, #308]	; (16fd8 <xQueueGenericSend+0x320>)
   16ea2:	4798      	blx	r3
		taskEXIT_CRITICAL();
   16ea4:	4b46      	ldr	r3, [pc, #280]	; (16fc0 <xQueueGenericSend+0x308>)
   16ea6:	4798      	blx	r3
		vTaskSuspendAll();
   16ea8:	4b4c      	ldr	r3, [pc, #304]	; (16fdc <xQueueGenericSend+0x324>)
   16eaa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   16eac:	4b37      	ldr	r3, [pc, #220]	; (16f8c <xQueueGenericSend+0x2d4>)
   16eae:	4798      	blx	r3
   16eb0:	2344      	movs	r3, #68	; 0x44
   16eb2:	5ce3      	ldrb	r3, [r4, r3]
   16eb4:	b25b      	sxtb	r3, r3
   16eb6:	3301      	adds	r3, #1
   16eb8:	d102      	bne.n	16ec0 <xQueueGenericSend+0x208>
   16eba:	2200      	movs	r2, #0
   16ebc:	2344      	movs	r3, #68	; 0x44
   16ebe:	54e2      	strb	r2, [r4, r3]
   16ec0:	2345      	movs	r3, #69	; 0x45
   16ec2:	5ce3      	ldrb	r3, [r4, r3]
   16ec4:	b25b      	sxtb	r3, r3
   16ec6:	3301      	adds	r3, #1
   16ec8:	d1b5      	bne.n	16e36 <xQueueGenericSend+0x17e>
   16eca:	2200      	movs	r2, #0
   16ecc:	2345      	movs	r3, #69	; 0x45
   16ece:	54e2      	strb	r2, [r4, r3]
   16ed0:	e7b1      	b.n	16e36 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16ed2:	0020      	movs	r0, r4
   16ed4:	4b31      	ldr	r3, [pc, #196]	; (16f9c <xQueueGenericSend+0x2e4>)
   16ed6:	4798      	blx	r3
   16ed8:	4b2f      	ldr	r3, [pc, #188]	; (16f98 <xQueueGenericSend+0x2e0>)
   16eda:	881b      	ldrh	r3, [r3, #0]
   16edc:	4203      	tst	r3, r0
   16ede:	d0c3      	beq.n	16e68 <xQueueGenericSend+0x1b0>
   16ee0:	2775      	movs	r7, #117	; 0x75
   16ee2:	2d00      	cmp	r5, #0
   16ee4:	d106      	bne.n	16ef4 <xQueueGenericSend+0x23c>
   16ee6:	0020      	movs	r0, r4
   16ee8:	4b2d      	ldr	r3, [pc, #180]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16eea:	4798      	blx	r3
   16eec:	4b2d      	ldr	r3, [pc, #180]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16eee:	5c1f      	ldrb	r7, [r3, r0]
   16ef0:	3770      	adds	r7, #112	; 0x70
   16ef2:	b2ff      	uxtb	r7, r7
   16ef4:	0020      	movs	r0, r4
   16ef6:	4b2a      	ldr	r3, [pc, #168]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16ef8:	4798      	blx	r3
   16efa:	4b2a      	ldr	r3, [pc, #168]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16efc:	5c1b      	ldrb	r3, [r3, r0]
   16efe:	4699      	mov	r9, r3
   16f00:	0020      	movs	r0, r4
   16f02:	4b29      	ldr	r3, [pc, #164]	; (16fa8 <xQueueGenericSend+0x2f0>)
   16f04:	4798      	blx	r3
   16f06:	b2c2      	uxtb	r2, r0
   16f08:	4649      	mov	r1, r9
   16f0a:	0038      	movs	r0, r7
   16f0c:	4b27      	ldr	r3, [pc, #156]	; (16fac <xQueueGenericSend+0x2f4>)
   16f0e:	4798      	blx	r3
   16f10:	e7aa      	b.n	16e68 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   16f12:	4b2a      	ldr	r3, [pc, #168]	; (16fbc <xQueueGenericSend+0x304>)
   16f14:	4798      	blx	r3
   16f16:	e7b3      	b.n	16e80 <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
   16f18:	0020      	movs	r0, r4
   16f1a:	4b2d      	ldr	r3, [pc, #180]	; (16fd0 <xQueueGenericSend+0x318>)
   16f1c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   16f1e:	4b2d      	ldr	r3, [pc, #180]	; (16fd4 <xQueueGenericSend+0x31c>)
   16f20:	4798      	blx	r3
   16f22:	e7ad      	b.n	16e80 <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
   16f24:	0020      	movs	r0, r4
   16f26:	4b2a      	ldr	r3, [pc, #168]	; (16fd0 <xQueueGenericSend+0x318>)
   16f28:	4798      	blx	r3
			( void ) xTaskResumeAll();
   16f2a:	4b2a      	ldr	r3, [pc, #168]	; (16fd4 <xQueueGenericSend+0x31c>)
   16f2c:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
   16f2e:	4b18      	ldr	r3, [pc, #96]	; (16f90 <xQueueGenericSend+0x2d8>)
   16f30:	4798      	blx	r3
   16f32:	4b18      	ldr	r3, [pc, #96]	; (16f94 <xQueueGenericSend+0x2dc>)
   16f34:	4798      	blx	r3
   16f36:	4b18      	ldr	r3, [pc, #96]	; (16f98 <xQueueGenericSend+0x2e0>)
   16f38:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16f3a:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16f3c:	4202      	tst	r2, r0
   16f3e:	d100      	bne.n	16f42 <xQueueGenericSend+0x28a>
   16f40:	e734      	b.n	16dac <xQueueGenericSend+0xf4>
   16f42:	0020      	movs	r0, r4
   16f44:	4b15      	ldr	r3, [pc, #84]	; (16f9c <xQueueGenericSend+0x2e4>)
   16f46:	4798      	blx	r3
   16f48:	4b13      	ldr	r3, [pc, #76]	; (16f98 <xQueueGenericSend+0x2e0>)
   16f4a:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16f4c:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16f4e:	4202      	tst	r2, r0
   16f50:	d100      	bne.n	16f54 <xQueueGenericSend+0x29c>
   16f52:	e72b      	b.n	16dac <xQueueGenericSend+0xf4>
   16f54:	264d      	movs	r6, #77	; 0x4d
   16f56:	2d00      	cmp	r5, #0
   16f58:	d106      	bne.n	16f68 <xQueueGenericSend+0x2b0>
   16f5a:	0020      	movs	r0, r4
   16f5c:	4b10      	ldr	r3, [pc, #64]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16f5e:	4798      	blx	r3
   16f60:	4b10      	ldr	r3, [pc, #64]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16f62:	5c1e      	ldrb	r6, [r3, r0]
   16f64:	3648      	adds	r6, #72	; 0x48
   16f66:	b2f6      	uxtb	r6, r6
   16f68:	0020      	movs	r0, r4
   16f6a:	4b0d      	ldr	r3, [pc, #52]	; (16fa0 <xQueueGenericSend+0x2e8>)
   16f6c:	4798      	blx	r3
   16f6e:	4b0d      	ldr	r3, [pc, #52]	; (16fa4 <xQueueGenericSend+0x2ec>)
   16f70:	5c1d      	ldrb	r5, [r3, r0]
   16f72:	0020      	movs	r0, r4
   16f74:	4b0c      	ldr	r3, [pc, #48]	; (16fa8 <xQueueGenericSend+0x2f0>)
   16f76:	4798      	blx	r3
   16f78:	b2c2      	uxtb	r2, r0
   16f7a:	0029      	movs	r1, r5
   16f7c:	0030      	movs	r0, r6
   16f7e:	4b0b      	ldr	r3, [pc, #44]	; (16fac <xQueueGenericSend+0x2f4>)
   16f80:	4798      	blx	r3
			return errQUEUE_FULL;
   16f82:	2300      	movs	r3, #0
   16f84:	e712      	b.n	16dac <xQueueGenericSend+0xf4>
   16f86:	46c0      	nop			; (mov r8, r8)
   16f88:	0001868d 	.word	0x0001868d
   16f8c:	00016701 	.word	0x00016701
   16f90:	00015505 	.word	0x00015505
   16f94:	00015351 	.word	0x00015351
   16f98:	200000c0 	.word	0x200000c0
   16f9c:	000153b5 	.word	0x000153b5
   16fa0:	00015335 	.word	0x00015335
   16fa4:	200000b8 	.word	0x200000b8
   16fa8:	000153a5 	.word	0x000153a5
   16fac:	00016189 	.word	0x00016189
   16fb0:	00015c5d 	.word	0x00015c5d
   16fb4:	00016891 	.word	0x00016891
   16fb8:	0001690d 	.word	0x0001690d
   16fbc:	000166f1 	.word	0x000166f1
   16fc0:	00016719 	.word	0x00016719
   16fc4:	000184c9 	.word	0x000184c9
   16fc8:	000185c5 	.word	0x000185c5
   16fcc:	00018401 	.word	0x00018401
   16fd0:	00016a51 	.word	0x00016a51
   16fd4:	00018019 	.word	0x00018019
   16fd8:	000185ad 	.word	0x000185ad
   16fdc:	00017e71 	.word	0x00017e71

00016fe0 <xQueueCreateMutex>:
	{
   16fe0:	b570      	push	{r4, r5, r6, lr}
   16fe2:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   16fe4:	2100      	movs	r1, #0
   16fe6:	2001      	movs	r0, #1
   16fe8:	4b06      	ldr	r3, [pc, #24]	; (17004 <xQueueCreateMutex+0x24>)
   16fea:	4798      	blx	r3
   16fec:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16fee:	d007      	beq.n	17000 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   16ff0:	2300      	movs	r3, #0
   16ff2:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   16ff4:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   16ff6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   16ff8:	2200      	movs	r2, #0
   16ffa:	2100      	movs	r1, #0
   16ffc:	4d02      	ldr	r5, [pc, #8]	; (17008 <xQueueCreateMutex+0x28>)
   16ffe:	47a8      	blx	r5
	}
   17000:	0020      	movs	r0, r4
   17002:	bd70      	pop	{r4, r5, r6, pc}
   17004:	00016b7d 	.word	0x00016b7d
   17008:	00016cb9 	.word	0x00016cb9

0001700c <xQueueGenericSendFromISR>:
{
   1700c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1700e:	46de      	mov	lr, fp
   17010:	4647      	mov	r7, r8
   17012:	b580      	push	{r7, lr}
   17014:	b083      	sub	sp, #12
   17016:	0004      	movs	r4, r0
   17018:	9101      	str	r1, [sp, #4]
   1701a:	0016      	movs	r6, r2
   1701c:	001f      	movs	r7, r3
	configASSERT( pxQueue );
   1701e:	2800      	cmp	r0, #0
   17020:	d02d      	beq.n	1707e <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17022:	9b01      	ldr	r3, [sp, #4]
   17024:	2b00      	cmp	r3, #0
   17026:	d02c      	beq.n	17082 <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   17028:	2f02      	cmp	r7, #2
   1702a:	d02f      	beq.n	1708c <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1702c:	4b59      	ldr	r3, [pc, #356]	; (17194 <xQueueGenericSendFromISR+0x188>)
   1702e:	4798      	blx	r3
   17030:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   17032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17034:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   17036:	429a      	cmp	r2, r3
   17038:	d85a      	bhi.n	170f0 <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1703a:	0020      	movs	r0, r4
   1703c:	4b56      	ldr	r3, [pc, #344]	; (17198 <xQueueGenericSendFromISR+0x18c>)
   1703e:	4798      	blx	r3
   17040:	4b56      	ldr	r3, [pc, #344]	; (1719c <xQueueGenericSendFromISR+0x190>)
   17042:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   17044:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   17046:	4203      	tst	r3, r0
   17048:	d100      	bne.n	1704c <xQueueGenericSendFromISR+0x40>
   1704a:	e09a      	b.n	17182 <xQueueGenericSendFromISR+0x176>
   1704c:	355d      	adds	r5, #93	; 0x5d
   1704e:	2f00      	cmp	r7, #0
   17050:	d106      	bne.n	17060 <xQueueGenericSendFromISR+0x54>
   17052:	0020      	movs	r0, r4
   17054:	4b52      	ldr	r3, [pc, #328]	; (171a0 <xQueueGenericSendFromISR+0x194>)
   17056:	4798      	blx	r3
   17058:	4b52      	ldr	r3, [pc, #328]	; (171a4 <xQueueGenericSendFromISR+0x198>)
   1705a:	5c1d      	ldrb	r5, [r3, r0]
   1705c:	3558      	adds	r5, #88	; 0x58
   1705e:	b2ed      	uxtb	r5, r5
   17060:	0020      	movs	r0, r4
   17062:	4b4f      	ldr	r3, [pc, #316]	; (171a0 <xQueueGenericSendFromISR+0x194>)
   17064:	4798      	blx	r3
   17066:	4b4f      	ldr	r3, [pc, #316]	; (171a4 <xQueueGenericSendFromISR+0x198>)
   17068:	5c1f      	ldrb	r7, [r3, r0]
   1706a:	0020      	movs	r0, r4
   1706c:	4b4e      	ldr	r3, [pc, #312]	; (171a8 <xQueueGenericSendFromISR+0x19c>)
   1706e:	4798      	blx	r3
   17070:	b2c2      	uxtb	r2, r0
   17072:	0039      	movs	r1, r7
   17074:	0028      	movs	r0, r5
   17076:	4b4d      	ldr	r3, [pc, #308]	; (171ac <xQueueGenericSendFromISR+0x1a0>)
   17078:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1707a:	2500      	movs	r5, #0
   1707c:	e081      	b.n	17182 <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
   1707e:	b672      	cpsid	i
   17080:	e7fe      	b.n	17080 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17082:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17084:	2b00      	cmp	r3, #0
   17086:	d0cf      	beq.n	17028 <xQueueGenericSendFromISR+0x1c>
   17088:	b672      	cpsid	i
   1708a:	e7fe      	b.n	1708a <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1708c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1708e:	2b01      	cmp	r3, #1
   17090:	d027      	beq.n	170e2 <xQueueGenericSendFromISR+0xd6>
   17092:	b672      	cpsid	i
   17094:	e7fe      	b.n	17094 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17096:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   17098:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1709a:	2b00      	cmp	r3, #0
   1709c:	d071      	beq.n	17182 <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1709e:	0020      	movs	r0, r4
   170a0:	3024      	adds	r0, #36	; 0x24
   170a2:	4b43      	ldr	r3, [pc, #268]	; (171b0 <xQueueGenericSendFromISR+0x1a4>)
   170a4:	4798      	blx	r3
   170a6:	2800      	cmp	r0, #0
   170a8:	d06b      	beq.n	17182 <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
   170aa:	2e00      	cmp	r6, #0
   170ac:	d00a      	beq.n	170c4 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
   170ae:	2301      	movs	r3, #1
   170b0:	6033      	str	r3, [r6, #0]
   170b2:	e066      	b.n	17182 <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   170b4:	3501      	adds	r5, #1
   170b6:	b26d      	sxtb	r5, r5
   170b8:	2345      	movs	r3, #69	; 0x45
   170ba:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   170bc:	2501      	movs	r5, #1
   170be:	e060      	b.n	17182 <xQueueGenericSendFromISR+0x176>
   170c0:	2501      	movs	r5, #1
   170c2:	e05e      	b.n	17182 <xQueueGenericSendFromISR+0x176>
   170c4:	2501      	movs	r5, #1
   170c6:	e05c      	b.n	17182 <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
   170c8:	2345      	movs	r3, #69	; 0x45
   170ca:	5ce5      	ldrb	r5, [r4, r3]
   170cc:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   170ce:	0020      	movs	r0, r4
   170d0:	4b31      	ldr	r3, [pc, #196]	; (17198 <xQueueGenericSendFromISR+0x18c>)
   170d2:	4798      	blx	r3
   170d4:	4b31      	ldr	r3, [pc, #196]	; (1719c <xQueueGenericSendFromISR+0x190>)
   170d6:	881b      	ldrh	r3, [r3, #0]
   170d8:	4203      	tst	r3, r0
   170da:	d02d      	beq.n	17138 <xQueueGenericSendFromISR+0x12c>
   170dc:	2335      	movs	r3, #53	; 0x35
   170de:	4698      	mov	r8, r3
   170e0:	e01c      	b.n	1711c <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   170e2:	4b2c      	ldr	r3, [pc, #176]	; (17194 <xQueueGenericSendFromISR+0x188>)
   170e4:	4798      	blx	r3
   170e6:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   170e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   170ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   170ec:	429a      	cmp	r2, r3
   170ee:	d9eb      	bls.n	170c8 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
   170f0:	2345      	movs	r3, #69	; 0x45
   170f2:	5ce5      	ldrb	r5, [r4, r3]
   170f4:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   170f6:	0020      	movs	r0, r4
   170f8:	4b27      	ldr	r3, [pc, #156]	; (17198 <xQueueGenericSendFromISR+0x18c>)
   170fa:	4798      	blx	r3
   170fc:	4b27      	ldr	r3, [pc, #156]	; (1719c <xQueueGenericSendFromISR+0x190>)
   170fe:	881b      	ldrh	r3, [r3, #0]
   17100:	4203      	tst	r3, r0
   17102:	d019      	beq.n	17138 <xQueueGenericSendFromISR+0x12c>
   17104:	2335      	movs	r3, #53	; 0x35
   17106:	4698      	mov	r8, r3
   17108:	2f00      	cmp	r7, #0
   1710a:	d107      	bne.n	1711c <xQueueGenericSendFromISR+0x110>
   1710c:	0020      	movs	r0, r4
   1710e:	4b24      	ldr	r3, [pc, #144]	; (171a0 <xQueueGenericSendFromISR+0x194>)
   17110:	4798      	blx	r3
   17112:	4b24      	ldr	r3, [pc, #144]	; (171a4 <xQueueGenericSendFromISR+0x198>)
   17114:	5c1b      	ldrb	r3, [r3, r0]
   17116:	3330      	adds	r3, #48	; 0x30
   17118:	b2db      	uxtb	r3, r3
   1711a:	4698      	mov	r8, r3
   1711c:	0020      	movs	r0, r4
   1711e:	4b20      	ldr	r3, [pc, #128]	; (171a0 <xQueueGenericSendFromISR+0x194>)
   17120:	4798      	blx	r3
   17122:	4b20      	ldr	r3, [pc, #128]	; (171a4 <xQueueGenericSendFromISR+0x198>)
   17124:	5c1b      	ldrb	r3, [r3, r0]
   17126:	469b      	mov	fp, r3
   17128:	0020      	movs	r0, r4
   1712a:	4b1f      	ldr	r3, [pc, #124]	; (171a8 <xQueueGenericSendFromISR+0x19c>)
   1712c:	4798      	blx	r3
   1712e:	b2c2      	uxtb	r2, r0
   17130:	4659      	mov	r1, fp
   17132:	4640      	mov	r0, r8
   17134:	4b1d      	ldr	r3, [pc, #116]	; (171ac <xQueueGenericSendFromISR+0x1a0>)
   17136:	4798      	blx	r3
   17138:	0020      	movs	r0, r4
   1713a:	4b19      	ldr	r3, [pc, #100]	; (171a0 <xQueueGenericSendFromISR+0x194>)
   1713c:	4798      	blx	r3
   1713e:	4b19      	ldr	r3, [pc, #100]	; (171a4 <xQueueGenericSendFromISR+0x198>)
   17140:	5c1b      	ldrb	r3, [r3, r0]
   17142:	4698      	mov	r8, r3
   17144:	0020      	movs	r0, r4
   17146:	4b18      	ldr	r3, [pc, #96]	; (171a8 <xQueueGenericSendFromISR+0x19c>)
   17148:	4798      	blx	r3
   1714a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1714c:	3201      	adds	r2, #1
   1714e:	b2d2      	uxtb	r2, r2
   17150:	b2c1      	uxtb	r1, r0
   17152:	4640      	mov	r0, r8
   17154:	4b17      	ldr	r3, [pc, #92]	; (171b4 <xQueueGenericSendFromISR+0x1a8>)
   17156:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   17158:	003a      	movs	r2, r7
   1715a:	9901      	ldr	r1, [sp, #4]
   1715c:	0020      	movs	r0, r4
   1715e:	4b16      	ldr	r3, [pc, #88]	; (171b8 <xQueueGenericSendFromISR+0x1ac>)
   17160:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   17162:	1c6b      	adds	r3, r5, #1
   17164:	d1a6      	bne.n	170b4 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
   17166:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17168:	2b00      	cmp	r3, #0
   1716a:	d094      	beq.n	17096 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1716c:	0039      	movs	r1, r7
   1716e:	0020      	movs	r0, r4
   17170:	4b12      	ldr	r3, [pc, #72]	; (171bc <xQueueGenericSendFromISR+0x1b0>)
   17172:	4798      	blx	r3
			xReturn = pdPASS;
   17174:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   17176:	2800      	cmp	r0, #0
   17178:	d003      	beq.n	17182 <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
   1717a:	2e00      	cmp	r6, #0
   1717c:	d0a0      	beq.n	170c0 <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1717e:	2301      	movs	r3, #1
   17180:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17182:	9800      	ldr	r0, [sp, #0]
   17184:	4b0e      	ldr	r3, [pc, #56]	; (171c0 <xQueueGenericSendFromISR+0x1b4>)
   17186:	4798      	blx	r3
}
   17188:	0028      	movs	r0, r5
   1718a:	b003      	add	sp, #12
   1718c:	bc0c      	pop	{r2, r3}
   1718e:	4690      	mov	r8, r2
   17190:	469b      	mov	fp, r3
   17192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17194:	00016739 	.word	0x00016739
   17198:	000153b5 	.word	0x000153b5
   1719c:	200000c0 	.word	0x200000c0
   171a0:	00015335 	.word	0x00015335
   171a4:	200000b8 	.word	0x200000b8
   171a8:	000153a5 	.word	0x000153a5
   171ac:	00016189 	.word	0x00016189
   171b0:	000184c9 	.word	0x000184c9
   171b4:	00015c5d 	.word	0x00015c5d
   171b8:	00016891 	.word	0x00016891
   171bc:	0001690d 	.word	0x0001690d
   171c0:	00016741 	.word	0x00016741

000171c4 <MyWrapper>:
{
   171c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   171c6:	46d6      	mov	lr, sl
   171c8:	4647      	mov	r7, r8
   171ca:	b580      	push	{r7, lr}
   171cc:	b083      	sub	sp, #12
   171ce:	0004      	movs	r4, r0
   171d0:	000f      	movs	r7, r1
   171d2:	0016      	movs	r6, r2
	configASSERT( pxQueue );
   171d4:	2800      	cmp	r0, #0
   171d6:	d004      	beq.n	171e2 <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
   171d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   171da:	2b00      	cmp	r3, #0
   171dc:	d003      	beq.n	171e6 <MyWrapper+0x22>
   171de:	b672      	cpsid	i
   171e0:	e7fe      	b.n	171e0 <MyWrapper+0x1c>
	configASSERT( pxQueue );
   171e2:	b672      	cpsid	i
   171e4:	e7fe      	b.n	171e4 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   171e6:	6803      	ldr	r3, [r0, #0]
   171e8:	2b00      	cmp	r3, #0
   171ea:	d055      	beq.n	17298 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   171ec:	4b4a      	ldr	r3, [pc, #296]	; (17318 <MyWrapper+0x154>)
   171ee:	4798      	blx	r3
   171f0:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   171f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   171f4:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
   171f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   171f8:	4598      	cmp	r8, r3
   171fa:	d267      	bcs.n	172cc <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
   171fc:	2345      	movs	r3, #69	; 0x45
   171fe:	5ce5      	ldrb	r5, [r4, r3]
   17200:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   17202:	0020      	movs	r0, r4
   17204:	4b45      	ldr	r3, [pc, #276]	; (1731c <MyWrapper+0x158>)
   17206:	4798      	blx	r3
   17208:	4b45      	ldr	r3, [pc, #276]	; (17320 <MyWrapper+0x15c>)
   1720a:	881b      	ldrh	r3, [r3, #0]
   1720c:	4203      	tst	r3, r0
   1720e:	d018      	beq.n	17242 <MyWrapper+0x7e>
   17210:	2335      	movs	r3, #53	; 0x35
   17212:	469a      	mov	sl, r3
   17214:	2e00      	cmp	r6, #0
   17216:	d107      	bne.n	17228 <MyWrapper+0x64>
   17218:	0020      	movs	r0, r4
   1721a:	4b42      	ldr	r3, [pc, #264]	; (17324 <MyWrapper+0x160>)
   1721c:	4798      	blx	r3
   1721e:	4b42      	ldr	r3, [pc, #264]	; (17328 <MyWrapper+0x164>)
   17220:	5c1b      	ldrb	r3, [r3, r0]
   17222:	3330      	adds	r3, #48	; 0x30
   17224:	b2db      	uxtb	r3, r3
   17226:	469a      	mov	sl, r3
   17228:	0020      	movs	r0, r4
   1722a:	4b3e      	ldr	r3, [pc, #248]	; (17324 <MyWrapper+0x160>)
   1722c:	4798      	blx	r3
   1722e:	4b3e      	ldr	r3, [pc, #248]	; (17328 <MyWrapper+0x164>)
   17230:	5c1e      	ldrb	r6, [r3, r0]
   17232:	0020      	movs	r0, r4
   17234:	4b3d      	ldr	r3, [pc, #244]	; (1732c <MyWrapper+0x168>)
   17236:	4798      	blx	r3
   17238:	b2c2      	uxtb	r2, r0
   1723a:	0031      	movs	r1, r6
   1723c:	4650      	mov	r0, sl
   1723e:	4b3c      	ldr	r3, [pc, #240]	; (17330 <MyWrapper+0x16c>)
   17240:	4798      	blx	r3
   17242:	0020      	movs	r0, r4
   17244:	4b37      	ldr	r3, [pc, #220]	; (17324 <MyWrapper+0x160>)
   17246:	4798      	blx	r3
   17248:	4b37      	ldr	r3, [pc, #220]	; (17328 <MyWrapper+0x164>)
   1724a:	5c1e      	ldrb	r6, [r3, r0]
   1724c:	0020      	movs	r0, r4
   1724e:	4b37      	ldr	r3, [pc, #220]	; (1732c <MyWrapper+0x168>)
   17250:	4798      	blx	r3
   17252:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17254:	3201      	adds	r2, #1
   17256:	b2d2      	uxtb	r2, r2
   17258:	b2c1      	uxtb	r1, r0
   1725a:	0030      	movs	r0, r6
   1725c:	4b35      	ldr	r3, [pc, #212]	; (17334 <MyWrapper+0x170>)
   1725e:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   17260:	4643      	mov	r3, r8
   17262:	3301      	adds	r3, #1
   17264:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   17266:	1c6b      	adds	r3, r5, #1
   17268:	d12a      	bne.n	172c0 <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
   1726a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1726c:	2b00      	cmp	r3, #0
   1726e:	d018      	beq.n	172a2 <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   17270:	2100      	movs	r1, #0
   17272:	0020      	movs	r0, r4
   17274:	4b30      	ldr	r3, [pc, #192]	; (17338 <MyWrapper+0x174>)
   17276:	4798      	blx	r3
			xReturn = pdPASS;
   17278:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1727a:	2800      	cmp	r0, #0
   1727c:	d003      	beq.n	17286 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
   1727e:	2f00      	cmp	r7, #0
   17280:	d045      	beq.n	1730e <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
   17282:	2301      	movs	r3, #1
   17284:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17286:	9801      	ldr	r0, [sp, #4]
   17288:	4b2c      	ldr	r3, [pc, #176]	; (1733c <MyWrapper+0x178>)
   1728a:	4798      	blx	r3
}
   1728c:	0028      	movs	r0, r5
   1728e:	b003      	add	sp, #12
   17290:	bc0c      	pop	{r2, r3}
   17292:	4690      	mov	r8, r2
   17294:	469a      	mov	sl, r3
   17296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17298:	6843      	ldr	r3, [r0, #4]
   1729a:	2b00      	cmp	r3, #0
   1729c:	d0a6      	beq.n	171ec <MyWrapper+0x28>
   1729e:	b672      	cpsid	i
   172a0:	e7fe      	b.n	172a0 <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   172a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   172a4:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   172a6:	2b00      	cmp	r3, #0
   172a8:	d0ed      	beq.n	17286 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   172aa:	0020      	movs	r0, r4
   172ac:	3024      	adds	r0, #36	; 0x24
   172ae:	4b24      	ldr	r3, [pc, #144]	; (17340 <MyWrapper+0x17c>)
   172b0:	4798      	blx	r3
   172b2:	2800      	cmp	r0, #0
   172b4:	d0e7      	beq.n	17286 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
   172b6:	2f00      	cmp	r7, #0
   172b8:	d02b      	beq.n	17312 <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
   172ba:	2301      	movs	r3, #1
   172bc:	603b      	str	r3, [r7, #0]
   172be:	e7e2      	b.n	17286 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   172c0:	3501      	adds	r5, #1
   172c2:	b26d      	sxtb	r5, r5
   172c4:	2345      	movs	r3, #69	; 0x45
   172c6:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   172c8:	2501      	movs	r5, #1
   172ca:	e7dc      	b.n	17286 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   172cc:	0020      	movs	r0, r4
   172ce:	4b13      	ldr	r3, [pc, #76]	; (1731c <MyWrapper+0x158>)
   172d0:	4798      	blx	r3
   172d2:	4b13      	ldr	r3, [pc, #76]	; (17320 <MyWrapper+0x15c>)
   172d4:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   172d6:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   172d8:	4203      	tst	r3, r0
   172da:	d0d4      	beq.n	17286 <MyWrapper+0xc2>
   172dc:	355d      	adds	r5, #93	; 0x5d
   172de:	2e00      	cmp	r6, #0
   172e0:	d106      	bne.n	172f0 <MyWrapper+0x12c>
   172e2:	0020      	movs	r0, r4
   172e4:	4b0f      	ldr	r3, [pc, #60]	; (17324 <MyWrapper+0x160>)
   172e6:	4798      	blx	r3
   172e8:	4b0f      	ldr	r3, [pc, #60]	; (17328 <MyWrapper+0x164>)
   172ea:	5c1d      	ldrb	r5, [r3, r0]
   172ec:	3558      	adds	r5, #88	; 0x58
   172ee:	b2ed      	uxtb	r5, r5
   172f0:	0020      	movs	r0, r4
   172f2:	4b0c      	ldr	r3, [pc, #48]	; (17324 <MyWrapper+0x160>)
   172f4:	4798      	blx	r3
   172f6:	4b0c      	ldr	r3, [pc, #48]	; (17328 <MyWrapper+0x164>)
   172f8:	5c1f      	ldrb	r7, [r3, r0]
   172fa:	0020      	movs	r0, r4
   172fc:	4b0b      	ldr	r3, [pc, #44]	; (1732c <MyWrapper+0x168>)
   172fe:	4798      	blx	r3
   17300:	b2c2      	uxtb	r2, r0
   17302:	0039      	movs	r1, r7
   17304:	0028      	movs	r0, r5
   17306:	4b0a      	ldr	r3, [pc, #40]	; (17330 <MyWrapper+0x16c>)
   17308:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1730a:	2500      	movs	r5, #0
   1730c:	e7bb      	b.n	17286 <MyWrapper+0xc2>
			xReturn = pdPASS;
   1730e:	2501      	movs	r5, #1
   17310:	e7b9      	b.n	17286 <MyWrapper+0xc2>
   17312:	2501      	movs	r5, #1
   17314:	e7b7      	b.n	17286 <MyWrapper+0xc2>
   17316:	46c0      	nop			; (mov r8, r8)
   17318:	00016739 	.word	0x00016739
   1731c:	000153b5 	.word	0x000153b5
   17320:	200000c0 	.word	0x200000c0
   17324:	00015335 	.word	0x00015335
   17328:	200000b8 	.word	0x200000b8
   1732c:	000153a5 	.word	0x000153a5
   17330:	00016189 	.word	0x00016189
   17334:	00015c5d 	.word	0x00015c5d
   17338:	0001690d 	.word	0x0001690d
   1733c:	00016741 	.word	0x00016741
   17340:	000184c9 	.word	0x000184c9

00017344 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   17344:	b510      	push	{r4, lr}
   17346:	2200      	movs	r2, #0
   17348:	4b01      	ldr	r3, [pc, #4]	; (17350 <xQueueGiveFromISR+0xc>)
   1734a:	4798      	blx	r3
   1734c:	bd10      	pop	{r4, pc}
   1734e:	46c0      	nop			; (mov r8, r8)
   17350:	000171c5 	.word	0x000171c5

00017354 <xQueueReceive>:
{
   17354:	b5f0      	push	{r4, r5, r6, r7, lr}
   17356:	46ce      	mov	lr, r9
   17358:	4647      	mov	r7, r8
   1735a:	b580      	push	{r7, lr}
   1735c:	b085      	sub	sp, #20
   1735e:	1e04      	subs	r4, r0, #0
   17360:	9100      	str	r1, [sp, #0]
   17362:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   17364:	d00b      	beq.n	1737e <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17366:	9b00      	ldr	r3, [sp, #0]
   17368:	2b00      	cmp	r3, #0
   1736a:	d00a      	beq.n	17382 <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1736c:	4ba4      	ldr	r3, [pc, #656]	; (17600 <xQueueReceive+0x2ac>)
   1736e:	4798      	blx	r3
   17370:	2800      	cmp	r0, #0
   17372:	d10b      	bne.n	1738c <xQueueReceive+0x38>
   17374:	9b01      	ldr	r3, [sp, #4]
   17376:	2b00      	cmp	r3, #0
   17378:	d00c      	beq.n	17394 <xQueueReceive+0x40>
   1737a:	b672      	cpsid	i
   1737c:	e7fe      	b.n	1737c <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
   1737e:	b672      	cpsid	i
   17380:	e7fe      	b.n	17380 <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17382:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17384:	2b00      	cmp	r3, #0
   17386:	d0f1      	beq.n	1736c <xQueueReceive+0x18>
   17388:	b672      	cpsid	i
   1738a:	e7fe      	b.n	1738a <xQueueReceive+0x36>
   1738c:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   1738e:	4b9d      	ldr	r3, [pc, #628]	; (17604 <xQueueReceive+0x2b0>)
   17390:	4698      	mov	r8, r3
   17392:	e0b4      	b.n	174fe <xQueueReceive+0x1aa>
   17394:	2500      	movs	r5, #0
   17396:	e7fa      	b.n	1738e <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   17398:	9900      	ldr	r1, [sp, #0]
   1739a:	0020      	movs	r0, r4
   1739c:	4b9a      	ldr	r3, [pc, #616]	; (17608 <xQueueReceive+0x2b4>)
   1739e:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   173a0:	4b9a      	ldr	r3, [pc, #616]	; (1760c <xQueueReceive+0x2b8>)
   173a2:	4798      	blx	r3
   173a4:	4b9a      	ldr	r3, [pc, #616]	; (17610 <xQueueReceive+0x2bc>)
   173a6:	4798      	blx	r3
   173a8:	4b9a      	ldr	r3, [pc, #616]	; (17614 <xQueueReceive+0x2c0>)
   173aa:	881b      	ldrh	r3, [r3, #0]
   173ac:	4203      	tst	r3, r0
   173ae:	d019      	beq.n	173e4 <xQueueReceive+0x90>
   173b0:	0020      	movs	r0, r4
   173b2:	4b99      	ldr	r3, [pc, #612]	; (17618 <xQueueReceive+0x2c4>)
   173b4:	4798      	blx	r3
   173b6:	4b97      	ldr	r3, [pc, #604]	; (17614 <xQueueReceive+0x2c0>)
   173b8:	881b      	ldrh	r3, [r3, #0]
   173ba:	4203      	tst	r3, r0
   173bc:	d012      	beq.n	173e4 <xQueueReceive+0x90>
   173be:	0020      	movs	r0, r4
   173c0:	4b96      	ldr	r3, [pc, #600]	; (1761c <xQueueReceive+0x2c8>)
   173c2:	4698      	mov	r8, r3
   173c4:	4798      	blx	r3
   173c6:	4f96      	ldr	r7, [pc, #600]	; (17620 <xQueueReceive+0x2cc>)
   173c8:	5c3d      	ldrb	r5, [r7, r0]
   173ca:	3528      	adds	r5, #40	; 0x28
   173cc:	b2ed      	uxtb	r5, r5
   173ce:	0020      	movs	r0, r4
   173d0:	47c0      	blx	r8
   173d2:	5c3f      	ldrb	r7, [r7, r0]
   173d4:	0020      	movs	r0, r4
   173d6:	4b93      	ldr	r3, [pc, #588]	; (17624 <xQueueReceive+0x2d0>)
   173d8:	4798      	blx	r3
   173da:	b2c2      	uxtb	r2, r0
   173dc:	0039      	movs	r1, r7
   173de:	0028      	movs	r0, r5
   173e0:	4b91      	ldr	r3, [pc, #580]	; (17628 <xQueueReceive+0x2d4>)
   173e2:	4798      	blx	r3
   173e4:	0020      	movs	r0, r4
   173e6:	4f8d      	ldr	r7, [pc, #564]	; (1761c <xQueueReceive+0x2c8>)
   173e8:	47b8      	blx	r7
   173ea:	4d8d      	ldr	r5, [pc, #564]	; (17620 <xQueueReceive+0x2cc>)
   173ec:	5c2b      	ldrb	r3, [r5, r0]
   173ee:	4699      	mov	r9, r3
   173f0:	0020      	movs	r0, r4
   173f2:	4b8c      	ldr	r3, [pc, #560]	; (17624 <xQueueReceive+0x2d0>)
   173f4:	4798      	blx	r3
   173f6:	b2c3      	uxtb	r3, r0
   173f8:	4698      	mov	r8, r3
   173fa:	0020      	movs	r0, r4
   173fc:	47b8      	blx	r7
   173fe:	5c2b      	ldrb	r3, [r5, r0]
   17400:	2b02      	cmp	r3, #2
   17402:	d11e      	bne.n	17442 <xQueueReceive+0xee>
   17404:	4b81      	ldr	r3, [pc, #516]	; (1760c <xQueueReceive+0x2b8>)
   17406:	4798      	blx	r3
   17408:	4b88      	ldr	r3, [pc, #544]	; (1762c <xQueueReceive+0x2d8>)
   1740a:	4798      	blx	r3
   1740c:	b2c2      	uxtb	r2, r0
   1740e:	4641      	mov	r1, r8
   17410:	4648      	mov	r0, r9
   17412:	4b87      	ldr	r3, [pc, #540]	; (17630 <xQueueReceive+0x2dc>)
   17414:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   17416:	3e01      	subs	r6, #1
   17418:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1741a:	6923      	ldr	r3, [r4, #16]
   1741c:	2b00      	cmp	r3, #0
   1741e:	d007      	beq.n	17430 <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   17420:	0020      	movs	r0, r4
   17422:	3010      	adds	r0, #16
   17424:	4b83      	ldr	r3, [pc, #524]	; (17634 <xQueueReceive+0x2e0>)
   17426:	4798      	blx	r3
   17428:	2800      	cmp	r0, #0
   1742a:	d001      	beq.n	17430 <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   1742c:	4b82      	ldr	r3, [pc, #520]	; (17638 <xQueueReceive+0x2e4>)
   1742e:	4798      	blx	r3
				taskEXIT_CRITICAL();
   17430:	4b82      	ldr	r3, [pc, #520]	; (1763c <xQueueReceive+0x2e8>)
   17432:	4798      	blx	r3
				return pdPASS;
   17434:	2301      	movs	r3, #1
}
   17436:	0018      	movs	r0, r3
   17438:	b005      	add	sp, #20
   1743a:	bc0c      	pop	{r2, r3}
   1743c:	4690      	mov	r8, r2
   1743e:	4699      	mov	r9, r3
   17440:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   17442:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17444:	3a01      	subs	r2, #1
   17446:	b2d2      	uxtb	r2, r2
   17448:	e7e1      	b.n	1740e <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
   1744a:	4b7c      	ldr	r3, [pc, #496]	; (1763c <xQueueReceive+0x2e8>)
   1744c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1744e:	4b6f      	ldr	r3, [pc, #444]	; (1760c <xQueueReceive+0x2b8>)
   17450:	4798      	blx	r3
   17452:	4b6f      	ldr	r3, [pc, #444]	; (17610 <xQueueReceive+0x2bc>)
   17454:	4798      	blx	r3
   17456:	4b6f      	ldr	r3, [pc, #444]	; (17614 <xQueueReceive+0x2c0>)
   17458:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   1745a:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1745c:	4202      	tst	r2, r0
   1745e:	d0ea      	beq.n	17436 <xQueueReceive+0xe2>
   17460:	0020      	movs	r0, r4
   17462:	4b6d      	ldr	r3, [pc, #436]	; (17618 <xQueueReceive+0x2c4>)
   17464:	4798      	blx	r3
   17466:	4b6b      	ldr	r3, [pc, #428]	; (17614 <xQueueReceive+0x2c0>)
   17468:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   1746a:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1746c:	4202      	tst	r2, r0
   1746e:	d0e2      	beq.n	17436 <xQueueReceive+0xe2>
   17470:	0020      	movs	r0, r4
   17472:	4f6a      	ldr	r7, [pc, #424]	; (1761c <xQueueReceive+0x2c8>)
   17474:	47b8      	blx	r7
   17476:	4e6a      	ldr	r6, [pc, #424]	; (17620 <xQueueReceive+0x2cc>)
   17478:	5c35      	ldrb	r5, [r6, r0]
   1747a:	3550      	adds	r5, #80	; 0x50
   1747c:	b2ed      	uxtb	r5, r5
   1747e:	0020      	movs	r0, r4
   17480:	47b8      	blx	r7
   17482:	5c36      	ldrb	r6, [r6, r0]
   17484:	0020      	movs	r0, r4
   17486:	4b67      	ldr	r3, [pc, #412]	; (17624 <xQueueReceive+0x2d0>)
   17488:	4798      	blx	r3
   1748a:	b2c2      	uxtb	r2, r0
   1748c:	0031      	movs	r1, r6
   1748e:	0028      	movs	r0, r5
   17490:	4b65      	ldr	r3, [pc, #404]	; (17628 <xQueueReceive+0x2d4>)
   17492:	4798      	blx	r3
					return errQUEUE_EMPTY;
   17494:	2300      	movs	r3, #0
   17496:	e7ce      	b.n	17436 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   17498:	a802      	add	r0, sp, #8
   1749a:	4b69      	ldr	r3, [pc, #420]	; (17640 <xQueueReceive+0x2ec>)
   1749c:	4798      	blx	r3
   1749e:	e038      	b.n	17512 <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
   174a0:	2200      	movs	r2, #0
   174a2:	2344      	movs	r3, #68	; 0x44
   174a4:	54e2      	strb	r2, [r4, r3]
   174a6:	e03f      	b.n	17528 <xQueueReceive+0x1d4>
   174a8:	2200      	movs	r2, #0
   174aa:	2345      	movs	r3, #69	; 0x45
   174ac:	54e2      	strb	r2, [r4, r3]
   174ae:	e040      	b.n	17532 <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   174b0:	0020      	movs	r0, r4
   174b2:	4b59      	ldr	r3, [pc, #356]	; (17618 <xQueueReceive+0x2c4>)
   174b4:	4798      	blx	r3
   174b6:	4b57      	ldr	r3, [pc, #348]	; (17614 <xQueueReceive+0x2c0>)
   174b8:	881b      	ldrh	r3, [r3, #0]
   174ba:	4203      	tst	r3, r0
   174bc:	d04e      	beq.n	1755c <xQueueReceive+0x208>
   174be:	0020      	movs	r0, r4
   174c0:	4f56      	ldr	r7, [pc, #344]	; (1761c <xQueueReceive+0x2c8>)
   174c2:	47b8      	blx	r7
   174c4:	4e56      	ldr	r6, [pc, #344]	; (17620 <xQueueReceive+0x2cc>)
   174c6:	5c35      	ldrb	r5, [r6, r0]
   174c8:	3568      	adds	r5, #104	; 0x68
   174ca:	b2ed      	uxtb	r5, r5
   174cc:	0020      	movs	r0, r4
   174ce:	47b8      	blx	r7
   174d0:	5c36      	ldrb	r6, [r6, r0]
   174d2:	0020      	movs	r0, r4
   174d4:	4b53      	ldr	r3, [pc, #332]	; (17624 <xQueueReceive+0x2d0>)
   174d6:	4798      	blx	r3
   174d8:	b2c2      	uxtb	r2, r0
   174da:	0031      	movs	r1, r6
   174dc:	0028      	movs	r0, r5
   174de:	4b52      	ldr	r3, [pc, #328]	; (17628 <xQueueReceive+0x2d4>)
   174e0:	4798      	blx	r3
   174e2:	e03b      	b.n	1755c <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   174e4:	0020      	movs	r0, r4
   174e6:	3024      	adds	r0, #36	; 0x24
   174e8:	9901      	ldr	r1, [sp, #4]
   174ea:	4b56      	ldr	r3, [pc, #344]	; (17644 <xQueueReceive+0x2f0>)
   174ec:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   174ee:	0020      	movs	r0, r4
   174f0:	4b55      	ldr	r3, [pc, #340]	; (17648 <xQueueReceive+0x2f4>)
   174f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   174f4:	4b55      	ldr	r3, [pc, #340]	; (1764c <xQueueReceive+0x2f8>)
   174f6:	4798      	blx	r3
   174f8:	2800      	cmp	r0, #0
   174fa:	d046      	beq.n	1758a <xQueueReceive+0x236>
   174fc:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   174fe:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   17500:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   17502:	2e00      	cmp	r6, #0
   17504:	d000      	beq.n	17508 <xQueueReceive+0x1b4>
   17506:	e747      	b.n	17398 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
   17508:	9b01      	ldr	r3, [sp, #4]
   1750a:	2b00      	cmp	r3, #0
   1750c:	d09d      	beq.n	1744a <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   1750e:	2d00      	cmp	r5, #0
   17510:	d0c2      	beq.n	17498 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
   17512:	4b4a      	ldr	r3, [pc, #296]	; (1763c <xQueueReceive+0x2e8>)
   17514:	4798      	blx	r3
		vTaskSuspendAll();
   17516:	4b4e      	ldr	r3, [pc, #312]	; (17650 <xQueueReceive+0x2fc>)
   17518:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1751a:	4b3a      	ldr	r3, [pc, #232]	; (17604 <xQueueReceive+0x2b0>)
   1751c:	4798      	blx	r3
   1751e:	2344      	movs	r3, #68	; 0x44
   17520:	5ce3      	ldrb	r3, [r4, r3]
   17522:	b25b      	sxtb	r3, r3
   17524:	3301      	adds	r3, #1
   17526:	d0bb      	beq.n	174a0 <xQueueReceive+0x14c>
   17528:	2345      	movs	r3, #69	; 0x45
   1752a:	5ce3      	ldrb	r3, [r4, r3]
   1752c:	b25b      	sxtb	r3, r3
   1752e:	3301      	adds	r3, #1
   17530:	d0ba      	beq.n	174a8 <xQueueReceive+0x154>
   17532:	4b42      	ldr	r3, [pc, #264]	; (1763c <xQueueReceive+0x2e8>)
   17534:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   17536:	a901      	add	r1, sp, #4
   17538:	a802      	add	r0, sp, #8
   1753a:	4b46      	ldr	r3, [pc, #280]	; (17654 <xQueueReceive+0x300>)
   1753c:	4798      	blx	r3
   1753e:	2800      	cmp	r0, #0
   17540:	d12c      	bne.n	1759c <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17542:	0020      	movs	r0, r4
   17544:	4b44      	ldr	r3, [pc, #272]	; (17658 <xQueueReceive+0x304>)
   17546:	4798      	blx	r3
   17548:	2800      	cmp	r0, #0
   1754a:	d021      	beq.n	17590 <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1754c:	4b2f      	ldr	r3, [pc, #188]	; (1760c <xQueueReceive+0x2b8>)
   1754e:	4798      	blx	r3
   17550:	4b2f      	ldr	r3, [pc, #188]	; (17610 <xQueueReceive+0x2bc>)
   17552:	4798      	blx	r3
   17554:	4b2f      	ldr	r3, [pc, #188]	; (17614 <xQueueReceive+0x2c0>)
   17556:	881b      	ldrh	r3, [r3, #0]
   17558:	4203      	tst	r3, r0
   1755a:	d1a9      	bne.n	174b0 <xQueueReceive+0x15c>
   1755c:	0020      	movs	r0, r4
   1755e:	4b2f      	ldr	r3, [pc, #188]	; (1761c <xQueueReceive+0x2c8>)
   17560:	4798      	blx	r3
   17562:	4b2f      	ldr	r3, [pc, #188]	; (17620 <xQueueReceive+0x2cc>)
   17564:	5c1b      	ldrb	r3, [r3, r0]
   17566:	2b02      	cmp	r3, #2
   17568:	d0bc      	beq.n	174e4 <xQueueReceive+0x190>
   1756a:	4b28      	ldr	r3, [pc, #160]	; (1760c <xQueueReceive+0x2b8>)
   1756c:	4798      	blx	r3
   1756e:	4b28      	ldr	r3, [pc, #160]	; (17610 <xQueueReceive+0x2bc>)
   17570:	4798      	blx	r3
   17572:	4b28      	ldr	r3, [pc, #160]	; (17614 <xQueueReceive+0x2c0>)
   17574:	881b      	ldrh	r3, [r3, #0]
   17576:	4203      	tst	r3, r0
   17578:	d0b4      	beq.n	174e4 <xQueueReceive+0x190>
   1757a:	4b24      	ldr	r3, [pc, #144]	; (1760c <xQueueReceive+0x2b8>)
   1757c:	4798      	blx	r3
   1757e:	4b2b      	ldr	r3, [pc, #172]	; (1762c <xQueueReceive+0x2d8>)
   17580:	4798      	blx	r3
   17582:	b2c0      	uxtb	r0, r0
   17584:	4b35      	ldr	r3, [pc, #212]	; (1765c <xQueueReceive+0x308>)
   17586:	4798      	blx	r3
   17588:	e7ac      	b.n	174e4 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
   1758a:	4b2b      	ldr	r3, [pc, #172]	; (17638 <xQueueReceive+0x2e4>)
   1758c:	4798      	blx	r3
   1758e:	e7b5      	b.n	174fc <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
   17590:	0020      	movs	r0, r4
   17592:	4b2d      	ldr	r3, [pc, #180]	; (17648 <xQueueReceive+0x2f4>)
   17594:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17596:	4b2d      	ldr	r3, [pc, #180]	; (1764c <xQueueReceive+0x2f8>)
   17598:	4798      	blx	r3
   1759a:	e7af      	b.n	174fc <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
   1759c:	0020      	movs	r0, r4
   1759e:	4b2a      	ldr	r3, [pc, #168]	; (17648 <xQueueReceive+0x2f4>)
   175a0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   175a2:	4b2a      	ldr	r3, [pc, #168]	; (1764c <xQueueReceive+0x2f8>)
   175a4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   175a6:	0020      	movs	r0, r4
   175a8:	4b2b      	ldr	r3, [pc, #172]	; (17658 <xQueueReceive+0x304>)
   175aa:	4798      	blx	r3
   175ac:	2800      	cmp	r0, #0
   175ae:	d0a5      	beq.n	174fc <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   175b0:	4b16      	ldr	r3, [pc, #88]	; (1760c <xQueueReceive+0x2b8>)
   175b2:	4798      	blx	r3
   175b4:	4b16      	ldr	r3, [pc, #88]	; (17610 <xQueueReceive+0x2bc>)
   175b6:	4798      	blx	r3
   175b8:	4b16      	ldr	r3, [pc, #88]	; (17614 <xQueueReceive+0x2c0>)
   175ba:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   175bc:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   175be:	4202      	tst	r2, r0
   175c0:	d100      	bne.n	175c4 <xQueueReceive+0x270>
   175c2:	e738      	b.n	17436 <xQueueReceive+0xe2>
   175c4:	0020      	movs	r0, r4
   175c6:	4b14      	ldr	r3, [pc, #80]	; (17618 <xQueueReceive+0x2c4>)
   175c8:	4798      	blx	r3
   175ca:	4b12      	ldr	r3, [pc, #72]	; (17614 <xQueueReceive+0x2c0>)
   175cc:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   175ce:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   175d0:	4202      	tst	r2, r0
   175d2:	d100      	bne.n	175d6 <xQueueReceive+0x282>
   175d4:	e72f      	b.n	17436 <xQueueReceive+0xe2>
   175d6:	0020      	movs	r0, r4
   175d8:	4f10      	ldr	r7, [pc, #64]	; (1761c <xQueueReceive+0x2c8>)
   175da:	47b8      	blx	r7
   175dc:	4e10      	ldr	r6, [pc, #64]	; (17620 <xQueueReceive+0x2cc>)
   175de:	5c35      	ldrb	r5, [r6, r0]
   175e0:	3550      	adds	r5, #80	; 0x50
   175e2:	b2ed      	uxtb	r5, r5
   175e4:	0020      	movs	r0, r4
   175e6:	47b8      	blx	r7
   175e8:	5c36      	ldrb	r6, [r6, r0]
   175ea:	0020      	movs	r0, r4
   175ec:	4b0d      	ldr	r3, [pc, #52]	; (17624 <xQueueReceive+0x2d0>)
   175ee:	4798      	blx	r3
   175f0:	b2c2      	uxtb	r2, r0
   175f2:	0031      	movs	r1, r6
   175f4:	0028      	movs	r0, r5
   175f6:	4b0c      	ldr	r3, [pc, #48]	; (17628 <xQueueReceive+0x2d4>)
   175f8:	4798      	blx	r3
				return errQUEUE_EMPTY;
   175fa:	2300      	movs	r3, #0
   175fc:	e71b      	b.n	17436 <xQueueReceive+0xe2>
   175fe:	46c0      	nop			; (mov r8, r8)
   17600:	0001868d 	.word	0x0001868d
   17604:	00016701 	.word	0x00016701
   17608:	00016a29 	.word	0x00016a29
   1760c:	00015505 	.word	0x00015505
   17610:	00015351 	.word	0x00015351
   17614:	200000c0 	.word	0x200000c0
   17618:	000153b5 	.word	0x000153b5
   1761c:	00015335 	.word	0x00015335
   17620:	200000b8 	.word	0x200000b8
   17624:	000153a5 	.word	0x000153a5
   17628:	00016189 	.word	0x00016189
   1762c:	00015341 	.word	0x00015341
   17630:	00015c5d 	.word	0x00015c5d
   17634:	000184c9 	.word	0x000184c9
   17638:	000166f1 	.word	0x000166f1
   1763c:	00016719 	.word	0x00016719
   17640:	000185ad 	.word	0x000185ad
   17644:	00018401 	.word	0x00018401
   17648:	00016a51 	.word	0x00016a51
   1764c:	00018019 	.word	0x00018019
   17650:	00017e71 	.word	0x00017e71
   17654:	000185c5 	.word	0x000185c5
   17658:	00016875 	.word	0x00016875
   1765c:	00015cb5 	.word	0x00015cb5

00017660 <xQueueSemaphoreTake>:
{
   17660:	b5f0      	push	{r4, r5, r6, r7, lr}
   17662:	46ce      	mov	lr, r9
   17664:	4647      	mov	r7, r8
   17666:	b580      	push	{r7, lr}
   17668:	b085      	sub	sp, #20
   1766a:	1e04      	subs	r4, r0, #0
   1766c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   1766e:	d004      	beq.n	1767a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
   17670:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17672:	2b00      	cmp	r3, #0
   17674:	d003      	beq.n	1767e <xQueueSemaphoreTake+0x1e>
   17676:	b672      	cpsid	i
   17678:	e7fe      	b.n	17678 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
   1767a:	b672      	cpsid	i
   1767c:	e7fe      	b.n	1767c <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1767e:	4bb2      	ldr	r3, [pc, #712]	; (17948 <xQueueSemaphoreTake+0x2e8>)
   17680:	4798      	blx	r3
   17682:	2800      	cmp	r0, #0
   17684:	d104      	bne.n	17690 <xQueueSemaphoreTake+0x30>
   17686:	9b01      	ldr	r3, [sp, #4]
   17688:	2b00      	cmp	r3, #0
   1768a:	d006      	beq.n	1769a <xQueueSemaphoreTake+0x3a>
   1768c:	b672      	cpsid	i
   1768e:	e7fe      	b.n	1768e <xQueueSemaphoreTake+0x2e>
   17690:	2500      	movs	r5, #0
   17692:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   17694:	4bad      	ldr	r3, [pc, #692]	; (1794c <xQueueSemaphoreTake+0x2ec>)
   17696:	4698      	mov	r8, r3
   17698:	e0bd      	b.n	17816 <xQueueSemaphoreTake+0x1b6>
   1769a:	2500      	movs	r5, #0
   1769c:	2700      	movs	r7, #0
   1769e:	e7f9      	b.n	17694 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
   176a0:	4bab      	ldr	r3, [pc, #684]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   176a2:	4798      	blx	r3
   176a4:	4bab      	ldr	r3, [pc, #684]	; (17954 <xQueueSemaphoreTake+0x2f4>)
   176a6:	4798      	blx	r3
   176a8:	4bab      	ldr	r3, [pc, #684]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   176aa:	881b      	ldrh	r3, [r3, #0]
   176ac:	4203      	tst	r3, r0
   176ae:	d019      	beq.n	176e4 <xQueueSemaphoreTake+0x84>
   176b0:	0020      	movs	r0, r4
   176b2:	4baa      	ldr	r3, [pc, #680]	; (1795c <xQueueSemaphoreTake+0x2fc>)
   176b4:	4798      	blx	r3
   176b6:	4ba8      	ldr	r3, [pc, #672]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   176b8:	881b      	ldrh	r3, [r3, #0]
   176ba:	4203      	tst	r3, r0
   176bc:	d012      	beq.n	176e4 <xQueueSemaphoreTake+0x84>
   176be:	0020      	movs	r0, r4
   176c0:	4ba7      	ldr	r3, [pc, #668]	; (17960 <xQueueSemaphoreTake+0x300>)
   176c2:	4698      	mov	r8, r3
   176c4:	4798      	blx	r3
   176c6:	4fa7      	ldr	r7, [pc, #668]	; (17964 <xQueueSemaphoreTake+0x304>)
   176c8:	5c3d      	ldrb	r5, [r7, r0]
   176ca:	3528      	adds	r5, #40	; 0x28
   176cc:	b2ed      	uxtb	r5, r5
   176ce:	0020      	movs	r0, r4
   176d0:	47c0      	blx	r8
   176d2:	5c3f      	ldrb	r7, [r7, r0]
   176d4:	0020      	movs	r0, r4
   176d6:	4ba4      	ldr	r3, [pc, #656]	; (17968 <xQueueSemaphoreTake+0x308>)
   176d8:	4798      	blx	r3
   176da:	b2c2      	uxtb	r2, r0
   176dc:	0039      	movs	r1, r7
   176de:	0028      	movs	r0, r5
   176e0:	4ba2      	ldr	r3, [pc, #648]	; (1796c <xQueueSemaphoreTake+0x30c>)
   176e2:	4798      	blx	r3
   176e4:	0020      	movs	r0, r4
   176e6:	4f9e      	ldr	r7, [pc, #632]	; (17960 <xQueueSemaphoreTake+0x300>)
   176e8:	47b8      	blx	r7
   176ea:	4d9e      	ldr	r5, [pc, #632]	; (17964 <xQueueSemaphoreTake+0x304>)
   176ec:	5c2b      	ldrb	r3, [r5, r0]
   176ee:	4699      	mov	r9, r3
   176f0:	0020      	movs	r0, r4
   176f2:	4b9d      	ldr	r3, [pc, #628]	; (17968 <xQueueSemaphoreTake+0x308>)
   176f4:	4798      	blx	r3
   176f6:	b2c3      	uxtb	r3, r0
   176f8:	4698      	mov	r8, r3
   176fa:	0020      	movs	r0, r4
   176fc:	47b8      	blx	r7
   176fe:	5c2b      	ldrb	r3, [r5, r0]
   17700:	2b02      	cmp	r3, #2
   17702:	d124      	bne.n	1774e <xQueueSemaphoreTake+0xee>
   17704:	4b92      	ldr	r3, [pc, #584]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   17706:	4798      	blx	r3
   17708:	4b99      	ldr	r3, [pc, #612]	; (17970 <xQueueSemaphoreTake+0x310>)
   1770a:	4798      	blx	r3
   1770c:	b2c2      	uxtb	r2, r0
   1770e:	4641      	mov	r1, r8
   17710:	4648      	mov	r0, r9
   17712:	4b98      	ldr	r3, [pc, #608]	; (17974 <xQueueSemaphoreTake+0x314>)
   17714:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   17716:	3e01      	subs	r6, #1
   17718:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1771a:	6823      	ldr	r3, [r4, #0]
   1771c:	2b00      	cmp	r3, #0
   1771e:	d102      	bne.n	17726 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   17720:	4b95      	ldr	r3, [pc, #596]	; (17978 <xQueueSemaphoreTake+0x318>)
   17722:	4798      	blx	r3
   17724:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   17726:	6923      	ldr	r3, [r4, #16]
   17728:	2b00      	cmp	r3, #0
   1772a:	d007      	beq.n	1773c <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1772c:	0020      	movs	r0, r4
   1772e:	3010      	adds	r0, #16
   17730:	4b92      	ldr	r3, [pc, #584]	; (1797c <xQueueSemaphoreTake+0x31c>)
   17732:	4798      	blx	r3
   17734:	2800      	cmp	r0, #0
   17736:	d001      	beq.n	1773c <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   17738:	4b91      	ldr	r3, [pc, #580]	; (17980 <xQueueSemaphoreTake+0x320>)
   1773a:	4798      	blx	r3
				taskEXIT_CRITICAL();
   1773c:	4b91      	ldr	r3, [pc, #580]	; (17984 <xQueueSemaphoreTake+0x324>)
   1773e:	4798      	blx	r3
				return pdPASS;
   17740:	2501      	movs	r5, #1
}
   17742:	0028      	movs	r0, r5
   17744:	b005      	add	sp, #20
   17746:	bc0c      	pop	{r2, r3}
   17748:	4690      	mov	r8, r2
   1774a:	4699      	mov	r9, r3
   1774c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   1774e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17750:	3a01      	subs	r2, #1
   17752:	b2d2      	uxtb	r2, r2
   17754:	e7db      	b.n	1770e <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
   17756:	2d00      	cmp	r5, #0
   17758:	d001      	beq.n	1775e <xQueueSemaphoreTake+0xfe>
   1775a:	b672      	cpsid	i
   1775c:	e7fe      	b.n	1775c <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
   1775e:	4b89      	ldr	r3, [pc, #548]	; (17984 <xQueueSemaphoreTake+0x324>)
   17760:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   17762:	4b7b      	ldr	r3, [pc, #492]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   17764:	4798      	blx	r3
   17766:	4b7b      	ldr	r3, [pc, #492]	; (17954 <xQueueSemaphoreTake+0x2f4>)
   17768:	4798      	blx	r3
   1776a:	4b7b      	ldr	r3, [pc, #492]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   1776c:	881b      	ldrh	r3, [r3, #0]
   1776e:	4203      	tst	r3, r0
   17770:	d0e7      	beq.n	17742 <xQueueSemaphoreTake+0xe2>
   17772:	0020      	movs	r0, r4
   17774:	4b79      	ldr	r3, [pc, #484]	; (1795c <xQueueSemaphoreTake+0x2fc>)
   17776:	4798      	blx	r3
   17778:	4b77      	ldr	r3, [pc, #476]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   1777a:	881b      	ldrh	r3, [r3, #0]
   1777c:	4203      	tst	r3, r0
   1777e:	d0e0      	beq.n	17742 <xQueueSemaphoreTake+0xe2>
   17780:	0020      	movs	r0, r4
   17782:	4b77      	ldr	r3, [pc, #476]	; (17960 <xQueueSemaphoreTake+0x300>)
   17784:	4698      	mov	r8, r3
   17786:	4798      	blx	r3
   17788:	4f76      	ldr	r7, [pc, #472]	; (17964 <xQueueSemaphoreTake+0x304>)
   1778a:	5c3e      	ldrb	r6, [r7, r0]
   1778c:	3650      	adds	r6, #80	; 0x50
   1778e:	b2f6      	uxtb	r6, r6
   17790:	0020      	movs	r0, r4
   17792:	47c0      	blx	r8
   17794:	5c3f      	ldrb	r7, [r7, r0]
   17796:	0020      	movs	r0, r4
   17798:	4b73      	ldr	r3, [pc, #460]	; (17968 <xQueueSemaphoreTake+0x308>)
   1779a:	4798      	blx	r3
   1779c:	b2c2      	uxtb	r2, r0
   1779e:	0039      	movs	r1, r7
   177a0:	0030      	movs	r0, r6
   177a2:	4b72      	ldr	r3, [pc, #456]	; (1796c <xQueueSemaphoreTake+0x30c>)
   177a4:	4798      	blx	r3
   177a6:	e7cc      	b.n	17742 <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   177a8:	a802      	add	r0, sp, #8
   177aa:	4b77      	ldr	r3, [pc, #476]	; (17988 <xQueueSemaphoreTake+0x328>)
   177ac:	4798      	blx	r3
   177ae:	e03c      	b.n	1782a <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
   177b0:	2200      	movs	r2, #0
   177b2:	2344      	movs	r3, #68	; 0x44
   177b4:	54e2      	strb	r2, [r4, r3]
   177b6:	e043      	b.n	17840 <xQueueSemaphoreTake+0x1e0>
   177b8:	2200      	movs	r2, #0
   177ba:	2345      	movs	r3, #69	; 0x45
   177bc:	54e2      	strb	r2, [r4, r3]
   177be:	e044      	b.n	1784a <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   177c0:	0020      	movs	r0, r4
   177c2:	4b66      	ldr	r3, [pc, #408]	; (1795c <xQueueSemaphoreTake+0x2fc>)
   177c4:	4798      	blx	r3
   177c6:	4b64      	ldr	r3, [pc, #400]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   177c8:	881b      	ldrh	r3, [r3, #0]
   177ca:	4203      	tst	r3, r0
   177cc:	d052      	beq.n	17874 <xQueueSemaphoreTake+0x214>
   177ce:	0020      	movs	r0, r4
   177d0:	4b63      	ldr	r3, [pc, #396]	; (17960 <xQueueSemaphoreTake+0x300>)
   177d2:	4699      	mov	r9, r3
   177d4:	4798      	blx	r3
   177d6:	4f63      	ldr	r7, [pc, #396]	; (17964 <xQueueSemaphoreTake+0x304>)
   177d8:	5c3e      	ldrb	r6, [r7, r0]
   177da:	3668      	adds	r6, #104	; 0x68
   177dc:	b2f6      	uxtb	r6, r6
   177de:	0020      	movs	r0, r4
   177e0:	47c8      	blx	r9
   177e2:	5c3f      	ldrb	r7, [r7, r0]
   177e4:	0020      	movs	r0, r4
   177e6:	4b60      	ldr	r3, [pc, #384]	; (17968 <xQueueSemaphoreTake+0x308>)
   177e8:	4798      	blx	r3
   177ea:	b2c2      	uxtb	r2, r0
   177ec:	0039      	movs	r1, r7
   177ee:	0030      	movs	r0, r6
   177f0:	4b5e      	ldr	r3, [pc, #376]	; (1796c <xQueueSemaphoreTake+0x30c>)
   177f2:	4798      	blx	r3
   177f4:	e03e      	b.n	17874 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   177f6:	6823      	ldr	r3, [r4, #0]
   177f8:	2b00      	cmp	r3, #0
   177fa:	d052      	beq.n	178a2 <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   177fc:	0020      	movs	r0, r4
   177fe:	3024      	adds	r0, #36	; 0x24
   17800:	9901      	ldr	r1, [sp, #4]
   17802:	4b62      	ldr	r3, [pc, #392]	; (1798c <xQueueSemaphoreTake+0x32c>)
   17804:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   17806:	0020      	movs	r0, r4
   17808:	4b61      	ldr	r3, [pc, #388]	; (17990 <xQueueSemaphoreTake+0x330>)
   1780a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1780c:	4b61      	ldr	r3, [pc, #388]	; (17994 <xQueueSemaphoreTake+0x334>)
   1780e:	4798      	blx	r3
   17810:	2800      	cmp	r0, #0
   17812:	d04f      	beq.n	178b4 <xQueueSemaphoreTake+0x254>
   17814:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   17816:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   17818:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1781a:	2e00      	cmp	r6, #0
   1781c:	d000      	beq.n	17820 <xQueueSemaphoreTake+0x1c0>
   1781e:	e73f      	b.n	176a0 <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
   17820:	9b01      	ldr	r3, [sp, #4]
   17822:	2b00      	cmp	r3, #0
   17824:	d097      	beq.n	17756 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   17826:	2f00      	cmp	r7, #0
   17828:	d0be      	beq.n	177a8 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
   1782a:	4b56      	ldr	r3, [pc, #344]	; (17984 <xQueueSemaphoreTake+0x324>)
   1782c:	4798      	blx	r3
		vTaskSuspendAll();
   1782e:	4b5a      	ldr	r3, [pc, #360]	; (17998 <xQueueSemaphoreTake+0x338>)
   17830:	4798      	blx	r3
		prvLockQueue( pxQueue );
   17832:	4b46      	ldr	r3, [pc, #280]	; (1794c <xQueueSemaphoreTake+0x2ec>)
   17834:	4798      	blx	r3
   17836:	2344      	movs	r3, #68	; 0x44
   17838:	5ce3      	ldrb	r3, [r4, r3]
   1783a:	b25b      	sxtb	r3, r3
   1783c:	3301      	adds	r3, #1
   1783e:	d0b7      	beq.n	177b0 <xQueueSemaphoreTake+0x150>
   17840:	2345      	movs	r3, #69	; 0x45
   17842:	5ce3      	ldrb	r3, [r4, r3]
   17844:	b25b      	sxtb	r3, r3
   17846:	3301      	adds	r3, #1
   17848:	d0b6      	beq.n	177b8 <xQueueSemaphoreTake+0x158>
   1784a:	4b4e      	ldr	r3, [pc, #312]	; (17984 <xQueueSemaphoreTake+0x324>)
   1784c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1784e:	a901      	add	r1, sp, #4
   17850:	a802      	add	r0, sp, #8
   17852:	4b52      	ldr	r3, [pc, #328]	; (1799c <xQueueSemaphoreTake+0x33c>)
   17854:	4798      	blx	r3
   17856:	2800      	cmp	r0, #0
   17858:	d135      	bne.n	178c6 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1785a:	0020      	movs	r0, r4
   1785c:	4b50      	ldr	r3, [pc, #320]	; (179a0 <xQueueSemaphoreTake+0x340>)
   1785e:	4798      	blx	r3
   17860:	2800      	cmp	r0, #0
   17862:	d02a      	beq.n	178ba <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17864:	4b3a      	ldr	r3, [pc, #232]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   17866:	4798      	blx	r3
   17868:	4b3a      	ldr	r3, [pc, #232]	; (17954 <xQueueSemaphoreTake+0x2f4>)
   1786a:	4798      	blx	r3
   1786c:	4b3a      	ldr	r3, [pc, #232]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   1786e:	881b      	ldrh	r3, [r3, #0]
   17870:	4203      	tst	r3, r0
   17872:	d1a5      	bne.n	177c0 <xQueueSemaphoreTake+0x160>
   17874:	0020      	movs	r0, r4
   17876:	4b3a      	ldr	r3, [pc, #232]	; (17960 <xQueueSemaphoreTake+0x300>)
   17878:	4798      	blx	r3
   1787a:	4b3a      	ldr	r3, [pc, #232]	; (17964 <xQueueSemaphoreTake+0x304>)
   1787c:	5c1b      	ldrb	r3, [r3, r0]
   1787e:	2b02      	cmp	r3, #2
   17880:	d0b9      	beq.n	177f6 <xQueueSemaphoreTake+0x196>
   17882:	4b33      	ldr	r3, [pc, #204]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   17884:	4798      	blx	r3
   17886:	4b33      	ldr	r3, [pc, #204]	; (17954 <xQueueSemaphoreTake+0x2f4>)
   17888:	4798      	blx	r3
   1788a:	4b33      	ldr	r3, [pc, #204]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   1788c:	881b      	ldrh	r3, [r3, #0]
   1788e:	4203      	tst	r3, r0
   17890:	d0b1      	beq.n	177f6 <xQueueSemaphoreTake+0x196>
   17892:	4b2f      	ldr	r3, [pc, #188]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   17894:	4798      	blx	r3
   17896:	4b36      	ldr	r3, [pc, #216]	; (17970 <xQueueSemaphoreTake+0x310>)
   17898:	4798      	blx	r3
   1789a:	b2c0      	uxtb	r0, r0
   1789c:	4b41      	ldr	r3, [pc, #260]	; (179a4 <xQueueSemaphoreTake+0x344>)
   1789e:	4798      	blx	r3
   178a0:	e7a9      	b.n	177f6 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
   178a2:	4b2a      	ldr	r3, [pc, #168]	; (1794c <xQueueSemaphoreTake+0x2ec>)
   178a4:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   178a6:	6860      	ldr	r0, [r4, #4]
   178a8:	4b3f      	ldr	r3, [pc, #252]	; (179a8 <xQueueSemaphoreTake+0x348>)
   178aa:	4798      	blx	r3
   178ac:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
   178ae:	4b35      	ldr	r3, [pc, #212]	; (17984 <xQueueSemaphoreTake+0x324>)
   178b0:	4798      	blx	r3
   178b2:	e7a3      	b.n	177fc <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
   178b4:	4b32      	ldr	r3, [pc, #200]	; (17980 <xQueueSemaphoreTake+0x320>)
   178b6:	4798      	blx	r3
   178b8:	e7ac      	b.n	17814 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
   178ba:	0020      	movs	r0, r4
   178bc:	4b34      	ldr	r3, [pc, #208]	; (17990 <xQueueSemaphoreTake+0x330>)
   178be:	4798      	blx	r3
				( void ) xTaskResumeAll();
   178c0:	4b34      	ldr	r3, [pc, #208]	; (17994 <xQueueSemaphoreTake+0x334>)
   178c2:	4798      	blx	r3
   178c4:	e7a6      	b.n	17814 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
   178c6:	0020      	movs	r0, r4
   178c8:	4b31      	ldr	r3, [pc, #196]	; (17990 <xQueueSemaphoreTake+0x330>)
   178ca:	4798      	blx	r3
			( void ) xTaskResumeAll();
   178cc:	4b31      	ldr	r3, [pc, #196]	; (17994 <xQueueSemaphoreTake+0x334>)
   178ce:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   178d0:	0020      	movs	r0, r4
   178d2:	4b33      	ldr	r3, [pc, #204]	; (179a0 <xQueueSemaphoreTake+0x340>)
   178d4:	4798      	blx	r3
   178d6:	2800      	cmp	r0, #0
   178d8:	d09c      	beq.n	17814 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
   178da:	2d00      	cmp	r5, #0
   178dc:	d00e      	beq.n	178fc <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
   178de:	4b1b      	ldr	r3, [pc, #108]	; (1794c <xQueueSemaphoreTake+0x2ec>)
   178e0:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   178e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   178e4:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   178e6:	2b00      	cmp	r3, #0
   178e8:	d003      	beq.n	178f2 <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   178ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   178ec:	681b      	ldr	r3, [r3, #0]
   178ee:	3105      	adds	r1, #5
   178f0:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   178f2:	6860      	ldr	r0, [r4, #4]
   178f4:	4b2d      	ldr	r3, [pc, #180]	; (179ac <xQueueSemaphoreTake+0x34c>)
   178f6:	4798      	blx	r3
						taskEXIT_CRITICAL();
   178f8:	4b22      	ldr	r3, [pc, #136]	; (17984 <xQueueSemaphoreTake+0x324>)
   178fa:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   178fc:	4b14      	ldr	r3, [pc, #80]	; (17950 <xQueueSemaphoreTake+0x2f0>)
   178fe:	4798      	blx	r3
   17900:	4b14      	ldr	r3, [pc, #80]	; (17954 <xQueueSemaphoreTake+0x2f4>)
   17902:	4798      	blx	r3
   17904:	4b14      	ldr	r3, [pc, #80]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   17906:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
   17908:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1790a:	4203      	tst	r3, r0
   1790c:	d100      	bne.n	17910 <xQueueSemaphoreTake+0x2b0>
   1790e:	e718      	b.n	17742 <xQueueSemaphoreTake+0xe2>
   17910:	0020      	movs	r0, r4
   17912:	4b12      	ldr	r3, [pc, #72]	; (1795c <xQueueSemaphoreTake+0x2fc>)
   17914:	4798      	blx	r3
   17916:	4b10      	ldr	r3, [pc, #64]	; (17958 <xQueueSemaphoreTake+0x2f8>)
   17918:	881b      	ldrh	r3, [r3, #0]
   1791a:	4203      	tst	r3, r0
   1791c:	d100      	bne.n	17920 <xQueueSemaphoreTake+0x2c0>
   1791e:	e710      	b.n	17742 <xQueueSemaphoreTake+0xe2>
   17920:	0020      	movs	r0, r4
   17922:	4f0f      	ldr	r7, [pc, #60]	; (17960 <xQueueSemaphoreTake+0x300>)
   17924:	47b8      	blx	r7
   17926:	4e0f      	ldr	r6, [pc, #60]	; (17964 <xQueueSemaphoreTake+0x304>)
   17928:	5c35      	ldrb	r5, [r6, r0]
   1792a:	3550      	adds	r5, #80	; 0x50
   1792c:	b2ed      	uxtb	r5, r5
   1792e:	0020      	movs	r0, r4
   17930:	47b8      	blx	r7
   17932:	5c36      	ldrb	r6, [r6, r0]
   17934:	0020      	movs	r0, r4
   17936:	4b0c      	ldr	r3, [pc, #48]	; (17968 <xQueueSemaphoreTake+0x308>)
   17938:	4798      	blx	r3
   1793a:	b2c2      	uxtb	r2, r0
   1793c:	0031      	movs	r1, r6
   1793e:	0028      	movs	r0, r5
   17940:	4b0a      	ldr	r3, [pc, #40]	; (1796c <xQueueSemaphoreTake+0x30c>)
   17942:	4798      	blx	r3
				return errQUEUE_EMPTY;
   17944:	2500      	movs	r5, #0
   17946:	e6fc      	b.n	17742 <xQueueSemaphoreTake+0xe2>
   17948:	0001868d 	.word	0x0001868d
   1794c:	00016701 	.word	0x00016701
   17950:	00015505 	.word	0x00015505
   17954:	00015351 	.word	0x00015351
   17958:	200000c0 	.word	0x200000c0
   1795c:	000153b5 	.word	0x000153b5
   17960:	00015335 	.word	0x00015335
   17964:	200000b8 	.word	0x200000b8
   17968:	000153a5 	.word	0x000153a5
   1796c:	00016189 	.word	0x00016189
   17970:	00015341 	.word	0x00015341
   17974:	00015c5d 	.word	0x00015c5d
   17978:	000189bd 	.word	0x000189bd
   1797c:	000184c9 	.word	0x000184c9
   17980:	000166f1 	.word	0x000166f1
   17984:	00016719 	.word	0x00016719
   17988:	000185ad 	.word	0x000185ad
   1798c:	00018401 	.word	0x00018401
   17990:	00016a51 	.word	0x00016a51
   17994:	00018019 	.word	0x00018019
   17998:	00017e71 	.word	0x00017e71
   1799c:	000185c5 	.word	0x000185c5
   179a0:	00016875 	.word	0x00016875
   179a4:	00015cb5 	.word	0x00015cb5
   179a8:	000186ad 	.word	0x000186ad
   179ac:	000188b9 	.word	0x000188b9

000179b0 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   179b0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
   179b2:	4770      	bx	lr

000179b4 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   179b4:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
   179b6:	4770      	bx	lr

000179b8 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   179b8:	2350      	movs	r3, #80	; 0x50
   179ba:	5cc0      	ldrb	r0, [r0, r3]
	}
   179bc:	4770      	bx	lr
	...

000179c0 <vQueueWaitForMessageRestricted>:
	{
   179c0:	b570      	push	{r4, r5, r6, lr}
   179c2:	0004      	movs	r4, r0
   179c4:	000d      	movs	r5, r1
   179c6:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
   179c8:	4b11      	ldr	r3, [pc, #68]	; (17a10 <vQueueWaitForMessageRestricted+0x50>)
   179ca:	4798      	blx	r3
   179cc:	2344      	movs	r3, #68	; 0x44
   179ce:	5ce3      	ldrb	r3, [r4, r3]
   179d0:	b25b      	sxtb	r3, r3
   179d2:	3301      	adds	r3, #1
   179d4:	d00d      	beq.n	179f2 <vQueueWaitForMessageRestricted+0x32>
   179d6:	2345      	movs	r3, #69	; 0x45
   179d8:	5ce3      	ldrb	r3, [r4, r3]
   179da:	b25b      	sxtb	r3, r3
   179dc:	3301      	adds	r3, #1
   179de:	d00c      	beq.n	179fa <vQueueWaitForMessageRestricted+0x3a>
   179e0:	4b0c      	ldr	r3, [pc, #48]	; (17a14 <vQueueWaitForMessageRestricted+0x54>)
   179e2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   179e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   179e6:	2b00      	cmp	r3, #0
   179e8:	d00b      	beq.n	17a02 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
   179ea:	0020      	movs	r0, r4
   179ec:	4b0a      	ldr	r3, [pc, #40]	; (17a18 <vQueueWaitForMessageRestricted+0x58>)
   179ee:	4798      	blx	r3
	}
   179f0:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
   179f2:	2200      	movs	r2, #0
   179f4:	2344      	movs	r3, #68	; 0x44
   179f6:	54e2      	strb	r2, [r4, r3]
   179f8:	e7ed      	b.n	179d6 <vQueueWaitForMessageRestricted+0x16>
   179fa:	2200      	movs	r2, #0
   179fc:	2345      	movs	r3, #69	; 0x45
   179fe:	54e2      	strb	r2, [r4, r3]
   17a00:	e7ee      	b.n	179e0 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   17a02:	0020      	movs	r0, r4
   17a04:	3024      	adds	r0, #36	; 0x24
   17a06:	0032      	movs	r2, r6
   17a08:	0029      	movs	r1, r5
   17a0a:	4b04      	ldr	r3, [pc, #16]	; (17a1c <vQueueWaitForMessageRestricted+0x5c>)
   17a0c:	4798      	blx	r3
   17a0e:	e7ec      	b.n	179ea <vQueueWaitForMessageRestricted+0x2a>
   17a10:	00016701 	.word	0x00016701
   17a14:	00016719 	.word	0x00016719
   17a18:	00016a51 	.word	0x00016a51
   17a1c:	0001842d 	.word	0x0001842d

00017a20 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17a20:	4b08      	ldr	r3, [pc, #32]	; (17a44 <prvResetNextTaskUnblockTime+0x24>)
   17a22:	681b      	ldr	r3, [r3, #0]
   17a24:	681b      	ldr	r3, [r3, #0]
   17a26:	2b00      	cmp	r3, #0
   17a28:	d007      	beq.n	17a3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   17a2a:	4b06      	ldr	r3, [pc, #24]	; (17a44 <prvResetNextTaskUnblockTime+0x24>)
   17a2c:	681b      	ldr	r3, [r3, #0]
   17a2e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   17a30:	68db      	ldr	r3, [r3, #12]
   17a32:	685a      	ldr	r2, [r3, #4]
   17a34:	4b04      	ldr	r3, [pc, #16]	; (17a48 <prvResetNextTaskUnblockTime+0x28>)
   17a36:	601a      	str	r2, [r3, #0]
	}
}
   17a38:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   17a3a:	2201      	movs	r2, #1
   17a3c:	4252      	negs	r2, r2
   17a3e:	4b02      	ldr	r3, [pc, #8]	; (17a48 <prvResetNextTaskUnblockTime+0x28>)
   17a40:	601a      	str	r2, [r3, #0]
   17a42:	e7f9      	b.n	17a38 <prvResetNextTaskUnblockTime+0x18>
   17a44:	20003b18 	.word	0x20003b18
   17a48:	20003bc8 	.word	0x20003bc8

00017a4c <prvIdleTask>:
{
   17a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a4e:	46d6      	mov	lr, sl
   17a50:	464f      	mov	r7, r9
   17a52:	4646      	mov	r6, r8
   17a54:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17a56:	4b14      	ldr	r3, [pc, #80]	; (17aa8 <prvIdleTask+0x5c>)
   17a58:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
   17a5a:	4b14      	ldr	r3, [pc, #80]	; (17aac <prvIdleTask+0x60>)
   17a5c:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   17a5e:	4f14      	ldr	r7, [pc, #80]	; (17ab0 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17a60:	4b14      	ldr	r3, [pc, #80]	; (17ab4 <prvIdleTask+0x68>)
   17a62:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17a64:	464b      	mov	r3, r9
   17a66:	681b      	ldr	r3, [r3, #0]
   17a68:	2b00      	cmp	r3, #0
   17a6a:	d016      	beq.n	17a9a <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
   17a6c:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   17a6e:	68fb      	ldr	r3, [r7, #12]
   17a70:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17a72:	1d28      	adds	r0, r5, #4
   17a74:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
   17a76:	4a10      	ldr	r2, [pc, #64]	; (17ab8 <prvIdleTask+0x6c>)
   17a78:	6813      	ldr	r3, [r2, #0]
   17a7a:	3b01      	subs	r3, #1
   17a7c:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   17a7e:	4c0a      	ldr	r4, [pc, #40]	; (17aa8 <prvIdleTask+0x5c>)
   17a80:	6823      	ldr	r3, [r4, #0]
   17a82:	3b01      	subs	r3, #1
   17a84:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
   17a86:	4b0d      	ldr	r3, [pc, #52]	; (17abc <prvIdleTask+0x70>)
   17a88:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   17a8a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   17a8c:	4e0c      	ldr	r6, [pc, #48]	; (17ac0 <prvIdleTask+0x74>)
   17a8e:	47b0      	blx	r6
			vPortFree( pxTCB );
   17a90:	0028      	movs	r0, r5
   17a92:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17a94:	6823      	ldr	r3, [r4, #0]
   17a96:	2b00      	cmp	r3, #0
   17a98:	d1e8      	bne.n	17a6c <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   17a9a:	4b0a      	ldr	r3, [pc, #40]	; (17ac4 <prvIdleTask+0x78>)
   17a9c:	681b      	ldr	r3, [r3, #0]
   17a9e:	2b01      	cmp	r3, #1
   17aa0:	d9e0      	bls.n	17a64 <prvIdleTask+0x18>
				taskYIELD();
   17aa2:	4b09      	ldr	r3, [pc, #36]	; (17ac8 <prvIdleTask+0x7c>)
   17aa4:	4798      	blx	r3
   17aa6:	e7dd      	b.n	17a64 <prvIdleTask+0x18>
   17aa8:	20003b88 	.word	0x20003b88
   17aac:	00016701 	.word	0x00016701
   17ab0:	20003bfc 	.word	0x20003bfc
   17ab4:	000165cf 	.word	0x000165cf
   17ab8:	20003b84 	.word	0x20003b84
   17abc:	00016719 	.word	0x00016719
   17ac0:	00016855 	.word	0x00016855
   17ac4:	20003b20 	.word	0x20003b20
   17ac8:	000166f1 	.word	0x000166f1

00017acc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   17acc:	b570      	push	{r4, r5, r6, lr}
   17ace:	0004      	movs	r4, r0
   17ad0:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   17ad2:	4b17      	ldr	r3, [pc, #92]	; (17b30 <prvAddCurrentTaskToDelayedList+0x64>)
   17ad4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   17ad6:	4b17      	ldr	r3, [pc, #92]	; (17b34 <prvAddCurrentTaskToDelayedList+0x68>)
   17ad8:	6818      	ldr	r0, [r3, #0]
   17ada:	3004      	adds	r0, #4
   17adc:	4b16      	ldr	r3, [pc, #88]	; (17b38 <prvAddCurrentTaskToDelayedList+0x6c>)
   17ade:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17ae0:	1c63      	adds	r3, r4, #1
   17ae2:	d013      	beq.n	17b0c <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   17ae4:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   17ae6:	4b13      	ldr	r3, [pc, #76]	; (17b34 <prvAddCurrentTaskToDelayedList+0x68>)
   17ae8:	681b      	ldr	r3, [r3, #0]
   17aea:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   17aec:	42a6      	cmp	r6, r4
   17aee:	d816      	bhi.n	17b1e <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17af0:	4b12      	ldr	r3, [pc, #72]	; (17b3c <prvAddCurrentTaskToDelayedList+0x70>)
   17af2:	6818      	ldr	r0, [r3, #0]
   17af4:	4b0f      	ldr	r3, [pc, #60]	; (17b34 <prvAddCurrentTaskToDelayedList+0x68>)
   17af6:	6819      	ldr	r1, [r3, #0]
   17af8:	3104      	adds	r1, #4
   17afa:	4b11      	ldr	r3, [pc, #68]	; (17b40 <prvAddCurrentTaskToDelayedList+0x74>)
   17afc:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   17afe:	4b11      	ldr	r3, [pc, #68]	; (17b44 <prvAddCurrentTaskToDelayedList+0x78>)
   17b00:	681b      	ldr	r3, [r3, #0]
   17b02:	429c      	cmp	r4, r3
   17b04:	d212      	bcs.n	17b2c <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
   17b06:	4b0f      	ldr	r3, [pc, #60]	; (17b44 <prvAddCurrentTaskToDelayedList+0x78>)
   17b08:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   17b0a:	e00f      	b.n	17b2c <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17b0c:	2d00      	cmp	r5, #0
   17b0e:	d0e9      	beq.n	17ae4 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17b10:	4b08      	ldr	r3, [pc, #32]	; (17b34 <prvAddCurrentTaskToDelayedList+0x68>)
   17b12:	6819      	ldr	r1, [r3, #0]
   17b14:	3104      	adds	r1, #4
   17b16:	480c      	ldr	r0, [pc, #48]	; (17b48 <prvAddCurrentTaskToDelayedList+0x7c>)
   17b18:	4b0c      	ldr	r3, [pc, #48]	; (17b4c <prvAddCurrentTaskToDelayedList+0x80>)
   17b1a:	4798      	blx	r3
   17b1c:	e006      	b.n	17b2c <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17b1e:	4b0c      	ldr	r3, [pc, #48]	; (17b50 <prvAddCurrentTaskToDelayedList+0x84>)
   17b20:	6818      	ldr	r0, [r3, #0]
   17b22:	4b04      	ldr	r3, [pc, #16]	; (17b34 <prvAddCurrentTaskToDelayedList+0x68>)
   17b24:	6819      	ldr	r1, [r3, #0]
   17b26:	3104      	adds	r1, #4
   17b28:	4b05      	ldr	r3, [pc, #20]	; (17b40 <prvAddCurrentTaskToDelayedList+0x74>)
   17b2a:	4798      	blx	r3
}
   17b2c:	bd70      	pop	{r4, r5, r6, pc}
   17b2e:	46c0      	nop			; (mov r8, r8)
   17b30:	20003c10 	.word	0x20003c10
   17b34:	20003b14 	.word	0x20003b14
   17b38:	000165cf 	.word	0x000165cf
   17b3c:	20003b18 	.word	0x20003b18
   17b40:	000165a1 	.word	0x000165a1
   17b44:	20003bc8 	.word	0x20003bc8
   17b48:	20003be8 	.word	0x20003be8
   17b4c:	00016589 	.word	0x00016589
   17b50:	20003b1c 	.word	0x20003b1c

00017b54 <xTaskCreate>:
	{
   17b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b56:	46c6      	mov	lr, r8
   17b58:	b500      	push	{lr}
   17b5a:	b084      	sub	sp, #16
   17b5c:	9001      	str	r0, [sp, #4]
   17b5e:	000d      	movs	r5, r1
   17b60:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17b62:	0097      	lsls	r7, r2, #2
   17b64:	0038      	movs	r0, r7
   17b66:	4b82      	ldr	r3, [pc, #520]	; (17d70 <xTaskCreate+0x21c>)
   17b68:	4798      	blx	r3
   17b6a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
   17b6c:	d100      	bne.n	17b70 <xTaskCreate+0x1c>
   17b6e:	e0b9      	b.n	17ce4 <xTaskCreate+0x190>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   17b70:	2054      	movs	r0, #84	; 0x54
   17b72:	4b7f      	ldr	r3, [pc, #508]	; (17d70 <xTaskCreate+0x21c>)
   17b74:	4798      	blx	r3
   17b76:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
   17b78:	d100      	bne.n	17b7c <xTaskCreate+0x28>
   17b7a:	e0b0      	b.n	17cde <xTaskCreate+0x18a>
					pxNewTCB->pxStack = pxStack;
   17b7c:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   17b7e:	003a      	movs	r2, r7
   17b80:	21a5      	movs	r1, #165	; 0xa5
   17b82:	0030      	movs	r0, r6
   17b84:	4b7b      	ldr	r3, [pc, #492]	; (17d74 <xTaskCreate+0x220>)
   17b86:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   17b88:	1f3a      	subs	r2, r7, #4
   17b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17b8c:	469c      	mov	ip, r3
   17b8e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   17b90:	2307      	movs	r3, #7
   17b92:	439a      	bics	r2, r3
   17b94:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17b96:	782a      	ldrb	r2, [r5, #0]
   17b98:	332d      	adds	r3, #45	; 0x2d
   17b9a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
   17b9c:	782b      	ldrb	r3, [r5, #0]
   17b9e:	2b00      	cmp	r3, #0
   17ba0:	d00d      	beq.n	17bbe <xTaskCreate+0x6a>
   17ba2:	3501      	adds	r5, #1
   17ba4:	0023      	movs	r3, r4
   17ba6:	3335      	adds	r3, #53	; 0x35
   17ba8:	0020      	movs	r0, r4
   17baa:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17bac:	782a      	ldrb	r2, [r5, #0]
   17bae:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
   17bb0:	782a      	ldrb	r2, [r5, #0]
   17bb2:	2a00      	cmp	r2, #0
   17bb4:	d003      	beq.n	17bbe <xTaskCreate+0x6a>
   17bb6:	3501      	adds	r5, #1
   17bb8:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   17bba:	4283      	cmp	r3, r0
   17bbc:	d1f6      	bne.n	17bac <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   17bbe:	2200      	movs	r2, #0
   17bc0:	233b      	movs	r3, #59	; 0x3b
   17bc2:	54e2      	strb	r2, [r4, r3]
   17bc4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   17bc6:	2f04      	cmp	r7, #4
   17bc8:	d900      	bls.n	17bcc <xTaskCreate+0x78>
   17bca:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
   17bcc:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   17bce:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   17bd0:	2600      	movs	r6, #0
   17bd2:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   17bd4:	1d23      	adds	r3, r4, #4
   17bd6:	9303      	str	r3, [sp, #12]
   17bd8:	0018      	movs	r0, r3
   17bda:	4d67      	ldr	r5, [pc, #412]	; (17d78 <xTaskCreate+0x224>)
   17bdc:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   17bde:	0020      	movs	r0, r4
   17be0:	3018      	adds	r0, #24
   17be2:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   17be4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17be6:	2305      	movs	r3, #5
   17be8:	1bdb      	subs	r3, r3, r7
   17bea:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   17bec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   17bee:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   17bf0:	2350      	movs	r3, #80	; 0x50
   17bf2:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   17bf4:	9a02      	ldr	r2, [sp, #8]
   17bf6:	9901      	ldr	r1, [sp, #4]
   17bf8:	4640      	mov	r0, r8
   17bfa:	4b60      	ldr	r3, [pc, #384]	; (17d7c <xTaskCreate+0x228>)
   17bfc:	4798      	blx	r3
   17bfe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   17c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17c02:	2b00      	cmp	r3, #0
   17c04:	d000      	beq.n	17c08 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   17c06:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   17c08:	4b5d      	ldr	r3, [pc, #372]	; (17d80 <xTaskCreate+0x22c>)
   17c0a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   17c0c:	4a5d      	ldr	r2, [pc, #372]	; (17d84 <xTaskCreate+0x230>)
   17c0e:	6813      	ldr	r3, [r2, #0]
   17c10:	3301      	adds	r3, #1
   17c12:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   17c14:	4b5c      	ldr	r3, [pc, #368]	; (17d88 <xTaskCreate+0x234>)
   17c16:	681b      	ldr	r3, [r3, #0]
   17c18:	2b00      	cmp	r3, #0
   17c1a:	d066      	beq.n	17cea <xTaskCreate+0x196>
			if( xSchedulerRunning == pdFALSE )
   17c1c:	4b5b      	ldr	r3, [pc, #364]	; (17d8c <xTaskCreate+0x238>)
   17c1e:	681b      	ldr	r3, [r3, #0]
   17c20:	2b00      	cmp	r3, #0
   17c22:	d107      	bne.n	17c34 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   17c24:	4b58      	ldr	r3, [pc, #352]	; (17d88 <xTaskCreate+0x234>)
   17c26:	681b      	ldr	r3, [r3, #0]
   17c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17c2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17c2c:	4293      	cmp	r3, r2
   17c2e:	d801      	bhi.n	17c34 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
   17c30:	4b55      	ldr	r3, [pc, #340]	; (17d88 <xTaskCreate+0x234>)
   17c32:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
   17c34:	4a56      	ldr	r2, [pc, #344]	; (17d90 <xTaskCreate+0x23c>)
   17c36:	6813      	ldr	r3, [r2, #0]
   17c38:	3301      	adds	r3, #1
   17c3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   17c3c:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
   17c3e:	2003      	movs	r0, #3
   17c40:	4b54      	ldr	r3, [pc, #336]	; (17d94 <xTaskCreate+0x240>)
   17c42:	4798      	blx	r3
   17c44:	b281      	uxth	r1, r0
   17c46:	0020      	movs	r0, r4
   17c48:	4b53      	ldr	r3, [pc, #332]	; (17d98 <xTaskCreate+0x244>)
   17c4a:	4798      	blx	r3
   17c4c:	4b53      	ldr	r3, [pc, #332]	; (17d9c <xTaskCreate+0x248>)
   17c4e:	8819      	ldrh	r1, [r3, #0]
   17c50:	0020      	movs	r0, r4
   17c52:	4b53      	ldr	r3, [pc, #332]	; (17da0 <xTaskCreate+0x24c>)
   17c54:	4798      	blx	r3
   17c56:	0020      	movs	r0, r4
   17c58:	4e52      	ldr	r6, [pc, #328]	; (17da4 <xTaskCreate+0x250>)
   17c5a:	47b0      	blx	r6
   17c5c:	0022      	movs	r2, r4
   17c5e:	3234      	adds	r2, #52	; 0x34
   17c60:	b2c1      	uxtb	r1, r0
   17c62:	2003      	movs	r0, #3
   17c64:	4b50      	ldr	r3, [pc, #320]	; (17da8 <xTaskCreate+0x254>)
   17c66:	4798      	blx	r3
   17c68:	0020      	movs	r0, r4
   17c6a:	47b0      	blx	r6
   17c6c:	232c      	movs	r3, #44	; 0x2c
   17c6e:	18e3      	adds	r3, r4, r3
   17c70:	781a      	ldrb	r2, [r3, #0]
   17c72:	b2c1      	uxtb	r1, r0
   17c74:	2003      	movs	r0, #3
   17c76:	4b4d      	ldr	r3, [pc, #308]	; (17dac <xTaskCreate+0x258>)
   17c78:	4798      	blx	r3
   17c7a:	4b4d      	ldr	r3, [pc, #308]	; (17db0 <xTaskCreate+0x25c>)
   17c7c:	4798      	blx	r3
   17c7e:	4b4d      	ldr	r3, [pc, #308]	; (17db4 <xTaskCreate+0x260>)
   17c80:	4798      	blx	r3
   17c82:	4b4d      	ldr	r3, [pc, #308]	; (17db8 <xTaskCreate+0x264>)
   17c84:	881b      	ldrh	r3, [r3, #0]
   17c86:	4203      	tst	r3, r0
   17c88:	d157      	bne.n	17d3a <xTaskCreate+0x1e6>
   17c8a:	0020      	movs	r0, r4
   17c8c:	4b4b      	ldr	r3, [pc, #300]	; (17dbc <xTaskCreate+0x268>)
   17c8e:	4798      	blx	r3
		prvAddTaskToReadyList( pxNewTCB );
   17c90:	0020      	movs	r0, r4
   17c92:	4b48      	ldr	r3, [pc, #288]	; (17db4 <xTaskCreate+0x260>)
   17c94:	4798      	blx	r3
   17c96:	4b48      	ldr	r3, [pc, #288]	; (17db8 <xTaskCreate+0x264>)
   17c98:	881b      	ldrh	r3, [r3, #0]
   17c9a:	4203      	tst	r3, r0
   17c9c:	d15d      	bne.n	17d5a <xTaskCreate+0x206>
   17c9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17ca0:	4a47      	ldr	r2, [pc, #284]	; (17dc0 <xTaskCreate+0x26c>)
   17ca2:	6812      	ldr	r2, [r2, #0]
   17ca4:	4293      	cmp	r3, r2
   17ca6:	d901      	bls.n	17cac <xTaskCreate+0x158>
   17ca8:	4a45      	ldr	r2, [pc, #276]	; (17dc0 <xTaskCreate+0x26c>)
   17caa:	6013      	str	r3, [r2, #0]
   17cac:	0098      	lsls	r0, r3, #2
   17cae:	18c0      	adds	r0, r0, r3
   17cb0:	0080      	lsls	r0, r0, #2
   17cb2:	4b44      	ldr	r3, [pc, #272]	; (17dc4 <xTaskCreate+0x270>)
   17cb4:	1818      	adds	r0, r3, r0
   17cb6:	9903      	ldr	r1, [sp, #12]
   17cb8:	4b43      	ldr	r3, [pc, #268]	; (17dc8 <xTaskCreate+0x274>)
   17cba:	4798      	blx	r3
	taskEXIT_CRITICAL();
   17cbc:	4b43      	ldr	r3, [pc, #268]	; (17dcc <xTaskCreate+0x278>)
   17cbe:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   17cc0:	4b32      	ldr	r3, [pc, #200]	; (17d8c <xTaskCreate+0x238>)
   17cc2:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
   17cc4:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
   17cc6:	2b00      	cmp	r3, #0
   17cc8:	d005      	beq.n	17cd6 <xTaskCreate+0x182>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   17cca:	4b2f      	ldr	r3, [pc, #188]	; (17d88 <xTaskCreate+0x234>)
   17ccc:	681b      	ldr	r3, [r3, #0]
   17cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17cd2:	429a      	cmp	r2, r3
   17cd4:	d348      	bcc.n	17d68 <xTaskCreate+0x214>
	}
   17cd6:	b004      	add	sp, #16
   17cd8:	bc04      	pop	{r2}
   17cda:	4690      	mov	r8, r2
   17cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
   17cde:	0030      	movs	r0, r6
   17ce0:	4b3b      	ldr	r3, [pc, #236]	; (17dd0 <xTaskCreate+0x27c>)
   17ce2:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   17ce4:	2001      	movs	r0, #1
   17ce6:	4240      	negs	r0, r0
   17ce8:	e7f5      	b.n	17cd6 <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
   17cea:	4b27      	ldr	r3, [pc, #156]	; (17d88 <xTaskCreate+0x234>)
   17cec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   17cee:	6813      	ldr	r3, [r2, #0]
   17cf0:	2b01      	cmp	r3, #1
   17cf2:	d19f      	bne.n	17c34 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   17cf4:	4f33      	ldr	r7, [pc, #204]	; (17dc4 <xTaskCreate+0x270>)
   17cf6:	0038      	movs	r0, r7
   17cf8:	4e36      	ldr	r6, [pc, #216]	; (17dd4 <xTaskCreate+0x280>)
   17cfa:	47b0      	blx	r6
   17cfc:	0038      	movs	r0, r7
   17cfe:	3014      	adds	r0, #20
   17d00:	47b0      	blx	r6
   17d02:	0038      	movs	r0, r7
   17d04:	3028      	adds	r0, #40	; 0x28
   17d06:	47b0      	blx	r6
   17d08:	0038      	movs	r0, r7
   17d0a:	303c      	adds	r0, #60	; 0x3c
   17d0c:	47b0      	blx	r6
   17d0e:	0038      	movs	r0, r7
   17d10:	3050      	adds	r0, #80	; 0x50
   17d12:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
   17d14:	4b30      	ldr	r3, [pc, #192]	; (17dd8 <xTaskCreate+0x284>)
   17d16:	4698      	mov	r8, r3
   17d18:	0018      	movs	r0, r3
   17d1a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
   17d1c:	4f2f      	ldr	r7, [pc, #188]	; (17ddc <xTaskCreate+0x288>)
   17d1e:	0038      	movs	r0, r7
   17d20:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
   17d22:	482f      	ldr	r0, [pc, #188]	; (17de0 <xTaskCreate+0x28c>)
   17d24:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
   17d26:	482f      	ldr	r0, [pc, #188]	; (17de4 <xTaskCreate+0x290>)
   17d28:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
   17d2a:	482f      	ldr	r0, [pc, #188]	; (17de8 <xTaskCreate+0x294>)
   17d2c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
   17d2e:	4b2f      	ldr	r3, [pc, #188]	; (17dec <xTaskCreate+0x298>)
   17d30:	4642      	mov	r2, r8
   17d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   17d34:	4b2e      	ldr	r3, [pc, #184]	; (17df0 <xTaskCreate+0x29c>)
   17d36:	601f      	str	r7, [r3, #0]
   17d38:	e77c      	b.n	17c34 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
   17d3a:	0020      	movs	r0, r4
   17d3c:	4b1d      	ldr	r3, [pc, #116]	; (17db4 <xTaskCreate+0x260>)
   17d3e:	4798      	blx	r3
   17d40:	4b1d      	ldr	r3, [pc, #116]	; (17db8 <xTaskCreate+0x264>)
   17d42:	881b      	ldrh	r3, [r3, #0]
   17d44:	4203      	tst	r3, r0
   17d46:	d0a0      	beq.n	17c8a <xTaskCreate+0x136>
   17d48:	0020      	movs	r0, r4
   17d4a:	4b16      	ldr	r3, [pc, #88]	; (17da4 <xTaskCreate+0x250>)
   17d4c:	4798      	blx	r3
   17d4e:	b2c2      	uxtb	r2, r0
   17d50:	2103      	movs	r1, #3
   17d52:	201b      	movs	r0, #27
   17d54:	4b27      	ldr	r3, [pc, #156]	; (17df4 <xTaskCreate+0x2a0>)
   17d56:	4798      	blx	r3
   17d58:	e797      	b.n	17c8a <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
   17d5a:	0020      	movs	r0, r4
   17d5c:	4b11      	ldr	r3, [pc, #68]	; (17da4 <xTaskCreate+0x250>)
   17d5e:	4798      	blx	r3
   17d60:	b2c0      	uxtb	r0, r0
   17d62:	4b25      	ldr	r3, [pc, #148]	; (17df8 <xTaskCreate+0x2a4>)
   17d64:	4798      	blx	r3
   17d66:	e79a      	b.n	17c9e <xTaskCreate+0x14a>
			taskYIELD_IF_USING_PREEMPTION();
   17d68:	4b24      	ldr	r3, [pc, #144]	; (17dfc <xTaskCreate+0x2a8>)
   17d6a:	4798      	blx	r3
			xReturn = pdPASS;
   17d6c:	2001      	movs	r0, #1
   17d6e:	e7b2      	b.n	17cd6 <xTaskCreate+0x182>
   17d70:	000167c5 	.word	0x000167c5
   17d74:	000262a3 	.word	0x000262a3
   17d78:	00016583 	.word	0x00016583
   17d7c:	00016655 	.word	0x00016655
   17d80:	00016701 	.word	0x00016701
   17d84:	20003b84 	.word	0x20003b84
   17d88:	20003b14 	.word	0x20003b14
   17d8c:	20003be4 	.word	0x20003be4
   17d90:	20003b94 	.word	0x20003b94
   17d94:	00015cf5 	.word	0x00015cf5
   17d98:	00015361 	.word	0x00015361
   17d9c:	200000be 	.word	0x200000be
   17da0:	00015381 	.word	0x00015381
   17da4:	00015341 	.word	0x00015341
   17da8:	00015dc9 	.word	0x00015dc9
   17dac:	00015ba9 	.word	0x00015ba9
   17db0:	00015505 	.word	0x00015505
   17db4:	00015351 	.word	0x00015351
   17db8:	200000c0 	.word	0x200000c0
   17dbc:	00015409 	.word	0x00015409
   17dc0:	20003b98 	.word	0x20003b98
   17dc4:	20003b20 	.word	0x20003b20
   17dc8:	00016589 	.word	0x00016589
   17dcc:	00016719 	.word	0x00016719
   17dd0:	00016855 	.word	0x00016855
   17dd4:	0001656d 	.word	0x0001656d
   17dd8:	20003b9c 	.word	0x20003b9c
   17ddc:	20003bb0 	.word	0x20003bb0
   17de0:	20003bd0 	.word	0x20003bd0
   17de4:	20003bfc 	.word	0x20003bfc
   17de8:	20003be8 	.word	0x20003be8
   17dec:	20003b18 	.word	0x20003b18
   17df0:	20003b1c 	.word	0x20003b1c
   17df4:	00016189 	.word	0x00016189
   17df8:	00016021 	.word	0x00016021
   17dfc:	000166f1 	.word	0x000166f1

00017e00 <vTaskStartScheduler>:
{
   17e00:	b510      	push	{r4, lr}
   17e02:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   17e04:	4b11      	ldr	r3, [pc, #68]	; (17e4c <vTaskStartScheduler+0x4c>)
   17e06:	9301      	str	r3, [sp, #4]
   17e08:	2300      	movs	r3, #0
   17e0a:	9300      	str	r3, [sp, #0]
   17e0c:	2264      	movs	r2, #100	; 0x64
   17e0e:	4910      	ldr	r1, [pc, #64]	; (17e50 <vTaskStartScheduler+0x50>)
   17e10:	4810      	ldr	r0, [pc, #64]	; (17e54 <vTaskStartScheduler+0x54>)
   17e12:	4c11      	ldr	r4, [pc, #68]	; (17e58 <vTaskStartScheduler+0x58>)
   17e14:	47a0      	blx	r4
		if( xReturn == pdPASS )
   17e16:	2801      	cmp	r0, #1
   17e18:	d003      	beq.n	17e22 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17e1a:	1c43      	adds	r3, r0, #1
   17e1c:	d013      	beq.n	17e46 <vTaskStartScheduler+0x46>
}
   17e1e:	b002      	add	sp, #8
   17e20:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   17e22:	4b0e      	ldr	r3, [pc, #56]	; (17e5c <vTaskStartScheduler+0x5c>)
   17e24:	4798      	blx	r3
	if( xReturn == pdPASS )
   17e26:	2801      	cmp	r0, #1
   17e28:	d1f7      	bne.n	17e1a <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
   17e2a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
   17e2c:	2201      	movs	r2, #1
   17e2e:	4252      	negs	r2, r2
   17e30:	4b0b      	ldr	r3, [pc, #44]	; (17e60 <vTaskStartScheduler+0x60>)
   17e32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   17e34:	3202      	adds	r2, #2
   17e36:	4b0b      	ldr	r3, [pc, #44]	; (17e64 <vTaskStartScheduler+0x64>)
   17e38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   17e3a:	2200      	movs	r2, #0
   17e3c:	4b0a      	ldr	r3, [pc, #40]	; (17e68 <vTaskStartScheduler+0x68>)
   17e3e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   17e40:	4b0a      	ldr	r3, [pc, #40]	; (17e6c <vTaskStartScheduler+0x6c>)
   17e42:	4798      	blx	r3
   17e44:	e7eb      	b.n	17e1e <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17e46:	b672      	cpsid	i
   17e48:	e7fe      	b.n	17e48 <vTaskStartScheduler+0x48>
   17e4a:	46c0      	nop			; (mov r8, r8)
   17e4c:	20003bc4 	.word	0x20003bc4
   17e50:	00029544 	.word	0x00029544
   17e54:	00017a4d 	.word	0x00017a4d
   17e58:	00017b55 	.word	0x00017b55
   17e5c:	00018a81 	.word	0x00018a81
   17e60:	20003bc8 	.word	0x20003bc8
   17e64:	20003be4 	.word	0x20003be4
   17e68:	20003c10 	.word	0x20003c10
   17e6c:	00016679 	.word	0x00016679

00017e70 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   17e70:	4a02      	ldr	r2, [pc, #8]	; (17e7c <vTaskSuspendAll+0xc>)
   17e72:	6813      	ldr	r3, [r2, #0]
   17e74:	3301      	adds	r3, #1
   17e76:	6013      	str	r3, [r2, #0]
}
   17e78:	4770      	bx	lr
   17e7a:	46c0      	nop			; (mov r8, r8)
   17e7c:	20003b90 	.word	0x20003b90

00017e80 <xTaskGetTickCount>:
		xTicks = xTickCount;
   17e80:	4b01      	ldr	r3, [pc, #4]	; (17e88 <xTaskGetTickCount+0x8>)
   17e82:	6818      	ldr	r0, [r3, #0]
}
   17e84:	4770      	bx	lr
   17e86:	46c0      	nop			; (mov r8, r8)
   17e88:	20003c10 	.word	0x20003c10

00017e8c <xTaskIncrementTick>:
{
   17e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e8e:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
   17e90:	4b4c      	ldr	r3, [pc, #304]	; (17fc4 <xTaskIncrementTick+0x138>)
   17e92:	681b      	ldr	r3, [r3, #0]
   17e94:	2b01      	cmp	r3, #1
   17e96:	d003      	beq.n	17ea0 <xTaskIncrementTick+0x14>
   17e98:	4b4b      	ldr	r3, [pc, #300]	; (17fc8 <xTaskIncrementTick+0x13c>)
   17e9a:	681b      	ldr	r3, [r3, #0]
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	d106      	bne.n	17eae <xTaskIncrementTick+0x22>
   17ea0:	4a4a      	ldr	r2, [pc, #296]	; (17fcc <xTaskIncrementTick+0x140>)
   17ea2:	6813      	ldr	r3, [r2, #0]
   17ea4:	3301      	adds	r3, #1
   17ea6:	6013      	str	r3, [r2, #0]
   17ea8:	2000      	movs	r0, #0
   17eaa:	4b49      	ldr	r3, [pc, #292]	; (17fd0 <xTaskIncrementTick+0x144>)
   17eac:	4798      	blx	r3
   17eae:	4b45      	ldr	r3, [pc, #276]	; (17fc4 <xTaskIncrementTick+0x138>)
   17eb0:	681b      	ldr	r3, [r3, #0]
   17eb2:	2b00      	cmp	r3, #0
   17eb4:	d010      	beq.n	17ed8 <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17eb6:	4b43      	ldr	r3, [pc, #268]	; (17fc4 <xTaskIncrementTick+0x138>)
   17eb8:	681b      	ldr	r3, [r3, #0]
   17eba:	2b00      	cmp	r3, #0
   17ebc:	d175      	bne.n	17faa <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   17ebe:	4b45      	ldr	r3, [pc, #276]	; (17fd4 <xTaskIncrementTick+0x148>)
   17ec0:	681e      	ldr	r6, [r3, #0]
   17ec2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   17ec4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   17ec6:	2e00      	cmp	r6, #0
   17ec8:	d119      	bne.n	17efe <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
   17eca:	4b43      	ldr	r3, [pc, #268]	; (17fd8 <xTaskIncrementTick+0x14c>)
   17ecc:	681b      	ldr	r3, [r3, #0]
   17ece:	681b      	ldr	r3, [r3, #0]
   17ed0:	2b00      	cmp	r3, #0
   17ed2:	d008      	beq.n	17ee6 <xTaskIncrementTick+0x5a>
   17ed4:	b672      	cpsid	i
   17ed6:	e7fe      	b.n	17ed6 <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
   17ed8:	4b3e      	ldr	r3, [pc, #248]	; (17fd4 <xTaskIncrementTick+0x148>)
   17eda:	6819      	ldr	r1, [r3, #0]
   17edc:	3101      	adds	r1, #1
   17ede:	2003      	movs	r0, #3
   17ee0:	4b3e      	ldr	r3, [pc, #248]	; (17fdc <xTaskIncrementTick+0x150>)
   17ee2:	4798      	blx	r3
   17ee4:	e7e7      	b.n	17eb6 <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
   17ee6:	4a3c      	ldr	r2, [pc, #240]	; (17fd8 <xTaskIncrementTick+0x14c>)
   17ee8:	6811      	ldr	r1, [r2, #0]
   17eea:	4b3d      	ldr	r3, [pc, #244]	; (17fe0 <xTaskIncrementTick+0x154>)
   17eec:	6818      	ldr	r0, [r3, #0]
   17eee:	6010      	str	r0, [r2, #0]
   17ef0:	6019      	str	r1, [r3, #0]
   17ef2:	4a3c      	ldr	r2, [pc, #240]	; (17fe4 <xTaskIncrementTick+0x158>)
   17ef4:	6813      	ldr	r3, [r2, #0]
   17ef6:	3301      	adds	r3, #1
   17ef8:	6013      	str	r3, [r2, #0]
   17efa:	4b3b      	ldr	r3, [pc, #236]	; (17fe8 <xTaskIncrementTick+0x15c>)
   17efc:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   17efe:	4b3b      	ldr	r3, [pc, #236]	; (17fec <xTaskIncrementTick+0x160>)
   17f00:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17f02:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
   17f04:	429e      	cmp	r6, r3
   17f06:	d33a      	bcc.n	17f7e <xTaskIncrementTick+0xf2>
   17f08:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17f0a:	4f33      	ldr	r7, [pc, #204]	; (17fd8 <xTaskIncrementTick+0x14c>)
   17f0c:	683b      	ldr	r3, [r7, #0]
   17f0e:	681b      	ldr	r3, [r3, #0]
   17f10:	2b00      	cmp	r3, #0
   17f12:	d030      	beq.n	17f76 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   17f14:	4b30      	ldr	r3, [pc, #192]	; (17fd8 <xTaskIncrementTick+0x14c>)
   17f16:	681b      	ldr	r3, [r3, #0]
   17f18:	68db      	ldr	r3, [r3, #12]
   17f1a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   17f1c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
   17f1e:	429e      	cmp	r6, r3
   17f20:	d339      	bcc.n	17f96 <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17f22:	1d23      	adds	r3, r4, #4
   17f24:	9301      	str	r3, [sp, #4]
   17f26:	0018      	movs	r0, r3
   17f28:	4b31      	ldr	r3, [pc, #196]	; (17ff0 <xTaskIncrementTick+0x164>)
   17f2a:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   17f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17f2e:	2b00      	cmp	r3, #0
   17f30:	d003      	beq.n	17f3a <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   17f32:	0020      	movs	r0, r4
   17f34:	3018      	adds	r0, #24
   17f36:	4b2e      	ldr	r3, [pc, #184]	; (17ff0 <xTaskIncrementTick+0x164>)
   17f38:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   17f3a:	0020      	movs	r0, r4
   17f3c:	4b2d      	ldr	r3, [pc, #180]	; (17ff4 <xTaskIncrementTick+0x168>)
   17f3e:	4798      	blx	r3
   17f40:	4b2d      	ldr	r3, [pc, #180]	; (17ff8 <xTaskIncrementTick+0x16c>)
   17f42:	881b      	ldrh	r3, [r3, #0]
   17f44:	4203      	tst	r3, r0
   17f46:	d129      	bne.n	17f9c <xTaskIncrementTick+0x110>
   17f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17f4a:	4a2c      	ldr	r2, [pc, #176]	; (17ffc <xTaskIncrementTick+0x170>)
   17f4c:	6812      	ldr	r2, [r2, #0]
   17f4e:	4293      	cmp	r3, r2
   17f50:	d901      	bls.n	17f56 <xTaskIncrementTick+0xca>
   17f52:	4a2a      	ldr	r2, [pc, #168]	; (17ffc <xTaskIncrementTick+0x170>)
   17f54:	6013      	str	r3, [r2, #0]
   17f56:	0098      	lsls	r0, r3, #2
   17f58:	18c0      	adds	r0, r0, r3
   17f5a:	0080      	lsls	r0, r0, #2
   17f5c:	4b28      	ldr	r3, [pc, #160]	; (18000 <xTaskIncrementTick+0x174>)
   17f5e:	1818      	adds	r0, r3, r0
   17f60:	9901      	ldr	r1, [sp, #4]
   17f62:	4b28      	ldr	r3, [pc, #160]	; (18004 <xTaskIncrementTick+0x178>)
   17f64:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   17f66:	4b28      	ldr	r3, [pc, #160]	; (18008 <xTaskIncrementTick+0x17c>)
   17f68:	681b      	ldr	r3, [r3, #0]
   17f6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17f6e:	429a      	cmp	r2, r3
   17f70:	d3cc      	bcc.n	17f0c <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
   17f72:	2501      	movs	r5, #1
   17f74:	e7ca      	b.n	17f0c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17f76:	2201      	movs	r2, #1
   17f78:	4252      	negs	r2, r2
   17f7a:	4b1c      	ldr	r3, [pc, #112]	; (17fec <xTaskIncrementTick+0x160>)
   17f7c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   17f7e:	4b22      	ldr	r3, [pc, #136]	; (18008 <xTaskIncrementTick+0x17c>)
   17f80:	681b      	ldr	r3, [r3, #0]
   17f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17f84:	0093      	lsls	r3, r2, #2
   17f86:	189b      	adds	r3, r3, r2
   17f88:	009b      	lsls	r3, r3, #2
   17f8a:	4a1d      	ldr	r2, [pc, #116]	; (18000 <xTaskIncrementTick+0x174>)
   17f8c:	589b      	ldr	r3, [r3, r2]
   17f8e:	2b01      	cmp	r3, #1
   17f90:	d910      	bls.n	17fb4 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
   17f92:	2501      	movs	r5, #1
   17f94:	e00e      	b.n	17fb4 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
   17f96:	4a15      	ldr	r2, [pc, #84]	; (17fec <xTaskIncrementTick+0x160>)
   17f98:	6013      	str	r3, [r2, #0]
						break;
   17f9a:	e7f0      	b.n	17f7e <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
   17f9c:	0020      	movs	r0, r4
   17f9e:	4b1b      	ldr	r3, [pc, #108]	; (1800c <xTaskIncrementTick+0x180>)
   17fa0:	4798      	blx	r3
   17fa2:	b2c0      	uxtb	r0, r0
   17fa4:	4b1a      	ldr	r3, [pc, #104]	; (18010 <xTaskIncrementTick+0x184>)
   17fa6:	4798      	blx	r3
   17fa8:	e7ce      	b.n	17f48 <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
   17faa:	4a07      	ldr	r2, [pc, #28]	; (17fc8 <xTaskIncrementTick+0x13c>)
   17fac:	6813      	ldr	r3, [r2, #0]
   17fae:	3301      	adds	r3, #1
   17fb0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17fb2:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
   17fb4:	4b17      	ldr	r3, [pc, #92]	; (18014 <xTaskIncrementTick+0x188>)
   17fb6:	681b      	ldr	r3, [r3, #0]
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d000      	beq.n	17fbe <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
   17fbc:	2501      	movs	r5, #1
}
   17fbe:	0028      	movs	r0, r5
   17fc0:	b003      	add	sp, #12
   17fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fc4:	20003b90 	.word	0x20003b90
   17fc8:	20003b8c 	.word	0x20003b8c
   17fcc:	20000c24 	.word	0x20000c24
   17fd0:	00015e59 	.word	0x00015e59
   17fd4:	20003c10 	.word	0x20003c10
   17fd8:	20003b18 	.word	0x20003b18
   17fdc:	00016325 	.word	0x00016325
   17fe0:	20003b1c 	.word	0x20003b1c
   17fe4:	20003bcc 	.word	0x20003bcc
   17fe8:	00017a21 	.word	0x00017a21
   17fec:	20003bc8 	.word	0x20003bc8
   17ff0:	000165cf 	.word	0x000165cf
   17ff4:	00015351 	.word	0x00015351
   17ff8:	200000c0 	.word	0x200000c0
   17ffc:	20003b98 	.word	0x20003b98
   18000:	20003b20 	.word	0x20003b20
   18004:	00016589 	.word	0x00016589
   18008:	20003b14 	.word	0x20003b14
   1800c:	00015341 	.word	0x00015341
   18010:	00016021 	.word	0x00016021
   18014:	20003c14 	.word	0x20003c14

00018018 <xTaskResumeAll>:
{
   18018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
   1801a:	4b37      	ldr	r3, [pc, #220]	; (180f8 <xTaskResumeAll+0xe0>)
   1801c:	681b      	ldr	r3, [r3, #0]
   1801e:	2b00      	cmp	r3, #0
   18020:	d101      	bne.n	18026 <xTaskResumeAll+0xe>
   18022:	b672      	cpsid	i
   18024:	e7fe      	b.n	18024 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
   18026:	4b35      	ldr	r3, [pc, #212]	; (180fc <xTaskResumeAll+0xe4>)
   18028:	4798      	blx	r3
		--uxSchedulerSuspended;
   1802a:	4b33      	ldr	r3, [pc, #204]	; (180f8 <xTaskResumeAll+0xe0>)
   1802c:	681a      	ldr	r2, [r3, #0]
   1802e:	3a01      	subs	r2, #1
   18030:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18032:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   18034:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18036:	2b00      	cmp	r3, #0
   18038:	d103      	bne.n	18042 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1803a:	4b31      	ldr	r3, [pc, #196]	; (18100 <xTaskResumeAll+0xe8>)
   1803c:	681b      	ldr	r3, [r3, #0]
   1803e:	2b00      	cmp	r3, #0
   18040:	d136      	bne.n	180b0 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
   18042:	4b30      	ldr	r3, [pc, #192]	; (18104 <xTaskResumeAll+0xec>)
   18044:	4798      	blx	r3
}
   18046:	0020      	movs	r0, r4
   18048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
   1804a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1804c:	4a2e      	ldr	r2, [pc, #184]	; (18108 <xTaskResumeAll+0xf0>)
   1804e:	6812      	ldr	r2, [r2, #0]
   18050:	4293      	cmp	r3, r2
   18052:	d901      	bls.n	18058 <xTaskResumeAll+0x40>
   18054:	4a2c      	ldr	r2, [pc, #176]	; (18108 <xTaskResumeAll+0xf0>)
   18056:	6013      	str	r3, [r2, #0]
   18058:	0098      	lsls	r0, r3, #2
   1805a:	18c0      	adds	r0, r0, r3
   1805c:	0080      	lsls	r0, r0, #2
   1805e:	4b2b      	ldr	r3, [pc, #172]	; (1810c <xTaskResumeAll+0xf4>)
   18060:	1818      	adds	r0, r3, r0
   18062:	0031      	movs	r1, r6
   18064:	4b2a      	ldr	r3, [pc, #168]	; (18110 <xTaskResumeAll+0xf8>)
   18066:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   18068:	4b2a      	ldr	r3, [pc, #168]	; (18114 <xTaskResumeAll+0xfc>)
   1806a:	681b      	ldr	r3, [r3, #0]
   1806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1806e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18070:	429a      	cmp	r2, r3
   18072:	d302      	bcc.n	1807a <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
   18074:	2201      	movs	r2, #1
   18076:	4b28      	ldr	r3, [pc, #160]	; (18118 <xTaskResumeAll+0x100>)
   18078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1807a:	682b      	ldr	r3, [r5, #0]
   1807c:	2b00      	cmp	r3, #0
   1807e:	d01a      	beq.n	180b6 <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   18080:	68fb      	ldr	r3, [r7, #12]
   18082:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   18084:	0020      	movs	r0, r4
   18086:	3018      	adds	r0, #24
   18088:	4b24      	ldr	r3, [pc, #144]	; (1811c <xTaskResumeAll+0x104>)
   1808a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1808c:	1d26      	adds	r6, r4, #4
   1808e:	0030      	movs	r0, r6
   18090:	4b22      	ldr	r3, [pc, #136]	; (1811c <xTaskResumeAll+0x104>)
   18092:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   18094:	0020      	movs	r0, r4
   18096:	4b22      	ldr	r3, [pc, #136]	; (18120 <xTaskResumeAll+0x108>)
   18098:	4798      	blx	r3
   1809a:	4b22      	ldr	r3, [pc, #136]	; (18124 <xTaskResumeAll+0x10c>)
   1809c:	881b      	ldrh	r3, [r3, #0]
   1809e:	4203      	tst	r3, r0
   180a0:	d0d3      	beq.n	1804a <xTaskResumeAll+0x32>
   180a2:	0020      	movs	r0, r4
   180a4:	4b20      	ldr	r3, [pc, #128]	; (18128 <xTaskResumeAll+0x110>)
   180a6:	4798      	blx	r3
   180a8:	b2c0      	uxtb	r0, r0
   180aa:	4b20      	ldr	r3, [pc, #128]	; (1812c <xTaskResumeAll+0x114>)
   180ac:	4798      	blx	r3
   180ae:	e7cc      	b.n	1804a <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   180b0:	4d1f      	ldr	r5, [pc, #124]	; (18130 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   180b2:	002f      	movs	r7, r5
   180b4:	e7e1      	b.n	1807a <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
   180b6:	2c00      	cmp	r4, #0
   180b8:	d001      	beq.n	180be <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
   180ba:	4b1e      	ldr	r3, [pc, #120]	; (18134 <xTaskResumeAll+0x11c>)
   180bc:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   180be:	4b1e      	ldr	r3, [pc, #120]	; (18138 <xTaskResumeAll+0x120>)
   180c0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   180c2:	2c00      	cmp	r4, #0
   180c4:	d00e      	beq.n	180e4 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
   180c6:	4f1d      	ldr	r7, [pc, #116]	; (1813c <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
   180c8:	4e13      	ldr	r6, [pc, #76]	; (18118 <xTaskResumeAll+0x100>)
   180ca:	2501      	movs	r5, #1
   180cc:	e002      	b.n	180d4 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
   180ce:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   180d0:	2c00      	cmp	r4, #0
   180d2:	d004      	beq.n	180de <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
   180d4:	47b8      	blx	r7
   180d6:	2800      	cmp	r0, #0
   180d8:	d0f9      	beq.n	180ce <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
   180da:	6035      	str	r5, [r6, #0]
   180dc:	e7f7      	b.n	180ce <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
   180de:	2200      	movs	r2, #0
   180e0:	4b15      	ldr	r3, [pc, #84]	; (18138 <xTaskResumeAll+0x120>)
   180e2:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   180e4:	4b0c      	ldr	r3, [pc, #48]	; (18118 <xTaskResumeAll+0x100>)
   180e6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   180e8:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
   180ea:	2b00      	cmp	r3, #0
   180ec:	d0a9      	beq.n	18042 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
   180ee:	4b14      	ldr	r3, [pc, #80]	; (18140 <xTaskResumeAll+0x128>)
   180f0:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
   180f2:	3401      	adds	r4, #1
   180f4:	e7a5      	b.n	18042 <xTaskResumeAll+0x2a>
   180f6:	46c0      	nop			; (mov r8, r8)
   180f8:	20003b90 	.word	0x20003b90
   180fc:	00016701 	.word	0x00016701
   18100:	20003b84 	.word	0x20003b84
   18104:	00016719 	.word	0x00016719
   18108:	20003b98 	.word	0x20003b98
   1810c:	20003b20 	.word	0x20003b20
   18110:	00016589 	.word	0x00016589
   18114:	20003b14 	.word	0x20003b14
   18118:	20003c14 	.word	0x20003c14
   1811c:	000165cf 	.word	0x000165cf
   18120:	00015351 	.word	0x00015351
   18124:	200000c0 	.word	0x200000c0
   18128:	00015341 	.word	0x00015341
   1812c:	00016021 	.word	0x00016021
   18130:	20003bd0 	.word	0x20003bd0
   18134:	00017a21 	.word	0x00017a21
   18138:	20003b8c 	.word	0x20003b8c
   1813c:	00017e8d 	.word	0x00017e8d
   18140:	000166f1 	.word	0x000166f1

00018144 <vTaskDelay>:
	{
   18144:	b510      	push	{r4, lr}
   18146:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
   18148:	d031      	beq.n	181ae <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
   1814a:	4b1a      	ldr	r3, [pc, #104]	; (181b4 <vTaskDelay+0x70>)
   1814c:	681b      	ldr	r3, [r3, #0]
   1814e:	2b00      	cmp	r3, #0
   18150:	d001      	beq.n	18156 <vTaskDelay+0x12>
   18152:	b672      	cpsid	i
   18154:	e7fe      	b.n	18154 <vTaskDelay+0x10>
			vTaskSuspendAll();
   18156:	4b18      	ldr	r3, [pc, #96]	; (181b8 <vTaskDelay+0x74>)
   18158:	4798      	blx	r3
				traceTASK_DELAY();
   1815a:	4b18      	ldr	r3, [pc, #96]	; (181bc <vTaskDelay+0x78>)
   1815c:	6818      	ldr	r0, [r3, #0]
   1815e:	4b18      	ldr	r3, [pc, #96]	; (181c0 <vTaskDelay+0x7c>)
   18160:	4798      	blx	r3
   18162:	4b18      	ldr	r3, [pc, #96]	; (181c4 <vTaskDelay+0x80>)
   18164:	881b      	ldrh	r3, [r3, #0]
   18166:	4203      	tst	r3, r0
   18168:	d00a      	beq.n	18180 <vTaskDelay+0x3c>
   1816a:	0021      	movs	r1, r4
   1816c:	2089      	movs	r0, #137	; 0x89
   1816e:	4b16      	ldr	r3, [pc, #88]	; (181c8 <vTaskDelay+0x84>)
   18170:	4798      	blx	r3
   18172:	4b12      	ldr	r3, [pc, #72]	; (181bc <vTaskDelay+0x78>)
   18174:	6818      	ldr	r0, [r3, #0]
   18176:	4b15      	ldr	r3, [pc, #84]	; (181cc <vTaskDelay+0x88>)
   18178:	4798      	blx	r3
   1817a:	b2c0      	uxtb	r0, r0
   1817c:	4b14      	ldr	r3, [pc, #80]	; (181d0 <vTaskDelay+0x8c>)
   1817e:	4798      	blx	r3
   18180:	4b14      	ldr	r3, [pc, #80]	; (181d4 <vTaskDelay+0x90>)
   18182:	4798      	blx	r3
   18184:	4b0e      	ldr	r3, [pc, #56]	; (181c0 <vTaskDelay+0x7c>)
   18186:	4798      	blx	r3
   18188:	4b0e      	ldr	r3, [pc, #56]	; (181c4 <vTaskDelay+0x80>)
   1818a:	881b      	ldrh	r3, [r3, #0]
   1818c:	4203      	tst	r3, r0
   1818e:	d006      	beq.n	1819e <vTaskDelay+0x5a>
   18190:	4b10      	ldr	r3, [pc, #64]	; (181d4 <vTaskDelay+0x90>)
   18192:	4798      	blx	r3
   18194:	4b0d      	ldr	r3, [pc, #52]	; (181cc <vTaskDelay+0x88>)
   18196:	4798      	blx	r3
   18198:	b2c0      	uxtb	r0, r0
   1819a:	4b0d      	ldr	r3, [pc, #52]	; (181d0 <vTaskDelay+0x8c>)
   1819c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1819e:	2100      	movs	r1, #0
   181a0:	0020      	movs	r0, r4
   181a2:	4b0d      	ldr	r3, [pc, #52]	; (181d8 <vTaskDelay+0x94>)
   181a4:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   181a6:	4b0d      	ldr	r3, [pc, #52]	; (181dc <vTaskDelay+0x98>)
   181a8:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   181aa:	2800      	cmp	r0, #0
   181ac:	d101      	bne.n	181b2 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
   181ae:	4b0c      	ldr	r3, [pc, #48]	; (181e0 <vTaskDelay+0x9c>)
   181b0:	4798      	blx	r3
	}
   181b2:	bd10      	pop	{r4, pc}
   181b4:	20003b90 	.word	0x20003b90
   181b8:	00017e71 	.word	0x00017e71
   181bc:	20003b14 	.word	0x20003b14
   181c0:	00015351 	.word	0x00015351
   181c4:	200000c0 	.word	0x200000c0
   181c8:	00016325 	.word	0x00016325
   181cc:	00015341 	.word	0x00015341
   181d0:	00015cb5 	.word	0x00015cb5
   181d4:	00015505 	.word	0x00015505
   181d8:	00017acd 	.word	0x00017acd
   181dc:	00018019 	.word	0x00018019
   181e0:	000166f1 	.word	0x000166f1

000181e4 <vTaskSwitchContext>:
{
   181e4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   181e6:	4b33      	ldr	r3, [pc, #204]	; (182b4 <vTaskSwitchContext+0xd0>)
   181e8:	681b      	ldr	r3, [r3, #0]
   181ea:	2b00      	cmp	r3, #0
   181ec:	d125      	bne.n	1823a <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
   181ee:	2200      	movs	r2, #0
   181f0:	4b31      	ldr	r3, [pc, #196]	; (182b8 <vTaskSwitchContext+0xd4>)
   181f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   181f4:	4b31      	ldr	r3, [pc, #196]	; (182bc <vTaskSwitchContext+0xd8>)
   181f6:	681a      	ldr	r2, [r3, #0]
   181f8:	681b      	ldr	r3, [r3, #0]
   181fa:	6812      	ldr	r2, [r2, #0]
   181fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   181fe:	429a      	cmp	r2, r3
   18200:	d805      	bhi.n	1820e <vTaskSwitchContext+0x2a>
   18202:	4b2e      	ldr	r3, [pc, #184]	; (182bc <vTaskSwitchContext+0xd8>)
   18204:	6818      	ldr	r0, [r3, #0]
   18206:	6819      	ldr	r1, [r3, #0]
   18208:	3134      	adds	r1, #52	; 0x34
   1820a:	4b2d      	ldr	r3, [pc, #180]	; (182c0 <vTaskSwitchContext+0xdc>)
   1820c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1820e:	4b2d      	ldr	r3, [pc, #180]	; (182c4 <vTaskSwitchContext+0xe0>)
   18210:	681b      	ldr	r3, [r3, #0]
   18212:	009a      	lsls	r2, r3, #2
   18214:	18d2      	adds	r2, r2, r3
   18216:	0092      	lsls	r2, r2, #2
   18218:	492b      	ldr	r1, [pc, #172]	; (182c8 <vTaskSwitchContext+0xe4>)
   1821a:	5852      	ldr	r2, [r2, r1]
   1821c:	2a00      	cmp	r2, #0
   1821e:	d110      	bne.n	18242 <vTaskSwitchContext+0x5e>
   18220:	2b00      	cmp	r3, #0
   18222:	d008      	beq.n	18236 <vTaskSwitchContext+0x52>
   18224:	3b01      	subs	r3, #1
   18226:	009a      	lsls	r2, r3, #2
   18228:	18d2      	adds	r2, r2, r3
   1822a:	0092      	lsls	r2, r2, #2
   1822c:	5852      	ldr	r2, [r2, r1]
   1822e:	2a00      	cmp	r2, #0
   18230:	d107      	bne.n	18242 <vTaskSwitchContext+0x5e>
   18232:	2b00      	cmp	r3, #0
   18234:	d1f6      	bne.n	18224 <vTaskSwitchContext+0x40>
   18236:	b672      	cpsid	i
   18238:	e7fe      	b.n	18238 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
   1823a:	2201      	movs	r2, #1
   1823c:	4b1e      	ldr	r3, [pc, #120]	; (182b8 <vTaskSwitchContext+0xd4>)
   1823e:	601a      	str	r2, [r3, #0]
}
   18240:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   18242:	4821      	ldr	r0, [pc, #132]	; (182c8 <vTaskSwitchContext+0xe4>)
   18244:	009a      	lsls	r2, r3, #2
   18246:	18d1      	adds	r1, r2, r3
   18248:	0089      	lsls	r1, r1, #2
   1824a:	1841      	adds	r1, r0, r1
   1824c:	684c      	ldr	r4, [r1, #4]
   1824e:	6864      	ldr	r4, [r4, #4]
   18250:	604c      	str	r4, [r1, #4]
   18252:	18d2      	adds	r2, r2, r3
   18254:	0092      	lsls	r2, r2, #2
   18256:	3208      	adds	r2, #8
   18258:	1882      	adds	r2, r0, r2
   1825a:	4294      	cmp	r4, r2
   1825c:	d019      	beq.n	18292 <vTaskSwitchContext+0xae>
   1825e:	009a      	lsls	r2, r3, #2
   18260:	18d2      	adds	r2, r2, r3
   18262:	0092      	lsls	r2, r2, #2
   18264:	4918      	ldr	r1, [pc, #96]	; (182c8 <vTaskSwitchContext+0xe4>)
   18266:	188a      	adds	r2, r1, r2
   18268:	6852      	ldr	r2, [r2, #4]
   1826a:	68d1      	ldr	r1, [r2, #12]
   1826c:	4a13      	ldr	r2, [pc, #76]	; (182bc <vTaskSwitchContext+0xd8>)
   1826e:	6011      	str	r1, [r2, #0]
   18270:	4a14      	ldr	r2, [pc, #80]	; (182c4 <vTaskSwitchContext+0xe0>)
   18272:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
   18274:	2201      	movs	r2, #1
   18276:	4b15      	ldr	r3, [pc, #84]	; (182cc <vTaskSwitchContext+0xe8>)
   18278:	601a      	str	r2, [r3, #0]
   1827a:	4b15      	ldr	r3, [pc, #84]	; (182d0 <vTaskSwitchContext+0xec>)
   1827c:	4798      	blx	r3
   1827e:	4b15      	ldr	r3, [pc, #84]	; (182d4 <vTaskSwitchContext+0xf0>)
   18280:	4798      	blx	r3
   18282:	4b15      	ldr	r3, [pc, #84]	; (182d8 <vTaskSwitchContext+0xf4>)
   18284:	881b      	ldrh	r3, [r3, #0]
   18286:	4203      	tst	r3, r0
   18288:	d10b      	bne.n	182a2 <vTaskSwitchContext+0xbe>
   1828a:	2202      	movs	r2, #2
   1828c:	4b0f      	ldr	r3, [pc, #60]	; (182cc <vTaskSwitchContext+0xe8>)
   1828e:	601a      	str	r2, [r3, #0]
}
   18290:	e7d6      	b.n	18240 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   18292:	6860      	ldr	r0, [r4, #4]
   18294:	009a      	lsls	r2, r3, #2
   18296:	18d2      	adds	r2, r2, r3
   18298:	0092      	lsls	r2, r2, #2
   1829a:	490b      	ldr	r1, [pc, #44]	; (182c8 <vTaskSwitchContext+0xe4>)
   1829c:	188a      	adds	r2, r1, r2
   1829e:	6050      	str	r0, [r2, #4]
   182a0:	e7dd      	b.n	1825e <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
   182a2:	4b0b      	ldr	r3, [pc, #44]	; (182d0 <vTaskSwitchContext+0xec>)
   182a4:	4798      	blx	r3
   182a6:	4b0d      	ldr	r3, [pc, #52]	; (182dc <vTaskSwitchContext+0xf8>)
   182a8:	4798      	blx	r3
   182aa:	b2c0      	uxtb	r0, r0
   182ac:	4b0c      	ldr	r3, [pc, #48]	; (182e0 <vTaskSwitchContext+0xfc>)
   182ae:	4798      	blx	r3
   182b0:	e7eb      	b.n	1828a <vTaskSwitchContext+0xa6>
   182b2:	46c0      	nop			; (mov r8, r8)
   182b4:	20003b90 	.word	0x20003b90
   182b8:	20003c14 	.word	0x20003c14
   182bc:	20003b14 	.word	0x20003b14
   182c0:	00024025 	.word	0x00024025
   182c4:	20003b98 	.word	0x20003b98
   182c8:	20003b20 	.word	0x20003b20
   182cc:	20000c20 	.word	0x20000c20
   182d0:	00015505 	.word	0x00015505
   182d4:	00015351 	.word	0x00015351
   182d8:	200000c0 	.word	0x200000c0
   182dc:	00015341 	.word	0x00015341
   182e0:	000163cd 	.word	0x000163cd

000182e4 <vTaskSuspend>:
	{
   182e4:	b570      	push	{r4, r5, r6, lr}
   182e6:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
   182e8:	4b33      	ldr	r3, [pc, #204]	; (183b8 <vTaskSuspend+0xd4>)
   182ea:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   182ec:	1e2c      	subs	r4, r5, #0
   182ee:	d02b      	beq.n	18348 <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
   182f0:	4b32      	ldr	r3, [pc, #200]	; (183bc <vTaskSuspend+0xd8>)
   182f2:	4798      	blx	r3
   182f4:	4b32      	ldr	r3, [pc, #200]	; (183c0 <vTaskSuspend+0xdc>)
   182f6:	4798      	blx	r3
   182f8:	4b32      	ldr	r3, [pc, #200]	; (183c4 <vTaskSuspend+0xe0>)
   182fa:	881b      	ldrh	r3, [r3, #0]
   182fc:	4203      	tst	r3, r0
   182fe:	d126      	bne.n	1834e <vTaskSuspend+0x6a>
   18300:	0020      	movs	r0, r4
   18302:	4b31      	ldr	r3, [pc, #196]	; (183c8 <vTaskSuspend+0xe4>)
   18304:	4798      	blx	r3
   18306:	b2c0      	uxtb	r0, r0
   18308:	4b30      	ldr	r3, [pc, #192]	; (183cc <vTaskSuspend+0xe8>)
   1830a:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1830c:	1d25      	adds	r5, r4, #4
   1830e:	0028      	movs	r0, r5
   18310:	4b2f      	ldr	r3, [pc, #188]	; (183d0 <vTaskSuspend+0xec>)
   18312:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   18314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18316:	2b00      	cmp	r3, #0
   18318:	d003      	beq.n	18322 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1831a:	0020      	movs	r0, r4
   1831c:	3018      	adds	r0, #24
   1831e:	4b2c      	ldr	r3, [pc, #176]	; (183d0 <vTaskSuspend+0xec>)
   18320:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   18322:	0029      	movs	r1, r5
   18324:	482b      	ldr	r0, [pc, #172]	; (183d4 <vTaskSuspend+0xf0>)
   18326:	4b2c      	ldr	r3, [pc, #176]	; (183d8 <vTaskSuspend+0xf4>)
   18328:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1832a:	2350      	movs	r3, #80	; 0x50
   1832c:	5ce3      	ldrb	r3, [r4, r3]
   1832e:	2b01      	cmp	r3, #1
   18330:	d01d      	beq.n	1836e <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
   18332:	4b2a      	ldr	r3, [pc, #168]	; (183dc <vTaskSuspend+0xf8>)
   18334:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   18336:	4b2a      	ldr	r3, [pc, #168]	; (183e0 <vTaskSuspend+0xfc>)
   18338:	681b      	ldr	r3, [r3, #0]
   1833a:	2b00      	cmp	r3, #0
   1833c:	d11b      	bne.n	18376 <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
   1833e:	4b29      	ldr	r3, [pc, #164]	; (183e4 <vTaskSuspend+0x100>)
   18340:	681b      	ldr	r3, [r3, #0]
   18342:	429c      	cmp	r4, r3
   18344:	d01e      	beq.n	18384 <vTaskSuspend+0xa0>
	}
   18346:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   18348:	4b26      	ldr	r3, [pc, #152]	; (183e4 <vTaskSuspend+0x100>)
   1834a:	681c      	ldr	r4, [r3, #0]
   1834c:	e7d0      	b.n	182f0 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
   1834e:	0020      	movs	r0, r4
   18350:	4b1b      	ldr	r3, [pc, #108]	; (183c0 <vTaskSuspend+0xdc>)
   18352:	4798      	blx	r3
   18354:	4b1b      	ldr	r3, [pc, #108]	; (183c4 <vTaskSuspend+0xe0>)
   18356:	881b      	ldrh	r3, [r3, #0]
   18358:	4203      	tst	r3, r0
   1835a:	d0d1      	beq.n	18300 <vTaskSuspend+0x1c>
   1835c:	0020      	movs	r0, r4
   1835e:	4b1a      	ldr	r3, [pc, #104]	; (183c8 <vTaskSuspend+0xe4>)
   18360:	4798      	blx	r3
   18362:	b2c2      	uxtb	r2, r0
   18364:	2103      	movs	r1, #3
   18366:	208a      	movs	r0, #138	; 0x8a
   18368:	4b1f      	ldr	r3, [pc, #124]	; (183e8 <vTaskSuspend+0x104>)
   1836a:	4798      	blx	r3
   1836c:	e7c8      	b.n	18300 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1836e:	2200      	movs	r2, #0
   18370:	334f      	adds	r3, #79	; 0x4f
   18372:	54e2      	strb	r2, [r4, r3]
   18374:	e7dd      	b.n	18332 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
   18376:	4b10      	ldr	r3, [pc, #64]	; (183b8 <vTaskSuspend+0xd4>)
   18378:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
   1837a:	4b1c      	ldr	r3, [pc, #112]	; (183ec <vTaskSuspend+0x108>)
   1837c:	4798      	blx	r3
			taskEXIT_CRITICAL();
   1837e:	4b17      	ldr	r3, [pc, #92]	; (183dc <vTaskSuspend+0xf8>)
   18380:	4798      	blx	r3
   18382:	e7dc      	b.n	1833e <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
   18384:	4b16      	ldr	r3, [pc, #88]	; (183e0 <vTaskSuspend+0xfc>)
   18386:	681b      	ldr	r3, [r3, #0]
   18388:	2b00      	cmp	r3, #0
   1838a:	d008      	beq.n	1839e <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
   1838c:	4b18      	ldr	r3, [pc, #96]	; (183f0 <vTaskSuspend+0x10c>)
   1838e:	681b      	ldr	r3, [r3, #0]
   18390:	2b00      	cmp	r3, #0
   18392:	d001      	beq.n	18398 <vTaskSuspend+0xb4>
   18394:	b672      	cpsid	i
   18396:	e7fe      	b.n	18396 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   18398:	4b16      	ldr	r3, [pc, #88]	; (183f4 <vTaskSuspend+0x110>)
   1839a:	4798      	blx	r3
   1839c:	e7d3      	b.n	18346 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1839e:	4b0d      	ldr	r3, [pc, #52]	; (183d4 <vTaskSuspend+0xf0>)
   183a0:	681a      	ldr	r2, [r3, #0]
   183a2:	4b15      	ldr	r3, [pc, #84]	; (183f8 <vTaskSuspend+0x114>)
   183a4:	681b      	ldr	r3, [r3, #0]
   183a6:	429a      	cmp	r2, r3
   183a8:	d002      	beq.n	183b0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
   183aa:	4b14      	ldr	r3, [pc, #80]	; (183fc <vTaskSuspend+0x118>)
   183ac:	4798      	blx	r3
	}
   183ae:	e7ca      	b.n	18346 <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
   183b0:	2200      	movs	r2, #0
   183b2:	4b0c      	ldr	r3, [pc, #48]	; (183e4 <vTaskSuspend+0x100>)
   183b4:	601a      	str	r2, [r3, #0]
   183b6:	e7c6      	b.n	18346 <vTaskSuspend+0x62>
   183b8:	00016701 	.word	0x00016701
   183bc:	00015505 	.word	0x00015505
   183c0:	00015351 	.word	0x00015351
   183c4:	200000c0 	.word	0x200000c0
   183c8:	00015341 	.word	0x00015341
   183cc:	00015cb5 	.word	0x00015cb5
   183d0:	000165cf 	.word	0x000165cf
   183d4:	20003be8 	.word	0x20003be8
   183d8:	00016589 	.word	0x00016589
   183dc:	00016719 	.word	0x00016719
   183e0:	20003be4 	.word	0x20003be4
   183e4:	20003b14 	.word	0x20003b14
   183e8:	00016189 	.word	0x00016189
   183ec:	00017a21 	.word	0x00017a21
   183f0:	20003b90 	.word	0x20003b90
   183f4:	000166f1 	.word	0x000166f1
   183f8:	20003b84 	.word	0x20003b84
   183fc:	000181e5 	.word	0x000181e5

00018400 <vTaskPlaceOnEventList>:
{
   18400:	b510      	push	{r4, lr}
   18402:	000c      	movs	r4, r1
	configASSERT( pxEventList );
   18404:	2800      	cmp	r0, #0
   18406:	d101      	bne.n	1840c <vTaskPlaceOnEventList+0xc>
   18408:	b672      	cpsid	i
   1840a:	e7fe      	b.n	1840a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1840c:	4b04      	ldr	r3, [pc, #16]	; (18420 <vTaskPlaceOnEventList+0x20>)
   1840e:	6819      	ldr	r1, [r3, #0]
   18410:	3118      	adds	r1, #24
   18412:	4b04      	ldr	r3, [pc, #16]	; (18424 <vTaskPlaceOnEventList+0x24>)
   18414:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   18416:	2101      	movs	r1, #1
   18418:	0020      	movs	r0, r4
   1841a:	4b03      	ldr	r3, [pc, #12]	; (18428 <vTaskPlaceOnEventList+0x28>)
   1841c:	4798      	blx	r3
}
   1841e:	bd10      	pop	{r4, pc}
   18420:	20003b14 	.word	0x20003b14
   18424:	000165a1 	.word	0x000165a1
   18428:	00017acd 	.word	0x00017acd

0001842c <vTaskPlaceOnEventListRestricted>:
	{
   1842c:	b570      	push	{r4, r5, r6, lr}
   1842e:	000c      	movs	r4, r1
   18430:	0015      	movs	r5, r2
		configASSERT( pxEventList );
   18432:	2800      	cmp	r0, #0
   18434:	d031      	beq.n	1849a <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   18436:	4b1a      	ldr	r3, [pc, #104]	; (184a0 <vTaskPlaceOnEventListRestricted+0x74>)
   18438:	6819      	ldr	r1, [r3, #0]
   1843a:	3118      	adds	r1, #24
   1843c:	4b19      	ldr	r3, [pc, #100]	; (184a4 <vTaskPlaceOnEventListRestricted+0x78>)
   1843e:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
   18440:	2d00      	cmp	r5, #0
   18442:	d001      	beq.n	18448 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
   18444:	2401      	movs	r4, #1
   18446:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   18448:	4b15      	ldr	r3, [pc, #84]	; (184a0 <vTaskPlaceOnEventListRestricted+0x74>)
   1844a:	6818      	ldr	r0, [r3, #0]
   1844c:	4b16      	ldr	r3, [pc, #88]	; (184a8 <vTaskPlaceOnEventListRestricted+0x7c>)
   1844e:	4798      	blx	r3
   18450:	4b16      	ldr	r3, [pc, #88]	; (184ac <vTaskPlaceOnEventListRestricted+0x80>)
   18452:	881b      	ldrh	r3, [r3, #0]
   18454:	4203      	tst	r3, r0
   18456:	d00c      	beq.n	18472 <vTaskPlaceOnEventListRestricted+0x46>
   18458:	4b15      	ldr	r3, [pc, #84]	; (184b0 <vTaskPlaceOnEventListRestricted+0x84>)
   1845a:	6819      	ldr	r1, [r3, #0]
   1845c:	1861      	adds	r1, r4, r1
   1845e:	2088      	movs	r0, #136	; 0x88
   18460:	4b14      	ldr	r3, [pc, #80]	; (184b4 <vTaskPlaceOnEventListRestricted+0x88>)
   18462:	4798      	blx	r3
   18464:	4b0e      	ldr	r3, [pc, #56]	; (184a0 <vTaskPlaceOnEventListRestricted+0x74>)
   18466:	6818      	ldr	r0, [r3, #0]
   18468:	4b13      	ldr	r3, [pc, #76]	; (184b8 <vTaskPlaceOnEventListRestricted+0x8c>)
   1846a:	4798      	blx	r3
   1846c:	b2c0      	uxtb	r0, r0
   1846e:	4b13      	ldr	r3, [pc, #76]	; (184bc <vTaskPlaceOnEventListRestricted+0x90>)
   18470:	4798      	blx	r3
   18472:	4b13      	ldr	r3, [pc, #76]	; (184c0 <vTaskPlaceOnEventListRestricted+0x94>)
   18474:	4798      	blx	r3
   18476:	4b0c      	ldr	r3, [pc, #48]	; (184a8 <vTaskPlaceOnEventListRestricted+0x7c>)
   18478:	4798      	blx	r3
   1847a:	4b0c      	ldr	r3, [pc, #48]	; (184ac <vTaskPlaceOnEventListRestricted+0x80>)
   1847c:	881b      	ldrh	r3, [r3, #0]
   1847e:	4203      	tst	r3, r0
   18480:	d006      	beq.n	18490 <vTaskPlaceOnEventListRestricted+0x64>
   18482:	4b0f      	ldr	r3, [pc, #60]	; (184c0 <vTaskPlaceOnEventListRestricted+0x94>)
   18484:	4798      	blx	r3
   18486:	4b0c      	ldr	r3, [pc, #48]	; (184b8 <vTaskPlaceOnEventListRestricted+0x8c>)
   18488:	4798      	blx	r3
   1848a:	b2c0      	uxtb	r0, r0
   1848c:	4b0b      	ldr	r3, [pc, #44]	; (184bc <vTaskPlaceOnEventListRestricted+0x90>)
   1848e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   18490:	0029      	movs	r1, r5
   18492:	0020      	movs	r0, r4
   18494:	4b0b      	ldr	r3, [pc, #44]	; (184c4 <vTaskPlaceOnEventListRestricted+0x98>)
   18496:	4798      	blx	r3
	}
   18498:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   1849a:	b672      	cpsid	i
   1849c:	e7fe      	b.n	1849c <vTaskPlaceOnEventListRestricted+0x70>
   1849e:	46c0      	nop			; (mov r8, r8)
   184a0:	20003b14 	.word	0x20003b14
   184a4:	00016589 	.word	0x00016589
   184a8:	00015351 	.word	0x00015351
   184ac:	200000c0 	.word	0x200000c0
   184b0:	20003c10 	.word	0x20003c10
   184b4:	00016325 	.word	0x00016325
   184b8:	00015341 	.word	0x00015341
   184bc:	00015cb5 	.word	0x00015cb5
   184c0:	00015505 	.word	0x00015505
   184c4:	00017acd 	.word	0x00017acd

000184c8 <xTaskRemoveFromEventList>:
{
   184c8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   184ca:	68c3      	ldr	r3, [r0, #12]
   184cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   184ce:	2c00      	cmp	r4, #0
   184d0:	d02e      	beq.n	18530 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   184d2:	0025      	movs	r5, r4
   184d4:	3518      	adds	r5, #24
   184d6:	0028      	movs	r0, r5
   184d8:	4b1c      	ldr	r3, [pc, #112]	; (1854c <xTaskRemoveFromEventList+0x84>)
   184da:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   184dc:	4b1c      	ldr	r3, [pc, #112]	; (18550 <xTaskRemoveFromEventList+0x88>)
   184de:	681b      	ldr	r3, [r3, #0]
   184e0:	2b00      	cmp	r3, #0
   184e2:	d12e      	bne.n	18542 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   184e4:	1d25      	adds	r5, r4, #4
   184e6:	0028      	movs	r0, r5
   184e8:	4b18      	ldr	r3, [pc, #96]	; (1854c <xTaskRemoveFromEventList+0x84>)
   184ea:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   184ec:	0020      	movs	r0, r4
   184ee:	4b19      	ldr	r3, [pc, #100]	; (18554 <xTaskRemoveFromEventList+0x8c>)
   184f0:	4798      	blx	r3
   184f2:	4b19      	ldr	r3, [pc, #100]	; (18558 <xTaskRemoveFromEventList+0x90>)
   184f4:	881b      	ldrh	r3, [r3, #0]
   184f6:	4203      	tst	r3, r0
   184f8:	d11c      	bne.n	18534 <xTaskRemoveFromEventList+0x6c>
   184fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   184fc:	4a17      	ldr	r2, [pc, #92]	; (1855c <xTaskRemoveFromEventList+0x94>)
   184fe:	6812      	ldr	r2, [r2, #0]
   18500:	4293      	cmp	r3, r2
   18502:	d901      	bls.n	18508 <xTaskRemoveFromEventList+0x40>
   18504:	4a15      	ldr	r2, [pc, #84]	; (1855c <xTaskRemoveFromEventList+0x94>)
   18506:	6013      	str	r3, [r2, #0]
   18508:	0098      	lsls	r0, r3, #2
   1850a:	18c0      	adds	r0, r0, r3
   1850c:	0080      	lsls	r0, r0, #2
   1850e:	4b14      	ldr	r3, [pc, #80]	; (18560 <xTaskRemoveFromEventList+0x98>)
   18510:	1818      	adds	r0, r3, r0
   18512:	0029      	movs	r1, r5
   18514:	4b13      	ldr	r3, [pc, #76]	; (18564 <xTaskRemoveFromEventList+0x9c>)
   18516:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   18518:	4b13      	ldr	r3, [pc, #76]	; (18568 <xTaskRemoveFromEventList+0xa0>)
   1851a:	681b      	ldr	r3, [r3, #0]
   1851c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
   18520:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   18522:	429a      	cmp	r2, r3
   18524:	d903      	bls.n	1852e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
   18526:	2201      	movs	r2, #1
   18528:	4b10      	ldr	r3, [pc, #64]	; (1856c <xTaskRemoveFromEventList+0xa4>)
   1852a:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
   1852c:	3001      	adds	r0, #1
}
   1852e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
   18530:	b672      	cpsid	i
   18532:	e7fe      	b.n	18532 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
   18534:	0020      	movs	r0, r4
   18536:	4b0e      	ldr	r3, [pc, #56]	; (18570 <xTaskRemoveFromEventList+0xa8>)
   18538:	4798      	blx	r3
   1853a:	b2c0      	uxtb	r0, r0
   1853c:	4b0d      	ldr	r3, [pc, #52]	; (18574 <xTaskRemoveFromEventList+0xac>)
   1853e:	4798      	blx	r3
   18540:	e7db      	b.n	184fa <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   18542:	0029      	movs	r1, r5
   18544:	480c      	ldr	r0, [pc, #48]	; (18578 <xTaskRemoveFromEventList+0xb0>)
   18546:	4b07      	ldr	r3, [pc, #28]	; (18564 <xTaskRemoveFromEventList+0x9c>)
   18548:	4798      	blx	r3
   1854a:	e7e5      	b.n	18518 <xTaskRemoveFromEventList+0x50>
   1854c:	000165cf 	.word	0x000165cf
   18550:	20003b90 	.word	0x20003b90
   18554:	00015351 	.word	0x00015351
   18558:	200000c0 	.word	0x200000c0
   1855c:	20003b98 	.word	0x20003b98
   18560:	20003b20 	.word	0x20003b20
   18564:	00016589 	.word	0x00016589
   18568:	20003b14 	.word	0x20003b14
   1856c:	20003c14 	.word	0x20003c14
   18570:	00015341 	.word	0x00015341
   18574:	00016021 	.word	0x00016021
   18578:	20003bd0 	.word	0x20003bd0

0001857c <vTaskSetTimeOutState>:
{
   1857c:	b510      	push	{r4, lr}
   1857e:	1e04      	subs	r4, r0, #0
	configASSERT( pxTimeOut );
   18580:	d101      	bne.n	18586 <vTaskSetTimeOutState+0xa>
   18582:	b672      	cpsid	i
   18584:	e7fe      	b.n	18584 <vTaskSetTimeOutState+0x8>
	taskENTER_CRITICAL();
   18586:	4b05      	ldr	r3, [pc, #20]	; (1859c <vTaskSetTimeOutState+0x20>)
   18588:	4798      	blx	r3
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1858a:	4b05      	ldr	r3, [pc, #20]	; (185a0 <vTaskSetTimeOutState+0x24>)
   1858c:	681b      	ldr	r3, [r3, #0]
   1858e:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   18590:	4b04      	ldr	r3, [pc, #16]	; (185a4 <vTaskSetTimeOutState+0x28>)
   18592:	681b      	ldr	r3, [r3, #0]
   18594:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
   18596:	4b04      	ldr	r3, [pc, #16]	; (185a8 <vTaskSetTimeOutState+0x2c>)
   18598:	4798      	blx	r3
}
   1859a:	bd10      	pop	{r4, pc}
   1859c:	00016701 	.word	0x00016701
   185a0:	20003bcc 	.word	0x20003bcc
   185a4:	20003c10 	.word	0x20003c10
   185a8:	00016719 	.word	0x00016719

000185ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   185ac:	4b03      	ldr	r3, [pc, #12]	; (185bc <vTaskInternalSetTimeOutState+0x10>)
   185ae:	681b      	ldr	r3, [r3, #0]
   185b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   185b2:	4b03      	ldr	r3, [pc, #12]	; (185c0 <vTaskInternalSetTimeOutState+0x14>)
   185b4:	681b      	ldr	r3, [r3, #0]
   185b6:	6043      	str	r3, [r0, #4]
}
   185b8:	4770      	bx	lr
   185ba:	46c0      	nop			; (mov r8, r8)
   185bc:	20003bcc 	.word	0x20003bcc
   185c0:	20003c10 	.word	0x20003c10

000185c4 <xTaskCheckForTimeOut>:
{
   185c4:	b570      	push	{r4, r5, r6, lr}
   185c6:	0006      	movs	r6, r0
   185c8:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
   185ca:	2800      	cmp	r0, #0
   185cc:	d01b      	beq.n	18606 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
   185ce:	2900      	cmp	r1, #0
   185d0:	d01b      	beq.n	1860a <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
   185d2:	4b13      	ldr	r3, [pc, #76]	; (18620 <xTaskCheckForTimeOut+0x5c>)
   185d4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   185d6:	4b13      	ldr	r3, [pc, #76]	; (18624 <xTaskCheckForTimeOut+0x60>)
   185d8:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   185da:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   185dc:	682b      	ldr	r3, [r5, #0]
   185de:	1c58      	adds	r0, r3, #1
   185e0:	d01c      	beq.n	1861c <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   185e2:	4811      	ldr	r0, [pc, #68]	; (18628 <xTaskCheckForTimeOut+0x64>)
   185e4:	6800      	ldr	r0, [r0, #0]
   185e6:	6834      	ldr	r4, [r6, #0]
   185e8:	4284      	cmp	r4, r0
   185ea:	d002      	beq.n	185f2 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
   185ec:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   185ee:	428a      	cmp	r2, r1
   185f0:	d205      	bcs.n	185fe <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   185f2:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   185f4:	429a      	cmp	r2, r3
   185f6:	d30a      	bcc.n	1860e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
   185f8:	2300      	movs	r3, #0
   185fa:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   185fc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   185fe:	4b0b      	ldr	r3, [pc, #44]	; (1862c <xTaskCheckForTimeOut+0x68>)
   18600:	4798      	blx	r3
}
   18602:	0020      	movs	r0, r4
   18604:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
   18606:	b672      	cpsid	i
   18608:	e7fe      	b.n	18608 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   1860a:	b672      	cpsid	i
   1860c:	e7fe      	b.n	1860c <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
   1860e:	1a9b      	subs	r3, r3, r2
   18610:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   18612:	0030      	movs	r0, r6
   18614:	4b06      	ldr	r3, [pc, #24]	; (18630 <xTaskCheckForTimeOut+0x6c>)
   18616:	4798      	blx	r3
			xReturn = pdFALSE;
   18618:	2400      	movs	r4, #0
   1861a:	e7f0      	b.n	185fe <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
   1861c:	2400      	movs	r4, #0
   1861e:	e7ee      	b.n	185fe <xTaskCheckForTimeOut+0x3a>
   18620:	00016701 	.word	0x00016701
   18624:	20003c10 	.word	0x20003c10
   18628:	20003bcc 	.word	0x20003bcc
   1862c:	00016719 	.word	0x00016719
   18630:	000185ad 	.word	0x000185ad

00018634 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   18634:	2201      	movs	r2, #1
   18636:	4b01      	ldr	r3, [pc, #4]	; (1863c <vTaskMissedYield+0x8>)
   18638:	601a      	str	r2, [r3, #0]
}
   1863a:	4770      	bx	lr
   1863c:	20003c14 	.word	0x20003c14

00018640 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
   18640:	2800      	cmp	r0, #0
   18642:	d001      	beq.n	18648 <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
   18644:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
   18646:	4770      	bx	lr
			uxReturn = 0U;
   18648:	2000      	movs	r0, #0
		return uxReturn;
   1864a:	e7fc      	b.n	18646 <uxTaskGetTaskNumber+0x6>

0001864c <vTaskSetTaskNumber>:
		if( xTask != NULL )
   1864c:	2800      	cmp	r0, #0
   1864e:	d000      	beq.n	18652 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
   18650:	6401      	str	r1, [r0, #64]	; 0x40
	}
   18652:	4770      	bx	lr

00018654 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
   18654:	1e03      	subs	r3, r0, #0
   18656:	d00b      	beq.n	18670 <uxTaskGetStackHighWaterMark+0x1c>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   18658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1865a:	7813      	ldrb	r3, [r2, #0]
   1865c:	2ba5      	cmp	r3, #165	; 0xa5
   1865e:	d10a      	bne.n	18676 <uxTaskGetStackHighWaterMark+0x22>
   18660:	2000      	movs	r0, #0
			ulCount++;
   18662:	3001      	adds	r0, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   18664:	5c13      	ldrb	r3, [r2, r0]
   18666:	2ba5      	cmp	r3, #165	; 0xa5
   18668:	d0fb      	beq.n	18662 <uxTaskGetStackHighWaterMark+0xe>
		return uxReturn;
   1866a:	0380      	lsls	r0, r0, #14
   1866c:	0c00      	lsrs	r0, r0, #16
	}
   1866e:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
   18670:	4b02      	ldr	r3, [pc, #8]	; (1867c <uxTaskGetStackHighWaterMark+0x28>)
   18672:	681b      	ldr	r3, [r3, #0]
   18674:	e7f0      	b.n	18658 <uxTaskGetStackHighWaterMark+0x4>
	uint32_t ulCount = 0U;
   18676:	2000      	movs	r0, #0
   18678:	e7f7      	b.n	1866a <uxTaskGetStackHighWaterMark+0x16>
   1867a:	46c0      	nop			; (mov r8, r8)
   1867c:	20003b14 	.word	0x20003b14

00018680 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
   18680:	4b01      	ldr	r3, [pc, #4]	; (18688 <xTaskGetCurrentTaskHandle+0x8>)
   18682:	6818      	ldr	r0, [r3, #0]
	}
   18684:	4770      	bx	lr
   18686:	46c0      	nop			; (mov r8, r8)
   18688:	20003b14 	.word	0x20003b14

0001868c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   1868c:	4b05      	ldr	r3, [pc, #20]	; (186a4 <xTaskGetSchedulerState+0x18>)
   1868e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
   18690:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
   18692:	2b00      	cmp	r3, #0
   18694:	d004      	beq.n	186a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18696:	4b04      	ldr	r3, [pc, #16]	; (186a8 <xTaskGetSchedulerState+0x1c>)
   18698:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   1869a:	4243      	negs	r3, r0
   1869c:	4158      	adcs	r0, r3
   1869e:	0040      	lsls	r0, r0, #1
	}
   186a0:	4770      	bx	lr
   186a2:	46c0      	nop			; (mov r8, r8)
   186a4:	20003be4 	.word	0x20003be4
   186a8:	20003b90 	.word	0x20003b90

000186ac <xTaskPriorityInherit>:
	{
   186ac:	b570      	push	{r4, r5, r6, lr}
   186ae:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   186b0:	d100      	bne.n	186b4 <xTaskPriorityInherit+0x8>
   186b2:	e06d      	b.n	18790 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   186b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   186b6:	4b37      	ldr	r3, [pc, #220]	; (18794 <xTaskPriorityInherit+0xe8>)
   186b8:	681b      	ldr	r3, [r3, #0]
   186ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   186bc:	429a      	cmp	r2, r3
   186be:	d25f      	bcs.n	18780 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   186c0:	6983      	ldr	r3, [r0, #24]
   186c2:	2b00      	cmp	r3, #0
   186c4:	db05      	blt.n	186d2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   186c6:	4b33      	ldr	r3, [pc, #204]	; (18794 <xTaskPriorityInherit+0xe8>)
   186c8:	681b      	ldr	r3, [r3, #0]
   186ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   186cc:	2305      	movs	r3, #5
   186ce:	1a5b      	subs	r3, r3, r1
   186d0:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   186d2:	0093      	lsls	r3, r2, #2
   186d4:	189b      	adds	r3, r3, r2
   186d6:	009b      	lsls	r3, r3, #2
   186d8:	4a2f      	ldr	r2, [pc, #188]	; (18798 <xTaskPriorityInherit+0xec>)
   186da:	18d3      	adds	r3, r2, r3
   186dc:	6962      	ldr	r2, [r4, #20]
   186de:	429a      	cmp	r2, r3
   186e0:	d028      	beq.n	18734 <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   186e2:	4b2c      	ldr	r3, [pc, #176]	; (18794 <xTaskPriorityInherit+0xe8>)
   186e4:	681b      	ldr	r3, [r3, #0]
   186e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   186e8:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   186ea:	0020      	movs	r0, r4
   186ec:	4b2b      	ldr	r3, [pc, #172]	; (1879c <xTaskPriorityInherit+0xf0>)
   186ee:	4798      	blx	r3
   186f0:	0003      	movs	r3, r0
   186f2:	4a2b      	ldr	r2, [pc, #172]	; (187a0 <xTaskPriorityInherit+0xf4>)
   186f4:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
   186f6:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   186f8:	421a      	tst	r2, r3
   186fa:	d048      	beq.n	1878e <xTaskPriorityInherit+0xe2>
   186fc:	0020      	movs	r0, r4
   186fe:	4d29      	ldr	r5, [pc, #164]	; (187a4 <xTaskPriorityInherit+0xf8>)
   18700:	47a8      	blx	r5
   18702:	0006      	movs	r6, r0
   18704:	0020      	movs	r0, r4
   18706:	47a8      	blx	r5
   18708:	b2c1      	uxtb	r1, r0
   1870a:	2003      	movs	r0, #3
   1870c:	4b26      	ldr	r3, [pc, #152]	; (187a8 <xTaskPriorityInherit+0xfc>)
   1870e:	4798      	blx	r3
   18710:	0003      	movs	r3, r0
   18712:	b2f2      	uxtb	r2, r6
   18714:	2103      	movs	r1, #3
   18716:	208e      	movs	r0, #142	; 0x8e
   18718:	4e24      	ldr	r6, [pc, #144]	; (187ac <xTaskPriorityInherit+0x100>)
   1871a:	47b0      	blx	r6
   1871c:	0020      	movs	r0, r4
   1871e:	47a8      	blx	r5
   18720:	4b1c      	ldr	r3, [pc, #112]	; (18794 <xTaskPriorityInherit+0xe8>)
   18722:	681b      	ldr	r3, [r3, #0]
   18724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18726:	b2d2      	uxtb	r2, r2
   18728:	b2c1      	uxtb	r1, r0
   1872a:	2003      	movs	r0, #3
   1872c:	4b20      	ldr	r3, [pc, #128]	; (187b0 <xTaskPriorityInherit+0x104>)
   1872e:	4798      	blx	r3
				xReturn = pdTRUE;
   18730:	2001      	movs	r0, #1
   18732:	e02c      	b.n	1878e <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   18734:	1d25      	adds	r5, r4, #4
   18736:	0028      	movs	r0, r5
   18738:	4b1e      	ldr	r3, [pc, #120]	; (187b4 <xTaskPriorityInherit+0x108>)
   1873a:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1873c:	4b15      	ldr	r3, [pc, #84]	; (18794 <xTaskPriorityInherit+0xe8>)
   1873e:	681b      	ldr	r3, [r3, #0]
   18740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18742:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   18744:	0020      	movs	r0, r4
   18746:	4b15      	ldr	r3, [pc, #84]	; (1879c <xTaskPriorityInherit+0xf0>)
   18748:	4798      	blx	r3
   1874a:	4b15      	ldr	r3, [pc, #84]	; (187a0 <xTaskPriorityInherit+0xf4>)
   1874c:	881b      	ldrh	r3, [r3, #0]
   1874e:	4203      	tst	r3, r0
   18750:	d10f      	bne.n	18772 <xTaskPriorityInherit+0xc6>
   18752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18754:	4a18      	ldr	r2, [pc, #96]	; (187b8 <xTaskPriorityInherit+0x10c>)
   18756:	6812      	ldr	r2, [r2, #0]
   18758:	4293      	cmp	r3, r2
   1875a:	d901      	bls.n	18760 <xTaskPriorityInherit+0xb4>
   1875c:	4a16      	ldr	r2, [pc, #88]	; (187b8 <xTaskPriorityInherit+0x10c>)
   1875e:	6013      	str	r3, [r2, #0]
   18760:	0098      	lsls	r0, r3, #2
   18762:	18c0      	adds	r0, r0, r3
   18764:	0080      	lsls	r0, r0, #2
   18766:	4b0c      	ldr	r3, [pc, #48]	; (18798 <xTaskPriorityInherit+0xec>)
   18768:	1818      	adds	r0, r3, r0
   1876a:	0029      	movs	r1, r5
   1876c:	4b13      	ldr	r3, [pc, #76]	; (187bc <xTaskPriorityInherit+0x110>)
   1876e:	4798      	blx	r3
   18770:	e7bb      	b.n	186ea <xTaskPriorityInherit+0x3e>
   18772:	0020      	movs	r0, r4
   18774:	4b0b      	ldr	r3, [pc, #44]	; (187a4 <xTaskPriorityInherit+0xf8>)
   18776:	4798      	blx	r3
   18778:	b2c0      	uxtb	r0, r0
   1877a:	4b11      	ldr	r3, [pc, #68]	; (187c0 <xTaskPriorityInherit+0x114>)
   1877c:	4798      	blx	r3
   1877e:	e7e8      	b.n	18752 <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   18780:	4b04      	ldr	r3, [pc, #16]	; (18794 <xTaskPriorityInherit+0xe8>)
   18782:	681b      	ldr	r3, [r3, #0]
   18784:	6c40      	ldr	r0, [r0, #68]	; 0x44
   18786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18788:	4298      	cmp	r0, r3
   1878a:	4180      	sbcs	r0, r0
   1878c:	4240      	negs	r0, r0
	}
   1878e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
   18790:	2000      	movs	r0, #0
   18792:	e7fc      	b.n	1878e <xTaskPriorityInherit+0xe2>
   18794:	20003b14 	.word	0x20003b14
   18798:	20003b20 	.word	0x20003b20
   1879c:	00015351 	.word	0x00015351
   187a0:	200000c0 	.word	0x200000c0
   187a4:	00015341 	.word	0x00015341
   187a8:	00015c01 	.word	0x00015c01
   187ac:	0001624d 	.word	0x0001624d
   187b0:	00015ba9 	.word	0x00015ba9
   187b4:	000165cf 	.word	0x000165cf
   187b8:	20003b98 	.word	0x20003b98
   187bc:	00016589 	.word	0x00016589
   187c0:	00016021 	.word	0x00016021

000187c4 <xTaskPriorityDisinherit>:
	{
   187c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187c6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   187c8:	d05a      	beq.n	18880 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
   187ca:	4b2f      	ldr	r3, [pc, #188]	; (18888 <xTaskPriorityDisinherit+0xc4>)
   187cc:	681b      	ldr	r3, [r3, #0]
   187ce:	4298      	cmp	r0, r3
   187d0:	d001      	beq.n	187d6 <xTaskPriorityDisinherit+0x12>
   187d2:	b672      	cpsid	i
   187d4:	e7fe      	b.n	187d4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
   187d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   187d8:	2b00      	cmp	r3, #0
   187da:	d101      	bne.n	187e0 <xTaskPriorityDisinherit+0x1c>
   187dc:	b672      	cpsid	i
   187de:	e7fe      	b.n	187de <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
   187e0:	3b01      	subs	r3, #1
   187e2:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   187e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   187e6:	6c41      	ldr	r1, [r0, #68]	; 0x44
   187e8:	428a      	cmp	r2, r1
   187ea:	d04b      	beq.n	18884 <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
   187ec:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   187ee:	2b00      	cmp	r3, #0
   187f0:	d145      	bne.n	1887e <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   187f2:	1d25      	adds	r5, r4, #4
   187f4:	0028      	movs	r0, r5
   187f6:	4b25      	ldr	r3, [pc, #148]	; (1888c <xTaskPriorityDisinherit+0xc8>)
   187f8:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   187fa:	0020      	movs	r0, r4
   187fc:	4b24      	ldr	r3, [pc, #144]	; (18890 <xTaskPriorityDisinherit+0xcc>)
   187fe:	4798      	blx	r3
   18800:	4b24      	ldr	r3, [pc, #144]	; (18894 <xTaskPriorityDisinherit+0xd0>)
   18802:	881b      	ldrh	r3, [r3, #0]
   18804:	4203      	tst	r3, r0
   18806:	d018      	beq.n	1883a <xTaskPriorityDisinherit+0x76>
   18808:	0020      	movs	r0, r4
   1880a:	4e23      	ldr	r6, [pc, #140]	; (18898 <xTaskPriorityDisinherit+0xd4>)
   1880c:	47b0      	blx	r6
   1880e:	0007      	movs	r7, r0
   18810:	0020      	movs	r0, r4
   18812:	47b0      	blx	r6
   18814:	b2c1      	uxtb	r1, r0
   18816:	2003      	movs	r0, #3
   18818:	4b20      	ldr	r3, [pc, #128]	; (1889c <xTaskPriorityDisinherit+0xd8>)
   1881a:	4798      	blx	r3
   1881c:	0003      	movs	r3, r0
   1881e:	b2fa      	uxtb	r2, r7
   18820:	2103      	movs	r1, #3
   18822:	208f      	movs	r0, #143	; 0x8f
   18824:	4f1e      	ldr	r7, [pc, #120]	; (188a0 <xTaskPriorityDisinherit+0xdc>)
   18826:	47b8      	blx	r7
   18828:	0020      	movs	r0, r4
   1882a:	47b0      	blx	r6
   1882c:	2344      	movs	r3, #68	; 0x44
   1882e:	18e3      	adds	r3, r4, r3
   18830:	781a      	ldrb	r2, [r3, #0]
   18832:	b2c1      	uxtb	r1, r0
   18834:	2003      	movs	r0, #3
   18836:	4b1b      	ldr	r3, [pc, #108]	; (188a4 <xTaskPriorityDisinherit+0xe0>)
   18838:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1883a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1883c:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1883e:	2305      	movs	r3, #5
   18840:	1a9b      	subs	r3, r3, r2
   18842:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   18844:	0020      	movs	r0, r4
   18846:	4b12      	ldr	r3, [pc, #72]	; (18890 <xTaskPriorityDisinherit+0xcc>)
   18848:	4798      	blx	r3
   1884a:	4b12      	ldr	r3, [pc, #72]	; (18894 <xTaskPriorityDisinherit+0xd0>)
   1884c:	881b      	ldrh	r3, [r3, #0]
   1884e:	4203      	tst	r3, r0
   18850:	d005      	beq.n	1885e <xTaskPriorityDisinherit+0x9a>
   18852:	0020      	movs	r0, r4
   18854:	4b10      	ldr	r3, [pc, #64]	; (18898 <xTaskPriorityDisinherit+0xd4>)
   18856:	4798      	blx	r3
   18858:	b2c0      	uxtb	r0, r0
   1885a:	4b13      	ldr	r3, [pc, #76]	; (188a8 <xTaskPriorityDisinherit+0xe4>)
   1885c:	4798      	blx	r3
   1885e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18860:	4a12      	ldr	r2, [pc, #72]	; (188ac <xTaskPriorityDisinherit+0xe8>)
   18862:	6812      	ldr	r2, [r2, #0]
   18864:	4293      	cmp	r3, r2
   18866:	d901      	bls.n	1886c <xTaskPriorityDisinherit+0xa8>
   18868:	4a10      	ldr	r2, [pc, #64]	; (188ac <xTaskPriorityDisinherit+0xe8>)
   1886a:	6013      	str	r3, [r2, #0]
   1886c:	0098      	lsls	r0, r3, #2
   1886e:	18c0      	adds	r0, r0, r3
   18870:	0080      	lsls	r0, r0, #2
   18872:	4b0f      	ldr	r3, [pc, #60]	; (188b0 <xTaskPriorityDisinherit+0xec>)
   18874:	1818      	adds	r0, r3, r0
   18876:	0029      	movs	r1, r5
   18878:	4b0e      	ldr	r3, [pc, #56]	; (188b4 <xTaskPriorityDisinherit+0xf0>)
   1887a:	4798      	blx	r3
					xReturn = pdTRUE;
   1887c:	2001      	movs	r0, #1
	}
   1887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
   18880:	2000      	movs	r0, #0
   18882:	e7fc      	b.n	1887e <xTaskPriorityDisinherit+0xba>
   18884:	2000      	movs	r0, #0
   18886:	e7fa      	b.n	1887e <xTaskPriorityDisinherit+0xba>
   18888:	20003b14 	.word	0x20003b14
   1888c:	000165cf 	.word	0x000165cf
   18890:	00015351 	.word	0x00015351
   18894:	200000c0 	.word	0x200000c0
   18898:	00015341 	.word	0x00015341
   1889c:	00015c01 	.word	0x00015c01
   188a0:	0001624d 	.word	0x0001624d
   188a4:	00015ba9 	.word	0x00015ba9
   188a8:	00016021 	.word	0x00016021
   188ac:	20003b98 	.word	0x20003b98
   188b0:	20003b20 	.word	0x20003b20
   188b4:	00016589 	.word	0x00016589

000188b8 <vTaskPriorityDisinheritAfterTimeout>:
	{
   188b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188ba:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   188bc:	d00d      	beq.n	188da <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   188be:	6c83      	ldr	r3, [r0, #72]	; 0x48
   188c0:	2b00      	cmp	r3, #0
   188c2:	d101      	bne.n	188c8 <vTaskPriorityDisinheritAfterTimeout+0x10>
   188c4:	b672      	cpsid	i
   188c6:	e7fe      	b.n	188c6 <vTaskPriorityDisinheritAfterTimeout+0xe>
   188c8:	6c45      	ldr	r5, [r0, #68]	; 0x44
   188ca:	428d      	cmp	r5, r1
   188cc:	d200      	bcs.n	188d0 <vTaskPriorityDisinheritAfterTimeout+0x18>
   188ce:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   188d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   188d2:	42aa      	cmp	r2, r5
   188d4:	d001      	beq.n	188da <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   188d6:	2b01      	cmp	r3, #1
   188d8:	d000      	beq.n	188dc <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
   188da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
   188dc:	4b2b      	ldr	r3, [pc, #172]	; (1898c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
   188de:	681b      	ldr	r3, [r3, #0]
   188e0:	429c      	cmp	r4, r3
   188e2:	d101      	bne.n	188e8 <vTaskPriorityDisinheritAfterTimeout+0x30>
   188e4:	b672      	cpsid	i
   188e6:	e7fe      	b.n	188e6 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   188e8:	0020      	movs	r0, r4
   188ea:	4b29      	ldr	r3, [pc, #164]	; (18990 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   188ec:	4798      	blx	r3
   188ee:	4b29      	ldr	r3, [pc, #164]	; (18994 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   188f0:	881b      	ldrh	r3, [r3, #0]
   188f2:	4203      	tst	r3, r0
   188f4:	d018      	beq.n	18928 <vTaskPriorityDisinheritAfterTimeout+0x70>
   188f6:	0020      	movs	r0, r4
   188f8:	4e27      	ldr	r6, [pc, #156]	; (18998 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   188fa:	47b0      	blx	r6
   188fc:	0007      	movs	r7, r0
   188fe:	0020      	movs	r0, r4
   18900:	47b0      	blx	r6
   18902:	b2c1      	uxtb	r1, r0
   18904:	2003      	movs	r0, #3
   18906:	4b25      	ldr	r3, [pc, #148]	; (1899c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   18908:	4798      	blx	r3
   1890a:	0003      	movs	r3, r0
   1890c:	b2fa      	uxtb	r2, r7
   1890e:	2103      	movs	r1, #3
   18910:	208f      	movs	r0, #143	; 0x8f
   18912:	4f23      	ldr	r7, [pc, #140]	; (189a0 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   18914:	47b8      	blx	r7
   18916:	0020      	movs	r0, r4
   18918:	47b0      	blx	r6
   1891a:	2344      	movs	r3, #68	; 0x44
   1891c:	18e3      	adds	r3, r4, r3
   1891e:	781a      	ldrb	r2, [r3, #0]
   18920:	b2c1      	uxtb	r1, r0
   18922:	2003      	movs	r0, #3
   18924:	4b1f      	ldr	r3, [pc, #124]	; (189a4 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   18926:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   18928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
   1892a:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1892c:	69a3      	ldr	r3, [r4, #24]
   1892e:	2b00      	cmp	r3, #0
   18930:	db02      	blt.n	18938 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18932:	2205      	movs	r2, #5
   18934:	1b55      	subs	r5, r2, r5
   18936:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   18938:	008b      	lsls	r3, r1, #2
   1893a:	185b      	adds	r3, r3, r1
   1893c:	009b      	lsls	r3, r3, #2
   1893e:	4a1a      	ldr	r2, [pc, #104]	; (189a8 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   18940:	18d3      	adds	r3, r2, r3
   18942:	6962      	ldr	r2, [r4, #20]
   18944:	429a      	cmp	r2, r3
   18946:	d1c8      	bne.n	188da <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   18948:	1d25      	adds	r5, r4, #4
   1894a:	0028      	movs	r0, r5
   1894c:	4b17      	ldr	r3, [pc, #92]	; (189ac <vTaskPriorityDisinheritAfterTimeout+0xf4>)
   1894e:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
   18950:	0020      	movs	r0, r4
   18952:	4b0f      	ldr	r3, [pc, #60]	; (18990 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   18954:	4798      	blx	r3
   18956:	4b0f      	ldr	r3, [pc, #60]	; (18994 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   18958:	881b      	ldrh	r3, [r3, #0]
   1895a:	4203      	tst	r3, r0
   1895c:	d005      	beq.n	1896a <vTaskPriorityDisinheritAfterTimeout+0xb2>
   1895e:	0020      	movs	r0, r4
   18960:	4b0d      	ldr	r3, [pc, #52]	; (18998 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   18962:	4798      	blx	r3
   18964:	b2c0      	uxtb	r0, r0
   18966:	4b12      	ldr	r3, [pc, #72]	; (189b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
   18968:	4798      	blx	r3
   1896a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1896c:	4a11      	ldr	r2, [pc, #68]	; (189b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   1896e:	6812      	ldr	r2, [r2, #0]
   18970:	4293      	cmp	r3, r2
   18972:	d901      	bls.n	18978 <vTaskPriorityDisinheritAfterTimeout+0xc0>
   18974:	4a0f      	ldr	r2, [pc, #60]	; (189b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   18976:	6013      	str	r3, [r2, #0]
   18978:	0098      	lsls	r0, r3, #2
   1897a:	18c0      	adds	r0, r0, r3
   1897c:	0080      	lsls	r0, r0, #2
   1897e:	4b0a      	ldr	r3, [pc, #40]	; (189a8 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   18980:	1818      	adds	r0, r3, r0
   18982:	0029      	movs	r1, r5
   18984:	4b0c      	ldr	r3, [pc, #48]	; (189b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
   18986:	4798      	blx	r3
	}
   18988:	e7a7      	b.n	188da <vTaskPriorityDisinheritAfterTimeout+0x22>
   1898a:	46c0      	nop			; (mov r8, r8)
   1898c:	20003b14 	.word	0x20003b14
   18990:	00015351 	.word	0x00015351
   18994:	200000c0 	.word	0x200000c0
   18998:	00015341 	.word	0x00015341
   1899c:	00015c01 	.word	0x00015c01
   189a0:	0001624d 	.word	0x0001624d
   189a4:	00015ba9 	.word	0x00015ba9
   189a8:	20003b20 	.word	0x20003b20
   189ac:	000165cf 	.word	0x000165cf
   189b0:	00016021 	.word	0x00016021
   189b4:	20003b98 	.word	0x20003b98
   189b8:	00016589 	.word	0x00016589

000189bc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   189bc:	4b05      	ldr	r3, [pc, #20]	; (189d4 <pvTaskIncrementMutexHeldCount+0x18>)
   189be:	681b      	ldr	r3, [r3, #0]
   189c0:	2b00      	cmp	r3, #0
   189c2:	d004      	beq.n	189ce <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
   189c4:	4b03      	ldr	r3, [pc, #12]	; (189d4 <pvTaskIncrementMutexHeldCount+0x18>)
   189c6:	681a      	ldr	r2, [r3, #0]
   189c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
   189ca:	3301      	adds	r3, #1
   189cc:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
   189ce:	4b01      	ldr	r3, [pc, #4]	; (189d4 <pvTaskIncrementMutexHeldCount+0x18>)
   189d0:	6818      	ldr	r0, [r3, #0]
	}
   189d2:	4770      	bx	lr
   189d4:	20003b14 	.word	0x20003b14

000189d8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   189d8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   189da:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   189dc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   189de:	4291      	cmp	r1, r2
   189e0:	d80b      	bhi.n	189fa <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   189e2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   189e4:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   189e6:	6983      	ldr	r3, [r0, #24]
   189e8:	429a      	cmp	r2, r3
   189ea:	d211      	bcs.n	18a10 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   189ec:	1d01      	adds	r1, r0, #4
   189ee:	4b09      	ldr	r3, [pc, #36]	; (18a14 <prvInsertTimerInActiveList+0x3c>)
   189f0:	6818      	ldr	r0, [r3, #0]
   189f2:	4b09      	ldr	r3, [pc, #36]	; (18a18 <prvInsertTimerInActiveList+0x40>)
   189f4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   189f6:	2400      	movs	r4, #0
   189f8:	e00a      	b.n	18a10 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   189fa:	429a      	cmp	r2, r3
   189fc:	d202      	bcs.n	18a04 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   189fe:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   18a00:	4299      	cmp	r1, r3
   18a02:	d205      	bcs.n	18a10 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   18a04:	1d01      	adds	r1, r0, #4
   18a06:	4b05      	ldr	r3, [pc, #20]	; (18a1c <prvInsertTimerInActiveList+0x44>)
   18a08:	6818      	ldr	r0, [r3, #0]
   18a0a:	4b03      	ldr	r3, [pc, #12]	; (18a18 <prvInsertTimerInActiveList+0x40>)
   18a0c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   18a0e:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
   18a10:	0020      	movs	r0, r4
   18a12:	bd10      	pop	{r4, pc}
   18a14:	20003c1c 	.word	0x20003c1c
   18a18:	000165a1 	.word	0x000165a1
   18a1c:	20003c18 	.word	0x20003c18

00018a20 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   18a20:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   18a22:	4b0e      	ldr	r3, [pc, #56]	; (18a5c <prvCheckForValidListAndQueue+0x3c>)
   18a24:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   18a26:	4b0e      	ldr	r3, [pc, #56]	; (18a60 <prvCheckForValidListAndQueue+0x40>)
   18a28:	681b      	ldr	r3, [r3, #0]
   18a2a:	2b00      	cmp	r3, #0
   18a2c:	d002      	beq.n	18a34 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   18a2e:	4b0d      	ldr	r3, [pc, #52]	; (18a64 <prvCheckForValidListAndQueue+0x44>)
   18a30:	4798      	blx	r3
}
   18a32:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   18a34:	4d0c      	ldr	r5, [pc, #48]	; (18a68 <prvCheckForValidListAndQueue+0x48>)
   18a36:	0028      	movs	r0, r5
   18a38:	4e0c      	ldr	r6, [pc, #48]	; (18a6c <prvCheckForValidListAndQueue+0x4c>)
   18a3a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   18a3c:	4c0c      	ldr	r4, [pc, #48]	; (18a70 <prvCheckForValidListAndQueue+0x50>)
   18a3e:	0020      	movs	r0, r4
   18a40:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   18a42:	4b0c      	ldr	r3, [pc, #48]	; (18a74 <prvCheckForValidListAndQueue+0x54>)
   18a44:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   18a46:	4b0c      	ldr	r3, [pc, #48]	; (18a78 <prvCheckForValidListAndQueue+0x58>)
   18a48:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   18a4a:	2200      	movs	r2, #0
   18a4c:	210c      	movs	r1, #12
   18a4e:	2005      	movs	r0, #5
   18a50:	4b0a      	ldr	r3, [pc, #40]	; (18a7c <prvCheckForValidListAndQueue+0x5c>)
   18a52:	4798      	blx	r3
   18a54:	4b02      	ldr	r3, [pc, #8]	; (18a60 <prvCheckForValidListAndQueue+0x40>)
   18a56:	6018      	str	r0, [r3, #0]
   18a58:	e7e9      	b.n	18a2e <prvCheckForValidListAndQueue+0xe>
   18a5a:	46c0      	nop			; (mov r8, r8)
   18a5c:	00016701 	.word	0x00016701
   18a60:	20003c4c 	.word	0x20003c4c
   18a64:	00016719 	.word	0x00016719
   18a68:	20003c20 	.word	0x20003c20
   18a6c:	0001656d 	.word	0x0001656d
   18a70:	20003c34 	.word	0x20003c34
   18a74:	20003c18 	.word	0x20003c18
   18a78:	20003c1c 	.word	0x20003c1c
   18a7c:	00016b7d 	.word	0x00016b7d

00018a80 <xTimerCreateTimerTask>:
{
   18a80:	b510      	push	{r4, lr}
   18a82:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   18a84:	4b0a      	ldr	r3, [pc, #40]	; (18ab0 <xTimerCreateTimerTask+0x30>)
   18a86:	4798      	blx	r3
	if( xTimerQueue != NULL )
   18a88:	4b0a      	ldr	r3, [pc, #40]	; (18ab4 <xTimerCreateTimerTask+0x34>)
   18a8a:	681b      	ldr	r3, [r3, #0]
   18a8c:	2b00      	cmp	r3, #0
   18a8e:	d00d      	beq.n	18aac <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
   18a90:	4b09      	ldr	r3, [pc, #36]	; (18ab8 <xTimerCreateTimerTask+0x38>)
   18a92:	9301      	str	r3, [sp, #4]
   18a94:	2302      	movs	r3, #2
   18a96:	9300      	str	r3, [sp, #0]
   18a98:	2300      	movs	r3, #0
   18a9a:	2280      	movs	r2, #128	; 0x80
   18a9c:	4907      	ldr	r1, [pc, #28]	; (18abc <xTimerCreateTimerTask+0x3c>)
   18a9e:	4808      	ldr	r0, [pc, #32]	; (18ac0 <xTimerCreateTimerTask+0x40>)
   18aa0:	4c08      	ldr	r4, [pc, #32]	; (18ac4 <xTimerCreateTimerTask+0x44>)
   18aa2:	47a0      	blx	r4
	configASSERT( xReturn );
   18aa4:	2800      	cmp	r0, #0
   18aa6:	d001      	beq.n	18aac <xTimerCreateTimerTask+0x2c>
}
   18aa8:	b002      	add	sp, #8
   18aaa:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   18aac:	b672      	cpsid	i
   18aae:	e7fe      	b.n	18aae <xTimerCreateTimerTask+0x2e>
   18ab0:	00018a21 	.word	0x00018a21
   18ab4:	20003c4c 	.word	0x20003c4c
   18ab8:	20003c50 	.word	0x20003c50
   18abc:	00029574 	.word	0x00029574
   18ac0:	00018bed 	.word	0x00018bed
   18ac4:	00017b55 	.word	0x00017b55

00018ac8 <xTimerGenericCommand>:
{
   18ac8:	b530      	push	{r4, r5, lr}
   18aca:	b085      	sub	sp, #20
   18acc:	0004      	movs	r4, r0
   18ace:	001d      	movs	r5, r3
	configASSERT( xTimer );
   18ad0:	2800      	cmp	r0, #0
   18ad2:	d014      	beq.n	18afe <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
   18ad4:	4b13      	ldr	r3, [pc, #76]	; (18b24 <xTimerGenericCommand+0x5c>)
   18ad6:	6818      	ldr	r0, [r3, #0]
   18ad8:	2800      	cmp	r0, #0
   18ada:	d021      	beq.n	18b20 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
   18adc:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   18ade:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   18ae0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   18ae2:	2905      	cmp	r1, #5
   18ae4:	dc15      	bgt.n	18b12 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   18ae6:	4b10      	ldr	r3, [pc, #64]	; (18b28 <xTimerGenericCommand+0x60>)
   18ae8:	4798      	blx	r3
   18aea:	2802      	cmp	r0, #2
   18aec:	d009      	beq.n	18b02 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   18aee:	4b0d      	ldr	r3, [pc, #52]	; (18b24 <xTimerGenericCommand+0x5c>)
   18af0:	6818      	ldr	r0, [r3, #0]
   18af2:	2300      	movs	r3, #0
   18af4:	2200      	movs	r2, #0
   18af6:	a901      	add	r1, sp, #4
   18af8:	4c0c      	ldr	r4, [pc, #48]	; (18b2c <xTimerGenericCommand+0x64>)
   18afa:	47a0      	blx	r4
   18afc:	e00e      	b.n	18b1c <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
   18afe:	b672      	cpsid	i
   18b00:	e7fe      	b.n	18b00 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   18b02:	4b08      	ldr	r3, [pc, #32]	; (18b24 <xTimerGenericCommand+0x5c>)
   18b04:	6818      	ldr	r0, [r3, #0]
   18b06:	2300      	movs	r3, #0
   18b08:	9a08      	ldr	r2, [sp, #32]
   18b0a:	a901      	add	r1, sp, #4
   18b0c:	4c07      	ldr	r4, [pc, #28]	; (18b2c <xTimerGenericCommand+0x64>)
   18b0e:	47a0      	blx	r4
   18b10:	e004      	b.n	18b1c <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   18b12:	2300      	movs	r3, #0
   18b14:	002a      	movs	r2, r5
   18b16:	a901      	add	r1, sp, #4
   18b18:	4c05      	ldr	r4, [pc, #20]	; (18b30 <xTimerGenericCommand+0x68>)
   18b1a:	47a0      	blx	r4
}
   18b1c:	b005      	add	sp, #20
   18b1e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
   18b20:	2000      	movs	r0, #0
	return xReturn;
   18b22:	e7fb      	b.n	18b1c <xTimerGenericCommand+0x54>
   18b24:	20003c4c 	.word	0x20003c4c
   18b28:	0001868d 	.word	0x0001868d
   18b2c:	00016cb9 	.word	0x00016cb9
   18b30:	0001700d 	.word	0x0001700d

00018b34 <prvSampleTimeNow>:
{
   18b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b36:	46d6      	mov	lr, sl
   18b38:	464f      	mov	r7, r9
   18b3a:	4646      	mov	r6, r8
   18b3c:	b5c0      	push	{r6, r7, lr}
   18b3e:	b082      	sub	sp, #8
   18b40:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   18b42:	4b23      	ldr	r3, [pc, #140]	; (18bd0 <prvSampleTimeNow+0x9c>)
   18b44:	4798      	blx	r3
   18b46:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
   18b48:	4b22      	ldr	r3, [pc, #136]	; (18bd4 <prvSampleTimeNow+0xa0>)
   18b4a:	681b      	ldr	r3, [r3, #0]
   18b4c:	4298      	cmp	r0, r3
   18b4e:	d317      	bcc.n	18b80 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
   18b50:	2300      	movs	r3, #0
   18b52:	4642      	mov	r2, r8
   18b54:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
   18b56:	4b1f      	ldr	r3, [pc, #124]	; (18bd4 <prvSampleTimeNow+0xa0>)
   18b58:	4652      	mov	r2, sl
   18b5a:	601a      	str	r2, [r3, #0]
}
   18b5c:	4650      	mov	r0, sl
   18b5e:	b002      	add	sp, #8
   18b60:	bc1c      	pop	{r2, r3, r4}
   18b62:	4690      	mov	r8, r2
   18b64:	4699      	mov	r9, r3
   18b66:	46a2      	mov	sl, r4
   18b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18b6a:	2300      	movs	r3, #0
   18b6c:	9300      	str	r3, [sp, #0]
   18b6e:	003a      	movs	r2, r7
   18b70:	2100      	movs	r1, #0
   18b72:	0020      	movs	r0, r4
   18b74:	4c18      	ldr	r4, [pc, #96]	; (18bd8 <prvSampleTimeNow+0xa4>)
   18b76:	47a0      	blx	r4
				configASSERT( xResult );
   18b78:	2800      	cmp	r0, #0
   18b7a:	d104      	bne.n	18b86 <prvSampleTimeNow+0x52>
   18b7c:	b672      	cpsid	i
   18b7e:	e7fe      	b.n	18b7e <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18b80:	4d16      	ldr	r5, [pc, #88]	; (18bdc <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18b82:	4b17      	ldr	r3, [pc, #92]	; (18be0 <prvSampleTimeNow+0xac>)
   18b84:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18b86:	682b      	ldr	r3, [r5, #0]
   18b88:	681a      	ldr	r2, [r3, #0]
   18b8a:	2a00      	cmp	r2, #0
   18b8c:	d017      	beq.n	18bbe <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18b8e:	68db      	ldr	r3, [r3, #12]
   18b90:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18b92:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18b94:	1d26      	adds	r6, r4, #4
   18b96:	0030      	movs	r0, r6
   18b98:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18b9a:	0020      	movs	r0, r4
   18b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18b9e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18ba0:	69e3      	ldr	r3, [r4, #28]
   18ba2:	2b01      	cmp	r3, #1
   18ba4:	d1ef      	bne.n	18b86 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   18ba6:	69a3      	ldr	r3, [r4, #24]
   18ba8:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
   18baa:	429f      	cmp	r7, r3
   18bac:	d2dd      	bcs.n	18b6a <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   18bae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   18bb0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   18bb2:	4b0a      	ldr	r3, [pc, #40]	; (18bdc <prvSampleTimeNow+0xa8>)
   18bb4:	6818      	ldr	r0, [r3, #0]
   18bb6:	0031      	movs	r1, r6
   18bb8:	4b0a      	ldr	r3, [pc, #40]	; (18be4 <prvSampleTimeNow+0xb0>)
   18bba:	4798      	blx	r3
   18bbc:	e7e3      	b.n	18b86 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
   18bbe:	4a0a      	ldr	r2, [pc, #40]	; (18be8 <prvSampleTimeNow+0xb4>)
   18bc0:	4906      	ldr	r1, [pc, #24]	; (18bdc <prvSampleTimeNow+0xa8>)
   18bc2:	6810      	ldr	r0, [r2, #0]
   18bc4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   18bc6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   18bc8:	2301      	movs	r3, #1
   18bca:	4642      	mov	r2, r8
   18bcc:	6013      	str	r3, [r2, #0]
   18bce:	e7c2      	b.n	18b56 <prvSampleTimeNow+0x22>
   18bd0:	00017e81 	.word	0x00017e81
   18bd4:	20003c48 	.word	0x20003c48
   18bd8:	00018ac9 	.word	0x00018ac9
   18bdc:	20003c18 	.word	0x20003c18
   18be0:	000165cf 	.word	0x000165cf
   18be4:	000165a1 	.word	0x000165a1
   18be8:	20003c1c 	.word	0x20003c1c

00018bec <prvTimerTask>:
{
   18bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bee:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
   18bf0:	4b53      	ldr	r3, [pc, #332]	; (18d40 <prvTimerTask+0x154>)
   18bf2:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18bf4:	4f53      	ldr	r7, [pc, #332]	; (18d44 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   18bf6:	4b54      	ldr	r3, [pc, #336]	; (18d48 <prvTimerTask+0x15c>)
   18bf8:	681b      	ldr	r3, [r3, #0]
   18bfa:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   18bfc:	2a00      	cmp	r2, #0
   18bfe:	d00e      	beq.n	18c1e <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18c00:	68db      	ldr	r3, [r3, #12]
   18c02:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   18c04:	4b51      	ldr	r3, [pc, #324]	; (18d4c <prvTimerTask+0x160>)
   18c06:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18c08:	a805      	add	r0, sp, #20
   18c0a:	4b51      	ldr	r3, [pc, #324]	; (18d50 <prvTimerTask+0x164>)
   18c0c:	4798      	blx	r3
   18c0e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18c10:	9b05      	ldr	r3, [sp, #20]
   18c12:	2b00      	cmp	r3, #0
   18c14:	d15f      	bne.n	18cd6 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   18c16:	4284      	cmp	r4, r0
   18c18:	d936      	bls.n	18c88 <prvTimerTask+0x9c>
   18c1a:	2200      	movs	r2, #0
   18c1c:	e00f      	b.n	18c3e <prvTimerTask+0x52>
	vTaskSuspendAll();
   18c1e:	4b4b      	ldr	r3, [pc, #300]	; (18d4c <prvTimerTask+0x160>)
   18c20:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18c22:	a805      	add	r0, sp, #20
   18c24:	4b4a      	ldr	r3, [pc, #296]	; (18d50 <prvTimerTask+0x164>)
   18c26:	4798      	blx	r3
   18c28:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18c2a:	9b05      	ldr	r3, [sp, #20]
   18c2c:	2b00      	cmp	r3, #0
   18c2e:	d152      	bne.n	18cd6 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   18c30:	4b48      	ldr	r3, [pc, #288]	; (18d54 <prvTimerTask+0x168>)
   18c32:	681b      	ldr	r3, [r3, #0]
   18c34:	681b      	ldr	r3, [r3, #0]
   18c36:	425a      	negs	r2, r3
   18c38:	415a      	adcs	r2, r3
   18c3a:	b2d2      	uxtb	r2, r2
   18c3c:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   18c3e:	1b61      	subs	r1, r4, r5
   18c40:	4b45      	ldr	r3, [pc, #276]	; (18d58 <prvTimerTask+0x16c>)
   18c42:	6818      	ldr	r0, [r3, #0]
   18c44:	4b45      	ldr	r3, [pc, #276]	; (18d5c <prvTimerTask+0x170>)
   18c46:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   18c48:	4b45      	ldr	r3, [pc, #276]	; (18d60 <prvTimerTask+0x174>)
   18c4a:	4798      	blx	r3
   18c4c:	2800      	cmp	r0, #0
   18c4e:	d03f      	beq.n	18cd0 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   18c50:	4d41      	ldr	r5, [pc, #260]	; (18d58 <prvTimerTask+0x16c>)
   18c52:	4c44      	ldr	r4, [pc, #272]	; (18d64 <prvTimerTask+0x178>)
   18c54:	2200      	movs	r2, #0
   18c56:	a905      	add	r1, sp, #20
   18c58:	6828      	ldr	r0, [r5, #0]
   18c5a:	47a0      	blx	r4
   18c5c:	2800      	cmp	r0, #0
   18c5e:	d0ca      	beq.n	18bf6 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   18c60:	9b05      	ldr	r3, [sp, #20]
   18c62:	9303      	str	r3, [sp, #12]
   18c64:	2b00      	cmp	r3, #0
   18c66:	dbf5      	blt.n	18c54 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   18c68:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   18c6a:	6973      	ldr	r3, [r6, #20]
   18c6c:	2b00      	cmp	r3, #0
   18c6e:	d001      	beq.n	18c74 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c70:	1d30      	adds	r0, r6, #4
   18c72:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18c74:	a804      	add	r0, sp, #16
   18c76:	4b36      	ldr	r3, [pc, #216]	; (18d50 <prvTimerTask+0x164>)
   18c78:	4798      	blx	r3
			switch( xMessage.xMessageID )
   18c7a:	9b05      	ldr	r3, [sp, #20]
   18c7c:	2b09      	cmp	r3, #9
   18c7e:	d8e9      	bhi.n	18c54 <prvTimerTask+0x68>
   18c80:	009b      	lsls	r3, r3, #2
   18c82:	4a39      	ldr	r2, [pc, #228]	; (18d68 <prvTimerTask+0x17c>)
   18c84:	58d3      	ldr	r3, [r2, r3]
   18c86:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
   18c88:	4b35      	ldr	r3, [pc, #212]	; (18d60 <prvTimerTask+0x174>)
   18c8a:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18c8c:	4b2e      	ldr	r3, [pc, #184]	; (18d48 <prvTimerTask+0x15c>)
   18c8e:	681b      	ldr	r3, [r3, #0]
   18c90:	68db      	ldr	r3, [r3, #12]
   18c92:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c94:	1d30      	adds	r0, r6, #4
   18c96:	4b2b      	ldr	r3, [pc, #172]	; (18d44 <prvTimerTask+0x158>)
   18c98:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18c9a:	69f3      	ldr	r3, [r6, #28]
   18c9c:	2b01      	cmp	r3, #1
   18c9e:	d003      	beq.n	18ca8 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18ca0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18ca2:	0030      	movs	r0, r6
   18ca4:	4798      	blx	r3
   18ca6:	e7d3      	b.n	18c50 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   18ca8:	69b3      	ldr	r3, [r6, #24]
   18caa:	18e1      	adds	r1, r4, r3
   18cac:	0023      	movs	r3, r4
   18cae:	002a      	movs	r2, r5
   18cb0:	0030      	movs	r0, r6
   18cb2:	4d2e      	ldr	r5, [pc, #184]	; (18d6c <prvTimerTask+0x180>)
   18cb4:	47a8      	blx	r5
   18cb6:	2800      	cmp	r0, #0
   18cb8:	d0f2      	beq.n	18ca0 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18cba:	2300      	movs	r3, #0
   18cbc:	9300      	str	r3, [sp, #0]
   18cbe:	0022      	movs	r2, r4
   18cc0:	2100      	movs	r1, #0
   18cc2:	0030      	movs	r0, r6
   18cc4:	4c2a      	ldr	r4, [pc, #168]	; (18d70 <prvTimerTask+0x184>)
   18cc6:	47a0      	blx	r4
			configASSERT( xResult );
   18cc8:	2800      	cmp	r0, #0
   18cca:	d1e9      	bne.n	18ca0 <prvTimerTask+0xb4>
   18ccc:	b672      	cpsid	i
   18cce:	e7fe      	b.n	18cce <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
   18cd0:	4b28      	ldr	r3, [pc, #160]	; (18d74 <prvTimerTask+0x188>)
   18cd2:	4798      	blx	r3
   18cd4:	e7bc      	b.n	18c50 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
   18cd6:	4b22      	ldr	r3, [pc, #136]	; (18d60 <prvTimerTask+0x174>)
   18cd8:	4798      	blx	r3
   18cda:	e7b9      	b.n	18c50 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   18cdc:	9b06      	ldr	r3, [sp, #24]
   18cde:	69b2      	ldr	r2, [r6, #24]
   18ce0:	4694      	mov	ip, r2
   18ce2:	4463      	add	r3, ip
   18ce4:	0019      	movs	r1, r3
   18ce6:	9b06      	ldr	r3, [sp, #24]
   18ce8:	0002      	movs	r2, r0
   18cea:	0030      	movs	r0, r6
   18cec:	4c1f      	ldr	r4, [pc, #124]	; (18d6c <prvTimerTask+0x180>)
   18cee:	47a0      	blx	r4
   18cf0:	2800      	cmp	r0, #0
   18cf2:	d0ae      	beq.n	18c52 <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18cf4:	0030      	movs	r0, r6
   18cf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18cf8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18cfa:	69f3      	ldr	r3, [r6, #28]
   18cfc:	2b01      	cmp	r3, #1
   18cfe:	d1a8      	bne.n	18c52 <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   18d00:	9b06      	ldr	r3, [sp, #24]
   18d02:	69b1      	ldr	r1, [r6, #24]
   18d04:	468c      	mov	ip, r1
   18d06:	4463      	add	r3, ip
   18d08:	001a      	movs	r2, r3
   18d0a:	2300      	movs	r3, #0
   18d0c:	9300      	str	r3, [sp, #0]
   18d0e:	2100      	movs	r1, #0
   18d10:	0030      	movs	r0, r6
   18d12:	4c17      	ldr	r4, [pc, #92]	; (18d70 <prvTimerTask+0x184>)
   18d14:	47a0      	blx	r4
							configASSERT( xResult );
   18d16:	2800      	cmp	r0, #0
   18d18:	d19b      	bne.n	18c52 <prvTimerTask+0x66>
   18d1a:	b672      	cpsid	i
   18d1c:	e7fe      	b.n	18d1c <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   18d1e:	9906      	ldr	r1, [sp, #24]
   18d20:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18d22:	2900      	cmp	r1, #0
   18d24:	d006      	beq.n	18d34 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   18d26:	1841      	adds	r1, r0, r1
   18d28:	0003      	movs	r3, r0
   18d2a:	0002      	movs	r2, r0
   18d2c:	0030      	movs	r0, r6
   18d2e:	4c0f      	ldr	r4, [pc, #60]	; (18d6c <prvTimerTask+0x180>)
   18d30:	47a0      	blx	r4
   18d32:	e78e      	b.n	18c52 <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18d34:	b672      	cpsid	i
   18d36:	e7fe      	b.n	18d36 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
   18d38:	0030      	movs	r0, r6
   18d3a:	4b0f      	ldr	r3, [pc, #60]	; (18d78 <prvTimerTask+0x18c>)
   18d3c:	4798      	blx	r3
   18d3e:	e788      	b.n	18c52 <prvTimerTask+0x66>
   18d40:	00023e89 	.word	0x00023e89
   18d44:	000165cf 	.word	0x000165cf
   18d48:	20003c18 	.word	0x20003c18
   18d4c:	00017e71 	.word	0x00017e71
   18d50:	00018b35 	.word	0x00018b35
   18d54:	20003c1c 	.word	0x20003c1c
   18d58:	20003c4c 	.word	0x20003c4c
   18d5c:	000179c1 	.word	0x000179c1
   18d60:	00018019 	.word	0x00018019
   18d64:	00017355 	.word	0x00017355
   18d68:	0002954c 	.word	0x0002954c
   18d6c:	000189d9 	.word	0x000189d9
   18d70:	00018ac9 	.word	0x00018ac9
   18d74:	000166f1 	.word	0x000166f1
   18d78:	00016855 	.word	0x00016855

00018d7c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   18d7c:	b510      	push	{r4, lr}
   18d7e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
   18d80:	7c03      	ldrb	r3, [r0, #16]
   18d82:	2b00      	cmp	r3, #0
   18d84:	d005      	beq.n	18d92 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18d86:	6883      	ldr	r3, [r0, #8]
   18d88:	1c58      	adds	r0, r3, #1
   18d8a:	68e1      	ldr	r1, [r4, #12]
   18d8c:	4b07      	ldr	r3, [pc, #28]	; (18dac <advance_pointer+0x30>)
   18d8e:	4798      	blx	r3
   18d90:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   18d92:	6863      	ldr	r3, [r4, #4]
   18d94:	1c58      	adds	r0, r3, #1
   18d96:	68e1      	ldr	r1, [r4, #12]
   18d98:	4b04      	ldr	r3, [pc, #16]	; (18dac <advance_pointer+0x30>)
   18d9a:	4798      	blx	r3
   18d9c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   18d9e:	68a3      	ldr	r3, [r4, #8]
   18da0:	1a59      	subs	r1, r3, r1
   18da2:	424a      	negs	r2, r1
   18da4:	414a      	adcs	r2, r1
   18da6:	7422      	strb	r2, [r4, #16]
 }
   18da8:	bd10      	pop	{r4, pc}
   18daa:	46c0      	nop			; (mov r8, r8)
   18dac:	00024145 	.word	0x00024145

00018db0 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   18db0:	b570      	push	{r4, r5, r6, lr}
   18db2:	0005      	movs	r5, r0
   18db4:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   18db6:	2014      	movs	r0, #20
   18db8:	4b04      	ldr	r3, [pc, #16]	; (18dcc <circular_buf_init+0x1c>)
   18dba:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   18dbc:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
   18dbe:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
   18dc0:	2300      	movs	r3, #0
   18dc2:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
   18dc4:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
   18dc6:	7403      	strb	r3, [r0, #16]
 }
   18dc8:	bd70      	pop	{r4, r5, r6, pc}
   18dca:	46c0      	nop			; (mov r8, r8)
   18dcc:	00026245 	.word	0x00026245

00018dd0 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   18dd0:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   18dd2:	6803      	ldr	r3, [r0, #0]
   18dd4:	6842      	ldr	r2, [r0, #4]
   18dd6:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
   18dd8:	4b01      	ldr	r3, [pc, #4]	; (18de0 <circular_buf_put+0x10>)
   18dda:	4798      	blx	r3
 }
   18ddc:	bd10      	pop	{r4, pc}
   18dde:	46c0      	nop			; (mov r8, r8)
   18de0:	00018d7d 	.word	0x00018d7d

00018de4 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   18de4:	7c02      	ldrb	r2, [r0, #16]
   18de6:	2300      	movs	r3, #0
   18de8:	2a00      	cmp	r2, #0
   18dea:	d105      	bne.n	18df8 <circular_buf_empty+0x14>
   18dec:	6843      	ldr	r3, [r0, #4]
   18dee:	6880      	ldr	r0, [r0, #8]
   18df0:	1a1b      	subs	r3, r3, r0
   18df2:	4258      	negs	r0, r3
   18df4:	4143      	adcs	r3, r0
   18df6:	b2db      	uxtb	r3, r3
   18df8:	0018      	movs	r0, r3
 }
   18dfa:	4770      	bx	lr

00018dfc <circular_buf_get>:
 {
   18dfc:	b570      	push	{r4, r5, r6, lr}
   18dfe:	0004      	movs	r4, r0
   18e00:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
   18e02:	4b0a      	ldr	r3, [pc, #40]	; (18e2c <circular_buf_get+0x30>)
   18e04:	4798      	blx	r3
   18e06:	2800      	cmp	r0, #0
   18e08:	d10d      	bne.n	18e26 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
   18e0a:	6823      	ldr	r3, [r4, #0]
   18e0c:	68a2      	ldr	r2, [r4, #8]
   18e0e:	5c9b      	ldrb	r3, [r3, r2]
   18e10:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
   18e12:	2300      	movs	r3, #0
   18e14:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18e16:	68a3      	ldr	r3, [r4, #8]
   18e18:	1c58      	adds	r0, r3, #1
   18e1a:	68e1      	ldr	r1, [r4, #12]
   18e1c:	4b04      	ldr	r3, [pc, #16]	; (18e30 <circular_buf_get+0x34>)
   18e1e:	4798      	blx	r3
   18e20:	60a1      	str	r1, [r4, #8]
		 r = 0;
   18e22:	2000      	movs	r0, #0
 }
   18e24:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
   18e26:	2001      	movs	r0, #1
   18e28:	4240      	negs	r0, r0
	 return r;
   18e2a:	e7fb      	b.n	18e24 <circular_buf_get+0x28>
   18e2c:	00018de5 	.word	0x00018de5
   18e30:	00024145 	.word	0x00024145

00018e34 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   18e34:	b510      	push	{r4, lr}

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   18e36:	4c06      	ldr	r4, [pc, #24]	; (18e50 <usart_read_callback+0x1c>)
   18e38:	7821      	ldrb	r1, [r4, #0]
   18e3a:	4b06      	ldr	r3, [pc, #24]	; (18e54 <usart_read_callback+0x20>)
   18e3c:	6818      	ldr	r0, [r3, #0]
   18e3e:	4b06      	ldr	r3, [pc, #24]	; (18e58 <usart_read_callback+0x24>)
   18e40:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   18e42:	2201      	movs	r2, #1
   18e44:	0021      	movs	r1, r4
   18e46:	4805      	ldr	r0, [pc, #20]	; (18e5c <usart_read_callback+0x28>)
   18e48:	4b05      	ldr	r3, [pc, #20]	; (18e60 <usart_read_callback+0x2c>)
   18e4a:	4798      	blx	r3
	
}
   18e4c:	bd10      	pop	{r4, pc}
   18e4e:	46c0      	nop			; (mov r8, r8)
   18e50:	200050e4 	.word	0x200050e4
   18e54:	200050e0 	.word	0x200050e0
   18e58:	00018dd1 	.word	0x00018dd1
   18e5c:	200050ac 	.word	0x200050ac
   18e60:	0001ea01 	.word	0x0001ea01

00018e64 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   18e64:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   18e66:	4b06      	ldr	r3, [pc, #24]	; (18e80 <usart_write_callback+0x1c>)
   18e68:	6818      	ldr	r0, [r3, #0]
   18e6a:	4906      	ldr	r1, [pc, #24]	; (18e84 <usart_write_callback+0x20>)
   18e6c:	4b06      	ldr	r3, [pc, #24]	; (18e88 <usart_write_callback+0x24>)
   18e6e:	4798      	blx	r3
   18e70:	1c43      	adds	r3, r0, #1
   18e72:	d004      	beq.n	18e7e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   18e74:	2201      	movs	r2, #1
   18e76:	4903      	ldr	r1, [pc, #12]	; (18e84 <usart_write_callback+0x20>)
   18e78:	4804      	ldr	r0, [pc, #16]	; (18e8c <usart_write_callback+0x28>)
   18e7a:	4b05      	ldr	r3, [pc, #20]	; (18e90 <usart_write_callback+0x2c>)
   18e7c:	4798      	blx	r3
	}
	
}
   18e7e:	bd10      	pop	{r4, pc}
   18e80:	200053ec 	.word	0x200053ec
   18e84:	200053e8 	.word	0x200053e8
   18e88:	00018dfd 	.word	0x00018dfd
   18e8c:	200050ac 	.word	0x200050ac
   18e90:	0001e9e1 	.word	0x0001e9e1

00018e94 <InitializeSerialConsole>:
{
   18e94:	b530      	push	{r4, r5, lr}
   18e96:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   18e98:	2180      	movs	r1, #128	; 0x80
   18e9a:	0049      	lsls	r1, r1, #1
   18e9c:	4836      	ldr	r0, [pc, #216]	; (18f78 <InitializeSerialConsole+0xe4>)
   18e9e:	4c37      	ldr	r4, [pc, #220]	; (18f7c <InitializeSerialConsole+0xe8>)
   18ea0:	47a0      	blx	r4
   18ea2:	4b37      	ldr	r3, [pc, #220]	; (18f80 <InitializeSerialConsole+0xec>)
   18ea4:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
   18ea6:	2180      	movs	r1, #128	; 0x80
   18ea8:	0089      	lsls	r1, r1, #2
   18eaa:	4836      	ldr	r0, [pc, #216]	; (18f84 <InitializeSerialConsole+0xf0>)
   18eac:	47a0      	blx	r4
   18eae:	4b36      	ldr	r3, [pc, #216]	; (18f88 <InitializeSerialConsole+0xf4>)
   18eb0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   18eb2:	2380      	movs	r3, #128	; 0x80
   18eb4:	05db      	lsls	r3, r3, #23
   18eb6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   18eb8:	2300      	movs	r3, #0
   18eba:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   18ebc:	22ff      	movs	r2, #255	; 0xff
   18ebe:	4669      	mov	r1, sp
   18ec0:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   18ec2:	2200      	movs	r2, #0
   18ec4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   18ec6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   18ec8:	2101      	movs	r1, #1
   18eca:	2024      	movs	r0, #36	; 0x24
   18ecc:	466c      	mov	r4, sp
   18ece:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
   18ed0:	3001      	adds	r0, #1
   18ed2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
   18ed4:	3125      	adds	r1, #37	; 0x25
   18ed6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
   18ed8:	3101      	adds	r1, #1
   18eda:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
   18edc:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   18ede:	3105      	adds	r1, #5
   18ee0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
   18ee2:	3101      	adds	r1, #1
   18ee4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   18ee6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   18ee8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   18eea:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   18eec:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   18eee:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   18ef0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
   18ef2:	2313      	movs	r3, #19
   18ef4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   18ef6:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
   18ef8:	23e1      	movs	r3, #225	; 0xe1
   18efa:	025b      	lsls	r3, r3, #9
   18efc:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   18efe:	23c4      	movs	r3, #196	; 0xc4
   18f00:	039b      	lsls	r3, r3, #14
   18f02:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   18f04:	2301      	movs	r3, #1
   18f06:	425b      	negs	r3, r3
   18f08:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   18f0a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   18f0c:	4b1f      	ldr	r3, [pc, #124]	; (18f8c <InitializeSerialConsole+0xf8>)
   18f0e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   18f10:	4b1f      	ldr	r3, [pc, #124]	; (18f90 <InitializeSerialConsole+0xfc>)
   18f12:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
   18f14:	4d1f      	ldr	r5, [pc, #124]	; (18f94 <InitializeSerialConsole+0x100>)
   18f16:	4c20      	ldr	r4, [pc, #128]	; (18f98 <InitializeSerialConsole+0x104>)
   18f18:	466a      	mov	r2, sp
   18f1a:	4920      	ldr	r1, [pc, #128]	; (18f9c <InitializeSerialConsole+0x108>)
   18f1c:	0028      	movs	r0, r5
   18f1e:	47a0      	blx	r4
   18f20:	2800      	cmp	r0, #0
   18f22:	d1f9      	bne.n	18f18 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   18f24:	4d1b      	ldr	r5, [pc, #108]	; (18f94 <InitializeSerialConsole+0x100>)
   18f26:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   18f28:	0020      	movs	r0, r4
   18f2a:	4b1d      	ldr	r3, [pc, #116]	; (18fa0 <InitializeSerialConsole+0x10c>)
   18f2c:	4798      	blx	r3
   18f2e:	231f      	movs	r3, #31
   18f30:	4018      	ands	r0, r3
   18f32:	3b1e      	subs	r3, #30
   18f34:	4083      	lsls	r3, r0
   18f36:	4a1b      	ldr	r2, [pc, #108]	; (18fa4 <InitializeSerialConsole+0x110>)
   18f38:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18f3a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   18f3c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   18f3e:	2b00      	cmp	r3, #0
   18f40:	d1fc      	bne.n	18f3c <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   18f42:	6823      	ldr	r3, [r4, #0]
   18f44:	2202      	movs	r2, #2
   18f46:	4313      	orrs	r3, r2
   18f48:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
   18f4a:	4c12      	ldr	r4, [pc, #72]	; (18f94 <InitializeSerialConsole+0x100>)
   18f4c:	2200      	movs	r2, #0
   18f4e:	4916      	ldr	r1, [pc, #88]	; (18fa8 <InitializeSerialConsole+0x114>)
   18f50:	0020      	movs	r0, r4
   18f52:	4d16      	ldr	r5, [pc, #88]	; (18fac <InitializeSerialConsole+0x118>)
   18f54:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
   18f56:	2201      	movs	r2, #1
   18f58:	4915      	ldr	r1, [pc, #84]	; (18fb0 <InitializeSerialConsole+0x11c>)
   18f5a:	0020      	movs	r0, r4
   18f5c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   18f5e:	2231      	movs	r2, #49	; 0x31
   18f60:	5ca3      	ldrb	r3, [r4, r2]
   18f62:	2103      	movs	r1, #3
   18f64:	430b      	orrs	r3, r1
   18f66:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   18f68:	3a30      	subs	r2, #48	; 0x30
   18f6a:	4912      	ldr	r1, [pc, #72]	; (18fb4 <InitializeSerialConsole+0x120>)
   18f6c:	0020      	movs	r0, r4
   18f6e:	4b12      	ldr	r3, [pc, #72]	; (18fb8 <InitializeSerialConsole+0x124>)
   18f70:	4798      	blx	r3
}
   18f72:	b011      	add	sp, #68	; 0x44
   18f74:	bd30      	pop	{r4, r5, pc}
   18f76:	46c0      	nop			; (mov r8, r8)
   18f78:	200052e8 	.word	0x200052e8
   18f7c:	00018db1 	.word	0x00018db1
   18f80:	200050e0 	.word	0x200050e0
   18f84:	200050e8 	.word	0x200050e8
   18f88:	200053ec 	.word	0x200053ec
   18f8c:	002a0003 	.word	0x002a0003
   18f90:	002b0003 	.word	0x002b0003
   18f94:	200050ac 	.word	0x200050ac
   18f98:	0001e5f9 	.word	0x0001e5f9
   18f9c:	42001800 	.word	0x42001800
   18fa0:	0001de75 	.word	0x0001de75
   18fa4:	e000e100 	.word	0xe000e100
   18fa8:	00018e65 	.word	0x00018e65
   18fac:	0001e9c9 	.word	0x0001e9c9
   18fb0:	00018e35 	.word	0x00018e35
   18fb4:	200050e4 	.word	0x200050e4
   18fb8:	0001ea01 	.word	0x0001ea01

00018fbc <SerialConsoleWriteString>:
{
   18fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fbe:	46c6      	mov	lr, r8
   18fc0:	b500      	push	{lr}
   18fc2:	0005      	movs	r5, r0
vTaskSuspendAll();
   18fc4:	4b14      	ldr	r3, [pc, #80]	; (19018 <SerialConsoleWriteString+0x5c>)
   18fc6:	4798      	blx	r3
   18fc8:	2400      	movs	r4, #0
 	if(string != NULL)
   18fca:	2d00      	cmp	r5, #0
   18fcc:	d012      	beq.n	18ff4 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
   18fce:	4e13      	ldr	r6, [pc, #76]	; (1901c <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
   18fd0:	4f13      	ldr	r7, [pc, #76]	; (19020 <SerialConsoleWriteString+0x64>)
   18fd2:	4b14      	ldr	r3, [pc, #80]	; (19024 <SerialConsoleWriteString+0x68>)
   18fd4:	4698      	mov	r8, r3
   18fd6:	e003      	b.n	18fe0 <SerialConsoleWriteString+0x24>
   18fd8:	5d29      	ldrb	r1, [r5, r4]
   18fda:	6838      	ldr	r0, [r7, #0]
   18fdc:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
   18fde:	3401      	adds	r4, #1
   18fe0:	0028      	movs	r0, r5
   18fe2:	47b0      	blx	r6
   18fe4:	4284      	cmp	r4, r0
   18fe6:	d3f7      	bcc.n	18fd8 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   18fe8:	2101      	movs	r1, #1
   18fea:	480f      	ldr	r0, [pc, #60]	; (19028 <SerialConsoleWriteString+0x6c>)
   18fec:	4b0f      	ldr	r3, [pc, #60]	; (1902c <SerialConsoleWriteString+0x70>)
   18fee:	4798      	blx	r3
   18ff0:	2800      	cmp	r0, #0
   18ff2:	d004      	beq.n	18ffe <SerialConsoleWriteString+0x42>
xTaskResumeAll();
   18ff4:	4b0e      	ldr	r3, [pc, #56]	; (19030 <SerialConsoleWriteString+0x74>)
   18ff6:	4798      	blx	r3
}
   18ff8:	bc04      	pop	{r2}
   18ffa:	4690      	mov	r8, r2
   18ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   18ffe:	4c0d      	ldr	r4, [pc, #52]	; (19034 <SerialConsoleWriteString+0x78>)
   19000:	4b07      	ldr	r3, [pc, #28]	; (19020 <SerialConsoleWriteString+0x64>)
   19002:	6818      	ldr	r0, [r3, #0]
   19004:	0021      	movs	r1, r4
   19006:	4b0c      	ldr	r3, [pc, #48]	; (19038 <SerialConsoleWriteString+0x7c>)
   19008:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   1900a:	2201      	movs	r2, #1
   1900c:	0021      	movs	r1, r4
   1900e:	4806      	ldr	r0, [pc, #24]	; (19028 <SerialConsoleWriteString+0x6c>)
   19010:	4b0a      	ldr	r3, [pc, #40]	; (1903c <SerialConsoleWriteString+0x80>)
   19012:	4798      	blx	r3
   19014:	e7ee      	b.n	18ff4 <SerialConsoleWriteString+0x38>
   19016:	46c0      	nop			; (mov r8, r8)
   19018:	00017e71 	.word	0x00017e71
   1901c:	0002672f 	.word	0x0002672f
   19020:	200053ec 	.word	0x200053ec
   19024:	00018dd1 	.word	0x00018dd1
   19028:	200050ac 	.word	0x200050ac
   1902c:	0001ea21 	.word	0x0001ea21
   19030:	00018019 	.word	0x00018019
   19034:	200053e8 	.word	0x200053e8
   19038:	00018dfd 	.word	0x00018dfd
   1903c:	0001e9e1 	.word	0x0001e9e1

00019040 <SerialConsoleReadCharacter>:
{
   19040:	b510      	push	{r4, lr}
   19042:	0004      	movs	r4, r0
	vTaskSuspendAll();
   19044:	4b05      	ldr	r3, [pc, #20]	; (1905c <SerialConsoleReadCharacter+0x1c>)
   19046:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   19048:	4b05      	ldr	r3, [pc, #20]	; (19060 <SerialConsoleReadCharacter+0x20>)
   1904a:	6818      	ldr	r0, [r3, #0]
   1904c:	0021      	movs	r1, r4
   1904e:	4b05      	ldr	r3, [pc, #20]	; (19064 <SerialConsoleReadCharacter+0x24>)
   19050:	4798      	blx	r3
   19052:	0004      	movs	r4, r0
	xTaskResumeAll();
   19054:	4b04      	ldr	r3, [pc, #16]	; (19068 <SerialConsoleReadCharacter+0x28>)
   19056:	4798      	blx	r3
}
   19058:	0020      	movs	r0, r4
   1905a:	bd10      	pop	{r4, pc}
   1905c:	00017e71 	.word	0x00017e71
   19060:	200050e0 	.word	0x200050e0
   19064:	00018dfd 	.word	0x00018dfd
   19068:	00018019 	.word	0x00018019

0001906c <LogMessage>:
{
   1906c:	b40e      	push	{r1, r2, r3}
   1906e:	b530      	push	{r4, r5, lr}
   19070:	b082      	sub	sp, #8
return currentDebugLevel;
   19072:	4b0a      	ldr	r3, [pc, #40]	; (1909c <LogMessage+0x30>)
if(getLogLevel() <= level){
   19074:	781b      	ldrb	r3, [r3, #0]
   19076:	4283      	cmp	r3, r0
   19078:	d904      	bls.n	19084 <LogMessage+0x18>
};
   1907a:	b002      	add	sp, #8
   1907c:	bc30      	pop	{r4, r5}
   1907e:	bc08      	pop	{r3}
   19080:	b003      	add	sp, #12
   19082:	4718      	bx	r3
	va_start(ap, format);
   19084:	ab06      	add	r3, sp, #24
   19086:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
   19088:	4c05      	ldr	r4, [pc, #20]	; (190a0 <LogMessage+0x34>)
   1908a:	9a05      	ldr	r2, [sp, #20]
   1908c:	217f      	movs	r1, #127	; 0x7f
   1908e:	0020      	movs	r0, r4
   19090:	4d04      	ldr	r5, [pc, #16]	; (190a4 <LogMessage+0x38>)
   19092:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
   19094:	0020      	movs	r0, r4
   19096:	4b04      	ldr	r3, [pc, #16]	; (190a8 <LogMessage+0x3c>)
   19098:	4798      	blx	r3
};
   1909a:	e7ee      	b.n	1907a <LogMessage+0xe>
   1909c:	20003c54 	.word	0x20003c54
   190a0:	2000502c 	.word	0x2000502c
   190a4:	00026969 	.word	0x00026969
   190a8:	00018fbd 	.word	0x00018fbd

000190ac <LogMessageDebug>:
{
   190ac:	b40f      	push	{r0, r1, r2, r3}
   190ae:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
   190b0:	9902      	ldr	r1, [sp, #8]
   190b2:	2001      	movs	r0, #1
   190b4:	4b02      	ldr	r3, [pc, #8]	; (190c0 <LogMessageDebug+0x14>)
   190b6:	4798      	blx	r3
};
   190b8:	bc10      	pop	{r4}
   190ba:	bc08      	pop	{r3}
   190bc:	b004      	add	sp, #16
   190be:	4718      	bx	r3
   190c0:	0001906d 	.word	0x0001906d

000190c4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   190c4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   190c6:	4b06      	ldr	r3, [pc, #24]	; (190e0 <sd_mmc_configure_slot+0x1c>)
   190c8:	6819      	ldr	r1, [r3, #0]
   190ca:	7f8b      	ldrb	r3, [r1, #30]
   190cc:	1e5a      	subs	r2, r3, #1
   190ce:	4193      	sbcs	r3, r2
   190d0:	b2db      	uxtb	r3, r3
   190d2:	7b4a      	ldrb	r2, [r1, #13]
   190d4:	6809      	ldr	r1, [r1, #0]
   190d6:	4803      	ldr	r0, [pc, #12]	; (190e4 <sd_mmc_configure_slot+0x20>)
   190d8:	7800      	ldrb	r0, [r0, #0]
   190da:	4c03      	ldr	r4, [pc, #12]	; (190e8 <sd_mmc_configure_slot+0x24>)
   190dc:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
   190de:	bd10      	pop	{r4, pc}
   190e0:	20003c58 	.word	0x20003c58
   190e4:	20003c80 	.word	0x20003c80
   190e8:	00019d6d 	.word	0x00019d6d

000190ec <sd_mmc_select_slot>:
{
   190ec:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
   190ee:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
   190f0:	2800      	cmp	r0, #0
   190f2:	d001      	beq.n	190f8 <sd_mmc_select_slot+0xc>
}
   190f4:	0018      	movs	r0, r3
   190f6:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   190f8:	4b0e      	ldr	r3, [pc, #56]	; (19134 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   190fa:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   190fc:	3b03      	subs	r3, #3
   190fe:	2b01      	cmp	r3, #1
   19100:	d90d      	bls.n	1911e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
   19102:	2200      	movs	r2, #0
   19104:	4b0c      	ldr	r3, [pc, #48]	; (19138 <sd_mmc_select_slot+0x4c>)
   19106:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   19108:	4c0a      	ldr	r4, [pc, #40]	; (19134 <sd_mmc_select_slot+0x48>)
   1910a:	4b0c      	ldr	r3, [pc, #48]	; (1913c <sd_mmc_select_slot+0x50>)
   1910c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
   1910e:	4b0c      	ldr	r3, [pc, #48]	; (19140 <sd_mmc_select_slot+0x54>)
   19110:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   19112:	7aa3      	ldrb	r3, [r4, #10]
   19114:	3b02      	subs	r3, #2
   19116:	4258      	negs	r0, r3
   19118:	4143      	adcs	r3, r0
   1911a:	b2db      	uxtb	r3, r3
   1911c:	e7ea      	b.n	190f4 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1911e:	4b05      	ldr	r3, [pc, #20]	; (19134 <sd_mmc_select_slot+0x48>)
   19120:	2202      	movs	r2, #2
   19122:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   19124:	4a07      	ldr	r2, [pc, #28]	; (19144 <sd_mmc_select_slot+0x58>)
   19126:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
   19128:	2201      	movs	r2, #1
   1912a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
   1912c:	2200      	movs	r2, #0
   1912e:	779a      	strb	r2, [r3, #30]
   19130:	e7e7      	b.n	19102 <sd_mmc_select_slot+0x16>
   19132:	46c0      	nop			; (mov r8, r8)
   19134:	20003c5c 	.word	0x20003c5c
   19138:	20003c80 	.word	0x20003c80
   1913c:	20003c58 	.word	0x20003c58
   19140:	000190c5 	.word	0x000190c5
   19144:	00061a80 	.word	0x00061a80

00019148 <sd_mmc_cmd13>:
{
   19148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1914a:	4d09      	ldr	r5, [pc, #36]	; (19170 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1914c:	4f09      	ldr	r7, [pc, #36]	; (19174 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
   1914e:	4e0a      	ldr	r6, [pc, #40]	; (19178 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   19150:	2100      	movs	r1, #0
   19152:	480a      	ldr	r0, [pc, #40]	; (1917c <sd_mmc_cmd13+0x34>)
   19154:	47b8      	blx	r7
   19156:	1e04      	subs	r4, r0, #0
   19158:	d007      	beq.n	1916a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
   1915a:	47b0      	blx	r6
   1915c:	23ff      	movs	r3, #255	; 0xff
   1915e:	4203      	tst	r3, r0
   19160:	d003      	beq.n	1916a <sd_mmc_cmd13+0x22>
   19162:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   19164:	2d00      	cmp	r5, #0
   19166:	d1f3      	bne.n	19150 <sd_mmc_cmd13+0x8>
			return false;
   19168:	2400      	movs	r4, #0
}
   1916a:	0020      	movs	r0, r4
   1916c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1916e:	46c0      	nop			; (mov r8, r8)
   19170:	00030d41 	.word	0x00030d41
   19174:	00019fb1 	.word	0x00019fb1
   19178:	00019fc9 	.word	0x00019fc9
   1917c:	00001b0d 	.word	0x00001b0d

00019180 <sd_mmc_cmd9_spi>:
{
   19180:	b510      	push	{r4, lr}
   19182:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   19184:	4b0c      	ldr	r3, [pc, #48]	; (191b8 <sd_mmc_cmd9_spi+0x38>)
   19186:	681b      	ldr	r3, [r3, #0]
   19188:	8919      	ldrh	r1, [r3, #8]
   1918a:	0409      	lsls	r1, r1, #16
   1918c:	2301      	movs	r3, #1
   1918e:	9300      	str	r3, [sp, #0]
   19190:	2210      	movs	r2, #16
   19192:	480a      	ldr	r0, [pc, #40]	; (191bc <sd_mmc_cmd9_spi+0x3c>)
   19194:	4c0a      	ldr	r4, [pc, #40]	; (191c0 <sd_mmc_cmd9_spi+0x40>)
   19196:	47a0      	blx	r4
   19198:	2800      	cmp	r0, #0
   1919a:	d101      	bne.n	191a0 <sd_mmc_cmd9_spi+0x20>
}
   1919c:	b002      	add	sp, #8
   1919e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   191a0:	4b05      	ldr	r3, [pc, #20]	; (191b8 <sd_mmc_cmd9_spi+0x38>)
   191a2:	6818      	ldr	r0, [r3, #0]
   191a4:	300e      	adds	r0, #14
   191a6:	2101      	movs	r1, #1
   191a8:	4b06      	ldr	r3, [pc, #24]	; (191c4 <sd_mmc_cmd9_spi+0x44>)
   191aa:	4798      	blx	r3
   191ac:	2800      	cmp	r0, #0
   191ae:	d0f5      	beq.n	1919c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
   191b0:	4b05      	ldr	r3, [pc, #20]	; (191c8 <sd_mmc_cmd9_spi+0x48>)
   191b2:	4798      	blx	r3
   191b4:	e7f2      	b.n	1919c <sd_mmc_cmd9_spi+0x1c>
   191b6:	46c0      	nop			; (mov r8, r8)
   191b8:	20003c58 	.word	0x20003c58
   191bc:	00081109 	.word	0x00081109
   191c0:	00019e21 	.word	0x00019e21
   191c4:	0001a04d 	.word	0x0001a04d
   191c8:	0001a0d9 	.word	0x0001a0d9

000191cc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   191cc:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   191ce:	4b04      	ldr	r3, [pc, #16]	; (191e0 <sd_mmc_deselect_slot+0x14>)
   191d0:	781b      	ldrb	r3, [r3, #0]
   191d2:	2b00      	cmp	r3, #0
   191d4:	d000      	beq.n	191d8 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
   191d6:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
   191d8:	2000      	movs	r0, #0
   191da:	4b02      	ldr	r3, [pc, #8]	; (191e4 <sd_mmc_deselect_slot+0x18>)
   191dc:	4798      	blx	r3
}
   191de:	e7fa      	b.n	191d6 <sd_mmc_deselect_slot+0xa>
   191e0:	20003c80 	.word	0x20003c80
   191e4:	00019dc1 	.word	0x00019dc1

000191e8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   191e8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   191ea:	2204      	movs	r2, #4
   191ec:	4b03      	ldr	r3, [pc, #12]	; (191fc <sd_mmc_init+0x14>)
   191ee:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   191f0:	32fb      	adds	r2, #251	; 0xfb
   191f2:	4b03      	ldr	r3, [pc, #12]	; (19200 <sd_mmc_init+0x18>)
   191f4:	701a      	strb	r2, [r3, #0]
	driver_init();
   191f6:	4b03      	ldr	r3, [pc, #12]	; (19204 <sd_mmc_init+0x1c>)
   191f8:	4798      	blx	r3
}
   191fa:	bd10      	pop	{r4, pc}
   191fc:	20003c5c 	.word	0x20003c5c
   19200:	20003c80 	.word	0x20003c80
   19204:	00019c6d 	.word	0x00019c6d

00019208 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   19208:	b5f0      	push	{r4, r5, r6, r7, lr}
   1920a:	46c6      	mov	lr, r8
   1920c:	b500      	push	{lr}
   1920e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   19210:	4bcb      	ldr	r3, [pc, #812]	; (19540 <sd_mmc_check+0x338>)
   19212:	4798      	blx	r3
   19214:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   19216:	2801      	cmp	r0, #1
   19218:	d006      	beq.n	19228 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
   1921a:	4bca      	ldr	r3, [pc, #808]	; (19544 <sd_mmc_check+0x33c>)
   1921c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   1921e:	0020      	movs	r0, r4
   19220:	b008      	add	sp, #32
   19222:	bc04      	pop	{r2}
   19224:	4690      	mov	r8, r2
   19226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
   19228:	4bc7      	ldr	r3, [pc, #796]	; (19548 <sd_mmc_check+0x340>)
   1922a:	681b      	ldr	r3, [r3, #0]
   1922c:	2201      	movs	r2, #1
   1922e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   19230:	2200      	movs	r2, #0
   19232:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   19234:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
   19236:	4bc5      	ldr	r3, [pc, #788]	; (1954c <sd_mmc_check+0x344>)
   19238:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1923a:	2100      	movs	r1, #0
   1923c:	2088      	movs	r0, #136	; 0x88
   1923e:	0140      	lsls	r0, r0, #5
   19240:	4bc3      	ldr	r3, [pc, #780]	; (19550 <sd_mmc_check+0x348>)
   19242:	4798      	blx	r3
   19244:	2800      	cmp	r0, #0
   19246:	d107      	bne.n	19258 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   19248:	4bbf      	ldr	r3, [pc, #764]	; (19548 <sd_mmc_check+0x340>)
   1924a:	681b      	ldr	r3, [r3, #0]
   1924c:	2203      	movs	r2, #3
   1924e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   19250:	4bbc      	ldr	r3, [pc, #752]	; (19544 <sd_mmc_check+0x33c>)
   19252:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   19254:	2403      	movs	r4, #3
   19256:	e7e2      	b.n	1921e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   19258:	21d5      	movs	r1, #213	; 0xd5
   1925a:	0049      	lsls	r1, r1, #1
   1925c:	48bd      	ldr	r0, [pc, #756]	; (19554 <sd_mmc_check+0x34c>)
   1925e:	4bbc      	ldr	r3, [pc, #752]	; (19550 <sd_mmc_check+0x348>)
   19260:	4798      	blx	r3
	*v2 = 0;
   19262:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   19264:	2800      	cmp	r0, #0
   19266:	d125      	bne.n	192b4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19268:	4bb7      	ldr	r3, [pc, #732]	; (19548 <sd_mmc_check+0x340>)
   1926a:	681b      	ldr	r3, [r3, #0]
   1926c:	7adb      	ldrb	r3, [r3, #11]
   1926e:	07db      	lsls	r3, r3, #31
   19270:	d500      	bpl.n	19274 <sd_mmc_check+0x6c>
   19272:	e1eb      	b.n	1964c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   19274:	4bb4      	ldr	r3, [pc, #720]	; (19548 <sd_mmc_check+0x340>)
   19276:	681b      	ldr	r3, [r3, #0]
   19278:	7ada      	ldrb	r2, [r3, #11]
   1927a:	2309      	movs	r3, #9
   1927c:	4013      	ands	r3, r2
   1927e:	2b01      	cmp	r3, #1
   19280:	d10f      	bne.n	192a2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   19282:	2180      	movs	r1, #128	; 0x80
   19284:	0089      	lsls	r1, r1, #2
   19286:	48b4      	ldr	r0, [pc, #720]	; (19558 <sd_mmc_check+0x350>)
   19288:	4bb1      	ldr	r3, [pc, #708]	; (19550 <sd_mmc_check+0x348>)
   1928a:	4798      	blx	r3
   1928c:	2800      	cmp	r0, #0
   1928e:	d0db      	beq.n	19248 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19290:	4bad      	ldr	r3, [pc, #692]	; (19548 <sd_mmc_check+0x340>)
   19292:	681b      	ldr	r3, [r3, #0]
   19294:	7adb      	ldrb	r3, [r3, #11]
   19296:	07db      	lsls	r3, r3, #31
   19298:	d503      	bpl.n	192a2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
   1929a:	4bb0      	ldr	r3, [pc, #704]	; (1955c <sd_mmc_check+0x354>)
   1929c:	4798      	blx	r3
   1929e:	2800      	cmp	r0, #0
   192a0:	d0d2      	beq.n	19248 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   192a2:	4baf      	ldr	r3, [pc, #700]	; (19560 <sd_mmc_check+0x358>)
   192a4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   192a6:	4ba8      	ldr	r3, [pc, #672]	; (19548 <sd_mmc_check+0x340>)
   192a8:	681b      	ldr	r3, [r3, #0]
   192aa:	2200      	movs	r2, #0
   192ac:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   192ae:	4ba5      	ldr	r3, [pc, #660]	; (19544 <sd_mmc_check+0x33c>)
   192b0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
   192b2:	e7b4      	b.n	1921e <sd_mmc_check+0x16>
	resp = driver_get_response();
   192b4:	4bab      	ldr	r3, [pc, #684]	; (19564 <sd_mmc_check+0x35c>)
   192b6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
   192b8:	1c43      	adds	r3, r0, #1
   192ba:	d100      	bne.n	192be <sd_mmc_check+0xb6>
   192bc:	e1c4      	b.n	19648 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   192be:	0500      	lsls	r0, r0, #20
   192c0:	0d00      	lsrs	r0, r0, #20
   192c2:	23d5      	movs	r3, #213	; 0xd5
   192c4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
   192c6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   192c8:	4298      	cmp	r0, r3
   192ca:	d1bd      	bne.n	19248 <sd_mmc_check+0x40>
   192cc:	e7cc      	b.n	19268 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   192ce:	2100      	movs	r1, #0
   192d0:	48a5      	ldr	r0, [pc, #660]	; (19568 <sd_mmc_check+0x360>)
   192d2:	4b9f      	ldr	r3, [pc, #636]	; (19550 <sd_mmc_check+0x348>)
   192d4:	4798      	blx	r3
   192d6:	2800      	cmp	r0, #0
   192d8:	d119      	bne.n	1930e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
   192da:	4b9b      	ldr	r3, [pc, #620]	; (19548 <sd_mmc_check+0x340>)
   192dc:	681b      	ldr	r3, [r3, #0]
   192de:	2202      	movs	r2, #2
   192e0:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   192e2:	2100      	movs	r1, #0
   192e4:	2088      	movs	r0, #136	; 0x88
   192e6:	0140      	lsls	r0, r0, #5
   192e8:	4b99      	ldr	r3, [pc, #612]	; (19550 <sd_mmc_check+0x348>)
   192ea:	4798      	blx	r3
   192ec:	2800      	cmp	r0, #0
   192ee:	d0ab      	beq.n	19248 <sd_mmc_check+0x40>
   192f0:	4d9e      	ldr	r5, [pc, #632]	; (1956c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   192f2:	4f97      	ldr	r7, [pc, #604]	; (19550 <sd_mmc_check+0x348>)
		resp = driver_get_response();
   192f4:	4e9b      	ldr	r6, [pc, #620]	; (19564 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   192f6:	2100      	movs	r1, #0
   192f8:	489d      	ldr	r0, [pc, #628]	; (19570 <sd_mmc_check+0x368>)
   192fa:	47b8      	blx	r7
   192fc:	2800      	cmp	r0, #0
   192fe:	d0a3      	beq.n	19248 <sd_mmc_check+0x40>
		resp = driver_get_response();
   19300:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   19302:	07c3      	lsls	r3, r0, #31
   19304:	d57d      	bpl.n	19402 <sd_mmc_check+0x1fa>
   19306:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   19308:	2d00      	cmp	r5, #0
   1930a:	d1f4      	bne.n	192f6 <sd_mmc_check+0xee>
   1930c:	e79c      	b.n	19248 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
   1930e:	4b95      	ldr	r3, [pc, #596]	; (19564 <sd_mmc_check+0x35c>)
   19310:	4798      	blx	r3
   19312:	0043      	lsls	r3, r0, #1
   19314:	d505      	bpl.n	19322 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
   19316:	4b8c      	ldr	r3, [pc, #560]	; (19548 <sd_mmc_check+0x340>)
   19318:	681a      	ldr	r2, [r3, #0]
   1931a:	7ad3      	ldrb	r3, [r2, #11]
   1931c:	2108      	movs	r1, #8
   1931e:	430b      	orrs	r3, r1
   19320:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   19322:	2100      	movs	r1, #0
   19324:	4893      	ldr	r0, [pc, #588]	; (19574 <sd_mmc_check+0x36c>)
   19326:	4b8a      	ldr	r3, [pc, #552]	; (19550 <sd_mmc_check+0x348>)
   19328:	4798      	blx	r3
   1932a:	2800      	cmp	r0, #0
   1932c:	d08c      	beq.n	19248 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1932e:	4b86      	ldr	r3, [pc, #536]	; (19548 <sd_mmc_check+0x340>)
   19330:	681b      	ldr	r3, [r3, #0]
   19332:	7adb      	ldrb	r3, [r3, #11]
   19334:	07da      	lsls	r2, r3, #31
   19336:	d400      	bmi.n	1933a <sd_mmc_check+0x132>
   19338:	e1a4      	b.n	19684 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
   1933a:	4b8f      	ldr	r3, [pc, #572]	; (19578 <sd_mmc_check+0x370>)
   1933c:	4798      	blx	r3
   1933e:	2800      	cmp	r0, #0
   19340:	d082      	beq.n	19248 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   19342:	4b81      	ldr	r3, [pc, #516]	; (19548 <sd_mmc_check+0x340>)
   19344:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19346:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   19348:	2107      	movs	r1, #7
   1934a:	4019      	ands	r1, r3
   1934c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1934e:	488b      	ldr	r0, [pc, #556]	; (1957c <sd_mmc_check+0x374>)
   19350:	5808      	ldr	r0, [r1, r0]
   19352:	21fa      	movs	r1, #250	; 0xfa
   19354:	0089      	lsls	r1, r1, #2
   19356:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   19358:	065b      	lsls	r3, r3, #25
   1935a:	0f1b      	lsrs	r3, r3, #28
   1935c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1935e:	4888      	ldr	r0, [pc, #544]	; (19580 <sd_mmc_check+0x378>)
   19360:	581b      	ldr	r3, [r3, r0]
   19362:	434b      	muls	r3, r1
   19364:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   19366:	7b93      	ldrb	r3, [r2, #14]
   19368:	099b      	lsrs	r3, r3, #6
   1936a:	d000      	beq.n	1936e <sd_mmc_check+0x166>
   1936c:	e13c      	b.n	195e8 <sd_mmc_check+0x3e0>
   1936e:	7d91      	ldrb	r1, [r2, #22]
   19370:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19372:	7d53      	ldrb	r3, [r2, #21]
   19374:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19376:	7d10      	ldrb	r0, [r2, #20]
   19378:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1937a:	4303      	orrs	r3, r0
   1937c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1937e:	7e10      	ldrb	r0, [r2, #24]
   19380:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19382:	7dd1      	ldrb	r1, [r2, #23]
   19384:	0049      	lsls	r1, r1, #1
   19386:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
   19388:	051b      	lsls	r3, r3, #20
   1938a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1938c:	3301      	adds	r3, #1
   1938e:	2107      	movs	r1, #7
   19390:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   19392:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   19394:	408b      	lsls	r3, r1
   19396:	7cd0      	ldrb	r0, [r2, #19]
   19398:	210f      	movs	r1, #15
   1939a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   1939c:	408b      	lsls	r3, r1
				/ 1024;
   1939e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   193a0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   193a2:	8911      	ldrh	r1, [r2, #8]
   193a4:	0409      	lsls	r1, r1, #16
   193a6:	4877      	ldr	r0, [pc, #476]	; (19584 <sd_mmc_check+0x37c>)
   193a8:	4b69      	ldr	r3, [pc, #420]	; (19550 <sd_mmc_check+0x348>)
   193aa:	4798      	blx	r3
   193ac:	2800      	cmp	r0, #0
   193ae:	d100      	bne.n	193b2 <sd_mmc_check+0x1aa>
   193b0:	e74a      	b.n	19248 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   193b2:	2301      	movs	r3, #1
   193b4:	9300      	str	r3, [sp, #0]
   193b6:	2208      	movs	r2, #8
   193b8:	2100      	movs	r1, #0
   193ba:	4873      	ldr	r0, [pc, #460]	; (19588 <sd_mmc_check+0x380>)
   193bc:	4d73      	ldr	r5, [pc, #460]	; (1958c <sd_mmc_check+0x384>)
   193be:	47a8      	blx	r5
   193c0:	2800      	cmp	r0, #0
   193c2:	d100      	bne.n	193c6 <sd_mmc_check+0x1be>
   193c4:	e740      	b.n	19248 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
   193c6:	2101      	movs	r1, #1
   193c8:	a806      	add	r0, sp, #24
   193ca:	4b71      	ldr	r3, [pc, #452]	; (19590 <sd_mmc_check+0x388>)
   193cc:	4798      	blx	r3
   193ce:	2800      	cmp	r0, #0
   193d0:	d100      	bne.n	193d4 <sd_mmc_check+0x1cc>
   193d2:	e739      	b.n	19248 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
   193d4:	4b6f      	ldr	r3, [pc, #444]	; (19594 <sd_mmc_check+0x38c>)
   193d6:	4798      	blx	r3
   193d8:	2800      	cmp	r0, #0
   193da:	d100      	bne.n	193de <sd_mmc_check+0x1d6>
   193dc:	e734      	b.n	19248 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   193de:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
   193e0:	781b      	ldrb	r3, [r3, #0]
   193e2:	220f      	movs	r2, #15
   193e4:	4013      	ands	r3, r2
   193e6:	2b01      	cmp	r3, #1
   193e8:	d100      	bne.n	193ec <sd_mmc_check+0x1e4>
   193ea:	e119      	b.n	19620 <sd_mmc_check+0x418>
   193ec:	2b00      	cmp	r3, #0
   193ee:	d100      	bne.n	193f2 <sd_mmc_check+0x1ea>
   193f0:	e109      	b.n	19606 <sd_mmc_check+0x3fe>
   193f2:	2b02      	cmp	r3, #2
   193f4:	d100      	bne.n	193f8 <sd_mmc_check+0x1f0>
   193f6:	e118      	b.n	1962a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   193f8:	4b53      	ldr	r3, [pc, #332]	; (19548 <sd_mmc_check+0x340>)
   193fa:	681b      	ldr	r3, [r3, #0]
   193fc:	2210      	movs	r2, #16
   193fe:	731a      	strb	r2, [r3, #12]
   19400:	e105      	b.n	1960e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   19402:	2100      	movs	r1, #0
   19404:	4858      	ldr	r0, [pc, #352]	; (19568 <sd_mmc_check+0x360>)
   19406:	4b52      	ldr	r3, [pc, #328]	; (19550 <sd_mmc_check+0x348>)
   19408:	4798      	blx	r3
   1940a:	2800      	cmp	r0, #0
   1940c:	d100      	bne.n	19410 <sd_mmc_check+0x208>
   1940e:	e71b      	b.n	19248 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   19410:	4b54      	ldr	r3, [pc, #336]	; (19564 <sd_mmc_check+0x35c>)
   19412:	4798      	blx	r3
   19414:	23c0      	movs	r3, #192	; 0xc0
   19416:	05db      	lsls	r3, r3, #23
   19418:	4018      	ands	r0, r3
   1941a:	2380      	movs	r3, #128	; 0x80
   1941c:	05db      	lsls	r3, r3, #23
   1941e:	4298      	cmp	r0, r3
   19420:	d105      	bne.n	1942e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
   19422:	4b49      	ldr	r3, [pc, #292]	; (19548 <sd_mmc_check+0x340>)
   19424:	681a      	ldr	r2, [r3, #0]
   19426:	7ad1      	ldrb	r1, [r2, #11]
   19428:	2308      	movs	r3, #8
   1942a:	430b      	orrs	r3, r1
   1942c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1942e:	2100      	movs	r1, #0
   19430:	4850      	ldr	r0, [pc, #320]	; (19574 <sd_mmc_check+0x36c>)
   19432:	4b47      	ldr	r3, [pc, #284]	; (19550 <sd_mmc_check+0x348>)
   19434:	4798      	blx	r3
   19436:	2800      	cmp	r0, #0
   19438:	d100      	bne.n	1943c <sd_mmc_check+0x234>
   1943a:	e705      	b.n	19248 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
   1943c:	4b4e      	ldr	r3, [pc, #312]	; (19578 <sd_mmc_check+0x370>)
   1943e:	4798      	blx	r3
   19440:	2800      	cmp	r0, #0
   19442:	d100      	bne.n	19446 <sd_mmc_check+0x23e>
   19444:	e700      	b.n	19248 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   19446:	4b40      	ldr	r3, [pc, #256]	; (19548 <sd_mmc_check+0x340>)
   19448:	681a      	ldr	r2, [r3, #0]
   1944a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
   1944c:	069b      	lsls	r3, r3, #26
   1944e:	0f1b      	lsrs	r3, r3, #28
   19450:	2b02      	cmp	r3, #2
   19452:	d100      	bne.n	19456 <sd_mmc_check+0x24e>
   19454:	e0a8      	b.n	195a8 <sd_mmc_check+0x3a0>
   19456:	d907      	bls.n	19468 <sd_mmc_check+0x260>
   19458:	2b03      	cmp	r3, #3
   1945a:	d100      	bne.n	1945e <sd_mmc_check+0x256>
   1945c:	e0a7      	b.n	195ae <sd_mmc_check+0x3a6>
   1945e:	2b04      	cmp	r3, #4
   19460:	d104      	bne.n	1946c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
   19462:	2340      	movs	r3, #64	; 0x40
   19464:	7313      	strb	r3, [r2, #12]
   19466:	e003      	b.n	19470 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   19468:	2b01      	cmp	r3, #1
   1946a:	d066      	beq.n	1953a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1946c:	2312      	movs	r3, #18
   1946e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19470:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   19472:	0659      	lsls	r1, r3, #25
   19474:	0f09      	lsrs	r1, r1, #28
   19476:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   19478:	2007      	movs	r0, #7
   1947a:	4003      	ands	r3, r0
   1947c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1947e:	483f      	ldr	r0, [pc, #252]	; (1957c <sd_mmc_check+0x374>)
   19480:	5818      	ldr	r0, [r3, r0]
   19482:	23fa      	movs	r3, #250	; 0xfa
   19484:	009b      	lsls	r3, r3, #2
   19486:	4343      	muls	r3, r0
   19488:	4843      	ldr	r0, [pc, #268]	; (19598 <sd_mmc_check+0x390>)
   1948a:	5809      	ldr	r1, [r1, r0]
   1948c:	434b      	muls	r3, r1
   1948e:	6013      	str	r3, [r2, #0]
   19490:	7d91      	ldrb	r1, [r2, #22]
   19492:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19494:	7d53      	ldrb	r3, [r2, #21]
   19496:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19498:	7d10      	ldrb	r0, [r2, #20]
   1949a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1949c:	4303      	orrs	r3, r0
   1949e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
   194a0:	051b      	lsls	r3, r3, #20
   194a2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   194a4:	493d      	ldr	r1, [pc, #244]	; (1959c <sd_mmc_check+0x394>)
   194a6:	428b      	cmp	r3, r1
   194a8:	d00f      	beq.n	194ca <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   194aa:	7e10      	ldrb	r0, [r2, #24]
   194ac:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   194ae:	7dd1      	ldrb	r1, [r2, #23]
   194b0:	0049      	lsls	r1, r1, #1
   194b2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   194b4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
   194b6:	2007      	movs	r0, #7
   194b8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   194ba:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   194bc:	408b      	lsls	r3, r1
   194be:	7cd1      	ldrb	r1, [r2, #19]
   194c0:	3008      	adds	r0, #8
   194c2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   194c4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   194c6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   194c8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   194ca:	7b13      	ldrb	r3, [r2, #12]
   194cc:	2b3f      	cmp	r3, #63	; 0x3f
   194ce:	d97b      	bls.n	195c8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   194d0:	2100      	movs	r1, #0
   194d2:	9100      	str	r1, [sp, #0]
   194d4:	2301      	movs	r3, #1
   194d6:	2280      	movs	r2, #128	; 0x80
   194d8:	0092      	lsls	r2, r2, #2
   194da:	4831      	ldr	r0, [pc, #196]	; (195a0 <sd_mmc_check+0x398>)
   194dc:	4d2b      	ldr	r5, [pc, #172]	; (1958c <sd_mmc_check+0x384>)
   194de:	47a8      	blx	r5
   194e0:	2800      	cmp	r0, #0
   194e2:	d100      	bne.n	194e6 <sd_mmc_check+0x2de>
   194e4:	e6b0      	b.n	19248 <sd_mmc_check+0x40>
   194e6:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
   194e8:	4e2e      	ldr	r6, [pc, #184]	; (195a4 <sd_mmc_check+0x39c>)
   194ea:	a805      	add	r0, sp, #20
   194ec:	47b0      	blx	r6
   194ee:	2800      	cmp	r0, #0
   194f0:	d100      	bne.n	194f4 <sd_mmc_check+0x2ec>
   194f2:	e6a9      	b.n	19248 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   194f4:	3501      	adds	r5, #1
   194f6:	b2ad      	uxth	r5, r5
   194f8:	2d32      	cmp	r5, #50	; 0x32
   194fa:	d1f6      	bne.n	194ea <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   194fc:	4b12      	ldr	r3, [pc, #72]	; (19548 <sd_mmc_check+0x340>)
   194fe:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19500:	7d8a      	ldrb	r2, [r1, #22]
   19502:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19504:	7d4b      	ldrb	r3, [r1, #21]
   19506:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19508:	7d09      	ldrb	r1, [r1, #20]
   1950a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1950c:	430b      	orrs	r3, r1
   1950e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
   19510:	051b      	lsls	r3, r3, #20
   19512:	0d1b      	lsrs	r3, r3, #20
   19514:	4a21      	ldr	r2, [pc, #132]	; (1959c <sd_mmc_check+0x394>)
   19516:	4293      	cmp	r3, r2
   19518:	d154      	bne.n	195c4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
   1951a:	4e22      	ldr	r6, [pc, #136]	; (195a4 <sd_mmc_check+0x39c>)
   1951c:	a806      	add	r0, sp, #24
   1951e:	47b0      	blx	r6
   19520:	2800      	cmp	r0, #0
   19522:	d100      	bne.n	19526 <sd_mmc_check+0x31e>
   19524:	e690      	b.n	19248 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   19526:	3501      	adds	r5, #1
   19528:	b2ad      	uxth	r5, r5
   1952a:	2d35      	cmp	r5, #53	; 0x35
   1952c:	d9f6      	bls.n	1951c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
   1952e:	4b06      	ldr	r3, [pc, #24]	; (19548 <sd_mmc_check+0x340>)
   19530:	681a      	ldr	r2, [r3, #0]
   19532:	9b06      	ldr	r3, [sp, #24]
   19534:	085b      	lsrs	r3, r3, #1
   19536:	6053      	str	r3, [r2, #4]
   19538:	e044      	b.n	195c4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1953a:	2314      	movs	r3, #20
   1953c:	7313      	strb	r3, [r2, #12]
   1953e:	e797      	b.n	19470 <sd_mmc_check+0x268>
   19540:	000190ed 	.word	0x000190ed
   19544:	000191cd 	.word	0x000191cd
   19548:	20003c58 	.word	0x20003c58
   1954c:	00019de9 	.word	0x00019de9
   19550:	00019fb1 	.word	0x00019fb1
   19554:	00005508 	.word	0x00005508
   19558:	00001110 	.word	0x00001110
   1955c:	00019149 	.word	0x00019149
   19560:	000190c5 	.word	0x000190c5
   19564:	00019fc9 	.word	0x00019fc9
   19568:	0000053a 	.word	0x0000053a
   1956c:	00001bef 	.word	0x00001bef
   19570:	00001101 	.word	0x00001101
   19574:	0000113b 	.word	0x0000113b
   19578:	00019181 	.word	0x00019181
   1957c:	000295bc 	.word	0x000295bc
   19580:	000295d8 	.word	0x000295d8
   19584:	00001137 	.word	0x00001137
   19588:	00081133 	.word	0x00081133
   1958c:	00019e21 	.word	0x00019e21
   19590:	0001a04d 	.word	0x0001a04d
   19594:	0001a0d9 	.word	0x0001a0d9
   19598:	0002957c 	.word	0x0002957c
   1959c:	00000fff 	.word	0x00000fff
   195a0:	00081108 	.word	0x00081108
   195a4:	00019fd5 	.word	0x00019fd5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   195a8:	2322      	movs	r3, #34	; 0x22
   195aa:	7313      	strb	r3, [r2, #12]
   195ac:	e760      	b.n	19470 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
   195ae:	2330      	movs	r3, #48	; 0x30
   195b0:	7313      	strb	r3, [r2, #12]
   195b2:	e75d      	b.n	19470 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
   195b4:	a806      	add	r0, sp, #24
   195b6:	4b36      	ldr	r3, [pc, #216]	; (19690 <sd_mmc_check+0x488>)
   195b8:	4798      	blx	r3
   195ba:	2800      	cmp	r0, #0
   195bc:	d100      	bne.n	195c0 <sd_mmc_check+0x3b8>
   195be:	e643      	b.n	19248 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   195c0:	3501      	adds	r5, #1
   195c2:	b2ad      	uxth	r5, r5
   195c4:	2d7f      	cmp	r5, #127	; 0x7f
   195c6:	d9f5      	bls.n	195b4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   195c8:	2180      	movs	r1, #128	; 0x80
   195ca:	0089      	lsls	r1, r1, #2
   195cc:	4831      	ldr	r0, [pc, #196]	; (19694 <sd_mmc_check+0x48c>)
   195ce:	4b32      	ldr	r3, [pc, #200]	; (19698 <sd_mmc_check+0x490>)
   195d0:	4798      	blx	r3
   195d2:	2800      	cmp	r0, #0
   195d4:	d100      	bne.n	195d8 <sd_mmc_check+0x3d0>
   195d6:	e637      	b.n	19248 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
   195d8:	4b30      	ldr	r3, [pc, #192]	; (1969c <sd_mmc_check+0x494>)
   195da:	4798      	blx	r3
   195dc:	2800      	cmp	r0, #0
   195de:	d100      	bne.n	195e2 <sd_mmc_check+0x3da>
   195e0:	e632      	b.n	19248 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   195e2:	4b2f      	ldr	r3, [pc, #188]	; (196a0 <sd_mmc_check+0x498>)
   195e4:	4798      	blx	r3
   195e6:	e65e      	b.n	192a6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   195e8:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   195ea:	7d93      	ldrb	r3, [r2, #22]
   195ec:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   195ee:	7d51      	ldrb	r1, [r2, #21]
   195f0:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   195f2:	430b      	orrs	r3, r1
   195f4:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
   195f6:	029b      	lsls	r3, r3, #10
				* 512;
   195f8:	085b      	lsrs	r3, r3, #1
   195fa:	2180      	movs	r1, #128	; 0x80
   195fc:	0089      	lsls	r1, r1, #2
   195fe:	468c      	mov	ip, r1
   19600:	4463      	add	r3, ip
		sd_mmc_card->capacity =
   19602:	6053      	str	r3, [r2, #4]
   19604:	e6cd      	b.n	193a2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   19606:	4b27      	ldr	r3, [pc, #156]	; (196a4 <sd_mmc_check+0x49c>)
   19608:	681b      	ldr	r3, [r3, #0]
   1960a:	2210      	movs	r2, #16
   1960c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1960e:	4b25      	ldr	r3, [pc, #148]	; (196a4 <sd_mmc_check+0x49c>)
   19610:	681b      	ldr	r3, [r3, #0]
   19612:	7adb      	ldrb	r3, [r3, #11]
   19614:	2209      	movs	r2, #9
   19616:	4013      	ands	r3, r2
   19618:	2b01      	cmp	r3, #1
   1961a:	d000      	beq.n	1961e <sd_mmc_check+0x416>
   1961c:	e638      	b.n	19290 <sd_mmc_check+0x88>
   1961e:	e630      	b.n	19282 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
   19620:	4b20      	ldr	r3, [pc, #128]	; (196a4 <sd_mmc_check+0x49c>)
   19622:	681b      	ldr	r3, [r3, #0]
   19624:	221a      	movs	r2, #26
   19626:	731a      	strb	r2, [r3, #12]
   19628:	e7f1      	b.n	1960e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1962a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1962c:	789b      	ldrb	r3, [r3, #2]
   1962e:	09db      	lsrs	r3, r3, #7
   19630:	2b01      	cmp	r3, #1
   19632:	d104      	bne.n	1963e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   19634:	4b1b      	ldr	r3, [pc, #108]	; (196a4 <sd_mmc_check+0x49c>)
   19636:	681b      	ldr	r3, [r3, #0]
   19638:	2230      	movs	r2, #48	; 0x30
   1963a:	731a      	strb	r2, [r3, #12]
   1963c:	e7e7      	b.n	1960e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1963e:	4b19      	ldr	r3, [pc, #100]	; (196a4 <sd_mmc_check+0x49c>)
   19640:	681b      	ldr	r3, [r3, #0]
   19642:	2220      	movs	r2, #32
   19644:	731a      	strb	r2, [r3, #12]
   19646:	e7e2      	b.n	1960e <sd_mmc_check+0x406>
	*v2 = 0;
   19648:	2600      	movs	r6, #0
   1964a:	e60d      	b.n	19268 <sd_mmc_check+0x60>
   1964c:	1e73      	subs	r3, r6, #1
   1964e:	419e      	sbcs	r6, r3
   19650:	07b3      	lsls	r3, r6, #30
   19652:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19654:	4d14      	ldr	r5, [pc, #80]	; (196a8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   19656:	4f10      	ldr	r7, [pc, #64]	; (19698 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   19658:	46b8      	mov	r8, r7
		resp = driver_get_response();
   1965a:	4e14      	ldr	r6, [pc, #80]	; (196ac <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1965c:	2100      	movs	r1, #0
   1965e:	4814      	ldr	r0, [pc, #80]	; (196b0 <sd_mmc_check+0x4a8>)
   19660:	47b8      	blx	r7
   19662:	2800      	cmp	r0, #0
   19664:	d100      	bne.n	19668 <sd_mmc_check+0x460>
   19666:	e638      	b.n	192da <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   19668:	9903      	ldr	r1, [sp, #12]
   1966a:	4812      	ldr	r0, [pc, #72]	; (196b4 <sd_mmc_check+0x4ac>)
   1966c:	47c0      	blx	r8
   1966e:	2800      	cmp	r0, #0
   19670:	d100      	bne.n	19674 <sd_mmc_check+0x46c>
   19672:	e632      	b.n	192da <sd_mmc_check+0xd2>
		resp = driver_get_response();
   19674:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   19676:	07c3      	lsls	r3, r0, #31
   19678:	d400      	bmi.n	1967c <sd_mmc_check+0x474>
   1967a:	e628      	b.n	192ce <sd_mmc_check+0xc6>
   1967c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   1967e:	2d00      	cmp	r5, #0
   19680:	d1ec      	bne.n	1965c <sd_mmc_check+0x454>
   19682:	e62a      	b.n	192da <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   19684:	2209      	movs	r2, #9
   19686:	4013      	ands	r3, r2
   19688:	2b01      	cmp	r3, #1
   1968a:	d000      	beq.n	1968e <sd_mmc_check+0x486>
   1968c:	e609      	b.n	192a2 <sd_mmc_check+0x9a>
   1968e:	e5f8      	b.n	19282 <sd_mmc_check+0x7a>
   19690:	00019fd5 	.word	0x00019fd5
   19694:	00001110 	.word	0x00001110
   19698:	00019fb1 	.word	0x00019fb1
   1969c:	00019149 	.word	0x00019149
   196a0:	000190c5 	.word	0x000190c5
   196a4:	20003c58 	.word	0x20003c58
   196a8:	00001bef 	.word	0x00001bef
   196ac:	00019fc9 	.word	0x00019fc9
   196b0:	00001137 	.word	0x00001137
   196b4:	00001129 	.word	0x00001129

000196b8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   196b8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   196ba:	4b06      	ldr	r3, [pc, #24]	; (196d4 <sd_mmc_get_type+0x1c>)
   196bc:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
   196be:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   196c0:	2800      	cmp	r0, #0
   196c2:	d001      	beq.n	196c8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   196c4:	0018      	movs	r0, r3
   196c6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   196c8:	4b03      	ldr	r3, [pc, #12]	; (196d8 <sd_mmc_get_type+0x20>)
   196ca:	4798      	blx	r3
	return sd_mmc_card->type;
   196cc:	4b03      	ldr	r3, [pc, #12]	; (196dc <sd_mmc_get_type+0x24>)
   196ce:	681b      	ldr	r3, [r3, #0]
   196d0:	7adb      	ldrb	r3, [r3, #11]
   196d2:	e7f7      	b.n	196c4 <sd_mmc_get_type+0xc>
   196d4:	000190ed 	.word	0x000190ed
   196d8:	000191cd 	.word	0x000191cd
   196dc:	20003c58 	.word	0x20003c58

000196e0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   196e0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   196e2:	4b06      	ldr	r3, [pc, #24]	; (196fc <sd_mmc_get_capacity+0x1c>)
   196e4:	4798      	blx	r3
		return 0;
   196e6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   196e8:	2800      	cmp	r0, #0
   196ea:	d001      	beq.n	196f0 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   196ec:	0018      	movs	r0, r3
   196ee:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   196f0:	4b03      	ldr	r3, [pc, #12]	; (19700 <sd_mmc_get_capacity+0x20>)
   196f2:	4798      	blx	r3
	return sd_mmc_card->capacity;
   196f4:	4b03      	ldr	r3, [pc, #12]	; (19704 <sd_mmc_get_capacity+0x24>)
   196f6:	681b      	ldr	r3, [r3, #0]
   196f8:	685b      	ldr	r3, [r3, #4]
   196fa:	e7f7      	b.n	196ec <sd_mmc_get_capacity+0xc>
   196fc:	000190ed 	.word	0x000190ed
   19700:	000191cd 	.word	0x000191cd
   19704:	20003c58 	.word	0x20003c58

00019708 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   19708:	2000      	movs	r0, #0
   1970a:	4770      	bx	lr

0001970c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1970c:	b570      	push	{r4, r5, r6, lr}
   1970e:	b082      	sub	sp, #8
   19710:	000e      	movs	r6, r1
   19712:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   19714:	4b16      	ldr	r3, [pc, #88]	; (19770 <sd_mmc_init_read_blocks+0x64>)
   19716:	4798      	blx	r3
   19718:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   1971a:	d002      	beq.n	19722 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   1971c:	0020      	movs	r0, r4
   1971e:	b002      	add	sp, #8
   19720:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
   19722:	4b14      	ldr	r3, [pc, #80]	; (19774 <sd_mmc_init_read_blocks+0x68>)
   19724:	4798      	blx	r3
   19726:	2800      	cmp	r0, #0
   19728:	d017      	beq.n	1975a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
   1972a:	2d01      	cmp	r5, #1
   1972c:	d919      	bls.n	19762 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1972e:	4812      	ldr	r0, [pc, #72]	; (19778 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   19730:	4b12      	ldr	r3, [pc, #72]	; (1977c <sd_mmc_init_read_blocks+0x70>)
   19732:	681b      	ldr	r3, [r3, #0]
   19734:	7adb      	ldrb	r3, [r3, #11]
   19736:	071b      	lsls	r3, r3, #28
   19738:	d400      	bmi.n	1973c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
   1973a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1973c:	2301      	movs	r3, #1
   1973e:	9300      	str	r3, [sp, #0]
   19740:	002b      	movs	r3, r5
   19742:	2280      	movs	r2, #128	; 0x80
   19744:	0092      	lsls	r2, r2, #2
   19746:	0031      	movs	r1, r6
   19748:	4e0d      	ldr	r6, [pc, #52]	; (19780 <sd_mmc_init_read_blocks+0x74>)
   1974a:	47b0      	blx	r6
   1974c:	2800      	cmp	r0, #0
   1974e:	d00a      	beq.n	19766 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
   19750:	4b0c      	ldr	r3, [pc, #48]	; (19784 <sd_mmc_init_read_blocks+0x78>)
   19752:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   19754:	4b0c      	ldr	r3, [pc, #48]	; (19788 <sd_mmc_init_read_blocks+0x7c>)
   19756:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
   19758:	e7e0      	b.n	1971c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
   1975a:	4b0c      	ldr	r3, [pc, #48]	; (1978c <sd_mmc_init_read_blocks+0x80>)
   1975c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1975e:	3405      	adds	r4, #5
   19760:	e7dc      	b.n	1971c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   19762:	480b      	ldr	r0, [pc, #44]	; (19790 <sd_mmc_init_read_blocks+0x84>)
   19764:	e7e4      	b.n	19730 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
   19766:	4b09      	ldr	r3, [pc, #36]	; (1978c <sd_mmc_init_read_blocks+0x80>)
   19768:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1976a:	2405      	movs	r4, #5
   1976c:	e7d6      	b.n	1971c <sd_mmc_init_read_blocks+0x10>
   1976e:	46c0      	nop			; (mov r8, r8)
   19770:	000190ed 	.word	0x000190ed
   19774:	00019149 	.word	0x00019149
   19778:	00101112 	.word	0x00101112
   1977c:	20003c58 	.word	0x20003c58
   19780:	00019e21 	.word	0x00019e21
   19784:	20003c7c 	.word	0x20003c7c
   19788:	20003c7e 	.word	0x20003c7e
   1978c:	000191cd 	.word	0x000191cd
   19790:	00081111 	.word	0x00081111

00019794 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   19794:	b510      	push	{r4, lr}
   19796:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   19798:	4b07      	ldr	r3, [pc, #28]	; (197b8 <sd_mmc_start_read_blocks+0x24>)
   1979a:	4798      	blx	r3
   1979c:	2800      	cmp	r0, #0
   1979e:	d104      	bne.n	197aa <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   197a0:	2200      	movs	r2, #0
   197a2:	4b06      	ldr	r3, [pc, #24]	; (197bc <sd_mmc_start_read_blocks+0x28>)
   197a4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   197a6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   197a8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   197aa:	4a04      	ldr	r2, [pc, #16]	; (197bc <sd_mmc_start_read_blocks+0x28>)
   197ac:	8813      	ldrh	r3, [r2, #0]
   197ae:	1b1c      	subs	r4, r3, r4
   197b0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   197b2:	2000      	movs	r0, #0
   197b4:	e7f8      	b.n	197a8 <sd_mmc_start_read_blocks+0x14>
   197b6:	46c0      	nop			; (mov r8, r8)
   197b8:	0001a04d 	.word	0x0001a04d
   197bc:	20003c7c 	.word	0x20003c7c

000197c0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   197c0:	b510      	push	{r4, lr}
   197c2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
   197c4:	4b14      	ldr	r3, [pc, #80]	; (19818 <sd_mmc_wait_end_of_read_blocks+0x58>)
   197c6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   197c8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
   197ca:	2800      	cmp	r0, #0
   197cc:	d101      	bne.n	197d2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   197ce:	0018      	movs	r0, r3
   197d0:	bd10      	pop	{r4, pc}
	if (abort) {
   197d2:	2c00      	cmp	r4, #0
   197d4:	d010      	beq.n	197f8 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
   197d6:	2200      	movs	r2, #0
   197d8:	4b10      	ldr	r3, [pc, #64]	; (1981c <sd_mmc_wait_end_of_read_blocks+0x5c>)
   197da:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   197dc:	4b10      	ldr	r3, [pc, #64]	; (19820 <sd_mmc_wait_end_of_read_blocks+0x60>)
   197de:	881b      	ldrh	r3, [r3, #0]
   197e0:	2b01      	cmp	r3, #1
   197e2:	d00f      	beq.n	19804 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   197e4:	2100      	movs	r1, #0
   197e6:	480f      	ldr	r0, [pc, #60]	; (19824 <sd_mmc_wait_end_of_read_blocks+0x64>)
   197e8:	4b0f      	ldr	r3, [pc, #60]	; (19828 <sd_mmc_wait_end_of_read_blocks+0x68>)
   197ea:	4798      	blx	r3
   197ec:	2800      	cmp	r0, #0
   197ee:	d00d      	beq.n	1980c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
   197f0:	4b0e      	ldr	r3, [pc, #56]	; (1982c <sd_mmc_wait_end_of_read_blocks+0x6c>)
   197f2:	4798      	blx	r3
	return SD_MMC_OK;
   197f4:	2300      	movs	r3, #0
   197f6:	e7ea      	b.n	197ce <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   197f8:	4b08      	ldr	r3, [pc, #32]	; (1981c <sd_mmc_wait_end_of_read_blocks+0x5c>)
   197fa:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   197fc:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   197fe:	2a00      	cmp	r2, #0
   19800:	d0ec      	beq.n	197dc <sd_mmc_wait_end_of_read_blocks+0x1c>
   19802:	e7e4      	b.n	197ce <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
   19804:	4b09      	ldr	r3, [pc, #36]	; (1982c <sd_mmc_wait_end_of_read_blocks+0x6c>)
   19806:	4798      	blx	r3
		return SD_MMC_OK;
   19808:	2300      	movs	r3, #0
   1980a:	e7e0      	b.n	197ce <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1980c:	2100      	movs	r1, #0
   1980e:	4805      	ldr	r0, [pc, #20]	; (19824 <sd_mmc_wait_end_of_read_blocks+0x64>)
   19810:	4b05      	ldr	r3, [pc, #20]	; (19828 <sd_mmc_wait_end_of_read_blocks+0x68>)
   19812:	4798      	blx	r3
   19814:	e7ec      	b.n	197f0 <sd_mmc_wait_end_of_read_blocks+0x30>
   19816:	46c0      	nop			; (mov r8, r8)
   19818:	0001a0d9 	.word	0x0001a0d9
   1981c:	20003c7c 	.word	0x20003c7c
   19820:	20003c7e 	.word	0x20003c7e
   19824:	0000310c 	.word	0x0000310c
   19828:	00019fb1 	.word	0x00019fb1
   1982c:	000191cd 	.word	0x000191cd

00019830 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   19830:	b570      	push	{r4, r5, r6, lr}
   19832:	b082      	sub	sp, #8
   19834:	000e      	movs	r6, r1
   19836:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   19838:	4b11      	ldr	r3, [pc, #68]	; (19880 <sd_mmc_init_write_blocks+0x50>)
   1983a:	4798      	blx	r3
   1983c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   1983e:	d116      	bne.n	1986e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
   19840:	2d01      	cmp	r5, #1
   19842:	d917      	bls.n	19874 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   19844:	480f      	ldr	r0, [pc, #60]	; (19884 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   19846:	4b10      	ldr	r3, [pc, #64]	; (19888 <sd_mmc_init_write_blocks+0x58>)
   19848:	681b      	ldr	r3, [r3, #0]
   1984a:	7adb      	ldrb	r3, [r3, #11]
   1984c:	071b      	lsls	r3, r3, #28
   1984e:	d400      	bmi.n	19852 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   19850:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   19852:	2301      	movs	r3, #1
   19854:	9300      	str	r3, [sp, #0]
   19856:	002b      	movs	r3, r5
   19858:	2280      	movs	r2, #128	; 0x80
   1985a:	0092      	lsls	r2, r2, #2
   1985c:	0031      	movs	r1, r6
   1985e:	4e0b      	ldr	r6, [pc, #44]	; (1988c <sd_mmc_init_write_blocks+0x5c>)
   19860:	47b0      	blx	r6
   19862:	2800      	cmp	r0, #0
   19864:	d008      	beq.n	19878 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   19866:	4b0a      	ldr	r3, [pc, #40]	; (19890 <sd_mmc_init_write_blocks+0x60>)
   19868:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1986a:	4b0a      	ldr	r3, [pc, #40]	; (19894 <sd_mmc_init_write_blocks+0x64>)
   1986c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
   1986e:	0020      	movs	r0, r4
   19870:	b002      	add	sp, #8
   19872:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   19874:	4808      	ldr	r0, [pc, #32]	; (19898 <sd_mmc_init_write_blocks+0x68>)
   19876:	e7e6      	b.n	19846 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
   19878:	4b08      	ldr	r3, [pc, #32]	; (1989c <sd_mmc_init_write_blocks+0x6c>)
   1987a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1987c:	2405      	movs	r4, #5
   1987e:	e7f6      	b.n	1986e <sd_mmc_init_write_blocks+0x3e>
   19880:	000190ed 	.word	0x000190ed
   19884:	00109119 	.word	0x00109119
   19888:	20003c58 	.word	0x20003c58
   1988c:	00019e21 	.word	0x00019e21
   19890:	20003c7c 	.word	0x20003c7c
   19894:	20003c7e 	.word	0x20003c7e
   19898:	00089118 	.word	0x00089118
   1989c:	000191cd 	.word	0x000191cd

000198a0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   198a0:	b510      	push	{r4, lr}
   198a2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   198a4:	4b07      	ldr	r3, [pc, #28]	; (198c4 <sd_mmc_start_write_blocks+0x24>)
   198a6:	4798      	blx	r3
   198a8:	2800      	cmp	r0, #0
   198aa:	d104      	bne.n	198b6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   198ac:	2200      	movs	r2, #0
   198ae:	4b06      	ldr	r3, [pc, #24]	; (198c8 <sd_mmc_start_write_blocks+0x28>)
   198b0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   198b2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   198b4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   198b6:	4a04      	ldr	r2, [pc, #16]	; (198c8 <sd_mmc_start_write_blocks+0x28>)
   198b8:	8813      	ldrh	r3, [r2, #0]
   198ba:	1b1c      	subs	r4, r3, r4
   198bc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   198be:	2000      	movs	r0, #0
   198c0:	e7f8      	b.n	198b4 <sd_mmc_start_write_blocks+0x14>
   198c2:	46c0      	nop			; (mov r8, r8)
   198c4:	0001a0dd 	.word	0x0001a0dd
   198c8:	20003c7c 	.word	0x20003c7c

000198cc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   198cc:	b510      	push	{r4, lr}
   198ce:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
   198d0:	4b0e      	ldr	r3, [pc, #56]	; (1990c <sd_mmc_wait_end_of_write_blocks+0x40>)
   198d2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   198d4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
   198d6:	2800      	cmp	r0, #0
   198d8:	d101      	bne.n	198de <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   198da:	0018      	movs	r0, r3
   198dc:	bd10      	pop	{r4, pc}
	if (abort) {
   198de:	2c00      	cmp	r4, #0
   198e0:	d00a      	beq.n	198f8 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   198e2:	2200      	movs	r2, #0
   198e4:	4b0a      	ldr	r3, [pc, #40]	; (19910 <sd_mmc_wait_end_of_write_blocks+0x44>)
   198e6:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   198e8:	4b0a      	ldr	r3, [pc, #40]	; (19914 <sd_mmc_wait_end_of_write_blocks+0x48>)
   198ea:	881b      	ldrh	r3, [r3, #0]
   198ec:	2b01      	cmp	r3, #1
   198ee:	d009      	beq.n	19904 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
   198f0:	4b09      	ldr	r3, [pc, #36]	; (19918 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   198f2:	4798      	blx	r3
	return SD_MMC_OK;
   198f4:	2300      	movs	r3, #0
   198f6:	e7f0      	b.n	198da <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   198f8:	4b05      	ldr	r3, [pc, #20]	; (19910 <sd_mmc_wait_end_of_write_blocks+0x44>)
   198fa:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   198fc:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   198fe:	2a00      	cmp	r2, #0
   19900:	d0f2      	beq.n	198e8 <sd_mmc_wait_end_of_write_blocks+0x1c>
   19902:	e7ea      	b.n	198da <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
   19904:	4b04      	ldr	r3, [pc, #16]	; (19918 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   19906:	4798      	blx	r3
		return SD_MMC_OK;
   19908:	2300      	movs	r3, #0
   1990a:	e7e6      	b.n	198da <sd_mmc_wait_end_of_write_blocks+0xe>
   1990c:	0001a15d 	.word	0x0001a15d
   19910:	20003c7c 	.word	0x20003c7c
   19914:	20003c7e 	.word	0x20003c7e
   19918:	000191cd 	.word	0x000191cd

0001991c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1991c:	b510      	push	{r4, lr}
   1991e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
   19920:	4b0f      	ldr	r3, [pc, #60]	; (19960 <sd_mmc_test_unit_ready+0x44>)
   19922:	4798      	blx	r3
   19924:	2801      	cmp	r0, #1
   19926:	d019      	beq.n	1995c <sd_mmc_test_unit_ready+0x40>
   19928:	2800      	cmp	r0, #0
   1992a:	d003      	beq.n	19934 <sd_mmc_test_unit_ready+0x18>
   1992c:	2802      	cmp	r0, #2
   1992e:	d010      	beq.n	19952 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
   19930:	2001      	movs	r0, #1
	}
}
   19932:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
   19934:	4b0b      	ldr	r3, [pc, #44]	; (19964 <sd_mmc_test_unit_ready+0x48>)
   19936:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
   19938:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
   1993a:	2b00      	cmp	r3, #0
   1993c:	d1f9      	bne.n	19932 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1993e:	0020      	movs	r0, r4
   19940:	4b09      	ldr	r3, [pc, #36]	; (19968 <sd_mmc_test_unit_ready+0x4c>)
   19942:	4798      	blx	r3
   19944:	0003      	movs	r3, r0
   19946:	2003      	movs	r0, #3
   19948:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
   1994a:	4243      	negs	r3, r0
   1994c:	4158      	adcs	r0, r3
   1994e:	0040      	lsls	r0, r0, #1
   19950:	e7ef      	b.n	19932 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
   19952:	2200      	movs	r2, #0
   19954:	4b03      	ldr	r3, [pc, #12]	; (19964 <sd_mmc_test_unit_ready+0x48>)
   19956:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
   19958:	2002      	movs	r0, #2
   1995a:	e7ea      	b.n	19932 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
   1995c:	2003      	movs	r0, #3
   1995e:	e7e8      	b.n	19932 <sd_mmc_test_unit_ready+0x16>
   19960:	00019209 	.word	0x00019209
   19964:	20003c84 	.word	0x20003c84
   19968:	000196b9 	.word	0x000196b9

0001996c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1996c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
   1996e:	2000      	movs	r0, #0
   19970:	4b01      	ldr	r3, [pc, #4]	; (19978 <sd_mmc_test_unit_ready_0+0xc>)
   19972:	4798      	blx	r3
}
   19974:	bd10      	pop	{r4, pc}
   19976:	46c0      	nop			; (mov r8, r8)
   19978:	0001991d 	.word	0x0001991d

0001997c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1997c:	b570      	push	{r4, r5, r6, lr}
   1997e:	0004      	movs	r4, r0
   19980:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   19982:	4b04      	ldr	r3, [pc, #16]	; (19994 <sd_mmc_read_capacity+0x18>)
   19984:	4798      	blx	r3
   19986:	0040      	lsls	r0, r0, #1
   19988:	3801      	subs	r0, #1
   1998a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   1998c:	0020      	movs	r0, r4
   1998e:	4b02      	ldr	r3, [pc, #8]	; (19998 <sd_mmc_read_capacity+0x1c>)
   19990:	4798      	blx	r3
}
   19992:	bd70      	pop	{r4, r5, r6, pc}
   19994:	000196e1 	.word	0x000196e1
   19998:	0001991d 	.word	0x0001991d

0001999c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1999c:	b510      	push	{r4, lr}
   1999e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   199a0:	2000      	movs	r0, #0
   199a2:	4b01      	ldr	r3, [pc, #4]	; (199a8 <sd_mmc_read_capacity_0+0xc>)
   199a4:	4798      	blx	r3
}
   199a6:	bd10      	pop	{r4, pc}
   199a8:	0001997d 	.word	0x0001997d

000199ac <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   199ac:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   199ae:	2000      	movs	r0, #0
   199b0:	4b01      	ldr	r3, [pc, #4]	; (199b8 <sd_mmc_wr_protect_0+0xc>)
   199b2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   199b4:	bd10      	pop	{r4, pc}
   199b6:	46c0      	nop			; (mov r8, r8)
   199b8:	00019709 	.word	0x00019709

000199bc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   199bc:	b510      	push	{r4, lr}
   199be:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   199c0:	2201      	movs	r2, #1
   199c2:	4b0c      	ldr	r3, [pc, #48]	; (199f4 <sd_mmc_mem_2_ram+0x38>)
   199c4:	4798      	blx	r3
   199c6:	2800      	cmp	r0, #0
   199c8:	d004      	beq.n	199d4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   199ca:	3802      	subs	r0, #2
   199cc:	4243      	negs	r3, r0
   199ce:	4158      	adcs	r0, r3
   199d0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   199d2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   199d4:	2101      	movs	r1, #1
   199d6:	0020      	movs	r0, r4
   199d8:	4b07      	ldr	r3, [pc, #28]	; (199f8 <sd_mmc_mem_2_ram+0x3c>)
   199da:	4798      	blx	r3
   199dc:	0003      	movs	r3, r0
		return CTRL_FAIL;
   199de:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   199e0:	2b00      	cmp	r3, #0
   199e2:	d1f6      	bne.n	199d2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   199e4:	2000      	movs	r0, #0
   199e6:	4b05      	ldr	r3, [pc, #20]	; (199fc <sd_mmc_mem_2_ram+0x40>)
   199e8:	4798      	blx	r3
   199ea:	1e43      	subs	r3, r0, #1
   199ec:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   199ee:	b2c0      	uxtb	r0, r0
   199f0:	e7ef      	b.n	199d2 <sd_mmc_mem_2_ram+0x16>
   199f2:	46c0      	nop			; (mov r8, r8)
   199f4:	0001970d 	.word	0x0001970d
   199f8:	00019795 	.word	0x00019795
   199fc:	000197c1 	.word	0x000197c1

00019a00 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   19a00:	b510      	push	{r4, lr}
   19a02:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
   19a04:	0001      	movs	r1, r0
   19a06:	2000      	movs	r0, #0
   19a08:	4b01      	ldr	r3, [pc, #4]	; (19a10 <sd_mmc_mem_2_ram_0+0x10>)
   19a0a:	4798      	blx	r3
}
   19a0c:	bd10      	pop	{r4, pc}
   19a0e:	46c0      	nop			; (mov r8, r8)
   19a10:	000199bd 	.word	0x000199bd

00019a14 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   19a14:	b510      	push	{r4, lr}
   19a16:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   19a18:	2201      	movs	r2, #1
   19a1a:	4b0c      	ldr	r3, [pc, #48]	; (19a4c <sd_mmc_ram_2_mem+0x38>)
   19a1c:	4798      	blx	r3
   19a1e:	2800      	cmp	r0, #0
   19a20:	d004      	beq.n	19a2c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   19a22:	3802      	subs	r0, #2
   19a24:	4243      	negs	r3, r0
   19a26:	4158      	adcs	r0, r3
   19a28:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   19a2a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   19a2c:	2101      	movs	r1, #1
   19a2e:	0020      	movs	r0, r4
   19a30:	4b07      	ldr	r3, [pc, #28]	; (19a50 <sd_mmc_ram_2_mem+0x3c>)
   19a32:	4798      	blx	r3
   19a34:	0003      	movs	r3, r0
		return CTRL_FAIL;
   19a36:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   19a38:	2b00      	cmp	r3, #0
   19a3a:	d1f6      	bne.n	19a2a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   19a3c:	2000      	movs	r0, #0
   19a3e:	4b05      	ldr	r3, [pc, #20]	; (19a54 <sd_mmc_ram_2_mem+0x40>)
   19a40:	4798      	blx	r3
   19a42:	1e43      	subs	r3, r0, #1
   19a44:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   19a46:	b2c0      	uxtb	r0, r0
   19a48:	e7ef      	b.n	19a2a <sd_mmc_ram_2_mem+0x16>
   19a4a:	46c0      	nop			; (mov r8, r8)
   19a4c:	00019831 	.word	0x00019831
   19a50:	000198a1 	.word	0x000198a1
   19a54:	000198cd 	.word	0x000198cd

00019a58 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   19a58:	b510      	push	{r4, lr}
   19a5a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
   19a5c:	0001      	movs	r1, r0
   19a5e:	2000      	movs	r0, #0
   19a60:	4b01      	ldr	r3, [pc, #4]	; (19a68 <sd_mmc_ram_2_mem_0+0x10>)
   19a62:	4798      	blx	r3
}
   19a64:	bd10      	pop	{r4, pc}
   19a66:	46c0      	nop			; (mov r8, r8)
   19a68:	00019a15 	.word	0x00019a15

00019a6c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   19a6c:	b500      	push	{lr}
   19a6e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
   19a70:	466b      	mov	r3, sp
   19a72:	1dd9      	adds	r1, r3, #7
   19a74:	23ff      	movs	r3, #255	; 0xff
   19a76:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   19a78:	2201      	movs	r2, #1
   19a7a:	480b      	ldr	r0, [pc, #44]	; (19aa8 <sd_mmc_spi_start_write_block+0x3c>)
   19a7c:	4b0b      	ldr	r3, [pc, #44]	; (19aac <sd_mmc_spi_start_write_block+0x40>)
   19a7e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   19a80:	4b0b      	ldr	r3, [pc, #44]	; (19ab0 <sd_mmc_spi_start_write_block+0x44>)
   19a82:	881b      	ldrh	r3, [r3, #0]
   19a84:	2b01      	cmp	r3, #1
   19a86:	d00a      	beq.n	19a9e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   19a88:	22fc      	movs	r2, #252	; 0xfc
   19a8a:	466b      	mov	r3, sp
   19a8c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   19a8e:	2201      	movs	r2, #1
   19a90:	466b      	mov	r3, sp
   19a92:	1d99      	adds	r1, r3, #6
   19a94:	4804      	ldr	r0, [pc, #16]	; (19aa8 <sd_mmc_spi_start_write_block+0x3c>)
   19a96:	4b05      	ldr	r3, [pc, #20]	; (19aac <sd_mmc_spi_start_write_block+0x40>)
   19a98:	4798      	blx	r3
}
   19a9a:	b003      	add	sp, #12
   19a9c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
   19a9e:	22fe      	movs	r2, #254	; 0xfe
   19aa0:	466b      	mov	r3, sp
   19aa2:	719a      	strb	r2, [r3, #6]
   19aa4:	e7f3      	b.n	19a8e <sd_mmc_spi_start_write_block+0x22>
   19aa6:	46c0      	nop			; (mov r8, r8)
   19aa8:	20003c88 	.word	0x20003c88
   19aac:	0001e35d 	.word	0x0001e35d
   19ab0:	20003ccc 	.word	0x20003ccc

00019ab4 <sd_mmc_spi_wait_busy>:
{
   19ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ab6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
   19ab8:	466b      	mov	r3, sp
   19aba:	1ddc      	adds	r4, r3, #7
   19abc:	23ff      	movs	r3, #255	; 0xff
   19abe:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19ac0:	4e12      	ldr	r6, [pc, #72]	; (19b0c <sd_mmc_spi_wait_busy+0x58>)
   19ac2:	2201      	movs	r2, #1
   19ac4:	0021      	movs	r1, r4
   19ac6:	0030      	movs	r0, r6
   19ac8:	4d11      	ldr	r5, [pc, #68]	; (19b10 <sd_mmc_spi_wait_busy+0x5c>)
   19aca:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19acc:	23ff      	movs	r3, #255	; 0xff
   19ace:	2201      	movs	r2, #1
   19ad0:	0021      	movs	r1, r4
   19ad2:	0030      	movs	r0, r6
   19ad4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19ad6:	23ff      	movs	r3, #255	; 0xff
   19ad8:	2201      	movs	r2, #1
   19ada:	0021      	movs	r1, r4
   19adc:	0030      	movs	r0, r6
   19ade:	47a8      	blx	r5
   19ae0:	4c0c      	ldr	r4, [pc, #48]	; (19b14 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
   19ae2:	466b      	mov	r3, sp
   19ae4:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19ae6:	4e09      	ldr	r6, [pc, #36]	; (19b0c <sd_mmc_spi_wait_busy+0x58>)
   19ae8:	4f09      	ldr	r7, [pc, #36]	; (19b10 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
   19aea:	782b      	ldrb	r3, [r5, #0]
   19aec:	2bff      	cmp	r3, #255	; 0xff
   19aee:	d009      	beq.n	19b04 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19af0:	23ff      	movs	r3, #255	; 0xff
   19af2:	2201      	movs	r2, #1
   19af4:	0029      	movs	r1, r5
   19af6:	0030      	movs	r0, r6
   19af8:	47b8      	blx	r7
   19afa:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
   19afc:	2c00      	cmp	r4, #0
   19afe:	d1f4      	bne.n	19aea <sd_mmc_spi_wait_busy+0x36>
			return false;
   19b00:	2000      	movs	r0, #0
   19b02:	e000      	b.n	19b06 <sd_mmc_spi_wait_busy+0x52>
	return true;
   19b04:	2001      	movs	r0, #1
}
   19b06:	b003      	add	sp, #12
   19b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b0a:	46c0      	nop			; (mov r8, r8)
   19b0c:	20003c88 	.word	0x20003c88
   19b10:	0001e195 	.word	0x0001e195
   19b14:	00030d40 	.word	0x00030d40

00019b18 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   19b18:	b570      	push	{r4, r5, r6, lr}
   19b1a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   19b1c:	4b14      	ldr	r3, [pc, #80]	; (19b70 <sd_mmc_spi_stop_multiwrite_block+0x58>)
   19b1e:	881c      	ldrh	r4, [r3, #0]
   19b20:	2c01      	cmp	r4, #1
   19b22:	d023      	beq.n	19b6c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   19b24:	4b13      	ldr	r3, [pc, #76]	; (19b74 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
   19b26:	8819      	ldrh	r1, [r3, #0]
   19b28:	4b13      	ldr	r3, [pc, #76]	; (19b78 <sd_mmc_spi_stop_multiwrite_block+0x60>)
   19b2a:	6818      	ldr	r0, [r3, #0]
   19b2c:	4b13      	ldr	r3, [pc, #76]	; (19b7c <sd_mmc_spi_stop_multiwrite_block+0x64>)
   19b2e:	4798      	blx	r3
		return true; // It is not the End of multi write
   19b30:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
   19b32:	4284      	cmp	r4, r0
   19b34:	d902      	bls.n	19b3c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
   19b36:	0018      	movs	r0, r3
   19b38:	b002      	add	sp, #8
   19b3a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
   19b3c:	466b      	mov	r3, sp
   19b3e:	1ddc      	adds	r4, r3, #7
   19b40:	23ff      	movs	r3, #255	; 0xff
   19b42:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19b44:	4e0e      	ldr	r6, [pc, #56]	; (19b80 <sd_mmc_spi_stop_multiwrite_block+0x68>)
   19b46:	2201      	movs	r2, #1
   19b48:	0021      	movs	r1, r4
   19b4a:	0030      	movs	r0, r6
   19b4c:	4d0d      	ldr	r5, [pc, #52]	; (19b84 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
   19b4e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
   19b50:	23fd      	movs	r3, #253	; 0xfd
   19b52:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19b54:	2201      	movs	r2, #1
   19b56:	0021      	movs	r1, r4
   19b58:	0030      	movs	r0, r6
   19b5a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
   19b5c:	4b0a      	ldr	r3, [pc, #40]	; (19b88 <sd_mmc_spi_stop_multiwrite_block+0x70>)
   19b5e:	4798      	blx	r3
   19b60:	1e03      	subs	r3, r0, #0
   19b62:	d1e8      	bne.n	19b36 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   19b64:	2105      	movs	r1, #5
   19b66:	4a09      	ldr	r2, [pc, #36]	; (19b8c <sd_mmc_spi_stop_multiwrite_block+0x74>)
   19b68:	7011      	strb	r1, [r2, #0]
		return false;
   19b6a:	e7e4      	b.n	19b36 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
   19b6c:	2301      	movs	r3, #1
   19b6e:	e7e2      	b.n	19b36 <sd_mmc_spi_stop_multiwrite_block+0x1e>
   19b70:	20003ccc 	.word	0x20003ccc
   19b74:	20003cc4 	.word	0x20003cc4
   19b78:	20003cd4 	.word	0x20003cd4
   19b7c:	00024039 	.word	0x00024039
   19b80:	20003c88 	.word	0x20003c88
   19b84:	0001e35d 	.word	0x0001e35d
   19b88:	00019ab5 	.word	0x00019ab5
   19b8c:	20003ccb 	.word	0x20003ccb

00019b90 <sd_mmc_spi_start_read_block>:
{
   19b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b92:	b083      	sub	sp, #12
	token = 0;
   19b94:	2200      	movs	r2, #0
   19b96:	466b      	mov	r3, sp
   19b98:	71da      	strb	r2, [r3, #7]
   19b9a:	4c14      	ldr	r4, [pc, #80]	; (19bec <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   19b9c:	466b      	mov	r3, sp
   19b9e:	1ddd      	adds	r5, r3, #7
   19ba0:	4e13      	ldr	r6, [pc, #76]	; (19bf0 <sd_mmc_spi_start_read_block+0x60>)
   19ba2:	4f14      	ldr	r7, [pc, #80]	; (19bf4 <sd_mmc_spi_start_read_block+0x64>)
   19ba4:	23ff      	movs	r3, #255	; 0xff
   19ba6:	2201      	movs	r2, #1
   19ba8:	0029      	movs	r1, r5
   19baa:	0030      	movs	r0, r6
   19bac:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   19bae:	782b      	ldrb	r3, [r5, #0]
   19bb0:	220f      	movs	r2, #15
   19bb2:	0019      	movs	r1, r3
   19bb4:	4391      	bics	r1, r2
   19bb6:	1e0a      	subs	r2, r1, #0
   19bb8:	d009      	beq.n	19bce <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   19bba:	2bfe      	cmp	r3, #254	; 0xfe
   19bbc:	d013      	beq.n	19be6 <sd_mmc_spi_start_read_block+0x56>
   19bbe:	3c01      	subs	r4, #1
		if (i-- == 0) {
   19bc0:	2c00      	cmp	r4, #0
   19bc2:	d1ef      	bne.n	19ba4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   19bc4:	2204      	movs	r2, #4
   19bc6:	4b0c      	ldr	r3, [pc, #48]	; (19bf8 <sd_mmc_spi_start_read_block+0x68>)
   19bc8:	701a      	strb	r2, [r3, #0]
			return false;
   19bca:	2000      	movs	r0, #0
   19bcc:	e00c      	b.n	19be8 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   19bce:	075b      	lsls	r3, r3, #29
   19bd0:	d004      	beq.n	19bdc <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   19bd2:	3207      	adds	r2, #7
   19bd4:	4b08      	ldr	r3, [pc, #32]	; (19bf8 <sd_mmc_spi_start_read_block+0x68>)
   19bd6:	701a      	strb	r2, [r3, #0]
			return false;
   19bd8:	2000      	movs	r0, #0
   19bda:	e005      	b.n	19be8 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   19bdc:	220b      	movs	r2, #11
   19bde:	4b06      	ldr	r3, [pc, #24]	; (19bf8 <sd_mmc_spi_start_read_block+0x68>)
   19be0:	701a      	strb	r2, [r3, #0]
			return false;
   19be2:	2000      	movs	r0, #0
   19be4:	e000      	b.n	19be8 <sd_mmc_spi_start_read_block+0x58>
	return true;
   19be6:	2001      	movs	r0, #1
}
   19be8:	b003      	add	sp, #12
   19bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19bec:	0007a120 	.word	0x0007a120
   19bf0:	20003c88 	.word	0x20003c88
   19bf4:	0001e195 	.word	0x0001e195
   19bf8:	20003ccb 	.word	0x20003ccb

00019bfc <sd_mmc_spi_stop_write_block>:
{
   19bfc:	b530      	push	{r4, r5, lr}
   19bfe:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   19c00:	a901      	add	r1, sp, #4
   19c02:	2301      	movs	r3, #1
   19c04:	425b      	negs	r3, r3
   19c06:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   19c08:	4d14      	ldr	r5, [pc, #80]	; (19c5c <sd_mmc_spi_stop_write_block+0x60>)
   19c0a:	2202      	movs	r2, #2
   19c0c:	0028      	movs	r0, r5
   19c0e:	4b14      	ldr	r3, [pc, #80]	; (19c60 <sd_mmc_spi_stop_write_block+0x64>)
   19c10:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   19c12:	466b      	mov	r3, sp
   19c14:	1ddc      	adds	r4, r3, #7
   19c16:	23ff      	movs	r3, #255	; 0xff
   19c18:	2201      	movs	r2, #1
   19c1a:	0021      	movs	r1, r4
   19c1c:	0028      	movs	r0, r5
   19c1e:	4d11      	ldr	r5, [pc, #68]	; (19c64 <sd_mmc_spi_stop_write_block+0x68>)
   19c20:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   19c22:	7822      	ldrb	r2, [r4, #0]
   19c24:	2311      	movs	r3, #17
   19c26:	4013      	ands	r3, r2
   19c28:	2b01      	cmp	r3, #1
   19c2a:	d005      	beq.n	19c38 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19c2c:	2201      	movs	r2, #1
   19c2e:	4b0e      	ldr	r3, [pc, #56]	; (19c68 <sd_mmc_spi_stop_write_block+0x6c>)
   19c30:	701a      	strb	r2, [r3, #0]
		return false;
   19c32:	2000      	movs	r0, #0
}
   19c34:	b003      	add	sp, #12
   19c36:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   19c38:	231e      	movs	r3, #30
   19c3a:	401a      	ands	r2, r3
   19c3c:	2a04      	cmp	r2, #4
   19c3e:	d00b      	beq.n	19c58 <sd_mmc_spi_stop_write_block+0x5c>
   19c40:	2a0a      	cmp	r2, #10
   19c42:	d104      	bne.n	19c4e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   19c44:	3a02      	subs	r2, #2
   19c46:	4b08      	ldr	r3, [pc, #32]	; (19c68 <sd_mmc_spi_stop_write_block+0x6c>)
   19c48:	701a      	strb	r2, [r3, #0]
		return false;
   19c4a:	2000      	movs	r0, #0
   19c4c:	e7f2      	b.n	19c34 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   19c4e:	220a      	movs	r2, #10
   19c50:	4b05      	ldr	r3, [pc, #20]	; (19c68 <sd_mmc_spi_stop_write_block+0x6c>)
   19c52:	701a      	strb	r2, [r3, #0]
		return false;
   19c54:	2000      	movs	r0, #0
   19c56:	e7ed      	b.n	19c34 <sd_mmc_spi_stop_write_block+0x38>
	return true;
   19c58:	2001      	movs	r0, #1
   19c5a:	e7eb      	b.n	19c34 <sd_mmc_spi_stop_write_block+0x38>
   19c5c:	20003c88 	.word	0x20003c88
   19c60:	0001e35d 	.word	0x0001e35d
   19c64:	0001e195 	.word	0x0001e195
   19c68:	20003ccb 	.word	0x20003ccb

00019c6c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   19c6c:	b570      	push	{r4, r5, r6, lr}
   19c6e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19c70:	2300      	movs	r3, #0
   19c72:	4a2d      	ldr	r2, [pc, #180]	; (19d28 <sd_mmc_spi_init+0xbc>)
   19c74:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   19c76:	ac02      	add	r4, sp, #8
   19c78:	2501      	movs	r5, #1
   19c7a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   19c7c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   19c7e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   19c80:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   19c82:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   19c84:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   19c86:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   19c88:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   19c8a:	2224      	movs	r2, #36	; 0x24
   19c8c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   19c8e:	3a18      	subs	r2, #24
   19c90:	2100      	movs	r1, #0
   19c92:	a808      	add	r0, sp, #32
   19c94:	4b25      	ldr	r3, [pc, #148]	; (19d2c <sd_mmc_spi_init+0xc0>)
   19c96:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   19c98:	2380      	movs	r3, #128	; 0x80
   19c9a:	025b      	lsls	r3, r3, #9
   19c9c:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   19c9e:	4b24      	ldr	r3, [pc, #144]	; (19d30 <sd_mmc_spi_init+0xc4>)
   19ca0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   19ca2:	4b24      	ldr	r3, [pc, #144]	; (19d34 <sd_mmc_spi_init+0xc8>)
   19ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   19ca6:	4b24      	ldr	r3, [pc, #144]	; (19d38 <sd_mmc_spi_init+0xcc>)
   19ca8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   19caa:	4b24      	ldr	r3, [pc, #144]	; (19d3c <sd_mmc_spi_init+0xd0>)
   19cac:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   19cae:	4b24      	ldr	r3, [pc, #144]	; (19d40 <sd_mmc_spi_init+0xd4>)
   19cb0:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   19cb2:	4e24      	ldr	r6, [pc, #144]	; (19d44 <sd_mmc_spi_init+0xd8>)
   19cb4:	0022      	movs	r2, r4
   19cb6:	4924      	ldr	r1, [pc, #144]	; (19d48 <sd_mmc_spi_init+0xdc>)
   19cb8:	0030      	movs	r0, r6
   19cba:	4b24      	ldr	r3, [pc, #144]	; (19d4c <sd_mmc_spi_init+0xe0>)
   19cbc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   19cbe:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   19cc0:	0020      	movs	r0, r4
   19cc2:	4b23      	ldr	r3, [pc, #140]	; (19d50 <sd_mmc_spi_init+0xe4>)
   19cc4:	4798      	blx	r3
   19cc6:	231f      	movs	r3, #31
   19cc8:	4018      	ands	r0, r3
   19cca:	4085      	lsls	r5, r0
   19ccc:	4b21      	ldr	r3, [pc, #132]	; (19d54 <sd_mmc_spi_init+0xe8>)
   19cce:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   19cd0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
   19cd2:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   19cd4:	2b00      	cmp	r3, #0
   19cd6:	d1fc      	bne.n	19cd2 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   19cd8:	6823      	ldr	r3, [r4, #0]
   19cda:	2202      	movs	r2, #2
   19cdc:	4313      	orrs	r3, r2
   19cde:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
   19ce0:	4a1d      	ldr	r2, [pc, #116]	; (19d58 <sd_mmc_spi_init+0xec>)
   19ce2:	2300      	movs	r3, #0
   19ce4:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
   19ce6:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
   19ce8:	491c      	ldr	r1, [pc, #112]	; (19d5c <sd_mmc_spi_init+0xf0>)
   19cea:	7808      	ldrb	r0, [r1, #0]
   19cec:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
   19cee:	4c1c      	ldr	r4, [pc, #112]	; (19d60 <sd_mmc_spi_init+0xf4>)
   19cf0:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
   19cf2:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   19cf4:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   19cf6:	a901      	add	r1, sp, #4
   19cf8:	2201      	movs	r2, #1
   19cfa:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   19cfc:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   19cfe:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   19d00:	4b18      	ldr	r3, [pc, #96]	; (19d64 <sd_mmc_spi_init+0xf8>)
   19d02:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   19d04:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   19d06:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   19d08:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19d0a:	2900      	cmp	r1, #0
   19d0c:	d104      	bne.n	19d18 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
   19d0e:	0953      	lsrs	r3, r2, #5
   19d10:	01db      	lsls	r3, r3, #7
   19d12:	4915      	ldr	r1, [pc, #84]	; (19d68 <sd_mmc_spi_init+0xfc>)
   19d14:	468c      	mov	ip, r1
   19d16:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19d18:	211f      	movs	r1, #31
   19d1a:	4011      	ands	r1, r2
   19d1c:	2201      	movs	r2, #1
   19d1e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   19d20:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
   19d22:	b010      	add	sp, #64	; 0x40
   19d24:	bd70      	pop	{r4, r5, r6, pc}
   19d26:	46c0      	nop			; (mov r8, r8)
   19d28:	20003ccb 	.word	0x20003ccb
   19d2c:	000262a3 	.word	0x000262a3
   19d30:	00100002 	.word	0x00100002
   19d34:	00110002 	.word	0x00110002
   19d38:	00120002 	.word	0x00120002
   19d3c:	00130002 	.word	0x00130002
   19d40:	00061a80 	.word	0x00061a80
   19d44:	20003c88 	.word	0x20003c88
   19d48:	42000c00 	.word	0x42000c00
   19d4c:	0001dfbd 	.word	0x0001dfbd
   19d50:	0001de75 	.word	0x0001de75
   19d54:	e000e100 	.word	0xe000e100
   19d58:	20003cd8 	.word	0x20003cd8
   19d5c:	200000cc 	.word	0x200000cc
   19d60:	20003cc8 	.word	0x20003cc8
   19d64:	0001d861 	.word	0x0001d861
   19d68:	41004400 	.word	0x41004400

00019d6c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   19d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d6e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19d70:	2200      	movs	r2, #0
   19d72:	4b0d      	ldr	r3, [pc, #52]	; (19da8 <sd_mmc_spi_select_device+0x3c>)
   19d74:	701a      	strb	r2, [r3, #0]
   19d76:	000c      	movs	r4, r1
   19d78:	4b0c      	ldr	r3, [pc, #48]	; (19dac <sd_mmc_spi_select_device+0x40>)
   19d7a:	4299      	cmp	r1, r3
   19d7c:	d900      	bls.n	19d80 <sd_mmc_spi_select_device+0x14>
   19d7e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19d80:	4d0b      	ldr	r5, [pc, #44]	; (19db0 <sd_mmc_spi_select_device+0x44>)
   19d82:	4e0c      	ldr	r6, [pc, #48]	; (19db4 <sd_mmc_spi_select_device+0x48>)
   19d84:	e001      	b.n	19d8a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
   19d86:	08e3      	lsrs	r3, r4, #3
   19d88:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19d8a:	0021      	movs	r1, r4
   19d8c:	0028      	movs	r0, r5
   19d8e:	47b0      	blx	r6
   19d90:	2817      	cmp	r0, #23
   19d92:	d0f8      	beq.n	19d86 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   19d94:	0079      	lsls	r1, r7, #1
   19d96:	19cf      	adds	r7, r1, r7
   19d98:	4907      	ldr	r1, [pc, #28]	; (19db8 <sd_mmc_spi_select_device+0x4c>)
   19d9a:	19c9      	adds	r1, r1, r7
   19d9c:	2201      	movs	r2, #1
   19d9e:	4804      	ldr	r0, [pc, #16]	; (19db0 <sd_mmc_spi_select_device+0x44>)
   19da0:	4b06      	ldr	r3, [pc, #24]	; (19dbc <sd_mmc_spi_select_device+0x50>)
   19da2:	4798      	blx	r3
}
   19da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19da6:	46c0      	nop			; (mov r8, r8)
   19da8:	20003ccb 	.word	0x20003ccb
   19dac:	00989680 	.word	0x00989680
   19db0:	20003c88 	.word	0x20003c88
   19db4:	0001df05 	.word	0x0001df05
   19db8:	20003cc8 	.word	0x20003cc8
   19dbc:	0001e269 	.word	0x0001e269

00019dc0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   19dc0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19dc2:	2200      	movs	r2, #0
   19dc4:	4b04      	ldr	r3, [pc, #16]	; (19dd8 <sd_mmc_spi_deselect_device+0x18>)
   19dc6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   19dc8:	0041      	lsls	r1, r0, #1
   19dca:	1808      	adds	r0, r1, r0
   19dcc:	4903      	ldr	r1, [pc, #12]	; (19ddc <sd_mmc_spi_deselect_device+0x1c>)
   19dce:	1809      	adds	r1, r1, r0
   19dd0:	4803      	ldr	r0, [pc, #12]	; (19de0 <sd_mmc_spi_deselect_device+0x20>)
   19dd2:	4b04      	ldr	r3, [pc, #16]	; (19de4 <sd_mmc_spi_deselect_device+0x24>)
   19dd4:	4798      	blx	r3
}
   19dd6:	bd10      	pop	{r4, pc}
   19dd8:	20003ccb 	.word	0x20003ccb
   19ddc:	20003cc8 	.word	0x20003cc8
   19de0:	20003c88 	.word	0x20003c88
   19de4:	0001e269 	.word	0x0001e269

00019de8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   19de8:	b570      	push	{r4, r5, r6, lr}
   19dea:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
   19dec:	22ff      	movs	r2, #255	; 0xff
   19dee:	466b      	mov	r3, sp
   19df0:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19df2:	2200      	movs	r2, #0
   19df4:	4b07      	ldr	r3, [pc, #28]	; (19e14 <sd_mmc_spi_send_clock+0x2c>)
   19df6:	701a      	strb	r2, [r3, #0]
   19df8:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   19dfa:	4e07      	ldr	r6, [pc, #28]	; (19e18 <sd_mmc_spi_send_clock+0x30>)
   19dfc:	4d07      	ldr	r5, [pc, #28]	; (19e1c <sd_mmc_spi_send_clock+0x34>)
   19dfe:	2201      	movs	r2, #1
   19e00:	466b      	mov	r3, sp
   19e02:	1dd9      	adds	r1, r3, #7
   19e04:	0030      	movs	r0, r6
   19e06:	47a8      	blx	r5
   19e08:	3c01      	subs	r4, #1
   19e0a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
   19e0c:	2c00      	cmp	r4, #0
   19e0e:	d1f6      	bne.n	19dfe <sd_mmc_spi_send_clock+0x16>
	}
}
   19e10:	b002      	add	sp, #8
   19e12:	bd70      	pop	{r4, r5, r6, pc}
   19e14:	20003ccb 	.word	0x20003ccb
   19e18:	20003c88 	.word	0x20003c88
   19e1c:	0001e35d 	.word	0x0001e35d

00019e20 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   19e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e22:	46c6      	mov	lr, r8
   19e24:	b500      	push	{lr}
   19e26:	b086      	sub	sp, #24
   19e28:	4680      	mov	r8, r0
   19e2a:	9200      	str	r2, [sp, #0]
   19e2c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
   19e2e:	22ff      	movs	r2, #255	; 0xff
   19e30:	230f      	movs	r3, #15
   19e32:	a802      	add	r0, sp, #8
   19e34:	4684      	mov	ip, r0
   19e36:	4463      	add	r3, ip
   19e38:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19e3a:	2200      	movs	r2, #0
   19e3c:	4b53      	ldr	r3, [pc, #332]	; (19f8c <sd_mmc_spi_adtc_start+0x16c>)
   19e3e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   19e40:	ab04      	add	r3, sp, #16
   19e42:	323f      	adds	r2, #63	; 0x3f
   19e44:	4640      	mov	r0, r8
   19e46:	4002      	ands	r2, r0
   19e48:	2040      	movs	r0, #64	; 0x40
   19e4a:	4302      	orrs	r2, r0
   19e4c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   19e4e:	0e0a      	lsrs	r2, r1, #24
   19e50:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   19e52:	0c0a      	lsrs	r2, r1, #16
   19e54:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   19e56:	0a0a      	lsrs	r2, r1, #8
   19e58:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   19e5a:	7119      	strb	r1, [r3, #4]
   19e5c:	2700      	movs	r7, #0
	crc = 0;
   19e5e:	2300      	movs	r3, #0
		value = *buf++;
   19e60:	a904      	add	r1, sp, #16
   19e62:	2208      	movs	r2, #8
				crc ^= 0x09;
   19e64:	2409      	movs	r4, #9
   19e66:	e011      	b.n	19e8c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
   19e68:	0076      	lsls	r6, r6, #1
   19e6a:	b2f6      	uxtb	r6, r6
   19e6c:	3801      	subs	r0, #1
   19e6e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
   19e70:	2800      	cmp	r0, #0
   19e72:	d008      	beq.n	19e86 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
   19e74:	005b      	lsls	r3, r3, #1
   19e76:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   19e78:	001d      	movs	r5, r3
   19e7a:	4075      	eors	r5, r6
   19e7c:	062d      	lsls	r5, r5, #24
   19e7e:	d5f3      	bpl.n	19e68 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
   19e80:	4063      	eors	r3, r4
   19e82:	b2db      	uxtb	r3, r3
   19e84:	e7f0      	b.n	19e68 <sd_mmc_spi_adtc_start+0x48>
   19e86:	3701      	adds	r7, #1
	while (size--) {
   19e88:	2f05      	cmp	r7, #5
   19e8a:	d002      	beq.n	19e92 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
   19e8c:	5c7e      	ldrb	r6, [r7, r1]
   19e8e:	0010      	movs	r0, r2
   19e90:	e7f0      	b.n	19e74 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
   19e92:	005b      	lsls	r3, r3, #1
   19e94:	2201      	movs	r2, #1
   19e96:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   19e98:	ac04      	add	r4, sp, #16
   19e9a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   19e9c:	4e3c      	ldr	r6, [pc, #240]	; (19f90 <sd_mmc_spi_adtc_start+0x170>)
   19e9e:	2201      	movs	r2, #1
   19ea0:	210f      	movs	r1, #15
   19ea2:	ab02      	add	r3, sp, #8
   19ea4:	469c      	mov	ip, r3
   19ea6:	4461      	add	r1, ip
   19ea8:	0030      	movs	r0, r6
   19eaa:	4f3a      	ldr	r7, [pc, #232]	; (19f94 <sd_mmc_spi_adtc_start+0x174>)
   19eac:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   19eae:	2206      	movs	r2, #6
   19eb0:	0021      	movs	r1, r4
   19eb2:	0030      	movs	r0, r6
   19eb4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   19eb6:	ab02      	add	r3, sp, #8
   19eb8:	1dd9      	adds	r1, r3, #7
   19eba:	23ff      	movs	r3, #255	; 0xff
   19ebc:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19ebe:	2201      	movs	r2, #1
   19ec0:	0030      	movs	r0, r6
   19ec2:	4e35      	ldr	r6, [pc, #212]	; (19f98 <sd_mmc_spi_adtc_start+0x178>)
   19ec4:	47b0      	blx	r6
   19ec6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19ec8:	ab02      	add	r3, sp, #8
   19eca:	1dde      	adds	r6, r3, #7
   19ecc:	4f30      	ldr	r7, [pc, #192]	; (19f90 <sd_mmc_spi_adtc_start+0x170>)
   19ece:	4d32      	ldr	r5, [pc, #200]	; (19f98 <sd_mmc_spi_adtc_start+0x178>)
   19ed0:	23ff      	movs	r3, #255	; 0xff
   19ed2:	2201      	movs	r2, #1
   19ed4:	0031      	movs	r1, r6
   19ed6:	0038      	movs	r0, r7
   19ed8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   19eda:	7833      	ldrb	r3, [r6, #0]
   19edc:	b25a      	sxtb	r2, r3
   19ede:	2a00      	cmp	r2, #0
   19ee0:	da0b      	bge.n	19efa <sd_mmc_spi_adtc_start+0xda>
   19ee2:	3c01      	subs	r4, #1
   19ee4:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   19ee6:	2c00      	cmp	r4, #0
   19ee8:	d1f2      	bne.n	19ed0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   19eea:	2202      	movs	r2, #2
   19eec:	4b27      	ldr	r3, [pc, #156]	; (19f8c <sd_mmc_spi_adtc_start+0x16c>)
   19eee:	701a      	strb	r2, [r3, #0]
			return false;
   19ef0:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
   19ef2:	b006      	add	sp, #24
   19ef4:	bc04      	pop	{r2}
   19ef6:	4690      	mov	r8, r2
   19ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
   19efa:	4a28      	ldr	r2, [pc, #160]	; (19f9c <sd_mmc_spi_adtc_start+0x17c>)
   19efc:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
   19efe:	071a      	lsls	r2, r3, #28
   19f00:	d41a      	bmi.n	19f38 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   19f02:	075a      	lsls	r2, r3, #29
   19f04:	d41d      	bmi.n	19f42 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
   19f06:	2201      	movs	r2, #1
   19f08:	4393      	bics	r3, r2
   19f0a:	d11f      	bne.n	19f4c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
   19f0c:	4643      	mov	r3, r8
   19f0e:	049b      	lsls	r3, r3, #18
   19f10:	d420      	bmi.n	19f54 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
   19f12:	4643      	mov	r3, r8
   19f14:	059b      	lsls	r3, r3, #22
   19f16:	d425      	bmi.n	19f64 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
   19f18:	4643      	mov	r3, r8
   19f1a:	055b      	lsls	r3, r3, #21
   19f1c:	d42b      	bmi.n	19f76 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
   19f1e:	4b20      	ldr	r3, [pc, #128]	; (19fa0 <sd_mmc_spi_adtc_start+0x180>)
   19f20:	466a      	mov	r2, sp
   19f22:	8812      	ldrh	r2, [r2, #0]
   19f24:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   19f26:	4b1f      	ldr	r3, [pc, #124]	; (19fa4 <sd_mmc_spi_adtc_start+0x184>)
   19f28:	466a      	mov	r2, sp
   19f2a:	8892      	ldrh	r2, [r2, #4]
   19f2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   19f2e:	2200      	movs	r2, #0
   19f30:	4b1d      	ldr	r3, [pc, #116]	; (19fa8 <sd_mmc_spi_adtc_start+0x188>)
   19f32:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   19f34:	2001      	movs	r0, #1
   19f36:	e7dc      	b.n	19ef2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   19f38:	2206      	movs	r2, #6
   19f3a:	4b14      	ldr	r3, [pc, #80]	; (19f8c <sd_mmc_spi_adtc_start+0x16c>)
   19f3c:	701a      	strb	r2, [r3, #0]
		return false;
   19f3e:	2000      	movs	r0, #0
   19f40:	e7d7      	b.n	19ef2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   19f42:	2209      	movs	r2, #9
   19f44:	4b11      	ldr	r3, [pc, #68]	; (19f8c <sd_mmc_spi_adtc_start+0x16c>)
   19f46:	701a      	strb	r2, [r3, #0]
		return false;
   19f48:	2000      	movs	r0, #0
   19f4a:	e7d2      	b.n	19ef2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19f4c:	4b0f      	ldr	r3, [pc, #60]	; (19f8c <sd_mmc_spi_adtc_start+0x16c>)
   19f4e:	701a      	strb	r2, [r3, #0]
		return false;
   19f50:	2000      	movs	r0, #0
   19f52:	e7ce      	b.n	19ef2 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
   19f54:	4b15      	ldr	r3, [pc, #84]	; (19fac <sd_mmc_spi_adtc_start+0x18c>)
   19f56:	4798      	blx	r3
   19f58:	2800      	cmp	r0, #0
   19f5a:	d1da      	bne.n	19f12 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   19f5c:	2203      	movs	r2, #3
   19f5e:	4b0b      	ldr	r3, [pc, #44]	; (19f8c <sd_mmc_spi_adtc_start+0x16c>)
   19f60:	701a      	strb	r2, [r3, #0]
			return false;
   19f62:	e7c6      	b.n	19ef2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
   19f64:	490d      	ldr	r1, [pc, #52]	; (19f9c <sd_mmc_spi_adtc_start+0x17c>)
   19f66:	2300      	movs	r3, #0
   19f68:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   19f6a:	33ff      	adds	r3, #255	; 0xff
   19f6c:	2201      	movs	r2, #1
   19f6e:	4808      	ldr	r0, [pc, #32]	; (19f90 <sd_mmc_spi_adtc_start+0x170>)
   19f70:	4e09      	ldr	r6, [pc, #36]	; (19f98 <sd_mmc_spi_adtc_start+0x178>)
   19f72:	47b0      	blx	r6
   19f74:	e7d0      	b.n	19f18 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   19f76:	4e09      	ldr	r6, [pc, #36]	; (19f9c <sd_mmc_spi_adtc_start+0x17c>)
   19f78:	23ff      	movs	r3, #255	; 0xff
   19f7a:	2204      	movs	r2, #4
   19f7c:	0031      	movs	r1, r6
   19f7e:	4804      	ldr	r0, [pc, #16]	; (19f90 <sd_mmc_spi_adtc_start+0x170>)
   19f80:	4f05      	ldr	r7, [pc, #20]	; (19f98 <sd_mmc_spi_adtc_start+0x178>)
   19f82:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   19f84:	6833      	ldr	r3, [r6, #0]
   19f86:	ba1b      	rev	r3, r3
   19f88:	6033      	str	r3, [r6, #0]
   19f8a:	e7c8      	b.n	19f1e <sd_mmc_spi_adtc_start+0xfe>
   19f8c:	20003ccb 	.word	0x20003ccb
   19f90:	20003c88 	.word	0x20003c88
   19f94:	0001e35d 	.word	0x0001e35d
   19f98:	0001e195 	.word	0x0001e195
   19f9c:	20003cd0 	.word	0x20003cd0
   19fa0:	20003cc4 	.word	0x20003cc4
   19fa4:	20003ccc 	.word	0x20003ccc
   19fa8:	20003cd4 	.word	0x20003cd4
   19fac:	00019ab5 	.word	0x00019ab5

00019fb0 <sd_mmc_spi_send_cmd>:
{
   19fb0:	b510      	push	{r4, lr}
   19fb2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   19fb4:	2300      	movs	r3, #0
   19fb6:	9300      	str	r3, [sp, #0]
   19fb8:	2200      	movs	r2, #0
   19fba:	4c02      	ldr	r4, [pc, #8]	; (19fc4 <sd_mmc_spi_send_cmd+0x14>)
   19fbc:	47a0      	blx	r4
}
   19fbe:	b002      	add	sp, #8
   19fc0:	bd10      	pop	{r4, pc}
   19fc2:	46c0      	nop			; (mov r8, r8)
   19fc4:	00019e21 	.word	0x00019e21

00019fc8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
   19fc8:	4b01      	ldr	r3, [pc, #4]	; (19fd0 <sd_mmc_spi_get_response+0x8>)
   19fca:	6818      	ldr	r0, [r3, #0]
}
   19fcc:	4770      	bx	lr
   19fce:	46c0      	nop			; (mov r8, r8)
   19fd0:	20003cd0 	.word	0x20003cd0

00019fd4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   19fd4:	b510      	push	{r4, lr}
   19fd6:	b084      	sub	sp, #16
   19fd8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19fda:	2200      	movs	r2, #0
   19fdc:	4b14      	ldr	r3, [pc, #80]	; (1a030 <sd_mmc_spi_read_word+0x5c>)
   19fde:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19fe0:	4b14      	ldr	r3, [pc, #80]	; (1a034 <sd_mmc_spi_read_word+0x60>)
   19fe2:	8819      	ldrh	r1, [r3, #0]
   19fe4:	4b14      	ldr	r3, [pc, #80]	; (1a038 <sd_mmc_spi_read_word+0x64>)
   19fe6:	6818      	ldr	r0, [r3, #0]
   19fe8:	4b14      	ldr	r3, [pc, #80]	; (1a03c <sd_mmc_spi_read_word+0x68>)
   19fea:	4798      	blx	r3
   19fec:	2900      	cmp	r1, #0
   19fee:	d103      	bne.n	19ff8 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   19ff0:	4b13      	ldr	r3, [pc, #76]	; (1a040 <sd_mmc_spi_read_word+0x6c>)
   19ff2:	4798      	blx	r3
   19ff4:	2800      	cmp	r0, #0
   19ff6:	d010      	beq.n	1a01a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   19ff8:	23ff      	movs	r3, #255	; 0xff
   19ffa:	2204      	movs	r2, #4
   19ffc:	a901      	add	r1, sp, #4
   19ffe:	4811      	ldr	r0, [pc, #68]	; (1a044 <sd_mmc_spi_read_word+0x70>)
   1a000:	4c11      	ldr	r4, [pc, #68]	; (1a048 <sd_mmc_spi_read_word+0x74>)
   1a002:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
   1a004:	4b0c      	ldr	r3, [pc, #48]	; (1a038 <sd_mmc_spi_read_word+0x64>)
   1a006:	681a      	ldr	r2, [r3, #0]
   1a008:	1d10      	adds	r0, r2, #4
   1a00a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1a00c:	4b09      	ldr	r3, [pc, #36]	; (1a034 <sd_mmc_spi_read_word+0x60>)
   1a00e:	8819      	ldrh	r1, [r3, #0]
   1a010:	4b0a      	ldr	r3, [pc, #40]	; (1a03c <sd_mmc_spi_read_word+0x68>)
   1a012:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
   1a014:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1a016:	2900      	cmp	r1, #0
   1a018:	d001      	beq.n	1a01e <sd_mmc_spi_read_word+0x4a>
}
   1a01a:	b004      	add	sp, #16
   1a01c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1a01e:	23ff      	movs	r3, #255	; 0xff
   1a020:	2202      	movs	r2, #2
   1a022:	a903      	add	r1, sp, #12
   1a024:	4807      	ldr	r0, [pc, #28]	; (1a044 <sd_mmc_spi_read_word+0x70>)
   1a026:	4c08      	ldr	r4, [pc, #32]	; (1a048 <sd_mmc_spi_read_word+0x74>)
   1a028:	47a0      	blx	r4
	return true;
   1a02a:	2001      	movs	r0, #1
   1a02c:	e7f5      	b.n	1a01a <sd_mmc_spi_read_word+0x46>
   1a02e:	46c0      	nop			; (mov r8, r8)
   1a030:	20003ccb 	.word	0x20003ccb
   1a034:	20003cc4 	.word	0x20003cc4
   1a038:	20003cd4 	.word	0x20003cd4
   1a03c:	00024145 	.word	0x00024145
   1a040:	00019b91 	.word	0x00019b91
   1a044:	20003c88 	.word	0x20003c88
   1a048:	0001e195 	.word	0x0001e195

0001a04c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a04e:	46de      	mov	lr, fp
   1a050:	4657      	mov	r7, sl
   1a052:	4646      	mov	r6, r8
   1a054:	b5c0      	push	{r6, r7, lr}
   1a056:	b082      	sub	sp, #8
   1a058:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1a05a:	2200      	movs	r2, #0
   1a05c:	4b17      	ldr	r3, [pc, #92]	; (1a0bc <sd_mmc_spi_start_read_blocks+0x70>)
   1a05e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
   1a060:	1e4c      	subs	r4, r1, #1
   1a062:	b2a4      	uxth	r4, r4
   1a064:	2900      	cmp	r1, #0
   1a066:	d026      	beq.n	1a0b6 <sd_mmc_spi_start_read_blocks+0x6a>
   1a068:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1a06a:	4b15      	ldr	r3, [pc, #84]	; (1a0c0 <sd_mmc_spi_start_read_blocks+0x74>)
   1a06c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1a06e:	4f15      	ldr	r7, [pc, #84]	; (1a0c4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
   1a070:	47d0      	blx	sl
   1a072:	4680      	mov	r8, r0
   1a074:	2800      	cmp	r0, #0
   1a076:	d017      	beq.n	1a0a8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1a078:	883a      	ldrh	r2, [r7, #0]
   1a07a:	465b      	mov	r3, fp
   1a07c:	1999      	adds	r1, r3, r6
   1a07e:	23ff      	movs	r3, #255	; 0xff
   1a080:	4811      	ldr	r0, [pc, #68]	; (1a0c8 <sd_mmc_spi_start_read_blocks+0x7c>)
   1a082:	4d12      	ldr	r5, [pc, #72]	; (1a0cc <sd_mmc_spi_start_read_blocks+0x80>)
   1a084:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1a086:	883b      	ldrh	r3, [r7, #0]
   1a088:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1a08a:	4a11      	ldr	r2, [pc, #68]	; (1a0d0 <sd_mmc_spi_start_read_blocks+0x84>)
   1a08c:	6811      	ldr	r1, [r2, #0]
   1a08e:	468c      	mov	ip, r1
   1a090:	4463      	add	r3, ip
   1a092:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1a094:	23ff      	movs	r3, #255	; 0xff
   1a096:	2202      	movs	r2, #2
   1a098:	a901      	add	r1, sp, #4
   1a09a:	480b      	ldr	r0, [pc, #44]	; (1a0c8 <sd_mmc_spi_start_read_blocks+0x7c>)
   1a09c:	47a8      	blx	r5
	while (nb_block--) {
   1a09e:	3c01      	subs	r4, #1
   1a0a0:	b2a4      	uxth	r4, r4
   1a0a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0d4 <sd_mmc_spi_start_read_blocks+0x88>)
   1a0a4:	429c      	cmp	r4, r3
   1a0a6:	d1e3      	bne.n	1a070 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
   1a0a8:	4640      	mov	r0, r8
   1a0aa:	b002      	add	sp, #8
   1a0ac:	bc1c      	pop	{r2, r3, r4}
   1a0ae:	4690      	mov	r8, r2
   1a0b0:	469a      	mov	sl, r3
   1a0b2:	46a3      	mov	fp, r4
   1a0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   1a0b6:	2301      	movs	r3, #1
   1a0b8:	4698      	mov	r8, r3
   1a0ba:	e7f5      	b.n	1a0a8 <sd_mmc_spi_start_read_blocks+0x5c>
   1a0bc:	20003ccb 	.word	0x20003ccb
   1a0c0:	00019b91 	.word	0x00019b91
   1a0c4:	20003cc4 	.word	0x20003cc4
   1a0c8:	20003c88 	.word	0x20003c88
   1a0cc:	0001e195 	.word	0x0001e195
   1a0d0:	20003cd4 	.word	0x20003cd4
   1a0d4:	0000ffff 	.word	0x0000ffff

0001a0d8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
   1a0d8:	2001      	movs	r0, #1
   1a0da:	4770      	bx	lr

0001a0dc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0de:	46c6      	mov	lr, r8
   1a0e0:	b500      	push	{lr}
   1a0e2:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1a0e4:	2200      	movs	r2, #0
   1a0e6:	4b15      	ldr	r3, [pc, #84]	; (1a13c <sd_mmc_spi_start_write_blocks+0x60>)
   1a0e8:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1a0ea:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1a0ec:	4f14      	ldr	r7, [pc, #80]	; (1a140 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1a0ee:	4e15      	ldr	r6, [pc, #84]	; (1a144 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
   1a0f0:	e000      	b.n	1a0f4 <sd_mmc_spi_start_write_blocks+0x18>
{
   1a0f2:	0021      	movs	r1, r4
	while (nb_block--) {
   1a0f4:	1e4c      	subs	r4, r1, #1
   1a0f6:	b2a4      	uxth	r4, r4
   1a0f8:	2900      	cmp	r1, #0
   1a0fa:	d01b      	beq.n	1a134 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
   1a0fc:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1a0fe:	8832      	ldrh	r2, [r6, #0]
   1a100:	4643      	mov	r3, r8
   1a102:	1959      	adds	r1, r3, r5
   1a104:	4810      	ldr	r0, [pc, #64]	; (1a148 <sd_mmc_spi_start_write_blocks+0x6c>)
   1a106:	4b11      	ldr	r3, [pc, #68]	; (1a14c <sd_mmc_spi_start_write_blocks+0x70>)
   1a108:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1a10a:	8833      	ldrh	r3, [r6, #0]
   1a10c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1a10e:	4a10      	ldr	r2, [pc, #64]	; (1a150 <sd_mmc_spi_start_write_blocks+0x74>)
   1a110:	6811      	ldr	r1, [r2, #0]
   1a112:	468c      	mov	ip, r1
   1a114:	4463      	add	r3, ip
   1a116:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1a118:	4b0e      	ldr	r3, [pc, #56]	; (1a154 <sd_mmc_spi_start_write_blocks+0x78>)
   1a11a:	4798      	blx	r3
   1a11c:	2800      	cmp	r0, #0
   1a11e:	d00a      	beq.n	1a136 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1a120:	2c00      	cmp	r4, #0
   1a122:	d0e6      	beq.n	1a0f2 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1a124:	4b0c      	ldr	r3, [pc, #48]	; (1a158 <sd_mmc_spi_start_write_blocks+0x7c>)
   1a126:	4798      	blx	r3
   1a128:	2800      	cmp	r0, #0
   1a12a:	d1e2      	bne.n	1a0f2 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a12c:	2205      	movs	r2, #5
   1a12e:	4b03      	ldr	r3, [pc, #12]	; (1a13c <sd_mmc_spi_start_write_blocks+0x60>)
   1a130:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1a132:	e000      	b.n	1a136 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
   1a134:	2001      	movs	r0, #1
}
   1a136:	bc04      	pop	{r2}
   1a138:	4690      	mov	r8, r2
   1a13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a13c:	20003ccb 	.word	0x20003ccb
   1a140:	00019a6d 	.word	0x00019a6d
   1a144:	20003cc4 	.word	0x20003cc4
   1a148:	20003c88 	.word	0x20003c88
   1a14c:	0001e35d 	.word	0x0001e35d
   1a150:	20003cd4 	.word	0x20003cd4
   1a154:	00019bfd 	.word	0x00019bfd
   1a158:	00019ab5 	.word	0x00019ab5

0001a15c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1a15c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1a15e:	4b05      	ldr	r3, [pc, #20]	; (1a174 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
   1a160:	4798      	blx	r3
   1a162:	2800      	cmp	r0, #0
   1a164:	d103      	bne.n	1a16e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a166:	2205      	movs	r2, #5
   1a168:	4b03      	ldr	r3, [pc, #12]	; (1a178 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
   1a16a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
   1a16c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
   1a16e:	4b03      	ldr	r3, [pc, #12]	; (1a17c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
   1a170:	4798      	blx	r3
   1a172:	e7fb      	b.n	1a16c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
   1a174:	00019ab5 	.word	0x00019ab5
   1a178:	20003ccb 	.word	0x20003ccb
   1a17c:	00019b19 	.word	0x00019b19

0001a180 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1a180:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1a182:	2000      	movs	r0, #0
   1a184:	4b08      	ldr	r3, [pc, #32]	; (1a1a8 <delay_init+0x28>)
   1a186:	4798      	blx	r3
   1a188:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   1a18a:	4c08      	ldr	r4, [pc, #32]	; (1a1ac <delay_init+0x2c>)
   1a18c:	21fa      	movs	r1, #250	; 0xfa
   1a18e:	0089      	lsls	r1, r1, #2
   1a190:	47a0      	blx	r4
   1a192:	4b07      	ldr	r3, [pc, #28]	; (1a1b0 <delay_init+0x30>)
   1a194:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1a196:	4907      	ldr	r1, [pc, #28]	; (1a1b4 <delay_init+0x34>)
   1a198:	0028      	movs	r0, r5
   1a19a:	47a0      	blx	r4
   1a19c:	4b06      	ldr	r3, [pc, #24]	; (1a1b8 <delay_init+0x38>)
   1a19e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1a1a0:	2205      	movs	r2, #5
   1a1a2:	4b06      	ldr	r3, [pc, #24]	; (1a1bc <delay_init+0x3c>)
   1a1a4:	601a      	str	r2, [r3, #0]
}
   1a1a6:	bd70      	pop	{r4, r5, r6, pc}
   1a1a8:	0001f085 	.word	0x0001f085
   1a1ac:	00024039 	.word	0x00024039
   1a1b0:	200000d0 	.word	0x200000d0
   1a1b4:	000f4240 	.word	0x000f4240
   1a1b8:	200000d4 	.word	0x200000d4
   1a1bc:	e000e010 	.word	0xe000e010

0001a1c0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1a1c0:	b510      	push	{r4, lr}
	if (gpfIsr) {
   1a1c2:	4b03      	ldr	r3, [pc, #12]	; (1a1d0 <chip_isr+0x10>)
   1a1c4:	681b      	ldr	r3, [r3, #0]
   1a1c6:	2b00      	cmp	r3, #0
   1a1c8:	d000      	beq.n	1a1cc <chip_isr+0xc>
		gpfIsr();
   1a1ca:	4798      	blx	r3
	}
}
   1a1cc:	bd10      	pop	{r4, pc}
   1a1ce:	46c0      	nop			; (mov r8, r8)
   1a1d0:	20003cdc 	.word	0x20003cdc

0001a1d4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1a1d4:	b570      	push	{r4, r5, r6, lr}
   1a1d6:	b082      	sub	sp, #8
	gpfIsr = NULL;
   1a1d8:	2300      	movs	r3, #0
   1a1da:	4a15      	ldr	r2, [pc, #84]	; (1a230 <nm_bsp_init+0x5c>)
   1a1dc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1a1de:	ac01      	add	r4, sp, #4
   1a1e0:	2501      	movs	r5, #1
   1a1e2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1a1e4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1a1e6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1a1e8:	0021      	movs	r1, r4
   1a1ea:	201b      	movs	r0, #27
   1a1ec:	4e11      	ldr	r6, [pc, #68]	; (1a234 <nm_bsp_init+0x60>)
   1a1ee:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1a1f0:	0021      	movs	r1, r4
   1a1f2:	201c      	movs	r0, #28
   1a1f4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1a1f6:	0021      	movs	r1, r4
   1a1f8:	2028      	movs	r0, #40	; 0x28
   1a1fa:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
   1a1fc:	4b0e      	ldr	r3, [pc, #56]	; (1a238 <nm_bsp_init+0x64>)
   1a1fe:	2280      	movs	r2, #128	; 0x80
   1a200:	0552      	lsls	r2, r2, #21
   1a202:	615a      	str	r2, [r3, #20]
   1a204:	2280      	movs	r2, #128	; 0x80
   1a206:	0512      	lsls	r2, r2, #20
   1a208:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1a20a:	4b0c      	ldr	r3, [pc, #48]	; (1a23c <nm_bsp_init+0x68>)
   1a20c:	681b      	ldr	r3, [r3, #0]
   1a20e:	421d      	tst	r5, r3
   1a210:	d003      	beq.n	1a21a <nm_bsp_init+0x46>
   1a212:	4b0a      	ldr	r3, [pc, #40]	; (1a23c <nm_bsp_init+0x68>)
   1a214:	681b      	ldr	r3, [r3, #0]
   1a216:	079b      	lsls	r3, r3, #30
   1a218:	d401      	bmi.n	1a21e <nm_bsp_init+0x4a>
	    delay_init();
   1a21a:	4b09      	ldr	r3, [pc, #36]	; (1a240 <nm_bsp_init+0x6c>)
   1a21c:	4798      	blx	r3
	cpu_irq_enable();
   1a21e:	2201      	movs	r2, #1
   1a220:	4b08      	ldr	r3, [pc, #32]	; (1a244 <nm_bsp_init+0x70>)
   1a222:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1a224:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   1a228:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
   1a22a:	2000      	movs	r0, #0
   1a22c:	b002      	add	sp, #8
   1a22e:	bd70      	pop	{r4, r5, r6, pc}
   1a230:	20003cdc 	.word	0x20003cdc
   1a234:	0001d861 	.word	0x0001d861
   1a238:	41004400 	.word	0x41004400
   1a23c:	e000e010 	.word	0xe000e010
   1a240:	0001a181 	.word	0x0001a181
   1a244:	200000da 	.word	0x200000da

0001a248 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a24a:	4c07      	ldr	r4, [pc, #28]	; (1a268 <nm_bsp_reset+0x20>)
   1a24c:	2780      	movs	r7, #128	; 0x80
   1a24e:	057f      	lsls	r7, r7, #21
   1a250:	6167      	str	r7, [r4, #20]
   1a252:	2580      	movs	r5, #128	; 0x80
   1a254:	052d      	lsls	r5, r5, #20
   1a256:	6165      	str	r5, [r4, #20]
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1a258:	2001      	movs	r0, #1
   1a25a:	4e04      	ldr	r6, [pc, #16]	; (1a26c <nm_bsp_reset+0x24>)
   1a25c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   1a25e:	61a7      	str	r7, [r4, #24]
   1a260:	200a      	movs	r0, #10
   1a262:	47b0      	blx	r6
   1a264:	61a5      	str	r5, [r4, #24]
}
   1a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a268:	41004400 	.word	0x41004400
   1a26c:	00018145 	.word	0x00018145

0001a270 <nm_bsp_sleep>:
{
   1a270:	b510      	push	{r4, lr}
	vTaskDelay(u32TimeMsec);
   1a272:	4b01      	ldr	r3, [pc, #4]	; (1a278 <nm_bsp_sleep+0x8>)
   1a274:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1a276:	bd10      	pop	{r4, pc}
   1a278:	00018145 	.word	0x00018145

0001a27c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1a27c:	b510      	push	{r4, lr}
   1a27e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1a280:	4b0e      	ldr	r3, [pc, #56]	; (1a2bc <nm_bsp_register_isr+0x40>)
   1a282:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1a284:	ac01      	add	r4, sp, #4
   1a286:	0020      	movs	r0, r4
   1a288:	4b0d      	ldr	r3, [pc, #52]	; (1a2c0 <nm_bsp_register_isr+0x44>)
   1a28a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1a28c:	2329      	movs	r3, #41	; 0x29
   1a28e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1a290:	2300      	movs	r3, #0
   1a292:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1a294:	3301      	adds	r3, #1
   1a296:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1a298:	3301      	adds	r3, #1
   1a29a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1a29c:	0021      	movs	r1, r4
   1a29e:	2009      	movs	r0, #9
   1a2a0:	4b08      	ldr	r3, [pc, #32]	; (1a2c4 <nm_bsp_register_isr+0x48>)
   1a2a2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1a2a4:	2200      	movs	r2, #0
   1a2a6:	2109      	movs	r1, #9
   1a2a8:	4807      	ldr	r0, [pc, #28]	; (1a2c8 <nm_bsp_register_isr+0x4c>)
   1a2aa:	4b08      	ldr	r3, [pc, #32]	; (1a2cc <nm_bsp_register_isr+0x50>)
   1a2ac:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a2ae:	2100      	movs	r1, #0
   1a2b0:	2009      	movs	r0, #9
   1a2b2:	4b07      	ldr	r3, [pc, #28]	; (1a2d0 <nm_bsp_register_isr+0x54>)
   1a2b4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1a2b6:	b004      	add	sp, #16
   1a2b8:	bd10      	pop	{r4, pc}
   1a2ba:	46c0      	nop			; (mov r8, r8)
   1a2bc:	20003cdc 	.word	0x20003cdc
   1a2c0:	0001d7d5 	.word	0x0001d7d5
   1a2c4:	0001d7e9 	.word	0x0001d7e9
   1a2c8:	0001a1c1 	.word	0x0001a1c1
   1a2cc:	0001d691 	.word	0x0001d691
   1a2d0:	0001d6bd 	.word	0x0001d6bd

0001a2d4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1a2d4:	b510      	push	{r4, lr}
	if (u8Enable) {
   1a2d6:	2800      	cmp	r0, #0
   1a2d8:	d104      	bne.n	1a2e4 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1a2da:	2100      	movs	r1, #0
   1a2dc:	2009      	movs	r0, #9
   1a2de:	4b04      	ldr	r3, [pc, #16]	; (1a2f0 <nm_bsp_interrupt_ctrl+0x1c>)
   1a2e0:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1a2e2:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a2e4:	2100      	movs	r1, #0
   1a2e6:	2009      	movs	r0, #9
   1a2e8:	4b02      	ldr	r3, [pc, #8]	; (1a2f4 <nm_bsp_interrupt_ctrl+0x20>)
   1a2ea:	4798      	blx	r3
   1a2ec:	e7f9      	b.n	1a2e2 <nm_bsp_interrupt_ctrl+0xe>
   1a2ee:	46c0      	nop			; (mov r8, r8)
   1a2f0:	0001d6dd 	.word	0x0001d6dd
   1a2f4:	0001d6bd 	.word	0x0001d6bd

0001a2f8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1a2f8:	b530      	push	{r4, r5, lr}
   1a2fa:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
   1a2fc:	4c30      	ldr	r4, [pc, #192]	; (1a3c0 <nm_bus_init+0xc8>)
   1a2fe:	230e      	movs	r3, #14
   1a300:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
   1a302:	2300      	movs	r3, #0
   1a304:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   1a306:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1a308:	a901      	add	r1, sp, #4
   1a30a:	2201      	movs	r2, #1
   1a30c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   1a30e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1a310:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1a312:	200e      	movs	r0, #14
   1a314:	4b2b      	ldr	r3, [pc, #172]	; (1a3c4 <nm_bus_init+0xcc>)
   1a316:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1a318:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
   1a31a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1a31c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1a31e:	2900      	cmp	r1, #0
   1a320:	d104      	bne.n	1a32c <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
   1a322:	0953      	lsrs	r3, r2, #5
   1a324:	01db      	lsls	r3, r3, #7
   1a326:	4928      	ldr	r1, [pc, #160]	; (1a3c8 <nm_bus_init+0xd0>)
   1a328:	468c      	mov	ip, r1
   1a32a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a32c:	211f      	movs	r1, #31
   1a32e:	4011      	ands	r1, r2
   1a330:	2201      	movs	r2, #1
   1a332:	0010      	movs	r0, r2
   1a334:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
   1a336:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
   1a338:	ac02      	add	r4, sp, #8
   1a33a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1a33c:	2300      	movs	r3, #0
   1a33e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1a340:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1a342:	21c0      	movs	r1, #192	; 0xc0
   1a344:	0389      	lsls	r1, r1, #14
   1a346:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1a348:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   1a34a:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   1a34c:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
   1a34e:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
   1a350:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1a352:	3223      	adds	r2, #35	; 0x23
   1a354:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1a356:	3a18      	subs	r2, #24
   1a358:	2100      	movs	r1, #0
   1a35a:	a808      	add	r0, sp, #32
   1a35c:	4b1b      	ldr	r3, [pc, #108]	; (1a3cc <nm_bus_init+0xd4>)
   1a35e:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1a360:	4b1b      	ldr	r3, [pc, #108]	; (1a3d0 <nm_bus_init+0xd8>)
   1a362:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1a364:	4b1b      	ldr	r3, [pc, #108]	; (1a3d4 <nm_bus_init+0xdc>)
   1a366:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1a368:	2301      	movs	r3, #1
   1a36a:	425b      	negs	r3, r3
   1a36c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1a36e:	4b1a      	ldr	r3, [pc, #104]	; (1a3d8 <nm_bus_init+0xe0>)
   1a370:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1a372:	4b1a      	ldr	r3, [pc, #104]	; (1a3dc <nm_bus_init+0xe4>)
   1a374:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1a376:	0022      	movs	r2, r4
   1a378:	4919      	ldr	r1, [pc, #100]	; (1a3e0 <nm_bus_init+0xe8>)
   1a37a:	481a      	ldr	r0, [pc, #104]	; (1a3e4 <nm_bus_init+0xec>)
   1a37c:	4b1a      	ldr	r3, [pc, #104]	; (1a3e8 <nm_bus_init+0xf0>)
   1a37e:	4798      	blx	r3
   1a380:	2800      	cmp	r0, #0
   1a382:	d11a      	bne.n	1a3ba <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a384:	4d17      	ldr	r5, [pc, #92]	; (1a3e4 <nm_bus_init+0xec>)
   1a386:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1a388:	0020      	movs	r0, r4
   1a38a:	4b18      	ldr	r3, [pc, #96]	; (1a3ec <nm_bus_init+0xf4>)
   1a38c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a38e:	231f      	movs	r3, #31
   1a390:	4018      	ands	r0, r3
   1a392:	3b1e      	subs	r3, #30
   1a394:	4083      	lsls	r3, r0
   1a396:	4a16      	ldr	r2, [pc, #88]	; (1a3f0 <nm_bus_init+0xf8>)
   1a398:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a39a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a39c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a39e:	2b00      	cmp	r3, #0
   1a3a0:	d1fc      	bne.n	1a39c <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1a3a2:	6823      	ldr	r3, [r4, #0]
   1a3a4:	2202      	movs	r2, #2
   1a3a6:	4313      	orrs	r3, r2
   1a3a8:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
   1a3aa:	4b12      	ldr	r3, [pc, #72]	; (1a3f4 <nm_bus_init+0xfc>)
   1a3ac:	4798      	blx	r3
	nm_bsp_sleep(1);
   1a3ae:	2001      	movs	r0, #1
   1a3b0:	4b11      	ldr	r3, [pc, #68]	; (1a3f8 <nm_bus_init+0x100>)
   1a3b2:	4798      	blx	r3
#endif
	return result;
   1a3b4:	2000      	movs	r0, #0
}
   1a3b6:	b011      	add	sp, #68	; 0x44
   1a3b8:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
   1a3ba:	2006      	movs	r0, #6
   1a3bc:	4240      	negs	r0, r0
   1a3be:	e7fa      	b.n	1a3b6 <nm_bus_init+0xbe>
   1a3c0:	200053f0 	.word	0x200053f0
   1a3c4:	0001d861 	.word	0x0001d861
   1a3c8:	41004400 	.word	0x41004400
   1a3cc:	000262a3 	.word	0x000262a3
   1a3d0:	000c0002 	.word	0x000c0002
   1a3d4:	000d0002 	.word	0x000d0002
   1a3d8:	000f0002 	.word	0x000f0002
   1a3dc:	00124f80 	.word	0x00124f80
   1a3e0:	42001000 	.word	0x42001000
   1a3e4:	200053f4 	.word	0x200053f4
   1a3e8:	0001dfbd 	.word	0x0001dfbd
   1a3ec:	0001de75 	.word	0x0001de75
   1a3f0:	e000e100 	.word	0xe000e100
   1a3f4:	0001a249 	.word	0x0001a249
   1a3f8:	0001a271 	.word	0x0001a271

0001a3fc <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1a3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3fe:	46de      	mov	lr, fp
   1a400:	4657      	mov	r7, sl
   1a402:	464e      	mov	r6, r9
   1a404:	4645      	mov	r5, r8
   1a406:	b5e0      	push	{r5, r6, r7, lr}
   1a408:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
   1a40a:	2803      	cmp	r0, #3
   1a40c:	d000      	beq.n	1a410 <nm_bus_ioctl+0x14>
   1a40e:	e075      	b.n	1a4fc <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1a410:	680e      	ldr	r6, [r1, #0]
   1a412:	684d      	ldr	r5, [r1, #4]
   1a414:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
   1a416:	22ff      	movs	r2, #255	; 0xff
   1a418:	466b      	mov	r3, sp
   1a41a:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a41c:	2d00      	cmp	r5, #0
   1a41e:	d027      	beq.n	1a470 <nm_bus_ioctl+0x74>
   1a420:	2c00      	cmp	r4, #0
   1a422:	d065      	beq.n	1a4f0 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
   1a424:	2e00      	cmp	r6, #0
   1a426:	d100      	bne.n	1a42a <nm_bus_ioctl+0x2e>
   1a428:	e075      	b.n	1a516 <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a42a:	2300      	movs	r3, #0
   1a42c:	4698      	mov	r8, r3
   1a42e:	2300      	movs	r3, #0
   1a430:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
   1a432:	2201      	movs	r2, #1
   1a434:	493a      	ldr	r1, [pc, #232]	; (1a520 <nm_bus_ioctl+0x124>)
   1a436:	483b      	ldr	r0, [pc, #236]	; (1a524 <nm_bus_ioctl+0x128>)
   1a438:	4b3b      	ldr	r3, [pc, #236]	; (1a528 <nm_bus_ioctl+0x12c>)
   1a43a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1a43c:	4b39      	ldr	r3, [pc, #228]	; (1a524 <nm_bus_ioctl+0x128>)
   1a43e:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
   1a440:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
   1a442:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a444:	4699      	mov	r9, r3
			pu8Miso++;
   1a446:	4659      	mov	r1, fp
   1a448:	424b      	negs	r3, r1
   1a44a:	4159      	adcs	r1, r3
   1a44c:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
   1a44e:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a450:	4653      	mov	r3, sl
   1a452:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1a454:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
   1a456:	4239      	tst	r1, r7
   1a458:	d0fc      	beq.n	1a454 <nm_bus_ioctl+0x58>
   1a45a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1a45c:	4239      	tst	r1, r7
   1a45e:	d0fc      	beq.n	1a45a <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1a460:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a462:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
   1a464:	4211      	tst	r1, r2
   1a466:	d0fc      	beq.n	1a462 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a468:	4649      	mov	r1, r9
   1a46a:	7989      	ldrb	r1, [r1, #6]
   1a46c:	468c      	mov	ip, r1
   1a46e:	e011      	b.n	1a494 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a470:	2e00      	cmp	r6, #0
   1a472:	d03a      	beq.n	1a4ea <nm_bus_ioctl+0xee>
   1a474:	2c00      	cmp	r4, #0
   1a476:	d03e      	beq.n	1a4f6 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a478:	2300      	movs	r3, #0
   1a47a:	4698      	mov	r8, r3
		u8SkipMiso = 1;
   1a47c:	3301      	adds	r3, #1
   1a47e:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
   1a480:	466b      	mov	r3, sp
   1a482:	1ddd      	adds	r5, r3, #7
   1a484:	e7d5      	b.n	1a432 <nm_bus_ioctl+0x36>
   1a486:	4660      	mov	r0, ip
   1a488:	2801      	cmp	r0, #1
   1a48a:	d00d      	beq.n	1a4a8 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1a48c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a48e:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1a490:	2900      	cmp	r1, #0
   1a492:	d00d      	beq.n	1a4b0 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a494:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   1a496:	4211      	tst	r1, r2
   1a498:	d0fc      	beq.n	1a494 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a49a:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
   1a49c:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a49e:	4210      	tst	r0, r2
   1a4a0:	d0f1      	beq.n	1a486 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1a4a2:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   1a4a4:	311e      	adds	r1, #30
   1a4a6:	e7ee      	b.n	1a486 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1a4a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a4aa:	05c0      	lsls	r0, r0, #23
   1a4ac:	0dc0      	lsrs	r0, r0, #23
   1a4ae:	e7ef      	b.n	1a490 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
   1a4b0:	7028      	strb	r0, [r5, #0]
		u16Sz--;
   1a4b2:	3c01      	subs	r4, #1
   1a4b4:	b2a4      	uxth	r4, r4
			pu8Miso++;
   1a4b6:	445d      	add	r5, fp
			pu8Mosi++;
   1a4b8:	4643      	mov	r3, r8
   1a4ba:	4259      	negs	r1, r3
   1a4bc:	414b      	adcs	r3, r1
   1a4be:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
   1a4c0:	2c00      	cmp	r4, #0
   1a4c2:	d1c4      	bne.n	1a44e <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a4c4:	4b17      	ldr	r3, [pc, #92]	; (1a524 <nm_bus_ioctl+0x128>)
   1a4c6:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
   1a4c8:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1a4ca:	7e0b      	ldrb	r3, [r1, #24]
   1a4cc:	4213      	tst	r3, r2
   1a4ce:	d0fc      	beq.n	1a4ca <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
   1a4d0:	2200      	movs	r2, #0
   1a4d2:	4913      	ldr	r1, [pc, #76]	; (1a520 <nm_bus_ioctl+0x124>)
   1a4d4:	4813      	ldr	r0, [pc, #76]	; (1a524 <nm_bus_ioctl+0x128>)
   1a4d6:	4b14      	ldr	r3, [pc, #80]	; (1a528 <nm_bus_ioctl+0x12c>)
   1a4d8:	4798      	blx	r3
	return M2M_SUCCESS;
   1a4da:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
   1a4dc:	b003      	add	sp, #12
   1a4de:	bc3c      	pop	{r2, r3, r4, r5}
   1a4e0:	4690      	mov	r8, r2
   1a4e2:	4699      	mov	r9, r3
   1a4e4:	46a2      	mov	sl, r4
   1a4e6:	46ab      	mov	fp, r5
   1a4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
   1a4ea:	200f      	movs	r0, #15
   1a4ec:	4240      	negs	r0, r0
   1a4ee:	e7f5      	b.n	1a4dc <nm_bus_ioctl+0xe0>
   1a4f0:	200f      	movs	r0, #15
   1a4f2:	4240      	negs	r0, r0
   1a4f4:	e7f2      	b.n	1a4dc <nm_bus_ioctl+0xe0>
   1a4f6:	200f      	movs	r0, #15
   1a4f8:	4240      	negs	r0, r0
		break;
   1a4fa:	e7ef      	b.n	1a4dc <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
   1a4fc:	2283      	movs	r2, #131	; 0x83
   1a4fe:	0052      	lsls	r2, r2, #1
   1a500:	490a      	ldr	r1, [pc, #40]	; (1a52c <nm_bus_ioctl+0x130>)
   1a502:	480b      	ldr	r0, [pc, #44]	; (1a530 <nm_bus_ioctl+0x134>)
   1a504:	4c0b      	ldr	r4, [pc, #44]	; (1a534 <nm_bus_ioctl+0x138>)
   1a506:	47a0      	blx	r4
   1a508:	480b      	ldr	r0, [pc, #44]	; (1a538 <nm_bus_ioctl+0x13c>)
   1a50a:	47a0      	blx	r4
   1a50c:	480b      	ldr	r0, [pc, #44]	; (1a53c <nm_bus_ioctl+0x140>)
   1a50e:	47a0      	blx	r4
			s8Ret = -1;
   1a510:	2001      	movs	r0, #1
   1a512:	4240      	negs	r0, r0
	return s8Ret;
   1a514:	e7e2      	b.n	1a4dc <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
   1a516:	2301      	movs	r3, #1
   1a518:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
   1a51a:	466b      	mov	r3, sp
   1a51c:	1dde      	adds	r6, r3, #7
   1a51e:	e786      	b.n	1a42e <nm_bus_ioctl+0x32>
   1a520:	200053f0 	.word	0x200053f0
   1a524:	200053f4 	.word	0x200053f4
   1a528:	0001e269 	.word	0x0001e269
   1a52c:	00029618 	.word	0x00029618
   1a530:	00029628 	.word	0x00029628
   1a534:	000190ad 	.word	0x000190ad
   1a538:	0002963c 	.word	0x0002963c
   1a53c:	00029650 	.word	0x00029650

0001a540 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1a540:	b530      	push	{r4, r5, lr}
   1a542:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
   1a544:	ab01      	add	r3, sp, #4
   1a546:	2200      	movs	r2, #0
   1a548:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
   1a54a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1a54c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a54e:	4d13      	ldr	r5, [pc, #76]	; (1a59c <nm_bus_deinit+0x5c>)
   1a550:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1a552:	0020      	movs	r0, r4
   1a554:	4b12      	ldr	r3, [pc, #72]	; (1a5a0 <nm_bus_deinit+0x60>)
   1a556:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a558:	231f      	movs	r3, #31
   1a55a:	4018      	ands	r0, r3
   1a55c:	3b1e      	subs	r3, #30
   1a55e:	4083      	lsls	r3, r0
   1a560:	2280      	movs	r2, #128	; 0x80
   1a562:	4910      	ldr	r1, [pc, #64]	; (1a5a4 <nm_bus_deinit+0x64>)
   1a564:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a566:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a568:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a56a:	2b00      	cmp	r3, #0
   1a56c:	d1fc      	bne.n	1a568 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1a56e:	338f      	adds	r3, #143	; 0x8f
   1a570:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1a572:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1a574:	6823      	ldr	r3, [r4, #0]
   1a576:	2202      	movs	r2, #2
   1a578:	4393      	bics	r3, r2
   1a57a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1a57c:	a901      	add	r1, sp, #4
   1a57e:	200c      	movs	r0, #12
   1a580:	4c09      	ldr	r4, [pc, #36]	; (1a5a8 <nm_bus_deinit+0x68>)
   1a582:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1a584:	a901      	add	r1, sp, #4
   1a586:	200f      	movs	r0, #15
   1a588:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1a58a:	a901      	add	r1, sp, #4
   1a58c:	200d      	movs	r0, #13
   1a58e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1a590:	a901      	add	r1, sp, #4
   1a592:	200e      	movs	r0, #14
   1a594:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
   1a596:	2000      	movs	r0, #0
   1a598:	b003      	add	sp, #12
   1a59a:	bd30      	pop	{r4, r5, pc}
   1a59c:	200053f4 	.word	0x200053f4
   1a5a0:	0001de75 	.word	0x0001de75
   1a5a4:	e000e100 	.word	0xe000e100
   1a5a8:	0001d861 	.word	0x0001d861

0001a5ac <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
   1a5ac:	2a00      	cmp	r2, #0
   1a5ae:	d006      	beq.n	1a5be <m2m_memcpy+0x12>
   1a5b0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
   1a5b2:	780b      	ldrb	r3, [r1, #0]
   1a5b4:	7003      	strb	r3, [r0, #0]
		pDst++;
   1a5b6:	3001      	adds	r0, #1
		pSrc++;
   1a5b8:	3101      	adds	r1, #1
	}while(--sz);
   1a5ba:	4290      	cmp	r0, r2
   1a5bc:	d1f9      	bne.n	1a5b2 <m2m_memcpy+0x6>
}
   1a5be:	4770      	bx	lr

0001a5c0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
   1a5c0:	2a00      	cmp	r2, #0
   1a5c2:	d004      	beq.n	1a5ce <m2m_memset+0xe>
   1a5c4:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
   1a5c6:	7001      	strb	r1, [r0, #0]
		pBuf++;
   1a5c8:	3001      	adds	r0, #1
	}while(--sz);
   1a5ca:	4290      	cmp	r0, r2
   1a5cc:	d1fb      	bne.n	1a5c6 <m2m_memset+0x6>
}
   1a5ce:	4770      	bx	lr

0001a5d0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1a5d0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
   1a5d2:	7802      	ldrb	r2, [r0, #0]
   1a5d4:	2a00      	cmp	r2, #0
   1a5d6:	d007      	beq.n	1a5e8 <m2m_strlen+0x18>
   1a5d8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
   1a5da:	3001      	adds	r0, #1
   1a5dc:	b280      	uxth	r0, r0
		pcStr++;
   1a5de:	3301      	adds	r3, #1
	while(*pcStr)
   1a5e0:	781a      	ldrb	r2, [r3, #0]
   1a5e2:	2a00      	cmp	r2, #0
   1a5e4:	d1f9      	bne.n	1a5da <m2m_strlen+0xa>
	}
	return u16StrLen;
}
   1a5e6:	4770      	bx	lr
	uint16	u16StrLen = 0;
   1a5e8:	2000      	movs	r0, #0
   1a5ea:	e7fc      	b.n	1a5e6 <m2m_strlen+0x16>

0001a5ec <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
   1a5ec:	4a02      	ldr	r2, [pc, #8]	; (1a5f8 <isr+0xc>)
   1a5ee:	78d3      	ldrb	r3, [r2, #3]
   1a5f0:	3301      	adds	r3, #1
   1a5f2:	b2db      	uxtb	r3, r3
   1a5f4:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1a5f6:	4770      	bx	lr
   1a5f8:	20005430 	.word	0x20005430

0001a5fc <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
   1a5fc:	4770      	bx	lr
	...

0001a600 <hif_set_rx_done>:
{
   1a600:	b500      	push	{lr}
   1a602:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
   1a604:	2200      	movs	r2, #0
   1a606:	4b0a      	ldr	r3, [pc, #40]	; (1a630 <hif_set_rx_done+0x30>)
   1a608:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
   1a60a:	2001      	movs	r0, #1
   1a60c:	4b09      	ldr	r3, [pc, #36]	; (1a634 <hif_set_rx_done+0x34>)
   1a60e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1a610:	a901      	add	r1, sp, #4
   1a612:	4809      	ldr	r0, [pc, #36]	; (1a638 <hif_set_rx_done+0x38>)
   1a614:	4b09      	ldr	r3, [pc, #36]	; (1a63c <hif_set_rx_done+0x3c>)
   1a616:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1a618:	2800      	cmp	r0, #0
   1a61a:	d001      	beq.n	1a620 <hif_set_rx_done+0x20>
}
   1a61c:	b003      	add	sp, #12
   1a61e:	bd00      	pop	{pc}
	reg |= NBIT1;
   1a620:	2102      	movs	r1, #2
   1a622:	9b01      	ldr	r3, [sp, #4]
   1a624:	4319      	orrs	r1, r3
   1a626:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1a628:	4803      	ldr	r0, [pc, #12]	; (1a638 <hif_set_rx_done+0x38>)
   1a62a:	4b05      	ldr	r3, [pc, #20]	; (1a640 <hif_set_rx_done+0x40>)
   1a62c:	4798      	blx	r3
   1a62e:	e7f5      	b.n	1a61c <hif_set_rx_done+0x1c>
   1a630:	20005430 	.word	0x20005430
   1a634:	0001a2d5 	.word	0x0001a2d5
   1a638:	00001070 	.word	0x00001070
   1a63c:	0001b97d 	.word	0x0001b97d
   1a640:	0001b989 	.word	0x0001b989

0001a644 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1a644:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
   1a646:	4b0c      	ldr	r3, [pc, #48]	; (1a678 <hif_chip_wake+0x34>)
   1a648:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1a64a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
   1a64c:	2b00      	cmp	r3, #0
   1a64e:	d10d      	bne.n	1a66c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1a650:	4b09      	ldr	r3, [pc, #36]	; (1a678 <hif_chip_wake+0x34>)
   1a652:	785b      	ldrb	r3, [r3, #1]
   1a654:	2b00      	cmp	r3, #0
   1a656:	d103      	bne.n	1a660 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a658:	4b07      	ldr	r3, [pc, #28]	; (1a678 <hif_chip_wake+0x34>)
   1a65a:	781b      	ldrb	r3, [r3, #0]
   1a65c:	2b00      	cmp	r3, #0
   1a65e:	d106      	bne.n	1a66e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1a660:	4a05      	ldr	r2, [pc, #20]	; (1a678 <hif_chip_wake+0x34>)
   1a662:	7853      	ldrb	r3, [r2, #1]
   1a664:	3301      	adds	r3, #1
   1a666:	b2db      	uxtb	r3, r3
   1a668:	7053      	strb	r3, [r2, #1]
   1a66a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
   1a66c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
   1a66e:	4b03      	ldr	r3, [pc, #12]	; (1a67c <hif_chip_wake+0x38>)
   1a670:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
   1a672:	2800      	cmp	r0, #0
   1a674:	d0f4      	beq.n	1a660 <hif_chip_wake+0x1c>
   1a676:	e7f9      	b.n	1a66c <hif_chip_wake+0x28>
   1a678:	20005430 	.word	0x20005430
   1a67c:	0001b67d 	.word	0x0001b67d

0001a680 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
   1a680:	4b05      	ldr	r3, [pc, #20]	; (1a698 <hif_chip_sleep_sc+0x18>)
   1a682:	785b      	ldrb	r3, [r3, #1]
   1a684:	2b00      	cmp	r3, #0
   1a686:	d004      	beq.n	1a692 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
   1a688:	4a03      	ldr	r2, [pc, #12]	; (1a698 <hif_chip_sleep_sc+0x18>)
   1a68a:	7853      	ldrb	r3, [r2, #1]
   1a68c:	3b01      	subs	r3, #1
   1a68e:	b2db      	uxtb	r3, r3
   1a690:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
   1a692:	2000      	movs	r0, #0
   1a694:	4770      	bx	lr
   1a696:	46c0      	nop			; (mov r8, r8)
   1a698:	20005430 	.word	0x20005430

0001a69c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1a69c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
   1a69e:	4b0b      	ldr	r3, [pc, #44]	; (1a6cc <hif_chip_sleep+0x30>)
   1a6a0:	785b      	ldrb	r3, [r3, #1]
   1a6a2:	2b00      	cmp	r3, #0
   1a6a4:	d004      	beq.n	1a6b0 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
   1a6a6:	4a09      	ldr	r2, [pc, #36]	; (1a6cc <hif_chip_sleep+0x30>)
   1a6a8:	7853      	ldrb	r3, [r2, #1]
   1a6aa:	3b01      	subs	r3, #1
   1a6ac:	b2db      	uxtb	r3, r3
   1a6ae:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1a6b0:	4b06      	ldr	r3, [pc, #24]	; (1a6cc <hif_chip_sleep+0x30>)
   1a6b2:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
   1a6b4:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
   1a6b6:	2b00      	cmp	r3, #0
   1a6b8:	d103      	bne.n	1a6c2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a6ba:	4b04      	ldr	r3, [pc, #16]	; (1a6cc <hif_chip_sleep+0x30>)
   1a6bc:	781b      	ldrb	r3, [r3, #0]
   1a6be:	2b00      	cmp	r3, #0
   1a6c0:	d100      	bne.n	1a6c4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
   1a6c2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
   1a6c4:	4b02      	ldr	r3, [pc, #8]	; (1a6d0 <hif_chip_sleep+0x34>)
   1a6c6:	4798      	blx	r3
   1a6c8:	e7fb      	b.n	1a6c2 <hif_chip_sleep+0x26>
   1a6ca:	46c0      	nop			; (mov r8, r8)
   1a6cc:	20005430 	.word	0x20005430
   1a6d0:	0001b615 	.word	0x0001b615

0001a6d4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6d6:	46de      	mov	lr, fp
   1a6d8:	4657      	mov	r7, sl
   1a6da:	b580      	push	{r7, lr}
   1a6dc:	b089      	sub	sp, #36	; 0x24
   1a6de:	4683      	mov	fp, r0
   1a6e0:	468a      	mov	sl, r1
   1a6e2:	9201      	str	r2, [sp, #4]
   1a6e4:	9300      	str	r3, [sp, #0]
   1a6e6:	ab10      	add	r3, sp, #64	; 0x40
   1a6e8:	cb80      	ldmia	r3!, {r7}
   1a6ea:	881e      	ldrh	r6, [r3, #0]
   1a6ec:	ab12      	add	r3, sp, #72	; 0x48
   1a6ee:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1a6f0:	227f      	movs	r2, #127	; 0x7f
   1a6f2:	400a      	ands	r2, r1
   1a6f4:	ab07      	add	r3, sp, #28
   1a6f6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1a6f8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1a6fa:	2208      	movs	r2, #8
   1a6fc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1a6fe:	2f00      	cmp	r7, #0
   1a700:	d03d      	beq.n	1a77e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1a702:	885a      	ldrh	r2, [r3, #2]
   1a704:	1992      	adds	r2, r2, r6
   1a706:	18aa      	adds	r2, r5, r2
   1a708:	b292      	uxth	r2, r2
   1a70a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
   1a70c:	4b68      	ldr	r3, [pc, #416]	; (1a8b0 <hif_send+0x1dc>)
   1a70e:	4798      	blx	r3
   1a710:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
   1a712:	d000      	beq.n	1a716 <hif_send+0x42>
   1a714:	e0c0      	b.n	1a898 <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
   1a716:	2300      	movs	r3, #0
   1a718:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
   1a71a:	aa02      	add	r2, sp, #8
   1a71c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1a71e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
   1a720:	9b04      	ldr	r3, [sp, #16]
   1a722:	465a      	mov	r2, fp
   1a724:	431a      	orrs	r2, r3
   1a726:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
   1a728:	9a04      	ldr	r2, [sp, #16]
   1a72a:	4653      	mov	r3, sl
   1a72c:	021b      	lsls	r3, r3, #8
   1a72e:	4313      	orrs	r3, r2
   1a730:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
   1a732:	ab07      	add	r3, sp, #28
   1a734:	885b      	ldrh	r3, [r3, #2]
   1a736:	9a04      	ldr	r2, [sp, #16]
   1a738:	041b      	lsls	r3, r3, #16
   1a73a:	4313      	orrs	r3, r2
   1a73c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1a73e:	9904      	ldr	r1, [sp, #16]
   1a740:	485c      	ldr	r0, [pc, #368]	; (1a8b4 <hif_send+0x1e0>)
   1a742:	4b5d      	ldr	r3, [pc, #372]	; (1a8b8 <hif_send+0x1e4>)
   1a744:	4798      	blx	r3
   1a746:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a748:	d156      	bne.n	1a7f8 <hif_send+0x124>

		reg = 0UL;
   1a74a:	2300      	movs	r3, #0
   1a74c:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
   1a74e:	9b04      	ldr	r3, [sp, #16]
   1a750:	2202      	movs	r2, #2
   1a752:	4313      	orrs	r3, r2
   1a754:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1a756:	9904      	ldr	r1, [sp, #16]
   1a758:	4858      	ldr	r0, [pc, #352]	; (1a8bc <hif_send+0x1e8>)
   1a75a:	4b57      	ldr	r3, [pc, #348]	; (1a8b8 <hif_send+0x1e4>)
   1a75c:	4798      	blx	r3
   1a75e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a760:	d14a      	bne.n	1a7f8 <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1a762:	2200      	movs	r2, #0
   1a764:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1a766:	ab02      	add	r3, sp, #8
   1a768:	80da      	strh	r2, [r3, #6]
   1a76a:	3306      	adds	r3, #6
   1a76c:	881b      	ldrh	r3, [r3, #0]
   1a76e:	b29b      	uxth	r3, r3
   1a770:	4a53      	ldr	r2, [pc, #332]	; (1a8c0 <hif_send+0x1ec>)
   1a772:	4293      	cmp	r3, r2
   1a774:	d848      	bhi.n	1a808 <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a776:	4c53      	ldr	r4, [pc, #332]	; (1a8c4 <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
   1a778:	4b53      	ldr	r3, [pc, #332]	; (1a8c8 <hif_send+0x1f4>)
   1a77a:	469a      	mov	sl, r3
   1a77c:	e017      	b.n	1a7ae <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
   1a77e:	ab07      	add	r3, sp, #28
   1a780:	885a      	ldrh	r2, [r3, #2]
   1a782:	9900      	ldr	r1, [sp, #0]
   1a784:	468c      	mov	ip, r1
   1a786:	4462      	add	r2, ip
   1a788:	b292      	uxth	r2, r2
   1a78a:	805a      	strh	r2, [r3, #2]
   1a78c:	e7be      	b.n	1a70c <hif_send+0x38>
				nm_bsp_sleep(1);
   1a78e:	2001      	movs	r0, #1
   1a790:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
   1a792:	9b04      	ldr	r3, [sp, #16]
   1a794:	079b      	lsls	r3, r3, #30
   1a796:	d527      	bpl.n	1a7e8 <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
   1a798:	ab02      	add	r3, sp, #8
   1a79a:	88da      	ldrh	r2, [r3, #6]
   1a79c:	3201      	adds	r2, #1
   1a79e:	b292      	uxth	r2, r2
   1a7a0:	80da      	strh	r2, [r3, #6]
   1a7a2:	3306      	adds	r3, #6
   1a7a4:	881b      	ldrh	r3, [r3, #0]
   1a7a6:	b29b      	uxth	r3, r3
   1a7a8:	4a45      	ldr	r2, [pc, #276]	; (1a8c0 <hif_send+0x1ec>)
   1a7aa:	4293      	cmp	r3, r2
   1a7ac:	d82c      	bhi.n	1a808 <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a7ae:	a904      	add	r1, sp, #16
   1a7b0:	4842      	ldr	r0, [pc, #264]	; (1a8bc <hif_send+0x1e8>)
   1a7b2:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
   1a7b4:	2800      	cmp	r0, #0
   1a7b6:	d127      	bne.n	1a808 <hif_send+0x134>
			if(cnt >= 500) {
   1a7b8:	ab02      	add	r3, sp, #8
   1a7ba:	3306      	adds	r3, #6
   1a7bc:	881b      	ldrh	r3, [r3, #0]
   1a7be:	b29b      	uxth	r3, r3
   1a7c0:	22f4      	movs	r2, #244	; 0xf4
   1a7c2:	32ff      	adds	r2, #255	; 0xff
   1a7c4:	4293      	cmp	r3, r2
   1a7c6:	d9e4      	bls.n	1a792 <hif_send+0xbe>
				if(cnt < 501) {
   1a7c8:	ab02      	add	r3, sp, #8
   1a7ca:	3306      	adds	r3, #6
   1a7cc:	881b      	ldrh	r3, [r3, #0]
   1a7ce:	b29b      	uxth	r3, r3
   1a7d0:	3201      	adds	r2, #1
   1a7d2:	4293      	cmp	r3, r2
   1a7d4:	d8db      	bhi.n	1a78e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
   1a7d6:	483d      	ldr	r0, [pc, #244]	; (1a8cc <hif_send+0x1f8>)
   1a7d8:	4b3d      	ldr	r3, [pc, #244]	; (1a8d0 <hif_send+0x1fc>)
   1a7da:	469b      	mov	fp, r3
   1a7dc:	4798      	blx	r3
   1a7de:	483d      	ldr	r0, [pc, #244]	; (1a8d4 <hif_send+0x200>)
   1a7e0:	47d8      	blx	fp
   1a7e2:	483d      	ldr	r0, [pc, #244]	; (1a8d8 <hif_send+0x204>)
   1a7e4:	47d8      	blx	fp
   1a7e6:	e7d2      	b.n	1a78e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1a7e8:	a905      	add	r1, sp, #20
   1a7ea:	483c      	ldr	r0, [pc, #240]	; (1a8dc <hif_send+0x208>)
   1a7ec:	4b35      	ldr	r3, [pc, #212]	; (1a8c4 <hif_send+0x1f0>)
   1a7ee:	4798      	blx	r3
   1a7f0:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
   1a7f2:	d009      	beq.n	1a808 <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1a7f8:	4b39      	ldr	r3, [pc, #228]	; (1a8e0 <hif_send+0x20c>)
   1a7fa:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
   1a7fc:	0020      	movs	r0, r4
   1a7fe:	b009      	add	sp, #36	; 0x24
   1a800:	bc0c      	pop	{r2, r3}
   1a802:	4692      	mov	sl, r2
   1a804:	469b      	mov	fp, r3
   1a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
   1a808:	9b05      	ldr	r3, [sp, #20]
   1a80a:	2b00      	cmp	r3, #0
   1a80c:	d03f      	beq.n	1a88e <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
   1a80e:	9b05      	ldr	r3, [sp, #20]
   1a810:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1a812:	a907      	add	r1, sp, #28
   1a814:	884b      	ldrh	r3, [r1, #2]
   1a816:	b29b      	uxth	r3, r3
   1a818:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1a81a:	9806      	ldr	r0, [sp, #24]
   1a81c:	2208      	movs	r2, #8
   1a81e:	4b31      	ldr	r3, [pc, #196]	; (1a8e4 <hif_send+0x210>)
   1a820:	4798      	blx	r3
   1a822:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a824:	d1e8      	bne.n	1a7f8 <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1a826:	9b06      	ldr	r3, [sp, #24]
   1a828:	3308      	adds	r3, #8
   1a82a:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
   1a82c:	9b01      	ldr	r3, [sp, #4]
   1a82e:	2b00      	cmp	r3, #0
   1a830:	d00b      	beq.n	1a84a <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1a832:	9806      	ldr	r0, [sp, #24]
   1a834:	9a00      	ldr	r2, [sp, #0]
   1a836:	0019      	movs	r1, r3
   1a838:	4b2a      	ldr	r3, [pc, #168]	; (1a8e4 <hif_send+0x210>)
   1a83a:	4798      	blx	r3
   1a83c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a83e:	d1db      	bne.n	1a7f8 <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
   1a840:	9b06      	ldr	r3, [sp, #24]
   1a842:	9a00      	ldr	r2, [sp, #0]
   1a844:	4694      	mov	ip, r2
   1a846:	4463      	add	r3, ip
   1a848:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
   1a84a:	2f00      	cmp	r7, #0
   1a84c:	d00e      	beq.n	1a86c <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1a84e:	9b06      	ldr	r3, [sp, #24]
   1a850:	9a00      	ldr	r2, [sp, #0]
   1a852:	1aad      	subs	r5, r5, r2
   1a854:	18ed      	adds	r5, r5, r3
   1a856:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1a858:	9806      	ldr	r0, [sp, #24]
   1a85a:	0032      	movs	r2, r6
   1a85c:	0039      	movs	r1, r7
   1a85e:	4b21      	ldr	r3, [pc, #132]	; (1a8e4 <hif_send+0x210>)
   1a860:	4798      	blx	r3
   1a862:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a864:	d1c8      	bne.n	1a7f8 <hif_send+0x124>
				u32CurrAddr += u16DataSize;
   1a866:	9b06      	ldr	r3, [sp, #24]
   1a868:	18f3      	adds	r3, r6, r3
   1a86a:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
   1a86c:	9b05      	ldr	r3, [sp, #20]
   1a86e:	009b      	lsls	r3, r3, #2
   1a870:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
   1a872:	9b04      	ldr	r3, [sp, #16]
   1a874:	2202      	movs	r2, #2
   1a876:	4313      	orrs	r3, r2
   1a878:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1a87a:	9904      	ldr	r1, [sp, #16]
   1a87c:	481a      	ldr	r0, [pc, #104]	; (1a8e8 <hif_send+0x214>)
   1a87e:	4b0e      	ldr	r3, [pc, #56]	; (1a8b8 <hif_send+0x1e4>)
   1a880:	4798      	blx	r3
   1a882:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a884:	d1b8      	bne.n	1a7f8 <hif_send+0x124>
 	ret = hif_chip_sleep();
   1a886:	4b19      	ldr	r3, [pc, #100]	; (1a8ec <hif_send+0x218>)
   1a888:	4798      	blx	r3
   1a88a:	0004      	movs	r4, r0
	return ret;
   1a88c:	e7b6      	b.n	1a7fc <hif_send+0x128>
			ret = hif_chip_sleep();
   1a88e:	4b17      	ldr	r3, [pc, #92]	; (1a8ec <hif_send+0x218>)
   1a890:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
   1a892:	2403      	movs	r4, #3
   1a894:	4264      	negs	r4, r4
			goto ERR2;
   1a896:	e7b1      	b.n	1a7fc <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1a898:	2298      	movs	r2, #152	; 0x98
   1a89a:	32ff      	adds	r2, #255	; 0xff
   1a89c:	4914      	ldr	r1, [pc, #80]	; (1a8f0 <hif_send+0x21c>)
   1a89e:	4815      	ldr	r0, [pc, #84]	; (1a8f4 <hif_send+0x220>)
   1a8a0:	4d0b      	ldr	r5, [pc, #44]	; (1a8d0 <hif_send+0x1fc>)
   1a8a2:	47a8      	blx	r5
   1a8a4:	4814      	ldr	r0, [pc, #80]	; (1a8f8 <hif_send+0x224>)
   1a8a6:	47a8      	blx	r5
   1a8a8:	480b      	ldr	r0, [pc, #44]	; (1a8d8 <hif_send+0x204>)
   1a8aa:	47a8      	blx	r5
		goto ERR2;
   1a8ac:	e7a6      	b.n	1a7fc <hif_send+0x128>
   1a8ae:	46c0      	nop			; (mov r8, r8)
   1a8b0:	0001a645 	.word	0x0001a645
   1a8b4:	0000108c 	.word	0x0000108c
   1a8b8:	0001b989 	.word	0x0001b989
   1a8bc:	00001078 	.word	0x00001078
   1a8c0:	000003e7 	.word	0x000003e7
   1a8c4:	0001b97d 	.word	0x0001b97d
   1a8c8:	0001a271 	.word	0x0001a271
   1a8cc:	00029964 	.word	0x00029964
   1a8d0:	000190ad 	.word	0x000190ad
   1a8d4:	00029970 	.word	0x00029970
   1a8d8:	00029650 	.word	0x00029650
   1a8dc:	00150400 	.word	0x00150400
   1a8e0:	0001a681 	.word	0x0001a681
   1a8e4:	0001b9fd 	.word	0x0001b9fd
   1a8e8:	0000106c 	.word	0x0000106c
   1a8ec:	0001a69d 	.word	0x0001a69d
   1a8f0:	00029674 	.word	0x00029674
   1a8f4:	00029628 	.word	0x00029628
   1a8f8:	00029984 	.word	0x00029984

0001a8fc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1a8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8fe:	46ce      	mov	lr, r9
   1a900:	4647      	mov	r7, r8
   1a902:	b580      	push	{r7, lr}
   1a904:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
   1a906:	2200      	movs	r2, #0
   1a908:	4bc8      	ldr	r3, [pc, #800]	; (1ac2c <hif_handle_isr+0x330>)
   1a90a:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a90c:	4699      	mov	r9, r3
   1a90e:	4698      	mov	r8, r3
   1a910:	e07c      	b.n	1aa0c <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
   1a912:	4bc6      	ldr	r3, [pc, #792]	; (1ac2c <hif_handle_isr+0x330>)
   1a914:	9a05      	ldr	r2, [sp, #20]
   1a916:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1a918:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1a91a:	ad04      	add	r5, sp, #16
   1a91c:	2204      	movs	r2, #4
   1a91e:	0029      	movs	r1, r5
   1a920:	9805      	ldr	r0, [sp, #20]
   1a922:	4bc3      	ldr	r3, [pc, #780]	; (1ac30 <hif_handle_isr+0x334>)
   1a924:	4798      	blx	r3
   1a926:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1a928:	886b      	ldrh	r3, [r5, #2]
   1a92a:	b29b      	uxth	r3, r3
   1a92c:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
   1a92e:	2800      	cmp	r0, #0
   1a930:	d132      	bne.n	1a998 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
   1a932:	ab04      	add	r3, sp, #16
   1a934:	885b      	ldrh	r3, [r3, #2]
   1a936:	b29b      	uxth	r3, r3
   1a938:	429f      	cmp	r7, r3
   1a93a:	d004      	beq.n	1a946 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
   1a93c:	ab04      	add	r3, sp, #16
   1a93e:	885b      	ldrh	r3, [r3, #2]
   1a940:	1afb      	subs	r3, r7, r3
   1a942:	2b04      	cmp	r3, #4
   1a944:	dc36      	bgt.n	1a9b4 <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1a946:	ab04      	add	r3, sp, #16
   1a948:	781b      	ldrb	r3, [r3, #0]
   1a94a:	2b01      	cmp	r3, #1
   1a94c:	d04a      	beq.n	1a9e4 <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1a94e:	ab04      	add	r3, sp, #16
   1a950:	781b      	ldrb	r3, [r3, #0]
   1a952:	2b02      	cmp	r3, #2
   1a954:	d076      	beq.n	1aa44 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1a956:	ab04      	add	r3, sp, #16
   1a958:	781b      	ldrb	r3, [r3, #0]
   1a95a:	2b04      	cmp	r3, #4
   1a95c:	d100      	bne.n	1a960 <hif_handle_isr+0x64>
   1a95e:	e08c      	b.n	1aa7a <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1a960:	ab04      	add	r3, sp, #16
   1a962:	781b      	ldrb	r3, [r3, #0]
   1a964:	2b06      	cmp	r3, #6
   1a966:	d100      	bne.n	1a96a <hif_handle_isr+0x6e>
   1a968:	e0a2      	b.n	1aab0 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1a96a:	ab04      	add	r3, sp, #16
   1a96c:	781b      	ldrb	r3, [r3, #0]
   1a96e:	2b07      	cmp	r3, #7
   1a970:	d100      	bne.n	1a974 <hif_handle_isr+0x78>
   1a972:	e0b8      	b.n	1aae6 <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1a974:	ab04      	add	r3, sp, #16
   1a976:	781b      	ldrb	r3, [r3, #0]
   1a978:	2b05      	cmp	r3, #5
   1a97a:	d100      	bne.n	1a97e <hif_handle_isr+0x82>
   1a97c:	e0cd      	b.n	1ab1a <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
   1a97e:	2284      	movs	r2, #132	; 0x84
   1a980:	0092      	lsls	r2, r2, #2
   1a982:	49ac      	ldr	r1, [pc, #688]	; (1ac34 <hif_handle_isr+0x338>)
   1a984:	48ac      	ldr	r0, [pc, #688]	; (1ac38 <hif_handle_isr+0x33c>)
   1a986:	4cad      	ldr	r4, [pc, #692]	; (1ac3c <hif_handle_isr+0x340>)
   1a988:	47a0      	blx	r4
   1a98a:	48ad      	ldr	r0, [pc, #692]	; (1ac40 <hif_handle_isr+0x344>)
   1a98c:	47a0      	blx	r4
   1a98e:	48ad      	ldr	r0, [pc, #692]	; (1ac44 <hif_handle_isr+0x348>)
   1a990:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
   1a992:	2406      	movs	r4, #6
   1a994:	4264      	negs	r4, r4
   1a996:	e106      	b.n	1aba6 <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
   1a998:	22e9      	movs	r2, #233	; 0xe9
   1a99a:	0052      	lsls	r2, r2, #1
   1a99c:	49a5      	ldr	r1, [pc, #660]	; (1ac34 <hif_handle_isr+0x338>)
   1a99e:	48a6      	ldr	r0, [pc, #664]	; (1ac38 <hif_handle_isr+0x33c>)
   1a9a0:	4da6      	ldr	r5, [pc, #664]	; (1ac3c <hif_handle_isr+0x340>)
   1a9a2:	47a8      	blx	r5
   1a9a4:	48a8      	ldr	r0, [pc, #672]	; (1ac48 <hif_handle_isr+0x34c>)
   1a9a6:	47a8      	blx	r5
   1a9a8:	48a6      	ldr	r0, [pc, #664]	; (1ac44 <hif_handle_isr+0x348>)
   1a9aa:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1a9ac:	2001      	movs	r0, #1
   1a9ae:	4ba7      	ldr	r3, [pc, #668]	; (1ac4c <hif_handle_isr+0x350>)
   1a9b0:	4798      	blx	r3
   1a9b2:	e0f8      	b.n	1aba6 <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1a9b4:	22dc      	movs	r2, #220	; 0xdc
   1a9b6:	32ff      	adds	r2, #255	; 0xff
   1a9b8:	499e      	ldr	r1, [pc, #632]	; (1ac34 <hif_handle_isr+0x338>)
   1a9ba:	489f      	ldr	r0, [pc, #636]	; (1ac38 <hif_handle_isr+0x33c>)
   1a9bc:	4c9f      	ldr	r4, [pc, #636]	; (1ac3c <hif_handle_isr+0x340>)
   1a9be:	47a0      	blx	r4
   1a9c0:	a904      	add	r1, sp, #16
   1a9c2:	884a      	ldrh	r2, [r1, #2]
   1a9c4:	b292      	uxth	r2, r2
   1a9c6:	780b      	ldrb	r3, [r1, #0]
   1a9c8:	b2db      	uxtb	r3, r3
   1a9ca:	7849      	ldrb	r1, [r1, #1]
   1a9cc:	9100      	str	r1, [sp, #0]
   1a9ce:	0039      	movs	r1, r7
   1a9d0:	489f      	ldr	r0, [pc, #636]	; (1ac50 <hif_handle_isr+0x354>)
   1a9d2:	47a0      	blx	r4
   1a9d4:	489b      	ldr	r0, [pc, #620]	; (1ac44 <hif_handle_isr+0x348>)
   1a9d6:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
   1a9d8:	2001      	movs	r0, #1
   1a9da:	4b9c      	ldr	r3, [pc, #624]	; (1ac4c <hif_handle_isr+0x350>)
   1a9dc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1a9de:	2406      	movs	r4, #6
   1a9e0:	4264      	negs	r4, r4
   1a9e2:	e0e0      	b.n	1aba6 <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
   1a9e4:	4b91      	ldr	r3, [pc, #580]	; (1ac2c <hif_handle_isr+0x330>)
   1a9e6:	691b      	ldr	r3, [r3, #16]
   1a9e8:	2b00      	cmp	r3, #0
   1a9ea:	d020      	beq.n	1aa2e <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a9ec:	4b8f      	ldr	r3, [pc, #572]	; (1ac2c <hif_handle_isr+0x330>)
   1a9ee:	691b      	ldr	r3, [r3, #16]
   1a9f0:	aa04      	add	r2, sp, #16
   1a9f2:	7850      	ldrb	r0, [r2, #1]
   1a9f4:	b2c0      	uxtb	r0, r0
   1a9f6:	8851      	ldrh	r1, [r2, #2]
   1a9f8:	9a05      	ldr	r2, [sp, #20]
   1a9fa:	3208      	adds	r2, #8
   1a9fc:	3908      	subs	r1, #8
   1a9fe:	b289      	uxth	r1, r1
   1aa00:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
   1aa02:	4b8a      	ldr	r3, [pc, #552]	; (1ac2c <hif_handle_isr+0x330>)
   1aa04:	789b      	ldrb	r3, [r3, #2]
   1aa06:	2b00      	cmp	r3, #0
   1aa08:	d000      	beq.n	1aa0c <hif_handle_isr+0x110>
   1aa0a:	e097      	b.n	1ab3c <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1aa0c:	464b      	mov	r3, r9
   1aa0e:	78db      	ldrb	r3, [r3, #3]
   1aa10:	2b00      	cmp	r3, #0
   1aa12:	d100      	bne.n	1aa16 <hif_handle_isr+0x11a>
   1aa14:	e103      	b.n	1ac1e <hif_handle_isr+0x322>
   1aa16:	4643      	mov	r3, r8
   1aa18:	791b      	ldrb	r3, [r3, #4]
   1aa1a:	2b00      	cmp	r3, #0
   1aa1c:	d000      	beq.n	1aa20 <hif_handle_isr+0x124>
   1aa1e:	e0fe      	b.n	1ac1e <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1aa20:	4a82      	ldr	r2, [pc, #520]	; (1ac2c <hif_handle_isr+0x330>)
   1aa22:	78d3      	ldrb	r3, [r2, #3]
   1aa24:	3b01      	subs	r3, #1
   1aa26:	b2db      	uxtb	r3, r3
   1aa28:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1aa2a:	4e8a      	ldr	r6, [pc, #552]	; (1ac54 <hif_handle_isr+0x358>)
   1aa2c:	e0c5      	b.n	1abba <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
   1aa2e:	22e8      	movs	r2, #232	; 0xe8
   1aa30:	32ff      	adds	r2, #255	; 0xff
   1aa32:	4980      	ldr	r1, [pc, #512]	; (1ac34 <hif_handle_isr+0x338>)
   1aa34:	4880      	ldr	r0, [pc, #512]	; (1ac38 <hif_handle_isr+0x33c>)
   1aa36:	4c81      	ldr	r4, [pc, #516]	; (1ac3c <hif_handle_isr+0x340>)
   1aa38:	47a0      	blx	r4
   1aa3a:	4887      	ldr	r0, [pc, #540]	; (1ac58 <hif_handle_isr+0x35c>)
   1aa3c:	47a0      	blx	r4
   1aa3e:	4881      	ldr	r0, [pc, #516]	; (1ac44 <hif_handle_isr+0x348>)
   1aa40:	47a0      	blx	r4
   1aa42:	e7de      	b.n	1aa02 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
   1aa44:	4b79      	ldr	r3, [pc, #484]	; (1ac2c <hif_handle_isr+0x330>)
   1aa46:	695b      	ldr	r3, [r3, #20]
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	d00b      	beq.n	1aa64 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa4c:	4b77      	ldr	r3, [pc, #476]	; (1ac2c <hif_handle_isr+0x330>)
   1aa4e:	695b      	ldr	r3, [r3, #20]
   1aa50:	aa04      	add	r2, sp, #16
   1aa52:	7850      	ldrb	r0, [r2, #1]
   1aa54:	b2c0      	uxtb	r0, r0
   1aa56:	8851      	ldrh	r1, [r2, #2]
   1aa58:	9a05      	ldr	r2, [sp, #20]
   1aa5a:	3208      	adds	r2, #8
   1aa5c:	3908      	subs	r1, #8
   1aa5e:	b289      	uxth	r1, r1
   1aa60:	4798      	blx	r3
   1aa62:	e7ce      	b.n	1aa02 <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
   1aa64:	22f0      	movs	r2, #240	; 0xf0
   1aa66:	32ff      	adds	r2, #255	; 0xff
   1aa68:	4972      	ldr	r1, [pc, #456]	; (1ac34 <hif_handle_isr+0x338>)
   1aa6a:	4873      	ldr	r0, [pc, #460]	; (1ac38 <hif_handle_isr+0x33c>)
   1aa6c:	4c73      	ldr	r4, [pc, #460]	; (1ac3c <hif_handle_isr+0x340>)
   1aa6e:	47a0      	blx	r4
   1aa70:	487a      	ldr	r0, [pc, #488]	; (1ac5c <hif_handle_isr+0x360>)
   1aa72:	47a0      	blx	r4
   1aa74:	4873      	ldr	r0, [pc, #460]	; (1ac44 <hif_handle_isr+0x348>)
   1aa76:	47a0      	blx	r4
   1aa78:	e7c3      	b.n	1aa02 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
   1aa7a:	4b6c      	ldr	r3, [pc, #432]	; (1ac2c <hif_handle_isr+0x330>)
   1aa7c:	699b      	ldr	r3, [r3, #24]
   1aa7e:	2b00      	cmp	r3, #0
   1aa80:	d00b      	beq.n	1aa9a <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa82:	4b6a      	ldr	r3, [pc, #424]	; (1ac2c <hif_handle_isr+0x330>)
   1aa84:	699b      	ldr	r3, [r3, #24]
   1aa86:	aa04      	add	r2, sp, #16
   1aa88:	7850      	ldrb	r0, [r2, #1]
   1aa8a:	b2c0      	uxtb	r0, r0
   1aa8c:	8851      	ldrh	r1, [r2, #2]
   1aa8e:	9a05      	ldr	r2, [sp, #20]
   1aa90:	3208      	adds	r2, #8
   1aa92:	3908      	subs	r1, #8
   1aa94:	b289      	uxth	r1, r1
   1aa96:	4798      	blx	r3
   1aa98:	e7b3      	b.n	1aa02 <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
   1aa9a:	22f8      	movs	r2, #248	; 0xf8
   1aa9c:	32ff      	adds	r2, #255	; 0xff
   1aa9e:	4965      	ldr	r1, [pc, #404]	; (1ac34 <hif_handle_isr+0x338>)
   1aaa0:	4865      	ldr	r0, [pc, #404]	; (1ac38 <hif_handle_isr+0x33c>)
   1aaa2:	4c66      	ldr	r4, [pc, #408]	; (1ac3c <hif_handle_isr+0x340>)
   1aaa4:	47a0      	blx	r4
   1aaa6:	486e      	ldr	r0, [pc, #440]	; (1ac60 <hif_handle_isr+0x364>)
   1aaa8:	47a0      	blx	r4
   1aaaa:	4866      	ldr	r0, [pc, #408]	; (1ac44 <hif_handle_isr+0x348>)
   1aaac:	47a0      	blx	r4
   1aaae:	e7a8      	b.n	1aa02 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
   1aab0:	4b5e      	ldr	r3, [pc, #376]	; (1ac2c <hif_handle_isr+0x330>)
   1aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aab4:	2b00      	cmp	r3, #0
   1aab6:	d00b      	beq.n	1aad0 <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aab8:	4b5c      	ldr	r3, [pc, #368]	; (1ac2c <hif_handle_isr+0x330>)
   1aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aabc:	aa04      	add	r2, sp, #16
   1aabe:	7850      	ldrb	r0, [r2, #1]
   1aac0:	b2c0      	uxtb	r0, r0
   1aac2:	8851      	ldrh	r1, [r2, #2]
   1aac4:	9a05      	ldr	r2, [sp, #20]
   1aac6:	3208      	adds	r2, #8
   1aac8:	3908      	subs	r1, #8
   1aaca:	b289      	uxth	r1, r1
   1aacc:	4798      	blx	r3
   1aace:	e798      	b.n	1aa02 <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
   1aad0:	2280      	movs	r2, #128	; 0x80
   1aad2:	0092      	lsls	r2, r2, #2
   1aad4:	4957      	ldr	r1, [pc, #348]	; (1ac34 <hif_handle_isr+0x338>)
   1aad6:	4858      	ldr	r0, [pc, #352]	; (1ac38 <hif_handle_isr+0x33c>)
   1aad8:	4c58      	ldr	r4, [pc, #352]	; (1ac3c <hif_handle_isr+0x340>)
   1aada:	47a0      	blx	r4
   1aadc:	4861      	ldr	r0, [pc, #388]	; (1ac64 <hif_handle_isr+0x368>)
   1aade:	47a0      	blx	r4
   1aae0:	4858      	ldr	r0, [pc, #352]	; (1ac44 <hif_handle_isr+0x348>)
   1aae2:	47a0      	blx	r4
   1aae4:	e78d      	b.n	1aa02 <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
   1aae6:	4b51      	ldr	r3, [pc, #324]	; (1ac2c <hif_handle_isr+0x330>)
   1aae8:	69db      	ldr	r3, [r3, #28]
   1aaea:	2b00      	cmp	r3, #0
   1aaec:	d00b      	beq.n	1ab06 <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aaee:	4b4f      	ldr	r3, [pc, #316]	; (1ac2c <hif_handle_isr+0x330>)
   1aaf0:	69db      	ldr	r3, [r3, #28]
   1aaf2:	aa04      	add	r2, sp, #16
   1aaf4:	7850      	ldrb	r0, [r2, #1]
   1aaf6:	b2c0      	uxtb	r0, r0
   1aaf8:	8851      	ldrh	r1, [r2, #2]
   1aafa:	9a05      	ldr	r2, [sp, #20]
   1aafc:	3208      	adds	r2, #8
   1aafe:	3908      	subs	r1, #8
   1ab00:	b289      	uxth	r1, r1
   1ab02:	4798      	blx	r3
   1ab04:	e77d      	b.n	1aa02 <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
   1ab06:	4a58      	ldr	r2, [pc, #352]	; (1ac68 <hif_handle_isr+0x36c>)
   1ab08:	494a      	ldr	r1, [pc, #296]	; (1ac34 <hif_handle_isr+0x338>)
   1ab0a:	484b      	ldr	r0, [pc, #300]	; (1ac38 <hif_handle_isr+0x33c>)
   1ab0c:	4c4b      	ldr	r4, [pc, #300]	; (1ac3c <hif_handle_isr+0x340>)
   1ab0e:	47a0      	blx	r4
   1ab10:	4856      	ldr	r0, [pc, #344]	; (1ac6c <hif_handle_isr+0x370>)
   1ab12:	47a0      	blx	r4
   1ab14:	484b      	ldr	r0, [pc, #300]	; (1ac44 <hif_handle_isr+0x348>)
   1ab16:	47a0      	blx	r4
   1ab18:	e773      	b.n	1aa02 <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
   1ab1a:	4b44      	ldr	r3, [pc, #272]	; (1ac2c <hif_handle_isr+0x330>)
   1ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ab1e:	2b00      	cmp	r3, #0
   1ab20:	d100      	bne.n	1ab24 <hif_handle_isr+0x228>
   1ab22:	e76e      	b.n	1aa02 <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1ab24:	4b41      	ldr	r3, [pc, #260]	; (1ac2c <hif_handle_isr+0x330>)
   1ab26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ab28:	aa04      	add	r2, sp, #16
   1ab2a:	7850      	ldrb	r0, [r2, #1]
   1ab2c:	b2c0      	uxtb	r0, r0
   1ab2e:	8851      	ldrh	r1, [r2, #2]
   1ab30:	9a05      	ldr	r2, [sp, #20]
   1ab32:	3208      	adds	r2, #8
   1ab34:	3908      	subs	r1, #8
   1ab36:	b289      	uxth	r1, r1
   1ab38:	4798      	blx	r3
   1ab3a:	e762      	b.n	1aa02 <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1ab3c:	4a4c      	ldr	r2, [pc, #304]	; (1ac70 <hif_handle_isr+0x374>)
   1ab3e:	493d      	ldr	r1, [pc, #244]	; (1ac34 <hif_handle_isr+0x338>)
   1ab40:	483d      	ldr	r0, [pc, #244]	; (1ac38 <hif_handle_isr+0x33c>)
   1ab42:	4c3e      	ldr	r4, [pc, #248]	; (1ac3c <hif_handle_isr+0x340>)
   1ab44:	47a0      	blx	r4
   1ab46:	ab04      	add	r3, sp, #16
   1ab48:	7819      	ldrb	r1, [r3, #0]
   1ab4a:	b2c9      	uxtb	r1, r1
   1ab4c:	785a      	ldrb	r2, [r3, #1]
   1ab4e:	b2d2      	uxtb	r2, r2
   1ab50:	4848      	ldr	r0, [pc, #288]	; (1ac74 <hif_handle_isr+0x378>)
   1ab52:	47a0      	blx	r4
   1ab54:	483b      	ldr	r0, [pc, #236]	; (1ac44 <hif_handle_isr+0x348>)
   1ab56:	47a0      	blx	r4
					ret = hif_set_rx_done();
   1ab58:	4b47      	ldr	r3, [pc, #284]	; (1ac78 <hif_handle_isr+0x37c>)
   1ab5a:	4798      	blx	r3
   1ab5c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
   1ab5e:	d122      	bne.n	1aba6 <hif_handle_isr+0x2aa>
   1ab60:	e754      	b.n	1aa0c <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
   1ab62:	4a46      	ldr	r2, [pc, #280]	; (1ac7c <hif_handle_isr+0x380>)
   1ab64:	4933      	ldr	r1, [pc, #204]	; (1ac34 <hif_handle_isr+0x338>)
   1ab66:	4834      	ldr	r0, [pc, #208]	; (1ac38 <hif_handle_isr+0x33c>)
   1ab68:	4c34      	ldr	r4, [pc, #208]	; (1ac3c <hif_handle_isr+0x340>)
   1ab6a:	47a0      	blx	r4
   1ab6c:	4844      	ldr	r0, [pc, #272]	; (1ac80 <hif_handle_isr+0x384>)
   1ab6e:	47a0      	blx	r4
   1ab70:	4834      	ldr	r0, [pc, #208]	; (1ac44 <hif_handle_isr+0x348>)
   1ab72:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
   1ab74:	2402      	movs	r4, #2
   1ab76:	4264      	negs	r4, r4
   1ab78:	e015      	b.n	1aba6 <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
   1ab7a:	4a42      	ldr	r2, [pc, #264]	; (1ac84 <hif_handle_isr+0x388>)
   1ab7c:	492d      	ldr	r1, [pc, #180]	; (1ac34 <hif_handle_isr+0x338>)
   1ab7e:	482e      	ldr	r0, [pc, #184]	; (1ac38 <hif_handle_isr+0x33c>)
   1ab80:	4c2e      	ldr	r4, [pc, #184]	; (1ac3c <hif_handle_isr+0x340>)
   1ab82:	47a0      	blx	r4
   1ab84:	9903      	ldr	r1, [sp, #12]
   1ab86:	4840      	ldr	r0, [pc, #256]	; (1ac88 <hif_handle_isr+0x38c>)
   1ab88:	47a0      	blx	r4
   1ab8a:	482e      	ldr	r0, [pc, #184]	; (1ac44 <hif_handle_isr+0x348>)
   1ab8c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1ab8e:	240c      	movs	r4, #12
   1ab90:	4264      	negs	r4, r4
   1ab92:	e008      	b.n	1aba6 <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1ab94:	4a3d      	ldr	r2, [pc, #244]	; (1ac8c <hif_handle_isr+0x390>)
   1ab96:	4927      	ldr	r1, [pc, #156]	; (1ac34 <hif_handle_isr+0x338>)
   1ab98:	4827      	ldr	r0, [pc, #156]	; (1ac38 <hif_handle_isr+0x33c>)
   1ab9a:	4d28      	ldr	r5, [pc, #160]	; (1ac3c <hif_handle_isr+0x340>)
   1ab9c:	47a8      	blx	r5
   1ab9e:	483c      	ldr	r0, [pc, #240]	; (1ac90 <hif_handle_isr+0x394>)
   1aba0:	47a8      	blx	r5
   1aba2:	4828      	ldr	r0, [pc, #160]	; (1ac44 <hif_handle_isr+0x348>)
   1aba4:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1aba6:	4a3b      	ldr	r2, [pc, #236]	; (1ac94 <hif_handle_isr+0x398>)
   1aba8:	493b      	ldr	r1, [pc, #236]	; (1ac98 <hif_handle_isr+0x39c>)
   1abaa:	4823      	ldr	r0, [pc, #140]	; (1ac38 <hif_handle_isr+0x33c>)
   1abac:	4d23      	ldr	r5, [pc, #140]	; (1ac3c <hif_handle_isr+0x340>)
   1abae:	47a8      	blx	r5
   1abb0:	0021      	movs	r1, r4
   1abb2:	483a      	ldr	r0, [pc, #232]	; (1ac9c <hif_handle_isr+0x3a0>)
   1abb4:	47a8      	blx	r5
   1abb6:	4823      	ldr	r0, [pc, #140]	; (1ac44 <hif_handle_isr+0x348>)
   1abb8:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1abba:	a903      	add	r1, sp, #12
   1abbc:	4838      	ldr	r0, [pc, #224]	; (1aca0 <hif_handle_isr+0x3a4>)
   1abbe:	47b0      	blx	r6
   1abc0:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
   1abc2:	d1e7      	bne.n	1ab94 <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
   1abc4:	9b03      	ldr	r3, [sp, #12]
   1abc6:	07db      	lsls	r3, r3, #31
   1abc8:	d5d7      	bpl.n	1ab7a <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
   1abca:	2000      	movs	r0, #0
   1abcc:	4b1f      	ldr	r3, [pc, #124]	; (1ac4c <hif_handle_isr+0x350>)
   1abce:	4798      	blx	r3
			reg &= ~NBIT0;
   1abd0:	2301      	movs	r3, #1
   1abd2:	9903      	ldr	r1, [sp, #12]
   1abd4:	4399      	bics	r1, r3
   1abd6:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1abd8:	4831      	ldr	r0, [pc, #196]	; (1aca0 <hif_handle_isr+0x3a4>)
   1abda:	4b32      	ldr	r3, [pc, #200]	; (1aca4 <hif_handle_isr+0x3a8>)
   1abdc:	4798      	blx	r3
   1abde:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
   1abe0:	d1e1      	bne.n	1aba6 <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
   1abe2:	2201      	movs	r2, #1
   1abe4:	4b11      	ldr	r3, [pc, #68]	; (1ac2c <hif_handle_isr+0x330>)
   1abe6:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1abe8:	9b03      	ldr	r3, [sp, #12]
   1abea:	049f      	lsls	r7, r3, #18
   1abec:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
   1abee:	d0b8      	beq.n	1ab62 <hif_handle_isr+0x266>
				uint32 address = 0;
   1abf0:	2300      	movs	r3, #0
   1abf2:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1abf4:	a905      	add	r1, sp, #20
   1abf6:	482c      	ldr	r0, [pc, #176]	; (1aca8 <hif_handle_isr+0x3ac>)
   1abf8:	4b16      	ldr	r3, [pc, #88]	; (1ac54 <hif_handle_isr+0x358>)
   1abfa:	4798      	blx	r3
   1abfc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
   1abfe:	d100      	bne.n	1ac02 <hif_handle_isr+0x306>
   1ac00:	e687      	b.n	1a912 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1ac02:	22e4      	movs	r2, #228	; 0xe4
   1ac04:	0052      	lsls	r2, r2, #1
   1ac06:	490b      	ldr	r1, [pc, #44]	; (1ac34 <hif_handle_isr+0x338>)
   1ac08:	480b      	ldr	r0, [pc, #44]	; (1ac38 <hif_handle_isr+0x33c>)
   1ac0a:	4d0c      	ldr	r5, [pc, #48]	; (1ac3c <hif_handle_isr+0x340>)
   1ac0c:	47a8      	blx	r5
   1ac0e:	4827      	ldr	r0, [pc, #156]	; (1acac <hif_handle_isr+0x3b0>)
   1ac10:	47a8      	blx	r5
   1ac12:	480c      	ldr	r0, [pc, #48]	; (1ac44 <hif_handle_isr+0x348>)
   1ac14:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1ac16:	2001      	movs	r0, #1
   1ac18:	4b0c      	ldr	r3, [pc, #48]	; (1ac4c <hif_handle_isr+0x350>)
   1ac1a:	4798      	blx	r3
   1ac1c:	e7c3      	b.n	1aba6 <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
   1ac1e:	2000      	movs	r0, #0
   1ac20:	b007      	add	sp, #28
   1ac22:	bc0c      	pop	{r2, r3}
   1ac24:	4690      	mov	r8, r2
   1ac26:	4699      	mov	r9, r3
   1ac28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac2a:	46c0      	nop			; (mov r8, r8)
   1ac2c:	20005430 	.word	0x20005430
   1ac30:	0001b995 	.word	0x0001b995
   1ac34:	00029680 	.word	0x00029680
   1ac38:	00029628 	.word	0x00029628
   1ac3c:	000190ad 	.word	0x000190ad
   1ac40:	000297e4 	.word	0x000297e4
   1ac44:	00029650 	.word	0x00029650
   1ac48:	000296dc 	.word	0x000296dc
   1ac4c:	0001a2d5 	.word	0x0001a2d5
   1ac50:	000296f4 	.word	0x000296f4
   1ac54:	0001b97d 	.word	0x0001b97d
   1ac58:	00029734 	.word	0x00029734
   1ac5c:	00029758 	.word	0x00029758
   1ac60:	0002977c 	.word	0x0002977c
   1ac64:	0002979c 	.word	0x0002979c
   1ac68:	00000207 	.word	0x00000207
   1ac6c:	000297c0 	.word	0x000297c0
   1ac70:	00000216 	.word	0x00000216
   1ac74:	000297fc 	.word	0x000297fc
   1ac78:	0001a601 	.word	0x0001a601
   1ac7c:	0000021d 	.word	0x0000021d
   1ac80:	00029828 	.word	0x00029828
   1ac84:	00000225 	.word	0x00000225
   1ac88:	0002983c 	.word	0x0002983c
   1ac8c:	0000022e 	.word	0x0000022e
   1ac90:	00029858 	.word	0x00029858
   1ac94:	00000257 	.word	0x00000257
   1ac98:	00029688 	.word	0x00029688
   1ac9c:	0002987c 	.word	0x0002987c
   1aca0:	00001070 	.word	0x00001070
   1aca4:	0001b989 	.word	0x0001b989
   1aca8:	00001084 	.word	0x00001084
   1acac:	000296b4 	.word	0x000296b4

0001acb0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1acb0:	b570      	push	{r4, r5, r6, lr}
   1acb2:	0014      	movs	r4, r2
   1acb4:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1acb6:	2800      	cmp	r0, #0
   1acb8:	d003      	beq.n	1acc2 <hif_receive+0x12>
   1acba:	2900      	cmp	r1, #0
   1acbc:	d001      	beq.n	1acc2 <hif_receive+0x12>
   1acbe:	2a00      	cmp	r2, #0
   1acc0:	d111      	bne.n	1ace6 <hif_receive+0x36>
	{
		if(isDone)
   1acc2:	2d00      	cmp	r5, #0
   1acc4:	d002      	beq.n	1accc <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1acc6:	4b25      	ldr	r3, [pc, #148]	; (1ad5c <hif_receive+0xac>)
   1acc8:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
   1acca:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
   1accc:	229e      	movs	r2, #158	; 0x9e
   1acce:	0092      	lsls	r2, r2, #2
   1acd0:	4923      	ldr	r1, [pc, #140]	; (1ad60 <hif_receive+0xb0>)
   1acd2:	4824      	ldr	r0, [pc, #144]	; (1ad64 <hif_receive+0xb4>)
   1acd4:	4c24      	ldr	r4, [pc, #144]	; (1ad68 <hif_receive+0xb8>)
   1acd6:	47a0      	blx	r4
   1acd8:	4824      	ldr	r0, [pc, #144]	; (1ad6c <hif_receive+0xbc>)
   1acda:	47a0      	blx	r4
   1acdc:	4824      	ldr	r0, [pc, #144]	; (1ad70 <hif_receive+0xc0>)
   1acde:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1ace0:	200c      	movs	r0, #12
   1ace2:	4240      	negs	r0, r0
   1ace4:	e7f1      	b.n	1acca <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
   1ace6:	4b23      	ldr	r3, [pc, #140]	; (1ad74 <hif_receive+0xc4>)
   1ace8:	68db      	ldr	r3, [r3, #12]
   1acea:	429a      	cmp	r2, r3
   1acec:	d81a      	bhi.n	1ad24 <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1acee:	4b21      	ldr	r3, [pc, #132]	; (1ad74 <hif_receive+0xc4>)
   1acf0:	689b      	ldr	r3, [r3, #8]
   1acf2:	4298      	cmp	r0, r3
   1acf4:	d326      	bcc.n	1ad44 <hif_receive+0x94>
   1acf6:	1886      	adds	r6, r0, r2
   1acf8:	4a1e      	ldr	r2, [pc, #120]	; (1ad74 <hif_receive+0xc4>)
   1acfa:	6893      	ldr	r3, [r2, #8]
   1acfc:	68d2      	ldr	r2, [r2, #12]
   1acfe:	189b      	adds	r3, r3, r2
   1ad00:	429e      	cmp	r6, r3
   1ad02:	d81f      	bhi.n	1ad44 <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1ad04:	0022      	movs	r2, r4
   1ad06:	4b1c      	ldr	r3, [pc, #112]	; (1ad78 <hif_receive+0xc8>)
   1ad08:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1ad0a:	2800      	cmp	r0, #0
   1ad0c:	d1dd      	bne.n	1acca <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1ad0e:	4a19      	ldr	r2, [pc, #100]	; (1ad74 <hif_receive+0xc4>)
   1ad10:	6893      	ldr	r3, [r2, #8]
   1ad12:	68d2      	ldr	r2, [r2, #12]
   1ad14:	189b      	adds	r3, r3, r2
   1ad16:	429e      	cmp	r6, r3
   1ad18:	d001      	beq.n	1ad1e <hif_receive+0x6e>
   1ad1a:	2d00      	cmp	r5, #0
   1ad1c:	d0d5      	beq.n	1acca <hif_receive+0x1a>
		ret = hif_set_rx_done();
   1ad1e:	4b0f      	ldr	r3, [pc, #60]	; (1ad5c <hif_receive+0xac>)
   1ad20:	4798      	blx	r3
   1ad22:	e7d2      	b.n	1acca <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1ad24:	22a0      	movs	r2, #160	; 0xa0
   1ad26:	0092      	lsls	r2, r2, #2
   1ad28:	490d      	ldr	r1, [pc, #52]	; (1ad60 <hif_receive+0xb0>)
   1ad2a:	480e      	ldr	r0, [pc, #56]	; (1ad64 <hif_receive+0xb4>)
   1ad2c:	4d0e      	ldr	r5, [pc, #56]	; (1ad68 <hif_receive+0xb8>)
   1ad2e:	47a8      	blx	r5
   1ad30:	4b10      	ldr	r3, [pc, #64]	; (1ad74 <hif_receive+0xc4>)
   1ad32:	68da      	ldr	r2, [r3, #12]
   1ad34:	0021      	movs	r1, r4
   1ad36:	4811      	ldr	r0, [pc, #68]	; (1ad7c <hif_receive+0xcc>)
   1ad38:	47a8      	blx	r5
   1ad3a:	480d      	ldr	r0, [pc, #52]	; (1ad70 <hif_receive+0xc0>)
   1ad3c:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
   1ad3e:	200c      	movs	r0, #12
   1ad40:	4240      	negs	r0, r0
		goto ERR1;
   1ad42:	e7c2      	b.n	1acca <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1ad44:	4a0e      	ldr	r2, [pc, #56]	; (1ad80 <hif_receive+0xd0>)
   1ad46:	4906      	ldr	r1, [pc, #24]	; (1ad60 <hif_receive+0xb0>)
   1ad48:	4806      	ldr	r0, [pc, #24]	; (1ad64 <hif_receive+0xb4>)
   1ad4a:	4c07      	ldr	r4, [pc, #28]	; (1ad68 <hif_receive+0xb8>)
   1ad4c:	47a0      	blx	r4
   1ad4e:	480d      	ldr	r0, [pc, #52]	; (1ad84 <hif_receive+0xd4>)
   1ad50:	47a0      	blx	r4
   1ad52:	4807      	ldr	r0, [pc, #28]	; (1ad70 <hif_receive+0xc0>)
   1ad54:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1ad56:	200c      	movs	r0, #12
   1ad58:	4240      	negs	r0, r0
		goto ERR1;
   1ad5a:	e7b6      	b.n	1acca <hif_receive+0x1a>
   1ad5c:	0001a601 	.word	0x0001a601
   1ad60:	00029698 	.word	0x00029698
   1ad64:	00029628 	.word	0x00029628
   1ad68:	000190ad 	.word	0x000190ad
   1ad6c:	000298ac 	.word	0x000298ac
   1ad70:	00029650 	.word	0x00029650
   1ad74:	20005430 	.word	0x20005430
   1ad78:	0001b995 	.word	0x0001b995
   1ad7c:	000298cc 	.word	0x000298cc
   1ad80:	00000286 	.word	0x00000286
   1ad84:	00029914 	.word	0x00029914

0001ad88 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1ad88:	b570      	push	{r4, r5, r6, lr}
   1ad8a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
   1ad8c:	2807      	cmp	r0, #7
   1ad8e:	d81f      	bhi.n	1add0 <hif_register_cb+0x48>
   1ad90:	0083      	lsls	r3, r0, #2
   1ad92:	4a16      	ldr	r2, [pc, #88]	; (1adec <hif_register_cb+0x64>)
   1ad94:	58d3      	ldr	r3, [r2, r3]
   1ad96:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1ad98:	4b15      	ldr	r3, [pc, #84]	; (1adf0 <hif_register_cb+0x68>)
   1ad9a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
   1ad9c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
   1ad9e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
   1ada0:	4b13      	ldr	r3, [pc, #76]	; (1adf0 <hif_register_cb+0x68>)
   1ada2:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
   1ada4:	2000      	movs	r0, #0
			break;
   1ada6:	e7fa      	b.n	1ad9e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
   1ada8:	4b11      	ldr	r3, [pc, #68]	; (1adf0 <hif_register_cb+0x68>)
   1adaa:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
   1adac:	2000      	movs	r0, #0
			break;
   1adae:	e7f6      	b.n	1ad9e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
   1adb0:	4b0f      	ldr	r3, [pc, #60]	; (1adf0 <hif_register_cb+0x68>)
   1adb2:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
   1adb4:	2000      	movs	r0, #0
			break;
   1adb6:	e7f2      	b.n	1ad9e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
   1adb8:	4b0d      	ldr	r3, [pc, #52]	; (1adf0 <hif_register_cb+0x68>)
   1adba:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
   1adbc:	2000      	movs	r0, #0
			break;
   1adbe:	e7ee      	b.n	1ad9e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
   1adc0:	4b0b      	ldr	r3, [pc, #44]	; (1adf0 <hif_register_cb+0x68>)
   1adc2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
   1adc4:	2000      	movs	r0, #0
			break;
   1adc6:	e7ea      	b.n	1ad9e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
   1adc8:	4b09      	ldr	r3, [pc, #36]	; (1adf0 <hif_register_cb+0x68>)
   1adca:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
   1adcc:	2000      	movs	r0, #0
			break;
   1adce:	e7e6      	b.n	1ad9e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
   1add0:	4a08      	ldr	r2, [pc, #32]	; (1adf4 <hif_register_cb+0x6c>)
   1add2:	4909      	ldr	r1, [pc, #36]	; (1adf8 <hif_register_cb+0x70>)
   1add4:	4809      	ldr	r0, [pc, #36]	; (1adfc <hif_register_cb+0x74>)
   1add6:	4d0a      	ldr	r5, [pc, #40]	; (1ae00 <hif_register_cb+0x78>)
   1add8:	47a8      	blx	r5
   1adda:	0021      	movs	r1, r4
   1addc:	4809      	ldr	r0, [pc, #36]	; (1ae04 <hif_register_cb+0x7c>)
   1adde:	47a8      	blx	r5
   1ade0:	4809      	ldr	r0, [pc, #36]	; (1ae08 <hif_register_cb+0x80>)
   1ade2:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
   1ade4:	200c      	movs	r0, #12
   1ade6:	4240      	negs	r0, r0
			break;
   1ade8:	e7d9      	b.n	1ad9e <hif_register_cb+0x16>
   1adea:	46c0      	nop			; (mov r8, r8)
   1adec:	00029654 	.word	0x00029654
   1adf0:	20005430 	.word	0x20005430
   1adf4:	000002be 	.word	0x000002be
   1adf8:	000296a4 	.word	0x000296a4
   1adfc:	00029628 	.word	0x00029628
   1ae00:	000190ad 	.word	0x000190ad
   1ae04:	00029958 	.word	0x00029958
   1ae08:	00029650 	.word	0x00029650

0001ae0c <hif_init>:
{
   1ae0c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1ae0e:	222c      	movs	r2, #44	; 0x2c
   1ae10:	2100      	movs	r1, #0
   1ae12:	4806      	ldr	r0, [pc, #24]	; (1ae2c <hif_init+0x20>)
   1ae14:	4b06      	ldr	r3, [pc, #24]	; (1ae30 <hif_init+0x24>)
   1ae16:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1ae18:	4806      	ldr	r0, [pc, #24]	; (1ae34 <hif_init+0x28>)
   1ae1a:	4b07      	ldr	r3, [pc, #28]	; (1ae38 <hif_init+0x2c>)
   1ae1c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1ae1e:	4907      	ldr	r1, [pc, #28]	; (1ae3c <hif_init+0x30>)
   1ae20:	2003      	movs	r0, #3
   1ae22:	4b07      	ldr	r3, [pc, #28]	; (1ae40 <hif_init+0x34>)
   1ae24:	4798      	blx	r3
}
   1ae26:	2000      	movs	r0, #0
   1ae28:	bd10      	pop	{r4, pc}
   1ae2a:	46c0      	nop			; (mov r8, r8)
   1ae2c:	20005430 	.word	0x20005430
   1ae30:	0001a5c1 	.word	0x0001a5c1
   1ae34:	0001a5ed 	.word	0x0001a5ed
   1ae38:	0001a27d 	.word	0x0001a27d
   1ae3c:	0001a5fd 	.word	0x0001a5fd
   1ae40:	0001ad89 	.word	0x0001ad89

0001ae44 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1ae44:	b530      	push	{r4, r5, lr}
   1ae46:	b09f      	sub	sp, #124	; 0x7c
   1ae48:	0004      	movs	r4, r0
   1ae4a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1ae4c:	282c      	cmp	r0, #44	; 0x2c
   1ae4e:	d02e      	beq.n	1aeae <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1ae50:	281b      	cmp	r0, #27
   1ae52:	d03c      	beq.n	1aece <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1ae54:	2806      	cmp	r0, #6
   1ae56:	d04a      	beq.n	1aeee <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1ae58:	280e      	cmp	r0, #14
   1ae5a:	d026      	beq.n	1aeaa <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1ae5c:	2832      	cmp	r0, #50	; 0x32
   1ae5e:	d056      	beq.n	1af0e <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1ae60:	282f      	cmp	r0, #47	; 0x2f
   1ae62:	d064      	beq.n	1af2e <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1ae64:	2834      	cmp	r0, #52	; 0x34
   1ae66:	d100      	bne.n	1ae6a <m2m_wifi_cb+0x26>
   1ae68:	e076      	b.n	1af58 <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1ae6a:	2811      	cmp	r0, #17
   1ae6c:	d100      	bne.n	1ae70 <m2m_wifi_cb+0x2c>
   1ae6e:	e094      	b.n	1af9a <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1ae70:	2813      	cmp	r0, #19
   1ae72:	d100      	bne.n	1ae76 <m2m_wifi_cb+0x32>
   1ae74:	e0aa      	b.n	1afcc <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1ae76:	2804      	cmp	r0, #4
   1ae78:	d100      	bne.n	1ae7c <m2m_wifi_cb+0x38>
   1ae7a:	e0b9      	b.n	1aff0 <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1ae7c:	2865      	cmp	r0, #101	; 0x65
   1ae7e:	d100      	bne.n	1ae82 <m2m_wifi_cb+0x3e>
   1ae80:	e0c8      	b.n	1b014 <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1ae82:	2809      	cmp	r0, #9
   1ae84:	d100      	bne.n	1ae88 <m2m_wifi_cb+0x44>
   1ae86:	e0d7      	b.n	1b038 <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1ae88:	282a      	cmp	r0, #42	; 0x2a
   1ae8a:	d100      	bne.n	1ae8e <m2m_wifi_cb+0x4a>
   1ae8c:	e0e6      	b.n	1b05c <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1ae8e:	2820      	cmp	r0, #32
   1ae90:	d100      	bne.n	1ae94 <m2m_wifi_cb+0x50>
   1ae92:	e0f5      	b.n	1b080 <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1ae94:	2224      	movs	r2, #36	; 0x24
   1ae96:	32ff      	adds	r2, #255	; 0xff
   1ae98:	4988      	ldr	r1, [pc, #544]	; (1b0bc <m2m_wifi_cb+0x278>)
   1ae9a:	4889      	ldr	r0, [pc, #548]	; (1b0c0 <m2m_wifi_cb+0x27c>)
   1ae9c:	4d89      	ldr	r5, [pc, #548]	; (1b0c4 <m2m_wifi_cb+0x280>)
   1ae9e:	47a8      	blx	r5
   1aea0:	0021      	movs	r1, r4
   1aea2:	4889      	ldr	r0, [pc, #548]	; (1b0c8 <m2m_wifi_cb+0x284>)
   1aea4:	47a8      	blx	r5
   1aea6:	4889      	ldr	r0, [pc, #548]	; (1b0cc <m2m_wifi_cb+0x288>)
   1aea8:	47a8      	blx	r5
	}
}
   1aeaa:	b01f      	add	sp, #124	; 0x7c
   1aeac:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1aeae:	2300      	movs	r3, #0
   1aeb0:	2204      	movs	r2, #4
   1aeb2:	a903      	add	r1, sp, #12
   1aeb4:	0028      	movs	r0, r5
   1aeb6:	4c86      	ldr	r4, [pc, #536]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1aeb8:	47a0      	blx	r4
   1aeba:	2800      	cmp	r0, #0
   1aebc:	d1f5      	bne.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aebe:	4b85      	ldr	r3, [pc, #532]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1aec0:	681b      	ldr	r3, [r3, #0]
   1aec2:	2b00      	cmp	r3, #0
   1aec4:	d0f1      	beq.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1aec6:	a903      	add	r1, sp, #12
   1aec8:	302c      	adds	r0, #44	; 0x2c
   1aeca:	4798      	blx	r3
   1aecc:	e7ed      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1aece:	2300      	movs	r3, #0
   1aed0:	2208      	movs	r2, #8
   1aed2:	a903      	add	r1, sp, #12
   1aed4:	0028      	movs	r0, r5
   1aed6:	4c7e      	ldr	r4, [pc, #504]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1aed8:	47a0      	blx	r4
   1aeda:	2800      	cmp	r0, #0
   1aedc:	d1e5      	bne.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aede:	4b7d      	ldr	r3, [pc, #500]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1aee0:	681b      	ldr	r3, [r3, #0]
   1aee2:	2b00      	cmp	r3, #0
   1aee4:	d0e1      	beq.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1aee6:	a903      	add	r1, sp, #12
   1aee8:	301b      	adds	r0, #27
   1aeea:	4798      	blx	r3
   1aeec:	e7dd      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1aeee:	2301      	movs	r3, #1
   1aef0:	2230      	movs	r2, #48	; 0x30
   1aef2:	a903      	add	r1, sp, #12
   1aef4:	0028      	movs	r0, r5
   1aef6:	4c76      	ldr	r4, [pc, #472]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1aef8:	47a0      	blx	r4
   1aefa:	2800      	cmp	r0, #0
   1aefc:	d1d5      	bne.n	1aeaa <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1aefe:	4b75      	ldr	r3, [pc, #468]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1af00:	681b      	ldr	r3, [r3, #0]
   1af02:	2b00      	cmp	r3, #0
   1af04:	d0d1      	beq.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1af06:	a903      	add	r1, sp, #12
   1af08:	3006      	adds	r0, #6
   1af0a:	4798      	blx	r3
   1af0c:	e7cd      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1af0e:	2300      	movs	r3, #0
   1af10:	2218      	movs	r2, #24
   1af12:	a903      	add	r1, sp, #12
   1af14:	0028      	movs	r0, r5
   1af16:	4c6e      	ldr	r4, [pc, #440]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1af18:	47a0      	blx	r4
   1af1a:	2800      	cmp	r0, #0
   1af1c:	d1c5      	bne.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af1e:	4b6d      	ldr	r3, [pc, #436]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1af20:	681b      	ldr	r3, [r3, #0]
   1af22:	2b00      	cmp	r3, #0
   1af24:	d0c1      	beq.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1af26:	a903      	add	r1, sp, #12
   1af28:	3032      	adds	r0, #50	; 0x32
   1af2a:	4798      	blx	r3
   1af2c:	e7bd      	b.n	1aeaa <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1af2e:	2264      	movs	r2, #100	; 0x64
   1af30:	2100      	movs	r1, #0
   1af32:	a803      	add	r0, sp, #12
   1af34:	4b68      	ldr	r3, [pc, #416]	; (1b0d8 <m2m_wifi_cb+0x294>)
   1af36:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1af38:	2300      	movs	r3, #0
   1af3a:	2264      	movs	r2, #100	; 0x64
   1af3c:	a903      	add	r1, sp, #12
   1af3e:	0028      	movs	r0, r5
   1af40:	4c63      	ldr	r4, [pc, #396]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1af42:	47a0      	blx	r4
   1af44:	2800      	cmp	r0, #0
   1af46:	d1b0      	bne.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af48:	4b62      	ldr	r3, [pc, #392]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1af4a:	681b      	ldr	r3, [r3, #0]
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d0ac      	beq.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1af50:	a903      	add	r1, sp, #12
   1af52:	302f      	adds	r0, #47	; 0x2f
   1af54:	4798      	blx	r3
   1af56:	e7a8      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1af58:	2300      	movs	r3, #0
   1af5a:	2204      	movs	r2, #4
   1af5c:	a903      	add	r1, sp, #12
   1af5e:	0028      	movs	r0, r5
   1af60:	4c5b      	ldr	r4, [pc, #364]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1af62:	47a0      	blx	r4
   1af64:	2800      	cmp	r0, #0
   1af66:	d1a0      	bne.n	1aeaa <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1af68:	485c      	ldr	r0, [pc, #368]	; (1b0dc <m2m_wifi_cb+0x298>)
   1af6a:	4d56      	ldr	r5, [pc, #344]	; (1b0c4 <m2m_wifi_cb+0x280>)
   1af6c:	47a8      	blx	r5
   1af6e:	9c03      	ldr	r4, [sp, #12]
   1af70:	0a23      	lsrs	r3, r4, #8
   1af72:	20ff      	movs	r0, #255	; 0xff
   1af74:	4003      	ands	r3, r0
   1af76:	0c22      	lsrs	r2, r4, #16
   1af78:	4002      	ands	r2, r0
   1af7a:	0e21      	lsrs	r1, r4, #24
   1af7c:	4020      	ands	r0, r4
   1af7e:	9000      	str	r0, [sp, #0]
   1af80:	4857      	ldr	r0, [pc, #348]	; (1b0e0 <m2m_wifi_cb+0x29c>)
   1af82:	47a8      	blx	r5
   1af84:	4851      	ldr	r0, [pc, #324]	; (1b0cc <m2m_wifi_cb+0x288>)
   1af86:	47a8      	blx	r5
			if (gpfAppWifiCb)
   1af88:	4b52      	ldr	r3, [pc, #328]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1af8a:	681b      	ldr	r3, [r3, #0]
   1af8c:	2b00      	cmp	r3, #0
   1af8e:	d100      	bne.n	1af92 <m2m_wifi_cb+0x14e>
   1af90:	e78b      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1af92:	2100      	movs	r1, #0
   1af94:	2034      	movs	r0, #52	; 0x34
   1af96:	4798      	blx	r3
   1af98:	e787      	b.n	1aeaa <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
   1af9a:	2200      	movs	r2, #0
   1af9c:	4b51      	ldr	r3, [pc, #324]	; (1b0e4 <m2m_wifi_cb+0x2a0>)
   1af9e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1afa0:	2300      	movs	r3, #0
   1afa2:	3204      	adds	r2, #4
   1afa4:	a903      	add	r1, sp, #12
   1afa6:	0028      	movs	r0, r5
   1afa8:	4c49      	ldr	r4, [pc, #292]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1afaa:	47a0      	blx	r4
   1afac:	2800      	cmp	r0, #0
   1afae:	d000      	beq.n	1afb2 <m2m_wifi_cb+0x16e>
   1afb0:	e77b      	b.n	1aeaa <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
   1afb2:	ab03      	add	r3, sp, #12
   1afb4:	781a      	ldrb	r2, [r3, #0]
   1afb6:	4b4c      	ldr	r3, [pc, #304]	; (1b0e8 <m2m_wifi_cb+0x2a4>)
   1afb8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1afba:	4b46      	ldr	r3, [pc, #280]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1afbc:	681b      	ldr	r3, [r3, #0]
   1afbe:	2b00      	cmp	r3, #0
   1afc0:	d100      	bne.n	1afc4 <m2m_wifi_cb+0x180>
   1afc2:	e772      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1afc4:	a903      	add	r1, sp, #12
   1afc6:	3011      	adds	r0, #17
   1afc8:	4798      	blx	r3
   1afca:	e76e      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1afcc:	2300      	movs	r3, #0
   1afce:	222c      	movs	r2, #44	; 0x2c
   1afd0:	a903      	add	r1, sp, #12
   1afd2:	0028      	movs	r0, r5
   1afd4:	4c3e      	ldr	r4, [pc, #248]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1afd6:	47a0      	blx	r4
   1afd8:	2800      	cmp	r0, #0
   1afda:	d000      	beq.n	1afde <m2m_wifi_cb+0x19a>
   1afdc:	e765      	b.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1afde:	4b3d      	ldr	r3, [pc, #244]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1afe0:	681b      	ldr	r3, [r3, #0]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d100      	bne.n	1afe8 <m2m_wifi_cb+0x1a4>
   1afe6:	e760      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1afe8:	a903      	add	r1, sp, #12
   1afea:	3013      	adds	r0, #19
   1afec:	4798      	blx	r3
   1afee:	e75c      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1aff0:	2300      	movs	r3, #0
   1aff2:	2204      	movs	r2, #4
   1aff4:	a91c      	add	r1, sp, #112	; 0x70
   1aff6:	0028      	movs	r0, r5
   1aff8:	4c35      	ldr	r4, [pc, #212]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1affa:	47a0      	blx	r4
   1affc:	2800      	cmp	r0, #0
   1affe:	d000      	beq.n	1b002 <m2m_wifi_cb+0x1be>
   1b000:	e753      	b.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1b002:	4b34      	ldr	r3, [pc, #208]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1b004:	681b      	ldr	r3, [r3, #0]
   1b006:	2b00      	cmp	r3, #0
   1b008:	d100      	bne.n	1b00c <m2m_wifi_cb+0x1c8>
   1b00a:	e74e      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1b00c:	a91c      	add	r1, sp, #112	; 0x70
   1b00e:	3004      	adds	r0, #4
   1b010:	4798      	blx	r3
   1b012:	e74a      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1b014:	2300      	movs	r3, #0
   1b016:	2204      	movs	r2, #4
   1b018:	a91c      	add	r1, sp, #112	; 0x70
   1b01a:	0028      	movs	r0, r5
   1b01c:	4c2c      	ldr	r4, [pc, #176]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1b01e:	47a0      	blx	r4
   1b020:	2800      	cmp	r0, #0
   1b022:	d000      	beq.n	1b026 <m2m_wifi_cb+0x1e2>
   1b024:	e741      	b.n	1aeaa <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1b026:	4b2b      	ldr	r3, [pc, #172]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1b028:	681b      	ldr	r3, [r3, #0]
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	d100      	bne.n	1b030 <m2m_wifi_cb+0x1ec>
   1b02e:	e73c      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1b030:	a91c      	add	r1, sp, #112	; 0x70
   1b032:	3065      	adds	r0, #101	; 0x65
   1b034:	4798      	blx	r3
   1b036:	e738      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1b038:	2301      	movs	r3, #1
   1b03a:	2264      	movs	r2, #100	; 0x64
   1b03c:	a903      	add	r1, sp, #12
   1b03e:	0028      	movs	r0, r5
   1b040:	4c23      	ldr	r4, [pc, #140]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1b042:	47a0      	blx	r4
   1b044:	2800      	cmp	r0, #0
   1b046:	d000      	beq.n	1b04a <m2m_wifi_cb+0x206>
   1b048:	e72f      	b.n	1aeaa <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1b04a:	4b22      	ldr	r3, [pc, #136]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1b04c:	681b      	ldr	r3, [r3, #0]
   1b04e:	2b00      	cmp	r3, #0
   1b050:	d100      	bne.n	1b054 <m2m_wifi_cb+0x210>
   1b052:	e72a      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1b054:	a903      	add	r1, sp, #12
   1b056:	3009      	adds	r0, #9
   1b058:	4798      	blx	r3
   1b05a:	e726      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1b05c:	2301      	movs	r3, #1
   1b05e:	2204      	movs	r2, #4
   1b060:	a903      	add	r1, sp, #12
   1b062:	0028      	movs	r0, r5
   1b064:	4c1a      	ldr	r4, [pc, #104]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1b066:	47a0      	blx	r4
   1b068:	2800      	cmp	r0, #0
   1b06a:	d000      	beq.n	1b06e <m2m_wifi_cb+0x22a>
   1b06c:	e71d      	b.n	1aeaa <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1b06e:	4b19      	ldr	r3, [pc, #100]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1b070:	681b      	ldr	r3, [r3, #0]
   1b072:	2b00      	cmp	r3, #0
   1b074:	d100      	bne.n	1b078 <m2m_wifi_cb+0x234>
   1b076:	e718      	b.n	1aeaa <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1b078:	a903      	add	r1, sp, #12
   1b07a:	302a      	adds	r0, #42	; 0x2a
   1b07c:	4798      	blx	r3
   1b07e:	e714      	b.n	1aeaa <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1b080:	2300      	movs	r3, #0
   1b082:	2208      	movs	r2, #8
   1b084:	a903      	add	r1, sp, #12
   1b086:	0028      	movs	r0, r5
   1b088:	4c11      	ldr	r4, [pc, #68]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1b08a:	47a0      	blx	r4
   1b08c:	2800      	cmp	r0, #0
   1b08e:	d000      	beq.n	1b092 <m2m_wifi_cb+0x24e>
   1b090:	e70b      	b.n	1aeaa <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1b092:	ab03      	add	r3, sp, #12
   1b094:	889a      	ldrh	r2, [r3, #4]
   1b096:	0028      	movs	r0, r5
   1b098:	3008      	adds	r0, #8
   1b09a:	2301      	movs	r3, #1
   1b09c:	9903      	ldr	r1, [sp, #12]
   1b09e:	4c0c      	ldr	r4, [pc, #48]	; (1b0d0 <m2m_wifi_cb+0x28c>)
   1b0a0:	47a0      	blx	r4
   1b0a2:	2800      	cmp	r0, #0
   1b0a4:	d000      	beq.n	1b0a8 <m2m_wifi_cb+0x264>
   1b0a6:	e700      	b.n	1aeaa <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
   1b0a8:	4b0a      	ldr	r3, [pc, #40]	; (1b0d4 <m2m_wifi_cb+0x290>)
   1b0aa:	681b      	ldr	r3, [r3, #0]
   1b0ac:	2b00      	cmp	r3, #0
   1b0ae:	d100      	bne.n	1b0b2 <m2m_wifi_cb+0x26e>
   1b0b0:	e6fb      	b.n	1aeaa <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1b0b2:	a903      	add	r1, sp, #12
   1b0b4:	3020      	adds	r0, #32
   1b0b6:	4798      	blx	r3
   1b0b8:	e6f7      	b.n	1aeaa <m2m_wifi_cb+0x66>
   1b0ba:	46c0      	nop			; (mov r8, r8)
   1b0bc:	000299a4 	.word	0x000299a4
   1b0c0:	00029628 	.word	0x00029628
   1b0c4:	000190ad 	.word	0x000190ad
   1b0c8:	000299f4 	.word	0x000299f4
   1b0cc:	00029650 	.word	0x00029650
   1b0d0:	0001acb1 	.word	0x0001acb1
   1b0d4:	20003ce0 	.word	0x20003ce0
   1b0d8:	0001a5c1 	.word	0x0001a5c1
   1b0dc:	00029964 	.word	0x00029964
   1b0e0:	000299d4 	.word	0x000299d4
   1b0e4:	20003ce5 	.word	0x20003ce5
   1b0e8:	20003ce4 	.word	0x20003ce4

0001b0ec <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0ee:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1b0f0:	2201      	movs	r2, #1
   1b0f2:	230f      	movs	r3, #15
   1b0f4:	446b      	add	r3, sp
   1b0f6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1b0f8:	2800      	cmp	r0, #0
   1b0fa:	d05f      	beq.n	1b1bc <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1b0fc:	6802      	ldr	r2, [r0, #0]
   1b0fe:	4b31      	ldr	r3, [pc, #196]	; (1b1c4 <m2m_wifi_init+0xd8>)
   1b100:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1b102:	2200      	movs	r2, #0
   1b104:	4b30      	ldr	r3, [pc, #192]	; (1b1c8 <m2m_wifi_init+0xdc>)
   1b106:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1b108:	200f      	movs	r0, #15
   1b10a:	4468      	add	r0, sp
   1b10c:	4b2f      	ldr	r3, [pc, #188]	; (1b1cc <m2m_wifi_init+0xe0>)
   1b10e:	4798      	blx	r3
   1b110:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1b112:	d002      	beq.n	1b11a <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
   1b114:	0020      	movs	r0, r4
   1b116:	b00f      	add	sp, #60	; 0x3c
   1b118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
   1b11a:	2000      	movs	r0, #0
   1b11c:	4b2c      	ldr	r3, [pc, #176]	; (1b1d0 <m2m_wifi_init+0xe4>)
   1b11e:	4798      	blx	r3
   1b120:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1b122:	d147      	bne.n	1b1b4 <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1b124:	492b      	ldr	r1, [pc, #172]	; (1b1d4 <m2m_wifi_init+0xe8>)
   1b126:	2001      	movs	r0, #1
   1b128:	4b2b      	ldr	r3, [pc, #172]	; (1b1d8 <m2m_wifi_init+0xec>)
   1b12a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
   1b12c:	ad04      	add	r5, sp, #16
   1b12e:	0028      	movs	r0, r5
   1b130:	4b2a      	ldr	r3, [pc, #168]	; (1b1dc <m2m_wifi_init+0xf0>)
   1b132:	4798      	blx	r3
   1b134:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1b136:	4f2a      	ldr	r7, [pc, #168]	; (1b1e0 <m2m_wifi_init+0xf4>)
   1b138:	0038      	movs	r0, r7
   1b13a:	4e2a      	ldr	r6, [pc, #168]	; (1b1e4 <m2m_wifi_init+0xf8>)
   1b13c:	47b0      	blx	r6
   1b13e:	79ab      	ldrb	r3, [r5, #6]
   1b140:	796a      	ldrb	r2, [r5, #5]
   1b142:	7929      	ldrb	r1, [r5, #4]
   1b144:	8c28      	ldrh	r0, [r5, #32]
   1b146:	9000      	str	r0, [sp, #0]
   1b148:	4827      	ldr	r0, [pc, #156]	; (1b1e8 <m2m_wifi_init+0xfc>)
   1b14a:	47b0      	blx	r6
   1b14c:	4827      	ldr	r0, [pc, #156]	; (1b1ec <m2m_wifi_init+0x100>)
   1b14e:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1b150:	0038      	movs	r0, r7
   1b152:	47b0      	blx	r6
   1b154:	2226      	movs	r2, #38	; 0x26
   1b156:	446a      	add	r2, sp
   1b158:	211a      	movs	r1, #26
   1b15a:	4469      	add	r1, sp
   1b15c:	4824      	ldr	r0, [pc, #144]	; (1b1f0 <m2m_wifi_init+0x104>)
   1b15e:	47b0      	blx	r6
   1b160:	4822      	ldr	r0, [pc, #136]	; (1b1ec <m2m_wifi_init+0x100>)
   1b162:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1b164:	0038      	movs	r0, r7
   1b166:	47b0      	blx	r6
   1b168:	7a6b      	ldrb	r3, [r5, #9]
   1b16a:	7a2a      	ldrb	r2, [r5, #8]
   1b16c:	79e9      	ldrb	r1, [r5, #7]
   1b16e:	4821      	ldr	r0, [pc, #132]	; (1b1f4 <m2m_wifi_init+0x108>)
   1b170:	47b0      	blx	r6
   1b172:	481e      	ldr	r0, [pc, #120]	; (1b1ec <m2m_wifi_init+0x100>)
   1b174:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1b176:	0038      	movs	r0, r7
   1b178:	47b0      	blx	r6
   1b17a:	2304      	movs	r3, #4
   1b17c:	2205      	movs	r2, #5
   1b17e:	2113      	movs	r1, #19
   1b180:	481d      	ldr	r0, [pc, #116]	; (1b1f8 <m2m_wifi_init+0x10c>)
   1b182:	47b0      	blx	r6
   1b184:	4819      	ldr	r0, [pc, #100]	; (1b1ec <m2m_wifi_init+0x100>)
   1b186:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1b188:	0038      	movs	r0, r7
   1b18a:	47b0      	blx	r6
   1b18c:	4a1b      	ldr	r2, [pc, #108]	; (1b1fc <m2m_wifi_init+0x110>)
   1b18e:	491c      	ldr	r1, [pc, #112]	; (1b200 <m2m_wifi_init+0x114>)
   1b190:	481c      	ldr	r0, [pc, #112]	; (1b204 <m2m_wifi_init+0x118>)
   1b192:	47b0      	blx	r6
   1b194:	4815      	ldr	r0, [pc, #84]	; (1b1ec <m2m_wifi_init+0x100>)
   1b196:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1b198:	0023      	movs	r3, r4
   1b19a:	330d      	adds	r3, #13
   1b19c:	d1ba      	bne.n	1b114 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
   1b19e:	22e8      	movs	r2, #232	; 0xe8
   1b1a0:	32ff      	adds	r2, #255	; 0xff
   1b1a2:	4919      	ldr	r1, [pc, #100]	; (1b208 <m2m_wifi_init+0x11c>)
   1b1a4:	4819      	ldr	r0, [pc, #100]	; (1b20c <m2m_wifi_init+0x120>)
   1b1a6:	4d0f      	ldr	r5, [pc, #60]	; (1b1e4 <m2m_wifi_init+0xf8>)
   1b1a8:	47a8      	blx	r5
   1b1aa:	4819      	ldr	r0, [pc, #100]	; (1b210 <m2m_wifi_init+0x124>)
   1b1ac:	47a8      	blx	r5
   1b1ae:	480f      	ldr	r0, [pc, #60]	; (1b1ec <m2m_wifi_init+0x100>)
   1b1b0:	47a8      	blx	r5
   1b1b2:	e7af      	b.n	1b114 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
   1b1b4:	2000      	movs	r0, #0
   1b1b6:	4b17      	ldr	r3, [pc, #92]	; (1b214 <m2m_wifi_init+0x128>)
   1b1b8:	4798      	blx	r3
   1b1ba:	e7ab      	b.n	1b114 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1b1bc:	240c      	movs	r4, #12
   1b1be:	4264      	negs	r4, r4
   1b1c0:	e7a8      	b.n	1b114 <m2m_wifi_init+0x28>
   1b1c2:	46c0      	nop			; (mov r8, r8)
   1b1c4:	20003ce0 	.word	0x20003ce0
   1b1c8:	20003ce5 	.word	0x20003ce5
   1b1cc:	0001bb49 	.word	0x0001bb49
   1b1d0:	0001ae0d 	.word	0x0001ae0d
   1b1d4:	0001ae45 	.word	0x0001ae45
   1b1d8:	0001ad89 	.word	0x0001ad89
   1b1dc:	0001ba65 	.word	0x0001ba65
   1b1e0:	00029964 	.word	0x00029964
   1b1e4:	000190ad 	.word	0x000190ad
   1b1e8:	00029ab4 	.word	0x00029ab4
   1b1ec:	00029650 	.word	0x00029650
   1b1f0:	00029adc 	.word	0x00029adc
   1b1f4:	00029af8 	.word	0x00029af8
   1b1f8:	00029b1c 	.word	0x00029b1c
   1b1fc:	00029b34 	.word	0x00029b34
   1b200:	00029b40 	.word	0x00029b40
   1b204:	00029b4c 	.word	0x00029b4c
   1b208:	000299b0 	.word	0x000299b0
   1b20c:	00029628 	.word	0x00029628
   1b210:	00029b64 	.word	0x00029b64
   1b214:	0001bc11 	.word	0x0001bc11

0001b218 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1b218:	b510      	push	{r4, lr}
	return hif_handle_isr();
   1b21a:	4b01      	ldr	r3, [pc, #4]	; (1b220 <m2m_wifi_handle_events+0x8>)
   1b21c:	4798      	blx	r3
}
   1b21e:	bd10      	pop	{r4, pc}
   1b220:	0001a8fd 	.word	0x0001a8fd

0001b224 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1b224:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b226:	46ce      	mov	lr, r9
   1b228:	4647      	mov	r7, r8
   1b22a:	b580      	push	{r7, lr}
   1b22c:	b0a3      	sub	sp, #140	; 0x8c
   1b22e:	9005      	str	r0, [sp, #20]
   1b230:	000c      	movs	r4, r1
   1b232:	0015      	movs	r5, r2
   1b234:	001f      	movs	r7, r3
   1b236:	ab2a      	add	r3, sp, #168	; 0xa8
   1b238:	881b      	ldrh	r3, [r3, #0]
   1b23a:	4699      	mov	r9, r3
   1b23c:	ab2b      	add	r3, sp, #172	; 0xac
   1b23e:	781b      	ldrb	r3, [r3, #0]
   1b240:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1b242:	2a01      	cmp	r2, #1
   1b244:	d003      	beq.n	1b24e <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
   1b246:	2f00      	cmp	r7, #0
   1b248:	d03f      	beq.n	1b2ca <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b24a:	2a02      	cmp	r2, #2
   1b24c:	d049      	beq.n	1b2e2 <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1b24e:	1e63      	subs	r3, r4, #1
   1b250:	2b1f      	cmp	r3, #31
   1b252:	d900      	bls.n	1b256 <m2m_wifi_connect_sc+0x32>
   1b254:	e073      	b.n	1b33e <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1b256:	464b      	mov	r3, r9
   1b258:	3b01      	subs	r3, #1
   1b25a:	b29b      	uxth	r3, r3
   1b25c:	2b0d      	cmp	r3, #13
   1b25e:	d903      	bls.n	1b268 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1b260:	464b      	mov	r3, r9
   1b262:	2bff      	cmp	r3, #255	; 0xff
   1b264:	d000      	beq.n	1b268 <m2m_wifi_connect_sc+0x44>
   1b266:	e077      	b.n	1b358 <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1b268:	ae07      	add	r6, sp, #28
   1b26a:	0022      	movs	r2, r4
   1b26c:	9905      	ldr	r1, [sp, #20]
   1b26e:	205a      	movs	r0, #90	; 0x5a
   1b270:	ab02      	add	r3, sp, #8
   1b272:	469c      	mov	ip, r3
   1b274:	4460      	add	r0, ip
   1b276:	4b71      	ldr	r3, [pc, #452]	; (1b43c <m2m_wifi_connect_sc+0x218>)
   1b278:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1b27a:	1934      	adds	r4, r6, r4
   1b27c:	3446      	adds	r4, #70	; 0x46
   1b27e:	2300      	movs	r3, #0
   1b280:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1b282:	3344      	adds	r3, #68	; 0x44
   1b284:	464a      	mov	r2, r9
   1b286:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1b288:	4643      	mov	r3, r8
   1b28a:	1e5a      	subs	r2, r3, #1
   1b28c:	4193      	sbcs	r3, r2
   1b28e:	2267      	movs	r2, #103	; 0x67
   1b290:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
   1b292:	2341      	movs	r3, #65	; 0x41
   1b294:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1b296:	2d03      	cmp	r5, #3
   1b298:	d06a      	beq.n	1b370 <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1b29a:	2d02      	cmp	r5, #2
   1b29c:	d100      	bne.n	1b2a0 <m2m_wifi_connect_sc+0x7c>
   1b29e:	e0a2      	b.n	1b3e6 <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1b2a0:	2d04      	cmp	r5, #4
   1b2a2:	d100      	bne.n	1b2a6 <m2m_wifi_connect_sc+0x82>
   1b2a4:	e0b8      	b.n	1b418 <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   1b2a6:	2d01      	cmp	r5, #1
   1b2a8:	d000      	beq.n	1b2ac <m2m_wifi_connect_sc+0x88>
   1b2aa:	e0bb      	b.n	1b424 <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   1b2ac:	2300      	movs	r3, #0
   1b2ae:	9302      	str	r3, [sp, #8]
   1b2b0:	9301      	str	r3, [sp, #4]
   1b2b2:	9300      	str	r3, [sp, #0]
   1b2b4:	336c      	adds	r3, #108	; 0x6c
   1b2b6:	aa07      	add	r2, sp, #28
   1b2b8:	2128      	movs	r1, #40	; 0x28
   1b2ba:	2001      	movs	r0, #1
   1b2bc:	4c60      	ldr	r4, [pc, #384]	; (1b440 <m2m_wifi_connect_sc+0x21c>)
   1b2be:	47a0      	blx	r4

ERR1:
	return ret;
}
   1b2c0:	b023      	add	sp, #140	; 0x8c
   1b2c2:	bc0c      	pop	{r2, r3}
   1b2c4:	4690      	mov	r8, r2
   1b2c6:	4699      	mov	r9, r3
   1b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
   1b2ca:	4a5e      	ldr	r2, [pc, #376]	; (1b444 <m2m_wifi_connect_sc+0x220>)
   1b2cc:	495e      	ldr	r1, [pc, #376]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b2ce:	485f      	ldr	r0, [pc, #380]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b2d0:	4c5f      	ldr	r4, [pc, #380]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b2d2:	47a0      	blx	r4
   1b2d4:	485f      	ldr	r0, [pc, #380]	; (1b454 <m2m_wifi_connect_sc+0x230>)
   1b2d6:	47a0      	blx	r4
   1b2d8:	485f      	ldr	r0, [pc, #380]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b2da:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b2dc:	200c      	movs	r0, #12
   1b2de:	4240      	negs	r0, r0
			goto ERR1;
   1b2e0:	e7ee      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b2e2:	0038      	movs	r0, r7
   1b2e4:	4b5d      	ldr	r3, [pc, #372]	; (1b45c <m2m_wifi_connect_sc+0x238>)
   1b2e6:	4798      	blx	r3
   1b2e8:	2840      	cmp	r0, #64	; 0x40
   1b2ea:	d1b0      	bne.n	1b24e <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1b2ec:	783b      	ldrb	r3, [r7, #0]
   1b2ee:	001a      	movs	r2, r3
   1b2f0:	3a30      	subs	r2, #48	; 0x30
   1b2f2:	2a36      	cmp	r2, #54	; 0x36
   1b2f4:	d817      	bhi.n	1b326 <m2m_wifi_connect_sc+0x102>
   1b2f6:	3a0a      	subs	r2, #10
   1b2f8:	2a06      	cmp	r2, #6
   1b2fa:	d914      	bls.n	1b326 <m2m_wifi_connect_sc+0x102>
   1b2fc:	3b47      	subs	r3, #71	; 0x47
   1b2fe:	2b19      	cmp	r3, #25
   1b300:	d911      	bls.n	1b326 <m2m_wifi_connect_sc+0x102>
   1b302:	1c7a      	adds	r2, r7, #1
   1b304:	0038      	movs	r0, r7
   1b306:	3040      	adds	r0, #64	; 0x40
   1b308:	7813      	ldrb	r3, [r2, #0]
   1b30a:	0019      	movs	r1, r3
   1b30c:	3930      	subs	r1, #48	; 0x30
   1b30e:	2936      	cmp	r1, #54	; 0x36
   1b310:	d809      	bhi.n	1b326 <m2m_wifi_connect_sc+0x102>
   1b312:	390a      	subs	r1, #10
   1b314:	2906      	cmp	r1, #6
   1b316:	d906      	bls.n	1b326 <m2m_wifi_connect_sc+0x102>
   1b318:	3b47      	subs	r3, #71	; 0x47
   1b31a:	2b19      	cmp	r3, #25
   1b31c:	d903      	bls.n	1b326 <m2m_wifi_connect_sc+0x102>
   1b31e:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
   1b320:	4282      	cmp	r2, r0
   1b322:	d1f1      	bne.n	1b308 <m2m_wifi_connect_sc+0xe4>
   1b324:	e793      	b.n	1b24e <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
   1b326:	4a4e      	ldr	r2, [pc, #312]	; (1b460 <m2m_wifi_connect_sc+0x23c>)
   1b328:	4947      	ldr	r1, [pc, #284]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b32a:	4848      	ldr	r0, [pc, #288]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b32c:	4c48      	ldr	r4, [pc, #288]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b32e:	47a0      	blx	r4
   1b330:	484c      	ldr	r0, [pc, #304]	; (1b464 <m2m_wifi_connect_sc+0x240>)
   1b332:	47a0      	blx	r4
   1b334:	4848      	ldr	r0, [pc, #288]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b336:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
   1b338:	200c      	movs	r0, #12
   1b33a:	4240      	negs	r0, r0
					goto ERR1;
   1b33c:	e7c0      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
   1b33e:	228c      	movs	r2, #140	; 0x8c
   1b340:	0092      	lsls	r2, r2, #2
   1b342:	4941      	ldr	r1, [pc, #260]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b344:	4841      	ldr	r0, [pc, #260]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b346:	4c42      	ldr	r4, [pc, #264]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b348:	47a0      	blx	r4
   1b34a:	4847      	ldr	r0, [pc, #284]	; (1b468 <m2m_wifi_connect_sc+0x244>)
   1b34c:	47a0      	blx	r4
   1b34e:	4842      	ldr	r0, [pc, #264]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b350:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b352:	200c      	movs	r0, #12
   1b354:	4240      	negs	r0, r0
		goto ERR1;
   1b356:	e7b3      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
   1b358:	4a44      	ldr	r2, [pc, #272]	; (1b46c <m2m_wifi_connect_sc+0x248>)
   1b35a:	493b      	ldr	r1, [pc, #236]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b35c:	483b      	ldr	r0, [pc, #236]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b35e:	4c3c      	ldr	r4, [pc, #240]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b360:	47a0      	blx	r4
   1b362:	4843      	ldr	r0, [pc, #268]	; (1b470 <m2m_wifi_connect_sc+0x24c>)
   1b364:	47a0      	blx	r4
   1b366:	483c      	ldr	r0, [pc, #240]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b368:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b36a:	200c      	movs	r0, #12
   1b36c:	4240      	negs	r0, r0
			goto ERR1;
   1b36e:	e7a7      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1b370:	783b      	ldrb	r3, [r7, #0]
   1b372:	3b01      	subs	r3, #1
   1b374:	b2db      	uxtb	r3, r3
   1b376:	aa07      	add	r2, sp, #28
   1b378:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1b37a:	2b03      	cmp	r3, #3
   1b37c:	d816      	bhi.n	1b3ac <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1b37e:	787a      	ldrb	r2, [r7, #1]
   1b380:	1e51      	subs	r1, r2, #1
   1b382:	ab07      	add	r3, sp, #28
   1b384:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1b386:	2310      	movs	r3, #16
   1b388:	0011      	movs	r1, r2
   1b38a:	4399      	bics	r1, r3
   1b38c:	290b      	cmp	r1, #11
   1b38e:	d01c      	beq.n	1b3ca <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1b390:	4a38      	ldr	r2, [pc, #224]	; (1b474 <m2m_wifi_connect_sc+0x250>)
   1b392:	492d      	ldr	r1, [pc, #180]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b394:	482d      	ldr	r0, [pc, #180]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b396:	4c2e      	ldr	r4, [pc, #184]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b398:	47a0      	blx	r4
   1b39a:	ab07      	add	r3, sp, #28
   1b39c:	7859      	ldrb	r1, [r3, #1]
   1b39e:	4836      	ldr	r0, [pc, #216]	; (1b478 <m2m_wifi_connect_sc+0x254>)
   1b3a0:	47a0      	blx	r4
   1b3a2:	482d      	ldr	r0, [pc, #180]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b3a4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b3a6:	200c      	movs	r0, #12
   1b3a8:	4240      	negs	r0, r0
			goto ERR1;
   1b3aa:	e789      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1b3ac:	2294      	movs	r2, #148	; 0x94
   1b3ae:	0092      	lsls	r2, r2, #2
   1b3b0:	4925      	ldr	r1, [pc, #148]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b3b2:	4826      	ldr	r0, [pc, #152]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b3b4:	4c26      	ldr	r4, [pc, #152]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b3b6:	47a0      	blx	r4
   1b3b8:	ab07      	add	r3, sp, #28
   1b3ba:	7819      	ldrb	r1, [r3, #0]
   1b3bc:	482f      	ldr	r0, [pc, #188]	; (1b47c <m2m_wifi_connect_sc+0x258>)
   1b3be:	47a0      	blx	r4
   1b3c0:	4825      	ldr	r0, [pc, #148]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b3c2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b3c4:	200c      	movs	r0, #12
   1b3c6:	4240      	negs	r0, r0
			goto ERR1;
   1b3c8:	e77a      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1b3ca:	1cb9      	adds	r1, r7, #2
   1b3cc:	2016      	movs	r0, #22
   1b3ce:	ab02      	add	r3, sp, #8
   1b3d0:	469c      	mov	ip, r3
   1b3d2:	4460      	add	r0, ip
   1b3d4:	4b19      	ldr	r3, [pc, #100]	; (1b43c <m2m_wifi_connect_sc+0x218>)
   1b3d6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1b3d8:	787b      	ldrb	r3, [r7, #1]
   1b3da:	aa07      	add	r2, sp, #28
   1b3dc:	4694      	mov	ip, r2
   1b3de:	4463      	add	r3, ip
   1b3e0:	2200      	movs	r2, #0
   1b3e2:	709a      	strb	r2, [r3, #2]
   1b3e4:	e762      	b.n	1b2ac <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1b3e6:	0038      	movs	r0, r7
   1b3e8:	4b1c      	ldr	r3, [pc, #112]	; (1b45c <m2m_wifi_connect_sc+0x238>)
   1b3ea:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1b3ec:	1e43      	subs	r3, r0, #1
   1b3ee:	b29b      	uxth	r3, r3
   1b3f0:	2b3f      	cmp	r3, #63	; 0x3f
   1b3f2:	d805      	bhi.n	1b400 <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1b3f4:	1c42      	adds	r2, r0, #1
   1b3f6:	0039      	movs	r1, r7
   1b3f8:	a807      	add	r0, sp, #28
   1b3fa:	4b10      	ldr	r3, [pc, #64]	; (1b43c <m2m_wifi_connect_sc+0x218>)
   1b3fc:	4798      	blx	r3
   1b3fe:	e755      	b.n	1b2ac <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
   1b400:	4a1f      	ldr	r2, [pc, #124]	; (1b480 <m2m_wifi_connect_sc+0x25c>)
   1b402:	4911      	ldr	r1, [pc, #68]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b404:	4811      	ldr	r0, [pc, #68]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b406:	4c12      	ldr	r4, [pc, #72]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b408:	47a0      	blx	r4
   1b40a:	481e      	ldr	r0, [pc, #120]	; (1b484 <m2m_wifi_connect_sc+0x260>)
   1b40c:	47a0      	blx	r4
   1b40e:	4812      	ldr	r0, [pc, #72]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b410:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b412:	200c      	movs	r0, #12
   1b414:	4240      	negs	r0, r0
			goto ERR1;
   1b416:	e753      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1b418:	223e      	movs	r2, #62	; 0x3e
   1b41a:	0039      	movs	r1, r7
   1b41c:	a807      	add	r0, sp, #28
   1b41e:	4b07      	ldr	r3, [pc, #28]	; (1b43c <m2m_wifi_connect_sc+0x218>)
   1b420:	4798      	blx	r3
   1b422:	e743      	b.n	1b2ac <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
   1b424:	4a18      	ldr	r2, [pc, #96]	; (1b488 <m2m_wifi_connect_sc+0x264>)
   1b426:	4908      	ldr	r1, [pc, #32]	; (1b448 <m2m_wifi_connect_sc+0x224>)
   1b428:	4808      	ldr	r0, [pc, #32]	; (1b44c <m2m_wifi_connect_sc+0x228>)
   1b42a:	4c09      	ldr	r4, [pc, #36]	; (1b450 <m2m_wifi_connect_sc+0x22c>)
   1b42c:	47a0      	blx	r4
   1b42e:	4817      	ldr	r0, [pc, #92]	; (1b48c <m2m_wifi_connect_sc+0x268>)
   1b430:	47a0      	blx	r4
   1b432:	4809      	ldr	r0, [pc, #36]	; (1b458 <m2m_wifi_connect_sc+0x234>)
   1b434:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b436:	200c      	movs	r0, #12
   1b438:	4240      	negs	r0, r0
		goto ERR1;
   1b43a:	e741      	b.n	1b2c0 <m2m_wifi_connect_sc+0x9c>
   1b43c:	0001a5ad 	.word	0x0001a5ad
   1b440:	0001a6d5 	.word	0x0001a6d5
   1b444:	0000021a 	.word	0x0000021a
   1b448:	000299c0 	.word	0x000299c0
   1b44c:	00029628 	.word	0x00029628
   1b450:	000190ad 	.word	0x000190ad
   1b454:	00029a08 	.word	0x00029a08
   1b458:	00029650 	.word	0x00029650
   1b45c:	0001a5d1 	.word	0x0001a5d1
   1b460:	00000226 	.word	0x00000226
   1b464:	00029a1c 	.word	0x00029a1c
   1b468:	00029a2c 	.word	0x00029a2c
   1b46c:	00000239 	.word	0x00000239
   1b470:	00029a40 	.word	0x00029a40
   1b474:	00000257 	.word	0x00000257
   1b478:	00029a68 	.word	0x00029a68
   1b47c:	00029a4c 	.word	0x00029a4c
   1b480:	00000266 	.word	0x00000266
   1b484:	00029a84 	.word	0x00029a84
   1b488:	00000276 	.word	0x00000276
   1b48c:	00029aa0 	.word	0x00029aa0

0001b490 <m2m_wifi_connect>:
{
   1b490:	b530      	push	{r4, r5, lr}
   1b492:	b083      	sub	sp, #12
   1b494:	ac06      	add	r4, sp, #24
   1b496:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1b498:	2500      	movs	r5, #0
   1b49a:	9501      	str	r5, [sp, #4]
   1b49c:	9400      	str	r4, [sp, #0]
   1b49e:	4c02      	ldr	r4, [pc, #8]	; (1b4a8 <m2m_wifi_connect+0x18>)
   1b4a0:	47a0      	blx	r4
}
   1b4a2:	b003      	add	sp, #12
   1b4a4:	bd30      	pop	{r4, r5, pc}
   1b4a6:	46c0      	nop			; (mov r8, r8)
   1b4a8:	0001b225 	.word	0x0001b225

0001b4ac <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
   1b4ac:	2000      	movs	r0, #0
   1b4ae:	4770      	bx	lr

0001b4b0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   1b4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4b2:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   1b4b4:	2580      	movs	r5, #128	; 0x80
   1b4b6:	006d      	lsls	r5, r5, #1
   1b4b8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b4ba:	24a5      	movs	r4, #165	; 0xa5
   1b4bc:	0164      	lsls	r4, r4, #5
   1b4be:	4f08      	ldr	r7, [pc, #32]	; (1b4e0 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b4c0:	4e08      	ldr	r6, [pc, #32]	; (1b4e4 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b4c2:	0029      	movs	r1, r5
   1b4c4:	0020      	movs	r0, r4
   1b4c6:	47b8      	blx	r7
			uint32 reg = 0;
   1b4c8:	2300      	movs	r3, #0
   1b4ca:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b4cc:	a901      	add	r1, sp, #4
   1b4ce:	0020      	movs	r0, r4
   1b4d0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
   1b4d2:	2800      	cmp	r0, #0
   1b4d4:	d1f5      	bne.n	1b4c2 <chip_apply_conf+0x12>
				if(reg == val32)
   1b4d6:	9b01      	ldr	r3, [sp, #4]
   1b4d8:	429d      	cmp	r5, r3
   1b4da:	d1f2      	bne.n	1b4c2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
   1b4dc:	b003      	add	sp, #12
   1b4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b4e0:	0001b989 	.word	0x0001b989
   1b4e4:	0001b97d 	.word	0x0001b97d

0001b4e8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   1b4e8:	b500      	push	{lr}
   1b4ea:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b4ec:	2300      	movs	r3, #0
   1b4ee:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   1b4f0:	a901      	add	r1, sp, #4
   1b4f2:	4811      	ldr	r0, [pc, #68]	; (1b538 <enable_interrupts+0x50>)
   1b4f4:	4b11      	ldr	r3, [pc, #68]	; (1b53c <enable_interrupts+0x54>)
   1b4f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b4f8:	2800      	cmp	r0, #0
   1b4fa:	d001      	beq.n	1b500 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
   1b4fc:	b003      	add	sp, #12
   1b4fe:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
   1b500:	2180      	movs	r1, #128	; 0x80
   1b502:	0049      	lsls	r1, r1, #1
   1b504:	9b01      	ldr	r3, [sp, #4]
   1b506:	4319      	orrs	r1, r3
   1b508:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   1b50a:	480b      	ldr	r0, [pc, #44]	; (1b538 <enable_interrupts+0x50>)
   1b50c:	4b0c      	ldr	r3, [pc, #48]	; (1b540 <enable_interrupts+0x58>)
   1b50e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b510:	2800      	cmp	r0, #0
   1b512:	d1f3      	bne.n	1b4fc <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   1b514:	a901      	add	r1, sp, #4
   1b516:	20d0      	movs	r0, #208	; 0xd0
   1b518:	0140      	lsls	r0, r0, #5
   1b51a:	4b08      	ldr	r3, [pc, #32]	; (1b53c <enable_interrupts+0x54>)
   1b51c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b51e:	2800      	cmp	r0, #0
   1b520:	d1ec      	bne.n	1b4fc <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
   1b522:	2180      	movs	r1, #128	; 0x80
   1b524:	0249      	lsls	r1, r1, #9
   1b526:	9b01      	ldr	r3, [sp, #4]
   1b528:	4319      	orrs	r1, r3
   1b52a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   1b52c:	20d0      	movs	r0, #208	; 0xd0
   1b52e:	0140      	lsls	r0, r0, #5
   1b530:	4b03      	ldr	r3, [pc, #12]	; (1b540 <enable_interrupts+0x58>)
   1b532:	4798      	blx	r3
   1b534:	e7e2      	b.n	1b4fc <enable_interrupts+0x14>
   1b536:	46c0      	nop			; (mov r8, r8)
   1b538:	00001408 	.word	0x00001408
   1b53c:	0001b97d 	.word	0x0001b97d
   1b540:	0001b989 	.word	0x0001b989

0001b544 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   1b544:	b510      	push	{r4, lr}
   1b546:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
   1b548:	4b28      	ldr	r3, [pc, #160]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b54a:	681c      	ldr	r4, [r3, #0]
   1b54c:	2c00      	cmp	r4, #0
   1b54e:	d004      	beq.n	1b55a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
   1b550:	4b26      	ldr	r3, [pc, #152]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b552:	681c      	ldr	r4, [r3, #0]
}
   1b554:	0020      	movs	r0, r4
   1b556:	b002      	add	sp, #8
   1b558:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   1b55a:	0019      	movs	r1, r3
   1b55c:	2080      	movs	r0, #128	; 0x80
   1b55e:	0140      	lsls	r0, r0, #5
   1b560:	4b23      	ldr	r3, [pc, #140]	; (1b5f0 <nmi_get_chipid+0xac>)
   1b562:	4798      	blx	r3
   1b564:	2800      	cmp	r0, #0
   1b566:	d003      	beq.n	1b570 <nmi_get_chipid+0x2c>
			chipid = 0;
   1b568:	2200      	movs	r2, #0
   1b56a:	4b20      	ldr	r3, [pc, #128]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b56c:	601a      	str	r2, [r3, #0]
			return 0;
   1b56e:	e7f1      	b.n	1b554 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1b570:	a901      	add	r1, sp, #4
   1b572:	4820      	ldr	r0, [pc, #128]	; (1b5f4 <nmi_get_chipid+0xb0>)
   1b574:	4b1e      	ldr	r3, [pc, #120]	; (1b5f0 <nmi_get_chipid+0xac>)
   1b576:	4798      	blx	r3
   1b578:	2800      	cmp	r0, #0
   1b57a:	d003      	beq.n	1b584 <nmi_get_chipid+0x40>
			chipid = 0;
   1b57c:	2200      	movs	r2, #0
   1b57e:	4b1b      	ldr	r3, [pc, #108]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b580:	601a      	str	r2, [r3, #0]
			return 0;
   1b582:	e7e7      	b.n	1b554 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
   1b584:	4b19      	ldr	r3, [pc, #100]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b586:	681b      	ldr	r3, [r3, #0]
   1b588:	4a1b      	ldr	r2, [pc, #108]	; (1b5f8 <nmi_get_chipid+0xb4>)
   1b58a:	4293      	cmp	r3, r2
   1b58c:	d00e      	beq.n	1b5ac <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
   1b58e:	4a1b      	ldr	r2, [pc, #108]	; (1b5fc <nmi_get_chipid+0xb8>)
   1b590:	4293      	cmp	r3, r2
   1b592:	d012      	beq.n	1b5ba <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
   1b594:	4a1a      	ldr	r2, [pc, #104]	; (1b600 <nmi_get_chipid+0xbc>)
   1b596:	4293      	cmp	r3, r2
   1b598:	d01c      	beq.n	1b5d4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
   1b59a:	4914      	ldr	r1, [pc, #80]	; (1b5ec <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
   1b59c:	4a19      	ldr	r2, [pc, #100]	; (1b604 <nmi_get_chipid+0xc0>)
   1b59e:	680b      	ldr	r3, [r1, #0]
   1b5a0:	401a      	ands	r2, r3
		chipid |= 0x050000;
   1b5a2:	23a0      	movs	r3, #160	; 0xa0
   1b5a4:	02db      	lsls	r3, r3, #11
   1b5a6:	4313      	orrs	r3, r2
   1b5a8:	600b      	str	r3, [r1, #0]
   1b5aa:	e7d1      	b.n	1b550 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
   1b5ac:	9b01      	ldr	r3, [sp, #4]
   1b5ae:	2b01      	cmp	r3, #1
   1b5b0:	d0f3      	beq.n	1b59a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
   1b5b2:	4a15      	ldr	r2, [pc, #84]	; (1b608 <nmi_get_chipid+0xc4>)
   1b5b4:	4b0d      	ldr	r3, [pc, #52]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b5b6:	601a      	str	r2, [r3, #0]
   1b5b8:	e7ef      	b.n	1b59a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
   1b5ba:	9b01      	ldr	r3, [sp, #4]
   1b5bc:	2b03      	cmp	r3, #3
   1b5be:	d0ec      	beq.n	1b59a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
   1b5c0:	2b04      	cmp	r3, #4
   1b5c2:	d003      	beq.n	1b5cc <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
   1b5c4:	4a11      	ldr	r2, [pc, #68]	; (1b60c <nmi_get_chipid+0xc8>)
   1b5c6:	4b09      	ldr	r3, [pc, #36]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b5c8:	601a      	str	r2, [r3, #0]
   1b5ca:	e7e6      	b.n	1b59a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
   1b5cc:	4a10      	ldr	r2, [pc, #64]	; (1b610 <nmi_get_chipid+0xcc>)
   1b5ce:	4b07      	ldr	r3, [pc, #28]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b5d0:	601a      	str	r2, [r3, #0]
   1b5d2:	e7e2      	b.n	1b59a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   1b5d4:	4905      	ldr	r1, [pc, #20]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b5d6:	20ec      	movs	r0, #236	; 0xec
   1b5d8:	0380      	lsls	r0, r0, #14
   1b5da:	4b05      	ldr	r3, [pc, #20]	; (1b5f0 <nmi_get_chipid+0xac>)
   1b5dc:	4798      	blx	r3
   1b5de:	2800      	cmp	r0, #0
   1b5e0:	d0db      	beq.n	1b59a <nmi_get_chipid+0x56>
			chipid = 0;
   1b5e2:	2200      	movs	r2, #0
   1b5e4:	4b01      	ldr	r3, [pc, #4]	; (1b5ec <nmi_get_chipid+0xa8>)
   1b5e6:	601a      	str	r2, [r3, #0]
			return 0;
   1b5e8:	e7b4      	b.n	1b554 <nmi_get_chipid+0x10>
   1b5ea:	46c0      	nop			; (mov r8, r8)
   1b5ec:	20003ce8 	.word	0x20003ce8
   1b5f0:	0001b97d 	.word	0x0001b97d
   1b5f4:	000013f4 	.word	0x000013f4
   1b5f8:	001002a0 	.word	0x001002a0
   1b5fc:	001002b0 	.word	0x001002b0
   1b600:	001000f0 	.word	0x001000f0
   1b604:	fff0ffff 	.word	0xfff0ffff
   1b608:	001002a1 	.word	0x001002a1
   1b60c:	001002b2 	.word	0x001002b2
   1b610:	001002b1 	.word	0x001002b1

0001b614 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   1b614:	b530      	push	{r4, r5, lr}
   1b616:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b618:	4c16      	ldr	r4, [pc, #88]	; (1b674 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
   1b61a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b61c:	a901      	add	r1, sp, #4
   1b61e:	2010      	movs	r0, #16
   1b620:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
   1b622:	2800      	cmp	r0, #0
   1b624:	d11c      	bne.n	1b660 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
   1b626:	9b01      	ldr	r3, [sp, #4]
   1b628:	422b      	tst	r3, r5
   1b62a:	d1f7      	bne.n	1b61c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b62c:	a901      	add	r1, sp, #4
   1b62e:	3001      	adds	r0, #1
   1b630:	4b10      	ldr	r3, [pc, #64]	; (1b674 <chip_sleep+0x60>)
   1b632:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b634:	2800      	cmp	r0, #0
   1b636:	d113      	bne.n	1b660 <chip_sleep+0x4c>
	if(reg & NBIT1)
   1b638:	9901      	ldr	r1, [sp, #4]
   1b63a:	078b      	lsls	r3, r1, #30
   1b63c:	d507      	bpl.n	1b64e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
   1b63e:	2302      	movs	r3, #2
   1b640:	4399      	bics	r1, r3
   1b642:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   1b644:	3001      	adds	r0, #1
   1b646:	4b0c      	ldr	r3, [pc, #48]	; (1b678 <chip_sleep+0x64>)
   1b648:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
   1b64a:	2800      	cmp	r0, #0
   1b64c:	d108      	bne.n	1b660 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b64e:	a901      	add	r1, sp, #4
   1b650:	200b      	movs	r0, #11
   1b652:	4b08      	ldr	r3, [pc, #32]	; (1b674 <chip_sleep+0x60>)
   1b654:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b656:	2800      	cmp	r0, #0
   1b658:	d102      	bne.n	1b660 <chip_sleep+0x4c>
	if(reg & NBIT0)
   1b65a:	9901      	ldr	r1, [sp, #4]
   1b65c:	07cb      	lsls	r3, r1, #31
   1b65e:	d401      	bmi.n	1b664 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
   1b660:	b003      	add	sp, #12
   1b662:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
   1b664:	2301      	movs	r3, #1
   1b666:	4399      	bics	r1, r3
   1b668:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   1b66a:	300b      	adds	r0, #11
   1b66c:	4b02      	ldr	r3, [pc, #8]	; (1b678 <chip_sleep+0x64>)
   1b66e:	4798      	blx	r3
   1b670:	e7f6      	b.n	1b660 <chip_sleep+0x4c>
   1b672:	46c0      	nop			; (mov r8, r8)
   1b674:	0001b97d 	.word	0x0001b97d
   1b678:	0001b989 	.word	0x0001b989

0001b67c <chip_wake>:
sint8 chip_wake(void)
{
   1b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b67e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   1b680:	2300      	movs	r3, #0
   1b682:	9301      	str	r3, [sp, #4]
   1b684:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b686:	a901      	add	r1, sp, #4
   1b688:	200b      	movs	r0, #11
   1b68a:	4b27      	ldr	r3, [pc, #156]	; (1b728 <chip_wake+0xac>)
   1b68c:	4798      	blx	r3
   1b68e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b690:	d12e      	bne.n	1b6f0 <chip_wake+0x74>
	
	if(!(reg & NBIT0))
   1b692:	9901      	ldr	r1, [sp, #4]
   1b694:	07cb      	lsls	r3, r1, #31
   1b696:	d406      	bmi.n	1b6a6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   1b698:	2301      	movs	r3, #1
   1b69a:	4319      	orrs	r1, r3
   1b69c:	200b      	movs	r0, #11
   1b69e:	4b23      	ldr	r3, [pc, #140]	; (1b72c <chip_wake+0xb0>)
   1b6a0:	4798      	blx	r3
   1b6a2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b6a4:	d124      	bne.n	1b6f0 <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b6a6:	a901      	add	r1, sp, #4
   1b6a8:	2001      	movs	r0, #1
   1b6aa:	4b1f      	ldr	r3, [pc, #124]	; (1b728 <chip_wake+0xac>)
   1b6ac:	4798      	blx	r3
   1b6ae:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b6b0:	d11e      	bne.n	1b6f0 <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   1b6b2:	9901      	ldr	r1, [sp, #4]
   1b6b4:	078b      	lsls	r3, r1, #30
   1b6b6:	d51e      	bpl.n	1b6f6 <chip_wake+0x7a>
{
   1b6b8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b6ba:	4f1b      	ldr	r7, [pc, #108]	; (1b728 <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
   1b6bc:	4e1c      	ldr	r6, [pc, #112]	; (1b730 <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b6be:	4669      	mov	r1, sp
   1b6c0:	200f      	movs	r0, #15
   1b6c2:	47b8      	blx	r7
   1b6c4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
   1b6c6:	d11e      	bne.n	1b706 <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
   1b6c8:	9b00      	ldr	r3, [sp, #0]
   1b6ca:	075b      	lsls	r3, r3, #29
   1b6cc:	d428      	bmi.n	1b720 <chip_wake+0xa4>
		nm_bsp_sleep(2);
   1b6ce:	2002      	movs	r0, #2
   1b6d0:	47b0      	blx	r6
   1b6d2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
   1b6d4:	2d00      	cmp	r5, #0
   1b6d6:	d1f2      	bne.n	1b6be <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
   1b6d8:	22ad      	movs	r2, #173	; 0xad
   1b6da:	0052      	lsls	r2, r2, #1
   1b6dc:	4915      	ldr	r1, [pc, #84]	; (1b734 <chip_wake+0xb8>)
   1b6de:	4816      	ldr	r0, [pc, #88]	; (1b738 <chip_wake+0xbc>)
   1b6e0:	4c16      	ldr	r4, [pc, #88]	; (1b73c <chip_wake+0xc0>)
   1b6e2:	47a0      	blx	r4
   1b6e4:	4816      	ldr	r0, [pc, #88]	; (1b740 <chip_wake+0xc4>)
   1b6e6:	47a0      	blx	r4
   1b6e8:	4816      	ldr	r0, [pc, #88]	; (1b744 <chip_wake+0xc8>)
   1b6ea:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
   1b6ec:	2404      	movs	r4, #4
   1b6ee:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
   1b6f0:	0020      	movs	r0, r4
   1b6f2:	b003      	add	sp, #12
   1b6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   1b6f6:	2302      	movs	r3, #2
   1b6f8:	4319      	orrs	r1, r3
   1b6fa:	2001      	movs	r0, #1
   1b6fc:	4b0b      	ldr	r3, [pc, #44]	; (1b72c <chip_wake+0xb0>)
   1b6fe:	4798      	blx	r3
   1b700:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   1b702:	d0d9      	beq.n	1b6b8 <chip_wake+0x3c>
   1b704:	e7f4      	b.n	1b6f0 <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   1b706:	22a8      	movs	r2, #168	; 0xa8
   1b708:	0052      	lsls	r2, r2, #1
   1b70a:	490a      	ldr	r1, [pc, #40]	; (1b734 <chip_wake+0xb8>)
   1b70c:	480a      	ldr	r0, [pc, #40]	; (1b738 <chip_wake+0xbc>)
   1b70e:	4d0b      	ldr	r5, [pc, #44]	; (1b73c <chip_wake+0xc0>)
   1b710:	47a8      	blx	r5
   1b712:	9a00      	ldr	r2, [sp, #0]
   1b714:	0021      	movs	r1, r4
   1b716:	480c      	ldr	r0, [pc, #48]	; (1b748 <chip_wake+0xcc>)
   1b718:	47a8      	blx	r5
   1b71a:	480a      	ldr	r0, [pc, #40]	; (1b744 <chip_wake+0xc8>)
   1b71c:	47a8      	blx	r5
			goto _WAKE_EXIT;
   1b71e:	e7e7      	b.n	1b6f0 <chip_wake+0x74>
	nm_bus_reset();
   1b720:	4b0a      	ldr	r3, [pc, #40]	; (1b74c <chip_wake+0xd0>)
   1b722:	4798      	blx	r3
   1b724:	e7e4      	b.n	1b6f0 <chip_wake+0x74>
   1b726:	46c0      	nop			; (mov r8, r8)
   1b728:	0001b97d 	.word	0x0001b97d
   1b72c:	0001b989 	.word	0x0001b989
   1b730:	0001a271 	.word	0x0001a271
   1b734:	00029b80 	.word	0x00029b80
   1b738:	00029628 	.word	0x00029628
   1b73c:	000190ad 	.word	0x000190ad
   1b740:	00029bcc 	.word	0x00029bcc
   1b744:	00029650 	.word	0x00029650
   1b748:	00029bb4 	.word	0x00029bb4
   1b74c:	0001b965 	.word	0x0001b965

0001b750 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   1b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b752:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b754:	4d2c      	ldr	r5, [pc, #176]	; (1b808 <wait_for_bootrom+0xb8>)
   1b756:	4c2d      	ldr	r4, [pc, #180]	; (1b80c <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b758:	4e2d      	ldr	r6, [pc, #180]	; (1b810 <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b75a:	0028      	movs	r0, r5
   1b75c:	47a0      	blx	r4
		if (reg & 0x80000000) {
   1b75e:	2800      	cmp	r0, #0
   1b760:	db02      	blt.n	1b768 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b762:	2001      	movs	r0, #1
   1b764:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b766:	e7f8      	b.n	1b75a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   1b768:	482a      	ldr	r0, [pc, #168]	; (1b814 <wait_for_bootrom+0xc4>)
   1b76a:	4b28      	ldr	r3, [pc, #160]	; (1b80c <wait_for_bootrom+0xbc>)
   1b76c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   1b76e:	07c3      	lsls	r3, r0, #31
   1b770:	d409      	bmi.n	1b786 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
   1b772:	4e27      	ldr	r6, [pc, #156]	; (1b810 <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
   1b774:	4c28      	ldr	r4, [pc, #160]	; (1b818 <wait_for_bootrom+0xc8>)
   1b776:	4d25      	ldr	r5, [pc, #148]	; (1b80c <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
   1b778:	2001      	movs	r0, #1
   1b77a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
   1b77c:	0020      	movs	r0, r4
   1b77e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
   1b780:	4b26      	ldr	r3, [pc, #152]	; (1b81c <wait_for_bootrom+0xcc>)
   1b782:	4298      	cmp	r0, r3
   1b784:	d1f8      	bne.n	1b778 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   1b786:	2f02      	cmp	r7, #2
   1b788:	d020      	beq.n	1b7cc <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   1b78a:	2f03      	cmp	r7, #3
   1b78c:	d028      	beq.n	1b7e0 <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   1b78e:	2f04      	cmp	r7, #4
   1b790:	d02f      	beq.n	1b7f2 <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b792:	4923      	ldr	r1, [pc, #140]	; (1b820 <wait_for_bootrom+0xd0>)
   1b794:	4823      	ldr	r0, [pc, #140]	; (1b824 <wait_for_bootrom+0xd4>)
   1b796:	4b24      	ldr	r3, [pc, #144]	; (1b828 <wait_for_bootrom+0xd8>)
   1b798:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
   1b79a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   1b79c:	4b23      	ldr	r3, [pc, #140]	; (1b82c <wait_for_bootrom+0xdc>)
   1b79e:	4798      	blx	r3
   1b7a0:	0500      	lsls	r0, r0, #20
   1b7a2:	0d00      	lsrs	r0, r0, #20
   1b7a4:	4b22      	ldr	r3, [pc, #136]	; (1b830 <wait_for_bootrom+0xe0>)
   1b7a6:	4298      	cmp	r0, r3
   1b7a8:	d829      	bhi.n	1b7fe <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
   1b7aa:	0020      	movs	r0, r4
   1b7ac:	4b21      	ldr	r3, [pc, #132]	; (1b834 <wait_for_bootrom+0xe4>)
   1b7ae:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   1b7b0:	4821      	ldr	r0, [pc, #132]	; (1b838 <wait_for_bootrom+0xe8>)
   1b7b2:	4c22      	ldr	r4, [pc, #136]	; (1b83c <wait_for_bootrom+0xec>)
   1b7b4:	47a0      	blx	r4
   1b7b6:	491a      	ldr	r1, [pc, #104]	; (1b820 <wait_for_bootrom+0xd0>)
   1b7b8:	4821      	ldr	r0, [pc, #132]	; (1b840 <wait_for_bootrom+0xf0>)
   1b7ba:	47a0      	blx	r4
   1b7bc:	4821      	ldr	r0, [pc, #132]	; (1b844 <wait_for_bootrom+0xf4>)
   1b7be:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   1b7c0:	4921      	ldr	r1, [pc, #132]	; (1b848 <wait_for_bootrom+0xf8>)
   1b7c2:	4815      	ldr	r0, [pc, #84]	; (1b818 <wait_for_bootrom+0xc8>)
   1b7c4:	4b18      	ldr	r3, [pc, #96]	; (1b828 <wait_for_bootrom+0xd8>)
   1b7c6:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
   1b7c8:	2000      	movs	r0, #0
   1b7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b7cc:	491f      	ldr	r1, [pc, #124]	; (1b84c <wait_for_bootrom+0xfc>)
   1b7ce:	4820      	ldr	r0, [pc, #128]	; (1b850 <wait_for_bootrom+0x100>)
   1b7d0:	4c15      	ldr	r4, [pc, #84]	; (1b828 <wait_for_bootrom+0xd8>)
   1b7d2:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
   1b7d4:	2180      	movs	r1, #128	; 0x80
   1b7d6:	0349      	lsls	r1, r1, #13
   1b7d8:	4812      	ldr	r0, [pc, #72]	; (1b824 <wait_for_bootrom+0xd4>)
   1b7da:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b7dc:	2400      	movs	r4, #0
   1b7de:	e7dd      	b.n	1b79c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b7e0:	491a      	ldr	r1, [pc, #104]	; (1b84c <wait_for_bootrom+0xfc>)
   1b7e2:	481b      	ldr	r0, [pc, #108]	; (1b850 <wait_for_bootrom+0x100>)
   1b7e4:	4c10      	ldr	r4, [pc, #64]	; (1b828 <wait_for_bootrom+0xd8>)
   1b7e6:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
   1b7e8:	2100      	movs	r1, #0
   1b7ea:	480e      	ldr	r0, [pc, #56]	; (1b824 <wait_for_bootrom+0xd4>)
   1b7ec:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b7ee:	2400      	movs	r4, #0
   1b7f0:	e7d4      	b.n	1b79c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b7f2:	490b      	ldr	r1, [pc, #44]	; (1b820 <wait_for_bootrom+0xd0>)
   1b7f4:	480b      	ldr	r0, [pc, #44]	; (1b824 <wait_for_bootrom+0xd4>)
   1b7f6:	4b0c      	ldr	r3, [pc, #48]	; (1b828 <wait_for_bootrom+0xd8>)
   1b7f8:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   1b7fa:	2480      	movs	r4, #128	; 0x80
   1b7fc:	e7ce      	b.n	1b79c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   1b7fe:	2002      	movs	r0, #2
   1b800:	4320      	orrs	r0, r4
   1b802:	4b0c      	ldr	r3, [pc, #48]	; (1b834 <wait_for_bootrom+0xe4>)
   1b804:	4798      	blx	r3
   1b806:	e7d3      	b.n	1b7b0 <wait_for_bootrom+0x60>
   1b808:	00001014 	.word	0x00001014
   1b80c:	0001b971 	.word	0x0001b971
   1b810:	0001a271 	.word	0x0001a271
   1b814:	000207bc 	.word	0x000207bc
   1b818:	000c000c 	.word	0x000c000c
   1b81c:	10add09e 	.word	0x10add09e
   1b820:	13301354 	.word	0x13301354
   1b824:	0000108c 	.word	0x0000108c
   1b828:	0001b989 	.word	0x0001b989
   1b82c:	0001b545 	.word	0x0001b545
   1b830:	0000039f 	.word	0x0000039f
   1b834:	0001b4b1 	.word	0x0001b4b1
   1b838:	00029964 	.word	0x00029964
   1b83c:	000190ad 	.word	0x000190ad
   1b840:	00029be8 	.word	0x00029be8
   1b844:	00029650 	.word	0x00029650
   1b848:	ef522f61 	.word	0xef522f61
   1b84c:	3c1cd57d 	.word	0x3c1cd57d
   1b850:	000207ac 	.word	0x000207ac

0001b854 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   1b854:	b570      	push	{r4, r5, r6, lr}
   1b856:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
   1b858:	4b15      	ldr	r3, [pc, #84]	; (1b8b0 <wait_for_firmware_start+0x5c>)
   1b85a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   1b85c:	4b15      	ldr	r3, [pc, #84]	; (1b8b4 <wait_for_firmware_start+0x60>)
   1b85e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   1b860:	3802      	subs	r0, #2
   1b862:	2801      	cmp	r0, #1
   1b864:	d911      	bls.n	1b88a <wait_for_firmware_start+0x36>
{
   1b866:	2401      	movs	r4, #1
   1b868:	4264      	negs	r4, r4
   1b86a:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b86c:	4e12      	ldr	r6, [pc, #72]	; (1b8b8 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   1b86e:	4d13      	ldr	r5, [pc, #76]	; (1b8bc <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
   1b870:	9b00      	ldr	r3, [sp, #0]
   1b872:	4298      	cmp	r0, r3
   1b874:	d00e      	beq.n	1b894 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b876:	2002      	movs	r0, #2
   1b878:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
   1b87a:	9801      	ldr	r0, [sp, #4]
   1b87c:	47a8      	blx	r5
   1b87e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
   1b880:	2c00      	cmp	r4, #0
   1b882:	d1f5      	bne.n	1b870 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   1b884:	2005      	movs	r0, #5
   1b886:	4240      	negs	r0, r0
   1b888:	e009      	b.n	1b89e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
   1b88a:	4b0d      	ldr	r3, [pc, #52]	; (1b8c0 <wait_for_firmware_start+0x6c>)
   1b88c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   1b88e:	4b0d      	ldr	r3, [pc, #52]	; (1b8c4 <wait_for_firmware_start+0x70>)
   1b890:	9300      	str	r3, [sp, #0]
   1b892:	e7e8      	b.n	1b866 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b894:	9a00      	ldr	r2, [sp, #0]
   1b896:	4b07      	ldr	r3, [pc, #28]	; (1b8b4 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
   1b898:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b89a:	429a      	cmp	r2, r3
   1b89c:	d001      	beq.n	1b8a2 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
   1b89e:	b002      	add	sp, #8
   1b8a0:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
   1b8a2:	2100      	movs	r1, #0
   1b8a4:	4802      	ldr	r0, [pc, #8]	; (1b8b0 <wait_for_firmware_start+0x5c>)
   1b8a6:	4b08      	ldr	r3, [pc, #32]	; (1b8c8 <wait_for_firmware_start+0x74>)
   1b8a8:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
   1b8aa:	2000      	movs	r0, #0
   1b8ac:	e7f7      	b.n	1b89e <wait_for_firmware_start+0x4a>
   1b8ae:	46c0      	nop			; (mov r8, r8)
   1b8b0:	0000108c 	.word	0x0000108c
   1b8b4:	02532636 	.word	0x02532636
   1b8b8:	0001a271 	.word	0x0001a271
   1b8bc:	0001b971 	.word	0x0001b971
   1b8c0:	000207ac 	.word	0x000207ac
   1b8c4:	d75dc1c3 	.word	0xd75dc1c3
   1b8c8:	0001b989 	.word	0x0001b989

0001b8cc <chip_deinit>:

sint8 chip_deinit(void)
{
   1b8cc:	b530      	push	{r4, r5, lr}
   1b8ce:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b8d0:	2300      	movs	r3, #0
   1b8d2:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   1b8d4:	a901      	add	r1, sp, #4
   1b8d6:	20a0      	movs	r0, #160	; 0xa0
   1b8d8:	0140      	lsls	r0, r0, #5
   1b8da:	4b12      	ldr	r3, [pc, #72]	; (1b924 <chip_deinit+0x58>)
   1b8dc:	4798      	blx	r3
   1b8de:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b8e0:	d113      	bne.n	1b90a <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
   1b8e2:	4911      	ldr	r1, [pc, #68]	; (1b928 <chip_deinit+0x5c>)
   1b8e4:	9b01      	ldr	r3, [sp, #4]
   1b8e6:	4019      	ands	r1, r3
   1b8e8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   1b8ea:	20a0      	movs	r0, #160	; 0xa0
   1b8ec:	0140      	lsls	r0, r0, #5
   1b8ee:	4b0f      	ldr	r3, [pc, #60]	; (1b92c <chip_deinit+0x60>)
   1b8f0:	4798      	blx	r3
   1b8f2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b8f4:	d012      	beq.n	1b91c <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b8f6:	4a0e      	ldr	r2, [pc, #56]	; (1b930 <chip_deinit+0x64>)
   1b8f8:	490e      	ldr	r1, [pc, #56]	; (1b934 <chip_deinit+0x68>)
   1b8fa:	480f      	ldr	r0, [pc, #60]	; (1b938 <chip_deinit+0x6c>)
   1b8fc:	4d0f      	ldr	r5, [pc, #60]	; (1b93c <chip_deinit+0x70>)
   1b8fe:	47a8      	blx	r5
   1b900:	480f      	ldr	r0, [pc, #60]	; (1b940 <chip_deinit+0x74>)
   1b902:	47a8      	blx	r5
   1b904:	480f      	ldr	r0, [pc, #60]	; (1b944 <chip_deinit+0x78>)
   1b906:	47a8      	blx	r5
		goto ERR1;
   1b908:	e008      	b.n	1b91c <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b90a:	4a0f      	ldr	r2, [pc, #60]	; (1b948 <chip_deinit+0x7c>)
   1b90c:	4909      	ldr	r1, [pc, #36]	; (1b934 <chip_deinit+0x68>)
   1b90e:	480a      	ldr	r0, [pc, #40]	; (1b938 <chip_deinit+0x6c>)
   1b910:	4d0a      	ldr	r5, [pc, #40]	; (1b93c <chip_deinit+0x70>)
   1b912:	47a8      	blx	r5
   1b914:	480a      	ldr	r0, [pc, #40]	; (1b940 <chip_deinit+0x74>)
   1b916:	47a8      	blx	r5
   1b918:	480a      	ldr	r0, [pc, #40]	; (1b944 <chip_deinit+0x78>)
   1b91a:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
   1b91c:	0020      	movs	r0, r4
   1b91e:	b003      	add	sp, #12
   1b920:	bd30      	pop	{r4, r5, pc}
   1b922:	46c0      	nop			; (mov r8, r8)
   1b924:	0001b97d 	.word	0x0001b97d
   1b928:	fffffbff 	.word	0xfffffbff
   1b92c:	0001b989 	.word	0x0001b989
   1b930:	00000207 	.word	0x00000207
   1b934:	00029b8c 	.word	0x00029b8c
   1b938:	00029628 	.word	0x00029628
   1b93c:	000190ad 	.word	0x000190ad
   1b940:	00029b98 	.word	0x00029b98
   1b944:	00029650 	.word	0x00029650
   1b948:	00000201 	.word	0x00000201

0001b94c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   1b94c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
   1b94e:	4b01      	ldr	r3, [pc, #4]	; (1b954 <nm_bus_iface_init+0x8>)
   1b950:	4798      	blx	r3
	return ret;
}
   1b952:	bd10      	pop	{r4, pc}
   1b954:	0001a2f9 	.word	0x0001a2f9

0001b958 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   1b958:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
   1b95a:	4b01      	ldr	r3, [pc, #4]	; (1b960 <nm_bus_iface_deinit+0x8>)
   1b95c:	4798      	blx	r3

	return ret;
}
   1b95e:	bd10      	pop	{r4, pc}
   1b960:	0001a541 	.word	0x0001a541

0001b964 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   1b964:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   1b966:	4b01      	ldr	r3, [pc, #4]	; (1b96c <nm_bus_reset+0x8>)
   1b968:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   1b96a:	bd10      	pop	{r4, pc}
   1b96c:	0001c69d 	.word	0x0001c69d

0001b970 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   1b970:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   1b972:	4b01      	ldr	r3, [pc, #4]	; (1b978 <nm_read_reg+0x8>)
   1b974:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   1b976:	bd10      	pop	{r4, pc}
   1b978:	0001c6d5 	.word	0x0001c6d5

0001b97c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1b97c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   1b97e:	4b01      	ldr	r3, [pc, #4]	; (1b984 <nm_read_reg_with_ret+0x8>)
   1b980:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   1b982:	bd10      	pop	{r4, pc}
   1b984:	0001c6e9 	.word	0x0001c6e9

0001b988 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1b988:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   1b98a:	4b01      	ldr	r3, [pc, #4]	; (1b990 <nm_write_reg+0x8>)
   1b98c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   1b98e:	bd10      	pop	{r4, pc}
   1b990:	0001c701 	.word	0x0001c701

0001b994 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b994:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b996:	46d6      	mov	lr, sl
   1b998:	464f      	mov	r7, r9
   1b99a:	4646      	mov	r6, r8
   1b99c:	b5c0      	push	{r6, r7, lr}
   1b99e:	b082      	sub	sp, #8
   1b9a0:	4680      	mov	r8, r0
   1b9a2:	4689      	mov	r9, r1
   1b9a4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b9a6:	4b13      	ldr	r3, [pc, #76]	; (1b9f4 <nm_read_block+0x60>)
   1b9a8:	881f      	ldrh	r7, [r3, #0]
   1b9aa:	3f08      	subs	r7, #8
   1b9ac:	b2bb      	uxth	r3, r7
   1b9ae:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b9b0:	001e      	movs	r6, r3
   1b9b2:	0004      	movs	r4, r0
   1b9b4:	429a      	cmp	r2, r3
   1b9b6:	d91a      	bls.n	1b9ee <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b9b8:	4b0f      	ldr	r3, [pc, #60]	; (1b9f8 <nm_read_block+0x64>)
   1b9ba:	469a      	mov	sl, r3
   1b9bc:	1a37      	subs	r7, r6, r0
   1b9be:	4643      	mov	r3, r8
   1b9c0:	1ae1      	subs	r1, r4, r3
   1b9c2:	4449      	add	r1, r9
   1b9c4:	9a01      	ldr	r2, [sp, #4]
   1b9c6:	0020      	movs	r0, r4
   1b9c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b9ca:	2800      	cmp	r0, #0
   1b9cc:	d109      	bne.n	1b9e2 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b9ce:	1bad      	subs	r5, r5, r6
   1b9d0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b9d2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b9d4:	42b5      	cmp	r5, r6
   1b9d6:	d8f2      	bhi.n	1b9be <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b9d8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b9da:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b9dc:	0020      	movs	r0, r4
   1b9de:	4b06      	ldr	r3, [pc, #24]	; (1b9f8 <nm_read_block+0x64>)
   1b9e0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b9e2:	b002      	add	sp, #8
   1b9e4:	bc1c      	pop	{r2, r3, r4}
   1b9e6:	4690      	mov	r8, r2
   1b9e8:	4699      	mov	r9, r3
   1b9ea:	46a2      	mov	sl, r4
   1b9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1b9ee:	2100      	movs	r1, #0
   1b9f0:	e7f2      	b.n	1b9d8 <nm_read_block+0x44>
   1b9f2:	46c0      	nop			; (mov r8, r8)
   1b9f4:	200000d8 	.word	0x200000d8
   1b9f8:	0001c82d 	.word	0x0001c82d

0001b9fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9fe:	46d6      	mov	lr, sl
   1ba00:	464f      	mov	r7, r9
   1ba02:	4646      	mov	r6, r8
   1ba04:	b5c0      	push	{r6, r7, lr}
   1ba06:	b082      	sub	sp, #8
   1ba08:	4680      	mov	r8, r0
   1ba0a:	4689      	mov	r9, r1
   1ba0c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1ba0e:	4b13      	ldr	r3, [pc, #76]	; (1ba5c <nm_write_block+0x60>)
   1ba10:	881f      	ldrh	r7, [r3, #0]
   1ba12:	3f08      	subs	r7, #8
   1ba14:	b2bb      	uxth	r3, r7
   1ba16:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1ba18:	001e      	movs	r6, r3
   1ba1a:	0004      	movs	r4, r0
   1ba1c:	429a      	cmp	r2, r3
   1ba1e:	d91a      	bls.n	1ba56 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1ba20:	4b0f      	ldr	r3, [pc, #60]	; (1ba60 <nm_write_block+0x64>)
   1ba22:	469a      	mov	sl, r3
   1ba24:	1a37      	subs	r7, r6, r0
   1ba26:	4643      	mov	r3, r8
   1ba28:	1ae1      	subs	r1, r4, r3
   1ba2a:	4449      	add	r1, r9
   1ba2c:	9a01      	ldr	r2, [sp, #4]
   1ba2e:	0020      	movs	r0, r4
   1ba30:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1ba32:	2800      	cmp	r0, #0
   1ba34:	d109      	bne.n	1ba4a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1ba36:	1bad      	subs	r5, r5, r6
   1ba38:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1ba3a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1ba3c:	42b5      	cmp	r5, r6
   1ba3e:	d8f2      	bhi.n	1ba26 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1ba40:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1ba42:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1ba44:	0020      	movs	r0, r4
   1ba46:	4b06      	ldr	r3, [pc, #24]	; (1ba60 <nm_write_block+0x64>)
   1ba48:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1ba4a:	b002      	add	sp, #8
   1ba4c:	bc1c      	pop	{r2, r3, r4}
   1ba4e:	4690      	mov	r8, r2
   1ba50:	4699      	mov	r9, r3
   1ba52:	46a2      	mov	sl, r4
   1ba54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1ba56:	2100      	movs	r1, #0
   1ba58:	e7f2      	b.n	1ba40 <nm_write_block+0x44>
   1ba5a:	46c0      	nop			; (mov r8, r8)
   1ba5c:	200000d8 	.word	0x200000d8
   1ba60:	0001c8f9 	.word	0x0001c8f9

0001ba64 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   1ba64:	b570      	push	{r4, r5, r6, lr}
   1ba66:	b084      	sub	sp, #16
   1ba68:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   1ba6a:	2300      	movs	r3, #0
   1ba6c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
   1ba6e:	2208      	movs	r2, #8
   1ba70:	2100      	movs	r1, #0
   1ba72:	a801      	add	r0, sp, #4
   1ba74:	4b2d      	ldr	r3, [pc, #180]	; (1bb2c <nm_get_firmware_full_info+0xc8>)
   1ba76:	4798      	blx	r3
	if (pstrRev != NULL)
   1ba78:	2c00      	cmp	r4, #0
   1ba7a:	d044      	beq.n	1bb06 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   1ba7c:	2228      	movs	r2, #40	; 0x28
   1ba7e:	2100      	movs	r1, #0
   1ba80:	0020      	movs	r0, r4
   1ba82:	4b2b      	ldr	r3, [pc, #172]	; (1bb30 <nm_get_firmware_full_info+0xcc>)
   1ba84:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   1ba86:	a903      	add	r1, sp, #12
   1ba88:	482a      	ldr	r0, [pc, #168]	; (1bb34 <nm_get_firmware_full_info+0xd0>)
   1ba8a:	4b2b      	ldr	r3, [pc, #172]	; (1bb38 <nm_get_firmware_full_info+0xd4>)
   1ba8c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
   1ba8e:	2800      	cmp	r0, #0
   1ba90:	d13a      	bne.n	1bb08 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
   1ba92:	9b03      	ldr	r3, [sp, #12]
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d039      	beq.n	1bb0c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   1ba98:	20c0      	movs	r0, #192	; 0xc0
   1ba9a:	0280      	lsls	r0, r0, #10
   1ba9c:	4318      	orrs	r0, r3
   1ba9e:	2208      	movs	r2, #8
   1baa0:	a901      	add	r1, sp, #4
   1baa2:	4b26      	ldr	r3, [pc, #152]	; (1bb3c <nm_get_firmware_full_info+0xd8>)
   1baa4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
   1baa6:	2800      	cmp	r0, #0
   1baa8:	d12e      	bne.n	1bb08 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
   1baaa:	9b02      	ldr	r3, [sp, #8]
   1baac:	0418      	lsls	r0, r3, #16
   1baae:	0c00      	lsrs	r0, r0, #16
   1bab0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
   1bab2:	d02e      	beq.n	1bb12 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   1bab4:	23c0      	movs	r3, #192	; 0xc0
   1bab6:	029b      	lsls	r3, r3, #10
   1bab8:	4318      	orrs	r0, r3
   1baba:	2228      	movs	r2, #40	; 0x28
   1babc:	0021      	movs	r1, r4
   1babe:	4b1f      	ldr	r3, [pc, #124]	; (1bb3c <nm_get_firmware_full_info+0xd8>)
   1bac0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
   1bac2:	2800      	cmp	r0, #0
   1bac4:	d120      	bne.n	1bb08 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   1bac6:	7921      	ldrb	r1, [r4, #4]
   1bac8:	0209      	lsls	r1, r1, #8
   1baca:	79a2      	ldrb	r2, [r4, #6]
   1bacc:	230f      	movs	r3, #15
   1bace:	401a      	ands	r2, r3
   1bad0:	430a      	orrs	r2, r1
   1bad2:	7961      	ldrb	r1, [r4, #5]
   1bad4:	0109      	lsls	r1, r1, #4
   1bad6:	25ff      	movs	r5, #255	; 0xff
   1bad8:	4029      	ands	r1, r5
   1bada:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   1badc:	79e1      	ldrb	r1, [r4, #7]
   1bade:	0209      	lsls	r1, r1, #8
   1bae0:	7a66      	ldrb	r6, [r4, #9]
   1bae2:	4033      	ands	r3, r6
   1bae4:	430b      	orrs	r3, r1
   1bae6:	7a21      	ldrb	r1, [r4, #8]
   1bae8:	0109      	lsls	r1, r1, #4
   1baea:	400d      	ands	r5, r1
   1baec:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   1baee:	2a00      	cmp	r2, #0
   1baf0:	d012      	beq.n	1bb18 <nm_get_firmware_full_info+0xb4>
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d013      	beq.n	1bb1e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   1baf6:	4912      	ldr	r1, [pc, #72]	; (1bb40 <nm_get_firmware_full_info+0xdc>)
   1baf8:	428b      	cmp	r3, r1
   1bafa:	d813      	bhi.n	1bb24 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
   1bafc:	4b11      	ldr	r3, [pc, #68]	; (1bb44 <nm_get_firmware_full_info+0xe0>)
   1bafe:	429a      	cmp	r2, r3
   1bb00:	d802      	bhi.n	1bb08 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   1bb02:	380d      	subs	r0, #13
   1bb04:	e000      	b.n	1bb08 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
   1bb06:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
   1bb08:	b004      	add	sp, #16
   1bb0a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
   1bb0c:	200c      	movs	r0, #12
   1bb0e:	4240      	negs	r0, r0
   1bb10:	e7fa      	b.n	1bb08 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
   1bb12:	200c      	movs	r0, #12
   1bb14:	4240      	negs	r0, r0
   1bb16:	e7f7      	b.n	1bb08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
   1bb18:	200c      	movs	r0, #12
   1bb1a:	4240      	negs	r0, r0
   1bb1c:	e7f4      	b.n	1bb08 <nm_get_firmware_full_info+0xa4>
   1bb1e:	200c      	movs	r0, #12
   1bb20:	4240      	negs	r0, r0
   1bb22:	e7f1      	b.n	1bb08 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
   1bb24:	200d      	movs	r0, #13
   1bb26:	4240      	negs	r0, r0
   1bb28:	e7ee      	b.n	1bb08 <nm_get_firmware_full_info+0xa4>
   1bb2a:	46c0      	nop			; (mov r8, r8)
   1bb2c:	000262a3 	.word	0x000262a3
   1bb30:	0001a5c1 	.word	0x0001a5c1
   1bb34:	000c0008 	.word	0x000c0008
   1bb38:	0001b97d 	.word	0x0001b97d
   1bb3c:	0001b995 	.word	0x0001b995
   1bb40:	00001354 	.word	0x00001354
   1bb44:	00001353 	.word	0x00001353

0001bb48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   1bb48:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
   1bb4a:	2800      	cmp	r0, #0
   1bb4c:	d034      	beq.n	1bbb8 <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
   1bb4e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   1bb50:	1e6b      	subs	r3, r5, #1
   1bb52:	2b03      	cmp	r3, #3
   1bb54:	d900      	bls.n	1bb58 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   1bb56:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
   1bb58:	2000      	movs	r0, #0
   1bb5a:	4b1e      	ldr	r3, [pc, #120]	; (1bbd4 <nm_drv_init+0x8c>)
   1bb5c:	4798      	blx	r3
   1bb5e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb60:	d12c      	bne.n	1bbbc <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   1bb62:	481d      	ldr	r0, [pc, #116]	; (1bbd8 <nm_drv_init+0x90>)
   1bb64:	4c1d      	ldr	r4, [pc, #116]	; (1bbdc <nm_drv_init+0x94>)
   1bb66:	47a0      	blx	r4
   1bb68:	4b1d      	ldr	r3, [pc, #116]	; (1bbe0 <nm_drv_init+0x98>)
   1bb6a:	4798      	blx	r3
   1bb6c:	0001      	movs	r1, r0
   1bb6e:	481d      	ldr	r0, [pc, #116]	; (1bbe4 <nm_drv_init+0x9c>)
   1bb70:	47a0      	blx	r4
   1bb72:	481d      	ldr	r0, [pc, #116]	; (1bbe8 <nm_drv_init+0xa0>)
   1bb74:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   1bb76:	4b1d      	ldr	r3, [pc, #116]	; (1bbec <nm_drv_init+0xa4>)
   1bb78:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   1bb7a:	0028      	movs	r0, r5
   1bb7c:	4b1c      	ldr	r3, [pc, #112]	; (1bbf0 <nm_drv_init+0xa8>)
   1bb7e:	4798      	blx	r3
   1bb80:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb82:	d115      	bne.n	1bbb0 <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   1bb84:	0028      	movs	r0, r5
   1bb86:	4b1b      	ldr	r3, [pc, #108]	; (1bbf4 <nm_drv_init+0xac>)
   1bb88:	4798      	blx	r3
   1bb8a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb8c:	d110      	bne.n	1bbb0 <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   1bb8e:	3d02      	subs	r5, #2
   1bb90:	2d01      	cmp	r5, #1
   1bb92:	d90f      	bls.n	1bbb4 <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   1bb94:	4b18      	ldr	r3, [pc, #96]	; (1bbf8 <nm_drv_init+0xb0>)
   1bb96:	4798      	blx	r3
   1bb98:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb9a:	d00b      	beq.n	1bbb4 <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
   1bb9c:	22a7      	movs	r2, #167	; 0xa7
   1bb9e:	0052      	lsls	r2, r2, #1
   1bba0:	4916      	ldr	r1, [pc, #88]	; (1bbfc <nm_drv_init+0xb4>)
   1bba2:	4817      	ldr	r0, [pc, #92]	; (1bc00 <nm_drv_init+0xb8>)
   1bba4:	4d0d      	ldr	r5, [pc, #52]	; (1bbdc <nm_drv_init+0x94>)
   1bba6:	47a8      	blx	r5
   1bba8:	4816      	ldr	r0, [pc, #88]	; (1bc04 <nm_drv_init+0xbc>)
   1bbaa:	47a8      	blx	r5
   1bbac:	480e      	ldr	r0, [pc, #56]	; (1bbe8 <nm_drv_init+0xa0>)
   1bbae:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
   1bbb0:	4b15      	ldr	r3, [pc, #84]	; (1bc08 <nm_drv_init+0xc0>)
   1bbb2:	4798      	blx	r3
ERR1:
	return ret;
}
   1bbb4:	0020      	movs	r0, r4
   1bbb6:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
   1bbb8:	2501      	movs	r5, #1
   1bbba:	e7cd      	b.n	1bb58 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
   1bbbc:	2290      	movs	r2, #144	; 0x90
   1bbbe:	0052      	lsls	r2, r2, #1
   1bbc0:	490e      	ldr	r1, [pc, #56]	; (1bbfc <nm_drv_init+0xb4>)
   1bbc2:	480f      	ldr	r0, [pc, #60]	; (1bc00 <nm_drv_init+0xb8>)
   1bbc4:	4d05      	ldr	r5, [pc, #20]	; (1bbdc <nm_drv_init+0x94>)
   1bbc6:	47a8      	blx	r5
   1bbc8:	4810      	ldr	r0, [pc, #64]	; (1bc0c <nm_drv_init+0xc4>)
   1bbca:	47a8      	blx	r5
   1bbcc:	4806      	ldr	r0, [pc, #24]	; (1bbe8 <nm_drv_init+0xa0>)
   1bbce:	47a8      	blx	r5
		goto ERR1;
   1bbd0:	e7f0      	b.n	1bbb4 <nm_drv_init+0x6c>
   1bbd2:	46c0      	nop			; (mov r8, r8)
   1bbd4:	0001b94d 	.word	0x0001b94d
   1bbd8:	00029964 	.word	0x00029964
   1bbdc:	000190ad 	.word	0x000190ad
   1bbe0:	0001b545 	.word	0x0001b545
   1bbe4:	00029cb8 	.word	0x00029cb8
   1bbe8:	00029650 	.word	0x00029650
   1bbec:	0001c719 	.word	0x0001c719
   1bbf0:	0001b751 	.word	0x0001b751
   1bbf4:	0001b855 	.word	0x0001b855
   1bbf8:	0001b4e9 	.word	0x0001b4e9
   1bbfc:	00029c00 	.word	0x00029c00
   1bc00:	00029628 	.word	0x00029628
   1bc04:	00029c7c 	.word	0x00029c7c
   1bc08:	0001b959 	.word	0x0001b959
   1bc0c:	00029c9c 	.word	0x00029c9c

0001bc10 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   1bc10:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
   1bc12:	4b19      	ldr	r3, [pc, #100]	; (1bc78 <nm_drv_deinit+0x68>)
   1bc14:	4798      	blx	r3
   1bc16:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bc18:	d10b      	bne.n	1bc32 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1bc1a:	2000      	movs	r0, #0
   1bc1c:	4b17      	ldr	r3, [pc, #92]	; (1bc7c <nm_drv_deinit+0x6c>)
   1bc1e:	4798      	blx	r3
   1bc20:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bc22:	d112      	bne.n	1bc4a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
   1bc24:	4b16      	ldr	r3, [pc, #88]	; (1bc80 <nm_drv_deinit+0x70>)
   1bc26:	4798      	blx	r3
   1bc28:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bc2a:	d119      	bne.n	1bc60 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   1bc2c:	4b15      	ldr	r3, [pc, #84]	; (1bc84 <nm_drv_deinit+0x74>)
   1bc2e:	4798      	blx	r3
   1bc30:	e009      	b.n	1bc46 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   1bc32:	2266      	movs	r2, #102	; 0x66
   1bc34:	32ff      	adds	r2, #255	; 0xff
   1bc36:	4914      	ldr	r1, [pc, #80]	; (1bc88 <nm_drv_deinit+0x78>)
   1bc38:	4814      	ldr	r0, [pc, #80]	; (1bc8c <nm_drv_deinit+0x7c>)
   1bc3a:	4d15      	ldr	r5, [pc, #84]	; (1bc90 <nm_drv_deinit+0x80>)
   1bc3c:	47a8      	blx	r5
   1bc3e:	4815      	ldr	r0, [pc, #84]	; (1bc94 <nm_drv_deinit+0x84>)
   1bc40:	47a8      	blx	r5
   1bc42:	4815      	ldr	r0, [pc, #84]	; (1bc98 <nm_drv_deinit+0x88>)
   1bc44:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
   1bc46:	0020      	movs	r0, r4
   1bc48:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   1bc4a:	22b6      	movs	r2, #182	; 0xb6
   1bc4c:	0052      	lsls	r2, r2, #1
   1bc4e:	490e      	ldr	r1, [pc, #56]	; (1bc88 <nm_drv_deinit+0x78>)
   1bc50:	480e      	ldr	r0, [pc, #56]	; (1bc8c <nm_drv_deinit+0x7c>)
   1bc52:	4d0f      	ldr	r5, [pc, #60]	; (1bc90 <nm_drv_deinit+0x80>)
   1bc54:	47a8      	blx	r5
   1bc56:	4811      	ldr	r0, [pc, #68]	; (1bc9c <nm_drv_deinit+0x8c>)
   1bc58:	47a8      	blx	r5
   1bc5a:	480f      	ldr	r0, [pc, #60]	; (1bc98 <nm_drv_deinit+0x88>)
   1bc5c:	47a8      	blx	r5
		goto ERR1;
   1bc5e:	e7f2      	b.n	1bc46 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
   1bc60:	22b9      	movs	r2, #185	; 0xb9
   1bc62:	0052      	lsls	r2, r2, #1
   1bc64:	4908      	ldr	r1, [pc, #32]	; (1bc88 <nm_drv_deinit+0x78>)
   1bc66:	4809      	ldr	r0, [pc, #36]	; (1bc8c <nm_drv_deinit+0x7c>)
   1bc68:	4d09      	ldr	r5, [pc, #36]	; (1bc90 <nm_drv_deinit+0x80>)
   1bc6a:	47a8      	blx	r5
   1bc6c:	480c      	ldr	r0, [pc, #48]	; (1bca0 <nm_drv_deinit+0x90>)
   1bc6e:	47a8      	blx	r5
   1bc70:	4809      	ldr	r0, [pc, #36]	; (1bc98 <nm_drv_deinit+0x88>)
   1bc72:	47a8      	blx	r5
		goto ERR1;
   1bc74:	e7e7      	b.n	1bc46 <nm_drv_deinit+0x36>
   1bc76:	46c0      	nop			; (mov r8, r8)
   1bc78:	0001b8cd 	.word	0x0001b8cd
   1bc7c:	0001d46d 	.word	0x0001d46d
   1bc80:	0001b959 	.word	0x0001b959
   1bc84:	0001c6c5 	.word	0x0001c6c5
   1bc88:	00029c0c 	.word	0x00029c0c
   1bc8c:	00029628 	.word	0x00029628
   1bc90:	000190ad 	.word	0x000190ad
   1bc94:	00029c1c 	.word	0x00029c1c
   1bc98:	00029650 	.word	0x00029650
   1bc9c:	00029c3c 	.word	0x00029c3c
   1bca0:	00029c60 	.word	0x00029c60

0001bca4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   1bca4:	b500      	push	{lr}
   1bca6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1bca8:	ab01      	add	r3, sp, #4
   1bcaa:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
   1bcac:	2200      	movs	r2, #0
   1bcae:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
   1bcb0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bcb2:	0019      	movs	r1, r3
   1bcb4:	2003      	movs	r0, #3
   1bcb6:	4b02      	ldr	r3, [pc, #8]	; (1bcc0 <nmi_spi_write+0x1c>)
   1bcb8:	4798      	blx	r3
}
   1bcba:	b005      	add	sp, #20
   1bcbc:	bd00      	pop	{pc}
   1bcbe:	46c0      	nop			; (mov r8, r8)
   1bcc0:	0001a3fd 	.word	0x0001a3fd

0001bcc4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   1bcc4:	b570      	push	{r4, r5, r6, lr}
   1bcc6:	b084      	sub	sp, #16
   1bcc8:	ac08      	add	r4, sp, #32
   1bcca:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
   1bccc:	ac01      	add	r4, sp, #4
   1bcce:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
   1bcd0:	303f      	adds	r0, #63	; 0x3f
   1bcd2:	b2c4      	uxtb	r4, r0
   1bcd4:	2c0e      	cmp	r4, #14
   1bcd6:	d900      	bls.n	1bcda <spi_cmd+0x16>
   1bcd8:	e082      	b.n	1bde0 <spi_cmd+0x11c>
   1bcda:	00a0      	lsls	r0, r4, #2
   1bcdc:	4c4e      	ldr	r4, [pc, #312]	; (1be18 <spi_cmd+0x154>)
   1bcde:	5820      	ldr	r0, [r4, r0]
   1bce0:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   1bce2:	ab01      	add	r3, sp, #4
   1bce4:	0c0a      	lsrs	r2, r1, #16
   1bce6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bce8:	0a0a      	lsrs	r2, r1, #8
   1bcea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1bcec:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1bcee:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
   1bcf0:	4b4a      	ldr	r3, [pc, #296]	; (1be1c <spi_cmd+0x158>)
   1bcf2:	781b      	ldrb	r3, [r3, #0]
   1bcf4:	2b00      	cmp	r3, #0
   1bcf6:	d075      	beq.n	1bde4 <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
   1bcf8:	3901      	subs	r1, #1
   1bcfa:	b2c9      	uxtb	r1, r1
   1bcfc:	e081      	b.n	1be02 <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
   1bcfe:	0a0b      	lsrs	r3, r1, #8
   1bd00:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bd02:	2d00      	cmp	r5, #0
   1bd04:	d107      	bne.n	1bd16 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
   1bd06:	aa01      	add	r2, sp, #4
   1bd08:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
   1bd0a:	ab01      	add	r3, sp, #4
   1bd0c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
   1bd0e:	2200      	movs	r2, #0
   1bd10:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bd12:	2105      	movs	r1, #5
		break;
   1bd14:	e7ec      	b.n	1bcf0 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bd16:	2280      	movs	r2, #128	; 0x80
   1bd18:	4252      	negs	r2, r2
   1bd1a:	4313      	orrs	r3, r2
   1bd1c:	aa01      	add	r2, sp, #4
   1bd1e:	7053      	strb	r3, [r2, #1]
   1bd20:	e7f3      	b.n	1bd0a <spi_cmd+0x46>
		bc[1] = 0x00;
   1bd22:	ab01      	add	r3, sp, #4
   1bd24:	2200      	movs	r2, #0
   1bd26:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bd28:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bd2a:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bd2c:	2105      	movs	r1, #5
		break;
   1bd2e:	e7df      	b.n	1bcf0 <spi_cmd+0x2c>
		bc[1] = 0x00;
   1bd30:	ab01      	add	r3, sp, #4
   1bd32:	2200      	movs	r2, #0
   1bd34:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bd36:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bd38:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bd3a:	2105      	movs	r1, #5
		break;
   1bd3c:	e7d8      	b.n	1bcf0 <spi_cmd+0x2c>
		bc[1] = 0xff;
   1bd3e:	ab01      	add	r3, sp, #4
   1bd40:	22ff      	movs	r2, #255	; 0xff
   1bd42:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1bd44:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   1bd46:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bd48:	2105      	movs	r1, #5
		break;
   1bd4a:	e7d1      	b.n	1bcf0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bd4c:	aa01      	add	r2, sp, #4
   1bd4e:	0c08      	lsrs	r0, r1, #16
   1bd50:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd52:	0a08      	lsrs	r0, r1, #8
   1bd54:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bd56:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
   1bd58:	0a19      	lsrs	r1, r3, #8
   1bd5a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
   1bd5c:	7153      	strb	r3, [r2, #5]
		len = 7;
   1bd5e:	2107      	movs	r1, #7
		break;
   1bd60:	e7c6      	b.n	1bcf0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bd62:	aa01      	add	r2, sp, #4
   1bd64:	0c08      	lsrs	r0, r1, #16
   1bd66:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd68:	0a08      	lsrs	r0, r1, #8
   1bd6a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bd6c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
   1bd6e:	0c19      	lsrs	r1, r3, #16
   1bd70:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
   1bd72:	0a19      	lsrs	r1, r3, #8
   1bd74:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
   1bd76:	7193      	strb	r3, [r2, #6]
		len = 8;
   1bd78:	2108      	movs	r1, #8
		break;
   1bd7a:	e7b9      	b.n	1bcf0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
   1bd7c:	0a0b      	lsrs	r3, r1, #8
   1bd7e:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bd80:	2d00      	cmp	r5, #0
   1bd82:	d10c      	bne.n	1bd9e <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
   1bd84:	a801      	add	r0, sp, #4
   1bd86:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
   1bd88:	ab01      	add	r3, sp, #4
   1bd8a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   1bd8c:	0e11      	lsrs	r1, r2, #24
   1bd8e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   1bd90:	0c11      	lsrs	r1, r2, #16
   1bd92:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   1bd94:	0a11      	lsrs	r1, r2, #8
   1bd96:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
   1bd98:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bd9a:	2108      	movs	r1, #8
		break;
   1bd9c:	e7a8      	b.n	1bcf0 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bd9e:	2080      	movs	r0, #128	; 0x80
   1bda0:	4240      	negs	r0, r0
   1bda2:	4303      	orrs	r3, r0
   1bda4:	a801      	add	r0, sp, #4
   1bda6:	7043      	strb	r3, [r0, #1]
   1bda8:	e7ee      	b.n	1bd88 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
   1bdaa:	ab01      	add	r3, sp, #4
   1bdac:	0c08      	lsrs	r0, r1, #16
   1bdae:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bdb0:	0a08      	lsrs	r0, r1, #8
   1bdb2:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
   1bdb4:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   1bdb6:	0e11      	lsrs	r1, r2, #24
   1bdb8:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   1bdba:	0c11      	lsrs	r1, r2, #16
   1bdbc:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1bdbe:	0a11      	lsrs	r1, r2, #8
   1bdc0:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
   1bdc2:	71da      	strb	r2, [r3, #7]
		len = 9;
   1bdc4:	2109      	movs	r1, #9
		break;
   1bdc6:	e793      	b.n	1bcf0 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1bdc8:	2290      	movs	r2, #144	; 0x90
   1bdca:	0052      	lsls	r2, r2, #1
   1bdcc:	4914      	ldr	r1, [pc, #80]	; (1be20 <spi_cmd+0x15c>)
   1bdce:	4815      	ldr	r0, [pc, #84]	; (1be24 <spi_cmd+0x160>)
   1bdd0:	4c15      	ldr	r4, [pc, #84]	; (1be28 <spi_cmd+0x164>)
   1bdd2:	47a0      	blx	r4
   1bdd4:	4815      	ldr	r0, [pc, #84]	; (1be2c <spi_cmd+0x168>)
   1bdd6:	47a0      	blx	r4
   1bdd8:	4815      	ldr	r0, [pc, #84]	; (1be30 <spi_cmd+0x16c>)
   1bdda:	47a0      	blx	r4
			result = N_FAIL;
   1bddc:	2300      	movs	r3, #0
   1bdde:	e017      	b.n	1be10 <spi_cmd+0x14c>
	switch (cmd) {
   1bde0:	2300      	movs	r3, #0
   1bde2:	e015      	b.n	1be10 <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bde4:	1e4e      	subs	r6, r1, #1
   1bde6:	aa01      	add	r2, sp, #4
   1bde8:	1995      	adds	r5, r2, r6
   1bdea:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1bdec:	4c11      	ldr	r4, [pc, #68]	; (1be34 <spi_cmd+0x170>)
   1bdee:	005b      	lsls	r3, r3, #1
   1bdf0:	7810      	ldrb	r0, [r2, #0]
   1bdf2:	4043      	eors	r3, r0
   1bdf4:	5ce3      	ldrb	r3, [r4, r3]
   1bdf6:	3201      	adds	r2, #1
	while (len--)
   1bdf8:	42aa      	cmp	r2, r5
   1bdfa:	d1f8      	bne.n	1bdee <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bdfc:	005b      	lsls	r3, r3, #1
   1bdfe:	aa01      	add	r2, sp, #4
   1be00:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   1be02:	b289      	uxth	r1, r1
   1be04:	a801      	add	r0, sp, #4
   1be06:	4b0c      	ldr	r3, [pc, #48]	; (1be38 <spi_cmd+0x174>)
   1be08:	4798      	blx	r3
   1be0a:	2301      	movs	r3, #1
   1be0c:	2800      	cmp	r0, #0
   1be0e:	d1db      	bne.n	1bdc8 <spi_cmd+0x104>
		}
	}

	return result;
}
   1be10:	0018      	movs	r0, r3
   1be12:	b004      	add	sp, #16
   1be14:	bd70      	pop	{r4, r5, r6, pc}
   1be16:	46c0      	nop			; (mov r8, r8)
   1be18:	00029cc8 	.word	0x00029cc8
   1be1c:	20003cec 	.word	0x20003cec
   1be20:	00029d44 	.word	0x00029d44
   1be24:	00029628 	.word	0x00029628
   1be28:	000190ad 	.word	0x000190ad
   1be2c:	0002a148 	.word	0x0002a148
   1be30:	00029650 	.word	0x00029650
   1be34:	00029dd4 	.word	0x00029dd4
   1be38:	0001bca5 	.word	0x0001bca5

0001be3c <nmi_spi_read>:
{
   1be3c:	b500      	push	{lr}
   1be3e:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
   1be40:	ab01      	add	r3, sp, #4
   1be42:	2200      	movs	r2, #0
   1be44:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
   1be46:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
   1be48:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1be4a:	0019      	movs	r1, r3
   1be4c:	2003      	movs	r0, #3
   1be4e:	4b02      	ldr	r3, [pc, #8]	; (1be58 <nmi_spi_read+0x1c>)
   1be50:	4798      	blx	r3
}
   1be52:	b005      	add	sp, #20
   1be54:	bd00      	pop	{pc}
   1be56:	46c0      	nop			; (mov r8, r8)
   1be58:	0001a3fd 	.word	0x0001a3fd

0001be5c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
   1be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be5e:	46c6      	mov	lr, r8
   1be60:	b500      	push	{lr}
   1be62:	b082      	sub	sp, #8
   1be64:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1be66:	28cf      	cmp	r0, #207	; 0xcf
   1be68:	d02b      	beq.n	1bec2 <spi_cmd_rsp+0x66>
   1be6a:	0003      	movs	r3, r0
   1be6c:	333b      	adds	r3, #59	; 0x3b
   1be6e:	b2db      	uxtb	r3, r3
   1be70:	2b01      	cmp	r3, #1
   1be72:	d926      	bls.n	1bec2 <spi_cmd_rsp+0x66>
{
   1be74:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be76:	466b      	mov	r3, sp
   1be78:	1dde      	adds	r6, r3, #7
   1be7a:	4b24      	ldr	r3, [pc, #144]	; (1bf0c <spi_cmd_rsp+0xb0>)
   1be7c:	4698      	mov	r8, r3
   1be7e:	2101      	movs	r1, #1
   1be80:	0030      	movs	r0, r6
   1be82:	47c0      	blx	r8
   1be84:	1e05      	subs	r5, r0, #0
   1be86:	d125      	bne.n	1bed4 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   1be88:	7833      	ldrb	r3, [r6, #0]
   1be8a:	42bb      	cmp	r3, r7
   1be8c:	d02e      	beq.n	1beec <spi_cmd_rsp+0x90>
   1be8e:	3c01      	subs	r4, #1
   1be90:	b2e4      	uxtb	r4, r4
   1be92:	2c00      	cmp	r4, #0
   1be94:	d1f3      	bne.n	1be7e <spi_cmd_rsp+0x22>
   1be96:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be98:	466b      	mov	r3, sp
   1be9a:	1dde      	adds	r6, r3, #7
   1be9c:	4f1b      	ldr	r7, [pc, #108]	; (1bf0c <spi_cmd_rsp+0xb0>)
   1be9e:	2101      	movs	r1, #1
   1bea0:	0030      	movs	r0, r6
   1bea2:	47b8      	blx	r7
   1bea4:	2800      	cmp	r0, #0
   1bea6:	d123      	bne.n	1bef0 <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   1bea8:	7833      	ldrb	r3, [r6, #0]
   1beaa:	2b00      	cmp	r3, #0
   1beac:	d02b      	beq.n	1bf06 <spi_cmd_rsp+0xaa>
   1beae:	3c01      	subs	r4, #1
   1beb0:	b2e4      	uxtb	r4, r4
   1beb2:	2c00      	cmp	r4, #0
   1beb4:	d1f3      	bne.n	1be9e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
   1beb6:	2501      	movs	r5, #1

_fail_:

	return result;
}
   1beb8:	0028      	movs	r0, r5
   1beba:	b002      	add	sp, #8
   1bebc:	bc04      	pop	{r2}
   1bebe:	4690      	mov	r8, r2
   1bec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1bec2:	2101      	movs	r1, #1
   1bec4:	466b      	mov	r3, sp
   1bec6:	1dd8      	adds	r0, r3, #7
   1bec8:	4b10      	ldr	r3, [pc, #64]	; (1bf0c <spi_cmd_rsp+0xb0>)
   1beca:	4798      	blx	r3
			result = N_FAIL;
   1becc:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1bece:	2800      	cmp	r0, #0
   1bed0:	d0d0      	beq.n	1be74 <spi_cmd_rsp+0x18>
   1bed2:	e7f1      	b.n	1beb8 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1bed4:	225c      	movs	r2, #92	; 0x5c
   1bed6:	32ff      	adds	r2, #255	; 0xff
   1bed8:	490d      	ldr	r1, [pc, #52]	; (1bf10 <spi_cmd_rsp+0xb4>)
   1beda:	480e      	ldr	r0, [pc, #56]	; (1bf14 <spi_cmd_rsp+0xb8>)
   1bedc:	4c0e      	ldr	r4, [pc, #56]	; (1bf18 <spi_cmd_rsp+0xbc>)
   1bede:	47a0      	blx	r4
   1bee0:	480e      	ldr	r0, [pc, #56]	; (1bf1c <spi_cmd_rsp+0xc0>)
   1bee2:	47a0      	blx	r4
   1bee4:	480e      	ldr	r0, [pc, #56]	; (1bf20 <spi_cmd_rsp+0xc4>)
   1bee6:	47a0      	blx	r4
			result = N_FAIL;
   1bee8:	2500      	movs	r5, #0
			goto _fail_;
   1beea:	e7e5      	b.n	1beb8 <spi_cmd_rsp+0x5c>
   1beec:	240b      	movs	r4, #11
   1beee:	e7d3      	b.n	1be98 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1bef0:	226a      	movs	r2, #106	; 0x6a
   1bef2:	32ff      	adds	r2, #255	; 0xff
   1bef4:	4906      	ldr	r1, [pc, #24]	; (1bf10 <spi_cmd_rsp+0xb4>)
   1bef6:	4807      	ldr	r0, [pc, #28]	; (1bf14 <spi_cmd_rsp+0xb8>)
   1bef8:	4c07      	ldr	r4, [pc, #28]	; (1bf18 <spi_cmd_rsp+0xbc>)
   1befa:	47a0      	blx	r4
   1befc:	4807      	ldr	r0, [pc, #28]	; (1bf1c <spi_cmd_rsp+0xc0>)
   1befe:	47a0      	blx	r4
   1bf00:	4807      	ldr	r0, [pc, #28]	; (1bf20 <spi_cmd_rsp+0xc4>)
   1bf02:	47a0      	blx	r4
			goto _fail_;
   1bf04:	e7d8      	b.n	1beb8 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
   1bf06:	2501      	movs	r5, #1
   1bf08:	e7d6      	b.n	1beb8 <spi_cmd_rsp+0x5c>
   1bf0a:	46c0      	nop			; (mov r8, r8)
   1bf0c:	0001be3d 	.word	0x0001be3d
   1bf10:	00029d5c 	.word	0x00029d5c
   1bf14:	00029628 	.word	0x00029628
   1bf18:	000190ad 	.word	0x000190ad
   1bf1c:	0002a344 	.word	0x0002a344
   1bf20:	00029650 	.word	0x00029650

0001bf24 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   1bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf26:	46de      	mov	lr, fp
   1bf28:	4657      	mov	r7, sl
   1bf2a:	464e      	mov	r6, r9
   1bf2c:	4645      	mov	r5, r8
   1bf2e:	b5e0      	push	{r5, r6, r7, lr}
   1bf30:	b097      	sub	sp, #92	; 0x5c
   1bf32:	0005      	movs	r5, r0
   1bf34:	4690      	mov	r8, r2
   1bf36:	9300      	str	r3, [sp, #0]
   1bf38:	ab20      	add	r3, sp, #128	; 0x80
   1bf3a:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
   1bf3c:	ab0e      	add	r3, sp, #56	; 0x38
   1bf3e:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
   1bf40:	002b      	movs	r3, r5
   1bf42:	333f      	adds	r3, #63	; 0x3f
   1bf44:	b2da      	uxtb	r2, r3
   1bf46:	2a0e      	cmp	r2, #14
   1bf48:	d900      	bls.n	1bf4c <spi_cmd_complete+0x28>
   1bf4a:	e263      	b.n	1c414 <spi_cmd_complete+0x4f0>
   1bf4c:	0093      	lsls	r3, r2, #2
   1bf4e:	4acc      	ldr	r2, [pc, #816]	; (1c280 <spi_cmd_complete+0x35c>)
   1bf50:	58d3      	ldr	r3, [r2, r3]
   1bf52:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   1bf54:	ab0e      	add	r3, sp, #56	; 0x38
   1bf56:	0c0a      	lsrs	r2, r1, #16
   1bf58:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf5a:	0a0a      	lsrs	r2, r1, #8
   1bf5c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bf5e:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1bf60:	2305      	movs	r3, #5
   1bf62:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
   1bf64:	4bc7      	ldr	r3, [pc, #796]	; (1c284 <spi_cmd_complete+0x360>)
   1bf66:	781f      	ldrb	r7, [r3, #0]
   1bf68:	2f00      	cmp	r7, #0
   1bf6a:	d100      	bne.n	1bf6e <spi_cmd_complete+0x4a>
   1bf6c:	e254      	b.n	1c418 <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
   1bf6e:	2301      	movs	r3, #1
   1bf70:	425b      	negs	r3, r3
   1bf72:	469c      	mov	ip, r3
   1bf74:	44e1      	add	r9, ip
   1bf76:	e263      	b.n	1c440 <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
   1bf78:	0a0b      	lsrs	r3, r1, #8
   1bf7a:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf7c:	2801      	cmp	r0, #1
   1bf7e:	d008      	beq.n	1bf92 <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
   1bf80:	aa0e      	add	r2, sp, #56	; 0x38
   1bf82:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
   1bf84:	ab0e      	add	r3, sp, #56	; 0x38
   1bf86:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
   1bf88:	2200      	movs	r2, #0
   1bf8a:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf8c:	2305      	movs	r3, #5
   1bf8e:	4699      	mov	r9, r3
		break;
   1bf90:	e7e8      	b.n	1bf64 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf92:	2280      	movs	r2, #128	; 0x80
   1bf94:	4252      	negs	r2, r2
   1bf96:	4313      	orrs	r3, r2
   1bf98:	aa0e      	add	r2, sp, #56	; 0x38
   1bf9a:	7053      	strb	r3, [r2, #1]
   1bf9c:	e7f2      	b.n	1bf84 <spi_cmd_complete+0x60>
		wb[1] = 0x00;
   1bf9e:	ab0e      	add	r3, sp, #56	; 0x38
   1bfa0:	2200      	movs	r2, #0
   1bfa2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bfa4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bfa6:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bfa8:	2305      	movs	r3, #5
   1bfaa:	4699      	mov	r9, r3
		break;
   1bfac:	e7da      	b.n	1bf64 <spi_cmd_complete+0x40>
		wb[1] = 0x00;
   1bfae:	ab0e      	add	r3, sp, #56	; 0x38
   1bfb0:	2200      	movs	r2, #0
   1bfb2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bfb4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bfb6:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bfb8:	2305      	movs	r3, #5
   1bfba:	4699      	mov	r9, r3
		break;
   1bfbc:	e7d2      	b.n	1bf64 <spi_cmd_complete+0x40>
		wb[1] = 0xff;
   1bfbe:	ab0e      	add	r3, sp, #56	; 0x38
   1bfc0:	22ff      	movs	r2, #255	; 0xff
   1bfc2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   1bfc4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   1bfc6:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bfc8:	2305      	movs	r3, #5
   1bfca:	4699      	mov	r9, r3
		break;
   1bfcc:	e7ca      	b.n	1bf64 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bfce:	ab0e      	add	r3, sp, #56	; 0x38
   1bfd0:	0c0a      	lsrs	r2, r1, #16
   1bfd2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bfd4:	0a0a      	lsrs	r2, r1, #8
   1bfd6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bfd8:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   1bfda:	9900      	ldr	r1, [sp, #0]
   1bfdc:	0a0a      	lsrs	r2, r1, #8
   1bfde:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   1bfe0:	7159      	strb	r1, [r3, #5]
		len = 7;
   1bfe2:	2307      	movs	r3, #7
   1bfe4:	4699      	mov	r9, r3
		break;
   1bfe6:	e7bd      	b.n	1bf64 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bfe8:	ab0e      	add	r3, sp, #56	; 0x38
   1bfea:	0c0a      	lsrs	r2, r1, #16
   1bfec:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bfee:	0a0a      	lsrs	r2, r1, #8
   1bff0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bff2:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   1bff4:	9900      	ldr	r1, [sp, #0]
   1bff6:	0c0a      	lsrs	r2, r1, #16
   1bff8:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   1bffa:	0a0a      	lsrs	r2, r1, #8
   1bffc:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1bffe:	7199      	strb	r1, [r3, #6]
		len = 8;
   1c000:	2308      	movs	r3, #8
   1c002:	4699      	mov	r9, r3
		break;
   1c004:	e7ae      	b.n	1bf64 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
   1c006:	0a0b      	lsrs	r3, r1, #8
   1c008:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1c00a:	2801      	cmp	r0, #1
   1c00c:	d012      	beq.n	1c034 <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
   1c00e:	aa0e      	add	r2, sp, #56	; 0x38
   1c010:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
   1c012:	ab0e      	add	r3, sp, #56	; 0x38
   1c014:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
   1c016:	4642      	mov	r2, r8
   1c018:	78d2      	ldrb	r2, [r2, #3]
   1c01a:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   1c01c:	4642      	mov	r2, r8
   1c01e:	7892      	ldrb	r2, [r2, #2]
   1c020:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   1c022:	4642      	mov	r2, r8
   1c024:	7852      	ldrb	r2, [r2, #1]
   1c026:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   1c028:	4642      	mov	r2, r8
   1c02a:	7812      	ldrb	r2, [r2, #0]
   1c02c:	719a      	strb	r2, [r3, #6]
		len = 8;
   1c02e:	2308      	movs	r3, #8
   1c030:	4699      	mov	r9, r3
		break;
   1c032:	e797      	b.n	1bf64 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1c034:	2280      	movs	r2, #128	; 0x80
   1c036:	4252      	negs	r2, r2
   1c038:	4313      	orrs	r3, r2
   1c03a:	aa0e      	add	r2, sp, #56	; 0x38
   1c03c:	7053      	strb	r3, [r2, #1]
   1c03e:	e7e8      	b.n	1c012 <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
   1c040:	ab0e      	add	r3, sp, #56	; 0x38
   1c042:	0c0a      	lsrs	r2, r1, #16
   1c044:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1c046:	0a0a      	lsrs	r2, r1, #8
   1c048:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   1c04a:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
   1c04c:	4642      	mov	r2, r8
   1c04e:	78d2      	ldrb	r2, [r2, #3]
   1c050:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   1c052:	4642      	mov	r2, r8
   1c054:	7892      	ldrb	r2, [r2, #2]
   1c056:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   1c058:	4642      	mov	r2, r8
   1c05a:	7852      	ldrb	r2, [r2, #1]
   1c05c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1c05e:	4642      	mov	r2, r8
   1c060:	7812      	ldrb	r2, [r2, #0]
   1c062:	71da      	strb	r2, [r3, #7]
		len = 9;
   1c064:	2309      	movs	r3, #9
   1c066:	4699      	mov	r9, r3
		break;
   1c068:	e77c      	b.n	1bf64 <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c06a:	464b      	mov	r3, r9
   1c06c:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   1c06e:	2e20      	cmp	r6, #32
   1c070:	d844      	bhi.n	1c0fc <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   1c072:	464b      	mov	r3, r9
   1c074:	466a      	mov	r2, sp
   1c076:	71d3      	strb	r3, [r2, #7]
   1c078:	79d7      	ldrb	r7, [r2, #7]
   1c07a:	42b7      	cmp	r7, r6
   1c07c:	d207      	bcs.n	1c08e <spi_cmd_complete+0x16a>
   1c07e:	003b      	movs	r3, r7
		wb[wix] = 0;
   1c080:	a90e      	add	r1, sp, #56	; 0x38
   1c082:	2200      	movs	r2, #0
   1c084:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
   1c086:	3301      	adds	r3, #1
   1c088:	b2db      	uxtb	r3, r3
   1c08a:	429e      	cmp	r6, r3
   1c08c:	d8fa      	bhi.n	1c084 <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
   1c08e:	ab0e      	add	r3, sp, #56	; 0x38
   1c090:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
   1c092:	ab06      	add	r3, sp, #24
   1c094:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
   1c096:	ab02      	add	r3, sp, #8
   1c098:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   1c09a:	0019      	movs	r1, r3
   1c09c:	2003      	movs	r0, #3
   1c09e:	4b7a      	ldr	r3, [pc, #488]	; (1c288 <spi_cmd_complete+0x364>)
   1c0a0:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   1c0a2:	2800      	cmp	r0, #0
   1c0a4:	d138      	bne.n	1c118 <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1c0a6:	2dcf      	cmp	r5, #207	; 0xcf
   1c0a8:	d004      	beq.n	1c0b4 <spi_cmd_complete+0x190>
   1c0aa:	002b      	movs	r3, r5
   1c0ac:	333b      	adds	r3, #59	; 0x3b
   1c0ae:	b2db      	uxtb	r3, r3
   1c0b0:	2b01      	cmp	r3, #1
   1c0b2:	d801      	bhi.n	1c0b8 <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   1c0b4:	3701      	adds	r7, #1
   1c0b6:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
   1c0b8:	ab06      	add	r3, sp, #24
   1c0ba:	5ddb      	ldrb	r3, [r3, r7]
   1c0bc:	220f      	movs	r2, #15
   1c0be:	a902      	add	r1, sp, #8
   1c0c0:	468c      	mov	ip, r1
   1c0c2:	4462      	add	r2, ip
   1c0c4:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
   1c0c6:	429d      	cmp	r5, r3
   1c0c8:	d132      	bne.n	1c130 <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   1c0ca:	1cbc      	adds	r4, r7, #2
   1c0cc:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
   1c0ce:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
   1c0d0:	b2db      	uxtb	r3, r3
   1c0d2:	aa06      	add	r2, sp, #24
   1c0d4:	5cd0      	ldrb	r0, [r2, r3]
   1c0d6:	230f      	movs	r3, #15
   1c0d8:	aa02      	add	r2, sp, #8
   1c0da:	4694      	mov	ip, r2
   1c0dc:	4463      	add	r3, ip
   1c0de:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
   1c0e0:	2800      	cmp	r0, #0
   1c0e2:	d13c      	bne.n	1c15e <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   1c0e4:	002b      	movs	r3, r5
   1c0e6:	333c      	adds	r3, #60	; 0x3c
   1c0e8:	22fb      	movs	r2, #251	; 0xfb
   1c0ea:	4213      	tst	r3, r2
   1c0ec:	d047      	beq.n	1c17e <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c0ee:	2308      	movs	r3, #8
   1c0f0:	002a      	movs	r2, r5
   1c0f2:	439a      	bics	r2, r3
   1c0f4:	2ac2      	cmp	r2, #194	; 0xc2
   1c0f6:	d042      	beq.n	1c17e <spi_cmd_complete+0x25a>
   1c0f8:	2001      	movs	r0, #1
   1c0fa:	e029      	b.n	1c150 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   1c0fc:	22f7      	movs	r2, #247	; 0xf7
   1c0fe:	0052      	lsls	r2, r2, #1
   1c100:	4962      	ldr	r1, [pc, #392]	; (1c28c <spi_cmd_complete+0x368>)
   1c102:	4863      	ldr	r0, [pc, #396]	; (1c290 <spi_cmd_complete+0x36c>)
   1c104:	4c63      	ldr	r4, [pc, #396]	; (1c294 <spi_cmd_complete+0x370>)
   1c106:	47a0      	blx	r4
   1c108:	2220      	movs	r2, #32
   1c10a:	0031      	movs	r1, r6
   1c10c:	4862      	ldr	r0, [pc, #392]	; (1c298 <spi_cmd_complete+0x374>)
   1c10e:	47a0      	blx	r4
   1c110:	4862      	ldr	r0, [pc, #392]	; (1c29c <spi_cmd_complete+0x378>)
   1c112:	47a0      	blx	r4
		return result;
   1c114:	2000      	movs	r0, #0
   1c116:	e01b      	b.n	1c150 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1c118:	22fa      	movs	r2, #250	; 0xfa
   1c11a:	32ff      	adds	r2, #255	; 0xff
   1c11c:	495b      	ldr	r1, [pc, #364]	; (1c28c <spi_cmd_complete+0x368>)
   1c11e:	485c      	ldr	r0, [pc, #368]	; (1c290 <spi_cmd_complete+0x36c>)
   1c120:	4c5c      	ldr	r4, [pc, #368]	; (1c294 <spi_cmd_complete+0x370>)
   1c122:	47a0      	blx	r4
   1c124:	485e      	ldr	r0, [pc, #376]	; (1c2a0 <spi_cmd_complete+0x37c>)
   1c126:	47a0      	blx	r4
   1c128:	485c      	ldr	r0, [pc, #368]	; (1c29c <spi_cmd_complete+0x378>)
   1c12a:	47a0      	blx	r4
		return result;
   1c12c:	2000      	movs	r0, #0
   1c12e:	e00f      	b.n	1c150 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   1c130:	4a5c      	ldr	r2, [pc, #368]	; (1c2a4 <spi_cmd_complete+0x380>)
   1c132:	4956      	ldr	r1, [pc, #344]	; (1c28c <spi_cmd_complete+0x368>)
   1c134:	4856      	ldr	r0, [pc, #344]	; (1c290 <spi_cmd_complete+0x36c>)
   1c136:	4c57      	ldr	r4, [pc, #348]	; (1c294 <spi_cmd_complete+0x370>)
   1c138:	47a0      	blx	r4
   1c13a:	230f      	movs	r3, #15
   1c13c:	aa02      	add	r2, sp, #8
   1c13e:	4694      	mov	ip, r2
   1c140:	4463      	add	r3, ip
   1c142:	781a      	ldrb	r2, [r3, #0]
   1c144:	0029      	movs	r1, r5
   1c146:	4858      	ldr	r0, [pc, #352]	; (1c2a8 <spi_cmd_complete+0x384>)
   1c148:	47a0      	blx	r4
   1c14a:	4854      	ldr	r0, [pc, #336]	; (1c29c <spi_cmd_complete+0x378>)
   1c14c:	47a0      	blx	r4
		return result;
   1c14e:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
   1c150:	b017      	add	sp, #92	; 0x5c
   1c152:	bc3c      	pop	{r2, r3, r4, r5}
   1c154:	4690      	mov	r8, r2
   1c156:	4699      	mov	r9, r3
   1c158:	46a2      	mov	sl, r4
   1c15a:	46ab      	mov	fp, r5
   1c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   1c15e:	4a53      	ldr	r2, [pc, #332]	; (1c2ac <spi_cmd_complete+0x388>)
   1c160:	494a      	ldr	r1, [pc, #296]	; (1c28c <spi_cmd_complete+0x368>)
   1c162:	484b      	ldr	r0, [pc, #300]	; (1c290 <spi_cmd_complete+0x36c>)
   1c164:	4c4b      	ldr	r4, [pc, #300]	; (1c294 <spi_cmd_complete+0x370>)
   1c166:	47a0      	blx	r4
   1c168:	230f      	movs	r3, #15
   1c16a:	aa02      	add	r2, sp, #8
   1c16c:	4694      	mov	ip, r2
   1c16e:	4463      	add	r3, ip
   1c170:	7819      	ldrb	r1, [r3, #0]
   1c172:	484f      	ldr	r0, [pc, #316]	; (1c2b0 <spi_cmd_complete+0x38c>)
   1c174:	47a0      	blx	r4
   1c176:	4849      	ldr	r0, [pc, #292]	; (1c29c <spi_cmd_complete+0x378>)
   1c178:	47a0      	blx	r4
		return result;
   1c17a:	2000      	movs	r0, #0
   1c17c:	e7e8      	b.n	1c150 <spi_cmd_complete+0x22c>
   1c17e:	370d      	adds	r7, #13
   1c180:	b2fb      	uxtb	r3, r7
   1c182:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
   1c184:	2200      	movs	r2, #0
   1c186:	270a      	movs	r7, #10
					rsp = rb[rix++];
   1c188:	a906      	add	r1, sp, #24
   1c18a:	e000      	b.n	1c18e <spi_cmd_complete+0x26a>
   1c18c:	001c      	movs	r4, r3
				if(rix < len2) { 
   1c18e:	42a6      	cmp	r6, r4
   1c190:	d956      	bls.n	1c240 <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
   1c192:	1c63      	adds	r3, r4, #1
   1c194:	b2db      	uxtb	r3, r3
   1c196:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
   1c198:	0902      	lsrs	r2, r0, #4
   1c19a:	2a0f      	cmp	r2, #15
   1c19c:	d06a      	beq.n	1c274 <spi_cmd_complete+0x350>
			} while (retry--);
   1c19e:	3f01      	subs	r7, #1
   1c1a0:	2201      	movs	r2, #1
   1c1a2:	4553      	cmp	r3, sl
   1c1a4:	d1f2      	bne.n	1c18c <spi_cmd_complete+0x268>
   1c1a6:	320e      	adds	r2, #14
   1c1a8:	a902      	add	r1, sp, #8
   1c1aa:	468c      	mov	ip, r1
   1c1ac:	4462      	add	r2, ip
   1c1ae:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
   1c1b0:	2f00      	cmp	r7, #0
   1c1b2:	dd47      	ble.n	1c244 <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c1b4:	2dc4      	cmp	r5, #196	; 0xc4
   1c1b6:	d100      	bne.n	1c1ba <spi_cmd_complete+0x296>
   1c1b8:	e080      	b.n	1c2bc <spi_cmd_complete+0x398>
   1c1ba:	2dca      	cmp	r5, #202	; 0xca
   1c1bc:	d100      	bne.n	1c1c0 <spi_cmd_complete+0x29c>
   1c1be:	e07d      	b.n	1c2bc <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c1c0:	2dc2      	cmp	r5, #194	; 0xc2
   1c1c2:	d002      	beq.n	1c1ca <spi_cmd_complete+0x2a6>
   1c1c4:	2001      	movs	r0, #1
   1c1c6:	2dc8      	cmp	r5, #200	; 0xc8
   1c1c8:	d1c2      	bne.n	1c150 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c1ca:	429e      	cmp	r6, r3
   1c1cc:	d800      	bhi.n	1c1d0 <spi_cmd_complete+0x2ac>
   1c1ce:	e0ac      	b.n	1c32a <spi_cmd_complete+0x406>
   1c1d0:	9a00      	ldr	r2, [sp, #0]
   1c1d2:	2a00      	cmp	r2, #0
   1c1d4:	d100      	bne.n	1c1d8 <spi_cmd_complete+0x2b4>
   1c1d6:	e11b      	b.n	1c410 <spi_cmd_complete+0x4ec>
   1c1d8:	4442      	add	r2, r8
   1c1da:	0014      	movs	r4, r2
   1c1dc:	4640      	mov	r0, r8
   1c1de:	2701      	movs	r7, #1
   1c1e0:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
   1c1e2:	a906      	add	r1, sp, #24
   1c1e4:	183d      	adds	r5, r7, r0
   1c1e6:	1c5a      	adds	r2, r3, #1
   1c1e8:	b2d2      	uxtb	r2, r2
   1c1ea:	5ccb      	ldrb	r3, [r1, r3]
   1c1ec:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c1ee:	4296      	cmp	r6, r2
   1c1f0:	d903      	bls.n	1c1fa <spi_cmd_complete+0x2d6>
   1c1f2:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
   1c1f4:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c1f6:	42a0      	cmp	r0, r4
   1c1f8:	d1f4      	bne.n	1c1e4 <spi_cmd_complete+0x2c0>
				sz -= ix;
   1c1fa:	002b      	movs	r3, r5
   1c1fc:	9a00      	ldr	r2, [sp, #0]
   1c1fe:	1b54      	subs	r4, r2, r5
   1c200:	2001      	movs	r0, #1
				if(sz > 0) {
   1c202:	2c00      	cmp	r4, #0
   1c204:	d0a4      	beq.n	1c150 <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
   1c206:	2680      	movs	r6, #128	; 0x80
   1c208:	01b6      	lsls	r6, r6, #6
   1c20a:	1b76      	subs	r6, r6, r5
   1c20c:	42b4      	cmp	r4, r6
   1c20e:	d800      	bhi.n	1c212 <spi_cmd_complete+0x2ee>
						nbytes = sz;
   1c210:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c212:	b2b1      	uxth	r1, r6
   1c214:	4443      	add	r3, r8
   1c216:	0018      	movs	r0, r3
   1c218:	4b26      	ldr	r3, [pc, #152]	; (1c2b4 <spi_cmd_complete+0x390>)
   1c21a:	4798      	blx	r3
   1c21c:	2800      	cmp	r0, #0
   1c21e:	d000      	beq.n	1c222 <spi_cmd_complete+0x2fe>
   1c220:	e085      	b.n	1c32e <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
   1c222:	4b18      	ldr	r3, [pc, #96]	; (1c284 <spi_cmd_complete+0x360>)
   1c224:	781b      	ldrb	r3, [r3, #0]
   1c226:	2b00      	cmp	r3, #0
   1c228:	d100      	bne.n	1c22c <spi_cmd_complete+0x308>
   1c22a:	e08b      	b.n	1c344 <spi_cmd_complete+0x420>
					ix += nbytes;
   1c22c:	46aa      	mov	sl, r5
   1c22e:	44b2      	add	sl, r6
					sz -= nbytes;
   1c230:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
   1c232:	2001      	movs	r0, #1
   1c234:	2e00      	cmp	r6, #0
   1c236:	d100      	bne.n	1c23a <spi_cmd_complete+0x316>
   1c238:	e78a      	b.n	1c150 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c23a:	4f1e      	ldr	r7, [pc, #120]	; (1c2b4 <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c23c:	46bb      	mov	fp, r7
   1c23e:	e0b5      	b.n	1c3ac <spi_cmd_complete+0x488>
   1c240:	2a00      	cmp	r2, #0
   1c242:	d111      	bne.n	1c268 <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   1c244:	2295      	movs	r2, #149	; 0x95
   1c246:	0092      	lsls	r2, r2, #2
   1c248:	4910      	ldr	r1, [pc, #64]	; (1c28c <spi_cmd_complete+0x368>)
   1c24a:	4811      	ldr	r0, [pc, #68]	; (1c290 <spi_cmd_complete+0x36c>)
   1c24c:	4c11      	ldr	r4, [pc, #68]	; (1c294 <spi_cmd_complete+0x370>)
   1c24e:	47a0      	blx	r4
   1c250:	230f      	movs	r3, #15
   1c252:	aa02      	add	r2, sp, #8
   1c254:	4694      	mov	ip, r2
   1c256:	4463      	add	r3, ip
   1c258:	7819      	ldrb	r1, [r3, #0]
   1c25a:	4817      	ldr	r0, [pc, #92]	; (1c2b8 <spi_cmd_complete+0x394>)
   1c25c:	47a0      	blx	r4
   1c25e:	480f      	ldr	r0, [pc, #60]	; (1c29c <spi_cmd_complete+0x378>)
   1c260:	47a0      	blx	r4
				return result;
   1c262:	2001      	movs	r0, #1
   1c264:	4240      	negs	r0, r0
   1c266:	e773      	b.n	1c150 <spi_cmd_complete+0x22c>
   1c268:	230f      	movs	r3, #15
   1c26a:	aa02      	add	r2, sp, #8
   1c26c:	4694      	mov	ip, r2
   1c26e:	4463      	add	r3, ip
   1c270:	7018      	strb	r0, [r3, #0]
   1c272:	e7e7      	b.n	1c244 <spi_cmd_complete+0x320>
   1c274:	a902      	add	r1, sp, #8
   1c276:	468c      	mov	ip, r1
   1c278:	4462      	add	r2, ip
   1c27a:	7010      	strb	r0, [r2, #0]
   1c27c:	e798      	b.n	1c1b0 <spi_cmd_complete+0x28c>
   1c27e:	46c0      	nop			; (mov r8, r8)
   1c280:	00029d04 	.word	0x00029d04
   1c284:	20003cec 	.word	0x20003cec
   1c288:	0001a3fd 	.word	0x0001a3fd
   1c28c:	00029d68 	.word	0x00029d68
   1c290:	00029628 	.word	0x00029628
   1c294:	000190ad 	.word	0x000190ad
   1c298:	0002a174 	.word	0x0002a174
   1c29c:	00029650 	.word	0x00029650
   1c2a0:	0002a148 	.word	0x0002a148
   1c2a4:	0000022f 	.word	0x0000022f
   1c2a8:	0002a1a4 	.word	0x0002a1a4
   1c2ac:	00000239 	.word	0x00000239
   1c2b0:	0002a1e0 	.word	0x0002a1e0
   1c2b4:	0001be3d 	.word	0x0001be3d
   1c2b8:	0002a214 	.word	0x0002a214
				if((rix+3) < len2) { 
   1c2bc:	1cda      	adds	r2, r3, #3
   1c2be:	4296      	cmp	r6, r2
   1c2c0:	d928      	bls.n	1c314 <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
   1c2c2:	aa06      	add	r2, sp, #24
   1c2c4:	5cd3      	ldrb	r3, [r2, r3]
   1c2c6:	4641      	mov	r1, r8
   1c2c8:	700b      	strb	r3, [r1, #0]
   1c2ca:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
   1c2cc:	b2db      	uxtb	r3, r3
   1c2ce:	5cd3      	ldrb	r3, [r2, r3]
   1c2d0:	704b      	strb	r3, [r1, #1]
   1c2d2:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
   1c2d4:	b2db      	uxtb	r3, r3
   1c2d6:	5cd3      	ldrb	r3, [r2, r3]
   1c2d8:	708b      	strb	r3, [r1, #2]
   1c2da:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
   1c2dc:	b2db      	uxtb	r3, r3
   1c2de:	5cd3      	ldrb	r3, [r2, r3]
   1c2e0:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
   1c2e2:	4b63      	ldr	r3, [pc, #396]	; (1c470 <spi_cmd_complete+0x54c>)
   1c2e4:	781b      	ldrb	r3, [r3, #0]
   1c2e6:	2001      	movs	r0, #1
   1c2e8:	2b00      	cmp	r3, #0
   1c2ea:	d000      	beq.n	1c2ee <spi_cmd_complete+0x3ca>
   1c2ec:	e730      	b.n	1c150 <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
   1c2ee:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
   1c2f0:	b2db      	uxtb	r3, r3
   1c2f2:	3301      	adds	r3, #1
   1c2f4:	2001      	movs	r0, #1
   1c2f6:	429e      	cmp	r6, r3
   1c2f8:	d900      	bls.n	1c2fc <spi_cmd_complete+0x3d8>
   1c2fa:	e729      	b.n	1c150 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   1c2fc:	229c      	movs	r2, #156	; 0x9c
   1c2fe:	0092      	lsls	r2, r2, #2
   1c300:	495c      	ldr	r1, [pc, #368]	; (1c474 <spi_cmd_complete+0x550>)
   1c302:	485d      	ldr	r0, [pc, #372]	; (1c478 <spi_cmd_complete+0x554>)
   1c304:	4c5d      	ldr	r4, [pc, #372]	; (1c47c <spi_cmd_complete+0x558>)
   1c306:	47a0      	blx	r4
   1c308:	485d      	ldr	r0, [pc, #372]	; (1c480 <spi_cmd_complete+0x55c>)
   1c30a:	47a0      	blx	r4
   1c30c:	485d      	ldr	r0, [pc, #372]	; (1c484 <spi_cmd_complete+0x560>)
   1c30e:	47a0      	blx	r4
						return result;
   1c310:	2000      	movs	r0, #0
   1c312:	e71d      	b.n	1c150 <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   1c314:	4a5c      	ldr	r2, [pc, #368]	; (1c488 <spi_cmd_complete+0x564>)
   1c316:	4957      	ldr	r1, [pc, #348]	; (1c474 <spi_cmd_complete+0x550>)
   1c318:	4857      	ldr	r0, [pc, #348]	; (1c478 <spi_cmd_complete+0x554>)
   1c31a:	4c58      	ldr	r4, [pc, #352]	; (1c47c <spi_cmd_complete+0x558>)
   1c31c:	47a0      	blx	r4
   1c31e:	485b      	ldr	r0, [pc, #364]	; (1c48c <spi_cmd_complete+0x568>)
   1c320:	47a0      	blx	r4
   1c322:	4858      	ldr	r0, [pc, #352]	; (1c484 <spi_cmd_complete+0x560>)
   1c324:	47a0      	blx	r4
					return result;
   1c326:	2000      	movs	r0, #0
   1c328:	e712      	b.n	1c150 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c32a:	2500      	movs	r5, #0
   1c32c:	e765      	b.n	1c1fa <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c32e:	4a58      	ldr	r2, [pc, #352]	; (1c490 <spi_cmd_complete+0x56c>)
   1c330:	4950      	ldr	r1, [pc, #320]	; (1c474 <spi_cmd_complete+0x550>)
   1c332:	4851      	ldr	r0, [pc, #324]	; (1c478 <spi_cmd_complete+0x554>)
   1c334:	4c51      	ldr	r4, [pc, #324]	; (1c47c <spi_cmd_complete+0x558>)
   1c336:	47a0      	blx	r4
   1c338:	4856      	ldr	r0, [pc, #344]	; (1c494 <spi_cmd_complete+0x570>)
   1c33a:	47a0      	blx	r4
   1c33c:	4851      	ldr	r0, [pc, #324]	; (1c484 <spi_cmd_complete+0x560>)
   1c33e:	47a0      	blx	r4
						goto _error_;
   1c340:	2000      	movs	r0, #0
   1c342:	e705      	b.n	1c150 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c344:	2102      	movs	r1, #2
   1c346:	a802      	add	r0, sp, #8
   1c348:	4b53      	ldr	r3, [pc, #332]	; (1c498 <spi_cmd_complete+0x574>)
   1c34a:	4798      	blx	r3
   1c34c:	2800      	cmp	r0, #0
   1c34e:	d100      	bne.n	1c352 <spi_cmd_complete+0x42e>
   1c350:	e76c      	b.n	1c22c <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c352:	22a6      	movs	r2, #166	; 0xa6
   1c354:	0092      	lsls	r2, r2, #2
   1c356:	4947      	ldr	r1, [pc, #284]	; (1c474 <spi_cmd_complete+0x550>)
   1c358:	4847      	ldr	r0, [pc, #284]	; (1c478 <spi_cmd_complete+0x554>)
   1c35a:	4c48      	ldr	r4, [pc, #288]	; (1c47c <spi_cmd_complete+0x558>)
   1c35c:	47a0      	blx	r4
   1c35e:	484f      	ldr	r0, [pc, #316]	; (1c49c <spi_cmd_complete+0x578>)
   1c360:	47a0      	blx	r4
   1c362:	4848      	ldr	r0, [pc, #288]	; (1c484 <spi_cmd_complete+0x560>)
   1c364:	47a0      	blx	r4
							goto _error_;
   1c366:	e7eb      	b.n	1c340 <spi_cmd_complete+0x41c>
   1c368:	9b00      	ldr	r3, [sp, #0]
   1c36a:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c36c:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c36e:	250f      	movs	r5, #15
   1c370:	ab02      	add	r3, sp, #8
   1c372:	469c      	mov	ip, r3
   1c374:	4465      	add	r5, ip
   1c376:	2101      	movs	r1, #1
   1c378:	0028      	movs	r0, r5
   1c37a:	47b8      	blx	r7
   1c37c:	2800      	cmp	r0, #0
   1c37e:	d11c      	bne.n	1c3ba <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
   1c380:	782b      	ldrb	r3, [r5, #0]
   1c382:	091b      	lsrs	r3, r3, #4
   1c384:	2b0f      	cmp	r3, #15
   1c386:	d002      	beq.n	1c38e <spi_cmd_complete+0x46a>
   1c388:	3c01      	subs	r4, #1
					} while (retry--);
   1c38a:	2c00      	cmp	r4, #0
   1c38c:	d1f3      	bne.n	1c376 <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c38e:	466b      	mov	r3, sp
   1c390:	8819      	ldrh	r1, [r3, #0]
   1c392:	4640      	mov	r0, r8
   1c394:	4450      	add	r0, sl
   1c396:	47d8      	blx	fp
   1c398:	2800      	cmp	r0, #0
   1c39a:	d11a      	bne.n	1c3d2 <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
   1c39c:	4b34      	ldr	r3, [pc, #208]	; (1c470 <spi_cmd_complete+0x54c>)
   1c39e:	781b      	ldrb	r3, [r3, #0]
   1c3a0:	2b00      	cmp	r3, #0
   1c3a2:	d022      	beq.n	1c3ea <spi_cmd_complete+0x4c6>
					ix += nbytes;
   1c3a4:	44ca      	add	sl, r9
					sz -= nbytes;
   1c3a6:	9b00      	ldr	r3, [sp, #0]
   1c3a8:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
   1c3aa:	d02f      	beq.n	1c40c <spi_cmd_complete+0x4e8>
   1c3ac:	9600      	str	r6, [sp, #0]
   1c3ae:	2380      	movs	r3, #128	; 0x80
   1c3b0:	019b      	lsls	r3, r3, #6
   1c3b2:	429e      	cmp	r6, r3
   1c3b4:	d9d8      	bls.n	1c368 <spi_cmd_complete+0x444>
   1c3b6:	9300      	str	r3, [sp, #0]
   1c3b8:	e7d6      	b.n	1c368 <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   1c3ba:	22ae      	movs	r2, #174	; 0xae
   1c3bc:	0092      	lsls	r2, r2, #2
   1c3be:	492d      	ldr	r1, [pc, #180]	; (1c474 <spi_cmd_complete+0x550>)
   1c3c0:	482d      	ldr	r0, [pc, #180]	; (1c478 <spi_cmd_complete+0x554>)
   1c3c2:	4c2e      	ldr	r4, [pc, #184]	; (1c47c <spi_cmd_complete+0x558>)
   1c3c4:	47a0      	blx	r4
   1c3c6:	4836      	ldr	r0, [pc, #216]	; (1c4a0 <spi_cmd_complete+0x57c>)
   1c3c8:	47a0      	blx	r4
   1c3ca:	482e      	ldr	r0, [pc, #184]	; (1c484 <spi_cmd_complete+0x560>)
   1c3cc:	47a0      	blx	r4
   1c3ce:	2000      	movs	r0, #0
   1c3d0:	e6be      	b.n	1c150 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c3d2:	22b2      	movs	r2, #178	; 0xb2
   1c3d4:	0092      	lsls	r2, r2, #2
   1c3d6:	4927      	ldr	r1, [pc, #156]	; (1c474 <spi_cmd_complete+0x550>)
   1c3d8:	4827      	ldr	r0, [pc, #156]	; (1c478 <spi_cmd_complete+0x554>)
   1c3da:	4c28      	ldr	r4, [pc, #160]	; (1c47c <spi_cmd_complete+0x558>)
   1c3dc:	47a0      	blx	r4
   1c3de:	482d      	ldr	r0, [pc, #180]	; (1c494 <spi_cmd_complete+0x570>)
   1c3e0:	47a0      	blx	r4
   1c3e2:	4828      	ldr	r0, [pc, #160]	; (1c484 <spi_cmd_complete+0x560>)
   1c3e4:	47a0      	blx	r4
						result = N_FAIL;
   1c3e6:	2000      	movs	r0, #0
						break;
   1c3e8:	e6b2      	b.n	1c150 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c3ea:	2102      	movs	r1, #2
   1c3ec:	a802      	add	r0, sp, #8
   1c3ee:	4b2a      	ldr	r3, [pc, #168]	; (1c498 <spi_cmd_complete+0x574>)
   1c3f0:	4798      	blx	r3
   1c3f2:	2800      	cmp	r0, #0
   1c3f4:	d0d6      	beq.n	1c3a4 <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c3f6:	4a2b      	ldr	r2, [pc, #172]	; (1c4a4 <spi_cmd_complete+0x580>)
   1c3f8:	491e      	ldr	r1, [pc, #120]	; (1c474 <spi_cmd_complete+0x550>)
   1c3fa:	481f      	ldr	r0, [pc, #124]	; (1c478 <spi_cmd_complete+0x554>)
   1c3fc:	4c1f      	ldr	r4, [pc, #124]	; (1c47c <spi_cmd_complete+0x558>)
   1c3fe:	47a0      	blx	r4
   1c400:	4826      	ldr	r0, [pc, #152]	; (1c49c <spi_cmd_complete+0x578>)
   1c402:	47a0      	blx	r4
   1c404:	481f      	ldr	r0, [pc, #124]	; (1c484 <spi_cmd_complete+0x560>)
   1c406:	47a0      	blx	r4
							result = N_FAIL;
   1c408:	2000      	movs	r0, #0
							break;
   1c40a:	e6a1      	b.n	1c150 <spi_cmd_complete+0x22c>
   1c40c:	2001      	movs	r0, #1
   1c40e:	e69f      	b.n	1c150 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c410:	2001      	movs	r0, #1
   1c412:	e69d      	b.n	1c150 <spi_cmd_complete+0x22c>
		return result;
   1c414:	2000      	movs	r0, #0
   1c416:	e69b      	b.n	1c150 <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c418:	2301      	movs	r3, #1
   1c41a:	425b      	negs	r3, r3
   1c41c:	444b      	add	r3, r9
   1c41e:	469c      	mov	ip, r3
   1c420:	001c      	movs	r4, r3
   1c422:	2200      	movs	r2, #0
   1c424:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c426:	4e20      	ldr	r6, [pc, #128]	; (1c4a8 <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
   1c428:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c42a:	005b      	lsls	r3, r3, #1
   1c42c:	5c50      	ldrb	r0, [r2, r1]
   1c42e:	4043      	eors	r3, r0
   1c430:	5cf3      	ldrb	r3, [r6, r3]
   1c432:	3201      	adds	r2, #1
	while (len--)
   1c434:	42a2      	cmp	r2, r4
   1c436:	d1f8      	bne.n	1c42a <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c438:	005b      	lsls	r3, r3, #1
   1c43a:	aa0e      	add	r2, sp, #56	; 0x38
   1c43c:	4661      	mov	r1, ip
   1c43e:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
   1c440:	2dcf      	cmp	r5, #207	; 0xcf
   1c442:	d100      	bne.n	1c446 <spi_cmd_complete+0x522>
   1c444:	e611      	b.n	1c06a <spi_cmd_complete+0x146>
   1c446:	002b      	movs	r3, r5
   1c448:	333b      	adds	r3, #59	; 0x3b
   1c44a:	b2db      	uxtb	r3, r3
   1c44c:	2b01      	cmp	r3, #1
   1c44e:	d800      	bhi.n	1c452 <spi_cmd_complete+0x52e>
   1c450:	e60b      	b.n	1c06a <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c452:	2dc4      	cmp	r5, #196	; 0xc4
   1c454:	d004      	beq.n	1c460 <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c456:	464b      	mov	r3, r9
   1c458:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c45a:	2dca      	cmp	r5, #202	; 0xca
   1c45c:	d000      	beq.n	1c460 <spi_cmd_complete+0x53c>
   1c45e:	e606      	b.n	1c06e <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c460:	464e      	mov	r6, r9
   1c462:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
   1c464:	2f00      	cmp	r7, #0
   1c466:	d000      	beq.n	1c46a <spi_cmd_complete+0x546>
   1c468:	e601      	b.n	1c06e <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c46a:	3602      	adds	r6, #2
   1c46c:	e5ff      	b.n	1c06e <spi_cmd_complete+0x14a>
   1c46e:	46c0      	nop			; (mov r8, r8)
   1c470:	20003cec 	.word	0x20003cec
   1c474:	00029d68 	.word	0x00029d68
   1c478:	00029628 	.word	0x00029628
   1c47c:	000190ad 	.word	0x000190ad
   1c480:	0002a274 	.word	0x0002a274
   1c484:	00029650 	.word	0x00029650
   1c488:	00000263 	.word	0x00000263
   1c48c:	0002a244 	.word	0x0002a244
   1c490:	0000028e 	.word	0x0000028e
   1c494:	0002a2a4 	.word	0x0002a2a4
   1c498:	0001be3d 	.word	0x0001be3d
   1c49c:	0002a2d8 	.word	0x0002a2d8
   1c4a0:	0002a310 	.word	0x0002a310
   1c4a4:	000002d2 	.word	0x000002d2
   1c4a8:	00029dd4 	.word	0x00029dd4

0001c4ac <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   1c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4ae:	46de      	mov	lr, fp
   1c4b0:	4657      	mov	r7, sl
   1c4b2:	464e      	mov	r6, r9
   1c4b4:	4645      	mov	r5, r8
   1c4b6:	b5e0      	push	{r5, r6, r7, lr}
   1c4b8:	b087      	sub	sp, #28
   1c4ba:	9003      	str	r0, [sp, #12]
   1c4bc:	9105      	str	r1, [sp, #20]
   1c4be:	2830      	cmp	r0, #48	; 0x30
   1c4c0:	d80e      	bhi.n	1c4e0 <spi_write_reg+0x34>
   1c4c2:	4b27      	ldr	r3, [pc, #156]	; (1c560 <spi_write_reg+0xb4>)
   1c4c4:	781b      	ldrb	r3, [r3, #0]
   1c4c6:	b2db      	uxtb	r3, r3
   1c4c8:	9304      	str	r3, [sp, #16]
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	2230      	movs	r2, #48	; 0x30
   1c4ce:	9903      	ldr	r1, [sp, #12]
   1c4d0:	428a      	cmp	r2, r1
   1c4d2:	415b      	adcs	r3, r3
   1c4d4:	b2db      	uxtb	r3, r3
   1c4d6:	469a      	mov	sl, r3
   1c4d8:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c4da:	4b22      	ldr	r3, [pc, #136]	; (1c564 <spi_write_reg+0xb8>)
   1c4dc:	469b      	mov	fp, r3
   1c4de:	e02b      	b.n	1c538 <spi_write_reg+0x8c>
   1c4e0:	4b21      	ldr	r3, [pc, #132]	; (1c568 <spi_write_reg+0xbc>)
   1c4e2:	781b      	ldrb	r3, [r3, #0]
   1c4e4:	e7ef      	b.n	1c4c6 <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1c4e6:	4a21      	ldr	r2, [pc, #132]	; (1c56c <spi_write_reg+0xc0>)
   1c4e8:	4921      	ldr	r1, [pc, #132]	; (1c570 <spi_write_reg+0xc4>)
   1c4ea:	4822      	ldr	r0, [pc, #136]	; (1c574 <spi_write_reg+0xc8>)
   1c4ec:	4c22      	ldr	r4, [pc, #136]	; (1c578 <spi_write_reg+0xcc>)
   1c4ee:	47a0      	blx	r4
   1c4f0:	9703      	str	r7, [sp, #12]
   1c4f2:	0039      	movs	r1, r7
   1c4f4:	4821      	ldr	r0, [pc, #132]	; (1c57c <spi_write_reg+0xd0>)
   1c4f6:	47a0      	blx	r4
   1c4f8:	4821      	ldr	r0, [pc, #132]	; (1c580 <spi_write_reg+0xd4>)
   1c4fa:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
   1c4fc:	2001      	movs	r0, #1
   1c4fe:	4f21      	ldr	r7, [pc, #132]	; (1c584 <spi_write_reg+0xd8>)
   1c500:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c502:	2300      	movs	r3, #0
   1c504:	9300      	str	r3, [sp, #0]
   1c506:	2200      	movs	r2, #0
   1c508:	2100      	movs	r1, #0
   1c50a:	20cf      	movs	r0, #207	; 0xcf
   1c50c:	4d1e      	ldr	r5, [pc, #120]	; (1c588 <spi_write_reg+0xdc>)
   1c50e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c510:	20cf      	movs	r0, #207	; 0xcf
   1c512:	4b1e      	ldr	r3, [pc, #120]	; (1c58c <spi_write_reg+0xe0>)
   1c514:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   1c516:	22ea      	movs	r2, #234	; 0xea
   1c518:	0092      	lsls	r2, r2, #2
   1c51a:	4915      	ldr	r1, [pc, #84]	; (1c570 <spi_write_reg+0xc4>)
   1c51c:	4815      	ldr	r0, [pc, #84]	; (1c574 <spi_write_reg+0xc8>)
   1c51e:	47a0      	blx	r4
   1c520:	9b05      	ldr	r3, [sp, #20]
   1c522:	9a03      	ldr	r2, [sp, #12]
   1c524:	0031      	movs	r1, r6
   1c526:	481a      	ldr	r0, [pc, #104]	; (1c590 <spi_write_reg+0xe4>)
   1c528:	47a0      	blx	r4
   1c52a:	4815      	ldr	r0, [pc, #84]	; (1c580 <spi_write_reg+0xd4>)
   1c52c:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c52e:	2001      	movs	r0, #1
   1c530:	47b8      	blx	r7
   1c532:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c534:	2e00      	cmp	r6, #0
   1c536:	d00b      	beq.n	1c550 <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c538:	4653      	mov	r3, sl
   1c53a:	9300      	str	r3, [sp, #0]
   1c53c:	2304      	movs	r3, #4
   1c53e:	aa05      	add	r2, sp, #20
   1c540:	9f03      	ldr	r7, [sp, #12]
   1c542:	0039      	movs	r1, r7
   1c544:	9804      	ldr	r0, [sp, #16]
   1c546:	47d8      	blx	fp
   1c548:	b243      	sxtb	r3, r0
   1c54a:	4698      	mov	r8, r3
	if (result != N_OK) {
   1c54c:	2b01      	cmp	r3, #1
   1c54e:	d1ca      	bne.n	1c4e6 <spi_write_reg+0x3a>
	}

	return result;
}
   1c550:	4640      	mov	r0, r8
   1c552:	b007      	add	sp, #28
   1c554:	bc3c      	pop	{r2, r3, r4, r5}
   1c556:	4690      	mov	r8, r2
   1c558:	4699      	mov	r9, r3
   1c55a:	46a2      	mov	sl, r4
   1c55c:	46ab      	mov	fp, r5
   1c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c560:	00029d40 	.word	0x00029d40
   1c564:	0001bf25 	.word	0x0001bf25
   1c568:	00029d41 	.word	0x00029d41
   1c56c:	0000039d 	.word	0x0000039d
   1c570:	00029d8c 	.word	0x00029d8c
   1c574:	00029628 	.word	0x00029628
   1c578:	000190ad 	.word	0x000190ad
   1c57c:	0002a3bc 	.word	0x0002a3bc
   1c580:	00029650 	.word	0x00029650
   1c584:	0001a271 	.word	0x0001a271
   1c588:	0001bcc5 	.word	0x0001bcc5
   1c58c:	0001be5d 	.word	0x0001be5d
   1c590:	0002a3e8 	.word	0x0002a3e8

0001c594 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   1c594:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c596:	46de      	mov	lr, fp
   1c598:	4657      	mov	r7, sl
   1c59a:	464e      	mov	r6, r9
   1c59c:	4645      	mov	r5, r8
   1c59e:	b5e0      	push	{r5, r6, r7, lr}
   1c5a0:	b089      	sub	sp, #36	; 0x24
   1c5a2:	9003      	str	r0, [sp, #12]
   1c5a4:	468a      	mov	sl, r1
   1c5a6:	28ff      	cmp	r0, #255	; 0xff
   1c5a8:	d80e      	bhi.n	1c5c8 <spi_read_reg+0x34>
   1c5aa:	4b2e      	ldr	r3, [pc, #184]	; (1c664 <spi_read_reg+0xd0>)
   1c5ac:	781b      	ldrb	r3, [r3, #0]
   1c5ae:	b2db      	uxtb	r3, r3
   1c5b0:	9305      	str	r3, [sp, #20]
   1c5b2:	2300      	movs	r3, #0
   1c5b4:	22ff      	movs	r2, #255	; 0xff
   1c5b6:	9903      	ldr	r1, [sp, #12]
   1c5b8:	428a      	cmp	r2, r1
   1c5ba:	415b      	adcs	r3, r3
   1c5bc:	b2db      	uxtb	r3, r3
   1c5be:	4698      	mov	r8, r3
   1c5c0:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c5c2:	4b29      	ldr	r3, [pc, #164]	; (1c668 <spi_read_reg+0xd4>)
   1c5c4:	469b      	mov	fp, r3
   1c5c6:	e029      	b.n	1c61c <spi_read_reg+0x88>
   1c5c8:	4b28      	ldr	r3, [pc, #160]	; (1c66c <spi_read_reg+0xd8>)
   1c5ca:	781b      	ldrb	r3, [r3, #0]
   1c5cc:	e7ef      	b.n	1c5ae <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   1c5ce:	4a28      	ldr	r2, [pc, #160]	; (1c670 <spi_read_reg+0xdc>)
   1c5d0:	4928      	ldr	r1, [pc, #160]	; (1c674 <spi_read_reg+0xe0>)
   1c5d2:	4829      	ldr	r0, [pc, #164]	; (1c678 <spi_read_reg+0xe4>)
   1c5d4:	4c29      	ldr	r4, [pc, #164]	; (1c67c <spi_read_reg+0xe8>)
   1c5d6:	47a0      	blx	r4
   1c5d8:	9703      	str	r7, [sp, #12]
   1c5da:	0039      	movs	r1, r7
   1c5dc:	4828      	ldr	r0, [pc, #160]	; (1c680 <spi_read_reg+0xec>)
   1c5de:	47a0      	blx	r4
   1c5e0:	4828      	ldr	r0, [pc, #160]	; (1c684 <spi_read_reg+0xf0>)
   1c5e2:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
   1c5e4:	2001      	movs	r0, #1
   1c5e6:	4f28      	ldr	r7, [pc, #160]	; (1c688 <spi_read_reg+0xf4>)
   1c5e8:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c5ea:	2300      	movs	r3, #0
   1c5ec:	9300      	str	r3, [sp, #0]
   1c5ee:	2200      	movs	r2, #0
   1c5f0:	2100      	movs	r1, #0
   1c5f2:	20cf      	movs	r0, #207	; 0xcf
   1c5f4:	4d25      	ldr	r5, [pc, #148]	; (1c68c <spi_read_reg+0xf8>)
   1c5f6:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c5f8:	20cf      	movs	r0, #207	; 0xcf
   1c5fa:	4b25      	ldr	r3, [pc, #148]	; (1c690 <spi_read_reg+0xfc>)
   1c5fc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   1c5fe:	4a25      	ldr	r2, [pc, #148]	; (1c694 <spi_read_reg+0x100>)
   1c600:	491c      	ldr	r1, [pc, #112]	; (1c674 <spi_read_reg+0xe0>)
   1c602:	481d      	ldr	r0, [pc, #116]	; (1c678 <spi_read_reg+0xe4>)
   1c604:	47a0      	blx	r4
   1c606:	9a03      	ldr	r2, [sp, #12]
   1c608:	0031      	movs	r1, r6
   1c60a:	4823      	ldr	r0, [pc, #140]	; (1c698 <spi_read_reg+0x104>)
   1c60c:	47a0      	blx	r4
   1c60e:	481d      	ldr	r0, [pc, #116]	; (1c684 <spi_read_reg+0xf0>)
   1c610:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c612:	2001      	movs	r0, #1
   1c614:	47b8      	blx	r7
   1c616:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c618:	2e00      	cmp	r6, #0
   1c61a:	d021      	beq.n	1c660 <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c61c:	4643      	mov	r3, r8
   1c61e:	9300      	str	r3, [sp, #0]
   1c620:	2304      	movs	r3, #4
   1c622:	aa07      	add	r2, sp, #28
   1c624:	9f03      	ldr	r7, [sp, #12]
   1c626:	0039      	movs	r1, r7
   1c628:	9805      	ldr	r0, [sp, #20]
   1c62a:	47d8      	blx	fp
   1c62c:	b243      	sxtb	r3, r0
   1c62e:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
   1c630:	2b01      	cmp	r3, #1
   1c632:	d1cc      	bne.n	1c5ce <spi_read_reg+0x3a>
   1c634:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
   1c636:	aa07      	add	r2, sp, #28
   1c638:	7853      	ldrb	r3, [r2, #1]
   1c63a:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
   1c63c:	7891      	ldrb	r1, [r2, #2]
   1c63e:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
   1c640:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
   1c642:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
   1c644:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
   1c646:	78d2      	ldrb	r2, [r2, #3]
   1c648:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
   1c64a:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
   1c64c:	4652      	mov	r2, sl
   1c64e:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
   1c650:	0028      	movs	r0, r5
   1c652:	b009      	add	sp, #36	; 0x24
   1c654:	bc3c      	pop	{r2, r3, r4, r5}
   1c656:	4690      	mov	r8, r2
   1c658:	4699      	mov	r9, r3
   1c65a:	46a2      	mov	sl, r4
   1c65c:	46ab      	mov	fp, r5
   1c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c660:	9d04      	ldr	r5, [sp, #16]
   1c662:	e7f5      	b.n	1c650 <spi_read_reg+0xbc>
   1c664:	00029d42 	.word	0x00029d42
   1c668:	0001bf25 	.word	0x0001bf25
   1c66c:	00029d43 	.word	0x00029d43
   1c670:	00000423 	.word	0x00000423
   1c674:	00029dac 	.word	0x00029dac
   1c678:	00029628 	.word	0x00029628
   1c67c:	000190ad 	.word	0x000190ad
   1c680:	0002a378 	.word	0x0002a378
   1c684:	00029650 	.word	0x00029650
   1c688:	0001a271 	.word	0x0001a271
   1c68c:	0001bcc5 	.word	0x0001bcc5
   1c690:	0001be5d 	.word	0x0001be5d
   1c694:	00000435 	.word	0x00000435
   1c698:	0002a3a4 	.word	0x0002a3a4

0001c69c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
   1c69c:	b510      	push	{r4, lr}
   1c69e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c6a0:	2300      	movs	r3, #0
   1c6a2:	9300      	str	r3, [sp, #0]
   1c6a4:	2200      	movs	r2, #0
   1c6a6:	2100      	movs	r1, #0
   1c6a8:	20cf      	movs	r0, #207	; 0xcf
   1c6aa:	4c04      	ldr	r4, [pc, #16]	; (1c6bc <nm_spi_reset+0x20>)
   1c6ac:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   1c6ae:	20cf      	movs	r0, #207	; 0xcf
   1c6b0:	4b03      	ldr	r3, [pc, #12]	; (1c6c0 <nm_spi_reset+0x24>)
   1c6b2:	4798      	blx	r3
	return M2M_SUCCESS;
}
   1c6b4:	2000      	movs	r0, #0
   1c6b6:	b002      	add	sp, #8
   1c6b8:	bd10      	pop	{r4, pc}
   1c6ba:	46c0      	nop			; (mov r8, r8)
   1c6bc:	0001bcc5 	.word	0x0001bcc5
   1c6c0:	0001be5d 	.word	0x0001be5d

0001c6c4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
   1c6c4:	2200      	movs	r2, #0
   1c6c6:	4b02      	ldr	r3, [pc, #8]	; (1c6d0 <nm_spi_deinit+0xc>)
   1c6c8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
   1c6ca:	2000      	movs	r0, #0
   1c6cc:	4770      	bx	lr
   1c6ce:	46c0      	nop			; (mov r8, r8)
   1c6d0:	20003cec 	.word	0x20003cec

0001c6d4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   1c6d4:	b500      	push	{lr}
   1c6d6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   1c6d8:	a901      	add	r1, sp, #4
   1c6da:	4b02      	ldr	r3, [pc, #8]	; (1c6e4 <nm_spi_read_reg+0x10>)
   1c6dc:	4798      	blx	r3

	return u32Val;
}
   1c6de:	9801      	ldr	r0, [sp, #4]
   1c6e0:	b003      	add	sp, #12
   1c6e2:	bd00      	pop	{pc}
   1c6e4:	0001c595 	.word	0x0001c595

0001c6e8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1c6e8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1c6ea:	4b04      	ldr	r3, [pc, #16]	; (1c6fc <nm_spi_read_reg_with_ret+0x14>)
   1c6ec:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c6ee:	2300      	movs	r3, #0
   1c6f0:	2801      	cmp	r0, #1
   1c6f2:	d101      	bne.n	1c6f8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c6f4:	0018      	movs	r0, r3
   1c6f6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c6f8:	3b06      	subs	r3, #6
   1c6fa:	e7fb      	b.n	1c6f4 <nm_spi_read_reg_with_ret+0xc>
   1c6fc:	0001c595 	.word	0x0001c595

0001c700 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1c700:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   1c702:	4b04      	ldr	r3, [pc, #16]	; (1c714 <nm_spi_write_reg+0x14>)
   1c704:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c706:	2300      	movs	r3, #0
   1c708:	2801      	cmp	r0, #1
   1c70a:	d101      	bne.n	1c710 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c70c:	0018      	movs	r0, r3
   1c70e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c710:	3b06      	subs	r3, #6
   1c712:	e7fb      	b.n	1c70c <nm_spi_write_reg+0xc>
   1c714:	0001c4ad 	.word	0x0001c4ad

0001c718 <nm_spi_init>:
{
   1c718:	b530      	push	{r4, r5, lr}
   1c71a:	b083      	sub	sp, #12
	uint32 reg = 0;
   1c71c:	2300      	movs	r3, #0
   1c71e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
   1c720:	4a31      	ldr	r2, [pc, #196]	; (1c7e8 <nm_spi_init+0xd0>)
   1c722:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   1c724:	4669      	mov	r1, sp
   1c726:	4831      	ldr	r0, [pc, #196]	; (1c7ec <nm_spi_init+0xd4>)
   1c728:	4b31      	ldr	r3, [pc, #196]	; (1c7f0 <nm_spi_init+0xd8>)
   1c72a:	4798      	blx	r3
   1c72c:	2800      	cmp	r0, #0
   1c72e:	d028      	beq.n	1c782 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
   1c730:	4b2d      	ldr	r3, [pc, #180]	; (1c7e8 <nm_spi_init+0xd0>)
   1c732:	781b      	ldrb	r3, [r3, #0]
   1c734:	2b00      	cmp	r3, #0
   1c736:	d10d      	bne.n	1c754 <nm_spi_init+0x3c>
		reg &= ~0x70;
   1c738:	337c      	adds	r3, #124	; 0x7c
   1c73a:	9900      	ldr	r1, [sp, #0]
   1c73c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
   1c73e:	3b2c      	subs	r3, #44	; 0x2c
   1c740:	4319      	orrs	r1, r3
   1c742:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   1c744:	4829      	ldr	r0, [pc, #164]	; (1c7ec <nm_spi_init+0xd4>)
   1c746:	4b2b      	ldr	r3, [pc, #172]	; (1c7f4 <nm_spi_init+0xdc>)
   1c748:	4798      	blx	r3
   1c74a:	1e04      	subs	r4, r0, #0
   1c74c:	d036      	beq.n	1c7bc <nm_spi_init+0xa4>
		gu8Crc_off = 1;
   1c74e:	2201      	movs	r2, #1
   1c750:	4b25      	ldr	r3, [pc, #148]	; (1c7e8 <nm_spi_init+0xd0>)
   1c752:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
   1c754:	a901      	add	r1, sp, #4
   1c756:	2080      	movs	r0, #128	; 0x80
   1c758:	0140      	lsls	r0, r0, #5
   1c75a:	4b25      	ldr	r3, [pc, #148]	; (1c7f0 <nm_spi_init+0xd8>)
   1c75c:	4798      	blx	r3
   1c75e:	2800      	cmp	r0, #0
   1c760:	d036      	beq.n	1c7d0 <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1c762:	4c22      	ldr	r4, [pc, #136]	; (1c7ec <nm_spi_init+0xd4>)
   1c764:	0020      	movs	r0, r4
   1c766:	4b24      	ldr	r3, [pc, #144]	; (1c7f8 <nm_spi_init+0xe0>)
   1c768:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
   1c76a:	2370      	movs	r3, #112	; 0x70
   1c76c:	0001      	movs	r1, r0
   1c76e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
   1c770:	2050      	movs	r0, #80	; 0x50
   1c772:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   1c774:	0020      	movs	r0, r4
   1c776:	4b21      	ldr	r3, [pc, #132]	; (1c7fc <nm_spi_init+0xe4>)
   1c778:	4798      	blx	r3
	return M2M_SUCCESS;
   1c77a:	2400      	movs	r4, #0
}
   1c77c:	0020      	movs	r0, r4
   1c77e:	b003      	add	sp, #12
   1c780:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
   1c782:	2201      	movs	r2, #1
   1c784:	4b18      	ldr	r3, [pc, #96]	; (1c7e8 <nm_spi_init+0xd0>)
   1c786:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   1c788:	2298      	movs	r2, #152	; 0x98
   1c78a:	00d2      	lsls	r2, r2, #3
   1c78c:	491c      	ldr	r1, [pc, #112]	; (1c800 <nm_spi_init+0xe8>)
   1c78e:	481d      	ldr	r0, [pc, #116]	; (1c804 <nm_spi_init+0xec>)
   1c790:	4c1d      	ldr	r4, [pc, #116]	; (1c808 <nm_spi_init+0xf0>)
   1c792:	47a0      	blx	r4
   1c794:	481d      	ldr	r0, [pc, #116]	; (1c80c <nm_spi_init+0xf4>)
   1c796:	47a0      	blx	r4
   1c798:	481d      	ldr	r0, [pc, #116]	; (1c810 <nm_spi_init+0xf8>)
   1c79a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   1c79c:	4669      	mov	r1, sp
   1c79e:	4813      	ldr	r0, [pc, #76]	; (1c7ec <nm_spi_init+0xd4>)
   1c7a0:	4b13      	ldr	r3, [pc, #76]	; (1c7f0 <nm_spi_init+0xd8>)
   1c7a2:	4798      	blx	r3
   1c7a4:	1e04      	subs	r4, r0, #0
   1c7a6:	d1c3      	bne.n	1c730 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   1c7a8:	4a1a      	ldr	r2, [pc, #104]	; (1c814 <nm_spi_init+0xfc>)
   1c7aa:	4915      	ldr	r1, [pc, #84]	; (1c800 <nm_spi_init+0xe8>)
   1c7ac:	4815      	ldr	r0, [pc, #84]	; (1c804 <nm_spi_init+0xec>)
   1c7ae:	4d16      	ldr	r5, [pc, #88]	; (1c808 <nm_spi_init+0xf0>)
   1c7b0:	47a8      	blx	r5
   1c7b2:	4819      	ldr	r0, [pc, #100]	; (1c818 <nm_spi_init+0x100>)
   1c7b4:	47a8      	blx	r5
   1c7b6:	4816      	ldr	r0, [pc, #88]	; (1c810 <nm_spi_init+0xf8>)
   1c7b8:	47a8      	blx	r5
			return 0;
   1c7ba:	e7df      	b.n	1c77c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   1c7bc:	4a17      	ldr	r2, [pc, #92]	; (1c81c <nm_spi_init+0x104>)
   1c7be:	4910      	ldr	r1, [pc, #64]	; (1c800 <nm_spi_init+0xe8>)
   1c7c0:	4810      	ldr	r0, [pc, #64]	; (1c804 <nm_spi_init+0xec>)
   1c7c2:	4d11      	ldr	r5, [pc, #68]	; (1c808 <nm_spi_init+0xf0>)
   1c7c4:	47a8      	blx	r5
   1c7c6:	4816      	ldr	r0, [pc, #88]	; (1c820 <nm_spi_init+0x108>)
   1c7c8:	47a8      	blx	r5
   1c7ca:	4811      	ldr	r0, [pc, #68]	; (1c810 <nm_spi_init+0xf8>)
   1c7cc:	47a8      	blx	r5
			return 0;
   1c7ce:	e7d5      	b.n	1c77c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   1c7d0:	4a14      	ldr	r2, [pc, #80]	; (1c824 <nm_spi_init+0x10c>)
   1c7d2:	490b      	ldr	r1, [pc, #44]	; (1c800 <nm_spi_init+0xe8>)
   1c7d4:	480b      	ldr	r0, [pc, #44]	; (1c804 <nm_spi_init+0xec>)
   1c7d6:	4c0c      	ldr	r4, [pc, #48]	; (1c808 <nm_spi_init+0xf0>)
   1c7d8:	47a0      	blx	r4
   1c7da:	4813      	ldr	r0, [pc, #76]	; (1c828 <nm_spi_init+0x110>)
   1c7dc:	47a0      	blx	r4
   1c7de:	480c      	ldr	r0, [pc, #48]	; (1c810 <nm_spi_init+0xf8>)
   1c7e0:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
   1c7e2:	2406      	movs	r4, #6
   1c7e4:	4264      	negs	r4, r4
   1c7e6:	e7c9      	b.n	1c77c <nm_spi_init+0x64>
   1c7e8:	20003cec 	.word	0x20003cec
   1c7ec:	0000e824 	.word	0x0000e824
   1c7f0:	0001c595 	.word	0x0001c595
   1c7f4:	0001c4ad 	.word	0x0001c4ad
   1c7f8:	0001c6d5 	.word	0x0001c6d5
   1c7fc:	0001c701 	.word	0x0001c701
   1c800:	00029dc8 	.word	0x00029dc8
   1c804:	00029628 	.word	0x00029628
   1c808:	000190ad 	.word	0x000190ad
   1c80c:	00029ed4 	.word	0x00029ed4
   1c810:	00029650 	.word	0x00029650
   1c814:	000004c3 	.word	0x000004c3
   1c818:	00029f24 	.word	0x00029f24
   1c81c:	000004cd 	.word	0x000004cd
   1c820:	00029f54 	.word	0x00029f54
   1c824:	000004d7 	.word	0x000004d7
   1c828:	00029f88 	.word	0x00029f88

0001c82c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c82e:	46de      	mov	lr, fp
   1c830:	464f      	mov	r7, r9
   1c832:	4646      	mov	r6, r8
   1c834:	b5c0      	push	{r6, r7, lr}
   1c836:	b086      	sub	sp, #24
   1c838:	9003      	str	r0, [sp, #12]
   1c83a:	9105      	str	r1, [sp, #20]
   1c83c:	9204      	str	r2, [sp, #16]
   1c83e:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c840:	4b21      	ldr	r3, [pc, #132]	; (1c8c8 <nm_spi_read_block+0x9c>)
   1c842:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   1c844:	002f      	movs	r7, r5
   1c846:	e029      	b.n	1c89c <nm_spi_read_block+0x70>
   1c848:	4a20      	ldr	r2, [pc, #128]	; (1c8cc <nm_spi_read_block+0xa0>)
   1c84a:	4921      	ldr	r1, [pc, #132]	; (1c8d0 <nm_spi_read_block+0xa4>)
   1c84c:	4821      	ldr	r0, [pc, #132]	; (1c8d4 <nm_spi_read_block+0xa8>)
   1c84e:	4c22      	ldr	r4, [pc, #136]	; (1c8d8 <nm_spi_read_block+0xac>)
   1c850:	47a0      	blx	r4
   1c852:	9503      	str	r5, [sp, #12]
   1c854:	0029      	movs	r1, r5
   1c856:	4821      	ldr	r0, [pc, #132]	; (1c8dc <nm_spi_read_block+0xb0>)
   1c858:	47a0      	blx	r4
   1c85a:	4d21      	ldr	r5, [pc, #132]	; (1c8e0 <nm_spi_read_block+0xb4>)
   1c85c:	0028      	movs	r0, r5
   1c85e:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c860:	2001      	movs	r0, #1
   1c862:	4920      	ldr	r1, [pc, #128]	; (1c8e4 <nm_spi_read_block+0xb8>)
   1c864:	4689      	mov	r9, r1
   1c866:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c868:	2300      	movs	r3, #0
   1c86a:	9300      	str	r3, [sp, #0]
   1c86c:	2200      	movs	r2, #0
   1c86e:	2100      	movs	r1, #0
   1c870:	20cf      	movs	r0, #207	; 0xcf
   1c872:	4e1d      	ldr	r6, [pc, #116]	; (1c8e8 <nm_spi_read_block+0xbc>)
   1c874:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
   1c876:	20cf      	movs	r0, #207	; 0xcf
   1c878:	4b1c      	ldr	r3, [pc, #112]	; (1c8ec <nm_spi_read_block+0xc0>)
   1c87a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c87c:	4a1c      	ldr	r2, [pc, #112]	; (1c8f0 <nm_spi_read_block+0xc4>)
   1c87e:	4914      	ldr	r1, [pc, #80]	; (1c8d0 <nm_spi_read_block+0xa4>)
   1c880:	4814      	ldr	r0, [pc, #80]	; (1c8d4 <nm_spi_read_block+0xa8>)
   1c882:	47a0      	blx	r4
   1c884:	9b04      	ldr	r3, [sp, #16]
   1c886:	9a03      	ldr	r2, [sp, #12]
   1c888:	0039      	movs	r1, r7
   1c88a:	481a      	ldr	r0, [pc, #104]	; (1c8f4 <nm_spi_read_block+0xc8>)
   1c88c:	47a0      	blx	r4
   1c88e:	0028      	movs	r0, r5
   1c890:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c892:	2001      	movs	r0, #1
   1c894:	47c8      	blx	r9
   1c896:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
   1c898:	2f00      	cmp	r7, #0
   1c89a:	d011      	beq.n	1c8c0 <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c89c:	2300      	movs	r3, #0
   1c89e:	9300      	str	r3, [sp, #0]
   1c8a0:	9b04      	ldr	r3, [sp, #16]
   1c8a2:	9a05      	ldr	r2, [sp, #20]
   1c8a4:	9d03      	ldr	r5, [sp, #12]
   1c8a6:	0029      	movs	r1, r5
   1c8a8:	20c8      	movs	r0, #200	; 0xc8
   1c8aa:	47c0      	blx	r8
	if (result != N_OK) {
   1c8ac:	b240      	sxtb	r0, r0
   1c8ae:	2801      	cmp	r0, #1
   1c8b0:	d1ca      	bne.n	1c848 <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c8b2:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c8b4:	b006      	add	sp, #24
   1c8b6:	bc1c      	pop	{r2, r3, r4}
   1c8b8:	4690      	mov	r8, r2
   1c8ba:	4699      	mov	r9, r3
   1c8bc:	46a3      	mov	fp, r4
   1c8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c8c0:	2006      	movs	r0, #6
   1c8c2:	4240      	negs	r0, r0
   1c8c4:	e7f6      	b.n	1c8b4 <nm_spi_read_block+0x88>
   1c8c6:	46c0      	nop			; (mov r8, r8)
   1c8c8:	0001bf25 	.word	0x0001bf25
   1c8cc:	00000472 	.word	0x00000472
   1c8d0:	00029dbc 	.word	0x00029dbc
   1c8d4:	00029628 	.word	0x00029628
   1c8d8:	000190ad 	.word	0x000190ad
   1c8dc:	00029fb0 	.word	0x00029fb0
   1c8e0:	00029650 	.word	0x00029650
   1c8e4:	0001a271 	.word	0x0001a271
   1c8e8:	0001bcc5 	.word	0x0001bcc5
   1c8ec:	0001be5d 	.word	0x0001be5d
   1c8f0:	0000047d 	.word	0x0000047d
   1c8f4:	00029fe0 	.word	0x00029fe0

0001c8f8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8fa:	46de      	mov	lr, fp
   1c8fc:	4647      	mov	r7, r8
   1c8fe:	b580      	push	{r7, lr}
   1c900:	b089      	sub	sp, #36	; 0x24
   1c902:	9004      	str	r0, [sp, #16]
   1c904:	468b      	mov	fp, r1
   1c906:	9203      	str	r2, [sp, #12]
   1c908:	230a      	movs	r3, #10
   1c90a:	4698      	mov	r8, r3
   1c90c:	2780      	movs	r7, #128	; 0x80
   1c90e:	01bf      	lsls	r7, r7, #6
   1c910:	466b      	mov	r3, sp
   1c912:	82df      	strh	r7, [r3, #22]
   1c914:	e068      	b.n	1c9e8 <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
   1c916:	2200      	movs	r2, #0
   1c918:	ab07      	add	r3, sp, #28
   1c91a:	801a      	strh	r2, [r3, #0]
   1c91c:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
   1c91e:	2500      	movs	r5, #0
   1c920:	e021      	b.n	1c966 <nm_spi_write_block+0x6e>
				order = 0x2;
   1c922:	2300      	movs	r3, #0
   1c924:	42a7      	cmp	r7, r4
   1c926:	415b      	adcs	r3, r3
   1c928:	3302      	adds	r3, #2
		cmd |= order;
   1c92a:	200b      	movs	r0, #11
   1c92c:	aa04      	add	r2, sp, #16
   1c92e:	4694      	mov	ip, r2
   1c930:	4460      	add	r0, ip
   1c932:	2210      	movs	r2, #16
   1c934:	4252      	negs	r2, r2
   1c936:	4313      	orrs	r3, r2
   1c938:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   1c93a:	2101      	movs	r1, #1
   1c93c:	4b65      	ldr	r3, [pc, #404]	; (1cad4 <nm_spi_write_block+0x1dc>)
   1c93e:	4798      	blx	r3
   1c940:	2800      	cmp	r0, #0
   1c942:	d11d      	bne.n	1c980 <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   1c944:	465b      	mov	r3, fp
   1c946:	1958      	adds	r0, r3, r5
   1c948:	0031      	movs	r1, r6
   1c94a:	4b62      	ldr	r3, [pc, #392]	; (1cad4 <nm_spi_write_block+0x1dc>)
   1c94c:	4798      	blx	r3
   1c94e:	2800      	cmp	r0, #0
   1c950:	d161      	bne.n	1ca16 <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
   1c952:	4b61      	ldr	r3, [pc, #388]	; (1cad8 <nm_spi_write_block+0x1e0>)
   1c954:	781b      	ldrb	r3, [r3, #0]
   1c956:	2b00      	cmp	r3, #0
   1c958:	d067      	beq.n	1ca2a <nm_spi_write_block+0x132>
		ix += nbytes;
   1c95a:	1975      	adds	r5, r6, r5
   1c95c:	b22d      	sxth	r5, r5
		sz -= nbytes;
   1c95e:	1ba4      	subs	r4, r4, r6
   1c960:	b2a4      	uxth	r4, r4
	} while (sz);
   1c962:	2c00      	cmp	r4, #0
   1c964:	d07d      	beq.n	1ca62 <nm_spi_write_block+0x16a>
   1c966:	1c26      	adds	r6, r4, #0
   1c968:	42bc      	cmp	r4, r7
   1c96a:	d901      	bls.n	1c970 <nm_spi_write_block+0x78>
   1c96c:	466b      	mov	r3, sp
   1c96e:	8ade      	ldrh	r6, [r3, #22]
   1c970:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
   1c972:	2d00      	cmp	r5, #0
   1c974:	d1d5      	bne.n	1c922 <nm_spi_write_block+0x2a>
				order = 0x3;
   1c976:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
   1c978:	42bc      	cmp	r4, r7
   1c97a:	d9d6      	bls.n	1c92a <nm_spi_write_block+0x32>
				order = 0x1;
   1c97c:	3b02      	subs	r3, #2
   1c97e:	e7d4      	b.n	1c92a <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   1c980:	4a56      	ldr	r2, [pc, #344]	; (1cadc <nm_spi_write_block+0x1e4>)
   1c982:	4957      	ldr	r1, [pc, #348]	; (1cae0 <nm_spi_write_block+0x1e8>)
   1c984:	4857      	ldr	r0, [pc, #348]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1c986:	4c58      	ldr	r4, [pc, #352]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1c988:	47a0      	blx	r4
   1c98a:	4858      	ldr	r0, [pc, #352]	; (1caec <nm_spi_write_block+0x1f4>)
   1c98c:	47a0      	blx	r4
   1c98e:	4858      	ldr	r0, [pc, #352]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1c990:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1c992:	4a58      	ldr	r2, [pc, #352]	; (1caf4 <nm_spi_write_block+0x1fc>)
   1c994:	4958      	ldr	r1, [pc, #352]	; (1caf8 <nm_spi_write_block+0x200>)
   1c996:	4853      	ldr	r0, [pc, #332]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1c998:	4c53      	ldr	r4, [pc, #332]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1c99a:	47a0      	blx	r4
   1c99c:	4857      	ldr	r0, [pc, #348]	; (1cafc <nm_spi_write_block+0x204>)
   1c99e:	47a0      	blx	r4
   1c9a0:	4853      	ldr	r0, [pc, #332]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1c9a2:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c9a4:	2001      	movs	r0, #1
   1c9a6:	4d56      	ldr	r5, [pc, #344]	; (1cb00 <nm_spi_write_block+0x208>)
   1c9a8:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c9aa:	2300      	movs	r3, #0
   1c9ac:	9300      	str	r3, [sp, #0]
   1c9ae:	2200      	movs	r2, #0
   1c9b0:	2100      	movs	r1, #0
   1c9b2:	20cf      	movs	r0, #207	; 0xcf
   1c9b4:	4c53      	ldr	r4, [pc, #332]	; (1cb04 <nm_spi_write_block+0x20c>)
   1c9b6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1c9b8:	20cf      	movs	r0, #207	; 0xcf
   1c9ba:	4b53      	ldr	r3, [pc, #332]	; (1cb08 <nm_spi_write_block+0x210>)
   1c9bc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c9be:	4a53      	ldr	r2, [pc, #332]	; (1cb0c <nm_spi_write_block+0x214>)
   1c9c0:	494d      	ldr	r1, [pc, #308]	; (1caf8 <nm_spi_write_block+0x200>)
   1c9c2:	4848      	ldr	r0, [pc, #288]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1c9c4:	4c48      	ldr	r4, [pc, #288]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1c9c6:	47a0      	blx	r4
   1c9c8:	9b03      	ldr	r3, [sp, #12]
   1c9ca:	9a04      	ldr	r2, [sp, #16]
   1c9cc:	4641      	mov	r1, r8
   1c9ce:	4850      	ldr	r0, [pc, #320]	; (1cb10 <nm_spi_write_block+0x218>)
   1c9d0:	47a0      	blx	r4
   1c9d2:	4847      	ldr	r0, [pc, #284]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1c9d4:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c9d6:	2001      	movs	r0, #1
   1c9d8:	47a8      	blx	r5
   1c9da:	2301      	movs	r3, #1
   1c9dc:	425b      	negs	r3, r3
   1c9de:	469c      	mov	ip, r3
   1c9e0:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
   1c9e2:	4643      	mov	r3, r8
   1c9e4:	2b00      	cmp	r3, #0
   1c9e6:	d06e      	beq.n	1cac6 <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   1c9e8:	2300      	movs	r3, #0
   1c9ea:	9300      	str	r3, [sp, #0]
   1c9ec:	9b03      	ldr	r3, [sp, #12]
   1c9ee:	2200      	movs	r2, #0
   1c9f0:	9d04      	ldr	r5, [sp, #16]
   1c9f2:	0029      	movs	r1, r5
   1c9f4:	20c7      	movs	r0, #199	; 0xc7
   1c9f6:	4c47      	ldr	r4, [pc, #284]	; (1cb14 <nm_spi_write_block+0x21c>)
   1c9f8:	47a0      	blx	r4
	if (result != N_OK) {
   1c9fa:	b240      	sxtb	r0, r0
   1c9fc:	2801      	cmp	r0, #1
   1c9fe:	d08a      	beq.n	1c916 <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   1ca00:	4a45      	ldr	r2, [pc, #276]	; (1cb18 <nm_spi_write_block+0x220>)
   1ca02:	493d      	ldr	r1, [pc, #244]	; (1caf8 <nm_spi_write_block+0x200>)
   1ca04:	4837      	ldr	r0, [pc, #220]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1ca06:	4c38      	ldr	r4, [pc, #224]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1ca08:	47a0      	blx	r4
   1ca0a:	0029      	movs	r1, r5
   1ca0c:	4843      	ldr	r0, [pc, #268]	; (1cb1c <nm_spi_write_block+0x224>)
   1ca0e:	47a0      	blx	r4
   1ca10:	4837      	ldr	r0, [pc, #220]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1ca12:	47a0      	blx	r4
   1ca14:	e7c6      	b.n	1c9a4 <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   1ca16:	4a42      	ldr	r2, [pc, #264]	; (1cb20 <nm_spi_write_block+0x228>)
   1ca18:	4931      	ldr	r1, [pc, #196]	; (1cae0 <nm_spi_write_block+0x1e8>)
   1ca1a:	4832      	ldr	r0, [pc, #200]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1ca1c:	4c32      	ldr	r4, [pc, #200]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1ca1e:	47a0      	blx	r4
   1ca20:	4840      	ldr	r0, [pc, #256]	; (1cb24 <nm_spi_write_block+0x22c>)
   1ca22:	47a0      	blx	r4
   1ca24:	4832      	ldr	r0, [pc, #200]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1ca26:	47a0      	blx	r4
   1ca28:	e7b3      	b.n	1c992 <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   1ca2a:	2102      	movs	r1, #2
   1ca2c:	a807      	add	r0, sp, #28
   1ca2e:	4b29      	ldr	r3, [pc, #164]	; (1cad4 <nm_spi_write_block+0x1dc>)
   1ca30:	4798      	blx	r3
   1ca32:	2800      	cmp	r0, #0
   1ca34:	d091      	beq.n	1c95a <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   1ca36:	22d7      	movs	r2, #215	; 0xd7
   1ca38:	0092      	lsls	r2, r2, #2
   1ca3a:	4929      	ldr	r1, [pc, #164]	; (1cae0 <nm_spi_write_block+0x1e8>)
   1ca3c:	4829      	ldr	r0, [pc, #164]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1ca3e:	4c2a      	ldr	r4, [pc, #168]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1ca40:	47a0      	blx	r4
   1ca42:	4839      	ldr	r0, [pc, #228]	; (1cb28 <nm_spi_write_block+0x230>)
   1ca44:	47a0      	blx	r4
   1ca46:	482a      	ldr	r0, [pc, #168]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1ca48:	47a0      	blx	r4
   1ca4a:	e7a2      	b.n	1c992 <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   1ca4c:	229a      	movs	r2, #154	; 0x9a
   1ca4e:	0052      	lsls	r2, r2, #1
   1ca50:	4936      	ldr	r1, [pc, #216]	; (1cb2c <nm_spi_write_block+0x234>)
   1ca52:	4824      	ldr	r0, [pc, #144]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1ca54:	4c24      	ldr	r4, [pc, #144]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1ca56:	47a0      	blx	r4
   1ca58:	4835      	ldr	r0, [pc, #212]	; (1cb30 <nm_spi_write_block+0x238>)
   1ca5a:	47a0      	blx	r4
   1ca5c:	4824      	ldr	r0, [pc, #144]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1ca5e:	47a0      	blx	r4
   1ca60:	e025      	b.n	1caae <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
   1ca62:	4b1d      	ldr	r3, [pc, #116]	; (1cad8 <nm_spi_write_block+0x1e0>)
   1ca64:	781c      	ldrb	r4, [r3, #0]
		len = 3;
   1ca66:	1e63      	subs	r3, r4, #1
   1ca68:	419c      	sbcs	r4, r3
   1ca6a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   1ca6c:	b2a1      	uxth	r1, r4
   1ca6e:	a807      	add	r0, sp, #28
   1ca70:	4b30      	ldr	r3, [pc, #192]	; (1cb34 <nm_spi_write_block+0x23c>)
   1ca72:	4798      	blx	r3
   1ca74:	2800      	cmp	r0, #0
   1ca76:	d1e9      	bne.n	1ca4c <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   1ca78:	ab08      	add	r3, sp, #32
   1ca7a:	191b      	adds	r3, r3, r4
   1ca7c:	3b05      	subs	r3, #5
   1ca7e:	781b      	ldrb	r3, [r3, #0]
   1ca80:	2b00      	cmp	r3, #0
   1ca82:	d106      	bne.n	1ca92 <nm_spi_write_block+0x19a>
   1ca84:	ab08      	add	r3, sp, #32
   1ca86:	469c      	mov	ip, r3
   1ca88:	4464      	add	r4, ip
   1ca8a:	3c06      	subs	r4, #6
   1ca8c:	7823      	ldrb	r3, [r4, #0]
   1ca8e:	2bc3      	cmp	r3, #195	; 0xc3
   1ca90:	d017      	beq.n	1cac2 <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   1ca92:	223c      	movs	r2, #60	; 0x3c
   1ca94:	32ff      	adds	r2, #255	; 0xff
   1ca96:	4925      	ldr	r1, [pc, #148]	; (1cb2c <nm_spi_write_block+0x234>)
   1ca98:	4812      	ldr	r0, [pc, #72]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1ca9a:	4c13      	ldr	r4, [pc, #76]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1ca9c:	47a0      	blx	r4
   1ca9e:	a907      	add	r1, sp, #28
   1caa0:	788b      	ldrb	r3, [r1, #2]
   1caa2:	784a      	ldrb	r2, [r1, #1]
   1caa4:	7809      	ldrb	r1, [r1, #0]
   1caa6:	4824      	ldr	r0, [pc, #144]	; (1cb38 <nm_spi_write_block+0x240>)
   1caa8:	47a0      	blx	r4
   1caaa:	4811      	ldr	r0, [pc, #68]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1caac:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1caae:	4a23      	ldr	r2, [pc, #140]	; (1cb3c <nm_spi_write_block+0x244>)
   1cab0:	4911      	ldr	r1, [pc, #68]	; (1caf8 <nm_spi_write_block+0x200>)
   1cab2:	480c      	ldr	r0, [pc, #48]	; (1cae4 <nm_spi_write_block+0x1ec>)
   1cab4:	4c0c      	ldr	r4, [pc, #48]	; (1cae8 <nm_spi_write_block+0x1f0>)
   1cab6:	47a0      	blx	r4
   1cab8:	4810      	ldr	r0, [pc, #64]	; (1cafc <nm_spi_write_block+0x204>)
   1caba:	47a0      	blx	r4
   1cabc:	480c      	ldr	r0, [pc, #48]	; (1caf0 <nm_spi_write_block+0x1f8>)
   1cabe:	47a0      	blx	r4
   1cac0:	e770      	b.n	1c9a4 <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1cac2:	2000      	movs	r0, #0
   1cac4:	e001      	b.n	1caca <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1cac6:	2006      	movs	r0, #6
   1cac8:	4240      	negs	r0, r0

	return s8Ret;
}
   1caca:	b009      	add	sp, #36	; 0x24
   1cacc:	bc0c      	pop	{r2, r3}
   1cace:	4690      	mov	r8, r2
   1cad0:	469b      	mov	fp, r3
   1cad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cad4:	0001bca5 	.word	0x0001bca5
   1cad8:	20003cec 	.word	0x20003cec
   1cadc:	00000349 	.word	0x00000349
   1cae0:	00029d7c 	.word	0x00029d7c
   1cae4:	00029628 	.word	0x00029628
   1cae8:	000190ad 	.word	0x000190ad
   1caec:	0002a02c 	.word	0x0002a02c
   1caf0:	00029650 	.word	0x00029650
   1caf4:	000003d9 	.word	0x000003d9
   1caf8:	00029d9c 	.word	0x00029d9c
   1cafc:	0002a120 	.word	0x0002a120
   1cb00:	0001a271 	.word	0x0001a271
   1cb04:	0001bcc5 	.word	0x0001bcc5
   1cb08:	0001be5d 	.word	0x0001be5d
   1cb0c:	000003eb 	.word	0x000003eb
   1cb10:	00029fe0 	.word	0x00029fe0
   1cb14:	0001bf25 	.word	0x0001bf25
   1cb18:	000003cf 	.word	0x000003cf
   1cb1c:	00029ffc 	.word	0x00029ffc
   1cb20:	00000352 	.word	0x00000352
   1cb24:	0002a064 	.word	0x0002a064
   1cb28:	0002a098 	.word	0x0002a098
   1cb2c:	00029d4c 	.word	0x00029d4c
   1cb30:	0002a0d0 	.word	0x0002a0d0
   1cb34:	0001be3d 	.word	0x0001be3d
   1cb38:	0002a0f0 	.word	0x0002a0f0
   1cb3c:	000003e1 	.word	0x000003e1

0001cb40 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   1cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb42:	46de      	mov	lr, fp
   1cb44:	4657      	mov	r7, sl
   1cb46:	464e      	mov	r6, r9
   1cb48:	4645      	mov	r5, r8
   1cb4a:	b5e0      	push	{r5, r6, r7, lr}
   1cb4c:	b085      	sub	sp, #20
   1cb4e:	9001      	str	r0, [sp, #4]
   1cb50:	000e      	movs	r6, r1
   1cb52:	9202      	str	r2, [sp, #8]
   1cb54:	001d      	movs	r5, r3
   1cb56:	ab0e      	add	r3, sp, #56	; 0x38
   1cb58:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   1cb5a:	2c00      	cmp	r4, #0
   1cb5c:	d063      	beq.n	1cc26 <Socket_ReadSocketData+0xe6>
   1cb5e:	0103      	lsls	r3, r0, #4
   1cb60:	4934      	ldr	r1, [pc, #208]	; (1cc34 <Socket_ReadSocketData+0xf4>)
   1cb62:	585b      	ldr	r3, [r3, r1]
   1cb64:	2b00      	cmp	r3, #0
   1cb66:	d05e      	beq.n	1cc26 <Socket_ReadSocketData+0xe6>
   1cb68:	0101      	lsls	r1, r0, #4
   1cb6a:	4b32      	ldr	r3, [pc, #200]	; (1cc34 <Socket_ReadSocketData+0xf4>)
   1cb6c:	185b      	adds	r3, r3, r1
   1cb6e:	889b      	ldrh	r3, [r3, #4]
   1cb70:	b29b      	uxth	r3, r3
   1cb72:	2b00      	cmp	r3, #0
   1cb74:	d057      	beq.n	1cc26 <Socket_ReadSocketData+0xe6>
   1cb76:	4b2f      	ldr	r3, [pc, #188]	; (1cc34 <Socket_ReadSocketData+0xf4>)
   1cb78:	185b      	adds	r3, r3, r1
   1cb7a:	7a9b      	ldrb	r3, [r3, #10]
   1cb7c:	2b01      	cmp	r3, #1
   1cb7e:	d152      	bne.n	1cc26 <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   1cb80:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1cb82:	4b2c      	ldr	r3, [pc, #176]	; (1cc34 <Socket_ReadSocketData+0xf4>)
   1cb84:	469b      	mov	fp, r3
   1cb86:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cb88:	465b      	mov	r3, fp
   1cb8a:	220a      	movs	r2, #10
   1cb8c:	4690      	mov	r8, r2
   1cb8e:	44d8      	add	r8, fp
   1cb90:	468a      	mov	sl, r1
   1cb92:	9500      	str	r5, [sp, #0]
   1cb94:	9303      	str	r3, [sp, #12]
   1cb96:	e014      	b.n	1cbc2 <Socket_ReadSocketData+0x82>
   1cb98:	0025      	movs	r5, r4
			u8SetRxDone = 1;
   1cb9a:	2301      	movs	r3, #1
   1cb9c:	e01b      	b.n	1cbd6 <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1cb9e:	3301      	adds	r3, #1
   1cba0:	2200      	movs	r2, #0
   1cba2:	2100      	movs	r1, #0
   1cba4:	2000      	movs	r0, #0
   1cba6:	4c24      	ldr	r4, [pc, #144]	; (1cc38 <Socket_ReadSocketData+0xf8>)
   1cba8:	47a0      	blx	r4
   1cbaa:	e03c      	b.n	1cc26 <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1cbac:	4823      	ldr	r0, [pc, #140]	; (1cc3c <Socket_ReadSocketData+0xfc>)
   1cbae:	4d24      	ldr	r5, [pc, #144]	; (1cc40 <Socket_ReadSocketData+0x100>)
   1cbb0:	47a8      	blx	r5
   1cbb2:	0021      	movs	r1, r4
   1cbb4:	4823      	ldr	r0, [pc, #140]	; (1cc44 <Socket_ReadSocketData+0x104>)
   1cbb6:	47a8      	blx	r5
   1cbb8:	4823      	ldr	r0, [pc, #140]	; (1cc48 <Socket_ReadSocketData+0x108>)
   1cbba:	47a8      	blx	r5
				break;
   1cbbc:	e033      	b.n	1cc26 <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
   1cbbe:	2c00      	cmp	r4, #0
   1cbc0:	d031      	beq.n	1cc26 <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1cbc2:	465b      	mov	r3, fp
   1cbc4:	889b      	ldrh	r3, [r3, #4]
   1cbc6:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
   1cbc8:	b21b      	sxth	r3, r3
   1cbca:	2b00      	cmp	r3, #0
   1cbcc:	dde4      	ble.n	1cb98 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1cbce:	9b03      	ldr	r3, [sp, #12]
   1cbd0:	889d      	ldrh	r5, [r3, #4]
   1cbd2:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
   1cbd4:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   1cbd6:	4a17      	ldr	r2, [pc, #92]	; (1cc34 <Socket_ReadSocketData+0xf4>)
   1cbd8:	4651      	mov	r1, sl
   1cbda:	5889      	ldr	r1, [r1, r2]
   1cbdc:	002a      	movs	r2, r5
   1cbde:	9800      	ldr	r0, [sp, #0]
   1cbe0:	4f15      	ldr	r7, [pc, #84]	; (1cc38 <Socket_ReadSocketData+0xf8>)
   1cbe2:	47b8      	blx	r7
   1cbe4:	2800      	cmp	r0, #0
   1cbe6:	d1e1      	bne.n	1cbac <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   1cbe8:	4b12      	ldr	r3, [pc, #72]	; (1cc34 <Socket_ReadSocketData+0xf4>)
   1cbea:	4652      	mov	r2, sl
   1cbec:	58d3      	ldr	r3, [r2, r3]
   1cbee:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
   1cbf0:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   1cbf2:	88f3      	ldrh	r3, [r6, #6]
   1cbf4:	1b5b      	subs	r3, r3, r5
   1cbf6:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
   1cbf8:	4b14      	ldr	r3, [pc, #80]	; (1cc4c <Socket_ReadSocketData+0x10c>)
   1cbfa:	681b      	ldr	r3, [r3, #0]
   1cbfc:	2b00      	cmp	r3, #0
   1cbfe:	d005      	beq.n	1cc0c <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   1cc00:	4b12      	ldr	r3, [pc, #72]	; (1cc4c <Socket_ReadSocketData+0x10c>)
   1cc02:	681b      	ldr	r3, [r3, #0]
   1cc04:	0032      	movs	r2, r6
   1cc06:	9902      	ldr	r1, [sp, #8]
   1cc08:	9801      	ldr	r0, [sp, #4]
   1cc0a:	4798      	blx	r3
				u16ReadCount -= u16Read;
   1cc0c:	1b64      	subs	r4, r4, r5
   1cc0e:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
   1cc10:	9b00      	ldr	r3, [sp, #0]
   1cc12:	469c      	mov	ip, r3
   1cc14:	44ac      	add	ip, r5
   1cc16:	4663      	mov	r3, ip
   1cc18:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cc1a:	4643      	mov	r3, r8
   1cc1c:	781b      	ldrb	r3, [r3, #0]
   1cc1e:	2b00      	cmp	r3, #0
   1cc20:	d1cd      	bne.n	1cbbe <Socket_ReadSocketData+0x7e>
   1cc22:	2c00      	cmp	r4, #0
   1cc24:	d1bb      	bne.n	1cb9e <Socket_ReadSocketData+0x5e>
	}
}
   1cc26:	b005      	add	sp, #20
   1cc28:	bc3c      	pop	{r2, r3, r4, r5}
   1cc2a:	4690      	mov	r8, r2
   1cc2c:	4699      	mov	r9, r3
   1cc2e:	46a2      	mov	sl, r4
   1cc30:	46ab      	mov	fp, r5
   1cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc34:	20005460 	.word	0x20005460
   1cc38:	0001acb1 	.word	0x0001acb1
   1cc3c:	00029964 	.word	0x00029964
   1cc40:	000190ad 	.word	0x000190ad
   1cc44:	0002a404 	.word	0x0002a404
   1cc48:	00029650 	.word	0x00029650
   1cc4c:	20005510 	.word	0x20005510

0001cc50 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   1cc50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc52:	46d6      	mov	lr, sl
   1cc54:	464f      	mov	r7, r9
   1cc56:	4646      	mov	r6, r8
   1cc58:	b5c0      	push	{r6, r7, lr}
   1cc5a:	b09a      	sub	sp, #104	; 0x68
   1cc5c:	000d      	movs	r5, r1
   1cc5e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   1cc60:	2841      	cmp	r0, #65	; 0x41
   1cc62:	d039      	beq.n	1ccd8 <m2m_ip_cb+0x88>
   1cc64:	2854      	cmp	r0, #84	; 0x54
   1cc66:	d037      	beq.n	1ccd8 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   1cc68:	2842      	cmp	r0, #66	; 0x42
   1cc6a:	d053      	beq.n	1cd14 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   1cc6c:	2843      	cmp	r0, #67	; 0x43
   1cc6e:	d06a      	beq.n	1cd46 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   1cc70:	2844      	cmp	r0, #68	; 0x44
   1cc72:	d100      	bne.n	1cc76 <m2m_ip_cb+0x26>
   1cc74:	e0af      	b.n	1cdd6 <m2m_ip_cb+0x186>
   1cc76:	284b      	cmp	r0, #75	; 0x4b
   1cc78:	d100      	bne.n	1cc7c <m2m_ip_cb+0x2c>
   1cc7a:	e0ac      	b.n	1cdd6 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   1cc7c:	284a      	cmp	r0, #74	; 0x4a
   1cc7e:	d100      	bne.n	1cc82 <m2m_ip_cb+0x32>
   1cc80:	e0cf      	b.n	1ce22 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   1cc82:	2846      	cmp	r0, #70	; 0x46
   1cc84:	d100      	bne.n	1cc88 <m2m_ip_cb+0x38>
   1cc86:	e0e5      	b.n	1ce54 <m2m_ip_cb+0x204>
   1cc88:	2848      	cmp	r0, #72	; 0x48
   1cc8a:	d100      	bne.n	1cc8e <m2m_ip_cb+0x3e>
   1cc8c:	e10e      	b.n	1ceac <m2m_ip_cb+0x25c>
   1cc8e:	284d      	cmp	r0, #77	; 0x4d
   1cc90:	d100      	bne.n	1cc94 <m2m_ip_cb+0x44>
   1cc92:	e0dc      	b.n	1ce4e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cc94:	2845      	cmp	r0, #69	; 0x45
   1cc96:	d100      	bne.n	1cc9a <m2m_ip_cb+0x4a>
   1cc98:	e12c      	b.n	1cef4 <m2m_ip_cb+0x2a4>
   1cc9a:	2847      	cmp	r0, #71	; 0x47
   1cc9c:	d100      	bne.n	1cca0 <m2m_ip_cb+0x50>
   1cc9e:	e14d      	b.n	1cf3c <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cca0:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cca2:	284c      	cmp	r0, #76	; 0x4c
   1cca4:	d100      	bne.n	1cca8 <m2m_ip_cb+0x58>
   1cca6:	e126      	b.n	1cef6 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
   1cca8:	2852      	cmp	r0, #82	; 0x52
   1ccaa:	d12d      	bne.n	1cd08 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   1ccac:	2301      	movs	r3, #1
   1ccae:	2214      	movs	r2, #20
   1ccb0:	a909      	add	r1, sp, #36	; 0x24
   1ccb2:	0020      	movs	r0, r4
   1ccb4:	4ca2      	ldr	r4, [pc, #648]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1ccb6:	47a0      	blx	r4
   1ccb8:	2800      	cmp	r0, #0
   1ccba:	d125      	bne.n	1cd08 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   1ccbc:	4ba1      	ldr	r3, [pc, #644]	; (1cf44 <m2m_ip_cb+0x2f4>)
   1ccbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ccc0:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   1ccc2:	681b      	ldr	r3, [r3, #0]
   1ccc4:	2b00      	cmp	r3, #0
   1ccc6:	d01f      	beq.n	1cd08 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   1ccc8:	4b9e      	ldr	r3, [pc, #632]	; (1cf44 <m2m_ip_cb+0x2f4>)
   1ccca:	681c      	ldr	r4, [r3, #0]
   1cccc:	ab09      	add	r3, sp, #36	; 0x24
   1ccce:	7c1a      	ldrb	r2, [r3, #16]
   1ccd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ccd2:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ccd4:	47a0      	blx	r4
			}
		}
	}
}
   1ccd6:	e017      	b.n	1cd08 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   1ccd8:	2300      	movs	r3, #0
   1ccda:	2204      	movs	r2, #4
   1ccdc:	a909      	add	r1, sp, #36	; 0x24
   1ccde:	0020      	movs	r0, r4
   1cce0:	4c97      	ldr	r4, [pc, #604]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1cce2:	47a0      	blx	r4
   1cce4:	2800      	cmp	r0, #0
   1cce6:	d10f      	bne.n	1cd08 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
   1cce8:	ab09      	add	r3, sp, #36	; 0x24
   1ccea:	785a      	ldrb	r2, [r3, #1]
   1ccec:	ab05      	add	r3, sp, #20
   1ccee:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1ccf0:	4b95      	ldr	r3, [pc, #596]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1ccf2:	681b      	ldr	r3, [r3, #0]
   1ccf4:	2b00      	cmp	r3, #0
   1ccf6:	d007      	beq.n	1cd08 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   1ccf8:	4b93      	ldr	r3, [pc, #588]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1ccfa:	681b      	ldr	r3, [r3, #0]
   1ccfc:	aa09      	add	r2, sp, #36	; 0x24
   1ccfe:	2000      	movs	r0, #0
   1cd00:	5610      	ldrsb	r0, [r2, r0]
   1cd02:	aa05      	add	r2, sp, #20
   1cd04:	2101      	movs	r1, #1
   1cd06:	4798      	blx	r3
}
   1cd08:	b01a      	add	sp, #104	; 0x68
   1cd0a:	bc1c      	pop	{r2, r3, r4}
   1cd0c:	4690      	mov	r8, r2
   1cd0e:	4699      	mov	r9, r3
   1cd10:	46a2      	mov	sl, r4
   1cd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   1cd14:	2300      	movs	r3, #0
   1cd16:	2204      	movs	r2, #4
   1cd18:	a909      	add	r1, sp, #36	; 0x24
   1cd1a:	0020      	movs	r0, r4
   1cd1c:	4c88      	ldr	r4, [pc, #544]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1cd1e:	47a0      	blx	r4
   1cd20:	2800      	cmp	r0, #0
   1cd22:	d1f1      	bne.n	1cd08 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
   1cd24:	ab09      	add	r3, sp, #36	; 0x24
   1cd26:	785a      	ldrb	r2, [r3, #1]
   1cd28:	ab05      	add	r3, sp, #20
   1cd2a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1cd2c:	4b86      	ldr	r3, [pc, #536]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cd2e:	681b      	ldr	r3, [r3, #0]
   1cd30:	2b00      	cmp	r3, #0
   1cd32:	d0e9      	beq.n	1cd08 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   1cd34:	4b84      	ldr	r3, [pc, #528]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cd36:	681b      	ldr	r3, [r3, #0]
   1cd38:	aa09      	add	r2, sp, #36	; 0x24
   1cd3a:	2000      	movs	r0, #0
   1cd3c:	5610      	ldrsb	r0, [r2, r0]
   1cd3e:	aa05      	add	r2, sp, #20
   1cd40:	2102      	movs	r1, #2
   1cd42:	4798      	blx	r3
   1cd44:	e7e0      	b.n	1cd08 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1cd46:	2300      	movs	r3, #0
   1cd48:	220c      	movs	r2, #12
   1cd4a:	a905      	add	r1, sp, #20
   1cd4c:	0020      	movs	r0, r4
   1cd4e:	4c7c      	ldr	r4, [pc, #496]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1cd50:	47a0      	blx	r4
   1cd52:	2800      	cmp	r0, #0
   1cd54:	d1d8      	bne.n	1cd08 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
   1cd56:	ab05      	add	r3, sp, #20
   1cd58:	2209      	movs	r2, #9
   1cd5a:	569a      	ldrsb	r2, [r3, r2]
   1cd5c:	2a00      	cmp	r2, #0
   1cd5e:	db24      	blt.n	1cdaa <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1cd60:	0018      	movs	r0, r3
   1cd62:	2108      	movs	r1, #8
   1cd64:	5659      	ldrsb	r1, [r3, r1]
   1cd66:	4b79      	ldr	r3, [pc, #484]	; (1cf4c <m2m_ip_cb+0x2fc>)
   1cd68:	0109      	lsls	r1, r1, #4
   1cd6a:	1859      	adds	r1, r3, r1
   1cd6c:	7ac9      	ldrb	r1, [r1, #11]
   1cd6e:	b2c9      	uxtb	r1, r1
   1cd70:	0114      	lsls	r4, r2, #4
   1cd72:	191b      	adds	r3, r3, r4
   1cd74:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   1cd76:	2101      	movs	r1, #1
   1cd78:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cd7a:	8941      	ldrh	r1, [r0, #10]
   1cd7c:	3908      	subs	r1, #8
   1cd7e:	b289      	uxth	r1, r1
   1cd80:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
   1cd82:	4973      	ldr	r1, [pc, #460]	; (1cf50 <m2m_ip_cb+0x300>)
   1cd84:	880b      	ldrh	r3, [r1, #0]
   1cd86:	3301      	adds	r3, #1
   1cd88:	b29b      	uxth	r3, r3
   1cd8a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
   1cd8c:	880b      	ldrh	r3, [r1, #0]
   1cd8e:	b29b      	uxth	r3, r3
   1cd90:	2b00      	cmp	r3, #0
   1cd92:	d103      	bne.n	1cd9c <m2m_ip_cb+0x14c>
					++gu16SessionID;
   1cd94:	880b      	ldrh	r3, [r1, #0]
   1cd96:	3301      	adds	r3, #1
   1cd98:	b29b      	uxth	r3, r3
   1cd9a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   1cd9c:	4b6c      	ldr	r3, [pc, #432]	; (1cf50 <m2m_ip_cb+0x300>)
   1cd9e:	8819      	ldrh	r1, [r3, #0]
   1cda0:	b289      	uxth	r1, r1
   1cda2:	0110      	lsls	r0, r2, #4
   1cda4:	4b69      	ldr	r3, [pc, #420]	; (1cf4c <m2m_ip_cb+0x2fc>)
   1cda6:	181b      	adds	r3, r3, r0
   1cda8:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1cdaa:	ab09      	add	r3, sp, #36	; 0x24
   1cdac:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   1cdae:	2202      	movs	r2, #2
   1cdb0:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   1cdb2:	aa05      	add	r2, sp, #20
   1cdb4:	8851      	ldrh	r1, [r2, #2]
   1cdb6:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1cdb8:	9a06      	ldr	r2, [sp, #24]
   1cdba:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
   1cdbc:	4b62      	ldr	r3, [pc, #392]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cdbe:	681b      	ldr	r3, [r3, #0]
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	d0a1      	beq.n	1cd08 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   1cdc4:	4b60      	ldr	r3, [pc, #384]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cdc6:	681b      	ldr	r3, [r3, #0]
   1cdc8:	aa05      	add	r2, sp, #20
   1cdca:	2008      	movs	r0, #8
   1cdcc:	5610      	ldrsb	r0, [r2, r0]
   1cdce:	aa09      	add	r2, sp, #36	; 0x24
   1cdd0:	2104      	movs	r1, #4
   1cdd2:	4798      	blx	r3
   1cdd4:	e798      	b.n	1cd08 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   1cdd6:	2300      	movs	r3, #0
   1cdd8:	2204      	movs	r2, #4
   1cdda:	a909      	add	r1, sp, #36	; 0x24
   1cddc:	0020      	movs	r0, r4
   1cdde:	4c58      	ldr	r4, [pc, #352]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1cde0:	47a0      	blx	r4
   1cde2:	2800      	cmp	r0, #0
   1cde4:	d000      	beq.n	1cde8 <m2m_ip_cb+0x198>
   1cde6:	e78f      	b.n	1cd08 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
   1cde8:	ab09      	add	r3, sp, #36	; 0x24
   1cdea:	2000      	movs	r0, #0
   1cdec:	5618      	ldrsb	r0, [r3, r0]
   1cdee:	aa05      	add	r2, sp, #20
   1cdf0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1cdf2:	785b      	ldrb	r3, [r3, #1]
   1cdf4:	b25b      	sxtb	r3, r3
   1cdf6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   1cdf8:	2b00      	cmp	r3, #0
   1cdfa:	d107      	bne.n	1ce0c <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cdfc:	ab09      	add	r3, sp, #36	; 0x24
   1cdfe:	885b      	ldrh	r3, [r3, #2]
   1ce00:	3b08      	subs	r3, #8
   1ce02:	b29b      	uxth	r3, r3
   1ce04:	0101      	lsls	r1, r0, #4
   1ce06:	4a51      	ldr	r2, [pc, #324]	; (1cf4c <m2m_ip_cb+0x2fc>)
   1ce08:	1852      	adds	r2, r2, r1
   1ce0a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
   1ce0c:	4b4e      	ldr	r3, [pc, #312]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1ce0e:	681b      	ldr	r3, [r3, #0]
   1ce10:	2b00      	cmp	r3, #0
   1ce12:	d100      	bne.n	1ce16 <m2m_ip_cb+0x1c6>
   1ce14:	e778      	b.n	1cd08 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   1ce16:	4b4c      	ldr	r3, [pc, #304]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1ce18:	681b      	ldr	r3, [r3, #0]
   1ce1a:	aa05      	add	r2, sp, #20
   1ce1c:	2105      	movs	r1, #5
   1ce1e:	4798      	blx	r3
	{
   1ce20:	e772      	b.n	1cd08 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   1ce22:	2300      	movs	r3, #0
   1ce24:	2244      	movs	r2, #68	; 0x44
   1ce26:	a909      	add	r1, sp, #36	; 0x24
   1ce28:	0020      	movs	r0, r4
   1ce2a:	4c45      	ldr	r4, [pc, #276]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1ce2c:	47a0      	blx	r4
   1ce2e:	2800      	cmp	r0, #0
   1ce30:	d000      	beq.n	1ce34 <m2m_ip_cb+0x1e4>
   1ce32:	e769      	b.n	1cd08 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
   1ce34:	4b47      	ldr	r3, [pc, #284]	; (1cf54 <m2m_ip_cb+0x304>)
   1ce36:	681b      	ldr	r3, [r3, #0]
   1ce38:	2b00      	cmp	r3, #0
   1ce3a:	d100      	bne.n	1ce3e <m2m_ip_cb+0x1ee>
   1ce3c:	e764      	b.n	1cd08 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   1ce3e:	4b45      	ldr	r3, [pc, #276]	; (1cf54 <m2m_ip_cb+0x304>)
   1ce40:	681b      	ldr	r3, [r3, #0]
   1ce42:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1ce44:	9203      	str	r2, [sp, #12]
   1ce46:	0011      	movs	r1, r2
   1ce48:	a809      	add	r0, sp, #36	; 0x24
   1ce4a:	4798      	blx	r3
   1ce4c:	e75c      	b.n	1cd08 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1ce4e:	2306      	movs	r3, #6
   1ce50:	469a      	mov	sl, r3
   1ce52:	e001      	b.n	1ce58 <m2m_ip_cb+0x208>
   1ce54:	2306      	movs	r3, #6
   1ce56:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1ce58:	2300      	movs	r3, #0
   1ce5a:	2210      	movs	r2, #16
   1ce5c:	a905      	add	r1, sp, #20
   1ce5e:	0020      	movs	r0, r4
   1ce60:	4f37      	ldr	r7, [pc, #220]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1ce62:	47b8      	blx	r7
   1ce64:	2800      	cmp	r0, #0
   1ce66:	d000      	beq.n	1ce6a <m2m_ip_cb+0x21a>
   1ce68:	e74e      	b.n	1cd08 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
   1ce6a:	aa05      	add	r2, sp, #20
   1ce6c:	200c      	movs	r0, #12
   1ce6e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
   1ce70:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
   1ce72:	0107      	lsls	r7, r0, #4
   1ce74:	4935      	ldr	r1, [pc, #212]	; (1cf4c <m2m_ip_cb+0x2fc>)
   1ce76:	19c9      	adds	r1, r1, r7
   1ce78:	2700      	movs	r7, #0
   1ce7a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   1ce7c:	2608      	movs	r6, #8
   1ce7e:	5f97      	ldrsh	r7, [r2, r6]
   1ce80:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   1ce82:	8957      	ldrh	r7, [r2, #10]
   1ce84:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   1ce86:	af09      	add	r7, sp, #36	; 0x24
   1ce88:	8856      	ldrh	r6, [r2, #2]
   1ce8a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   1ce8c:	9a06      	ldr	r2, [sp, #24]
   1ce8e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1ce90:	88ca      	ldrh	r2, [r1, #6]
   1ce92:	b292      	uxth	r2, r2
   1ce94:	4293      	cmp	r3, r2
   1ce96:	d00c      	beq.n	1ceb2 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
   1ce98:	2d10      	cmp	r5, #16
   1ce9a:	d800      	bhi.n	1ce9e <m2m_ip_cb+0x24e>
   1ce9c:	e734      	b.n	1cd08 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1ce9e:	2301      	movs	r3, #1
   1cea0:	2200      	movs	r2, #0
   1cea2:	2100      	movs	r1, #0
   1cea4:	2000      	movs	r0, #0
   1cea6:	4c26      	ldr	r4, [pc, #152]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1cea8:	47a0      	blx	r4
	{
   1ceaa:	e72d      	b.n	1cd08 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1ceac:	2309      	movs	r3, #9
   1ceae:	469a      	mov	sl, r3
   1ceb0:	e7d2      	b.n	1ce58 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   1ceb2:	4643      	mov	r3, r8
   1ceb4:	2b00      	cmp	r3, #0
   1ceb6:	dd01      	ble.n	1cebc <m2m_ip_cb+0x26c>
   1ceb8:	45a8      	cmp	r8, r5
   1ceba:	db0f      	blt.n	1cedc <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   1cebc:	ab09      	add	r3, sp, #36	; 0x24
   1cebe:	4642      	mov	r2, r8
   1cec0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1cec2:	2300      	movs	r3, #0
   1cec4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
   1cec6:	4b20      	ldr	r3, [pc, #128]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cec8:	681b      	ldr	r3, [r3, #0]
   1ceca:	2b00      	cmp	r3, #0
   1cecc:	d100      	bne.n	1ced0 <m2m_ip_cb+0x280>
   1cece:	e71b      	b.n	1cd08 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1ced0:	4b1d      	ldr	r3, [pc, #116]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1ced2:	681b      	ldr	r3, [r3, #0]
   1ced4:	aa09      	add	r2, sp, #36	; 0x24
   1ced6:	4651      	mov	r1, sl
   1ced8:	4798      	blx	r3
   1ceda:	e715      	b.n	1cd08 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
   1cedc:	0023      	movs	r3, r4
   1cede:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1cee0:	4642      	mov	r2, r8
   1cee2:	4669      	mov	r1, sp
   1cee4:	818a      	strh	r2, [r1, #12]
   1cee6:	898a      	ldrh	r2, [r1, #12]
   1cee8:	9200      	str	r2, [sp, #0]
   1ceea:	4652      	mov	r2, sl
   1ceec:	0039      	movs	r1, r7
   1ceee:	4c1a      	ldr	r4, [pc, #104]	; (1cf58 <m2m_ip_cb+0x308>)
   1cef0:	47a0      	blx	r4
   1cef2:	e709      	b.n	1cd08 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cef4:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   1cef6:	2300      	movs	r3, #0
   1cef8:	2208      	movs	r2, #8
   1cefa:	a909      	add	r1, sp, #36	; 0x24
   1cefc:	0020      	movs	r0, r4
   1cefe:	4c10      	ldr	r4, [pc, #64]	; (1cf40 <m2m_ip_cb+0x2f0>)
   1cf00:	47a0      	blx	r4
   1cf02:	2800      	cmp	r0, #0
   1cf04:	d000      	beq.n	1cf08 <m2m_ip_cb+0x2b8>
   1cf06:	e6ff      	b.n	1cd08 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
   1cf08:	ab09      	add	r3, sp, #36	; 0x24
   1cf0a:	2000      	movs	r0, #0
   1cf0c:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
   1cf0e:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   1cf10:	8859      	ldrh	r1, [r3, #2]
   1cf12:	ab05      	add	r3, sp, #20
   1cf14:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1cf16:	0101      	lsls	r1, r0, #4
   1cf18:	4b0c      	ldr	r3, [pc, #48]	; (1cf4c <m2m_ip_cb+0x2fc>)
   1cf1a:	185b      	adds	r3, r3, r1
   1cf1c:	88db      	ldrh	r3, [r3, #6]
   1cf1e:	b29b      	uxth	r3, r3
   1cf20:	429a      	cmp	r2, r3
   1cf22:	d000      	beq.n	1cf26 <m2m_ip_cb+0x2d6>
   1cf24:	e6f0      	b.n	1cd08 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
   1cf26:	4b08      	ldr	r3, [pc, #32]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cf28:	681b      	ldr	r3, [r3, #0]
   1cf2a:	2b00      	cmp	r3, #0
   1cf2c:	d100      	bne.n	1cf30 <m2m_ip_cb+0x2e0>
   1cf2e:	e6eb      	b.n	1cd08 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   1cf30:	4b05      	ldr	r3, [pc, #20]	; (1cf48 <m2m_ip_cb+0x2f8>)
   1cf32:	681b      	ldr	r3, [r3, #0]
   1cf34:	aa05      	add	r2, sp, #20
   1cf36:	0029      	movs	r1, r5
   1cf38:	4798      	blx	r3
	{
   1cf3a:	e6e5      	b.n	1cd08 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   1cf3c:	2508      	movs	r5, #8
   1cf3e:	e7da      	b.n	1cef6 <m2m_ip_cb+0x2a6>
   1cf40:	0001acb1 	.word	0x0001acb1
   1cf44:	20005514 	.word	0x20005514
   1cf48:	20005510 	.word	0x20005510
   1cf4c:	20005460 	.word	0x20005460
   1cf50:	20003cee 	.word	0x20003cee
   1cf54:	20005518 	.word	0x20005518
   1cf58:	0001cb41 	.word	0x0001cb41

0001cf5c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   1cf5c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
   1cf5e:	4b0a      	ldr	r3, [pc, #40]	; (1cf88 <socketInit+0x2c>)
   1cf60:	781b      	ldrb	r3, [r3, #0]
   1cf62:	2b00      	cmp	r3, #0
   1cf64:	d000      	beq.n	1cf68 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
   1cf66:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1cf68:	22b0      	movs	r2, #176	; 0xb0
   1cf6a:	2100      	movs	r1, #0
   1cf6c:	4807      	ldr	r0, [pc, #28]	; (1cf8c <socketInit+0x30>)
   1cf6e:	4b08      	ldr	r3, [pc, #32]	; (1cf90 <socketInit+0x34>)
   1cf70:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   1cf72:	4908      	ldr	r1, [pc, #32]	; (1cf94 <socketInit+0x38>)
   1cf74:	2002      	movs	r0, #2
   1cf76:	4b08      	ldr	r3, [pc, #32]	; (1cf98 <socketInit+0x3c>)
   1cf78:	4798      	blx	r3
		gbSocketInit	= 1;
   1cf7a:	2201      	movs	r2, #1
   1cf7c:	4b02      	ldr	r3, [pc, #8]	; (1cf88 <socketInit+0x2c>)
   1cf7e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1cf80:	2200      	movs	r2, #0
   1cf82:	4b06      	ldr	r3, [pc, #24]	; (1cf9c <socketInit+0x40>)
   1cf84:	801a      	strh	r2, [r3, #0]
}
   1cf86:	e7ee      	b.n	1cf66 <socketInit+0xa>
   1cf88:	20003ced 	.word	0x20003ced
   1cf8c:	20005460 	.word	0x20005460
   1cf90:	0001a5c1 	.word	0x0001a5c1
   1cf94:	0001cc51 	.word	0x0001cc51
   1cf98:	0001ad89 	.word	0x0001ad89
   1cf9c:	20003cee 	.word	0x20003cee

0001cfa0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   1cfa0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1cfa2:	22b0      	movs	r2, #176	; 0xb0
   1cfa4:	2100      	movs	r1, #0
   1cfa6:	4807      	ldr	r0, [pc, #28]	; (1cfc4 <socketDeinit+0x24>)
   1cfa8:	4b07      	ldr	r3, [pc, #28]	; (1cfc8 <socketDeinit+0x28>)
   1cfaa:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   1cfac:	2100      	movs	r1, #0
   1cfae:	2002      	movs	r0, #2
   1cfb0:	4b06      	ldr	r3, [pc, #24]	; (1cfcc <socketDeinit+0x2c>)
   1cfb2:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   1cfb4:	2300      	movs	r3, #0
   1cfb6:	4a06      	ldr	r2, [pc, #24]	; (1cfd0 <socketDeinit+0x30>)
   1cfb8:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
   1cfba:	4a06      	ldr	r2, [pc, #24]	; (1cfd4 <socketDeinit+0x34>)
   1cfbc:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
   1cfbe:	4a06      	ldr	r2, [pc, #24]	; (1cfd8 <socketDeinit+0x38>)
   1cfc0:	7013      	strb	r3, [r2, #0]
}
   1cfc2:	bd10      	pop	{r4, pc}
   1cfc4:	20005460 	.word	0x20005460
   1cfc8:	0001a5c1 	.word	0x0001a5c1
   1cfcc:	0001ad89 	.word	0x0001ad89
   1cfd0:	20005510 	.word	0x20005510
   1cfd4:	20005518 	.word	0x20005518
   1cfd8:	20003ced 	.word	0x20003ced

0001cfdc <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
   1cfdc:	4b02      	ldr	r3, [pc, #8]	; (1cfe8 <registerSocketCallback+0xc>)
   1cfde:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   1cfe0:	4b02      	ldr	r3, [pc, #8]	; (1cfec <registerSocketCallback+0x10>)
   1cfe2:	6019      	str	r1, [r3, #0]
}
   1cfe4:	4770      	bx	lr
   1cfe6:	46c0      	nop			; (mov r8, r8)
   1cfe8:	20005510 	.word	0x20005510
   1cfec:	20005518 	.word	0x20005518

0001cff0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   1cff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cff2:	46d6      	mov	lr, sl
   1cff4:	4647      	mov	r7, r8
   1cff6:	b580      	push	{r7, lr}
   1cff8:	b089      	sub	sp, #36	; 0x24
   1cffa:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   1cffc:	2802      	cmp	r0, #2
   1cffe:	d000      	beq.n	1d002 <socket+0x12>
   1d000:	e09b      	b.n	1d13a <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
   1d002:	2901      	cmp	r1, #1
   1d004:	d00a      	beq.n	1d01c <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   1d006:	2902      	cmp	r1, #2
   1d008:	d100      	bne.n	1d00c <socket+0x1c>
   1d00a:	e06f      	b.n	1d0ec <socket+0xfc>
	SOCKET					sock = -1;
   1d00c:	2501      	movs	r5, #1
   1d00e:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
   1d010:	0028      	movs	r0, r5
   1d012:	b009      	add	sp, #36	; 0x24
   1d014:	bc0c      	pop	{r2, r3}
   1d016:	4690      	mov	r8, r2
   1d018:	469a      	mov	sl, r3
   1d01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
   1d01c:	4c48      	ldr	r4, [pc, #288]	; (1d140 <socket+0x150>)
   1d01e:	7827      	ldrb	r7, [r4, #0]
   1d020:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1d022:	7826      	ldrb	r6, [r4, #0]
   1d024:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1d026:	7820      	ldrb	r0, [r4, #0]
   1d028:	3001      	adds	r0, #1
   1d02a:	3106      	adds	r1, #6
   1d02c:	4b45      	ldr	r3, [pc, #276]	; (1d144 <socket+0x154>)
   1d02e:	4798      	blx	r3
   1d030:	b2c9      	uxtb	r1, r1
   1d032:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
   1d034:	0132      	lsls	r2, r6, #4
   1d036:	4b44      	ldr	r3, [pc, #272]	; (1d148 <socket+0x158>)
   1d038:	189b      	adds	r3, r3, r2
   1d03a:	7a9b      	ldrb	r3, [r3, #10]
   1d03c:	2506      	movs	r5, #6
   1d03e:	2b00      	cmp	r3, #0
   1d040:	d018      	beq.n	1d074 <socket+0x84>
				u8SockID	= u8NextTcpSock;
   1d042:	4e3f      	ldr	r6, [pc, #252]	; (1d140 <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1d044:	4b3f      	ldr	r3, [pc, #252]	; (1d144 <socket+0x154>)
   1d046:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
   1d048:	4b3f      	ldr	r3, [pc, #252]	; (1d148 <socket+0x158>)
   1d04a:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
   1d04c:	7837      	ldrb	r7, [r6, #0]
   1d04e:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1d050:	7834      	ldrb	r4, [r6, #0]
   1d052:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1d054:	7830      	ldrb	r0, [r6, #0]
   1d056:	3001      	adds	r0, #1
   1d058:	2107      	movs	r1, #7
   1d05a:	47d0      	blx	sl
   1d05c:	b2c9      	uxtb	r1, r1
   1d05e:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
   1d060:	0123      	lsls	r3, r4, #4
   1d062:	4443      	add	r3, r8
   1d064:	7a9b      	ldrb	r3, [r3, #10]
   1d066:	2b00      	cmp	r3, #0
   1d068:	d007      	beq.n	1d07a <socket+0x8a>
   1d06a:	3d01      	subs	r5, #1
   1d06c:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   1d06e:	2d00      	cmp	r5, #0
   1d070:	d1ec      	bne.n	1d04c <socket+0x5c>
   1d072:	e7cb      	b.n	1d00c <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1d074:	4b34      	ldr	r3, [pc, #208]	; (1d148 <socket+0x158>)
   1d076:	18d4      	adds	r4, r2, r3
   1d078:	e002      	b.n	1d080 <socket+0x90>
   1d07a:	0124      	lsls	r4, r4, #4
   1d07c:	4b32      	ldr	r3, [pc, #200]	; (1d148 <socket+0x158>)
   1d07e:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
   1d080:	b27d      	sxtb	r5, r7
		if(sock >= 0)
   1d082:	2d00      	cmp	r5, #0
   1d084:	dbc4      	blt.n	1d010 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   1d086:	2210      	movs	r2, #16
   1d088:	2100      	movs	r1, #0
   1d08a:	0020      	movs	r0, r4
   1d08c:	4b2f      	ldr	r3, [pc, #188]	; (1d14c <socket+0x15c>)
   1d08e:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   1d090:	2301      	movs	r3, #1
   1d092:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
   1d094:	4a2e      	ldr	r2, [pc, #184]	; (1d150 <socket+0x160>)
   1d096:	8813      	ldrh	r3, [r2, #0]
   1d098:	3301      	adds	r3, #1
   1d09a:	b29b      	uxth	r3, r3
   1d09c:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
   1d09e:	8813      	ldrh	r3, [r2, #0]
   1d0a0:	b29b      	uxth	r3, r3
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d103      	bne.n	1d0ae <socket+0xbe>
				++gu16SessionID;
   1d0a6:	8813      	ldrh	r3, [r2, #0]
   1d0a8:	3301      	adds	r3, #1
   1d0aa:	b29b      	uxth	r3, r3
   1d0ac:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
   1d0ae:	4e28      	ldr	r6, [pc, #160]	; (1d150 <socket+0x160>)
   1d0b0:	8833      	ldrh	r3, [r6, #0]
   1d0b2:	b29b      	uxth	r3, r3
   1d0b4:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   1d0b6:	4827      	ldr	r0, [pc, #156]	; (1d154 <socket+0x164>)
   1d0b8:	4f27      	ldr	r7, [pc, #156]	; (1d158 <socket+0x168>)
   1d0ba:	47b8      	blx	r7
   1d0bc:	8832      	ldrh	r2, [r6, #0]
   1d0be:	b292      	uxth	r2, r2
   1d0c0:	0029      	movs	r1, r5
   1d0c2:	4826      	ldr	r0, [pc, #152]	; (1d15c <socket+0x16c>)
   1d0c4:	47b8      	blx	r7
   1d0c6:	4826      	ldr	r0, [pc, #152]	; (1d160 <socket+0x170>)
   1d0c8:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
   1d0ca:	9b05      	ldr	r3, [sp, #20]
   1d0cc:	07db      	lsls	r3, r3, #31
   1d0ce:	d59f      	bpl.n	1d010 <socket+0x20>
				strSSLCreate.sslSock = sock;
   1d0d0:	aa07      	add	r2, sp, #28
   1d0d2:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   1d0d4:	2321      	movs	r3, #33	; 0x21
   1d0d6:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   1d0d8:	2300      	movs	r3, #0
   1d0da:	9302      	str	r3, [sp, #8]
   1d0dc:	9301      	str	r3, [sp, #4]
   1d0de:	9300      	str	r3, [sp, #0]
   1d0e0:	3304      	adds	r3, #4
   1d0e2:	2150      	movs	r1, #80	; 0x50
   1d0e4:	2002      	movs	r0, #2
   1d0e6:	4c1f      	ldr	r4, [pc, #124]	; (1d164 <socket+0x174>)
   1d0e8:	47a0      	blx	r4
   1d0ea:	e791      	b.n	1d010 <socket+0x20>
				u8SockID		= u8NextUdpSock;
   1d0ec:	4b1e      	ldr	r3, [pc, #120]	; (1d168 <socket+0x178>)
   1d0ee:	781d      	ldrb	r5, [r3, #0]
   1d0f0:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d0f2:	781c      	ldrb	r4, [r3, #0]
   1d0f4:	0124      	lsls	r4, r4, #4
   1d0f6:	4a1d      	ldr	r2, [pc, #116]	; (1d16c <socket+0x17c>)
   1d0f8:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d0fa:	7819      	ldrb	r1, [r3, #0]
   1d0fc:	3101      	adds	r1, #1
   1d0fe:	2203      	movs	r2, #3
   1d100:	400a      	ands	r2, r1
   1d102:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   1d104:	7aa3      	ldrb	r3, [r4, #10]
   1d106:	2b00      	cmp	r3, #0
   1d108:	d014      	beq.n	1d134 <socket+0x144>
   1d10a:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
   1d10c:	4916      	ldr	r1, [pc, #88]	; (1d168 <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d10e:	4f17      	ldr	r7, [pc, #92]	; (1d16c <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d110:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
   1d112:	780d      	ldrb	r5, [r1, #0]
   1d114:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d116:	780c      	ldrb	r4, [r1, #0]
   1d118:	0124      	lsls	r4, r4, #4
   1d11a:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d11c:	780b      	ldrb	r3, [r1, #0]
   1d11e:	3301      	adds	r3, #1
   1d120:	4003      	ands	r3, r0
   1d122:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
   1d124:	7aa3      	ldrb	r3, [r4, #10]
   1d126:	2b00      	cmp	r3, #0
   1d128:	d004      	beq.n	1d134 <socket+0x144>
   1d12a:	3a01      	subs	r2, #1
   1d12c:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   1d12e:	2a00      	cmp	r2, #0
   1d130:	d1ef      	bne.n	1d112 <socket+0x122>
   1d132:	e76b      	b.n	1d00c <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1d134:	3507      	adds	r5, #7
   1d136:	b26d      	sxtb	r5, r5
					break;
   1d138:	e7a3      	b.n	1d082 <socket+0x92>
	SOCKET					sock = -1;
   1d13a:	2501      	movs	r5, #1
   1d13c:	426d      	negs	r5, r5
   1d13e:	e767      	b.n	1d010 <socket+0x20>
   1d140:	20003cf0 	.word	0x20003cf0
   1d144:	00024319 	.word	0x00024319
   1d148:	20005460 	.word	0x20005460
   1d14c:	0001a5c1 	.word	0x0001a5c1
   1d150:	20003cee 	.word	0x20003cee
   1d154:	00029964 	.word	0x00029964
   1d158:	000190ad 	.word	0x000190ad
   1d15c:	0002a430 	.word	0x0002a430
   1d160:	00029650 	.word	0x00029650
   1d164:	0001a6d5 	.word	0x0001a6d5
   1d168:	20003cf1 	.word	0x20003cf1
   1d16c:	200054d0 	.word	0x200054d0

0001d170 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   1d170:	b570      	push	{r4, r5, r6, lr}
   1d172:	b088      	sub	sp, #32
   1d174:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   1d176:	db30      	blt.n	1d1da <connect+0x6a>
   1d178:	2900      	cmp	r1, #0
   1d17a:	d031      	beq.n	1d1e0 <connect+0x70>
   1d17c:	0100      	lsls	r0, r0, #4
   1d17e:	4b1d      	ldr	r3, [pc, #116]	; (1d1f4 <connect+0x84>)
   1d180:	181b      	adds	r3, r3, r0
   1d182:	7a9b      	ldrb	r3, [r3, #10]
   1d184:	2b01      	cmp	r3, #1
   1d186:	d12e      	bne.n	1d1e6 <connect+0x76>
   1d188:	2a00      	cmp	r2, #0
   1d18a:	d02f      	beq.n	1d1ec <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d18c:	4b19      	ldr	r3, [pc, #100]	; (1d1f4 <connect+0x84>)
   1d18e:	181b      	adds	r3, r3, r0
   1d190:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   1d192:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d194:	07db      	lsls	r3, r3, #31
   1d196:	d505      	bpl.n	1d1a4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   1d198:	4b16      	ldr	r3, [pc, #88]	; (1d1f4 <connect+0x84>)
   1d19a:	181b      	adds	r3, r3, r0
   1d19c:	7ada      	ldrb	r2, [r3, #11]
   1d19e:	ab05      	add	r3, sp, #20
   1d1a0:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   1d1a2:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
   1d1a4:	ad05      	add	r5, sp, #20
   1d1a6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   1d1a8:	2208      	movs	r2, #8
   1d1aa:	0028      	movs	r0, r5
   1d1ac:	4b12      	ldr	r3, [pc, #72]	; (1d1f8 <connect+0x88>)
   1d1ae:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d1b0:	0124      	lsls	r4, r4, #4
   1d1b2:	4b10      	ldr	r3, [pc, #64]	; (1d1f4 <connect+0x84>)
   1d1b4:	191c      	adds	r4, r3, r4
   1d1b6:	88e3      	ldrh	r3, [r4, #6]
   1d1b8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   1d1ba:	2300      	movs	r3, #0
   1d1bc:	9302      	str	r3, [sp, #8]
   1d1be:	9301      	str	r3, [sp, #4]
   1d1c0:	9300      	str	r3, [sp, #0]
   1d1c2:	330c      	adds	r3, #12
   1d1c4:	002a      	movs	r2, r5
   1d1c6:	0031      	movs	r1, r6
   1d1c8:	2002      	movs	r0, #2
   1d1ca:	4c0c      	ldr	r4, [pc, #48]	; (1d1fc <connect+0x8c>)
   1d1cc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d1ce:	2800      	cmp	r0, #0
   1d1d0:	d001      	beq.n	1d1d6 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d1d2:	2009      	movs	r0, #9
   1d1d4:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
   1d1d6:	b008      	add	sp, #32
   1d1d8:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d1da:	2006      	movs	r0, #6
   1d1dc:	4240      	negs	r0, r0
   1d1de:	e7fa      	b.n	1d1d6 <connect+0x66>
   1d1e0:	2006      	movs	r0, #6
   1d1e2:	4240      	negs	r0, r0
   1d1e4:	e7f7      	b.n	1d1d6 <connect+0x66>
   1d1e6:	2006      	movs	r0, #6
   1d1e8:	4240      	negs	r0, r0
   1d1ea:	e7f4      	b.n	1d1d6 <connect+0x66>
   1d1ec:	2006      	movs	r0, #6
   1d1ee:	4240      	negs	r0, r0
   1d1f0:	e7f1      	b.n	1d1d6 <connect+0x66>
   1d1f2:	46c0      	nop			; (mov r8, r8)
   1d1f4:	20005460 	.word	0x20005460
   1d1f8:	0001a5ad 	.word	0x0001a5ad
   1d1fc:	0001a6d5 	.word	0x0001a6d5

0001d200 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   1d200:	b530      	push	{r4, r5, lr}
   1d202:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   1d204:	2800      	cmp	r0, #0
   1d206:	db36      	blt.n	1d276 <send+0x76>
   1d208:	2900      	cmp	r1, #0
   1d20a:	d037      	beq.n	1d27c <send+0x7c>
   1d20c:	23af      	movs	r3, #175	; 0xaf
   1d20e:	00db      	lsls	r3, r3, #3
   1d210:	429a      	cmp	r2, r3
   1d212:	d836      	bhi.n	1d282 <send+0x82>
   1d214:	0104      	lsls	r4, r0, #4
   1d216:	4b1e      	ldr	r3, [pc, #120]	; (1d290 <send+0x90>)
   1d218:	191b      	adds	r3, r3, r4
   1d21a:	7a9b      	ldrb	r3, [r3, #10]
   1d21c:	2b01      	cmp	r3, #1
   1d21e:	d133      	bne.n	1d288 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
   1d220:	ab04      	add	r3, sp, #16
   1d222:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   1d224:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   1d226:	0025      	movs	r5, r4
   1d228:	4c19      	ldr	r4, [pc, #100]	; (1d290 <send+0x90>)
   1d22a:	1964      	adds	r4, r4, r5
   1d22c:	88e4      	ldrh	r4, [r4, #6]
   1d22e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   1d230:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
   1d232:	2806      	cmp	r0, #6
   1d234:	dd00      	ble.n	1d238 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   1d236:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d238:	0104      	lsls	r4, r0, #4
   1d23a:	4b15      	ldr	r3, [pc, #84]	; (1d290 <send+0x90>)
   1d23c:	191b      	adds	r3, r3, r4
   1d23e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
   1d240:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d242:	07e4      	lsls	r4, r4, #31
   1d244:	d505      	bpl.n	1d252 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   1d246:	0100      	lsls	r0, r0, #4
   1d248:	4b11      	ldr	r3, [pc, #68]	; (1d290 <send+0x90>)
   1d24a:	1818      	adds	r0, r3, r0
   1d24c:	8905      	ldrh	r5, [r0, #8]
   1d24e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   1d250:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   1d252:	2080      	movs	r0, #128	; 0x80
   1d254:	4318      	orrs	r0, r3
   1d256:	9502      	str	r5, [sp, #8]
   1d258:	9201      	str	r2, [sp, #4]
   1d25a:	9100      	str	r1, [sp, #0]
   1d25c:	2310      	movs	r3, #16
   1d25e:	aa04      	add	r2, sp, #16
   1d260:	0001      	movs	r1, r0
   1d262:	2002      	movs	r0, #2
   1d264:	4c0b      	ldr	r4, [pc, #44]	; (1d294 <send+0x94>)
   1d266:	47a0      	blx	r4
   1d268:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1d26a:	2800      	cmp	r0, #0
   1d26c:	d000      	beq.n	1d270 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   1d26e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
   1d270:	0018      	movs	r0, r3
   1d272:	b009      	add	sp, #36	; 0x24
   1d274:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d276:	2306      	movs	r3, #6
   1d278:	425b      	negs	r3, r3
   1d27a:	e7f9      	b.n	1d270 <send+0x70>
   1d27c:	2306      	movs	r3, #6
   1d27e:	425b      	negs	r3, r3
   1d280:	e7f6      	b.n	1d270 <send+0x70>
   1d282:	2306      	movs	r3, #6
   1d284:	425b      	negs	r3, r3
   1d286:	e7f3      	b.n	1d270 <send+0x70>
   1d288:	2306      	movs	r3, #6
   1d28a:	425b      	negs	r3, r3
   1d28c:	e7f0      	b.n	1d270 <send+0x70>
   1d28e:	46c0      	nop			; (mov r8, r8)
   1d290:	20005460 	.word	0x20005460
   1d294:	0001a6d5 	.word	0x0001a6d5

0001d298 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1d298:	b530      	push	{r4, r5, lr}
   1d29a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   1d29c:	2800      	cmp	r0, #0
   1d29e:	db34      	blt.n	1d30a <recv+0x72>
   1d2a0:	2900      	cmp	r1, #0
   1d2a2:	d035      	beq.n	1d310 <recv+0x78>
   1d2a4:	2a00      	cmp	r2, #0
   1d2a6:	d036      	beq.n	1d316 <recv+0x7e>
   1d2a8:	0105      	lsls	r5, r0, #4
   1d2aa:	4c1e      	ldr	r4, [pc, #120]	; (1d324 <recv+0x8c>)
   1d2ac:	1964      	adds	r4, r4, r5
   1d2ae:	7aa4      	ldrb	r4, [r4, #10]
   1d2b0:	2c01      	cmp	r4, #1
   1d2b2:	d133      	bne.n	1d31c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   1d2b4:	4c1b      	ldr	r4, [pc, #108]	; (1d324 <recv+0x8c>)
   1d2b6:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   1d2b8:	1964      	adds	r4, r4, r5
   1d2ba:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
   1d2bc:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
   1d2be:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
   1d2c0:	2900      	cmp	r1, #0
   1d2c2:	d11d      	bne.n	1d300 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
   1d2c4:	2101      	movs	r1, #1
   1d2c6:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d2c8:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
   1d2ca:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d2cc:	07d2      	lsls	r2, r2, #31
   1d2ce:	d500      	bpl.n	1d2d2 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1d2d0:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   1d2d2:	2b00      	cmp	r3, #0
   1d2d4:	d117      	bne.n	1d306 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1d2d6:	3b01      	subs	r3, #1
   1d2d8:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
   1d2da:	aa04      	add	r2, sp, #16
   1d2dc:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d2de:	0100      	lsls	r0, r0, #4
   1d2e0:	4b10      	ldr	r3, [pc, #64]	; (1d324 <recv+0x8c>)
   1d2e2:	1818      	adds	r0, r3, r0
   1d2e4:	88c3      	ldrh	r3, [r0, #6]
   1d2e6:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   1d2e8:	2300      	movs	r3, #0
   1d2ea:	9302      	str	r3, [sp, #8]
   1d2ec:	9301      	str	r3, [sp, #4]
   1d2ee:	9300      	str	r3, [sp, #0]
   1d2f0:	3308      	adds	r3, #8
   1d2f2:	2002      	movs	r0, #2
   1d2f4:	4c0c      	ldr	r4, [pc, #48]	; (1d328 <recv+0x90>)
   1d2f6:	47a0      	blx	r4
   1d2f8:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1d2fa:	2800      	cmp	r0, #0
   1d2fc:	d000      	beq.n	1d300 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   1d2fe:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
   1d300:	0010      	movs	r0, r2
   1d302:	b007      	add	sp, #28
   1d304:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   1d306:	9304      	str	r3, [sp, #16]
   1d308:	e7e7      	b.n	1d2da <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d30a:	2206      	movs	r2, #6
   1d30c:	4252      	negs	r2, r2
   1d30e:	e7f7      	b.n	1d300 <recv+0x68>
   1d310:	2206      	movs	r2, #6
   1d312:	4252      	negs	r2, r2
   1d314:	e7f4      	b.n	1d300 <recv+0x68>
   1d316:	2206      	movs	r2, #6
   1d318:	4252      	negs	r2, r2
   1d31a:	e7f1      	b.n	1d300 <recv+0x68>
   1d31c:	2206      	movs	r2, #6
   1d31e:	4252      	negs	r2, r2
   1d320:	e7ee      	b.n	1d300 <recv+0x68>
   1d322:	46c0      	nop			; (mov r8, r8)
   1d324:	20005460 	.word	0x20005460
   1d328:	0001a6d5 	.word	0x0001a6d5

0001d32c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   1d32c:	b530      	push	{r4, r5, lr}
   1d32e:	b087      	sub	sp, #28
   1d330:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
   1d332:	481d      	ldr	r0, [pc, #116]	; (1d3a8 <close+0x7c>)
   1d334:	4d1d      	ldr	r5, [pc, #116]	; (1d3ac <close+0x80>)
   1d336:	47a8      	blx	r5
   1d338:	0021      	movs	r1, r4
   1d33a:	481d      	ldr	r0, [pc, #116]	; (1d3b0 <close+0x84>)
   1d33c:	47a8      	blx	r5
   1d33e:	481d      	ldr	r0, [pc, #116]	; (1d3b4 <close+0x88>)
   1d340:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   1d342:	2c00      	cmp	r4, #0
   1d344:	db2a      	blt.n	1d39c <close+0x70>
   1d346:	0122      	lsls	r2, r4, #4
   1d348:	4b1b      	ldr	r3, [pc, #108]	; (1d3b8 <close+0x8c>)
   1d34a:	189b      	adds	r3, r3, r2
   1d34c:	7a9b      	ldrb	r3, [r3, #10]
   1d34e:	2b01      	cmp	r3, #1
   1d350:	d127      	bne.n	1d3a2 <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   1d352:	a905      	add	r1, sp, #20
   1d354:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d356:	4b18      	ldr	r3, [pc, #96]	; (1d3b8 <close+0x8c>)
   1d358:	189b      	adds	r3, r3, r2
   1d35a:	88da      	ldrh	r2, [r3, #6]
   1d35c:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   1d35e:	2200      	movs	r2, #0
   1d360:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
   1d362:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d364:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1d366:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d368:	07db      	lsls	r3, r3, #31
   1d36a:	d500      	bpl.n	1d36e <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   1d36c:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   1d36e:	2300      	movs	r3, #0
   1d370:	9302      	str	r3, [sp, #8]
   1d372:	9301      	str	r3, [sp, #4]
   1d374:	9300      	str	r3, [sp, #0]
   1d376:	3304      	adds	r3, #4
   1d378:	aa05      	add	r2, sp, #20
   1d37a:	2002      	movs	r0, #2
   1d37c:	4d0f      	ldr	r5, [pc, #60]	; (1d3bc <close+0x90>)
   1d37e:	47a8      	blx	r5
   1d380:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d382:	d001      	beq.n	1d388 <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d384:	2509      	movs	r5, #9
   1d386:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   1d388:	0124      	lsls	r4, r4, #4
   1d38a:	480b      	ldr	r0, [pc, #44]	; (1d3b8 <close+0x8c>)
   1d38c:	1820      	adds	r0, r4, r0
   1d38e:	2210      	movs	r2, #16
   1d390:	2100      	movs	r1, #0
   1d392:	4b0b      	ldr	r3, [pc, #44]	; (1d3c0 <close+0x94>)
   1d394:	4798      	blx	r3
	}
	return s8Ret;
}
   1d396:	0028      	movs	r0, r5
   1d398:	b007      	add	sp, #28
   1d39a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d39c:	2506      	movs	r5, #6
   1d39e:	426d      	negs	r5, r5
   1d3a0:	e7f9      	b.n	1d396 <close+0x6a>
   1d3a2:	2506      	movs	r5, #6
   1d3a4:	426d      	negs	r5, r5
   1d3a6:	e7f6      	b.n	1d396 <close+0x6a>
   1d3a8:	00029964 	.word	0x00029964
   1d3ac:	000190ad 	.word	0x000190ad
   1d3b0:	0002a418 	.word	0x0002a418
   1d3b4:	00029650 	.word	0x00029650
   1d3b8:	20005460 	.word	0x20005460
   1d3bc:	0001a6d5 	.word	0x0001a6d5
   1d3c0:	0001a5c1 	.word	0x0001a5c1

0001d3c4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   1d3c4:	b570      	push	{r4, r5, r6, lr}
   1d3c6:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
   1d3c8:	2300      	movs	r3, #0
   1d3ca:	9301      	str	r3, [sp, #4]
   1d3cc:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
   1d3ce:	2100      	movs	r1, #0
   1d3d0:	7802      	ldrb	r2, [r0, #0]
   1d3d2:	1c44      	adds	r4, r0, #1
   1d3d4:	3005      	adds	r0, #5
   1d3d6:	000b      	movs	r3, r1
   1d3d8:	e009      	b.n	1d3ee <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
   1d3da:	009d      	lsls	r5, r3, #2
   1d3dc:	195b      	adds	r3, r3, r5
   1d3de:	005b      	lsls	r3, r3, #1
   1d3e0:	189b      	adds	r3, r3, r2
   1d3e2:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
   1d3e4:	0022      	movs	r2, r4
   1d3e6:	3401      	adds	r4, #1
			if(j > 4)
   1d3e8:	42a0      	cmp	r0, r4
   1d3ea:	d00a      	beq.n	1d402 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
   1d3ec:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
   1d3ee:	2a2e      	cmp	r2, #46	; 0x2e
   1d3f0:	d00a      	beq.n	1d408 <nmi_inet_addr+0x44>
   1d3f2:	2a00      	cmp	r2, #0
   1d3f4:	d00c      	beq.n	1d410 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
   1d3f6:	3a30      	subs	r2, #48	; 0x30
   1d3f8:	b2d2      	uxtb	r2, r2
   1d3fa:	2a09      	cmp	r2, #9
   1d3fc:	d9ed      	bls.n	1d3da <nmi_inet_addr+0x16>
				return 0;
   1d3fe:	2000      	movs	r0, #0
   1d400:	e000      	b.n	1d404 <nmi_inet_addr+0x40>
				return 0;
   1d402:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
   1d404:	b002      	add	sp, #8
   1d406:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
   1d408:	466a      	mov	r2, sp
   1d40a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d40c:	0020      	movs	r0, r4
   1d40e:	e002      	b.n	1d416 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
   1d410:	466a      	mov	r2, sp
   1d412:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d414:	0020      	movs	r0, r4
   1d416:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
   1d418:	2e04      	cmp	r6, #4
   1d41a:	d1d9      	bne.n	1d3d0 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   1d41c:	2204      	movs	r2, #4
   1d41e:	4669      	mov	r1, sp
   1d420:	a801      	add	r0, sp, #4
   1d422:	4b02      	ldr	r3, [pc, #8]	; (1d42c <nmi_inet_addr+0x68>)
   1d424:	4798      	blx	r3
	return u32IP;
   1d426:	9801      	ldr	r0, [sp, #4]
   1d428:	e7ec      	b.n	1d404 <nmi_inet_addr+0x40>
   1d42a:	46c0      	nop			; (mov r8, r8)
   1d42c:	0001a5ad 	.word	0x0001a5ad

0001d430 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   1d430:	b510      	push	{r4, lr}
   1d432:	b084      	sub	sp, #16
   1d434:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   1d436:	4b0b      	ldr	r3, [pc, #44]	; (1d464 <gethostbyname+0x34>)
   1d438:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   1d43a:	b2c3      	uxtb	r3, r0
   1d43c:	2b40      	cmp	r3, #64	; 0x40
   1d43e:	d80d      	bhi.n	1d45c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   1d440:	23ff      	movs	r3, #255	; 0xff
   1d442:	4003      	ands	r3, r0
   1d444:	3301      	adds	r3, #1
   1d446:	2200      	movs	r2, #0
   1d448:	9202      	str	r2, [sp, #8]
   1d44a:	9201      	str	r2, [sp, #4]
   1d44c:	9200      	str	r2, [sp, #0]
   1d44e:	0022      	movs	r2, r4
   1d450:	214a      	movs	r1, #74	; 0x4a
   1d452:	2002      	movs	r0, #2
   1d454:	4c04      	ldr	r4, [pc, #16]	; (1d468 <gethostbyname+0x38>)
   1d456:	47a0      	blx	r4
	}
	return s8Err;
}
   1d458:	b004      	add	sp, #16
   1d45a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1d45c:	2006      	movs	r0, #6
   1d45e:	4240      	negs	r0, r0
   1d460:	e7fa      	b.n	1d458 <gethostbyname+0x28>
   1d462:	46c0      	nop			; (mov r8, r8)
   1d464:	0001a5d1 	.word	0x0001a5d1
   1d468:	0001a6d5 	.word	0x0001a6d5

0001d46c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   1d46c:	b570      	push	{r4, r5, r6, lr}
   1d46e:	b082      	sub	sp, #8
   1d470:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d472:	4b2a      	ldr	r3, [pc, #168]	; (1d51c <spi_flash_enable+0xb0>)
   1d474:	4798      	blx	r3
   1d476:	0500      	lsls	r0, r0, #20
   1d478:	0d00      	lsrs	r0, r0, #20
   1d47a:	4b29      	ldr	r3, [pc, #164]	; (1d520 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
   1d47c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d47e:	4298      	cmp	r0, r3
   1d480:	d802      	bhi.n	1d488 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
   1d482:	0028      	movs	r0, r5
   1d484:	b002      	add	sp, #8
   1d486:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   1d488:	a901      	add	r1, sp, #4
   1d48a:	4826      	ldr	r0, [pc, #152]	; (1d524 <spi_flash_enable+0xb8>)
   1d48c:	4b26      	ldr	r3, [pc, #152]	; (1d528 <spi_flash_enable+0xbc>)
   1d48e:	4798      	blx	r3
   1d490:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
   1d492:	d1f6      	bne.n	1d482 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
   1d494:	4b25      	ldr	r3, [pc, #148]	; (1d52c <spi_flash_enable+0xc0>)
   1d496:	9a01      	ldr	r2, [sp, #4]
   1d498:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
   1d49a:	4925      	ldr	r1, [pc, #148]	; (1d530 <spi_flash_enable+0xc4>)
   1d49c:	4319      	orrs	r1, r3
   1d49e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d4a0:	4820      	ldr	r0, [pc, #128]	; (1d524 <spi_flash_enable+0xb8>)
   1d4a2:	4b24      	ldr	r3, [pc, #144]	; (1d534 <spi_flash_enable+0xc8>)
   1d4a4:	4798      	blx	r3
		if(enable) {
   1d4a6:	2c00      	cmp	r4, #0
   1d4a8:	d020      	beq.n	1d4ec <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d4aa:	2100      	movs	r1, #0
   1d4ac:	4822      	ldr	r0, [pc, #136]	; (1d538 <spi_flash_enable+0xcc>)
   1d4ae:	4c21      	ldr	r4, [pc, #132]	; (1d534 <spi_flash_enable+0xc8>)
   1d4b0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d4b2:	21ab      	movs	r1, #171	; 0xab
   1d4b4:	4821      	ldr	r0, [pc, #132]	; (1d53c <spi_flash_enable+0xd0>)
   1d4b6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d4b8:	2101      	movs	r1, #1
   1d4ba:	4821      	ldr	r0, [pc, #132]	; (1d540 <spi_flash_enable+0xd4>)
   1d4bc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d4be:	2100      	movs	r1, #0
   1d4c0:	4820      	ldr	r0, [pc, #128]	; (1d544 <spi_flash_enable+0xd8>)
   1d4c2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   1d4c4:	2181      	movs	r1, #129	; 0x81
   1d4c6:	4820      	ldr	r0, [pc, #128]	; (1d548 <spi_flash_enable+0xdc>)
   1d4c8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d4ca:	4e20      	ldr	r6, [pc, #128]	; (1d54c <spi_flash_enable+0xe0>)
   1d4cc:	4c20      	ldr	r4, [pc, #128]	; (1d550 <spi_flash_enable+0xe4>)
   1d4ce:	0030      	movs	r0, r6
   1d4d0:	47a0      	blx	r4
   1d4d2:	2801      	cmp	r0, #1
   1d4d4:	d1fb      	bne.n	1d4ce <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
   1d4d6:	4b15      	ldr	r3, [pc, #84]	; (1d52c <spi_flash_enable+0xc0>)
   1d4d8:	9a01      	ldr	r2, [sp, #4]
   1d4da:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
   1d4dc:	2180      	movs	r1, #128	; 0x80
   1d4de:	0249      	lsls	r1, r1, #9
   1d4e0:	4319      	orrs	r1, r3
   1d4e2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d4e4:	480f      	ldr	r0, [pc, #60]	; (1d524 <spi_flash_enable+0xb8>)
   1d4e6:	4b13      	ldr	r3, [pc, #76]	; (1d534 <spi_flash_enable+0xc8>)
   1d4e8:	4798      	blx	r3
   1d4ea:	e7ca      	b.n	1d482 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d4ec:	2100      	movs	r1, #0
   1d4ee:	4812      	ldr	r0, [pc, #72]	; (1d538 <spi_flash_enable+0xcc>)
   1d4f0:	4c10      	ldr	r4, [pc, #64]	; (1d534 <spi_flash_enable+0xc8>)
   1d4f2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d4f4:	21b9      	movs	r1, #185	; 0xb9
   1d4f6:	4811      	ldr	r0, [pc, #68]	; (1d53c <spi_flash_enable+0xd0>)
   1d4f8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d4fa:	2101      	movs	r1, #1
   1d4fc:	4810      	ldr	r0, [pc, #64]	; (1d540 <spi_flash_enable+0xd4>)
   1d4fe:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d500:	2100      	movs	r1, #0
   1d502:	4810      	ldr	r0, [pc, #64]	; (1d544 <spi_flash_enable+0xd8>)
   1d504:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   1d506:	2181      	movs	r1, #129	; 0x81
   1d508:	480f      	ldr	r0, [pc, #60]	; (1d548 <spi_flash_enable+0xdc>)
   1d50a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d50c:	4e0f      	ldr	r6, [pc, #60]	; (1d54c <spi_flash_enable+0xe0>)
   1d50e:	4c10      	ldr	r4, [pc, #64]	; (1d550 <spi_flash_enable+0xe4>)
   1d510:	0030      	movs	r0, r6
   1d512:	47a0      	blx	r4
   1d514:	2801      	cmp	r0, #1
   1d516:	d1fb      	bne.n	1d510 <spi_flash_enable+0xa4>
   1d518:	e7dd      	b.n	1d4d6 <spi_flash_enable+0x6a>
   1d51a:	46c0      	nop			; (mov r8, r8)
   1d51c:	0001b545 	.word	0x0001b545
   1d520:	0000039f 	.word	0x0000039f
   1d524:	00001410 	.word	0x00001410
   1d528:	0001b97d 	.word	0x0001b97d
   1d52c:	f8888fff 	.word	0xf8888fff
   1d530:	01111000 	.word	0x01111000
   1d534:	0001b989 	.word	0x0001b989
   1d538:	00010208 	.word	0x00010208
   1d53c:	0001020c 	.word	0x0001020c
   1d540:	00010214 	.word	0x00010214
   1d544:	0001021c 	.word	0x0001021c
   1d548:	00010204 	.word	0x00010204
   1d54c:	00010218 	.word	0x00010218
   1d550:	0001b971 	.word	0x0001b971

0001d554 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   1d554:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d556:	2301      	movs	r3, #1
   1d558:	2800      	cmp	r0, #0
   1d55a:	d001      	beq.n	1d560 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d55c:	0018      	movs	r0, r3
   1d55e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d560:	4b01      	ldr	r3, [pc, #4]	; (1d568 <mem_test_unit_ready+0x14>)
   1d562:	4798      	blx	r3
   1d564:	0003      	movs	r3, r0
   1d566:	e7f9      	b.n	1d55c <mem_test_unit_ready+0x8>
   1d568:	0001996d 	.word	0x0001996d

0001d56c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   1d56c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d56e:	2301      	movs	r3, #1
   1d570:	2800      	cmp	r0, #0
   1d572:	d001      	beq.n	1d578 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d574:	0018      	movs	r0, r3
   1d576:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d578:	0008      	movs	r0, r1
   1d57a:	4b02      	ldr	r3, [pc, #8]	; (1d584 <mem_read_capacity+0x18>)
   1d57c:	4798      	blx	r3
   1d57e:	0003      	movs	r3, r0
   1d580:	e7f8      	b.n	1d574 <mem_read_capacity+0x8>
   1d582:	46c0      	nop			; (mov r8, r8)
   1d584:	0001999d 	.word	0x0001999d

0001d588 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   1d588:	4243      	negs	r3, r0
   1d58a:	4158      	adcs	r0, r3
   1d58c:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   1d58e:	4770      	bx	lr

0001d590 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   1d590:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d592:	2301      	movs	r3, #1
   1d594:	2800      	cmp	r0, #0
   1d596:	d001      	beq.n	1d59c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   1d598:	0018      	movs	r0, r3
   1d59a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d59c:	4b01      	ldr	r3, [pc, #4]	; (1d5a4 <mem_wr_protect+0x14>)
   1d59e:	4798      	blx	r3
   1d5a0:	0003      	movs	r3, r0
   1d5a2:	e7f9      	b.n	1d598 <mem_wr_protect+0x8>
   1d5a4:	000199ad 	.word	0x000199ad

0001d5a8 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   1d5a8:	b510      	push	{r4, lr}
   1d5aa:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d5ac:	2301      	movs	r3, #1
   1d5ae:	2800      	cmp	r0, #0
   1d5b0:	d001      	beq.n	1d5b6 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   1d5b2:	0018      	movs	r0, r3
   1d5b4:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d5b6:	0011      	movs	r1, r2
   1d5b8:	0020      	movs	r0, r4
   1d5ba:	4b02      	ldr	r3, [pc, #8]	; (1d5c4 <memory_2_ram+0x1c>)
   1d5bc:	4798      	blx	r3
   1d5be:	0003      	movs	r3, r0
   1d5c0:	e7f7      	b.n	1d5b2 <memory_2_ram+0xa>
   1d5c2:	46c0      	nop			; (mov r8, r8)
   1d5c4:	00019a01 	.word	0x00019a01

0001d5c8 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   1d5c8:	b510      	push	{r4, lr}
   1d5ca:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d5cc:	2301      	movs	r3, #1
   1d5ce:	2800      	cmp	r0, #0
   1d5d0:	d001      	beq.n	1d5d6 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   1d5d2:	0018      	movs	r0, r3
   1d5d4:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d5d6:	0011      	movs	r1, r2
   1d5d8:	0020      	movs	r0, r4
   1d5da:	4b02      	ldr	r3, [pc, #8]	; (1d5e4 <ram_2_memory+0x1c>)
   1d5dc:	4798      	blx	r3
   1d5de:	0003      	movs	r3, r0
   1d5e0:	e7f7      	b.n	1d5d2 <ram_2_memory+0xa>
   1d5e2:	46c0      	nop			; (mov r8, r8)
   1d5e4:	00019a59 	.word	0x00019a59

0001d5e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   1d5e8:	4b0c      	ldr	r3, [pc, #48]	; (1d61c <cpu_irq_enter_critical+0x34>)
   1d5ea:	681b      	ldr	r3, [r3, #0]
   1d5ec:	2b00      	cmp	r3, #0
   1d5ee:	d106      	bne.n	1d5fe <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d5f0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   1d5f4:	2b00      	cmp	r3, #0
   1d5f6:	d007      	beq.n	1d608 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1d5f8:	2200      	movs	r2, #0
   1d5fa:	4b09      	ldr	r3, [pc, #36]	; (1d620 <cpu_irq_enter_critical+0x38>)
   1d5fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1d5fe:	4a07      	ldr	r2, [pc, #28]	; (1d61c <cpu_irq_enter_critical+0x34>)
   1d600:	6813      	ldr	r3, [r2, #0]
   1d602:	3301      	adds	r3, #1
   1d604:	6013      	str	r3, [r2, #0]
}
   1d606:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   1d608:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1d60a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1d60e:	2200      	movs	r2, #0
   1d610:	4b04      	ldr	r3, [pc, #16]	; (1d624 <cpu_irq_enter_critical+0x3c>)
   1d612:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1d614:	3201      	adds	r2, #1
   1d616:	4b02      	ldr	r3, [pc, #8]	; (1d620 <cpu_irq_enter_critical+0x38>)
   1d618:	701a      	strb	r2, [r3, #0]
   1d61a:	e7f0      	b.n	1d5fe <cpu_irq_enter_critical+0x16>
   1d61c:	20003cf4 	.word	0x20003cf4
   1d620:	20003cf8 	.word	0x20003cf8
   1d624:	200000da 	.word	0x200000da

0001d628 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   1d628:	4b08      	ldr	r3, [pc, #32]	; (1d64c <cpu_irq_leave_critical+0x24>)
   1d62a:	681a      	ldr	r2, [r3, #0]
   1d62c:	3a01      	subs	r2, #1
   1d62e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1d630:	681b      	ldr	r3, [r3, #0]
   1d632:	2b00      	cmp	r3, #0
   1d634:	d109      	bne.n	1d64a <cpu_irq_leave_critical+0x22>
   1d636:	4b06      	ldr	r3, [pc, #24]	; (1d650 <cpu_irq_leave_critical+0x28>)
   1d638:	781b      	ldrb	r3, [r3, #0]
   1d63a:	2b00      	cmp	r3, #0
   1d63c:	d005      	beq.n	1d64a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
   1d63e:	2201      	movs	r2, #1
   1d640:	4b04      	ldr	r3, [pc, #16]	; (1d654 <cpu_irq_leave_critical+0x2c>)
   1d642:	701a      	strb	r2, [r3, #0]
   1d644:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1d648:	b662      	cpsie	i
	}
}
   1d64a:	4770      	bx	lr
   1d64c:	20003cf4 	.word	0x20003cf4
   1d650:	20003cf8 	.word	0x20003cf8
   1d654:	200000da 	.word	0x200000da

0001d658 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   1d658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d65a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
   1d65c:	ac01      	add	r4, sp, #4
   1d65e:	2501      	movs	r5, #1
   1d660:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1d662:	2700      	movs	r7, #0
   1d664:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1d666:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1d668:	0021      	movs	r1, r4
   1d66a:	2017      	movs	r0, #23
   1d66c:	4e06      	ldr	r6, [pc, #24]	; (1d688 <system_board_init+0x30>)
   1d66e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
   1d670:	2280      	movs	r2, #128	; 0x80
   1d672:	0412      	lsls	r2, r2, #16
   1d674:	4b05      	ldr	r3, [pc, #20]	; (1d68c <system_board_init+0x34>)
   1d676:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1d678:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   1d67a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1d67c:	0021      	movs	r1, r4
   1d67e:	2037      	movs	r0, #55	; 0x37
   1d680:	47b0      	blx	r6
}
   1d682:	b003      	add	sp, #12
   1d684:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d686:	46c0      	nop			; (mov r8, r8)
   1d688:	0001d861 	.word	0x0001d861
   1d68c:	41004400 	.word	0x41004400

0001d690 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d690:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1d692:	2a00      	cmp	r2, #0
   1d694:	d001      	beq.n	1d69a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
   1d696:	0018      	movs	r0, r3
   1d698:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
   1d69a:	008b      	lsls	r3, r1, #2
   1d69c:	4a06      	ldr	r2, [pc, #24]	; (1d6b8 <extint_register_callback+0x28>)
   1d69e:	589b      	ldr	r3, [r3, r2]
   1d6a0:	2b00      	cmp	r3, #0
   1d6a2:	d003      	beq.n	1d6ac <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
   1d6a4:	4283      	cmp	r3, r0
   1d6a6:	d005      	beq.n	1d6b4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
   1d6a8:	231d      	movs	r3, #29
   1d6aa:	e7f4      	b.n	1d696 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
   1d6ac:	0089      	lsls	r1, r1, #2
   1d6ae:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
   1d6b0:	2300      	movs	r3, #0
   1d6b2:	e7f0      	b.n	1d696 <extint_register_callback+0x6>
		return STATUS_OK;
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	e7ee      	b.n	1d696 <extint_register_callback+0x6>
   1d6b8:	20005520 	.word	0x20005520

0001d6bc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d6bc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d6be:	2900      	cmp	r1, #0
   1d6c0:	d001      	beq.n	1d6c6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
   1d6c2:	0018      	movs	r0, r3
   1d6c4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
   1d6c6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d6c8:	281f      	cmp	r0, #31
   1d6ca:	d800      	bhi.n	1d6ce <extint_chan_enable_callback+0x12>
		return eics[eic_index];
   1d6cc:	4a02      	ldr	r2, [pc, #8]	; (1d6d8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
   1d6ce:	2301      	movs	r3, #1
   1d6d0:	4083      	lsls	r3, r0
   1d6d2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
   1d6d4:	2300      	movs	r3, #0
   1d6d6:	e7f4      	b.n	1d6c2 <extint_chan_enable_callback+0x6>
   1d6d8:	40001800 	.word	0x40001800

0001d6dc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d6dc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d6de:	2900      	cmp	r1, #0
   1d6e0:	d001      	beq.n	1d6e6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
   1d6e2:	0018      	movs	r0, r3
   1d6e4:	4770      	bx	lr
		return NULL;
   1d6e6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d6e8:	281f      	cmp	r0, #31
   1d6ea:	d800      	bhi.n	1d6ee <extint_chan_disable_callback+0x12>
		return eics[eic_index];
   1d6ec:	4a02      	ldr	r2, [pc, #8]	; (1d6f8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
   1d6ee:	2301      	movs	r3, #1
   1d6f0:	4083      	lsls	r3, r0
   1d6f2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
   1d6f4:	2300      	movs	r3, #0
   1d6f6:	e7f4      	b.n	1d6e2 <extint_chan_disable_callback+0x6>
   1d6f8:	40001800 	.word	0x40001800

0001d6fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1d6fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d6fe:	2200      	movs	r2, #0
   1d700:	4b10      	ldr	r3, [pc, #64]	; (1d744 <EIC_Handler+0x48>)
   1d702:	701a      	strb	r2, [r3, #0]
   1d704:	2300      	movs	r3, #0
   1d706:	4910      	ldr	r1, [pc, #64]	; (1d748 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d708:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d70a:	4e10      	ldr	r6, [pc, #64]	; (1d74c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d70c:	4c0d      	ldr	r4, [pc, #52]	; (1d744 <EIC_Handler+0x48>)
   1d70e:	e00a      	b.n	1d726 <EIC_Handler+0x2a>
		return eics[eic_index];
   1d710:	490d      	ldr	r1, [pc, #52]	; (1d748 <EIC_Handler+0x4c>)
   1d712:	e008      	b.n	1d726 <EIC_Handler+0x2a>
   1d714:	7823      	ldrb	r3, [r4, #0]
   1d716:	3301      	adds	r3, #1
   1d718:	b2db      	uxtb	r3, r3
   1d71a:	7023      	strb	r3, [r4, #0]
   1d71c:	2b0f      	cmp	r3, #15
   1d71e:	d810      	bhi.n	1d742 <EIC_Handler+0x46>
		return NULL;
   1d720:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
   1d722:	2b1f      	cmp	r3, #31
   1d724:	d9f4      	bls.n	1d710 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d726:	0028      	movs	r0, r5
   1d728:	4018      	ands	r0, r3
   1d72a:	2201      	movs	r2, #1
   1d72c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
   1d72e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
   1d730:	4210      	tst	r0, r2
   1d732:	d0ef      	beq.n	1d714 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
   1d734:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d736:	009b      	lsls	r3, r3, #2
   1d738:	599b      	ldr	r3, [r3, r6]
   1d73a:	2b00      	cmp	r3, #0
   1d73c:	d0ea      	beq.n	1d714 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1d73e:	4798      	blx	r3
   1d740:	e7e8      	b.n	1d714 <EIC_Handler+0x18>
			}
		}
	}
}
   1d742:	bd70      	pop	{r4, r5, r6, pc}
   1d744:	2000551c 	.word	0x2000551c
   1d748:	40001800 	.word	0x40001800
   1d74c:	20005520 	.word	0x20005520

0001d750 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1d750:	4a04      	ldr	r2, [pc, #16]	; (1d764 <_extint_enable+0x14>)
   1d752:	7813      	ldrb	r3, [r2, #0]
   1d754:	2102      	movs	r1, #2
   1d756:	430b      	orrs	r3, r1
   1d758:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d75a:	7853      	ldrb	r3, [r2, #1]
   1d75c:	b25b      	sxtb	r3, r3
   1d75e:	2b00      	cmp	r3, #0
   1d760:	dbfb      	blt.n	1d75a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1d762:	4770      	bx	lr
   1d764:	40001800 	.word	0x40001800

0001d768 <_system_extint_init>:
{
   1d768:	b500      	push	{lr}
   1d76a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
   1d76c:	4a12      	ldr	r2, [pc, #72]	; (1d7b8 <_system_extint_init+0x50>)
   1d76e:	6993      	ldr	r3, [r2, #24]
   1d770:	2140      	movs	r1, #64	; 0x40
   1d772:	430b      	orrs	r3, r1
   1d774:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1d776:	a901      	add	r1, sp, #4
   1d778:	2300      	movs	r3, #0
   1d77a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1d77c:	2005      	movs	r0, #5
   1d77e:	4b0f      	ldr	r3, [pc, #60]	; (1d7bc <_system_extint_init+0x54>)
   1d780:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
   1d782:	2005      	movs	r0, #5
   1d784:	4b0e      	ldr	r3, [pc, #56]	; (1d7c0 <_system_extint_init+0x58>)
   1d786:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1d788:	4a0e      	ldr	r2, [pc, #56]	; (1d7c4 <_system_extint_init+0x5c>)
   1d78a:	7813      	ldrb	r3, [r2, #0]
   1d78c:	2101      	movs	r1, #1
   1d78e:	430b      	orrs	r3, r1
   1d790:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d792:	7853      	ldrb	r3, [r2, #1]
   1d794:	b25b      	sxtb	r3, r3
   1d796:	2b00      	cmp	r3, #0
   1d798:	dbfb      	blt.n	1d792 <_system_extint_init+0x2a>
   1d79a:	4b0b      	ldr	r3, [pc, #44]	; (1d7c8 <_system_extint_init+0x60>)
   1d79c:	0019      	movs	r1, r3
   1d79e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
   1d7a0:	2200      	movs	r2, #0
   1d7a2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1d7a4:	4299      	cmp	r1, r3
   1d7a6:	d1fc      	bne.n	1d7a2 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d7a8:	2210      	movs	r2, #16
   1d7aa:	4b08      	ldr	r3, [pc, #32]	; (1d7cc <_system_extint_init+0x64>)
   1d7ac:	601a      	str	r2, [r3, #0]
	_extint_enable();
   1d7ae:	4b08      	ldr	r3, [pc, #32]	; (1d7d0 <_system_extint_init+0x68>)
   1d7b0:	4798      	blx	r3
}
   1d7b2:	b003      	add	sp, #12
   1d7b4:	bd00      	pop	{pc}
   1d7b6:	46c0      	nop			; (mov r8, r8)
   1d7b8:	40000400 	.word	0x40000400
   1d7bc:	0001f19d 	.word	0x0001f19d
   1d7c0:	0001f111 	.word	0x0001f111
   1d7c4:	40001800 	.word	0x40001800
   1d7c8:	20005520 	.word	0x20005520
   1d7cc:	e000e100 	.word	0xe000e100
   1d7d0:	0001d751 	.word	0x0001d751

0001d7d4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1d7d4:	2300      	movs	r3, #0
   1d7d6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
   1d7d8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1d7da:	2201      	movs	r2, #1
   1d7dc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
   1d7de:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
   1d7e0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1d7e2:	3302      	adds	r3, #2
   1d7e4:	72c3      	strb	r3, [r0, #11]
}
   1d7e6:	4770      	bx	lr

0001d7e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1d7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7ea:	b083      	sub	sp, #12
   1d7ec:	0005      	movs	r5, r0
   1d7ee:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d7f0:	a901      	add	r1, sp, #4
   1d7f2:	2300      	movs	r3, #0
   1d7f4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   1d7f6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
   1d7f8:	7923      	ldrb	r3, [r4, #4]
   1d7fa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1d7fc:	7a23      	ldrb	r3, [r4, #8]
   1d7fe:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1d800:	7820      	ldrb	r0, [r4, #0]
   1d802:	4b15      	ldr	r3, [pc, #84]	; (1d858 <extint_chan_set_config+0x70>)
   1d804:	4798      	blx	r3
		return NULL;
   1d806:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
   1d808:	2d1f      	cmp	r5, #31
   1d80a:	d800      	bhi.n	1d80e <extint_chan_set_config+0x26>
		return eics[eic_index];
   1d80c:	4813      	ldr	r0, [pc, #76]	; (1d85c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
   1d80e:	2207      	movs	r2, #7
   1d810:	402a      	ands	r2, r5
   1d812:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1d814:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1d816:	7aa3      	ldrb	r3, [r4, #10]
   1d818:	2b00      	cmp	r3, #0
   1d81a:	d001      	beq.n	1d820 <extint_chan_set_config+0x38>
   1d81c:	2308      	movs	r3, #8
   1d81e:	431f      	orrs	r7, r3
   1d820:	08eb      	lsrs	r3, r5, #3
   1d822:	009b      	lsls	r3, r3, #2
   1d824:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
   1d826:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d828:	260f      	movs	r6, #15
   1d82a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1d82c:	43b1      	bics	r1, r6
			(new_config << config_pos);
   1d82e:	4097      	lsls	r7, r2
   1d830:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d832:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
   1d834:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1d836:	7a63      	ldrb	r3, [r4, #9]
   1d838:	2b00      	cmp	r3, #0
   1d83a:	d106      	bne.n	1d84a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1d83c:	6943      	ldr	r3, [r0, #20]
   1d83e:	2201      	movs	r2, #1
   1d840:	40aa      	lsls	r2, r5
   1d842:	4393      	bics	r3, r2
   1d844:	6143      	str	r3, [r0, #20]
	}
}
   1d846:	b003      	add	sp, #12
   1d848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1d84a:	6942      	ldr	r2, [r0, #20]
   1d84c:	2301      	movs	r3, #1
   1d84e:	40ab      	lsls	r3, r5
   1d850:	4313      	orrs	r3, r2
   1d852:	6143      	str	r3, [r0, #20]
   1d854:	e7f7      	b.n	1d846 <extint_chan_set_config+0x5e>
   1d856:	46c0      	nop			; (mov r8, r8)
   1d858:	0001f2c5 	.word	0x0001f2c5
   1d85c:	40001800 	.word	0x40001800

0001d860 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1d860:	b500      	push	{lr}
   1d862:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d864:	ab01      	add	r3, sp, #4
   1d866:	2280      	movs	r2, #128	; 0x80
   1d868:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1d86a:	780a      	ldrb	r2, [r1, #0]
   1d86c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1d86e:	784a      	ldrb	r2, [r1, #1]
   1d870:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1d872:	788a      	ldrb	r2, [r1, #2]
   1d874:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1d876:	0019      	movs	r1, r3
   1d878:	4b01      	ldr	r3, [pc, #4]	; (1d880 <port_pin_set_config+0x20>)
   1d87a:	4798      	blx	r3
}
   1d87c:	b003      	add	sp, #12
   1d87e:	bd00      	pop	{pc}
   1d880:	0001f2c5 	.word	0x0001f2c5

0001d884 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d884:	6801      	ldr	r1, [r0, #0]
   1d886:	2208      	movs	r2, #8
   1d888:	4b05      	ldr	r3, [pc, #20]	; (1d8a0 <rtc_calendar_enable+0x1c>)
   1d88a:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d88c:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d88e:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d890:	b25b      	sxtb	r3, r3
   1d892:	2b00      	cmp	r3, #0
   1d894:	dbfb      	blt.n	1d88e <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   1d896:	880b      	ldrh	r3, [r1, #0]
   1d898:	2202      	movs	r2, #2
   1d89a:	4313      	orrs	r3, r2
   1d89c:	800b      	strh	r3, [r1, #0]
}
   1d89e:	4770      	bx	lr
   1d8a0:	e000e100 	.word	0xe000e100

0001d8a4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   1d8a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d8a6:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d8a8:	2408      	movs	r4, #8
   1d8aa:	2380      	movs	r3, #128	; 0x80
   1d8ac:	4907      	ldr	r1, [pc, #28]	; (1d8cc <rtc_calendar_disable+0x28>)
   1d8ae:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
   1d8b0:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d8b2:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d8b4:	b25b      	sxtb	r3, r3
   1d8b6:	2b00      	cmp	r3, #0
   1d8b8:	dbfb      	blt.n	1d8b2 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1d8ba:	23c1      	movs	r3, #193	; 0xc1
   1d8bc:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   1d8be:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   1d8c0:	8813      	ldrh	r3, [r2, #0]
   1d8c2:	2102      	movs	r1, #2
   1d8c4:	438b      	bics	r3, r1
   1d8c6:	8013      	strh	r3, [r2, #0]
}
   1d8c8:	bd10      	pop	{r4, pc}
   1d8ca:	46c0      	nop			; (mov r8, r8)
   1d8cc:	e000e100 	.word	0xe000e100

0001d8d0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   1d8d0:	b570      	push	{r4, r5, r6, lr}
   1d8d2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d8d4:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   1d8d6:	4b07      	ldr	r3, [pc, #28]	; (1d8f4 <rtc_calendar_reset+0x24>)
   1d8d8:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1d8da:	2300      	movs	r3, #0
   1d8dc:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
   1d8de:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
   1d8e0:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d8e2:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d8e4:	b25b      	sxtb	r3, r3
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	dbfb      	blt.n	1d8e2 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   1d8ea:	882b      	ldrh	r3, [r5, #0]
   1d8ec:	2201      	movs	r2, #1
   1d8ee:	4313      	orrs	r3, r2
   1d8f0:	802b      	strh	r3, [r5, #0]
}
   1d8f2:	bd70      	pop	{r4, r5, r6, pc}
   1d8f4:	0001d8a5 	.word	0x0001d8a5

0001d8f8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   1d8f8:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   1d8fa:	88cb      	ldrh	r3, [r1, #6]
   1d8fc:	88c2      	ldrh	r2, [r0, #6]
   1d8fe:	1a9a      	subs	r2, r3, r2
   1d900:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   1d902:	794b      	ldrb	r3, [r1, #5]
   1d904:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   1d906:	790c      	ldrb	r4, [r1, #4]
   1d908:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1d90a:	4323      	orrs	r3, r4
   1d90c:	788c      	ldrb	r4, [r1, #2]
   1d90e:	0324      	lsls	r4, r4, #12
   1d910:	4323      	orrs	r3, r4
   1d912:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1d914:	7902      	ldrb	r2, [r0, #4]
   1d916:	2a00      	cmp	r2, #0
   1d918:	d105      	bne.n	1d926 <rtc_calendar_time_to_register_value+0x2e>
   1d91a:	78ca      	ldrb	r2, [r1, #3]
   1d91c:	2a00      	cmp	r2, #0
   1d91e:	d002      	beq.n	1d926 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   1d920:	2280      	movs	r2, #128	; 0x80
   1d922:	0252      	lsls	r2, r2, #9
   1d924:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1d926:	7848      	ldrb	r0, [r1, #1]
   1d928:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1d92a:	780a      	ldrb	r2, [r1, #0]
   1d92c:	4310      	orrs	r0, r2
   1d92e:	4318      	orrs	r0, r3

	return register_value;
}
   1d930:	bd10      	pop	{r4, pc}

0001d932 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   1d932:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d934:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   1d936:	88c4      	ldrh	r4, [r0, #6]
   1d938:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d93a:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   1d93c:	018b      	lsls	r3, r1, #6
   1d93e:	0f1b      	lsrs	r3, r3, #28
   1d940:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   1d942:	028b      	lsls	r3, r1, #10
   1d944:	0edb      	lsrs	r3, r3, #27
   1d946:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   1d948:	7903      	ldrb	r3, [r0, #4]
   1d94a:	2b00      	cmp	r3, #0
   1d94c:	d10c      	bne.n	1d968 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   1d94e:	040b      	lsls	r3, r1, #16
   1d950:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
   1d952:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   1d954:	03cb      	lsls	r3, r1, #15
   1d956:	0fdb      	lsrs	r3, r3, #31
   1d958:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1d95a:	0988      	lsrs	r0, r1, #6
   1d95c:	233f      	movs	r3, #63	; 0x3f
   1d95e:	4018      	ands	r0, r3
   1d960:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1d962:	4019      	ands	r1, r3
   1d964:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   1d966:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   1d968:	03cb      	lsls	r3, r1, #15
   1d96a:	0edb      	lsrs	r3, r3, #27
   1d96c:	7093      	strb	r3, [r2, #2]
   1d96e:	e7f4      	b.n	1d95a <rtc_calendar_register_value_to_time+0x28>

0001d970 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   1d970:	b510      	push	{r4, lr}
   1d972:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d974:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   1d976:	7941      	ldrb	r1, [r0, #5]
   1d978:	2900      	cmp	r1, #0
   1d97a:	d006      	beq.n	1d98a <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   1d97c:	8859      	ldrh	r1, [r3, #2]
   1d97e:	0449      	lsls	r1, r1, #17
   1d980:	d50b      	bpl.n	1d99a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1d982:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   1d984:	4b0a      	ldr	r3, [pc, #40]	; (1d9b0 <rtc_calendar_get_time+0x40>)
   1d986:	4798      	blx	r3
}
   1d988:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   1d98a:	490a      	ldr	r1, [pc, #40]	; (1d9b4 <rtc_calendar_get_time+0x44>)
   1d98c:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d98e:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d990:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d992:	b249      	sxtb	r1, r1
   1d994:	2900      	cmp	r1, #0
   1d996:	dbfb      	blt.n	1d990 <rtc_calendar_get_time+0x20>
   1d998:	e7f3      	b.n	1d982 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   1d99a:	8859      	ldrh	r1, [r3, #2]
   1d99c:	24c0      	movs	r4, #192	; 0xc0
   1d99e:	0224      	lsls	r4, r4, #8
   1d9a0:	4321      	orrs	r1, r4
   1d9a2:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d9a4:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d9a6:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d9a8:	b249      	sxtb	r1, r1
   1d9aa:	2900      	cmp	r1, #0
   1d9ac:	dbfb      	blt.n	1d9a6 <rtc_calendar_get_time+0x36>
   1d9ae:	e7e8      	b.n	1d982 <rtc_calendar_get_time+0x12>
   1d9b0:	0001d933 	.word	0x0001d933
   1d9b4:	ffff8000 	.word	0xffff8000

0001d9b8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   1d9b8:	b570      	push	{r4, r5, r6, lr}
   1d9ba:	000d      	movs	r5, r1
   1d9bc:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
   1d9be:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1d9c0:	2a01      	cmp	r2, #1
   1d9c2:	d901      	bls.n	1d9c8 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
   1d9c4:	0018      	movs	r0, r3
   1d9c6:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
   1d9c8:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   1d9ca:	4b06      	ldr	r3, [pc, #24]	; (1d9e4 <rtc_calendar_set_alarm+0x2c>)
   1d9cc:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d9ce:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
   1d9d0:	b25b      	sxtb	r3, r3
   1d9d2:	2b00      	cmp	r3, #0
   1d9d4:	dbfb      	blt.n	1d9ce <rtc_calendar_set_alarm+0x16>
   1d9d6:	00e4      	lsls	r4, r4, #3
   1d9d8:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   1d9da:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   1d9dc:	7a2b      	ldrb	r3, [r5, #8]
   1d9de:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
   1d9e0:	2300      	movs	r3, #0
   1d9e2:	e7ef      	b.n	1d9c4 <rtc_calendar_set_alarm+0xc>
   1d9e4:	0001d8f9 	.word	0x0001d8f9

0001d9e8 <rtc_calendar_init>:
{
   1d9e8:	b530      	push	{r4, r5, lr}
   1d9ea:	b083      	sub	sp, #12
   1d9ec:	0005      	movs	r5, r0
   1d9ee:	0014      	movs	r4, r2
	module->hw = hw;
   1d9f0:	6001      	str	r1, [r0, #0]
   1d9f2:	4a1c      	ldr	r2, [pc, #112]	; (1da64 <rtc_calendar_init+0x7c>)
   1d9f4:	6993      	ldr	r3, [r2, #24]
   1d9f6:	2120      	movs	r1, #32
   1d9f8:	430b      	orrs	r3, r1
   1d9fa:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1d9fc:	a901      	add	r1, sp, #4
   1d9fe:	2302      	movs	r3, #2
   1da00:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1da02:	2004      	movs	r0, #4
   1da04:	4b18      	ldr	r3, [pc, #96]	; (1da68 <rtc_calendar_init+0x80>)
   1da06:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1da08:	2004      	movs	r0, #4
   1da0a:	4b18      	ldr	r3, [pc, #96]	; (1da6c <rtc_calendar_init+0x84>)
   1da0c:	4798      	blx	r3
	rtc_calendar_reset(module);
   1da0e:	0028      	movs	r0, r5
   1da10:	4b17      	ldr	r3, [pc, #92]	; (1da70 <rtc_calendar_init+0x88>)
   1da12:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
   1da14:	7923      	ldrb	r3, [r4, #4]
   1da16:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
   1da18:	78e3      	ldrb	r3, [r4, #3]
   1da1a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
   1da1c:	88e3      	ldrh	r3, [r4, #6]
   1da1e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
   1da20:	4b14      	ldr	r3, [pc, #80]	; (1da74 <rtc_calendar_init+0x8c>)
   1da22:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1da24:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1da26:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
   1da28:	7921      	ldrb	r1, [r4, #4]
   1da2a:	2900      	cmp	r1, #0
   1da2c:	d017      	beq.n	1da5e <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1da2e:	2108      	movs	r1, #8
   1da30:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
   1da32:	78a1      	ldrb	r1, [r4, #2]
   1da34:	2900      	cmp	r1, #0
   1da36:	d001      	beq.n	1da3c <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   1da38:	2180      	movs	r1, #128	; 0x80
   1da3a:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   1da3c:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
   1da3e:	78e3      	ldrb	r3, [r4, #3]
   1da40:	2b00      	cmp	r3, #0
   1da42:	d004      	beq.n	1da4e <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   1da44:	8853      	ldrh	r3, [r2, #2]
   1da46:	2180      	movs	r1, #128	; 0x80
   1da48:	01c9      	lsls	r1, r1, #7
   1da4a:	430b      	orrs	r3, r1
   1da4c:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   1da4e:	0021      	movs	r1, r4
   1da50:	3108      	adds	r1, #8
   1da52:	2200      	movs	r2, #0
   1da54:	0028      	movs	r0, r5
   1da56:	4b08      	ldr	r3, [pc, #32]	; (1da78 <rtc_calendar_init+0x90>)
   1da58:	4798      	blx	r3
}
   1da5a:	b003      	add	sp, #12
   1da5c:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1da5e:	2148      	movs	r1, #72	; 0x48
   1da60:	430b      	orrs	r3, r1
   1da62:	e7e6      	b.n	1da32 <rtc_calendar_init+0x4a>
   1da64:	40000400 	.word	0x40000400
   1da68:	0001f19d 	.word	0x0001f19d
   1da6c:	0001f111 	.word	0x0001f111
   1da70:	0001d8d1 	.word	0x0001d8d1
   1da74:	20005560 	.word	0x20005560
   1da78:	0001d9b9 	.word	0x0001d9b9

0001da7c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1da7c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   1da7e:	4b0f      	ldr	r3, [pc, #60]	; (1dabc <RTC_Handler+0x40>)
   1da80:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1da82:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
   1da84:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
   1da86:	8a13      	ldrh	r3, [r2, #16]
   1da88:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1da8a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   1da8c:	79e3      	ldrb	r3, [r4, #7]
   1da8e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1da90:	b258      	sxtb	r0, r3
   1da92:	2800      	cmp	r0, #0
   1da94:	db06      	blt.n	1daa4 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1da96:	07db      	lsls	r3, r3, #31
   1da98:	d503      	bpl.n	1daa2 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1da9a:	07cb      	lsls	r3, r1, #31
   1da9c:	d40a      	bmi.n	1dab4 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1da9e:	2301      	movs	r3, #1
   1daa0:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   1daa2:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   1daa4:	078b      	lsls	r3, r1, #30
   1daa6:	d402      	bmi.n	1daae <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1daa8:	2380      	movs	r3, #128	; 0x80
   1daaa:	7223      	strb	r3, [r4, #8]
   1daac:	e7f9      	b.n	1daa2 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1daae:	68d3      	ldr	r3, [r2, #12]
   1dab0:	4798      	blx	r3
   1dab2:	e7f9      	b.n	1daa8 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   1dab4:	6893      	ldr	r3, [r2, #8]
   1dab6:	4798      	blx	r3
   1dab8:	e7f1      	b.n	1da9e <RTC_Handler+0x22>
   1daba:	46c0      	nop			; (mov r8, r8)
   1dabc:	20005560 	.word	0x20005560

0001dac0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1dac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dac2:	46de      	mov	lr, fp
   1dac4:	4657      	mov	r7, sl
   1dac6:	464e      	mov	r6, r9
   1dac8:	4645      	mov	r5, r8
   1daca:	b5e0      	push	{r5, r6, r7, lr}
   1dacc:	b087      	sub	sp, #28
   1dace:	4680      	mov	r8, r0
   1dad0:	9104      	str	r1, [sp, #16]
   1dad2:	0016      	movs	r6, r2
   1dad4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1dad6:	2200      	movs	r2, #0
   1dad8:	2300      	movs	r3, #0
   1dada:	2100      	movs	r1, #0
   1dadc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
   1dade:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1dae0:	2001      	movs	r0, #1
   1dae2:	0021      	movs	r1, r4
   1dae4:	9600      	str	r6, [sp, #0]
   1dae6:	9701      	str	r7, [sp, #4]
   1dae8:	465c      	mov	r4, fp
   1daea:	9403      	str	r4, [sp, #12]
   1daec:	4644      	mov	r4, r8
   1daee:	9405      	str	r4, [sp, #20]
   1daf0:	e013      	b.n	1db1a <long_division+0x5a>
   1daf2:	2420      	movs	r4, #32
   1daf4:	1a64      	subs	r4, r4, r1
   1daf6:	0005      	movs	r5, r0
   1daf8:	40e5      	lsrs	r5, r4
   1dafa:	46a8      	mov	r8, r5
   1dafc:	e014      	b.n	1db28 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
   1dafe:	9c00      	ldr	r4, [sp, #0]
   1db00:	9d01      	ldr	r5, [sp, #4]
   1db02:	1b12      	subs	r2, r2, r4
   1db04:	41ab      	sbcs	r3, r5
			q |= bit_shift;
   1db06:	465c      	mov	r4, fp
   1db08:	464d      	mov	r5, r9
   1db0a:	432c      	orrs	r4, r5
   1db0c:	46a3      	mov	fp, r4
   1db0e:	9c03      	ldr	r4, [sp, #12]
   1db10:	4645      	mov	r5, r8
   1db12:	432c      	orrs	r4, r5
   1db14:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
   1db16:	3901      	subs	r1, #1
   1db18:	d325      	bcc.n	1db66 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
   1db1a:	2420      	movs	r4, #32
   1db1c:	4264      	negs	r4, r4
   1db1e:	190c      	adds	r4, r1, r4
   1db20:	d4e7      	bmi.n	1daf2 <long_division+0x32>
   1db22:	0005      	movs	r5, r0
   1db24:	40a5      	lsls	r5, r4
   1db26:	46a8      	mov	r8, r5
   1db28:	0004      	movs	r4, r0
   1db2a:	408c      	lsls	r4, r1
   1db2c:	46a1      	mov	r9, r4
		r = r << 1;
   1db2e:	1892      	adds	r2, r2, r2
   1db30:	415b      	adcs	r3, r3
   1db32:	0014      	movs	r4, r2
   1db34:	001d      	movs	r5, r3
		if (n & bit_shift) {
   1db36:	9e05      	ldr	r6, [sp, #20]
   1db38:	464f      	mov	r7, r9
   1db3a:	403e      	ands	r6, r7
   1db3c:	46b4      	mov	ip, r6
   1db3e:	9e04      	ldr	r6, [sp, #16]
   1db40:	4647      	mov	r7, r8
   1db42:	403e      	ands	r6, r7
   1db44:	46b2      	mov	sl, r6
   1db46:	4666      	mov	r6, ip
   1db48:	4657      	mov	r7, sl
   1db4a:	433e      	orrs	r6, r7
   1db4c:	d003      	beq.n	1db56 <long_division+0x96>
			r |= 0x01;
   1db4e:	0006      	movs	r6, r0
   1db50:	4326      	orrs	r6, r4
   1db52:	0032      	movs	r2, r6
   1db54:	002b      	movs	r3, r5
		if (r >= d) {
   1db56:	9c00      	ldr	r4, [sp, #0]
   1db58:	9d01      	ldr	r5, [sp, #4]
   1db5a:	429d      	cmp	r5, r3
   1db5c:	d8db      	bhi.n	1db16 <long_division+0x56>
   1db5e:	d1ce      	bne.n	1dafe <long_division+0x3e>
   1db60:	4294      	cmp	r4, r2
   1db62:	d8d8      	bhi.n	1db16 <long_division+0x56>
   1db64:	e7cb      	b.n	1dafe <long_division+0x3e>
   1db66:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   1db68:	4658      	mov	r0, fp
   1db6a:	0019      	movs	r1, r3
   1db6c:	b007      	add	sp, #28
   1db6e:	bc3c      	pop	{r2, r3, r4, r5}
   1db70:	4690      	mov	r8, r2
   1db72:	4699      	mov	r9, r3
   1db74:	46a2      	mov	sl, r4
   1db76:	46ab      	mov	fp, r5
   1db78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001db7a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1db7a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1db7c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db7e:	2340      	movs	r3, #64	; 0x40
   1db80:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   1db82:	4281      	cmp	r1, r0
   1db84:	d202      	bcs.n	1db8c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   1db86:	0018      	movs	r0, r3
   1db88:	bd10      	pop	{r4, pc}
		baud_calculated++;
   1db8a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   1db8c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   1db8e:	1c63      	adds	r3, r4, #1
   1db90:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   1db92:	4288      	cmp	r0, r1
   1db94:	d9f9      	bls.n	1db8a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db96:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   1db98:	2cff      	cmp	r4, #255	; 0xff
   1db9a:	d8f4      	bhi.n	1db86 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   1db9c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1db9e:	2300      	movs	r3, #0
   1dba0:	e7f1      	b.n	1db86 <_sercom_get_sync_baud_val+0xc>
	...

0001dba4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dba6:	b083      	sub	sp, #12
   1dba8:	000f      	movs	r7, r1
   1dbaa:	0016      	movs	r6, r2
   1dbac:	aa08      	add	r2, sp, #32
   1dbae:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1dbb0:	0004      	movs	r4, r0
   1dbb2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1dbb4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   1dbb6:	42bc      	cmp	r4, r7
   1dbb8:	d902      	bls.n	1dbc0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1dbba:	0010      	movs	r0, r2
   1dbbc:	b003      	add	sp, #12
   1dbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d114      	bne.n	1dbee <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1dbc4:	0002      	movs	r2, r0
   1dbc6:	0008      	movs	r0, r1
   1dbc8:	2100      	movs	r1, #0
   1dbca:	4c19      	ldr	r4, [pc, #100]	; (1dc30 <_sercom_get_async_baud_val+0x8c>)
   1dbcc:	47a0      	blx	r4
   1dbce:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   1dbd0:	003a      	movs	r2, r7
   1dbd2:	2300      	movs	r3, #0
   1dbd4:	2000      	movs	r0, #0
   1dbd6:	4c17      	ldr	r4, [pc, #92]	; (1dc34 <_sercom_get_async_baud_val+0x90>)
   1dbd8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1dbda:	2200      	movs	r2, #0
   1dbdc:	2301      	movs	r3, #1
   1dbde:	1a12      	subs	r2, r2, r0
   1dbe0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   1dbe2:	0c12      	lsrs	r2, r2, #16
   1dbe4:	041b      	lsls	r3, r3, #16
   1dbe6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   1dbe8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   1dbea:	2200      	movs	r2, #0
   1dbec:	e7e5      	b.n	1dbba <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   1dbee:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1dbf0:	2b01      	cmp	r3, #1
   1dbf2:	d1f9      	bne.n	1dbe8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   1dbf4:	000a      	movs	r2, r1
   1dbf6:	2300      	movs	r3, #0
   1dbf8:	2100      	movs	r1, #0
   1dbfa:	4c0d      	ldr	r4, [pc, #52]	; (1dc30 <_sercom_get_async_baud_val+0x8c>)
   1dbfc:	47a0      	blx	r4
   1dbfe:	0002      	movs	r2, r0
   1dc00:	000b      	movs	r3, r1
   1dc02:	9200      	str	r2, [sp, #0]
   1dc04:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   1dc06:	0038      	movs	r0, r7
   1dc08:	2100      	movs	r1, #0
   1dc0a:	4c0a      	ldr	r4, [pc, #40]	; (1dc34 <_sercom_get_async_baud_val+0x90>)
   1dc0c:	47a0      	blx	r4
   1dc0e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   1dc10:	2380      	movs	r3, #128	; 0x80
   1dc12:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1dc14:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   1dc16:	4298      	cmp	r0, r3
   1dc18:	d8cf      	bhi.n	1dbba <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1dc1a:	0f79      	lsrs	r1, r7, #29
   1dc1c:	00f8      	lsls	r0, r7, #3
   1dc1e:	9a00      	ldr	r2, [sp, #0]
   1dc20:	9b01      	ldr	r3, [sp, #4]
   1dc22:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   1dc24:	00ea      	lsls	r2, r5, #3
   1dc26:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   1dc28:	b2d2      	uxtb	r2, r2
   1dc2a:	0352      	lsls	r2, r2, #13
   1dc2c:	432a      	orrs	r2, r5
   1dc2e:	e7db      	b.n	1dbe8 <_sercom_get_async_baud_val+0x44>
   1dc30:	00024325 	.word	0x00024325
   1dc34:	0001dac1 	.word	0x0001dac1

0001dc38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1dc38:	b510      	push	{r4, lr}
   1dc3a:	b082      	sub	sp, #8
   1dc3c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1dc3e:	4b0e      	ldr	r3, [pc, #56]	; (1dc78 <sercom_set_gclk_generator+0x40>)
   1dc40:	781b      	ldrb	r3, [r3, #0]
   1dc42:	2b00      	cmp	r3, #0
   1dc44:	d007      	beq.n	1dc56 <sercom_set_gclk_generator+0x1e>
   1dc46:	2900      	cmp	r1, #0
   1dc48:	d105      	bne.n	1dc56 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   1dc4a:	4b0b      	ldr	r3, [pc, #44]	; (1dc78 <sercom_set_gclk_generator+0x40>)
   1dc4c:	785b      	ldrb	r3, [r3, #1]
   1dc4e:	4283      	cmp	r3, r0
   1dc50:	d010      	beq.n	1dc74 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1dc52:	201d      	movs	r0, #29
   1dc54:	e00c      	b.n	1dc70 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   1dc56:	a901      	add	r1, sp, #4
   1dc58:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1dc5a:	2013      	movs	r0, #19
   1dc5c:	4b07      	ldr	r3, [pc, #28]	; (1dc7c <sercom_set_gclk_generator+0x44>)
   1dc5e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1dc60:	2013      	movs	r0, #19
   1dc62:	4b07      	ldr	r3, [pc, #28]	; (1dc80 <sercom_set_gclk_generator+0x48>)
   1dc64:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   1dc66:	4b04      	ldr	r3, [pc, #16]	; (1dc78 <sercom_set_gclk_generator+0x40>)
   1dc68:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   1dc6a:	2201      	movs	r2, #1
   1dc6c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   1dc6e:	2000      	movs	r0, #0
}
   1dc70:	b002      	add	sp, #8
   1dc72:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   1dc74:	2000      	movs	r0, #0
   1dc76:	e7fb      	b.n	1dc70 <sercom_set_gclk_generator+0x38>
   1dc78:	20003cfc 	.word	0x20003cfc
   1dc7c:	0001f19d 	.word	0x0001f19d
   1dc80:	0001f111 	.word	0x0001f111

0001dc84 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   1dc84:	4b40      	ldr	r3, [pc, #256]	; (1dd88 <_sercom_get_default_pad+0x104>)
   1dc86:	4298      	cmp	r0, r3
   1dc88:	d031      	beq.n	1dcee <_sercom_get_default_pad+0x6a>
   1dc8a:	d90a      	bls.n	1dca2 <_sercom_get_default_pad+0x1e>
   1dc8c:	4b3f      	ldr	r3, [pc, #252]	; (1dd8c <_sercom_get_default_pad+0x108>)
   1dc8e:	4298      	cmp	r0, r3
   1dc90:	d04d      	beq.n	1dd2e <_sercom_get_default_pad+0xaa>
   1dc92:	4b3f      	ldr	r3, [pc, #252]	; (1dd90 <_sercom_get_default_pad+0x10c>)
   1dc94:	4298      	cmp	r0, r3
   1dc96:	d05a      	beq.n	1dd4e <_sercom_get_default_pad+0xca>
   1dc98:	4b3e      	ldr	r3, [pc, #248]	; (1dd94 <_sercom_get_default_pad+0x110>)
   1dc9a:	4298      	cmp	r0, r3
   1dc9c:	d037      	beq.n	1dd0e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1dc9e:	2000      	movs	r0, #0
}
   1dca0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   1dca2:	4b3d      	ldr	r3, [pc, #244]	; (1dd98 <_sercom_get_default_pad+0x114>)
   1dca4:	4298      	cmp	r0, r3
   1dca6:	d00c      	beq.n	1dcc2 <_sercom_get_default_pad+0x3e>
   1dca8:	4b3c      	ldr	r3, [pc, #240]	; (1dd9c <_sercom_get_default_pad+0x118>)
   1dcaa:	4298      	cmp	r0, r3
   1dcac:	d1f7      	bne.n	1dc9e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcae:	2901      	cmp	r1, #1
   1dcb0:	d017      	beq.n	1dce2 <_sercom_get_default_pad+0x5e>
   1dcb2:	2900      	cmp	r1, #0
   1dcb4:	d05d      	beq.n	1dd72 <_sercom_get_default_pad+0xee>
   1dcb6:	2902      	cmp	r1, #2
   1dcb8:	d015      	beq.n	1dce6 <_sercom_get_default_pad+0x62>
   1dcba:	2903      	cmp	r1, #3
   1dcbc:	d015      	beq.n	1dcea <_sercom_get_default_pad+0x66>
	return 0;
   1dcbe:	2000      	movs	r0, #0
   1dcc0:	e7ee      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcc2:	2901      	cmp	r1, #1
   1dcc4:	d007      	beq.n	1dcd6 <_sercom_get_default_pad+0x52>
   1dcc6:	2900      	cmp	r1, #0
   1dcc8:	d051      	beq.n	1dd6e <_sercom_get_default_pad+0xea>
   1dcca:	2902      	cmp	r1, #2
   1dccc:	d005      	beq.n	1dcda <_sercom_get_default_pad+0x56>
   1dcce:	2903      	cmp	r1, #3
   1dcd0:	d005      	beq.n	1dcde <_sercom_get_default_pad+0x5a>
	return 0;
   1dcd2:	2000      	movs	r0, #0
   1dcd4:	e7e4      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcd6:	4832      	ldr	r0, [pc, #200]	; (1dda0 <_sercom_get_default_pad+0x11c>)
   1dcd8:	e7e2      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dcda:	4832      	ldr	r0, [pc, #200]	; (1dda4 <_sercom_get_default_pad+0x120>)
   1dcdc:	e7e0      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dcde:	4832      	ldr	r0, [pc, #200]	; (1dda8 <_sercom_get_default_pad+0x124>)
   1dce0:	e7de      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dce2:	4832      	ldr	r0, [pc, #200]	; (1ddac <_sercom_get_default_pad+0x128>)
   1dce4:	e7dc      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dce6:	4832      	ldr	r0, [pc, #200]	; (1ddb0 <_sercom_get_default_pad+0x12c>)
   1dce8:	e7da      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dcea:	4832      	ldr	r0, [pc, #200]	; (1ddb4 <_sercom_get_default_pad+0x130>)
   1dcec:	e7d8      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dcee:	2901      	cmp	r1, #1
   1dcf0:	d007      	beq.n	1dd02 <_sercom_get_default_pad+0x7e>
   1dcf2:	2900      	cmp	r1, #0
   1dcf4:	d03f      	beq.n	1dd76 <_sercom_get_default_pad+0xf2>
   1dcf6:	2902      	cmp	r1, #2
   1dcf8:	d005      	beq.n	1dd06 <_sercom_get_default_pad+0x82>
   1dcfa:	2903      	cmp	r1, #3
   1dcfc:	d005      	beq.n	1dd0a <_sercom_get_default_pad+0x86>
	return 0;
   1dcfe:	2000      	movs	r0, #0
   1dd00:	e7ce      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dd02:	482d      	ldr	r0, [pc, #180]	; (1ddb8 <_sercom_get_default_pad+0x134>)
   1dd04:	e7cc      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd06:	482d      	ldr	r0, [pc, #180]	; (1ddbc <_sercom_get_default_pad+0x138>)
   1dd08:	e7ca      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd0a:	482d      	ldr	r0, [pc, #180]	; (1ddc0 <_sercom_get_default_pad+0x13c>)
   1dd0c:	e7c8      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd0e:	2901      	cmp	r1, #1
   1dd10:	d007      	beq.n	1dd22 <_sercom_get_default_pad+0x9e>
   1dd12:	2900      	cmp	r1, #0
   1dd14:	d031      	beq.n	1dd7a <_sercom_get_default_pad+0xf6>
   1dd16:	2902      	cmp	r1, #2
   1dd18:	d005      	beq.n	1dd26 <_sercom_get_default_pad+0xa2>
   1dd1a:	2903      	cmp	r1, #3
   1dd1c:	d005      	beq.n	1dd2a <_sercom_get_default_pad+0xa6>
	return 0;
   1dd1e:	2000      	movs	r0, #0
   1dd20:	e7be      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dd22:	4828      	ldr	r0, [pc, #160]	; (1ddc4 <_sercom_get_default_pad+0x140>)
   1dd24:	e7bc      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd26:	4828      	ldr	r0, [pc, #160]	; (1ddc8 <_sercom_get_default_pad+0x144>)
   1dd28:	e7ba      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd2a:	4828      	ldr	r0, [pc, #160]	; (1ddcc <_sercom_get_default_pad+0x148>)
   1dd2c:	e7b8      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd2e:	2901      	cmp	r1, #1
   1dd30:	d007      	beq.n	1dd42 <_sercom_get_default_pad+0xbe>
   1dd32:	2900      	cmp	r1, #0
   1dd34:	d023      	beq.n	1dd7e <_sercom_get_default_pad+0xfa>
   1dd36:	2902      	cmp	r1, #2
   1dd38:	d005      	beq.n	1dd46 <_sercom_get_default_pad+0xc2>
   1dd3a:	2903      	cmp	r1, #3
   1dd3c:	d005      	beq.n	1dd4a <_sercom_get_default_pad+0xc6>
	return 0;
   1dd3e:	2000      	movs	r0, #0
   1dd40:	e7ae      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dd42:	4823      	ldr	r0, [pc, #140]	; (1ddd0 <_sercom_get_default_pad+0x14c>)
   1dd44:	e7ac      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd46:	4823      	ldr	r0, [pc, #140]	; (1ddd4 <_sercom_get_default_pad+0x150>)
   1dd48:	e7aa      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd4a:	4823      	ldr	r0, [pc, #140]	; (1ddd8 <_sercom_get_default_pad+0x154>)
   1dd4c:	e7a8      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd4e:	2901      	cmp	r1, #1
   1dd50:	d007      	beq.n	1dd62 <_sercom_get_default_pad+0xde>
   1dd52:	2900      	cmp	r1, #0
   1dd54:	d015      	beq.n	1dd82 <_sercom_get_default_pad+0xfe>
   1dd56:	2902      	cmp	r1, #2
   1dd58:	d005      	beq.n	1dd66 <_sercom_get_default_pad+0xe2>
   1dd5a:	2903      	cmp	r1, #3
   1dd5c:	d005      	beq.n	1dd6a <_sercom_get_default_pad+0xe6>
	return 0;
   1dd5e:	2000      	movs	r0, #0
   1dd60:	e79e      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dd62:	481e      	ldr	r0, [pc, #120]	; (1dddc <_sercom_get_default_pad+0x158>)
   1dd64:	e79c      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd66:	481e      	ldr	r0, [pc, #120]	; (1dde0 <_sercom_get_default_pad+0x15c>)
   1dd68:	e79a      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd6a:	481e      	ldr	r0, [pc, #120]	; (1dde4 <_sercom_get_default_pad+0x160>)
   1dd6c:	e798      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd6e:	481e      	ldr	r0, [pc, #120]	; (1dde8 <_sercom_get_default_pad+0x164>)
   1dd70:	e796      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd72:	2003      	movs	r0, #3
   1dd74:	e794      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd76:	481d      	ldr	r0, [pc, #116]	; (1ddec <_sercom_get_default_pad+0x168>)
   1dd78:	e792      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd7a:	481d      	ldr	r0, [pc, #116]	; (1ddf0 <_sercom_get_default_pad+0x16c>)
   1dd7c:	e790      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd7e:	481d      	ldr	r0, [pc, #116]	; (1ddf4 <_sercom_get_default_pad+0x170>)
   1dd80:	e78e      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd82:	481d      	ldr	r0, [pc, #116]	; (1ddf8 <_sercom_get_default_pad+0x174>)
   1dd84:	e78c      	b.n	1dca0 <_sercom_get_default_pad+0x1c>
   1dd86:	46c0      	nop			; (mov r8, r8)
   1dd88:	42001000 	.word	0x42001000
   1dd8c:	42001800 	.word	0x42001800
   1dd90:	42001c00 	.word	0x42001c00
   1dd94:	42001400 	.word	0x42001400
   1dd98:	42000800 	.word	0x42000800
   1dd9c:	42000c00 	.word	0x42000c00
   1dda0:	00050003 	.word	0x00050003
   1dda4:	00060003 	.word	0x00060003
   1dda8:	00070003 	.word	0x00070003
   1ddac:	00010003 	.word	0x00010003
   1ddb0:	001e0003 	.word	0x001e0003
   1ddb4:	001f0003 	.word	0x001f0003
   1ddb8:	00090003 	.word	0x00090003
   1ddbc:	000a0003 	.word	0x000a0003
   1ddc0:	000b0003 	.word	0x000b0003
   1ddc4:	00110003 	.word	0x00110003
   1ddc8:	00120003 	.word	0x00120003
   1ddcc:	00130003 	.word	0x00130003
   1ddd0:	000d0003 	.word	0x000d0003
   1ddd4:	000e0003 	.word	0x000e0003
   1ddd8:	000f0003 	.word	0x000f0003
   1dddc:	00170003 	.word	0x00170003
   1dde0:	00180003 	.word	0x00180003
   1dde4:	00190003 	.word	0x00190003
   1dde8:	00040003 	.word	0x00040003
   1ddec:	00080003 	.word	0x00080003
   1ddf0:	00100003 	.word	0x00100003
   1ddf4:	000c0003 	.word	0x000c0003
   1ddf8:	00160003 	.word	0x00160003

0001ddfc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1ddfc:	b530      	push	{r4, r5, lr}
   1ddfe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1de00:	4b0b      	ldr	r3, [pc, #44]	; (1de30 <_sercom_get_sercom_inst_index+0x34>)
   1de02:	466a      	mov	r2, sp
   1de04:	cb32      	ldmia	r3!, {r1, r4, r5}
   1de06:	c232      	stmia	r2!, {r1, r4, r5}
   1de08:	cb32      	ldmia	r3!, {r1, r4, r5}
   1de0a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1de0c:	9b00      	ldr	r3, [sp, #0]
   1de0e:	4283      	cmp	r3, r0
   1de10:	d00b      	beq.n	1de2a <_sercom_get_sercom_inst_index+0x2e>
   1de12:	2301      	movs	r3, #1
   1de14:	009a      	lsls	r2, r3, #2
   1de16:	4669      	mov	r1, sp
   1de18:	5852      	ldr	r2, [r2, r1]
   1de1a:	4282      	cmp	r2, r0
   1de1c:	d006      	beq.n	1de2c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1de1e:	3301      	adds	r3, #1
   1de20:	2b06      	cmp	r3, #6
   1de22:	d1f7      	bne.n	1de14 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1de24:	2000      	movs	r0, #0
}
   1de26:	b007      	add	sp, #28
   1de28:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1de2a:	2300      	movs	r3, #0
			return i;
   1de2c:	b2d8      	uxtb	r0, r3
   1de2e:	e7fa      	b.n	1de26 <_sercom_get_sercom_inst_index+0x2a>
   1de30:	0002a44c 	.word	0x0002a44c

0001de34 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   1de34:	4770      	bx	lr
	...

0001de38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1de38:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1de3a:	4b0a      	ldr	r3, [pc, #40]	; (1de64 <_sercom_set_handler+0x2c>)
   1de3c:	781b      	ldrb	r3, [r3, #0]
   1de3e:	2b00      	cmp	r3, #0
   1de40:	d10c      	bne.n	1de5c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1de42:	4f09      	ldr	r7, [pc, #36]	; (1de68 <_sercom_set_handler+0x30>)
   1de44:	4e09      	ldr	r6, [pc, #36]	; (1de6c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   1de46:	4d0a      	ldr	r5, [pc, #40]	; (1de70 <_sercom_set_handler+0x38>)
   1de48:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1de4a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   1de4c:	195a      	adds	r2, r3, r5
   1de4e:	6014      	str	r4, [r2, #0]
   1de50:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1de52:	2b18      	cmp	r3, #24
   1de54:	d1f9      	bne.n	1de4a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   1de56:	2201      	movs	r2, #1
   1de58:	4b02      	ldr	r3, [pc, #8]	; (1de64 <_sercom_set_handler+0x2c>)
   1de5a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1de5c:	0080      	lsls	r0, r0, #2
   1de5e:	4b02      	ldr	r3, [pc, #8]	; (1de68 <_sercom_set_handler+0x30>)
   1de60:	50c1      	str	r1, [r0, r3]
}
   1de62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de64:	20003cfe 	.word	0x20003cfe
   1de68:	20003d00 	.word	0x20003d00
   1de6c:	0001de35 	.word	0x0001de35
   1de70:	20005564 	.word	0x20005564

0001de74 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1de74:	b500      	push	{lr}
   1de76:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1de78:	2309      	movs	r3, #9
   1de7a:	466a      	mov	r2, sp
   1de7c:	7013      	strb	r3, [r2, #0]
   1de7e:	3301      	adds	r3, #1
   1de80:	7053      	strb	r3, [r2, #1]
   1de82:	3301      	adds	r3, #1
   1de84:	7093      	strb	r3, [r2, #2]
   1de86:	3301      	adds	r3, #1
   1de88:	70d3      	strb	r3, [r2, #3]
   1de8a:	3301      	adds	r3, #1
   1de8c:	7113      	strb	r3, [r2, #4]
   1de8e:	3301      	adds	r3, #1
   1de90:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1de92:	4b03      	ldr	r3, [pc, #12]	; (1dea0 <_sercom_get_interrupt_vector+0x2c>)
   1de94:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1de96:	466b      	mov	r3, sp
   1de98:	5618      	ldrsb	r0, [r3, r0]
}
   1de9a:	b003      	add	sp, #12
   1de9c:	bd00      	pop	{pc}
   1de9e:	46c0      	nop			; (mov r8, r8)
   1dea0:	0001ddfd 	.word	0x0001ddfd

0001dea4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   1dea4:	b510      	push	{r4, lr}
   1dea6:	4b02      	ldr	r3, [pc, #8]	; (1deb0 <SERCOM0_Handler+0xc>)
   1dea8:	681b      	ldr	r3, [r3, #0]
   1deaa:	2000      	movs	r0, #0
   1deac:	4798      	blx	r3
   1deae:	bd10      	pop	{r4, pc}
   1deb0:	20003d00 	.word	0x20003d00

0001deb4 <SERCOM1_Handler>:
   1deb4:	b510      	push	{r4, lr}
   1deb6:	4b02      	ldr	r3, [pc, #8]	; (1dec0 <SERCOM1_Handler+0xc>)
   1deb8:	685b      	ldr	r3, [r3, #4]
   1deba:	2001      	movs	r0, #1
   1debc:	4798      	blx	r3
   1debe:	bd10      	pop	{r4, pc}
   1dec0:	20003d00 	.word	0x20003d00

0001dec4 <SERCOM2_Handler>:
   1dec4:	b510      	push	{r4, lr}
   1dec6:	4b02      	ldr	r3, [pc, #8]	; (1ded0 <SERCOM2_Handler+0xc>)
   1dec8:	689b      	ldr	r3, [r3, #8]
   1deca:	2002      	movs	r0, #2
   1decc:	4798      	blx	r3
   1dece:	bd10      	pop	{r4, pc}
   1ded0:	20003d00 	.word	0x20003d00

0001ded4 <SERCOM3_Handler>:
   1ded4:	b510      	push	{r4, lr}
   1ded6:	4b02      	ldr	r3, [pc, #8]	; (1dee0 <SERCOM3_Handler+0xc>)
   1ded8:	68db      	ldr	r3, [r3, #12]
   1deda:	2003      	movs	r0, #3
   1dedc:	4798      	blx	r3
   1dede:	bd10      	pop	{r4, pc}
   1dee0:	20003d00 	.word	0x20003d00

0001dee4 <SERCOM4_Handler>:
   1dee4:	b510      	push	{r4, lr}
   1dee6:	4b02      	ldr	r3, [pc, #8]	; (1def0 <SERCOM4_Handler+0xc>)
   1dee8:	691b      	ldr	r3, [r3, #16]
   1deea:	2004      	movs	r0, #4
   1deec:	4798      	blx	r3
   1deee:	bd10      	pop	{r4, pc}
   1def0:	20003d00 	.word	0x20003d00

0001def4 <SERCOM5_Handler>:
   1def4:	b510      	push	{r4, lr}
   1def6:	4b02      	ldr	r3, [pc, #8]	; (1df00 <SERCOM5_Handler+0xc>)
   1def8:	695b      	ldr	r3, [r3, #20]
   1defa:	2005      	movs	r0, #5
   1defc:	4798      	blx	r3
   1defe:	bd10      	pop	{r4, pc}
   1df00:	20003d00 	.word	0x20003d00

0001df04 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   1df04:	b570      	push	{r4, r5, r6, lr}
   1df06:	b082      	sub	sp, #8
   1df08:	0005      	movs	r5, r0
   1df0a:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1df0c:	2200      	movs	r2, #0
   1df0e:	466b      	mov	r3, sp
   1df10:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1df12:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1df14:	0030      	movs	r0, r6
   1df16:	4b24      	ldr	r3, [pc, #144]	; (1dfa8 <spi_set_baudrate+0xa4>)
   1df18:	4798      	blx	r3
   1df1a:	231f      	movs	r3, #31
   1df1c:	4018      	ands	r0, r3
   1df1e:	3b1e      	subs	r3, #30
   1df20:	4083      	lsls	r3, r0
   1df22:	2280      	movs	r2, #128	; 0x80
   1df24:	4921      	ldr	r1, [pc, #132]	; (1dfac <spi_set_baudrate+0xa8>)
   1df26:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df28:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df2a:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   1df2c:	2b00      	cmp	r3, #0
   1df2e:	d1fc      	bne.n	1df2a <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1df30:	338f      	adds	r3, #143	; 0x8f
   1df32:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1df34:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1df36:	6833      	ldr	r3, [r6, #0]
   1df38:	2202      	movs	r2, #2
   1df3a:	4393      	bics	r3, r2
   1df3c:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df3e:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df40:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   1df42:	2b00      	cmp	r3, #0
   1df44:	d1fc      	bne.n	1df40 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1df46:	4b1a      	ldr	r3, [pc, #104]	; (1dfb0 <spi_set_baudrate+0xac>)
   1df48:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1df4a:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1df4c:	b2c0      	uxtb	r0, r0
   1df4e:	4b19      	ldr	r3, [pc, #100]	; (1dfb4 <spi_set_baudrate+0xb0>)
   1df50:	4798      	blx	r3
   1df52:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   1df54:	466b      	mov	r3, sp
   1df56:	1d9a      	adds	r2, r3, #6
   1df58:	0020      	movs	r0, r4
   1df5a:	4b17      	ldr	r3, [pc, #92]	; (1dfb8 <spi_set_baudrate+0xb4>)
   1df5c:	4798      	blx	r3
   1df5e:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   1df60:	d003      	beq.n	1df6a <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   1df62:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   1df64:	0020      	movs	r0, r4
   1df66:	b002      	add	sp, #8
   1df68:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   1df6a:	466b      	mov	r3, sp
   1df6c:	3306      	adds	r3, #6
   1df6e:	781b      	ldrb	r3, [r3, #0]
   1df70:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df72:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df74:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   1df76:	2b00      	cmp	r3, #0
   1df78:	d1fc      	bne.n	1df74 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1df7a:	0030      	movs	r0, r6
   1df7c:	4b0a      	ldr	r3, [pc, #40]	; (1dfa8 <spi_set_baudrate+0xa4>)
   1df7e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1df80:	231f      	movs	r3, #31
   1df82:	4018      	ands	r0, r3
   1df84:	3b1e      	subs	r3, #30
   1df86:	4083      	lsls	r3, r0
   1df88:	4a08      	ldr	r2, [pc, #32]	; (1dfac <spi_set_baudrate+0xa8>)
   1df8a:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df8c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df8e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1df90:	2b00      	cmp	r3, #0
   1df92:	d1fc      	bne.n	1df8e <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1df94:	6833      	ldr	r3, [r6, #0]
   1df96:	2202      	movs	r2, #2
   1df98:	4313      	orrs	r3, r2
   1df9a:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df9c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df9e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	d1fc      	bne.n	1df9e <spi_set_baudrate+0x9a>
   1dfa4:	e7de      	b.n	1df64 <spi_set_baudrate+0x60>
   1dfa6:	46c0      	nop			; (mov r8, r8)
   1dfa8:	0001de75 	.word	0x0001de75
   1dfac:	e000e100 	.word	0xe000e100
   1dfb0:	0001ddfd 	.word	0x0001ddfd
   1dfb4:	0001f1b9 	.word	0x0001f1b9
   1dfb8:	0001db7b 	.word	0x0001db7b

0001dfbc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1dfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfbe:	b08b      	sub	sp, #44	; 0x2c
   1dfc0:	0005      	movs	r5, r0
   1dfc2:	000c      	movs	r4, r1
   1dfc4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1dfc6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1dfc8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1dfca:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1dfcc:	079b      	lsls	r3, r3, #30
   1dfce:	d501      	bpl.n	1dfd4 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   1dfd0:	b00b      	add	sp, #44	; 0x2c
   1dfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1dfd4:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1dfd6:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1dfd8:	07db      	lsls	r3, r3, #31
   1dfda:	d4f9      	bmi.n	1dfd0 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1dfdc:	0008      	movs	r0, r1
   1dfde:	4b60      	ldr	r3, [pc, #384]	; (1e160 <spi_init+0x1a4>)
   1dfe0:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
   1dfe2:	4a60      	ldr	r2, [pc, #384]	; (1e164 <spi_init+0x1a8>)
   1dfe4:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1dfe6:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1dfe8:	2301      	movs	r3, #1
   1dfea:	40bb      	lsls	r3, r7
   1dfec:	430b      	orrs	r3, r1
   1dfee:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1dff0:	a909      	add	r1, sp, #36	; 0x24
   1dff2:	2724      	movs	r7, #36	; 0x24
   1dff4:	5df3      	ldrb	r3, [r6, r7]
   1dff6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1dff8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1dffa:	b2c3      	uxtb	r3, r0
   1dffc:	9301      	str	r3, [sp, #4]
   1dffe:	0018      	movs	r0, r3
   1e000:	4b59      	ldr	r3, [pc, #356]	; (1e168 <spi_init+0x1ac>)
   1e002:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1e004:	9801      	ldr	r0, [sp, #4]
   1e006:	4b59      	ldr	r3, [pc, #356]	; (1e16c <spi_init+0x1b0>)
   1e008:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1e00a:	5df0      	ldrb	r0, [r6, r7]
   1e00c:	2100      	movs	r1, #0
   1e00e:	4b58      	ldr	r3, [pc, #352]	; (1e170 <spi_init+0x1b4>)
   1e010:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1e012:	7833      	ldrb	r3, [r6, #0]
   1e014:	2b01      	cmp	r3, #1
   1e016:	d038      	beq.n	1e08a <spi_init+0xce>
   1e018:	002b      	movs	r3, r5
   1e01a:	330c      	adds	r3, #12
   1e01c:	0029      	movs	r1, r5
   1e01e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   1e020:	2200      	movs	r2, #0
   1e022:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1e024:	428b      	cmp	r3, r1
   1e026:	d1fc      	bne.n	1e022 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1e028:	2300      	movs	r3, #0
   1e02a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   1e02c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1e02e:	2400      	movs	r4, #0
   1e030:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   1e032:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   1e034:	3336      	adds	r3, #54	; 0x36
   1e036:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1e038:	3301      	adds	r3, #1
   1e03a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   1e03c:	3301      	adds	r3, #1
   1e03e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   1e040:	3b35      	subs	r3, #53	; 0x35
   1e042:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   1e044:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e046:	6828      	ldr	r0, [r5, #0]
   1e048:	4b45      	ldr	r3, [pc, #276]	; (1e160 <spi_init+0x1a4>)
   1e04a:	4798      	blx	r3
   1e04c:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   1e04e:	4949      	ldr	r1, [pc, #292]	; (1e174 <spi_init+0x1b8>)
   1e050:	4b49      	ldr	r3, [pc, #292]	; (1e178 <spi_init+0x1bc>)
   1e052:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e054:	00bf      	lsls	r7, r7, #2
   1e056:	4b49      	ldr	r3, [pc, #292]	; (1e17c <spi_init+0x1c0>)
   1e058:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e05a:	682f      	ldr	r7, [r5, #0]
   1e05c:	ab04      	add	r3, sp, #16
   1e05e:	2280      	movs	r2, #128	; 0x80
   1e060:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e062:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1e064:	3a7f      	subs	r2, #127	; 0x7f
   1e066:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e068:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   1e06a:	7833      	ldrb	r3, [r6, #0]
   1e06c:	2b00      	cmp	r3, #0
   1e06e:	d102      	bne.n	1e076 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e070:	2200      	movs	r2, #0
   1e072:	ab04      	add	r3, sp, #16
   1e074:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e076:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e078:	9305      	str	r3, [sp, #20]
   1e07a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1e07c:	9306      	str	r3, [sp, #24]
   1e07e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e080:	9307      	str	r3, [sp, #28]
   1e082:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e084:	9308      	str	r3, [sp, #32]
   1e086:	2400      	movs	r4, #0
   1e088:	e00b      	b.n	1e0a2 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1e08a:	6823      	ldr	r3, [r4, #0]
   1e08c:	220c      	movs	r2, #12
   1e08e:	4313      	orrs	r3, r2
   1e090:	6023      	str	r3, [r4, #0]
   1e092:	e7c1      	b.n	1e018 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e094:	0038      	movs	r0, r7
   1e096:	4b3a      	ldr	r3, [pc, #232]	; (1e180 <spi_init+0x1c4>)
   1e098:	4798      	blx	r3
   1e09a:	e00a      	b.n	1e0b2 <spi_init+0xf6>
   1e09c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e09e:	2c04      	cmp	r4, #4
   1e0a0:	d010      	beq.n	1e0c4 <spi_init+0x108>
   1e0a2:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e0a4:	00a3      	lsls	r3, r4, #2
   1e0a6:	aa02      	add	r2, sp, #8
   1e0a8:	200c      	movs	r0, #12
   1e0aa:	1812      	adds	r2, r2, r0
   1e0ac:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e0ae:	2800      	cmp	r0, #0
   1e0b0:	d0f0      	beq.n	1e094 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   1e0b2:	1c43      	adds	r3, r0, #1
   1e0b4:	d0f2      	beq.n	1e09c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e0b6:	a904      	add	r1, sp, #16
   1e0b8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e0ba:	0c00      	lsrs	r0, r0, #16
   1e0bc:	b2c0      	uxtb	r0, r0
   1e0be:	4b31      	ldr	r3, [pc, #196]	; (1e184 <spi_init+0x1c8>)
   1e0c0:	4798      	blx	r3
   1e0c2:	e7eb      	b.n	1e09c <spi_init+0xe0>
	module->mode             = config->mode;
   1e0c4:	7833      	ldrb	r3, [r6, #0]
   1e0c6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1e0c8:	7c33      	ldrb	r3, [r6, #16]
   1e0ca:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1e0cc:	7cb3      	ldrb	r3, [r6, #18]
   1e0ce:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   1e0d0:	7d33      	ldrb	r3, [r6, #20]
   1e0d2:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   1e0d4:	2200      	movs	r2, #0
   1e0d6:	ab02      	add	r3, sp, #8
   1e0d8:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1e0da:	7833      	ldrb	r3, [r6, #0]
   1e0dc:	2b01      	cmp	r3, #1
   1e0de:	d028      	beq.n	1e132 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   1e0e0:	6873      	ldr	r3, [r6, #4]
   1e0e2:	68b2      	ldr	r2, [r6, #8]
   1e0e4:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1e0e6:	68f2      	ldr	r2, [r6, #12]
   1e0e8:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1e0ea:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   1e0ec:	7c72      	ldrb	r2, [r6, #17]
   1e0ee:	2a00      	cmp	r2, #0
   1e0f0:	d103      	bne.n	1e0fa <spi_init+0x13e>
   1e0f2:	4a25      	ldr	r2, [pc, #148]	; (1e188 <spi_init+0x1cc>)
   1e0f4:	7892      	ldrb	r2, [r2, #2]
   1e0f6:	0792      	lsls	r2, r2, #30
   1e0f8:	d501      	bpl.n	1e0fe <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1e0fa:	2280      	movs	r2, #128	; 0x80
   1e0fc:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   1e0fe:	7cb2      	ldrb	r2, [r6, #18]
   1e100:	2a00      	cmp	r2, #0
   1e102:	d002      	beq.n	1e10a <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1e104:	2280      	movs	r2, #128	; 0x80
   1e106:	0292      	lsls	r2, r2, #10
   1e108:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1e10a:	7cf2      	ldrb	r2, [r6, #19]
   1e10c:	2a00      	cmp	r2, #0
   1e10e:	d002      	beq.n	1e116 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   1e110:	2280      	movs	r2, #128	; 0x80
   1e112:	0092      	lsls	r2, r2, #2
   1e114:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1e116:	7d32      	ldrb	r2, [r6, #20]
   1e118:	2a00      	cmp	r2, #0
   1e11a:	d002      	beq.n	1e122 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1e11c:	2280      	movs	r2, #128	; 0x80
   1e11e:	0192      	lsls	r2, r2, #6
   1e120:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   1e122:	683a      	ldr	r2, [r7, #0]
   1e124:	4313      	orrs	r3, r2
   1e126:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1e128:	687b      	ldr	r3, [r7, #4]
   1e12a:	430b      	orrs	r3, r1
   1e12c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   1e12e:	2000      	movs	r0, #0
   1e130:	e74e      	b.n	1dfd0 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e132:	6828      	ldr	r0, [r5, #0]
   1e134:	4b0a      	ldr	r3, [pc, #40]	; (1e160 <spi_init+0x1a4>)
   1e136:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e138:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1e13a:	b2c0      	uxtb	r0, r0
   1e13c:	4b13      	ldr	r3, [pc, #76]	; (1e18c <spi_init+0x1d0>)
   1e13e:	4798      	blx	r3
   1e140:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   1e142:	ab02      	add	r3, sp, #8
   1e144:	1d9a      	adds	r2, r3, #6
   1e146:	69b0      	ldr	r0, [r6, #24]
   1e148:	4b11      	ldr	r3, [pc, #68]	; (1e190 <spi_init+0x1d4>)
   1e14a:	4798      	blx	r3
   1e14c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   1e14e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   1e150:	2b00      	cmp	r3, #0
   1e152:	d000      	beq.n	1e156 <spi_init+0x19a>
   1e154:	e73c      	b.n	1dfd0 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   1e156:	ab02      	add	r3, sp, #8
   1e158:	3306      	adds	r3, #6
   1e15a:	781b      	ldrb	r3, [r3, #0]
   1e15c:	733b      	strb	r3, [r7, #12]
   1e15e:	e7bf      	b.n	1e0e0 <spi_init+0x124>
   1e160:	0001ddfd 	.word	0x0001ddfd
   1e164:	40000400 	.word	0x40000400
   1e168:	0001f19d 	.word	0x0001f19d
   1e16c:	0001f111 	.word	0x0001f111
   1e170:	0001dc39 	.word	0x0001dc39
   1e174:	0001e429 	.word	0x0001e429
   1e178:	0001de39 	.word	0x0001de39
   1e17c:	20005564 	.word	0x20005564
   1e180:	0001dc85 	.word	0x0001dc85
   1e184:	0001f2c5 	.word	0x0001f2c5
   1e188:	41002000 	.word	0x41002000
   1e18c:	0001f1b9 	.word	0x0001f1b9
   1e190:	0001db7b 	.word	0x0001db7b

0001e194 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   1e194:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e196:	46d6      	mov	lr, sl
   1e198:	4647      	mov	r7, r8
   1e19a:	b580      	push	{r7, lr}
   1e19c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e19e:	2438      	movs	r4, #56	; 0x38
   1e1a0:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e1a2:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e1a4:	2d05      	cmp	r5, #5
   1e1a6:	d002      	beq.n	1e1ae <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e1a8:	3412      	adds	r4, #18
	if (length == 0) {
   1e1aa:	2a00      	cmp	r2, #0
   1e1ac:	d105      	bne.n	1e1ba <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1e1ae:	0020      	movs	r0, r4
   1e1b0:	b003      	add	sp, #12
   1e1b2:	bc0c      	pop	{r2, r3}
   1e1b4:	4690      	mov	r8, r2
   1e1b6:	469a      	mov	sl, r3
   1e1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1e1ba:	79c4      	ldrb	r4, [r0, #7]
   1e1bc:	2c00      	cmp	r4, #0
   1e1be:	d144      	bne.n	1e24a <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   1e1c0:	341c      	adds	r4, #28
   1e1c2:	e7f4      	b.n	1e1ae <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e1c4:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e1c6:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1e1c8:	423c      	tst	r4, r7
   1e1ca:	d0fc      	beq.n	1e1c6 <spi_read_buffer_wait+0x32>
   1e1cc:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1e1ce:	423c      	tst	r4, r7
   1e1d0:	d01a      	beq.n	1e208 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e1d2:	4644      	mov	r4, r8
   1e1d4:	62ac      	str	r4, [r5, #40]	; 0x28
   1e1d6:	e017      	b.n	1e208 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e1d8:	7984      	ldrb	r4, [r0, #6]
   1e1da:	2c01      	cmp	r4, #1
   1e1dc:	d026      	beq.n	1e22c <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e1de:	6aad      	ldr	r5, [r5, #40]	; 0x28
   1e1e0:	b2ec      	uxtb	r4, r5
   1e1e2:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   1e1e4:	9c01      	ldr	r4, [sp, #4]
   1e1e6:	2c00      	cmp	r4, #0
   1e1e8:	d13a      	bne.n	1e260 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1e1ea:	1c75      	adds	r5, r6, #1
   1e1ec:	b2ad      	uxth	r5, r5
   1e1ee:	4664      	mov	r4, ip
   1e1f0:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e1f2:	7984      	ldrb	r4, [r0, #6]
   1e1f4:	2c01      	cmp	r4, #1
   1e1f6:	d01e      	beq.n	1e236 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1e1f8:	002e      	movs	r6, r5
	while (length--) {
   1e1fa:	3a01      	subs	r2, #1
   1e1fc:	b292      	uxth	r2, r2
   1e1fe:	4552      	cmp	r2, sl
   1e200:	d01f      	beq.n	1e242 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   1e202:	7944      	ldrb	r4, [r0, #5]
   1e204:	2c01      	cmp	r4, #1
   1e206:	d0dd      	beq.n	1e1c4 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e208:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e20a:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   1e20c:	421c      	tst	r4, r3
   1e20e:	d0fc      	beq.n	1e20a <spi_read_buffer_wait+0x76>
   1e210:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   1e212:	421c      	tst	r4, r3
   1e214:	d017      	beq.n	1e246 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e216:	8b6c      	ldrh	r4, [r5, #26]
   1e218:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1e21a:	2400      	movs	r4, #0
   1e21c:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e21e:	4664      	mov	r4, ip
   1e220:	421c      	tst	r4, r3
   1e222:	d0d9      	beq.n	1e1d8 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e224:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1e226:	241e      	movs	r4, #30
   1e228:	9401      	str	r4, [sp, #4]
   1e22a:	e7d5      	b.n	1e1d8 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e22c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1e22e:	05e4      	lsls	r4, r4, #23
   1e230:	0de4      	lsrs	r4, r4, #23
   1e232:	46a4      	mov	ip, r4
   1e234:	e7d6      	b.n	1e1e4 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1e236:	3602      	adds	r6, #2
   1e238:	b2b6      	uxth	r6, r6
   1e23a:	4664      	mov	r4, ip
   1e23c:	0a24      	lsrs	r4, r4, #8
   1e23e:	554c      	strb	r4, [r1, r5]
   1e240:	e7db      	b.n	1e1fa <spi_read_buffer_wait+0x66>
   1e242:	9c01      	ldr	r4, [sp, #4]
   1e244:	e7b3      	b.n	1e1ae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   1e246:	2410      	movs	r4, #16
   1e248:	e7b1      	b.n	1e1ae <spi_read_buffer_wait+0x1a>
	while (length--) {
   1e24a:	3a01      	subs	r2, #1
   1e24c:	b292      	uxth	r2, r2
   1e24e:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   1e250:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e252:	05db      	lsls	r3, r3, #23
   1e254:	0ddb      	lsrs	r3, r3, #23
   1e256:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   1e258:	2304      	movs	r3, #4
	while (length--) {
   1e25a:	4c02      	ldr	r4, [pc, #8]	; (1e264 <spi_read_buffer_wait+0xd0>)
   1e25c:	46a2      	mov	sl, r4
   1e25e:	e7d0      	b.n	1e202 <spi_read_buffer_wait+0x6e>
   1e260:	9c01      	ldr	r4, [sp, #4]
   1e262:	e7a4      	b.n	1e1ae <spi_read_buffer_wait+0x1a>
   1e264:	0000ffff 	.word	0x0000ffff

0001e268 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1e268:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1e26a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e26c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   1e26e:	2c01      	cmp	r4, #1
   1e270:	d001      	beq.n	1e276 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   1e272:	0018      	movs	r0, r3
   1e274:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   1e276:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   1e278:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   1e27a:	2c00      	cmp	r4, #0
   1e27c:	d1f9      	bne.n	1e272 <spi_select_slave+0xa>
		if (select) {
   1e27e:	2a00      	cmp	r2, #0
   1e280:	d058      	beq.n	1e334 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   1e282:	784b      	ldrb	r3, [r1, #1]
   1e284:	2b00      	cmp	r3, #0
   1e286:	d044      	beq.n	1e312 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e288:	6803      	ldr	r3, [r0, #0]
   1e28a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   1e28c:	07db      	lsls	r3, r3, #31
   1e28e:	d410      	bmi.n	1e2b2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   1e290:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   1e292:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   1e294:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e296:	2900      	cmp	r1, #0
   1e298:	d104      	bne.n	1e2a4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   1e29a:	0953      	lsrs	r3, r2, #5
   1e29c:	01db      	lsls	r3, r3, #7
   1e29e:	492e      	ldr	r1, [pc, #184]	; (1e358 <spi_select_slave+0xf0>)
   1e2a0:	468c      	mov	ip, r1
   1e2a2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e2a4:	211f      	movs	r1, #31
   1e2a6:	4011      	ands	r1, r2
   1e2a8:	2201      	movs	r2, #1
   1e2aa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e2ac:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   1e2ae:	2305      	movs	r3, #5
   1e2b0:	e7df      	b.n	1e272 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e2b2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e2b4:	09d4      	lsrs	r4, r2, #7
		return NULL;
   1e2b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e2b8:	2c00      	cmp	r4, #0
   1e2ba:	d104      	bne.n	1e2c6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   1e2bc:	0953      	lsrs	r3, r2, #5
   1e2be:	01db      	lsls	r3, r3, #7
   1e2c0:	4c25      	ldr	r4, [pc, #148]	; (1e358 <spi_select_slave+0xf0>)
   1e2c2:	46a4      	mov	ip, r4
   1e2c4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e2c6:	241f      	movs	r4, #31
   1e2c8:	4014      	ands	r4, r2
   1e2ca:	2201      	movs	r2, #1
   1e2cc:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
   1e2ce:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2d0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e2d2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1e2d4:	07d2      	lsls	r2, r2, #31
   1e2d6:	d501      	bpl.n	1e2dc <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e2d8:	788a      	ldrb	r2, [r1, #2]
   1e2da:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   1e2dc:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   1e2de:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   1e2e0:	2a00      	cmp	r2, #0
   1e2e2:	d1c6      	bne.n	1e272 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2e4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1e2e6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e2e8:	7e13      	ldrb	r3, [r2, #24]
   1e2ea:	420b      	tst	r3, r1
   1e2ec:	d0fc      	beq.n	1e2e8 <spi_select_slave+0x80>
   1e2ee:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   1e2f0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   1e2f2:	0749      	lsls	r1, r1, #29
   1e2f4:	d5bd      	bpl.n	1e272 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e2f6:	8b53      	ldrh	r3, [r2, #26]
   1e2f8:	075b      	lsls	r3, r3, #29
   1e2fa:	d501      	bpl.n	1e300 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e2fc:	2304      	movs	r3, #4
   1e2fe:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e300:	7983      	ldrb	r3, [r0, #6]
   1e302:	2b01      	cmp	r3, #1
   1e304:	d002      	beq.n	1e30c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e306:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e308:	2300      	movs	r3, #0
   1e30a:	e7b2      	b.n	1e272 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e30c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e30e:	2300      	movs	r3, #0
   1e310:	e7af      	b.n	1e272 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e312:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e314:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e316:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e318:	2900      	cmp	r1, #0
   1e31a:	d104      	bne.n	1e326 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   1e31c:	0953      	lsrs	r3, r2, #5
   1e31e:	01db      	lsls	r3, r3, #7
   1e320:	490d      	ldr	r1, [pc, #52]	; (1e358 <spi_select_slave+0xf0>)
   1e322:	468c      	mov	ip, r1
   1e324:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e326:	211f      	movs	r1, #31
   1e328:	4011      	ands	r1, r2
   1e32a:	2201      	movs	r2, #1
   1e32c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   1e32e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   1e330:	2300      	movs	r3, #0
   1e332:	e79e      	b.n	1e272 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   1e334:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e336:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e338:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e33a:	2900      	cmp	r1, #0
   1e33c:	d104      	bne.n	1e348 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   1e33e:	0953      	lsrs	r3, r2, #5
   1e340:	01db      	lsls	r3, r3, #7
   1e342:	4905      	ldr	r1, [pc, #20]	; (1e358 <spi_select_slave+0xf0>)
   1e344:	468c      	mov	ip, r1
   1e346:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e348:	211f      	movs	r1, #31
   1e34a:	4011      	ands	r1, r2
   1e34c:	2201      	movs	r2, #1
   1e34e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e350:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   1e352:	2300      	movs	r3, #0
   1e354:	e78d      	b.n	1e272 <spi_select_slave+0xa>
   1e356:	46c0      	nop			; (mov r8, r8)
   1e358:	41004400 	.word	0x41004400

0001e35c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   1e35c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e35e:	46de      	mov	lr, fp
   1e360:	4657      	mov	r7, sl
   1e362:	464e      	mov	r6, r9
   1e364:	4645      	mov	r5, r8
   1e366:	b5e0      	push	{r5, r6, r7, lr}
   1e368:	b083      	sub	sp, #12
   1e36a:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e36c:	2338      	movs	r3, #56	; 0x38
   1e36e:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e370:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e372:	2c05      	cmp	r4, #5
   1e374:	d002      	beq.n	1e37c <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e376:	3312      	adds	r3, #18
	if (length == 0) {
   1e378:	2a00      	cmp	r2, #0
   1e37a:	d14b      	bne.n	1e414 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   1e37c:	0018      	movs	r0, r3
   1e37e:	b003      	add	sp, #12
   1e380:	bc3c      	pop	{r2, r3, r4, r5}
   1e382:	4690      	mov	r8, r2
   1e384:	4699      	mov	r9, r3
   1e386:	46a2      	mov	sl, r4
   1e388:	46ab      	mov	fp, r5
   1e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   1e38c:	3702      	adds	r7, #2
   1e38e:	b2bf      	uxth	r7, r7
   1e390:	4641      	mov	r1, r8
   1e392:	4653      	mov	r3, sl
   1e394:	5c59      	ldrb	r1, [r3, r1]
   1e396:	0209      	lsls	r1, r1, #8
   1e398:	465b      	mov	r3, fp
   1e39a:	430b      	orrs	r3, r1
   1e39c:	e018      	b.n	1e3d0 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e39e:	7983      	ldrb	r3, [r0, #6]
   1e3a0:	2b01      	cmp	r3, #1
   1e3a2:	d02a      	beq.n	1e3fa <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e3a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1e3a6:	3e01      	subs	r6, #1
   1e3a8:	b2b6      	uxth	r6, r6
   1e3aa:	4566      	cmp	r6, ip
   1e3ac:	d027      	beq.n	1e3fe <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3ae:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e3b0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   1e3b2:	4223      	tst	r3, r4
   1e3b4:	d0fc      	beq.n	1e3b0 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e3b6:	1c7b      	adds	r3, r7, #1
   1e3b8:	b29b      	uxth	r3, r3
   1e3ba:	4698      	mov	r8, r3
   1e3bc:	4653      	mov	r3, sl
   1e3be:	5ddb      	ldrb	r3, [r3, r7]
   1e3c0:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e3c2:	7981      	ldrb	r1, [r0, #6]
   1e3c4:	2901      	cmp	r1, #1
   1e3c6:	d0e1      	beq.n	1e38c <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e3c8:	4669      	mov	r1, sp
   1e3ca:	80cb      	strh	r3, [r1, #6]
   1e3cc:	88cb      	ldrh	r3, [r1, #6]
   1e3ce:	4647      	mov	r7, r8
   1e3d0:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1e3d2:	4221      	tst	r1, r4
   1e3d4:	d002      	beq.n	1e3dc <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e3d6:	05db      	lsls	r3, r3, #23
   1e3d8:	0ddb      	lsrs	r3, r3, #23
   1e3da:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   1e3dc:	79c3      	ldrb	r3, [r0, #7]
   1e3de:	2b00      	cmp	r3, #0
   1e3e0:	d0e1      	beq.n	1e3a6 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3e2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e3e4:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1e3e6:	422b      	tst	r3, r5
   1e3e8:	d0fc      	beq.n	1e3e4 <spi_write_buffer_wait+0x88>
   1e3ea:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1e3ec:	422b      	tst	r3, r5
   1e3ee:	d0da      	beq.n	1e3a6 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e3f0:	8b53      	ldrh	r3, [r2, #26]
   1e3f2:	422b      	tst	r3, r5
   1e3f4:	d0d3      	beq.n	1e39e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e3f6:	8355      	strh	r5, [r2, #26]
   1e3f8:	e7d1      	b.n	1e39e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e3fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e3fc:	e7d3      	b.n	1e3a6 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   1e3fe:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   1e400:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   1e402:	2a01      	cmp	r2, #1
   1e404:	d1ba      	bne.n	1e37c <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e406:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1e408:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1e40a:	7e0b      	ldrb	r3, [r1, #24]
   1e40c:	4213      	tst	r3, r2
   1e40e:	d0fc      	beq.n	1e40a <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   1e410:	2300      	movs	r3, #0
   1e412:	e7b3      	b.n	1e37c <spi_write_buffer_wait+0x20>
	while (length--) {
   1e414:	3a01      	subs	r2, #1
   1e416:	b296      	uxth	r6, r2
   1e418:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1e41a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   1e41c:	2504      	movs	r5, #4
	while (length--) {
   1e41e:	4b01      	ldr	r3, [pc, #4]	; (1e424 <spi_write_buffer_wait+0xc8>)
   1e420:	469c      	mov	ip, r3
   1e422:	e7c4      	b.n	1e3ae <spi_write_buffer_wait+0x52>
   1e424:	0000ffff 	.word	0x0000ffff

0001e428 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1e428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1e42a:	0080      	lsls	r0, r0, #2
   1e42c:	4b70      	ldr	r3, [pc, #448]	; (1e5f0 <_spi_interrupt_handler+0x1c8>)
   1e42e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e430:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   1e432:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   1e434:	5ce7      	ldrb	r7, [r4, r3]
   1e436:	2236      	movs	r2, #54	; 0x36
   1e438:	5ca2      	ldrb	r2, [r4, r2]
   1e43a:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   1e43c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   1e43e:	7db5      	ldrb	r5, [r6, #22]
   1e440:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   1e442:	07eb      	lsls	r3, r5, #31
   1e444:	d502      	bpl.n	1e44c <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e446:	7963      	ldrb	r3, [r4, #5]
   1e448:	2b01      	cmp	r3, #1
   1e44a:	d01e      	beq.n	1e48a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   1e44c:	076b      	lsls	r3, r5, #29
   1e44e:	d511      	bpl.n	1e474 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e450:	8b73      	ldrh	r3, [r6, #26]
   1e452:	075b      	lsls	r3, r3, #29
   1e454:	d55a      	bpl.n	1e50c <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   1e456:	7a63      	ldrb	r3, [r4, #9]
   1e458:	2b01      	cmp	r3, #1
   1e45a:	d008      	beq.n	1e46e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   1e45c:	221e      	movs	r2, #30
   1e45e:	2338      	movs	r3, #56	; 0x38
   1e460:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   1e462:	3b35      	subs	r3, #53	; 0x35
   1e464:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1e466:	3302      	adds	r3, #2
   1e468:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   1e46a:	073b      	lsls	r3, r7, #28
   1e46c:	d44a      	bmi.n	1e504 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   1e46e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e470:	2304      	movs	r3, #4
   1e472:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   1e474:	07ab      	lsls	r3, r5, #30
   1e476:	d503      	bpl.n	1e480 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e478:	7963      	ldrb	r3, [r4, #5]
   1e47a:	2b01      	cmp	r3, #1
   1e47c:	d100      	bne.n	1e480 <_spi_interrupt_handler+0x58>
   1e47e:	e097      	b.n	1e5b0 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   1e480:	b26d      	sxtb	r5, r5
   1e482:	2d00      	cmp	r5, #0
   1e484:	da00      	bge.n	1e488 <_spi_interrupt_handler+0x60>
   1e486:	e0a9      	b.n	1e5dc <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   1e488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   1e48a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e48c:	2b00      	cmp	r3, #0
   1e48e:	d022      	beq.n	1e4d6 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   1e490:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   1e492:	2b00      	cmp	r3, #0
   1e494:	d0da      	beq.n	1e44c <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e496:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e498:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1e49a:	7813      	ldrb	r3, [r2, #0]
   1e49c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   1e49e:	1c50      	adds	r0, r2, #1
   1e4a0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e4a2:	79a0      	ldrb	r0, [r4, #6]
   1e4a4:	2801      	cmp	r0, #1
   1e4a6:	d027      	beq.n	1e4f8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e4a8:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   1e4aa:	05db      	lsls	r3, r3, #23
   1e4ac:	0ddb      	lsrs	r3, r3, #23
   1e4ae:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   1e4b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e4b2:	3b01      	subs	r3, #1
   1e4b4:	b29b      	uxth	r3, r3
   1e4b6:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   1e4b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e4ba:	b29b      	uxth	r3, r3
   1e4bc:	2b00      	cmp	r3, #0
   1e4be:	d1c5      	bne.n	1e44c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e4c0:	3301      	adds	r3, #1
   1e4c2:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   1e4c4:	7a63      	ldrb	r3, [r4, #9]
   1e4c6:	2b01      	cmp	r3, #1
   1e4c8:	d1c0      	bne.n	1e44c <_spi_interrupt_handler+0x24>
   1e4ca:	79e3      	ldrb	r3, [r4, #7]
   1e4cc:	2b00      	cmp	r3, #0
   1e4ce:	d1bd      	bne.n	1e44c <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e4d0:	3302      	adds	r3, #2
   1e4d2:	75b3      	strb	r3, [r6, #22]
   1e4d4:	e7ba      	b.n	1e44c <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1e4d6:	4b47      	ldr	r3, [pc, #284]	; (1e5f4 <_spi_interrupt_handler+0x1cc>)
   1e4d8:	881b      	ldrh	r3, [r3, #0]
   1e4da:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e4dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e4de:	3b01      	subs	r3, #1
   1e4e0:	b29b      	uxth	r3, r3
   1e4e2:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   1e4e4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e4e6:	b29b      	uxth	r3, r3
   1e4e8:	2b00      	cmp	r3, #0
   1e4ea:	d101      	bne.n	1e4f0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e4ec:	3301      	adds	r3, #1
   1e4ee:	7533      	strb	r3, [r6, #20]
		if (0
   1e4f0:	7963      	ldrb	r3, [r4, #5]
   1e4f2:	2b01      	cmp	r3, #1
   1e4f4:	d0cc      	beq.n	1e490 <_spi_interrupt_handler+0x68>
   1e4f6:	e7a9      	b.n	1e44c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1e4f8:	7850      	ldrb	r0, [r2, #1]
   1e4fa:	0200      	lsls	r0, r0, #8
   1e4fc:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   1e4fe:	3202      	adds	r2, #2
   1e500:	62e2      	str	r2, [r4, #44]	; 0x2c
   1e502:	e7d2      	b.n	1e4aa <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1e504:	0020      	movs	r0, r4
   1e506:	69a3      	ldr	r3, [r4, #24]
   1e508:	4798      	blx	r3
   1e50a:	e7b0      	b.n	1e46e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   1e50c:	7a63      	ldrb	r3, [r4, #9]
   1e50e:	2b01      	cmp	r3, #1
   1e510:	d028      	beq.n	1e564 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e512:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e516:	05db      	lsls	r3, r3, #23
   1e518:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1e51a:	b2da      	uxtb	r2, r3
   1e51c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1e51e:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   1e520:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1e522:	1c51      	adds	r1, r2, #1
   1e524:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e526:	79a1      	ldrb	r1, [r4, #6]
   1e528:	2901      	cmp	r1, #1
   1e52a:	d034      	beq.n	1e596 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   1e52c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e52e:	3b01      	subs	r3, #1
   1e530:	b29b      	uxth	r3, r3
   1e532:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   1e534:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e536:	b29b      	uxth	r3, r3
   1e538:	2b00      	cmp	r3, #0
   1e53a:	d000      	beq.n	1e53e <_spi_interrupt_handler+0x116>
   1e53c:	e79a      	b.n	1e474 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   1e53e:	2200      	movs	r2, #0
   1e540:	3338      	adds	r3, #56	; 0x38
   1e542:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e544:	3b34      	subs	r3, #52	; 0x34
   1e546:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1e548:	7a63      	ldrb	r3, [r4, #9]
   1e54a:	2b02      	cmp	r3, #2
   1e54c:	d029      	beq.n	1e5a2 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   1e54e:	7a63      	ldrb	r3, [r4, #9]
   1e550:	2b00      	cmp	r3, #0
   1e552:	d000      	beq.n	1e556 <_spi_interrupt_handler+0x12e>
   1e554:	e78e      	b.n	1e474 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1e556:	07bb      	lsls	r3, r7, #30
   1e558:	d400      	bmi.n	1e55c <_spi_interrupt_handler+0x134>
   1e55a:	e78b      	b.n	1e474 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   1e55c:	0020      	movs	r0, r4
   1e55e:	6923      	ldr	r3, [r4, #16]
   1e560:	4798      	blx	r3
   1e562:	e787      	b.n	1e474 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e564:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   1e566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e568:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e56a:	3b01      	subs	r3, #1
   1e56c:	b29b      	uxth	r3, r3
   1e56e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   1e570:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e572:	b29b      	uxth	r3, r3
   1e574:	2b00      	cmp	r3, #0
   1e576:	d000      	beq.n	1e57a <_spi_interrupt_handler+0x152>
   1e578:	e77c      	b.n	1e474 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e57a:	3304      	adds	r3, #4
   1e57c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   1e57e:	2200      	movs	r2, #0
   1e580:	3334      	adds	r3, #52	; 0x34
   1e582:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   1e584:	3b35      	subs	r3, #53	; 0x35
   1e586:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   1e588:	07fb      	lsls	r3, r7, #31
   1e58a:	d400      	bmi.n	1e58e <_spi_interrupt_handler+0x166>
   1e58c:	e772      	b.n	1e474 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   1e58e:	0020      	movs	r0, r4
   1e590:	68e3      	ldr	r3, [r4, #12]
   1e592:	4798      	blx	r3
   1e594:	e76e      	b.n	1e474 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   1e596:	0a1b      	lsrs	r3, r3, #8
   1e598:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   1e59a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e59c:	3301      	adds	r3, #1
   1e59e:	62a3      	str	r3, [r4, #40]	; 0x28
   1e5a0:	e7c4      	b.n	1e52c <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1e5a2:	077b      	lsls	r3, r7, #29
   1e5a4:	d400      	bmi.n	1e5a8 <_spi_interrupt_handler+0x180>
   1e5a6:	e765      	b.n	1e474 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1e5a8:	0020      	movs	r0, r4
   1e5aa:	6963      	ldr	r3, [r4, #20]
   1e5ac:	4798      	blx	r3
   1e5ae:	e761      	b.n	1e474 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e5b0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e5b2:	2b01      	cmp	r3, #1
   1e5b4:	d000      	beq.n	1e5b8 <_spi_interrupt_handler+0x190>
   1e5b6:	e763      	b.n	1e480 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e5b8:	79e3      	ldrb	r3, [r4, #7]
   1e5ba:	2b00      	cmp	r3, #0
   1e5bc:	d000      	beq.n	1e5c0 <_spi_interrupt_handler+0x198>
   1e5be:	e75f      	b.n	1e480 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e5c0:	3302      	adds	r3, #2
   1e5c2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   1e5c4:	3301      	adds	r3, #1
   1e5c6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   1e5c8:	2200      	movs	r2, #0
   1e5ca:	3335      	adds	r3, #53	; 0x35
   1e5cc:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   1e5ce:	07fb      	lsls	r3, r7, #31
   1e5d0:	d400      	bmi.n	1e5d4 <_spi_interrupt_handler+0x1ac>
   1e5d2:	e755      	b.n	1e480 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1e5d4:	0020      	movs	r0, r4
   1e5d6:	68e3      	ldr	r3, [r4, #12]
   1e5d8:	4798      	blx	r3
   1e5da:	e751      	b.n	1e480 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e5dc:	2380      	movs	r3, #128	; 0x80
   1e5de:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e5e0:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   1e5e2:	067b      	lsls	r3, r7, #25
   1e5e4:	d400      	bmi.n	1e5e8 <_spi_interrupt_handler+0x1c0>
   1e5e6:	e74f      	b.n	1e488 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1e5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e5ea:	0020      	movs	r0, r4
   1e5ec:	4798      	blx	r3
}
   1e5ee:	e74b      	b.n	1e488 <_spi_interrupt_handler+0x60>
   1e5f0:	20005564 	.word	0x20005564
   1e5f4:	2000557c 	.word	0x2000557c

0001e5f8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5fa:	46de      	mov	lr, fp
   1e5fc:	4657      	mov	r7, sl
   1e5fe:	464e      	mov	r6, r9
   1e600:	4645      	mov	r5, r8
   1e602:	b5e0      	push	{r5, r6, r7, lr}
   1e604:	b091      	sub	sp, #68	; 0x44
   1e606:	0005      	movs	r5, r0
   1e608:	000c      	movs	r4, r1
   1e60a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1e60c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e60e:	0008      	movs	r0, r1
   1e610:	4bbc      	ldr	r3, [pc, #752]	; (1e904 <usart_init+0x30c>)
   1e612:	4798      	blx	r3
   1e614:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e616:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1e618:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e61a:	07db      	lsls	r3, r3, #31
   1e61c:	d506      	bpl.n	1e62c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   1e61e:	b011      	add	sp, #68	; 0x44
   1e620:	bc3c      	pop	{r2, r3, r4, r5}
   1e622:	4690      	mov	r8, r2
   1e624:	4699      	mov	r9, r3
   1e626:	46a2      	mov	sl, r4
   1e628:	46ab      	mov	fp, r5
   1e62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e62c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   1e62e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e630:	079b      	lsls	r3, r3, #30
   1e632:	d4f4      	bmi.n	1e61e <usart_init+0x26>
   1e634:	49b4      	ldr	r1, [pc, #720]	; (1e908 <usart_init+0x310>)
   1e636:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1e638:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1e63a:	2301      	movs	r3, #1
   1e63c:	40bb      	lsls	r3, r7
   1e63e:	4303      	orrs	r3, r0
   1e640:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1e642:	a90f      	add	r1, sp, #60	; 0x3c
   1e644:	272d      	movs	r7, #45	; 0x2d
   1e646:	5df3      	ldrb	r3, [r6, r7]
   1e648:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e64a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1e64c:	b2d3      	uxtb	r3, r2
   1e64e:	9302      	str	r3, [sp, #8]
   1e650:	0018      	movs	r0, r3
   1e652:	4bae      	ldr	r3, [pc, #696]	; (1e90c <usart_init+0x314>)
   1e654:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1e656:	9802      	ldr	r0, [sp, #8]
   1e658:	4bad      	ldr	r3, [pc, #692]	; (1e910 <usart_init+0x318>)
   1e65a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1e65c:	5df0      	ldrb	r0, [r6, r7]
   1e65e:	2100      	movs	r1, #0
   1e660:	4bac      	ldr	r3, [pc, #688]	; (1e914 <usart_init+0x31c>)
   1e662:	4798      	blx	r3
	module->character_size = config->character_size;
   1e664:	7af3      	ldrb	r3, [r6, #11]
   1e666:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   1e668:	2324      	movs	r3, #36	; 0x24
   1e66a:	5cf3      	ldrb	r3, [r6, r3]
   1e66c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1e66e:	2325      	movs	r3, #37	; 0x25
   1e670:	5cf3      	ldrb	r3, [r6, r3]
   1e672:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1e674:	7ef3      	ldrb	r3, [r6, #27]
   1e676:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1e678:	7f33      	ldrb	r3, [r6, #28]
   1e67a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e67c:	682b      	ldr	r3, [r5, #0]
   1e67e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e680:	0018      	movs	r0, r3
   1e682:	4ba0      	ldr	r3, [pc, #640]	; (1e904 <usart_init+0x30c>)
   1e684:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e686:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   1e688:	2200      	movs	r2, #0
   1e68a:	230e      	movs	r3, #14
   1e68c:	a906      	add	r1, sp, #24
   1e68e:	468c      	mov	ip, r1
   1e690:	4463      	add	r3, ip
   1e692:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   1e694:	8a32      	ldrh	r2, [r6, #16]
   1e696:	9202      	str	r2, [sp, #8]
   1e698:	2380      	movs	r3, #128	; 0x80
   1e69a:	01db      	lsls	r3, r3, #7
   1e69c:	429a      	cmp	r2, r3
   1e69e:	d100      	bne.n	1e6a2 <usart_init+0xaa>
   1e6a0:	e09e      	b.n	1e7e0 <usart_init+0x1e8>
   1e6a2:	d90f      	bls.n	1e6c4 <usart_init+0xcc>
   1e6a4:	23c0      	movs	r3, #192	; 0xc0
   1e6a6:	01db      	lsls	r3, r3, #7
   1e6a8:	9a02      	ldr	r2, [sp, #8]
   1e6aa:	429a      	cmp	r2, r3
   1e6ac:	d100      	bne.n	1e6b0 <usart_init+0xb8>
   1e6ae:	e092      	b.n	1e7d6 <usart_init+0x1de>
   1e6b0:	2380      	movs	r3, #128	; 0x80
   1e6b2:	021b      	lsls	r3, r3, #8
   1e6b4:	429a      	cmp	r2, r3
   1e6b6:	d000      	beq.n	1e6ba <usart_init+0xc2>
   1e6b8:	e11f      	b.n	1e8fa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1e6ba:	2303      	movs	r3, #3
   1e6bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e6be:	2300      	movs	r3, #0
   1e6c0:	9307      	str	r3, [sp, #28]
   1e6c2:	e008      	b.n	1e6d6 <usart_init+0xde>
	switch (config->sample_rate) {
   1e6c4:	2380      	movs	r3, #128	; 0x80
   1e6c6:	019b      	lsls	r3, r3, #6
   1e6c8:	429a      	cmp	r2, r3
   1e6ca:	d000      	beq.n	1e6ce <usart_init+0xd6>
   1e6cc:	e115      	b.n	1e8fa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e6ce:	2310      	movs	r3, #16
   1e6d0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e6d2:	3b0f      	subs	r3, #15
   1e6d4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   1e6d6:	6833      	ldr	r3, [r6, #0]
   1e6d8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e6da:	68f3      	ldr	r3, [r6, #12]
   1e6dc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e6de:	6973      	ldr	r3, [r6, #20]
   1e6e0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e6e2:	7e33      	ldrb	r3, [r6, #24]
   1e6e4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e6e6:	2326      	movs	r3, #38	; 0x26
   1e6e8:	5cf3      	ldrb	r3, [r6, r3]
   1e6ea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e6ec:	6873      	ldr	r3, [r6, #4]
   1e6ee:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	d100      	bne.n	1e6f6 <usart_init+0xfe>
   1e6f4:	e0a0      	b.n	1e838 <usart_init+0x240>
   1e6f6:	2380      	movs	r3, #128	; 0x80
   1e6f8:	055b      	lsls	r3, r3, #21
   1e6fa:	4599      	cmp	r9, r3
   1e6fc:	d100      	bne.n	1e700 <usart_init+0x108>
   1e6fe:	e084      	b.n	1e80a <usart_init+0x212>
	if(config->encoding_format_enable) {
   1e700:	7e73      	ldrb	r3, [r6, #25]
   1e702:	2b00      	cmp	r3, #0
   1e704:	d002      	beq.n	1e70c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1e706:	7eb3      	ldrb	r3, [r6, #26]
   1e708:	4642      	mov	r2, r8
   1e70a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e70c:	682a      	ldr	r2, [r5, #0]
   1e70e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e710:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e712:	2b00      	cmp	r3, #0
   1e714:	d1fc      	bne.n	1e710 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   1e716:	330e      	adds	r3, #14
   1e718:	aa06      	add	r2, sp, #24
   1e71a:	4694      	mov	ip, r2
   1e71c:	4463      	add	r3, ip
   1e71e:	881b      	ldrh	r3, [r3, #0]
   1e720:	4642      	mov	r2, r8
   1e722:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   1e724:	9b05      	ldr	r3, [sp, #20]
   1e726:	9a03      	ldr	r2, [sp, #12]
   1e728:	4313      	orrs	r3, r2
   1e72a:	9a04      	ldr	r2, [sp, #16]
   1e72c:	4313      	orrs	r3, r2
   1e72e:	464a      	mov	r2, r9
   1e730:	4313      	orrs	r3, r2
   1e732:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e734:	465b      	mov	r3, fp
   1e736:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1e738:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e73a:	4653      	mov	r3, sl
   1e73c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   1e73e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   1e740:	2327      	movs	r3, #39	; 0x27
   1e742:	5cf3      	ldrb	r3, [r6, r3]
   1e744:	2b00      	cmp	r3, #0
   1e746:	d101      	bne.n	1e74c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1e748:	3304      	adds	r3, #4
   1e74a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e74c:	7e73      	ldrb	r3, [r6, #25]
   1e74e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e750:	7f32      	ldrb	r2, [r6, #28]
   1e752:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e754:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e756:	7f72      	ldrb	r2, [r6, #29]
   1e758:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e75a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e75c:	2224      	movs	r2, #36	; 0x24
   1e75e:	5cb2      	ldrb	r2, [r6, r2]
   1e760:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e762:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1e764:	2225      	movs	r2, #37	; 0x25
   1e766:	5cb2      	ldrb	r2, [r6, r2]
   1e768:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e76a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1e76c:	7ab1      	ldrb	r1, [r6, #10]
   1e76e:	7af2      	ldrb	r2, [r6, #11]
   1e770:	4311      	orrs	r1, r2
   1e772:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   1e774:	8933      	ldrh	r3, [r6, #8]
   1e776:	2bff      	cmp	r3, #255	; 0xff
   1e778:	d100      	bne.n	1e77c <usart_init+0x184>
   1e77a:	e081      	b.n	1e880 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1e77c:	2280      	movs	r2, #128	; 0x80
   1e77e:	0452      	lsls	r2, r2, #17
   1e780:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   1e782:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   1e784:	232c      	movs	r3, #44	; 0x2c
   1e786:	5cf3      	ldrb	r3, [r6, r3]
   1e788:	2b00      	cmp	r3, #0
   1e78a:	d103      	bne.n	1e794 <usart_init+0x19c>
   1e78c:	4b62      	ldr	r3, [pc, #392]	; (1e918 <usart_init+0x320>)
   1e78e:	789b      	ldrb	r3, [r3, #2]
   1e790:	079b      	lsls	r3, r3, #30
   1e792:	d501      	bpl.n	1e798 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1e794:	2380      	movs	r3, #128	; 0x80
   1e796:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e798:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e79a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e79c:	2b00      	cmp	r3, #0
   1e79e:	d1fc      	bne.n	1e79a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   1e7a0:	4643      	mov	r3, r8
   1e7a2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e7a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e7a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e7a8:	2b00      	cmp	r3, #0
   1e7aa:	d1fc      	bne.n	1e7a6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   1e7ac:	4643      	mov	r3, r8
   1e7ae:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e7b0:	ab0e      	add	r3, sp, #56	; 0x38
   1e7b2:	2280      	movs	r2, #128	; 0x80
   1e7b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e7b6:	2200      	movs	r2, #0
   1e7b8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   1e7ba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e7bc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e7be:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e7c0:	930a      	str	r3, [sp, #40]	; 0x28
   1e7c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e7c4:	930b      	str	r3, [sp, #44]	; 0x2c
   1e7c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e7c8:	930c      	str	r3, [sp, #48]	; 0x30
   1e7ca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1e7cc:	9302      	str	r3, [sp, #8]
   1e7ce:	930d      	str	r3, [sp, #52]	; 0x34
   1e7d0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e7d2:	ae0a      	add	r6, sp, #40	; 0x28
   1e7d4:	e063      	b.n	1e89e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e7d6:	2308      	movs	r3, #8
   1e7d8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e7da:	3b07      	subs	r3, #7
   1e7dc:	9307      	str	r3, [sp, #28]
   1e7de:	e77a      	b.n	1e6d6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   1e7e0:	6833      	ldr	r3, [r6, #0]
   1e7e2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e7e4:	68f3      	ldr	r3, [r6, #12]
   1e7e6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e7e8:	6973      	ldr	r3, [r6, #20]
   1e7ea:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e7ec:	7e33      	ldrb	r3, [r6, #24]
   1e7ee:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e7f0:	2326      	movs	r3, #38	; 0x26
   1e7f2:	5cf3      	ldrb	r3, [r6, r3]
   1e7f4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e7f6:	6873      	ldr	r3, [r6, #4]
   1e7f8:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e7fa:	2b00      	cmp	r3, #0
   1e7fc:	d018      	beq.n	1e830 <usart_init+0x238>
   1e7fe:	2380      	movs	r3, #128	; 0x80
   1e800:	055b      	lsls	r3, r3, #21
   1e802:	4599      	cmp	r9, r3
   1e804:	d001      	beq.n	1e80a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1e806:	2000      	movs	r0, #0
   1e808:	e025      	b.n	1e856 <usart_init+0x25e>
			if (!config->use_external_clock) {
   1e80a:	2327      	movs	r3, #39	; 0x27
   1e80c:	5cf3      	ldrb	r3, [r6, r3]
   1e80e:	2b00      	cmp	r3, #0
   1e810:	d000      	beq.n	1e814 <usart_init+0x21c>
   1e812:	e775      	b.n	1e700 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1e814:	6a33      	ldr	r3, [r6, #32]
   1e816:	001f      	movs	r7, r3
   1e818:	b2c0      	uxtb	r0, r0
   1e81a:	4b40      	ldr	r3, [pc, #256]	; (1e91c <usart_init+0x324>)
   1e81c:	4798      	blx	r3
   1e81e:	0001      	movs	r1, r0
   1e820:	220e      	movs	r2, #14
   1e822:	ab06      	add	r3, sp, #24
   1e824:	469c      	mov	ip, r3
   1e826:	4462      	add	r2, ip
   1e828:	0038      	movs	r0, r7
   1e82a:	4b3d      	ldr	r3, [pc, #244]	; (1e920 <usart_init+0x328>)
   1e82c:	4798      	blx	r3
   1e82e:	e012      	b.n	1e856 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e830:	2308      	movs	r3, #8
   1e832:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e834:	2300      	movs	r3, #0
   1e836:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1e838:	2327      	movs	r3, #39	; 0x27
   1e83a:	5cf3      	ldrb	r3, [r6, r3]
   1e83c:	2b00      	cmp	r3, #0
   1e83e:	d00e      	beq.n	1e85e <usart_init+0x266>
				status_code =
   1e840:	9b06      	ldr	r3, [sp, #24]
   1e842:	9300      	str	r3, [sp, #0]
   1e844:	9b07      	ldr	r3, [sp, #28]
   1e846:	220e      	movs	r2, #14
   1e848:	a906      	add	r1, sp, #24
   1e84a:	468c      	mov	ip, r1
   1e84c:	4462      	add	r2, ip
   1e84e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1e850:	6a30      	ldr	r0, [r6, #32]
   1e852:	4f34      	ldr	r7, [pc, #208]	; (1e924 <usart_init+0x32c>)
   1e854:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1e856:	2800      	cmp	r0, #0
   1e858:	d000      	beq.n	1e85c <usart_init+0x264>
   1e85a:	e6e0      	b.n	1e61e <usart_init+0x26>
   1e85c:	e750      	b.n	1e700 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   1e85e:	6a33      	ldr	r3, [r6, #32]
   1e860:	001f      	movs	r7, r3
   1e862:	b2c0      	uxtb	r0, r0
   1e864:	4b2d      	ldr	r3, [pc, #180]	; (1e91c <usart_init+0x324>)
   1e866:	4798      	blx	r3
   1e868:	0001      	movs	r1, r0
				status_code =
   1e86a:	9b06      	ldr	r3, [sp, #24]
   1e86c:	9300      	str	r3, [sp, #0]
   1e86e:	9b07      	ldr	r3, [sp, #28]
   1e870:	220e      	movs	r2, #14
   1e872:	a806      	add	r0, sp, #24
   1e874:	4684      	mov	ip, r0
   1e876:	4462      	add	r2, ip
   1e878:	0038      	movs	r0, r7
   1e87a:	4f2a      	ldr	r7, [pc, #168]	; (1e924 <usart_init+0x32c>)
   1e87c:	47b8      	blx	r7
   1e87e:	e7ea      	b.n	1e856 <usart_init+0x25e>
		if(config->lin_slave_enable) {
   1e880:	7ef3      	ldrb	r3, [r6, #27]
   1e882:	2b00      	cmp	r3, #0
   1e884:	d100      	bne.n	1e888 <usart_init+0x290>
   1e886:	e77d      	b.n	1e784 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1e888:	2380      	movs	r3, #128	; 0x80
   1e88a:	04db      	lsls	r3, r3, #19
   1e88c:	431f      	orrs	r7, r3
   1e88e:	e779      	b.n	1e784 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e890:	0020      	movs	r0, r4
   1e892:	4b25      	ldr	r3, [pc, #148]	; (1e928 <usart_init+0x330>)
   1e894:	4798      	blx	r3
   1e896:	e007      	b.n	1e8a8 <usart_init+0x2b0>
   1e898:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e89a:	2f04      	cmp	r7, #4
   1e89c:	d00d      	beq.n	1e8ba <usart_init+0x2c2>
   1e89e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e8a0:	00bb      	lsls	r3, r7, #2
   1e8a2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e8a4:	2800      	cmp	r0, #0
   1e8a6:	d0f3      	beq.n	1e890 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   1e8a8:	1c43      	adds	r3, r0, #1
   1e8aa:	d0f5      	beq.n	1e898 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e8ac:	a90e      	add	r1, sp, #56	; 0x38
   1e8ae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e8b0:	0c00      	lsrs	r0, r0, #16
   1e8b2:	b2c0      	uxtb	r0, r0
   1e8b4:	4b1d      	ldr	r3, [pc, #116]	; (1e92c <usart_init+0x334>)
   1e8b6:	4798      	blx	r3
   1e8b8:	e7ee      	b.n	1e898 <usart_init+0x2a0>
		module->callback[i]            = NULL;
   1e8ba:	2300      	movs	r3, #0
   1e8bc:	60eb      	str	r3, [r5, #12]
   1e8be:	612b      	str	r3, [r5, #16]
   1e8c0:	616b      	str	r3, [r5, #20]
   1e8c2:	61ab      	str	r3, [r5, #24]
   1e8c4:	61eb      	str	r3, [r5, #28]
   1e8c6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   1e8c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1e8ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1e8cc:	2200      	movs	r2, #0
   1e8ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1e8d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1e8d2:	3330      	adds	r3, #48	; 0x30
   1e8d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   1e8d6:	3301      	adds	r3, #1
   1e8d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   1e8da:	3301      	adds	r3, #1
   1e8dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   1e8de:	3301      	adds	r3, #1
   1e8e0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e8e2:	6828      	ldr	r0, [r5, #0]
   1e8e4:	4b07      	ldr	r3, [pc, #28]	; (1e904 <usart_init+0x30c>)
   1e8e6:	4798      	blx	r3
   1e8e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1e8ea:	4911      	ldr	r1, [pc, #68]	; (1e930 <usart_init+0x338>)
   1e8ec:	4b11      	ldr	r3, [pc, #68]	; (1e934 <usart_init+0x33c>)
   1e8ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e8f0:	00a4      	lsls	r4, r4, #2
   1e8f2:	4b11      	ldr	r3, [pc, #68]	; (1e938 <usart_init+0x340>)
   1e8f4:	50e5      	str	r5, [r4, r3]
	return status_code;
   1e8f6:	2000      	movs	r0, #0
   1e8f8:	e691      	b.n	1e61e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e8fa:	2310      	movs	r3, #16
   1e8fc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e8fe:	2300      	movs	r3, #0
   1e900:	9307      	str	r3, [sp, #28]
   1e902:	e6e8      	b.n	1e6d6 <usart_init+0xde>
   1e904:	0001ddfd 	.word	0x0001ddfd
   1e908:	40000400 	.word	0x40000400
   1e90c:	0001f19d 	.word	0x0001f19d
   1e910:	0001f111 	.word	0x0001f111
   1e914:	0001dc39 	.word	0x0001dc39
   1e918:	41002000 	.word	0x41002000
   1e91c:	0001f1b9 	.word	0x0001f1b9
   1e920:	0001db7b 	.word	0x0001db7b
   1e924:	0001dba5 	.word	0x0001dba5
   1e928:	0001dc85 	.word	0x0001dc85
   1e92c:	0001f2c5 	.word	0x0001f2c5
   1e930:	0001ea3d 	.word	0x0001ea3d
   1e934:	0001de39 	.word	0x0001de39
   1e938:	20005564 	.word	0x20005564

0001e93c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e93e:	0006      	movs	r6, r0
   1e940:	000c      	movs	r4, r1
   1e942:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e944:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e946:	4b0a      	ldr	r3, [pc, #40]	; (1e970 <_usart_write_buffer+0x34>)
   1e948:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   1e94a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1e94c:	b29b      	uxth	r3, r3
   1e94e:	2b00      	cmp	r3, #0
   1e950:	d003      	beq.n	1e95a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   1e952:	4b08      	ldr	r3, [pc, #32]	; (1e974 <_usart_write_buffer+0x38>)
   1e954:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e956:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   1e958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   1e95a:	85f5      	strh	r5, [r6, #46]	; 0x2e
   1e95c:	4b05      	ldr	r3, [pc, #20]	; (1e974 <_usart_write_buffer+0x38>)
   1e95e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   1e960:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1e962:	2205      	movs	r2, #5
   1e964:	2333      	movs	r3, #51	; 0x33
   1e966:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   1e968:	3b32      	subs	r3, #50	; 0x32
   1e96a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   1e96c:	2000      	movs	r0, #0
   1e96e:	e7f3      	b.n	1e958 <_usart_write_buffer+0x1c>
   1e970:	0001d5e9 	.word	0x0001d5e9
   1e974:	0001d629 	.word	0x0001d629

0001e978 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e97a:	0004      	movs	r4, r0
   1e97c:	000d      	movs	r5, r1
   1e97e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e980:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e982:	4b0f      	ldr	r3, [pc, #60]	; (1e9c0 <_usart_read_buffer+0x48>)
   1e984:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   1e986:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1e988:	b29b      	uxth	r3, r3
   1e98a:	2b00      	cmp	r3, #0
   1e98c:	d003      	beq.n	1e996 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   1e98e:	4b0d      	ldr	r3, [pc, #52]	; (1e9c4 <_usart_read_buffer+0x4c>)
   1e990:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e992:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   1e994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   1e996:	85a6      	strh	r6, [r4, #44]	; 0x2c
   1e998:	4b0a      	ldr	r3, [pc, #40]	; (1e9c4 <_usart_read_buffer+0x4c>)
   1e99a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   1e99c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1e99e:	2205      	movs	r2, #5
   1e9a0:	2332      	movs	r3, #50	; 0x32
   1e9a2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1e9a4:	3b2e      	subs	r3, #46	; 0x2e
   1e9a6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   1e9a8:	7a23      	ldrb	r3, [r4, #8]
   1e9aa:	2b00      	cmp	r3, #0
   1e9ac:	d001      	beq.n	1e9b2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1e9ae:	2320      	movs	r3, #32
   1e9b0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   1e9b2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   1e9b4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   1e9b6:	2b00      	cmp	r3, #0
   1e9b8:	d0ec      	beq.n	1e994 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1e9ba:	2308      	movs	r3, #8
   1e9bc:	75bb      	strb	r3, [r7, #22]
   1e9be:	e7e9      	b.n	1e994 <_usart_read_buffer+0x1c>
   1e9c0:	0001d5e9 	.word	0x0001d5e9
   1e9c4:	0001d629 	.word	0x0001d629

0001e9c8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e9c8:	1c93      	adds	r3, r2, #2
   1e9ca:	009b      	lsls	r3, r3, #2
   1e9cc:	18c3      	adds	r3, r0, r3
   1e9ce:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   1e9d0:	2130      	movs	r1, #48	; 0x30
   1e9d2:	2301      	movs	r3, #1
   1e9d4:	4093      	lsls	r3, r2
   1e9d6:	001a      	movs	r2, r3
   1e9d8:	5c43      	ldrb	r3, [r0, r1]
   1e9da:	4313      	orrs	r3, r2
   1e9dc:	5443      	strb	r3, [r0, r1]
}
   1e9de:	4770      	bx	lr

0001e9e0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e9e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e9e2:	2317      	movs	r3, #23
	if (length == 0) {
   1e9e4:	2a00      	cmp	r2, #0
   1e9e6:	d101      	bne.n	1e9ec <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   1e9e8:	0018      	movs	r0, r3
   1e9ea:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   1e9ec:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   1e9ee:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   1e9f0:	2c00      	cmp	r4, #0
   1e9f2:	d0f9      	beq.n	1e9e8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   1e9f4:	4b01      	ldr	r3, [pc, #4]	; (1e9fc <usart_write_buffer_job+0x1c>)
   1e9f6:	4798      	blx	r3
   1e9f8:	0003      	movs	r3, r0
   1e9fa:	e7f5      	b.n	1e9e8 <usart_write_buffer_job+0x8>
   1e9fc:	0001e93d 	.word	0x0001e93d

0001ea00 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1ea00:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1ea02:	2317      	movs	r3, #23
	if (length == 0) {
   1ea04:	2a00      	cmp	r2, #0
   1ea06:	d101      	bne.n	1ea0c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   1ea08:	0018      	movs	r0, r3
   1ea0a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   1ea0c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   1ea0e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   1ea10:	2c00      	cmp	r4, #0
   1ea12:	d0f9      	beq.n	1ea08 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   1ea14:	4b01      	ldr	r3, [pc, #4]	; (1ea1c <usart_read_buffer_job+0x1c>)
   1ea16:	4798      	blx	r3
   1ea18:	0003      	movs	r3, r0
   1ea1a:	e7f5      	b.n	1ea08 <usart_read_buffer_job+0x8>
   1ea1c:	0001e979 	.word	0x0001e979

0001ea20 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1ea20:	2900      	cmp	r1, #0
   1ea22:	d003      	beq.n	1ea2c <usart_get_job_status+0xc>
   1ea24:	2901      	cmp	r1, #1
   1ea26:	d005      	beq.n	1ea34 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   1ea28:	2017      	movs	r0, #23
   1ea2a:	e002      	b.n	1ea32 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   1ea2c:	2332      	movs	r3, #50	; 0x32
   1ea2e:	5cc0      	ldrb	r0, [r0, r3]
   1ea30:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   1ea32:	4770      	bx	lr
			status_code = module->tx_status;
   1ea34:	2333      	movs	r3, #51	; 0x33
   1ea36:	5cc0      	ldrb	r0, [r0, r3]
   1ea38:	b2c0      	uxtb	r0, r0
			break;
   1ea3a:	e7fa      	b.n	1ea32 <usart_get_job_status+0x12>

0001ea3c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1ea3e:	0080      	lsls	r0, r0, #2
   1ea40:	4b62      	ldr	r3, [pc, #392]	; (1ebcc <_usart_interrupt_handler+0x190>)
   1ea42:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1ea44:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1ea46:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   1ea48:	2b00      	cmp	r3, #0
   1ea4a:	d1fc      	bne.n	1ea46 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1ea4c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   1ea4e:	7da6      	ldrb	r6, [r4, #22]
   1ea50:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   1ea52:	2330      	movs	r3, #48	; 0x30
   1ea54:	5ceb      	ldrb	r3, [r5, r3]
   1ea56:	2231      	movs	r2, #49	; 0x31
   1ea58:	5caf      	ldrb	r7, [r5, r2]
   1ea5a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1ea5c:	07f3      	lsls	r3, r6, #31
   1ea5e:	d522      	bpl.n	1eaa6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   1ea60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1ea62:	b29b      	uxth	r3, r3
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d01c      	beq.n	1eaa2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1ea68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1ea6a:	7813      	ldrb	r3, [r2, #0]
   1ea6c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1ea6e:	1c51      	adds	r1, r2, #1
   1ea70:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1ea72:	7969      	ldrb	r1, [r5, #5]
   1ea74:	2901      	cmp	r1, #1
   1ea76:	d00e      	beq.n	1ea96 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1ea78:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1ea7a:	05db      	lsls	r3, r3, #23
   1ea7c:	0ddb      	lsrs	r3, r3, #23
   1ea7e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1ea80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1ea82:	3b01      	subs	r3, #1
   1ea84:	b29b      	uxth	r3, r3
   1ea86:	85eb      	strh	r3, [r5, #46]	; 0x2e
   1ea88:	2b00      	cmp	r3, #0
   1ea8a:	d10c      	bne.n	1eaa6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1ea8c:	3301      	adds	r3, #1
   1ea8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1ea90:	3301      	adds	r3, #1
   1ea92:	75a3      	strb	r3, [r4, #22]
   1ea94:	e007      	b.n	1eaa6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1ea96:	7851      	ldrb	r1, [r2, #1]
   1ea98:	0209      	lsls	r1, r1, #8
   1ea9a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   1ea9c:	3202      	adds	r2, #2
   1ea9e:	62aa      	str	r2, [r5, #40]	; 0x28
   1eaa0:	e7eb      	b.n	1ea7a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1eaa2:	2301      	movs	r3, #1
   1eaa4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1eaa6:	07b3      	lsls	r3, r6, #30
   1eaa8:	d506      	bpl.n	1eab8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1eaaa:	2302      	movs	r3, #2
   1eaac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   1eaae:	2200      	movs	r2, #0
   1eab0:	3331      	adds	r3, #49	; 0x31
   1eab2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1eab4:	07fb      	lsls	r3, r7, #31
   1eab6:	d41a      	bmi.n	1eaee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1eab8:	0773      	lsls	r3, r6, #29
   1eaba:	d565      	bpl.n	1eb88 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   1eabc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1eabe:	b29b      	uxth	r3, r3
   1eac0:	2b00      	cmp	r3, #0
   1eac2:	d05f      	beq.n	1eb84 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1eac4:	8b63      	ldrh	r3, [r4, #26]
   1eac6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1eac8:	071a      	lsls	r2, r3, #28
   1eaca:	d414      	bmi.n	1eaf6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1eacc:	223f      	movs	r2, #63	; 0x3f
   1eace:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1ead0:	2b00      	cmp	r3, #0
   1ead2:	d034      	beq.n	1eb3e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1ead4:	079a      	lsls	r2, r3, #30
   1ead6:	d511      	bpl.n	1eafc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1ead8:	221a      	movs	r2, #26
   1eada:	2332      	movs	r3, #50	; 0x32
   1eadc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1eade:	3b30      	subs	r3, #48	; 0x30
   1eae0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   1eae2:	077b      	lsls	r3, r7, #29
   1eae4:	d550      	bpl.n	1eb88 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1eae6:	0028      	movs	r0, r5
   1eae8:	696b      	ldr	r3, [r5, #20]
   1eaea:	4798      	blx	r3
   1eaec:	e04c      	b.n	1eb88 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1eaee:	0028      	movs	r0, r5
   1eaf0:	68eb      	ldr	r3, [r5, #12]
   1eaf2:	4798      	blx	r3
   1eaf4:	e7e0      	b.n	1eab8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1eaf6:	2237      	movs	r2, #55	; 0x37
   1eaf8:	4013      	ands	r3, r2
   1eafa:	e7e9      	b.n	1ead0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1eafc:	075a      	lsls	r2, r3, #29
   1eafe:	d505      	bpl.n	1eb0c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   1eb00:	221e      	movs	r2, #30
   1eb02:	2332      	movs	r3, #50	; 0x32
   1eb04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1eb06:	3b2e      	subs	r3, #46	; 0x2e
   1eb08:	8363      	strh	r3, [r4, #26]
   1eb0a:	e7ea      	b.n	1eae2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1eb0c:	07da      	lsls	r2, r3, #31
   1eb0e:	d505      	bpl.n	1eb1c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   1eb10:	2213      	movs	r2, #19
   1eb12:	2332      	movs	r3, #50	; 0x32
   1eb14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1eb16:	3b31      	subs	r3, #49	; 0x31
   1eb18:	8363      	strh	r3, [r4, #26]
   1eb1a:	e7e2      	b.n	1eae2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1eb1c:	06da      	lsls	r2, r3, #27
   1eb1e:	d505      	bpl.n	1eb2c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   1eb20:	2242      	movs	r2, #66	; 0x42
   1eb22:	2332      	movs	r3, #50	; 0x32
   1eb24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1eb26:	3b22      	subs	r3, #34	; 0x22
   1eb28:	8363      	strh	r3, [r4, #26]
   1eb2a:	e7da      	b.n	1eae2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1eb2c:	2220      	movs	r2, #32
   1eb2e:	421a      	tst	r2, r3
   1eb30:	d0d7      	beq.n	1eae2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1eb32:	3221      	adds	r2, #33	; 0x21
   1eb34:	2332      	movs	r3, #50	; 0x32
   1eb36:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1eb38:	3b12      	subs	r3, #18
   1eb3a:	8363      	strh	r3, [r4, #26]
   1eb3c:	e7d1      	b.n	1eae2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1eb3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1eb40:	05db      	lsls	r3, r3, #23
   1eb42:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1eb44:	b2da      	uxtb	r2, r3
   1eb46:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1eb48:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1eb4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1eb4c:	1c51      	adds	r1, r2, #1
   1eb4e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1eb50:	7969      	ldrb	r1, [r5, #5]
   1eb52:	2901      	cmp	r1, #1
   1eb54:	d010      	beq.n	1eb78 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1eb56:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1eb58:	3b01      	subs	r3, #1
   1eb5a:	b29b      	uxth	r3, r3
   1eb5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
   1eb5e:	2b00      	cmp	r3, #0
   1eb60:	d112      	bne.n	1eb88 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1eb62:	3304      	adds	r3, #4
   1eb64:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   1eb66:	2200      	movs	r2, #0
   1eb68:	332e      	adds	r3, #46	; 0x2e
   1eb6a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   1eb6c:	07bb      	lsls	r3, r7, #30
   1eb6e:	d50b      	bpl.n	1eb88 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1eb70:	0028      	movs	r0, r5
   1eb72:	692b      	ldr	r3, [r5, #16]
   1eb74:	4798      	blx	r3
   1eb76:	e007      	b.n	1eb88 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1eb78:	0a1b      	lsrs	r3, r3, #8
   1eb7a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   1eb7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1eb7e:	3301      	adds	r3, #1
   1eb80:	626b      	str	r3, [r5, #36]	; 0x24
   1eb82:	e7e8      	b.n	1eb56 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1eb84:	2304      	movs	r3, #4
   1eb86:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1eb88:	06f3      	lsls	r3, r6, #27
   1eb8a:	d504      	bpl.n	1eb96 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1eb8c:	2310      	movs	r3, #16
   1eb8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1eb90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1eb92:	06fb      	lsls	r3, r7, #27
   1eb94:	d40e      	bmi.n	1ebb4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1eb96:	06b3      	lsls	r3, r6, #26
   1eb98:	d504      	bpl.n	1eba4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1eb9a:	2320      	movs	r3, #32
   1eb9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1eb9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1eba0:	073b      	lsls	r3, r7, #28
   1eba2:	d40b      	bmi.n	1ebbc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1eba4:	0733      	lsls	r3, r6, #28
   1eba6:	d504      	bpl.n	1ebb2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1eba8:	2308      	movs	r3, #8
   1ebaa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1ebac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1ebae:	06bb      	lsls	r3, r7, #26
   1ebb0:	d408      	bmi.n	1ebc4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   1ebb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1ebb4:	0028      	movs	r0, r5
   1ebb6:	69eb      	ldr	r3, [r5, #28]
   1ebb8:	4798      	blx	r3
   1ebba:	e7ec      	b.n	1eb96 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1ebbc:	0028      	movs	r0, r5
   1ebbe:	69ab      	ldr	r3, [r5, #24]
   1ebc0:	4798      	blx	r3
   1ebc2:	e7ef      	b.n	1eba4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1ebc4:	6a2b      	ldr	r3, [r5, #32]
   1ebc6:	0028      	movs	r0, r5
   1ebc8:	4798      	blx	r3
}
   1ebca:	e7f2      	b.n	1ebb2 <_usart_interrupt_handler+0x176>
   1ebcc:	20005564 	.word	0x20005564

0001ebd0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1ebd0:	b510      	push	{r4, lr}
	switch (clock_source) {
   1ebd2:	2808      	cmp	r0, #8
   1ebd4:	d803      	bhi.n	1ebde <system_clock_source_get_hz+0xe>
   1ebd6:	0080      	lsls	r0, r0, #2
   1ebd8:	4b1c      	ldr	r3, [pc, #112]	; (1ec4c <system_clock_source_get_hz+0x7c>)
   1ebda:	581b      	ldr	r3, [r3, r0]
   1ebdc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1ebde:	2000      	movs	r0, #0
   1ebe0:	e032      	b.n	1ec48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   1ebe2:	4b1b      	ldr	r3, [pc, #108]	; (1ec50 <system_clock_source_get_hz+0x80>)
   1ebe4:	6918      	ldr	r0, [r3, #16]
   1ebe6:	e02f      	b.n	1ec48 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1ebe8:	4b1a      	ldr	r3, [pc, #104]	; (1ec54 <system_clock_source_get_hz+0x84>)
   1ebea:	6a1b      	ldr	r3, [r3, #32]
   1ebec:	059b      	lsls	r3, r3, #22
   1ebee:	0f9b      	lsrs	r3, r3, #30
   1ebf0:	4819      	ldr	r0, [pc, #100]	; (1ec58 <system_clock_source_get_hz+0x88>)
   1ebf2:	40d8      	lsrs	r0, r3
   1ebf4:	e028      	b.n	1ec48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   1ebf6:	4b16      	ldr	r3, [pc, #88]	; (1ec50 <system_clock_source_get_hz+0x80>)
   1ebf8:	6958      	ldr	r0, [r3, #20]
   1ebfa:	e025      	b.n	1ec48 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1ebfc:	4b14      	ldr	r3, [pc, #80]	; (1ec50 <system_clock_source_get_hz+0x80>)
   1ebfe:	681b      	ldr	r3, [r3, #0]
			return 0;
   1ec00:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1ec02:	079b      	lsls	r3, r3, #30
   1ec04:	d520      	bpl.n	1ec48 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ec06:	4913      	ldr	r1, [pc, #76]	; (1ec54 <system_clock_source_get_hz+0x84>)
   1ec08:	2210      	movs	r2, #16
   1ec0a:	68cb      	ldr	r3, [r1, #12]
   1ec0c:	421a      	tst	r2, r3
   1ec0e:	d0fc      	beq.n	1ec0a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   1ec10:	4b0f      	ldr	r3, [pc, #60]	; (1ec50 <system_clock_source_get_hz+0x80>)
   1ec12:	681a      	ldr	r2, [r3, #0]
   1ec14:	2324      	movs	r3, #36	; 0x24
   1ec16:	4013      	ands	r3, r2
   1ec18:	2b04      	cmp	r3, #4
   1ec1a:	d001      	beq.n	1ec20 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   1ec1c:	480f      	ldr	r0, [pc, #60]	; (1ec5c <system_clock_source_get_hz+0x8c>)
   1ec1e:	e013      	b.n	1ec48 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1ec20:	2000      	movs	r0, #0
   1ec22:	4b0f      	ldr	r3, [pc, #60]	; (1ec60 <system_clock_source_get_hz+0x90>)
   1ec24:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1ec26:	4b0a      	ldr	r3, [pc, #40]	; (1ec50 <system_clock_source_get_hz+0x80>)
   1ec28:	689b      	ldr	r3, [r3, #8]
   1ec2a:	041b      	lsls	r3, r3, #16
   1ec2c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1ec2e:	4358      	muls	r0, r3
   1ec30:	e00a      	b.n	1ec48 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1ec32:	2350      	movs	r3, #80	; 0x50
   1ec34:	4a07      	ldr	r2, [pc, #28]	; (1ec54 <system_clock_source_get_hz+0x84>)
   1ec36:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   1ec38:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1ec3a:	075b      	lsls	r3, r3, #29
   1ec3c:	d504      	bpl.n	1ec48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1ec3e:	4b04      	ldr	r3, [pc, #16]	; (1ec50 <system_clock_source_get_hz+0x80>)
   1ec40:	68d8      	ldr	r0, [r3, #12]
   1ec42:	e001      	b.n	1ec48 <system_clock_source_get_hz+0x78>
		return 32768UL;
   1ec44:	2080      	movs	r0, #128	; 0x80
   1ec46:	0200      	lsls	r0, r0, #8
	}
}
   1ec48:	bd10      	pop	{r4, pc}
   1ec4a:	46c0      	nop			; (mov r8, r8)
   1ec4c:	0002a464 	.word	0x0002a464
   1ec50:	20003d18 	.word	0x20003d18
   1ec54:	40000800 	.word	0x40000800
   1ec58:	007a1200 	.word	0x007a1200
   1ec5c:	02dc6c00 	.word	0x02dc6c00
   1ec60:	0001f1b9 	.word	0x0001f1b9

0001ec64 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1ec64:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1ec66:	490c      	ldr	r1, [pc, #48]	; (1ec98 <system_clock_source_osc8m_set_config+0x34>)
   1ec68:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1ec6a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1ec6c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1ec6e:	7840      	ldrb	r0, [r0, #1]
   1ec70:	2201      	movs	r2, #1
   1ec72:	4010      	ands	r0, r2
   1ec74:	0180      	lsls	r0, r0, #6
   1ec76:	2640      	movs	r6, #64	; 0x40
   1ec78:	43b3      	bics	r3, r6
   1ec7a:	4303      	orrs	r3, r0
   1ec7c:	402a      	ands	r2, r5
   1ec7e:	01d2      	lsls	r2, r2, #7
   1ec80:	2080      	movs	r0, #128	; 0x80
   1ec82:	4383      	bics	r3, r0
   1ec84:	4313      	orrs	r3, r2
   1ec86:	2203      	movs	r2, #3
   1ec88:	4022      	ands	r2, r4
   1ec8a:	0212      	lsls	r2, r2, #8
   1ec8c:	4803      	ldr	r0, [pc, #12]	; (1ec9c <system_clock_source_osc8m_set_config+0x38>)
   1ec8e:	4003      	ands	r3, r0
   1ec90:	4313      	orrs	r3, r2
   1ec92:	620b      	str	r3, [r1, #32]
}
   1ec94:	bd70      	pop	{r4, r5, r6, pc}
   1ec96:	46c0      	nop			; (mov r8, r8)
   1ec98:	40000800 	.word	0x40000800
   1ec9c:	fffffcff 	.word	0xfffffcff

0001eca0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eca2:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   1eca4:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1eca6:	7d03      	ldrb	r3, [r0, #20]
   1eca8:	2b01      	cmp	r3, #1
   1ecaa:	d03b      	beq.n	1ed24 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1ecac:	68ab      	ldr	r3, [r5, #8]
   1ecae:	0118      	lsls	r0, r3, #4
   1ecb0:	0021      	movs	r1, r4
   1ecb2:	4b20      	ldr	r3, [pc, #128]	; (1ed34 <system_clock_source_dpll_set_config+0x94>)
   1ecb4:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
   1ecb6:	220f      	movs	r2, #15
   1ecb8:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
   1ecba:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ecbc:	782e      	ldrb	r6, [r5, #0]
   1ecbe:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1ecc0:	7869      	ldrb	r1, [r5, #1]
   1ecc2:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ecc4:	430e      	orrs	r6, r1
   1ecc6:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
   1ecc8:	491b      	ldr	r1, [pc, #108]	; (1ed38 <system_clock_source_dpll_set_config+0x98>)
   1ecca:	2744      	movs	r7, #68	; 0x44
   1eccc:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ecce:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
   1ecd0:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1ecd2:	051b      	lsls	r3, r3, #20
   1ecd4:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ecd6:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
   1ecd8:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1ecda:	78ab      	ldrb	r3, [r5, #2]
   1ecdc:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1ecde:	78ee      	ldrb	r6, [r5, #3]
   1ece0:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ece2:	4333      	orrs	r3, r6
   1ece4:	792e      	ldrb	r6, [r5, #4]
   1ece6:	00b6      	lsls	r6, r6, #2
   1ece8:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1ecea:	7caf      	ldrb	r7, [r5, #18]
   1ecec:	2603      	movs	r6, #3
   1ecee:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ecf0:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1ecf2:	8a2e      	ldrh	r6, [r5, #16]
   1ecf4:	0436      	lsls	r6, r6, #16
   1ecf6:	4f11      	ldr	r7, [pc, #68]	; (1ed3c <system_clock_source_dpll_set_config+0x9c>)
   1ecf8:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ecfa:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1ecfc:	7cee      	ldrb	r6, [r5, #19]
   1ecfe:	0236      	lsls	r6, r6, #8
   1ed00:	27e0      	movs	r7, #224	; 0xe0
   1ed02:	00ff      	lsls	r7, r7, #3
   1ed04:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ed06:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1ed08:	7d2e      	ldrb	r6, [r5, #20]
   1ed0a:	0136      	lsls	r6, r6, #4
   1ed0c:	2530      	movs	r5, #48	; 0x30
   1ed0e:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ed10:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
   1ed12:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1ed14:	230f      	movs	r3, #15
   1ed16:	4398      	bics	r0, r3
   1ed18:	1880      	adds	r0, r0, r2
   1ed1a:	4344      	muls	r4, r0
   1ed1c:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
   1ed1e:	4b08      	ldr	r3, [pc, #32]	; (1ed40 <system_clock_source_dpll_set_config+0xa0>)
   1ed20:	60dc      	str	r4, [r3, #12]
}
   1ed22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
   1ed24:	8a01      	ldrh	r1, [r0, #16]
   1ed26:	3101      	adds	r1, #1
   1ed28:	0049      	lsls	r1, r1, #1
   1ed2a:	0020      	movs	r0, r4
   1ed2c:	4b01      	ldr	r3, [pc, #4]	; (1ed34 <system_clock_source_dpll_set_config+0x94>)
   1ed2e:	4798      	blx	r3
   1ed30:	0004      	movs	r4, r0
   1ed32:	e7bb      	b.n	1ecac <system_clock_source_dpll_set_config+0xc>
   1ed34:	00024039 	.word	0x00024039
   1ed38:	40000800 	.word	0x40000800
   1ed3c:	07ff0000 	.word	0x07ff0000
   1ed40:	20003d18 	.word	0x20003d18

0001ed44 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1ed44:	2808      	cmp	r0, #8
   1ed46:	d803      	bhi.n	1ed50 <system_clock_source_enable+0xc>
   1ed48:	0080      	lsls	r0, r0, #2
   1ed4a:	4b25      	ldr	r3, [pc, #148]	; (1ede0 <system_clock_source_enable+0x9c>)
   1ed4c:	581b      	ldr	r3, [r3, r0]
   1ed4e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1ed50:	2017      	movs	r0, #23
   1ed52:	e044      	b.n	1edde <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1ed54:	4a23      	ldr	r2, [pc, #140]	; (1ede4 <system_clock_source_enable+0xa0>)
   1ed56:	6a13      	ldr	r3, [r2, #32]
   1ed58:	2102      	movs	r1, #2
   1ed5a:	430b      	orrs	r3, r1
   1ed5c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   1ed5e:	2000      	movs	r0, #0
   1ed60:	e03d      	b.n	1edde <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1ed62:	4a20      	ldr	r2, [pc, #128]	; (1ede4 <system_clock_source_enable+0xa0>)
   1ed64:	6993      	ldr	r3, [r2, #24]
   1ed66:	2102      	movs	r1, #2
   1ed68:	430b      	orrs	r3, r1
   1ed6a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   1ed6c:	2000      	movs	r0, #0
		break;
   1ed6e:	e036      	b.n	1edde <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1ed70:	4a1c      	ldr	r2, [pc, #112]	; (1ede4 <system_clock_source_enable+0xa0>)
   1ed72:	8a13      	ldrh	r3, [r2, #16]
   1ed74:	2102      	movs	r1, #2
   1ed76:	430b      	orrs	r3, r1
   1ed78:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1ed7a:	2000      	movs	r0, #0
		break;
   1ed7c:	e02f      	b.n	1edde <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1ed7e:	4a19      	ldr	r2, [pc, #100]	; (1ede4 <system_clock_source_enable+0xa0>)
   1ed80:	8a93      	ldrh	r3, [r2, #20]
   1ed82:	2102      	movs	r1, #2
   1ed84:	430b      	orrs	r3, r1
   1ed86:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1ed88:	2000      	movs	r0, #0
		break;
   1ed8a:	e028      	b.n	1edde <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1ed8c:	4916      	ldr	r1, [pc, #88]	; (1ede8 <system_clock_source_enable+0xa4>)
   1ed8e:	680b      	ldr	r3, [r1, #0]
   1ed90:	2202      	movs	r2, #2
   1ed92:	4313      	orrs	r3, r2
   1ed94:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1ed96:	4b13      	ldr	r3, [pc, #76]	; (1ede4 <system_clock_source_enable+0xa0>)
   1ed98:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ed9a:	0019      	movs	r1, r3
   1ed9c:	320e      	adds	r2, #14
   1ed9e:	68cb      	ldr	r3, [r1, #12]
   1eda0:	421a      	tst	r2, r3
   1eda2:	d0fc      	beq.n	1ed9e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1eda4:	4a10      	ldr	r2, [pc, #64]	; (1ede8 <system_clock_source_enable+0xa4>)
   1eda6:	6891      	ldr	r1, [r2, #8]
   1eda8:	4b0e      	ldr	r3, [pc, #56]	; (1ede4 <system_clock_source_enable+0xa0>)
   1edaa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1edac:	6852      	ldr	r2, [r2, #4]
   1edae:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1edb0:	2200      	movs	r2, #0
   1edb2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1edb4:	0019      	movs	r1, r3
   1edb6:	3210      	adds	r2, #16
   1edb8:	68cb      	ldr	r3, [r1, #12]
   1edba:	421a      	tst	r2, r3
   1edbc:	d0fc      	beq.n	1edb8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1edbe:	4b0a      	ldr	r3, [pc, #40]	; (1ede8 <system_clock_source_enable+0xa4>)
   1edc0:	681b      	ldr	r3, [r3, #0]
   1edc2:	b29b      	uxth	r3, r3
   1edc4:	4a07      	ldr	r2, [pc, #28]	; (1ede4 <system_clock_source_enable+0xa0>)
   1edc6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1edc8:	2000      	movs	r0, #0
   1edca:	e008      	b.n	1edde <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1edcc:	4905      	ldr	r1, [pc, #20]	; (1ede4 <system_clock_source_enable+0xa0>)
   1edce:	2244      	movs	r2, #68	; 0x44
   1edd0:	5c8b      	ldrb	r3, [r1, r2]
   1edd2:	2002      	movs	r0, #2
   1edd4:	4303      	orrs	r3, r0
   1edd6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1edd8:	2000      	movs	r0, #0
		break;
   1edda:	e000      	b.n	1edde <system_clock_source_enable+0x9a>
		return STATUS_OK;
   1eddc:	2000      	movs	r0, #0
}
   1edde:	4770      	bx	lr
   1ede0:	0002a488 	.word	0x0002a488
   1ede4:	40000800 	.word	0x40000800
   1ede8:	20003d18 	.word	0x20003d18

0001edec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1edec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edee:	46de      	mov	lr, fp
   1edf0:	4657      	mov	r7, sl
   1edf2:	464e      	mov	r6, r9
   1edf4:	4645      	mov	r5, r8
   1edf6:	b5e0      	push	{r5, r6, r7, lr}
   1edf8:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1edfa:	22c2      	movs	r2, #194	; 0xc2
   1edfc:	00d2      	lsls	r2, r2, #3
   1edfe:	4b4c      	ldr	r3, [pc, #304]	; (1ef30 <system_clock_init+0x144>)
   1ee00:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1ee02:	4a4c      	ldr	r2, [pc, #304]	; (1ef34 <system_clock_init+0x148>)
   1ee04:	6853      	ldr	r3, [r2, #4]
   1ee06:	211e      	movs	r1, #30
   1ee08:	438b      	bics	r3, r1
   1ee0a:	3918      	subs	r1, #24
   1ee0c:	430b      	orrs	r3, r1
   1ee0e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1ee10:	2203      	movs	r2, #3
   1ee12:	ab01      	add	r3, sp, #4
   1ee14:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1ee16:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1ee18:	4d47      	ldr	r5, [pc, #284]	; (1ef38 <system_clock_init+0x14c>)
   1ee1a:	b2e0      	uxtb	r0, r4
   1ee1c:	a901      	add	r1, sp, #4
   1ee1e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1ee20:	3401      	adds	r4, #1
   1ee22:	2c25      	cmp	r4, #37	; 0x25
   1ee24:	d1f9      	bne.n	1ee1a <system_clock_init+0x2e>
	config->run_in_standby  = false;
   1ee26:	a80b      	add	r0, sp, #44	; 0x2c
   1ee28:	2500      	movs	r5, #0
   1ee2a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   1ee2c:	2601      	movs	r6, #1
   1ee2e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1ee30:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1ee32:	4b42      	ldr	r3, [pc, #264]	; (1ef3c <system_clock_init+0x150>)
   1ee34:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1ee36:	2006      	movs	r0, #6
   1ee38:	4b41      	ldr	r3, [pc, #260]	; (1ef40 <system_clock_init+0x154>)
   1ee3a:	4699      	mov	r9, r3
   1ee3c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1ee3e:	4b41      	ldr	r3, [pc, #260]	; (1ef44 <system_clock_init+0x158>)
   1ee40:	4798      	blx	r3
	config->high_when_disabled = false;
   1ee42:	ac01      	add	r4, sp, #4
   1ee44:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1ee46:	2306      	movs	r3, #6
   1ee48:	469a      	mov	sl, r3
   1ee4a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1ee4c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee4e:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1ee50:	2308      	movs	r3, #8
   1ee52:	6063      	str	r3, [r4, #4]
   1ee54:	0021      	movs	r1, r4
   1ee56:	2001      	movs	r0, #1
   1ee58:	4b3b      	ldr	r3, [pc, #236]	; (1ef48 <system_clock_init+0x15c>)
   1ee5a:	4698      	mov	r8, r3
   1ee5c:	4798      	blx	r3
   1ee5e:	2001      	movs	r0, #1
   1ee60:	4f3a      	ldr	r7, [pc, #232]	; (1ef4c <system_clock_init+0x160>)
   1ee62:	47b8      	blx	r7
	config->division_factor    = 1;
   1ee64:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ee66:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
   1ee68:	7265      	strb	r5, [r4, #9]
   1ee6a:	2303      	movs	r3, #3
   1ee6c:	469b      	mov	fp, r3
   1ee6e:	7023      	strb	r3, [r4, #0]
   1ee70:	7226      	strb	r6, [r4, #8]
   1ee72:	0021      	movs	r1, r4
   1ee74:	2002      	movs	r0, #2
   1ee76:	47c0      	blx	r8
   1ee78:	2002      	movs	r0, #2
   1ee7a:	47b8      	blx	r7
	config->high_when_disabled = false;
   1ee7c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1ee7e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee80:	7265      	strb	r5, [r4, #9]
   1ee82:	465b      	mov	r3, fp
   1ee84:	7023      	strb	r3, [r4, #0]
   1ee86:	2320      	movs	r3, #32
   1ee88:	6063      	str	r3, [r4, #4]
   1ee8a:	0021      	movs	r1, r4
   1ee8c:	2004      	movs	r0, #4
   1ee8e:	47c0      	blx	r8
   1ee90:	2004      	movs	r0, #4
   1ee92:	47b8      	blx	r7
	config->division_factor    = 1;
   1ee94:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ee96:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1ee98:	4653      	mov	r3, sl
   1ee9a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1ee9c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee9e:	7265      	strb	r5, [r4, #9]
   1eea0:	0021      	movs	r1, r4
   1eea2:	2005      	movs	r0, #5
   1eea4:	47c0      	blx	r8
   1eea6:	2005      	movs	r0, #5
   1eea8:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1eeaa:	a90a      	add	r1, sp, #40	; 0x28
   1eeac:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1eeae:	2001      	movs	r0, #1
   1eeb0:	4b21      	ldr	r3, [pc, #132]	; (1ef38 <system_clock_init+0x14c>)
   1eeb2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1eeb4:	2001      	movs	r0, #1
   1eeb6:	4b26      	ldr	r3, [pc, #152]	; (1ef50 <system_clock_init+0x164>)
   1eeb8:	4798      	blx	r3
	config->run_in_standby      = false;
   1eeba:	a804      	add	r0, sp, #16
   1eebc:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
   1eebe:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
   1eec0:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
   1eec2:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
   1eec4:	4b23      	ldr	r3, [pc, #140]	; (1ef54 <system_clock_init+0x168>)
   1eec6:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
   1eec8:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1eeca:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1eecc:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
   1eece:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1eed0:	2302      	movs	r3, #2
   1eed2:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1eed4:	4b20      	ldr	r3, [pc, #128]	; (1ef58 <system_clock_init+0x16c>)
   1eed6:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
   1eed8:	4b20      	ldr	r3, [pc, #128]	; (1ef5c <system_clock_init+0x170>)
   1eeda:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1eedc:	2008      	movs	r0, #8
   1eede:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
   1eee0:	4813      	ldr	r0, [pc, #76]	; (1ef30 <system_clock_init+0x144>)
   1eee2:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1eee4:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
   1eee6:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1eee8:	4013      	ands	r3, r2
   1eeea:	2b03      	cmp	r3, #3
   1eeec:	d1fb      	bne.n	1eee6 <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1eeee:	4910      	ldr	r1, [pc, #64]	; (1ef30 <system_clock_init+0x144>)
   1eef0:	2244      	movs	r2, #68	; 0x44
   1eef2:	5c88      	ldrb	r0, [r1, r2]
   1eef4:	3b83      	subs	r3, #131	; 0x83
   1eef6:	4303      	orrs	r3, r0
   1eef8:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
   1eefa:	4a19      	ldr	r2, [pc, #100]	; (1ef60 <system_clock_init+0x174>)
   1eefc:	2300      	movs	r3, #0
   1eefe:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1ef00:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   1ef02:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   1ef04:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   1ef06:	a901      	add	r1, sp, #4
   1ef08:	2201      	movs	r2, #1
   1ef0a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1ef0c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1ef0e:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1ef10:	3308      	adds	r3, #8
   1ef12:	700b      	strb	r3, [r1, #0]
   1ef14:	724a      	strb	r2, [r1, #9]
   1ef16:	2000      	movs	r0, #0
   1ef18:	4b0b      	ldr	r3, [pc, #44]	; (1ef48 <system_clock_init+0x15c>)
   1ef1a:	4798      	blx	r3
   1ef1c:	2000      	movs	r0, #0
   1ef1e:	4b0b      	ldr	r3, [pc, #44]	; (1ef4c <system_clock_init+0x160>)
   1ef20:	4798      	blx	r3
#endif
}
   1ef22:	b00d      	add	sp, #52	; 0x34
   1ef24:	bc3c      	pop	{r2, r3, r4, r5}
   1ef26:	4690      	mov	r8, r2
   1ef28:	4699      	mov	r9, r3
   1ef2a:	46a2      	mov	sl, r4
   1ef2c:	46ab      	mov	fp, r5
   1ef2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef30:	40000800 	.word	0x40000800
   1ef34:	41004000 	.word	0x41004000
   1ef38:	0001f19d 	.word	0x0001f19d
   1ef3c:	0001ec65 	.word	0x0001ec65
   1ef40:	0001ed45 	.word	0x0001ed45
   1ef44:	0001ef65 	.word	0x0001ef65
   1ef48:	0001ef89 	.word	0x0001ef89
   1ef4c:	0001f041 	.word	0x0001f041
   1ef50:	0001f111 	.word	0x0001f111
   1ef54:	02dc6c00 	.word	0x02dc6c00
   1ef58:	000f4240 	.word	0x000f4240
   1ef5c:	0001eca1 	.word	0x0001eca1
   1ef60:	40000400 	.word	0x40000400

0001ef64 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   1ef64:	4a06      	ldr	r2, [pc, #24]	; (1ef80 <system_gclk_init+0x1c>)
   1ef66:	6993      	ldr	r3, [r2, #24]
   1ef68:	2108      	movs	r1, #8
   1ef6a:	430b      	orrs	r3, r1
   1ef6c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1ef6e:	2201      	movs	r2, #1
   1ef70:	4b04      	ldr	r3, [pc, #16]	; (1ef84 <system_gclk_init+0x20>)
   1ef72:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1ef74:	0019      	movs	r1, r3
   1ef76:	780b      	ldrb	r3, [r1, #0]
   1ef78:	4213      	tst	r3, r2
   1ef7a:	d1fc      	bne.n	1ef76 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   1ef7c:	4770      	bx	lr
   1ef7e:	46c0      	nop			; (mov r8, r8)
   1ef80:	40000400 	.word	0x40000400
   1ef84:	40000c00 	.word	0x40000c00

0001ef88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1ef88:	b570      	push	{r4, r5, r6, lr}
   1ef8a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1ef8c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1ef8e:	780d      	ldrb	r5, [r1, #0]
   1ef90:	022d      	lsls	r5, r5, #8
   1ef92:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1ef94:	784b      	ldrb	r3, [r1, #1]
   1ef96:	2b00      	cmp	r3, #0
   1ef98:	d002      	beq.n	1efa0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1ef9a:	2380      	movs	r3, #128	; 0x80
   1ef9c:	02db      	lsls	r3, r3, #11
   1ef9e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1efa0:	7a4b      	ldrb	r3, [r1, #9]
   1efa2:	2b00      	cmp	r3, #0
   1efa4:	d002      	beq.n	1efac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1efa6:	2380      	movs	r3, #128	; 0x80
   1efa8:	031b      	lsls	r3, r3, #12
   1efaa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1efac:	6848      	ldr	r0, [r1, #4]
   1efae:	2801      	cmp	r0, #1
   1efb0:	d910      	bls.n	1efd4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1efb2:	1e43      	subs	r3, r0, #1
   1efb4:	4218      	tst	r0, r3
   1efb6:	d134      	bne.n	1f022 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1efb8:	2802      	cmp	r0, #2
   1efba:	d930      	bls.n	1f01e <system_gclk_gen_set_config+0x96>
   1efbc:	2302      	movs	r3, #2
   1efbe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1efc0:	3201      	adds	r2, #1
						mask <<= 1) {
   1efc2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1efc4:	4298      	cmp	r0, r3
   1efc6:	d8fb      	bhi.n	1efc0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1efc8:	0212      	lsls	r2, r2, #8
   1efca:	4332      	orrs	r2, r6
   1efcc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1efce:	2380      	movs	r3, #128	; 0x80
   1efd0:	035b      	lsls	r3, r3, #13
   1efd2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1efd4:	7a0b      	ldrb	r3, [r1, #8]
   1efd6:	2b00      	cmp	r3, #0
   1efd8:	d002      	beq.n	1efe0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1efda:	2380      	movs	r3, #128	; 0x80
   1efdc:	039b      	lsls	r3, r3, #14
   1efde:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1efe0:	4a13      	ldr	r2, [pc, #76]	; (1f030 <system_gclk_gen_set_config+0xa8>)
   1efe2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   1efe4:	b25b      	sxtb	r3, r3
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	dbfb      	blt.n	1efe2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   1efea:	4b12      	ldr	r3, [pc, #72]	; (1f034 <system_gclk_gen_set_config+0xac>)
   1efec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1efee:	4b12      	ldr	r3, [pc, #72]	; (1f038 <system_gclk_gen_set_config+0xb0>)
   1eff0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1eff2:	4a0f      	ldr	r2, [pc, #60]	; (1f030 <system_gclk_gen_set_config+0xa8>)
   1eff4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1eff6:	b25b      	sxtb	r3, r3
   1eff8:	2b00      	cmp	r3, #0
   1effa:	dbfb      	blt.n	1eff4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1effc:	4b0c      	ldr	r3, [pc, #48]	; (1f030 <system_gclk_gen_set_config+0xa8>)
   1effe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f000:	001a      	movs	r2, r3
   1f002:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   1f004:	b25b      	sxtb	r3, r3
   1f006:	2b00      	cmp	r3, #0
   1f008:	dbfb      	blt.n	1f002 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1f00a:	4a09      	ldr	r2, [pc, #36]	; (1f030 <system_gclk_gen_set_config+0xa8>)
   1f00c:	6853      	ldr	r3, [r2, #4]
   1f00e:	2180      	movs	r1, #128	; 0x80
   1f010:	0249      	lsls	r1, r1, #9
   1f012:	400b      	ands	r3, r1
   1f014:	431d      	orrs	r5, r3
   1f016:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   1f018:	4b08      	ldr	r3, [pc, #32]	; (1f03c <system_gclk_gen_set_config+0xb4>)
   1f01a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f01c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1f01e:	2200      	movs	r2, #0
   1f020:	e7d2      	b.n	1efc8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1f022:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   1f024:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1f026:	2380      	movs	r3, #128	; 0x80
   1f028:	029b      	lsls	r3, r3, #10
   1f02a:	431d      	orrs	r5, r3
   1f02c:	e7d2      	b.n	1efd4 <system_gclk_gen_set_config+0x4c>
   1f02e:	46c0      	nop			; (mov r8, r8)
   1f030:	40000c00 	.word	0x40000c00
   1f034:	0001d5e9 	.word	0x0001d5e9
   1f038:	40000c08 	.word	0x40000c08
   1f03c:	0001d629 	.word	0x0001d629

0001f040 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1f040:	b510      	push	{r4, lr}
   1f042:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f044:	4a0b      	ldr	r2, [pc, #44]	; (1f074 <system_gclk_gen_enable+0x34>)
   1f046:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f048:	b25b      	sxtb	r3, r3
   1f04a:	2b00      	cmp	r3, #0
   1f04c:	dbfb      	blt.n	1f046 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1f04e:	4b0a      	ldr	r3, [pc, #40]	; (1f078 <system_gclk_gen_enable+0x38>)
   1f050:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f052:	4b0a      	ldr	r3, [pc, #40]	; (1f07c <system_gclk_gen_enable+0x3c>)
   1f054:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f056:	4a07      	ldr	r2, [pc, #28]	; (1f074 <system_gclk_gen_enable+0x34>)
   1f058:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f05a:	b25b      	sxtb	r3, r3
   1f05c:	2b00      	cmp	r3, #0
   1f05e:	dbfb      	blt.n	1f058 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1f060:	4a04      	ldr	r2, [pc, #16]	; (1f074 <system_gclk_gen_enable+0x34>)
   1f062:	6851      	ldr	r1, [r2, #4]
   1f064:	2380      	movs	r3, #128	; 0x80
   1f066:	025b      	lsls	r3, r3, #9
   1f068:	430b      	orrs	r3, r1
   1f06a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   1f06c:	4b04      	ldr	r3, [pc, #16]	; (1f080 <system_gclk_gen_enable+0x40>)
   1f06e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f070:	bd10      	pop	{r4, pc}
   1f072:	46c0      	nop			; (mov r8, r8)
   1f074:	40000c00 	.word	0x40000c00
   1f078:	0001d5e9 	.word	0x0001d5e9
   1f07c:	40000c04 	.word	0x40000c04
   1f080:	0001d629 	.word	0x0001d629

0001f084 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1f084:	b570      	push	{r4, r5, r6, lr}
   1f086:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f088:	4a1a      	ldr	r2, [pc, #104]	; (1f0f4 <system_gclk_gen_get_hz+0x70>)
   1f08a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f08c:	b25b      	sxtb	r3, r3
   1f08e:	2b00      	cmp	r3, #0
   1f090:	dbfb      	blt.n	1f08a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1f092:	4b19      	ldr	r3, [pc, #100]	; (1f0f8 <system_gclk_gen_get_hz+0x74>)
   1f094:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f096:	4b19      	ldr	r3, [pc, #100]	; (1f0fc <system_gclk_gen_get_hz+0x78>)
   1f098:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f09a:	4a16      	ldr	r2, [pc, #88]	; (1f0f4 <system_gclk_gen_get_hz+0x70>)
   1f09c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f09e:	b25b      	sxtb	r3, r3
   1f0a0:	2b00      	cmp	r3, #0
   1f0a2:	dbfb      	blt.n	1f09c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1f0a4:	4e13      	ldr	r6, [pc, #76]	; (1f0f4 <system_gclk_gen_get_hz+0x70>)
   1f0a6:	6870      	ldr	r0, [r6, #4]
   1f0a8:	04c0      	lsls	r0, r0, #19
   1f0aa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1f0ac:	4b14      	ldr	r3, [pc, #80]	; (1f100 <system_gclk_gen_get_hz+0x7c>)
   1f0ae:	4798      	blx	r3
   1f0b0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f0b2:	4b12      	ldr	r3, [pc, #72]	; (1f0fc <system_gclk_gen_get_hz+0x78>)
   1f0b4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1f0b6:	6876      	ldr	r6, [r6, #4]
   1f0b8:	02f6      	lsls	r6, r6, #11
   1f0ba:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1f0bc:	4b11      	ldr	r3, [pc, #68]	; (1f104 <system_gclk_gen_get_hz+0x80>)
   1f0be:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f0c0:	4a0c      	ldr	r2, [pc, #48]	; (1f0f4 <system_gclk_gen_get_hz+0x70>)
   1f0c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f0c4:	b25b      	sxtb	r3, r3
   1f0c6:	2b00      	cmp	r3, #0
   1f0c8:	dbfb      	blt.n	1f0c2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1f0ca:	4b0a      	ldr	r3, [pc, #40]	; (1f0f4 <system_gclk_gen_get_hz+0x70>)
   1f0cc:	689c      	ldr	r4, [r3, #8]
   1f0ce:	0224      	lsls	r4, r4, #8
   1f0d0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1f0d2:	4b0d      	ldr	r3, [pc, #52]	; (1f108 <system_gclk_gen_get_hz+0x84>)
   1f0d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1f0d6:	2e00      	cmp	r6, #0
   1f0d8:	d107      	bne.n	1f0ea <system_gclk_gen_get_hz+0x66>
   1f0da:	2c01      	cmp	r4, #1
   1f0dc:	d907      	bls.n	1f0ee <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1f0de:	0021      	movs	r1, r4
   1f0e0:	0028      	movs	r0, r5
   1f0e2:	4b0a      	ldr	r3, [pc, #40]	; (1f10c <system_gclk_gen_get_hz+0x88>)
   1f0e4:	4798      	blx	r3
   1f0e6:	0005      	movs	r5, r0
   1f0e8:	e001      	b.n	1f0ee <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1f0ea:	3401      	adds	r4, #1
   1f0ec:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1f0ee:	0028      	movs	r0, r5
   1f0f0:	bd70      	pop	{r4, r5, r6, pc}
   1f0f2:	46c0      	nop			; (mov r8, r8)
   1f0f4:	40000c00 	.word	0x40000c00
   1f0f8:	0001d5e9 	.word	0x0001d5e9
   1f0fc:	40000c04 	.word	0x40000c04
   1f100:	0001ebd1 	.word	0x0001ebd1
   1f104:	40000c08 	.word	0x40000c08
   1f108:	0001d629 	.word	0x0001d629
   1f10c:	00024039 	.word	0x00024039

0001f110 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1f110:	b510      	push	{r4, lr}
   1f112:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f114:	4b06      	ldr	r3, [pc, #24]	; (1f130 <system_gclk_chan_enable+0x20>)
   1f116:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f118:	4b06      	ldr	r3, [pc, #24]	; (1f134 <system_gclk_chan_enable+0x24>)
   1f11a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1f11c:	4a06      	ldr	r2, [pc, #24]	; (1f138 <system_gclk_chan_enable+0x28>)
   1f11e:	8853      	ldrh	r3, [r2, #2]
   1f120:	2180      	movs	r1, #128	; 0x80
   1f122:	01c9      	lsls	r1, r1, #7
   1f124:	430b      	orrs	r3, r1
   1f126:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   1f128:	4b04      	ldr	r3, [pc, #16]	; (1f13c <system_gclk_chan_enable+0x2c>)
   1f12a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f12c:	bd10      	pop	{r4, pc}
   1f12e:	46c0      	nop			; (mov r8, r8)
   1f130:	0001d5e9 	.word	0x0001d5e9
   1f134:	40000c02 	.word	0x40000c02
   1f138:	40000c00 	.word	0x40000c00
   1f13c:	0001d629 	.word	0x0001d629

0001f140 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1f140:	b510      	push	{r4, lr}
   1f142:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f144:	4b0f      	ldr	r3, [pc, #60]	; (1f184 <system_gclk_chan_disable+0x44>)
   1f146:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f148:	4b0f      	ldr	r3, [pc, #60]	; (1f188 <system_gclk_chan_disable+0x48>)
   1f14a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1f14c:	4a0f      	ldr	r2, [pc, #60]	; (1f18c <system_gclk_chan_disable+0x4c>)
   1f14e:	8853      	ldrh	r3, [r2, #2]
   1f150:	051b      	lsls	r3, r3, #20
   1f152:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   1f154:	8853      	ldrh	r3, [r2, #2]
   1f156:	490e      	ldr	r1, [pc, #56]	; (1f190 <system_gclk_chan_disable+0x50>)
   1f158:	400b      	ands	r3, r1
   1f15a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1f15c:	8853      	ldrh	r3, [r2, #2]
   1f15e:	490d      	ldr	r1, [pc, #52]	; (1f194 <system_gclk_chan_disable+0x54>)
   1f160:	400b      	ands	r3, r1
   1f162:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1f164:	0011      	movs	r1, r2
   1f166:	2280      	movs	r2, #128	; 0x80
   1f168:	01d2      	lsls	r2, r2, #7
   1f16a:	884b      	ldrh	r3, [r1, #2]
   1f16c:	4213      	tst	r3, r2
   1f16e:	d1fc      	bne.n	1f16a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1f170:	4906      	ldr	r1, [pc, #24]	; (1f18c <system_gclk_chan_disable+0x4c>)
   1f172:	884a      	ldrh	r2, [r1, #2]
   1f174:	0203      	lsls	r3, r0, #8
   1f176:	4806      	ldr	r0, [pc, #24]	; (1f190 <system_gclk_chan_disable+0x50>)
   1f178:	4002      	ands	r2, r0
   1f17a:	4313      	orrs	r3, r2
   1f17c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1f17e:	4b06      	ldr	r3, [pc, #24]	; (1f198 <system_gclk_chan_disable+0x58>)
   1f180:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f182:	bd10      	pop	{r4, pc}
   1f184:	0001d5e9 	.word	0x0001d5e9
   1f188:	40000c02 	.word	0x40000c02
   1f18c:	40000c00 	.word	0x40000c00
   1f190:	fffff0ff 	.word	0xfffff0ff
   1f194:	ffffbfff 	.word	0xffffbfff
   1f198:	0001d629 	.word	0x0001d629

0001f19c <system_gclk_chan_set_config>:
{
   1f19c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1f19e:	780c      	ldrb	r4, [r1, #0]
   1f1a0:	0224      	lsls	r4, r4, #8
   1f1a2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   1f1a4:	4b02      	ldr	r3, [pc, #8]	; (1f1b0 <system_gclk_chan_set_config+0x14>)
   1f1a6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1f1a8:	b2a4      	uxth	r4, r4
   1f1aa:	4b02      	ldr	r3, [pc, #8]	; (1f1b4 <system_gclk_chan_set_config+0x18>)
   1f1ac:	805c      	strh	r4, [r3, #2]
}
   1f1ae:	bd10      	pop	{r4, pc}
   1f1b0:	0001f141 	.word	0x0001f141
   1f1b4:	40000c00 	.word	0x40000c00

0001f1b8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1f1b8:	b510      	push	{r4, lr}
   1f1ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f1bc:	4b06      	ldr	r3, [pc, #24]	; (1f1d8 <system_gclk_chan_get_hz+0x20>)
   1f1be:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f1c0:	4b06      	ldr	r3, [pc, #24]	; (1f1dc <system_gclk_chan_get_hz+0x24>)
   1f1c2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1f1c4:	4b06      	ldr	r3, [pc, #24]	; (1f1e0 <system_gclk_chan_get_hz+0x28>)
   1f1c6:	885c      	ldrh	r4, [r3, #2]
   1f1c8:	0524      	lsls	r4, r4, #20
   1f1ca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   1f1cc:	4b05      	ldr	r3, [pc, #20]	; (1f1e4 <system_gclk_chan_get_hz+0x2c>)
   1f1ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1f1d0:	0020      	movs	r0, r4
   1f1d2:	4b05      	ldr	r3, [pc, #20]	; (1f1e8 <system_gclk_chan_get_hz+0x30>)
   1f1d4:	4798      	blx	r3
}
   1f1d6:	bd10      	pop	{r4, pc}
   1f1d8:	0001d5e9 	.word	0x0001d5e9
   1f1dc:	40000c02 	.word	0x40000c02
   1f1e0:	40000c00 	.word	0x40000c00
   1f1e4:	0001d629 	.word	0x0001d629
   1f1e8:	0001f085 	.word	0x0001f085

0001f1ec <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1f1ec:	2800      	cmp	r0, #0
   1f1ee:	db08      	blt.n	1f202 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
   1f1f0:	2301      	movs	r3, #1
   1f1f2:	4083      	lsls	r3, r0
   1f1f4:	22c0      	movs	r2, #192	; 0xc0
   1f1f6:	0052      	lsls	r2, r2, #1
   1f1f8:	4906      	ldr	r1, [pc, #24]	; (1f214 <system_interrupt_clear_pending+0x28>)
   1f1fa:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
   1f1fc:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
   1f1fe:	0018      	movs	r0, r3
   1f200:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
   1f202:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1f204:	1c42      	adds	r2, r0, #1
   1f206:	d1fa      	bne.n	1f1fe <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1f208:	2280      	movs	r2, #128	; 0x80
   1f20a:	0492      	lsls	r2, r2, #18
   1f20c:	4b02      	ldr	r3, [pc, #8]	; (1f218 <system_interrupt_clear_pending+0x2c>)
   1f20e:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
   1f210:	2300      	movs	r3, #0
   1f212:	e7f4      	b.n	1f1fe <system_interrupt_clear_pending+0x12>
   1f214:	e000e100 	.word	0xe000e100
   1f218:	e000ed00 	.word	0xe000ed00

0001f21c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1f21c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1f21e:	78d3      	ldrb	r3, [r2, #3]
   1f220:	2b00      	cmp	r3, #0
   1f222:	d135      	bne.n	1f290 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1f224:	7813      	ldrb	r3, [r2, #0]
   1f226:	2b80      	cmp	r3, #128	; 0x80
   1f228:	d029      	beq.n	1f27e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1f22a:	061b      	lsls	r3, r3, #24
   1f22c:	2480      	movs	r4, #128	; 0x80
   1f22e:	0264      	lsls	r4, r4, #9
   1f230:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1f232:	7854      	ldrb	r4, [r2, #1]
   1f234:	2502      	movs	r5, #2
   1f236:	43ac      	bics	r4, r5
   1f238:	d106      	bne.n	1f248 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1f23a:	7894      	ldrb	r4, [r2, #2]
   1f23c:	2c00      	cmp	r4, #0
   1f23e:	d120      	bne.n	1f282 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1f240:	2480      	movs	r4, #128	; 0x80
   1f242:	02a4      	lsls	r4, r4, #10
   1f244:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1f246:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f248:	7854      	ldrb	r4, [r2, #1]
   1f24a:	3c01      	subs	r4, #1
   1f24c:	2c01      	cmp	r4, #1
   1f24e:	d91c      	bls.n	1f28a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f250:	040d      	lsls	r5, r1, #16
   1f252:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f254:	24a0      	movs	r4, #160	; 0xa0
   1f256:	05e4      	lsls	r4, r4, #23
   1f258:	432c      	orrs	r4, r5
   1f25a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f25c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f25e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f260:	24d0      	movs	r4, #208	; 0xd0
   1f262:	0624      	lsls	r4, r4, #24
   1f264:	432c      	orrs	r4, r5
   1f266:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f268:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1f26a:	78d4      	ldrb	r4, [r2, #3]
   1f26c:	2c00      	cmp	r4, #0
   1f26e:	d122      	bne.n	1f2b6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1f270:	035b      	lsls	r3, r3, #13
   1f272:	d51c      	bpl.n	1f2ae <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1f274:	7893      	ldrb	r3, [r2, #2]
   1f276:	2b01      	cmp	r3, #1
   1f278:	d01e      	beq.n	1f2b8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   1f27a:	6141      	str	r1, [r0, #20]
   1f27c:	e017      	b.n	1f2ae <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1f27e:	2300      	movs	r3, #0
   1f280:	e7d7      	b.n	1f232 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1f282:	24c0      	movs	r4, #192	; 0xc0
   1f284:	02e4      	lsls	r4, r4, #11
   1f286:	4323      	orrs	r3, r4
   1f288:	e7dd      	b.n	1f246 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1f28a:	4c0d      	ldr	r4, [pc, #52]	; (1f2c0 <_system_pinmux_config+0xa4>)
   1f28c:	4023      	ands	r3, r4
   1f28e:	e7df      	b.n	1f250 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1f290:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f292:	040c      	lsls	r4, r1, #16
   1f294:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f296:	23a0      	movs	r3, #160	; 0xa0
   1f298:	05db      	lsls	r3, r3, #23
   1f29a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f29c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f29e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f2a0:	23d0      	movs	r3, #208	; 0xd0
   1f2a2:	061b      	lsls	r3, r3, #24
   1f2a4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f2a6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1f2a8:	78d3      	ldrb	r3, [r2, #3]
   1f2aa:	2b00      	cmp	r3, #0
   1f2ac:	d103      	bne.n	1f2b6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f2ae:	7853      	ldrb	r3, [r2, #1]
   1f2b0:	3b01      	subs	r3, #1
   1f2b2:	2b01      	cmp	r3, #1
   1f2b4:	d902      	bls.n	1f2bc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1f2b6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   1f2b8:	6181      	str	r1, [r0, #24]
   1f2ba:	e7f8      	b.n	1f2ae <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   1f2bc:	6081      	str	r1, [r0, #8]
}
   1f2be:	e7fa      	b.n	1f2b6 <_system_pinmux_config+0x9a>
   1f2c0:	fffbffff 	.word	0xfffbffff

0001f2c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1f2c4:	b510      	push	{r4, lr}
   1f2c6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   1f2c8:	09c1      	lsrs	r1, r0, #7
		return NULL;
   1f2ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1f2cc:	2900      	cmp	r1, #0
   1f2ce:	d104      	bne.n	1f2da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1f2d0:	0943      	lsrs	r3, r0, #5
   1f2d2:	01db      	lsls	r3, r3, #7
   1f2d4:	4905      	ldr	r1, [pc, #20]	; (1f2ec <system_pinmux_pin_set_config+0x28>)
   1f2d6:	468c      	mov	ip, r1
   1f2d8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1f2da:	241f      	movs	r4, #31
   1f2dc:	4020      	ands	r0, r4
   1f2de:	2101      	movs	r1, #1
   1f2e0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1f2e2:	0018      	movs	r0, r3
   1f2e4:	4b02      	ldr	r3, [pc, #8]	; (1f2f0 <system_pinmux_pin_set_config+0x2c>)
   1f2e6:	4798      	blx	r3
}
   1f2e8:	bd10      	pop	{r4, pc}
   1f2ea:	46c0      	nop			; (mov r8, r8)
   1f2ec:	41004400 	.word	0x41004400
   1f2f0:	0001f21d 	.word	0x0001f21d

0001f2f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1f2f4:	4770      	bx	lr
	...

0001f2f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1f2f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1f2fa:	4b05      	ldr	r3, [pc, #20]	; (1f310 <system_init+0x18>)
   1f2fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1f2fe:	4b05      	ldr	r3, [pc, #20]	; (1f314 <system_init+0x1c>)
   1f300:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1f302:	4b05      	ldr	r3, [pc, #20]	; (1f318 <system_init+0x20>)
   1f304:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1f306:	4b05      	ldr	r3, [pc, #20]	; (1f31c <system_init+0x24>)
   1f308:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1f30a:	4b05      	ldr	r3, [pc, #20]	; (1f320 <system_init+0x28>)
   1f30c:	4798      	blx	r3
}
   1f30e:	bd10      	pop	{r4, pc}
   1f310:	0001eded 	.word	0x0001eded
   1f314:	0001d659 	.word	0x0001d659
   1f318:	000126e5 	.word	0x000126e5
   1f31c:	0001d769 	.word	0x0001d769
   1f320:	0001f2f5 	.word	0x0001f2f5

0001f324 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   1f324:	4b09      	ldr	r3, [pc, #36]	; (1f34c <_tcc_get_inst_index+0x28>)
   1f326:	4298      	cmp	r0, r3
   1f328:	d00c      	beq.n	1f344 <_tcc_get_inst_index+0x20>
   1f32a:	4b09      	ldr	r3, [pc, #36]	; (1f350 <_tcc_get_inst_index+0x2c>)
   1f32c:	4298      	cmp	r0, r3
   1f32e:	d007      	beq.n	1f340 <_tcc_get_inst_index+0x1c>
   1f330:	4a08      	ldr	r2, [pc, #32]	; (1f354 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1f332:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   1f334:	4290      	cmp	r0, r2
   1f336:	d001      	beq.n	1f33c <_tcc_get_inst_index+0x18>
}
   1f338:	0018      	movs	r0, r3
   1f33a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1f33c:	3302      	adds	r3, #2
   1f33e:	e002      	b.n	1f346 <_tcc_get_inst_index+0x22>
   1f340:	2301      	movs	r3, #1
   1f342:	e000      	b.n	1f346 <_tcc_get_inst_index+0x22>
   1f344:	2300      	movs	r3, #0
			return i;
   1f346:	b2db      	uxtb	r3, r3
   1f348:	e7f6      	b.n	1f338 <_tcc_get_inst_index+0x14>
   1f34a:	46c0      	nop			; (mov r8, r8)
   1f34c:	42002000 	.word	0x42002000
   1f350:	42002400 	.word	0x42002400
   1f354:	42002800 	.word	0x42002800

0001f358 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1f358:	b510      	push	{r4, lr}
   1f35a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f35c:	0008      	movs	r0, r1
   1f35e:	4b4f      	ldr	r3, [pc, #316]	; (1f49c <tcc_get_config_defaults+0x144>)
   1f360:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1f362:	2300      	movs	r3, #0
   1f364:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1f366:	0080      	lsls	r0, r0, #2
   1f368:	4a4d      	ldr	r2, [pc, #308]	; (1f4a0 <tcc_get_config_defaults+0x148>)
   1f36a:	5882      	ldr	r2, [r0, r2]
   1f36c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1f36e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1f370:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1f372:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1f374:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   1f376:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f378:	61e3      	str	r3, [r4, #28]
   1f37a:	6223      	str	r3, [r4, #32]
   1f37c:	6263      	str	r3, [r4, #36]	; 0x24
   1f37e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f380:	7523      	strb	r3, [r4, #20]
   1f382:	7563      	strb	r3, [r4, #21]
   1f384:	75a3      	strb	r3, [r4, #22]
   1f386:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1f388:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   1f38a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f38c:	7423      	strb	r3, [r4, #16]
   1f38e:	7463      	strb	r3, [r4, #17]
   1f390:	74a3      	strb	r3, [r4, #18]
   1f392:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   1f394:	222c      	movs	r2, #44	; 0x2c
   1f396:	54a3      	strb	r3, [r4, r2]
   1f398:	3201      	adds	r2, #1
   1f39a:	54a3      	strb	r3, [r4, r2]
   1f39c:	3201      	adds	r2, #1
   1f39e:	54a3      	strb	r3, [r4, r2]
   1f3a0:	3201      	adds	r2, #1
   1f3a2:	54a3      	strb	r3, [r4, r2]
   1f3a4:	3201      	adds	r2, #1
   1f3a6:	54a3      	strb	r3, [r4, r2]
   1f3a8:	3201      	adds	r2, #1
   1f3aa:	54a3      	strb	r3, [r4, r2]
   1f3ac:	3201      	adds	r2, #1
   1f3ae:	54a3      	strb	r3, [r4, r2]
   1f3b0:	3201      	adds	r2, #1
   1f3b2:	54a3      	strb	r3, [r4, r2]
   1f3b4:	3201      	adds	r2, #1
   1f3b6:	54a3      	strb	r3, [r4, r2]
   1f3b8:	3201      	adds	r2, #1
   1f3ba:	54a3      	strb	r3, [r4, r2]
   1f3bc:	3201      	adds	r2, #1
   1f3be:	54a3      	strb	r3, [r4, r2]
   1f3c0:	3201      	adds	r2, #1
   1f3c2:	54a3      	strb	r3, [r4, r2]
   1f3c4:	3201      	adds	r2, #1
   1f3c6:	54a3      	strb	r3, [r4, r2]
   1f3c8:	3201      	adds	r2, #1
   1f3ca:	54a3      	strb	r3, [r4, r2]
   1f3cc:	3201      	adds	r2, #1
   1f3ce:	54a3      	strb	r3, [r4, r2]
   1f3d0:	3201      	adds	r2, #1
   1f3d2:	54a3      	strb	r3, [r4, r2]
   1f3d4:	3201      	adds	r2, #1
   1f3d6:	54a3      	strb	r3, [r4, r2]
   1f3d8:	3201      	adds	r2, #1
   1f3da:	54a3      	strb	r3, [r4, r2]
   1f3dc:	3201      	adds	r2, #1
   1f3de:	54a3      	strb	r3, [r4, r2]
   1f3e0:	3201      	adds	r2, #1
   1f3e2:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1f3e4:	3201      	adds	r2, #1
   1f3e6:	54a3      	strb	r3, [r4, r2]
   1f3e8:	3201      	adds	r2, #1
   1f3ea:	54a3      	strb	r3, [r4, r2]
   1f3ec:	3201      	adds	r2, #1
   1f3ee:	54a3      	strb	r3, [r4, r2]
   1f3f0:	3201      	adds	r2, #1
   1f3f2:	54a3      	strb	r3, [r4, r2]
   1f3f4:	3201      	adds	r2, #1
   1f3f6:	54a3      	strb	r3, [r4, r2]
   1f3f8:	3201      	adds	r2, #1
   1f3fa:	54a3      	strb	r3, [r4, r2]
   1f3fc:	3201      	adds	r2, #1
   1f3fe:	54a3      	strb	r3, [r4, r2]
   1f400:	3201      	adds	r2, #1
   1f402:	54a3      	strb	r3, [r4, r2]
   1f404:	3201      	adds	r2, #1
   1f406:	54a3      	strb	r3, [r4, r2]
   1f408:	3201      	adds	r2, #1
   1f40a:	54a3      	strb	r3, [r4, r2]
   1f40c:	3201      	adds	r2, #1
   1f40e:	54a3      	strb	r3, [r4, r2]
   1f410:	3201      	adds	r2, #1
   1f412:	54a3      	strb	r3, [r4, r2]
   1f414:	3201      	adds	r2, #1
   1f416:	54a3      	strb	r3, [r4, r2]
   1f418:	3201      	adds	r2, #1
   1f41a:	54a3      	strb	r3, [r4, r2]
   1f41c:	3201      	adds	r2, #1
   1f41e:	54a3      	strb	r3, [r4, r2]
   1f420:	3201      	adds	r2, #1
   1f422:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1f424:	3201      	adds	r2, #1
   1f426:	54a3      	strb	r3, [r4, r2]
   1f428:	3201      	adds	r2, #1
   1f42a:	54a3      	strb	r3, [r4, r2]
   1f42c:	3201      	adds	r2, #1
   1f42e:	54a3      	strb	r3, [r4, r2]
   1f430:	3201      	adds	r2, #1
   1f432:	54a3      	strb	r3, [r4, r2]
   1f434:	3201      	adds	r2, #1
   1f436:	54a3      	strb	r3, [r4, r2]
   1f438:	3201      	adds	r2, #1
   1f43a:	54a3      	strb	r3, [r4, r2]
   1f43c:	3201      	adds	r2, #1
   1f43e:	54a3      	strb	r3, [r4, r2]
   1f440:	3201      	adds	r2, #1
   1f442:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1f444:	3241      	adds	r2, #65	; 0x41
   1f446:	54a3      	strb	r3, [r4, r2]
   1f448:	65a3      	str	r3, [r4, #88]	; 0x58
   1f44a:	67a3      	str	r3, [r4, #120]	; 0x78
   1f44c:	3201      	adds	r2, #1
   1f44e:	54a3      	strb	r3, [r4, r2]
   1f450:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f452:	67e3      	str	r3, [r4, #124]	; 0x7c
   1f454:	3201      	adds	r2, #1
   1f456:	54a3      	strb	r3, [r4, r2]
   1f458:	6623      	str	r3, [r4, #96]	; 0x60
   1f45a:	3a1a      	subs	r2, #26
   1f45c:	50a3      	str	r3, [r4, r2]
   1f45e:	321b      	adds	r2, #27
   1f460:	54a3      	strb	r3, [r4, r2]
   1f462:	6663      	str	r3, [r4, #100]	; 0x64
   1f464:	3a17      	subs	r2, #23
   1f466:	50a3      	str	r3, [r4, r2]
   1f468:	3218      	adds	r2, #24
   1f46a:	54a3      	strb	r3, [r4, r2]
   1f46c:	66a3      	str	r3, [r4, #104]	; 0x68
   1f46e:	3a14      	subs	r2, #20
   1f470:	50a3      	str	r3, [r4, r2]
   1f472:	3215      	adds	r2, #21
   1f474:	54a3      	strb	r3, [r4, r2]
   1f476:	66e3      	str	r3, [r4, #108]	; 0x6c
   1f478:	3a11      	subs	r2, #17
   1f47a:	50a3      	str	r3, [r4, r2]
   1f47c:	3212      	adds	r2, #18
   1f47e:	54a3      	strb	r3, [r4, r2]
   1f480:	6723      	str	r3, [r4, #112]	; 0x70
   1f482:	3a0e      	subs	r2, #14
   1f484:	50a3      	str	r3, [r4, r2]
   1f486:	320f      	adds	r2, #15
   1f488:	54a3      	strb	r3, [r4, r2]
   1f48a:	6763      	str	r3, [r4, #116]	; 0x74
   1f48c:	3a0b      	subs	r2, #11
   1f48e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1f490:	2101      	movs	r1, #1
   1f492:	320c      	adds	r2, #12
   1f494:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   1f496:	3201      	adds	r2, #1
   1f498:	54a3      	strb	r3, [r4, r2]
}
   1f49a:	bd10      	pop	{r4, pc}
   1f49c:	0001f325 	.word	0x0001f325
   1f4a0:	0002a4c0 	.word	0x0002a4c0

0001f4a4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   1f4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4a6:	46de      	mov	lr, fp
   1f4a8:	4657      	mov	r7, sl
   1f4aa:	464e      	mov	r6, r9
   1f4ac:	4645      	mov	r5, r8
   1f4ae:	b5e0      	push	{r5, r6, r7, lr}
   1f4b0:	b091      	sub	sp, #68	; 0x44
   1f4b2:	9001      	str	r0, [sp, #4]
   1f4b4:	000c      	movs	r4, r1
   1f4b6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f4b8:	0008      	movs	r0, r1
   1f4ba:	4bc3      	ldr	r3, [pc, #780]	; (1f7c8 <tcc_init+0x324>)
   1f4bc:	4798      	blx	r3
   1f4be:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1f4c0:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1f4c2:	48c2      	ldr	r0, [pc, #776]	; (1f7cc <tcc_init+0x328>)
   1f4c4:	6a02      	ldr	r2, [r0, #32]
   1f4c6:	009e      	lsls	r6, r3, #2
   1f4c8:	4fc1      	ldr	r7, [pc, #772]	; (1f7d0 <tcc_init+0x32c>)
   1f4ca:	59f7      	ldr	r7, [r6, r7]
   1f4cc:	433a      	orrs	r2, r7
   1f4ce:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f4d0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1f4d2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f4d4:	0792      	lsls	r2, r2, #30
   1f4d6:	d506      	bpl.n	1f4e6 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   1f4d8:	b011      	add	sp, #68	; 0x44
   1f4da:	bc3c      	pop	{r2, r3, r4, r5}
   1f4dc:	4690      	mov	r8, r2
   1f4de:	4699      	mov	r9, r3
   1f4e0:	46a2      	mov	sl, r4
   1f4e2:	46ab      	mov	fp, r5
   1f4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   1f4e6:	6822      	ldr	r2, [r4, #0]
   1f4e8:	2701      	movs	r7, #1
   1f4ea:	4017      	ands	r7, r2
   1f4ec:	d1f4      	bne.n	1f4d8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1f4ee:	48b9      	ldr	r0, [pc, #740]	; (1f7d4 <tcc_init+0x330>)
   1f4f0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1f4f2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   1f4f4:	682e      	ldr	r6, [r5, #0]
   1f4f6:	42b2      	cmp	r2, r6
   1f4f8:	d3ee      	bcc.n	1f4d8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   1f4fa:	686e      	ldr	r6, [r5, #4]
   1f4fc:	42b2      	cmp	r2, r6
   1f4fe:	d3eb      	bcc.n	1f4d8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1f500:	69e8      	ldr	r0, [r5, #28]
   1f502:	4282      	cmp	r2, r0
   1f504:	d200      	bcs.n	1f508 <tcc_init+0x64>
   1f506:	e1b9      	b.n	1f87c <tcc_init+0x3d8>
   1f508:	6a28      	ldr	r0, [r5, #32]
   1f50a:	4282      	cmp	r2, r0
   1f50c:	d200      	bcs.n	1f510 <tcc_init+0x6c>
   1f50e:	e1b7      	b.n	1f880 <tcc_init+0x3dc>
   1f510:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1f512:	4282      	cmp	r2, r0
   1f514:	d200      	bcs.n	1f518 <tcc_init+0x74>
   1f516:	e1b5      	b.n	1f884 <tcc_init+0x3e0>
   1f518:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1f51a:	4282      	cmp	r2, r0
   1f51c:	d200      	bcs.n	1f520 <tcc_init+0x7c>
   1f51e:	e1b3      	b.n	1f888 <tcc_init+0x3e4>
   1f520:	2298      	movs	r2, #152	; 0x98
   1f522:	4694      	mov	ip, r2
   1f524:	44ac      	add	ip, r5
   1f526:	4662      	mov	r2, ip
   1f528:	9208      	str	r2, [sp, #32]
   1f52a:	2000      	movs	r0, #0
   1f52c:	e003      	b.n	1f536 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f52e:	3001      	adds	r0, #1
   1f530:	3201      	adds	r2, #1
   1f532:	2808      	cmp	r0, #8
   1f534:	d008      	beq.n	1f548 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f536:	7816      	ldrb	r6, [r2, #0]
   1f538:	2e00      	cmp	r6, #0
   1f53a:	d0f8      	beq.n	1f52e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   1f53c:	4ea6      	ldr	r6, [pc, #664]	; (1f7d8 <tcc_init+0x334>)
   1f53e:	5c76      	ldrb	r6, [r6, r1]
   1f540:	4286      	cmp	r6, r0
   1f542:	dcf4      	bgt.n	1f52e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   1f544:	2017      	movs	r0, #23
   1f546:	e7c7      	b.n	1f4d8 <tcc_init+0x34>
   1f548:	2200      	movs	r2, #0
   1f54a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f54c:	2080      	movs	r0, #128	; 0x80
   1f54e:	0440      	lsls	r0, r0, #17
   1f550:	4684      	mov	ip, r0
   1f552:	e002      	b.n	1f55a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1f554:	3201      	adds	r2, #1
   1f556:	2a04      	cmp	r2, #4
   1f558:	d00e      	beq.n	1f578 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   1f55a:	18a8      	adds	r0, r5, r2
   1f55c:	7c00      	ldrb	r0, [r0, #16]
   1f55e:	2801      	cmp	r0, #1
   1f560:	d1f8      	bne.n	1f554 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1f562:	489e      	ldr	r0, [pc, #632]	; (1f7dc <tcc_init+0x338>)
   1f564:	5c40      	ldrb	r0, [r0, r1]
   1f566:	4290      	cmp	r0, r2
   1f568:	da00      	bge.n	1f56c <tcc_init+0xc8>
   1f56a:	e18f      	b.n	1f88c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f56c:	4660      	mov	r0, ip
   1f56e:	4090      	lsls	r0, r2
   1f570:	9e02      	ldr	r6, [sp, #8]
   1f572:	4306      	orrs	r6, r0
   1f574:	9602      	str	r6, [sp, #8]
   1f576:	e7ed      	b.n	1f554 <tcc_init+0xb0>
	if (config->run_in_standby) {
   1f578:	329d      	adds	r2, #157	; 0x9d
   1f57a:	5caa      	ldrb	r2, [r5, r2]
   1f57c:	2a00      	cmp	r2, #0
   1f57e:	d004      	beq.n	1f58a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1f580:	2280      	movs	r2, #128	; 0x80
   1f582:	0112      	lsls	r2, r2, #4
   1f584:	9902      	ldr	r1, [sp, #8]
   1f586:	4311      	orrs	r1, r2
   1f588:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   1f58a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   1f58c:	1e51      	subs	r1, r2, #1
   1f58e:	418a      	sbcs	r2, r1
   1f590:	0092      	lsls	r2, r2, #2
   1f592:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   1f594:	7a6a      	ldrb	r2, [r5, #9]
   1f596:	2a01      	cmp	r2, #1
   1f598:	d022      	beq.n	1f5e0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1f59a:	4a90      	ldr	r2, [pc, #576]	; (1f7dc <tcc_init+0x338>)
   1f59c:	5cd2      	ldrb	r2, [r2, r3]
   1f59e:	0011      	movs	r1, r2
   1f5a0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   1f5a2:	2235      	movs	r2, #53	; 0x35
   1f5a4:	5caa      	ldrb	r2, [r5, r2]
   1f5a6:	428a      	cmp	r2, r1
   1f5a8:	d300      	bcc.n	1f5ac <tcc_init+0x108>
   1f5aa:	e179      	b.n	1f8a0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f5ac:	212c      	movs	r1, #44	; 0x2c
   1f5ae:	5c69      	ldrb	r1, [r5, r1]
   1f5b0:	290f      	cmp	r1, #15
   1f5b2:	d900      	bls.n	1f5b6 <tcc_init+0x112>
   1f5b4:	e174      	b.n	1f8a0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f5b6:	7b28      	ldrb	r0, [r5, #12]
   1f5b8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f5ba:	7ae8      	ldrb	r0, [r5, #11]
   1f5bc:	900b      	str	r0, [sp, #44]	; 0x2c
   1f5be:	202d      	movs	r0, #45	; 0x2d
   1f5c0:	4682      	mov	sl, r0
   1f5c2:	44aa      	add	sl, r5
   1f5c4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f5c6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   1f5c8:	ae0e      	add	r6, sp, #56	; 0x38
   1f5ca:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f5cc:	26c0      	movs	r6, #192	; 0xc0
   1f5ce:	0136      	lsls	r6, r6, #4
   1f5d0:	46b1      	mov	r9, r6
   1f5d2:	4684      	mov	ip, r0
   1f5d4:	46a0      	mov	r8, r4
   1f5d6:	0028      	movs	r0, r5
   1f5d8:	4655      	mov	r5, sl
   1f5da:	9309      	str	r3, [sp, #36]	; 0x24
   1f5dc:	4682      	mov	sl, r0
   1f5de:	e035      	b.n	1f64c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1f5e0:	9906      	ldr	r1, [sp, #24]
   1f5e2:	4311      	orrs	r1, r2
   1f5e4:	9106      	str	r1, [sp, #24]
   1f5e6:	e7d8      	b.n	1f59a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f5e8:	0292      	lsls	r2, r2, #10
   1f5ea:	464f      	mov	r7, r9
   1f5ec:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5ee:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1f5f0:	7919      	ldrb	r1, [r3, #4]
   1f5f2:	468b      	mov	fp, r1
   1f5f4:	2103      	movs	r1, #3
   1f5f6:	465f      	mov	r7, fp
   1f5f8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5fa:	430a      	orrs	r2, r1
   1f5fc:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1f5fe:	795a      	ldrb	r2, [r3, #5]
   1f600:	0152      	lsls	r2, r2, #5
   1f602:	2160      	movs	r1, #96	; 0x60
   1f604:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f606:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1f608:	7999      	ldrb	r1, [r3, #6]
   1f60a:	0209      	lsls	r1, r1, #8
   1f60c:	26c0      	movs	r6, #192	; 0xc0
   1f60e:	00b6      	lsls	r6, r6, #2
   1f610:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f612:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1f614:	79da      	ldrb	r2, [r3, #7]
   1f616:	0312      	lsls	r2, r2, #12
   1f618:	21e0      	movs	r1, #224	; 0xe0
   1f61a:	01c9      	lsls	r1, r1, #7
   1f61c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f61e:	4316      	orrs	r6, r2
   1f620:	4334      	orrs	r4, r6
   1f622:	9a03      	ldr	r2, [sp, #12]
   1f624:	4314      	orrs	r4, r2
   1f626:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   1f628:	4662      	mov	r2, ip
   1f62a:	9907      	ldr	r1, [sp, #28]
   1f62c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1f62e:	2a04      	cmp	r2, #4
   1f630:	d02a      	beq.n	1f688 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1f632:	7c9a      	ldrb	r2, [r3, #18]
   1f634:	9905      	ldr	r1, [sp, #20]
   1f636:	4291      	cmp	r1, r2
   1f638:	d800      	bhi.n	1f63c <tcc_init+0x198>
   1f63a:	e131      	b.n	1f8a0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f63c:	7a59      	ldrb	r1, [r3, #9]
   1f63e:	350a      	adds	r5, #10
   1f640:	2304      	movs	r3, #4
   1f642:	469b      	mov	fp, r3
   1f644:	44dc      	add	ip, fp
   1f646:	290f      	cmp	r1, #15
   1f648:	d900      	bls.n	1f64c <tcc_init+0x1a8>
   1f64a:	e129      	b.n	1f8a0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f64c:	0609      	lsls	r1, r1, #24
   1f64e:	23f0      	movs	r3, #240	; 0xf0
   1f650:	051b      	lsls	r3, r3, #20
   1f652:	4019      	ands	r1, r3
   1f654:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   1f656:	782e      	ldrb	r6, [r5, #0]
   1f658:	0436      	lsls	r6, r6, #16
   1f65a:	20ff      	movs	r0, #255	; 0xff
   1f65c:	0400      	lsls	r0, r0, #16
   1f65e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f660:	7868      	ldrb	r0, [r5, #1]
   1f662:	2480      	movs	r4, #128	; 0x80
   1f664:	2800      	cmp	r0, #0
   1f666:	d100      	bne.n	1f66a <tcc_init+0x1c6>
   1f668:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   1f66a:	7898      	ldrb	r0, [r3, #2]
   1f66c:	2708      	movs	r7, #8
   1f66e:	9703      	str	r7, [sp, #12]
   1f670:	2800      	cmp	r0, #0
   1f672:	d101      	bne.n	1f678 <tcc_init+0x1d4>
   1f674:	9804      	ldr	r0, [sp, #16]
   1f676:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   1f678:	78d8      	ldrb	r0, [r3, #3]
   1f67a:	4683      	mov	fp, r0
   1f67c:	2010      	movs	r0, #16
   1f67e:	465f      	mov	r7, fp
   1f680:	2f00      	cmp	r7, #0
   1f682:	d1b1      	bne.n	1f5e8 <tcc_init+0x144>
   1f684:	9804      	ldr	r0, [sp, #16]
   1f686:	e7af      	b.n	1f5e8 <tcc_init+0x144>
   1f688:	4644      	mov	r4, r8
   1f68a:	4655      	mov	r5, sl
   1f68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1f68e:	4a52      	ldr	r2, [pc, #328]	; (1f7d8 <tcc_init+0x334>)
   1f690:	5cd2      	ldrb	r2, [r2, r3]
   1f692:	4691      	mov	r9, r2
   1f694:	4651      	mov	r1, sl
   1f696:	3150      	adds	r1, #80	; 0x50
   1f698:	4650      	mov	r0, sl
   1f69a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   1f69c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f69e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f6a0:	2601      	movs	r6, #1
   1f6a2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f6a4:	2602      	movs	r6, #2
   1f6a6:	36ff      	adds	r6, #255	; 0xff
   1f6a8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f6aa:	2680      	movs	r6, #128	; 0x80
   1f6ac:	0276      	lsls	r6, r6, #9
   1f6ae:	46b0      	mov	r8, r6
   1f6b0:	46a4      	mov	ip, r4
   1f6b2:	001c      	movs	r4, r3
   1f6b4:	464b      	mov	r3, r9
   1f6b6:	e00f      	b.n	1f6d8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f6b8:	7806      	ldrb	r6, [r0, #0]
   1f6ba:	2e00      	cmp	r6, #0
   1f6bc:	d007      	beq.n	1f6ce <tcc_init+0x22a>
			if (i >= ow_num) {
   1f6be:	4293      	cmp	r3, r2
   1f6c0:	d800      	bhi.n	1f6c4 <tcc_init+0x220>
   1f6c2:	e0e7      	b.n	1f894 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   1f6c4:	2e02      	cmp	r6, #2
   1f6c6:	d014      	beq.n	1f6f2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f6c8:	4656      	mov	r6, sl
   1f6ca:	4096      	lsls	r6, r2
   1f6cc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f6ce:	3201      	adds	r2, #1
   1f6d0:	3101      	adds	r1, #1
   1f6d2:	3002      	adds	r0, #2
   1f6d4:	2a08      	cmp	r2, #8
   1f6d6:	d010      	beq.n	1f6fa <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   1f6d8:	780e      	ldrb	r6, [r1, #0]
   1f6da:	2e00      	cmp	r6, #0
   1f6dc:	d0ec      	beq.n	1f6b8 <tcc_init+0x214>
			if (i >= ow_num) {
   1f6de:	4293      	cmp	r3, r2
   1f6e0:	d800      	bhi.n	1f6e4 <tcc_init+0x240>
   1f6e2:	e0d5      	b.n	1f890 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f6e4:	4646      	mov	r6, r8
   1f6e6:	4096      	lsls	r6, r2
   1f6e8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f6ea:	7806      	ldrb	r6, [r0, #0]
   1f6ec:	2e00      	cmp	r6, #0
   1f6ee:	d1e9      	bne.n	1f6c4 <tcc_init+0x220>
   1f6f0:	e7ed      	b.n	1f6ce <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f6f2:	465e      	mov	r6, fp
   1f6f4:	4096      	lsls	r6, r2
   1f6f6:	4337      	orrs	r7, r6
   1f6f8:	e7e9      	b.n	1f6ce <tcc_init+0x22a>
   1f6fa:	4699      	mov	r9, r3
   1f6fc:	0023      	movs	r3, r4
   1f6fe:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f700:	7e6a      	ldrb	r2, [r5, #25]
   1f702:	0112      	lsls	r2, r2, #4
   1f704:	2130      	movs	r1, #48	; 0x30
   1f706:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   1f708:	7e28      	ldrb	r0, [r5, #24]
   1f70a:	2207      	movs	r2, #7
   1f70c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f70e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f710:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1f712:	2080      	movs	r0, #128	; 0x80
   1f714:	0240      	lsls	r0, r0, #9
   1f716:	000e      	movs	r6, r1
   1f718:	e002      	b.n	1f720 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f71a:	3201      	adds	r2, #1
   1f71c:	2a04      	cmp	r2, #4
   1f71e:	d00b      	beq.n	1f738 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   1f720:	18a9      	adds	r1, r5, r2
   1f722:	7d09      	ldrb	r1, [r1, #20]
   1f724:	2900      	cmp	r1, #0
   1f726:	d0f8      	beq.n	1f71a <tcc_init+0x276>
			if (n >= cc_num) {
   1f728:	9905      	ldr	r1, [sp, #20]
   1f72a:	4291      	cmp	r1, r2
   1f72c:	dc00      	bgt.n	1f730 <tcc_init+0x28c>
   1f72e:	e0b3      	b.n	1f898 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   1f730:	0001      	movs	r1, r0
   1f732:	4091      	lsls	r1, r2
   1f734:	430e      	orrs	r6, r1
   1f736:	e7f0      	b.n	1f71a <tcc_init+0x276>
   1f738:	46b2      	mov	sl, r6
   1f73a:	9801      	ldr	r0, [sp, #4]
   1f73c:	0002      	movs	r2, r0
   1f73e:	3204      	adds	r2, #4
   1f740:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   1f742:	2100      	movs	r1, #0
   1f744:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f746:	4282      	cmp	r2, r0
   1f748:	d1fc      	bne.n	1f744 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   1f74a:	2200      	movs	r2, #0
   1f74c:	9801      	ldr	r0, [sp, #4]
   1f74e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1f750:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1f752:	0099      	lsls	r1, r3, #2
   1f754:	4a22      	ldr	r2, [pc, #136]	; (1f7e0 <tcc_init+0x33c>)
   1f756:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   1f758:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1f75a:	22a0      	movs	r2, #160	; 0xa0
   1f75c:	5ca9      	ldrb	r1, [r5, r2]
   1f75e:	3a64      	subs	r2, #100	; 0x64
   1f760:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   1f762:	a90d      	add	r1, sp, #52	; 0x34
   1f764:	7aaa      	ldrb	r2, [r5, #10]
   1f766:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1f768:	4a1e      	ldr	r2, [pc, #120]	; (1f7e4 <tcc_init+0x340>)
   1f76a:	5cd6      	ldrb	r6, [r2, r3]
   1f76c:	0030      	movs	r0, r6
   1f76e:	4b1e      	ldr	r3, [pc, #120]	; (1f7e8 <tcc_init+0x344>)
   1f770:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   1f772:	0030      	movs	r0, r6
   1f774:	4b1d      	ldr	r3, [pc, #116]	; (1f7ec <tcc_init+0x348>)
   1f776:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f778:	464b      	mov	r3, r9
   1f77a:	2b00      	cmp	r3, #0
   1f77c:	dd3c      	ble.n	1f7f8 <tcc_init+0x354>
   1f77e:	002e      	movs	r6, r5
   1f780:	3658      	adds	r6, #88	; 0x58
   1f782:	3398      	adds	r3, #152	; 0x98
   1f784:	4698      	mov	r8, r3
   1f786:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1f788:	2301      	movs	r3, #1
   1f78a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   1f78c:	46ab      	mov	fp, r5
   1f78e:	4645      	mov	r5, r8
   1f790:	46a0      	mov	r8, r4
   1f792:	9c08      	ldr	r4, [sp, #32]
   1f794:	e003      	b.n	1f79e <tcc_init+0x2fa>
   1f796:	3401      	adds	r4, #1
   1f798:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f79a:	42ac      	cmp	r4, r5
   1f79c:	d02a      	beq.n	1f7f4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f79e:	7823      	ldrb	r3, [r4, #0]
   1f7a0:	2b00      	cmp	r3, #0
   1f7a2:	d0f8      	beq.n	1f796 <tcc_init+0x2f2>
   1f7a4:	ab0c      	add	r3, sp, #48	; 0x30
   1f7a6:	464a      	mov	r2, r9
   1f7a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1f7aa:	2300      	movs	r3, #0
   1f7ac:	aa0c      	add	r2, sp, #48	; 0x30
   1f7ae:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1f7b0:	0013      	movs	r3, r2
   1f7b2:	2220      	movs	r2, #32
   1f7b4:	18b2      	adds	r2, r6, r2
   1f7b6:	7812      	ldrb	r2, [r2, #0]
   1f7b8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1f7ba:	464a      	mov	r2, r9
   1f7bc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   1f7be:	7830      	ldrb	r0, [r6, #0]
   1f7c0:	0019      	movs	r1, r3
   1f7c2:	4b0b      	ldr	r3, [pc, #44]	; (1f7f0 <tcc_init+0x34c>)
   1f7c4:	4798      	blx	r3
   1f7c6:	e7e6      	b.n	1f796 <tcc_init+0x2f2>
   1f7c8:	0001f325 	.word	0x0001f325
   1f7cc:	40000400 	.word	0x40000400
   1f7d0:	0002a4ac 	.word	0x0002a4ac
   1f7d4:	0002a4c0 	.word	0x0002a4c0
   1f7d8:	0002a4cc 	.word	0x0002a4cc
   1f7dc:	0002a4b8 	.word	0x0002a4b8
   1f7e0:	20005580 	.word	0x20005580
   1f7e4:	0002a4bc 	.word	0x0002a4bc
   1f7e8:	0001f19d 	.word	0x0001f19d
   1f7ec:	0001f111 	.word	0x0001f111
   1f7f0:	0001f2c5 	.word	0x0001f2c5
   1f7f4:	4644      	mov	r4, r8
   1f7f6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f7fa:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f7fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f7fe:	0212      	lsls	r2, r2, #8
   1f800:	4313      	orrs	r3, r2
   1f802:	9a02      	ldr	r2, [sp, #8]
   1f804:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   1f806:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f808:	2204      	movs	r2, #4
   1f80a:	68a3      	ldr	r3, [r4, #8]
   1f80c:	421a      	tst	r2, r3
   1f80e:	d1fc      	bne.n	1f80a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   1f810:	23ff      	movs	r3, #255	; 0xff
   1f812:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f814:	2204      	movs	r2, #4
   1f816:	68a3      	ldr	r3, [r4, #8]
   1f818:	421a      	tst	r2, r3
   1f81a:	d1fc      	bne.n	1f816 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   1f81c:	466b      	mov	r3, sp
   1f81e:	7e1b      	ldrb	r3, [r3, #24]
   1f820:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   1f822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f824:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   1f826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f828:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   1f82a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   1f82c:	4a1d      	ldr	r2, [pc, #116]	; (1f8a4 <tcc_init+0x400>)
   1f82e:	68a3      	ldr	r3, [r4, #8]
   1f830:	4213      	tst	r3, r2
   1f832:	d1fc      	bne.n	1f82e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   1f834:	4653      	mov	r3, sl
   1f836:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   1f838:	2210      	movs	r2, #16
   1f83a:	68a3      	ldr	r3, [r4, #8]
   1f83c:	421a      	tst	r2, r3
   1f83e:	d1fc      	bne.n	1f83a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   1f840:	682b      	ldr	r3, [r5, #0]
   1f842:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   1f844:	4a18      	ldr	r2, [pc, #96]	; (1f8a8 <tcc_init+0x404>)
   1f846:	68a3      	ldr	r3, [r4, #8]
   1f848:	4213      	tst	r3, r2
   1f84a:	d1fc      	bne.n	1f846 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   1f84c:	686b      	ldr	r3, [r5, #4]
   1f84e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f850:	9805      	ldr	r0, [sp, #20]
   1f852:	2800      	cmp	r0, #0
   1f854:	dd22      	ble.n	1f89c <tcc_init+0x3f8>
   1f856:	351c      	adds	r5, #28
   1f858:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   1f85a:	4e14      	ldr	r6, [pc, #80]	; (1f8ac <tcc_init+0x408>)
   1f85c:	0032      	movs	r2, r6
   1f85e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   1f860:	68a3      	ldr	r3, [r4, #8]
   1f862:	421a      	tst	r2, r3
   1f864:	d1fc      	bne.n	1f860 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   1f866:	cd04      	ldmia	r5!, {r2}
   1f868:	000b      	movs	r3, r1
   1f86a:	3310      	adds	r3, #16
   1f86c:	009b      	lsls	r3, r3, #2
   1f86e:	18e3      	adds	r3, r4, r3
   1f870:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f872:	3101      	adds	r1, #1
   1f874:	4288      	cmp	r0, r1
   1f876:	dcf1      	bgt.n	1f85c <tcc_init+0x3b8>
	return STATUS_OK;
   1f878:	2000      	movs	r0, #0
   1f87a:	e62d      	b.n	1f4d8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   1f87c:	2017      	movs	r0, #23
   1f87e:	e62b      	b.n	1f4d8 <tcc_init+0x34>
   1f880:	2017      	movs	r0, #23
   1f882:	e629      	b.n	1f4d8 <tcc_init+0x34>
   1f884:	2017      	movs	r0, #23
   1f886:	e627      	b.n	1f4d8 <tcc_init+0x34>
   1f888:	2017      	movs	r0, #23
   1f88a:	e625      	b.n	1f4d8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f88c:	2017      	movs	r0, #23
   1f88e:	e623      	b.n	1f4d8 <tcc_init+0x34>
			if (i >= ow_num) {
   1f890:	2017      	movs	r0, #23
   1f892:	e621      	b.n	1f4d8 <tcc_init+0x34>
			if (i >= ow_num) {
   1f894:	2017      	movs	r0, #23
   1f896:	e61f      	b.n	1f4d8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f898:	2017      	movs	r0, #23
   1f89a:	e61d      	b.n	1f4d8 <tcc_init+0x34>
	return STATUS_OK;
   1f89c:	2000      	movs	r0, #0
   1f89e:	e61b      	b.n	1f4d8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f8a0:	2017      	movs	r0, #23
   1f8a2:	e619      	b.n	1f4d8 <tcc_init+0x34>
   1f8a4:	00020040 	.word	0x00020040
   1f8a8:	00040080 	.word	0x00040080
   1f8ac:	00080100 	.word	0x00080100

0001f8b0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1f8b0:	0092      	lsls	r2, r2, #2
   1f8b2:	1883      	adds	r3, r0, r2
   1f8b4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1f8b6:	4b03      	ldr	r3, [pc, #12]	; (1f8c4 <tcc_register_callback+0x14>)
   1f8b8:	58d3      	ldr	r3, [r2, r3]
   1f8ba:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1f8bc:	4313      	orrs	r3, r2
   1f8be:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   1f8c0:	2000      	movs	r0, #0
   1f8c2:	4770      	bx	lr
   1f8c4:	0002a4d0 	.word	0x0002a4d0

0001f8c8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1f8c8:	b570      	push	{r4, r5, r6, lr}
   1f8ca:	0004      	movs	r4, r0
   1f8cc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1f8ce:	6800      	ldr	r0, [r0, #0]
   1f8d0:	4b09      	ldr	r3, [pc, #36]	; (1f8f8 <tcc_enable_callback+0x30>)
   1f8d2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   1f8d4:	4b09      	ldr	r3, [pc, #36]	; (1f8fc <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f8d6:	5c1b      	ldrb	r3, [r3, r0]
   1f8d8:	221f      	movs	r2, #31
   1f8da:	401a      	ands	r2, r3
   1f8dc:	2301      	movs	r3, #1
   1f8de:	4093      	lsls	r3, r2
   1f8e0:	4a07      	ldr	r2, [pc, #28]	; (1f900 <tcc_enable_callback+0x38>)
   1f8e2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   1f8e4:	00ad      	lsls	r5, r5, #2
   1f8e6:	4b07      	ldr	r3, [pc, #28]	; (1f904 <tcc_enable_callback+0x3c>)
   1f8e8:	58ea      	ldr	r2, [r5, r3]
   1f8ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f8ec:	4313      	orrs	r3, r2
   1f8ee:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1f8f0:	6823      	ldr	r3, [r4, #0]
   1f8f2:	629a      	str	r2, [r3, #40]	; 0x28
}
   1f8f4:	bd70      	pop	{r4, r5, r6, pc}
   1f8f6:	46c0      	nop			; (mov r8, r8)
   1f8f8:	0001f325 	.word	0x0001f325
   1f8fc:	0002a500 	.word	0x0002a500
   1f900:	e000e100 	.word	0xe000e100
   1f904:	0002a4d0 	.word	0x0002a4d0

0001f908 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1f908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f90a:	46c6      	mov	lr, r8
   1f90c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   1f90e:	0080      	lsls	r0, r0, #2
   1f910:	4b0e      	ldr	r3, [pc, #56]	; (1f94c <_tcc_interrupt_handler+0x44>)
   1f912:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f914:	683b      	ldr	r3, [r7, #0]
   1f916:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f91a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f91c:	4013      	ands	r3, r2
   1f91e:	401e      	ands	r6, r3
   1f920:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f922:	4b0b      	ldr	r3, [pc, #44]	; (1f950 <_tcc_interrupt_handler+0x48>)
   1f924:	4698      	mov	r8, r3
   1f926:	e002      	b.n	1f92e <_tcc_interrupt_handler+0x26>
   1f928:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f92a:	2c30      	cmp	r4, #48	; 0x30
   1f92c:	d00a      	beq.n	1f944 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f92e:	4643      	mov	r3, r8
   1f930:	58e5      	ldr	r5, [r4, r3]
   1f932:	4235      	tst	r5, r6
   1f934:	d0f8      	beq.n	1f928 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1f936:	193b      	adds	r3, r7, r4
   1f938:	685b      	ldr	r3, [r3, #4]
   1f93a:	0038      	movs	r0, r7
   1f93c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1f93e:	683b      	ldr	r3, [r7, #0]
   1f940:	62dd      	str	r5, [r3, #44]	; 0x2c
   1f942:	e7f1      	b.n	1f928 <_tcc_interrupt_handler+0x20>
		}
	}
}
   1f944:	bc04      	pop	{r2}
   1f946:	4690      	mov	r8, r2
   1f948:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f94a:	46c0      	nop			; (mov r8, r8)
   1f94c:	20005580 	.word	0x20005580
   1f950:	0002a4d0 	.word	0x0002a4d0

0001f954 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1f954:	b510      	push	{r4, lr}
   1f956:	2000      	movs	r0, #0
   1f958:	4b01      	ldr	r3, [pc, #4]	; (1f960 <TCC0_Handler+0xc>)
   1f95a:	4798      	blx	r3
   1f95c:	bd10      	pop	{r4, pc}
   1f95e:	46c0      	nop			; (mov r8, r8)
   1f960:	0001f909 	.word	0x0001f909

0001f964 <TCC1_Handler>:
   1f964:	b510      	push	{r4, lr}
   1f966:	2001      	movs	r0, #1
   1f968:	4b01      	ldr	r3, [pc, #4]	; (1f970 <TCC1_Handler+0xc>)
   1f96a:	4798      	blx	r3
   1f96c:	bd10      	pop	{r4, pc}
   1f96e:	46c0      	nop			; (mov r8, r8)
   1f970:	0001f909 	.word	0x0001f909

0001f974 <TCC2_Handler>:
   1f974:	b510      	push	{r4, lr}
   1f976:	2002      	movs	r0, #2
   1f978:	4b01      	ldr	r3, [pc, #4]	; (1f980 <TCC2_Handler+0xc>)
   1f97a:	4798      	blx	r3
   1f97c:	bd10      	pop	{r4, pc}
   1f97e:	46c0      	nop			; (mov r8, r8)
   1f980:	0001f909 	.word	0x0001f909

0001f984 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
   1f984:	2004      	movs	r0, #4
   1f986:	4671      	mov	r1, lr
   1f988:	4208      	tst	r0, r1
   1f98a:	d002      	beq.n	1f992 <_MSP>
   1f98c:	f3ef 8009 	mrs	r0, PSP
   1f990:	e001      	b.n	1f996 <_HALT>

0001f992 <_MSP>:
   1f992:	f3ef 8008 	mrs	r0, MSP

0001f996 <_HALT>:
   1f996:	6941      	ldr	r1, [r0, #20]
   1f998:	e074      	b.n	1fa84 <HardFault_HandlerC>
   1f99a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1f99c:	4770      	bx	lr
	...

0001f9a0 <Reset_Handler>:
{
   1f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   1f9a2:	4a2a      	ldr	r2, [pc, #168]	; (1fa4c <Reset_Handler+0xac>)
   1f9a4:	4b2a      	ldr	r3, [pc, #168]	; (1fa50 <Reset_Handler+0xb0>)
   1f9a6:	429a      	cmp	r2, r3
   1f9a8:	d011      	beq.n	1f9ce <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1f9aa:	001a      	movs	r2, r3
   1f9ac:	4b29      	ldr	r3, [pc, #164]	; (1fa54 <Reset_Handler+0xb4>)
   1f9ae:	429a      	cmp	r2, r3
   1f9b0:	d20d      	bcs.n	1f9ce <Reset_Handler+0x2e>
   1f9b2:	4a29      	ldr	r2, [pc, #164]	; (1fa58 <Reset_Handler+0xb8>)
   1f9b4:	3303      	adds	r3, #3
   1f9b6:	1a9b      	subs	r3, r3, r2
   1f9b8:	089b      	lsrs	r3, r3, #2
   1f9ba:	3301      	adds	r3, #1
   1f9bc:	009b      	lsls	r3, r3, #2
   1f9be:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   1f9c0:	4823      	ldr	r0, [pc, #140]	; (1fa50 <Reset_Handler+0xb0>)
   1f9c2:	4922      	ldr	r1, [pc, #136]	; (1fa4c <Reset_Handler+0xac>)
   1f9c4:	588c      	ldr	r4, [r1, r2]
   1f9c6:	5084      	str	r4, [r0, r2]
   1f9c8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1f9ca:	429a      	cmp	r2, r3
   1f9cc:	d1fa      	bne.n	1f9c4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   1f9ce:	4a23      	ldr	r2, [pc, #140]	; (1fa5c <Reset_Handler+0xbc>)
   1f9d0:	4b23      	ldr	r3, [pc, #140]	; (1fa60 <Reset_Handler+0xc0>)
   1f9d2:	429a      	cmp	r2, r3
   1f9d4:	d20a      	bcs.n	1f9ec <Reset_Handler+0x4c>
   1f9d6:	43d3      	mvns	r3, r2
   1f9d8:	4921      	ldr	r1, [pc, #132]	; (1fa60 <Reset_Handler+0xc0>)
   1f9da:	185b      	adds	r3, r3, r1
   1f9dc:	2103      	movs	r1, #3
   1f9de:	438b      	bics	r3, r1
   1f9e0:	3304      	adds	r3, #4
   1f9e2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   1f9e4:	2100      	movs	r1, #0
   1f9e6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1f9e8:	4293      	cmp	r3, r2
   1f9ea:	d1fc      	bne.n	1f9e6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1f9ec:	4a1d      	ldr	r2, [pc, #116]	; (1fa64 <Reset_Handler+0xc4>)
   1f9ee:	21ff      	movs	r1, #255	; 0xff
   1f9f0:	4b1d      	ldr	r3, [pc, #116]	; (1fa68 <Reset_Handler+0xc8>)
   1f9f2:	438b      	bics	r3, r1
   1f9f4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1f9f6:	39fd      	subs	r1, #253	; 0xfd
   1f9f8:	2390      	movs	r3, #144	; 0x90
   1f9fa:	005b      	lsls	r3, r3, #1
   1f9fc:	4a1b      	ldr	r2, [pc, #108]	; (1fa6c <Reset_Handler+0xcc>)
   1f9fe:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1fa00:	4a1b      	ldr	r2, [pc, #108]	; (1fa70 <Reset_Handler+0xd0>)
   1fa02:	78d3      	ldrb	r3, [r2, #3]
   1fa04:	2503      	movs	r5, #3
   1fa06:	43ab      	bics	r3, r5
   1fa08:	2402      	movs	r4, #2
   1fa0a:	4323      	orrs	r3, r4
   1fa0c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1fa0e:	78d3      	ldrb	r3, [r2, #3]
   1fa10:	270c      	movs	r7, #12
   1fa12:	43bb      	bics	r3, r7
   1fa14:	2608      	movs	r6, #8
   1fa16:	4333      	orrs	r3, r6
   1fa18:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1fa1a:	4b16      	ldr	r3, [pc, #88]	; (1fa74 <Reset_Handler+0xd4>)
   1fa1c:	7b98      	ldrb	r0, [r3, #14]
   1fa1e:	2230      	movs	r2, #48	; 0x30
   1fa20:	4390      	bics	r0, r2
   1fa22:	2220      	movs	r2, #32
   1fa24:	4310      	orrs	r0, r2
   1fa26:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1fa28:	7b99      	ldrb	r1, [r3, #14]
   1fa2a:	43b9      	bics	r1, r7
   1fa2c:	4331      	orrs	r1, r6
   1fa2e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1fa30:	7b9a      	ldrb	r2, [r3, #14]
   1fa32:	43aa      	bics	r2, r5
   1fa34:	4322      	orrs	r2, r4
   1fa36:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1fa38:	4a0f      	ldr	r2, [pc, #60]	; (1fa78 <Reset_Handler+0xd8>)
   1fa3a:	6853      	ldr	r3, [r2, #4]
   1fa3c:	2180      	movs	r1, #128	; 0x80
   1fa3e:	430b      	orrs	r3, r1
   1fa40:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   1fa42:	4b0e      	ldr	r3, [pc, #56]	; (1fa7c <Reset_Handler+0xdc>)
   1fa44:	4798      	blx	r3
        main();
   1fa46:	4b0e      	ldr	r3, [pc, #56]	; (1fa80 <Reset_Handler+0xe0>)
   1fa48:	4798      	blx	r3
   1fa4a:	e7fe      	b.n	1fa4a <Reset_Handler+0xaa>
   1fa4c:	0002b264 	.word	0x0002b264
   1fa50:	20000000 	.word	0x20000000
   1fa54:	200002ac 	.word	0x200002ac
   1fa58:	20000004 	.word	0x20000004
   1fa5c:	200002b0 	.word	0x200002b0
   1fa60:	200055f0 	.word	0x200055f0
   1fa64:	e000ed00 	.word	0xe000ed00
   1fa68:	00012000 	.word	0x00012000
   1fa6c:	41007000 	.word	0x41007000
   1fa70:	41005000 	.word	0x41005000
   1fa74:	41004800 	.word	0x41004800
   1fa78:	41004000 	.word	0x41004000
   1fa7c:	000261fd 	.word	0x000261fd
   1fa80:	00023e61 	.word	0x00023e61

0001fa84 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1fa84:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1fa86:	6803      	ldr	r3, [r0, #0]
   1fa88:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1fa8a:	6843      	ldr	r3, [r0, #4]
   1fa8c:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1fa8e:	6883      	ldr	r3, [r0, #8]
   1fa90:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1fa92:	68c3      	ldr	r3, [r0, #12]
   1fa94:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1fa96:	6903      	ldr	r3, [r0, #16]
   1fa98:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1fa9a:	6943      	ldr	r3, [r0, #20]
   1fa9c:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1fa9e:	6983      	ldr	r3, [r0, #24]
   1faa0:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1faa2:	69c3      	ldr	r3, [r0, #28]
   1faa4:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1faa6:	4b0a      	ldr	r3, [pc, #40]	; (1fad0 <HardFault_HandlerC+0x4c>)
   1faa8:	681b      	ldr	r3, [r3, #0]
   1faaa:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1faac:	4b09      	ldr	r3, [pc, #36]	; (1fad4 <HardFault_HandlerC+0x50>)
   1faae:	681b      	ldr	r3, [r3, #0]
   1fab0:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1fab2:	4b09      	ldr	r3, [pc, #36]	; (1fad8 <HardFault_HandlerC+0x54>)
   1fab4:	681b      	ldr	r3, [r3, #0]
   1fab6:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1fab8:	4b08      	ldr	r3, [pc, #32]	; (1fadc <HardFault_HandlerC+0x58>)
   1faba:	681b      	ldr	r3, [r3, #0]
   1fabc:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1fabe:	4b08      	ldr	r3, [pc, #32]	; (1fae0 <HardFault_HandlerC+0x5c>)
   1fac0:	681b      	ldr	r3, [r3, #0]
   1fac2:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1fac4:	4b07      	ldr	r3, [pc, #28]	; (1fae4 <HardFault_HandlerC+0x60>)
   1fac6:	681b      	ldr	r3, [r3, #0]
   1fac8:	9301      	str	r3, [sp, #4]
	

	__asm("BKPT #0\n") ; // Break into the debugger
   1faca:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1facc:	b00e      	add	sp, #56	; 0x38
   1face:	4770      	bx	lr
   1fad0:	e000ed28 	.word	0xe000ed28
   1fad4:	e000ed2c 	.word	0xe000ed2c
   1fad8:	e000ed30 	.word	0xe000ed30
   1fadc:	e000ed3c 	.word	0xe000ed3c
   1fae0:	e000ed34 	.word	0xe000ed34
   1fae4:	e000ed38 	.word	0xe000ed38

0001fae8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1fae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1faea:	46c6      	mov	lr, r8
   1faec:	b500      	push	{lr}
   1faee:	000c      	movs	r4, r1
   1faf0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   1faf2:	2800      	cmp	r0, #0
   1faf4:	d10f      	bne.n	1fb16 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   1faf6:	2a00      	cmp	r2, #0
   1faf8:	dd11      	ble.n	1fb1e <_read+0x36>
   1fafa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1fafc:	4e09      	ldr	r6, [pc, #36]	; (1fb24 <_read+0x3c>)
   1fafe:	4d0a      	ldr	r5, [pc, #40]	; (1fb28 <_read+0x40>)
   1fb00:	6830      	ldr	r0, [r6, #0]
   1fb02:	0021      	movs	r1, r4
   1fb04:	682b      	ldr	r3, [r5, #0]
   1fb06:	4798      	blx	r3
		ptr++;
   1fb08:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1fb0a:	42bc      	cmp	r4, r7
   1fb0c:	d1f8      	bne.n	1fb00 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1fb0e:	4640      	mov	r0, r8
   1fb10:	bc04      	pop	{r2}
   1fb12:	4690      	mov	r8, r2
   1fb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fb16:	2301      	movs	r3, #1
   1fb18:	425b      	negs	r3, r3
   1fb1a:	4698      	mov	r8, r3
   1fb1c:	e7f7      	b.n	1fb0e <_read+0x26>
	for (; len > 0; --len) {
   1fb1e:	4680      	mov	r8, r0
   1fb20:	e7f5      	b.n	1fb0e <_read+0x26>
   1fb22:	46c0      	nop			; (mov r8, r8)
   1fb24:	20005594 	.word	0x20005594
   1fb28:	2000558c 	.word	0x2000558c

0001fb2c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1fb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb2e:	46c6      	mov	lr, r8
   1fb30:	b500      	push	{lr}
   1fb32:	000e      	movs	r6, r1
   1fb34:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1fb36:	3801      	subs	r0, #1
   1fb38:	2802      	cmp	r0, #2
   1fb3a:	d810      	bhi.n	1fb5e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1fb3c:	2a00      	cmp	r2, #0
   1fb3e:	d011      	beq.n	1fb64 <_write+0x38>
   1fb40:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1fb42:	4b0c      	ldr	r3, [pc, #48]	; (1fb74 <_write+0x48>)
   1fb44:	4698      	mov	r8, r3
   1fb46:	4f0c      	ldr	r7, [pc, #48]	; (1fb78 <_write+0x4c>)
   1fb48:	4643      	mov	r3, r8
   1fb4a:	6818      	ldr	r0, [r3, #0]
   1fb4c:	5d31      	ldrb	r1, [r6, r4]
   1fb4e:	683b      	ldr	r3, [r7, #0]
   1fb50:	4798      	blx	r3
   1fb52:	2800      	cmp	r0, #0
   1fb54:	db08      	blt.n	1fb68 <_write+0x3c>
			return -1;
		}
		++nChars;
   1fb56:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   1fb58:	42a5      	cmp	r5, r4
   1fb5a:	d1f5      	bne.n	1fb48 <_write+0x1c>
   1fb5c:	e006      	b.n	1fb6c <_write+0x40>
		return -1;
   1fb5e:	2401      	movs	r4, #1
   1fb60:	4264      	negs	r4, r4
   1fb62:	e003      	b.n	1fb6c <_write+0x40>
	for (; len != 0; --len) {
   1fb64:	0014      	movs	r4, r2
   1fb66:	e001      	b.n	1fb6c <_write+0x40>
			return -1;
   1fb68:	2401      	movs	r4, #1
   1fb6a:	4264      	negs	r4, r4
	}
	return nChars;
}
   1fb6c:	0020      	movs	r0, r4
   1fb6e:	bc04      	pop	{r2}
   1fb70:	4690      	mov	r8, r2
   1fb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb74:	20005594 	.word	0x20005594
   1fb78:	20005590 	.word	0x20005590

0001fb7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1fb7c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1fb7e:	4a06      	ldr	r2, [pc, #24]	; (1fb98 <_sbrk+0x1c>)
   1fb80:	6812      	ldr	r2, [r2, #0]
   1fb82:	2a00      	cmp	r2, #0
   1fb84:	d004      	beq.n	1fb90 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   1fb86:	4a04      	ldr	r2, [pc, #16]	; (1fb98 <_sbrk+0x1c>)
   1fb88:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1fb8a:	18c3      	adds	r3, r0, r3
   1fb8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1fb8e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   1fb90:	4902      	ldr	r1, [pc, #8]	; (1fb9c <_sbrk+0x20>)
   1fb92:	4a01      	ldr	r2, [pc, #4]	; (1fb98 <_sbrk+0x1c>)
   1fb94:	6011      	str	r1, [r2, #0]
   1fb96:	e7f6      	b.n	1fb86 <_sbrk+0xa>
   1fb98:	20003d30 	.word	0x20003d30
   1fb9c:	200075f0 	.word	0x200075f0

0001fba0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   1fba0:	2001      	movs	r0, #1
   1fba2:	4240      	negs	r0, r0
   1fba4:	4770      	bx	lr

0001fba6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   1fba6:	2380      	movs	r3, #128	; 0x80
   1fba8:	019b      	lsls	r3, r3, #6
   1fbaa:	604b      	str	r3, [r1, #4]

	return 0;
}
   1fbac:	2000      	movs	r0, #0
   1fbae:	4770      	bx	lr

0001fbb0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   1fbb0:	2001      	movs	r0, #1
   1fbb2:	4770      	bx	lr

0001fbb4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   1fbb4:	2000      	movs	r0, #0
   1fbb6:	4770      	bx	lr

0001fbb8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1fbb8:	b530      	push	{r4, r5, lr}
   1fbba:	b087      	sub	sp, #28
   1fbbc:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1fbbe:	aa01      	add	r2, sp, #4
   1fbc0:	23a0      	movs	r3, #160	; 0xa0
   1fbc2:	011b      	lsls	r3, r3, #4
   1fbc4:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   1fbc6:	2300      	movs	r3, #0
   1fbc8:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1fbca:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   1fbcc:	21fa      	movs	r1, #250	; 0xfa
   1fbce:	00c9      	lsls	r1, r1, #3
   1fbd0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   1fbd2:	2101      	movs	r1, #1
   1fbd4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   1fbd6:	2004      	movs	r0, #4
   1fbd8:	7210      	strb	r0, [r2, #8]
   1fbda:	7253      	strb	r3, [r2, #9]
   1fbdc:	7293      	strb	r3, [r2, #10]
   1fbde:	72d3      	strb	r3, [r2, #11]
   1fbe0:	7311      	strb	r1, [r2, #12]
   1fbe2:	7351      	strb	r1, [r2, #13]
   1fbe4:	4b14      	ldr	r3, [pc, #80]	; (1fc38 <disk_initialize+0x80>)
   1fbe6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1fbe8:	2306      	movs	r3, #6
   1fbea:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1fbec:	4d13      	ldr	r5, [pc, #76]	; (1fc3c <disk_initialize+0x84>)
   1fbee:	4914      	ldr	r1, [pc, #80]	; (1fc40 <disk_initialize+0x88>)
   1fbf0:	0028      	movs	r0, r5
   1fbf2:	4b14      	ldr	r3, [pc, #80]	; (1fc44 <disk_initialize+0x8c>)
   1fbf4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   1fbf6:	0028      	movs	r0, r5
   1fbf8:	4b13      	ldr	r3, [pc, #76]	; (1fc48 <disk_initialize+0x90>)
   1fbfa:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1fbfc:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1fbfe:	2c01      	cmp	r4, #1
   1fc00:	d901      	bls.n	1fc06 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   1fc02:	b007      	add	sp, #28
   1fc04:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   1fc06:	0020      	movs	r0, r4
   1fc08:	4b10      	ldr	r3, [pc, #64]	; (1fc4c <disk_initialize+0x94>)
   1fc0a:	4798      	blx	r3
   1fc0c:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1fc0e:	2803      	cmp	r0, #3
   1fc10:	d106      	bne.n	1fc20 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   1fc12:	0020      	movs	r0, r4
   1fc14:	4b0d      	ldr	r3, [pc, #52]	; (1fc4c <disk_initialize+0x94>)
   1fc16:	4798      	blx	r3
   1fc18:	0003      	movs	r3, r0
		return STA_NOINIT;
   1fc1a:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1fc1c:	2b03      	cmp	r3, #3
   1fc1e:	d0f0      	beq.n	1fc02 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   1fc20:	2b00      	cmp	r3, #0
   1fc22:	d106      	bne.n	1fc32 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   1fc24:	0020      	movs	r0, r4
   1fc26:	4b0a      	ldr	r3, [pc, #40]	; (1fc50 <disk_initialize+0x98>)
   1fc28:	4798      	blx	r3
	return 0;
   1fc2a:	1e43      	subs	r3, r0, #1
   1fc2c:	4198      	sbcs	r0, r3
   1fc2e:	0080      	lsls	r0, r0, #2
   1fc30:	e7e7      	b.n	1fc02 <disk_initialize+0x4a>
		return STA_NOINIT;
   1fc32:	2001      	movs	r0, #1
   1fc34:	e7e5      	b.n	1fc02 <disk_initialize+0x4a>
   1fc36:	46c0      	nop			; (mov r8, r8)
   1fc38:	000007de 	.word	0x000007de
   1fc3c:	20005598 	.word	0x20005598
   1fc40:	40001400 	.word	0x40001400
   1fc44:	0001d9e9 	.word	0x0001d9e9
   1fc48:	0001d885 	.word	0x0001d885
   1fc4c:	0001d555 	.word	0x0001d555
   1fc50:	0001d591 	.word	0x0001d591

0001fc54 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1fc54:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   1fc56:	4b05      	ldr	r3, [pc, #20]	; (1fc6c <disk_status+0x18>)
   1fc58:	4798      	blx	r3
   1fc5a:	1e03      	subs	r3, r0, #0
   1fc5c:	d004      	beq.n	1fc68 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1fc5e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   1fc60:	2b02      	cmp	r3, #2
   1fc62:	d000      	beq.n	1fc66 <disk_status+0x12>
	default:
		return STA_NOINIT;
   1fc64:	3802      	subs	r0, #2
	}
}
   1fc66:	bd10      	pop	{r4, pc}
		return 0;
   1fc68:	2000      	movs	r0, #0
   1fc6a:	e7fc      	b.n	1fc66 <disk_status+0x12>
   1fc6c:	0001d555 	.word	0x0001d555

0001fc70 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1fc70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc72:	46de      	mov	lr, fp
   1fc74:	464f      	mov	r7, r9
   1fc76:	4646      	mov	r6, r8
   1fc78:	b5c0      	push	{r6, r7, lr}
   1fc7a:	b084      	sub	sp, #16
   1fc7c:	9001      	str	r0, [sp, #4]
   1fc7e:	000d      	movs	r5, r1
   1fc80:	0014      	movs	r4, r2
   1fc82:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fc84:	4b18      	ldr	r3, [pc, #96]	; (1fce8 <disk_read+0x78>)
   1fc86:	4798      	blx	r3
   1fc88:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fc8a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fc8c:	2e00      	cmp	r6, #0
   1fc8e:	d105      	bne.n	1fc9c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fc90:	b004      	add	sp, #16
   1fc92:	bc1c      	pop	{r2, r3, r4}
   1fc94:	4690      	mov	r8, r2
   1fc96:	4699      	mov	r9, r3
   1fc98:	46a3      	mov	fp, r4
   1fc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fc9c:	a903      	add	r1, sp, #12
   1fc9e:	9801      	ldr	r0, [sp, #4]
   1fca0:	4b12      	ldr	r3, [pc, #72]	; (1fcec <disk_read+0x7c>)
   1fca2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fca4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fca6:	0032      	movs	r2, r6
   1fca8:	437a      	muls	r2, r7
   1fcaa:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fcac:	9b03      	ldr	r3, [sp, #12]
   1fcae:	3301      	adds	r3, #1
   1fcb0:	4373      	muls	r3, r6
		return RES_PARERR;
   1fcb2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fcb4:	429a      	cmp	r2, r3
   1fcb6:	d8eb      	bhi.n	1fc90 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   1fcb8:	2f00      	cmp	r7, #0
   1fcba:	d011      	beq.n	1fce0 <disk_read+0x70>
   1fcbc:	0273      	lsls	r3, r6, #9
   1fcbe:	4698      	mov	r8, r3
   1fcc0:	1c7b      	adds	r3, r7, #1
   1fcc2:	469b      	mov	fp, r3
   1fcc4:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1fcc6:	4e0a      	ldr	r6, [pc, #40]	; (1fcf0 <disk_read+0x80>)
   1fcc8:	002a      	movs	r2, r5
   1fcca:	0021      	movs	r1, r4
   1fccc:	9801      	ldr	r0, [sp, #4]
   1fcce:	47b0      	blx	r6
   1fcd0:	2800      	cmp	r0, #0
   1fcd2:	d107      	bne.n	1fce4 <disk_read+0x74>
   1fcd4:	3701      	adds	r7, #1
   1fcd6:	444c      	add	r4, r9
   1fcd8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fcda:	455f      	cmp	r7, fp
   1fcdc:	d1f4      	bne.n	1fcc8 <disk_read+0x58>
   1fcde:	e7d7      	b.n	1fc90 <disk_read+0x20>
	return RES_OK;
   1fce0:	2000      	movs	r0, #0
   1fce2:	e7d5      	b.n	1fc90 <disk_read+0x20>
			return RES_ERROR;
   1fce4:	2001      	movs	r0, #1
   1fce6:	e7d3      	b.n	1fc90 <disk_read+0x20>
   1fce8:	0001d589 	.word	0x0001d589
   1fcec:	0001d56d 	.word	0x0001d56d
   1fcf0:	0001d5a9 	.word	0x0001d5a9

0001fcf4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   1fcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fcf6:	46de      	mov	lr, fp
   1fcf8:	464f      	mov	r7, r9
   1fcfa:	4646      	mov	r6, r8
   1fcfc:	b5c0      	push	{r6, r7, lr}
   1fcfe:	b084      	sub	sp, #16
   1fd00:	9001      	str	r0, [sp, #4]
   1fd02:	000d      	movs	r5, r1
   1fd04:	0014      	movs	r4, r2
   1fd06:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fd08:	4b18      	ldr	r3, [pc, #96]	; (1fd6c <disk_write+0x78>)
   1fd0a:	4798      	blx	r3
   1fd0c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fd0e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fd10:	2e00      	cmp	r6, #0
   1fd12:	d105      	bne.n	1fd20 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fd14:	b004      	add	sp, #16
   1fd16:	bc1c      	pop	{r2, r3, r4}
   1fd18:	4690      	mov	r8, r2
   1fd1a:	4699      	mov	r9, r3
   1fd1c:	46a3      	mov	fp, r4
   1fd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fd20:	a903      	add	r1, sp, #12
   1fd22:	9801      	ldr	r0, [sp, #4]
   1fd24:	4b12      	ldr	r3, [pc, #72]	; (1fd70 <disk_write+0x7c>)
   1fd26:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fd28:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fd2a:	0032      	movs	r2, r6
   1fd2c:	437a      	muls	r2, r7
   1fd2e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fd30:	9b03      	ldr	r3, [sp, #12]
   1fd32:	3301      	adds	r3, #1
   1fd34:	4373      	muls	r3, r6
		return RES_PARERR;
   1fd36:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fd38:	429a      	cmp	r2, r3
   1fd3a:	d8eb      	bhi.n	1fd14 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   1fd3c:	2f00      	cmp	r7, #0
   1fd3e:	d011      	beq.n	1fd64 <disk_write+0x70>
   1fd40:	0273      	lsls	r3, r6, #9
   1fd42:	4698      	mov	r8, r3
   1fd44:	1c7b      	adds	r3, r7, #1
   1fd46:	469b      	mov	fp, r3
   1fd48:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1fd4a:	4e0a      	ldr	r6, [pc, #40]	; (1fd74 <disk_write+0x80>)
   1fd4c:	002a      	movs	r2, r5
   1fd4e:	0021      	movs	r1, r4
   1fd50:	9801      	ldr	r0, [sp, #4]
   1fd52:	47b0      	blx	r6
   1fd54:	2800      	cmp	r0, #0
   1fd56:	d107      	bne.n	1fd68 <disk_write+0x74>
   1fd58:	3701      	adds	r7, #1
   1fd5a:	444c      	add	r4, r9
   1fd5c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fd5e:	455f      	cmp	r7, fp
   1fd60:	d1f4      	bne.n	1fd4c <disk_write+0x58>
   1fd62:	e7d7      	b.n	1fd14 <disk_write+0x20>
	return RES_OK;
   1fd64:	2000      	movs	r0, #0
   1fd66:	e7d5      	b.n	1fd14 <disk_write+0x20>
			return RES_ERROR;
   1fd68:	2001      	movs	r0, #1
   1fd6a:	e7d3      	b.n	1fd14 <disk_write+0x20>
   1fd6c:	0001d589 	.word	0x0001d589
   1fd70:	0001d56d 	.word	0x0001d56d
   1fd74:	0001d5c9 	.word	0x0001d5c9

0001fd78 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1fd78:	b510      	push	{r4, lr}
   1fd7a:	b082      	sub	sp, #8
   1fd7c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1fd7e:	2901      	cmp	r1, #1
   1fd80:	d00b      	beq.n	1fd9a <disk_ioctl+0x22>
   1fd82:	2900      	cmp	r1, #0
   1fd84:	d020      	beq.n	1fdc8 <disk_ioctl+0x50>
   1fd86:	2902      	cmp	r1, #2
   1fd88:	d00f      	beq.n	1fdaa <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1fd8a:	2004      	movs	r0, #4
	switch (ctrl) {
   1fd8c:	2903      	cmp	r1, #3
   1fd8e:	d102      	bne.n	1fd96 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   1fd90:	2301      	movs	r3, #1
   1fd92:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   1fd94:	2000      	movs	r0, #0
	}

	return res;
}
   1fd96:	b002      	add	sp, #8
   1fd98:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1fd9a:	a901      	add	r1, sp, #4
   1fd9c:	4b0e      	ldr	r3, [pc, #56]	; (1fdd8 <disk_ioctl+0x60>)
   1fd9e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   1fda0:	9b01      	ldr	r3, [sp, #4]
   1fda2:	3301      	adds	r3, #1
   1fda4:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   1fda6:	2000      	movs	r0, #0
	break;
   1fda8:	e7f5      	b.n	1fd96 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1fdaa:	4b0c      	ldr	r3, [pc, #48]	; (1fddc <disk_ioctl+0x64>)
   1fdac:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1fdae:	1e43      	subs	r3, r0, #1
   1fdb0:	b2db      	uxtb	r3, r3
   1fdb2:	2b01      	cmp	r3, #1
   1fdb4:	d904      	bls.n	1fdc0 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fdb6:	1f03      	subs	r3, r0, #4
   1fdb8:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1fdba:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fdbc:	4213      	tst	r3, r2
   1fdbe:	d1ea      	bne.n	1fd96 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1fdc0:	2300      	movs	r3, #0
   1fdc2:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   1fdc4:	2000      	movs	r0, #0
	break;
   1fdc6:	e7e6      	b.n	1fd96 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1fdc8:	4b05      	ldr	r3, [pc, #20]	; (1fde0 <disk_ioctl+0x68>)
   1fdca:	4798      	blx	r3
   1fdcc:	2800      	cmp	r0, #0
   1fdce:	d001      	beq.n	1fdd4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   1fdd0:	2003      	movs	r0, #3
   1fdd2:	e7e0      	b.n	1fd96 <disk_ioctl+0x1e>
			res = RES_OK;
   1fdd4:	2000      	movs	r0, #0
   1fdd6:	e7de      	b.n	1fd96 <disk_ioctl+0x1e>
   1fdd8:	0001d56d 	.word	0x0001d56d
   1fddc:	0001d589 	.word	0x0001d589
   1fde0:	0001d555 	.word	0x0001d555

0001fde4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1fde4:	b500      	push	{lr}
   1fde6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1fde8:	4669      	mov	r1, sp
   1fdea:	480f      	ldr	r0, [pc, #60]	; (1fe28 <get_fattime+0x44>)
   1fdec:	4b0f      	ldr	r3, [pc, #60]	; (1fe2c <get_fattime+0x48>)
   1fdee:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   1fdf0:	466b      	mov	r3, sp
   1fdf2:	7958      	ldrb	r0, [r3, #5]
   1fdf4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   1fdf6:	791b      	ldrb	r3, [r3, #4]
   1fdf8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1fdfa:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1fdfc:	466b      	mov	r3, sp
   1fdfe:	789b      	ldrb	r3, [r3, #2]
   1fe00:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1fe02:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1fe04:	466b      	mov	r3, sp
   1fe06:	785b      	ldrb	r3, [r3, #1]
   1fe08:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1fe0a:	4318      	orrs	r0, r3
   1fe0c:	466b      	mov	r3, sp
   1fe0e:	781b      	ldrb	r3, [r3, #0]
   1fe10:	085b      	lsrs	r3, r3, #1
   1fe12:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   1fe14:	466b      	mov	r3, sp
   1fe16:	88db      	ldrh	r3, [r3, #6]
   1fe18:	4a05      	ldr	r2, [pc, #20]	; (1fe30 <get_fattime+0x4c>)
   1fe1a:	4694      	mov	ip, r2
   1fe1c:	4463      	add	r3, ip
   1fe1e:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   1fe20:	4318      	orrs	r0, r3

	return ul_time;
}
   1fe22:	b003      	add	sp, #12
   1fe24:	bd00      	pop	{pc}
   1fe26:	46c0      	nop			; (mov r8, r8)
   1fe28:	20005598 	.word	0x20005598
   1fe2c:	0001d971 	.word	0x0001d971
   1fe30:	fffff844 	.word	0xfffff844

0001fe34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1fe34:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1fe36:	2a00      	cmp	r2, #0
   1fe38:	d005      	beq.n	1fe46 <mem_cpy+0x12>
   1fe3a:	2300      	movs	r3, #0
		*d++ = *s++;
   1fe3c:	5ccc      	ldrb	r4, [r1, r3]
   1fe3e:	54c4      	strb	r4, [r0, r3]
   1fe40:	3301      	adds	r3, #1
	while (cnt--)
   1fe42:	4293      	cmp	r3, r2
   1fe44:	d1fa      	bne.n	1fe3c <mem_cpy+0x8>
}
   1fe46:	bd10      	pop	{r4, pc}

0001fe48 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   1fe48:	2a00      	cmp	r2, #0
   1fe4a:	d005      	beq.n	1fe58 <mem_set+0x10>
   1fe4c:	0003      	movs	r3, r0
   1fe4e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   1fe50:	7019      	strb	r1, [r3, #0]
   1fe52:	3301      	adds	r3, #1
	while (cnt--)
   1fe54:	4293      	cmp	r3, r2
   1fe56:	d1fb      	bne.n	1fe50 <mem_set+0x8>
}
   1fe58:	4770      	bx	lr

0001fe5a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1fe5a:	0002      	movs	r2, r0
	clst -= 2;
   1fe5c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1fe5e:	6983      	ldr	r3, [r0, #24]
   1fe60:	3b02      	subs	r3, #2
   1fe62:	2000      	movs	r0, #0
   1fe64:	4299      	cmp	r1, r3
   1fe66:	d203      	bcs.n	1fe70 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   1fe68:	7890      	ldrb	r0, [r2, #2]
   1fe6a:	4341      	muls	r1, r0
   1fe6c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1fe6e:	1808      	adds	r0, r1, r0
}
   1fe70:	4770      	bx	lr

0001fe72 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1fe72:	0002      	movs	r2, r0
   1fe74:	0001      	movs	r1, r0
   1fe76:	310b      	adds	r1, #11
	BYTE sum = 0;
   1fe78:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1fe7a:	0843      	lsrs	r3, r0, #1
   1fe7c:	01c0      	lsls	r0, r0, #7
   1fe7e:	4303      	orrs	r3, r0
   1fe80:	7810      	ldrb	r0, [r2, #0]
   1fe82:	1818      	adds	r0, r3, r0
   1fe84:	b2c0      	uxtb	r0, r0
   1fe86:	3201      	adds	r2, #1
   1fe88:	428a      	cmp	r2, r1
   1fe8a:	d1f6      	bne.n	1fe7a <sum_sfn+0x8>
	return sum;
}
   1fe8c:	4770      	bx	lr
	...

0001fe90 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1fe90:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   1fe92:	2800      	cmp	r0, #0
   1fe94:	d010      	beq.n	1feb8 <validate+0x28>
   1fe96:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   1fe98:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1fe9a:	2a00      	cmp	r2, #0
   1fe9c:	d101      	bne.n	1fea2 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1fe9e:	0018      	movs	r0, r3
   1fea0:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   1fea2:	88c2      	ldrh	r2, [r0, #6]
   1fea4:	428a      	cmp	r2, r1
   1fea6:	d1fa      	bne.n	1fe9e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   1fea8:	7840      	ldrb	r0, [r0, #1]
   1feaa:	4b04      	ldr	r3, [pc, #16]	; (1febc <validate+0x2c>)
   1feac:	4798      	blx	r3
		return FR_NOT_READY;
   1feae:	2303      	movs	r3, #3
	return FR_OK;
   1feb0:	07c0      	lsls	r0, r0, #31
   1feb2:	17c0      	asrs	r0, r0, #31
   1feb4:	4003      	ands	r3, r0
   1feb6:	e7f2      	b.n	1fe9e <validate+0xe>
		return FR_INVALID_OBJECT;
   1feb8:	2309      	movs	r3, #9
   1feba:	e7f0      	b.n	1fe9e <validate+0xe>
   1febc:	0001fc55 	.word	0x0001fc55

0001fec0 <check_fs>:
{
   1fec0:	b570      	push	{r4, r5, r6, lr}
   1fec2:	0004      	movs	r4, r0
   1fec4:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fec6:	0001      	movs	r1, r0
   1fec8:	3130      	adds	r1, #48	; 0x30
   1feca:	7840      	ldrb	r0, [r0, #1]
   1fecc:	2301      	movs	r3, #1
   1fece:	4d1f      	ldr	r5, [pc, #124]	; (1ff4c <check_fs+0x8c>)
   1fed0:	47a8      	blx	r5
		return 3;
   1fed2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fed4:	2800      	cmp	r0, #0
   1fed6:	d001      	beq.n	1fedc <check_fs+0x1c>
}
   1fed8:	0018      	movs	r0, r3
   1feda:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fedc:	4b1c      	ldr	r3, [pc, #112]	; (1ff50 <check_fs+0x90>)
   1fede:	5ce3      	ldrb	r3, [r4, r3]
   1fee0:	021b      	lsls	r3, r3, #8
   1fee2:	4a1c      	ldr	r2, [pc, #112]	; (1ff54 <check_fs+0x94>)
   1fee4:	5ca2      	ldrb	r2, [r4, r2]
   1fee6:	431a      	orrs	r2, r3
   1fee8:	491b      	ldr	r1, [pc, #108]	; (1ff58 <check_fs+0x98>)
   1feea:	b212      	sxth	r2, r2
		return 2;
   1feec:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1feee:	428a      	cmp	r2, r1
   1fef0:	d1f2      	bne.n	1fed8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1fef2:	3367      	adds	r3, #103	; 0x67
   1fef4:	5ce3      	ldrb	r3, [r4, r3]
   1fef6:	061b      	lsls	r3, r3, #24
   1fef8:	2268      	movs	r2, #104	; 0x68
   1fefa:	5ca2      	ldrb	r2, [r4, r2]
   1fefc:	0412      	lsls	r2, r2, #16
   1fefe:	4313      	orrs	r3, r2
   1ff00:	2266      	movs	r2, #102	; 0x66
   1ff02:	5ca2      	ldrb	r2, [r4, r2]
   1ff04:	4313      	orrs	r3, r2
   1ff06:	2267      	movs	r2, #103	; 0x67
   1ff08:	5ca2      	ldrb	r2, [r4, r2]
   1ff0a:	0212      	lsls	r2, r2, #8
   1ff0c:	4313      	orrs	r3, r2
   1ff0e:	021b      	lsls	r3, r3, #8
   1ff10:	0a1b      	lsrs	r3, r3, #8
   1ff12:	4a12      	ldr	r2, [pc, #72]	; (1ff5c <check_fs+0x9c>)
   1ff14:	4293      	cmp	r3, r2
   1ff16:	d016      	beq.n	1ff46 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1ff18:	2385      	movs	r3, #133	; 0x85
   1ff1a:	5ce3      	ldrb	r3, [r4, r3]
   1ff1c:	061b      	lsls	r3, r3, #24
   1ff1e:	2284      	movs	r2, #132	; 0x84
   1ff20:	5ca2      	ldrb	r2, [r4, r2]
   1ff22:	0412      	lsls	r2, r2, #16
   1ff24:	4313      	orrs	r3, r2
   1ff26:	2282      	movs	r2, #130	; 0x82
   1ff28:	5ca2      	ldrb	r2, [r4, r2]
   1ff2a:	4313      	orrs	r3, r2
   1ff2c:	2283      	movs	r2, #131	; 0x83
   1ff2e:	5ca2      	ldrb	r2, [r4, r2]
   1ff30:	0212      	lsls	r2, r2, #8
   1ff32:	4313      	orrs	r3, r2
   1ff34:	021b      	lsls	r3, r3, #8
   1ff36:	0a1b      	lsrs	r3, r3, #8
   1ff38:	4a09      	ldr	r2, [pc, #36]	; (1ff60 <check_fs+0xa0>)
   1ff3a:	4694      	mov	ip, r2
   1ff3c:	4463      	add	r3, ip
   1ff3e:	1e58      	subs	r0, r3, #1
   1ff40:	4183      	sbcs	r3, r0
		return 3;
   1ff42:	b2db      	uxtb	r3, r3
   1ff44:	e7c8      	b.n	1fed8 <check_fs+0x18>
		return 0;
   1ff46:	2300      	movs	r3, #0
   1ff48:	e7c6      	b.n	1fed8 <check_fs+0x18>
   1ff4a:	46c0      	nop			; (mov r8, r8)
   1ff4c:	0001fc71 	.word	0x0001fc71
   1ff50:	0000022f 	.word	0x0000022f
   1ff54:	0000022e 	.word	0x0000022e
   1ff58:	ffffaa55 	.word	0xffffaa55
   1ff5c:	00544146 	.word	0x00544146
   1ff60:	ffabbeba 	.word	0xffabbeba

0001ff64 <chk_mounted>:
{
   1ff64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff66:	46d6      	mov	lr, sl
   1ff68:	464f      	mov	r7, r9
   1ff6a:	4646      	mov	r6, r8
   1ff6c:	b5c0      	push	{r6, r7, lr}
   1ff6e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   1ff70:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   1ff72:	781c      	ldrb	r4, [r3, #0]
   1ff74:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1ff76:	2c09      	cmp	r4, #9
   1ff78:	d80e      	bhi.n	1ff98 <chk_mounted+0x34>
   1ff7a:	785a      	ldrb	r2, [r3, #1]
   1ff7c:	2a3a      	cmp	r2, #58	; 0x3a
   1ff7e:	d001      	beq.n	1ff84 <chk_mounted+0x20>
   1ff80:	2400      	movs	r4, #0
   1ff82:	e00a      	b.n	1ff9a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   1ff84:	3302      	adds	r3, #2
   1ff86:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   1ff88:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1ff8a:	2c07      	cmp	r4, #7
   1ff8c:	d905      	bls.n	1ff9a <chk_mounted+0x36>
}
   1ff8e:	bc1c      	pop	{r2, r3, r4}
   1ff90:	4690      	mov	r8, r2
   1ff92:	4699      	mov	r9, r3
   1ff94:	46a2      	mov	sl, r4
   1ff96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff98:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1ff9a:	00a3      	lsls	r3, r4, #2
   1ff9c:	4ac5      	ldr	r2, [pc, #788]	; (202b4 <chk_mounted+0x350>)
   1ff9e:	589e      	ldr	r6, [r3, r2]
   1ffa0:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1ffa2:	2e00      	cmp	r6, #0
   1ffa4:	d100      	bne.n	1ffa8 <chk_mounted+0x44>
   1ffa6:	e0e8      	b.n	2017a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1ffa8:	7833      	ldrb	r3, [r6, #0]
   1ffaa:	2b00      	cmp	r3, #0
   1ffac:	d00d      	beq.n	1ffca <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1ffae:	7870      	ldrb	r0, [r6, #1]
   1ffb0:	4bc1      	ldr	r3, [pc, #772]	; (202b8 <chk_mounted+0x354>)
   1ffb2:	4798      	blx	r3
   1ffb4:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1ffb6:	07c2      	lsls	r2, r0, #31
   1ffb8:	d407      	bmi.n	1ffca <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1ffba:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1ffbc:	2d00      	cmp	r5, #0
   1ffbe:	d0e6      	beq.n	1ff8e <chk_mounted+0x2a>
   1ffc0:	075b      	lsls	r3, r3, #29
   1ffc2:	d400      	bmi.n	1ffc6 <chk_mounted+0x62>
   1ffc4:	e0db      	b.n	2017e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   1ffc6:	300a      	adds	r0, #10
   1ffc8:	e7e1      	b.n	1ff8e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1ffca:	2300      	movs	r3, #0
   1ffcc:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1ffce:	b2e0      	uxtb	r0, r4
   1ffd0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1ffd2:	4bba      	ldr	r3, [pc, #744]	; (202bc <chk_mounted+0x358>)
   1ffd4:	4798      	blx	r3
   1ffd6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1ffd8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1ffda:	07da      	lsls	r2, r3, #31
   1ffdc:	d4d7      	bmi.n	1ff8e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ffde:	2d00      	cmp	r5, #0
   1ffe0:	d002      	beq.n	1ffe8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   1ffe2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ffe4:	075b      	lsls	r3, r3, #29
   1ffe6:	d4d2      	bmi.n	1ff8e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1ffe8:	2100      	movs	r1, #0
   1ffea:	0030      	movs	r0, r6
   1ffec:	4bb4      	ldr	r3, [pc, #720]	; (202c0 <chk_mounted+0x35c>)
   1ffee:	4798      	blx	r3
   1fff0:	0003      	movs	r3, r0
   1fff2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1fff4:	2801      	cmp	r0, #1
   1fff6:	d100      	bne.n	1fffa <chk_mounted+0x96>
   1fff8:	e09a      	b.n	20130 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1fffa:	2b03      	cmp	r3, #3
   1fffc:	d100      	bne.n	20000 <chk_mounted+0x9c>
   1fffe:	e0c0      	b.n	20182 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   20000:	200d      	movs	r0, #13
   20002:	2b00      	cmp	r3, #0
   20004:	d1c3      	bne.n	1ff8e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   20006:	333c      	adds	r3, #60	; 0x3c
   20008:	5cf2      	ldrb	r2, [r6, r3]
   2000a:	0212      	lsls	r2, r2, #8
   2000c:	3b01      	subs	r3, #1
   2000e:	5cf3      	ldrb	r3, [r6, r3]
   20010:	4313      	orrs	r3, r2
   20012:	2280      	movs	r2, #128	; 0x80
   20014:	0092      	lsls	r2, r2, #2
   20016:	b21b      	sxth	r3, r3
   20018:	4293      	cmp	r3, r2
   2001a:	d1b8      	bne.n	1ff8e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2001c:	2347      	movs	r3, #71	; 0x47
   2001e:	5cf3      	ldrb	r3, [r6, r3]
   20020:	021b      	lsls	r3, r3, #8
   20022:	3abb      	subs	r2, #187	; 0xbb
   20024:	3aff      	subs	r2, #255	; 0xff
   20026:	5cb5      	ldrb	r5, [r6, r2]
   20028:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2002a:	d10d      	bne.n	20048 <chk_mounted+0xe4>
   2002c:	2357      	movs	r3, #87	; 0x57
   2002e:	5cf5      	ldrb	r5, [r6, r3]
   20030:	062d      	lsls	r5, r5, #24
   20032:	3b01      	subs	r3, #1
   20034:	5cf3      	ldrb	r3, [r6, r3]
   20036:	041b      	lsls	r3, r3, #16
   20038:	431d      	orrs	r5, r3
   2003a:	2354      	movs	r3, #84	; 0x54
   2003c:	5cf3      	ldrb	r3, [r6, r3]
   2003e:	431d      	orrs	r5, r3
   20040:	2355      	movs	r3, #85	; 0x55
   20042:	5cf3      	ldrb	r3, [r6, r3]
   20044:	021b      	lsls	r3, r3, #8
   20046:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   20048:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2004a:	2340      	movs	r3, #64	; 0x40
   2004c:	5cf2      	ldrb	r2, [r6, r3]
   2004e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   20050:	1e53      	subs	r3, r2, #1
   20052:	200d      	movs	r0, #13
   20054:	2b01      	cmp	r3, #1
   20056:	d89a      	bhi.n	1ff8e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   20058:	233d      	movs	r3, #61	; 0x3d
   2005a:	5cf1      	ldrb	r1, [r6, r3]
   2005c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2005e:	2900      	cmp	r1, #0
   20060:	d095      	beq.n	1ff8e <chk_mounted+0x2a>
   20062:	1e4b      	subs	r3, r1, #1
   20064:	4219      	tst	r1, r3
   20066:	d192      	bne.n	1ff8e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   20068:	2342      	movs	r3, #66	; 0x42
   2006a:	5cf3      	ldrb	r3, [r6, r3]
   2006c:	021b      	lsls	r3, r3, #8
   2006e:	3034      	adds	r0, #52	; 0x34
   20070:	5c30      	ldrb	r0, [r6, r0]
   20072:	4318      	orrs	r0, r3
   20074:	4680      	mov	r8, r0
   20076:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   20078:	200d      	movs	r0, #13
   2007a:	4643      	mov	r3, r8
   2007c:	071b      	lsls	r3, r3, #28
   2007e:	d000      	beq.n	20082 <chk_mounted+0x11e>
   20080:	e785      	b.n	1ff8e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   20082:	2344      	movs	r3, #68	; 0x44
   20084:	5cf3      	ldrb	r3, [r6, r3]
   20086:	021b      	lsls	r3, r3, #8
   20088:	3036      	adds	r0, #54	; 0x36
   2008a:	5c30      	ldrb	r0, [r6, r0]
   2008c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2008e:	d10d      	bne.n	200ac <chk_mounted+0x148>
   20090:	3353      	adds	r3, #83	; 0x53
   20092:	5cf3      	ldrb	r3, [r6, r3]
   20094:	061b      	lsls	r3, r3, #24
   20096:	2052      	movs	r0, #82	; 0x52
   20098:	5c30      	ldrb	r0, [r6, r0]
   2009a:	0400      	lsls	r0, r0, #16
   2009c:	4303      	orrs	r3, r0
   2009e:	2050      	movs	r0, #80	; 0x50
   200a0:	5c30      	ldrb	r0, [r6, r0]
   200a2:	4303      	orrs	r3, r0
   200a4:	2051      	movs	r0, #81	; 0x51
   200a6:	5c30      	ldrb	r0, [r6, r0]
   200a8:	0200      	lsls	r0, r0, #8
   200aa:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   200ac:	203f      	movs	r0, #63	; 0x3f
   200ae:	5c30      	ldrb	r0, [r6, r0]
   200b0:	0200      	lsls	r0, r0, #8
   200b2:	273e      	movs	r7, #62	; 0x3e
   200b4:	5df7      	ldrb	r7, [r6, r7]
   200b6:	4307      	orrs	r7, r0
   200b8:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   200ba:	200d      	movs	r0, #13
   200bc:	2f00      	cmp	r7, #0
   200be:	d100      	bne.n	200c2 <chk_mounted+0x15e>
   200c0:	e765      	b.n	1ff8e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   200c2:	436a      	muls	r2, r5
   200c4:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   200c6:	4642      	mov	r2, r8
   200c8:	0917      	lsrs	r7, r2, #4
   200ca:	4457      	add	r7, sl
   200cc:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   200ce:	42bb      	cmp	r3, r7
   200d0:	d200      	bcs.n	200d4 <chk_mounted+0x170>
   200d2:	e75c      	b.n	1ff8e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   200d4:	1bd8      	subs	r0, r3, r7
   200d6:	4b7b      	ldr	r3, [pc, #492]	; (202c4 <chk_mounted+0x360>)
   200d8:	4798      	blx	r3
   200da:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   200dc:	200d      	movs	r0, #13
   200de:	2b00      	cmp	r3, #0
   200e0:	d100      	bne.n	200e4 <chk_mounted+0x180>
   200e2:	e754      	b.n	1ff8e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   200e4:	4a78      	ldr	r2, [pc, #480]	; (202c8 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   200e6:	429a      	cmp	r2, r3
   200e8:	4192      	sbcs	r2, r2
   200ea:	4252      	negs	r2, r2
   200ec:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   200ee:	4977      	ldr	r1, [pc, #476]	; (202cc <chk_mounted+0x368>)
   200f0:	428b      	cmp	r3, r1
   200f2:	d848      	bhi.n	20186 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   200f4:	3302      	adds	r3, #2
   200f6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   200f8:	19e7      	adds	r7, r4, r7
   200fa:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   200fc:	4454      	add	r4, sl
   200fe:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   20100:	200d      	movs	r0, #13
   20102:	4641      	mov	r1, r8
   20104:	2900      	cmp	r1, #0
   20106:	d100      	bne.n	2010a <chk_mounted+0x1a6>
   20108:	e741      	b.n	1ff8e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2010a:	444c      	add	r4, r9
   2010c:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2010e:	2a02      	cmp	r2, #2
   20110:	d12c      	bne.n	2016c <chk_mounted+0x208>
   20112:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   20114:	496e      	ldr	r1, [pc, #440]	; (202d0 <chk_mounted+0x36c>)
   20116:	468c      	mov	ip, r1
   20118:	4463      	add	r3, ip
   2011a:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   2011c:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2011e:	429d      	cmp	r5, r3
   20120:	d200      	bcs.n	20124 <chk_mounted+0x1c0>
   20122:	e734      	b.n	1ff8e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   20124:	2301      	movs	r3, #1
   20126:	425b      	negs	r3, r3
   20128:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   2012a:	2300      	movs	r3, #0
   2012c:	60f3      	str	r3, [r6, #12]
   2012e:	e0b6      	b.n	2029e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   20130:	33f2      	adds	r3, #242	; 0xf2
   20132:	33ff      	adds	r3, #255	; 0xff
   20134:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   20136:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   20138:	2b00      	cmp	r3, #0
   2013a:	d100      	bne.n	2013e <chk_mounted+0x1da>
   2013c:	e727      	b.n	1ff8e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2013e:	23fa      	movs	r3, #250	; 0xfa
   20140:	33ff      	adds	r3, #255	; 0xff
   20142:	5cf4      	ldrb	r4, [r6, r3]
   20144:	0624      	lsls	r4, r4, #24
   20146:	3b01      	subs	r3, #1
   20148:	5cf3      	ldrb	r3, [r6, r3]
   2014a:	041b      	lsls	r3, r3, #16
   2014c:	431c      	orrs	r4, r3
   2014e:	23fb      	movs	r3, #251	; 0xfb
   20150:	005b      	lsls	r3, r3, #1
   20152:	5cf3      	ldrb	r3, [r6, r3]
   20154:	431c      	orrs	r4, r3
   20156:	23f8      	movs	r3, #248	; 0xf8
   20158:	33ff      	adds	r3, #255	; 0xff
   2015a:	5cf2      	ldrb	r2, [r6, r3]
   2015c:	0212      	lsls	r2, r2, #8
   2015e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   20160:	0021      	movs	r1, r4
   20162:	0030      	movs	r0, r6
   20164:	4b56      	ldr	r3, [pc, #344]	; (202c0 <chk_mounted+0x35c>)
   20166:	4798      	blx	r3
   20168:	0003      	movs	r3, r0
   2016a:	e746      	b.n	1fffa <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2016c:	2103      	movs	r1, #3
   2016e:	4359      	muls	r1, r3
   20170:	0849      	lsrs	r1, r1, #1
   20172:	2001      	movs	r0, #1
   20174:	4003      	ands	r3, r0
   20176:	18cb      	adds	r3, r1, r3
   20178:	e7cc      	b.n	20114 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2017a:	200c      	movs	r0, #12
   2017c:	e707      	b.n	1ff8e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   2017e:	2000      	movs	r0, #0
   20180:	e705      	b.n	1ff8e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   20182:	2001      	movs	r0, #1
   20184:	e703      	b.n	1ff8e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   20186:	3302      	adds	r3, #2
   20188:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2018a:	19e7      	adds	r7, r4, r7
   2018c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2018e:	4652      	mov	r2, sl
   20190:	18a2      	adds	r2, r4, r2
   20192:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   20194:	200d      	movs	r0, #13
   20196:	4642      	mov	r2, r8
   20198:	2a00      	cmp	r2, #0
   2019a:	d000      	beq.n	2019e <chk_mounted+0x23a>
   2019c:	e6f7      	b.n	1ff8e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2019e:	225f      	movs	r2, #95	; 0x5f
   201a0:	5cb2      	ldrb	r2, [r6, r2]
   201a2:	0612      	lsls	r2, r2, #24
   201a4:	215e      	movs	r1, #94	; 0x5e
   201a6:	5c71      	ldrb	r1, [r6, r1]
   201a8:	0409      	lsls	r1, r1, #16
   201aa:	430a      	orrs	r2, r1
   201ac:	215c      	movs	r1, #92	; 0x5c
   201ae:	5c71      	ldrb	r1, [r6, r1]
   201b0:	430a      	orrs	r2, r1
   201b2:	215d      	movs	r1, #93	; 0x5d
   201b4:	5c71      	ldrb	r1, [r6, r1]
   201b6:	0209      	lsls	r1, r1, #8
   201b8:	430a      	orrs	r2, r1
   201ba:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   201bc:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   201be:	4a44      	ldr	r2, [pc, #272]	; (202d0 <chk_mounted+0x36c>)
   201c0:	4694      	mov	ip, r2
   201c2:	4463      	add	r3, ip
   201c4:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   201c6:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   201c8:	429d      	cmp	r5, r3
   201ca:	d200      	bcs.n	201ce <chk_mounted+0x26a>
   201cc:	e6df      	b.n	1ff8e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   201ce:	2301      	movs	r3, #1
   201d0:	425b      	negs	r3, r3
   201d2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   201d4:	2300      	movs	r3, #0
   201d6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   201d8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   201da:	3361      	adds	r3, #97	; 0x61
   201dc:	5cf3      	ldrb	r3, [r6, r3]
   201de:	021b      	lsls	r3, r3, #8
   201e0:	2260      	movs	r2, #96	; 0x60
   201e2:	5cb2      	ldrb	r2, [r6, r2]
   201e4:	431a      	orrs	r2, r3
   201e6:	1912      	adds	r2, r2, r4
   201e8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   201ea:	0031      	movs	r1, r6
   201ec:	3130      	adds	r1, #48	; 0x30
   201ee:	7870      	ldrb	r0, [r6, #1]
   201f0:	2301      	movs	r3, #1
   201f2:	4c38      	ldr	r4, [pc, #224]	; (202d4 <chk_mounted+0x370>)
   201f4:	47a0      	blx	r4
   201f6:	2203      	movs	r2, #3
   201f8:	2800      	cmp	r0, #0
   201fa:	d150      	bne.n	2029e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   201fc:	4b36      	ldr	r3, [pc, #216]	; (202d8 <chk_mounted+0x374>)
   201fe:	5cf2      	ldrb	r2, [r6, r3]
   20200:	0212      	lsls	r2, r2, #8
   20202:	4b36      	ldr	r3, [pc, #216]	; (202dc <chk_mounted+0x378>)
   20204:	5cf3      	ldrb	r3, [r6, r3]
   20206:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   20208:	4935      	ldr	r1, [pc, #212]	; (202e0 <chk_mounted+0x37c>)
   2020a:	b21b      	sxth	r3, r3
   2020c:	2203      	movs	r2, #3
   2020e:	428b      	cmp	r3, r1
   20210:	d145      	bne.n	2029e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   20212:	2333      	movs	r3, #51	; 0x33
   20214:	5cf3      	ldrb	r3, [r6, r3]
   20216:	061b      	lsls	r3, r3, #24
   20218:	322f      	adds	r2, #47	; 0x2f
   2021a:	5cb2      	ldrb	r2, [r6, r2]
   2021c:	0412      	lsls	r2, r2, #16
   2021e:	4313      	orrs	r3, r2
   20220:	2230      	movs	r2, #48	; 0x30
   20222:	5cb2      	ldrb	r2, [r6, r2]
   20224:	4313      	orrs	r3, r2
   20226:	2231      	movs	r2, #49	; 0x31
   20228:	5cb2      	ldrb	r2, [r6, r2]
   2022a:	0212      	lsls	r2, r2, #8
   2022c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2022e:	492d      	ldr	r1, [pc, #180]	; (202e4 <chk_mounted+0x380>)
   20230:	2203      	movs	r2, #3
   20232:	428b      	cmp	r3, r1
   20234:	d133      	bne.n	2029e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   20236:	4b2c      	ldr	r3, [pc, #176]	; (202e8 <chk_mounted+0x384>)
   20238:	5cf3      	ldrb	r3, [r6, r3]
   2023a:	061b      	lsls	r3, r3, #24
   2023c:	4a2b      	ldr	r2, [pc, #172]	; (202ec <chk_mounted+0x388>)
   2023e:	5cb2      	ldrb	r2, [r6, r2]
   20240:	0412      	lsls	r2, r2, #16
   20242:	4313      	orrs	r3, r2
   20244:	2285      	movs	r2, #133	; 0x85
   20246:	0092      	lsls	r2, r2, #2
   20248:	5cb2      	ldrb	r2, [r6, r2]
   2024a:	4313      	orrs	r3, r2
   2024c:	4a28      	ldr	r2, [pc, #160]	; (202f0 <chk_mounted+0x38c>)
   2024e:	5cb2      	ldrb	r2, [r6, r2]
   20250:	0212      	lsls	r2, r2, #8
   20252:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   20254:	4927      	ldr	r1, [pc, #156]	; (202f4 <chk_mounted+0x390>)
   20256:	2203      	movs	r2, #3
   20258:	428b      	cmp	r3, r1
   2025a:	d120      	bne.n	2029e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2025c:	4b26      	ldr	r3, [pc, #152]	; (202f8 <chk_mounted+0x394>)
   2025e:	5cf3      	ldrb	r3, [r6, r3]
   20260:	061b      	lsls	r3, r3, #24
   20262:	4a26      	ldr	r2, [pc, #152]	; (202fc <chk_mounted+0x398>)
   20264:	5cb2      	ldrb	r2, [r6, r2]
   20266:	0412      	lsls	r2, r2, #16
   20268:	4313      	orrs	r3, r2
   2026a:	2287      	movs	r2, #135	; 0x87
   2026c:	0092      	lsls	r2, r2, #2
   2026e:	5cb2      	ldrb	r2, [r6, r2]
   20270:	4313      	orrs	r3, r2
   20272:	4a23      	ldr	r2, [pc, #140]	; (20300 <chk_mounted+0x39c>)
   20274:	5cb2      	ldrb	r2, [r6, r2]
   20276:	0212      	lsls	r2, r2, #8
   20278:	4313      	orrs	r3, r2
   2027a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2027c:	4b21      	ldr	r3, [pc, #132]	; (20304 <chk_mounted+0x3a0>)
   2027e:	5cf3      	ldrb	r3, [r6, r3]
   20280:	061b      	lsls	r3, r3, #24
   20282:	4a21      	ldr	r2, [pc, #132]	; (20308 <chk_mounted+0x3a4>)
   20284:	5cb2      	ldrb	r2, [r6, r2]
   20286:	0412      	lsls	r2, r2, #16
   20288:	4313      	orrs	r3, r2
   2028a:	2286      	movs	r2, #134	; 0x86
   2028c:	0092      	lsls	r2, r2, #2
   2028e:	5cb2      	ldrb	r2, [r6, r2]
   20290:	4313      	orrs	r3, r2
   20292:	4a1e      	ldr	r2, [pc, #120]	; (2030c <chk_mounted+0x3a8>)
   20294:	5cb2      	ldrb	r2, [r6, r2]
   20296:	0212      	lsls	r2, r2, #8
   20298:	4313      	orrs	r3, r2
   2029a:	6133      	str	r3, [r6, #16]
   2029c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   2029e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   202a0:	4a1b      	ldr	r2, [pc, #108]	; (20310 <chk_mounted+0x3ac>)
   202a2:	8813      	ldrh	r3, [r2, #0]
   202a4:	3301      	adds	r3, #1
   202a6:	b29b      	uxth	r3, r3
   202a8:	8013      	strh	r3, [r2, #0]
   202aa:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   202ac:	2000      	movs	r0, #0
   202ae:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   202b0:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   202b2:	e66c      	b.n	1ff8e <chk_mounted+0x2a>
   202b4:	20003d34 	.word	0x20003d34
   202b8:	0001fc55 	.word	0x0001fc55
   202bc:	0001fbb9 	.word	0x0001fbb9
   202c0:	0001fec1 	.word	0x0001fec1
   202c4:	00024039 	.word	0x00024039
   202c8:	00000ff5 	.word	0x00000ff5
   202cc:	0000fff5 	.word	0x0000fff5
   202d0:	000001ff 	.word	0x000001ff
   202d4:	0001fc71 	.word	0x0001fc71
   202d8:	0000022f 	.word	0x0000022f
   202dc:	0000022e 	.word	0x0000022e
   202e0:	ffffaa55 	.word	0xffffaa55
   202e4:	41615252 	.word	0x41615252
   202e8:	00000217 	.word	0x00000217
   202ec:	00000216 	.word	0x00000216
   202f0:	00000215 	.word	0x00000215
   202f4:	61417272 	.word	0x61417272
   202f8:	0000021f 	.word	0x0000021f
   202fc:	0000021e 	.word	0x0000021e
   20300:	0000021d 	.word	0x0000021d
   20304:	0000021b 	.word	0x0000021b
   20308:	0000021a 	.word	0x0000021a
   2030c:	00000219 	.word	0x00000219
   20310:	20003d54 	.word	0x20003d54

00020314 <move_window>:
{
   20314:	b5f0      	push	{r4, r5, r6, r7, lr}
   20316:	46ce      	mov	lr, r9
   20318:	b500      	push	{lr}
   2031a:	b082      	sub	sp, #8
   2031c:	0004      	movs	r4, r0
   2031e:	000f      	movs	r7, r1
	wsect = fs->winsect;
   20320:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   20322:	428d      	cmp	r5, r1
   20324:	d03f      	beq.n	203a6 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   20326:	7903      	ldrb	r3, [r0, #4]
   20328:	2b00      	cmp	r3, #0
   2032a:	d107      	bne.n	2033c <move_window+0x28>
	return FR_OK;
   2032c:	2300      	movs	r3, #0
		if (sector) {
   2032e:	2f00      	cmp	r7, #0
   20330:	d12c      	bne.n	2038c <move_window+0x78>
}
   20332:	0018      	movs	r0, r3
   20334:	b002      	add	sp, #8
   20336:	bc04      	pop	{r2}
   20338:	4691      	mov	r9, r2
   2033a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2033c:	2330      	movs	r3, #48	; 0x30
   2033e:	469c      	mov	ip, r3
   20340:	4484      	add	ip, r0
   20342:	4663      	mov	r3, ip
   20344:	4661      	mov	r1, ip
   20346:	9301      	str	r3, [sp, #4]
   20348:	7840      	ldrb	r0, [r0, #1]
   2034a:	2301      	movs	r3, #1
   2034c:	002a      	movs	r2, r5
   2034e:	4e17      	ldr	r6, [pc, #92]	; (203ac <move_window+0x98>)
   20350:	47b0      	blx	r6
				return FR_DISK_ERR;
   20352:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   20354:	2800      	cmp	r0, #0
   20356:	d1ec      	bne.n	20332 <move_window+0x1e>
			fs->wflag = 0;
   20358:	2300      	movs	r3, #0
   2035a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2035c:	6a23      	ldr	r3, [r4, #32]
   2035e:	69e2      	ldr	r2, [r4, #28]
   20360:	4694      	mov	ip, r2
   20362:	4463      	add	r3, ip
   20364:	429d      	cmp	r5, r3
   20366:	d2e1      	bcs.n	2032c <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   20368:	78e6      	ldrb	r6, [r4, #3]
   2036a:	2e01      	cmp	r6, #1
   2036c:	d9de      	bls.n	2032c <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   2036e:	4b0f      	ldr	r3, [pc, #60]	; (203ac <move_window+0x98>)
   20370:	4699      	mov	r9, r3
					wsect += fs->fsize;
   20372:	69e3      	ldr	r3, [r4, #28]
   20374:	469c      	mov	ip, r3
   20376:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   20378:	7860      	ldrb	r0, [r4, #1]
   2037a:	2301      	movs	r3, #1
   2037c:	002a      	movs	r2, r5
   2037e:	9901      	ldr	r1, [sp, #4]
   20380:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   20382:	3e01      	subs	r6, #1
   20384:	b2f6      	uxtb	r6, r6
   20386:	2e01      	cmp	r6, #1
   20388:	d1f3      	bne.n	20372 <move_window+0x5e>
   2038a:	e7cf      	b.n	2032c <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2038c:	0021      	movs	r1, r4
   2038e:	3130      	adds	r1, #48	; 0x30
   20390:	7860      	ldrb	r0, [r4, #1]
   20392:	3301      	adds	r3, #1
   20394:	003a      	movs	r2, r7
   20396:	4d06      	ldr	r5, [pc, #24]	; (203b0 <move_window+0x9c>)
   20398:	47a8      	blx	r5
				return FR_DISK_ERR;
   2039a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2039c:	2800      	cmp	r0, #0
   2039e:	d1c8      	bne.n	20332 <move_window+0x1e>
			fs->winsect = sector;
   203a0:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   203a2:	2300      	movs	r3, #0
   203a4:	e7c5      	b.n	20332 <move_window+0x1e>
   203a6:	2300      	movs	r3, #0
   203a8:	e7c3      	b.n	20332 <move_window+0x1e>
   203aa:	46c0      	nop			; (mov r8, r8)
   203ac:	0001fcf5 	.word	0x0001fcf5
   203b0:	0001fc71 	.word	0x0001fc71

000203b4 <get_fat>:
{
   203b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203b6:	0005      	movs	r5, r0
   203b8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   203ba:	2901      	cmp	r1, #1
   203bc:	d974      	bls.n	204a8 <get_fat+0xf4>
		return 1;
   203be:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   203c0:	69ab      	ldr	r3, [r5, #24]
   203c2:	4299      	cmp	r1, r3
   203c4:	d271      	bcs.n	204aa <get_fat+0xf6>
	switch (fs->fs_type) {
   203c6:	782b      	ldrb	r3, [r5, #0]
   203c8:	2b02      	cmp	r3, #2
   203ca:	d034      	beq.n	20436 <get_fat+0x82>
   203cc:	2b03      	cmp	r3, #3
   203ce:	d049      	beq.n	20464 <get_fat+0xb0>
   203d0:	2b01      	cmp	r3, #1
   203d2:	d002      	beq.n	203da <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203d4:	2001      	movs	r0, #1
   203d6:	4240      	negs	r0, r0
   203d8:	e067      	b.n	204aa <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   203da:	084e      	lsrs	r6, r1, #1
   203dc:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   203de:	0a71      	lsrs	r1, r6, #9
   203e0:	6a2b      	ldr	r3, [r5, #32]
   203e2:	469c      	mov	ip, r3
   203e4:	4461      	add	r1, ip
   203e6:	0028      	movs	r0, r5
   203e8:	4b30      	ldr	r3, [pc, #192]	; (204ac <get_fat+0xf8>)
   203ea:	4798      	blx	r3
   203ec:	2800      	cmp	r0, #0
   203ee:	d002      	beq.n	203f6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203f0:	2001      	movs	r0, #1
   203f2:	4240      	negs	r0, r0
   203f4:	e059      	b.n	204aa <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   203f6:	05f3      	lsls	r3, r6, #23
   203f8:	0ddb      	lsrs	r3, r3, #23
   203fa:	18eb      	adds	r3, r5, r3
   203fc:	3330      	adds	r3, #48	; 0x30
   203fe:	781f      	ldrb	r7, [r3, #0]
   20400:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   20402:	0a71      	lsrs	r1, r6, #9
   20404:	6a2b      	ldr	r3, [r5, #32]
   20406:	469c      	mov	ip, r3
   20408:	4461      	add	r1, ip
   2040a:	0028      	movs	r0, r5
   2040c:	4b27      	ldr	r3, [pc, #156]	; (204ac <get_fat+0xf8>)
   2040e:	4798      	blx	r3
   20410:	2800      	cmp	r0, #0
   20412:	d002      	beq.n	2041a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20414:	2001      	movs	r0, #1
   20416:	4240      	negs	r0, r0
   20418:	e047      	b.n	204aa <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   2041a:	05f6      	lsls	r6, r6, #23
   2041c:	0df6      	lsrs	r6, r6, #23
   2041e:	19ad      	adds	r5, r5, r6
   20420:	3530      	adds	r5, #48	; 0x30
   20422:	7828      	ldrb	r0, [r5, #0]
   20424:	0200      	lsls	r0, r0, #8
   20426:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   20428:	07e3      	lsls	r3, r4, #31
   2042a:	d501      	bpl.n	20430 <get_fat+0x7c>
   2042c:	0900      	lsrs	r0, r0, #4
   2042e:	e03c      	b.n	204aa <get_fat+0xf6>
   20430:	0500      	lsls	r0, r0, #20
   20432:	0d00      	lsrs	r0, r0, #20
   20434:	e039      	b.n	204aa <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   20436:	0a09      	lsrs	r1, r1, #8
   20438:	6a2b      	ldr	r3, [r5, #32]
   2043a:	469c      	mov	ip, r3
   2043c:	4461      	add	r1, ip
   2043e:	0028      	movs	r0, r5
   20440:	4b1a      	ldr	r3, [pc, #104]	; (204ac <get_fat+0xf8>)
   20442:	4798      	blx	r3
   20444:	2800      	cmp	r0, #0
   20446:	d002      	beq.n	2044e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20448:	2001      	movs	r0, #1
   2044a:	4240      	negs	r0, r0
   2044c:	e02d      	b.n	204aa <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   2044e:	0064      	lsls	r4, r4, #1
   20450:	23ff      	movs	r3, #255	; 0xff
   20452:	005b      	lsls	r3, r3, #1
   20454:	401c      	ands	r4, r3
		return LD_WORD(p);
   20456:	192d      	adds	r5, r5, r4
   20458:	3530      	adds	r5, #48	; 0x30
   2045a:	786b      	ldrb	r3, [r5, #1]
   2045c:	021b      	lsls	r3, r3, #8
   2045e:	7828      	ldrb	r0, [r5, #0]
   20460:	4318      	orrs	r0, r3
   20462:	e022      	b.n	204aa <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   20464:	09c9      	lsrs	r1, r1, #7
   20466:	6a2b      	ldr	r3, [r5, #32]
   20468:	469c      	mov	ip, r3
   2046a:	4461      	add	r1, ip
   2046c:	0028      	movs	r0, r5
   2046e:	4b0f      	ldr	r3, [pc, #60]	; (204ac <get_fat+0xf8>)
   20470:	4798      	blx	r3
   20472:	2800      	cmp	r0, #0
   20474:	d002      	beq.n	2047c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20476:	2001      	movs	r0, #1
   20478:	4240      	negs	r0, r0
   2047a:	e016      	b.n	204aa <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   2047c:	00a4      	lsls	r4, r4, #2
   2047e:	23fe      	movs	r3, #254	; 0xfe
   20480:	005b      	lsls	r3, r3, #1
   20482:	401c      	ands	r4, r3
   20484:	0023      	movs	r3, r4
   20486:	3330      	adds	r3, #48	; 0x30
   20488:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   2048a:	78d8      	ldrb	r0, [r3, #3]
   2048c:	0600      	lsls	r0, r0, #24
   2048e:	789a      	ldrb	r2, [r3, #2]
   20490:	0412      	lsls	r2, r2, #16
   20492:	4310      	orrs	r0, r2
   20494:	192c      	adds	r4, r5, r4
   20496:	3430      	adds	r4, #48	; 0x30
   20498:	7822      	ldrb	r2, [r4, #0]
   2049a:	4310      	orrs	r0, r2
   2049c:	785b      	ldrb	r3, [r3, #1]
   2049e:	021b      	lsls	r3, r3, #8
   204a0:	4318      	orrs	r0, r3
   204a2:	0100      	lsls	r0, r0, #4
   204a4:	0900      	lsrs	r0, r0, #4
   204a6:	e000      	b.n	204aa <get_fat+0xf6>
		return 1;
   204a8:	2001      	movs	r0, #1
}
   204aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   204ac:	00020315 	.word	0x00020315

000204b0 <dir_sdi>:
{
   204b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204b2:	0004      	movs	r4, r0
   204b4:	000d      	movs	r5, r1
	dj->index = idx;
   204b6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   204b8:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   204ba:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   204bc:	2901      	cmp	r1, #1
   204be:	d003      	beq.n	204c8 <dir_sdi+0x18>
   204c0:	6823      	ldr	r3, [r4, #0]
   204c2:	699a      	ldr	r2, [r3, #24]
   204c4:	4291      	cmp	r1, r2
   204c6:	d300      	bcc.n	204ca <dir_sdi+0x1a>
}
   204c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   204ca:	2900      	cmp	r1, #0
   204cc:	d119      	bne.n	20502 <dir_sdi+0x52>
   204ce:	781a      	ldrb	r2, [r3, #0]
   204d0:	2a03      	cmp	r2, #3
   204d2:	d013      	beq.n	204fc <dir_sdi+0x4c>
		dj->clust = clst;
   204d4:	2200      	movs	r2, #0
   204d6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   204d8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   204da:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   204dc:	42aa      	cmp	r2, r5
   204de:	d9f3      	bls.n	204c8 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   204e0:	092a      	lsrs	r2, r5, #4
   204e2:	b292      	uxth	r2, r2
   204e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   204e6:	189b      	adds	r3, r3, r2
   204e8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   204ea:	6823      	ldr	r3, [r4, #0]
   204ec:	3330      	adds	r3, #48	; 0x30
   204ee:	220f      	movs	r2, #15
   204f0:	4015      	ands	r5, r2
   204f2:	016d      	lsls	r5, r5, #5
   204f4:	195d      	adds	r5, r3, r5
   204f6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   204f8:	2000      	movs	r0, #0
   204fa:	e7e5      	b.n	204c8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   204fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   204fe:	2900      	cmp	r1, #0
   20500:	d0e8      	beq.n	204d4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   20502:	789e      	ldrb	r6, [r3, #2]
   20504:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   20506:	42b5      	cmp	r5, r6
   20508:	d313      	bcc.n	20532 <dir_sdi+0x82>
   2050a:	1bad      	subs	r5, r5, r6
   2050c:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2050e:	4f10      	ldr	r7, [pc, #64]	; (20550 <dir_sdi+0xa0>)
   20510:	e000      	b.n	20514 <dir_sdi+0x64>
   20512:	001d      	movs	r5, r3
   20514:	6820      	ldr	r0, [r4, #0]
   20516:	47b8      	blx	r7
   20518:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2051a:	1c43      	adds	r3, r0, #1
   2051c:	d012      	beq.n	20544 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2051e:	2801      	cmp	r0, #1
   20520:	d912      	bls.n	20548 <dir_sdi+0x98>
   20522:	6823      	ldr	r3, [r4, #0]
   20524:	699b      	ldr	r3, [r3, #24]
   20526:	4298      	cmp	r0, r3
   20528:	d210      	bcs.n	2054c <dir_sdi+0x9c>
   2052a:	1bab      	subs	r3, r5, r6
   2052c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   2052e:	42b5      	cmp	r5, r6
   20530:	d2ef      	bcs.n	20512 <dir_sdi+0x62>
		dj->clust = clst;
   20532:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   20534:	6820      	ldr	r0, [r4, #0]
   20536:	4b07      	ldr	r3, [pc, #28]	; (20554 <dir_sdi+0xa4>)
   20538:	4798      	blx	r3
   2053a:	092b      	lsrs	r3, r5, #4
   2053c:	b29b      	uxth	r3, r3
   2053e:	1818      	adds	r0, r3, r0
   20540:	6120      	str	r0, [r4, #16]
   20542:	e7d2      	b.n	204ea <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   20544:	2001      	movs	r0, #1
   20546:	e7bf      	b.n	204c8 <dir_sdi+0x18>
				return FR_INT_ERR;
   20548:	2002      	movs	r0, #2
   2054a:	e7bd      	b.n	204c8 <dir_sdi+0x18>
   2054c:	2002      	movs	r0, #2
   2054e:	e7bb      	b.n	204c8 <dir_sdi+0x18>
   20550:	000203b5 	.word	0x000203b5
   20554:	0001fe5b 	.word	0x0001fe5b

00020558 <put_fat>:
{
   20558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2055a:	46c6      	mov	lr, r8
   2055c:	b500      	push	{lr}
   2055e:	0007      	movs	r7, r0
   20560:	000c      	movs	r4, r1
   20562:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   20564:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   20566:	2901      	cmp	r1, #1
   20568:	d902      	bls.n	20570 <put_fat+0x18>
   2056a:	6983      	ldr	r3, [r0, #24]
   2056c:	4299      	cmp	r1, r3
   2056e:	d303      	bcc.n	20578 <put_fat+0x20>
}
   20570:	0028      	movs	r0, r5
   20572:	bc04      	pop	{r2}
   20574:	4690      	mov	r8, r2
   20576:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   20578:	7803      	ldrb	r3, [r0, #0]
   2057a:	2b02      	cmp	r3, #2
   2057c:	d053      	beq.n	20626 <put_fat+0xce>
   2057e:	2b03      	cmp	r3, #3
   20580:	d063      	beq.n	2064a <put_fat+0xf2>
			res = FR_INT_ERR;
   20582:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   20584:	2b01      	cmp	r3, #1
   20586:	d002      	beq.n	2058e <put_fat+0x36>
		fs->wflag = 1;
   20588:	2301      	movs	r3, #1
   2058a:	713b      	strb	r3, [r7, #4]
   2058c:	e7f0      	b.n	20570 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   2058e:	084b      	lsrs	r3, r1, #1
   20590:	4698      	mov	r8, r3
   20592:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20594:	4643      	mov	r3, r8
   20596:	0a59      	lsrs	r1, r3, #9
   20598:	6a03      	ldr	r3, [r0, #32]
   2059a:	469c      	mov	ip, r3
   2059c:	4461      	add	r1, ip
   2059e:	4b3b      	ldr	r3, [pc, #236]	; (2068c <put_fat+0x134>)
   205a0:	4798      	blx	r3
   205a2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   205a4:	d1f0      	bne.n	20588 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   205a6:	4643      	mov	r3, r8
   205a8:	05db      	lsls	r3, r3, #23
   205aa:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   205ac:	07e2      	lsls	r2, r4, #31
   205ae:	d51f      	bpl.n	205f0 <put_fat+0x98>
   205b0:	18fb      	adds	r3, r7, r3
   205b2:	3330      	adds	r3, #48	; 0x30
   205b4:	7819      	ldrb	r1, [r3, #0]
   205b6:	220f      	movs	r2, #15
   205b8:	400a      	ands	r2, r1
   205ba:	0131      	lsls	r1, r6, #4
   205bc:	20ff      	movs	r0, #255	; 0xff
   205be:	0100      	lsls	r0, r0, #4
   205c0:	4001      	ands	r1, r0
   205c2:	430a      	orrs	r2, r1
   205c4:	701a      	strb	r2, [r3, #0]
			bc++;
   205c6:	4644      	mov	r4, r8
   205c8:	3401      	adds	r4, #1
			fs->wflag = 1;
   205ca:	2301      	movs	r3, #1
   205cc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   205ce:	0a61      	lsrs	r1, r4, #9
   205d0:	6a3b      	ldr	r3, [r7, #32]
   205d2:	469c      	mov	ip, r3
   205d4:	4461      	add	r1, ip
   205d6:	0038      	movs	r0, r7
   205d8:	4b2c      	ldr	r3, [pc, #176]	; (2068c <put_fat+0x134>)
   205da:	4798      	blx	r3
			if (res != FR_OK) break;
   205dc:	2800      	cmp	r0, #0
   205de:	d151      	bne.n	20684 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   205e0:	05e4      	lsls	r4, r4, #23
   205e2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   205e4:	0936      	lsrs	r6, r6, #4
   205e6:	b2f6      	uxtb	r6, r6
   205e8:	193c      	adds	r4, r7, r4
   205ea:	3430      	adds	r4, #48	; 0x30
   205ec:	7026      	strb	r6, [r4, #0]
			break;
   205ee:	e7cb      	b.n	20588 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   205f0:	18fb      	adds	r3, r7, r3
   205f2:	3330      	adds	r3, #48	; 0x30
   205f4:	701e      	strb	r6, [r3, #0]
			bc++;
   205f6:	4644      	mov	r4, r8
   205f8:	3401      	adds	r4, #1
			fs->wflag = 1;
   205fa:	2301      	movs	r3, #1
   205fc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   205fe:	0a61      	lsrs	r1, r4, #9
   20600:	6a3b      	ldr	r3, [r7, #32]
   20602:	469c      	mov	ip, r3
   20604:	4461      	add	r1, ip
   20606:	0038      	movs	r0, r7
   20608:	4b20      	ldr	r3, [pc, #128]	; (2068c <put_fat+0x134>)
   2060a:	4798      	blx	r3
			if (res != FR_OK) break;
   2060c:	2800      	cmp	r0, #0
   2060e:	d13b      	bne.n	20688 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   20610:	05e4      	lsls	r4, r4, #23
   20612:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   20614:	193b      	adds	r3, r7, r4
   20616:	3330      	adds	r3, #48	; 0x30
   20618:	781b      	ldrb	r3, [r3, #0]
   2061a:	220f      	movs	r2, #15
   2061c:	4393      	bics	r3, r2
   2061e:	0536      	lsls	r6, r6, #20
   20620:	0f36      	lsrs	r6, r6, #28
   20622:	431e      	orrs	r6, r3
   20624:	e7e0      	b.n	205e8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   20626:	0a09      	lsrs	r1, r1, #8
   20628:	6a03      	ldr	r3, [r0, #32]
   2062a:	469c      	mov	ip, r3
   2062c:	4461      	add	r1, ip
   2062e:	4b17      	ldr	r3, [pc, #92]	; (2068c <put_fat+0x134>)
   20630:	4798      	blx	r3
   20632:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   20634:	d1a8      	bne.n	20588 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   20636:	0063      	lsls	r3, r4, #1
   20638:	24ff      	movs	r4, #255	; 0xff
   2063a:	0064      	lsls	r4, r4, #1
   2063c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   2063e:	18fb      	adds	r3, r7, r3
   20640:	3330      	adds	r3, #48	; 0x30
   20642:	701e      	strb	r6, [r3, #0]
   20644:	0a36      	lsrs	r6, r6, #8
   20646:	705e      	strb	r6, [r3, #1]
			break;
   20648:	e79e      	b.n	20588 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2064a:	09c9      	lsrs	r1, r1, #7
   2064c:	6a03      	ldr	r3, [r0, #32]
   2064e:	469c      	mov	ip, r3
   20650:	4461      	add	r1, ip
   20652:	4b0e      	ldr	r3, [pc, #56]	; (2068c <put_fat+0x134>)
   20654:	4798      	blx	r3
   20656:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   20658:	d196      	bne.n	20588 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   2065a:	00a4      	lsls	r4, r4, #2
   2065c:	23fe      	movs	r3, #254	; 0xfe
   2065e:	005b      	lsls	r3, r3, #1
   20660:	401c      	ands	r4, r3
   20662:	0022      	movs	r2, r4
   20664:	3230      	adds	r2, #48	; 0x30
   20666:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   20668:	78d3      	ldrb	r3, [r2, #3]
   2066a:	193c      	adds	r4, r7, r4
   2066c:	3430      	adds	r4, #48	; 0x30
   2066e:	091b      	lsrs	r3, r3, #4
   20670:	071b      	lsls	r3, r3, #28
   20672:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   20674:	7026      	strb	r6, [r4, #0]
   20676:	0a33      	lsrs	r3, r6, #8
   20678:	7053      	strb	r3, [r2, #1]
   2067a:	0c33      	lsrs	r3, r6, #16
   2067c:	7093      	strb	r3, [r2, #2]
   2067e:	0e36      	lsrs	r6, r6, #24
   20680:	70d6      	strb	r6, [r2, #3]
			break;
   20682:	e781      	b.n	20588 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20684:	0005      	movs	r5, r0
   20686:	e77f      	b.n	20588 <put_fat+0x30>
   20688:	0005      	movs	r5, r0
   2068a:	e77d      	b.n	20588 <put_fat+0x30>
   2068c:	00020315 	.word	0x00020315

00020690 <create_chain>:
{
   20690:	b5f0      	push	{r4, r5, r6, r7, lr}
   20692:	46c6      	mov	lr, r8
   20694:	b500      	push	{lr}
   20696:	0005      	movs	r5, r0
   20698:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   2069a:	2900      	cmp	r1, #0
   2069c:	d107      	bne.n	206ae <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   2069e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   206a0:	2e00      	cmp	r6, #0
   206a2:	d00d      	beq.n	206c0 <create_chain+0x30>
   206a4:	6983      	ldr	r3, [r0, #24]
   206a6:	429e      	cmp	r6, r3
   206a8:	d30b      	bcc.n	206c2 <create_chain+0x32>
   206aa:	2601      	movs	r6, #1
   206ac:	e009      	b.n	206c2 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   206ae:	4b26      	ldr	r3, [pc, #152]	; (20748 <create_chain+0xb8>)
   206b0:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   206b2:	2801      	cmp	r0, #1
   206b4:	d93d      	bls.n	20732 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   206b6:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   206b8:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   206ba:	4298      	cmp	r0, r3
   206bc:	d201      	bcs.n	206c2 <create_chain+0x32>
   206be:	e03d      	b.n	2073c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   206c0:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   206c2:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   206c4:	4f20      	ldr	r7, [pc, #128]	; (20748 <create_chain+0xb8>)
   206c6:	e00a      	b.n	206de <create_chain+0x4e>
   206c8:	0021      	movs	r1, r4
   206ca:	0028      	movs	r0, r5
   206cc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   206ce:	2800      	cmp	r0, #0
   206d0:	d00d      	beq.n	206ee <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   206d2:	1c43      	adds	r3, r0, #1
   206d4:	d032      	beq.n	2073c <create_chain+0xac>
   206d6:	2801      	cmp	r0, #1
   206d8:	d030      	beq.n	2073c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   206da:	42b4      	cmp	r4, r6
   206dc:	d02d      	beq.n	2073a <create_chain+0xaa>
		ncl++;							/* Next cluster */
   206de:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   206e0:	69ab      	ldr	r3, [r5, #24]
   206e2:	429c      	cmp	r4, r3
   206e4:	d3f0      	bcc.n	206c8 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   206e6:	2e01      	cmp	r6, #1
   206e8:	d925      	bls.n	20736 <create_chain+0xa6>
			ncl = 2;
   206ea:	2402      	movs	r4, #2
   206ec:	e7ec      	b.n	206c8 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   206ee:	4a17      	ldr	r2, [pc, #92]	; (2074c <create_chain+0xbc>)
   206f0:	0021      	movs	r1, r4
   206f2:	0028      	movs	r0, r5
   206f4:	4b16      	ldr	r3, [pc, #88]	; (20750 <create_chain+0xc0>)
   206f6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   206f8:	2800      	cmp	r0, #0
   206fa:	d113      	bne.n	20724 <create_chain+0x94>
   206fc:	4643      	mov	r3, r8
   206fe:	2b00      	cmp	r3, #0
   20700:	d109      	bne.n	20716 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   20702:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   20704:	692b      	ldr	r3, [r5, #16]
   20706:	1c5a      	adds	r2, r3, #1
   20708:	d01b      	beq.n	20742 <create_chain+0xb2>
			fs->free_clust--;
   2070a:	3b01      	subs	r3, #1
   2070c:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   2070e:	2301      	movs	r3, #1
   20710:	716b      	strb	r3, [r5, #5]
   20712:	0020      	movs	r0, r4
   20714:	e012      	b.n	2073c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   20716:	0022      	movs	r2, r4
   20718:	4641      	mov	r1, r8
   2071a:	0028      	movs	r0, r5
   2071c:	4b0c      	ldr	r3, [pc, #48]	; (20750 <create_chain+0xc0>)
   2071e:	4798      	blx	r3
	if (res == FR_OK) {
   20720:	2800      	cmp	r0, #0
   20722:	d0ee      	beq.n	20702 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   20724:	3801      	subs	r0, #1
   20726:	4242      	negs	r2, r0
   20728:	4142      	adcs	r2, r0
   2072a:	4250      	negs	r0, r2
   2072c:	2301      	movs	r3, #1
   2072e:	4318      	orrs	r0, r3
   20730:	e004      	b.n	2073c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   20732:	2001      	movs	r0, #1
   20734:	e002      	b.n	2073c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   20736:	2000      	movs	r0, #0
   20738:	e000      	b.n	2073c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   2073a:	2000      	movs	r0, #0
}
   2073c:	bc04      	pop	{r2}
   2073e:	4690      	mov	r8, r2
   20740:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20742:	0020      	movs	r0, r4
   20744:	e7fa      	b.n	2073c <create_chain+0xac>
   20746:	46c0      	nop			; (mov r8, r8)
   20748:	000203b5 	.word	0x000203b5
   2074c:	0fffffff 	.word	0x0fffffff
   20750:	00020559 	.word	0x00020559

00020754 <remove_chain>:
{
   20754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20756:	46ce      	mov	lr, r9
   20758:	4647      	mov	r7, r8
   2075a:	b580      	push	{r7, lr}
   2075c:	0004      	movs	r4, r0
   2075e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   20760:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   20762:	2901      	cmp	r1, #1
   20764:	d902      	bls.n	2076c <remove_chain+0x18>
   20766:	69a3      	ldr	r3, [r4, #24]
   20768:	4299      	cmp	r1, r3
   2076a:	d303      	bcc.n	20774 <remove_chain+0x20>
}
   2076c:	bc0c      	pop	{r2, r3}
   2076e:	4690      	mov	r8, r2
   20770:	4699      	mov	r9, r3
   20772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20774:	4f13      	ldr	r7, [pc, #76]	; (207c4 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   20776:	4b14      	ldr	r3, [pc, #80]	; (207c8 <remove_chain+0x74>)
   20778:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   2077a:	2301      	movs	r3, #1
   2077c:	4699      	mov	r9, r3
   2077e:	e003      	b.n	20788 <remove_chain+0x34>
   20780:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   20782:	69a3      	ldr	r3, [r4, #24]
   20784:	42b3      	cmp	r3, r6
   20786:	d9f1      	bls.n	2076c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20788:	0029      	movs	r1, r5
   2078a:	0020      	movs	r0, r4
   2078c:	47b8      	blx	r7
   2078e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   20790:	d011      	beq.n	207b6 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   20792:	2801      	cmp	r0, #1
   20794:	d011      	beq.n	207ba <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   20796:	1c43      	adds	r3, r0, #1
   20798:	d011      	beq.n	207be <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2079a:	2200      	movs	r2, #0
   2079c:	0029      	movs	r1, r5
   2079e:	0020      	movs	r0, r4
   207a0:	47c0      	blx	r8
			if (res != FR_OK) break;
   207a2:	2800      	cmp	r0, #0
   207a4:	d1e2      	bne.n	2076c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   207a6:	6923      	ldr	r3, [r4, #16]
   207a8:	1c5a      	adds	r2, r3, #1
   207aa:	d0e9      	beq.n	20780 <remove_chain+0x2c>
				fs->free_clust++;
   207ac:	3301      	adds	r3, #1
   207ae:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   207b0:	464b      	mov	r3, r9
   207b2:	7163      	strb	r3, [r4, #5]
   207b4:	e7e4      	b.n	20780 <remove_chain+0x2c>
   207b6:	2000      	movs	r0, #0
   207b8:	e7d8      	b.n	2076c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   207ba:	2002      	movs	r0, #2
   207bc:	e7d6      	b.n	2076c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   207be:	2001      	movs	r0, #1
   207c0:	e7d4      	b.n	2076c <remove_chain+0x18>
   207c2:	46c0      	nop			; (mov r8, r8)
   207c4:	000203b5 	.word	0x000203b5
   207c8:	00020559 	.word	0x00020559

000207cc <dir_next>:
{
   207cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   207ce:	46d6      	mov	lr, sl
   207d0:	4647      	mov	r7, r8
   207d2:	b580      	push	{r7, lr}
   207d4:	0006      	movs	r6, r0
   207d6:	000d      	movs	r5, r1
	i = dj->index + 1;
   207d8:	88c4      	ldrh	r4, [r0, #6]
   207da:	3401      	adds	r4, #1
   207dc:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   207de:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   207e0:	2c00      	cmp	r4, #0
   207e2:	d103      	bne.n	207ec <dir_next+0x20>
}
   207e4:	bc0c      	pop	{r2, r3}
   207e6:	4690      	mov	r8, r2
   207e8:	469a      	mov	sl, r3
   207ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   207ec:	6933      	ldr	r3, [r6, #16]
   207ee:	2b00      	cmp	r3, #0
   207f0:	d0f8      	beq.n	207e4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   207f2:	270f      	movs	r7, #15
   207f4:	4027      	ands	r7, r4
   207f6:	d10f      	bne.n	20818 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   207f8:	3301      	adds	r3, #1
   207fa:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   207fc:	68f1      	ldr	r1, [r6, #12]
   207fe:	2900      	cmp	r1, #0
   20800:	d104      	bne.n	2080c <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   20802:	6833      	ldr	r3, [r6, #0]
   20804:	891b      	ldrh	r3, [r3, #8]
   20806:	42a3      	cmp	r3, r4
   20808:	d9ec      	bls.n	207e4 <dir_next+0x18>
   2080a:	e005      	b.n	20818 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2080c:	6830      	ldr	r0, [r6, #0]
   2080e:	7883      	ldrb	r3, [r0, #2]
   20810:	3b01      	subs	r3, #1
   20812:	0922      	lsrs	r2, r4, #4
   20814:	421a      	tst	r2, r3
   20816:	d007      	beq.n	20828 <dir_next+0x5c>
	dj->index = i;
   20818:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2081a:	6833      	ldr	r3, [r6, #0]
   2081c:	3330      	adds	r3, #48	; 0x30
   2081e:	017f      	lsls	r7, r7, #5
   20820:	19df      	adds	r7, r3, r7
   20822:	6177      	str	r7, [r6, #20]
	return FR_OK;
   20824:	2000      	movs	r0, #0
   20826:	e7dd      	b.n	207e4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   20828:	4b2c      	ldr	r3, [pc, #176]	; (208dc <dir_next+0x110>)
   2082a:	4798      	blx	r3
   2082c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   2082e:	2002      	movs	r0, #2
   20830:	4643      	mov	r3, r8
   20832:	2b01      	cmp	r3, #1
   20834:	d9d6      	bls.n	207e4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   20836:	3301      	adds	r3, #1
   20838:	d04b      	beq.n	208d2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2083a:	6833      	ldr	r3, [r6, #0]
   2083c:	699a      	ldr	r2, [r3, #24]
   2083e:	4590      	cmp	r8, r2
   20840:	d33f      	bcc.n	208c2 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   20842:	3002      	adds	r0, #2
   20844:	2d00      	cmp	r5, #0
   20846:	d0cd      	beq.n	207e4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   20848:	68f1      	ldr	r1, [r6, #12]
   2084a:	0018      	movs	r0, r3
   2084c:	4b24      	ldr	r3, [pc, #144]	; (208e0 <dir_next+0x114>)
   2084e:	4798      	blx	r3
   20850:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   20852:	2007      	movs	r0, #7
   20854:	4643      	mov	r3, r8
   20856:	2b00      	cmp	r3, #0
   20858:	d0c4      	beq.n	207e4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   2085a:	3805      	subs	r0, #5
   2085c:	2b01      	cmp	r3, #1
   2085e:	d0c1      	beq.n	207e4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   20860:	3801      	subs	r0, #1
   20862:	3301      	adds	r3, #1
   20864:	d0be      	beq.n	207e4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   20866:	2100      	movs	r1, #0
   20868:	6830      	ldr	r0, [r6, #0]
   2086a:	4b1e      	ldr	r3, [pc, #120]	; (208e4 <dir_next+0x118>)
   2086c:	4798      	blx	r3
   2086e:	0003      	movs	r3, r0
   20870:	2001      	movs	r0, #1
   20872:	2b00      	cmp	r3, #0
   20874:	d1b6      	bne.n	207e4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   20876:	6830      	ldr	r0, [r6, #0]
   20878:	3030      	adds	r0, #48	; 0x30
   2087a:	2280      	movs	r2, #128	; 0x80
   2087c:	0092      	lsls	r2, r2, #2
   2087e:	2100      	movs	r1, #0
   20880:	4b19      	ldr	r3, [pc, #100]	; (208e8 <dir_next+0x11c>)
   20882:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   20884:	6835      	ldr	r5, [r6, #0]
   20886:	4641      	mov	r1, r8
   20888:	0028      	movs	r0, r5
   2088a:	4b18      	ldr	r3, [pc, #96]	; (208ec <dir_next+0x120>)
   2088c:	4798      	blx	r3
   2088e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20890:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   20892:	2301      	movs	r3, #1
   20894:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20896:	6833      	ldr	r3, [r6, #0]
   20898:	789a      	ldrb	r2, [r3, #2]
   2089a:	42aa      	cmp	r2, r5
   2089c:	d90e      	bls.n	208bc <dir_next+0xf0>
						dj->fs->wflag = 1;
   2089e:	4652      	mov	r2, sl
   208a0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   208a2:	2100      	movs	r1, #0
   208a4:	6830      	ldr	r0, [r6, #0]
   208a6:	4b0f      	ldr	r3, [pc, #60]	; (208e4 <dir_next+0x118>)
   208a8:	4798      	blx	r3
   208aa:	2800      	cmp	r0, #0
   208ac:	d113      	bne.n	208d6 <dir_next+0x10a>
						dj->fs->winsect++;
   208ae:	6832      	ldr	r2, [r6, #0]
   208b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   208b2:	3301      	adds	r3, #1
   208b4:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   208b6:	3501      	adds	r5, #1
   208b8:	b2ed      	uxtb	r5, r5
   208ba:	e7ec      	b.n	20896 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   208bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208be:	1b52      	subs	r2, r2, r5
   208c0:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   208c2:	4643      	mov	r3, r8
   208c4:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   208c6:	4641      	mov	r1, r8
   208c8:	6830      	ldr	r0, [r6, #0]
   208ca:	4b08      	ldr	r3, [pc, #32]	; (208ec <dir_next+0x120>)
   208cc:	4798      	blx	r3
   208ce:	6130      	str	r0, [r6, #16]
   208d0:	e7a2      	b.n	20818 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   208d2:	2001      	movs	r0, #1
   208d4:	e786      	b.n	207e4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   208d6:	2001      	movs	r0, #1
   208d8:	e784      	b.n	207e4 <dir_next+0x18>
   208da:	46c0      	nop			; (mov r8, r8)
   208dc:	000203b5 	.word	0x000203b5
   208e0:	00020691 	.word	0x00020691
   208e4:	00020315 	.word	0x00020315
   208e8:	0001fe49 	.word	0x0001fe49
   208ec:	0001fe5b 	.word	0x0001fe5b

000208f0 <dir_find>:
{
   208f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   208f2:	46de      	mov	lr, fp
   208f4:	4657      	mov	r7, sl
   208f6:	464e      	mov	r6, r9
   208f8:	4645      	mov	r5, r8
   208fa:	b5e0      	push	{r5, r6, r7, lr}
   208fc:	b083      	sub	sp, #12
   208fe:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   20900:	2100      	movs	r1, #0
   20902:	4b5a      	ldr	r3, [pc, #360]	; (20a6c <dir_find+0x17c>)
   20904:	4798      	blx	r3
   20906:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   20908:	d000      	beq.n	2090c <dir_find+0x1c>
   2090a:	e09e      	b.n	20a4a <dir_find+0x15a>
   2090c:	23ff      	movs	r3, #255	; 0xff
   2090e:	4699      	mov	r9, r3
   20910:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   20912:	4b57      	ldr	r3, [pc, #348]	; (20a70 <dir_find+0x180>)
   20914:	469b      	mov	fp, r3
   20916:	e01b      	b.n	20950 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   20918:	2b0f      	cmp	r3, #15
   2091a:	d030      	beq.n	2097e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2091c:	4653      	mov	r3, sl
   2091e:	2b00      	cmp	r3, #0
   20920:	d105      	bne.n	2092e <dir_find+0x3e>
   20922:	0020      	movs	r0, r4
   20924:	4b53      	ldr	r3, [pc, #332]	; (20a74 <dir_find+0x184>)
   20926:	4798      	blx	r3
   20928:	4581      	cmp	r9, r0
   2092a:	d100      	bne.n	2092e <dir_find+0x3e>
   2092c:	e08d      	b.n	20a4a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2092e:	2301      	movs	r3, #1
   20930:	425b      	negs	r3, r3
   20932:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   20934:	69a8      	ldr	r0, [r5, #24]
   20936:	7ac3      	ldrb	r3, [r0, #11]
   20938:	07db      	lsls	r3, r3, #31
   2093a:	d400      	bmi.n	2093e <dir_find+0x4e>
   2093c:	e07d      	b.n	20a3a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2093e:	23ff      	movs	r3, #255	; 0xff
   20940:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   20942:	2100      	movs	r1, #0
   20944:	0028      	movs	r0, r5
   20946:	4b4c      	ldr	r3, [pc, #304]	; (20a78 <dir_find+0x188>)
   20948:	4798      	blx	r3
   2094a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   2094c:	d000      	beq.n	20950 <dir_find+0x60>
   2094e:	e07c      	b.n	20a4a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   20950:	6929      	ldr	r1, [r5, #16]
   20952:	6828      	ldr	r0, [r5, #0]
   20954:	47d8      	blx	fp
   20956:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   20958:	d177      	bne.n	20a4a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2095a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   2095c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2095e:	2e00      	cmp	r6, #0
   20960:	d100      	bne.n	20964 <dir_find+0x74>
   20962:	e080      	b.n	20a66 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   20964:	7ae2      	ldrb	r2, [r4, #11]
   20966:	233f      	movs	r3, #63	; 0x3f
   20968:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2096a:	2ee5      	cmp	r6, #229	; 0xe5
   2096c:	d100      	bne.n	20970 <dir_find+0x80>
   2096e:	e077      	b.n	20a60 <dir_find+0x170>
   20970:	0712      	lsls	r2, r2, #28
   20972:	d5d1      	bpl.n	20918 <dir_find+0x28>
   20974:	2b0f      	cmp	r3, #15
   20976:	d002      	beq.n	2097e <dir_find+0x8e>
			ord = 0xFF;
   20978:	23ff      	movs	r3, #255	; 0xff
   2097a:	469a      	mov	sl, r3
   2097c:	e7e1      	b.n	20942 <dir_find+0x52>
				if (dj->lfn) {
   2097e:	69ef      	ldr	r7, [r5, #28]
   20980:	2f00      	cmp	r7, #0
   20982:	d0de      	beq.n	20942 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   20984:	0673      	lsls	r3, r6, #25
   20986:	d518      	bpl.n	209ba <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   20988:	7b63      	ldrb	r3, [r4, #13]
   2098a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   2098c:	2340      	movs	r3, #64	; 0x40
   2098e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   20990:	88eb      	ldrh	r3, [r5, #6]
   20992:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20994:	7b63      	ldrb	r3, [r4, #13]
   20996:	9300      	str	r3, [sp, #0]
   20998:	22ff      	movs	r2, #255	; 0xff
   2099a:	4692      	mov	sl, r2
   2099c:	454b      	cmp	r3, r9
   2099e:	d1d0      	bne.n	20942 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   209a0:	7823      	ldrb	r3, [r4, #0]
   209a2:	3abf      	subs	r2, #191	; 0xbf
   209a4:	4393      	bics	r3, r2
   209a6:	3b01      	subs	r3, #1
   209a8:	005a      	lsls	r2, r3, #1
   209aa:	18d2      	adds	r2, r2, r3
   209ac:	0092      	lsls	r2, r2, #2
   209ae:	4692      	mov	sl, r2
   209b0:	449a      	add	sl, r3
	s = 0; wc = 1;
   209b2:	2201      	movs	r2, #1
   209b4:	2300      	movs	r3, #0
   209b6:	4699      	mov	r9, r3
   209b8:	e01d      	b.n	209f6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   209ba:	45b2      	cmp	sl, r6
   209bc:	d0ea      	beq.n	20994 <dir_find+0xa4>
   209be:	23ff      	movs	r3, #255	; 0xff
   209c0:	469a      	mov	sl, r3
   209c2:	e7be      	b.n	20942 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   209c4:	4b2d      	ldr	r3, [pc, #180]	; (20a7c <dir_find+0x18c>)
   209c6:	4798      	blx	r3
   209c8:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   209ca:	4653      	mov	r3, sl
   209cc:	2bfe      	cmp	r3, #254	; 0xfe
   209ce:	d81f      	bhi.n	20a10 <dir_find+0x120>
   209d0:	2301      	movs	r3, #1
   209d2:	4453      	add	r3, sl
   209d4:	4698      	mov	r8, r3
   209d6:	4653      	mov	r3, sl
   209d8:	005b      	lsls	r3, r3, #1
   209da:	5bd8      	ldrh	r0, [r3, r7]
   209dc:	4b27      	ldr	r3, [pc, #156]	; (20a7c <dir_find+0x18c>)
   209de:	4798      	blx	r3
   209e0:	0002      	movs	r2, r0
   209e2:	9b01      	ldr	r3, [sp, #4]
   209e4:	4283      	cmp	r3, r0
   209e6:	d113      	bne.n	20a10 <dir_find+0x120>
   209e8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   209ea:	2301      	movs	r3, #1
   209ec:	469c      	mov	ip, r3
   209ee:	44e1      	add	r9, ip
   209f0:	464b      	mov	r3, r9
   209f2:	2b0d      	cmp	r3, #13
   209f4:	d011      	beq.n	20a1a <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   209f6:	4b22      	ldr	r3, [pc, #136]	; (20a80 <dir_find+0x190>)
   209f8:	4649      	mov	r1, r9
   209fa:	5cc9      	ldrb	r1, [r1, r3]
   209fc:	1863      	adds	r3, r4, r1
   209fe:	785b      	ldrb	r3, [r3, #1]
   20a00:	021b      	lsls	r3, r3, #8
   20a02:	5c60      	ldrb	r0, [r4, r1]
   20a04:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   20a06:	2a00      	cmp	r2, #0
   20a08:	d1dc      	bne.n	209c4 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   20a0a:	4b1e      	ldr	r3, [pc, #120]	; (20a84 <dir_find+0x194>)
   20a0c:	4298      	cmp	r0, r3
   20a0e:	d0ec      	beq.n	209ea <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20a10:	9b00      	ldr	r3, [sp, #0]
   20a12:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20a14:	23ff      	movs	r3, #255	; 0xff
   20a16:	469a      	mov	sl, r3
   20a18:	e793      	b.n	20942 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   20a1a:	7823      	ldrb	r3, [r4, #0]
   20a1c:	065b      	lsls	r3, r3, #25
   20a1e:	d506      	bpl.n	20a2e <dir_find+0x13e>
   20a20:	2a00      	cmp	r2, #0
   20a22:	d004      	beq.n	20a2e <dir_find+0x13e>
   20a24:	4653      	mov	r3, sl
   20a26:	005b      	lsls	r3, r3, #1
   20a28:	5bdb      	ldrh	r3, [r3, r7]
   20a2a:	2b00      	cmp	r3, #0
   20a2c:	d1f0      	bne.n	20a10 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20a2e:	3e01      	subs	r6, #1
   20a30:	b2f3      	uxtb	r3, r6
   20a32:	469a      	mov	sl, r3
   20a34:	9b00      	ldr	r3, [sp, #0]
   20a36:	4699      	mov	r9, r3
   20a38:	e783      	b.n	20942 <dir_find+0x52>
   20a3a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   20a3c:	5ce1      	ldrb	r1, [r4, r3]
   20a3e:	5cc2      	ldrb	r2, [r0, r3]
   20a40:	4291      	cmp	r1, r2
   20a42:	d10a      	bne.n	20a5a <dir_find+0x16a>
   20a44:	3301      	adds	r3, #1
   20a46:	2b0b      	cmp	r3, #11
   20a48:	d1f8      	bne.n	20a3c <dir_find+0x14c>
}
   20a4a:	0038      	movs	r0, r7
   20a4c:	b003      	add	sp, #12
   20a4e:	bc3c      	pop	{r2, r3, r4, r5}
   20a50:	4690      	mov	r8, r2
   20a52:	4699      	mov	r9, r3
   20a54:	46a2      	mov	sl, r4
   20a56:	46ab      	mov	fp, r5
   20a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20a5a:	23ff      	movs	r3, #255	; 0xff
   20a5c:	469a      	mov	sl, r3
   20a5e:	e770      	b.n	20942 <dir_find+0x52>
			ord = 0xFF;
   20a60:	23ff      	movs	r3, #255	; 0xff
   20a62:	469a      	mov	sl, r3
   20a64:	e76d      	b.n	20942 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   20a66:	2704      	movs	r7, #4
   20a68:	e7ef      	b.n	20a4a <dir_find+0x15a>
   20a6a:	46c0      	nop			; (mov r8, r8)
   20a6c:	000204b1 	.word	0x000204b1
   20a70:	00020315 	.word	0x00020315
   20a74:	0001fe73 	.word	0x0001fe73
   20a78:	000207cd 	.word	0x000207cd
   20a7c:	00021681 	.word	0x00021681
   20a80:	0002a504 	.word	0x0002a504
   20a84:	0000ffff 	.word	0x0000ffff

00020a88 <dir_register>:
{
   20a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a8a:	46de      	mov	lr, fp
   20a8c:	4657      	mov	r7, sl
   20a8e:	464e      	mov	r6, r9
   20a90:	4645      	mov	r5, r8
   20a92:	b5e0      	push	{r5, r6, r7, lr}
   20a94:	b089      	sub	sp, #36	; 0x24
   20a96:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   20a98:	6987      	ldr	r7, [r0, #24]
   20a9a:	69c3      	ldr	r3, [r0, #28]
   20a9c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   20a9e:	ad05      	add	r5, sp, #20
   20aa0:	220c      	movs	r2, #12
   20aa2:	0039      	movs	r1, r7
   20aa4:	0028      	movs	r0, r5
   20aa6:	4ba7      	ldr	r3, [pc, #668]	; (20d44 <dir_register+0x2bc>)
   20aa8:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   20aaa:	7aeb      	ldrb	r3, [r5, #11]
   20aac:	07db      	lsls	r3, r3, #31
   20aae:	d400      	bmi.n	20ab2 <dir_register+0x2a>
   20ab0:	e070      	b.n	20b94 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   20ab2:	2300      	movs	r3, #0
   20ab4:	72fb      	strb	r3, [r7, #11]
   20ab6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   20ab8:	220b      	movs	r2, #11
   20aba:	a905      	add	r1, sp, #20
   20abc:	0038      	movs	r0, r7
   20abe:	4ba1      	ldr	r3, [pc, #644]	; (20d44 <dir_register+0x2bc>)
   20ac0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20ac2:	2301      	movs	r3, #1
		ns[i--] = c;
   20ac4:	ad03      	add	r5, sp, #12
   20ac6:	001e      	movs	r6, r3
   20ac8:	46a0      	mov	r8, r4
   20aca:	e049      	b.n	20b60 <dir_register+0xd8>
   20acc:	3801      	subs	r0, #1
   20ace:	1829      	adds	r1, r5, r0
   20ad0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   20ad2:	091b      	lsrs	r3, r3, #4
   20ad4:	b29b      	uxth	r3, r3
	} while (seq);
   20ad6:	2b00      	cmp	r3, #0
   20ad8:	d007      	beq.n	20aea <dir_register+0x62>
		c = (seq % 16) + '0';
   20ada:	0021      	movs	r1, r4
   20adc:	4019      	ands	r1, r3
   20ade:	000a      	movs	r2, r1
   20ae0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   20ae2:	2a39      	cmp	r2, #57	; 0x39
   20ae4:	d9f2      	bls.n	20acc <dir_register+0x44>
   20ae6:	3207      	adds	r2, #7
   20ae8:	e7f0      	b.n	20acc <dir_register+0x44>
	ns[i] = '~';
   20aea:	337e      	adds	r3, #126	; 0x7e
   20aec:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   20aee:	2800      	cmp	r0, #0
   20af0:	d00a      	beq.n	20b08 <dir_register+0x80>
   20af2:	783b      	ldrb	r3, [r7, #0]
   20af4:	2b20      	cmp	r3, #32
   20af6:	d009      	beq.n	20b0c <dir_register+0x84>
   20af8:	2300      	movs	r3, #0
   20afa:	3301      	adds	r3, #1
   20afc:	4298      	cmp	r0, r3
   20afe:	d007      	beq.n	20b10 <dir_register+0x88>
   20b00:	5cfa      	ldrb	r2, [r7, r3]
   20b02:	2a20      	cmp	r2, #32
   20b04:	d1f9      	bne.n	20afa <dir_register+0x72>
   20b06:	e009      	b.n	20b1c <dir_register+0x94>
   20b08:	0003      	movs	r3, r0
   20b0a:	e007      	b.n	20b1c <dir_register+0x94>
   20b0c:	2300      	movs	r3, #0
   20b0e:	e005      	b.n	20b1c <dir_register+0x94>
   20b10:	0003      	movs	r3, r0
   20b12:	e003      	b.n	20b1c <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20b14:	54fa      	strb	r2, [r7, r3]
   20b16:	3301      	adds	r3, #1
	} while (j < 8);
   20b18:	2b07      	cmp	r3, #7
   20b1a:	d805      	bhi.n	20b28 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20b1c:	2220      	movs	r2, #32
   20b1e:	2807      	cmp	r0, #7
   20b20:	d8f8      	bhi.n	20b14 <dir_register+0x8c>
   20b22:	5c2a      	ldrb	r2, [r5, r0]
   20b24:	3001      	adds	r0, #1
   20b26:	e7f5      	b.n	20b14 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   20b28:	4640      	mov	r0, r8
   20b2a:	4b87      	ldr	r3, [pc, #540]	; (20d48 <dir_register+0x2c0>)
   20b2c:	4798      	blx	r3
			if (res != FR_OK) break;
   20b2e:	2800      	cmp	r0, #0
   20b30:	d11c      	bne.n	20b6c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   20b32:	3601      	adds	r6, #1
   20b34:	b2b6      	uxth	r6, r6
   20b36:	2e64      	cmp	r6, #100	; 0x64
   20b38:	d015      	beq.n	20b66 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   20b3a:	220b      	movs	r2, #11
   20b3c:	a905      	add	r1, sp, #20
   20b3e:	0038      	movs	r0, r7
   20b40:	4b80      	ldr	r3, [pc, #512]	; (20d44 <dir_register+0x2bc>)
   20b42:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20b44:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   20b46:	2e05      	cmp	r6, #5
   20b48:	d90a      	bls.n	20b60 <dir_register+0xd8>
   20b4a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   20b4c:	085a      	lsrs	r2, r3, #1
   20b4e:	03db      	lsls	r3, r3, #15
   20b50:	4313      	orrs	r3, r2
   20b52:	880a      	ldrh	r2, [r1, #0]
   20b54:	189b      	adds	r3, r3, r2
   20b56:	b29b      	uxth	r3, r3
   20b58:	3102      	adds	r1, #2
   20b5a:	880a      	ldrh	r2, [r1, #0]
   20b5c:	2a00      	cmp	r2, #0
   20b5e:	d1f5      	bne.n	20b4c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   20b60:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   20b62:	240f      	movs	r4, #15
   20b64:	e7b9      	b.n	20ada <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20b66:	2307      	movs	r3, #7
   20b68:	4698      	mov	r8, r3
   20b6a:	e006      	b.n	20b7a <dir_register+0xf2>
   20b6c:	4644      	mov	r4, r8
   20b6e:	4680      	mov	r8, r0
   20b70:	2e64      	cmp	r6, #100	; 0x64
   20b72:	d100      	bne.n	20b76 <dir_register+0xee>
   20b74:	e0a5      	b.n	20cc2 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   20b76:	2804      	cmp	r0, #4
   20b78:	d007      	beq.n	20b8a <dir_register+0x102>
}
   20b7a:	4640      	mov	r0, r8
   20b7c:	b009      	add	sp, #36	; 0x24
   20b7e:	bc3c      	pop	{r2, r3, r4, r5}
   20b80:	4690      	mov	r8, r2
   20b82:	4699      	mov	r9, r3
   20b84:	46a2      	mov	sl, r4
   20b86:	46ab      	mov	fp, r5
   20b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   20b8a:	ab05      	add	r3, sp, #20
   20b8c:	7adb      	ldrb	r3, [r3, #11]
   20b8e:	72fb      	strb	r3, [r7, #11]
   20b90:	4653      	mov	r3, sl
   20b92:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20b94:	ab05      	add	r3, sp, #20
   20b96:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   20b98:	2201      	movs	r2, #1
   20b9a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20b9c:	079b      	lsls	r3, r3, #30
   20b9e:	d511      	bpl.n	20bc4 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   20ba0:	4653      	mov	r3, sl
   20ba2:	881b      	ldrh	r3, [r3, #0]
   20ba4:	2b00      	cmp	r3, #0
   20ba6:	d01b      	beq.n	20be0 <dir_register+0x158>
   20ba8:	2000      	movs	r0, #0
   20baa:	4652      	mov	r2, sl
   20bac:	3001      	adds	r0, #1
   20bae:	b280      	uxth	r0, r0
   20bb0:	0043      	lsls	r3, r0, #1
   20bb2:	5a9b      	ldrh	r3, [r3, r2]
   20bb4:	2b00      	cmp	r3, #0
   20bb6:	d1f9      	bne.n	20bac <dir_register+0x124>
		ne = (ne + 25) / 13;
   20bb8:	3019      	adds	r0, #25
   20bba:	210d      	movs	r1, #13
   20bbc:	4b63      	ldr	r3, [pc, #396]	; (20d4c <dir_register+0x2c4>)
   20bbe:	4798      	blx	r3
   20bc0:	b283      	uxth	r3, r0
   20bc2:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   20bc4:	2100      	movs	r1, #0
   20bc6:	0020      	movs	r0, r4
   20bc8:	4b61      	ldr	r3, [pc, #388]	; (20d50 <dir_register+0x2c8>)
   20bca:	4798      	blx	r3
   20bcc:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   20bce:	2800      	cmp	r0, #0
   20bd0:	d1d3      	bne.n	20b7a <dir_register+0xf2>
   20bd2:	4682      	mov	sl, r0
   20bd4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   20bd6:	4f5f      	ldr	r7, [pc, #380]	; (20d54 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   20bd8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20bda:	4b5f      	ldr	r3, [pc, #380]	; (20d58 <dir_register+0x2d0>)
   20bdc:	4699      	mov	r9, r3
   20bde:	e00b      	b.n	20bf8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   20be0:	2000      	movs	r0, #0
   20be2:	e7e9      	b.n	20bb8 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   20be4:	1c6b      	adds	r3, r5, #1
   20be6:	b29b      	uxth	r3, r3
   20be8:	459b      	cmp	fp, r3
   20bea:	d06d      	beq.n	20cc8 <dir_register+0x240>
   20bec:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20bee:	2101      	movs	r1, #1
   20bf0:	0020      	movs	r0, r4
   20bf2:	47c8      	blx	r9
	} while (res == FR_OK);
   20bf4:	2800      	cmp	r0, #0
   20bf6:	d112      	bne.n	20c1e <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   20bf8:	6921      	ldr	r1, [r4, #16]
   20bfa:	6820      	ldr	r0, [r4, #0]
   20bfc:	47b8      	blx	r7
		if (res != FR_OK) break;
   20bfe:	2800      	cmp	r0, #0
   20c00:	d000      	beq.n	20c04 <dir_register+0x17c>
   20c02:	e098      	b.n	20d36 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   20c04:	6963      	ldr	r3, [r4, #20]
   20c06:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   20c08:	2be5      	cmp	r3, #229	; 0xe5
   20c0a:	d001      	beq.n	20c10 <dir_register+0x188>
   20c0c:	2b00      	cmp	r3, #0
   20c0e:	d104      	bne.n	20c1a <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   20c10:	2d00      	cmp	r5, #0
   20c12:	d1e7      	bne.n	20be4 <dir_register+0x15c>
   20c14:	88e3      	ldrh	r3, [r4, #6]
   20c16:	469a      	mov	sl, r3
   20c18:	e7e4      	b.n	20be4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   20c1a:	0035      	movs	r5, r6
   20c1c:	e7e7      	b.n	20bee <dir_register+0x166>
   20c1e:	4680      	mov	r8, r0
   20c20:	e7ab      	b.n	20b7a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   20c22:	4651      	mov	r1, sl
   20c24:	0020      	movs	r0, r4
   20c26:	4b4a      	ldr	r3, [pc, #296]	; (20d50 <dir_register+0x2c8>)
   20c28:	4798      	blx	r3
   20c2a:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20c2c:	2800      	cmp	r0, #0
   20c2e:	d1a4      	bne.n	20b7a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   20c30:	69a0      	ldr	r0, [r4, #24]
   20c32:	4b4a      	ldr	r3, [pc, #296]	; (20d5c <dir_register+0x2d4>)
   20c34:	4798      	blx	r3
   20c36:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20c38:	46a8      	mov	r8, r5
   20c3a:	e01f      	b.n	20c7c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20c3c:	0022      	movs	r2, r4
   20c3e:	e067      	b.n	20d10 <dir_register+0x288>
   20c40:	465e      	mov	r6, fp
   20c42:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   20c44:	4946      	ldr	r1, [pc, #280]	; (20d60 <dir_register+0x2d8>)
   20c46:	428b      	cmp	r3, r1
   20c48:	d003      	beq.n	20c52 <dir_register+0x1ca>
   20c4a:	0052      	lsls	r2, r2, #1
   20c4c:	5b93      	ldrh	r3, [r2, r6]
   20c4e:	2b00      	cmp	r3, #0
   20c50:	d103      	bne.n	20c5a <dir_register+0x1d2>
   20c52:	2340      	movs	r3, #64	; 0x40
   20c54:	464a      	mov	r2, r9
   20c56:	431a      	orrs	r2, r3
   20c58:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   20c5a:	464b      	mov	r3, r9
   20c5c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   20c5e:	2301      	movs	r3, #1
   20c60:	6822      	ldr	r2, [r4, #0]
   20c62:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   20c64:	2100      	movs	r1, #0
   20c66:	0020      	movs	r0, r4
   20c68:	4b3b      	ldr	r3, [pc, #236]	; (20d58 <dir_register+0x2d0>)
   20c6a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   20c6c:	2800      	cmp	r0, #0
   20c6e:	d166      	bne.n	20d3e <dir_register+0x2b6>
   20c70:	4645      	mov	r5, r8
   20c72:	3d01      	subs	r5, #1
   20c74:	b2ab      	uxth	r3, r5
   20c76:	4698      	mov	r8, r3
   20c78:	2b00      	cmp	r3, #0
   20c7a:	d027      	beq.n	20ccc <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   20c7c:	6921      	ldr	r1, [r4, #16]
   20c7e:	6820      	ldr	r0, [r4, #0]
   20c80:	4b34      	ldr	r3, [pc, #208]	; (20d54 <dir_register+0x2cc>)
   20c82:	4798      	blx	r3
				if (res != FR_OK) break;
   20c84:	2800      	cmp	r0, #0
   20c86:	d158      	bne.n	20d3a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   20c88:	69e6      	ldr	r6, [r4, #28]
   20c8a:	6960      	ldr	r0, [r4, #20]
   20c8c:	4643      	mov	r3, r8
   20c8e:	466a      	mov	r2, sp
   20c90:	70d3      	strb	r3, [r2, #3]
   20c92:	78d3      	ldrb	r3, [r2, #3]
   20c94:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   20c96:	7913      	ldrb	r3, [r2, #4]
   20c98:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   20c9a:	230f      	movs	r3, #15
   20c9c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   20c9e:	2300      	movs	r3, #0
   20ca0:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   20ca2:	7683      	strb	r3, [r0, #26]
   20ca4:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   20ca6:	464b      	mov	r3, r9
   20ca8:	3b01      	subs	r3, #1
   20caa:	005a      	lsls	r2, r3, #1
   20cac:	18d2      	adds	r2, r2, r3
   20cae:	0092      	lsls	r2, r2, #2
   20cb0:	18d2      	adds	r2, r2, r3
   20cb2:	492c      	ldr	r1, [pc, #176]	; (20d64 <dir_register+0x2dc>)
   20cb4:	000d      	movs	r5, r1
   20cb6:	350d      	adds	r5, #13
	s = wc = 0;
   20cb8:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20cba:	4f29      	ldr	r7, [pc, #164]	; (20d60 <dir_register+0x2d8>)
   20cbc:	46b3      	mov	fp, r6
   20cbe:	46a4      	mov	ip, r4
   20cc0:	e029      	b.n	20d16 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20cc2:	2307      	movs	r3, #7
   20cc4:	4698      	mov	r8, r3
   20cc6:	e758      	b.n	20b7a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   20cc8:	2b01      	cmp	r3, #1
   20cca:	d8aa      	bhi.n	20c22 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   20ccc:	6921      	ldr	r1, [r4, #16]
   20cce:	6820      	ldr	r0, [r4, #0]
   20cd0:	4b20      	ldr	r3, [pc, #128]	; (20d54 <dir_register+0x2cc>)
   20cd2:	4798      	blx	r3
   20cd4:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20cd6:	2800      	cmp	r0, #0
   20cd8:	d000      	beq.n	20cdc <dir_register+0x254>
   20cda:	e74e      	b.n	20b7a <dir_register+0xf2>
			dir = dj->dir;
   20cdc:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   20cde:	2220      	movs	r2, #32
   20ce0:	2100      	movs	r1, #0
   20ce2:	0028      	movs	r0, r5
   20ce4:	4b20      	ldr	r3, [pc, #128]	; (20d68 <dir_register+0x2e0>)
   20ce6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   20ce8:	220b      	movs	r2, #11
   20cea:	69a1      	ldr	r1, [r4, #24]
   20cec:	0028      	movs	r0, r5
   20cee:	4b15      	ldr	r3, [pc, #84]	; (20d44 <dir_register+0x2bc>)
   20cf0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   20cf2:	69a3      	ldr	r3, [r4, #24]
   20cf4:	7ada      	ldrb	r2, [r3, #11]
   20cf6:	2318      	movs	r3, #24
   20cf8:	4013      	ands	r3, r2
   20cfa:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   20cfc:	6823      	ldr	r3, [r4, #0]
   20cfe:	2201      	movs	r2, #1
   20d00:	711a      	strb	r2, [r3, #4]
   20d02:	e73a      	b.n	20b7a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20d04:	780c      	ldrb	r4, [r1, #0]
   20d06:	26ff      	movs	r6, #255	; 0xff
   20d08:	5506      	strb	r6, [r0, r4]
   20d0a:	1904      	adds	r4, r0, r4
   20d0c:	26ff      	movs	r6, #255	; 0xff
   20d0e:	7066      	strb	r6, [r4, #1]
   20d10:	3101      	adds	r1, #1
	} while (++s < 13);
   20d12:	42a9      	cmp	r1, r5
   20d14:	d094      	beq.n	20c40 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20d16:	42bb      	cmp	r3, r7
   20d18:	d0f4      	beq.n	20d04 <dir_register+0x27c>
   20d1a:	1c54      	adds	r4, r2, #1
   20d1c:	0052      	lsls	r2, r2, #1
   20d1e:	465b      	mov	r3, fp
   20d20:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20d22:	780a      	ldrb	r2, [r1, #0]
   20d24:	5483      	strb	r3, [r0, r2]
   20d26:	1882      	adds	r2, r0, r2
   20d28:	0a1e      	lsrs	r6, r3, #8
   20d2a:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20d2c:	2b00      	cmp	r3, #0
   20d2e:	d185      	bne.n	20c3c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20d30:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20d32:	003b      	movs	r3, r7
   20d34:	e7ec      	b.n	20d10 <dir_register+0x288>
   20d36:	4680      	mov	r8, r0
   20d38:	e71f      	b.n	20b7a <dir_register+0xf2>
   20d3a:	4680      	mov	r8, r0
   20d3c:	e71d      	b.n	20b7a <dir_register+0xf2>
   20d3e:	4680      	mov	r8, r0
   20d40:	e71b      	b.n	20b7a <dir_register+0xf2>
   20d42:	46c0      	nop			; (mov r8, r8)
   20d44:	0001fe35 	.word	0x0001fe35
   20d48:	000208f1 	.word	0x000208f1
   20d4c:	0002414d 	.word	0x0002414d
   20d50:	000204b1 	.word	0x000204b1
   20d54:	00020315 	.word	0x00020315
   20d58:	000207cd 	.word	0x000207cd
   20d5c:	0001fe73 	.word	0x0001fe73
   20d60:	0000ffff 	.word	0x0000ffff
   20d64:	0002a504 	.word	0x0002a504
   20d68:	0001fe49 	.word	0x0001fe49

00020d6c <sync>:
{
   20d6c:	b570      	push	{r4, r5, r6, lr}
   20d6e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   20d70:	2100      	movs	r1, #0
   20d72:	4b2c      	ldr	r3, [pc, #176]	; (20e24 <sync+0xb8>)
   20d74:	4798      	blx	r3
	if (res == FR_OK) {
   20d76:	2800      	cmp	r0, #0
   20d78:	d10a      	bne.n	20d90 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20d7a:	7823      	ldrb	r3, [r4, #0]
   20d7c:	2b03      	cmp	r3, #3
   20d7e:	d008      	beq.n	20d92 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   20d80:	7860      	ldrb	r0, [r4, #1]
   20d82:	2200      	movs	r2, #0
   20d84:	2100      	movs	r1, #0
   20d86:	4b28      	ldr	r3, [pc, #160]	; (20e28 <sync+0xbc>)
   20d88:	4798      	blx	r3
   20d8a:	1e43      	subs	r3, r0, #1
   20d8c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   20d8e:	b2c0      	uxtb	r0, r0
}
   20d90:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20d92:	7963      	ldrb	r3, [r4, #5]
   20d94:	2b00      	cmp	r3, #0
   20d96:	d0f3      	beq.n	20d80 <sync+0x14>
			fs->winsect = 0;
   20d98:	2600      	movs	r6, #0
   20d9a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   20d9c:	0025      	movs	r5, r4
   20d9e:	3530      	adds	r5, #48	; 0x30
   20da0:	2280      	movs	r2, #128	; 0x80
   20da2:	0092      	lsls	r2, r2, #2
   20da4:	2100      	movs	r1, #0
   20da6:	0028      	movs	r0, r5
   20da8:	4b20      	ldr	r3, [pc, #128]	; (20e2c <sync+0xc0>)
   20daa:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   20dac:	2255      	movs	r2, #85	; 0x55
   20dae:	4b20      	ldr	r3, [pc, #128]	; (20e30 <sync+0xc4>)
   20db0:	54e2      	strb	r2, [r4, r3]
   20db2:	3255      	adds	r2, #85	; 0x55
   20db4:	4b1f      	ldr	r3, [pc, #124]	; (20e34 <sync+0xc8>)
   20db6:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   20db8:	3bde      	subs	r3, #222	; 0xde
   20dba:	3bff      	subs	r3, #255	; 0xff
   20dbc:	3a7a      	subs	r2, #122	; 0x7a
   20dbe:	54a3      	strb	r3, [r4, r2]
   20dc0:	3201      	adds	r2, #1
   20dc2:	54a3      	strb	r3, [r4, r2]
   20dc4:	330f      	adds	r3, #15
   20dc6:	3201      	adds	r2, #1
   20dc8:	54a3      	strb	r3, [r4, r2]
   20dca:	320f      	adds	r2, #15
   20dcc:	2133      	movs	r1, #51	; 0x33
   20dce:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   20dd0:	313f      	adds	r1, #63	; 0x3f
   20dd2:	2085      	movs	r0, #133	; 0x85
   20dd4:	0080      	lsls	r0, r0, #2
   20dd6:	5421      	strb	r1, [r4, r0]
   20dd8:	4817      	ldr	r0, [pc, #92]	; (20e38 <sync+0xcc>)
   20dda:	5421      	strb	r1, [r4, r0]
   20ddc:	4917      	ldr	r1, [pc, #92]	; (20e3c <sync+0xd0>)
   20dde:	5462      	strb	r2, [r4, r1]
   20de0:	4a17      	ldr	r2, [pc, #92]	; (20e40 <sync+0xd4>)
   20de2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   20de4:	6923      	ldr	r3, [r4, #16]
   20de6:	3201      	adds	r2, #1
   20de8:	54a3      	strb	r3, [r4, r2]
   20dea:	0a19      	lsrs	r1, r3, #8
   20dec:	4a15      	ldr	r2, [pc, #84]	; (20e44 <sync+0xd8>)
   20dee:	54a1      	strb	r1, [r4, r2]
   20df0:	0c19      	lsrs	r1, r3, #16
   20df2:	4a15      	ldr	r2, [pc, #84]	; (20e48 <sync+0xdc>)
   20df4:	54a1      	strb	r1, [r4, r2]
   20df6:	0e1b      	lsrs	r3, r3, #24
   20df8:	4a14      	ldr	r2, [pc, #80]	; (20e4c <sync+0xe0>)
   20dfa:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   20dfc:	68e3      	ldr	r3, [r4, #12]
   20dfe:	3201      	adds	r2, #1
   20e00:	54a3      	strb	r3, [r4, r2]
   20e02:	0a19      	lsrs	r1, r3, #8
   20e04:	4a12      	ldr	r2, [pc, #72]	; (20e50 <sync+0xe4>)
   20e06:	54a1      	strb	r1, [r4, r2]
   20e08:	0c19      	lsrs	r1, r3, #16
   20e0a:	4a12      	ldr	r2, [pc, #72]	; (20e54 <sync+0xe8>)
   20e0c:	54a1      	strb	r1, [r4, r2]
   20e0e:	0e1b      	lsrs	r3, r3, #24
   20e10:	4a11      	ldr	r2, [pc, #68]	; (20e58 <sync+0xec>)
   20e12:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   20e14:	7860      	ldrb	r0, [r4, #1]
   20e16:	2301      	movs	r3, #1
   20e18:	6962      	ldr	r2, [r4, #20]
   20e1a:	0029      	movs	r1, r5
   20e1c:	4d0f      	ldr	r5, [pc, #60]	; (20e5c <sync+0xf0>)
   20e1e:	47a8      	blx	r5
			fs->fsi_flag = 0;
   20e20:	7166      	strb	r6, [r4, #5]
   20e22:	e7ad      	b.n	20d80 <sync+0x14>
   20e24:	00020315 	.word	0x00020315
   20e28:	0001fd79 	.word	0x0001fd79
   20e2c:	0001fe49 	.word	0x0001fe49
   20e30:	0000022e 	.word	0x0000022e
   20e34:	0000022f 	.word	0x0000022f
   20e38:	00000215 	.word	0x00000215
   20e3c:	00000216 	.word	0x00000216
   20e40:	00000217 	.word	0x00000217
   20e44:	00000219 	.word	0x00000219
   20e48:	0000021a 	.word	0x0000021a
   20e4c:	0000021b 	.word	0x0000021b
   20e50:	0000021d 	.word	0x0000021d
   20e54:	0000021e 	.word	0x0000021e
   20e58:	0000021f 	.word	0x0000021f
   20e5c:	0001fcf5 	.word	0x0001fcf5

00020e60 <follow_path>:
{
   20e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e62:	46de      	mov	lr, fp
   20e64:	4657      	mov	r7, sl
   20e66:	464e      	mov	r6, r9
   20e68:	4645      	mov	r5, r8
   20e6a:	b5e0      	push	{r5, r6, r7, lr}
   20e6c:	b083      	sub	sp, #12
   20e6e:	4682      	mov	sl, r0
   20e70:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   20e72:	780b      	ldrb	r3, [r1, #0]
   20e74:	2b2f      	cmp	r3, #47	; 0x2f
   20e76:	d00f      	beq.n	20e98 <follow_path+0x38>
   20e78:	2b5c      	cmp	r3, #92	; 0x5c
   20e7a:	d00d      	beq.n	20e98 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   20e7c:	2300      	movs	r3, #0
   20e7e:	4652      	mov	r2, sl
   20e80:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   20e82:	782b      	ldrb	r3, [r5, #0]
   20e84:	4657      	mov	r7, sl
   20e86:	2b1f      	cmp	r3, #31
   20e88:	d809      	bhi.n	20e9e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   20e8a:	2100      	movs	r1, #0
   20e8c:	4650      	mov	r0, sl
   20e8e:	4bb2      	ldr	r3, [pc, #712]	; (21158 <follow_path+0x2f8>)
   20e90:	4798      	blx	r3
		dj->dir = 0;
   20e92:	2300      	movs	r3, #0
   20e94:	617b      	str	r3, [r7, #20]
   20e96:	e13a      	b.n	2110e <follow_path+0x2ae>
		path++;
   20e98:	3501      	adds	r5, #1
   20e9a:	e7ef      	b.n	20e7c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   20e9c:	3501      	adds	r5, #1
   20e9e:	7828      	ldrb	r0, [r5, #0]
   20ea0:	282f      	cmp	r0, #47	; 0x2f
   20ea2:	d0fb      	beq.n	20e9c <follow_path+0x3c>
   20ea4:	285c      	cmp	r0, #92	; 0x5c
   20ea6:	d0f9      	beq.n	20e9c <follow_path+0x3c>
	lfn = dj->lfn;
   20ea8:	69fb      	ldr	r3, [r7, #28]
   20eaa:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   20eac:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20eae:	281f      	cmp	r0, #31
   20eb0:	d800      	bhi.n	20eb4 <follow_path+0x54>
   20eb2:	e13b      	b.n	2112c <follow_path+0x2cc>
   20eb4:	282f      	cmp	r0, #47	; 0x2f
   20eb6:	d100      	bne.n	20eba <follow_path+0x5a>
   20eb8:	e13b      	b.n	21132 <follow_path+0x2d2>
   20eba:	285c      	cmp	r0, #92	; 0x5c
   20ebc:	d100      	bne.n	20ec0 <follow_path+0x60>
   20ebe:	e13b      	b.n	21138 <follow_path+0x2d8>
   20ec0:	1c6e      	adds	r6, r5, #1
   20ec2:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20ec4:	2380      	movs	r3, #128	; 0x80
   20ec6:	005b      	lsls	r3, r3, #1
   20ec8:	4698      	mov	r8, r3
   20eca:	46bb      	mov	fp, r7
   20ecc:	002b      	movs	r3, r5
   20ece:	0025      	movs	r5, r4
   20ed0:	0034      	movs	r4, r6
   20ed2:	4656      	mov	r6, sl
   20ed4:	4699      	mov	r9, r3
   20ed6:	e011      	b.n	20efc <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20ed8:	2b00      	cmp	r3, #0
   20eda:	d135      	bne.n	20f48 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   20edc:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   20ede:	1c6b      	adds	r3, r5, #1
   20ee0:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20ee2:	281f      	cmp	r0, #31
   20ee4:	d91e      	bls.n	20f24 <follow_path+0xc4>
   20ee6:	282f      	cmp	r0, #47	; 0x2f
   20ee8:	d100      	bne.n	20eec <follow_path+0x8c>
   20eea:	e128      	b.n	2113e <follow_path+0x2de>
   20eec:	285c      	cmp	r0, #92	; 0x5c
   20eee:	d100      	bne.n	20ef2 <follow_path+0x92>
   20ef0:	e142      	b.n	21178 <follow_path+0x318>
   20ef2:	3602      	adds	r6, #2
   20ef4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20ef6:	4543      	cmp	r3, r8
   20ef8:	d026      	beq.n	20f48 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   20efa:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   20efc:	2101      	movs	r1, #1
   20efe:	4b97      	ldr	r3, [pc, #604]	; (2115c <follow_path+0x2fc>)
   20f00:	4798      	blx	r3
   20f02:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   20f04:	d020      	beq.n	20f48 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20f06:	287f      	cmp	r0, #127	; 0x7f
   20f08:	d8e8      	bhi.n	20edc <follow_path+0x7c>
	while (*str && *str != chr) str++;
   20f0a:	2822      	cmp	r0, #34	; 0x22
   20f0c:	d100      	bne.n	20f10 <follow_path+0xb0>
   20f0e:	e0fd      	b.n	2110c <follow_path+0x2ac>
   20f10:	232a      	movs	r3, #42	; 0x2a
   20f12:	4a93      	ldr	r2, [pc, #588]	; (21160 <follow_path+0x300>)
   20f14:	b29f      	uxth	r7, r3
   20f16:	428f      	cmp	r7, r1
   20f18:	d0de      	beq.n	20ed8 <follow_path+0x78>
   20f1a:	3201      	adds	r2, #1
   20f1c:	7813      	ldrb	r3, [r2, #0]
   20f1e:	2b00      	cmp	r3, #0
   20f20:	d1f8      	bne.n	20f14 <follow_path+0xb4>
   20f22:	e7db      	b.n	20edc <follow_path+0x7c>
   20f24:	002c      	movs	r4, r5
   20f26:	465f      	mov	r7, fp
   20f28:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   20f2a:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   20f2c:	2604      	movs	r6, #4
   20f2e:	e10b      	b.n	21148 <follow_path+0x2e8>
		di--;
   20f30:	3c01      	subs	r4, #1
   20f32:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   20f34:	2c00      	cmp	r4, #0
   20f36:	d100      	bne.n	20f3a <follow_path+0xda>
   20f38:	e0e8      	b.n	2110c <follow_path+0x2ac>
		w = lfn[di-1];
   20f3a:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   20f3c:	2a20      	cmp	r2, #32
   20f3e:	d0f7      	beq.n	20f30 <follow_path+0xd0>
   20f40:	2a2e      	cmp	r2, #46	; 0x2e
   20f42:	d0f5      	beq.n	20f30 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   20f44:	2c00      	cmp	r4, #0
   20f46:	d101      	bne.n	20f4c <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   20f48:	2006      	movs	r0, #6
	return res;
   20f4a:	e0e0      	b.n	2110e <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   20f4c:	0063      	lsls	r3, r4, #1
   20f4e:	4698      	mov	r8, r3
   20f50:	2300      	movs	r3, #0
   20f52:	4652      	mov	r2, sl
   20f54:	4641      	mov	r1, r8
   20f56:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   20f58:	220b      	movs	r2, #11
   20f5a:	2120      	movs	r1, #32
   20f5c:	69b8      	ldr	r0, [r7, #24]
   20f5e:	4b81      	ldr	r3, [pc, #516]	; (21164 <follow_path+0x304>)
   20f60:	4798      	blx	r3
   20f62:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   20f64:	2300      	movs	r3, #0
   20f66:	e001      	b.n	20f6c <follow_path+0x10c>
   20f68:	3301      	adds	r3, #1
   20f6a:	3202      	adds	r2, #2
   20f6c:	8811      	ldrh	r1, [r2, #0]
   20f6e:	2920      	cmp	r1, #32
   20f70:	d0fa      	beq.n	20f68 <follow_path+0x108>
   20f72:	292e      	cmp	r1, #46	; 0x2e
   20f74:	d0f8      	beq.n	20f68 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   20f76:	2b00      	cmp	r3, #0
   20f78:	d001      	beq.n	20f7e <follow_path+0x11e>
   20f7a:	2203      	movs	r2, #3
   20f7c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   20f7e:	4652      	mov	r2, sl
   20f80:	4442      	add	r2, r8
   20f82:	3a02      	subs	r2, #2
   20f84:	8812      	ldrh	r2, [r2, #0]
   20f86:	2a2e      	cmp	r2, #46	; 0x2e
   20f88:	d009      	beq.n	20f9e <follow_path+0x13e>
   20f8a:	4642      	mov	r2, r8
   20f8c:	3a04      	subs	r2, #4
   20f8e:	4452      	add	r2, sl
   20f90:	3c01      	subs	r4, #1
   20f92:	2c00      	cmp	r4, #0
   20f94:	d003      	beq.n	20f9e <follow_path+0x13e>
   20f96:	3a02      	subs	r2, #2
   20f98:	8851      	ldrh	r1, [r2, #2]
   20f9a:	292e      	cmp	r1, #46	; 0x2e
   20f9c:	d1f8      	bne.n	20f90 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   20f9e:	2208      	movs	r2, #8
   20fa0:	9201      	str	r2, [sp, #4]
   20fa2:	2200      	movs	r2, #0
   20fa4:	4693      	mov	fp, r2
   20fa6:	4691      	mov	r9, r2
   20fa8:	46a0      	mov	r8, r4
   20faa:	e006      	b.n	20fba <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20fac:	4544      	cmp	r4, r8
   20fae:	d100      	bne.n	20fb2 <follow_path+0x152>
   20fb0:	e0e6      	b.n	21180 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   20fb2:	2303      	movs	r3, #3
   20fb4:	431e      	orrs	r6, r3
   20fb6:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   20fb8:	0023      	movs	r3, r4
   20fba:	1c5c      	adds	r4, r3, #1
   20fbc:	005b      	lsls	r3, r3, #1
   20fbe:	4652      	mov	r2, sl
   20fc0:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   20fc2:	2800      	cmp	r0, #0
   20fc4:	d02c      	beq.n	21020 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20fc6:	2820      	cmp	r0, #32
   20fc8:	d0f3      	beq.n	20fb2 <follow_path+0x152>
   20fca:	282e      	cmp	r0, #46	; 0x2e
   20fcc:	d0ee      	beq.n	20fac <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   20fce:	9b01      	ldr	r3, [sp, #4]
   20fd0:	459b      	cmp	fp, r3
   20fd2:	d219      	bcs.n	21008 <follow_path+0x1a8>
   20fd4:	4544      	cmp	r4, r8
   20fd6:	d100      	bne.n	20fda <follow_path+0x17a>
   20fd8:	e0d2      	b.n	21180 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   20fda:	287f      	cmp	r0, #127	; 0x7f
   20fdc:	d85e      	bhi.n	2109c <follow_path+0x23c>
	while (*str && *str != chr) str++;
   20fde:	282b      	cmp	r0, #43	; 0x2b
   20fe0:	d06e      	beq.n	210c0 <follow_path+0x260>
   20fe2:	232c      	movs	r3, #44	; 0x2c
   20fe4:	4a60      	ldr	r2, [pc, #384]	; (21168 <follow_path+0x308>)
   20fe6:	b299      	uxth	r1, r3
   20fe8:	4281      	cmp	r1, r0
   20fea:	d067      	beq.n	210bc <follow_path+0x25c>
   20fec:	3201      	adds	r2, #1
   20fee:	7813      	ldrb	r3, [r2, #0]
   20ff0:	2b00      	cmp	r3, #0
   20ff2:	d1f8      	bne.n	20fe6 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   20ff4:	0003      	movs	r3, r0
   20ff6:	3b41      	subs	r3, #65	; 0x41
   20ff8:	b29b      	uxth	r3, r3
   20ffa:	2b19      	cmp	r3, #25
   20ffc:	d86c      	bhi.n	210d8 <follow_path+0x278>
					b |= 2;
   20ffe:	2302      	movs	r3, #2
   21000:	464a      	mov	r2, r9
   21002:	431a      	orrs	r2, r3
   21004:	4691      	mov	r9, r2
   21006:	e05f      	b.n	210c8 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   21008:	9b01      	ldr	r3, [sp, #4]
   2100a:	2b0b      	cmp	r3, #11
   2100c:	d03b      	beq.n	21086 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2100e:	4544      	cmp	r4, r8
   21010:	d100      	bne.n	21014 <follow_path+0x1b4>
   21012:	e0b9      	b.n	21188 <follow_path+0x328>
   21014:	2303      	movs	r3, #3
   21016:	431e      	orrs	r6, r3
   21018:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   2101a:	4544      	cmp	r4, r8
   2101c:	d800      	bhi.n	21020 <follow_path+0x1c0>
   2101e:	e0b3      	b.n	21188 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   21020:	69bb      	ldr	r3, [r7, #24]
   21022:	781a      	ldrb	r2, [r3, #0]
   21024:	2ae5      	cmp	r2, #229	; 0xe5
   21026:	d036      	beq.n	21096 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   21028:	9b01      	ldr	r3, [sp, #4]
   2102a:	2b08      	cmp	r3, #8
   2102c:	d060      	beq.n	210f0 <follow_path+0x290>
   2102e:	230c      	movs	r3, #12
   21030:	464a      	mov	r2, r9
   21032:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   21034:	2b0c      	cmp	r3, #12
   21036:	d060      	beq.n	210fa <follow_path+0x29a>
   21038:	43d2      	mvns	r2, r2
   2103a:	0792      	lsls	r2, r2, #30
   2103c:	d05d      	beq.n	210fa <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2103e:	07b2      	lsls	r2, r6, #30
   21040:	d406      	bmi.n	21050 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   21042:	2203      	movs	r2, #3
   21044:	4649      	mov	r1, r9
   21046:	400a      	ands	r2, r1
   21048:	2a01      	cmp	r2, #1
   2104a:	d059      	beq.n	21100 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2104c:	2b04      	cmp	r3, #4
   2104e:	d05a      	beq.n	21106 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   21050:	69bb      	ldr	r3, [r7, #24]
   21052:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   21054:	0038      	movs	r0, r7
   21056:	4b45      	ldr	r3, [pc, #276]	; (2116c <follow_path+0x30c>)
   21058:	4798      	blx	r3
			ns = *(dj->fn+NS);
   2105a:	69bb      	ldr	r3, [r7, #24]
   2105c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   2105e:	2800      	cmp	r0, #0
   21060:	d15c      	bne.n	2111c <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   21062:	075b      	lsls	r3, r3, #29
   21064:	d453      	bmi.n	2110e <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   21066:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   21068:	7ad3      	ldrb	r3, [r2, #11]
   2106a:	06db      	lsls	r3, r3, #27
   2106c:	d55c      	bpl.n	21128 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   2106e:	7d51      	ldrb	r1, [r2, #21]
   21070:	0209      	lsls	r1, r1, #8
   21072:	7d13      	ldrb	r3, [r2, #20]
   21074:	430b      	orrs	r3, r1
   21076:	041b      	lsls	r3, r3, #16
   21078:	7ed1      	ldrb	r1, [r2, #27]
   2107a:	0209      	lsls	r1, r1, #8
   2107c:	7e92      	ldrb	r2, [r2, #26]
   2107e:	430a      	orrs	r2, r1
   21080:	4313      	orrs	r3, r2
   21082:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   21084:	e70b      	b.n	20e9e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   21086:	2303      	movs	r3, #3
   21088:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2108a:	69bb      	ldr	r3, [r7, #24]
   2108c:	781a      	ldrb	r2, [r3, #0]
   2108e:	2ae5      	cmp	r2, #229	; 0xe5
   21090:	d1cd      	bne.n	2102e <follow_path+0x1ce>
   21092:	220b      	movs	r2, #11
   21094:	9201      	str	r2, [sp, #4]
   21096:	2205      	movs	r2, #5
   21098:	701a      	strb	r2, [r3, #0]
   2109a:	e7c5      	b.n	21028 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2109c:	2100      	movs	r1, #0
   2109e:	4b2f      	ldr	r3, [pc, #188]	; (2115c <follow_path+0x2fc>)
   210a0:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   210a2:	2800      	cmp	r0, #0
   210a4:	d100      	bne.n	210a8 <follow_path+0x248>
   210a6:	e079      	b.n	2119c <follow_path+0x33c>
   210a8:	4b31      	ldr	r3, [pc, #196]	; (21170 <follow_path+0x310>)
   210aa:	469c      	mov	ip, r3
   210ac:	4460      	add	r0, ip
   210ae:	3880      	subs	r0, #128	; 0x80
   210b0:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   210b2:	2302      	movs	r3, #2
   210b4:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   210b6:	2800      	cmp	r0, #0
   210b8:	d002      	beq.n	210c0 <follow_path+0x260>
   210ba:	e790      	b.n	20fde <follow_path+0x17e>
   210bc:	2b00      	cmp	r3, #0
   210be:	d099      	beq.n	20ff4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   210c0:	2303      	movs	r3, #3
   210c2:	431e      	orrs	r6, r3
   210c4:	b2f6      	uxtb	r6, r6
   210c6:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   210c8:	69bb      	ldr	r3, [r7, #24]
   210ca:	465a      	mov	r2, fp
   210cc:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   210ce:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   210d0:	2201      	movs	r2, #1
   210d2:	4694      	mov	ip, r2
   210d4:	44e3      	add	fp, ip
   210d6:	e770      	b.n	20fba <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   210d8:	0003      	movs	r3, r0
   210da:	3b61      	subs	r3, #97	; 0x61
   210dc:	b29b      	uxth	r3, r3
   210de:	2b19      	cmp	r3, #25
   210e0:	d8f2      	bhi.n	210c8 <follow_path+0x268>
						b |= 1; w -= 0x20;
   210e2:	2301      	movs	r3, #1
   210e4:	464a      	mov	r2, r9
   210e6:	431a      	orrs	r2, r3
   210e8:	4691      	mov	r9, r2
   210ea:	3820      	subs	r0, #32
   210ec:	b280      	uxth	r0, r0
   210ee:	e7eb      	b.n	210c8 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   210f0:	464b      	mov	r3, r9
   210f2:	009b      	lsls	r3, r3, #2
   210f4:	b2db      	uxtb	r3, r3
   210f6:	4699      	mov	r9, r3
   210f8:	e799      	b.n	2102e <follow_path+0x1ce>
		cf |= NS_LFN;
   210fa:	2202      	movs	r2, #2
   210fc:	4316      	orrs	r6, r2
   210fe:	e79e      	b.n	2103e <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   21100:	320f      	adds	r2, #15
   21102:	4316      	orrs	r6, r2
   21104:	e7a2      	b.n	2104c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   21106:	3304      	adds	r3, #4
   21108:	431e      	orrs	r6, r3
   2110a:	e7a1      	b.n	21050 <follow_path+0x1f0>
   2110c:	2006      	movs	r0, #6
}
   2110e:	b003      	add	sp, #12
   21110:	bc3c      	pop	{r2, r3, r4, r5}
   21112:	4690      	mov	r8, r2
   21114:	4699      	mov	r9, r3
   21116:	46a2      	mov	sl, r4
   21118:	46ab      	mov	fp, r5
   2111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2111c:	2804      	cmp	r0, #4
   2111e:	d1f6      	bne.n	2110e <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   21120:	075b      	lsls	r3, r3, #29
   21122:	d4f4      	bmi.n	2110e <follow_path+0x2ae>
   21124:	3001      	adds	r0, #1
   21126:	e7f2      	b.n	2110e <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   21128:	2005      	movs	r0, #5
   2112a:	e7f0      	b.n	2110e <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   2112c:	2301      	movs	r3, #1
	si = di = 0;
   2112e:	2400      	movs	r4, #0
   21130:	e6fb      	b.n	20f2a <follow_path+0xca>
		w = p[si++];					/* Get a character */
   21132:	2301      	movs	r3, #1
	si = di = 0;
   21134:	2400      	movs	r4, #0
   21136:	e005      	b.n	21144 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   21138:	2301      	movs	r3, #1
	si = di = 0;
   2113a:	2400      	movs	r4, #0
   2113c:	e002      	b.n	21144 <follow_path+0x2e4>
   2113e:	002c      	movs	r4, r5
   21140:	465f      	mov	r7, fp
   21142:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   21144:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   21146:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   21148:	2c00      	cmp	r4, #0
   2114a:	d0df      	beq.n	2110c <follow_path+0x2ac>
   2114c:	4b09      	ldr	r3, [pc, #36]	; (21174 <follow_path+0x314>)
   2114e:	18e3      	adds	r3, r4, r3
   21150:	005b      	lsls	r3, r3, #1
   21152:	4453      	add	r3, sl
   21154:	e6f1      	b.n	20f3a <follow_path+0xda>
   21156:	46c0      	nop			; (mov r8, r8)
   21158:	000204b1 	.word	0x000204b1
   2115c:	00021639 	.word	0x00021639
   21160:	0002a595 	.word	0x0002a595
   21164:	0001fe49 	.word	0x0001fe49
   21168:	0002a5a1 	.word	0x0002a5a1
   2116c:	000208f1 	.word	0x000208f1
   21170:	0002a514 	.word	0x0002a514
   21174:	7fffffff 	.word	0x7fffffff
   21178:	002c      	movs	r4, r5
   2117a:	465f      	mov	r7, fp
   2117c:	464d      	mov	r5, r9
   2117e:	e7e1      	b.n	21144 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   21180:	9b01      	ldr	r3, [sp, #4]
   21182:	2b0b      	cmp	r3, #11
   21184:	d100      	bne.n	21188 <follow_path+0x328>
   21186:	e77e      	b.n	21086 <follow_path+0x226>
			b <<= 2; continue;
   21188:	464b      	mov	r3, r9
   2118a:	009b      	lsls	r3, r3, #2
   2118c:	b2db      	uxtb	r3, r3
   2118e:	4699      	mov	r9, r3
   21190:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   21192:	220b      	movs	r2, #11
   21194:	9201      	str	r2, [sp, #4]
   21196:	3a03      	subs	r2, #3
   21198:	4693      	mov	fp, r2
   2119a:	e70e      	b.n	20fba <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   2119c:	2302      	movs	r3, #2
   2119e:	431e      	orrs	r6, r3
   211a0:	e78e      	b.n	210c0 <follow_path+0x260>
   211a2:	46c0      	nop			; (mov r8, r8)

000211a4 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   211a4:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   211a6:	2807      	cmp	r0, #7
   211a8:	d901      	bls.n	211ae <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   211aa:	0018      	movs	r0, r3
   211ac:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   211ae:	0083      	lsls	r3, r0, #2
   211b0:	4a07      	ldr	r2, [pc, #28]	; (211d0 <f_mount+0x2c>)
   211b2:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   211b4:	2b00      	cmp	r3, #0
   211b6:	d001      	beq.n	211bc <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   211b8:	2200      	movs	r2, #0
   211ba:	701a      	strb	r2, [r3, #0]
	if (fs) {
   211bc:	2900      	cmp	r1, #0
   211be:	d001      	beq.n	211c4 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   211c0:	2300      	movs	r3, #0
   211c2:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   211c4:	0080      	lsls	r0, r0, #2
   211c6:	4b02      	ldr	r3, [pc, #8]	; (211d0 <f_mount+0x2c>)
   211c8:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   211ca:	2300      	movs	r3, #0
   211cc:	e7ed      	b.n	211aa <f_mount+0x6>
   211ce:	46c0      	nop			; (mov r8, r8)
   211d0:	20003d34 	.word	0x20003d34

000211d4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   211d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   211d6:	46c6      	mov	lr, r8
   211d8:	b500      	push	{lr}
   211da:	4c59      	ldr	r4, [pc, #356]	; (21340 <f_open+0x16c>)
   211dc:	44a5      	add	sp, r4
   211de:	0005      	movs	r5, r0
   211e0:	9101      	str	r1, [sp, #4]
   211e2:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   211e4:	2300      	movs	r3, #0
   211e6:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   211e8:	261f      	movs	r6, #31
   211ea:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   211ec:	221e      	movs	r2, #30
   211ee:	403a      	ands	r2, r7
   211f0:	a985      	add	r1, sp, #532	; 0x214
   211f2:	a801      	add	r0, sp, #4
   211f4:	4b53      	ldr	r3, [pc, #332]	; (21344 <f_open+0x170>)
   211f6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   211f8:	ab82      	add	r3, sp, #520	; 0x208
   211fa:	938b      	str	r3, [sp, #556]	; 0x22c
   211fc:	ab02      	add	r3, sp, #8
   211fe:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   21200:	2800      	cmp	r0, #0
   21202:	d006      	beq.n	21212 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   21204:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21206:	231c      	movs	r3, #28
   21208:	423b      	tst	r3, r7
   2120a:	d145      	bne.n	21298 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2120c:	2800      	cmp	r0, #0
   2120e:	d13d      	bne.n	2128c <f_open+0xb8>
   21210:	e00c      	b.n	2122c <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   21212:	9901      	ldr	r1, [sp, #4]
   21214:	a885      	add	r0, sp, #532	; 0x214
   21216:	4b4c      	ldr	r3, [pc, #304]	; (21348 <f_open+0x174>)
   21218:	4798      	blx	r3
	dir = dj.dir;
   2121a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   2121c:	2800      	cmp	r0, #0
   2121e:	d1f2      	bne.n	21206 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   21220:	2c00      	cmp	r4, #0
   21222:	d100      	bne.n	21226 <f_open+0x52>
   21224:	e086      	b.n	21334 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21226:	231c      	movs	r3, #28
   21228:	423b      	tst	r3, r7
   2122a:	d146      	bne.n	212ba <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2122c:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   2122e:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   21230:	06da      	lsls	r2, r3, #27
   21232:	d42b      	bmi.n	2128c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   21234:	07ba      	lsls	r2, r7, #30
   21236:	d502      	bpl.n	2123e <f_open+0x6a>
					res = FR_DENIED;
   21238:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2123a:	07db      	lsls	r3, r3, #31
   2123c:	d426      	bmi.n	2128c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2123e:	073b      	lsls	r3, r7, #28
   21240:	d501      	bpl.n	21246 <f_open+0x72>
			mode |= FA__WRITTEN;
   21242:	2320      	movs	r3, #32
   21244:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   21246:	9b85      	ldr	r3, [sp, #532]	; 0x214
   21248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2124a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   2124c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   2124e:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   21250:	7d62      	ldrb	r2, [r4, #21]
   21252:	0212      	lsls	r2, r2, #8
   21254:	7d23      	ldrb	r3, [r4, #20]
   21256:	4313      	orrs	r3, r2
   21258:	041b      	lsls	r3, r3, #16
   2125a:	7ee1      	ldrb	r1, [r4, #27]
   2125c:	0209      	lsls	r1, r1, #8
   2125e:	7ea2      	ldrb	r2, [r4, #26]
   21260:	430a      	orrs	r2, r1
   21262:	4313      	orrs	r3, r2
   21264:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   21266:	7fe3      	ldrb	r3, [r4, #31]
   21268:	061b      	lsls	r3, r3, #24
   2126a:	7fa2      	ldrb	r2, [r4, #30]
   2126c:	0412      	lsls	r2, r2, #16
   2126e:	4313      	orrs	r3, r2
   21270:	7f22      	ldrb	r2, [r4, #28]
   21272:	4313      	orrs	r3, r2
   21274:	7f62      	ldrb	r2, [r4, #29]
   21276:	0212      	lsls	r2, r2, #8
   21278:	4313      	orrs	r3, r2
   2127a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   2127c:	2300      	movs	r3, #0
   2127e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   21280:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   21282:	9b85      	ldr	r3, [sp, #532]	; 0x214
   21284:	602b      	str	r3, [r5, #0]
   21286:	88db      	ldrh	r3, [r3, #6]
   21288:	80ab      	strh	r3, [r5, #4]
   2128a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   2128c:	238e      	movs	r3, #142	; 0x8e
   2128e:	009b      	lsls	r3, r3, #2
   21290:	449d      	add	sp, r3
   21292:	bc04      	pop	{r2}
   21294:	4690      	mov	r8, r2
   21296:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   21298:	2804      	cmp	r0, #4
   2129a:	d005      	beq.n	212a8 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2129c:	2308      	movs	r3, #8
   2129e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   212a0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   212a2:	2800      	cmp	r0, #0
   212a4:	d0d3      	beq.n	2124e <f_open+0x7a>
   212a6:	e7f1      	b.n	2128c <f_open+0xb8>
				res = dir_register(&dj);
   212a8:	a885      	add	r0, sp, #532	; 0x214
   212aa:	4b28      	ldr	r3, [pc, #160]	; (2134c <f_open+0x178>)
   212ac:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   212ae:	2308      	movs	r3, #8
   212b0:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   212b2:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   212b4:	2800      	cmp	r0, #0
   212b6:	d008      	beq.n	212ca <f_open+0xf6>
   212b8:	e7e8      	b.n	2128c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   212ba:	7ae3      	ldrb	r3, [r4, #11]
   212bc:	2211      	movs	r2, #17
				res = FR_DENIED;
   212be:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   212c0:	421a      	tst	r2, r3
   212c2:	d1e3      	bne.n	2128c <f_open+0xb8>
					res = FR_EXIST;
   212c4:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   212c6:	077b      	lsls	r3, r7, #29
   212c8:	d4e0      	bmi.n	2128c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   212ca:	0733      	lsls	r3, r6, #28
   212cc:	d5bb      	bpl.n	21246 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   212ce:	4b20      	ldr	r3, [pc, #128]	; (21350 <f_open+0x17c>)
   212d0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   212d2:	73a0      	strb	r0, [r4, #14]
   212d4:	0a03      	lsrs	r3, r0, #8
   212d6:	73e3      	strb	r3, [r4, #15]
   212d8:	0c03      	lsrs	r3, r0, #16
   212da:	7423      	strb	r3, [r4, #16]
   212dc:	0e00      	lsrs	r0, r0, #24
   212de:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   212e0:	2300      	movs	r3, #0
   212e2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   212e4:	7723      	strb	r3, [r4, #28]
   212e6:	7763      	strb	r3, [r4, #29]
   212e8:	77a3      	strb	r3, [r4, #30]
   212ea:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   212ec:	7d62      	ldrb	r2, [r4, #21]
   212ee:	0212      	lsls	r2, r2, #8
   212f0:	7d27      	ldrb	r7, [r4, #20]
   212f2:	4317      	orrs	r7, r2
   212f4:	043f      	lsls	r7, r7, #16
   212f6:	7ee1      	ldrb	r1, [r4, #27]
   212f8:	0209      	lsls	r1, r1, #8
   212fa:	7ea2      	ldrb	r2, [r4, #26]
   212fc:	430a      	orrs	r2, r1
   212fe:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   21300:	76a3      	strb	r3, [r4, #26]
   21302:	76e3      	strb	r3, [r4, #27]
   21304:	7523      	strb	r3, [r4, #20]
   21306:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   21308:	9885      	ldr	r0, [sp, #532]	; 0x214
   2130a:	3301      	adds	r3, #1
   2130c:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2130e:	2f00      	cmp	r7, #0
   21310:	d097      	beq.n	21242 <f_open+0x6e>
				dw = dj.fs->winsect;
   21312:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21314:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   21316:	0039      	movs	r1, r7
   21318:	4b0e      	ldr	r3, [pc, #56]	; (21354 <f_open+0x180>)
   2131a:	4798      	blx	r3
				if (res == FR_OK) {
   2131c:	2800      	cmp	r0, #0
   2131e:	d1b5      	bne.n	2128c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   21320:	9885      	ldr	r0, [sp, #532]	; 0x214
   21322:	3f01      	subs	r7, #1
   21324:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   21326:	4641      	mov	r1, r8
   21328:	4b0b      	ldr	r3, [pc, #44]	; (21358 <f_open+0x184>)
   2132a:	4798      	blx	r3
	if (res == FR_OK) {
   2132c:	2800      	cmp	r0, #0
   2132e:	d100      	bne.n	21332 <f_open+0x15e>
   21330:	e787      	b.n	21242 <f_open+0x6e>
   21332:	e7ab      	b.n	2128c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21334:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   21336:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21338:	423b      	tst	r3, r7
   2133a:	d0b2      	beq.n	212a2 <f_open+0xce>
			res = FR_INVALID_NAME;
   2133c:	2006      	movs	r0, #6
   2133e:	e7ad      	b.n	2129c <f_open+0xc8>
   21340:	fffffdc8 	.word	0xfffffdc8
   21344:	0001ff65 	.word	0x0001ff65
   21348:	00020e61 	.word	0x00020e61
   2134c:	00020a89 	.word	0x00020a89
   21350:	0001fde5 	.word	0x0001fde5
   21354:	00020755 	.word	0x00020755
   21358:	00020315 	.word	0x00020315

0002135c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2135c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2135e:	46de      	mov	lr, fp
   21360:	4657      	mov	r7, sl
   21362:	464e      	mov	r6, r9
   21364:	4645      	mov	r5, r8
   21366:	b5e0      	push	{r5, r6, r7, lr}
   21368:	b083      	sub	sp, #12
   2136a:	0004      	movs	r4, r0
   2136c:	000d      	movs	r5, r1
   2136e:	0016      	movs	r6, r2
   21370:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   21372:	2300      	movs	r3, #0
   21374:	464a      	mov	r2, r9
   21376:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   21378:	8881      	ldrh	r1, [r0, #4]
   2137a:	6800      	ldr	r0, [r0, #0]
   2137c:	4b7f      	ldr	r3, [pc, #508]	; (2157c <f_write+0x220>)
   2137e:	4798      	blx	r3
   21380:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   21382:	2800      	cmp	r0, #0
   21384:	d000      	beq.n	21388 <f_write+0x2c>
   21386:	e0f1      	b.n	2156c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   21388:	79a3      	ldrb	r3, [r4, #6]
   2138a:	b25a      	sxtb	r2, r3
   2138c:	2a00      	cmp	r2, #0
   2138e:	da00      	bge.n	21392 <f_write+0x36>
   21390:	e0ea      	b.n	21568 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   21392:	079b      	lsls	r3, r3, #30
   21394:	d402      	bmi.n	2139c <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   21396:	2307      	movs	r3, #7
   21398:	9300      	str	r3, [sp, #0]
   2139a:	e0e7      	b.n	2156c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2139c:	68e3      	ldr	r3, [r4, #12]
   2139e:	199a      	adds	r2, r3, r6
   213a0:	4293      	cmp	r3, r2
   213a2:	d810      	bhi.n	213c6 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   213a4:	2e00      	cmp	r6, #0
   213a6:	d00e      	beq.n	213c6 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   213a8:	002f      	movs	r7, r5
   213aa:	e07b      	b.n	214a4 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   213ac:	2100      	movs	r1, #0
   213ae:	4b74      	ldr	r3, [pc, #464]	; (21580 <f_write+0x224>)
   213b0:	4798      	blx	r3
   213b2:	0003      	movs	r3, r0
   213b4:	6120      	str	r0, [r4, #16]
   213b6:	e003      	b.n	213c0 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   213b8:	6961      	ldr	r1, [r4, #20]
   213ba:	4b71      	ldr	r3, [pc, #452]	; (21580 <f_write+0x224>)
   213bc:	4798      	blx	r3
   213be:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   213c0:	2b00      	cmp	r3, #0
   213c2:	d000      	beq.n	213c6 <f_write+0x6a>
   213c4:	e080      	b.n	214c8 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   213c6:	68a3      	ldr	r3, [r4, #8]
   213c8:	68e2      	ldr	r2, [r4, #12]
   213ca:	4293      	cmp	r3, r2
   213cc:	d900      	bls.n	213d0 <f_write+0x74>
   213ce:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   213d0:	79a3      	ldrb	r3, [r4, #6]
   213d2:	2220      	movs	r2, #32
   213d4:	4313      	orrs	r3, r2
   213d6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   213d8:	e0c8      	b.n	2156c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   213da:	79a2      	ldrb	r2, [r4, #6]
   213dc:	3b81      	subs	r3, #129	; 0x81
   213de:	4313      	orrs	r3, r2
   213e0:	71a3      	strb	r3, [r4, #6]
   213e2:	2302      	movs	r3, #2
   213e4:	9300      	str	r3, [sp, #0]
   213e6:	e0c1      	b.n	2156c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   213e8:	79a2      	ldrb	r2, [r4, #6]
   213ea:	3b7f      	subs	r3, #127	; 0x7f
   213ec:	4313      	orrs	r3, r2
   213ee:	71a3      	strb	r3, [r4, #6]
   213f0:	2301      	movs	r3, #1
   213f2:	9300      	str	r3, [sp, #0]
   213f4:	e0ba      	b.n	2156c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   213f6:	2100      	movs	r1, #0
   213f8:	4b62      	ldr	r3, [pc, #392]	; (21584 <f_write+0x228>)
   213fa:	4798      	blx	r3
   213fc:	2800      	cmp	r0, #0
   213fe:	d06d      	beq.n	214dc <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   21400:	79a2      	ldrb	r2, [r4, #6]
   21402:	2380      	movs	r3, #128	; 0x80
   21404:	425b      	negs	r3, r3
   21406:	4313      	orrs	r3, r2
   21408:	71a3      	strb	r3, [r4, #6]
   2140a:	2301      	movs	r3, #1
   2140c:	9300      	str	r3, [sp, #0]
   2140e:	e0ad      	b.n	2156c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   21410:	79a2      	ldrb	r2, [r4, #6]
   21412:	2380      	movs	r3, #128	; 0x80
   21414:	425b      	negs	r3, r3
   21416:	4313      	orrs	r3, r2
   21418:	71a3      	strb	r3, [r4, #6]
   2141a:	2302      	movs	r3, #2
   2141c:	9300      	str	r3, [sp, #0]
   2141e:	e0a5      	b.n	2156c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   21420:	79a2      	ldrb	r2, [r4, #6]
   21422:	2380      	movs	r3, #128	; 0x80
   21424:	425b      	negs	r3, r3
   21426:	4313      	orrs	r3, r2
   21428:	71a3      	strb	r3, [r4, #6]
   2142a:	2301      	movs	r3, #1
   2142c:	9300      	str	r3, [sp, #0]
   2142e:	e09d      	b.n	2156c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   21430:	0240      	lsls	r0, r0, #9
   21432:	1839      	adds	r1, r7, r0
   21434:	3330      	adds	r3, #48	; 0x30
   21436:	0018      	movs	r0, r3
   21438:	2280      	movs	r2, #128	; 0x80
   2143a:	0092      	lsls	r2, r2, #2
   2143c:	4b52      	ldr	r3, [pc, #328]	; (21588 <f_write+0x22c>)
   2143e:	4798      	blx	r3
					fp->fs->wflag = 0;
   21440:	2300      	movs	r3, #0
   21442:	6822      	ldr	r2, [r4, #0]
   21444:	7113      	strb	r3, [r2, #4]
   21446:	e072      	b.n	2152e <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   21448:	68a3      	ldr	r3, [r4, #8]
   2144a:	68e2      	ldr	r2, [r4, #12]
   2144c:	4293      	cmp	r3, r2
   2144e:	d271      	bcs.n	21534 <f_write+0x1d8>
			fp->dsect = sect;
   21450:	4643      	mov	r3, r8
   21452:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   21454:	68a3      	ldr	r3, [r4, #8]
   21456:	05dd      	lsls	r5, r3, #23
   21458:	0ded      	lsrs	r5, r5, #23
   2145a:	2380      	movs	r3, #128	; 0x80
   2145c:	009b      	lsls	r3, r3, #2
   2145e:	1b5d      	subs	r5, r3, r5
   21460:	42b5      	cmp	r5, r6
   21462:	d900      	bls.n	21466 <f_write+0x10a>
   21464:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   21466:	69a1      	ldr	r1, [r4, #24]
   21468:	6820      	ldr	r0, [r4, #0]
   2146a:	4b46      	ldr	r3, [pc, #280]	; (21584 <f_write+0x228>)
   2146c:	4798      	blx	r3
   2146e:	2800      	cmp	r0, #0
   21470:	d172      	bne.n	21558 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   21472:	68a3      	ldr	r3, [r4, #8]
   21474:	05d8      	lsls	r0, r3, #23
   21476:	0dc0      	lsrs	r0, r0, #23
   21478:	3030      	adds	r0, #48	; 0x30
   2147a:	6823      	ldr	r3, [r4, #0]
   2147c:	469c      	mov	ip, r3
   2147e:	4460      	add	r0, ip
   21480:	002a      	movs	r2, r5
   21482:	0039      	movs	r1, r7
   21484:	4b40      	ldr	r3, [pc, #256]	; (21588 <f_write+0x22c>)
   21486:	4798      	blx	r3
		fp->fs->wflag = 1;
   21488:	2301      	movs	r3, #1
   2148a:	6822      	ldr	r2, [r4, #0]
   2148c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2148e:	197f      	adds	r7, r7, r5
   21490:	68a3      	ldr	r3, [r4, #8]
   21492:	195b      	adds	r3, r3, r5
   21494:	60a3      	str	r3, [r4, #8]
   21496:	464b      	mov	r3, r9
   21498:	681b      	ldr	r3, [r3, #0]
   2149a:	195b      	adds	r3, r3, r5
   2149c:	464a      	mov	r2, r9
   2149e:	6013      	str	r3, [r2, #0]
   214a0:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   214a2:	d090      	beq.n	213c6 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   214a4:	68a3      	ldr	r3, [r4, #8]
   214a6:	05da      	lsls	r2, r3, #23
   214a8:	d1d4      	bne.n	21454 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   214aa:	6820      	ldr	r0, [r4, #0]
   214ac:	7882      	ldrb	r2, [r0, #2]
   214ae:	3a01      	subs	r2, #1
   214b0:	0a5d      	lsrs	r5, r3, #9
   214b2:	4015      	ands	r5, r2
   214b4:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   214b6:	2d00      	cmp	r5, #0
   214b8:	d10b      	bne.n	214d2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   214ba:	2b00      	cmp	r3, #0
   214bc:	d000      	beq.n	214c0 <f_write+0x164>
   214be:	e77b      	b.n	213b8 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   214c0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   214c2:	2b00      	cmp	r3, #0
   214c4:	d100      	bne.n	214c8 <f_write+0x16c>
   214c6:	e771      	b.n	213ac <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   214c8:	2b01      	cmp	r3, #1
   214ca:	d086      	beq.n	213da <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   214cc:	1c5a      	adds	r2, r3, #1
   214ce:	d08b      	beq.n	213e8 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   214d0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   214d2:	6820      	ldr	r0, [r4, #0]
   214d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   214d6:	69a2      	ldr	r2, [r4, #24]
   214d8:	4293      	cmp	r3, r2
   214da:	d08c      	beq.n	213f6 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   214dc:	6823      	ldr	r3, [r4, #0]
   214de:	469a      	mov	sl, r3
   214e0:	6961      	ldr	r1, [r4, #20]
   214e2:	0018      	movs	r0, r3
   214e4:	4b29      	ldr	r3, [pc, #164]	; (2158c <f_write+0x230>)
   214e6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   214e8:	2800      	cmp	r0, #0
   214ea:	d091      	beq.n	21410 <f_write+0xb4>
			sect += csect;
   214ec:	4680      	mov	r8, r0
   214ee:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   214f0:	0a73      	lsrs	r3, r6, #9
   214f2:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   214f4:	d0a8      	beq.n	21448 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   214f6:	4653      	mov	r3, sl
   214f8:	789b      	ldrb	r3, [r3, #2]
   214fa:	465a      	mov	r2, fp
   214fc:	18aa      	adds	r2, r5, r2
   214fe:	429a      	cmp	r2, r3
   21500:	d901      	bls.n	21506 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   21502:	1b5b      	subs	r3, r3, r5
   21504:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   21506:	465b      	mov	r3, fp
   21508:	466a      	mov	r2, sp
   2150a:	71d3      	strb	r3, [r2, #7]
   2150c:	79d3      	ldrb	r3, [r2, #7]
   2150e:	4652      	mov	r2, sl
   21510:	7850      	ldrb	r0, [r2, #1]
   21512:	4642      	mov	r2, r8
   21514:	0039      	movs	r1, r7
   21516:	4d1e      	ldr	r5, [pc, #120]	; (21590 <f_write+0x234>)
   21518:	47a8      	blx	r5
   2151a:	2800      	cmp	r0, #0
   2151c:	d000      	beq.n	21520 <f_write+0x1c4>
   2151e:	e77f      	b.n	21420 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   21520:	6823      	ldr	r3, [r4, #0]
   21522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21524:	4641      	mov	r1, r8
   21526:	1a50      	subs	r0, r2, r1
   21528:	4583      	cmp	fp, r0
   2152a:	d900      	bls.n	2152e <f_write+0x1d2>
   2152c:	e780      	b.n	21430 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2152e:	465b      	mov	r3, fp
   21530:	025d      	lsls	r5, r3, #9
				continue;
   21532:	e7ac      	b.n	2148e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   21534:	2100      	movs	r1, #0
   21536:	4650      	mov	r0, sl
   21538:	4b12      	ldr	r3, [pc, #72]	; (21584 <f_write+0x228>)
   2153a:	4798      	blx	r3
   2153c:	2800      	cmp	r0, #0
   2153e:	d103      	bne.n	21548 <f_write+0x1ec>
				fp->fs->winsect = sect;
   21540:	6823      	ldr	r3, [r4, #0]
   21542:	4642      	mov	r2, r8
   21544:	62da      	str	r2, [r3, #44]	; 0x2c
   21546:	e783      	b.n	21450 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   21548:	79a2      	ldrb	r2, [r4, #6]
   2154a:	2380      	movs	r3, #128	; 0x80
   2154c:	425b      	negs	r3, r3
   2154e:	4313      	orrs	r3, r2
   21550:	71a3      	strb	r3, [r4, #6]
   21552:	2301      	movs	r3, #1
   21554:	9300      	str	r3, [sp, #0]
   21556:	e009      	b.n	2156c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   21558:	79a2      	ldrb	r2, [r4, #6]
   2155a:	2380      	movs	r3, #128	; 0x80
   2155c:	425b      	negs	r3, r3
   2155e:	4313      	orrs	r3, r2
   21560:	71a3      	strb	r3, [r4, #6]
   21562:	2301      	movs	r3, #1
   21564:	9300      	str	r3, [sp, #0]
   21566:	e001      	b.n	2156c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   21568:	2302      	movs	r3, #2
   2156a:	9300      	str	r3, [sp, #0]
}
   2156c:	9800      	ldr	r0, [sp, #0]
   2156e:	b003      	add	sp, #12
   21570:	bc3c      	pop	{r2, r3, r4, r5}
   21572:	4690      	mov	r8, r2
   21574:	4699      	mov	r9, r3
   21576:	46a2      	mov	sl, r4
   21578:	46ab      	mov	fp, r5
   2157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2157c:	0001fe91 	.word	0x0001fe91
   21580:	00020691 	.word	0x00020691
   21584:	00020315 	.word	0x00020315
   21588:	0001fe35 	.word	0x0001fe35
   2158c:	0001fe5b 	.word	0x0001fe5b
   21590:	0001fcf5 	.word	0x0001fcf5

00021594 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   21594:	b570      	push	{r4, r5, r6, lr}
   21596:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   21598:	8881      	ldrh	r1, [r0, #4]
   2159a:	6800      	ldr	r0, [r0, #0]
   2159c:	4b1c      	ldr	r3, [pc, #112]	; (21610 <f_sync+0x7c>)
   2159e:	4798      	blx	r3
	if (res == FR_OK) {
   215a0:	2800      	cmp	r0, #0
   215a2:	d102      	bne.n	215aa <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   215a4:	79a3      	ldrb	r3, [r4, #6]
   215a6:	069b      	lsls	r3, r3, #26
   215a8:	d400      	bmi.n	215ac <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   215aa:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   215ac:	69e1      	ldr	r1, [r4, #28]
   215ae:	6820      	ldr	r0, [r4, #0]
   215b0:	4b18      	ldr	r3, [pc, #96]	; (21614 <f_sync+0x80>)
   215b2:	4798      	blx	r3
			if (res == FR_OK) {
   215b4:	2800      	cmp	r0, #0
   215b6:	d1f8      	bne.n	215aa <f_sync+0x16>
				dir = fp->dir_ptr;
   215b8:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   215ba:	7aeb      	ldrb	r3, [r5, #11]
   215bc:	2220      	movs	r2, #32
   215be:	4313      	orrs	r3, r2
   215c0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   215c2:	7b23      	ldrb	r3, [r4, #12]
   215c4:	772b      	strb	r3, [r5, #28]
   215c6:	89a3      	ldrh	r3, [r4, #12]
   215c8:	0a1b      	lsrs	r3, r3, #8
   215ca:	776b      	strb	r3, [r5, #29]
   215cc:	89e3      	ldrh	r3, [r4, #14]
   215ce:	77ab      	strb	r3, [r5, #30]
   215d0:	7be3      	ldrb	r3, [r4, #15]
   215d2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   215d4:	7c23      	ldrb	r3, [r4, #16]
   215d6:	76ab      	strb	r3, [r5, #26]
   215d8:	8a23      	ldrh	r3, [r4, #16]
   215da:	0a1b      	lsrs	r3, r3, #8
   215dc:	76eb      	strb	r3, [r5, #27]
   215de:	8a63      	ldrh	r3, [r4, #18]
   215e0:	752b      	strb	r3, [r5, #20]
   215e2:	8a63      	ldrh	r3, [r4, #18]
   215e4:	0a1b      	lsrs	r3, r3, #8
   215e6:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   215e8:	4b0b      	ldr	r3, [pc, #44]	; (21618 <f_sync+0x84>)
   215ea:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   215ec:	75a8      	strb	r0, [r5, #22]
   215ee:	0a03      	lsrs	r3, r0, #8
   215f0:	75eb      	strb	r3, [r5, #23]
   215f2:	0c03      	lsrs	r3, r0, #16
   215f4:	762b      	strb	r3, [r5, #24]
   215f6:	0e00      	lsrs	r0, r0, #24
   215f8:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   215fa:	79a3      	ldrb	r3, [r4, #6]
   215fc:	2220      	movs	r2, #32
   215fe:	4393      	bics	r3, r2
   21600:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   21602:	2301      	movs	r3, #1
   21604:	6822      	ldr	r2, [r4, #0]
   21606:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   21608:	6820      	ldr	r0, [r4, #0]
   2160a:	4b04      	ldr	r3, [pc, #16]	; (2161c <f_sync+0x88>)
   2160c:	4798      	blx	r3
   2160e:	e7cc      	b.n	215aa <f_sync+0x16>
   21610:	0001fe91 	.word	0x0001fe91
   21614:	00020315 	.word	0x00020315
   21618:	0001fde5 	.word	0x0001fde5
   2161c:	00020d6d 	.word	0x00020d6d

00021620 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   21620:	b510      	push	{r4, lr}
   21622:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   21624:	4b03      	ldr	r3, [pc, #12]	; (21634 <f_close+0x14>)
   21626:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   21628:	2800      	cmp	r0, #0
   2162a:	d101      	bne.n	21630 <f_close+0x10>
   2162c:	2300      	movs	r3, #0
   2162e:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   21630:	bd10      	pop	{r4, pc}
   21632:	46c0      	nop			; (mov r8, r8)
   21634:	00021595 	.word	0x00021595

00021638 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   21638:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   2163a:	287f      	cmp	r0, #127	; 0x7f
   2163c:	d911      	bls.n	21662 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2163e:	2900      	cmp	r1, #0
   21640:	d111      	bne.n	21666 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   21642:	28c7      	cmp	r0, #199	; 0xc7
   21644:	d017      	beq.n	21676 <ff_convert+0x3e>
   21646:	4a0d      	ldr	r2, [pc, #52]	; (2167c <ff_convert+0x44>)
   21648:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   2164a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   2164c:	8811      	ldrh	r1, [r2, #0]
   2164e:	4281      	cmp	r1, r0
   21650:	d004      	beq.n	2165c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   21652:	3301      	adds	r3, #1
   21654:	b29b      	uxth	r3, r3
   21656:	3202      	adds	r2, #2
   21658:	2b80      	cmp	r3, #128	; 0x80
   2165a:	d1f7      	bne.n	2164c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   2165c:	3380      	adds	r3, #128	; 0x80
   2165e:	20ff      	movs	r0, #255	; 0xff
   21660:	4003      	ands	r3, r0
		}
	}

	return c;
}
   21662:	0018      	movs	r0, r3
   21664:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   21666:	2300      	movs	r3, #0
   21668:	28ff      	cmp	r0, #255	; 0xff
   2166a:	d8fa      	bhi.n	21662 <ff_convert+0x2a>
   2166c:	3880      	subs	r0, #128	; 0x80
   2166e:	0040      	lsls	r0, r0, #1
   21670:	4b02      	ldr	r3, [pc, #8]	; (2167c <ff_convert+0x44>)
   21672:	5ac3      	ldrh	r3, [r0, r3]
   21674:	e7f5      	b.n	21662 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   21676:	2300      	movs	r3, #0
   21678:	e7f0      	b.n	2165c <ff_convert+0x24>
   2167a:	46c0      	nop			; (mov r8, r8)
   2167c:	0002a5a8 	.word	0x0002a5a8

00021680 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   21680:	2861      	cmp	r0, #97	; 0x61
   21682:	d014      	beq.n	216ae <ff_wtoupper+0x2e>
   21684:	4b0b      	ldr	r3, [pc, #44]	; (216b4 <ff_wtoupper+0x34>)
   21686:	3304      	adds	r3, #4
   21688:	2101      	movs	r1, #1
   2168a:	2262      	movs	r2, #98	; 0x62
   2168c:	4290      	cmp	r0, r2
   2168e:	d007      	beq.n	216a0 <ff_wtoupper+0x20>
   21690:	3101      	adds	r1, #1
   21692:	3302      	adds	r3, #2
   21694:	1e9a      	subs	r2, r3, #2
   21696:	8812      	ldrh	r2, [r2, #0]
   21698:	2a00      	cmp	r2, #0
   2169a:	d1f7      	bne.n	2168c <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2169c:	0003      	movs	r3, r0
   2169e:	e004      	b.n	216aa <ff_wtoupper+0x2a>
   216a0:	1e03      	subs	r3, r0, #0
   216a2:	d002      	beq.n	216aa <ff_wtoupper+0x2a>
   216a4:	0049      	lsls	r1, r1, #1
   216a6:	4b04      	ldr	r3, [pc, #16]	; (216b8 <ff_wtoupper+0x38>)
   216a8:	5acb      	ldrh	r3, [r1, r3]
}
   216aa:	0018      	movs	r0, r3
   216ac:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   216ae:	2100      	movs	r1, #0
   216b0:	e7f8      	b.n	216a4 <ff_wtoupper+0x24>
   216b2:	46c0      	nop			; (mov r8, r8)
   216b4:	0002a6a8 	.word	0x0002a6a8
   216b8:	0002a888 	.word	0x0002a888

000216bc <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   216bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   216be:	46de      	mov	lr, fp
   216c0:	4657      	mov	r7, sl
   216c2:	464e      	mov	r6, r9
   216c4:	4645      	mov	r5, r8
   216c6:	b5e0      	push	{r5, r6, r7, lr}
   216c8:	b083      	sub	sp, #12
   216ca:	0007      	movs	r7, r0
   216cc:	4688      	mov	r8, r1
   216ce:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   216d0:	2400      	movs	r4, #0
   216d2:	2900      	cmp	r1, #0
   216d4:	dd18      	ble.n	21708 <sendPacket+0x4c>
   216d6:	4b15      	ldr	r3, [pc, #84]	; (2172c <sendPacket+0x70>)
   216d8:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   216da:	4b15      	ldr	r3, [pc, #84]	; (21730 <sendPacket+0x74>)
   216dc:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   216de:	9801      	ldr	r0, [sp, #4]
   216e0:	47d0      	blx	sl
   216e2:	2800      	cmp	r0, #0
   216e4:	d110      	bne.n	21708 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   216e6:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   216e8:	68f3      	ldr	r3, [r6, #12]
   216ea:	4699      	mov	r9, r3
   216ec:	693b      	ldr	r3, [r7, #16]
   216ee:	191d      	adds	r5, r3, r4
   216f0:	9801      	ldr	r0, [sp, #4]
   216f2:	47d8      	blx	fp
   216f4:	0003      	movs	r3, r0
   216f6:	4642      	mov	r2, r8
   216f8:	0029      	movs	r1, r5
   216fa:	0030      	movs	r0, r6
   216fc:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   216fe:	2800      	cmp	r0, #0
   21700:	db02      	blt.n	21708 <sendPacket+0x4c>
            break;
        sent += rc;
   21702:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   21704:	45a0      	cmp	r8, r4
   21706:	dcea      	bgt.n	216de <sendPacket+0x22>
    }
    if (sent == length)
   21708:	45a0      	cmp	r8, r4
   2170a:	d10c      	bne.n	21726 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2170c:	69b9      	ldr	r1, [r7, #24]
   2170e:	0038      	movs	r0, r7
   21710:	3054      	adds	r0, #84	; 0x54
   21712:	4b08      	ldr	r3, [pc, #32]	; (21734 <sendPacket+0x78>)
   21714:	4798      	blx	r3
        rc = SUCCESS;
   21716:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   21718:	b003      	add	sp, #12
   2171a:	bc3c      	pop	{r2, r3, r4, r5}
   2171c:	4690      	mov	r8, r2
   2171e:	4699      	mov	r9, r3
   21720:	46a2      	mov	sl, r4
   21722:	46ab      	mov	fp, r5
   21724:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   21726:	2001      	movs	r0, #1
   21728:	4240      	negs	r0, r0
    return rc;
   2172a:	e7f5      	b.n	21718 <sendPacket+0x5c>
   2172c:	00022029 	.word	0x00022029
   21730:	00022065 	.word	0x00022065
   21734:	00022051 	.word	0x00022051

00021738 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   21738:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   2173a:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   2173c:	2100      	movs	r1, #0
   2173e:	6241      	str	r1, [r0, #36]	; 0x24
   21740:	62c1      	str	r1, [r0, #44]	; 0x2c
   21742:	6341      	str	r1, [r0, #52]	; 0x34
   21744:	63c1      	str	r1, [r0, #60]	; 0x3c
   21746:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   21748:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   2174a:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   2174c:	9b02      	ldr	r3, [sp, #8]
   2174e:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   21750:	9b03      	ldr	r3, [sp, #12]
   21752:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   21754:	9b04      	ldr	r3, [sp, #16]
   21756:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   21758:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   2175a:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   2175c:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   2175e:	2301      	movs	r3, #1
   21760:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   21762:	3054      	adds	r0, #84	; 0x54
   21764:	4b01      	ldr	r3, [pc, #4]	; (2176c <MQTTClientInit+0x34>)
   21766:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   21768:	bd10      	pop	{r4, pc}
   2176a:	46c0      	nop			; (mov r8, r8)
   2176c:	00022079 	.word	0x00022079

00021770 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   21770:	b5f0      	push	{r4, r5, r6, r7, lr}
   21772:	46de      	mov	lr, fp
   21774:	4657      	mov	r7, sl
   21776:	464e      	mov	r6, r9
   21778:	4645      	mov	r5, r8
   2177a:	b5e0      	push	{r5, r6, r7, lr}
   2177c:	b085      	sub	sp, #20
   2177e:	4682      	mov	sl, r0
   21780:	000f      	movs	r7, r1
   21782:	4691      	mov	r9, r2
   21784:	0004      	movs	r4, r0
   21786:	3424      	adds	r4, #36	; 0x24
   21788:	234c      	movs	r3, #76	; 0x4c
   2178a:	4453      	add	r3, sl
   2178c:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   2178e:	2301      	movs	r3, #1
   21790:	425b      	negs	r3, r3
   21792:	9301      	str	r3, [sp, #4]
   21794:	e056      	b.n	21844 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   21796:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   21798:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   2179a:	687a      	ldr	r2, [r7, #4]
   2179c:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   2179e:	780a      	ldrb	r2, [r1, #0]
   217a0:	2a00      	cmp	r2, #0
   217a2:	d04a      	beq.n	2183a <deliverMessage+0xca>
   217a4:	42b3      	cmp	r3, r6
   217a6:	d24a      	bcs.n	2183e <deliverMessage+0xce>
   217a8:	3101      	adds	r1, #1
   217aa:	1e70      	subs	r0, r6, #1
   217ac:	e008      	b.n	217c0 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   217ae:	2a2f      	cmp	r2, #47	; 0x2f
   217b0:	d10f      	bne.n	217d2 <deliverMessage+0x62>
        curn++;
   217b2:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   217b4:	780a      	ldrb	r2, [r1, #0]
   217b6:	2a00      	cmp	r2, #0
   217b8:	d03f      	beq.n	2183a <deliverMessage+0xca>
   217ba:	429e      	cmp	r6, r3
   217bc:	d93f      	bls.n	2183e <deliverMessage+0xce>
   217be:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   217c0:	781d      	ldrb	r5, [r3, #0]
   217c2:	2d2f      	cmp	r5, #47	; 0x2f
   217c4:	d0f3      	beq.n	217ae <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   217c6:	2a2b      	cmp	r2, #43	; 0x2b
   217c8:	d008      	beq.n	217dc <deliverMessage+0x6c>
   217ca:	2a23      	cmp	r2, #35	; 0x23
   217cc:	d013      	beq.n	217f6 <deliverMessage+0x86>
   217ce:	4295      	cmp	r5, r2
   217d0:	d0ef      	beq.n	217b2 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   217d2:	429e      	cmp	r6, r3
   217d4:	d133      	bne.n	2183e <deliverMessage+0xce>
   217d6:	2a00      	cmp	r2, #0
   217d8:	d03d      	beq.n	21856 <deliverMessage+0xe6>
   217da:	e030      	b.n	2183e <deliverMessage+0xce>
            char* nextpos = curn + 1;
   217dc:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   217de:	42ae      	cmp	r6, r5
   217e0:	d927      	bls.n	21832 <deliverMessage+0xc2>
   217e2:	785a      	ldrb	r2, [r3, #1]
   217e4:	2a2f      	cmp	r2, #47	; 0x2f
   217e6:	d01f      	beq.n	21828 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   217e8:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   217ea:	4283      	cmp	r3, r0
   217ec:	d0e1      	beq.n	217b2 <deliverMessage+0x42>
   217ee:	785a      	ldrb	r2, [r3, #1]
   217f0:	2a2f      	cmp	r2, #47	; 0x2f
   217f2:	d1f9      	bne.n	217e8 <deliverMessage+0x78>
   217f4:	e7dd      	b.n	217b2 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   217f6:	1e73      	subs	r3, r6, #1
   217f8:	e7db      	b.n	217b2 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   217fa:	9b01      	ldr	r3, [sp, #4]
   217fc:	3301      	adds	r3, #1
   217fe:	d007      	beq.n	21810 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   21800:	9801      	ldr	r0, [sp, #4]
   21802:	b005      	add	sp, #20
   21804:	bc3c      	pop	{r2, r3, r4, r5}
   21806:	4690      	mov	r8, r2
   21808:	4699      	mov	r9, r3
   2180a:	46a2      	mov	sl, r4
   2180c:	46ab      	mov	fp, r5
   2180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   21810:	4653      	mov	r3, sl
   21812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   21814:	2b00      	cmp	r3, #0
   21816:	d0f3      	beq.n	21800 <deliverMessage+0x90>
    md->topicName = aTopicName;
   21818:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   2181a:	464a      	mov	r2, r9
   2181c:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   2181e:	a802      	add	r0, sp, #8
   21820:	4798      	blx	r3
        rc = SUCCESS;
   21822:	2300      	movs	r3, #0
   21824:	9301      	str	r3, [sp, #4]
    return rc;
   21826:	e7eb      	b.n	21800 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   21828:	780a      	ldrb	r2, [r1, #0]
   2182a:	2a00      	cmp	r2, #0
   2182c:	d007      	beq.n	2183e <deliverMessage+0xce>
        curn++;
   2182e:	002b      	movs	r3, r5
   21830:	e7c5      	b.n	217be <deliverMessage+0x4e>
   21832:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   21834:	780a      	ldrb	r2, [r1, #0]
   21836:	2a00      	cmp	r2, #0
   21838:	d101      	bne.n	2183e <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   2183a:	429e      	cmp	r6, r3
   2183c:	d00b      	beq.n	21856 <deliverMessage+0xe6>
   2183e:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21840:	4544      	cmp	r4, r8
   21842:	d0da      	beq.n	217fa <deliverMessage+0x8a>
   21844:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   21846:	6821      	ldr	r1, [r4, #0]
   21848:	2900      	cmp	r1, #0
   2184a:	d0f8      	beq.n	2183e <deliverMessage+0xce>
   2184c:	0038      	movs	r0, r7
   2184e:	4b08      	ldr	r3, [pc, #32]	; (21870 <deliverMessage+0x100>)
   21850:	4798      	blx	r3
   21852:	2800      	cmp	r0, #0
   21854:	d09f      	beq.n	21796 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   21856:	465b      	mov	r3, fp
   21858:	685b      	ldr	r3, [r3, #4]
   2185a:	2b00      	cmp	r3, #0
   2185c:	d0ef      	beq.n	2183e <deliverMessage+0xce>
    md->topicName = aTopicName;
   2185e:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   21860:	464a      	mov	r2, r9
   21862:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   21864:	a802      	add	r0, sp, #8
   21866:	4798      	blx	r3
                rc = SUCCESS;
   21868:	2300      	movs	r3, #0
   2186a:	9301      	str	r3, [sp, #4]
   2186c:	e7e7      	b.n	2183e <deliverMessage+0xce>
   2186e:	46c0      	nop			; (mov r8, r8)
   21870:	00022955 	.word	0x00022955

00021874 <keepalive>:


int keepalive(MQTTClient* c)
{
   21874:	b510      	push	{r4, lr}
   21876:	b084      	sub	sp, #16
   21878:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   2187a:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   2187c:	69a3      	ldr	r3, [r4, #24]
   2187e:	2b00      	cmp	r3, #0
   21880:	d101      	bne.n	21886 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   21882:	b004      	add	sp, #16
   21884:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   21886:	0020      	movs	r0, r4
   21888:	3054      	adds	r0, #84	; 0x54
   2188a:	4b14      	ldr	r3, [pc, #80]	; (218dc <keepalive+0x68>)
   2188c:	4798      	blx	r3
   2188e:	2800      	cmp	r0, #0
   21890:	d01d      	beq.n	218ce <keepalive+0x5a>
        if (!c->ping_outstanding)
   21892:	7f23      	ldrb	r3, [r4, #28]
   21894:	2b00      	cmp	r3, #0
   21896:	d11d      	bne.n	218d4 <keepalive+0x60>
            TimerInit(&timer);
   21898:	a801      	add	r0, sp, #4
   2189a:	4b11      	ldr	r3, [pc, #68]	; (218e0 <keepalive+0x6c>)
   2189c:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2189e:	21fa      	movs	r1, #250	; 0xfa
   218a0:	0089      	lsls	r1, r1, #2
   218a2:	a801      	add	r0, sp, #4
   218a4:	4b0f      	ldr	r3, [pc, #60]	; (218e4 <keepalive+0x70>)
   218a6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   218a8:	68a1      	ldr	r1, [r4, #8]
   218aa:	6920      	ldr	r0, [r4, #16]
   218ac:	4b0e      	ldr	r3, [pc, #56]	; (218e8 <keepalive+0x74>)
   218ae:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   218b0:	2800      	cmp	r0, #0
   218b2:	dd09      	ble.n	218c8 <keepalive+0x54>
   218b4:	aa01      	add	r2, sp, #4
   218b6:	0001      	movs	r1, r0
   218b8:	0020      	movs	r0, r4
   218ba:	4b0c      	ldr	r3, [pc, #48]	; (218ec <keepalive+0x78>)
   218bc:	4798      	blx	r3
   218be:	2800      	cmp	r0, #0
   218c0:	d1df      	bne.n	21882 <keepalive+0xe>
                c->ping_outstanding = 1;
   218c2:	2301      	movs	r3, #1
   218c4:	7723      	strb	r3, [r4, #28]
   218c6:	e7dc      	b.n	21882 <keepalive+0xe>
    int rc = FAILURE;
   218c8:	2001      	movs	r0, #1
   218ca:	4240      	negs	r0, r0
   218cc:	e7d9      	b.n	21882 <keepalive+0xe>
   218ce:	2001      	movs	r0, #1
   218d0:	4240      	negs	r0, r0
   218d2:	e7d6      	b.n	21882 <keepalive+0xe>
   218d4:	2001      	movs	r0, #1
   218d6:	4240      	negs	r0, r0
    return rc;
   218d8:	e7d3      	b.n	21882 <keepalive+0xe>
   218da:	46c0      	nop			; (mov r8, r8)
   218dc:	00022029 	.word	0x00022029
   218e0:	00022079 	.word	0x00022079
   218e4:	00022041 	.word	0x00022041
   218e8:	0002263d 	.word	0x0002263d
   218ec:	000216bd 	.word	0x000216bd

000218f0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   218f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   218f2:	46de      	mov	lr, fp
   218f4:	464f      	mov	r7, r9
   218f6:	4646      	mov	r6, r8
   218f8:	b5c0      	push	{r6, r7, lr}
   218fa:	b090      	sub	sp, #64	; 0x40
   218fc:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   218fe:	6d05      	ldr	r5, [r0, #80]	; 0x50
   21900:	68ae      	ldr	r6, [r5, #8]
   21902:	6947      	ldr	r7, [r0, #20]
   21904:	9107      	str	r1, [sp, #28]
   21906:	0008      	movs	r0, r1
   21908:	4b65      	ldr	r3, [pc, #404]	; (21aa0 <cycle+0x1b0>)
   2190a:	4798      	blx	r3
   2190c:	0003      	movs	r3, r0
   2190e:	2201      	movs	r2, #1
   21910:	0039      	movs	r1, r7
   21912:	0028      	movs	r0, r5
   21914:	47b0      	blx	r6
   21916:	0005      	movs	r5, r0
   21918:	2801      	cmp	r0, #1
   2191a:	d000      	beq.n	2191e <cycle+0x2e>
   2191c:	e0bd      	b.n	21a9a <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2191e:	9807      	ldr	r0, [sp, #28]
   21920:	4b5f      	ldr	r3, [pc, #380]	; (21aa0 <cycle+0x1b0>)
   21922:	4798      	blx	r3
   21924:	9006      	str	r0, [sp, #24]
   21926:	2604      	movs	r6, #4
    *value = 0;
   21928:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   2192a:	237f      	movs	r3, #127	; 0x7f
   2192c:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2192e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   21930:	6883      	ldr	r3, [r0, #8]
   21932:	4698      	mov	r8, r3
   21934:	9b06      	ldr	r3, [sp, #24]
   21936:	2201      	movs	r2, #1
   21938:	a90c      	add	r1, sp, #48	; 0x30
   2193a:	47c0      	blx	r8
        if (rc != 1)
   2193c:	2801      	cmp	r0, #1
   2193e:	d10e      	bne.n	2195e <cycle+0x6e>
        *value += (i & 127) * multiplier;
   21940:	ab02      	add	r3, sp, #8
   21942:	2228      	movs	r2, #40	; 0x28
   21944:	189b      	adds	r3, r3, r2
   21946:	781b      	ldrb	r3, [r3, #0]
   21948:	465a      	mov	r2, fp
   2194a:	401a      	ands	r2, r3
   2194c:	436a      	muls	r2, r5
   2194e:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   21950:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   21952:	b25b      	sxtb	r3, r3
   21954:	2b00      	cmp	r3, #0
   21956:	da02      	bge.n	2195e <cycle+0x6e>
   21958:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2195a:	2e00      	cmp	r6, #0
   2195c:	d1e7      	bne.n	2192e <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2195e:	6963      	ldr	r3, [r4, #20]
   21960:	1c58      	adds	r0, r3, #1
   21962:	0039      	movs	r1, r7
   21964:	4b4f      	ldr	r3, [pc, #316]	; (21aa4 <cycle+0x1b4>)
   21966:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   21968:	2f00      	cmp	r7, #0
   2196a:	dd10      	ble.n	2198e <cycle+0x9e>
   2196c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   2196e:	68b3      	ldr	r3, [r6, #8]
   21970:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   21972:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   21974:	6963      	ldr	r3, [r4, #20]
   21976:	181d      	adds	r5, r3, r0
   21978:	9807      	ldr	r0, [sp, #28]
   2197a:	4b49      	ldr	r3, [pc, #292]	; (21aa0 <cycle+0x1b0>)
   2197c:	4798      	blx	r3
   2197e:	0003      	movs	r3, r0
   21980:	003a      	movs	r2, r7
   21982:	0029      	movs	r1, r5
   21984:	0030      	movs	r0, r6
   21986:	47c8      	blx	r9
   21988:	42b8      	cmp	r0, r7
   2198a:	d000      	beq.n	2198e <cycle+0x9e>
   2198c:	e085      	b.n	21a9a <cycle+0x1aa>
    header.byte = c->readbuf[0];
   2198e:	6963      	ldr	r3, [r4, #20]
   21990:	781d      	ldrb	r5, [r3, #0]
   21992:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   21994:	2d05      	cmp	r5, #5
   21996:	d051      	beq.n	21a3c <cycle+0x14c>
   21998:	2d0d      	cmp	r5, #13
   2199a:	d06e      	beq.n	21a7a <cycle+0x18a>
        rc = SUCCESS;
   2199c:	2600      	movs	r6, #0
    switch (packet_type)
   2199e:	2d03      	cmp	r5, #3
   219a0:	d16e      	bne.n	21a80 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   219a2:	68e2      	ldr	r2, [r4, #12]
   219a4:	9204      	str	r2, [sp, #16]
   219a6:	9303      	str	r3, [sp, #12]
   219a8:	ab0f      	add	r3, sp, #60	; 0x3c
   219aa:	9302      	str	r3, [sp, #8]
   219ac:	ab0e      	add	r3, sp, #56	; 0x38
   219ae:	9301      	str	r3, [sp, #4]
   219b0:	ab09      	add	r3, sp, #36	; 0x24
   219b2:	9300      	str	r3, [sp, #0]
   219b4:	ab0d      	add	r3, sp, #52	; 0x34
   219b6:	2229      	movs	r2, #41	; 0x29
   219b8:	a902      	add	r1, sp, #8
   219ba:	468c      	mov	ip, r1
   219bc:	4462      	add	r2, ip
   219be:	a908      	add	r1, sp, #32
   219c0:	202a      	movs	r0, #42	; 0x2a
   219c2:	4460      	add	r0, ip
   219c4:	4e38      	ldr	r6, [pc, #224]	; (21aa8 <cycle+0x1b8>)
   219c6:	47b0      	blx	r6
        rc = SUCCESS;
   219c8:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   219ca:	2801      	cmp	r0, #1
   219cc:	d15b      	bne.n	21a86 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   219ce:	ae0c      	add	r6, sp, #48	; 0x30
   219d0:	ab02      	add	r3, sp, #8
   219d2:	7e1b      	ldrb	r3, [r3, #24]
   219d4:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   219d6:	0032      	movs	r2, r6
   219d8:	a909      	add	r1, sp, #36	; 0x24
   219da:	0020      	movs	r0, r4
   219dc:	4b33      	ldr	r3, [pc, #204]	; (21aac <cycle+0x1bc>)
   219de:	4798      	blx	r3
            if (msg.qos != QOS0)
   219e0:	7833      	ldrb	r3, [r6, #0]
   219e2:	2b00      	cmp	r3, #0
   219e4:	d028      	beq.n	21a38 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   219e6:	2b01      	cmp	r3, #1
   219e8:	d004      	beq.n	219f4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   219ea:	2b02      	cmp	r3, #2
   219ec:	d016      	beq.n	21a1c <cycle+0x12c>
   219ee:	2601      	movs	r6, #1
   219f0:	4276      	negs	r6, r6
   219f2:	e048      	b.n	21a86 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   219f4:	ab0c      	add	r3, sp, #48	; 0x30
   219f6:	889b      	ldrh	r3, [r3, #4]
   219f8:	9300      	str	r3, [sp, #0]
   219fa:	2300      	movs	r3, #0
   219fc:	2204      	movs	r2, #4
   219fe:	68a1      	ldr	r1, [r4, #8]
   21a00:	6920      	ldr	r0, [r4, #16]
   21a02:	4e2b      	ldr	r6, [pc, #172]	; (21ab0 <cycle+0x1c0>)
   21a04:	47b0      	blx	r6
   21a06:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   21a08:	2900      	cmp	r1, #0
   21a0a:	dd12      	ble.n	21a32 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   21a0c:	9a07      	ldr	r2, [sp, #28]
   21a0e:	0020      	movs	r0, r4
   21a10:	4b28      	ldr	r3, [pc, #160]	; (21ab4 <cycle+0x1c4>)
   21a12:	4798      	blx	r3
   21a14:	0006      	movs	r6, r0
                if (rc == FAILURE)
   21a16:	1c43      	adds	r3, r0, #1
   21a18:	d132      	bne.n	21a80 <cycle+0x190>
   21a1a:	e034      	b.n	21a86 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   21a1c:	ab0c      	add	r3, sp, #48	; 0x30
   21a1e:	889b      	ldrh	r3, [r3, #4]
   21a20:	9300      	str	r3, [sp, #0]
   21a22:	2300      	movs	r3, #0
   21a24:	2205      	movs	r2, #5
   21a26:	68a1      	ldr	r1, [r4, #8]
   21a28:	6920      	ldr	r0, [r4, #16]
   21a2a:	4e21      	ldr	r6, [pc, #132]	; (21ab0 <cycle+0x1c0>)
   21a2c:	47b0      	blx	r6
   21a2e:	0001      	movs	r1, r0
   21a30:	e7ea      	b.n	21a08 <cycle+0x118>
   21a32:	2601      	movs	r6, #1
   21a34:	4276      	negs	r6, r6
   21a36:	e026      	b.n	21a86 <cycle+0x196>
        rc = SUCCESS;
   21a38:	2600      	movs	r6, #0
   21a3a:	e021      	b.n	21a80 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21a3c:	68e2      	ldr	r2, [r4, #12]
   21a3e:	9200      	str	r2, [sp, #0]
   21a40:	aa0c      	add	r2, sp, #48	; 0x30
   21a42:	a908      	add	r1, sp, #32
   21a44:	a809      	add	r0, sp, #36	; 0x24
   21a46:	4e1c      	ldr	r6, [pc, #112]	; (21ab8 <cycle+0x1c8>)
   21a48:	47b0      	blx	r6
   21a4a:	2801      	cmp	r0, #1
   21a4c:	d002      	beq.n	21a54 <cycle+0x164>
   21a4e:	2601      	movs	r6, #1
   21a50:	4276      	negs	r6, r6
   21a52:	e01b      	b.n	21a8c <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   21a54:	ab0c      	add	r3, sp, #48	; 0x30
   21a56:	881b      	ldrh	r3, [r3, #0]
   21a58:	9300      	str	r3, [sp, #0]
   21a5a:	2300      	movs	r3, #0
   21a5c:	2206      	movs	r2, #6
   21a5e:	68a1      	ldr	r1, [r4, #8]
   21a60:	6920      	ldr	r0, [r4, #16]
   21a62:	4e13      	ldr	r6, [pc, #76]	; (21ab0 <cycle+0x1c0>)
   21a64:	47b0      	blx	r6
   21a66:	2800      	cmp	r0, #0
   21a68:	ddf1      	ble.n	21a4e <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   21a6a:	9a07      	ldr	r2, [sp, #28]
   21a6c:	0001      	movs	r1, r0
   21a6e:	0020      	movs	r0, r4
   21a70:	4b10      	ldr	r3, [pc, #64]	; (21ab4 <cycle+0x1c4>)
   21a72:	4798      	blx	r3
   21a74:	1e06      	subs	r6, r0, #0
   21a76:	d1ea      	bne.n	21a4e <cycle+0x15e>
   21a78:	e002      	b.n	21a80 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   21a7a:	2300      	movs	r3, #0
   21a7c:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   21a7e:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   21a80:	0020      	movs	r0, r4
   21a82:	4b0e      	ldr	r3, [pc, #56]	; (21abc <cycle+0x1cc>)
   21a84:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   21a86:	2e00      	cmp	r6, #0
   21a88:	d100      	bne.n	21a8c <cycle+0x19c>
   21a8a:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   21a8c:	0030      	movs	r0, r6
   21a8e:	b010      	add	sp, #64	; 0x40
   21a90:	bc1c      	pop	{r2, r3, r4}
   21a92:	4690      	mov	r8, r2
   21a94:	4699      	mov	r9, r3
   21a96:	46a3      	mov	fp, r4
   21a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a9a:	4d09      	ldr	r5, [pc, #36]	; (21ac0 <cycle+0x1d0>)
        rc = SUCCESS;
   21a9c:	2600      	movs	r6, #0
   21a9e:	e7ef      	b.n	21a80 <cycle+0x190>
   21aa0:	00022065 	.word	0x00022065
   21aa4:	00022755 	.word	0x00022755
   21aa8:	0002264d 	.word	0x0002264d
   21aac:	00021771 	.word	0x00021771
   21ab0:	00022a89 	.word	0x00022a89
   21ab4:	000216bd 	.word	0x000216bd
   21ab8:	000226e5 	.word	0x000226e5
   21abc:	00021875 	.word	0x00021875
   21ac0:	0000ffff 	.word	0x0000ffff

00021ac4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   21ac4:	b570      	push	{r4, r5, r6, lr}
   21ac6:	b084      	sub	sp, #16
   21ac8:	0005      	movs	r5, r0
   21aca:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   21acc:	a801      	add	r0, sp, #4
   21ace:	4b0a      	ldr	r3, [pc, #40]	; (21af8 <MQTTYield+0x34>)
   21ad0:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   21ad2:	0021      	movs	r1, r4
   21ad4:	a801      	add	r0, sp, #4
   21ad6:	4b09      	ldr	r3, [pc, #36]	; (21afc <MQTTYield+0x38>)
   21ad8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   21ada:	4c09      	ldr	r4, [pc, #36]	; (21b00 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   21adc:	4e09      	ldr	r6, [pc, #36]	; (21b04 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   21ade:	a901      	add	r1, sp, #4
   21ae0:	0028      	movs	r0, r5
   21ae2:	47a0      	blx	r4
   21ae4:	1c43      	adds	r3, r0, #1
   21ae6:	d004      	beq.n	21af2 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   21ae8:	a801      	add	r0, sp, #4
   21aea:	47b0      	blx	r6
   21aec:	2800      	cmp	r0, #0
   21aee:	d0f6      	beq.n	21ade <MQTTYield+0x1a>
    int rc = SUCCESS;
   21af0:	2000      	movs	r0, #0
        
    return rc;
}
   21af2:	b004      	add	sp, #16
   21af4:	bd70      	pop	{r4, r5, r6, pc}
   21af6:	46c0      	nop			; (mov r8, r8)
   21af8:	00022079 	.word	0x00022079
   21afc:	00022041 	.word	0x00022041
   21b00:	000218f1 	.word	0x000218f1
   21b04:	00022029 	.word	0x00022029

00021b08 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   21b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b0a:	b083      	sub	sp, #12
   21b0c:	9001      	str	r0, [sp, #4]
   21b0e:	000e      	movs	r6, r1
   21b10:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   21b12:	2401      	movs	r4, #1
   21b14:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   21b16:	4f08      	ldr	r7, [pc, #32]	; (21b38 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   21b18:	4d08      	ldr	r5, [pc, #32]	; (21b3c <waitfor+0x34>)
        if (TimerIsExpired(timer))
   21b1a:	9800      	ldr	r0, [sp, #0]
   21b1c:	47b8      	blx	r7
   21b1e:	2800      	cmp	r0, #0
   21b20:	d106      	bne.n	21b30 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   21b22:	9900      	ldr	r1, [sp, #0]
   21b24:	9801      	ldr	r0, [sp, #4]
   21b26:	47a8      	blx	r5
   21b28:	0004      	movs	r4, r0
   21b2a:	42b0      	cmp	r0, r6
   21b2c:	d1f5      	bne.n	21b1a <waitfor+0x12>
   21b2e:	0034      	movs	r4, r6
    
    return rc;
}
   21b30:	0020      	movs	r0, r4
   21b32:	b003      	add	sp, #12
   21b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b36:	46c0      	nop			; (mov r8, r8)
   21b38:	00022029 	.word	0x00022029
   21b3c:	000218f1 	.word	0x000218f1

00021b40 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   21b40:	b530      	push	{r4, r5, lr}
   21b42:	b09b      	sub	sp, #108	; 0x6c
   21b44:	0004      	movs	r4, r0
   21b46:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   21b48:	2258      	movs	r2, #88	; 0x58
   21b4a:	4928      	ldr	r1, [pc, #160]	; (21bec <MQTTConnect+0xac>)
   21b4c:	a801      	add	r0, sp, #4
   21b4e:	4b28      	ldr	r3, [pc, #160]	; (21bf0 <MQTTConnect+0xb0>)
   21b50:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   21b52:	6a23      	ldr	r3, [r4, #32]
   21b54:	2b00      	cmp	r3, #0
   21b56:	d13f      	bne.n	21bd8 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   21b58:	a817      	add	r0, sp, #92	; 0x5c
   21b5a:	4b26      	ldr	r3, [pc, #152]	; (21bf4 <MQTTConnect+0xb4>)
   21b5c:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   21b5e:	6861      	ldr	r1, [r4, #4]
   21b60:	a817      	add	r0, sp, #92	; 0x5c
   21b62:	4b25      	ldr	r3, [pc, #148]	; (21bf8 <MQTTConnect+0xb8>)
   21b64:	4798      	blx	r3

    if (options == 0)
   21b66:	2d00      	cmp	r5, #0
   21b68:	d015      	beq.n	21b96 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   21b6a:	8b29      	ldrh	r1, [r5, #24]
   21b6c:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   21b6e:	0020      	movs	r0, r4
   21b70:	3054      	adds	r0, #84	; 0x54
   21b72:	4b22      	ldr	r3, [pc, #136]	; (21bfc <MQTTConnect+0xbc>)
   21b74:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   21b76:	002a      	movs	r2, r5
   21b78:	68a1      	ldr	r1, [r4, #8]
   21b7a:	6920      	ldr	r0, [r4, #16]
   21b7c:	4b20      	ldr	r3, [pc, #128]	; (21c00 <MQTTConnect+0xc0>)
   21b7e:	4798      	blx	r3
   21b80:	2800      	cmp	r0, #0
   21b82:	dd2c      	ble.n	21bde <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   21b84:	aa17      	add	r2, sp, #92	; 0x5c
   21b86:	0001      	movs	r1, r0
   21b88:	0020      	movs	r0, r4
   21b8a:	4b1e      	ldr	r3, [pc, #120]	; (21c04 <MQTTConnect+0xc4>)
   21b8c:	4798      	blx	r3
   21b8e:	2800      	cmp	r0, #0
   21b90:	d003      	beq.n	21b9a <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   21b92:	b01b      	add	sp, #108	; 0x6c
   21b94:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   21b96:	ad01      	add	r5, sp, #4
   21b98:	e7e7      	b.n	21b6a <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   21b9a:	aa17      	add	r2, sp, #92	; 0x5c
   21b9c:	2102      	movs	r1, #2
   21b9e:	0020      	movs	r0, r4
   21ba0:	4b19      	ldr	r3, [pc, #100]	; (21c08 <MQTTConnect+0xc8>)
   21ba2:	4798      	blx	r3
   21ba4:	2802      	cmp	r0, #2
   21ba6:	d11d      	bne.n	21be4 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   21ba8:	466b      	mov	r3, sp
   21baa:	1c99      	adds	r1, r3, #2
   21bac:	23ff      	movs	r3, #255	; 0xff
   21bae:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   21bb0:	466b      	mov	r3, sp
   21bb2:	1cd8      	adds	r0, r3, #3
   21bb4:	2300      	movs	r3, #0
   21bb6:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   21bb8:	68e3      	ldr	r3, [r4, #12]
   21bba:	6962      	ldr	r2, [r4, #20]
   21bbc:	4d13      	ldr	r5, [pc, #76]	; (21c0c <MQTTConnect+0xcc>)
   21bbe:	47a8      	blx	r5
   21bc0:	2801      	cmp	r0, #1
   21bc2:	d002      	beq.n	21bca <MQTTConnect+0x8a>
            rc = FAILURE;
   21bc4:	2001      	movs	r0, #1
   21bc6:	4240      	negs	r0, r0
   21bc8:	e7e3      	b.n	21b92 <MQTTConnect+0x52>
            rc = connack_rc;
   21bca:	466b      	mov	r3, sp
   21bcc:	7898      	ldrb	r0, [r3, #2]
    if (rc == SUCCESS)
   21bce:	2800      	cmp	r0, #0
   21bd0:	d1df      	bne.n	21b92 <MQTTConnect+0x52>
        c->isconnected = 1;
   21bd2:	2301      	movs	r3, #1
   21bd4:	6223      	str	r3, [r4, #32]
    return rc;
   21bd6:	e7dc      	b.n	21b92 <MQTTConnect+0x52>
    int rc = FAILURE;
   21bd8:	2001      	movs	r0, #1
   21bda:	4240      	negs	r0, r0
   21bdc:	e7d9      	b.n	21b92 <MQTTConnect+0x52>
   21bde:	2001      	movs	r0, #1
   21be0:	4240      	negs	r0, r0
   21be2:	e7d6      	b.n	21b92 <MQTTConnect+0x52>
        rc = FAILURE;
   21be4:	2001      	movs	r0, #1
   21be6:	4240      	negs	r0, r0
   21be8:	e7d3      	b.n	21b92 <MQTTConnect+0x52>
   21bea:	46c0      	nop			; (mov r8, r8)
   21bec:	0002aa68 	.word	0x0002aa68
   21bf0:	0002626d 	.word	0x0002626d
   21bf4:	00022079 	.word	0x00022079
   21bf8:	00022041 	.word	0x00022041
   21bfc:	00022051 	.word	0x00022051
   21c00:	00022459 	.word	0x00022459
   21c04:	000216bd 	.word	0x000216bd
   21c08:	00021b09 	.word	0x00021b09
   21c0c:	000225a1 	.word	0x000225a1

00021c10 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   21c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c12:	b091      	sub	sp, #68	; 0x44
   21c14:	0004      	movs	r4, r0
   21c16:	000f      	movs	r7, r1
   21c18:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   21c1a:	2300      	movs	r3, #0
   21c1c:	930b      	str	r3, [sp, #44]	; 0x2c
   21c1e:	930c      	str	r3, [sp, #48]	; 0x30
	int Qoss = (int) qos;
   21c20:	9209      	str	r2, [sp, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
   21c22:	910a      	str	r1, [sp, #40]	; 0x28
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21c24:	6a03      	ldr	r3, [r0, #32]
   21c26:	2b00      	cmp	r3, #0
   21c28:	d05c      	beq.n	21ce4 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   21c2a:	a80d      	add	r0, sp, #52	; 0x34
   21c2c:	4b32      	ldr	r3, [pc, #200]	; (21cf8 <MQTTSubscribe+0xe8>)
   21c2e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21c30:	6861      	ldr	r1, [r4, #4]
   21c32:	a80d      	add	r0, sp, #52	; 0x34
   21c34:	4b31      	ldr	r3, [pc, #196]	; (21cfc <MQTTSubscribe+0xec>)
   21c36:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21c38:	6920      	ldr	r0, [r4, #16]
   21c3a:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21c3c:	6823      	ldr	r3, [r4, #0]
   21c3e:	4a30      	ldr	r2, [pc, #192]	; (21d00 <MQTTSubscribe+0xf0>)
   21c40:	4293      	cmp	r3, r2
   21c42:	d017      	beq.n	21c74 <MQTTSubscribe+0x64>
   21c44:	3301      	adds	r3, #1
   21c46:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21c48:	b29b      	uxth	r3, r3
   21c4a:	aa09      	add	r2, sp, #36	; 0x24
   21c4c:	9202      	str	r2, [sp, #8]
   21c4e:	aa0a      	add	r2, sp, #40	; 0x28
   21c50:	9201      	str	r2, [sp, #4]
   21c52:	2201      	movs	r2, #1
   21c54:	9200      	str	r2, [sp, #0]
   21c56:	2200      	movs	r2, #0
   21c58:	4e2a      	ldr	r6, [pc, #168]	; (21d04 <MQTTSubscribe+0xf4>)
   21c5a:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   21c5c:	2800      	cmp	r0, #0
   21c5e:	dd44      	ble.n	21cea <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21c60:	aa0d      	add	r2, sp, #52	; 0x34
   21c62:	0001      	movs	r1, r0
   21c64:	0020      	movs	r0, r4
   21c66:	4b28      	ldr	r3, [pc, #160]	; (21d08 <MQTTSubscribe+0xf8>)
   21c68:	4798      	blx	r3
   21c6a:	1e06      	subs	r6, r0, #0
   21c6c:	d004      	beq.n	21c78 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21c6e:	0030      	movs	r0, r6
   21c70:	b011      	add	sp, #68	; 0x44
   21c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21c74:	2301      	movs	r3, #1
   21c76:	e7e6      	b.n	21c46 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   21c78:	aa0d      	add	r2, sp, #52	; 0x34
   21c7a:	2109      	movs	r1, #9
   21c7c:	0020      	movs	r0, r4
   21c7e:	4b23      	ldr	r3, [pc, #140]	; (21d0c <MQTTSubscribe+0xfc>)
   21c80:	4798      	blx	r3
   21c82:	2809      	cmp	r0, #9
   21c84:	d134      	bne.n	21cf0 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   21c86:	2300      	movs	r3, #0
   21c88:	9307      	str	r3, [sp, #28]
   21c8a:	3b01      	subs	r3, #1
   21c8c:	9308      	str	r3, [sp, #32]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21c8e:	68e3      	ldr	r3, [r4, #12]
   21c90:	9301      	str	r3, [sp, #4]
   21c92:	6963      	ldr	r3, [r4, #20]
   21c94:	9300      	str	r3, [sp, #0]
   21c96:	ab08      	add	r3, sp, #32
   21c98:	aa07      	add	r2, sp, #28
   21c9a:	2101      	movs	r1, #1
   21c9c:	3009      	adds	r0, #9
   21c9e:	ad02      	add	r5, sp, #8
   21ca0:	46ac      	mov	ip, r5
   21ca2:	4460      	add	r0, ip
   21ca4:	4d1a      	ldr	r5, [pc, #104]	; (21d10 <MQTTSubscribe+0x100>)
   21ca6:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21ca8:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21caa:	2801      	cmp	r0, #1
   21cac:	d00e      	beq.n	21ccc <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   21cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21cb0:	2b00      	cmp	r3, #0
   21cb2:	d010      	beq.n	21cd6 <MQTTSubscribe+0xc6>
   21cb4:	0022      	movs	r2, r4
   21cb6:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21cb8:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   21cba:	6810      	ldr	r0, [r2, #0]
   21cbc:	2800      	cmp	r0, #0
   21cbe:	d00b      	beq.n	21cd8 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21cc0:	3301      	adds	r3, #1
   21cc2:	3208      	adds	r2, #8
   21cc4:	2b05      	cmp	r3, #5
   21cc6:	d1f8      	bne.n	21cba <MQTTSubscribe+0xaa>
   21cc8:	000e      	movs	r6, r1
   21cca:	e7d0      	b.n	21c6e <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   21ccc:	9908      	ldr	r1, [sp, #32]
        if (rc != 0x80)
   21cce:	2980      	cmp	r1, #128	; 0x80
   21cd0:	d1ed      	bne.n	21cae <MQTTSubscribe+0x9e>
   21cd2:	000e      	movs	r6, r1
   21cd4:	e7cb      	b.n	21c6e <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   21cd6:	0033      	movs	r3, r6
   21cd8:	00db      	lsls	r3, r3, #3
   21cda:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   21cdc:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   21cde:	9b05      	ldr	r3, [sp, #20]
   21ce0:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   21ce2:	e7c4      	b.n	21c6e <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   21ce4:	2601      	movs	r6, #1
   21ce6:	4276      	negs	r6, r6
   21ce8:	e7c1      	b.n	21c6e <MQTTSubscribe+0x5e>
   21cea:	2601      	movs	r6, #1
   21cec:	4276      	negs	r6, r6
   21cee:	e7be      	b.n	21c6e <MQTTSubscribe+0x5e>
        rc = FAILURE;
   21cf0:	2601      	movs	r6, #1
   21cf2:	4276      	negs	r6, r6
    return rc;
   21cf4:	e7bb      	b.n	21c6e <MQTTSubscribe+0x5e>
   21cf6:	46c0      	nop			; (mov r8, r8)
   21cf8:	00022079 	.word	0x00022079
   21cfc:	00022041 	.word	0x00022041
   21d00:	0000ffff 	.word	0x0000ffff
   21d04:	00022b21 	.word	0x00022b21
   21d08:	000216bd 	.word	0x000216bd
   21d0c:	00021b09 	.word	0x00021b09
   21d10:	00022bd5 	.word	0x00022bd5

00021d14 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   21d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d16:	b091      	sub	sp, #68	; 0x44
   21d18:	0005      	movs	r5, r0
   21d1a:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   21d1c:	2300      	movs	r3, #0
   21d1e:	930b      	str	r3, [sp, #44]	; 0x2c
   21d20:	930c      	str	r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicName;
   21d22:	910a      	str	r1, [sp, #40]	; 0x28
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21d24:	6a03      	ldr	r3, [r0, #32]
   21d26:	2b00      	cmp	r3, #0
   21d28:	d062      	beq.n	21df0 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   21d2a:	a80d      	add	r0, sp, #52	; 0x34
   21d2c:	4b36      	ldr	r3, [pc, #216]	; (21e08 <MQTTPublish+0xf4>)
   21d2e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21d30:	6869      	ldr	r1, [r5, #4]
   21d32:	a80d      	add	r0, sp, #52	; 0x34
   21d34:	4b35      	ldr	r3, [pc, #212]	; (21e0c <MQTTPublish+0xf8>)
   21d36:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   21d38:	7823      	ldrb	r3, [r4, #0]
   21d3a:	3b01      	subs	r3, #1
   21d3c:	2b01      	cmp	r3, #1
   21d3e:	d921      	bls.n	21d84 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   21d40:	7823      	ldrb	r3, [r4, #0]
   21d42:	68e2      	ldr	r2, [r4, #12]
   21d44:	9206      	str	r2, [sp, #24]
   21d46:	68a2      	ldr	r2, [r4, #8]
   21d48:	9205      	str	r2, [sp, #20]
   21d4a:	aa0a      	add	r2, sp, #40	; 0x28
   21d4c:	a902      	add	r1, sp, #8
   21d4e:	cac1      	ldmia	r2!, {r0, r6, r7}
   21d50:	c1c1      	stmia	r1!, {r0, r6, r7}
   21d52:	88a2      	ldrh	r2, [r4, #4]
   21d54:	9201      	str	r2, [sp, #4]
   21d56:	7862      	ldrb	r2, [r4, #1]
   21d58:	9200      	str	r2, [sp, #0]
   21d5a:	2200      	movs	r2, #0
   21d5c:	68a9      	ldr	r1, [r5, #8]
   21d5e:	6928      	ldr	r0, [r5, #16]
   21d60:	4e2b      	ldr	r6, [pc, #172]	; (21e10 <MQTTPublish+0xfc>)
   21d62:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   21d64:	2800      	cmp	r0, #0
   21d66:	dd46      	ble.n	21df6 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21d68:	aa0d      	add	r2, sp, #52	; 0x34
   21d6a:	0001      	movs	r1, r0
   21d6c:	0028      	movs	r0, r5
   21d6e:	4b29      	ldr	r3, [pc, #164]	; (21e14 <MQTTPublish+0x100>)
   21d70:	4798      	blx	r3
   21d72:	2800      	cmp	r0, #0
   21d74:	d104      	bne.n	21d80 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   21d76:	7823      	ldrb	r3, [r4, #0]
   21d78:	2b01      	cmp	r3, #1
   21d7a:	d00d      	beq.n	21d98 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   21d7c:	2b02      	cmp	r3, #2
   21d7e:	d021      	beq.n	21dc4 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21d80:	b011      	add	sp, #68	; 0x44
   21d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21d84:	682b      	ldr	r3, [r5, #0]
   21d86:	4a24      	ldr	r2, [pc, #144]	; (21e18 <MQTTPublish+0x104>)
   21d88:	4293      	cmp	r3, r2
   21d8a:	d003      	beq.n	21d94 <MQTTPublish+0x80>
   21d8c:	3301      	adds	r3, #1
   21d8e:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   21d90:	80a3      	strh	r3, [r4, #4]
   21d92:	e7d5      	b.n	21d40 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21d94:	2301      	movs	r3, #1
   21d96:	e7fa      	b.n	21d8e <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   21d98:	aa0d      	add	r2, sp, #52	; 0x34
   21d9a:	2104      	movs	r1, #4
   21d9c:	0028      	movs	r0, r5
   21d9e:	4b1f      	ldr	r3, [pc, #124]	; (21e1c <MQTTPublish+0x108>)
   21da0:	4798      	blx	r3
   21da2:	2804      	cmp	r0, #4
   21da4:	d12a      	bne.n	21dfc <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21da6:	696b      	ldr	r3, [r5, #20]
   21da8:	68ea      	ldr	r2, [r5, #12]
   21daa:	9200      	str	r2, [sp, #0]
   21dac:	2226      	movs	r2, #38	; 0x26
   21dae:	446a      	add	r2, sp
   21db0:	a909      	add	r1, sp, #36	; 0x24
   21db2:	3021      	adds	r0, #33	; 0x21
   21db4:	4468      	add	r0, sp
   21db6:	4c1a      	ldr	r4, [pc, #104]	; (21e20 <MQTTPublish+0x10c>)
   21db8:	47a0      	blx	r4
   21dba:	3801      	subs	r0, #1
   21dbc:	1e43      	subs	r3, r0, #1
   21dbe:	4198      	sbcs	r0, r3
   21dc0:	4240      	negs	r0, r0
   21dc2:	e7dd      	b.n	21d80 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   21dc4:	aa0d      	add	r2, sp, #52	; 0x34
   21dc6:	2107      	movs	r1, #7
   21dc8:	0028      	movs	r0, r5
   21dca:	4b14      	ldr	r3, [pc, #80]	; (21e1c <MQTTPublish+0x108>)
   21dcc:	4798      	blx	r3
   21dce:	2807      	cmp	r0, #7
   21dd0:	d117      	bne.n	21e02 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21dd2:	696b      	ldr	r3, [r5, #20]
   21dd4:	68ea      	ldr	r2, [r5, #12]
   21dd6:	9200      	str	r2, [sp, #0]
   21dd8:	2226      	movs	r2, #38	; 0x26
   21dda:	446a      	add	r2, sp
   21ddc:	a909      	add	r1, sp, #36	; 0x24
   21dde:	301e      	adds	r0, #30
   21de0:	4468      	add	r0, sp
   21de2:	4c0f      	ldr	r4, [pc, #60]	; (21e20 <MQTTPublish+0x10c>)
   21de4:	47a0      	blx	r4
   21de6:	3801      	subs	r0, #1
   21de8:	1e43      	subs	r3, r0, #1
   21dea:	4198      	sbcs	r0, r3
   21dec:	4240      	negs	r0, r0
   21dee:	e7c7      	b.n	21d80 <MQTTPublish+0x6c>
    int rc = FAILURE;
   21df0:	2001      	movs	r0, #1
   21df2:	4240      	negs	r0, r0
   21df4:	e7c4      	b.n	21d80 <MQTTPublish+0x6c>
   21df6:	2001      	movs	r0, #1
   21df8:	4240      	negs	r0, r0
   21dfa:	e7c1      	b.n	21d80 <MQTTPublish+0x6c>
            rc = FAILURE;
   21dfc:	2001      	movs	r0, #1
   21dfe:	4240      	negs	r0, r0
   21e00:	e7be      	b.n	21d80 <MQTTPublish+0x6c>
            rc = FAILURE;
   21e02:	2001      	movs	r0, #1
   21e04:	4240      	negs	r0, r0
    return rc;
   21e06:	e7bb      	b.n	21d80 <MQTTPublish+0x6c>
   21e08:	00022079 	.word	0x00022079
   21e0c:	00022041 	.word	0x00022041
   21e10:	000229c1 	.word	0x000229c1
   21e14:	000216bd 	.word	0x000216bd
   21e18:	0000ffff 	.word	0x0000ffff
   21e1c:	00021b09 	.word	0x00021b09
   21e20:	000226e5 	.word	0x000226e5

00021e24 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   21e24:	b510      	push	{r4, lr}
   21e26:	b084      	sub	sp, #16
   21e28:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   21e2a:	a801      	add	r0, sp, #4
   21e2c:	4b0b      	ldr	r3, [pc, #44]	; (21e5c <MQTTDisconnect+0x38>)
   21e2e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21e30:	6861      	ldr	r1, [r4, #4]
   21e32:	a801      	add	r0, sp, #4
   21e34:	4b0a      	ldr	r3, [pc, #40]	; (21e60 <MQTTDisconnect+0x3c>)
   21e36:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   21e38:	68a1      	ldr	r1, [r4, #8]
   21e3a:	6920      	ldr	r0, [r4, #16]
   21e3c:	4b09      	ldr	r3, [pc, #36]	; (21e64 <MQTTDisconnect+0x40>)
   21e3e:	4798      	blx	r3
    if (len > 0)
   21e40:	2800      	cmp	r0, #0
   21e42:	dd08      	ble.n	21e56 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   21e44:	aa01      	add	r2, sp, #4
   21e46:	0001      	movs	r1, r0
   21e48:	0020      	movs	r0, r4
   21e4a:	4b07      	ldr	r3, [pc, #28]	; (21e68 <MQTTDisconnect+0x44>)
   21e4c:	4798      	blx	r3
        
    c->isconnected = 0;
   21e4e:	2300      	movs	r3, #0
   21e50:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21e52:	b004      	add	sp, #16
   21e54:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   21e56:	2001      	movs	r0, #1
   21e58:	4240      	negs	r0, r0
   21e5a:	e7f8      	b.n	21e4e <MQTTDisconnect+0x2a>
   21e5c:	00022079 	.word	0x00022079
   21e60:	00022041 	.word	0x00022041
   21e64:	0002262d 	.word	0x0002262d
   21e68:	000216bd 	.word	0x000216bd

00021e6c <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   21e6c:	b510      	push	{r4, lr}
   21e6e:	0004      	movs	r4, r0
	close(n->socket);
   21e70:	2000      	movs	r0, #0
   21e72:	5620      	ldrsb	r0, [r4, r0]
   21e74:	4b04      	ldr	r3, [pc, #16]	; (21e88 <WINC1500_disconnect+0x1c>)
   21e76:	4798      	blx	r3
	n->socket=-1;
   21e78:	2301      	movs	r3, #1
   21e7a:	425b      	negs	r3, r3
   21e7c:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   21e7e:	2200      	movs	r2, #0
   21e80:	4b02      	ldr	r3, [pc, #8]	; (21e8c <WINC1500_disconnect+0x20>)
   21e82:	701a      	strb	r2, [r3, #0]
}
   21e84:	bd10      	pop	{r4, pc}
   21e86:	46c0      	nop			; (mov r8, r8)
   21e88:	0001d32d 	.word	0x0001d32d
   21e8c:	20003d56 	.word	0x20003d56

00021e90 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   21e90:	b570      	push	{r4, r5, r6, lr}
   21e92:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   21e94:	2200      	movs	r2, #0
   21e96:	4b0d      	ldr	r3, [pc, #52]	; (21ecc <WINC1500_write+0x3c>)
   21e98:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   21e9a:	b2b2      	uxth	r2, r6
   21e9c:	7800      	ldrb	r0, [r0, #0]
   21e9e:	b240      	sxtb	r0, r0
   21ea0:	2300      	movs	r3, #0
   21ea2:	4c0b      	ldr	r4, [pc, #44]	; (21ed0 <WINC1500_write+0x40>)
   21ea4:	47a0      	blx	r4
   21ea6:	2800      	cmp	r0, #0
   21ea8:	d10c      	bne.n	21ec4 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   21eaa:	4b08      	ldr	r3, [pc, #32]	; (21ecc <WINC1500_write+0x3c>)
   21eac:	781b      	ldrb	r3, [r3, #0]
   21eae:	2b00      	cmp	r3, #0
   21eb0:	d106      	bne.n	21ec0 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   21eb2:	4d08      	ldr	r5, [pc, #32]	; (21ed4 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   21eb4:	4c05      	ldr	r4, [pc, #20]	; (21ecc <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   21eb6:	2000      	movs	r0, #0
   21eb8:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   21eba:	7823      	ldrb	r3, [r4, #0]
   21ebc:	2b00      	cmp	r3, #0
   21ebe:	d0fa      	beq.n	21eb6 <WINC1500_write+0x26>
}
   21ec0:	0030      	movs	r0, r6
   21ec2:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   21ec4:	2601      	movs	r6, #1
   21ec6:	4276      	negs	r6, r6
   21ec8:	e7fa      	b.n	21ec0 <WINC1500_write+0x30>
   21eca:	46c0      	nop			; (mov r8, r8)
   21ecc:	20003d59 	.word	0x20003d59
   21ed0:	0001d201 	.word	0x0001d201
   21ed4:	0001b219 	.word	0x0001b219

00021ed8 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   21ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21eda:	b083      	sub	sp, #12
   21edc:	9101      	str	r1, [sp, #4]
   21ede:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   21ee0:	2b00      	cmp	r3, #0
   21ee2:	d100      	bne.n	21ee6 <WINC1500_read+0xe>
   21ee4:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   21ee6:	4a22      	ldr	r2, [pc, #136]	; (21f70 <WINC1500_read+0x98>)
   21ee8:	6812      	ldr	r2, [r2, #0]
   21eea:	2a00      	cmp	r2, #0
   21eec:	d013      	beq.n	21f16 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   21eee:	4b20      	ldr	r3, [pc, #128]	; (21f70 <WINC1500_read+0x98>)
   21ef0:	681d      	ldr	r5, [r3, #0]
   21ef2:	42a5      	cmp	r5, r4
   21ef4:	db39      	blt.n	21f6a <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   21ef6:	4e1f      	ldr	r6, [pc, #124]	; (21f74 <WINC1500_read+0x9c>)
   21ef8:	6837      	ldr	r7, [r6, #0]
   21efa:	491f      	ldr	r1, [pc, #124]	; (21f78 <WINC1500_read+0xa0>)
   21efc:	19c9      	adds	r1, r1, r7
   21efe:	0022      	movs	r2, r4
   21f00:	9801      	ldr	r0, [sp, #4]
   21f02:	4b1e      	ldr	r3, [pc, #120]	; (21f7c <WINC1500_read+0xa4>)
   21f04:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   21f06:	1b2d      	subs	r5, r5, r4
   21f08:	4b19      	ldr	r3, [pc, #100]	; (21f70 <WINC1500_read+0x98>)
   21f0a:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   21f0c:	193f      	adds	r7, r7, r4
   21f0e:	6037      	str	r7, [r6, #0]
  return len;
   21f10:	0020      	movs	r0, r4
}
   21f12:	b003      	add	sp, #12
   21f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   21f16:	2100      	movs	r1, #0
   21f18:	4a19      	ldr	r2, [pc, #100]	; (21f80 <WINC1500_read+0xa8>)
   21f1a:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   21f1c:	7800      	ldrb	r0, [r0, #0]
   21f1e:	b240      	sxtb	r0, r0
   21f20:	2280      	movs	r2, #128	; 0x80
   21f22:	0052      	lsls	r2, r2, #1
   21f24:	4914      	ldr	r1, [pc, #80]	; (21f78 <WINC1500_read+0xa0>)
   21f26:	4d17      	ldr	r5, [pc, #92]	; (21f84 <WINC1500_read+0xac>)
   21f28:	47a8      	blx	r5
   21f2a:	2800      	cmp	r0, #0
   21f2c:	d11a      	bne.n	21f64 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   21f2e:	4b14      	ldr	r3, [pc, #80]	; (21f80 <WINC1500_read+0xa8>)
   21f30:	781b      	ldrb	r3, [r3, #0]
   21f32:	2b00      	cmp	r3, #0
   21f34:	d106      	bne.n	21f44 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   21f36:	4f14      	ldr	r7, [pc, #80]	; (21f88 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   21f38:	4d11      	ldr	r5, [pc, #68]	; (21f80 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   21f3a:	2000      	movs	r0, #0
   21f3c:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   21f3e:	782b      	ldrb	r3, [r5, #0]
   21f40:	2b00      	cmp	r3, #0
   21f42:	d0fa      	beq.n	21f3a <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   21f44:	4b11      	ldr	r3, [pc, #68]	; (21f8c <WINC1500_read+0xb4>)
   21f46:	6818      	ldr	r0, [r3, #0]
   21f48:	2800      	cmp	r0, #0
   21f4a:	dd05      	ble.n	21f58 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   21f4c:	4b08      	ldr	r3, [pc, #32]	; (21f70 <WINC1500_read+0x98>)
   21f4e:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   21f50:	2200      	movs	r2, #0
   21f52:	4b08      	ldr	r3, [pc, #32]	; (21f74 <WINC1500_read+0x9c>)
   21f54:	601a      	str	r2, [r3, #0]
   21f56:	e7ca      	b.n	21eee <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   21f58:	2300      	movs	r3, #0
   21f5a:	4a05      	ldr	r2, [pc, #20]	; (21f70 <WINC1500_read+0x98>)
   21f5c:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   21f5e:	4a05      	ldr	r2, [pc, #20]	; (21f74 <WINC1500_read+0x9c>)
   21f60:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   21f62:	e7d6      	b.n	21f12 <WINC1500_read+0x3a>
		  return -1;
   21f64:	2001      	movs	r0, #1
   21f66:	4240      	negs	r0, r0
   21f68:	e7d3      	b.n	21f12 <WINC1500_read+0x3a>
	  return -1;
   21f6a:	2001      	movs	r0, #1
   21f6c:	4240      	negs	r0, r0
   21f6e:	e7d0      	b.n	21f12 <WINC1500_read+0x3a>
   21f70:	20003e68 	.word	0x20003e68
   21f74:	20003e6c 	.word	0x20003e6c
   21f78:	20003d5c 	.word	0x20003d5c
   21f7c:	0002626d 	.word	0x0002626d
   21f80:	20003d58 	.word	0x20003d58
   21f84:	0001d299 	.word	0x0001d299
   21f88:	0001b219 	.word	0x0001b219
   21f8c:	20003e60 	.word	0x20003e60

00021f90 <dnsResolveCallback>:
{
   21f90:	b510      	push	{r4, lr}
   21f92:	0002      	movs	r2, r0
   21f94:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   21f96:	4b08      	ldr	r3, [pc, #32]	; (21fb8 <dnsResolveCallback+0x28>)
   21f98:	781b      	ldrb	r3, [r3, #0]
   21f9a:	2b00      	cmp	r3, #0
   21f9c:	d10b      	bne.n	21fb6 <dnsResolveCallback+0x26>
   21f9e:	4b07      	ldr	r3, [pc, #28]	; (21fbc <dnsResolveCallback+0x2c>)
   21fa0:	6818      	ldr	r0, [r3, #0]
   21fa2:	0011      	movs	r1, r2
   21fa4:	4b06      	ldr	r3, [pc, #24]	; (21fc0 <dnsResolveCallback+0x30>)
   21fa6:	4798      	blx	r3
   21fa8:	2800      	cmp	r0, #0
   21faa:	d104      	bne.n	21fb6 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   21fac:	4b05      	ldr	r3, [pc, #20]	; (21fc4 <dnsResolveCallback+0x34>)
   21fae:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   21fb0:	2201      	movs	r2, #1
   21fb2:	4b01      	ldr	r3, [pc, #4]	; (21fb8 <dnsResolveCallback+0x28>)
   21fb4:	701a      	strb	r2, [r3, #0]
}
   21fb6:	bd10      	pop	{r4, pc}
   21fb8:	20003d57 	.word	0x20003d57
   21fbc:	20003e64 	.word	0x20003e64
   21fc0:	000266cf 	.word	0x000266cf
   21fc4:	20003e5c 	.word	0x20003e5c

00021fc8 <tcpClientSocketEventHandler>:
{
   21fc8:	b530      	push	{r4, r5, lr}
   21fca:	4b12      	ldr	r3, [pc, #72]	; (22014 <tcpClientSocketEventHandler+0x4c>)
   21fcc:	24af      	movs	r4, #175	; 0xaf
   21fce:	00a4      	lsls	r4, r4, #2
   21fd0:	191d      	adds	r5, r3, r4
   21fd2:	e002      	b.n	21fda <tcpClientSocketEventHandler+0x12>
   21fd4:	3364      	adds	r3, #100	; 0x64
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   21fd6:	42ab      	cmp	r3, r5
   21fd8:	d00b      	beq.n	21ff2 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   21fda:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   21fdc:	2c00      	cmp	r4, #0
   21fde:	d0f9      	beq.n	21fd4 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   21fe0:	6a24      	ldr	r4, [r4, #32]
   21fe2:	4284      	cmp	r4, r0
   21fe4:	d1f6      	bne.n	21fd4 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   21fe6:	2906      	cmp	r1, #6
   21fe8:	d00c      	beq.n	22004 <tcpClientSocketEventHandler+0x3c>
   21fea:	2907      	cmp	r1, #7
   21fec:	d006      	beq.n	21ffc <tcpClientSocketEventHandler+0x34>
   21fee:	2905      	cmp	r1, #5
   21ff0:	d000      	beq.n	21ff4 <tcpClientSocketEventHandler+0x2c>
}
   21ff2:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   21ff4:	2201      	movs	r2, #1
   21ff6:	4b08      	ldr	r3, [pc, #32]	; (22018 <tcpClientSocketEventHandler+0x50>)
   21ff8:	701a      	strb	r2, [r3, #0]
			break;
   21ffa:	e7fa      	b.n	21ff2 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   21ffc:	2201      	movs	r2, #1
   21ffe:	4b07      	ldr	r3, [pc, #28]	; (2201c <tcpClientSocketEventHandler+0x54>)
   22000:	701a      	strb	r2, [r3, #0]
			break;
   22002:	e7f6      	b.n	21ff2 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   22004:	2304      	movs	r3, #4
   22006:	5ed2      	ldrsh	r2, [r2, r3]
   22008:	4b05      	ldr	r3, [pc, #20]	; (22020 <tcpClientSocketEventHandler+0x58>)
   2200a:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2200c:	2201      	movs	r2, #1
   2200e:	4b05      	ldr	r3, [pc, #20]	; (22024 <tcpClientSocketEventHandler+0x5c>)
   22010:	701a      	strb	r2, [r3, #0]
}
   22012:	e7ee      	b.n	21ff2 <tcpClientSocketEventHandler+0x2a>
   22014:	20003e70 	.word	0x20003e70
   22018:	20003d56 	.word	0x20003d56
   2201c:	20003d59 	.word	0x20003d59
   22020:	20003e60 	.word	0x20003e60
   22024:	20003d58 	.word	0x20003d58

00022028 <TimerIsExpired>:
char TimerIsExpired(Timer* timer) {
   22028:	b510      	push	{r4, lr}
   2202a:	0001      	movs	r1, r0
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2202c:	3004      	adds	r0, #4
   2202e:	4b03      	ldr	r3, [pc, #12]	; (2203c <TimerIsExpired+0x14>)
   22030:	4798      	blx	r3
   22032:	3801      	subs	r0, #1
   22034:	4243      	negs	r3, r0
   22036:	4158      	adcs	r0, r3
   22038:	b2c0      	uxtb	r0, r0
}
   2203a:	bd10      	pop	{r4, pc}
   2203c:	000185c5 	.word	0x000185c5

00022040 <TimerCountdownMS>:
void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   22040:	b510      	push	{r4, lr}
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   22042:	c002      	stmia	r0!, {r1}
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   22044:	4b01      	ldr	r3, [pc, #4]	; (2204c <TimerCountdownMS+0xc>)
   22046:	4798      	blx	r3
}
   22048:	bd10      	pop	{r4, pc}
   2204a:	46c0      	nop			; (mov r8, r8)
   2204c:	0001857d 	.word	0x0001857d

00022050 <TimerCountdown>:
void TimerCountdown(Timer* timer, unsigned int timeout) {
   22050:	b510      	push	{r4, lr}
	TimerCountdownMS(timer, timeout * 1000);
   22052:	23fa      	movs	r3, #250	; 0xfa
   22054:	009b      	lsls	r3, r3, #2
   22056:	4359      	muls	r1, r3
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   22058:	c002      	stmia	r0!, {r1}
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2205a:	4b01      	ldr	r3, [pc, #4]	; (22060 <TimerCountdown+0x10>)
   2205c:	4798      	blx	r3
}
   2205e:	bd10      	pop	{r4, pc}
   22060:	0001857d 	.word	0x0001857d

00022064 <TimerLeftMS>:
int TimerLeftMS(Timer* timer) {
   22064:	b510      	push	{r4, lr}
   22066:	0004      	movs	r4, r0
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   22068:	3004      	adds	r0, #4
   2206a:	0021      	movs	r1, r4
   2206c:	4b01      	ldr	r3, [pc, #4]	; (22074 <TimerLeftMS+0x10>)
   2206e:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   22070:	6820      	ldr	r0, [r4, #0]
}
   22072:	bd10      	pop	{r4, pc}
   22074:	000185c5 	.word	0x000185c5

00022078 <TimerInit>:
void TimerInit(Timer* timer) {
   22078:	b510      	push	{r4, lr}
	timer->xTicksToWait = 0;
   2207a:	2300      	movs	r3, #0
   2207c:	c008      	stmia	r0!, {r3}
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2207e:	2208      	movs	r2, #8
   22080:	2100      	movs	r1, #0
   22082:	4b01      	ldr	r3, [pc, #4]	; (22088 <TimerInit+0x10>)
   22084:	4798      	blx	r3
}
   22086:	bd10      	pop	{r4, pc}
   22088:	000262a3 	.word	0x000262a3

0002208c <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   2208c:	2301      	movs	r3, #1
   2208e:	425b      	negs	r3, r3
   22090:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   22092:	4b03      	ldr	r3, [pc, #12]	; (220a0 <NetworkInit+0x14>)
   22094:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   22096:	4b03      	ldr	r3, [pc, #12]	; (220a4 <NetworkInit+0x18>)
   22098:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   2209a:	4b03      	ldr	r3, [pc, #12]	; (220a8 <NetworkInit+0x1c>)
   2209c:	6103      	str	r3, [r0, #16]
}
   2209e:	4770      	bx	lr
   220a0:	00021ed9 	.word	0x00021ed9
   220a4:	00021e91 	.word	0x00021e91
   220a8:	00021e6d 	.word	0x00021e6d

000220ac <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   220ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   220ae:	b087      	sub	sp, #28
   220b0:	0006      	movs	r6, r0
   220b2:	0015      	movs	r5, r2
   220b4:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   220b6:	4c25      	ldr	r4, [pc, #148]	; (2214c <ConnectNetwork+0xa0>)
   220b8:	2300      	movs	r3, #0
   220ba:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   220bc:	4b24      	ldr	r3, [pc, #144]	; (22150 <ConnectNetwork+0xa4>)
   220be:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   220c0:	0008      	movs	r0, r1
   220c2:	4b24      	ldr	r3, [pc, #144]	; (22154 <ConnectNetwork+0xa8>)
   220c4:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   220c6:	7823      	ldrb	r3, [r4, #0]
   220c8:	2b00      	cmp	r3, #0
   220ca:	d106      	bne.n	220da <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   220cc:	4f22      	ldr	r7, [pc, #136]	; (22158 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   220ce:	4c1f      	ldr	r4, [pc, #124]	; (2214c <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   220d0:	2000      	movs	r0, #0
   220d2:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   220d4:	7823      	ldrb	r3, [r4, #0]
   220d6:	2b00      	cmp	r3, #0
   220d8:	d0fa      	beq.n	220d0 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   220da:	4b20      	ldr	r3, [pc, #128]	; (2215c <ConnectNetwork+0xb0>)
   220dc:	681a      	ldr	r2, [r3, #0]
   220de:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   220e0:	2302      	movs	r3, #2
   220e2:	a902      	add	r1, sp, #8
   220e4:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   220e6:	022b      	lsls	r3, r5, #8
   220e8:	491d      	ldr	r1, [pc, #116]	; (22160 <ConnectNetwork+0xb4>)
   220ea:	400b      	ands	r3, r1
   220ec:	b2ad      	uxth	r5, r5
   220ee:	0a2d      	lsrs	r5, r5, #8
   220f0:	431d      	orrs	r5, r3
   220f2:	ab02      	add	r3, sp, #8
   220f4:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   220f6:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   220f8:	6833      	ldr	r3, [r6, #0]
   220fa:	2b00      	cmp	r3, #0
   220fc:	db16      	blt.n	2212c <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   220fe:	6830      	ldr	r0, [r6, #0]
   22100:	1c43      	adds	r3, r0, #1
   22102:	d01b      	beq.n	2213c <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   22104:	b240      	sxtb	r0, r0
   22106:	2210      	movs	r2, #16
   22108:	a902      	add	r1, sp, #8
   2210a:	4b16      	ldr	r3, [pc, #88]	; (22164 <ConnectNetwork+0xb8>)
   2210c:	4798      	blx	r3
   2210e:	2800      	cmp	r0, #0
   22110:	d119      	bne.n	22146 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   22112:	2200      	movs	r2, #0
   22114:	4b14      	ldr	r3, [pc, #80]	; (22168 <ConnectNetwork+0xbc>)
   22116:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   22118:	4d0f      	ldr	r5, [pc, #60]	; (22158 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   2211a:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   2211c:	2000      	movs	r0, #0
   2211e:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   22120:	7823      	ldrb	r3, [r4, #0]
   22122:	2b00      	cmp	r3, #0
   22124:	d0fa      	beq.n	2211c <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   22126:	2000      	movs	r0, #0
   22128:	b007      	add	sp, #28
   2212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2212c:	466b      	mov	r3, sp
   2212e:	791a      	ldrb	r2, [r3, #4]
   22130:	2101      	movs	r1, #1
   22132:	2002      	movs	r0, #2
   22134:	4b0d      	ldr	r3, [pc, #52]	; (2216c <ConnectNetwork+0xc0>)
   22136:	4798      	blx	r3
   22138:	6030      	str	r0, [r6, #0]
   2213a:	e7e0      	b.n	220fe <ConnectNetwork+0x52>
   close(n->socket);
   2213c:	4b0c      	ldr	r3, [pc, #48]	; (22170 <ConnectNetwork+0xc4>)
   2213e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   22140:	2009      	movs	r0, #9
   22142:	4240      	negs	r0, r0
   22144:	e7f0      	b.n	22128 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   22146:	2009      	movs	r0, #9
   22148:	4240      	negs	r0, r0
   2214a:	e7ed      	b.n	22128 <ConnectNetwork+0x7c>
   2214c:	20003d57 	.word	0x20003d57
   22150:	20003e64 	.word	0x20003e64
   22154:	0001d431 	.word	0x0001d431
   22158:	0001b219 	.word	0x0001b219
   2215c:	20003e5c 	.word	0x20003e5c
   22160:	00ffff00 	.word	0x00ffff00
   22164:	0001d171 	.word	0x0001d171
   22168:	20003d56 	.word	0x20003d56
   2216c:	0001cff1 	.word	0x0001cff1
   22170:	0001d32d 	.word	0x0001d32d

00022174 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   22174:	b5f0      	push	{r4, r5, r6, r7, lr}
   22176:	b085      	sub	sp, #20
   22178:	0006      	movs	r6, r0
   2217a:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2217c:	2800      	cmp	r0, #0
   2217e:	d03c      	beq.n	221fa <mqtt_init+0x86>
   22180:	2900      	cmp	r1, #0
   22182:	d03d      	beq.n	22200 <mqtt_init+0x8c>
   22184:	690b      	ldr	r3, [r1, #16]
   22186:	2b00      	cmp	r3, #0
   22188:	d03d      	beq.n	22206 <mqtt_init+0x92>
   2218a:	688b      	ldr	r3, [r1, #8]
   2218c:	2b00      	cmp	r3, #0
   2218e:	d03d      	beq.n	2220c <mqtt_init+0x98>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   22190:	888b      	ldrh	r3, [r1, #4]
   22192:	27fa      	movs	r7, #250	; 0xfa
   22194:	00bf      	lsls	r7, r7, #2
   22196:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   22198:	0004      	movs	r4, r0
   2219a:	3420      	adds	r4, #32
   2219c:	0020      	movs	r0, r4
   2219e:	4b1e      	ldr	r3, [pc, #120]	; (22218 <mqtt_init+0xa4>)
   221a0:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   221a2:	1d30      	adds	r0, r6, #4
   221a4:	2218      	movs	r2, #24
   221a6:	0029      	movs	r1, r5
   221a8:	4b1c      	ldr	r3, [pc, #112]	; (2221c <mqtt_init+0xa8>)
   221aa:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   221ac:	4b1c      	ldr	r3, [pc, #112]	; (22220 <mqtt_init+0xac>)
   221ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   221b0:	2b00      	cmp	r3, #0
   221b2:	d01a      	beq.n	221ea <mqtt_init+0x76>
   221b4:	4b1a      	ldr	r3, [pc, #104]	; (22220 <mqtt_init+0xac>)
   221b6:	33c4      	adds	r3, #196	; 0xc4
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   221b8:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   221ba:	6819      	ldr	r1, [r3, #0]
   221bc:	2900      	cmp	r1, #0
   221be:	d015      	beq.n	221ec <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   221c0:	3201      	adds	r2, #1
   221c2:	3364      	adds	r3, #100	; 0x64
   221c4:	2a07      	cmp	r2, #7
   221c6:	d1f8      	bne.n	221ba <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   221c8:	69f0      	ldr	r0, [r6, #28]
   221ca:	2800      	cmp	r0, #0
   221cc:	d021      	beq.n	22212 <mqtt_init+0x9e>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   221ce:	692b      	ldr	r3, [r5, #16]
   221d0:	68ea      	ldr	r2, [r5, #12]
   221d2:	9202      	str	r2, [sp, #8]
   221d4:	68aa      	ldr	r2, [r5, #8]
   221d6:	9201      	str	r2, [sp, #4]
   221d8:	696a      	ldr	r2, [r5, #20]
   221da:	9200      	str	r2, [sp, #0]
   221dc:	003a      	movs	r2, r7
   221de:	0021      	movs	r1, r4
   221e0:	4c10      	ldr	r4, [pc, #64]	; (22224 <mqtt_init+0xb0>)
   221e2:	47a0      	blx	r4
		return SUCCESS;
   221e4:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   221e6:	b005      	add	sp, #20
   221e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   221ea:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   221ec:	2364      	movs	r3, #100	; 0x64
   221ee:	4353      	muls	r3, r2
   221f0:	4a0b      	ldr	r2, [pc, #44]	; (22220 <mqtt_init+0xac>)
   221f2:	18d2      	adds	r2, r2, r3
   221f4:	6616      	str	r6, [r2, #96]	; 0x60
			module->client = &(mqttClientPool[cIdx].client);
   221f6:	61f2      	str	r2, [r6, #28]
   221f8:	e7e6      	b.n	221c8 <mqtt_init+0x54>
		return FAILURE;
   221fa:	2001      	movs	r0, #1
   221fc:	4240      	negs	r0, r0
   221fe:	e7f2      	b.n	221e6 <mqtt_init+0x72>
   22200:	2001      	movs	r0, #1
   22202:	4240      	negs	r0, r0
   22204:	e7ef      	b.n	221e6 <mqtt_init+0x72>
   22206:	2001      	movs	r0, #1
   22208:	4240      	negs	r0, r0
   2220a:	e7ec      	b.n	221e6 <mqtt_init+0x72>
   2220c:	2001      	movs	r0, #1
   2220e:	4240      	negs	r0, r0
   22210:	e7e9      	b.n	221e6 <mqtt_init+0x72>
		return FAILURE;
   22212:	2001      	movs	r0, #1
   22214:	4240      	negs	r0, r0
   22216:	e7e6      	b.n	221e6 <mqtt_init+0x72>
   22218:	0002208d 	.word	0x0002208d
   2221c:	0002626d 	.word	0x0002626d
   22220:	20003e70 	.word	0x20003e70
   22224:	00021739 	.word	0x00021739

00022228 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   22228:	4b05      	ldr	r3, [pc, #20]	; (22240 <mqtt_get_config_defaults+0x18>)
   2222a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   2222c:	2300      	movs	r3, #0
   2222e:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   22230:	223c      	movs	r2, #60	; 0x3c
   22232:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   22234:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   22236:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   22238:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   2223a:	6143      	str	r3, [r0, #20]
}
   2223c:	4770      	bx	lr
   2223e:	46c0      	nop			; (mov r8, r8)
   22240:	0000075b 	.word	0x0000075b

00022244 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   22244:	2800      	cmp	r0, #0
   22246:	d002      	beq.n	2224e <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   22248:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   2224a:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   2224c:	4770      	bx	lr
		return FAILURE;
   2224e:	2001      	movs	r0, #1
   22250:	4240      	negs	r0, r0
   22252:	e7fb      	b.n	2224c <mqtt_register_callback+0x8>

00022254 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   22254:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   22256:	4b01      	ldr	r3, [pc, #4]	; (2225c <mqtt_socket_event_handler+0x8>)
   22258:	4798      	blx	r3
}
   2225a:	bd10      	pop	{r4, pc}
   2225c:	00021fc9 	.word	0x00021fc9

00022260 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   22260:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   22262:	4b01      	ldr	r3, [pc, #4]	; (22268 <mqtt_socket_resolve_handler+0x8>)
   22264:	4798      	blx	r3
}
   22266:	bd10      	pop	{r4, pc}
   22268:	00021f91 	.word	0x00021f91

0002226c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2226c:	b530      	push	{r4, r5, lr}
   2226e:	b083      	sub	sp, #12
   22270:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   22272:	7983      	ldrb	r3, [r0, #6]
   22274:	8882      	ldrh	r2, [r0, #4]
   22276:	3020      	adds	r0, #32
   22278:	4d06      	ldr	r5, [pc, #24]	; (22294 <mqtt_connect+0x28>)
   2227a:	47a8      	blx	r5
   2227c:	9001      	str	r0, [sp, #4]
	if(module->callback)
   2227e:	6823      	ldr	r3, [r4, #0]
   22280:	2b00      	cmp	r3, #0
   22282:	d003      	beq.n	2228c <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   22284:	aa01      	add	r2, sp, #4
   22286:	2100      	movs	r1, #0
   22288:	0020      	movs	r0, r4
   2228a:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   2228c:	9801      	ldr	r0, [sp, #4]
   2228e:	b003      	add	sp, #12
   22290:	bd30      	pop	{r4, r5, pc}
   22292:	46c0      	nop			; (mov r8, r8)
   22294:	000220ad 	.word	0x000220ad

00022298 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   22298:	b5f0      	push	{r4, r5, r6, r7, lr}
   2229a:	46de      	mov	lr, fp
   2229c:	4657      	mov	r7, sl
   2229e:	464e      	mov	r6, r9
   222a0:	b5c0      	push	{r6, r7, lr}
   222a2:	b098      	sub	sp, #96	; 0x60
   222a4:	0005      	movs	r5, r0
   222a6:	4689      	mov	r9, r1
   222a8:	4693      	mov	fp, r2
   222aa:	469a      	mov	sl, r3
   222ac:	ab24      	add	r3, sp, #144	; 0x90
   222ae:	781f      	ldrb	r7, [r3, #0]
   222b0:	ab25      	add	r3, sp, #148	; 0x94
   222b2:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   222b4:	ac01      	add	r4, sp, #4
   222b6:	2258      	movs	r2, #88	; 0x58
   222b8:	491a      	ldr	r1, [pc, #104]	; (22324 <mqtt_connect_broker+0x8c>)
   222ba:	0020      	movs	r0, r4
   222bc:	4b1a      	ldr	r3, [pc, #104]	; (22328 <mqtt_connect_broker+0x90>)
   222be:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   222c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   222c2:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   222c4:	465b      	mov	r3, fp
   222c6:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   222c8:	4653      	mov	r3, sl
   222ca:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   222cc:	464b      	mov	r3, r9
   222ce:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   222d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   222d2:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   222d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   222d6:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   222d8:	233c      	movs	r3, #60	; 0x3c
   222da:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   222dc:	3301      	adds	r3, #1
   222de:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   222e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   222e2:	2b00      	cmp	r3, #0
   222e4:	d005      	beq.n	222f2 <mqtt_connect_broker+0x5a>
   222e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   222e8:	2b00      	cmp	r3, #0
   222ea:	d002      	beq.n	222f2 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   222ec:	2201      	movs	r2, #1
   222ee:	ab01      	add	r3, sp, #4
   222f0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   222f2:	a901      	add	r1, sp, #4
   222f4:	69e8      	ldr	r0, [r5, #28]
   222f6:	4b0d      	ldr	r3, [pc, #52]	; (2232c <mqtt_connect_broker+0x94>)
   222f8:	4798      	blx	r3
   222fa:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   222fc:	ab17      	add	r3, sp, #92	; 0x5c
   222fe:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   22300:	682b      	ldr	r3, [r5, #0]
   22302:	2b00      	cmp	r3, #0
   22304:	d003      	beq.n	2230e <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   22306:	aa17      	add	r2, sp, #92	; 0x5c
   22308:	2101      	movs	r1, #1
   2230a:	0028      	movs	r0, r5
   2230c:	4798      	blx	r3
	
	module->isConnected = true;
   2230e:	2201      	movs	r2, #1
   22310:	2334      	movs	r3, #52	; 0x34
   22312:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   22314:	0020      	movs	r0, r4
   22316:	b018      	add	sp, #96	; 0x60
   22318:	bc1c      	pop	{r2, r3, r4}
   2231a:	4691      	mov	r9, r2
   2231c:	469a      	mov	sl, r3
   2231e:	46a3      	mov	fp, r4
   22320:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22322:	46c0      	nop			; (mov r8, r8)
   22324:	0002aac0 	.word	0x0002aac0
   22328:	0002626d 	.word	0x0002626d
   2232c:	00021b41 	.word	0x00021b41

00022330 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   22330:	b530      	push	{r4, r5, lr}
   22332:	b083      	sub	sp, #12
   22334:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   22336:	69c0      	ldr	r0, [r0, #28]
   22338:	4b08      	ldr	r3, [pc, #32]	; (2235c <mqtt_disconnect+0x2c>)
   2233a:	4798      	blx	r3
   2233c:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   2233e:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   22340:	6823      	ldr	r3, [r4, #0]
   22342:	2b00      	cmp	r3, #0
   22344:	d003      	beq.n	2234e <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   22346:	aa01      	add	r2, sp, #4
   22348:	2105      	movs	r1, #5
   2234a:	0020      	movs	r0, r4
   2234c:	4798      	blx	r3
	
	module->isConnected = false;
   2234e:	2200      	movs	r2, #0
   22350:	2334      	movs	r3, #52	; 0x34
   22352:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   22354:	0028      	movs	r0, r5
   22356:	b003      	add	sp, #12
   22358:	bd30      	pop	{r4, r5, pc}
   2235a:	46c0      	nop			; (mov r8, r8)
   2235c:	00021e25 	.word	0x00021e25

00022360 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   22360:	b570      	push	{r4, r5, r6, lr}
   22362:	b084      	sub	sp, #16
   22364:	0004      	movs	r4, r0
   22366:	a808      	add	r0, sp, #32
   22368:	7805      	ldrb	r5, [r0, #0]
   2236a:	a809      	add	r0, sp, #36	; 0x24
   2236c:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2236e:	466e      	mov	r6, sp
   22370:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   22372:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   22374:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   22376:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   22378:	466a      	mov	r2, sp
   2237a:	69e0      	ldr	r0, [r4, #28]
   2237c:	4b06      	ldr	r3, [pc, #24]	; (22398 <mqtt_publish+0x38>)
   2237e:	4798      	blx	r3
   22380:	0005      	movs	r5, r0
	
	if(module->callback)
   22382:	6823      	ldr	r3, [r4, #0]
   22384:	2b00      	cmp	r3, #0
   22386:	d003      	beq.n	22390 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   22388:	2200      	movs	r2, #0
   2238a:	2102      	movs	r1, #2
   2238c:	0020      	movs	r0, r4
   2238e:	4798      	blx	r3
	
	return rc;
}
   22390:	0028      	movs	r0, r5
   22392:	b004      	add	sp, #16
   22394:	bd70      	pop	{r4, r5, r6, pc}
   22396:	46c0      	nop			; (mov r8, r8)
   22398:	00021d15 	.word	0x00021d15

0002239c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2239c:	b570      	push	{r4, r5, r6, lr}
   2239e:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   223a0:	69c0      	ldr	r0, [r0, #28]
   223a2:	4d06      	ldr	r5, [pc, #24]	; (223bc <mqtt_subscribe+0x20>)
   223a4:	47a8      	blx	r5
   223a6:	0005      	movs	r5, r0
	
	if(module->callback)
   223a8:	6823      	ldr	r3, [r4, #0]
   223aa:	2b00      	cmp	r3, #0
   223ac:	d003      	beq.n	223b6 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   223ae:	2200      	movs	r2, #0
   223b0:	2103      	movs	r1, #3
   223b2:	0020      	movs	r0, r4
   223b4:	4798      	blx	r3
	
	return rc;
}
   223b6:	0028      	movs	r0, r5
   223b8:	bd70      	pop	{r4, r5, r6, pc}
   223ba:	46c0      	nop			; (mov r8, r8)
   223bc:	00021c11 	.word	0x00021c11

000223c0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   223c0:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   223c2:	69c0      	ldr	r0, [r0, #28]
   223c4:	4b01      	ldr	r3, [pc, #4]	; (223cc <mqtt_yield+0xc>)
   223c6:	4798      	blx	r3
   223c8:	bd10      	pop	{r4, pc}
   223ca:	46c0      	nop			; (mov r8, r8)
   223cc:	00021ac5 	.word	0x00021ac5

000223d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   223d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223d2:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   223d4:	7a03      	ldrb	r3, [r0, #8]
   223d6:	2b03      	cmp	r3, #3
   223d8:	d024      	beq.n	22424 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   223da:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   223dc:	2b04      	cmp	r3, #4
   223de:	d01f      	beq.n	22420 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   223e0:	68e0      	ldr	r0, [r4, #12]
   223e2:	6921      	ldr	r1, [r4, #16]
   223e4:	6962      	ldr	r2, [r4, #20]
   223e6:	4b1b      	ldr	r3, [pc, #108]	; (22454 <MQTTSerialize_connectLength+0x84>)
   223e8:	4798      	blx	r3
   223ea:	1c85      	adds	r5, r0, #2
   223ec:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   223ee:	7ee3      	ldrb	r3, [r4, #27]
   223f0:	2b00      	cmp	r3, #0
   223f2:	d119      	bne.n	22428 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   223f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   223f6:	2b00      	cmp	r3, #0
   223f8:	d024      	beq.n	22444 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   223fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
   223fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   223fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22400:	4b14      	ldr	r3, [pc, #80]	; (22454 <MQTTSerialize_connectLength+0x84>)
   22402:	4798      	blx	r3
   22404:	3002      	adds	r0, #2
   22406:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   22408:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2240a:	2b00      	cmp	r3, #0
   2240c:	d01e      	beq.n	2244c <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   2240e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   22410:	6d21      	ldr	r1, [r4, #80]	; 0x50
   22412:	6d62      	ldr	r2, [r4, #84]	; 0x54
   22414:	4b0f      	ldr	r3, [pc, #60]	; (22454 <MQTTSerialize_connectLength+0x84>)
   22416:	4798      	blx	r3
   22418:	3002      	adds	r0, #2
   2241a:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   2241c:	0028      	movs	r0, r5
   2241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   22420:	360a      	adds	r6, #10
   22422:	e7dd      	b.n	223e0 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   22424:	260c      	movs	r6, #12
   22426:	e7db      	b.n	223e0 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   22428:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2242a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2242c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2242e:	4f09      	ldr	r7, [pc, #36]	; (22454 <MQTTSerialize_connectLength+0x84>)
   22430:	47b8      	blx	r7
   22432:	0006      	movs	r6, r0
   22434:	6b20      	ldr	r0, [r4, #48]	; 0x30
   22436:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22438:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2243a:	47b8      	blx	r7
   2243c:	1836      	adds	r6, r6, r0
   2243e:	3604      	adds	r6, #4
   22440:	19ad      	adds	r5, r5, r6
   22442:	e7d7      	b.n	223f4 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   22444:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   22446:	2b00      	cmp	r3, #0
   22448:	d1d7      	bne.n	223fa <MQTTSerialize_connectLength+0x2a>
   2244a:	e7dd      	b.n	22408 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   2244c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2244e:	2b00      	cmp	r3, #0
   22450:	d1dd      	bne.n	2240e <MQTTSerialize_connectLength+0x3e>
   22452:	e7e3      	b.n	2241c <MQTTSerialize_connectLength+0x4c>
   22454:	00022939 	.word	0x00022939

00022458 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   22458:	b5f0      	push	{r4, r5, r6, r7, lr}
   2245a:	b083      	sub	sp, #12
   2245c:	0006      	movs	r6, r0
   2245e:	000f      	movs	r7, r1
   22460:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   22462:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   22464:	0010      	movs	r0, r2
   22466:	4b45      	ldr	r3, [pc, #276]	; (2257c <MQTTSerialize_connect+0x124>)
   22468:	4798      	blx	r3
   2246a:	0004      	movs	r4, r0
   2246c:	4b44      	ldr	r3, [pc, #272]	; (22580 <MQTTSerialize_connect+0x128>)
   2246e:	4798      	blx	r3
   22470:	42b8      	cmp	r0, r7
   22472:	dd00      	ble.n	22476 <MQTTSerialize_connect+0x1e>
   22474:	e07f      	b.n	22576 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   22476:	2110      	movs	r1, #16
   22478:	a801      	add	r0, sp, #4
   2247a:	4b42      	ldr	r3, [pc, #264]	; (22584 <MQTTSerialize_connect+0x12c>)
   2247c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2247e:	0021      	movs	r1, r4
   22480:	9801      	ldr	r0, [sp, #4]
   22482:	4b41      	ldr	r3, [pc, #260]	; (22588 <MQTTSerialize_connect+0x130>)
   22484:	4798      	blx	r3
   22486:	9b01      	ldr	r3, [sp, #4]
   22488:	469c      	mov	ip, r3
   2248a:	4460      	add	r0, ip
   2248c:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   2248e:	7a2b      	ldrb	r3, [r5, #8]
   22490:	2b04      	cmp	r3, #4
   22492:	d045      	beq.n	22520 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   22494:	493d      	ldr	r1, [pc, #244]	; (2258c <MQTTSerialize_connect+0x134>)
   22496:	a801      	add	r0, sp, #4
   22498:	4b3d      	ldr	r3, [pc, #244]	; (22590 <MQTTSerialize_connect+0x138>)
   2249a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2249c:	2103      	movs	r1, #3
   2249e:	a801      	add	r0, sp, #4
   224a0:	4b38      	ldr	r3, [pc, #224]	; (22584 <MQTTSerialize_connect+0x12c>)
   224a2:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   224a4:	7ea9      	ldrb	r1, [r5, #26]
   224a6:	2301      	movs	r3, #1
   224a8:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   224aa:	7eea      	ldrb	r2, [r5, #27]
   224ac:	1e50      	subs	r0, r2, #1
   224ae:	4182      	sbcs	r2, r0
   224b0:	b2d2      	uxtb	r2, r2
   224b2:	4013      	ands	r3, r2
   224b4:	009b      	lsls	r3, r3, #2
   224b6:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   224b8:	4319      	orrs	r1, r3
   224ba:	2b00      	cmp	r3, #0
   224bc:	d00b      	beq.n	224d6 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   224be:	233d      	movs	r3, #61	; 0x3d
   224c0:	5cea      	ldrb	r2, [r5, r3]
   224c2:	3b3a      	subs	r3, #58	; 0x3a
   224c4:	4013      	ands	r3, r2
   224c6:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   224c8:	223c      	movs	r2, #60	; 0x3c
   224ca:	5ca8      	ldrb	r0, [r5, r2]
   224cc:	3a3b      	subs	r2, #59	; 0x3b
   224ce:	4002      	ands	r2, r0
   224d0:	0152      	lsls	r2, r2, #5
   224d2:	4319      	orrs	r1, r3
   224d4:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   224d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   224d8:	2b00      	cmp	r3, #0
   224da:	d02a      	beq.n	22532 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   224dc:	2380      	movs	r3, #128	; 0x80
   224de:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   224e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   224e2:	2b00      	cmp	r3, #0
   224e4:	d029      	beq.n	2253a <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   224e6:	2340      	movs	r3, #64	; 0x40
   224e8:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   224ea:	b2cc      	uxtb	r4, r1
   224ec:	0021      	movs	r1, r4
   224ee:	a801      	add	r0, sp, #4
   224f0:	4b24      	ldr	r3, [pc, #144]	; (22584 <MQTTSerialize_connect+0x12c>)
   224f2:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   224f4:	8b29      	ldrh	r1, [r5, #24]
   224f6:	a801      	add	r0, sp, #4
   224f8:	4b26      	ldr	r3, [pc, #152]	; (22594 <MQTTSerialize_connect+0x13c>)
   224fa:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   224fc:	68e9      	ldr	r1, [r5, #12]
   224fe:	692a      	ldr	r2, [r5, #16]
   22500:	696b      	ldr	r3, [r5, #20]
   22502:	a801      	add	r0, sp, #4
   22504:	4f24      	ldr	r7, [pc, #144]	; (22598 <MQTTSerialize_connect+0x140>)
   22506:	47b8      	blx	r7
	if (options->willFlag)
   22508:	7eeb      	ldrb	r3, [r5, #27]
   2250a:	2b00      	cmp	r3, #0
   2250c:	d119      	bne.n	22542 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   2250e:	b263      	sxtb	r3, r4
   22510:	2b00      	cmp	r3, #0
   22512:	db22      	blt.n	2255a <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   22514:	0663      	lsls	r3, r4, #25
   22516:	d427      	bmi.n	22568 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   22518:	9b01      	ldr	r3, [sp, #4]
   2251a:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   2251c:	b003      	add	sp, #12
   2251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   22520:	491e      	ldr	r1, [pc, #120]	; (2259c <MQTTSerialize_connect+0x144>)
   22522:	a801      	add	r0, sp, #4
   22524:	4b1a      	ldr	r3, [pc, #104]	; (22590 <MQTTSerialize_connect+0x138>)
   22526:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   22528:	2104      	movs	r1, #4
   2252a:	a801      	add	r0, sp, #4
   2252c:	4b15      	ldr	r3, [pc, #84]	; (22584 <MQTTSerialize_connect+0x12c>)
   2252e:	4798      	blx	r3
   22530:	e7b8      	b.n	224a4 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   22532:	6cab      	ldr	r3, [r5, #72]	; 0x48
   22534:	2b00      	cmp	r3, #0
   22536:	d1d1      	bne.n	224dc <MQTTSerialize_connect+0x84>
   22538:	e7d2      	b.n	224e0 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   2253a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2253c:	2b00      	cmp	r3, #0
   2253e:	d1d2      	bne.n	224e6 <MQTTSerialize_connect+0x8e>
   22540:	e7d3      	b.n	224ea <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   22542:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22544:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22546:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22548:	a801      	add	r0, sp, #4
   2254a:	4f13      	ldr	r7, [pc, #76]	; (22598 <MQTTSerialize_connect+0x140>)
   2254c:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   2254e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22550:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   22552:	6bab      	ldr	r3, [r5, #56]	; 0x38
   22554:	a801      	add	r0, sp, #4
   22556:	47b8      	blx	r7
   22558:	e7d9      	b.n	2250e <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   2255a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2255c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   2255e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   22560:	a801      	add	r0, sp, #4
   22562:	4f0d      	ldr	r7, [pc, #52]	; (22598 <MQTTSerialize_connect+0x140>)
   22564:	47b8      	blx	r7
   22566:	e7d5      	b.n	22514 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   22568:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   2256a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2256c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2256e:	a801      	add	r0, sp, #4
   22570:	4c09      	ldr	r4, [pc, #36]	; (22598 <MQTTSerialize_connect+0x140>)
   22572:	47a0      	blx	r4
   22574:	e7d0      	b.n	22518 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22576:	2002      	movs	r0, #2
   22578:	4240      	negs	r0, r0
	return rc;
   2257a:	e7cf      	b.n	2251c <MQTTSerialize_connect+0xc4>
   2257c:	000223d1 	.word	0x000223d1
   22580:	000227dd 	.word	0x000227dd
   22584:	0002283f 	.word	0x0002283f
   22588:	00022755 	.word	0x00022755
   2258c:	0002ab20 	.word	0x0002ab20
   22590:	00022875 	.word	0x00022875
   22594:	0002284b 	.word	0x0002284b
   22598:	000228ad 	.word	0x000228ad
   2259c:	0002ab18 	.word	0x0002ab18

000225a0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   225a0:	b570      	push	{r4, r5, r6, lr}
   225a2:	b082      	sub	sp, #8
   225a4:	0005      	movs	r5, r0
   225a6:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   225a8:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   225aa:	a801      	add	r0, sp, #4
   225ac:	4b0e      	ldr	r3, [pc, #56]	; (225e8 <MQTTDeserialize_connack+0x48>)
   225ae:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   225b0:	23f0      	movs	r3, #240	; 0xf0
   225b2:	4003      	ands	r3, r0
	int rc = 0;
   225b4:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   225b6:	2b20      	cmp	r3, #32
   225b8:	d001      	beq.n	225be <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   225ba:	b002      	add	sp, #8
   225bc:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   225be:	4669      	mov	r1, sp
   225c0:	9801      	ldr	r0, [sp, #4]
   225c2:	4b0a      	ldr	r3, [pc, #40]	; (225ec <MQTTDeserialize_connack+0x4c>)
   225c4:	4798      	blx	r3
   225c6:	9b01      	ldr	r3, [sp, #4]
   225c8:	181b      	adds	r3, r3, r0
   225ca:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   225cc:	9b00      	ldr	r3, [sp, #0]
   225ce:	2b01      	cmp	r3, #1
   225d0:	ddf3      	ble.n	225ba <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   225d2:	a801      	add	r0, sp, #4
   225d4:	4e04      	ldr	r6, [pc, #16]	; (225e8 <MQTTDeserialize_connack+0x48>)
   225d6:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   225d8:	0600      	lsls	r0, r0, #24
   225da:	0fc0      	lsrs	r0, r0, #31
   225dc:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   225de:	a801      	add	r0, sp, #4
   225e0:	47b0      	blx	r6
   225e2:	7020      	strb	r0, [r4, #0]
	rc = 1;
   225e4:	2001      	movs	r0, #1
   225e6:	e7e8      	b.n	225ba <MQTTDeserialize_connack+0x1a>
   225e8:	00022833 	.word	0x00022833
   225ec:	00022805 	.word	0x00022805

000225f0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   225f0:	b510      	push	{r4, lr}
   225f2:	b082      	sub	sp, #8
   225f4:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   225f6:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   225f8:	2901      	cmp	r1, #1
   225fa:	dd0f      	ble.n	2261c <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   225fc:	210f      	movs	r1, #15
   225fe:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22600:	0109      	lsls	r1, r1, #4
   22602:	a801      	add	r0, sp, #4
   22604:	4b07      	ldr	r3, [pc, #28]	; (22624 <MQTTSerialize_zero+0x34>)
   22606:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   22608:	2100      	movs	r1, #0
   2260a:	9801      	ldr	r0, [sp, #4]
   2260c:	4b06      	ldr	r3, [pc, #24]	; (22628 <MQTTSerialize_zero+0x38>)
   2260e:	4798      	blx	r3
   22610:	9b01      	ldr	r3, [sp, #4]
   22612:	469c      	mov	ip, r3
   22614:	4460      	add	r0, ip
	rc = ptr - buf;
   22616:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22618:	b002      	add	sp, #8
   2261a:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2261c:	2002      	movs	r0, #2
   2261e:	4240      	negs	r0, r0
	return rc;
   22620:	e7fa      	b.n	22618 <MQTTSerialize_zero+0x28>
   22622:	46c0      	nop			; (mov r8, r8)
   22624:	0002283f 	.word	0x0002283f
   22628:	00022755 	.word	0x00022755

0002262c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2262c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2262e:	220e      	movs	r2, #14
   22630:	4b01      	ldr	r3, [pc, #4]	; (22638 <MQTTSerialize_disconnect+0xc>)
   22632:	4798      	blx	r3
}
   22634:	bd10      	pop	{r4, pc}
   22636:	46c0      	nop			; (mov r8, r8)
   22638:	000225f1 	.word	0x000225f1

0002263c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2263c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2263e:	220c      	movs	r2, #12
   22640:	4b01      	ldr	r3, [pc, #4]	; (22648 <MQTTSerialize_pingreq+0xc>)
   22642:	4798      	blx	r3
}
   22644:	bd10      	pop	{r4, pc}
   22646:	46c0      	nop			; (mov r8, r8)
   22648:	000225f1 	.word	0x000225f1

0002264c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2264c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2264e:	b085      	sub	sp, #20
   22650:	0005      	movs	r5, r0
   22652:	000e      	movs	r6, r1
   22654:	0014      	movs	r4, r2
   22656:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2265a:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   2265c:	2300      	movs	r3, #0
   2265e:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22660:	a803      	add	r0, sp, #12
   22662:	4b1c      	ldr	r3, [pc, #112]	; (226d4 <MQTTDeserialize_publish+0x88>)
   22664:	4798      	blx	r3
   22666:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   22668:	22f0      	movs	r2, #240	; 0xf0
   2266a:	4010      	ands	r0, r2
	int rc = 0;
   2266c:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   2266e:	2830      	cmp	r0, #48	; 0x30
   22670:	d002      	beq.n	22678 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22672:	0038      	movs	r0, r7
   22674:	b005      	add	sp, #20
   22676:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   22678:	071a      	lsls	r2, r3, #28
   2267a:	0fd2      	lsrs	r2, r2, #31
   2267c:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   2267e:	075a      	lsls	r2, r3, #29
   22680:	0f92      	lsrs	r2, r2, #30
   22682:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   22684:	07db      	lsls	r3, r3, #31
   22686:	0fdb      	lsrs	r3, r3, #31
   22688:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2268a:	a902      	add	r1, sp, #8
   2268c:	9803      	ldr	r0, [sp, #12]
   2268e:	4b12      	ldr	r3, [pc, #72]	; (226d8 <MQTTDeserialize_publish+0x8c>)
   22690:	4798      	blx	r3
   22692:	0007      	movs	r7, r0
   22694:	9b03      	ldr	r3, [sp, #12]
   22696:	181c      	adds	r4, r3, r0
   22698:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   2269a:	9b02      	ldr	r3, [sp, #8]
   2269c:	469c      	mov	ip, r3
   2269e:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   226a0:	0022      	movs	r2, r4
   226a2:	a903      	add	r1, sp, #12
   226a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   226a6:	4b0d      	ldr	r3, [pc, #52]	; (226dc <MQTTDeserialize_publish+0x90>)
   226a8:	4798      	blx	r3
   226aa:	2800      	cmp	r0, #0
   226ac:	d0e1      	beq.n	22672 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   226ae:	9b03      	ldr	r3, [sp, #12]
   226b0:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   226b2:	d4de      	bmi.n	22672 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   226b4:	6833      	ldr	r3, [r6, #0]
   226b6:	2b00      	cmp	r3, #0
   226b8:	dd04      	ble.n	226c4 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   226ba:	a803      	add	r0, sp, #12
   226bc:	4b08      	ldr	r3, [pc, #32]	; (226e0 <MQTTDeserialize_publish+0x94>)
   226be:	4798      	blx	r3
   226c0:	9b01      	ldr	r3, [sp, #4]
   226c2:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   226c4:	9b03      	ldr	r3, [sp, #12]
   226c6:	1ae4      	subs	r4, r4, r3
   226c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   226ca:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   226cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   226ce:	6013      	str	r3, [r2, #0]
	rc = 1;
   226d0:	2701      	movs	r7, #1
   226d2:	e7ce      	b.n	22672 <MQTTDeserialize_publish+0x26>
   226d4:	00022833 	.word	0x00022833
   226d8:	00022805 	.word	0x00022805
   226dc:	000228f9 	.word	0x000228f9
   226e0:	00022821 	.word	0x00022821

000226e4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   226e4:	b570      	push	{r4, r5, r6, lr}
   226e6:	b082      	sub	sp, #8
   226e8:	0005      	movs	r5, r0
   226ea:	000e      	movs	r6, r1
   226ec:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   226ee:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   226f0:	a801      	add	r0, sp, #4
   226f2:	4b0c      	ldr	r3, [pc, #48]	; (22724 <MQTTDeserialize_ack+0x40>)
   226f4:	4798      	blx	r3
	*dup = header.bits.dup;
   226f6:	0703      	lsls	r3, r0, #28
   226f8:	0fdb      	lsrs	r3, r3, #31
   226fa:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   226fc:	0600      	lsls	r0, r0, #24
   226fe:	0f00      	lsrs	r0, r0, #28
   22700:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   22702:	4669      	mov	r1, sp
   22704:	9801      	ldr	r0, [sp, #4]
   22706:	4b08      	ldr	r3, [pc, #32]	; (22728 <MQTTDeserialize_ack+0x44>)
   22708:	4798      	blx	r3
   2270a:	9b01      	ldr	r3, [sp, #4]
   2270c:	181b      	adds	r3, r3, r0
   2270e:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   22710:	9b00      	ldr	r3, [sp, #0]
   22712:	2b01      	cmp	r3, #1
   22714:	dd04      	ble.n	22720 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   22716:	a801      	add	r0, sp, #4
   22718:	4b04      	ldr	r3, [pc, #16]	; (2272c <MQTTDeserialize_ack+0x48>)
   2271a:	4798      	blx	r3
   2271c:	8020      	strh	r0, [r4, #0]

	rc = 1;
   2271e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22720:	b002      	add	sp, #8
   22722:	bd70      	pop	{r4, r5, r6, pc}
   22724:	00022833 	.word	0x00022833
   22728:	00022805 	.word	0x00022805
   2272c:	00022821 	.word	0x00022821

00022730 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   22730:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   22732:	2900      	cmp	r1, #0
   22734:	dd0a      	ble.n	2274c <bufchar+0x1c>
   22736:	4b06      	ldr	r3, [pc, #24]	; (22750 <bufchar+0x20>)
   22738:	681b      	ldr	r3, [r3, #0]
   2273a:	185d      	adds	r5, r3, r1
   2273c:	002c      	movs	r4, r5
		*c = *bufptr++;
   2273e:	781a      	ldrb	r2, [r3, #0]
   22740:	7002      	strb	r2, [r0, #0]
   22742:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   22744:	42a3      	cmp	r3, r4
   22746:	d1fa      	bne.n	2273e <bufchar+0xe>
   22748:	4b01      	ldr	r3, [pc, #4]	; (22750 <bufchar+0x20>)
   2274a:	601d      	str	r5, [r3, #0]
	return count;
}
   2274c:	0008      	movs	r0, r1
   2274e:	bd30      	pop	{r4, r5, pc}
   22750:	2000412c 	.word	0x2000412c

00022754 <MQTTPacket_encode>:
{
   22754:	b5f0      	push	{r4, r5, r6, r7, lr}
   22756:	b083      	sub	sp, #12
   22758:	2500      	movs	r5, #0
		char d = length % 128;
   2275a:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   2275c:	2780      	movs	r7, #128	; 0x80
   2275e:	427f      	negs	r7, r7
   22760:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   22762:	17ca      	asrs	r2, r1, #31
   22764:	0e54      	lsrs	r4, r2, #25
   22766:	190b      	adds	r3, r1, r4
   22768:	4033      	ands	r3, r6
   2276a:	1b1b      	subs	r3, r3, r4
   2276c:	b2db      	uxtb	r3, r3
		length /= 128;
   2276e:	4032      	ands	r2, r6
   22770:	1851      	adds	r1, r2, r1
   22772:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   22774:	2900      	cmp	r1, #0
   22776:	dd03      	ble.n	22780 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   22778:	433b      	orrs	r3, r7
		buf[rc++] = d;
   2277a:	5543      	strb	r3, [r0, r5]
   2277c:	3501      	adds	r5, #1
   2277e:	e7ef      	b.n	22760 <MQTTPacket_encode+0xc>
   22780:	5543      	strb	r3, [r0, r5]
   22782:	9801      	ldr	r0, [sp, #4]
   22784:	3001      	adds	r0, #1
}
   22786:	b003      	add	sp, #12
   22788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002278a <MQTTPacket_decode>:
{
   2278a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2278c:	46ce      	mov	lr, r9
   2278e:	4647      	mov	r7, r8
   22790:	b580      	push	{r7, lr}
   22792:	b083      	sub	sp, #12
   22794:	4680      	mov	r8, r0
   22796:	000f      	movs	r7, r1
	*value = 0;
   22798:	2300      	movs	r3, #0
   2279a:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2279c:	2401      	movs	r4, #1
	int multiplier = 1;
   2279e:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   227a0:	466b      	mov	r3, sp
   227a2:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   227a4:	237f      	movs	r3, #127	; 0x7f
   227a6:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   227a8:	2101      	movs	r1, #1
   227aa:	0028      	movs	r0, r5
   227ac:	47c0      	blx	r8
		if (rc != 1)
   227ae:	2801      	cmp	r0, #1
   227b0:	d10e      	bne.n	227d0 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   227b2:	782b      	ldrb	r3, [r5, #0]
   227b4:	464a      	mov	r2, r9
   227b6:	401a      	ands	r2, r3
   227b8:	4372      	muls	r2, r6
   227ba:	6839      	ldr	r1, [r7, #0]
   227bc:	468c      	mov	ip, r1
   227be:	4462      	add	r2, ip
   227c0:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   227c2:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   227c4:	b25b      	sxtb	r3, r3
   227c6:	2b00      	cmp	r3, #0
   227c8:	da02      	bge.n	227d0 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   227ca:	3401      	adds	r4, #1
   227cc:	2c05      	cmp	r4, #5
   227ce:	d1eb      	bne.n	227a8 <MQTTPacket_decode+0x1e>
}
   227d0:	0020      	movs	r0, r4
   227d2:	b003      	add	sp, #12
   227d4:	bc0c      	pop	{r2, r3}
   227d6:	4690      	mov	r8, r2
   227d8:	4699      	mov	r9, r3
   227da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000227dc <MQTTPacket_len>:
{
   227dc:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   227de:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   227e0:	3002      	adds	r0, #2
	if (rem_len < 128)
   227e2:	2a7f      	cmp	r2, #127	; 0x7f
   227e4:	dd07      	ble.n	227f6 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   227e6:	4905      	ldr	r1, [pc, #20]	; (227fc <MQTTPacket_len+0x20>)
		rem_len += 2;
   227e8:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   227ea:	428a      	cmp	r2, r1
   227ec:	dd03      	ble.n	227f6 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   227ee:	4904      	ldr	r1, [pc, #16]	; (22800 <MQTTPacket_len+0x24>)
		rem_len += 4;
   227f0:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   227f2:	428a      	cmp	r2, r1
   227f4:	dd00      	ble.n	227f8 <MQTTPacket_len+0x1c>
}
   227f6:	4770      	bx	lr
		rem_len += 3;
   227f8:	1d18      	adds	r0, r3, #4
   227fa:	e7fc      	b.n	227f6 <MQTTPacket_len+0x1a>
   227fc:	00003fff 	.word	0x00003fff
   22800:	001ffffe 	.word	0x001ffffe

00022804 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   22804:	b510      	push	{r4, lr}
	bufptr = buf;
   22806:	4b03      	ldr	r3, [pc, #12]	; (22814 <MQTTPacket_decodeBuf+0x10>)
   22808:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2280a:	4803      	ldr	r0, [pc, #12]	; (22818 <MQTTPacket_decodeBuf+0x14>)
   2280c:	4b03      	ldr	r3, [pc, #12]	; (2281c <MQTTPacket_decodeBuf+0x18>)
   2280e:	4798      	blx	r3
}
   22810:	bd10      	pop	{r4, pc}
   22812:	46c0      	nop			; (mov r8, r8)
   22814:	2000412c 	.word	0x2000412c
   22818:	00022731 	.word	0x00022731
   2281c:	0002278b 	.word	0x0002278b

00022820 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   22820:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   22822:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   22824:	7813      	ldrb	r3, [r2, #0]
   22826:	021b      	lsls	r3, r3, #8
   22828:	7850      	ldrb	r0, [r2, #1]
   2282a:	1818      	adds	r0, r3, r0
	*pptr += 2;
   2282c:	3202      	adds	r2, #2
   2282e:	600a      	str	r2, [r1, #0]
	return len;
}
   22830:	4770      	bx	lr

00022832 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   22832:	0002      	movs	r2, r0
	char c = **pptr;
   22834:	6803      	ldr	r3, [r0, #0]
   22836:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   22838:	3301      	adds	r3, #1
   2283a:	6013      	str	r3, [r2, #0]
	return c;
}
   2283c:	4770      	bx	lr

0002283e <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   2283e:	6803      	ldr	r3, [r0, #0]
   22840:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   22842:	6803      	ldr	r3, [r0, #0]
   22844:	3301      	adds	r3, #1
   22846:	6003      	str	r3, [r0, #0]
}
   22848:	4770      	bx	lr

0002284a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2284a:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   2284c:	17ca      	asrs	r2, r1, #31
   2284e:	23ff      	movs	r3, #255	; 0xff
   22850:	001c      	movs	r4, r3
   22852:	4014      	ands	r4, r2
   22854:	1864      	adds	r4, r4, r1
   22856:	1224      	asrs	r4, r4, #8
   22858:	6805      	ldr	r5, [r0, #0]
   2285a:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   2285c:	6804      	ldr	r4, [r0, #0]
   2285e:	1c65      	adds	r5, r4, #1
   22860:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   22862:	0e12      	lsrs	r2, r2, #24
   22864:	1889      	adds	r1, r1, r2
   22866:	400b      	ands	r3, r1
   22868:	1a9b      	subs	r3, r3, r2
   2286a:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   2286c:	6803      	ldr	r3, [r0, #0]
   2286e:	3301      	adds	r3, #1
   22870:	6003      	str	r3, [r0, #0]
}
   22872:	bd30      	pop	{r4, r5, pc}

00022874 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   22874:	b570      	push	{r4, r5, r6, lr}
   22876:	0004      	movs	r4, r0
   22878:	000e      	movs	r6, r1
	int len = strlen(string);
   2287a:	0008      	movs	r0, r1
   2287c:	4b08      	ldr	r3, [pc, #32]	; (228a0 <writeCString+0x2c>)
   2287e:	4798      	blx	r3
   22880:	0005      	movs	r5, r0
	writeInt(pptr, len);
   22882:	0001      	movs	r1, r0
   22884:	0020      	movs	r0, r4
   22886:	4b07      	ldr	r3, [pc, #28]	; (228a4 <writeCString+0x30>)
   22888:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2288a:	002a      	movs	r2, r5
   2288c:	0031      	movs	r1, r6
   2288e:	6820      	ldr	r0, [r4, #0]
   22890:	4b05      	ldr	r3, [pc, #20]	; (228a8 <writeCString+0x34>)
   22892:	4798      	blx	r3
	*pptr += len;
   22894:	6823      	ldr	r3, [r4, #0]
   22896:	469c      	mov	ip, r3
   22898:	4465      	add	r5, ip
   2289a:	6025      	str	r5, [r4, #0]
}
   2289c:	bd70      	pop	{r4, r5, r6, pc}
   2289e:	46c0      	nop			; (mov r8, r8)
   228a0:	0002672f 	.word	0x0002672f
   228a4:	0002284b 	.word	0x0002284b
   228a8:	0002626d 	.word	0x0002626d

000228ac <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   228ac:	b530      	push	{r4, r5, lr}
   228ae:	b085      	sub	sp, #20
   228b0:	0005      	movs	r5, r0
   228b2:	9101      	str	r1, [sp, #4]
   228b4:	9303      	str	r3, [sp, #12]
   228b6:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   228b8:	dc06      	bgt.n	228c8 <writeMQTTString+0x1c>
   228ba:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   228bc:	2900      	cmp	r1, #0
   228be:	d010      	beq.n	228e2 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   228c0:	4b0a      	ldr	r3, [pc, #40]	; (228ec <writeMQTTString+0x40>)
   228c2:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   228c4:	b005      	add	sp, #20
   228c6:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   228c8:	0011      	movs	r1, r2
   228ca:	4b09      	ldr	r3, [pc, #36]	; (228f0 <writeMQTTString+0x44>)
   228cc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   228ce:	0022      	movs	r2, r4
   228d0:	9903      	ldr	r1, [sp, #12]
   228d2:	6828      	ldr	r0, [r5, #0]
   228d4:	4b07      	ldr	r3, [pc, #28]	; (228f4 <writeMQTTString+0x48>)
   228d6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   228d8:	682b      	ldr	r3, [r5, #0]
   228da:	469c      	mov	ip, r3
   228dc:	4464      	add	r4, ip
   228de:	602c      	str	r4, [r5, #0]
   228e0:	e7f0      	b.n	228c4 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   228e2:	2100      	movs	r1, #0
   228e4:	4b02      	ldr	r3, [pc, #8]	; (228f0 <writeMQTTString+0x44>)
   228e6:	4798      	blx	r3
}
   228e8:	e7ec      	b.n	228c4 <writeMQTTString+0x18>
   228ea:	46c0      	nop			; (mov r8, r8)
   228ec:	00022875 	.word	0x00022875
   228f0:	0002284b 	.word	0x0002284b
   228f4:	0002626d 	.word	0x0002626d

000228f8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   228f8:	b570      	push	{r4, r5, r6, lr}
   228fa:	0005      	movs	r5, r0
   228fc:	000c      	movs	r4, r1
   228fe:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   22900:	680b      	ldr	r3, [r1, #0]
   22902:	1ad3      	subs	r3, r2, r3
   22904:	2b01      	cmp	r3, #1
   22906:	dd12      	ble.n	2292e <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   22908:	0008      	movs	r0, r1
   2290a:	4b0a      	ldr	r3, [pc, #40]	; (22934 <readMQTTLenString+0x3c>)
   2290c:	4798      	blx	r3
   2290e:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   22910:	6822      	ldr	r2, [r4, #0]
   22912:	1811      	adds	r1, r2, r0
	int rc = 0;
   22914:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   22916:	428e      	cmp	r6, r1
   22918:	d305      	bcc.n	22926 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2291a:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   2291c:	6823      	ldr	r3, [r4, #0]
   2291e:	469c      	mov	ip, r3
   22920:	4460      	add	r0, ip
   22922:	6020      	str	r0, [r4, #0]
			rc = 1;
   22924:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   22926:	2200      	movs	r2, #0
   22928:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   2292a:	0018      	movs	r0, r3
   2292c:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   2292e:	2300      	movs	r3, #0
   22930:	e7f9      	b.n	22926 <readMQTTLenString+0x2e>
   22932:	46c0      	nop			; (mov r8, r8)
   22934:	00022821 	.word	0x00022821

00022938 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   22938:	b500      	push	{lr}
   2293a:	b085      	sub	sp, #20
   2293c:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   2293e:	2800      	cmp	r0, #0
   22940:	d003      	beq.n	2294a <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   22942:	4b03      	ldr	r3, [pc, #12]	; (22950 <MQTTstrlen+0x18>)
   22944:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   22946:	b005      	add	sp, #20
   22948:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   2294a:	9802      	ldr	r0, [sp, #8]
	return rc;
   2294c:	e7fb      	b.n	22946 <MQTTstrlen+0xe>
   2294e:	46c0      	nop			; (mov r8, r8)
   22950:	0002672f 	.word	0x0002672f

00022954 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   22954:	b570      	push	{r4, r5, r6, lr}
   22956:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   22958:	6806      	ldr	r6, [r0, #0]
   2295a:	2e00      	cmp	r6, #0
   2295c:	d00b      	beq.n	22976 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   2295e:	0030      	movs	r0, r6
   22960:	4b0b      	ldr	r3, [pc, #44]	; (22990 <MQTTPacket_equals+0x3c>)
   22962:	4798      	blx	r3
   22964:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   22966:	0028      	movs	r0, r5
   22968:	4b09      	ldr	r3, [pc, #36]	; (22990 <MQTTPacket_equals+0x3c>)
   2296a:	4798      	blx	r3
   2296c:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2296e:	4284      	cmp	r4, r0
   22970:	d004      	beq.n	2297c <MQTTPacket_equals+0x28>
}
   22972:	0018      	movs	r0, r3
   22974:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   22976:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   22978:	6844      	ldr	r4, [r0, #4]
   2297a:	e7f4      	b.n	22966 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2297c:	0022      	movs	r2, r4
   2297e:	0029      	movs	r1, r5
   22980:	0030      	movs	r0, r6
   22982:	4b04      	ldr	r3, [pc, #16]	; (22994 <MQTTPacket_equals+0x40>)
   22984:	4798      	blx	r3
   22986:	4243      	negs	r3, r0
   22988:	4143      	adcs	r3, r0
   2298a:	b2db      	uxtb	r3, r3
   2298c:	e7f1      	b.n	22972 <MQTTPacket_equals+0x1e>
   2298e:	46c0      	nop			; (mov r8, r8)
   22990:	0002672f 	.word	0x0002672f
   22994:	0002673d 	.word	0x0002673d

00022998 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   22998:	b510      	push	{r4, lr}
   2299a:	b084      	sub	sp, #16
   2299c:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2299e:	0008      	movs	r0, r1
   229a0:	0011      	movs	r1, r2
   229a2:	001a      	movs	r2, r3
   229a4:	4b05      	ldr	r3, [pc, #20]	; (229bc <MQTTSerialize_publishLength+0x24>)
   229a6:	4798      	blx	r3
   229a8:	3002      	adds	r0, #2
   229aa:	9b06      	ldr	r3, [sp, #24]
   229ac:	469c      	mov	ip, r3
   229ae:	4460      	add	r0, ip
	if (qos > 0)
   229b0:	2c00      	cmp	r4, #0
   229b2:	dd00      	ble.n	229b6 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   229b4:	3002      	adds	r0, #2
	return len;
}
   229b6:	b004      	add	sp, #16
   229b8:	bd10      	pop	{r4, pc}
   229ba:	46c0      	nop			; (mov r8, r8)
   229bc:	00022939 	.word	0x00022939

000229c0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   229c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   229c2:	46de      	mov	lr, fp
   229c4:	4657      	mov	r7, sl
   229c6:	464e      	mov	r6, r9
   229c8:	b5c0      	push	{r6, r7, lr}
   229ca:	b084      	sub	sp, #16
   229cc:	0007      	movs	r7, r0
   229ce:	468b      	mov	fp, r1
   229d0:	4692      	mov	sl, r2
   229d2:	001e      	movs	r6, r3
   229d4:	ab0c      	add	r3, sp, #48	; 0x30
   229d6:	781b      	ldrb	r3, [r3, #0]
   229d8:	4699      	mov	r9, r3
   229da:	ab0d      	add	r3, sp, #52	; 0x34
   229dc:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   229de:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   229e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   229e2:	9300      	str	r3, [sp, #0]
   229e4:	990e      	ldr	r1, [sp, #56]	; 0x38
   229e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   229e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   229ea:	0030      	movs	r0, r6
   229ec:	4d1f      	ldr	r5, [pc, #124]	; (22a6c <MQTTSerialize_publish+0xac>)
   229ee:	47a8      	blx	r5
   229f0:	0005      	movs	r5, r0
   229f2:	4b1f      	ldr	r3, [pc, #124]	; (22a70 <MQTTSerialize_publish+0xb0>)
   229f4:	4798      	blx	r3
   229f6:	4558      	cmp	r0, fp
   229f8:	dc34      	bgt.n	22a64 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   229fa:	2201      	movs	r2, #1
   229fc:	4653      	mov	r3, sl
   229fe:	4013      	ands	r3, r2
   22a00:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   22a02:	2103      	movs	r1, #3
   22a04:	4031      	ands	r1, r6
   22a06:	0048      	lsls	r0, r1, #1
   22a08:	2130      	movs	r1, #48	; 0x30
   22a0a:	4319      	orrs	r1, r3
   22a0c:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   22a0e:	464b      	mov	r3, r9
   22a10:	4013      	ands	r3, r2
   22a12:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22a14:	4319      	orrs	r1, r3
   22a16:	a803      	add	r0, sp, #12
   22a18:	4b16      	ldr	r3, [pc, #88]	; (22a74 <MQTTSerialize_publish+0xb4>)
   22a1a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   22a1c:	0029      	movs	r1, r5
   22a1e:	9803      	ldr	r0, [sp, #12]
   22a20:	4b15      	ldr	r3, [pc, #84]	; (22a78 <MQTTSerialize_publish+0xb8>)
   22a22:	4798      	blx	r3
   22a24:	9b03      	ldr	r3, [sp, #12]
   22a26:	469c      	mov	ip, r3
   22a28:	4460      	add	r0, ip
   22a2a:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   22a2c:	990e      	ldr	r1, [sp, #56]	; 0x38
   22a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22a32:	a803      	add	r0, sp, #12
   22a34:	4d11      	ldr	r5, [pc, #68]	; (22a7c <MQTTSerialize_publish+0xbc>)
   22a36:	47a8      	blx	r5

	if (qos > 0)
   22a38:	2e00      	cmp	r6, #0
   22a3a:	dd03      	ble.n	22a44 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   22a3c:	0021      	movs	r1, r4
   22a3e:	a803      	add	r0, sp, #12
   22a40:	4b0f      	ldr	r3, [pc, #60]	; (22a80 <MQTTSerialize_publish+0xc0>)
   22a42:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   22a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22a46:	9911      	ldr	r1, [sp, #68]	; 0x44
   22a48:	9803      	ldr	r0, [sp, #12]
   22a4a:	4b0e      	ldr	r3, [pc, #56]	; (22a84 <MQTTSerialize_publish+0xc4>)
   22a4c:	4798      	blx	r3
	ptr += payloadlen;
   22a4e:	9b03      	ldr	r3, [sp, #12]
   22a50:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22a52:	4694      	mov	ip, r2
   22a54:	4463      	add	r3, ip

	rc = ptr - buf;
   22a56:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22a58:	b004      	add	sp, #16
   22a5a:	bc1c      	pop	{r2, r3, r4}
   22a5c:	4691      	mov	r9, r2
   22a5e:	469a      	mov	sl, r3
   22a60:	46a3      	mov	fp, r4
   22a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22a64:	2002      	movs	r0, #2
   22a66:	4240      	negs	r0, r0
	return rc;
   22a68:	e7f6      	b.n	22a58 <MQTTSerialize_publish+0x98>
   22a6a:	46c0      	nop			; (mov r8, r8)
   22a6c:	00022999 	.word	0x00022999
   22a70:	000227dd 	.word	0x000227dd
   22a74:	0002283f 	.word	0x0002283f
   22a78:	00022755 	.word	0x00022755
   22a7c:	000228ad 	.word	0x000228ad
   22a80:	0002284b 	.word	0x0002284b
   22a84:	0002626d 	.word	0x0002626d

00022a88 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   22a88:	b530      	push	{r4, r5, lr}
   22a8a:	b083      	sub	sp, #12
   22a8c:	0004      	movs	r4, r0
   22a8e:	a806      	add	r0, sp, #24
   22a90:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   22a92:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   22a94:	2903      	cmp	r1, #3
   22a96:	dd1e      	ble.n	22ad6 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   22a98:	210f      	movs	r1, #15
   22a9a:	4011      	ands	r1, r2
	header.bits.dup = dup;
   22a9c:	2001      	movs	r0, #1
   22a9e:	4003      	ands	r3, r0
   22aa0:	00db      	lsls	r3, r3, #3
   22aa2:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   22aa4:	3a06      	subs	r2, #6
   22aa6:	4250      	negs	r0, r2
   22aa8:	4142      	adcs	r2, r0
   22aaa:	0052      	lsls	r2, r2, #1
   22aac:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   22aae:	4311      	orrs	r1, r2
   22ab0:	a801      	add	r0, sp, #4
   22ab2:	4b0a      	ldr	r3, [pc, #40]	; (22adc <MQTTSerialize_ack+0x54>)
   22ab4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   22ab6:	2102      	movs	r1, #2
   22ab8:	9801      	ldr	r0, [sp, #4]
   22aba:	4b09      	ldr	r3, [pc, #36]	; (22ae0 <MQTTSerialize_ack+0x58>)
   22abc:	4798      	blx	r3
   22abe:	9b01      	ldr	r3, [sp, #4]
   22ac0:	469c      	mov	ip, r3
   22ac2:	4460      	add	r0, ip
   22ac4:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   22ac6:	0029      	movs	r1, r5
   22ac8:	a801      	add	r0, sp, #4
   22aca:	4b06      	ldr	r3, [pc, #24]	; (22ae4 <MQTTSerialize_ack+0x5c>)
   22acc:	4798      	blx	r3
	rc = ptr - buf;
   22ace:	9b01      	ldr	r3, [sp, #4]
   22ad0:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22ad2:	b003      	add	sp, #12
   22ad4:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22ad6:	2002      	movs	r0, #2
   22ad8:	4240      	negs	r0, r0
	return rc;
   22ada:	e7fa      	b.n	22ad2 <MQTTSerialize_ack+0x4a>
   22adc:	0002283f 	.word	0x0002283f
   22ae0:	00022755 	.word	0x00022755
   22ae4:	0002284b 	.word	0x0002284b

00022ae8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   22ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   22aea:	46c6      	mov	lr, r8
   22aec:	b500      	push	{lr}
   22aee:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   22af0:	dd12      	ble.n	22b18 <MQTTSerialize_subscribeLength+0x30>
   22af2:	000c      	movs	r4, r1
   22af4:	2602      	movs	r6, #2
   22af6:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   22af8:	4b08      	ldr	r3, [pc, #32]	; (22b1c <MQTTSerialize_subscribeLength+0x34>)
   22afa:	4698      	mov	r8, r3
   22afc:	6820      	ldr	r0, [r4, #0]
   22afe:	6861      	ldr	r1, [r4, #4]
   22b00:	68a2      	ldr	r2, [r4, #8]
   22b02:	47c0      	blx	r8
   22b04:	3003      	adds	r0, #3
   22b06:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   22b08:	3501      	adds	r5, #1
   22b0a:	340c      	adds	r4, #12
   22b0c:	42af      	cmp	r7, r5
   22b0e:	d1f5      	bne.n	22afc <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   22b10:	0030      	movs	r0, r6
   22b12:	bc04      	pop	{r2}
   22b14:	4690      	mov	r8, r2
   22b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   22b18:	2602      	movs	r6, #2
	return len;
   22b1a:	e7f9      	b.n	22b10 <MQTTSerialize_subscribeLength+0x28>
   22b1c:	00022939 	.word	0x00022939

00022b20 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   22b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b22:	46d6      	mov	lr, sl
   22b24:	464f      	mov	r7, r9
   22b26:	4646      	mov	r6, r8
   22b28:	b5c0      	push	{r6, r7, lr}
   22b2a:	b084      	sub	sp, #16
   22b2c:	4682      	mov	sl, r0
   22b2e:	000e      	movs	r6, r1
   22b30:	0015      	movs	r5, r2
   22b32:	9301      	str	r3, [sp, #4]
   22b34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   22b36:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   22b38:	990d      	ldr	r1, [sp, #52]	; 0x34
   22b3a:	0038      	movs	r0, r7
   22b3c:	4b1f      	ldr	r3, [pc, #124]	; (22bbc <MQTTSerialize_subscribe+0x9c>)
   22b3e:	4798      	blx	r3
   22b40:	0004      	movs	r4, r0
   22b42:	4b1f      	ldr	r3, [pc, #124]	; (22bc0 <MQTTSerialize_subscribe+0xa0>)
   22b44:	4798      	blx	r3
   22b46:	42b0      	cmp	r0, r6
   22b48:	dc34      	bgt.n	22bb4 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   22b4a:	2101      	movs	r1, #1
   22b4c:	4029      	ands	r1, r5
   22b4e:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   22b50:	2180      	movs	r1, #128	; 0x80
   22b52:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22b54:	2302      	movs	r3, #2
   22b56:	4319      	orrs	r1, r3
   22b58:	a803      	add	r0, sp, #12
   22b5a:	4b1a      	ldr	r3, [pc, #104]	; (22bc4 <MQTTSerialize_subscribe+0xa4>)
   22b5c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   22b5e:	0021      	movs	r1, r4
   22b60:	9803      	ldr	r0, [sp, #12]
   22b62:	4b19      	ldr	r3, [pc, #100]	; (22bc8 <MQTTSerialize_subscribe+0xa8>)
   22b64:	4798      	blx	r3
   22b66:	9a03      	ldr	r2, [sp, #12]
   22b68:	4694      	mov	ip, r2
   22b6a:	4460      	add	r0, ip
   22b6c:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   22b6e:	9901      	ldr	r1, [sp, #4]
   22b70:	a803      	add	r0, sp, #12
   22b72:	4b16      	ldr	r3, [pc, #88]	; (22bcc <MQTTSerialize_subscribe+0xac>)
   22b74:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   22b76:	2f00      	cmp	r7, #0
   22b78:	dd13      	ble.n	22ba2 <MQTTSerialize_subscribe+0x82>
   22b7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   22b7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   22b7e:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   22b80:	4b13      	ldr	r3, [pc, #76]	; (22bd0 <MQTTSerialize_subscribe+0xb0>)
   22b82:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   22b84:	4b0f      	ldr	r3, [pc, #60]	; (22bc4 <MQTTSerialize_subscribe+0xa4>)
   22b86:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   22b88:	6821      	ldr	r1, [r4, #0]
   22b8a:	6862      	ldr	r2, [r4, #4]
   22b8c:	68a3      	ldr	r3, [r4, #8]
   22b8e:	a803      	add	r0, sp, #12
   22b90:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   22b92:	ce02      	ldmia	r6!, {r1}
   22b94:	b2c9      	uxtb	r1, r1
   22b96:	a803      	add	r0, sp, #12
   22b98:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   22b9a:	3501      	adds	r5, #1
   22b9c:	340c      	adds	r4, #12
   22b9e:	42af      	cmp	r7, r5
   22ba0:	d1f2      	bne.n	22b88 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   22ba2:	9b03      	ldr	r3, [sp, #12]
   22ba4:	4652      	mov	r2, sl
   22ba6:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22ba8:	b004      	add	sp, #16
   22baa:	bc1c      	pop	{r2, r3, r4}
   22bac:	4690      	mov	r8, r2
   22bae:	4699      	mov	r9, r3
   22bb0:	46a2      	mov	sl, r4
   22bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22bb4:	2002      	movs	r0, #2
   22bb6:	4240      	negs	r0, r0
	return rc;
   22bb8:	e7f6      	b.n	22ba8 <MQTTSerialize_subscribe+0x88>
   22bba:	46c0      	nop			; (mov r8, r8)
   22bbc:	00022ae9 	.word	0x00022ae9
   22bc0:	000227dd 	.word	0x000227dd
   22bc4:	0002283f 	.word	0x0002283f
   22bc8:	00022755 	.word	0x00022755
   22bcc:	0002284b 	.word	0x0002284b
   22bd0:	000228ad 	.word	0x000228ad

00022bd4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   22bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bd6:	46ce      	mov	lr, r9
   22bd8:	4647      	mov	r7, r8
   22bda:	b580      	push	{r7, lr}
   22bdc:	b083      	sub	sp, #12
   22bde:	0004      	movs	r4, r0
   22be0:	000e      	movs	r6, r1
   22be2:	0015      	movs	r5, r2
   22be4:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22be8:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22bea:	a801      	add	r0, sp, #4
   22bec:	4b1e      	ldr	r3, [pc, #120]	; (22c68 <MQTTDeserialize_suback+0x94>)
   22bee:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   22bf0:	23f0      	movs	r3, #240	; 0xf0
   22bf2:	4003      	ands	r3, r0
	int rc = 0;
   22bf4:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   22bf6:	2b90      	cmp	r3, #144	; 0x90
   22bf8:	d004      	beq.n	22c04 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22bfa:	b003      	add	sp, #12
   22bfc:	bc0c      	pop	{r2, r3}
   22bfe:	4690      	mov	r8, r2
   22c00:	4699      	mov	r9, r3
   22c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   22c04:	4669      	mov	r1, sp
   22c06:	9801      	ldr	r0, [sp, #4]
   22c08:	4b18      	ldr	r3, [pc, #96]	; (22c6c <MQTTDeserialize_suback+0x98>)
   22c0a:	4798      	blx	r3
   22c0c:	9b01      	ldr	r3, [sp, #4]
   22c0e:	181b      	adds	r3, r3, r0
   22c10:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   22c12:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   22c14:	2a01      	cmp	r2, #1
   22c16:	ddf0      	ble.n	22bfa <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   22c18:	4698      	mov	r8, r3
   22c1a:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   22c1c:	a801      	add	r0, sp, #4
   22c1e:	4b14      	ldr	r3, [pc, #80]	; (22c70 <MQTTDeserialize_suback+0x9c>)
   22c20:	4798      	blx	r3
   22c22:	8020      	strh	r0, [r4, #0]
	*count = 0;
   22c24:	2300      	movs	r3, #0
   22c26:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   22c28:	9b01      	ldr	r3, [sp, #4]
   22c2a:	4598      	cmp	r8, r3
   22c2c:	d916      	bls.n	22c5c <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   22c2e:	2e00      	cmp	r6, #0
   22c30:	db16      	blt.n	22c60 <MQTTDeserialize_suback+0x8c>
   22c32:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   22c34:	4a0c      	ldr	r2, [pc, #48]	; (22c68 <MQTTDeserialize_suback+0x94>)
   22c36:	4691      	mov	r9, r2
   22c38:	1c5a      	adds	r2, r3, #1
   22c3a:	602a      	str	r2, [r5, #0]
   22c3c:	009b      	lsls	r3, r3, #2
   22c3e:	18fc      	adds	r4, r7, r3
   22c40:	a801      	add	r0, sp, #4
   22c42:	47c8      	blx	r9
   22c44:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   22c46:	9b01      	ldr	r3, [sp, #4]
   22c48:	4598      	cmp	r8, r3
   22c4a:	d905      	bls.n	22c58 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   22c4c:	682b      	ldr	r3, [r5, #0]
   22c4e:	42b3      	cmp	r3, r6
   22c50:	ddf2      	ble.n	22c38 <MQTTDeserialize_suback+0x64>
			rc = -1;
   22c52:	2001      	movs	r0, #1
   22c54:	4240      	negs	r0, r0
	return rc;
   22c56:	e7d0      	b.n	22bfa <MQTTDeserialize_suback+0x26>
	rc = 1;
   22c58:	2001      	movs	r0, #1
   22c5a:	e7ce      	b.n	22bfa <MQTTDeserialize_suback+0x26>
   22c5c:	2001      	movs	r0, #1
   22c5e:	e7cc      	b.n	22bfa <MQTTDeserialize_suback+0x26>
			rc = -1;
   22c60:	2001      	movs	r0, #1
   22c62:	4240      	negs	r0, r0
   22c64:	e7c9      	b.n	22bfa <MQTTDeserialize_suback+0x26>
   22c66:	46c0      	nop			; (mov r8, r8)
   22c68:	00022833 	.word	0x00022833
   22c6c:	00022805 	.word	0x00022805
   22c70:	00022821 	.word	0x00022821

00022c74 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   22c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c76:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   22c78:	2041      	movs	r0, #65	; 0x41
   22c7a:	5c23      	ldrb	r3, [r4, r0]
   22c7c:	2501      	movs	r5, #1
   22c7e:	432b      	orrs	r3, r5
   22c80:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   22c82:	b292      	uxth	r2, r2
   22c84:	2000      	movs	r0, #0
   22c86:	5620      	ldrsb	r0, [r4, r0]
   22c88:	2300      	movs	r3, #0
   22c8a:	4d12      	ldr	r5, [pc, #72]	; (22cd4 <_http_client_send_wait+0x60>)
   22c8c:	47a8      	blx	r5
   22c8e:	2800      	cmp	r0, #0
   22c90:	db16      	blt.n	22cc0 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c92:	2341      	movs	r3, #65	; 0x41
   22c94:	5ce3      	ldrb	r3, [r4, r3]
   22c96:	07db      	lsls	r3, r3, #31
   22c98:	d518      	bpl.n	22ccc <_http_client_send_wait+0x58>
   22c9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   22c9c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c9e:	2b02      	cmp	r3, #2
   22ca0:	d917      	bls.n	22cd2 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   22ca2:	4f0d      	ldr	r7, [pc, #52]	; (22cd8 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   22ca4:	4e0d      	ldr	r6, [pc, #52]	; (22cdc <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22ca6:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   22ca8:	2000      	movs	r0, #0
   22caa:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   22cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
   22cae:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22cb0:	5d63      	ldrb	r3, [r4, r5]
   22cb2:	07db      	lsls	r3, r3, #31
   22cb4:	d50c      	bpl.n	22cd0 <_http_client_send_wait+0x5c>
   22cb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22cb8:	2b02      	cmp	r3, #2
   22cba:	d8f5      	bhi.n	22ca8 <_http_client_send_wait+0x34>
	return 0;
   22cbc:	2000      	movs	r0, #0
   22cbe:	e008      	b.n	22cd2 <_http_client_send_wait+0x5e>
		module->sending = 0;
   22cc0:	2241      	movs	r2, #65	; 0x41
   22cc2:	5ca3      	ldrb	r3, [r4, r2]
   22cc4:	2101      	movs	r1, #1
   22cc6:	438b      	bics	r3, r1
   22cc8:	54a3      	strb	r3, [r4, r2]
		return result;
   22cca:	e002      	b.n	22cd2 <_http_client_send_wait+0x5e>
	return 0;
   22ccc:	2000      	movs	r0, #0
   22cce:	e000      	b.n	22cd2 <_http_client_send_wait+0x5e>
   22cd0:	2000      	movs	r0, #0
}
   22cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22cd4:	0001d201 	.word	0x0001d201
   22cd8:	0001b219 	.word	0x0001b219
   22cdc:	00023e09 	.word	0x00023e09

00022ce0 <http_client_get_config_defaults>:
	config->port = 80;
   22ce0:	2350      	movs	r3, #80	; 0x50
   22ce2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   22ce4:	2300      	movs	r3, #0
   22ce6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   22ce8:	4a05      	ldr	r2, [pc, #20]	; (22d00 <http_client_get_config_defaults+0x20>)
   22cea:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   22cec:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   22cee:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   22cf0:	3301      	adds	r3, #1
   22cf2:	33ff      	adds	r3, #255	; 0xff
   22cf4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   22cf6:	3bae      	subs	r3, #174	; 0xae
   22cf8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   22cfa:	4b02      	ldr	r3, [pc, #8]	; (22d04 <http_client_get_config_defaults+0x24>)
   22cfc:	6183      	str	r3, [r0, #24]
}
   22cfe:	4770      	bx	lr
   22d00:	00004e20 	.word	0x00004e20
   22d04:	0002acf0 	.word	0x0002acf0

00022d08 <http_client_init>:
{
   22d08:	b570      	push	{r4, r5, r6, lr}
   22d0a:	0004      	movs	r4, r0
   22d0c:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   22d0e:	2800      	cmp	r0, #0
   22d10:	d038      	beq.n	22d84 <http_client_init+0x7c>
   22d12:	2900      	cmp	r1, #0
   22d14:	d039      	beq.n	22d8a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   22d16:	690b      	ldr	r3, [r1, #16]
   22d18:	2b00      	cmp	r3, #0
   22d1a:	d039      	beq.n	22d90 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   22d1c:	684b      	ldr	r3, [r1, #4]
   22d1e:	2b00      	cmp	r3, #0
   22d20:	d039      	beq.n	22d96 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   22d22:	694b      	ldr	r3, [r1, #20]
   22d24:	2b51      	cmp	r3, #81	; 0x51
   22d26:	d939      	bls.n	22d9c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   22d28:	22e8      	movs	r2, #232	; 0xe8
   22d2a:	2100      	movs	r1, #0
   22d2c:	4b1e      	ldr	r3, [pc, #120]	; (22da8 <http_client_init+0xa0>)
   22d2e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   22d30:	0020      	movs	r0, r4
   22d32:	3050      	adds	r0, #80	; 0x50
   22d34:	221c      	movs	r2, #28
   22d36:	0029      	movs	r1, r5
   22d38:	4b1c      	ldr	r3, [pc, #112]	; (22dac <http_client_init+0xa4>)
   22d3a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   22d3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22d3e:	2b00      	cmp	r3, #0
   22d40:	d008      	beq.n	22d54 <http_client_init+0x4c>
	if (config->timeout > 0) {
   22d42:	892b      	ldrh	r3, [r5, #8]
   22d44:	2b00      	cmp	r3, #0
   22d46:	d111      	bne.n	22d6c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   22d48:	2300      	movs	r3, #0
   22d4a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22d4c:	22d8      	movs	r2, #216	; 0xd8
   22d4e:	50a3      	str	r3, [r4, r2]
	return 0;
   22d50:	2000      	movs	r0, #0
}
   22d52:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   22d54:	6928      	ldr	r0, [r5, #16]
   22d56:	4b16      	ldr	r3, [pc, #88]	; (22db0 <http_client_init+0xa8>)
   22d58:	4798      	blx	r3
   22d5a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   22d5c:	2800      	cmp	r0, #0
   22d5e:	d020      	beq.n	22da2 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   22d60:	2241      	movs	r2, #65	; 0x41
   22d62:	5ca3      	ldrb	r3, [r4, r2]
   22d64:	2104      	movs	r1, #4
   22d66:	430b      	orrs	r3, r1
   22d68:	54a3      	strb	r3, [r4, r2]
   22d6a:	e7ea      	b.n	22d42 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   22d6c:	6868      	ldr	r0, [r5, #4]
   22d6e:	2300      	movs	r3, #0
   22d70:	0022      	movs	r2, r4
   22d72:	4910      	ldr	r1, [pc, #64]	; (22db4 <http_client_init+0xac>)
   22d74:	4d10      	ldr	r5, [pc, #64]	; (22db8 <http_client_init+0xb0>)
   22d76:	47a8      	blx	r5
   22d78:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   22d7a:	2800      	cmp	r0, #0
   22d7c:	dae4      	bge.n	22d48 <http_client_init+0x40>
			return -ENOSPC;
   22d7e:	201c      	movs	r0, #28
   22d80:	4240      	negs	r0, r0
   22d82:	e7e6      	b.n	22d52 <http_client_init+0x4a>
		return -EINVAL;
   22d84:	2016      	movs	r0, #22
   22d86:	4240      	negs	r0, r0
   22d88:	e7e3      	b.n	22d52 <http_client_init+0x4a>
   22d8a:	2016      	movs	r0, #22
   22d8c:	4240      	negs	r0, r0
   22d8e:	e7e0      	b.n	22d52 <http_client_init+0x4a>
		return -EINVAL;
   22d90:	2016      	movs	r0, #22
   22d92:	4240      	negs	r0, r0
   22d94:	e7dd      	b.n	22d52 <http_client_init+0x4a>
		return -EINVAL;
   22d96:	2016      	movs	r0, #22
   22d98:	4240      	negs	r0, r0
   22d9a:	e7da      	b.n	22d52 <http_client_init+0x4a>
		return -EINVAL;
   22d9c:	2016      	movs	r0, #22
   22d9e:	4240      	negs	r0, r0
   22da0:	e7d7      	b.n	22d52 <http_client_init+0x4a>
			return -ENOMEM;
   22da2:	200c      	movs	r0, #12
   22da4:	4240      	negs	r0, r0
   22da6:	e7d4      	b.n	22d52 <http_client_init+0x4a>
   22da8:	000262a3 	.word	0x000262a3
   22dac:	0002626d 	.word	0x0002626d
   22db0:	00026245 	.word	0x00026245
   22db4:	00022ecd 	.word	0x00022ecd
   22db8:	00023d95 	.word	0x00023d95

00022dbc <http_client_register_callback>:
	if (module == NULL) {
   22dbc:	2800      	cmp	r0, #0
   22dbe:	d002      	beq.n	22dc6 <http_client_register_callback+0xa>
	module->cb = callback;
   22dc0:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   22dc2:	2000      	movs	r0, #0
}
   22dc4:	4770      	bx	lr
		return -EINVAL;
   22dc6:	2016      	movs	r0, #22
   22dc8:	4240      	negs	r0, r0
   22dca:	e7fb      	b.n	22dc4 <http_client_register_callback+0x8>

00022dcc <_http_client_clear_conn>:
{
   22dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   22dce:	b085      	sub	sp, #20
   22dd0:	0004      	movs	r4, r0
   22dd2:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   22dd4:	23c0      	movs	r3, #192	; 0xc0
   22dd6:	58c3      	ldr	r3, [r0, r3]
   22dd8:	2b00      	cmp	r3, #0
   22dda:	d002      	beq.n	22de2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   22ddc:	22c4      	movs	r2, #196	; 0xc4
   22dde:	5880      	ldr	r0, [r0, r2]
   22de0:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   22de2:	0020      	movs	r0, r4
   22de4:	30b0      	adds	r0, #176	; 0xb0
   22de6:	2218      	movs	r2, #24
   22de8:	2100      	movs	r1, #0
   22dea:	4b17      	ldr	r3, [pc, #92]	; (22e48 <_http_client_clear_conn+0x7c>)
   22dec:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   22dee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22df0:	2b00      	cmp	r3, #0
   22df2:	d124      	bne.n	22e3e <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   22df4:	2300      	movs	r3, #0
   22df6:	56e3      	ldrsb	r3, [r4, r3]
   22df8:	009b      	lsls	r3, r3, #2
   22dfa:	2500      	movs	r5, #0
   22dfc:	4a13      	ldr	r2, [pc, #76]	; (22e4c <_http_client_clear_conn+0x80>)
   22dfe:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   22e00:	0020      	movs	r0, r4
   22e02:	306c      	adds	r0, #108	; 0x6c
   22e04:	226c      	movs	r2, #108	; 0x6c
   22e06:	2100      	movs	r1, #0
   22e08:	4f0f      	ldr	r7, [pc, #60]	; (22e48 <_http_client_clear_conn+0x7c>)
   22e0a:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   22e0c:	0020      	movs	r0, r4
   22e0e:	30d8      	adds	r0, #216	; 0xd8
   22e10:	2210      	movs	r2, #16
   22e12:	2100      	movs	r1, #0
   22e14:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   22e16:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22e18:	23d8      	movs	r3, #216	; 0xd8
   22e1a:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   22e1c:	2241      	movs	r2, #65	; 0x41
   22e1e:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   22e20:	2101      	movs	r1, #1
   22e22:	438b      	bics	r3, r1
   22e24:	3101      	adds	r1, #1
   22e26:	438b      	bics	r3, r1
   22e28:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   22e2a:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   22e2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22e2e:	2b00      	cmp	r3, #0
   22e30:	d003      	beq.n	22e3a <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   22e32:	aa01      	add	r2, sp, #4
   22e34:	3102      	adds	r1, #2
   22e36:	0020      	movs	r0, r4
   22e38:	4798      	blx	r3
}
   22e3a:	b005      	add	sp, #20
   22e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   22e3e:	2000      	movs	r0, #0
   22e40:	5620      	ldrsb	r0, [r4, r0]
   22e42:	4b03      	ldr	r3, [pc, #12]	; (22e50 <_http_client_clear_conn+0x84>)
   22e44:	4798      	blx	r3
   22e46:	e7d5      	b.n	22df4 <_http_client_clear_conn+0x28>
   22e48:	000262a3 	.word	0x000262a3
   22e4c:	20004130 	.word	0x20004130
   22e50:	0001d32d 	.word	0x0001d32d

00022e54 <http_client_socket_resolve_handler>:
{
   22e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e56:	b087      	sub	sp, #28
   22e58:	9000      	str	r0, [sp, #0]
   22e5a:	9101      	str	r1, [sp, #4]
   22e5c:	4c17      	ldr	r4, [pc, #92]	; (22ebc <http_client_socket_resolve_handler+0x68>)
   22e5e:	0026      	movs	r6, r4
   22e60:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22e62:	4f17      	ldr	r7, [pc, #92]	; (22ec0 <http_client_socket_resolve_handler+0x6c>)
   22e64:	e015      	b.n	22e92 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   22e66:	2302      	movs	r3, #2
   22e68:	aa02      	add	r2, sp, #8
   22e6a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   22e6c:	334e      	adds	r3, #78	; 0x4e
   22e6e:	5aeb      	ldrh	r3, [r5, r3]
   22e70:	021a      	lsls	r2, r3, #8
   22e72:	0a1b      	lsrs	r3, r3, #8
   22e74:	4313      	orrs	r3, r2
   22e76:	aa02      	add	r2, sp, #8
   22e78:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   22e7a:	9b01      	ldr	r3, [sp, #4]
   22e7c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   22e7e:	2000      	movs	r0, #0
   22e80:	5628      	ldrsb	r0, [r5, r0]
   22e82:	2210      	movs	r2, #16
   22e84:	a902      	add	r1, sp, #8
   22e86:	4b0f      	ldr	r3, [pc, #60]	; (22ec4 <http_client_socket_resolve_handler+0x70>)
   22e88:	4798      	blx	r3
				return;
   22e8a:	e015      	b.n	22eb8 <http_client_socket_resolve_handler+0x64>
   22e8c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   22e8e:	42b4      	cmp	r4, r6
   22e90:	d012      	beq.n	22eb8 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   22e92:	6825      	ldr	r5, [r4, #0]
   22e94:	2d00      	cmp	r5, #0
   22e96:	d0f9      	beq.n	22e8c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22e98:	1c69      	adds	r1, r5, #1
   22e9a:	9800      	ldr	r0, [sp, #0]
   22e9c:	47b8      	blx	r7
   22e9e:	2800      	cmp	r0, #0
   22ea0:	d1f4      	bne.n	22e8c <http_client_socket_resolve_handler+0x38>
   22ea2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   22ea4:	2b01      	cmp	r3, #1
   22ea6:	d1f1      	bne.n	22e8c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   22ea8:	9b01      	ldr	r3, [sp, #4]
   22eaa:	2b00      	cmp	r3, #0
   22eac:	d1db      	bne.n	22e66 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   22eae:	2176      	movs	r1, #118	; 0x76
   22eb0:	4249      	negs	r1, r1
   22eb2:	0028      	movs	r0, r5
   22eb4:	4b04      	ldr	r3, [pc, #16]	; (22ec8 <http_client_socket_resolve_handler+0x74>)
   22eb6:	4798      	blx	r3
}
   22eb8:	b007      	add	sp, #28
   22eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ebc:	20004130 	.word	0x20004130
   22ec0:	000266cf 	.word	0x000266cf
   22ec4:	0001d171 	.word	0x0001d171
   22ec8:	00022dcd 	.word	0x00022dcd

00022ecc <http_client_timer_callback>:
{
   22ecc:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   22ece:	2a00      	cmp	r2, #0
   22ed0:	d004      	beq.n	22edc <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   22ed2:	213e      	movs	r1, #62	; 0x3e
   22ed4:	4249      	negs	r1, r1
   22ed6:	0010      	movs	r0, r2
   22ed8:	4b01      	ldr	r3, [pc, #4]	; (22ee0 <http_client_timer_callback+0x14>)
   22eda:	4798      	blx	r3
}
   22edc:	bd10      	pop	{r4, pc}
   22ede:	46c0      	nop			; (mov r8, r8)
   22ee0:	00022dcd 	.word	0x00022dcd

00022ee4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   22ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ee6:	46de      	mov	lr, fp
   22ee8:	4657      	mov	r7, sl
   22eea:	b580      	push	{r7, lr}
   22eec:	b095      	sub	sp, #84	; 0x54
   22eee:	af02      	add	r7, sp, #8
   22ef0:	0004      	movs	r4, r0
   22ef2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   22ef4:	2310      	movs	r3, #16
   22ef6:	2208      	movs	r2, #8
   22ef8:	18ba      	adds	r2, r7, r2
   22efa:	18d2      	adds	r2, r2, r3
   22efc:	4bb1      	ldr	r3, [pc, #708]	; (231c4 <_http_client_request+0x2e0>)
   22efe:	cb23      	ldmia	r3!, {r0, r1, r5}
   22f00:	c223      	stmia	r2!, {r0, r1, r5}
   22f02:	681b      	ldr	r3, [r3, #0]
   22f04:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   22f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
   22f08:	1dd3      	adds	r3, r2, #7
   22f0a:	08db      	lsrs	r3, r3, #3
   22f0c:	00db      	lsls	r3, r3, #3
   22f0e:	4669      	mov	r1, sp
   22f10:	1acb      	subs	r3, r1, r3
   22f12:	469d      	mov	sp, r3
   22f14:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   22f16:	2c00      	cmp	r4, #0
   22f18:	d100      	bne.n	22f1c <_http_client_request+0x38>
   22f1a:	e1f0      	b.n	232fe <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   22f1c:	2341      	movs	r3, #65	; 0x41
   22f1e:	5ce3      	ldrb	r3, [r4, r3]
   22f20:	07db      	lsls	r3, r3, #31
   22f22:	d500      	bpl.n	22f26 <_http_client_request+0x42>
   22f24:	e1eb      	b.n	232fe <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   22f26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22f28:	2b03      	cmp	r3, #3
   22f2a:	d004      	beq.n	22f36 <_http_client_request+0x52>
   22f2c:	2b04      	cmp	r3, #4
   22f2e:	d100      	bne.n	22f32 <_http_client_request+0x4e>
   22f30:	e120      	b.n	23174 <_http_client_request+0x290>
   22f32:	46dd      	mov	sp, fp
   22f34:	e1e4      	b.n	23300 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   22f36:	2300      	movs	r3, #0
   22f38:	21cc      	movs	r1, #204	; 0xcc
   22f3a:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   22f3c:	3104      	adds	r1, #4
   22f3e:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   22f40:	9400      	str	r4, [sp, #0]
   22f42:	4ba1      	ldr	r3, [pc, #644]	; (231c8 <_http_client_request+0x2e4>)
   22f44:	0031      	movs	r1, r6
   22f46:	202c      	movs	r0, #44	; 0x2c
   22f48:	2508      	movs	r5, #8
   22f4a:	46ac      	mov	ip, r5
   22f4c:	44bc      	add	ip, r7
   22f4e:	4460      	add	r0, ip
   22f50:	4d9e      	ldr	r5, [pc, #632]	; (231cc <_http_client_request+0x2e8>)
   22f52:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   22f54:	23c8      	movs	r3, #200	; 0xc8
   22f56:	5ce3      	ldrb	r3, [r4, r3]
   22f58:	2b01      	cmp	r3, #1
   22f5a:	d100      	bne.n	22f5e <_http_client_request+0x7a>
   22f5c:	e0a9      	b.n	230b2 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   22f5e:	2b02      	cmp	r3, #2
   22f60:	d100      	bne.n	22f64 <_http_client_request+0x80>
   22f62:	e0af      	b.n	230c4 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   22f64:	2b03      	cmp	r3, #3
   22f66:	d100      	bne.n	22f6a <_http_client_request+0x86>
   22f68:	e0b5      	b.n	230d6 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   22f6a:	2b04      	cmp	r3, #4
   22f6c:	d100      	bne.n	22f70 <_http_client_request+0x8c>
   22f6e:	e0bb      	b.n	230e8 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   22f70:	2b05      	cmp	r3, #5
   22f72:	d100      	bne.n	22f76 <_http_client_request+0x92>
   22f74:	e0c1      	b.n	230fa <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   22f76:	2b06      	cmp	r3, #6
   22f78:	d100      	bne.n	22f7c <_http_client_request+0x98>
   22f7a:	e0c7      	b.n	2310c <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   22f7c:	0025      	movs	r5, r4
   22f7e:	3570      	adds	r5, #112	; 0x70
   22f80:	0028      	movs	r0, r5
   22f82:	4b93      	ldr	r3, [pc, #588]	; (231d0 <_http_client_request+0x2ec>)
   22f84:	469a      	mov	sl, r3
   22f86:	4798      	blx	r3
   22f88:	0002      	movs	r2, r0
   22f8a:	0029      	movs	r1, r5
   22f8c:	232c      	movs	r3, #44	; 0x2c
   22f8e:	2008      	movs	r0, #8
   22f90:	1838      	adds	r0, r7, r0
   22f92:	18c0      	adds	r0, r0, r3
   22f94:	4d8f      	ldr	r5, [pc, #572]	; (231d4 <_http_client_request+0x2f0>)
   22f96:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   22f98:	220b      	movs	r2, #11
   22f9a:	498f      	ldr	r1, [pc, #572]	; (231d8 <_http_client_request+0x2f4>)
   22f9c:	232c      	movs	r3, #44	; 0x2c
   22f9e:	2008      	movs	r0, #8
   22fa0:	1838      	adds	r0, r7, r0
   22fa2:	18c0      	adds	r0, r0, r3
   22fa4:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   22fa6:	220c      	movs	r2, #12
   22fa8:	498c      	ldr	r1, [pc, #560]	; (231dc <_http_client_request+0x2f8>)
   22faa:	232c      	movs	r3, #44	; 0x2c
   22fac:	2008      	movs	r0, #8
   22fae:	1838      	adds	r0, r7, r0
   22fb0:	18c0      	adds	r0, r0, r3
   22fb2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   22fb4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22fb6:	607b      	str	r3, [r7, #4]
   22fb8:	0018      	movs	r0, r3
   22fba:	47d0      	blx	sl
   22fbc:	0002      	movs	r2, r0
   22fbe:	6879      	ldr	r1, [r7, #4]
   22fc0:	232c      	movs	r3, #44	; 0x2c
   22fc2:	2008      	movs	r0, #8
   22fc4:	1838      	adds	r0, r7, r0
   22fc6:	18c0      	adds	r0, r0, r3
   22fc8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22fca:	2202      	movs	r2, #2
   22fcc:	4984      	ldr	r1, [pc, #528]	; (231e0 <_http_client_request+0x2fc>)
   22fce:	232c      	movs	r3, #44	; 0x2c
   22fd0:	2008      	movs	r0, #8
   22fd2:	1838      	adds	r0, r7, r0
   22fd4:	18c0      	adds	r0, r0, r3
   22fd6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   22fd8:	2206      	movs	r2, #6
   22fda:	4982      	ldr	r1, [pc, #520]	; (231e4 <_http_client_request+0x300>)
   22fdc:	232c      	movs	r3, #44	; 0x2c
   22fde:	2008      	movs	r0, #8
   22fe0:	1838      	adds	r0, r7, r0
   22fe2:	18c0      	adds	r0, r0, r3
   22fe4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   22fe6:	1c63      	adds	r3, r4, #1
   22fe8:	607b      	str	r3, [r7, #4]
   22fea:	0018      	movs	r0, r3
   22fec:	47d0      	blx	sl
   22fee:	0002      	movs	r2, r0
   22ff0:	6879      	ldr	r1, [r7, #4]
   22ff2:	232c      	movs	r3, #44	; 0x2c
   22ff4:	2008      	movs	r0, #8
   22ff6:	1838      	adds	r0, r7, r0
   22ff8:	18c0      	adds	r0, r0, r3
   22ffa:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22ffc:	2202      	movs	r2, #2
   22ffe:	4978      	ldr	r1, [pc, #480]	; (231e0 <_http_client_request+0x2fc>)
   23000:	232c      	movs	r3, #44	; 0x2c
   23002:	2008      	movs	r0, #8
   23004:	1838      	adds	r0, r7, r0
   23006:	18c0      	adds	r0, r0, r3
   23008:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   2300a:	2218      	movs	r2, #24
   2300c:	4976      	ldr	r1, [pc, #472]	; (231e8 <_http_client_request+0x304>)
   2300e:	232c      	movs	r3, #44	; 0x2c
   23010:	2008      	movs	r0, #8
   23012:	1838      	adds	r0, r7, r0
   23014:	18c0      	adds	r0, r0, r3
   23016:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   23018:	2213      	movs	r2, #19
   2301a:	4974      	ldr	r1, [pc, #464]	; (231ec <_http_client_request+0x308>)
   2301c:	232c      	movs	r3, #44	; 0x2c
   2301e:	2008      	movs	r0, #8
   23020:	1838      	adds	r0, r7, r0
   23022:	18c0      	adds	r0, r0, r3
   23024:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   23026:	2217      	movs	r2, #23
   23028:	4971      	ldr	r1, [pc, #452]	; (231f0 <_http_client_request+0x30c>)
   2302a:	232c      	movs	r3, #44	; 0x2c
   2302c:	2008      	movs	r0, #8
   2302e:	1838      	adds	r0, r7, r0
   23030:	18c0      	adds	r0, r0, r3
   23032:	47a8      	blx	r5

		if (entity->read != NULL) {
   23034:	0023      	movs	r3, r4
   23036:	33b0      	adds	r3, #176	; 0xb0
   23038:	68db      	ldr	r3, [r3, #12]
   2303a:	2b00      	cmp	r3, #0
   2303c:	d07b      	beq.n	23136 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   2303e:	23b0      	movs	r3, #176	; 0xb0
   23040:	5ce3      	ldrb	r3, [r4, r3]
   23042:	2b00      	cmp	r3, #0
   23044:	d16b      	bne.n	2311e <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   23046:	0023      	movs	r3, r4
   23048:	33b0      	adds	r3, #176	; 0xb0
   2304a:	689b      	ldr	r3, [r3, #8]
   2304c:	2b00      	cmp	r3, #0
   2304e:	d072      	beq.n	23136 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   23050:	0022      	movs	r2, r4
   23052:	32b0      	adds	r2, #176	; 0xb0
   23054:	6950      	ldr	r0, [r2, #20]
   23056:	4798      	blx	r3
   23058:	23cc      	movs	r3, #204	; 0xcc
   2305a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   2305c:	2800      	cmp	r0, #0
   2305e:	da00      	bge.n	23062 <_http_client_request+0x17e>
   23060:	e0ac      	b.n	231bc <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   23062:	0002      	movs	r2, r0
   23064:	4963      	ldr	r1, [pc, #396]	; (231f4 <_http_client_request+0x310>)
   23066:	2320      	movs	r3, #32
   23068:	2008      	movs	r0, #8
   2306a:	1838      	adds	r0, r7, r0
   2306c:	18c0      	adds	r0, r0, r3
   2306e:	4b62      	ldr	r3, [pc, #392]	; (231f8 <_http_client_request+0x314>)
   23070:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   23072:	2210      	movs	r2, #16
   23074:	4961      	ldr	r1, [pc, #388]	; (231fc <_http_client_request+0x318>)
   23076:	232c      	movs	r3, #44	; 0x2c
   23078:	2008      	movs	r0, #8
   2307a:	1838      	adds	r0, r7, r0
   2307c:	18c0      	adds	r0, r0, r3
   2307e:	4d55      	ldr	r5, [pc, #340]	; (231d4 <_http_client_request+0x2f0>)
   23080:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   23082:	2320      	movs	r3, #32
   23084:	2208      	movs	r2, #8
   23086:	18ba      	adds	r2, r7, r2
   23088:	18d0      	adds	r0, r2, r3
   2308a:	4b51      	ldr	r3, [pc, #324]	; (231d0 <_http_client_request+0x2ec>)
   2308c:	4798      	blx	r3
   2308e:	0002      	movs	r2, r0
   23090:	2320      	movs	r3, #32
   23092:	2108      	movs	r1, #8
   23094:	1879      	adds	r1, r7, r1
   23096:	18c9      	adds	r1, r1, r3
   23098:	330c      	adds	r3, #12
   2309a:	2008      	movs	r0, #8
   2309c:	1838      	adds	r0, r7, r0
   2309e:	18c0      	adds	r0, r0, r3
   230a0:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   230a2:	2202      	movs	r2, #2
   230a4:	494e      	ldr	r1, [pc, #312]	; (231e0 <_http_client_request+0x2fc>)
   230a6:	232c      	movs	r3, #44	; 0x2c
   230a8:	2008      	movs	r0, #8
   230aa:	1838      	adds	r0, r7, r0
   230ac:	18c0      	adds	r0, r0, r3
   230ae:	47a8      	blx	r5
   230b0:	e041      	b.n	23136 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   230b2:	2204      	movs	r2, #4
   230b4:	4952      	ldr	r1, [pc, #328]	; (23200 <_http_client_request+0x31c>)
   230b6:	332b      	adds	r3, #43	; 0x2b
   230b8:	2008      	movs	r0, #8
   230ba:	1838      	adds	r0, r7, r0
   230bc:	18c0      	adds	r0, r0, r3
   230be:	4b45      	ldr	r3, [pc, #276]	; (231d4 <_http_client_request+0x2f0>)
   230c0:	4798      	blx	r3
   230c2:	e75b      	b.n	22f7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   230c4:	2205      	movs	r2, #5
   230c6:	494f      	ldr	r1, [pc, #316]	; (23204 <_http_client_request+0x320>)
   230c8:	332a      	adds	r3, #42	; 0x2a
   230ca:	2008      	movs	r0, #8
   230cc:	1838      	adds	r0, r7, r0
   230ce:	18c0      	adds	r0, r0, r3
   230d0:	4b40      	ldr	r3, [pc, #256]	; (231d4 <_http_client_request+0x2f0>)
   230d2:	4798      	blx	r3
   230d4:	e752      	b.n	22f7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   230d6:	2207      	movs	r2, #7
   230d8:	494b      	ldr	r1, [pc, #300]	; (23208 <_http_client_request+0x324>)
   230da:	3329      	adds	r3, #41	; 0x29
   230dc:	2008      	movs	r0, #8
   230de:	1838      	adds	r0, r7, r0
   230e0:	18c0      	adds	r0, r0, r3
   230e2:	4b3c      	ldr	r3, [pc, #240]	; (231d4 <_http_client_request+0x2f0>)
   230e4:	4798      	blx	r3
   230e6:	e749      	b.n	22f7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   230e8:	2204      	movs	r2, #4
   230ea:	4948      	ldr	r1, [pc, #288]	; (2320c <_http_client_request+0x328>)
   230ec:	3328      	adds	r3, #40	; 0x28
   230ee:	2008      	movs	r0, #8
   230f0:	1838      	adds	r0, r7, r0
   230f2:	18c0      	adds	r0, r0, r3
   230f4:	4b37      	ldr	r3, [pc, #220]	; (231d4 <_http_client_request+0x2f0>)
   230f6:	4798      	blx	r3
   230f8:	e740      	b.n	22f7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   230fa:	2208      	movs	r2, #8
   230fc:	4944      	ldr	r1, [pc, #272]	; (23210 <_http_client_request+0x32c>)
   230fe:	3327      	adds	r3, #39	; 0x27
   23100:	2008      	movs	r0, #8
   23102:	1838      	adds	r0, r7, r0
   23104:	18c0      	adds	r0, r0, r3
   23106:	4b33      	ldr	r3, [pc, #204]	; (231d4 <_http_client_request+0x2f0>)
   23108:	4798      	blx	r3
   2310a:	e737      	b.n	22f7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2310c:	2205      	movs	r2, #5
   2310e:	4941      	ldr	r1, [pc, #260]	; (23214 <_http_client_request+0x330>)
   23110:	3326      	adds	r3, #38	; 0x26
   23112:	2008      	movs	r0, #8
   23114:	1838      	adds	r0, r7, r0
   23116:	18c0      	adds	r0, r0, r3
   23118:	4b2e      	ldr	r3, [pc, #184]	; (231d4 <_http_client_request+0x2f0>)
   2311a:	4798      	blx	r3
   2311c:	e72e      	b.n	22f7c <_http_client_request+0x98>
				module->req.content_length = -1;
   2311e:	2201      	movs	r2, #1
   23120:	4252      	negs	r2, r2
   23122:	23cc      	movs	r3, #204	; 0xcc
   23124:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   23126:	321d      	adds	r2, #29
   23128:	493b      	ldr	r1, [pc, #236]	; (23218 <_http_client_request+0x334>)
   2312a:	3ba0      	subs	r3, #160	; 0xa0
   2312c:	2008      	movs	r0, #8
   2312e:	1838      	adds	r0, r7, r0
   23130:	18c0      	adds	r0, r0, r3
   23132:	4b28      	ldr	r3, [pc, #160]	; (231d4 <_http_client_request+0x2f0>)
   23134:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   23136:	23d4      	movs	r3, #212	; 0xd4
   23138:	58e5      	ldr	r5, [r4, r3]
   2313a:	2d00      	cmp	r5, #0
   2313c:	d00a      	beq.n	23154 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   2313e:	0028      	movs	r0, r5
   23140:	4b23      	ldr	r3, [pc, #140]	; (231d0 <_http_client_request+0x2ec>)
   23142:	4798      	blx	r3
   23144:	0002      	movs	r2, r0
   23146:	0029      	movs	r1, r5
   23148:	232c      	movs	r3, #44	; 0x2c
   2314a:	2008      	movs	r0, #8
   2314c:	1838      	adds	r0, r7, r0
   2314e:	18c0      	adds	r0, r0, r3
   23150:	4b20      	ldr	r3, [pc, #128]	; (231d4 <_http_client_request+0x2f0>)
   23152:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   23154:	2202      	movs	r2, #2
   23156:	4922      	ldr	r1, [pc, #136]	; (231e0 <_http_client_request+0x2fc>)
   23158:	232c      	movs	r3, #44	; 0x2c
   2315a:	2008      	movs	r0, #8
   2315c:	1838      	adds	r0, r7, r0
   2315e:	18c0      	adds	r0, r0, r3
   23160:	4b1c      	ldr	r3, [pc, #112]	; (231d4 <_http_client_request+0x2f0>)
   23162:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   23164:	232c      	movs	r3, #44	; 0x2c
   23166:	2208      	movs	r2, #8
   23168:	18ba      	adds	r2, r7, r2
   2316a:	18d0      	adds	r0, r2, r3
   2316c:	4b2b      	ldr	r3, [pc, #172]	; (2321c <_http_client_request+0x338>)
   2316e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   23170:	2304      	movs	r3, #4
   23172:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   23174:	23cc      	movs	r3, #204	; 0xcc
   23176:	58e2      	ldr	r2, [r4, r3]
   23178:	2a00      	cmp	r2, #0
   2317a:	db51      	blt.n	23220 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   2317c:	dc00      	bgt.n	23180 <_http_client_request+0x29c>
   2317e:	e0f0      	b.n	23362 <_http_client_request+0x47e>
   23180:	0023      	movs	r3, r4
   23182:	33b0      	adds	r3, #176	; 0xb0
   23184:	68dd      	ldr	r5, [r3, #12]
   23186:	2d00      	cmp	r5, #0
   23188:	d100      	bne.n	2318c <_http_client_request+0x2a8>
   2318a:	e0ea      	b.n	23362 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   2318c:	23d0      	movs	r3, #208	; 0xd0
   2318e:	58e3      	ldr	r3, [r4, r3]
   23190:	429a      	cmp	r2, r3
   23192:	dd00      	ble.n	23196 <_http_client_request+0x2b2>
   23194:	e0ba      	b.n	2330c <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   23196:	23c0      	movs	r3, #192	; 0xc0
   23198:	58e3      	ldr	r3, [r4, r3]
   2319a:	2b00      	cmp	r3, #0
   2319c:	d002      	beq.n	231a4 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   2319e:	22c4      	movs	r2, #196	; 0xc4
   231a0:	58a0      	ldr	r0, [r4, r2]
   231a2:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   231a4:	2302      	movs	r3, #2
   231a6:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   231a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   231aa:	2b00      	cmp	r3, #0
   231ac:	d100      	bne.n	231b0 <_http_client_request+0x2cc>
   231ae:	e6c0      	b.n	22f32 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   231b0:	220c      	movs	r2, #12
   231b2:	18ba      	adds	r2, r7, r2
   231b4:	2101      	movs	r1, #1
   231b6:	0020      	movs	r0, r4
   231b8:	4798      	blx	r3
   231ba:	e6ba      	b.n	22f32 <_http_client_request+0x4e>
					module->req.content_length = 0;
   231bc:	2200      	movs	r2, #0
   231be:	50e2      	str	r2, [r4, r3]
   231c0:	e7b9      	b.n	23136 <_http_client_request+0x252>
   231c2:	46c0      	nop			; (mov r8, r8)
   231c4:	0002abd8 	.word	0x0002abd8
   231c8:	00022c75 	.word	0x00022c75
   231cc:	00023c41 	.word	0x00023c41
   231d0:	0002672f 	.word	0x0002672f
   231d4:	00023c95 	.word	0x00023c95
   231d8:	0002ac4c 	.word	0x0002ac4c
   231dc:	0002ac58 	.word	0x0002ac58
   231e0:	0002af5c 	.word	0x0002af5c
   231e4:	0002ac68 	.word	0x0002ac68
   231e8:	0002ac70 	.word	0x0002ac70
   231ec:	0002ac8c 	.word	0x0002ac8c
   231f0:	0002aca0 	.word	0x0002aca0
   231f4:	0002acd8 	.word	0x0002acd8
   231f8:	00026635 	.word	0x00026635
   231fc:	0002acdc 	.word	0x0002acdc
   23200:	0002ac18 	.word	0x0002ac18
   23204:	0002ac20 	.word	0x0002ac20
   23208:	0002ac28 	.word	0x0002ac28
   2320c:	0002ac30 	.word	0x0002ac30
   23210:	0002ac38 	.word	0x0002ac38
   23214:	0002ac44 	.word	0x0002ac44
   23218:	0002acb8 	.word	0x0002acb8
   2321c:	00023c51 	.word	0x00023c51
		if (module->req.content_length < 0 && entity->read) {
   23220:	0023      	movs	r3, r4
   23222:	33b0      	adds	r3, #176	; 0xb0
   23224:	68dd      	ldr	r5, [r3, #12]
   23226:	2d00      	cmp	r5, #0
   23228:	d100      	bne.n	2322c <_http_client_request+0x348>
   2322a:	e09a      	b.n	23362 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2322c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2322e:	58e3      	ldr	r3, [r4, r3]
   23230:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23232:	3a07      	subs	r2, #7
   23234:	1d71      	adds	r1, r6, #5
   23236:	0020      	movs	r0, r4
   23238:	30b0      	adds	r0, #176	; 0xb0
   2323a:	6940      	ldr	r0, [r0, #20]
   2323c:	47a8      	blx	r5
   2323e:	0005      	movs	r5, r0
   23240:	43c3      	mvns	r3, r0
   23242:	17db      	asrs	r3, r3, #31
   23244:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   23246:	220a      	movs	r2, #10
   23248:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   2324a:	210d      	movs	r1, #13
   2324c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   2324e:	1973      	adds	r3, r6, r5
   23250:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   23252:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   23254:	230f      	movs	r3, #15
   23256:	402b      	ands	r3, r5
   23258:	3206      	adds	r2, #6
   2325a:	3905      	subs	r1, #5
   2325c:	468c      	mov	ip, r1
   2325e:	44bc      	add	ip, r7
   23260:	4462      	add	r2, ip
   23262:	5cd3      	ldrb	r3, [r2, r3]
   23264:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   23266:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   23268:	2d0f      	cmp	r5, #15
   2326a:	dd0d      	ble.n	23288 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   2326c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   2326e:	17eb      	asrs	r3, r5, #31
   23270:	220f      	movs	r2, #15
   23272:	4013      	ands	r3, r2
   23274:	195b      	adds	r3, r3, r5
   23276:	111b      	asrs	r3, r3, #4
   23278:	4013      	ands	r3, r2
   2327a:	3201      	adds	r2, #1
   2327c:	2008      	movs	r0, #8
   2327e:	4684      	mov	ip, r0
   23280:	44bc      	add	ip, r7
   23282:	4462      	add	r2, ip
   23284:	5cd3      	ldrb	r3, [r2, r3]
   23286:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   23288:	2dff      	cmp	r5, #255	; 0xff
   2328a:	dd0d      	ble.n	232a8 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   2328c:	17ea      	asrs	r2, r5, #31
   2328e:	23ff      	movs	r3, #255	; 0xff
   23290:	4013      	ands	r3, r2
   23292:	195b      	adds	r3, r3, r5
   23294:	051b      	lsls	r3, r3, #20
   23296:	0f1b      	lsrs	r3, r3, #28
   23298:	2210      	movs	r2, #16
   2329a:	2108      	movs	r1, #8
   2329c:	468c      	mov	ip, r1
   2329e:	44bc      	add	ip, r7
   232a0:	4462      	add	r2, ip
   232a2:	5cd3      	ldrb	r3, [r2, r3]
   232a4:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   232a6:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   232a8:	1cca      	adds	r2, r1, #3
   232aa:	1b92      	subs	r2, r2, r6
   232ac:	1d2b      	adds	r3, r5, #4
   232ae:	18d2      	adds	r2, r2, r3
   232b0:	b292      	uxth	r2, r2
   232b2:	2000      	movs	r0, #0
   232b4:	5620      	ldrsb	r0, [r4, r0]
   232b6:	2300      	movs	r3, #0
   232b8:	4e30      	ldr	r6, [pc, #192]	; (2337c <_http_client_request+0x498>)
   232ba:	47b0      	blx	r6
   232bc:	2800      	cmp	r0, #0
   232be:	db19      	blt.n	232f4 <_http_client_request+0x410>
			module->req.sent_length += size;
   232c0:	22d0      	movs	r2, #208	; 0xd0
   232c2:	58a3      	ldr	r3, [r4, r2]
   232c4:	195b      	adds	r3, r3, r5
   232c6:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   232c8:	2d00      	cmp	r5, #0
   232ca:	d000      	beq.n	232ce <_http_client_request+0x3ea>
   232cc:	e631      	b.n	22f32 <_http_client_request+0x4e>
				if (module->req.entity.close) {
   232ce:	23c0      	movs	r3, #192	; 0xc0
   232d0:	58e3      	ldr	r3, [r4, r3]
   232d2:	2b00      	cmp	r3, #0
   232d4:	d002      	beq.n	232dc <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   232d6:	3a0c      	subs	r2, #12
   232d8:	58a0      	ldr	r0, [r4, r2]
   232da:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   232dc:	2302      	movs	r3, #2
   232de:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   232e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   232e2:	2b00      	cmp	r3, #0
   232e4:	d100      	bne.n	232e8 <_http_client_request+0x404>
   232e6:	e624      	b.n	22f32 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   232e8:	220c      	movs	r2, #12
   232ea:	18ba      	adds	r2, r7, r2
   232ec:	2101      	movs	r1, #1
   232ee:	0020      	movs	r0, r4
   232f0:	4798      	blx	r3
   232f2:	e61e      	b.n	22f32 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   232f4:	2105      	movs	r1, #5
   232f6:	4249      	negs	r1, r1
   232f8:	0020      	movs	r0, r4
   232fa:	4b21      	ldr	r3, [pc, #132]	; (23380 <_http_client_request+0x49c>)
   232fc:	4798      	blx	r3
   232fe:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   23300:	46bd      	mov	sp, r7
   23302:	b013      	add	sp, #76	; 0x4c
   23304:	bc0c      	pop	{r2, r3}
   23306:	4692      	mov	sl, r2
   23308:	469b      	mov	fp, r3
   2330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   2330c:	0022      	movs	r2, r4
   2330e:	32b0      	adds	r2, #176	; 0xb0
   23310:	6950      	ldr	r0, [r2, #20]
   23312:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23314:	0031      	movs	r1, r6
   23316:	47a8      	blx	r5
			if (size < 0) {
   23318:	2800      	cmp	r0, #0
   2331a:	db16      	blt.n	2334a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   2331c:	23cc      	movs	r3, #204	; 0xcc
   2331e:	58e5      	ldr	r5, [r4, r3]
   23320:	3304      	adds	r3, #4
   23322:	58e3      	ldr	r3, [r4, r3]
   23324:	1aed      	subs	r5, r5, r3
   23326:	4285      	cmp	r5, r0
   23328:	dd00      	ble.n	2332c <_http_client_request+0x448>
   2332a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   2332c:	b2aa      	uxth	r2, r5
   2332e:	2000      	movs	r0, #0
   23330:	5620      	ldrsb	r0, [r4, r0]
   23332:	2300      	movs	r3, #0
   23334:	0031      	movs	r1, r6
   23336:	4e11      	ldr	r6, [pc, #68]	; (2337c <_http_client_request+0x498>)
   23338:	47b0      	blx	r6
   2333a:	2800      	cmp	r0, #0
   2333c:	db0b      	blt.n	23356 <_http_client_request+0x472>
				module->req.sent_length += size;
   2333e:	23d0      	movs	r3, #208	; 0xd0
   23340:	58e2      	ldr	r2, [r4, r3]
   23342:	4694      	mov	ip, r2
   23344:	4465      	add	r5, ip
   23346:	50e5      	str	r5, [r4, r3]
   23348:	e5f3      	b.n	22f32 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   2334a:	2105      	movs	r1, #5
   2334c:	4249      	negs	r1, r1
   2334e:	0020      	movs	r0, r4
   23350:	4b0b      	ldr	r3, [pc, #44]	; (23380 <_http_client_request+0x49c>)
   23352:	4798      	blx	r3
   23354:	e5ed      	b.n	22f32 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   23356:	2105      	movs	r1, #5
   23358:	4249      	negs	r1, r1
   2335a:	0020      	movs	r0, r4
   2335c:	4b08      	ldr	r3, [pc, #32]	; (23380 <_http_client_request+0x49c>)
   2335e:	4798      	blx	r3
					return;
   23360:	e7cd      	b.n	232fe <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   23362:	2302      	movs	r3, #2
   23364:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   23366:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23368:	2b00      	cmp	r3, #0
   2336a:	d100      	bne.n	2336e <_http_client_request+0x48a>
   2336c:	e5e1      	b.n	22f32 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2336e:	220c      	movs	r2, #12
   23370:	18ba      	adds	r2, r7, r2
   23372:	2101      	movs	r1, #1
   23374:	0020      	movs	r0, r4
   23376:	4798      	blx	r3
   23378:	e5db      	b.n	22f32 <_http_client_request+0x4e>
   2337a:	46c0      	nop			; (mov r8, r8)
   2337c:	0001d201 	.word	0x0001d201
   23380:	00022dcd 	.word	0x00022dcd

00023384 <http_client_send_request>:
{
   23384:	b5f0      	push	{r4, r5, r6, r7, lr}
   23386:	46d6      	mov	lr, sl
   23388:	b500      	push	{lr}
   2338a:	b088      	sub	sp, #32
   2338c:	0004      	movs	r4, r0
   2338e:	000f      	movs	r7, r1
   23390:	4692      	mov	sl, r2
   23392:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   23394:	2800      	cmp	r0, #0
   23396:	d100      	bne.n	2339a <http_client_send_request+0x16>
   23398:	e0d3      	b.n	23542 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   2339a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2339c:	2b02      	cmp	r3, #2
   2339e:	d900      	bls.n	233a2 <http_client_send_request+0x1e>
   233a0:	e0d3      	b.n	2354a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   233a2:	2207      	movs	r2, #7
   233a4:	4981      	ldr	r1, [pc, #516]	; (235ac <http_client_send_request+0x228>)
   233a6:	0038      	movs	r0, r7
   233a8:	4b81      	ldr	r3, [pc, #516]	; (235b0 <http_client_send_request+0x22c>)
   233aa:	4798      	blx	r3
		i = 7;
   233ac:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   233ae:	2800      	cmp	r0, #0
   233b0:	d007      	beq.n	233c2 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   233b2:	2208      	movs	r2, #8
   233b4:	497f      	ldr	r1, [pc, #508]	; (235b4 <http_client_send_request+0x230>)
   233b6:	0038      	movs	r0, r7
   233b8:	4b7d      	ldr	r3, [pc, #500]	; (235b0 <http_client_send_request+0x22c>)
   233ba:	4798      	blx	r3
		i = 8;
   233bc:	4246      	negs	r6, r0
   233be:	4146      	adcs	r6, r0
   233c0:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   233c2:	1c63      	adds	r3, r4, #1
   233c4:	19bd      	adds	r5, r7, r6
   233c6:	9302      	str	r3, [sp, #8]
   233c8:	0018      	movs	r0, r3
   233ca:	4b7b      	ldr	r3, [pc, #492]	; (235b8 <http_client_send_request+0x234>)
   233cc:	4798      	blx	r3
   233ce:	0002      	movs	r2, r0
   233d0:	0029      	movs	r1, r5
   233d2:	9802      	ldr	r0, [sp, #8]
   233d4:	4b76      	ldr	r3, [pc, #472]	; (235b0 <http_client_send_request+0x22c>)
   233d6:	4798      	blx	r3
   233d8:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   233da:	782b      	ldrb	r3, [r5, #0]
   233dc:	2b00      	cmp	r3, #0
   233de:	d052      	beq.n	23486 <http_client_send_request+0x102>
   233e0:	2b2f      	cmp	r3, #47	; 0x2f
   233e2:	d052      	beq.n	2348a <http_client_send_request+0x106>
   233e4:	1c71      	adds	r1, r6, #1
   233e6:	1879      	adds	r1, r7, r1
   233e8:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   233ea:	3201      	adds	r2, #1
   233ec:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   233ee:	000d      	movs	r5, r1
   233f0:	780b      	ldrb	r3, [r1, #0]
   233f2:	2b00      	cmp	r3, #0
   233f4:	d002      	beq.n	233fc <http_client_send_request+0x78>
   233f6:	3101      	adds	r1, #1
   233f8:	2b2f      	cmp	r3, #47	; 0x2f
   233fa:	d1f6      	bne.n	233ea <http_client_send_request+0x66>
	module->host[j] = '\0';
   233fc:	18a2      	adds	r2, r4, r2
   233fe:	2300      	movs	r3, #0
   23400:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   23402:	7863      	ldrb	r3, [r4, #1]
   23404:	2b00      	cmp	r3, #0
   23406:	d100      	bne.n	2340a <http_client_send_request+0x86>
   23408:	e0a3      	b.n	23552 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2340a:	0028      	movs	r0, r5
   2340c:	4b6a      	ldr	r3, [pc, #424]	; (235b8 <http_client_send_request+0x234>)
   2340e:	4798      	blx	r3
   23410:	283f      	cmp	r0, #63	; 0x3f
   23412:	d900      	bls.n	23416 <http_client_send_request+0x92>
   23414:	e0a1      	b.n	2355a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   23416:	23d4      	movs	r3, #212	; 0xd4
   23418:	58e0      	ldr	r0, [r4, r3]
   2341a:	2800      	cmp	r0, #0
   2341c:	d001      	beq.n	23422 <http_client_send_request+0x9e>
		free(module->req.ext_header);
   2341e:	4b67      	ldr	r3, [pc, #412]	; (235bc <http_client_send_request+0x238>)
   23420:	4798      	blx	r3
	if (ext_header != NULL) {
   23422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23424:	2b00      	cmp	r3, #0
   23426:	d032      	beq.n	2348e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   23428:	0018      	movs	r0, r3
   2342a:	4b65      	ldr	r3, [pc, #404]	; (235c0 <http_client_send_request+0x23c>)
   2342c:	4798      	blx	r3
   2342e:	23d4      	movs	r3, #212	; 0xd4
   23430:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   23432:	2800      	cmp	r0, #0
   23434:	d100      	bne.n	23438 <http_client_send_request+0xb4>
   23436:	e094      	b.n	23562 <http_client_send_request+0x1de>
	module->sending = 0;
   23438:	2241      	movs	r2, #65	; 0x41
   2343a:	5ca3      	ldrb	r3, [r4, r2]
   2343c:	2101      	movs	r1, #1
   2343e:	438b      	bics	r3, r1
   23440:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   23442:	2300      	movs	r3, #0
   23444:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   23446:	782b      	ldrb	r3, [r5, #0]
   23448:	2b2f      	cmp	r3, #47	; 0x2f
   2344a:	d024      	beq.n	23496 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   2344c:	222f      	movs	r2, #47	; 0x2f
   2344e:	2370      	movs	r3, #112	; 0x70
   23450:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   23452:	782b      	ldrb	r3, [r5, #0]
   23454:	2b00      	cmp	r3, #0
   23456:	d124      	bne.n	234a2 <http_client_send_request+0x11e>
	if (entity != NULL) {
   23458:	9b03      	ldr	r3, [sp, #12]
   2345a:	2b00      	cmp	r3, #0
   2345c:	d027      	beq.n	234ae <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2345e:	0020      	movs	r0, r4
   23460:	30b0      	adds	r0, #176	; 0xb0
   23462:	2218      	movs	r2, #24
   23464:	0019      	movs	r1, r3
   23466:	4b57      	ldr	r3, [pc, #348]	; (235c4 <http_client_send_request+0x240>)
   23468:	4798      	blx	r3
	module->req.method = method;
   2346a:	23c8      	movs	r3, #200	; 0xc8
   2346c:	4652      	mov	r2, sl
   2346e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   23470:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   23472:	2b01      	cmp	r3, #1
   23474:	d022      	beq.n	234bc <http_client_send_request+0x138>
   23476:	2b00      	cmp	r3, #0
   23478:	d027      	beq.n	234ca <http_client_send_request+0x146>
   2347a:	2b02      	cmp	r3, #2
   2347c:	d03a      	beq.n	234f4 <http_client_send_request+0x170>
		return -EAGAIN;
   2347e:	230b      	movs	r3, #11
   23480:	425b      	negs	r3, r3
   23482:	9301      	str	r3, [sp, #4]
   23484:	e08d      	b.n	235a2 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   23486:	2200      	movs	r2, #0
   23488:	e7b8      	b.n	233fc <http_client_send_request+0x78>
   2348a:	2200      	movs	r2, #0
   2348c:	e7b6      	b.n	233fc <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   2348e:	2200      	movs	r2, #0
   23490:	23d4      	movs	r3, #212	; 0xd4
   23492:	50e2      	str	r2, [r4, r3]
   23494:	e7d0      	b.n	23438 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   23496:	0020      	movs	r0, r4
   23498:	3070      	adds	r0, #112	; 0x70
   2349a:	0029      	movs	r1, r5
   2349c:	4b4a      	ldr	r3, [pc, #296]	; (235c8 <http_client_send_request+0x244>)
   2349e:	4798      	blx	r3
   234a0:	e7da      	b.n	23458 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   234a2:	0029      	movs	r1, r5
   234a4:	0020      	movs	r0, r4
   234a6:	3071      	adds	r0, #113	; 0x71
   234a8:	4b47      	ldr	r3, [pc, #284]	; (235c8 <http_client_send_request+0x244>)
   234aa:	4798      	blx	r3
   234ac:	e7d4      	b.n	23458 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   234ae:	0020      	movs	r0, r4
   234b0:	30b0      	adds	r0, #176	; 0xb0
   234b2:	2218      	movs	r2, #24
   234b4:	2100      	movs	r1, #0
   234b6:	4b45      	ldr	r3, [pc, #276]	; (235cc <http_client_send_request+0x248>)
   234b8:	4798      	blx	r3
   234ba:	e7d6      	b.n	2346a <http_client_send_request+0xe6>
		if (!reconnect) {
   234bc:	9b01      	ldr	r3, [sp, #4]
   234be:	2b00      	cmp	r3, #0
   234c0:	d06f      	beq.n	235a2 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   234c2:	2100      	movs	r1, #0
   234c4:	0020      	movs	r0, r4
   234c6:	4b42      	ldr	r3, [pc, #264]	; (235d0 <http_client_send_request+0x24c>)
   234c8:	4798      	blx	r3
		if (module->config.tls) {
   234ca:	2352      	movs	r3, #82	; 0x52
   234cc:	5ce2      	ldrb	r2, [r4, r3]
   234ce:	1e53      	subs	r3, r2, #1
   234d0:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   234d2:	b2d2      	uxtb	r2, r2
   234d4:	2101      	movs	r1, #1
   234d6:	2002      	movs	r0, #2
   234d8:	4b3e      	ldr	r3, [pc, #248]	; (235d4 <http_client_send_request+0x250>)
   234da:	4798      	blx	r3
   234dc:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   234de:	2800      	cmp	r0, #0
   234e0:	db43      	blt.n	2356a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   234e2:	0080      	lsls	r0, r0, #2
   234e4:	4b3c      	ldr	r3, [pc, #240]	; (235d8 <http_client_send_request+0x254>)
   234e6:	50c4      	str	r4, [r0, r3]
   234e8:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   234ea:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   234ec:	2620      	movs	r6, #32
			isv6 = 1;
   234ee:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   234f0:	2730      	movs	r7, #48	; 0x30
   234f2:	e00c      	b.n	2350e <http_client_send_request+0x18a>
		if (!reconnect) {
   234f4:	9b01      	ldr	r3, [sp, #4]
   234f6:	2b00      	cmp	r3, #0
   234f8:	d1e3      	bne.n	234c2 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   234fa:	3303      	adds	r3, #3
   234fc:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   234fe:	0020      	movs	r0, r4
   23500:	4b36      	ldr	r3, [pc, #216]	; (235dc <http_client_send_request+0x258>)
   23502:	4798      	blx	r3
			break;
   23504:	e04d      	b.n	235a2 <http_client_send_request+0x21e>
			if (isv6) {
   23506:	2900      	cmp	r1, #0
   23508:	d001      	beq.n	2350e <http_client_send_request+0x18a>
   2350a:	e012      	b.n	23532 <http_client_send_request+0x1ae>
			isv6 = 1;
   2350c:	0001      	movs	r1, r0
	while (*host != '\0') {
   2350e:	782a      	ldrb	r2, [r5, #0]
   23510:	2a00      	cmp	r2, #0
   23512:	d02e      	beq.n	23572 <http_client_send_request+0x1ee>
		ch = *host++;
   23514:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   23516:	0013      	movs	r3, r2
   23518:	43b3      	bics	r3, r6
   2351a:	3b41      	subs	r3, #65	; 0x41
   2351c:	2b05      	cmp	r3, #5
   2351e:	d9f5      	bls.n	2350c <http_client_send_request+0x188>
   23520:	2a3a      	cmp	r2, #58	; 0x3a
   23522:	d00a      	beq.n	2353a <http_client_send_request+0x1b6>
   23524:	2a2f      	cmp	r2, #47	; 0x2f
   23526:	d00a      	beq.n	2353e <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   23528:	2a2e      	cmp	r2, #46	; 0x2e
   2352a:	d0ec      	beq.n	23506 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   2352c:	403a      	ands	r2, r7
   2352e:	2a30      	cmp	r2, #48	; 0x30
   23530:	d0ed      	beq.n	2350e <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   23532:	9802      	ldr	r0, [sp, #8]
   23534:	4b2a      	ldr	r3, [pc, #168]	; (235e0 <http_client_send_request+0x25c>)
   23536:	4798      	blx	r3
   23538:	e02f      	b.n	2359a <http_client_send_request+0x216>
			isv6 = 1;
   2353a:	0001      	movs	r1, r0
   2353c:	e7e7      	b.n	2350e <http_client_send_request+0x18a>
   2353e:	0001      	movs	r1, r0
   23540:	e7e5      	b.n	2350e <http_client_send_request+0x18a>
		return -EINVAL;
   23542:	2316      	movs	r3, #22
   23544:	425b      	negs	r3, r3
   23546:	9301      	str	r3, [sp, #4]
   23548:	e02b      	b.n	235a2 <http_client_send_request+0x21e>
		return -EBUSY;
   2354a:	2310      	movs	r3, #16
   2354c:	425b      	negs	r3, r3
   2354e:	9301      	str	r3, [sp, #4]
   23550:	e027      	b.n	235a2 <http_client_send_request+0x21e>
		return -EINVAL;
   23552:	2316      	movs	r3, #22
   23554:	425b      	negs	r3, r3
   23556:	9301      	str	r3, [sp, #4]
   23558:	e023      	b.n	235a2 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   2355a:	235b      	movs	r3, #91	; 0x5b
   2355c:	425b      	negs	r3, r3
   2355e:	9301      	str	r3, [sp, #4]
   23560:	e01f      	b.n	235a2 <http_client_send_request+0x21e>
			return -ENOMEM;
   23562:	230c      	movs	r3, #12
   23564:	425b      	negs	r3, r3
   23566:	9301      	str	r3, [sp, #4]
   23568:	e01b      	b.n	235a2 <http_client_send_request+0x21e>
			return -ENOSPC;
   2356a:	231c      	movs	r3, #28
   2356c:	425b      	negs	r3, r3
   2356e:	9301      	str	r3, [sp, #4]
   23570:	e017      	b.n	235a2 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   23572:	2302      	movs	r3, #2
   23574:	aa04      	add	r2, sp, #16
   23576:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   23578:	334e      	adds	r3, #78	; 0x4e
   2357a:	5ae3      	ldrh	r3, [r4, r3]
   2357c:	021a      	lsls	r2, r3, #8
   2357e:	0a1b      	lsrs	r3, r3, #8
   23580:	4313      	orrs	r3, r2
   23582:	aa04      	add	r2, sp, #16
   23584:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   23586:	9802      	ldr	r0, [sp, #8]
   23588:	4b16      	ldr	r3, [pc, #88]	; (235e4 <http_client_send_request+0x260>)
   2358a:	4798      	blx	r3
   2358c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2358e:	2000      	movs	r0, #0
   23590:	5620      	ldrsb	r0, [r4, r0]
   23592:	2210      	movs	r2, #16
   23594:	a904      	add	r1, sp, #16
   23596:	4b14      	ldr	r3, [pc, #80]	; (235e8 <http_client_send_request+0x264>)
   23598:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2359a:	2301      	movs	r3, #1
   2359c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   2359e:	2300      	movs	r3, #0
   235a0:	9301      	str	r3, [sp, #4]
}
   235a2:	9801      	ldr	r0, [sp, #4]
   235a4:	b008      	add	sp, #32
   235a6:	bc04      	pop	{r2}
   235a8:	4692      	mov	sl, r2
   235aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   235ac:	0002acfc 	.word	0x0002acfc
   235b0:	0002673d 	.word	0x0002673d
   235b4:	0002ad04 	.word	0x0002ad04
   235b8:	0002672f 	.word	0x0002672f
   235bc:	00026259 	.word	0x00026259
   235c0:	000266f5 	.word	0x000266f5
   235c4:	0002626d 	.word	0x0002626d
   235c8:	000266e3 	.word	0x000266e3
   235cc:	000262a3 	.word	0x000262a3
   235d0:	00022dcd 	.word	0x00022dcd
   235d4:	0001cff1 	.word	0x0001cff1
   235d8:	20004130 	.word	0x20004130
   235dc:	00022ee5 	.word	0x00022ee5
   235e0:	0001d431 	.word	0x0001d431
   235e4:	0001d3c5 	.word	0x0001d3c5
   235e8:	0001d171 	.word	0x0001d171

000235ec <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   235ec:	b510      	push	{r4, lr}
	if (module == NULL) {
   235ee:	2800      	cmp	r0, #0
   235f0:	d00d      	beq.n	2360e <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   235f2:	6c41      	ldr	r1, [r0, #68]	; 0x44
   235f4:	6e02      	ldr	r2, [r0, #96]	; 0x60
   235f6:	4291      	cmp	r1, r2
   235f8:	d20a      	bcs.n	23610 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   235fa:	1a52      	subs	r2, r2, r1
   235fc:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   235fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   23600:	469c      	mov	ip, r3
   23602:	4461      	add	r1, ip
	recv(module->sock,
   23604:	7800      	ldrb	r0, [r0, #0]
   23606:	b240      	sxtb	r0, r0
   23608:	2300      	movs	r3, #0
   2360a:	4c04      	ldr	r4, [pc, #16]	; (2361c <_http_client_recv_packet+0x30>)
   2360c:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   2360e:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   23610:	218b      	movs	r1, #139	; 0x8b
   23612:	4249      	negs	r1, r1
   23614:	4b02      	ldr	r3, [pc, #8]	; (23620 <_http_client_recv_packet+0x34>)
   23616:	4798      	blx	r3
		return;
   23618:	e7f9      	b.n	2360e <_http_client_recv_packet+0x22>
   2361a:	46c0      	nop			; (mov r8, r8)
   2361c:	0001d299 	.word	0x0001d299
   23620:	00022dcd 	.word	0x00022dcd

00023624 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   23624:	b570      	push	{r4, r5, r6, lr}
   23626:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   23628:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   2362a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2362c:	1a5c      	subs	r4, r3, r1
   2362e:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   23630:	2c00      	cmp	r4, #0
   23632:	dc02      	bgt.n	2363a <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   23634:	2300      	movs	r3, #0
   23636:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   23638:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   2363a:	0022      	movs	r2, r4
   2363c:	4b01      	ldr	r3, [pc, #4]	; (23644 <_http_client_move_buffer+0x20>)
   2363e:	4798      	blx	r3
		module->recved_size = remain;
   23640:	646c      	str	r4, [r5, #68]	; 0x44
   23642:	e7f9      	b.n	23638 <_http_client_move_buffer+0x14>
   23644:	0002627f 	.word	0x0002627f

00023648 <_http_client_handle_header>:
{
   23648:	b5f0      	push	{r4, r5, r6, r7, lr}
   2364a:	46ce      	mov	lr, r9
   2364c:	b500      	push	{lr}
   2364e:	b084      	sub	sp, #16
   23650:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   23652:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   23654:	4b62      	ldr	r3, [pc, #392]	; (237e0 <_http_client_handle_header+0x198>)
   23656:	4699      	mov	r9, r3
   23658:	e049      	b.n	236ee <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   2365a:	0021      	movs	r1, r4
   2365c:	0038      	movs	r0, r7
   2365e:	4b61      	ldr	r3, [pc, #388]	; (237e4 <_http_client_handle_header+0x19c>)
   23660:	4798      	blx	r3
			return 0;
   23662:	2600      	movs	r6, #0
}
   23664:	0030      	movs	r0, r6
   23666:	b004      	add	sp, #16
   23668:	bc04      	pop	{r2}
   2366a:	4691      	mov	r9, r2
   2366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   2366e:	1ca1      	adds	r1, r4, #2
   23670:	0038      	movs	r0, r7
   23672:	4b5c      	ldr	r3, [pc, #368]	; (237e4 <_http_client_handle_header+0x19c>)
   23674:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   23676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23678:	2b00      	cmp	r3, #0
   2367a:	d00a      	beq.n	23692 <_http_client_handle_header+0x4a>
   2367c:	22e4      	movs	r2, #228	; 0xe4
   2367e:	5ab9      	ldrh	r1, [r7, r2]
   23680:	2900      	cmp	r1, #0
   23682:	d006      	beq.n	23692 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   23684:	3a08      	subs	r2, #8
   23686:	58b8      	ldr	r0, [r7, r2]
   23688:	2800      	cmp	r0, #0
   2368a:	db07      	blt.n	2369c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   2368c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2368e:	4290      	cmp	r0, r2
   23690:	dc10      	bgt.n	236b4 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   23692:	2201      	movs	r2, #1
   23694:	23d8      	movs	r3, #216	; 0xd8
   23696:	50fa      	str	r2, [r7, r3]
			return 1;
   23698:	2601      	movs	r6, #1
   2369a:	e7e3      	b.n	23664 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   2369c:	aa01      	add	r2, sp, #4
   2369e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   236a0:	2101      	movs	r1, #1
   236a2:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   236a4:	2100      	movs	r1, #0
   236a6:	20e0      	movs	r0, #224	; 0xe0
   236a8:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   236aa:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   236ac:	3102      	adds	r1, #2
   236ae:	0038      	movs	r0, r7
   236b0:	4798      	blx	r3
   236b2:	e7ee      	b.n	23692 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   236b4:	aa01      	add	r2, sp, #4
   236b6:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   236b8:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   236ba:	2100      	movs	r1, #0
   236bc:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   236be:	20e0      	movs	r0, #224	; 0xe0
   236c0:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   236c2:	3102      	adds	r1, #2
   236c4:	0038      	movs	r0, r7
   236c6:	4798      	blx	r3
   236c8:	e7e3      	b.n	23692 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   236ca:	0020      	movs	r0, r4
   236cc:	3010      	adds	r0, #16
   236ce:	4b46      	ldr	r3, [pc, #280]	; (237e8 <_http_client_handle_header+0x1a0>)
   236d0:	4798      	blx	r3
   236d2:	23dc      	movs	r3, #220	; 0xdc
   236d4:	50f8      	str	r0, [r7, r3]
   236d6:	e009      	b.n	236ec <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   236d8:	3201      	adds	r2, #1
   236da:	4295      	cmp	r5, r2
   236dc:	d006      	beq.n	236ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   236de:	7813      	ldrb	r3, [r2, #0]
   236e0:	2b20      	cmp	r3, #32
   236e2:	d12b      	bne.n	2373c <_http_client_handle_header+0xf4>
   236e4:	e7f8      	b.n	236d8 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   236e6:	3a21      	subs	r2, #33	; 0x21
   236e8:	3389      	adds	r3, #137	; 0x89
   236ea:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   236ec:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   236ee:	493f      	ldr	r1, [pc, #252]	; (237ec <_http_client_handle_header+0x1a4>)
   236f0:	0020      	movs	r0, r4
   236f2:	47c8      	blx	r9
   236f4:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   236f6:	d0b0      	beq.n	2365a <_http_client_handle_header+0x12>
   236f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   236fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   236fc:	4694      	mov	ip, r2
   236fe:	4463      	add	r3, ip
   23700:	4298      	cmp	r0, r3
   23702:	d2aa      	bcs.n	2365a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   23704:	2202      	movs	r2, #2
   23706:	4939      	ldr	r1, [pc, #228]	; (237ec <_http_client_handle_header+0x1a4>)
   23708:	0020      	movs	r0, r4
   2370a:	4b39      	ldr	r3, [pc, #228]	; (237f0 <_http_client_handle_header+0x1a8>)
   2370c:	4798      	blx	r3
   2370e:	2800      	cmp	r0, #0
   23710:	d0ad      	beq.n	2366e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   23712:	2210      	movs	r2, #16
   23714:	4937      	ldr	r1, [pc, #220]	; (237f4 <_http_client_handle_header+0x1ac>)
   23716:	0020      	movs	r0, r4
   23718:	4b35      	ldr	r3, [pc, #212]	; (237f0 <_http_client_handle_header+0x1a8>)
   2371a:	4798      	blx	r3
   2371c:	2800      	cmp	r0, #0
   2371e:	d0d4      	beq.n	236ca <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   23720:	2213      	movs	r2, #19
   23722:	4935      	ldr	r1, [pc, #212]	; (237f8 <_http_client_handle_header+0x1b0>)
   23724:	0020      	movs	r0, r4
   23726:	4b32      	ldr	r3, [pc, #200]	; (237f0 <_http_client_handle_header+0x1a8>)
   23728:	4798      	blx	r3
   2372a:	1e06      	subs	r6, r0, #0
   2372c:	d110      	bne.n	23750 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2372e:	0022      	movs	r2, r4
   23730:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23732:	4295      	cmp	r5, r2
   23734:	d9da      	bls.n	236ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23736:	7ce3      	ldrb	r3, [r4, #19]
   23738:	2b20      	cmp	r3, #32
   2373a:	d0cd      	beq.n	236d8 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   2373c:	2220      	movs	r2, #32
   2373e:	4393      	bics	r3, r2
   23740:	2b43      	cmp	r3, #67	; 0x43
   23742:	d0d0      	beq.n	236e6 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   23744:	2186      	movs	r1, #134	; 0x86
   23746:	4249      	negs	r1, r1
   23748:	0038      	movs	r0, r7
   2374a:	4b2c      	ldr	r3, [pc, #176]	; (237fc <_http_client_handle_header+0x1b4>)
   2374c:	4798      	blx	r3
					return 0;
   2374e:	e789      	b.n	23664 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   23750:	220c      	movs	r2, #12
   23752:	492b      	ldr	r1, [pc, #172]	; (23800 <_http_client_handle_header+0x1b8>)
   23754:	0020      	movs	r0, r4
   23756:	4b26      	ldr	r3, [pc, #152]	; (237f0 <_http_client_handle_header+0x1a8>)
   23758:	4798      	blx	r3
   2375a:	2800      	cmp	r0, #0
   2375c:	d11d      	bne.n	2379a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   2375e:	0022      	movs	r2, r4
   23760:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23762:	4295      	cmp	r5, r2
   23764:	d9c2      	bls.n	236ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23766:	7b23      	ldrb	r3, [r4, #12]
   23768:	2b20      	cmp	r3, #32
   2376a:	d009      	beq.n	23780 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   2376c:	2220      	movs	r2, #32
   2376e:	4393      	bics	r3, r2
   23770:	2b4b      	cmp	r3, #75	; 0x4b
   23772:	d00c      	beq.n	2378e <_http_client_handle_header+0x146>
					module->permanent = 0;
   23774:	2241      	movs	r2, #65	; 0x41
   23776:	5cbb      	ldrb	r3, [r7, r2]
   23778:	2102      	movs	r1, #2
   2377a:	438b      	bics	r3, r1
   2377c:	54bb      	strb	r3, [r7, r2]
   2377e:	e7b5      	b.n	236ec <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23780:	3201      	adds	r2, #1
   23782:	4295      	cmp	r5, r2
   23784:	d0b2      	beq.n	236ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23786:	7813      	ldrb	r3, [r2, #0]
   23788:	2b20      	cmp	r3, #32
   2378a:	d1ef      	bne.n	2376c <_http_client_handle_header+0x124>
   2378c:	e7f8      	b.n	23780 <_http_client_handle_header+0x138>
					module->permanent = 1;
   2378e:	3221      	adds	r2, #33	; 0x21
   23790:	5cbb      	ldrb	r3, [r7, r2]
   23792:	2102      	movs	r1, #2
   23794:	430b      	orrs	r3, r1
   23796:	54bb      	strb	r3, [r7, r2]
   23798:	e7a8      	b.n	236ec <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   2379a:	2205      	movs	r2, #5
   2379c:	4919      	ldr	r1, [pc, #100]	; (23804 <_http_client_handle_header+0x1bc>)
   2379e:	0020      	movs	r0, r4
   237a0:	4b13      	ldr	r3, [pc, #76]	; (237f0 <_http_client_handle_header+0x1a8>)
   237a2:	4798      	blx	r3
   237a4:	2800      	cmp	r0, #0
   237a6:	d1a1      	bne.n	236ec <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   237a8:	0020      	movs	r0, r4
   237aa:	3009      	adds	r0, #9
   237ac:	4b0e      	ldr	r3, [pc, #56]	; (237e8 <_http_client_handle_header+0x1a0>)
   237ae:	4798      	blx	r3
   237b0:	23e4      	movs	r3, #228	; 0xe4
   237b2:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   237b4:	2200      	movs	r2, #0
   237b6:	3b08      	subs	r3, #8
   237b8:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   237ba:	7963      	ldrb	r3, [r4, #5]
   237bc:	2b31      	cmp	r3, #49	; 0x31
   237be:	d802      	bhi.n	237c6 <_http_client_handle_header+0x17e>
   237c0:	79e3      	ldrb	r3, [r4, #7]
   237c2:	2b30      	cmp	r3, #48	; 0x30
   237c4:	d905      	bls.n	237d2 <_http_client_handle_header+0x18a>
				module->permanent = 1;
   237c6:	2241      	movs	r2, #65	; 0x41
   237c8:	5cbb      	ldrb	r3, [r7, r2]
   237ca:	2102      	movs	r1, #2
   237cc:	430b      	orrs	r3, r1
   237ce:	54bb      	strb	r3, [r7, r2]
   237d0:	e78c      	b.n	236ec <_http_client_handle_header+0xa4>
				module->permanent = 0;
   237d2:	2241      	movs	r2, #65	; 0x41
   237d4:	5cbb      	ldrb	r3, [r7, r2]
   237d6:	2102      	movs	r1, #2
   237d8:	438b      	bics	r3, r1
   237da:	54bb      	strb	r3, [r7, r2]
   237dc:	e786      	b.n	236ec <_http_client_handle_header+0xa4>
   237de:	46c0      	nop			; (mov r8, r8)
   237e0:	000267ad 	.word	0x000267ad
   237e4:	00023625 	.word	0x00023625
   237e8:	000261f1 	.word	0x000261f1
   237ec:	0002af5c 	.word	0x0002af5c
   237f0:	0002673d 	.word	0x0002673d
   237f4:	0002acdc 	.word	0x0002acdc
   237f8:	0002abec 	.word	0x0002abec
   237fc:	00022dcd 	.word	0x00022dcd
   23800:	0002ac00 	.word	0x0002ac00
   23804:	0002ac10 	.word	0x0002ac10

00023808 <_http_client_handle_entity>:
{
   23808:	b5f0      	push	{r4, r5, r6, r7, lr}
   2380a:	46ce      	mov	lr, r9
   2380c:	b500      	push	{lr}
   2380e:	b086      	sub	sp, #24
   23810:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   23812:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   23814:	23dc      	movs	r3, #220	; 0xdc
   23816:	58c3      	ldr	r3, [r0, r3]
   23818:	2b00      	cmp	r3, #0
   2381a:	db69      	blt.n	238f0 <_http_client_handle_entity+0xe8>
   2381c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   2381e:	4293      	cmp	r3, r2
   23820:	dc2b      	bgt.n	2387a <_http_client_handle_entity+0x72>
	return 0;
   23822:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   23824:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23826:	4293      	cmp	r3, r2
   23828:	dc4e      	bgt.n	238c8 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   2382a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   2382c:	2e00      	cmp	r6, #0
   2382e:	d003      	beq.n	23838 <_http_client_handle_entity+0x30>
   23830:	22e4      	movs	r2, #228	; 0xe4
   23832:	5aa1      	ldrh	r1, [r4, r2]
   23834:	2900      	cmp	r1, #0
   23836:	d10e      	bne.n	23856 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   23838:	2300      	movs	r3, #0
   2383a:	22d8      	movs	r2, #216	; 0xd8
   2383c:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   2383e:	320c      	adds	r2, #12
   23840:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   23842:	3341      	adds	r3, #65	; 0x41
   23844:	5ce3      	ldrb	r3, [r4, r3]
   23846:	079b      	lsls	r3, r3, #30
   23848:	d40f      	bmi.n	2386a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   2384a:	2100      	movs	r1, #0
   2384c:	0020      	movs	r0, r4
   2384e:	4b71      	ldr	r3, [pc, #452]	; (23a14 <_http_client_handle_entity+0x20c>)
   23850:	4798      	blx	r3
	return 0;
   23852:	2000      	movs	r0, #0
   23854:	e038      	b.n	238c8 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   23856:	aa03      	add	r2, sp, #12
   23858:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   2385a:	2100      	movs	r1, #0
   2385c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   2385e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   23860:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   23862:	3102      	adds	r1, #2
   23864:	0020      	movs	r0, r4
   23866:	47b0      	blx	r6
   23868:	e7e6      	b.n	23838 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2386a:	23dc      	movs	r3, #220	; 0xdc
   2386c:	58e1      	ldr	r1, [r4, r3]
   2386e:	1869      	adds	r1, r5, r1
   23870:	0020      	movs	r0, r4
   23872:	4b69      	ldr	r3, [pc, #420]	; (23a18 <_http_client_handle_entity+0x210>)
   23874:	4798      	blx	r3
				return module->recved_size;
   23876:	6c60      	ldr	r0, [r4, #68]	; 0x44
   23878:	e026      	b.n	238c8 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   2387a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2387c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   2387e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   23880:	21e0      	movs	r1, #224	; 0xe0
   23882:	5840      	ldr	r0, [r0, r1]
   23884:	4684      	mov	ip, r0
   23886:	4462      	add	r2, ip
   23888:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   2388a:	4293      	cmp	r3, r2
   2388c:	dc20      	bgt.n	238d0 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   2388e:	2300      	movs	r3, #0
   23890:	22d8      	movs	r2, #216	; 0xd8
   23892:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   23894:	320c      	adds	r2, #12
   23896:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   23898:	3ae3      	subs	r2, #227	; 0xe3
   2389a:	ab03      	add	r3, sp, #12
   2389c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   2389e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   238a0:	2b00      	cmp	r3, #0
   238a2:	d007      	beq.n	238b4 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   238a4:	ae03      	add	r6, sp, #12
   238a6:	0032      	movs	r2, r6
   238a8:	2103      	movs	r1, #3
   238aa:	0020      	movs	r0, r4
   238ac:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   238ae:	7a33      	ldrb	r3, [r6, #8]
   238b0:	2b01      	cmp	r3, #1
   238b2:	d103      	bne.n	238bc <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   238b4:	2341      	movs	r3, #65	; 0x41
   238b6:	5ce3      	ldrb	r3, [r4, r3]
   238b8:	079b      	lsls	r3, r3, #30
   238ba:	d510      	bpl.n	238de <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   238bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   238be:	18e9      	adds	r1, r5, r3
   238c0:	0020      	movs	r0, r4
   238c2:	4b55      	ldr	r3, [pc, #340]	; (23a18 <_http_client_handle_entity+0x210>)
   238c4:	4798      	blx	r3
	return 0;
   238c6:	2000      	movs	r0, #0
}
   238c8:	b006      	add	sp, #24
   238ca:	bc04      	pop	{r2}
   238cc:	4691      	mov	r9, r2
   238ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   238d0:	2200      	movs	r2, #0
   238d2:	ab03      	add	r3, sp, #12
   238d4:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   238d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   238d8:	2b00      	cmp	r3, #0
   238da:	d0ef      	beq.n	238bc <_http_client_handle_entity+0xb4>
   238dc:	e7e2      	b.n	238a4 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   238de:	484f      	ldr	r0, [pc, #316]	; (23a1c <_http_client_handle_entity+0x214>)
   238e0:	4b4f      	ldr	r3, [pc, #316]	; (23a20 <_http_client_handle_entity+0x218>)
   238e2:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   238e4:	2100      	movs	r1, #0
   238e6:	0020      	movs	r0, r4
   238e8:	4b4a      	ldr	r3, [pc, #296]	; (23a14 <_http_client_handle_entity+0x20c>)
   238ea:	4798      	blx	r3
					return 0;
   238ec:	2000      	movs	r0, #0
   238ee:	e7eb      	b.n	238c8 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   238f0:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   238f2:	2300      	movs	r3, #0
   238f4:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   238f6:	26e0      	movs	r6, #224	; 0xe0
   238f8:	e00a      	b.n	23910 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   238fa:	2341      	movs	r3, #65	; 0x41
   238fc:	5ce3      	ldrb	r3, [r4, r3]
   238fe:	079b      	lsls	r3, r3, #30
   23900:	d51b      	bpl.n	2393a <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   23902:	1ca9      	adds	r1, r5, #2
   23904:	0020      	movs	r0, r4
   23906:	4b44      	ldr	r3, [pc, #272]	; (23a18 <_http_client_handle_entity+0x210>)
   23908:	4798      	blx	r3
	} while(module->recved_size > 0);
   2390a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2390c:	2b00      	cmp	r3, #0
   2390e:	d073      	beq.n	239f8 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   23910:	59a3      	ldr	r3, [r4, r6]
   23912:	2b00      	cmp	r3, #0
   23914:	db30      	blt.n	23978 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   23916:	d116      	bne.n	23946 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   23918:	22d8      	movs	r2, #216	; 0xd8
   2391a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   2391c:	320c      	adds	r2, #12
   2391e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   23920:	3ae3      	subs	r2, #227	; 0xe3
   23922:	4669      	mov	r1, sp
   23924:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   23926:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   23928:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   2392a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2392c:	2b00      	cmp	r3, #0
   2392e:	d0e4      	beq.n	238fa <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   23930:	466a      	mov	r2, sp
   23932:	2103      	movs	r1, #3
   23934:	0020      	movs	r0, r4
   23936:	4798      	blx	r3
   23938:	e7df      	b.n	238fa <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   2393a:	2100      	movs	r1, #0
   2393c:	0020      	movs	r0, r4
   2393e:	4b35      	ldr	r3, [pc, #212]	; (23a14 <_http_client_handle_entity+0x20c>)
   23940:	4798      	blx	r3
	return 0;
   23942:	2000      	movs	r0, #0
   23944:	e7c0      	b.n	238c8 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   23946:	42bb      	cmp	r3, r7
   23948:	dcdf      	bgt.n	2390a <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   2394a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   2394c:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   2394e:	2300      	movs	r3, #0
   23950:	466a      	mov	r2, sp
   23952:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   23954:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23956:	2b00      	cmp	r3, #0
   23958:	d002      	beq.n	23960 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2395a:	2103      	movs	r1, #3
   2395c:	0020      	movs	r0, r4
   2395e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   23960:	59a3      	ldr	r3, [r4, r6]
   23962:	1c99      	adds	r1, r3, #2
   23964:	1869      	adds	r1, r5, r1
   23966:	0020      	movs	r0, r4
   23968:	4b2b      	ldr	r3, [pc, #172]	; (23a18 <_http_client_handle_entity+0x210>)
   2396a:	4798      	blx	r3
				length = (int)module->recved_size;
   2396c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   2396e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   23970:	2301      	movs	r3, #1
   23972:	425b      	negs	r3, r3
   23974:	51a3      	str	r3, [r4, r6]
   23976:	e7c8      	b.n	2390a <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   23978:	2300      	movs	r3, #0
   2397a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   2397c:	2f00      	cmp	r7, #0
   2397e:	dd04      	ble.n	2398a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   23980:	782b      	ldrb	r3, [r5, #0]
   23982:	2b0a      	cmp	r3, #10
   23984:	d11c      	bne.n	239c0 <_http_client_handle_entity+0x1b8>
					buffer++;
   23986:	3501      	adds	r5, #1
					length--;
   23988:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   2398a:	59a3      	ldr	r3, [r4, r6]
   2398c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2398e:	4293      	cmp	r3, r2
   23990:	dc39      	bgt.n	23a06 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   23992:	2f00      	cmp	r7, #0
   23994:	d1b9      	bne.n	2390a <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   23996:	2201      	movs	r2, #1
   23998:	4252      	negs	r2, r2
   2399a:	23e0      	movs	r3, #224	; 0xe0
   2399c:	50e2      	str	r2, [r4, r3]
   2399e:	e7d0      	b.n	23942 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   239a0:	001a      	movs	r2, r3
   239a2:	3a61      	subs	r2, #97	; 0x61
   239a4:	2a05      	cmp	r2, #5
   239a6:	d818      	bhi.n	239da <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   239a8:	59a2      	ldr	r2, [r4, r6]
   239aa:	0112      	lsls	r2, r2, #4
   239ac:	18d3      	adds	r3, r2, r3
   239ae:	3b61      	subs	r3, #97	; 0x61
   239b0:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   239b2:	3501      	adds	r5, #1
   239b4:	3f01      	subs	r7, #1
   239b6:	2f00      	cmp	r7, #0
   239b8:	d020      	beq.n	239fc <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   239ba:	782b      	ldrb	r3, [r5, #0]
   239bc:	2b0a      	cmp	r3, #10
   239be:	d0e2      	beq.n	23986 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   239c0:	464a      	mov	r2, r9
   239c2:	2a00      	cmp	r2, #0
   239c4:	d1f5      	bne.n	239b2 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   239c6:	001a      	movs	r2, r3
   239c8:	3a30      	subs	r2, #48	; 0x30
   239ca:	2a09      	cmp	r2, #9
   239cc:	d8e8      	bhi.n	239a0 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   239ce:	59a2      	ldr	r2, [r4, r6]
   239d0:	0112      	lsls	r2, r2, #4
   239d2:	18d3      	adds	r3, r2, r3
   239d4:	3b30      	subs	r3, #48	; 0x30
   239d6:	51a3      	str	r3, [r4, r6]
   239d8:	e7eb      	b.n	239b2 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   239da:	001a      	movs	r2, r3
   239dc:	3a41      	subs	r2, #65	; 0x41
   239de:	2a05      	cmp	r2, #5
   239e0:	d805      	bhi.n	239ee <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   239e2:	59a2      	ldr	r2, [r4, r6]
   239e4:	0112      	lsls	r2, r2, #4
   239e6:	18d3      	adds	r3, r2, r3
   239e8:	3b41      	subs	r3, #65	; 0x41
   239ea:	51a3      	str	r3, [r4, r6]
   239ec:	e7e1      	b.n	239b2 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   239ee:	3b3b      	subs	r3, #59	; 0x3b
   239f0:	425a      	negs	r2, r3
   239f2:	415a      	adcs	r2, r3
   239f4:	4691      	mov	r9, r2
   239f6:	e7dc      	b.n	239b2 <_http_client_handle_entity+0x1aa>
	return 0;
   239f8:	2000      	movs	r0, #0
   239fa:	e765      	b.n	238c8 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   239fc:	23e0      	movs	r3, #224	; 0xe0
   239fe:	58e3      	ldr	r3, [r4, r3]
   23a00:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23a02:	4293      	cmp	r3, r2
   23a04:	ddc7      	ble.n	23996 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   23a06:	218b      	movs	r1, #139	; 0x8b
   23a08:	4249      	negs	r1, r1
   23a0a:	0020      	movs	r0, r4
   23a0c:	4b01      	ldr	r3, [pc, #4]	; (23a14 <_http_client_handle_entity+0x20c>)
   23a0e:	4798      	blx	r3
   23a10:	e797      	b.n	23942 <_http_client_handle_entity+0x13a>
   23a12:	46c0      	nop			; (mov r8, r8)
   23a14:	00022dcd 	.word	0x00022dcd
   23a18:	00023625 	.word	0x00023625
   23a1c:	0002abe8 	.word	0x0002abe8
   23a20:	000264c5 	.word	0x000264c5

00023a24 <_http_client_handle_response>:
{
   23a24:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   23a26:	23d8      	movs	r3, #216	; 0xd8
   23a28:	58c3      	ldr	r3, [r0, r3]
   23a2a:	2b00      	cmp	r3, #0
   23a2c:	d003      	beq.n	23a36 <_http_client_handle_response+0x12>
   23a2e:	2b01      	cmp	r3, #1
   23a30:	d004      	beq.n	23a3c <_http_client_handle_response+0x18>
	return 0;
   23a32:	2000      	movs	r0, #0
   23a34:	e001      	b.n	23a3a <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   23a36:	4b03      	ldr	r3, [pc, #12]	; (23a44 <_http_client_handle_response+0x20>)
   23a38:	4798      	blx	r3
}
   23a3a:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   23a3c:	4b02      	ldr	r3, [pc, #8]	; (23a48 <_http_client_handle_response+0x24>)
   23a3e:	4798      	blx	r3
   23a40:	e7fb      	b.n	23a3a <_http_client_handle_response+0x16>
   23a42:	46c0      	nop			; (mov r8, r8)
   23a44:	00023649 	.word	0x00023649
   23a48:	00023809 	.word	0x00023809

00023a4c <_http_client_recved_packet>:
{
   23a4c:	b570      	push	{r4, r5, r6, lr}
   23a4e:	0004      	movs	r4, r0
	module->recved_size += read_len;
   23a50:	6c43      	ldr	r3, [r0, #68]	; 0x44
   23a52:	469c      	mov	ip, r3
   23a54:	4461      	add	r1, ip
   23a56:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   23a58:	2358      	movs	r3, #88	; 0x58
   23a5a:	5ac3      	ldrh	r3, [r0, r3]
   23a5c:	2b00      	cmp	r3, #0
   23a5e:	d105      	bne.n	23a6c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   23a60:	4d05      	ldr	r5, [pc, #20]	; (23a78 <_http_client_recved_packet+0x2c>)
   23a62:	0020      	movs	r0, r4
   23a64:	47a8      	blx	r5
   23a66:	2800      	cmp	r0, #0
   23a68:	d1fb      	bne.n	23a62 <_http_client_recved_packet+0x16>
}
   23a6a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   23a6c:	6c81      	ldr	r1, [r0, #72]	; 0x48
   23a6e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   23a70:	4b02      	ldr	r3, [pc, #8]	; (23a7c <_http_client_recved_packet+0x30>)
   23a72:	4798      	blx	r3
   23a74:	e7f4      	b.n	23a60 <_http_client_recved_packet+0x14>
   23a76:	46c0      	nop			; (mov r8, r8)
   23a78:	00023a25 	.word	0x00023a25
   23a7c:	00023df9 	.word	0x00023df9

00023a80 <http_client_socket_event_handler>:
{
   23a80:	b510      	push	{r4, lr}
   23a82:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   23a84:	0080      	lsls	r0, r0, #2
   23a86:	4b65      	ldr	r3, [pc, #404]	; (23c1c <http_client_socket_event_handler+0x19c>)
   23a88:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   23a8a:	2c00      	cmp	r4, #0
   23a8c:	d006      	beq.n	23a9c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   23a8e:	2906      	cmp	r1, #6
   23a90:	d051      	beq.n	23b36 <http_client_socket_event_handler+0xb6>
   23a92:	2907      	cmp	r1, #7
   23a94:	d100      	bne.n	23a98 <http_client_socket_event_handler+0x18>
   23a96:	e08a      	b.n	23bae <http_client_socket_event_handler+0x12e>
   23a98:	2905      	cmp	r1, #5
   23a9a:	d001      	beq.n	23aa0 <http_client_socket_event_handler+0x20>
}
   23a9c:	b004      	add	sp, #16
   23a9e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   23aa0:	2301      	movs	r3, #1
   23aa2:	56d3      	ldrsb	r3, [r2, r3]
   23aa4:	1e1a      	subs	r2, r3, #0
   23aa6:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   23aa8:	db15      	blt.n	23ad6 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   23aaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23aac:	2b00      	cmp	r3, #0
   23aae:	d003      	beq.n	23ab8 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   23ab0:	aa01      	add	r2, sp, #4
   23ab2:	2100      	movs	r1, #0
   23ab4:	0020      	movs	r0, r4
   23ab6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   23ab8:	2303      	movs	r3, #3
   23aba:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   23abc:	3355      	adds	r3, #85	; 0x55
   23abe:	5ae2      	ldrh	r2, [r4, r3]
   23ac0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   23ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   23ac4:	4b56      	ldr	r3, [pc, #344]	; (23c20 <http_client_socket_event_handler+0x1a0>)
   23ac6:	4798      	blx	r3
    		_http_client_recv_packet(module);
   23ac8:	0020      	movs	r0, r4
   23aca:	4b56      	ldr	r3, [pc, #344]	; (23c24 <http_client_socket_event_handler+0x1a4>)
   23acc:	4798      	blx	r3
			_http_client_request(module);
   23ace:	0020      	movs	r0, r4
   23ad0:	4b55      	ldr	r3, [pc, #340]	; (23c28 <http_client_socket_event_handler+0x1a8>)
   23ad2:	4798      	blx	r3
   23ad4:	e7e2      	b.n	23a9c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23ad6:	330e      	adds	r3, #14
   23ad8:	b2d9      	uxtb	r1, r3
   23ada:	290e      	cmp	r1, #14
   23adc:	d81e      	bhi.n	23b1c <http_client_socket_event_handler+0x9c>
   23ade:	008b      	lsls	r3, r1, #2
   23ae0:	4952      	ldr	r1, [pc, #328]	; (23c2c <http_client_socket_event_handler+0x1ac>)
   23ae2:	58cb      	ldr	r3, [r1, r3]
   23ae4:	469f      	mov	pc, r3
			return -ENOENT;
   23ae6:	2102      	movs	r1, #2
   23ae8:	4249      	negs	r1, r1
   23aea:	e01d      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   23aec:	2170      	movs	r1, #112	; 0x70
   23aee:	4249      	negs	r1, r1
   23af0:	e01a      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   23af2:	210c      	movs	r1, #12
   23af4:	4249      	negs	r1, r1
   23af6:	e017      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   23af8:	2116      	movs	r1, #22
   23afa:	4249      	negs	r1, r1
   23afc:	e014      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   23afe:	210c      	movs	r1, #12
   23b00:	4249      	negs	r1, r1
   23b02:	e011      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   23b04:	2179      	movs	r1, #121	; 0x79
   23b06:	4249      	negs	r1, r1
   23b08:	e00e      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   23b0a:	2168      	movs	r1, #104	; 0x68
   23b0c:	4249      	negs	r1, r1
   23b0e:	e00b      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   23b10:	210b      	movs	r1, #11
   23b12:	4249      	negs	r1, r1
   23b14:	e008      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   23b16:	2110      	movs	r1, #16
   23b18:	4249      	negs	r1, r1
   23b1a:	e005      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   23b1c:	2a00      	cmp	r2, #0
   23b1e:	db07      	blt.n	23b30 <http_client_socket_event_handler+0xb0>
			return 0;
   23b20:	2100      	movs	r1, #0
   23b22:	e001      	b.n	23b28 <http_client_socket_event_handler+0xa8>
			return -EIO;
   23b24:	2105      	movs	r1, #5
   23b26:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   23b28:	0020      	movs	r0, r4
   23b2a:	4b41      	ldr	r3, [pc, #260]	; (23c30 <http_client_socket_event_handler+0x1b0>)
   23b2c:	4798      	blx	r3
   23b2e:	e7b5      	b.n	23a9c <http_client_socket_event_handler+0x1c>
				return -EIO;
   23b30:	2105      	movs	r1, #5
   23b32:	4249      	negs	r1, r1
   23b34:	e7f8      	b.n	23b28 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   23b36:	2304      	movs	r3, #4
   23b38:	5ed1      	ldrsh	r1, [r2, r3]
   23b3a:	2900      	cmp	r1, #0
   23b3c:	dd06      	ble.n	23b4c <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   23b3e:	0020      	movs	r0, r4
   23b40:	4b3c      	ldr	r3, [pc, #240]	; (23c34 <http_client_socket_event_handler+0x1b4>)
   23b42:	4798      	blx	r3
		_http_client_recv_packet(module);
   23b44:	0020      	movs	r0, r4
   23b46:	4b37      	ldr	r3, [pc, #220]	; (23c24 <http_client_socket_event_handler+0x1a4>)
   23b48:	4798      	blx	r3
		break;
   23b4a:	e7a7      	b.n	23a9c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23b4c:	000b      	movs	r3, r1
   23b4e:	330e      	adds	r3, #14
   23b50:	b29a      	uxth	r2, r3
   23b52:	2a0e      	cmp	r2, #14
   23b54:	d81e      	bhi.n	23b94 <http_client_socket_event_handler+0x114>
   23b56:	0093      	lsls	r3, r2, #2
   23b58:	4a37      	ldr	r2, [pc, #220]	; (23c38 <http_client_socket_event_handler+0x1b8>)
   23b5a:	58d3      	ldr	r3, [r2, r3]
   23b5c:	469f      	mov	pc, r3
			return -ENOENT;
   23b5e:	2102      	movs	r1, #2
   23b60:	4249      	negs	r1, r1
   23b62:	e01d      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   23b64:	2170      	movs	r1, #112	; 0x70
   23b66:	4249      	negs	r1, r1
   23b68:	e01a      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23b6a:	210c      	movs	r1, #12
   23b6c:	4249      	negs	r1, r1
   23b6e:	e017      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   23b70:	2116      	movs	r1, #22
   23b72:	4249      	negs	r1, r1
   23b74:	e014      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23b76:	210c      	movs	r1, #12
   23b78:	4249      	negs	r1, r1
   23b7a:	e011      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   23b7c:	2179      	movs	r1, #121	; 0x79
   23b7e:	4249      	negs	r1, r1
   23b80:	e00e      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   23b82:	2168      	movs	r1, #104	; 0x68
   23b84:	4249      	negs	r1, r1
   23b86:	e00b      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   23b88:	210b      	movs	r1, #11
   23b8a:	4249      	negs	r1, r1
   23b8c:	e008      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   23b8e:	2110      	movs	r1, #16
   23b90:	4249      	negs	r1, r1
   23b92:	e005      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   23b94:	2900      	cmp	r1, #0
   23b96:	db07      	blt.n	23ba8 <http_client_socket_event_handler+0x128>
			return 0;
   23b98:	2100      	movs	r1, #0
   23b9a:	e001      	b.n	23ba0 <http_client_socket_event_handler+0x120>
			return -EIO;
   23b9c:	2105      	movs	r1, #5
   23b9e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   23ba0:	0020      	movs	r0, r4
   23ba2:	4b23      	ldr	r3, [pc, #140]	; (23c30 <http_client_socket_event_handler+0x1b0>)
   23ba4:	4798      	blx	r3
   23ba6:	e7cd      	b.n	23b44 <http_client_socket_event_handler+0xc4>
				return -EIO;
   23ba8:	2105      	movs	r1, #5
   23baa:	4249      	negs	r1, r1
   23bac:	e7f8      	b.n	23ba0 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   23bae:	2300      	movs	r3, #0
   23bb0:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   23bb2:	2b00      	cmp	r3, #0
   23bb4:	db08      	blt.n	23bc8 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   23bb6:	0020      	movs	r0, r4
   23bb8:	4b1b      	ldr	r3, [pc, #108]	; (23c28 <http_client_socket_event_handler+0x1a8>)
   23bba:	4798      	blx	r3
		module->sending = 0;
   23bbc:	2241      	movs	r2, #65	; 0x41
   23bbe:	5ca3      	ldrb	r3, [r4, r2]
   23bc0:	2101      	movs	r1, #1
   23bc2:	438b      	bics	r3, r1
   23bc4:	54a3      	strb	r3, [r4, r2]
    	break;
   23bc6:	e769      	b.n	23a9c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23bc8:	330e      	adds	r3, #14
   23bca:	b29a      	uxth	r2, r3
   23bcc:	2a0d      	cmp	r2, #13
   23bce:	d81e      	bhi.n	23c0e <http_client_socket_event_handler+0x18e>
   23bd0:	0093      	lsls	r3, r2, #2
   23bd2:	4a1a      	ldr	r2, [pc, #104]	; (23c3c <http_client_socket_event_handler+0x1bc>)
   23bd4:	58d3      	ldr	r3, [r2, r3]
   23bd6:	469f      	mov	pc, r3
			return -ENOENT;
   23bd8:	2102      	movs	r1, #2
   23bda:	4249      	negs	r1, r1
   23bdc:	e019      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   23bde:	2170      	movs	r1, #112	; 0x70
   23be0:	4249      	negs	r1, r1
   23be2:	e016      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23be4:	210c      	movs	r1, #12
   23be6:	4249      	negs	r1, r1
   23be8:	e013      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -EINVAL;
   23bea:	2116      	movs	r1, #22
   23bec:	4249      	negs	r1, r1
   23bee:	e010      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23bf0:	210c      	movs	r1, #12
   23bf2:	4249      	negs	r1, r1
   23bf4:	e00d      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   23bf6:	2179      	movs	r1, #121	; 0x79
   23bf8:	4249      	negs	r1, r1
   23bfa:	e00a      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   23bfc:	2168      	movs	r1, #104	; 0x68
   23bfe:	4249      	negs	r1, r1
   23c00:	e007      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   23c02:	210b      	movs	r1, #11
   23c04:	4249      	negs	r1, r1
   23c06:	e004      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   23c08:	2110      	movs	r1, #16
   23c0a:	4249      	negs	r1, r1
   23c0c:	e001      	b.n	23c12 <http_client_socket_event_handler+0x192>
			return -EIO;
   23c0e:	2105      	movs	r1, #5
   23c10:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   23c12:	0020      	movs	r0, r4
   23c14:	4b06      	ldr	r3, [pc, #24]	; (23c30 <http_client_socket_event_handler+0x1b0>)
   23c16:	4798      	blx	r3
   23c18:	e7d0      	b.n	23bbc <http_client_socket_event_handler+0x13c>
   23c1a:	46c0      	nop			; (mov r8, r8)
   23c1c:	20004130 	.word	0x20004130
   23c20:	00023dcd 	.word	0x00023dcd
   23c24:	000235ed 	.word	0x000235ed
   23c28:	00022ee5 	.word	0x00022ee5
   23c2c:	0002ab28 	.word	0x0002ab28
   23c30:	00022dcd 	.word	0x00022dcd
   23c34:	00023a4d 	.word	0x00023a4d
   23c38:	0002ab64 	.word	0x0002ab64
   23c3c:	0002aba0 	.word	0x0002aba0

00023c40 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   23c40:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   23c42:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   23c44:	2200      	movs	r2, #0
   23c46:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   23c48:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   23c4a:	9b00      	ldr	r3, [sp, #0]
   23c4c:	60c3      	str	r3, [r0, #12]
}
   23c4e:	4770      	bx	lr

00023c50 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   23c50:	b510      	push	{r4, lr}
   23c52:	0004      	movs	r4, r0
	if(writer->written > 0) {
   23c54:	6842      	ldr	r2, [r0, #4]
   23c56:	2a00      	cmp	r2, #0
   23c58:	d100      	bne.n	23c5c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   23c5a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   23c5c:	6901      	ldr	r1, [r0, #16]
   23c5e:	68c0      	ldr	r0, [r0, #12]
   23c60:	68a3      	ldr	r3, [r4, #8]
   23c62:	4798      	blx	r3
		writer->written = 0;
   23c64:	2300      	movs	r3, #0
   23c66:	6063      	str	r3, [r4, #4]
}
   23c68:	e7f7      	b.n	23c5a <stream_writer_send_remain+0xa>
	...

00023c6c <stream_writer_send_8>:
{
   23c6c:	b570      	push	{r4, r5, r6, lr}
   23c6e:	0004      	movs	r4, r0
   23c70:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   23c72:	6803      	ldr	r3, [r0, #0]
   23c74:	6842      	ldr	r2, [r0, #4]
   23c76:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   23c78:	2b00      	cmp	r3, #0
   23c7a:	dd05      	ble.n	23c88 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   23c7c:	6922      	ldr	r2, [r4, #16]
   23c7e:	6863      	ldr	r3, [r4, #4]
   23c80:	1c59      	adds	r1, r3, #1
   23c82:	6061      	str	r1, [r4, #4]
   23c84:	54d5      	strb	r5, [r2, r3]
}
   23c86:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   23c88:	4b01      	ldr	r3, [pc, #4]	; (23c90 <stream_writer_send_8+0x24>)
   23c8a:	4798      	blx	r3
   23c8c:	e7f6      	b.n	23c7c <stream_writer_send_8+0x10>
   23c8e:	46c0      	nop			; (mov r8, r8)
   23c90:	00023c51 	.word	0x00023c51

00023c94 <stream_writer_send_buffer>:
{
   23c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c96:	0006      	movs	r6, r0
   23c98:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   23c9a:	2a00      	cmp	r2, #0
   23c9c:	d008      	beq.n	23cb0 <stream_writer_send_buffer+0x1c>
   23c9e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   23ca0:	4f04      	ldr	r7, [pc, #16]	; (23cb4 <stream_writer_send_buffer+0x20>)
   23ca2:	2100      	movs	r1, #0
   23ca4:	5661      	ldrsb	r1, [r4, r1]
   23ca6:	0030      	movs	r0, r6
   23ca8:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   23caa:	3401      	adds	r4, #1
   23cac:	42a5      	cmp	r5, r4
   23cae:	d1f8      	bne.n	23ca2 <stream_writer_send_buffer+0xe>
}
   23cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23cb2:	46c0      	nop			; (mov r8, r8)
   23cb4:	00023c6d 	.word	0x00023c6d

00023cb8 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   23cb8:	4a02      	ldr	r2, [pc, #8]	; (23cc4 <sw_timer_tcc_callback+0xc>)
   23cba:	6813      	ldr	r3, [r2, #0]
   23cbc:	3301      	adds	r3, #1
   23cbe:	6013      	str	r3, [r2, #0]
}
   23cc0:	4770      	bx	lr
   23cc2:	46c0      	nop			; (mov r8, r8)
   23cc4:	2000414c 	.word	0x2000414c

00023cc8 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   23cc8:	2364      	movs	r3, #100	; 0x64
   23cca:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   23ccc:	2300      	movs	r3, #0
   23cce:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   23cd0:	7043      	strb	r3, [r0, #1]
}
   23cd2:	4770      	bx	lr

00023cd4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   23cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23cd6:	46c6      	mov	lr, r8
   23cd8:	b500      	push	{lr}
   23cda:	b0ac      	sub	sp, #176	; 0xb0
   23cdc:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   23cde:	466e      	mov	r6, sp
   23ce0:	4b1d      	ldr	r3, [pc, #116]	; (23d58 <sw_timer_init+0x84>)
   23ce2:	466a      	mov	r2, sp
   23ce4:	cb92      	ldmia	r3!, {r1, r4, r7}
   23ce6:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   23ce8:	886b      	ldrh	r3, [r5, #2]
   23cea:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   23cec:	3014      	adds	r0, #20
   23cee:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   23cf0:	782b      	ldrb	r3, [r5, #0]
   23cf2:	009b      	lsls	r3, r3, #2
   23cf4:	5999      	ldr	r1, [r3, r6]
   23cf6:	0017      	movs	r7, r2
   23cf8:	0010      	movs	r0, r2
   23cfa:	4b18      	ldr	r3, [pc, #96]	; (23d5c <sw_timer_init+0x88>)
   23cfc:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   23cfe:	2000      	movs	r0, #0
   23d00:	4b17      	ldr	r3, [pc, #92]	; (23d60 <sw_timer_init+0x8c>)
   23d02:	4798      	blx	r3
   23d04:	4b17      	ldr	r3, [pc, #92]	; (23d64 <sw_timer_init+0x90>)
   23d06:	7a1b      	ldrb	r3, [r3, #8]
   23d08:	b2db      	uxtb	r3, r3
   23d0a:	40d8      	lsrs	r0, r3
   23d0c:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   23d0e:	8869      	ldrh	r1, [r5, #2]
   23d10:	20fa      	movs	r0, #250	; 0xfa
   23d12:	0200      	lsls	r0, r0, #8
   23d14:	4b14      	ldr	r3, [pc, #80]	; (23d68 <sw_timer_init+0x94>)
   23d16:	4798      	blx	r3
   23d18:	0001      	movs	r1, r0
   23d1a:	4640      	mov	r0, r8
   23d1c:	4b13      	ldr	r3, [pc, #76]	; (23d6c <sw_timer_init+0x98>)
   23d1e:	4798      	blx	r3
   23d20:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   23d22:	2305      	movs	r3, #5
   23d24:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   23d26:	782b      	ldrb	r3, [r5, #0]
   23d28:	009b      	lsls	r3, r3, #2
   23d2a:	5999      	ldr	r1, [r3, r6]
   23d2c:	003a      	movs	r2, r7
   23d2e:	0020      	movs	r0, r4
   23d30:	4b0f      	ldr	r3, [pc, #60]	; (23d70 <sw_timer_init+0x9c>)
   23d32:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23d34:	786a      	ldrb	r2, [r5, #1]
   23d36:	3208      	adds	r2, #8
   23d38:	b2d2      	uxtb	r2, r2
   23d3a:	490e      	ldr	r1, [pc, #56]	; (23d74 <sw_timer_init+0xa0>)
   23d3c:	0020      	movs	r0, r4
   23d3e:	4b0e      	ldr	r3, [pc, #56]	; (23d78 <sw_timer_init+0xa4>)
   23d40:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23d42:	7869      	ldrb	r1, [r5, #1]
   23d44:	3108      	adds	r1, #8
   23d46:	b2c9      	uxtb	r1, r1
   23d48:	0020      	movs	r0, r4
   23d4a:	4b0c      	ldr	r3, [pc, #48]	; (23d7c <sw_timer_init+0xa8>)
   23d4c:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   23d4e:	b02c      	add	sp, #176	; 0xb0
   23d50:	bc04      	pop	{r2}
   23d52:	4690      	mov	r8, r2
   23d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23d56:	46c0      	nop			; (mov r8, r8)
   23d58:	0002ad10 	.word	0x0002ad10
   23d5c:	0001f359 	.word	0x0001f359
   23d60:	0001f085 	.word	0x0001f085
   23d64:	40000400 	.word	0x40000400
   23d68:	0002414d 	.word	0x0002414d
   23d6c:	00024039 	.word	0x00024039
   23d70:	0001f4a5 	.word	0x0001f4a5
   23d74:	00023cb9 	.word	0x00023cb9
   23d78:	0001f8b1 	.word	0x0001f8b1
   23d7c:	0001f8c9 	.word	0x0001f8c9

00023d80 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   23d80:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   23d82:	2102      	movs	r1, #2
   23d84:	6893      	ldr	r3, [r2, #8]
   23d86:	4219      	tst	r1, r3
   23d88:	d1fc      	bne.n	23d84 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   23d8a:	6813      	ldr	r3, [r2, #0]
   23d8c:	2102      	movs	r1, #2
   23d8e:	430b      	orrs	r3, r1
   23d90:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   23d92:	4770      	bx	lr

00023d94 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   23d94:	b570      	push	{r4, r5, r6, lr}
   23d96:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   23d98:	7805      	ldrb	r5, [r0, #0]
   23d9a:	07e8      	lsls	r0, r5, #31
   23d9c:	d502      	bpl.n	23da4 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   23d9e:	2001      	movs	r0, #1
   23da0:	4240      	negs	r0, r0
}
   23da2:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   23da4:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   23da6:	0029      	movs	r1, r5
   23da8:	2002      	movs	r0, #2
   23daa:	4381      	bics	r1, r0
   23dac:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   23dae:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   23db0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23db2:	0018      	movs	r0, r3
   23db4:	4b04      	ldr	r3, [pc, #16]	; (23dc8 <sw_timer_register_callback+0x34>)
   23db6:	4798      	blx	r3
   23db8:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   23dba:	7823      	ldrb	r3, [r4, #0]
   23dbc:	2201      	movs	r2, #1
   23dbe:	4313      	orrs	r3, r2
   23dc0:	7023      	strb	r3, [r4, #0]
			return index;
   23dc2:	2000      	movs	r0, #0
   23dc4:	e7ed      	b.n	23da2 <sw_timer_register_callback+0xe>
   23dc6:	46c0      	nop			; (mov r8, r8)
   23dc8:	00024039 	.word	0x00024039

00023dcc <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   23dcc:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   23dce:	008b      	lsls	r3, r1, #2
   23dd0:	185d      	adds	r5, r3, r1
   23dd2:	00ad      	lsls	r5, r5, #2
   23dd4:	5c29      	ldrb	r1, [r5, r0]
   23dd6:	2602      	movs	r6, #2
   23dd8:	4331      	orrs	r1, r6
   23dda:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   23ddc:	1944      	adds	r4, r0, r5
   23dde:	6d41      	ldr	r1, [r0, #84]	; 0x54
   23de0:	0010      	movs	r0, r2
   23de2:	4b03      	ldr	r3, [pc, #12]	; (23df0 <sw_timer_enable_callback+0x24>)
   23de4:	4798      	blx	r3
   23de6:	4b03      	ldr	r3, [pc, #12]	; (23df4 <sw_timer_enable_callback+0x28>)
   23de8:	681b      	ldr	r3, [r3, #0]
   23dea:	18c0      	adds	r0, r0, r3
   23dec:	6120      	str	r0, [r4, #16]
}
   23dee:	bd70      	pop	{r4, r5, r6, pc}
   23df0:	00024039 	.word	0x00024039
   23df4:	2000414c 	.word	0x2000414c

00023df8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   23df8:	008b      	lsls	r3, r1, #2
   23dfa:	1859      	adds	r1, r3, r1
   23dfc:	0089      	lsls	r1, r1, #2
   23dfe:	5c0b      	ldrb	r3, [r1, r0]
   23e00:	2202      	movs	r2, #2
   23e02:	4393      	bics	r3, r2
   23e04:	540b      	strb	r3, [r1, r0]
}
   23e06:	4770      	bx	lr

00023e08 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   23e08:	b570      	push	{r4, r5, r6, lr}
   23e0a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   23e0c:	7803      	ldrb	r3, [r0, #0]
   23e0e:	07db      	lsls	r3, r3, #31
   23e10:	d507      	bpl.n	23e22 <sw_timer_task+0x1a>
   23e12:	7803      	ldrb	r3, [r0, #0]
   23e14:	079b      	lsls	r3, r3, #30
   23e16:	d504      	bpl.n	23e22 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23e18:	4b10      	ldr	r3, [pc, #64]	; (23e5c <sw_timer_task+0x54>)
   23e1a:	681a      	ldr	r2, [r3, #0]
   23e1c:	6903      	ldr	r3, [r0, #16]
   23e1e:	1a9b      	subs	r3, r3, r2
   23e20:	d400      	bmi.n	23e24 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   23e22:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23e24:	7803      	ldrb	r3, [r0, #0]
   23e26:	075b      	lsls	r3, r3, #29
   23e28:	d4fb      	bmi.n	23e22 <sw_timer_task+0x1a>
				handler->busy = 1;
   23e2a:	7803      	ldrb	r3, [r0, #0]
   23e2c:	2104      	movs	r1, #4
   23e2e:	430b      	orrs	r3, r1
   23e30:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   23e32:	68c3      	ldr	r3, [r0, #12]
   23e34:	2b00      	cmp	r3, #0
   23e36:	d00b      	beq.n	23e50 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   23e38:	18d2      	adds	r2, r2, r3
   23e3a:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   23e3c:	68a2      	ldr	r2, [r4, #8]
   23e3e:	2100      	movs	r1, #0
   23e40:	0020      	movs	r0, r4
   23e42:	6865      	ldr	r5, [r4, #4]
   23e44:	47a8      	blx	r5
				handler->busy = 0;
   23e46:	7823      	ldrb	r3, [r4, #0]
   23e48:	2204      	movs	r2, #4
   23e4a:	4393      	bics	r3, r2
   23e4c:	7023      	strb	r3, [r4, #0]
}
   23e4e:	e7e8      	b.n	23e22 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   23e50:	7802      	ldrb	r2, [r0, #0]
   23e52:	2102      	movs	r1, #2
   23e54:	438a      	bics	r2, r1
   23e56:	7002      	strb	r2, [r0, #0]
   23e58:	e7f0      	b.n	23e3c <sw_timer_task+0x34>
   23e5a:	46c0      	nop			; (mov r8, r8)
   23e5c:	2000414c 	.word	0x2000414c

00023e60 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   23e60:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
   23e62:	4b05      	ldr	r3, [pc, #20]	; (23e78 <main+0x18>)
   23e64:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   23e66:	4b05      	ldr	r3, [pc, #20]	; (23e7c <main+0x1c>)
   23e68:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   23e6a:	2001      	movs	r0, #1
   23e6c:	4b04      	ldr	r3, [pc, #16]	; (23e80 <main+0x20>)
   23e6e:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   23e70:	4b04      	ldr	r3, [pc, #16]	; (23e84 <main+0x24>)
   23e72:	4798      	blx	r3

	return 0; //Will not get here
}
   23e74:	2000      	movs	r0, #0
   23e76:	bd10      	pop	{r4, pc}
   23e78:	0001f2f9 	.word	0x0001f2f9
   23e7c:	00018e95 	.word	0x00018e95
   23e80:	00015511 	.word	0x00015511
   23e84:	00017e01 	.word	0x00017e01

00023e88 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initilized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   23e88:	b530      	push	{r4, r5, lr}
   23e8a:	b083      	sub	sp, #12
#ifdef BOOT_TEST
	//TestA(); //Comment me for Test B
	//TestB(); //Comment me for Test A
#endif
SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   23e8c:	4841      	ldr	r0, [pc, #260]	; (23f94 <vApplicationDaemonTaskStartupHook+0x10c>)
   23e8e:	4c42      	ldr	r4, [pc, #264]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23e90:	47a0      	blx	r4

//Initialize HW that needs FreeRTOS Initialization
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   23e92:	4842      	ldr	r0, [pc, #264]	; (23f9c <vApplicationDaemonTaskStartupHook+0x114>)
   23e94:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
   23e96:	4b42      	ldr	r3, [pc, #264]	; (23fa0 <vApplicationDaemonTaskStartupHook+0x118>)
   23e98:	4798      	blx	r3
   23e9a:	2800      	cmp	r0, #0
   23e9c:	d100      	bne.n	23ea0 <vApplicationDaemonTaskStartupHook+0x18>
   23e9e:	e071      	b.n	23f84 <vApplicationDaemonTaskStartupHook+0xfc>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   23ea0:	4840      	ldr	r0, [pc, #256]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x11c>)
   23ea2:	4b3d      	ldr	r3, [pc, #244]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23ea4:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if(0 != InitializeSeesaw())
   23ea6:	4b40      	ldr	r3, [pc, #256]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x120>)
   23ea8:	4798      	blx	r3
   23eaa:	2800      	cmp	r0, #0
   23eac:	d000      	beq.n	23eb0 <vApplicationDaemonTaskStartupHook+0x28>
   23eae:	e06d      	b.n	23f8c <vApplicationDaemonTaskStartupHook+0x104>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
	}	
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
   23eb0:	483e      	ldr	r0, [pc, #248]	; (23fac <vApplicationDaemonTaskStartupHook+0x124>)
   23eb2:	4b39      	ldr	r3, [pc, #228]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23eb4:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   23eb6:	4b3e      	ldr	r3, [pc, #248]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x128>)
   23eb8:	4798      	blx	r3
   23eba:	0003      	movs	r3, r0
   23ebc:	4c3d      	ldr	r4, [pc, #244]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x12c>)
   23ebe:	4a3e      	ldr	r2, [pc, #248]	; (23fb8 <vApplicationDaemonTaskStartupHook+0x130>)
   23ec0:	2140      	movs	r1, #64	; 0x40
   23ec2:	0020      	movs	r0, r4
   23ec4:	4d3d      	ldr	r5, [pc, #244]	; (23fbc <vApplicationDaemonTaskStartupHook+0x134>)
   23ec6:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23ec8:	0020      	movs	r0, r4
   23eca:	4b33      	ldr	r3, [pc, #204]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23ecc:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   23ece:	4b3c      	ldr	r3, [pc, #240]	; (23fc0 <vApplicationDaemonTaskStartupHook+0x138>)
   23ed0:	9301      	str	r3, [sp, #4]
   23ed2:	2304      	movs	r3, #4
   23ed4:	9300      	str	r3, [sp, #0]
   23ed6:	2300      	movs	r3, #0
   23ed8:	2280      	movs	r2, #128	; 0x80
   23eda:	0052      	lsls	r2, r2, #1
   23edc:	4939      	ldr	r1, [pc, #228]	; (23fc4 <vApplicationDaemonTaskStartupHook+0x13c>)
   23ede:	483a      	ldr	r0, [pc, #232]	; (23fc8 <vApplicationDaemonTaskStartupHook+0x140>)
   23ee0:	4c3a      	ldr	r4, [pc, #232]	; (23fcc <vApplicationDaemonTaskStartupHook+0x144>)
   23ee2:	47a0      	blx	r4
   23ee4:	2801      	cmp	r0, #1
   23ee6:	d002      	beq.n	23eee <vApplicationDaemonTaskStartupHook+0x66>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   23ee8:	4839      	ldr	r0, [pc, #228]	; (23fd0 <vApplicationDaemonTaskStartupHook+0x148>)
   23eea:	4b2b      	ldr	r3, [pc, #172]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23eec:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   23eee:	4b30      	ldr	r3, [pc, #192]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x128>)
   23ef0:	4798      	blx	r3
   23ef2:	0003      	movs	r3, r0
   23ef4:	4c2f      	ldr	r4, [pc, #188]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x12c>)
   23ef6:	4a37      	ldr	r2, [pc, #220]	; (23fd4 <vApplicationDaemonTaskStartupHook+0x14c>)
   23ef8:	2140      	movs	r1, #64	; 0x40
   23efa:	0020      	movs	r0, r4
   23efc:	4d2f      	ldr	r5, [pc, #188]	; (23fbc <vApplicationDaemonTaskStartupHook+0x134>)
   23efe:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23f00:	0020      	movs	r0, r4
   23f02:	4b25      	ldr	r3, [pc, #148]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f04:	4798      	blx	r3


if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   23f06:	4b34      	ldr	r3, [pc, #208]	; (23fd8 <vApplicationDaemonTaskStartupHook+0x150>)
   23f08:	9301      	str	r3, [sp, #4]
   23f0a:	2303      	movs	r3, #3
   23f0c:	9300      	str	r3, [sp, #0]
   23f0e:	2300      	movs	r3, #0
   23f10:	22fa      	movs	r2, #250	; 0xfa
   23f12:	0092      	lsls	r2, r2, #2
   23f14:	4931      	ldr	r1, [pc, #196]	; (23fdc <vApplicationDaemonTaskStartupHook+0x154>)
   23f16:	4832      	ldr	r0, [pc, #200]	; (23fe0 <vApplicationDaemonTaskStartupHook+0x158>)
   23f18:	4c2c      	ldr	r4, [pc, #176]	; (23fcc <vApplicationDaemonTaskStartupHook+0x144>)
   23f1a:	47a0      	blx	r4
   23f1c:	2801      	cmp	r0, #1
   23f1e:	d002      	beq.n	23f26 <vApplicationDaemonTaskStartupHook+0x9e>
	SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   23f20:	4830      	ldr	r0, [pc, #192]	; (23fe4 <vApplicationDaemonTaskStartupHook+0x15c>)
   23f22:	4b1d      	ldr	r3, [pc, #116]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f24:	4798      	blx	r3
}
snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   23f26:	4b22      	ldr	r3, [pc, #136]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x128>)
   23f28:	4798      	blx	r3
   23f2a:	0003      	movs	r3, r0
   23f2c:	4c21      	ldr	r4, [pc, #132]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x12c>)
   23f2e:	4a2e      	ldr	r2, [pc, #184]	; (23fe8 <vApplicationDaemonTaskStartupHook+0x160>)
   23f30:	2140      	movs	r1, #64	; 0x40
   23f32:	0020      	movs	r0, r4
   23f34:	4d21      	ldr	r5, [pc, #132]	; (23fbc <vApplicationDaemonTaskStartupHook+0x134>)
   23f36:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23f38:	0020      	movs	r0, r4
   23f3a:	4b17      	ldr	r3, [pc, #92]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f3c:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
SerialConsoleWriteString(bufferPrint);
*/
if(xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   23f3e:	4b2b      	ldr	r3, [pc, #172]	; (23fec <vApplicationDaemonTaskStartupHook+0x164>)
   23f40:	9301      	str	r3, [sp, #4]
   23f42:	2304      	movs	r3, #4
   23f44:	9300      	str	r3, [sp, #0]
   23f46:	2300      	movs	r3, #0
   23f48:	2280      	movs	r2, #128	; 0x80
   23f4a:	0092      	lsls	r2, r2, #2
   23f4c:	4928      	ldr	r1, [pc, #160]	; (23ff0 <vApplicationDaemonTaskStartupHook+0x168>)
   23f4e:	4829      	ldr	r0, [pc, #164]	; (23ff4 <vApplicationDaemonTaskStartupHook+0x16c>)
   23f50:	4c1e      	ldr	r4, [pc, #120]	; (23fcc <vApplicationDaemonTaskStartupHook+0x144>)
   23f52:	47a0      	blx	r4
   23f54:	2801      	cmp	r0, #1
   23f56:	d002      	beq.n	23f5e <vApplicationDaemonTaskStartupHook+0xd6>
	SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   23f58:	4827      	ldr	r0, [pc, #156]	; (23ff8 <vApplicationDaemonTaskStartupHook+0x170>)
   23f5a:	4b0f      	ldr	r3, [pc, #60]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f5c:	4798      	blx	r3
}
snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   23f5e:	4b14      	ldr	r3, [pc, #80]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x128>)
   23f60:	4798      	blx	r3
   23f62:	0003      	movs	r3, r0
   23f64:	4c13      	ldr	r4, [pc, #76]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x12c>)
   23f66:	4a25      	ldr	r2, [pc, #148]	; (23ffc <vApplicationDaemonTaskStartupHook+0x174>)
   23f68:	2140      	movs	r1, #64	; 0x40
   23f6a:	0020      	movs	r0, r4
   23f6c:	4d13      	ldr	r5, [pc, #76]	; (23fbc <vApplicationDaemonTaskStartupHook+0x134>)
   23f6e:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23f70:	0020      	movs	r0, r4
   23f72:	4b09      	ldr	r3, [pc, #36]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f74:	4798      	blx	r3
	initialize_thumbstick();
   23f76:	4b22      	ldr	r3, [pc, #136]	; (24000 <vApplicationDaemonTaskStartupHook+0x178>)
   23f78:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   23f7a:	2000      	movs	r0, #0
   23f7c:	4b21      	ldr	r3, [pc, #132]	; (24004 <vApplicationDaemonTaskStartupHook+0x17c>)
   23f7e:	4798      	blx	r3
}
   23f80:	b003      	add	sp, #12
   23f82:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   23f84:	4820      	ldr	r0, [pc, #128]	; (24008 <vApplicationDaemonTaskStartupHook+0x180>)
   23f86:	4b04      	ldr	r3, [pc, #16]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f88:	4798      	blx	r3
   23f8a:	e78c      	b.n	23ea6 <vApplicationDaemonTaskStartupHook+0x1e>
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   23f8c:	481f      	ldr	r0, [pc, #124]	; (2400c <vApplicationDaemonTaskStartupHook+0x184>)
   23f8e:	4b02      	ldr	r3, [pc, #8]	; (23f98 <vApplicationDaemonTaskStartupHook+0x110>)
   23f90:	4798      	blx	r3
   23f92:	e790      	b.n	23eb6 <vApplicationDaemonTaskStartupHook+0x2e>
   23f94:	0002ad1c 	.word	0x0002ad1c
   23f98:	00018fbd 	.word	0x00018fbd
   23f9c:	0002ad40 	.word	0x0002ad40
   23fa0:	000134ed 	.word	0x000134ed
   23fa4:	0002ad58 	.word	0x0002ad58
   23fa8:	00013a05 	.word	0x00013a05
   23fac:	0002adb8 	.word	0x0002adb8
   23fb0:	00016861 	.word	0x00016861
   23fb4:	200055ac 	.word	0x200055ac
   23fb8:	0002add0 	.word	0x0002add0
   23fbc:	000265d1 	.word	0x000265d1
   23fc0:	20004150 	.word	0x20004150
   23fc4:	0002adf4 	.word	0x0002adf4
   23fc8:	00012e31 	.word	0x00012e31
   23fcc:	00017b55 	.word	0x00017b55
   23fd0:	0002ae00 	.word	0x0002ae00
   23fd4:	0002ae2c 	.word	0x0002ae2c
   23fd8:	20004158 	.word	0x20004158
   23fdc:	0002ae4c 	.word	0x0002ae4c
   23fe0:	000147c9 	.word	0x000147c9
   23fe4:	0002ae58 	.word	0x0002ae58
   23fe8:	0002ae84 	.word	0x0002ae84
   23fec:	20004154 	.word	0x20004154
   23ff0:	0002aea4 	.word	0x0002aea4
   23ff4:	00013019 	.word	0x00013019
   23ff8:	0002aeb4 	.word	0x0002aeb4
   23ffc:	0002aee4 	.word	0x0002aee4
   24000:	00013b8d 	.word	0x00013b8d
   24004:	000182e5 	.word	0x000182e5
   24008:	0002ad7c 	.word	0x0002ad7c
   2400c:	0002ad98 	.word	0x0002ad98

00024010 <vApplicationMallocFailedHook>:

#endif


void vApplicationMallocFailedHook(void)
{
   24010:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   24012:	4802      	ldr	r0, [pc, #8]	; (2401c <vApplicationMallocFailedHook+0xc>)
   24014:	4b02      	ldr	r3, [pc, #8]	; (24020 <vApplicationMallocFailedHook+0x10>)
   24016:	4798      	blx	r3
   24018:	e7fe      	b.n	24018 <vApplicationMallocFailedHook+0x8>
   2401a:	46c0      	nop			; (mov r8, r8)
   2401c:	0002af0c 	.word	0x0002af0c
   24020:	00018fbd 	.word	0x00018fbd

00024024 <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
   24024:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   24026:	4802      	ldr	r0, [pc, #8]	; (24030 <vApplicationStackOverflowHook+0xc>)
   24028:	4b02      	ldr	r3, [pc, #8]	; (24034 <vApplicationStackOverflowHook+0x10>)
   2402a:	4798      	blx	r3
   2402c:	e7fe      	b.n	2402c <vApplicationStackOverflowHook+0x8>
   2402e:	46c0      	nop			; (mov r8, r8)
   24030:	0002af38 	.word	0x0002af38
   24034:	00018fbd 	.word	0x00018fbd

00024038 <__udivsi3>:
   24038:	2200      	movs	r2, #0
   2403a:	0843      	lsrs	r3, r0, #1
   2403c:	428b      	cmp	r3, r1
   2403e:	d374      	bcc.n	2412a <__udivsi3+0xf2>
   24040:	0903      	lsrs	r3, r0, #4
   24042:	428b      	cmp	r3, r1
   24044:	d35f      	bcc.n	24106 <__udivsi3+0xce>
   24046:	0a03      	lsrs	r3, r0, #8
   24048:	428b      	cmp	r3, r1
   2404a:	d344      	bcc.n	240d6 <__udivsi3+0x9e>
   2404c:	0b03      	lsrs	r3, r0, #12
   2404e:	428b      	cmp	r3, r1
   24050:	d328      	bcc.n	240a4 <__udivsi3+0x6c>
   24052:	0c03      	lsrs	r3, r0, #16
   24054:	428b      	cmp	r3, r1
   24056:	d30d      	bcc.n	24074 <__udivsi3+0x3c>
   24058:	22ff      	movs	r2, #255	; 0xff
   2405a:	0209      	lsls	r1, r1, #8
   2405c:	ba12      	rev	r2, r2
   2405e:	0c03      	lsrs	r3, r0, #16
   24060:	428b      	cmp	r3, r1
   24062:	d302      	bcc.n	2406a <__udivsi3+0x32>
   24064:	1212      	asrs	r2, r2, #8
   24066:	0209      	lsls	r1, r1, #8
   24068:	d065      	beq.n	24136 <__udivsi3+0xfe>
   2406a:	0b03      	lsrs	r3, r0, #12
   2406c:	428b      	cmp	r3, r1
   2406e:	d319      	bcc.n	240a4 <__udivsi3+0x6c>
   24070:	e000      	b.n	24074 <__udivsi3+0x3c>
   24072:	0a09      	lsrs	r1, r1, #8
   24074:	0bc3      	lsrs	r3, r0, #15
   24076:	428b      	cmp	r3, r1
   24078:	d301      	bcc.n	2407e <__udivsi3+0x46>
   2407a:	03cb      	lsls	r3, r1, #15
   2407c:	1ac0      	subs	r0, r0, r3
   2407e:	4152      	adcs	r2, r2
   24080:	0b83      	lsrs	r3, r0, #14
   24082:	428b      	cmp	r3, r1
   24084:	d301      	bcc.n	2408a <__udivsi3+0x52>
   24086:	038b      	lsls	r3, r1, #14
   24088:	1ac0      	subs	r0, r0, r3
   2408a:	4152      	adcs	r2, r2
   2408c:	0b43      	lsrs	r3, r0, #13
   2408e:	428b      	cmp	r3, r1
   24090:	d301      	bcc.n	24096 <__udivsi3+0x5e>
   24092:	034b      	lsls	r3, r1, #13
   24094:	1ac0      	subs	r0, r0, r3
   24096:	4152      	adcs	r2, r2
   24098:	0b03      	lsrs	r3, r0, #12
   2409a:	428b      	cmp	r3, r1
   2409c:	d301      	bcc.n	240a2 <__udivsi3+0x6a>
   2409e:	030b      	lsls	r3, r1, #12
   240a0:	1ac0      	subs	r0, r0, r3
   240a2:	4152      	adcs	r2, r2
   240a4:	0ac3      	lsrs	r3, r0, #11
   240a6:	428b      	cmp	r3, r1
   240a8:	d301      	bcc.n	240ae <__udivsi3+0x76>
   240aa:	02cb      	lsls	r3, r1, #11
   240ac:	1ac0      	subs	r0, r0, r3
   240ae:	4152      	adcs	r2, r2
   240b0:	0a83      	lsrs	r3, r0, #10
   240b2:	428b      	cmp	r3, r1
   240b4:	d301      	bcc.n	240ba <__udivsi3+0x82>
   240b6:	028b      	lsls	r3, r1, #10
   240b8:	1ac0      	subs	r0, r0, r3
   240ba:	4152      	adcs	r2, r2
   240bc:	0a43      	lsrs	r3, r0, #9
   240be:	428b      	cmp	r3, r1
   240c0:	d301      	bcc.n	240c6 <__udivsi3+0x8e>
   240c2:	024b      	lsls	r3, r1, #9
   240c4:	1ac0      	subs	r0, r0, r3
   240c6:	4152      	adcs	r2, r2
   240c8:	0a03      	lsrs	r3, r0, #8
   240ca:	428b      	cmp	r3, r1
   240cc:	d301      	bcc.n	240d2 <__udivsi3+0x9a>
   240ce:	020b      	lsls	r3, r1, #8
   240d0:	1ac0      	subs	r0, r0, r3
   240d2:	4152      	adcs	r2, r2
   240d4:	d2cd      	bcs.n	24072 <__udivsi3+0x3a>
   240d6:	09c3      	lsrs	r3, r0, #7
   240d8:	428b      	cmp	r3, r1
   240da:	d301      	bcc.n	240e0 <__udivsi3+0xa8>
   240dc:	01cb      	lsls	r3, r1, #7
   240de:	1ac0      	subs	r0, r0, r3
   240e0:	4152      	adcs	r2, r2
   240e2:	0983      	lsrs	r3, r0, #6
   240e4:	428b      	cmp	r3, r1
   240e6:	d301      	bcc.n	240ec <__udivsi3+0xb4>
   240e8:	018b      	lsls	r3, r1, #6
   240ea:	1ac0      	subs	r0, r0, r3
   240ec:	4152      	adcs	r2, r2
   240ee:	0943      	lsrs	r3, r0, #5
   240f0:	428b      	cmp	r3, r1
   240f2:	d301      	bcc.n	240f8 <__udivsi3+0xc0>
   240f4:	014b      	lsls	r3, r1, #5
   240f6:	1ac0      	subs	r0, r0, r3
   240f8:	4152      	adcs	r2, r2
   240fa:	0903      	lsrs	r3, r0, #4
   240fc:	428b      	cmp	r3, r1
   240fe:	d301      	bcc.n	24104 <__udivsi3+0xcc>
   24100:	010b      	lsls	r3, r1, #4
   24102:	1ac0      	subs	r0, r0, r3
   24104:	4152      	adcs	r2, r2
   24106:	08c3      	lsrs	r3, r0, #3
   24108:	428b      	cmp	r3, r1
   2410a:	d301      	bcc.n	24110 <__udivsi3+0xd8>
   2410c:	00cb      	lsls	r3, r1, #3
   2410e:	1ac0      	subs	r0, r0, r3
   24110:	4152      	adcs	r2, r2
   24112:	0883      	lsrs	r3, r0, #2
   24114:	428b      	cmp	r3, r1
   24116:	d301      	bcc.n	2411c <__udivsi3+0xe4>
   24118:	008b      	lsls	r3, r1, #2
   2411a:	1ac0      	subs	r0, r0, r3
   2411c:	4152      	adcs	r2, r2
   2411e:	0843      	lsrs	r3, r0, #1
   24120:	428b      	cmp	r3, r1
   24122:	d301      	bcc.n	24128 <__udivsi3+0xf0>
   24124:	004b      	lsls	r3, r1, #1
   24126:	1ac0      	subs	r0, r0, r3
   24128:	4152      	adcs	r2, r2
   2412a:	1a41      	subs	r1, r0, r1
   2412c:	d200      	bcs.n	24130 <__udivsi3+0xf8>
   2412e:	4601      	mov	r1, r0
   24130:	4152      	adcs	r2, r2
   24132:	4610      	mov	r0, r2
   24134:	4770      	bx	lr
   24136:	e7ff      	b.n	24138 <__udivsi3+0x100>
   24138:	b501      	push	{r0, lr}
   2413a:	2000      	movs	r0, #0
   2413c:	f000 f8f0 	bl	24320 <__aeabi_idiv0>
   24140:	bd02      	pop	{r1, pc}
   24142:	46c0      	nop			; (mov r8, r8)

00024144 <__aeabi_uidivmod>:
   24144:	2900      	cmp	r1, #0
   24146:	d0f7      	beq.n	24138 <__udivsi3+0x100>
   24148:	e776      	b.n	24038 <__udivsi3>
   2414a:	4770      	bx	lr

0002414c <__divsi3>:
   2414c:	4603      	mov	r3, r0
   2414e:	430b      	orrs	r3, r1
   24150:	d47f      	bmi.n	24252 <__divsi3+0x106>
   24152:	2200      	movs	r2, #0
   24154:	0843      	lsrs	r3, r0, #1
   24156:	428b      	cmp	r3, r1
   24158:	d374      	bcc.n	24244 <__divsi3+0xf8>
   2415a:	0903      	lsrs	r3, r0, #4
   2415c:	428b      	cmp	r3, r1
   2415e:	d35f      	bcc.n	24220 <__divsi3+0xd4>
   24160:	0a03      	lsrs	r3, r0, #8
   24162:	428b      	cmp	r3, r1
   24164:	d344      	bcc.n	241f0 <__divsi3+0xa4>
   24166:	0b03      	lsrs	r3, r0, #12
   24168:	428b      	cmp	r3, r1
   2416a:	d328      	bcc.n	241be <__divsi3+0x72>
   2416c:	0c03      	lsrs	r3, r0, #16
   2416e:	428b      	cmp	r3, r1
   24170:	d30d      	bcc.n	2418e <__divsi3+0x42>
   24172:	22ff      	movs	r2, #255	; 0xff
   24174:	0209      	lsls	r1, r1, #8
   24176:	ba12      	rev	r2, r2
   24178:	0c03      	lsrs	r3, r0, #16
   2417a:	428b      	cmp	r3, r1
   2417c:	d302      	bcc.n	24184 <__divsi3+0x38>
   2417e:	1212      	asrs	r2, r2, #8
   24180:	0209      	lsls	r1, r1, #8
   24182:	d065      	beq.n	24250 <__divsi3+0x104>
   24184:	0b03      	lsrs	r3, r0, #12
   24186:	428b      	cmp	r3, r1
   24188:	d319      	bcc.n	241be <__divsi3+0x72>
   2418a:	e000      	b.n	2418e <__divsi3+0x42>
   2418c:	0a09      	lsrs	r1, r1, #8
   2418e:	0bc3      	lsrs	r3, r0, #15
   24190:	428b      	cmp	r3, r1
   24192:	d301      	bcc.n	24198 <__divsi3+0x4c>
   24194:	03cb      	lsls	r3, r1, #15
   24196:	1ac0      	subs	r0, r0, r3
   24198:	4152      	adcs	r2, r2
   2419a:	0b83      	lsrs	r3, r0, #14
   2419c:	428b      	cmp	r3, r1
   2419e:	d301      	bcc.n	241a4 <__divsi3+0x58>
   241a0:	038b      	lsls	r3, r1, #14
   241a2:	1ac0      	subs	r0, r0, r3
   241a4:	4152      	adcs	r2, r2
   241a6:	0b43      	lsrs	r3, r0, #13
   241a8:	428b      	cmp	r3, r1
   241aa:	d301      	bcc.n	241b0 <__divsi3+0x64>
   241ac:	034b      	lsls	r3, r1, #13
   241ae:	1ac0      	subs	r0, r0, r3
   241b0:	4152      	adcs	r2, r2
   241b2:	0b03      	lsrs	r3, r0, #12
   241b4:	428b      	cmp	r3, r1
   241b6:	d301      	bcc.n	241bc <__divsi3+0x70>
   241b8:	030b      	lsls	r3, r1, #12
   241ba:	1ac0      	subs	r0, r0, r3
   241bc:	4152      	adcs	r2, r2
   241be:	0ac3      	lsrs	r3, r0, #11
   241c0:	428b      	cmp	r3, r1
   241c2:	d301      	bcc.n	241c8 <__divsi3+0x7c>
   241c4:	02cb      	lsls	r3, r1, #11
   241c6:	1ac0      	subs	r0, r0, r3
   241c8:	4152      	adcs	r2, r2
   241ca:	0a83      	lsrs	r3, r0, #10
   241cc:	428b      	cmp	r3, r1
   241ce:	d301      	bcc.n	241d4 <__divsi3+0x88>
   241d0:	028b      	lsls	r3, r1, #10
   241d2:	1ac0      	subs	r0, r0, r3
   241d4:	4152      	adcs	r2, r2
   241d6:	0a43      	lsrs	r3, r0, #9
   241d8:	428b      	cmp	r3, r1
   241da:	d301      	bcc.n	241e0 <__divsi3+0x94>
   241dc:	024b      	lsls	r3, r1, #9
   241de:	1ac0      	subs	r0, r0, r3
   241e0:	4152      	adcs	r2, r2
   241e2:	0a03      	lsrs	r3, r0, #8
   241e4:	428b      	cmp	r3, r1
   241e6:	d301      	bcc.n	241ec <__divsi3+0xa0>
   241e8:	020b      	lsls	r3, r1, #8
   241ea:	1ac0      	subs	r0, r0, r3
   241ec:	4152      	adcs	r2, r2
   241ee:	d2cd      	bcs.n	2418c <__divsi3+0x40>
   241f0:	09c3      	lsrs	r3, r0, #7
   241f2:	428b      	cmp	r3, r1
   241f4:	d301      	bcc.n	241fa <__divsi3+0xae>
   241f6:	01cb      	lsls	r3, r1, #7
   241f8:	1ac0      	subs	r0, r0, r3
   241fa:	4152      	adcs	r2, r2
   241fc:	0983      	lsrs	r3, r0, #6
   241fe:	428b      	cmp	r3, r1
   24200:	d301      	bcc.n	24206 <__divsi3+0xba>
   24202:	018b      	lsls	r3, r1, #6
   24204:	1ac0      	subs	r0, r0, r3
   24206:	4152      	adcs	r2, r2
   24208:	0943      	lsrs	r3, r0, #5
   2420a:	428b      	cmp	r3, r1
   2420c:	d301      	bcc.n	24212 <__divsi3+0xc6>
   2420e:	014b      	lsls	r3, r1, #5
   24210:	1ac0      	subs	r0, r0, r3
   24212:	4152      	adcs	r2, r2
   24214:	0903      	lsrs	r3, r0, #4
   24216:	428b      	cmp	r3, r1
   24218:	d301      	bcc.n	2421e <__divsi3+0xd2>
   2421a:	010b      	lsls	r3, r1, #4
   2421c:	1ac0      	subs	r0, r0, r3
   2421e:	4152      	adcs	r2, r2
   24220:	08c3      	lsrs	r3, r0, #3
   24222:	428b      	cmp	r3, r1
   24224:	d301      	bcc.n	2422a <__divsi3+0xde>
   24226:	00cb      	lsls	r3, r1, #3
   24228:	1ac0      	subs	r0, r0, r3
   2422a:	4152      	adcs	r2, r2
   2422c:	0883      	lsrs	r3, r0, #2
   2422e:	428b      	cmp	r3, r1
   24230:	d301      	bcc.n	24236 <__divsi3+0xea>
   24232:	008b      	lsls	r3, r1, #2
   24234:	1ac0      	subs	r0, r0, r3
   24236:	4152      	adcs	r2, r2
   24238:	0843      	lsrs	r3, r0, #1
   2423a:	428b      	cmp	r3, r1
   2423c:	d301      	bcc.n	24242 <__divsi3+0xf6>
   2423e:	004b      	lsls	r3, r1, #1
   24240:	1ac0      	subs	r0, r0, r3
   24242:	4152      	adcs	r2, r2
   24244:	1a41      	subs	r1, r0, r1
   24246:	d200      	bcs.n	2424a <__divsi3+0xfe>
   24248:	4601      	mov	r1, r0
   2424a:	4152      	adcs	r2, r2
   2424c:	4610      	mov	r0, r2
   2424e:	4770      	bx	lr
   24250:	e05d      	b.n	2430e <__divsi3+0x1c2>
   24252:	0fca      	lsrs	r2, r1, #31
   24254:	d000      	beq.n	24258 <__divsi3+0x10c>
   24256:	4249      	negs	r1, r1
   24258:	1003      	asrs	r3, r0, #32
   2425a:	d300      	bcc.n	2425e <__divsi3+0x112>
   2425c:	4240      	negs	r0, r0
   2425e:	4053      	eors	r3, r2
   24260:	2200      	movs	r2, #0
   24262:	469c      	mov	ip, r3
   24264:	0903      	lsrs	r3, r0, #4
   24266:	428b      	cmp	r3, r1
   24268:	d32d      	bcc.n	242c6 <__divsi3+0x17a>
   2426a:	0a03      	lsrs	r3, r0, #8
   2426c:	428b      	cmp	r3, r1
   2426e:	d312      	bcc.n	24296 <__divsi3+0x14a>
   24270:	22fc      	movs	r2, #252	; 0xfc
   24272:	0189      	lsls	r1, r1, #6
   24274:	ba12      	rev	r2, r2
   24276:	0a03      	lsrs	r3, r0, #8
   24278:	428b      	cmp	r3, r1
   2427a:	d30c      	bcc.n	24296 <__divsi3+0x14a>
   2427c:	0189      	lsls	r1, r1, #6
   2427e:	1192      	asrs	r2, r2, #6
   24280:	428b      	cmp	r3, r1
   24282:	d308      	bcc.n	24296 <__divsi3+0x14a>
   24284:	0189      	lsls	r1, r1, #6
   24286:	1192      	asrs	r2, r2, #6
   24288:	428b      	cmp	r3, r1
   2428a:	d304      	bcc.n	24296 <__divsi3+0x14a>
   2428c:	0189      	lsls	r1, r1, #6
   2428e:	d03a      	beq.n	24306 <__divsi3+0x1ba>
   24290:	1192      	asrs	r2, r2, #6
   24292:	e000      	b.n	24296 <__divsi3+0x14a>
   24294:	0989      	lsrs	r1, r1, #6
   24296:	09c3      	lsrs	r3, r0, #7
   24298:	428b      	cmp	r3, r1
   2429a:	d301      	bcc.n	242a0 <__divsi3+0x154>
   2429c:	01cb      	lsls	r3, r1, #7
   2429e:	1ac0      	subs	r0, r0, r3
   242a0:	4152      	adcs	r2, r2
   242a2:	0983      	lsrs	r3, r0, #6
   242a4:	428b      	cmp	r3, r1
   242a6:	d301      	bcc.n	242ac <__divsi3+0x160>
   242a8:	018b      	lsls	r3, r1, #6
   242aa:	1ac0      	subs	r0, r0, r3
   242ac:	4152      	adcs	r2, r2
   242ae:	0943      	lsrs	r3, r0, #5
   242b0:	428b      	cmp	r3, r1
   242b2:	d301      	bcc.n	242b8 <__divsi3+0x16c>
   242b4:	014b      	lsls	r3, r1, #5
   242b6:	1ac0      	subs	r0, r0, r3
   242b8:	4152      	adcs	r2, r2
   242ba:	0903      	lsrs	r3, r0, #4
   242bc:	428b      	cmp	r3, r1
   242be:	d301      	bcc.n	242c4 <__divsi3+0x178>
   242c0:	010b      	lsls	r3, r1, #4
   242c2:	1ac0      	subs	r0, r0, r3
   242c4:	4152      	adcs	r2, r2
   242c6:	08c3      	lsrs	r3, r0, #3
   242c8:	428b      	cmp	r3, r1
   242ca:	d301      	bcc.n	242d0 <__divsi3+0x184>
   242cc:	00cb      	lsls	r3, r1, #3
   242ce:	1ac0      	subs	r0, r0, r3
   242d0:	4152      	adcs	r2, r2
   242d2:	0883      	lsrs	r3, r0, #2
   242d4:	428b      	cmp	r3, r1
   242d6:	d301      	bcc.n	242dc <__divsi3+0x190>
   242d8:	008b      	lsls	r3, r1, #2
   242da:	1ac0      	subs	r0, r0, r3
   242dc:	4152      	adcs	r2, r2
   242de:	d2d9      	bcs.n	24294 <__divsi3+0x148>
   242e0:	0843      	lsrs	r3, r0, #1
   242e2:	428b      	cmp	r3, r1
   242e4:	d301      	bcc.n	242ea <__divsi3+0x19e>
   242e6:	004b      	lsls	r3, r1, #1
   242e8:	1ac0      	subs	r0, r0, r3
   242ea:	4152      	adcs	r2, r2
   242ec:	1a41      	subs	r1, r0, r1
   242ee:	d200      	bcs.n	242f2 <__divsi3+0x1a6>
   242f0:	4601      	mov	r1, r0
   242f2:	4663      	mov	r3, ip
   242f4:	4152      	adcs	r2, r2
   242f6:	105b      	asrs	r3, r3, #1
   242f8:	4610      	mov	r0, r2
   242fa:	d301      	bcc.n	24300 <__divsi3+0x1b4>
   242fc:	4240      	negs	r0, r0
   242fe:	2b00      	cmp	r3, #0
   24300:	d500      	bpl.n	24304 <__divsi3+0x1b8>
   24302:	4249      	negs	r1, r1
   24304:	4770      	bx	lr
   24306:	4663      	mov	r3, ip
   24308:	105b      	asrs	r3, r3, #1
   2430a:	d300      	bcc.n	2430e <__divsi3+0x1c2>
   2430c:	4240      	negs	r0, r0
   2430e:	b501      	push	{r0, lr}
   24310:	2000      	movs	r0, #0
   24312:	f000 f805 	bl	24320 <__aeabi_idiv0>
   24316:	bd02      	pop	{r1, pc}

00024318 <__aeabi_idivmod>:
   24318:	2900      	cmp	r1, #0
   2431a:	d0f8      	beq.n	2430e <__divsi3+0x1c2>
   2431c:	e716      	b.n	2414c <__divsi3>
   2431e:	4770      	bx	lr

00024320 <__aeabi_idiv0>:
   24320:	4770      	bx	lr
   24322:	46c0      	nop			; (mov r8, r8)

00024324 <__aeabi_lmul>:
   24324:	b5f0      	push	{r4, r5, r6, r7, lr}
   24326:	46ce      	mov	lr, r9
   24328:	4647      	mov	r7, r8
   2432a:	0415      	lsls	r5, r2, #16
   2432c:	0c2d      	lsrs	r5, r5, #16
   2432e:	002e      	movs	r6, r5
   24330:	b580      	push	{r7, lr}
   24332:	0407      	lsls	r7, r0, #16
   24334:	0c14      	lsrs	r4, r2, #16
   24336:	0c3f      	lsrs	r7, r7, #16
   24338:	4699      	mov	r9, r3
   2433a:	0c03      	lsrs	r3, r0, #16
   2433c:	437e      	muls	r6, r7
   2433e:	435d      	muls	r5, r3
   24340:	4367      	muls	r7, r4
   24342:	4363      	muls	r3, r4
   24344:	197f      	adds	r7, r7, r5
   24346:	0c34      	lsrs	r4, r6, #16
   24348:	19e4      	adds	r4, r4, r7
   2434a:	469c      	mov	ip, r3
   2434c:	42a5      	cmp	r5, r4
   2434e:	d903      	bls.n	24358 <__aeabi_lmul+0x34>
   24350:	2380      	movs	r3, #128	; 0x80
   24352:	025b      	lsls	r3, r3, #9
   24354:	4698      	mov	r8, r3
   24356:	44c4      	add	ip, r8
   24358:	464b      	mov	r3, r9
   2435a:	4351      	muls	r1, r2
   2435c:	4343      	muls	r3, r0
   2435e:	0436      	lsls	r6, r6, #16
   24360:	0c36      	lsrs	r6, r6, #16
   24362:	0c25      	lsrs	r5, r4, #16
   24364:	0424      	lsls	r4, r4, #16
   24366:	4465      	add	r5, ip
   24368:	19a4      	adds	r4, r4, r6
   2436a:	1859      	adds	r1, r3, r1
   2436c:	1949      	adds	r1, r1, r5
   2436e:	0020      	movs	r0, r4
   24370:	bc0c      	pop	{r2, r3}
   24372:	4690      	mov	r8, r2
   24374:	4699      	mov	r9, r3
   24376:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024378 <__aeabi_fdiv>:
   24378:	b5f0      	push	{r4, r5, r6, r7, lr}
   2437a:	4657      	mov	r7, sl
   2437c:	464e      	mov	r6, r9
   2437e:	46de      	mov	lr, fp
   24380:	4645      	mov	r5, r8
   24382:	b5e0      	push	{r5, r6, r7, lr}
   24384:	0244      	lsls	r4, r0, #9
   24386:	0043      	lsls	r3, r0, #1
   24388:	0fc6      	lsrs	r6, r0, #31
   2438a:	b083      	sub	sp, #12
   2438c:	1c0f      	adds	r7, r1, #0
   2438e:	0a64      	lsrs	r4, r4, #9
   24390:	0e1b      	lsrs	r3, r3, #24
   24392:	46b2      	mov	sl, r6
   24394:	d053      	beq.n	2443e <__aeabi_fdiv+0xc6>
   24396:	2bff      	cmp	r3, #255	; 0xff
   24398:	d027      	beq.n	243ea <__aeabi_fdiv+0x72>
   2439a:	2280      	movs	r2, #128	; 0x80
   2439c:	00e4      	lsls	r4, r4, #3
   2439e:	04d2      	lsls	r2, r2, #19
   243a0:	4314      	orrs	r4, r2
   243a2:	227f      	movs	r2, #127	; 0x7f
   243a4:	4252      	negs	r2, r2
   243a6:	4690      	mov	r8, r2
   243a8:	4498      	add	r8, r3
   243aa:	2300      	movs	r3, #0
   243ac:	4699      	mov	r9, r3
   243ae:	469b      	mov	fp, r3
   243b0:	027d      	lsls	r5, r7, #9
   243b2:	0078      	lsls	r0, r7, #1
   243b4:	0ffb      	lsrs	r3, r7, #31
   243b6:	0a6d      	lsrs	r5, r5, #9
   243b8:	0e00      	lsrs	r0, r0, #24
   243ba:	9300      	str	r3, [sp, #0]
   243bc:	d024      	beq.n	24408 <__aeabi_fdiv+0x90>
   243be:	28ff      	cmp	r0, #255	; 0xff
   243c0:	d046      	beq.n	24450 <__aeabi_fdiv+0xd8>
   243c2:	2380      	movs	r3, #128	; 0x80
   243c4:	2100      	movs	r1, #0
   243c6:	00ed      	lsls	r5, r5, #3
   243c8:	04db      	lsls	r3, r3, #19
   243ca:	431d      	orrs	r5, r3
   243cc:	387f      	subs	r0, #127	; 0x7f
   243ce:	4647      	mov	r7, r8
   243d0:	1a38      	subs	r0, r7, r0
   243d2:	464f      	mov	r7, r9
   243d4:	430f      	orrs	r7, r1
   243d6:	00bf      	lsls	r7, r7, #2
   243d8:	46b9      	mov	r9, r7
   243da:	0033      	movs	r3, r6
   243dc:	9a00      	ldr	r2, [sp, #0]
   243de:	4f87      	ldr	r7, [pc, #540]	; (245fc <__aeabi_fdiv+0x284>)
   243e0:	4053      	eors	r3, r2
   243e2:	464a      	mov	r2, r9
   243e4:	58ba      	ldr	r2, [r7, r2]
   243e6:	9301      	str	r3, [sp, #4]
   243e8:	4697      	mov	pc, r2
   243ea:	2c00      	cmp	r4, #0
   243ec:	d14e      	bne.n	2448c <__aeabi_fdiv+0x114>
   243ee:	2308      	movs	r3, #8
   243f0:	4699      	mov	r9, r3
   243f2:	33f7      	adds	r3, #247	; 0xf7
   243f4:	4698      	mov	r8, r3
   243f6:	3bfd      	subs	r3, #253	; 0xfd
   243f8:	469b      	mov	fp, r3
   243fa:	027d      	lsls	r5, r7, #9
   243fc:	0078      	lsls	r0, r7, #1
   243fe:	0ffb      	lsrs	r3, r7, #31
   24400:	0a6d      	lsrs	r5, r5, #9
   24402:	0e00      	lsrs	r0, r0, #24
   24404:	9300      	str	r3, [sp, #0]
   24406:	d1da      	bne.n	243be <__aeabi_fdiv+0x46>
   24408:	2d00      	cmp	r5, #0
   2440a:	d126      	bne.n	2445a <__aeabi_fdiv+0xe2>
   2440c:	2000      	movs	r0, #0
   2440e:	2101      	movs	r1, #1
   24410:	0033      	movs	r3, r6
   24412:	9a00      	ldr	r2, [sp, #0]
   24414:	4f7a      	ldr	r7, [pc, #488]	; (24600 <__aeabi_fdiv+0x288>)
   24416:	4053      	eors	r3, r2
   24418:	4642      	mov	r2, r8
   2441a:	1a10      	subs	r0, r2, r0
   2441c:	464a      	mov	r2, r9
   2441e:	430a      	orrs	r2, r1
   24420:	0092      	lsls	r2, r2, #2
   24422:	58ba      	ldr	r2, [r7, r2]
   24424:	001d      	movs	r5, r3
   24426:	4697      	mov	pc, r2
   24428:	9b00      	ldr	r3, [sp, #0]
   2442a:	002c      	movs	r4, r5
   2442c:	469a      	mov	sl, r3
   2442e:	468b      	mov	fp, r1
   24430:	465b      	mov	r3, fp
   24432:	2b02      	cmp	r3, #2
   24434:	d131      	bne.n	2449a <__aeabi_fdiv+0x122>
   24436:	4653      	mov	r3, sl
   24438:	21ff      	movs	r1, #255	; 0xff
   2443a:	2400      	movs	r4, #0
   2443c:	e038      	b.n	244b0 <__aeabi_fdiv+0x138>
   2443e:	2c00      	cmp	r4, #0
   24440:	d117      	bne.n	24472 <__aeabi_fdiv+0xfa>
   24442:	2304      	movs	r3, #4
   24444:	4699      	mov	r9, r3
   24446:	2300      	movs	r3, #0
   24448:	4698      	mov	r8, r3
   2444a:	3301      	adds	r3, #1
   2444c:	469b      	mov	fp, r3
   2444e:	e7af      	b.n	243b0 <__aeabi_fdiv+0x38>
   24450:	20ff      	movs	r0, #255	; 0xff
   24452:	2d00      	cmp	r5, #0
   24454:	d10b      	bne.n	2446e <__aeabi_fdiv+0xf6>
   24456:	2102      	movs	r1, #2
   24458:	e7da      	b.n	24410 <__aeabi_fdiv+0x98>
   2445a:	0028      	movs	r0, r5
   2445c:	f001 feaa 	bl	261b4 <__clzsi2>
   24460:	1f43      	subs	r3, r0, #5
   24462:	409d      	lsls	r5, r3
   24464:	2376      	movs	r3, #118	; 0x76
   24466:	425b      	negs	r3, r3
   24468:	1a18      	subs	r0, r3, r0
   2446a:	2100      	movs	r1, #0
   2446c:	e7af      	b.n	243ce <__aeabi_fdiv+0x56>
   2446e:	2103      	movs	r1, #3
   24470:	e7ad      	b.n	243ce <__aeabi_fdiv+0x56>
   24472:	0020      	movs	r0, r4
   24474:	f001 fe9e 	bl	261b4 <__clzsi2>
   24478:	1f43      	subs	r3, r0, #5
   2447a:	409c      	lsls	r4, r3
   2447c:	2376      	movs	r3, #118	; 0x76
   2447e:	425b      	negs	r3, r3
   24480:	1a1b      	subs	r3, r3, r0
   24482:	4698      	mov	r8, r3
   24484:	2300      	movs	r3, #0
   24486:	4699      	mov	r9, r3
   24488:	469b      	mov	fp, r3
   2448a:	e791      	b.n	243b0 <__aeabi_fdiv+0x38>
   2448c:	230c      	movs	r3, #12
   2448e:	4699      	mov	r9, r3
   24490:	33f3      	adds	r3, #243	; 0xf3
   24492:	4698      	mov	r8, r3
   24494:	3bfc      	subs	r3, #252	; 0xfc
   24496:	469b      	mov	fp, r3
   24498:	e78a      	b.n	243b0 <__aeabi_fdiv+0x38>
   2449a:	2b03      	cmp	r3, #3
   2449c:	d100      	bne.n	244a0 <__aeabi_fdiv+0x128>
   2449e:	e0a5      	b.n	245ec <__aeabi_fdiv+0x274>
   244a0:	4655      	mov	r5, sl
   244a2:	2b01      	cmp	r3, #1
   244a4:	d000      	beq.n	244a8 <__aeabi_fdiv+0x130>
   244a6:	e081      	b.n	245ac <__aeabi_fdiv+0x234>
   244a8:	2301      	movs	r3, #1
   244aa:	2100      	movs	r1, #0
   244ac:	2400      	movs	r4, #0
   244ae:	402b      	ands	r3, r5
   244b0:	0264      	lsls	r4, r4, #9
   244b2:	05c9      	lsls	r1, r1, #23
   244b4:	0a60      	lsrs	r0, r4, #9
   244b6:	07db      	lsls	r3, r3, #31
   244b8:	4308      	orrs	r0, r1
   244ba:	4318      	orrs	r0, r3
   244bc:	b003      	add	sp, #12
   244be:	bc3c      	pop	{r2, r3, r4, r5}
   244c0:	4690      	mov	r8, r2
   244c2:	4699      	mov	r9, r3
   244c4:	46a2      	mov	sl, r4
   244c6:	46ab      	mov	fp, r5
   244c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   244ca:	2480      	movs	r4, #128	; 0x80
   244cc:	2300      	movs	r3, #0
   244ce:	03e4      	lsls	r4, r4, #15
   244d0:	21ff      	movs	r1, #255	; 0xff
   244d2:	e7ed      	b.n	244b0 <__aeabi_fdiv+0x138>
   244d4:	21ff      	movs	r1, #255	; 0xff
   244d6:	2400      	movs	r4, #0
   244d8:	e7ea      	b.n	244b0 <__aeabi_fdiv+0x138>
   244da:	2301      	movs	r3, #1
   244dc:	1a59      	subs	r1, r3, r1
   244de:	291b      	cmp	r1, #27
   244e0:	dd66      	ble.n	245b0 <__aeabi_fdiv+0x238>
   244e2:	9a01      	ldr	r2, [sp, #4]
   244e4:	4013      	ands	r3, r2
   244e6:	2100      	movs	r1, #0
   244e8:	2400      	movs	r4, #0
   244ea:	e7e1      	b.n	244b0 <__aeabi_fdiv+0x138>
   244ec:	2380      	movs	r3, #128	; 0x80
   244ee:	03db      	lsls	r3, r3, #15
   244f0:	421c      	tst	r4, r3
   244f2:	d038      	beq.n	24566 <__aeabi_fdiv+0x1ee>
   244f4:	421d      	tst	r5, r3
   244f6:	d051      	beq.n	2459c <__aeabi_fdiv+0x224>
   244f8:	431c      	orrs	r4, r3
   244fa:	0264      	lsls	r4, r4, #9
   244fc:	0a64      	lsrs	r4, r4, #9
   244fe:	0033      	movs	r3, r6
   24500:	21ff      	movs	r1, #255	; 0xff
   24502:	e7d5      	b.n	244b0 <__aeabi_fdiv+0x138>
   24504:	0163      	lsls	r3, r4, #5
   24506:	016c      	lsls	r4, r5, #5
   24508:	42a3      	cmp	r3, r4
   2450a:	d23b      	bcs.n	24584 <__aeabi_fdiv+0x20c>
   2450c:	261b      	movs	r6, #27
   2450e:	2100      	movs	r1, #0
   24510:	3801      	subs	r0, #1
   24512:	2501      	movs	r5, #1
   24514:	001f      	movs	r7, r3
   24516:	0049      	lsls	r1, r1, #1
   24518:	005b      	lsls	r3, r3, #1
   2451a:	2f00      	cmp	r7, #0
   2451c:	db01      	blt.n	24522 <__aeabi_fdiv+0x1aa>
   2451e:	429c      	cmp	r4, r3
   24520:	d801      	bhi.n	24526 <__aeabi_fdiv+0x1ae>
   24522:	1b1b      	subs	r3, r3, r4
   24524:	4329      	orrs	r1, r5
   24526:	3e01      	subs	r6, #1
   24528:	2e00      	cmp	r6, #0
   2452a:	d1f3      	bne.n	24514 <__aeabi_fdiv+0x19c>
   2452c:	001c      	movs	r4, r3
   2452e:	1e63      	subs	r3, r4, #1
   24530:	419c      	sbcs	r4, r3
   24532:	430c      	orrs	r4, r1
   24534:	0001      	movs	r1, r0
   24536:	317f      	adds	r1, #127	; 0x7f
   24538:	2900      	cmp	r1, #0
   2453a:	ddce      	ble.n	244da <__aeabi_fdiv+0x162>
   2453c:	0763      	lsls	r3, r4, #29
   2453e:	d004      	beq.n	2454a <__aeabi_fdiv+0x1d2>
   24540:	230f      	movs	r3, #15
   24542:	4023      	ands	r3, r4
   24544:	2b04      	cmp	r3, #4
   24546:	d000      	beq.n	2454a <__aeabi_fdiv+0x1d2>
   24548:	3404      	adds	r4, #4
   2454a:	0123      	lsls	r3, r4, #4
   2454c:	d503      	bpl.n	24556 <__aeabi_fdiv+0x1de>
   2454e:	0001      	movs	r1, r0
   24550:	4b2c      	ldr	r3, [pc, #176]	; (24604 <__aeabi_fdiv+0x28c>)
   24552:	3180      	adds	r1, #128	; 0x80
   24554:	401c      	ands	r4, r3
   24556:	29fe      	cmp	r1, #254	; 0xfe
   24558:	dd0d      	ble.n	24576 <__aeabi_fdiv+0x1fe>
   2455a:	2301      	movs	r3, #1
   2455c:	9a01      	ldr	r2, [sp, #4]
   2455e:	21ff      	movs	r1, #255	; 0xff
   24560:	4013      	ands	r3, r2
   24562:	2400      	movs	r4, #0
   24564:	e7a4      	b.n	244b0 <__aeabi_fdiv+0x138>
   24566:	2380      	movs	r3, #128	; 0x80
   24568:	03db      	lsls	r3, r3, #15
   2456a:	431c      	orrs	r4, r3
   2456c:	0264      	lsls	r4, r4, #9
   2456e:	0a64      	lsrs	r4, r4, #9
   24570:	0033      	movs	r3, r6
   24572:	21ff      	movs	r1, #255	; 0xff
   24574:	e79c      	b.n	244b0 <__aeabi_fdiv+0x138>
   24576:	2301      	movs	r3, #1
   24578:	9a01      	ldr	r2, [sp, #4]
   2457a:	01a4      	lsls	r4, r4, #6
   2457c:	0a64      	lsrs	r4, r4, #9
   2457e:	b2c9      	uxtb	r1, r1
   24580:	4013      	ands	r3, r2
   24582:	e795      	b.n	244b0 <__aeabi_fdiv+0x138>
   24584:	1b1b      	subs	r3, r3, r4
   24586:	261a      	movs	r6, #26
   24588:	2101      	movs	r1, #1
   2458a:	e7c2      	b.n	24512 <__aeabi_fdiv+0x19a>
   2458c:	9b00      	ldr	r3, [sp, #0]
   2458e:	468b      	mov	fp, r1
   24590:	469a      	mov	sl, r3
   24592:	2400      	movs	r4, #0
   24594:	e74c      	b.n	24430 <__aeabi_fdiv+0xb8>
   24596:	0263      	lsls	r3, r4, #9
   24598:	d5e5      	bpl.n	24566 <__aeabi_fdiv+0x1ee>
   2459a:	2500      	movs	r5, #0
   2459c:	2480      	movs	r4, #128	; 0x80
   2459e:	03e4      	lsls	r4, r4, #15
   245a0:	432c      	orrs	r4, r5
   245a2:	0264      	lsls	r4, r4, #9
   245a4:	0a64      	lsrs	r4, r4, #9
   245a6:	9b00      	ldr	r3, [sp, #0]
   245a8:	21ff      	movs	r1, #255	; 0xff
   245aa:	e781      	b.n	244b0 <__aeabi_fdiv+0x138>
   245ac:	9501      	str	r5, [sp, #4]
   245ae:	e7c1      	b.n	24534 <__aeabi_fdiv+0x1bc>
   245b0:	0023      	movs	r3, r4
   245b2:	2020      	movs	r0, #32
   245b4:	40cb      	lsrs	r3, r1
   245b6:	1a41      	subs	r1, r0, r1
   245b8:	408c      	lsls	r4, r1
   245ba:	1e61      	subs	r1, r4, #1
   245bc:	418c      	sbcs	r4, r1
   245be:	431c      	orrs	r4, r3
   245c0:	0763      	lsls	r3, r4, #29
   245c2:	d004      	beq.n	245ce <__aeabi_fdiv+0x256>
   245c4:	230f      	movs	r3, #15
   245c6:	4023      	ands	r3, r4
   245c8:	2b04      	cmp	r3, #4
   245ca:	d000      	beq.n	245ce <__aeabi_fdiv+0x256>
   245cc:	3404      	adds	r4, #4
   245ce:	0163      	lsls	r3, r4, #5
   245d0:	d505      	bpl.n	245de <__aeabi_fdiv+0x266>
   245d2:	2301      	movs	r3, #1
   245d4:	9a01      	ldr	r2, [sp, #4]
   245d6:	2101      	movs	r1, #1
   245d8:	4013      	ands	r3, r2
   245da:	2400      	movs	r4, #0
   245dc:	e768      	b.n	244b0 <__aeabi_fdiv+0x138>
   245de:	2301      	movs	r3, #1
   245e0:	9a01      	ldr	r2, [sp, #4]
   245e2:	01a4      	lsls	r4, r4, #6
   245e4:	0a64      	lsrs	r4, r4, #9
   245e6:	4013      	ands	r3, r2
   245e8:	2100      	movs	r1, #0
   245ea:	e761      	b.n	244b0 <__aeabi_fdiv+0x138>
   245ec:	2380      	movs	r3, #128	; 0x80
   245ee:	03db      	lsls	r3, r3, #15
   245f0:	431c      	orrs	r4, r3
   245f2:	0264      	lsls	r4, r4, #9
   245f4:	0a64      	lsrs	r4, r4, #9
   245f6:	4653      	mov	r3, sl
   245f8:	21ff      	movs	r1, #255	; 0xff
   245fa:	e759      	b.n	244b0 <__aeabi_fdiv+0x138>
   245fc:	0002af60 	.word	0x0002af60
   24600:	0002afa0 	.word	0x0002afa0
   24604:	f7ffffff 	.word	0xf7ffffff

00024608 <__aeabi_fmul>:
   24608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2460a:	4657      	mov	r7, sl
   2460c:	464e      	mov	r6, r9
   2460e:	4645      	mov	r5, r8
   24610:	46de      	mov	lr, fp
   24612:	b5e0      	push	{r5, r6, r7, lr}
   24614:	0247      	lsls	r7, r0, #9
   24616:	0046      	lsls	r6, r0, #1
   24618:	4688      	mov	r8, r1
   2461a:	0a7f      	lsrs	r7, r7, #9
   2461c:	0e36      	lsrs	r6, r6, #24
   2461e:	0fc4      	lsrs	r4, r0, #31
   24620:	2e00      	cmp	r6, #0
   24622:	d047      	beq.n	246b4 <__aeabi_fmul+0xac>
   24624:	2eff      	cmp	r6, #255	; 0xff
   24626:	d024      	beq.n	24672 <__aeabi_fmul+0x6a>
   24628:	00fb      	lsls	r3, r7, #3
   2462a:	2780      	movs	r7, #128	; 0x80
   2462c:	04ff      	lsls	r7, r7, #19
   2462e:	431f      	orrs	r7, r3
   24630:	2300      	movs	r3, #0
   24632:	4699      	mov	r9, r3
   24634:	469a      	mov	sl, r3
   24636:	3e7f      	subs	r6, #127	; 0x7f
   24638:	4643      	mov	r3, r8
   2463a:	025d      	lsls	r5, r3, #9
   2463c:	0058      	lsls	r0, r3, #1
   2463e:	0fdb      	lsrs	r3, r3, #31
   24640:	0a6d      	lsrs	r5, r5, #9
   24642:	0e00      	lsrs	r0, r0, #24
   24644:	4698      	mov	r8, r3
   24646:	d043      	beq.n	246d0 <__aeabi_fmul+0xc8>
   24648:	28ff      	cmp	r0, #255	; 0xff
   2464a:	d03b      	beq.n	246c4 <__aeabi_fmul+0xbc>
   2464c:	00eb      	lsls	r3, r5, #3
   2464e:	2580      	movs	r5, #128	; 0x80
   24650:	2200      	movs	r2, #0
   24652:	04ed      	lsls	r5, r5, #19
   24654:	431d      	orrs	r5, r3
   24656:	387f      	subs	r0, #127	; 0x7f
   24658:	1836      	adds	r6, r6, r0
   2465a:	1c73      	adds	r3, r6, #1
   2465c:	4641      	mov	r1, r8
   2465e:	469b      	mov	fp, r3
   24660:	464b      	mov	r3, r9
   24662:	4061      	eors	r1, r4
   24664:	4313      	orrs	r3, r2
   24666:	2b0f      	cmp	r3, #15
   24668:	d864      	bhi.n	24734 <__aeabi_fmul+0x12c>
   2466a:	4875      	ldr	r0, [pc, #468]	; (24840 <__aeabi_fmul+0x238>)
   2466c:	009b      	lsls	r3, r3, #2
   2466e:	58c3      	ldr	r3, [r0, r3]
   24670:	469f      	mov	pc, r3
   24672:	2f00      	cmp	r7, #0
   24674:	d142      	bne.n	246fc <__aeabi_fmul+0xf4>
   24676:	2308      	movs	r3, #8
   24678:	4699      	mov	r9, r3
   2467a:	3b06      	subs	r3, #6
   2467c:	26ff      	movs	r6, #255	; 0xff
   2467e:	469a      	mov	sl, r3
   24680:	e7da      	b.n	24638 <__aeabi_fmul+0x30>
   24682:	4641      	mov	r1, r8
   24684:	2a02      	cmp	r2, #2
   24686:	d028      	beq.n	246da <__aeabi_fmul+0xd2>
   24688:	2a03      	cmp	r2, #3
   2468a:	d100      	bne.n	2468e <__aeabi_fmul+0x86>
   2468c:	e0ce      	b.n	2482c <__aeabi_fmul+0x224>
   2468e:	2a01      	cmp	r2, #1
   24690:	d000      	beq.n	24694 <__aeabi_fmul+0x8c>
   24692:	e0ac      	b.n	247ee <__aeabi_fmul+0x1e6>
   24694:	4011      	ands	r1, r2
   24696:	2000      	movs	r0, #0
   24698:	2200      	movs	r2, #0
   2469a:	b2cc      	uxtb	r4, r1
   2469c:	0240      	lsls	r0, r0, #9
   2469e:	05d2      	lsls	r2, r2, #23
   246a0:	0a40      	lsrs	r0, r0, #9
   246a2:	07e4      	lsls	r4, r4, #31
   246a4:	4310      	orrs	r0, r2
   246a6:	4320      	orrs	r0, r4
   246a8:	bc3c      	pop	{r2, r3, r4, r5}
   246aa:	4690      	mov	r8, r2
   246ac:	4699      	mov	r9, r3
   246ae:	46a2      	mov	sl, r4
   246b0:	46ab      	mov	fp, r5
   246b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   246b4:	2f00      	cmp	r7, #0
   246b6:	d115      	bne.n	246e4 <__aeabi_fmul+0xdc>
   246b8:	2304      	movs	r3, #4
   246ba:	4699      	mov	r9, r3
   246bc:	3b03      	subs	r3, #3
   246be:	2600      	movs	r6, #0
   246c0:	469a      	mov	sl, r3
   246c2:	e7b9      	b.n	24638 <__aeabi_fmul+0x30>
   246c4:	20ff      	movs	r0, #255	; 0xff
   246c6:	2202      	movs	r2, #2
   246c8:	2d00      	cmp	r5, #0
   246ca:	d0c5      	beq.n	24658 <__aeabi_fmul+0x50>
   246cc:	2203      	movs	r2, #3
   246ce:	e7c3      	b.n	24658 <__aeabi_fmul+0x50>
   246d0:	2d00      	cmp	r5, #0
   246d2:	d119      	bne.n	24708 <__aeabi_fmul+0x100>
   246d4:	2000      	movs	r0, #0
   246d6:	2201      	movs	r2, #1
   246d8:	e7be      	b.n	24658 <__aeabi_fmul+0x50>
   246da:	2401      	movs	r4, #1
   246dc:	22ff      	movs	r2, #255	; 0xff
   246de:	400c      	ands	r4, r1
   246e0:	2000      	movs	r0, #0
   246e2:	e7db      	b.n	2469c <__aeabi_fmul+0x94>
   246e4:	0038      	movs	r0, r7
   246e6:	f001 fd65 	bl	261b4 <__clzsi2>
   246ea:	2676      	movs	r6, #118	; 0x76
   246ec:	1f43      	subs	r3, r0, #5
   246ee:	409f      	lsls	r7, r3
   246f0:	2300      	movs	r3, #0
   246f2:	4276      	negs	r6, r6
   246f4:	1a36      	subs	r6, r6, r0
   246f6:	4699      	mov	r9, r3
   246f8:	469a      	mov	sl, r3
   246fa:	e79d      	b.n	24638 <__aeabi_fmul+0x30>
   246fc:	230c      	movs	r3, #12
   246fe:	4699      	mov	r9, r3
   24700:	3b09      	subs	r3, #9
   24702:	26ff      	movs	r6, #255	; 0xff
   24704:	469a      	mov	sl, r3
   24706:	e797      	b.n	24638 <__aeabi_fmul+0x30>
   24708:	0028      	movs	r0, r5
   2470a:	f001 fd53 	bl	261b4 <__clzsi2>
   2470e:	1f43      	subs	r3, r0, #5
   24710:	409d      	lsls	r5, r3
   24712:	2376      	movs	r3, #118	; 0x76
   24714:	425b      	negs	r3, r3
   24716:	1a18      	subs	r0, r3, r0
   24718:	2200      	movs	r2, #0
   2471a:	e79d      	b.n	24658 <__aeabi_fmul+0x50>
   2471c:	2080      	movs	r0, #128	; 0x80
   2471e:	2400      	movs	r4, #0
   24720:	03c0      	lsls	r0, r0, #15
   24722:	22ff      	movs	r2, #255	; 0xff
   24724:	e7ba      	b.n	2469c <__aeabi_fmul+0x94>
   24726:	003d      	movs	r5, r7
   24728:	4652      	mov	r2, sl
   2472a:	e7ab      	b.n	24684 <__aeabi_fmul+0x7c>
   2472c:	003d      	movs	r5, r7
   2472e:	0021      	movs	r1, r4
   24730:	4652      	mov	r2, sl
   24732:	e7a7      	b.n	24684 <__aeabi_fmul+0x7c>
   24734:	0c3b      	lsrs	r3, r7, #16
   24736:	469c      	mov	ip, r3
   24738:	042a      	lsls	r2, r5, #16
   2473a:	0c12      	lsrs	r2, r2, #16
   2473c:	0c2b      	lsrs	r3, r5, #16
   2473e:	0014      	movs	r4, r2
   24740:	4660      	mov	r0, ip
   24742:	4665      	mov	r5, ip
   24744:	043f      	lsls	r7, r7, #16
   24746:	0c3f      	lsrs	r7, r7, #16
   24748:	437c      	muls	r4, r7
   2474a:	4342      	muls	r2, r0
   2474c:	435d      	muls	r5, r3
   2474e:	437b      	muls	r3, r7
   24750:	0c27      	lsrs	r7, r4, #16
   24752:	189b      	adds	r3, r3, r2
   24754:	18ff      	adds	r7, r7, r3
   24756:	42ba      	cmp	r2, r7
   24758:	d903      	bls.n	24762 <__aeabi_fmul+0x15a>
   2475a:	2380      	movs	r3, #128	; 0x80
   2475c:	025b      	lsls	r3, r3, #9
   2475e:	469c      	mov	ip, r3
   24760:	4465      	add	r5, ip
   24762:	0424      	lsls	r4, r4, #16
   24764:	043a      	lsls	r2, r7, #16
   24766:	0c24      	lsrs	r4, r4, #16
   24768:	1912      	adds	r2, r2, r4
   2476a:	0193      	lsls	r3, r2, #6
   2476c:	1e5c      	subs	r4, r3, #1
   2476e:	41a3      	sbcs	r3, r4
   24770:	0c3f      	lsrs	r7, r7, #16
   24772:	0e92      	lsrs	r2, r2, #26
   24774:	197d      	adds	r5, r7, r5
   24776:	431a      	orrs	r2, r3
   24778:	01ad      	lsls	r5, r5, #6
   2477a:	4315      	orrs	r5, r2
   2477c:	012b      	lsls	r3, r5, #4
   2477e:	d504      	bpl.n	2478a <__aeabi_fmul+0x182>
   24780:	2301      	movs	r3, #1
   24782:	465e      	mov	r6, fp
   24784:	086a      	lsrs	r2, r5, #1
   24786:	401d      	ands	r5, r3
   24788:	4315      	orrs	r5, r2
   2478a:	0032      	movs	r2, r6
   2478c:	327f      	adds	r2, #127	; 0x7f
   2478e:	2a00      	cmp	r2, #0
   24790:	dd25      	ble.n	247de <__aeabi_fmul+0x1d6>
   24792:	076b      	lsls	r3, r5, #29
   24794:	d004      	beq.n	247a0 <__aeabi_fmul+0x198>
   24796:	230f      	movs	r3, #15
   24798:	402b      	ands	r3, r5
   2479a:	2b04      	cmp	r3, #4
   2479c:	d000      	beq.n	247a0 <__aeabi_fmul+0x198>
   2479e:	3504      	adds	r5, #4
   247a0:	012b      	lsls	r3, r5, #4
   247a2:	d503      	bpl.n	247ac <__aeabi_fmul+0x1a4>
   247a4:	0032      	movs	r2, r6
   247a6:	4b27      	ldr	r3, [pc, #156]	; (24844 <__aeabi_fmul+0x23c>)
   247a8:	3280      	adds	r2, #128	; 0x80
   247aa:	401d      	ands	r5, r3
   247ac:	2afe      	cmp	r2, #254	; 0xfe
   247ae:	dc94      	bgt.n	246da <__aeabi_fmul+0xd2>
   247b0:	2401      	movs	r4, #1
   247b2:	01a8      	lsls	r0, r5, #6
   247b4:	0a40      	lsrs	r0, r0, #9
   247b6:	b2d2      	uxtb	r2, r2
   247b8:	400c      	ands	r4, r1
   247ba:	e76f      	b.n	2469c <__aeabi_fmul+0x94>
   247bc:	2080      	movs	r0, #128	; 0x80
   247be:	03c0      	lsls	r0, r0, #15
   247c0:	4207      	tst	r7, r0
   247c2:	d007      	beq.n	247d4 <__aeabi_fmul+0x1cc>
   247c4:	4205      	tst	r5, r0
   247c6:	d105      	bne.n	247d4 <__aeabi_fmul+0x1cc>
   247c8:	4328      	orrs	r0, r5
   247ca:	0240      	lsls	r0, r0, #9
   247cc:	0a40      	lsrs	r0, r0, #9
   247ce:	4644      	mov	r4, r8
   247d0:	22ff      	movs	r2, #255	; 0xff
   247d2:	e763      	b.n	2469c <__aeabi_fmul+0x94>
   247d4:	4338      	orrs	r0, r7
   247d6:	0240      	lsls	r0, r0, #9
   247d8:	0a40      	lsrs	r0, r0, #9
   247da:	22ff      	movs	r2, #255	; 0xff
   247dc:	e75e      	b.n	2469c <__aeabi_fmul+0x94>
   247de:	2401      	movs	r4, #1
   247e0:	1aa3      	subs	r3, r4, r2
   247e2:	2b1b      	cmp	r3, #27
   247e4:	dd05      	ble.n	247f2 <__aeabi_fmul+0x1ea>
   247e6:	400c      	ands	r4, r1
   247e8:	2200      	movs	r2, #0
   247ea:	2000      	movs	r0, #0
   247ec:	e756      	b.n	2469c <__aeabi_fmul+0x94>
   247ee:	465e      	mov	r6, fp
   247f0:	e7cb      	b.n	2478a <__aeabi_fmul+0x182>
   247f2:	002a      	movs	r2, r5
   247f4:	2020      	movs	r0, #32
   247f6:	40da      	lsrs	r2, r3
   247f8:	1ac3      	subs	r3, r0, r3
   247fa:	409d      	lsls	r5, r3
   247fc:	002b      	movs	r3, r5
   247fe:	1e5d      	subs	r5, r3, #1
   24800:	41ab      	sbcs	r3, r5
   24802:	4313      	orrs	r3, r2
   24804:	075a      	lsls	r2, r3, #29
   24806:	d004      	beq.n	24812 <__aeabi_fmul+0x20a>
   24808:	220f      	movs	r2, #15
   2480a:	401a      	ands	r2, r3
   2480c:	2a04      	cmp	r2, #4
   2480e:	d000      	beq.n	24812 <__aeabi_fmul+0x20a>
   24810:	3304      	adds	r3, #4
   24812:	015a      	lsls	r2, r3, #5
   24814:	d504      	bpl.n	24820 <__aeabi_fmul+0x218>
   24816:	2401      	movs	r4, #1
   24818:	2201      	movs	r2, #1
   2481a:	400c      	ands	r4, r1
   2481c:	2000      	movs	r0, #0
   2481e:	e73d      	b.n	2469c <__aeabi_fmul+0x94>
   24820:	2401      	movs	r4, #1
   24822:	019b      	lsls	r3, r3, #6
   24824:	0a58      	lsrs	r0, r3, #9
   24826:	400c      	ands	r4, r1
   24828:	2200      	movs	r2, #0
   2482a:	e737      	b.n	2469c <__aeabi_fmul+0x94>
   2482c:	2080      	movs	r0, #128	; 0x80
   2482e:	2401      	movs	r4, #1
   24830:	03c0      	lsls	r0, r0, #15
   24832:	4328      	orrs	r0, r5
   24834:	0240      	lsls	r0, r0, #9
   24836:	0a40      	lsrs	r0, r0, #9
   24838:	400c      	ands	r4, r1
   2483a:	22ff      	movs	r2, #255	; 0xff
   2483c:	e72e      	b.n	2469c <__aeabi_fmul+0x94>
   2483e:	46c0      	nop			; (mov r8, r8)
   24840:	0002afe0 	.word	0x0002afe0
   24844:	f7ffffff 	.word	0xf7ffffff

00024848 <__aeabi_f2iz>:
   24848:	0241      	lsls	r1, r0, #9
   2484a:	0043      	lsls	r3, r0, #1
   2484c:	0fc2      	lsrs	r2, r0, #31
   2484e:	0a49      	lsrs	r1, r1, #9
   24850:	0e1b      	lsrs	r3, r3, #24
   24852:	2000      	movs	r0, #0
   24854:	2b7e      	cmp	r3, #126	; 0x7e
   24856:	dd0d      	ble.n	24874 <__aeabi_f2iz+0x2c>
   24858:	2b9d      	cmp	r3, #157	; 0x9d
   2485a:	dc0c      	bgt.n	24876 <__aeabi_f2iz+0x2e>
   2485c:	2080      	movs	r0, #128	; 0x80
   2485e:	0400      	lsls	r0, r0, #16
   24860:	4301      	orrs	r1, r0
   24862:	2b95      	cmp	r3, #149	; 0x95
   24864:	dc0a      	bgt.n	2487c <__aeabi_f2iz+0x34>
   24866:	2096      	movs	r0, #150	; 0x96
   24868:	1ac3      	subs	r3, r0, r3
   2486a:	40d9      	lsrs	r1, r3
   2486c:	4248      	negs	r0, r1
   2486e:	2a00      	cmp	r2, #0
   24870:	d100      	bne.n	24874 <__aeabi_f2iz+0x2c>
   24872:	0008      	movs	r0, r1
   24874:	4770      	bx	lr
   24876:	4b03      	ldr	r3, [pc, #12]	; (24884 <__aeabi_f2iz+0x3c>)
   24878:	18d0      	adds	r0, r2, r3
   2487a:	e7fb      	b.n	24874 <__aeabi_f2iz+0x2c>
   2487c:	3b96      	subs	r3, #150	; 0x96
   2487e:	4099      	lsls	r1, r3
   24880:	e7f4      	b.n	2486c <__aeabi_f2iz+0x24>
   24882:	46c0      	nop			; (mov r8, r8)
   24884:	7fffffff 	.word	0x7fffffff

00024888 <__aeabi_i2f>:
   24888:	b570      	push	{r4, r5, r6, lr}
   2488a:	2800      	cmp	r0, #0
   2488c:	d030      	beq.n	248f0 <__aeabi_i2f+0x68>
   2488e:	17c3      	asrs	r3, r0, #31
   24890:	18c4      	adds	r4, r0, r3
   24892:	405c      	eors	r4, r3
   24894:	0fc5      	lsrs	r5, r0, #31
   24896:	0020      	movs	r0, r4
   24898:	f001 fc8c 	bl	261b4 <__clzsi2>
   2489c:	239e      	movs	r3, #158	; 0x9e
   2489e:	1a1b      	subs	r3, r3, r0
   248a0:	2b96      	cmp	r3, #150	; 0x96
   248a2:	dc0d      	bgt.n	248c0 <__aeabi_i2f+0x38>
   248a4:	2296      	movs	r2, #150	; 0x96
   248a6:	1ad2      	subs	r2, r2, r3
   248a8:	4094      	lsls	r4, r2
   248aa:	002a      	movs	r2, r5
   248ac:	0264      	lsls	r4, r4, #9
   248ae:	0a64      	lsrs	r4, r4, #9
   248b0:	b2db      	uxtb	r3, r3
   248b2:	0264      	lsls	r4, r4, #9
   248b4:	05db      	lsls	r3, r3, #23
   248b6:	0a60      	lsrs	r0, r4, #9
   248b8:	07d2      	lsls	r2, r2, #31
   248ba:	4318      	orrs	r0, r3
   248bc:	4310      	orrs	r0, r2
   248be:	bd70      	pop	{r4, r5, r6, pc}
   248c0:	2b99      	cmp	r3, #153	; 0x99
   248c2:	dc19      	bgt.n	248f8 <__aeabi_i2f+0x70>
   248c4:	2299      	movs	r2, #153	; 0x99
   248c6:	1ad2      	subs	r2, r2, r3
   248c8:	2a00      	cmp	r2, #0
   248ca:	dd29      	ble.n	24920 <__aeabi_i2f+0x98>
   248cc:	4094      	lsls	r4, r2
   248ce:	0022      	movs	r2, r4
   248d0:	4c14      	ldr	r4, [pc, #80]	; (24924 <__aeabi_i2f+0x9c>)
   248d2:	4014      	ands	r4, r2
   248d4:	0751      	lsls	r1, r2, #29
   248d6:	d004      	beq.n	248e2 <__aeabi_i2f+0x5a>
   248d8:	210f      	movs	r1, #15
   248da:	400a      	ands	r2, r1
   248dc:	2a04      	cmp	r2, #4
   248de:	d000      	beq.n	248e2 <__aeabi_i2f+0x5a>
   248e0:	3404      	adds	r4, #4
   248e2:	0162      	lsls	r2, r4, #5
   248e4:	d413      	bmi.n	2490e <__aeabi_i2f+0x86>
   248e6:	01a4      	lsls	r4, r4, #6
   248e8:	0a64      	lsrs	r4, r4, #9
   248ea:	b2db      	uxtb	r3, r3
   248ec:	002a      	movs	r2, r5
   248ee:	e7e0      	b.n	248b2 <__aeabi_i2f+0x2a>
   248f0:	2200      	movs	r2, #0
   248f2:	2300      	movs	r3, #0
   248f4:	2400      	movs	r4, #0
   248f6:	e7dc      	b.n	248b2 <__aeabi_i2f+0x2a>
   248f8:	2205      	movs	r2, #5
   248fa:	0021      	movs	r1, r4
   248fc:	1a12      	subs	r2, r2, r0
   248fe:	40d1      	lsrs	r1, r2
   24900:	22b9      	movs	r2, #185	; 0xb9
   24902:	1ad2      	subs	r2, r2, r3
   24904:	4094      	lsls	r4, r2
   24906:	1e62      	subs	r2, r4, #1
   24908:	4194      	sbcs	r4, r2
   2490a:	430c      	orrs	r4, r1
   2490c:	e7da      	b.n	248c4 <__aeabi_i2f+0x3c>
   2490e:	4b05      	ldr	r3, [pc, #20]	; (24924 <__aeabi_i2f+0x9c>)
   24910:	002a      	movs	r2, r5
   24912:	401c      	ands	r4, r3
   24914:	239f      	movs	r3, #159	; 0x9f
   24916:	01a4      	lsls	r4, r4, #6
   24918:	1a1b      	subs	r3, r3, r0
   2491a:	0a64      	lsrs	r4, r4, #9
   2491c:	b2db      	uxtb	r3, r3
   2491e:	e7c8      	b.n	248b2 <__aeabi_i2f+0x2a>
   24920:	0022      	movs	r2, r4
   24922:	e7d5      	b.n	248d0 <__aeabi_i2f+0x48>
   24924:	fbffffff 	.word	0xfbffffff

00024928 <__aeabi_dadd>:
   24928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2492a:	4645      	mov	r5, r8
   2492c:	46de      	mov	lr, fp
   2492e:	4657      	mov	r7, sl
   24930:	464e      	mov	r6, r9
   24932:	030c      	lsls	r4, r1, #12
   24934:	b5e0      	push	{r5, r6, r7, lr}
   24936:	004e      	lsls	r6, r1, #1
   24938:	0fc9      	lsrs	r1, r1, #31
   2493a:	4688      	mov	r8, r1
   2493c:	000d      	movs	r5, r1
   2493e:	0a61      	lsrs	r1, r4, #9
   24940:	0f44      	lsrs	r4, r0, #29
   24942:	430c      	orrs	r4, r1
   24944:	00c7      	lsls	r7, r0, #3
   24946:	0319      	lsls	r1, r3, #12
   24948:	0058      	lsls	r0, r3, #1
   2494a:	0fdb      	lsrs	r3, r3, #31
   2494c:	469b      	mov	fp, r3
   2494e:	0a4b      	lsrs	r3, r1, #9
   24950:	0f51      	lsrs	r1, r2, #29
   24952:	430b      	orrs	r3, r1
   24954:	0d76      	lsrs	r6, r6, #21
   24956:	0d40      	lsrs	r0, r0, #21
   24958:	0019      	movs	r1, r3
   2495a:	00d2      	lsls	r2, r2, #3
   2495c:	45d8      	cmp	r8, fp
   2495e:	d100      	bne.n	24962 <__aeabi_dadd+0x3a>
   24960:	e0ae      	b.n	24ac0 <__aeabi_dadd+0x198>
   24962:	1a35      	subs	r5, r6, r0
   24964:	2d00      	cmp	r5, #0
   24966:	dc00      	bgt.n	2496a <__aeabi_dadd+0x42>
   24968:	e0f6      	b.n	24b58 <__aeabi_dadd+0x230>
   2496a:	2800      	cmp	r0, #0
   2496c:	d10f      	bne.n	2498e <__aeabi_dadd+0x66>
   2496e:	4313      	orrs	r3, r2
   24970:	d100      	bne.n	24974 <__aeabi_dadd+0x4c>
   24972:	e0db      	b.n	24b2c <__aeabi_dadd+0x204>
   24974:	1e6b      	subs	r3, r5, #1
   24976:	2b00      	cmp	r3, #0
   24978:	d000      	beq.n	2497c <__aeabi_dadd+0x54>
   2497a:	e137      	b.n	24bec <__aeabi_dadd+0x2c4>
   2497c:	1aba      	subs	r2, r7, r2
   2497e:	4297      	cmp	r7, r2
   24980:	41bf      	sbcs	r7, r7
   24982:	1a64      	subs	r4, r4, r1
   24984:	427f      	negs	r7, r7
   24986:	1be4      	subs	r4, r4, r7
   24988:	2601      	movs	r6, #1
   2498a:	0017      	movs	r7, r2
   2498c:	e024      	b.n	249d8 <__aeabi_dadd+0xb0>
   2498e:	4bc6      	ldr	r3, [pc, #792]	; (24ca8 <__aeabi_dadd+0x380>)
   24990:	429e      	cmp	r6, r3
   24992:	d04d      	beq.n	24a30 <__aeabi_dadd+0x108>
   24994:	2380      	movs	r3, #128	; 0x80
   24996:	041b      	lsls	r3, r3, #16
   24998:	4319      	orrs	r1, r3
   2499a:	2d38      	cmp	r5, #56	; 0x38
   2499c:	dd00      	ble.n	249a0 <__aeabi_dadd+0x78>
   2499e:	e107      	b.n	24bb0 <__aeabi_dadd+0x288>
   249a0:	2d1f      	cmp	r5, #31
   249a2:	dd00      	ble.n	249a6 <__aeabi_dadd+0x7e>
   249a4:	e138      	b.n	24c18 <__aeabi_dadd+0x2f0>
   249a6:	2020      	movs	r0, #32
   249a8:	1b43      	subs	r3, r0, r5
   249aa:	469a      	mov	sl, r3
   249ac:	000b      	movs	r3, r1
   249ae:	4650      	mov	r0, sl
   249b0:	4083      	lsls	r3, r0
   249b2:	4699      	mov	r9, r3
   249b4:	0013      	movs	r3, r2
   249b6:	4648      	mov	r0, r9
   249b8:	40eb      	lsrs	r3, r5
   249ba:	4318      	orrs	r0, r3
   249bc:	0003      	movs	r3, r0
   249be:	4650      	mov	r0, sl
   249c0:	4082      	lsls	r2, r0
   249c2:	1e50      	subs	r0, r2, #1
   249c4:	4182      	sbcs	r2, r0
   249c6:	40e9      	lsrs	r1, r5
   249c8:	431a      	orrs	r2, r3
   249ca:	1aba      	subs	r2, r7, r2
   249cc:	1a61      	subs	r1, r4, r1
   249ce:	4297      	cmp	r7, r2
   249d0:	41a4      	sbcs	r4, r4
   249d2:	0017      	movs	r7, r2
   249d4:	4264      	negs	r4, r4
   249d6:	1b0c      	subs	r4, r1, r4
   249d8:	0223      	lsls	r3, r4, #8
   249da:	d562      	bpl.n	24aa2 <__aeabi_dadd+0x17a>
   249dc:	0264      	lsls	r4, r4, #9
   249de:	0a65      	lsrs	r5, r4, #9
   249e0:	2d00      	cmp	r5, #0
   249e2:	d100      	bne.n	249e6 <__aeabi_dadd+0xbe>
   249e4:	e0df      	b.n	24ba6 <__aeabi_dadd+0x27e>
   249e6:	0028      	movs	r0, r5
   249e8:	f001 fbe4 	bl	261b4 <__clzsi2>
   249ec:	0003      	movs	r3, r0
   249ee:	3b08      	subs	r3, #8
   249f0:	2b1f      	cmp	r3, #31
   249f2:	dd00      	ble.n	249f6 <__aeabi_dadd+0xce>
   249f4:	e0d2      	b.n	24b9c <__aeabi_dadd+0x274>
   249f6:	2220      	movs	r2, #32
   249f8:	003c      	movs	r4, r7
   249fa:	1ad2      	subs	r2, r2, r3
   249fc:	409d      	lsls	r5, r3
   249fe:	40d4      	lsrs	r4, r2
   24a00:	409f      	lsls	r7, r3
   24a02:	4325      	orrs	r5, r4
   24a04:	429e      	cmp	r6, r3
   24a06:	dd00      	ble.n	24a0a <__aeabi_dadd+0xe2>
   24a08:	e0c4      	b.n	24b94 <__aeabi_dadd+0x26c>
   24a0a:	1b9e      	subs	r6, r3, r6
   24a0c:	1c73      	adds	r3, r6, #1
   24a0e:	2b1f      	cmp	r3, #31
   24a10:	dd00      	ble.n	24a14 <__aeabi_dadd+0xec>
   24a12:	e0f1      	b.n	24bf8 <__aeabi_dadd+0x2d0>
   24a14:	2220      	movs	r2, #32
   24a16:	0038      	movs	r0, r7
   24a18:	0029      	movs	r1, r5
   24a1a:	1ad2      	subs	r2, r2, r3
   24a1c:	40d8      	lsrs	r0, r3
   24a1e:	4091      	lsls	r1, r2
   24a20:	4097      	lsls	r7, r2
   24a22:	002c      	movs	r4, r5
   24a24:	4301      	orrs	r1, r0
   24a26:	1e78      	subs	r0, r7, #1
   24a28:	4187      	sbcs	r7, r0
   24a2a:	40dc      	lsrs	r4, r3
   24a2c:	2600      	movs	r6, #0
   24a2e:	430f      	orrs	r7, r1
   24a30:	077b      	lsls	r3, r7, #29
   24a32:	d009      	beq.n	24a48 <__aeabi_dadd+0x120>
   24a34:	230f      	movs	r3, #15
   24a36:	403b      	ands	r3, r7
   24a38:	2b04      	cmp	r3, #4
   24a3a:	d005      	beq.n	24a48 <__aeabi_dadd+0x120>
   24a3c:	1d3b      	adds	r3, r7, #4
   24a3e:	42bb      	cmp	r3, r7
   24a40:	41bf      	sbcs	r7, r7
   24a42:	427f      	negs	r7, r7
   24a44:	19e4      	adds	r4, r4, r7
   24a46:	001f      	movs	r7, r3
   24a48:	0223      	lsls	r3, r4, #8
   24a4a:	d52c      	bpl.n	24aa6 <__aeabi_dadd+0x17e>
   24a4c:	4b96      	ldr	r3, [pc, #600]	; (24ca8 <__aeabi_dadd+0x380>)
   24a4e:	3601      	adds	r6, #1
   24a50:	429e      	cmp	r6, r3
   24a52:	d100      	bne.n	24a56 <__aeabi_dadd+0x12e>
   24a54:	e09a      	b.n	24b8c <__aeabi_dadd+0x264>
   24a56:	4645      	mov	r5, r8
   24a58:	4b94      	ldr	r3, [pc, #592]	; (24cac <__aeabi_dadd+0x384>)
   24a5a:	08ff      	lsrs	r7, r7, #3
   24a5c:	401c      	ands	r4, r3
   24a5e:	0760      	lsls	r0, r4, #29
   24a60:	0576      	lsls	r6, r6, #21
   24a62:	0264      	lsls	r4, r4, #9
   24a64:	4307      	orrs	r7, r0
   24a66:	0b24      	lsrs	r4, r4, #12
   24a68:	0d76      	lsrs	r6, r6, #21
   24a6a:	2100      	movs	r1, #0
   24a6c:	0324      	lsls	r4, r4, #12
   24a6e:	0b23      	lsrs	r3, r4, #12
   24a70:	0d0c      	lsrs	r4, r1, #20
   24a72:	4a8f      	ldr	r2, [pc, #572]	; (24cb0 <__aeabi_dadd+0x388>)
   24a74:	0524      	lsls	r4, r4, #20
   24a76:	431c      	orrs	r4, r3
   24a78:	4014      	ands	r4, r2
   24a7a:	0533      	lsls	r3, r6, #20
   24a7c:	4323      	orrs	r3, r4
   24a7e:	005b      	lsls	r3, r3, #1
   24a80:	07ed      	lsls	r5, r5, #31
   24a82:	085b      	lsrs	r3, r3, #1
   24a84:	432b      	orrs	r3, r5
   24a86:	0038      	movs	r0, r7
   24a88:	0019      	movs	r1, r3
   24a8a:	bc3c      	pop	{r2, r3, r4, r5}
   24a8c:	4690      	mov	r8, r2
   24a8e:	4699      	mov	r9, r3
   24a90:	46a2      	mov	sl, r4
   24a92:	46ab      	mov	fp, r5
   24a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a96:	4664      	mov	r4, ip
   24a98:	4304      	orrs	r4, r0
   24a9a:	d100      	bne.n	24a9e <__aeabi_dadd+0x176>
   24a9c:	e211      	b.n	24ec2 <__aeabi_dadd+0x59a>
   24a9e:	0004      	movs	r4, r0
   24aa0:	4667      	mov	r7, ip
   24aa2:	077b      	lsls	r3, r7, #29
   24aa4:	d1c6      	bne.n	24a34 <__aeabi_dadd+0x10c>
   24aa6:	4645      	mov	r5, r8
   24aa8:	0760      	lsls	r0, r4, #29
   24aaa:	08ff      	lsrs	r7, r7, #3
   24aac:	4307      	orrs	r7, r0
   24aae:	08e4      	lsrs	r4, r4, #3
   24ab0:	4b7d      	ldr	r3, [pc, #500]	; (24ca8 <__aeabi_dadd+0x380>)
   24ab2:	429e      	cmp	r6, r3
   24ab4:	d030      	beq.n	24b18 <__aeabi_dadd+0x1f0>
   24ab6:	0324      	lsls	r4, r4, #12
   24ab8:	0576      	lsls	r6, r6, #21
   24aba:	0b24      	lsrs	r4, r4, #12
   24abc:	0d76      	lsrs	r6, r6, #21
   24abe:	e7d4      	b.n	24a6a <__aeabi_dadd+0x142>
   24ac0:	1a33      	subs	r3, r6, r0
   24ac2:	469a      	mov	sl, r3
   24ac4:	2b00      	cmp	r3, #0
   24ac6:	dd78      	ble.n	24bba <__aeabi_dadd+0x292>
   24ac8:	2800      	cmp	r0, #0
   24aca:	d031      	beq.n	24b30 <__aeabi_dadd+0x208>
   24acc:	4876      	ldr	r0, [pc, #472]	; (24ca8 <__aeabi_dadd+0x380>)
   24ace:	4286      	cmp	r6, r0
   24ad0:	d0ae      	beq.n	24a30 <__aeabi_dadd+0x108>
   24ad2:	2080      	movs	r0, #128	; 0x80
   24ad4:	0400      	lsls	r0, r0, #16
   24ad6:	4301      	orrs	r1, r0
   24ad8:	4653      	mov	r3, sl
   24ada:	2b38      	cmp	r3, #56	; 0x38
   24adc:	dc00      	bgt.n	24ae0 <__aeabi_dadd+0x1b8>
   24ade:	e0e9      	b.n	24cb4 <__aeabi_dadd+0x38c>
   24ae0:	430a      	orrs	r2, r1
   24ae2:	1e51      	subs	r1, r2, #1
   24ae4:	418a      	sbcs	r2, r1
   24ae6:	2100      	movs	r1, #0
   24ae8:	19d2      	adds	r2, r2, r7
   24aea:	42ba      	cmp	r2, r7
   24aec:	41bf      	sbcs	r7, r7
   24aee:	1909      	adds	r1, r1, r4
   24af0:	427c      	negs	r4, r7
   24af2:	0017      	movs	r7, r2
   24af4:	190c      	adds	r4, r1, r4
   24af6:	0223      	lsls	r3, r4, #8
   24af8:	d5d3      	bpl.n	24aa2 <__aeabi_dadd+0x17a>
   24afa:	4b6b      	ldr	r3, [pc, #428]	; (24ca8 <__aeabi_dadd+0x380>)
   24afc:	3601      	adds	r6, #1
   24afe:	429e      	cmp	r6, r3
   24b00:	d100      	bne.n	24b04 <__aeabi_dadd+0x1dc>
   24b02:	e13a      	b.n	24d7a <__aeabi_dadd+0x452>
   24b04:	2001      	movs	r0, #1
   24b06:	4b69      	ldr	r3, [pc, #420]	; (24cac <__aeabi_dadd+0x384>)
   24b08:	401c      	ands	r4, r3
   24b0a:	087b      	lsrs	r3, r7, #1
   24b0c:	4007      	ands	r7, r0
   24b0e:	431f      	orrs	r7, r3
   24b10:	07e0      	lsls	r0, r4, #31
   24b12:	4307      	orrs	r7, r0
   24b14:	0864      	lsrs	r4, r4, #1
   24b16:	e78b      	b.n	24a30 <__aeabi_dadd+0x108>
   24b18:	0023      	movs	r3, r4
   24b1a:	433b      	orrs	r3, r7
   24b1c:	d100      	bne.n	24b20 <__aeabi_dadd+0x1f8>
   24b1e:	e1cb      	b.n	24eb8 <__aeabi_dadd+0x590>
   24b20:	2280      	movs	r2, #128	; 0x80
   24b22:	0312      	lsls	r2, r2, #12
   24b24:	4314      	orrs	r4, r2
   24b26:	0324      	lsls	r4, r4, #12
   24b28:	0b24      	lsrs	r4, r4, #12
   24b2a:	e79e      	b.n	24a6a <__aeabi_dadd+0x142>
   24b2c:	002e      	movs	r6, r5
   24b2e:	e77f      	b.n	24a30 <__aeabi_dadd+0x108>
   24b30:	0008      	movs	r0, r1
   24b32:	4310      	orrs	r0, r2
   24b34:	d100      	bne.n	24b38 <__aeabi_dadd+0x210>
   24b36:	e0b4      	b.n	24ca2 <__aeabi_dadd+0x37a>
   24b38:	1e58      	subs	r0, r3, #1
   24b3a:	2800      	cmp	r0, #0
   24b3c:	d000      	beq.n	24b40 <__aeabi_dadd+0x218>
   24b3e:	e0de      	b.n	24cfe <__aeabi_dadd+0x3d6>
   24b40:	18ba      	adds	r2, r7, r2
   24b42:	42ba      	cmp	r2, r7
   24b44:	419b      	sbcs	r3, r3
   24b46:	1864      	adds	r4, r4, r1
   24b48:	425b      	negs	r3, r3
   24b4a:	18e4      	adds	r4, r4, r3
   24b4c:	0017      	movs	r7, r2
   24b4e:	2601      	movs	r6, #1
   24b50:	0223      	lsls	r3, r4, #8
   24b52:	d5a6      	bpl.n	24aa2 <__aeabi_dadd+0x17a>
   24b54:	2602      	movs	r6, #2
   24b56:	e7d5      	b.n	24b04 <__aeabi_dadd+0x1dc>
   24b58:	2d00      	cmp	r5, #0
   24b5a:	d16e      	bne.n	24c3a <__aeabi_dadd+0x312>
   24b5c:	1c70      	adds	r0, r6, #1
   24b5e:	0540      	lsls	r0, r0, #21
   24b60:	0d40      	lsrs	r0, r0, #21
   24b62:	2801      	cmp	r0, #1
   24b64:	dc00      	bgt.n	24b68 <__aeabi_dadd+0x240>
   24b66:	e0f9      	b.n	24d5c <__aeabi_dadd+0x434>
   24b68:	1ab8      	subs	r0, r7, r2
   24b6a:	4684      	mov	ip, r0
   24b6c:	4287      	cmp	r7, r0
   24b6e:	4180      	sbcs	r0, r0
   24b70:	1ae5      	subs	r5, r4, r3
   24b72:	4240      	negs	r0, r0
   24b74:	1a2d      	subs	r5, r5, r0
   24b76:	0228      	lsls	r0, r5, #8
   24b78:	d400      	bmi.n	24b7c <__aeabi_dadd+0x254>
   24b7a:	e089      	b.n	24c90 <__aeabi_dadd+0x368>
   24b7c:	1bd7      	subs	r7, r2, r7
   24b7e:	42ba      	cmp	r2, r7
   24b80:	4192      	sbcs	r2, r2
   24b82:	1b1c      	subs	r4, r3, r4
   24b84:	4252      	negs	r2, r2
   24b86:	1aa5      	subs	r5, r4, r2
   24b88:	46d8      	mov	r8, fp
   24b8a:	e729      	b.n	249e0 <__aeabi_dadd+0xb8>
   24b8c:	4645      	mov	r5, r8
   24b8e:	2400      	movs	r4, #0
   24b90:	2700      	movs	r7, #0
   24b92:	e76a      	b.n	24a6a <__aeabi_dadd+0x142>
   24b94:	4c45      	ldr	r4, [pc, #276]	; (24cac <__aeabi_dadd+0x384>)
   24b96:	1af6      	subs	r6, r6, r3
   24b98:	402c      	ands	r4, r5
   24b9a:	e749      	b.n	24a30 <__aeabi_dadd+0x108>
   24b9c:	003d      	movs	r5, r7
   24b9e:	3828      	subs	r0, #40	; 0x28
   24ba0:	4085      	lsls	r5, r0
   24ba2:	2700      	movs	r7, #0
   24ba4:	e72e      	b.n	24a04 <__aeabi_dadd+0xdc>
   24ba6:	0038      	movs	r0, r7
   24ba8:	f001 fb04 	bl	261b4 <__clzsi2>
   24bac:	3020      	adds	r0, #32
   24bae:	e71d      	b.n	249ec <__aeabi_dadd+0xc4>
   24bb0:	430a      	orrs	r2, r1
   24bb2:	1e51      	subs	r1, r2, #1
   24bb4:	418a      	sbcs	r2, r1
   24bb6:	2100      	movs	r1, #0
   24bb8:	e707      	b.n	249ca <__aeabi_dadd+0xa2>
   24bba:	2b00      	cmp	r3, #0
   24bbc:	d000      	beq.n	24bc0 <__aeabi_dadd+0x298>
   24bbe:	e0f3      	b.n	24da8 <__aeabi_dadd+0x480>
   24bc0:	1c70      	adds	r0, r6, #1
   24bc2:	0543      	lsls	r3, r0, #21
   24bc4:	0d5b      	lsrs	r3, r3, #21
   24bc6:	2b01      	cmp	r3, #1
   24bc8:	dc00      	bgt.n	24bcc <__aeabi_dadd+0x2a4>
   24bca:	e0ad      	b.n	24d28 <__aeabi_dadd+0x400>
   24bcc:	4b36      	ldr	r3, [pc, #216]	; (24ca8 <__aeabi_dadd+0x380>)
   24bce:	4298      	cmp	r0, r3
   24bd0:	d100      	bne.n	24bd4 <__aeabi_dadd+0x2ac>
   24bd2:	e0d1      	b.n	24d78 <__aeabi_dadd+0x450>
   24bd4:	18ba      	adds	r2, r7, r2
   24bd6:	42ba      	cmp	r2, r7
   24bd8:	41bf      	sbcs	r7, r7
   24bda:	1864      	adds	r4, r4, r1
   24bdc:	427f      	negs	r7, r7
   24bde:	19e4      	adds	r4, r4, r7
   24be0:	07e7      	lsls	r7, r4, #31
   24be2:	0852      	lsrs	r2, r2, #1
   24be4:	4317      	orrs	r7, r2
   24be6:	0864      	lsrs	r4, r4, #1
   24be8:	0006      	movs	r6, r0
   24bea:	e721      	b.n	24a30 <__aeabi_dadd+0x108>
   24bec:	482e      	ldr	r0, [pc, #184]	; (24ca8 <__aeabi_dadd+0x380>)
   24bee:	4285      	cmp	r5, r0
   24bf0:	d100      	bne.n	24bf4 <__aeabi_dadd+0x2cc>
   24bf2:	e093      	b.n	24d1c <__aeabi_dadd+0x3f4>
   24bf4:	001d      	movs	r5, r3
   24bf6:	e6d0      	b.n	2499a <__aeabi_dadd+0x72>
   24bf8:	0029      	movs	r1, r5
   24bfa:	3e1f      	subs	r6, #31
   24bfc:	40f1      	lsrs	r1, r6
   24bfe:	2b20      	cmp	r3, #32
   24c00:	d100      	bne.n	24c04 <__aeabi_dadd+0x2dc>
   24c02:	e08d      	b.n	24d20 <__aeabi_dadd+0x3f8>
   24c04:	2240      	movs	r2, #64	; 0x40
   24c06:	1ad3      	subs	r3, r2, r3
   24c08:	409d      	lsls	r5, r3
   24c0a:	432f      	orrs	r7, r5
   24c0c:	1e7d      	subs	r5, r7, #1
   24c0e:	41af      	sbcs	r7, r5
   24c10:	2400      	movs	r4, #0
   24c12:	430f      	orrs	r7, r1
   24c14:	2600      	movs	r6, #0
   24c16:	e744      	b.n	24aa2 <__aeabi_dadd+0x17a>
   24c18:	002b      	movs	r3, r5
   24c1a:	0008      	movs	r0, r1
   24c1c:	3b20      	subs	r3, #32
   24c1e:	40d8      	lsrs	r0, r3
   24c20:	0003      	movs	r3, r0
   24c22:	2d20      	cmp	r5, #32
   24c24:	d100      	bne.n	24c28 <__aeabi_dadd+0x300>
   24c26:	e07d      	b.n	24d24 <__aeabi_dadd+0x3fc>
   24c28:	2040      	movs	r0, #64	; 0x40
   24c2a:	1b45      	subs	r5, r0, r5
   24c2c:	40a9      	lsls	r1, r5
   24c2e:	430a      	orrs	r2, r1
   24c30:	1e51      	subs	r1, r2, #1
   24c32:	418a      	sbcs	r2, r1
   24c34:	2100      	movs	r1, #0
   24c36:	431a      	orrs	r2, r3
   24c38:	e6c7      	b.n	249ca <__aeabi_dadd+0xa2>
   24c3a:	2e00      	cmp	r6, #0
   24c3c:	d050      	beq.n	24ce0 <__aeabi_dadd+0x3b8>
   24c3e:	4e1a      	ldr	r6, [pc, #104]	; (24ca8 <__aeabi_dadd+0x380>)
   24c40:	42b0      	cmp	r0, r6
   24c42:	d057      	beq.n	24cf4 <__aeabi_dadd+0x3cc>
   24c44:	2680      	movs	r6, #128	; 0x80
   24c46:	426b      	negs	r3, r5
   24c48:	4699      	mov	r9, r3
   24c4a:	0436      	lsls	r6, r6, #16
   24c4c:	4334      	orrs	r4, r6
   24c4e:	464b      	mov	r3, r9
   24c50:	2b38      	cmp	r3, #56	; 0x38
   24c52:	dd00      	ble.n	24c56 <__aeabi_dadd+0x32e>
   24c54:	e0d6      	b.n	24e04 <__aeabi_dadd+0x4dc>
   24c56:	2b1f      	cmp	r3, #31
   24c58:	dd00      	ble.n	24c5c <__aeabi_dadd+0x334>
   24c5a:	e135      	b.n	24ec8 <__aeabi_dadd+0x5a0>
   24c5c:	2620      	movs	r6, #32
   24c5e:	1af5      	subs	r5, r6, r3
   24c60:	0026      	movs	r6, r4
   24c62:	40ae      	lsls	r6, r5
   24c64:	46b2      	mov	sl, r6
   24c66:	003e      	movs	r6, r7
   24c68:	40de      	lsrs	r6, r3
   24c6a:	46ac      	mov	ip, r5
   24c6c:	0035      	movs	r5, r6
   24c6e:	4656      	mov	r6, sl
   24c70:	432e      	orrs	r6, r5
   24c72:	4665      	mov	r5, ip
   24c74:	40af      	lsls	r7, r5
   24c76:	1e7d      	subs	r5, r7, #1
   24c78:	41af      	sbcs	r7, r5
   24c7a:	40dc      	lsrs	r4, r3
   24c7c:	4337      	orrs	r7, r6
   24c7e:	1bd7      	subs	r7, r2, r7
   24c80:	42ba      	cmp	r2, r7
   24c82:	4192      	sbcs	r2, r2
   24c84:	1b0c      	subs	r4, r1, r4
   24c86:	4252      	negs	r2, r2
   24c88:	1aa4      	subs	r4, r4, r2
   24c8a:	0006      	movs	r6, r0
   24c8c:	46d8      	mov	r8, fp
   24c8e:	e6a3      	b.n	249d8 <__aeabi_dadd+0xb0>
   24c90:	4664      	mov	r4, ip
   24c92:	4667      	mov	r7, ip
   24c94:	432c      	orrs	r4, r5
   24c96:	d000      	beq.n	24c9a <__aeabi_dadd+0x372>
   24c98:	e6a2      	b.n	249e0 <__aeabi_dadd+0xb8>
   24c9a:	2500      	movs	r5, #0
   24c9c:	2600      	movs	r6, #0
   24c9e:	2700      	movs	r7, #0
   24ca0:	e706      	b.n	24ab0 <__aeabi_dadd+0x188>
   24ca2:	001e      	movs	r6, r3
   24ca4:	e6c4      	b.n	24a30 <__aeabi_dadd+0x108>
   24ca6:	46c0      	nop			; (mov r8, r8)
   24ca8:	000007ff 	.word	0x000007ff
   24cac:	ff7fffff 	.word	0xff7fffff
   24cb0:	800fffff 	.word	0x800fffff
   24cb4:	2b1f      	cmp	r3, #31
   24cb6:	dc63      	bgt.n	24d80 <__aeabi_dadd+0x458>
   24cb8:	2020      	movs	r0, #32
   24cba:	1ac3      	subs	r3, r0, r3
   24cbc:	0008      	movs	r0, r1
   24cbe:	4098      	lsls	r0, r3
   24cc0:	469c      	mov	ip, r3
   24cc2:	4683      	mov	fp, r0
   24cc4:	4653      	mov	r3, sl
   24cc6:	0010      	movs	r0, r2
   24cc8:	40d8      	lsrs	r0, r3
   24cca:	0003      	movs	r3, r0
   24ccc:	4658      	mov	r0, fp
   24cce:	4318      	orrs	r0, r3
   24cd0:	4663      	mov	r3, ip
   24cd2:	409a      	lsls	r2, r3
   24cd4:	1e53      	subs	r3, r2, #1
   24cd6:	419a      	sbcs	r2, r3
   24cd8:	4653      	mov	r3, sl
   24cda:	4302      	orrs	r2, r0
   24cdc:	40d9      	lsrs	r1, r3
   24cde:	e703      	b.n	24ae8 <__aeabi_dadd+0x1c0>
   24ce0:	0026      	movs	r6, r4
   24ce2:	433e      	orrs	r6, r7
   24ce4:	d006      	beq.n	24cf4 <__aeabi_dadd+0x3cc>
   24ce6:	43eb      	mvns	r3, r5
   24ce8:	4699      	mov	r9, r3
   24cea:	2b00      	cmp	r3, #0
   24cec:	d0c7      	beq.n	24c7e <__aeabi_dadd+0x356>
   24cee:	4e94      	ldr	r6, [pc, #592]	; (24f40 <__aeabi_dadd+0x618>)
   24cf0:	42b0      	cmp	r0, r6
   24cf2:	d1ac      	bne.n	24c4e <__aeabi_dadd+0x326>
   24cf4:	000c      	movs	r4, r1
   24cf6:	0017      	movs	r7, r2
   24cf8:	0006      	movs	r6, r0
   24cfa:	46d8      	mov	r8, fp
   24cfc:	e698      	b.n	24a30 <__aeabi_dadd+0x108>
   24cfe:	4b90      	ldr	r3, [pc, #576]	; (24f40 <__aeabi_dadd+0x618>)
   24d00:	459a      	cmp	sl, r3
   24d02:	d00b      	beq.n	24d1c <__aeabi_dadd+0x3f4>
   24d04:	4682      	mov	sl, r0
   24d06:	e6e7      	b.n	24ad8 <__aeabi_dadd+0x1b0>
   24d08:	2800      	cmp	r0, #0
   24d0a:	d000      	beq.n	24d0e <__aeabi_dadd+0x3e6>
   24d0c:	e09e      	b.n	24e4c <__aeabi_dadd+0x524>
   24d0e:	0018      	movs	r0, r3
   24d10:	4310      	orrs	r0, r2
   24d12:	d100      	bne.n	24d16 <__aeabi_dadd+0x3ee>
   24d14:	e0e9      	b.n	24eea <__aeabi_dadd+0x5c2>
   24d16:	001c      	movs	r4, r3
   24d18:	0017      	movs	r7, r2
   24d1a:	46d8      	mov	r8, fp
   24d1c:	4e88      	ldr	r6, [pc, #544]	; (24f40 <__aeabi_dadd+0x618>)
   24d1e:	e687      	b.n	24a30 <__aeabi_dadd+0x108>
   24d20:	2500      	movs	r5, #0
   24d22:	e772      	b.n	24c0a <__aeabi_dadd+0x2e2>
   24d24:	2100      	movs	r1, #0
   24d26:	e782      	b.n	24c2e <__aeabi_dadd+0x306>
   24d28:	0023      	movs	r3, r4
   24d2a:	433b      	orrs	r3, r7
   24d2c:	2e00      	cmp	r6, #0
   24d2e:	d000      	beq.n	24d32 <__aeabi_dadd+0x40a>
   24d30:	e0ab      	b.n	24e8a <__aeabi_dadd+0x562>
   24d32:	2b00      	cmp	r3, #0
   24d34:	d100      	bne.n	24d38 <__aeabi_dadd+0x410>
   24d36:	e0e7      	b.n	24f08 <__aeabi_dadd+0x5e0>
   24d38:	000b      	movs	r3, r1
   24d3a:	4313      	orrs	r3, r2
   24d3c:	d100      	bne.n	24d40 <__aeabi_dadd+0x418>
   24d3e:	e677      	b.n	24a30 <__aeabi_dadd+0x108>
   24d40:	18ba      	adds	r2, r7, r2
   24d42:	42ba      	cmp	r2, r7
   24d44:	41bf      	sbcs	r7, r7
   24d46:	1864      	adds	r4, r4, r1
   24d48:	427f      	negs	r7, r7
   24d4a:	19e4      	adds	r4, r4, r7
   24d4c:	0223      	lsls	r3, r4, #8
   24d4e:	d400      	bmi.n	24d52 <__aeabi_dadd+0x42a>
   24d50:	e0f2      	b.n	24f38 <__aeabi_dadd+0x610>
   24d52:	4b7c      	ldr	r3, [pc, #496]	; (24f44 <__aeabi_dadd+0x61c>)
   24d54:	0017      	movs	r7, r2
   24d56:	401c      	ands	r4, r3
   24d58:	0006      	movs	r6, r0
   24d5a:	e669      	b.n	24a30 <__aeabi_dadd+0x108>
   24d5c:	0020      	movs	r0, r4
   24d5e:	4338      	orrs	r0, r7
   24d60:	2e00      	cmp	r6, #0
   24d62:	d1d1      	bne.n	24d08 <__aeabi_dadd+0x3e0>
   24d64:	2800      	cmp	r0, #0
   24d66:	d15b      	bne.n	24e20 <__aeabi_dadd+0x4f8>
   24d68:	001c      	movs	r4, r3
   24d6a:	4314      	orrs	r4, r2
   24d6c:	d100      	bne.n	24d70 <__aeabi_dadd+0x448>
   24d6e:	e0a8      	b.n	24ec2 <__aeabi_dadd+0x59a>
   24d70:	001c      	movs	r4, r3
   24d72:	0017      	movs	r7, r2
   24d74:	46d8      	mov	r8, fp
   24d76:	e65b      	b.n	24a30 <__aeabi_dadd+0x108>
   24d78:	0006      	movs	r6, r0
   24d7a:	2400      	movs	r4, #0
   24d7c:	2700      	movs	r7, #0
   24d7e:	e697      	b.n	24ab0 <__aeabi_dadd+0x188>
   24d80:	4650      	mov	r0, sl
   24d82:	000b      	movs	r3, r1
   24d84:	3820      	subs	r0, #32
   24d86:	40c3      	lsrs	r3, r0
   24d88:	4699      	mov	r9, r3
   24d8a:	4653      	mov	r3, sl
   24d8c:	2b20      	cmp	r3, #32
   24d8e:	d100      	bne.n	24d92 <__aeabi_dadd+0x46a>
   24d90:	e095      	b.n	24ebe <__aeabi_dadd+0x596>
   24d92:	2340      	movs	r3, #64	; 0x40
   24d94:	4650      	mov	r0, sl
   24d96:	1a1b      	subs	r3, r3, r0
   24d98:	4099      	lsls	r1, r3
   24d9a:	430a      	orrs	r2, r1
   24d9c:	1e51      	subs	r1, r2, #1
   24d9e:	418a      	sbcs	r2, r1
   24da0:	464b      	mov	r3, r9
   24da2:	2100      	movs	r1, #0
   24da4:	431a      	orrs	r2, r3
   24da6:	e69f      	b.n	24ae8 <__aeabi_dadd+0x1c0>
   24da8:	2e00      	cmp	r6, #0
   24daa:	d130      	bne.n	24e0e <__aeabi_dadd+0x4e6>
   24dac:	0026      	movs	r6, r4
   24dae:	433e      	orrs	r6, r7
   24db0:	d067      	beq.n	24e82 <__aeabi_dadd+0x55a>
   24db2:	43db      	mvns	r3, r3
   24db4:	469a      	mov	sl, r3
   24db6:	2b00      	cmp	r3, #0
   24db8:	d01c      	beq.n	24df4 <__aeabi_dadd+0x4cc>
   24dba:	4e61      	ldr	r6, [pc, #388]	; (24f40 <__aeabi_dadd+0x618>)
   24dbc:	42b0      	cmp	r0, r6
   24dbe:	d060      	beq.n	24e82 <__aeabi_dadd+0x55a>
   24dc0:	4653      	mov	r3, sl
   24dc2:	2b38      	cmp	r3, #56	; 0x38
   24dc4:	dd00      	ble.n	24dc8 <__aeabi_dadd+0x4a0>
   24dc6:	e096      	b.n	24ef6 <__aeabi_dadd+0x5ce>
   24dc8:	2b1f      	cmp	r3, #31
   24dca:	dd00      	ble.n	24dce <__aeabi_dadd+0x4a6>
   24dcc:	e09f      	b.n	24f0e <__aeabi_dadd+0x5e6>
   24dce:	2620      	movs	r6, #32
   24dd0:	1af3      	subs	r3, r6, r3
   24dd2:	0026      	movs	r6, r4
   24dd4:	409e      	lsls	r6, r3
   24dd6:	469c      	mov	ip, r3
   24dd8:	46b3      	mov	fp, r6
   24dda:	4653      	mov	r3, sl
   24ddc:	003e      	movs	r6, r7
   24dde:	40de      	lsrs	r6, r3
   24de0:	0033      	movs	r3, r6
   24de2:	465e      	mov	r6, fp
   24de4:	431e      	orrs	r6, r3
   24de6:	4663      	mov	r3, ip
   24de8:	409f      	lsls	r7, r3
   24dea:	1e7b      	subs	r3, r7, #1
   24dec:	419f      	sbcs	r7, r3
   24dee:	4653      	mov	r3, sl
   24df0:	40dc      	lsrs	r4, r3
   24df2:	4337      	orrs	r7, r6
   24df4:	18bf      	adds	r7, r7, r2
   24df6:	4297      	cmp	r7, r2
   24df8:	4192      	sbcs	r2, r2
   24dfa:	1864      	adds	r4, r4, r1
   24dfc:	4252      	negs	r2, r2
   24dfe:	18a4      	adds	r4, r4, r2
   24e00:	0006      	movs	r6, r0
   24e02:	e678      	b.n	24af6 <__aeabi_dadd+0x1ce>
   24e04:	4327      	orrs	r7, r4
   24e06:	1e7c      	subs	r4, r7, #1
   24e08:	41a7      	sbcs	r7, r4
   24e0a:	2400      	movs	r4, #0
   24e0c:	e737      	b.n	24c7e <__aeabi_dadd+0x356>
   24e0e:	4e4c      	ldr	r6, [pc, #304]	; (24f40 <__aeabi_dadd+0x618>)
   24e10:	42b0      	cmp	r0, r6
   24e12:	d036      	beq.n	24e82 <__aeabi_dadd+0x55a>
   24e14:	2680      	movs	r6, #128	; 0x80
   24e16:	425b      	negs	r3, r3
   24e18:	0436      	lsls	r6, r6, #16
   24e1a:	469a      	mov	sl, r3
   24e1c:	4334      	orrs	r4, r6
   24e1e:	e7cf      	b.n	24dc0 <__aeabi_dadd+0x498>
   24e20:	0018      	movs	r0, r3
   24e22:	4310      	orrs	r0, r2
   24e24:	d100      	bne.n	24e28 <__aeabi_dadd+0x500>
   24e26:	e603      	b.n	24a30 <__aeabi_dadd+0x108>
   24e28:	1ab8      	subs	r0, r7, r2
   24e2a:	4684      	mov	ip, r0
   24e2c:	4567      	cmp	r7, ip
   24e2e:	41ad      	sbcs	r5, r5
   24e30:	1ae0      	subs	r0, r4, r3
   24e32:	426d      	negs	r5, r5
   24e34:	1b40      	subs	r0, r0, r5
   24e36:	0205      	lsls	r5, r0, #8
   24e38:	d400      	bmi.n	24e3c <__aeabi_dadd+0x514>
   24e3a:	e62c      	b.n	24a96 <__aeabi_dadd+0x16e>
   24e3c:	1bd7      	subs	r7, r2, r7
   24e3e:	42ba      	cmp	r2, r7
   24e40:	4192      	sbcs	r2, r2
   24e42:	1b1c      	subs	r4, r3, r4
   24e44:	4252      	negs	r2, r2
   24e46:	1aa4      	subs	r4, r4, r2
   24e48:	46d8      	mov	r8, fp
   24e4a:	e5f1      	b.n	24a30 <__aeabi_dadd+0x108>
   24e4c:	0018      	movs	r0, r3
   24e4e:	4310      	orrs	r0, r2
   24e50:	d100      	bne.n	24e54 <__aeabi_dadd+0x52c>
   24e52:	e763      	b.n	24d1c <__aeabi_dadd+0x3f4>
   24e54:	08f8      	lsrs	r0, r7, #3
   24e56:	0767      	lsls	r7, r4, #29
   24e58:	4307      	orrs	r7, r0
   24e5a:	2080      	movs	r0, #128	; 0x80
   24e5c:	08e4      	lsrs	r4, r4, #3
   24e5e:	0300      	lsls	r0, r0, #12
   24e60:	4204      	tst	r4, r0
   24e62:	d008      	beq.n	24e76 <__aeabi_dadd+0x54e>
   24e64:	08dd      	lsrs	r5, r3, #3
   24e66:	4205      	tst	r5, r0
   24e68:	d105      	bne.n	24e76 <__aeabi_dadd+0x54e>
   24e6a:	08d2      	lsrs	r2, r2, #3
   24e6c:	0759      	lsls	r1, r3, #29
   24e6e:	4311      	orrs	r1, r2
   24e70:	000f      	movs	r7, r1
   24e72:	002c      	movs	r4, r5
   24e74:	46d8      	mov	r8, fp
   24e76:	0f7b      	lsrs	r3, r7, #29
   24e78:	00e4      	lsls	r4, r4, #3
   24e7a:	431c      	orrs	r4, r3
   24e7c:	00ff      	lsls	r7, r7, #3
   24e7e:	4e30      	ldr	r6, [pc, #192]	; (24f40 <__aeabi_dadd+0x618>)
   24e80:	e5d6      	b.n	24a30 <__aeabi_dadd+0x108>
   24e82:	000c      	movs	r4, r1
   24e84:	0017      	movs	r7, r2
   24e86:	0006      	movs	r6, r0
   24e88:	e5d2      	b.n	24a30 <__aeabi_dadd+0x108>
   24e8a:	2b00      	cmp	r3, #0
   24e8c:	d038      	beq.n	24f00 <__aeabi_dadd+0x5d8>
   24e8e:	000b      	movs	r3, r1
   24e90:	4313      	orrs	r3, r2
   24e92:	d100      	bne.n	24e96 <__aeabi_dadd+0x56e>
   24e94:	e742      	b.n	24d1c <__aeabi_dadd+0x3f4>
   24e96:	08f8      	lsrs	r0, r7, #3
   24e98:	0767      	lsls	r7, r4, #29
   24e9a:	4307      	orrs	r7, r0
   24e9c:	2080      	movs	r0, #128	; 0x80
   24e9e:	08e4      	lsrs	r4, r4, #3
   24ea0:	0300      	lsls	r0, r0, #12
   24ea2:	4204      	tst	r4, r0
   24ea4:	d0e7      	beq.n	24e76 <__aeabi_dadd+0x54e>
   24ea6:	08cb      	lsrs	r3, r1, #3
   24ea8:	4203      	tst	r3, r0
   24eaa:	d1e4      	bne.n	24e76 <__aeabi_dadd+0x54e>
   24eac:	08d2      	lsrs	r2, r2, #3
   24eae:	0749      	lsls	r1, r1, #29
   24eb0:	4311      	orrs	r1, r2
   24eb2:	000f      	movs	r7, r1
   24eb4:	001c      	movs	r4, r3
   24eb6:	e7de      	b.n	24e76 <__aeabi_dadd+0x54e>
   24eb8:	2700      	movs	r7, #0
   24eba:	2400      	movs	r4, #0
   24ebc:	e5d5      	b.n	24a6a <__aeabi_dadd+0x142>
   24ebe:	2100      	movs	r1, #0
   24ec0:	e76b      	b.n	24d9a <__aeabi_dadd+0x472>
   24ec2:	2500      	movs	r5, #0
   24ec4:	2700      	movs	r7, #0
   24ec6:	e5f3      	b.n	24ab0 <__aeabi_dadd+0x188>
   24ec8:	464e      	mov	r6, r9
   24eca:	0025      	movs	r5, r4
   24ecc:	3e20      	subs	r6, #32
   24ece:	40f5      	lsrs	r5, r6
   24ed0:	464b      	mov	r3, r9
   24ed2:	002e      	movs	r6, r5
   24ed4:	2b20      	cmp	r3, #32
   24ed6:	d02d      	beq.n	24f34 <__aeabi_dadd+0x60c>
   24ed8:	2540      	movs	r5, #64	; 0x40
   24eda:	1aed      	subs	r5, r5, r3
   24edc:	40ac      	lsls	r4, r5
   24ede:	4327      	orrs	r7, r4
   24ee0:	1e7c      	subs	r4, r7, #1
   24ee2:	41a7      	sbcs	r7, r4
   24ee4:	2400      	movs	r4, #0
   24ee6:	4337      	orrs	r7, r6
   24ee8:	e6c9      	b.n	24c7e <__aeabi_dadd+0x356>
   24eea:	2480      	movs	r4, #128	; 0x80
   24eec:	2500      	movs	r5, #0
   24eee:	0324      	lsls	r4, r4, #12
   24ef0:	4e13      	ldr	r6, [pc, #76]	; (24f40 <__aeabi_dadd+0x618>)
   24ef2:	2700      	movs	r7, #0
   24ef4:	e5dc      	b.n	24ab0 <__aeabi_dadd+0x188>
   24ef6:	4327      	orrs	r7, r4
   24ef8:	1e7c      	subs	r4, r7, #1
   24efa:	41a7      	sbcs	r7, r4
   24efc:	2400      	movs	r4, #0
   24efe:	e779      	b.n	24df4 <__aeabi_dadd+0x4cc>
   24f00:	000c      	movs	r4, r1
   24f02:	0017      	movs	r7, r2
   24f04:	4e0e      	ldr	r6, [pc, #56]	; (24f40 <__aeabi_dadd+0x618>)
   24f06:	e593      	b.n	24a30 <__aeabi_dadd+0x108>
   24f08:	000c      	movs	r4, r1
   24f0a:	0017      	movs	r7, r2
   24f0c:	e590      	b.n	24a30 <__aeabi_dadd+0x108>
   24f0e:	4656      	mov	r6, sl
   24f10:	0023      	movs	r3, r4
   24f12:	3e20      	subs	r6, #32
   24f14:	40f3      	lsrs	r3, r6
   24f16:	4699      	mov	r9, r3
   24f18:	4653      	mov	r3, sl
   24f1a:	2b20      	cmp	r3, #32
   24f1c:	d00e      	beq.n	24f3c <__aeabi_dadd+0x614>
   24f1e:	2340      	movs	r3, #64	; 0x40
   24f20:	4656      	mov	r6, sl
   24f22:	1b9b      	subs	r3, r3, r6
   24f24:	409c      	lsls	r4, r3
   24f26:	4327      	orrs	r7, r4
   24f28:	1e7c      	subs	r4, r7, #1
   24f2a:	41a7      	sbcs	r7, r4
   24f2c:	464b      	mov	r3, r9
   24f2e:	2400      	movs	r4, #0
   24f30:	431f      	orrs	r7, r3
   24f32:	e75f      	b.n	24df4 <__aeabi_dadd+0x4cc>
   24f34:	2400      	movs	r4, #0
   24f36:	e7d2      	b.n	24ede <__aeabi_dadd+0x5b6>
   24f38:	0017      	movs	r7, r2
   24f3a:	e5b2      	b.n	24aa2 <__aeabi_dadd+0x17a>
   24f3c:	2400      	movs	r4, #0
   24f3e:	e7f2      	b.n	24f26 <__aeabi_dadd+0x5fe>
   24f40:	000007ff 	.word	0x000007ff
   24f44:	ff7fffff 	.word	0xff7fffff

00024f48 <__aeabi_ddiv>:
   24f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f4a:	4657      	mov	r7, sl
   24f4c:	4645      	mov	r5, r8
   24f4e:	46de      	mov	lr, fp
   24f50:	464e      	mov	r6, r9
   24f52:	b5e0      	push	{r5, r6, r7, lr}
   24f54:	004c      	lsls	r4, r1, #1
   24f56:	030e      	lsls	r6, r1, #12
   24f58:	b087      	sub	sp, #28
   24f5a:	4683      	mov	fp, r0
   24f5c:	4692      	mov	sl, r2
   24f5e:	001d      	movs	r5, r3
   24f60:	4680      	mov	r8, r0
   24f62:	0b36      	lsrs	r6, r6, #12
   24f64:	0d64      	lsrs	r4, r4, #21
   24f66:	0fcf      	lsrs	r7, r1, #31
   24f68:	2c00      	cmp	r4, #0
   24f6a:	d04f      	beq.n	2500c <__aeabi_ddiv+0xc4>
   24f6c:	4b6f      	ldr	r3, [pc, #444]	; (2512c <__aeabi_ddiv+0x1e4>)
   24f6e:	429c      	cmp	r4, r3
   24f70:	d035      	beq.n	24fde <__aeabi_ddiv+0x96>
   24f72:	2380      	movs	r3, #128	; 0x80
   24f74:	0f42      	lsrs	r2, r0, #29
   24f76:	041b      	lsls	r3, r3, #16
   24f78:	00f6      	lsls	r6, r6, #3
   24f7a:	4313      	orrs	r3, r2
   24f7c:	4333      	orrs	r3, r6
   24f7e:	4699      	mov	r9, r3
   24f80:	00c3      	lsls	r3, r0, #3
   24f82:	4698      	mov	r8, r3
   24f84:	4b6a      	ldr	r3, [pc, #424]	; (25130 <__aeabi_ddiv+0x1e8>)
   24f86:	2600      	movs	r6, #0
   24f88:	469c      	mov	ip, r3
   24f8a:	2300      	movs	r3, #0
   24f8c:	4464      	add	r4, ip
   24f8e:	9303      	str	r3, [sp, #12]
   24f90:	032b      	lsls	r3, r5, #12
   24f92:	0b1b      	lsrs	r3, r3, #12
   24f94:	469b      	mov	fp, r3
   24f96:	006b      	lsls	r3, r5, #1
   24f98:	0fed      	lsrs	r5, r5, #31
   24f9a:	4650      	mov	r0, sl
   24f9c:	0d5b      	lsrs	r3, r3, #21
   24f9e:	9501      	str	r5, [sp, #4]
   24fa0:	d05e      	beq.n	25060 <__aeabi_ddiv+0x118>
   24fa2:	4a62      	ldr	r2, [pc, #392]	; (2512c <__aeabi_ddiv+0x1e4>)
   24fa4:	4293      	cmp	r3, r2
   24fa6:	d053      	beq.n	25050 <__aeabi_ddiv+0x108>
   24fa8:	465a      	mov	r2, fp
   24faa:	00d1      	lsls	r1, r2, #3
   24fac:	2280      	movs	r2, #128	; 0x80
   24fae:	0f40      	lsrs	r0, r0, #29
   24fb0:	0412      	lsls	r2, r2, #16
   24fb2:	4302      	orrs	r2, r0
   24fb4:	430a      	orrs	r2, r1
   24fb6:	4693      	mov	fp, r2
   24fb8:	4652      	mov	r2, sl
   24fba:	00d1      	lsls	r1, r2, #3
   24fbc:	4a5c      	ldr	r2, [pc, #368]	; (25130 <__aeabi_ddiv+0x1e8>)
   24fbe:	4694      	mov	ip, r2
   24fc0:	2200      	movs	r2, #0
   24fc2:	4463      	add	r3, ip
   24fc4:	0038      	movs	r0, r7
   24fc6:	4068      	eors	r0, r5
   24fc8:	4684      	mov	ip, r0
   24fca:	9002      	str	r0, [sp, #8]
   24fcc:	1ae4      	subs	r4, r4, r3
   24fce:	4316      	orrs	r6, r2
   24fd0:	2e0f      	cmp	r6, #15
   24fd2:	d900      	bls.n	24fd6 <__aeabi_ddiv+0x8e>
   24fd4:	e0b4      	b.n	25140 <__aeabi_ddiv+0x1f8>
   24fd6:	4b57      	ldr	r3, [pc, #348]	; (25134 <__aeabi_ddiv+0x1ec>)
   24fd8:	00b6      	lsls	r6, r6, #2
   24fda:	599b      	ldr	r3, [r3, r6]
   24fdc:	469f      	mov	pc, r3
   24fde:	0003      	movs	r3, r0
   24fe0:	4333      	orrs	r3, r6
   24fe2:	4699      	mov	r9, r3
   24fe4:	d16c      	bne.n	250c0 <__aeabi_ddiv+0x178>
   24fe6:	2300      	movs	r3, #0
   24fe8:	4698      	mov	r8, r3
   24fea:	3302      	adds	r3, #2
   24fec:	2608      	movs	r6, #8
   24fee:	9303      	str	r3, [sp, #12]
   24ff0:	e7ce      	b.n	24f90 <__aeabi_ddiv+0x48>
   24ff2:	46cb      	mov	fp, r9
   24ff4:	4641      	mov	r1, r8
   24ff6:	9a03      	ldr	r2, [sp, #12]
   24ff8:	9701      	str	r7, [sp, #4]
   24ffa:	2a02      	cmp	r2, #2
   24ffc:	d165      	bne.n	250ca <__aeabi_ddiv+0x182>
   24ffe:	9b01      	ldr	r3, [sp, #4]
   25000:	4c4a      	ldr	r4, [pc, #296]	; (2512c <__aeabi_ddiv+0x1e4>)
   25002:	469c      	mov	ip, r3
   25004:	2300      	movs	r3, #0
   25006:	2200      	movs	r2, #0
   25008:	4698      	mov	r8, r3
   2500a:	e06b      	b.n	250e4 <__aeabi_ddiv+0x19c>
   2500c:	0003      	movs	r3, r0
   2500e:	4333      	orrs	r3, r6
   25010:	4699      	mov	r9, r3
   25012:	d04e      	beq.n	250b2 <__aeabi_ddiv+0x16a>
   25014:	2e00      	cmp	r6, #0
   25016:	d100      	bne.n	2501a <__aeabi_ddiv+0xd2>
   25018:	e1bc      	b.n	25394 <__aeabi_ddiv+0x44c>
   2501a:	0030      	movs	r0, r6
   2501c:	f001 f8ca 	bl	261b4 <__clzsi2>
   25020:	0003      	movs	r3, r0
   25022:	3b0b      	subs	r3, #11
   25024:	2b1c      	cmp	r3, #28
   25026:	dd00      	ble.n	2502a <__aeabi_ddiv+0xe2>
   25028:	e1ac      	b.n	25384 <__aeabi_ddiv+0x43c>
   2502a:	221d      	movs	r2, #29
   2502c:	1ad3      	subs	r3, r2, r3
   2502e:	465a      	mov	r2, fp
   25030:	0001      	movs	r1, r0
   25032:	40da      	lsrs	r2, r3
   25034:	3908      	subs	r1, #8
   25036:	408e      	lsls	r6, r1
   25038:	0013      	movs	r3, r2
   2503a:	4333      	orrs	r3, r6
   2503c:	4699      	mov	r9, r3
   2503e:	465b      	mov	r3, fp
   25040:	408b      	lsls	r3, r1
   25042:	4698      	mov	r8, r3
   25044:	2300      	movs	r3, #0
   25046:	4c3c      	ldr	r4, [pc, #240]	; (25138 <__aeabi_ddiv+0x1f0>)
   25048:	2600      	movs	r6, #0
   2504a:	1a24      	subs	r4, r4, r0
   2504c:	9303      	str	r3, [sp, #12]
   2504e:	e79f      	b.n	24f90 <__aeabi_ddiv+0x48>
   25050:	4651      	mov	r1, sl
   25052:	465a      	mov	r2, fp
   25054:	4311      	orrs	r1, r2
   25056:	d129      	bne.n	250ac <__aeabi_ddiv+0x164>
   25058:	2200      	movs	r2, #0
   2505a:	4693      	mov	fp, r2
   2505c:	3202      	adds	r2, #2
   2505e:	e7b1      	b.n	24fc4 <__aeabi_ddiv+0x7c>
   25060:	4659      	mov	r1, fp
   25062:	4301      	orrs	r1, r0
   25064:	d01e      	beq.n	250a4 <__aeabi_ddiv+0x15c>
   25066:	465b      	mov	r3, fp
   25068:	2b00      	cmp	r3, #0
   2506a:	d100      	bne.n	2506e <__aeabi_ddiv+0x126>
   2506c:	e19e      	b.n	253ac <__aeabi_ddiv+0x464>
   2506e:	4658      	mov	r0, fp
   25070:	f001 f8a0 	bl	261b4 <__clzsi2>
   25074:	0003      	movs	r3, r0
   25076:	3b0b      	subs	r3, #11
   25078:	2b1c      	cmp	r3, #28
   2507a:	dd00      	ble.n	2507e <__aeabi_ddiv+0x136>
   2507c:	e18f      	b.n	2539e <__aeabi_ddiv+0x456>
   2507e:	0002      	movs	r2, r0
   25080:	4659      	mov	r1, fp
   25082:	3a08      	subs	r2, #8
   25084:	4091      	lsls	r1, r2
   25086:	468b      	mov	fp, r1
   25088:	211d      	movs	r1, #29
   2508a:	1acb      	subs	r3, r1, r3
   2508c:	4651      	mov	r1, sl
   2508e:	40d9      	lsrs	r1, r3
   25090:	000b      	movs	r3, r1
   25092:	4659      	mov	r1, fp
   25094:	430b      	orrs	r3, r1
   25096:	4651      	mov	r1, sl
   25098:	469b      	mov	fp, r3
   2509a:	4091      	lsls	r1, r2
   2509c:	4b26      	ldr	r3, [pc, #152]	; (25138 <__aeabi_ddiv+0x1f0>)
   2509e:	2200      	movs	r2, #0
   250a0:	1a1b      	subs	r3, r3, r0
   250a2:	e78f      	b.n	24fc4 <__aeabi_ddiv+0x7c>
   250a4:	2300      	movs	r3, #0
   250a6:	2201      	movs	r2, #1
   250a8:	469b      	mov	fp, r3
   250aa:	e78b      	b.n	24fc4 <__aeabi_ddiv+0x7c>
   250ac:	4651      	mov	r1, sl
   250ae:	2203      	movs	r2, #3
   250b0:	e788      	b.n	24fc4 <__aeabi_ddiv+0x7c>
   250b2:	2300      	movs	r3, #0
   250b4:	4698      	mov	r8, r3
   250b6:	3301      	adds	r3, #1
   250b8:	2604      	movs	r6, #4
   250ba:	2400      	movs	r4, #0
   250bc:	9303      	str	r3, [sp, #12]
   250be:	e767      	b.n	24f90 <__aeabi_ddiv+0x48>
   250c0:	2303      	movs	r3, #3
   250c2:	46b1      	mov	r9, r6
   250c4:	9303      	str	r3, [sp, #12]
   250c6:	260c      	movs	r6, #12
   250c8:	e762      	b.n	24f90 <__aeabi_ddiv+0x48>
   250ca:	2a03      	cmp	r2, #3
   250cc:	d100      	bne.n	250d0 <__aeabi_ddiv+0x188>
   250ce:	e25c      	b.n	2558a <__aeabi_ddiv+0x642>
   250d0:	9b01      	ldr	r3, [sp, #4]
   250d2:	2a01      	cmp	r2, #1
   250d4:	d000      	beq.n	250d8 <__aeabi_ddiv+0x190>
   250d6:	e1e4      	b.n	254a2 <__aeabi_ddiv+0x55a>
   250d8:	4013      	ands	r3, r2
   250da:	469c      	mov	ip, r3
   250dc:	2300      	movs	r3, #0
   250de:	2400      	movs	r4, #0
   250e0:	2200      	movs	r2, #0
   250e2:	4698      	mov	r8, r3
   250e4:	2100      	movs	r1, #0
   250e6:	0312      	lsls	r2, r2, #12
   250e8:	0b13      	lsrs	r3, r2, #12
   250ea:	0d0a      	lsrs	r2, r1, #20
   250ec:	0512      	lsls	r2, r2, #20
   250ee:	431a      	orrs	r2, r3
   250f0:	0523      	lsls	r3, r4, #20
   250f2:	4c12      	ldr	r4, [pc, #72]	; (2513c <__aeabi_ddiv+0x1f4>)
   250f4:	4640      	mov	r0, r8
   250f6:	4022      	ands	r2, r4
   250f8:	4313      	orrs	r3, r2
   250fa:	4662      	mov	r2, ip
   250fc:	005b      	lsls	r3, r3, #1
   250fe:	07d2      	lsls	r2, r2, #31
   25100:	085b      	lsrs	r3, r3, #1
   25102:	4313      	orrs	r3, r2
   25104:	0019      	movs	r1, r3
   25106:	b007      	add	sp, #28
   25108:	bc3c      	pop	{r2, r3, r4, r5}
   2510a:	4690      	mov	r8, r2
   2510c:	4699      	mov	r9, r3
   2510e:	46a2      	mov	sl, r4
   25110:	46ab      	mov	fp, r5
   25112:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25114:	2300      	movs	r3, #0
   25116:	2280      	movs	r2, #128	; 0x80
   25118:	469c      	mov	ip, r3
   2511a:	0312      	lsls	r2, r2, #12
   2511c:	4698      	mov	r8, r3
   2511e:	4c03      	ldr	r4, [pc, #12]	; (2512c <__aeabi_ddiv+0x1e4>)
   25120:	e7e0      	b.n	250e4 <__aeabi_ddiv+0x19c>
   25122:	2300      	movs	r3, #0
   25124:	4c01      	ldr	r4, [pc, #4]	; (2512c <__aeabi_ddiv+0x1e4>)
   25126:	2200      	movs	r2, #0
   25128:	4698      	mov	r8, r3
   2512a:	e7db      	b.n	250e4 <__aeabi_ddiv+0x19c>
   2512c:	000007ff 	.word	0x000007ff
   25130:	fffffc01 	.word	0xfffffc01
   25134:	0002b020 	.word	0x0002b020
   25138:	fffffc0d 	.word	0xfffffc0d
   2513c:	800fffff 	.word	0x800fffff
   25140:	45d9      	cmp	r9, fp
   25142:	d900      	bls.n	25146 <__aeabi_ddiv+0x1fe>
   25144:	e139      	b.n	253ba <__aeabi_ddiv+0x472>
   25146:	d100      	bne.n	2514a <__aeabi_ddiv+0x202>
   25148:	e134      	b.n	253b4 <__aeabi_ddiv+0x46c>
   2514a:	2300      	movs	r3, #0
   2514c:	4646      	mov	r6, r8
   2514e:	464d      	mov	r5, r9
   25150:	469a      	mov	sl, r3
   25152:	3c01      	subs	r4, #1
   25154:	465b      	mov	r3, fp
   25156:	0e0a      	lsrs	r2, r1, #24
   25158:	021b      	lsls	r3, r3, #8
   2515a:	431a      	orrs	r2, r3
   2515c:	020b      	lsls	r3, r1, #8
   2515e:	0c17      	lsrs	r7, r2, #16
   25160:	9303      	str	r3, [sp, #12]
   25162:	0413      	lsls	r3, r2, #16
   25164:	0c1b      	lsrs	r3, r3, #16
   25166:	0039      	movs	r1, r7
   25168:	0028      	movs	r0, r5
   2516a:	4690      	mov	r8, r2
   2516c:	9301      	str	r3, [sp, #4]
   2516e:	f7fe ff63 	bl	24038 <__udivsi3>
   25172:	0002      	movs	r2, r0
   25174:	9b01      	ldr	r3, [sp, #4]
   25176:	4683      	mov	fp, r0
   25178:	435a      	muls	r2, r3
   2517a:	0028      	movs	r0, r5
   2517c:	0039      	movs	r1, r7
   2517e:	4691      	mov	r9, r2
   25180:	f7fe ffe0 	bl	24144 <__aeabi_uidivmod>
   25184:	0c35      	lsrs	r5, r6, #16
   25186:	0409      	lsls	r1, r1, #16
   25188:	430d      	orrs	r5, r1
   2518a:	45a9      	cmp	r9, r5
   2518c:	d90d      	bls.n	251aa <__aeabi_ddiv+0x262>
   2518e:	465b      	mov	r3, fp
   25190:	4445      	add	r5, r8
   25192:	3b01      	subs	r3, #1
   25194:	45a8      	cmp	r8, r5
   25196:	d900      	bls.n	2519a <__aeabi_ddiv+0x252>
   25198:	e13a      	b.n	25410 <__aeabi_ddiv+0x4c8>
   2519a:	45a9      	cmp	r9, r5
   2519c:	d800      	bhi.n	251a0 <__aeabi_ddiv+0x258>
   2519e:	e137      	b.n	25410 <__aeabi_ddiv+0x4c8>
   251a0:	2302      	movs	r3, #2
   251a2:	425b      	negs	r3, r3
   251a4:	469c      	mov	ip, r3
   251a6:	4445      	add	r5, r8
   251a8:	44e3      	add	fp, ip
   251aa:	464b      	mov	r3, r9
   251ac:	1aeb      	subs	r3, r5, r3
   251ae:	0039      	movs	r1, r7
   251b0:	0018      	movs	r0, r3
   251b2:	9304      	str	r3, [sp, #16]
   251b4:	f7fe ff40 	bl	24038 <__udivsi3>
   251b8:	9b01      	ldr	r3, [sp, #4]
   251ba:	0005      	movs	r5, r0
   251bc:	4343      	muls	r3, r0
   251be:	0039      	movs	r1, r7
   251c0:	9804      	ldr	r0, [sp, #16]
   251c2:	4699      	mov	r9, r3
   251c4:	f7fe ffbe 	bl	24144 <__aeabi_uidivmod>
   251c8:	0433      	lsls	r3, r6, #16
   251ca:	0409      	lsls	r1, r1, #16
   251cc:	0c1b      	lsrs	r3, r3, #16
   251ce:	430b      	orrs	r3, r1
   251d0:	4599      	cmp	r9, r3
   251d2:	d909      	bls.n	251e8 <__aeabi_ddiv+0x2a0>
   251d4:	4443      	add	r3, r8
   251d6:	1e6a      	subs	r2, r5, #1
   251d8:	4598      	cmp	r8, r3
   251da:	d900      	bls.n	251de <__aeabi_ddiv+0x296>
   251dc:	e11a      	b.n	25414 <__aeabi_ddiv+0x4cc>
   251de:	4599      	cmp	r9, r3
   251e0:	d800      	bhi.n	251e4 <__aeabi_ddiv+0x29c>
   251e2:	e117      	b.n	25414 <__aeabi_ddiv+0x4cc>
   251e4:	3d02      	subs	r5, #2
   251e6:	4443      	add	r3, r8
   251e8:	464a      	mov	r2, r9
   251ea:	1a9b      	subs	r3, r3, r2
   251ec:	465a      	mov	r2, fp
   251ee:	0412      	lsls	r2, r2, #16
   251f0:	432a      	orrs	r2, r5
   251f2:	9903      	ldr	r1, [sp, #12]
   251f4:	4693      	mov	fp, r2
   251f6:	0c10      	lsrs	r0, r2, #16
   251f8:	0c0a      	lsrs	r2, r1, #16
   251fa:	4691      	mov	r9, r2
   251fc:	0409      	lsls	r1, r1, #16
   251fe:	465a      	mov	r2, fp
   25200:	0c09      	lsrs	r1, r1, #16
   25202:	464e      	mov	r6, r9
   25204:	000d      	movs	r5, r1
   25206:	0412      	lsls	r2, r2, #16
   25208:	0c12      	lsrs	r2, r2, #16
   2520a:	4345      	muls	r5, r0
   2520c:	9105      	str	r1, [sp, #20]
   2520e:	4351      	muls	r1, r2
   25210:	4372      	muls	r2, r6
   25212:	4370      	muls	r0, r6
   25214:	1952      	adds	r2, r2, r5
   25216:	0c0e      	lsrs	r6, r1, #16
   25218:	18b2      	adds	r2, r6, r2
   2521a:	4295      	cmp	r5, r2
   2521c:	d903      	bls.n	25226 <__aeabi_ddiv+0x2de>
   2521e:	2580      	movs	r5, #128	; 0x80
   25220:	026d      	lsls	r5, r5, #9
   25222:	46ac      	mov	ip, r5
   25224:	4460      	add	r0, ip
   25226:	0c15      	lsrs	r5, r2, #16
   25228:	0409      	lsls	r1, r1, #16
   2522a:	0412      	lsls	r2, r2, #16
   2522c:	0c09      	lsrs	r1, r1, #16
   2522e:	1828      	adds	r0, r5, r0
   25230:	1852      	adds	r2, r2, r1
   25232:	4283      	cmp	r3, r0
   25234:	d200      	bcs.n	25238 <__aeabi_ddiv+0x2f0>
   25236:	e0ce      	b.n	253d6 <__aeabi_ddiv+0x48e>
   25238:	d100      	bne.n	2523c <__aeabi_ddiv+0x2f4>
   2523a:	e0c8      	b.n	253ce <__aeabi_ddiv+0x486>
   2523c:	1a1d      	subs	r5, r3, r0
   2523e:	4653      	mov	r3, sl
   25240:	1a9e      	subs	r6, r3, r2
   25242:	45b2      	cmp	sl, r6
   25244:	4192      	sbcs	r2, r2
   25246:	4252      	negs	r2, r2
   25248:	1aab      	subs	r3, r5, r2
   2524a:	469a      	mov	sl, r3
   2524c:	4598      	cmp	r8, r3
   2524e:	d100      	bne.n	25252 <__aeabi_ddiv+0x30a>
   25250:	e117      	b.n	25482 <__aeabi_ddiv+0x53a>
   25252:	0039      	movs	r1, r7
   25254:	0018      	movs	r0, r3
   25256:	f7fe feef 	bl	24038 <__udivsi3>
   2525a:	9b01      	ldr	r3, [sp, #4]
   2525c:	0005      	movs	r5, r0
   2525e:	4343      	muls	r3, r0
   25260:	0039      	movs	r1, r7
   25262:	4650      	mov	r0, sl
   25264:	9304      	str	r3, [sp, #16]
   25266:	f7fe ff6d 	bl	24144 <__aeabi_uidivmod>
   2526a:	9804      	ldr	r0, [sp, #16]
   2526c:	040b      	lsls	r3, r1, #16
   2526e:	0c31      	lsrs	r1, r6, #16
   25270:	4319      	orrs	r1, r3
   25272:	4288      	cmp	r0, r1
   25274:	d909      	bls.n	2528a <__aeabi_ddiv+0x342>
   25276:	4441      	add	r1, r8
   25278:	1e6b      	subs	r3, r5, #1
   2527a:	4588      	cmp	r8, r1
   2527c:	d900      	bls.n	25280 <__aeabi_ddiv+0x338>
   2527e:	e107      	b.n	25490 <__aeabi_ddiv+0x548>
   25280:	4288      	cmp	r0, r1
   25282:	d800      	bhi.n	25286 <__aeabi_ddiv+0x33e>
   25284:	e104      	b.n	25490 <__aeabi_ddiv+0x548>
   25286:	3d02      	subs	r5, #2
   25288:	4441      	add	r1, r8
   2528a:	9b04      	ldr	r3, [sp, #16]
   2528c:	1acb      	subs	r3, r1, r3
   2528e:	0018      	movs	r0, r3
   25290:	0039      	movs	r1, r7
   25292:	9304      	str	r3, [sp, #16]
   25294:	f7fe fed0 	bl	24038 <__udivsi3>
   25298:	9b01      	ldr	r3, [sp, #4]
   2529a:	4682      	mov	sl, r0
   2529c:	4343      	muls	r3, r0
   2529e:	0039      	movs	r1, r7
   252a0:	9804      	ldr	r0, [sp, #16]
   252a2:	9301      	str	r3, [sp, #4]
   252a4:	f7fe ff4e 	bl	24144 <__aeabi_uidivmod>
   252a8:	9801      	ldr	r0, [sp, #4]
   252aa:	040b      	lsls	r3, r1, #16
   252ac:	0431      	lsls	r1, r6, #16
   252ae:	0c09      	lsrs	r1, r1, #16
   252b0:	4319      	orrs	r1, r3
   252b2:	4288      	cmp	r0, r1
   252b4:	d90d      	bls.n	252d2 <__aeabi_ddiv+0x38a>
   252b6:	4653      	mov	r3, sl
   252b8:	4441      	add	r1, r8
   252ba:	3b01      	subs	r3, #1
   252bc:	4588      	cmp	r8, r1
   252be:	d900      	bls.n	252c2 <__aeabi_ddiv+0x37a>
   252c0:	e0e8      	b.n	25494 <__aeabi_ddiv+0x54c>
   252c2:	4288      	cmp	r0, r1
   252c4:	d800      	bhi.n	252c8 <__aeabi_ddiv+0x380>
   252c6:	e0e5      	b.n	25494 <__aeabi_ddiv+0x54c>
   252c8:	2302      	movs	r3, #2
   252ca:	425b      	negs	r3, r3
   252cc:	469c      	mov	ip, r3
   252ce:	4441      	add	r1, r8
   252d0:	44e2      	add	sl, ip
   252d2:	9b01      	ldr	r3, [sp, #4]
   252d4:	042d      	lsls	r5, r5, #16
   252d6:	1ace      	subs	r6, r1, r3
   252d8:	4651      	mov	r1, sl
   252da:	4329      	orrs	r1, r5
   252dc:	9d05      	ldr	r5, [sp, #20]
   252de:	464f      	mov	r7, r9
   252e0:	002a      	movs	r2, r5
   252e2:	040b      	lsls	r3, r1, #16
   252e4:	0c08      	lsrs	r0, r1, #16
   252e6:	0c1b      	lsrs	r3, r3, #16
   252e8:	435a      	muls	r2, r3
   252ea:	4345      	muls	r5, r0
   252ec:	437b      	muls	r3, r7
   252ee:	4378      	muls	r0, r7
   252f0:	195b      	adds	r3, r3, r5
   252f2:	0c17      	lsrs	r7, r2, #16
   252f4:	18fb      	adds	r3, r7, r3
   252f6:	429d      	cmp	r5, r3
   252f8:	d903      	bls.n	25302 <__aeabi_ddiv+0x3ba>
   252fa:	2580      	movs	r5, #128	; 0x80
   252fc:	026d      	lsls	r5, r5, #9
   252fe:	46ac      	mov	ip, r5
   25300:	4460      	add	r0, ip
   25302:	0c1d      	lsrs	r5, r3, #16
   25304:	0412      	lsls	r2, r2, #16
   25306:	041b      	lsls	r3, r3, #16
   25308:	0c12      	lsrs	r2, r2, #16
   2530a:	1828      	adds	r0, r5, r0
   2530c:	189b      	adds	r3, r3, r2
   2530e:	4286      	cmp	r6, r0
   25310:	d200      	bcs.n	25314 <__aeabi_ddiv+0x3cc>
   25312:	e093      	b.n	2543c <__aeabi_ddiv+0x4f4>
   25314:	d100      	bne.n	25318 <__aeabi_ddiv+0x3d0>
   25316:	e08e      	b.n	25436 <__aeabi_ddiv+0x4ee>
   25318:	2301      	movs	r3, #1
   2531a:	4319      	orrs	r1, r3
   2531c:	4ba0      	ldr	r3, [pc, #640]	; (255a0 <__aeabi_ddiv+0x658>)
   2531e:	18e3      	adds	r3, r4, r3
   25320:	2b00      	cmp	r3, #0
   25322:	dc00      	bgt.n	25326 <__aeabi_ddiv+0x3de>
   25324:	e099      	b.n	2545a <__aeabi_ddiv+0x512>
   25326:	074a      	lsls	r2, r1, #29
   25328:	d000      	beq.n	2532c <__aeabi_ddiv+0x3e4>
   2532a:	e09e      	b.n	2546a <__aeabi_ddiv+0x522>
   2532c:	465a      	mov	r2, fp
   2532e:	01d2      	lsls	r2, r2, #7
   25330:	d506      	bpl.n	25340 <__aeabi_ddiv+0x3f8>
   25332:	465a      	mov	r2, fp
   25334:	4b9b      	ldr	r3, [pc, #620]	; (255a4 <__aeabi_ddiv+0x65c>)
   25336:	401a      	ands	r2, r3
   25338:	2380      	movs	r3, #128	; 0x80
   2533a:	4693      	mov	fp, r2
   2533c:	00db      	lsls	r3, r3, #3
   2533e:	18e3      	adds	r3, r4, r3
   25340:	4a99      	ldr	r2, [pc, #612]	; (255a8 <__aeabi_ddiv+0x660>)
   25342:	4293      	cmp	r3, r2
   25344:	dd68      	ble.n	25418 <__aeabi_ddiv+0x4d0>
   25346:	2301      	movs	r3, #1
   25348:	9a02      	ldr	r2, [sp, #8]
   2534a:	4c98      	ldr	r4, [pc, #608]	; (255ac <__aeabi_ddiv+0x664>)
   2534c:	401a      	ands	r2, r3
   2534e:	2300      	movs	r3, #0
   25350:	4694      	mov	ip, r2
   25352:	4698      	mov	r8, r3
   25354:	2200      	movs	r2, #0
   25356:	e6c5      	b.n	250e4 <__aeabi_ddiv+0x19c>
   25358:	2280      	movs	r2, #128	; 0x80
   2535a:	464b      	mov	r3, r9
   2535c:	0312      	lsls	r2, r2, #12
   2535e:	4213      	tst	r3, r2
   25360:	d00a      	beq.n	25378 <__aeabi_ddiv+0x430>
   25362:	465b      	mov	r3, fp
   25364:	4213      	tst	r3, r2
   25366:	d106      	bne.n	25376 <__aeabi_ddiv+0x42e>
   25368:	431a      	orrs	r2, r3
   2536a:	0312      	lsls	r2, r2, #12
   2536c:	0b12      	lsrs	r2, r2, #12
   2536e:	46ac      	mov	ip, r5
   25370:	4688      	mov	r8, r1
   25372:	4c8e      	ldr	r4, [pc, #568]	; (255ac <__aeabi_ddiv+0x664>)
   25374:	e6b6      	b.n	250e4 <__aeabi_ddiv+0x19c>
   25376:	464b      	mov	r3, r9
   25378:	431a      	orrs	r2, r3
   2537a:	0312      	lsls	r2, r2, #12
   2537c:	0b12      	lsrs	r2, r2, #12
   2537e:	46bc      	mov	ip, r7
   25380:	4c8a      	ldr	r4, [pc, #552]	; (255ac <__aeabi_ddiv+0x664>)
   25382:	e6af      	b.n	250e4 <__aeabi_ddiv+0x19c>
   25384:	0003      	movs	r3, r0
   25386:	465a      	mov	r2, fp
   25388:	3b28      	subs	r3, #40	; 0x28
   2538a:	409a      	lsls	r2, r3
   2538c:	2300      	movs	r3, #0
   2538e:	4691      	mov	r9, r2
   25390:	4698      	mov	r8, r3
   25392:	e657      	b.n	25044 <__aeabi_ddiv+0xfc>
   25394:	4658      	mov	r0, fp
   25396:	f000 ff0d 	bl	261b4 <__clzsi2>
   2539a:	3020      	adds	r0, #32
   2539c:	e640      	b.n	25020 <__aeabi_ddiv+0xd8>
   2539e:	0003      	movs	r3, r0
   253a0:	4652      	mov	r2, sl
   253a2:	3b28      	subs	r3, #40	; 0x28
   253a4:	409a      	lsls	r2, r3
   253a6:	2100      	movs	r1, #0
   253a8:	4693      	mov	fp, r2
   253aa:	e677      	b.n	2509c <__aeabi_ddiv+0x154>
   253ac:	f000 ff02 	bl	261b4 <__clzsi2>
   253b0:	3020      	adds	r0, #32
   253b2:	e65f      	b.n	25074 <__aeabi_ddiv+0x12c>
   253b4:	4588      	cmp	r8, r1
   253b6:	d200      	bcs.n	253ba <__aeabi_ddiv+0x472>
   253b8:	e6c7      	b.n	2514a <__aeabi_ddiv+0x202>
   253ba:	464b      	mov	r3, r9
   253bc:	07de      	lsls	r6, r3, #31
   253be:	085d      	lsrs	r5, r3, #1
   253c0:	4643      	mov	r3, r8
   253c2:	085b      	lsrs	r3, r3, #1
   253c4:	431e      	orrs	r6, r3
   253c6:	4643      	mov	r3, r8
   253c8:	07db      	lsls	r3, r3, #31
   253ca:	469a      	mov	sl, r3
   253cc:	e6c2      	b.n	25154 <__aeabi_ddiv+0x20c>
   253ce:	2500      	movs	r5, #0
   253d0:	4592      	cmp	sl, r2
   253d2:	d300      	bcc.n	253d6 <__aeabi_ddiv+0x48e>
   253d4:	e733      	b.n	2523e <__aeabi_ddiv+0x2f6>
   253d6:	9e03      	ldr	r6, [sp, #12]
   253d8:	4659      	mov	r1, fp
   253da:	46b4      	mov	ip, r6
   253dc:	44e2      	add	sl, ip
   253de:	45b2      	cmp	sl, r6
   253e0:	41ad      	sbcs	r5, r5
   253e2:	426d      	negs	r5, r5
   253e4:	4445      	add	r5, r8
   253e6:	18eb      	adds	r3, r5, r3
   253e8:	3901      	subs	r1, #1
   253ea:	4598      	cmp	r8, r3
   253ec:	d207      	bcs.n	253fe <__aeabi_ddiv+0x4b6>
   253ee:	4298      	cmp	r0, r3
   253f0:	d900      	bls.n	253f4 <__aeabi_ddiv+0x4ac>
   253f2:	e07f      	b.n	254f4 <__aeabi_ddiv+0x5ac>
   253f4:	d100      	bne.n	253f8 <__aeabi_ddiv+0x4b0>
   253f6:	e0bc      	b.n	25572 <__aeabi_ddiv+0x62a>
   253f8:	1a1d      	subs	r5, r3, r0
   253fa:	468b      	mov	fp, r1
   253fc:	e71f      	b.n	2523e <__aeabi_ddiv+0x2f6>
   253fe:	4598      	cmp	r8, r3
   25400:	d1fa      	bne.n	253f8 <__aeabi_ddiv+0x4b0>
   25402:	9d03      	ldr	r5, [sp, #12]
   25404:	4555      	cmp	r5, sl
   25406:	d9f2      	bls.n	253ee <__aeabi_ddiv+0x4a6>
   25408:	4643      	mov	r3, r8
   2540a:	468b      	mov	fp, r1
   2540c:	1a1d      	subs	r5, r3, r0
   2540e:	e716      	b.n	2523e <__aeabi_ddiv+0x2f6>
   25410:	469b      	mov	fp, r3
   25412:	e6ca      	b.n	251aa <__aeabi_ddiv+0x262>
   25414:	0015      	movs	r5, r2
   25416:	e6e7      	b.n	251e8 <__aeabi_ddiv+0x2a0>
   25418:	465a      	mov	r2, fp
   2541a:	08c9      	lsrs	r1, r1, #3
   2541c:	0752      	lsls	r2, r2, #29
   2541e:	430a      	orrs	r2, r1
   25420:	055b      	lsls	r3, r3, #21
   25422:	4690      	mov	r8, r2
   25424:	0d5c      	lsrs	r4, r3, #21
   25426:	465a      	mov	r2, fp
   25428:	2301      	movs	r3, #1
   2542a:	9902      	ldr	r1, [sp, #8]
   2542c:	0252      	lsls	r2, r2, #9
   2542e:	4019      	ands	r1, r3
   25430:	0b12      	lsrs	r2, r2, #12
   25432:	468c      	mov	ip, r1
   25434:	e656      	b.n	250e4 <__aeabi_ddiv+0x19c>
   25436:	2b00      	cmp	r3, #0
   25438:	d100      	bne.n	2543c <__aeabi_ddiv+0x4f4>
   2543a:	e76f      	b.n	2531c <__aeabi_ddiv+0x3d4>
   2543c:	4446      	add	r6, r8
   2543e:	1e4a      	subs	r2, r1, #1
   25440:	45b0      	cmp	r8, r6
   25442:	d929      	bls.n	25498 <__aeabi_ddiv+0x550>
   25444:	0011      	movs	r1, r2
   25446:	4286      	cmp	r6, r0
   25448:	d000      	beq.n	2544c <__aeabi_ddiv+0x504>
   2544a:	e765      	b.n	25318 <__aeabi_ddiv+0x3d0>
   2544c:	9a03      	ldr	r2, [sp, #12]
   2544e:	4293      	cmp	r3, r2
   25450:	d000      	beq.n	25454 <__aeabi_ddiv+0x50c>
   25452:	e761      	b.n	25318 <__aeabi_ddiv+0x3d0>
   25454:	e762      	b.n	2531c <__aeabi_ddiv+0x3d4>
   25456:	2101      	movs	r1, #1
   25458:	4249      	negs	r1, r1
   2545a:	2001      	movs	r0, #1
   2545c:	1ac2      	subs	r2, r0, r3
   2545e:	2a38      	cmp	r2, #56	; 0x38
   25460:	dd21      	ble.n	254a6 <__aeabi_ddiv+0x55e>
   25462:	9b02      	ldr	r3, [sp, #8]
   25464:	4003      	ands	r3, r0
   25466:	469c      	mov	ip, r3
   25468:	e638      	b.n	250dc <__aeabi_ddiv+0x194>
   2546a:	220f      	movs	r2, #15
   2546c:	400a      	ands	r2, r1
   2546e:	2a04      	cmp	r2, #4
   25470:	d100      	bne.n	25474 <__aeabi_ddiv+0x52c>
   25472:	e75b      	b.n	2532c <__aeabi_ddiv+0x3e4>
   25474:	000a      	movs	r2, r1
   25476:	1d11      	adds	r1, r2, #4
   25478:	4291      	cmp	r1, r2
   2547a:	4192      	sbcs	r2, r2
   2547c:	4252      	negs	r2, r2
   2547e:	4493      	add	fp, r2
   25480:	e754      	b.n	2532c <__aeabi_ddiv+0x3e4>
   25482:	4b47      	ldr	r3, [pc, #284]	; (255a0 <__aeabi_ddiv+0x658>)
   25484:	18e3      	adds	r3, r4, r3
   25486:	2b00      	cmp	r3, #0
   25488:	dde5      	ble.n	25456 <__aeabi_ddiv+0x50e>
   2548a:	2201      	movs	r2, #1
   2548c:	4252      	negs	r2, r2
   2548e:	e7f2      	b.n	25476 <__aeabi_ddiv+0x52e>
   25490:	001d      	movs	r5, r3
   25492:	e6fa      	b.n	2528a <__aeabi_ddiv+0x342>
   25494:	469a      	mov	sl, r3
   25496:	e71c      	b.n	252d2 <__aeabi_ddiv+0x38a>
   25498:	42b0      	cmp	r0, r6
   2549a:	d839      	bhi.n	25510 <__aeabi_ddiv+0x5c8>
   2549c:	d06e      	beq.n	2557c <__aeabi_ddiv+0x634>
   2549e:	0011      	movs	r1, r2
   254a0:	e73a      	b.n	25318 <__aeabi_ddiv+0x3d0>
   254a2:	9302      	str	r3, [sp, #8]
   254a4:	e73a      	b.n	2531c <__aeabi_ddiv+0x3d4>
   254a6:	2a1f      	cmp	r2, #31
   254a8:	dc3c      	bgt.n	25524 <__aeabi_ddiv+0x5dc>
   254aa:	2320      	movs	r3, #32
   254ac:	1a9b      	subs	r3, r3, r2
   254ae:	000c      	movs	r4, r1
   254b0:	4658      	mov	r0, fp
   254b2:	4099      	lsls	r1, r3
   254b4:	4098      	lsls	r0, r3
   254b6:	1e4b      	subs	r3, r1, #1
   254b8:	4199      	sbcs	r1, r3
   254ba:	465b      	mov	r3, fp
   254bc:	40d4      	lsrs	r4, r2
   254be:	40d3      	lsrs	r3, r2
   254c0:	4320      	orrs	r0, r4
   254c2:	4308      	orrs	r0, r1
   254c4:	001a      	movs	r2, r3
   254c6:	0743      	lsls	r3, r0, #29
   254c8:	d009      	beq.n	254de <__aeabi_ddiv+0x596>
   254ca:	230f      	movs	r3, #15
   254cc:	4003      	ands	r3, r0
   254ce:	2b04      	cmp	r3, #4
   254d0:	d005      	beq.n	254de <__aeabi_ddiv+0x596>
   254d2:	0001      	movs	r1, r0
   254d4:	1d08      	adds	r0, r1, #4
   254d6:	4288      	cmp	r0, r1
   254d8:	419b      	sbcs	r3, r3
   254da:	425b      	negs	r3, r3
   254dc:	18d2      	adds	r2, r2, r3
   254de:	0213      	lsls	r3, r2, #8
   254e0:	d53a      	bpl.n	25558 <__aeabi_ddiv+0x610>
   254e2:	2301      	movs	r3, #1
   254e4:	9a02      	ldr	r2, [sp, #8]
   254e6:	2401      	movs	r4, #1
   254e8:	401a      	ands	r2, r3
   254ea:	2300      	movs	r3, #0
   254ec:	4694      	mov	ip, r2
   254ee:	4698      	mov	r8, r3
   254f0:	2200      	movs	r2, #0
   254f2:	e5f7      	b.n	250e4 <__aeabi_ddiv+0x19c>
   254f4:	2102      	movs	r1, #2
   254f6:	4249      	negs	r1, r1
   254f8:	468c      	mov	ip, r1
   254fa:	9d03      	ldr	r5, [sp, #12]
   254fc:	44e3      	add	fp, ip
   254fe:	46ac      	mov	ip, r5
   25500:	44e2      	add	sl, ip
   25502:	45aa      	cmp	sl, r5
   25504:	41ad      	sbcs	r5, r5
   25506:	426d      	negs	r5, r5
   25508:	4445      	add	r5, r8
   2550a:	18ed      	adds	r5, r5, r3
   2550c:	1a2d      	subs	r5, r5, r0
   2550e:	e696      	b.n	2523e <__aeabi_ddiv+0x2f6>
   25510:	1e8a      	subs	r2, r1, #2
   25512:	9903      	ldr	r1, [sp, #12]
   25514:	004d      	lsls	r5, r1, #1
   25516:	428d      	cmp	r5, r1
   25518:	4189      	sbcs	r1, r1
   2551a:	4249      	negs	r1, r1
   2551c:	4441      	add	r1, r8
   2551e:	1876      	adds	r6, r6, r1
   25520:	9503      	str	r5, [sp, #12]
   25522:	e78f      	b.n	25444 <__aeabi_ddiv+0x4fc>
   25524:	201f      	movs	r0, #31
   25526:	4240      	negs	r0, r0
   25528:	1ac3      	subs	r3, r0, r3
   2552a:	4658      	mov	r0, fp
   2552c:	40d8      	lsrs	r0, r3
   2552e:	0003      	movs	r3, r0
   25530:	2a20      	cmp	r2, #32
   25532:	d028      	beq.n	25586 <__aeabi_ddiv+0x63e>
   25534:	2040      	movs	r0, #64	; 0x40
   25536:	465d      	mov	r5, fp
   25538:	1a82      	subs	r2, r0, r2
   2553a:	4095      	lsls	r5, r2
   2553c:	4329      	orrs	r1, r5
   2553e:	1e4a      	subs	r2, r1, #1
   25540:	4191      	sbcs	r1, r2
   25542:	4319      	orrs	r1, r3
   25544:	2307      	movs	r3, #7
   25546:	2200      	movs	r2, #0
   25548:	400b      	ands	r3, r1
   2554a:	d009      	beq.n	25560 <__aeabi_ddiv+0x618>
   2554c:	230f      	movs	r3, #15
   2554e:	2200      	movs	r2, #0
   25550:	400b      	ands	r3, r1
   25552:	0008      	movs	r0, r1
   25554:	2b04      	cmp	r3, #4
   25556:	d1bd      	bne.n	254d4 <__aeabi_ddiv+0x58c>
   25558:	0001      	movs	r1, r0
   2555a:	0753      	lsls	r3, r2, #29
   2555c:	0252      	lsls	r2, r2, #9
   2555e:	0b12      	lsrs	r2, r2, #12
   25560:	08c9      	lsrs	r1, r1, #3
   25562:	4319      	orrs	r1, r3
   25564:	2301      	movs	r3, #1
   25566:	4688      	mov	r8, r1
   25568:	9902      	ldr	r1, [sp, #8]
   2556a:	2400      	movs	r4, #0
   2556c:	4019      	ands	r1, r3
   2556e:	468c      	mov	ip, r1
   25570:	e5b8      	b.n	250e4 <__aeabi_ddiv+0x19c>
   25572:	4552      	cmp	r2, sl
   25574:	d8be      	bhi.n	254f4 <__aeabi_ddiv+0x5ac>
   25576:	468b      	mov	fp, r1
   25578:	2500      	movs	r5, #0
   2557a:	e660      	b.n	2523e <__aeabi_ddiv+0x2f6>
   2557c:	9d03      	ldr	r5, [sp, #12]
   2557e:	429d      	cmp	r5, r3
   25580:	d3c6      	bcc.n	25510 <__aeabi_ddiv+0x5c8>
   25582:	0011      	movs	r1, r2
   25584:	e762      	b.n	2544c <__aeabi_ddiv+0x504>
   25586:	2500      	movs	r5, #0
   25588:	e7d8      	b.n	2553c <__aeabi_ddiv+0x5f4>
   2558a:	2280      	movs	r2, #128	; 0x80
   2558c:	465b      	mov	r3, fp
   2558e:	0312      	lsls	r2, r2, #12
   25590:	431a      	orrs	r2, r3
   25592:	9b01      	ldr	r3, [sp, #4]
   25594:	0312      	lsls	r2, r2, #12
   25596:	0b12      	lsrs	r2, r2, #12
   25598:	469c      	mov	ip, r3
   2559a:	4688      	mov	r8, r1
   2559c:	4c03      	ldr	r4, [pc, #12]	; (255ac <__aeabi_ddiv+0x664>)
   2559e:	e5a1      	b.n	250e4 <__aeabi_ddiv+0x19c>
   255a0:	000003ff 	.word	0x000003ff
   255a4:	feffffff 	.word	0xfeffffff
   255a8:	000007fe 	.word	0x000007fe
   255ac:	000007ff 	.word	0x000007ff

000255b0 <__aeabi_dmul>:
   255b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   255b2:	4657      	mov	r7, sl
   255b4:	4645      	mov	r5, r8
   255b6:	46de      	mov	lr, fp
   255b8:	464e      	mov	r6, r9
   255ba:	b5e0      	push	{r5, r6, r7, lr}
   255bc:	030c      	lsls	r4, r1, #12
   255be:	4698      	mov	r8, r3
   255c0:	004e      	lsls	r6, r1, #1
   255c2:	0b23      	lsrs	r3, r4, #12
   255c4:	b087      	sub	sp, #28
   255c6:	0007      	movs	r7, r0
   255c8:	4692      	mov	sl, r2
   255ca:	469b      	mov	fp, r3
   255cc:	0d76      	lsrs	r6, r6, #21
   255ce:	0fcd      	lsrs	r5, r1, #31
   255d0:	2e00      	cmp	r6, #0
   255d2:	d06b      	beq.n	256ac <__aeabi_dmul+0xfc>
   255d4:	4b6d      	ldr	r3, [pc, #436]	; (2578c <__aeabi_dmul+0x1dc>)
   255d6:	429e      	cmp	r6, r3
   255d8:	d035      	beq.n	25646 <__aeabi_dmul+0x96>
   255da:	2480      	movs	r4, #128	; 0x80
   255dc:	465b      	mov	r3, fp
   255de:	0f42      	lsrs	r2, r0, #29
   255e0:	0424      	lsls	r4, r4, #16
   255e2:	00db      	lsls	r3, r3, #3
   255e4:	4314      	orrs	r4, r2
   255e6:	431c      	orrs	r4, r3
   255e8:	00c3      	lsls	r3, r0, #3
   255ea:	4699      	mov	r9, r3
   255ec:	4b68      	ldr	r3, [pc, #416]	; (25790 <__aeabi_dmul+0x1e0>)
   255ee:	46a3      	mov	fp, r4
   255f0:	469c      	mov	ip, r3
   255f2:	2300      	movs	r3, #0
   255f4:	2700      	movs	r7, #0
   255f6:	4466      	add	r6, ip
   255f8:	9302      	str	r3, [sp, #8]
   255fa:	4643      	mov	r3, r8
   255fc:	031c      	lsls	r4, r3, #12
   255fe:	005a      	lsls	r2, r3, #1
   25600:	0fdb      	lsrs	r3, r3, #31
   25602:	4650      	mov	r0, sl
   25604:	0b24      	lsrs	r4, r4, #12
   25606:	0d52      	lsrs	r2, r2, #21
   25608:	4698      	mov	r8, r3
   2560a:	d100      	bne.n	2560e <__aeabi_dmul+0x5e>
   2560c:	e076      	b.n	256fc <__aeabi_dmul+0x14c>
   2560e:	4b5f      	ldr	r3, [pc, #380]	; (2578c <__aeabi_dmul+0x1dc>)
   25610:	429a      	cmp	r2, r3
   25612:	d06d      	beq.n	256f0 <__aeabi_dmul+0x140>
   25614:	2380      	movs	r3, #128	; 0x80
   25616:	0f41      	lsrs	r1, r0, #29
   25618:	041b      	lsls	r3, r3, #16
   2561a:	430b      	orrs	r3, r1
   2561c:	495c      	ldr	r1, [pc, #368]	; (25790 <__aeabi_dmul+0x1e0>)
   2561e:	00e4      	lsls	r4, r4, #3
   25620:	468c      	mov	ip, r1
   25622:	431c      	orrs	r4, r3
   25624:	00c3      	lsls	r3, r0, #3
   25626:	2000      	movs	r0, #0
   25628:	4462      	add	r2, ip
   2562a:	4641      	mov	r1, r8
   2562c:	18b6      	adds	r6, r6, r2
   2562e:	4069      	eors	r1, r5
   25630:	1c72      	adds	r2, r6, #1
   25632:	9101      	str	r1, [sp, #4]
   25634:	4694      	mov	ip, r2
   25636:	4307      	orrs	r7, r0
   25638:	2f0f      	cmp	r7, #15
   2563a:	d900      	bls.n	2563e <__aeabi_dmul+0x8e>
   2563c:	e0b0      	b.n	257a0 <__aeabi_dmul+0x1f0>
   2563e:	4a55      	ldr	r2, [pc, #340]	; (25794 <__aeabi_dmul+0x1e4>)
   25640:	00bf      	lsls	r7, r7, #2
   25642:	59d2      	ldr	r2, [r2, r7]
   25644:	4697      	mov	pc, r2
   25646:	465b      	mov	r3, fp
   25648:	4303      	orrs	r3, r0
   2564a:	4699      	mov	r9, r3
   2564c:	d000      	beq.n	25650 <__aeabi_dmul+0xa0>
   2564e:	e087      	b.n	25760 <__aeabi_dmul+0x1b0>
   25650:	2300      	movs	r3, #0
   25652:	469b      	mov	fp, r3
   25654:	3302      	adds	r3, #2
   25656:	2708      	movs	r7, #8
   25658:	9302      	str	r3, [sp, #8]
   2565a:	e7ce      	b.n	255fa <__aeabi_dmul+0x4a>
   2565c:	4642      	mov	r2, r8
   2565e:	9201      	str	r2, [sp, #4]
   25660:	2802      	cmp	r0, #2
   25662:	d067      	beq.n	25734 <__aeabi_dmul+0x184>
   25664:	2803      	cmp	r0, #3
   25666:	d100      	bne.n	2566a <__aeabi_dmul+0xba>
   25668:	e20e      	b.n	25a88 <__aeabi_dmul+0x4d8>
   2566a:	2801      	cmp	r0, #1
   2566c:	d000      	beq.n	25670 <__aeabi_dmul+0xc0>
   2566e:	e162      	b.n	25936 <__aeabi_dmul+0x386>
   25670:	2300      	movs	r3, #0
   25672:	2400      	movs	r4, #0
   25674:	2200      	movs	r2, #0
   25676:	4699      	mov	r9, r3
   25678:	9901      	ldr	r1, [sp, #4]
   2567a:	4001      	ands	r1, r0
   2567c:	b2cd      	uxtb	r5, r1
   2567e:	2100      	movs	r1, #0
   25680:	0312      	lsls	r2, r2, #12
   25682:	0d0b      	lsrs	r3, r1, #20
   25684:	0b12      	lsrs	r2, r2, #12
   25686:	051b      	lsls	r3, r3, #20
   25688:	4313      	orrs	r3, r2
   2568a:	4a43      	ldr	r2, [pc, #268]	; (25798 <__aeabi_dmul+0x1e8>)
   2568c:	0524      	lsls	r4, r4, #20
   2568e:	4013      	ands	r3, r2
   25690:	431c      	orrs	r4, r3
   25692:	0064      	lsls	r4, r4, #1
   25694:	07ed      	lsls	r5, r5, #31
   25696:	0864      	lsrs	r4, r4, #1
   25698:	432c      	orrs	r4, r5
   2569a:	4648      	mov	r0, r9
   2569c:	0021      	movs	r1, r4
   2569e:	b007      	add	sp, #28
   256a0:	bc3c      	pop	{r2, r3, r4, r5}
   256a2:	4690      	mov	r8, r2
   256a4:	4699      	mov	r9, r3
   256a6:	46a2      	mov	sl, r4
   256a8:	46ab      	mov	fp, r5
   256aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   256ac:	4303      	orrs	r3, r0
   256ae:	4699      	mov	r9, r3
   256b0:	d04f      	beq.n	25752 <__aeabi_dmul+0x1a2>
   256b2:	465b      	mov	r3, fp
   256b4:	2b00      	cmp	r3, #0
   256b6:	d100      	bne.n	256ba <__aeabi_dmul+0x10a>
   256b8:	e189      	b.n	259ce <__aeabi_dmul+0x41e>
   256ba:	4658      	mov	r0, fp
   256bc:	f000 fd7a 	bl	261b4 <__clzsi2>
   256c0:	0003      	movs	r3, r0
   256c2:	3b0b      	subs	r3, #11
   256c4:	2b1c      	cmp	r3, #28
   256c6:	dd00      	ble.n	256ca <__aeabi_dmul+0x11a>
   256c8:	e17a      	b.n	259c0 <__aeabi_dmul+0x410>
   256ca:	221d      	movs	r2, #29
   256cc:	1ad3      	subs	r3, r2, r3
   256ce:	003a      	movs	r2, r7
   256d0:	0001      	movs	r1, r0
   256d2:	465c      	mov	r4, fp
   256d4:	40da      	lsrs	r2, r3
   256d6:	3908      	subs	r1, #8
   256d8:	408c      	lsls	r4, r1
   256da:	0013      	movs	r3, r2
   256dc:	408f      	lsls	r7, r1
   256de:	4323      	orrs	r3, r4
   256e0:	469b      	mov	fp, r3
   256e2:	46b9      	mov	r9, r7
   256e4:	2300      	movs	r3, #0
   256e6:	4e2d      	ldr	r6, [pc, #180]	; (2579c <__aeabi_dmul+0x1ec>)
   256e8:	2700      	movs	r7, #0
   256ea:	1a36      	subs	r6, r6, r0
   256ec:	9302      	str	r3, [sp, #8]
   256ee:	e784      	b.n	255fa <__aeabi_dmul+0x4a>
   256f0:	4653      	mov	r3, sl
   256f2:	4323      	orrs	r3, r4
   256f4:	d12a      	bne.n	2574c <__aeabi_dmul+0x19c>
   256f6:	2400      	movs	r4, #0
   256f8:	2002      	movs	r0, #2
   256fa:	e796      	b.n	2562a <__aeabi_dmul+0x7a>
   256fc:	4653      	mov	r3, sl
   256fe:	4323      	orrs	r3, r4
   25700:	d020      	beq.n	25744 <__aeabi_dmul+0x194>
   25702:	2c00      	cmp	r4, #0
   25704:	d100      	bne.n	25708 <__aeabi_dmul+0x158>
   25706:	e157      	b.n	259b8 <__aeabi_dmul+0x408>
   25708:	0020      	movs	r0, r4
   2570a:	f000 fd53 	bl	261b4 <__clzsi2>
   2570e:	0003      	movs	r3, r0
   25710:	3b0b      	subs	r3, #11
   25712:	2b1c      	cmp	r3, #28
   25714:	dd00      	ble.n	25718 <__aeabi_dmul+0x168>
   25716:	e149      	b.n	259ac <__aeabi_dmul+0x3fc>
   25718:	211d      	movs	r1, #29
   2571a:	1acb      	subs	r3, r1, r3
   2571c:	4651      	mov	r1, sl
   2571e:	0002      	movs	r2, r0
   25720:	40d9      	lsrs	r1, r3
   25722:	4653      	mov	r3, sl
   25724:	3a08      	subs	r2, #8
   25726:	4094      	lsls	r4, r2
   25728:	4093      	lsls	r3, r2
   2572a:	430c      	orrs	r4, r1
   2572c:	4a1b      	ldr	r2, [pc, #108]	; (2579c <__aeabi_dmul+0x1ec>)
   2572e:	1a12      	subs	r2, r2, r0
   25730:	2000      	movs	r0, #0
   25732:	e77a      	b.n	2562a <__aeabi_dmul+0x7a>
   25734:	2501      	movs	r5, #1
   25736:	9b01      	ldr	r3, [sp, #4]
   25738:	4c14      	ldr	r4, [pc, #80]	; (2578c <__aeabi_dmul+0x1dc>)
   2573a:	401d      	ands	r5, r3
   2573c:	2300      	movs	r3, #0
   2573e:	2200      	movs	r2, #0
   25740:	4699      	mov	r9, r3
   25742:	e79c      	b.n	2567e <__aeabi_dmul+0xce>
   25744:	2400      	movs	r4, #0
   25746:	2200      	movs	r2, #0
   25748:	2001      	movs	r0, #1
   2574a:	e76e      	b.n	2562a <__aeabi_dmul+0x7a>
   2574c:	4653      	mov	r3, sl
   2574e:	2003      	movs	r0, #3
   25750:	e76b      	b.n	2562a <__aeabi_dmul+0x7a>
   25752:	2300      	movs	r3, #0
   25754:	469b      	mov	fp, r3
   25756:	3301      	adds	r3, #1
   25758:	2704      	movs	r7, #4
   2575a:	2600      	movs	r6, #0
   2575c:	9302      	str	r3, [sp, #8]
   2575e:	e74c      	b.n	255fa <__aeabi_dmul+0x4a>
   25760:	2303      	movs	r3, #3
   25762:	4681      	mov	r9, r0
   25764:	270c      	movs	r7, #12
   25766:	9302      	str	r3, [sp, #8]
   25768:	e747      	b.n	255fa <__aeabi_dmul+0x4a>
   2576a:	2280      	movs	r2, #128	; 0x80
   2576c:	2300      	movs	r3, #0
   2576e:	2500      	movs	r5, #0
   25770:	0312      	lsls	r2, r2, #12
   25772:	4699      	mov	r9, r3
   25774:	4c05      	ldr	r4, [pc, #20]	; (2578c <__aeabi_dmul+0x1dc>)
   25776:	e782      	b.n	2567e <__aeabi_dmul+0xce>
   25778:	465c      	mov	r4, fp
   2577a:	464b      	mov	r3, r9
   2577c:	9802      	ldr	r0, [sp, #8]
   2577e:	e76f      	b.n	25660 <__aeabi_dmul+0xb0>
   25780:	465c      	mov	r4, fp
   25782:	464b      	mov	r3, r9
   25784:	9501      	str	r5, [sp, #4]
   25786:	9802      	ldr	r0, [sp, #8]
   25788:	e76a      	b.n	25660 <__aeabi_dmul+0xb0>
   2578a:	46c0      	nop			; (mov r8, r8)
   2578c:	000007ff 	.word	0x000007ff
   25790:	fffffc01 	.word	0xfffffc01
   25794:	0002b060 	.word	0x0002b060
   25798:	800fffff 	.word	0x800fffff
   2579c:	fffffc0d 	.word	0xfffffc0d
   257a0:	464a      	mov	r2, r9
   257a2:	4649      	mov	r1, r9
   257a4:	0c17      	lsrs	r7, r2, #16
   257a6:	0c1a      	lsrs	r2, r3, #16
   257a8:	041b      	lsls	r3, r3, #16
   257aa:	0c1b      	lsrs	r3, r3, #16
   257ac:	0408      	lsls	r0, r1, #16
   257ae:	0019      	movs	r1, r3
   257b0:	0c00      	lsrs	r0, r0, #16
   257b2:	4341      	muls	r1, r0
   257b4:	0015      	movs	r5, r2
   257b6:	4688      	mov	r8, r1
   257b8:	0019      	movs	r1, r3
   257ba:	437d      	muls	r5, r7
   257bc:	4379      	muls	r1, r7
   257be:	9503      	str	r5, [sp, #12]
   257c0:	4689      	mov	r9, r1
   257c2:	0029      	movs	r1, r5
   257c4:	0015      	movs	r5, r2
   257c6:	4345      	muls	r5, r0
   257c8:	444d      	add	r5, r9
   257ca:	9502      	str	r5, [sp, #8]
   257cc:	4645      	mov	r5, r8
   257ce:	0c2d      	lsrs	r5, r5, #16
   257d0:	46aa      	mov	sl, r5
   257d2:	9d02      	ldr	r5, [sp, #8]
   257d4:	4455      	add	r5, sl
   257d6:	45a9      	cmp	r9, r5
   257d8:	d906      	bls.n	257e8 <__aeabi_dmul+0x238>
   257da:	468a      	mov	sl, r1
   257dc:	2180      	movs	r1, #128	; 0x80
   257de:	0249      	lsls	r1, r1, #9
   257e0:	4689      	mov	r9, r1
   257e2:	44ca      	add	sl, r9
   257e4:	4651      	mov	r1, sl
   257e6:	9103      	str	r1, [sp, #12]
   257e8:	0c29      	lsrs	r1, r5, #16
   257ea:	9104      	str	r1, [sp, #16]
   257ec:	4641      	mov	r1, r8
   257ee:	0409      	lsls	r1, r1, #16
   257f0:	042d      	lsls	r5, r5, #16
   257f2:	0c09      	lsrs	r1, r1, #16
   257f4:	4688      	mov	r8, r1
   257f6:	0029      	movs	r1, r5
   257f8:	0c25      	lsrs	r5, r4, #16
   257fa:	0424      	lsls	r4, r4, #16
   257fc:	4441      	add	r1, r8
   257fe:	0c24      	lsrs	r4, r4, #16
   25800:	9105      	str	r1, [sp, #20]
   25802:	0021      	movs	r1, r4
   25804:	4341      	muls	r1, r0
   25806:	4688      	mov	r8, r1
   25808:	0021      	movs	r1, r4
   2580a:	4379      	muls	r1, r7
   2580c:	468a      	mov	sl, r1
   2580e:	4368      	muls	r0, r5
   25810:	4641      	mov	r1, r8
   25812:	4450      	add	r0, sl
   25814:	4681      	mov	r9, r0
   25816:	0c08      	lsrs	r0, r1, #16
   25818:	4448      	add	r0, r9
   2581a:	436f      	muls	r7, r5
   2581c:	4582      	cmp	sl, r0
   2581e:	d903      	bls.n	25828 <__aeabi_dmul+0x278>
   25820:	2180      	movs	r1, #128	; 0x80
   25822:	0249      	lsls	r1, r1, #9
   25824:	4689      	mov	r9, r1
   25826:	444f      	add	r7, r9
   25828:	0c01      	lsrs	r1, r0, #16
   2582a:	4689      	mov	r9, r1
   2582c:	0039      	movs	r1, r7
   2582e:	4449      	add	r1, r9
   25830:	9102      	str	r1, [sp, #8]
   25832:	4641      	mov	r1, r8
   25834:	040f      	lsls	r7, r1, #16
   25836:	9904      	ldr	r1, [sp, #16]
   25838:	0c3f      	lsrs	r7, r7, #16
   2583a:	4688      	mov	r8, r1
   2583c:	0400      	lsls	r0, r0, #16
   2583e:	19c0      	adds	r0, r0, r7
   25840:	4480      	add	r8, r0
   25842:	4641      	mov	r1, r8
   25844:	9104      	str	r1, [sp, #16]
   25846:	4659      	mov	r1, fp
   25848:	0c0f      	lsrs	r7, r1, #16
   2584a:	0409      	lsls	r1, r1, #16
   2584c:	0c09      	lsrs	r1, r1, #16
   2584e:	4688      	mov	r8, r1
   25850:	4359      	muls	r1, r3
   25852:	468a      	mov	sl, r1
   25854:	0039      	movs	r1, r7
   25856:	4351      	muls	r1, r2
   25858:	4689      	mov	r9, r1
   2585a:	4641      	mov	r1, r8
   2585c:	434a      	muls	r2, r1
   2585e:	4651      	mov	r1, sl
   25860:	0c09      	lsrs	r1, r1, #16
   25862:	468b      	mov	fp, r1
   25864:	437b      	muls	r3, r7
   25866:	18d2      	adds	r2, r2, r3
   25868:	445a      	add	r2, fp
   2586a:	4293      	cmp	r3, r2
   2586c:	d903      	bls.n	25876 <__aeabi_dmul+0x2c6>
   2586e:	2380      	movs	r3, #128	; 0x80
   25870:	025b      	lsls	r3, r3, #9
   25872:	469b      	mov	fp, r3
   25874:	44d9      	add	r9, fp
   25876:	4651      	mov	r1, sl
   25878:	0409      	lsls	r1, r1, #16
   2587a:	0c09      	lsrs	r1, r1, #16
   2587c:	468a      	mov	sl, r1
   2587e:	4641      	mov	r1, r8
   25880:	4361      	muls	r1, r4
   25882:	437c      	muls	r4, r7
   25884:	0c13      	lsrs	r3, r2, #16
   25886:	0412      	lsls	r2, r2, #16
   25888:	444b      	add	r3, r9
   2588a:	4452      	add	r2, sl
   2588c:	46a1      	mov	r9, r4
   2588e:	468a      	mov	sl, r1
   25890:	003c      	movs	r4, r7
   25892:	4641      	mov	r1, r8
   25894:	436c      	muls	r4, r5
   25896:	434d      	muls	r5, r1
   25898:	4651      	mov	r1, sl
   2589a:	444d      	add	r5, r9
   2589c:	0c0f      	lsrs	r7, r1, #16
   2589e:	197d      	adds	r5, r7, r5
   258a0:	45a9      	cmp	r9, r5
   258a2:	d903      	bls.n	258ac <__aeabi_dmul+0x2fc>
   258a4:	2180      	movs	r1, #128	; 0x80
   258a6:	0249      	lsls	r1, r1, #9
   258a8:	4688      	mov	r8, r1
   258aa:	4444      	add	r4, r8
   258ac:	9f04      	ldr	r7, [sp, #16]
   258ae:	9903      	ldr	r1, [sp, #12]
   258b0:	46b8      	mov	r8, r7
   258b2:	4441      	add	r1, r8
   258b4:	468b      	mov	fp, r1
   258b6:	4583      	cmp	fp, r0
   258b8:	4180      	sbcs	r0, r0
   258ba:	4241      	negs	r1, r0
   258bc:	4688      	mov	r8, r1
   258be:	4651      	mov	r1, sl
   258c0:	0408      	lsls	r0, r1, #16
   258c2:	042f      	lsls	r7, r5, #16
   258c4:	0c00      	lsrs	r0, r0, #16
   258c6:	183f      	adds	r7, r7, r0
   258c8:	4658      	mov	r0, fp
   258ca:	9902      	ldr	r1, [sp, #8]
   258cc:	1810      	adds	r0, r2, r0
   258ce:	4689      	mov	r9, r1
   258d0:	4290      	cmp	r0, r2
   258d2:	4192      	sbcs	r2, r2
   258d4:	444f      	add	r7, r9
   258d6:	46ba      	mov	sl, r7
   258d8:	4252      	negs	r2, r2
   258da:	4699      	mov	r9, r3
   258dc:	4693      	mov	fp, r2
   258de:	44c2      	add	sl, r8
   258e0:	44d1      	add	r9, sl
   258e2:	44cb      	add	fp, r9
   258e4:	428f      	cmp	r7, r1
   258e6:	41bf      	sbcs	r7, r7
   258e8:	45c2      	cmp	sl, r8
   258ea:	4189      	sbcs	r1, r1
   258ec:	4599      	cmp	r9, r3
   258ee:	419b      	sbcs	r3, r3
   258f0:	4593      	cmp	fp, r2
   258f2:	4192      	sbcs	r2, r2
   258f4:	427f      	negs	r7, r7
   258f6:	4249      	negs	r1, r1
   258f8:	0c2d      	lsrs	r5, r5, #16
   258fa:	4252      	negs	r2, r2
   258fc:	430f      	orrs	r7, r1
   258fe:	425b      	negs	r3, r3
   25900:	4313      	orrs	r3, r2
   25902:	197f      	adds	r7, r7, r5
   25904:	18ff      	adds	r7, r7, r3
   25906:	465b      	mov	r3, fp
   25908:	193c      	adds	r4, r7, r4
   2590a:	0ddb      	lsrs	r3, r3, #23
   2590c:	9a05      	ldr	r2, [sp, #20]
   2590e:	0264      	lsls	r4, r4, #9
   25910:	431c      	orrs	r4, r3
   25912:	0243      	lsls	r3, r0, #9
   25914:	4313      	orrs	r3, r2
   25916:	1e5d      	subs	r5, r3, #1
   25918:	41ab      	sbcs	r3, r5
   2591a:	465a      	mov	r2, fp
   2591c:	0dc0      	lsrs	r0, r0, #23
   2591e:	4303      	orrs	r3, r0
   25920:	0252      	lsls	r2, r2, #9
   25922:	4313      	orrs	r3, r2
   25924:	01e2      	lsls	r2, r4, #7
   25926:	d556      	bpl.n	259d6 <__aeabi_dmul+0x426>
   25928:	2001      	movs	r0, #1
   2592a:	085a      	lsrs	r2, r3, #1
   2592c:	4003      	ands	r3, r0
   2592e:	4313      	orrs	r3, r2
   25930:	07e2      	lsls	r2, r4, #31
   25932:	4313      	orrs	r3, r2
   25934:	0864      	lsrs	r4, r4, #1
   25936:	485a      	ldr	r0, [pc, #360]	; (25aa0 <__aeabi_dmul+0x4f0>)
   25938:	4460      	add	r0, ip
   2593a:	2800      	cmp	r0, #0
   2593c:	dd4d      	ble.n	259da <__aeabi_dmul+0x42a>
   2593e:	075a      	lsls	r2, r3, #29
   25940:	d009      	beq.n	25956 <__aeabi_dmul+0x3a6>
   25942:	220f      	movs	r2, #15
   25944:	401a      	ands	r2, r3
   25946:	2a04      	cmp	r2, #4
   25948:	d005      	beq.n	25956 <__aeabi_dmul+0x3a6>
   2594a:	1d1a      	adds	r2, r3, #4
   2594c:	429a      	cmp	r2, r3
   2594e:	419b      	sbcs	r3, r3
   25950:	425b      	negs	r3, r3
   25952:	18e4      	adds	r4, r4, r3
   25954:	0013      	movs	r3, r2
   25956:	01e2      	lsls	r2, r4, #7
   25958:	d504      	bpl.n	25964 <__aeabi_dmul+0x3b4>
   2595a:	2080      	movs	r0, #128	; 0x80
   2595c:	4a51      	ldr	r2, [pc, #324]	; (25aa4 <__aeabi_dmul+0x4f4>)
   2595e:	00c0      	lsls	r0, r0, #3
   25960:	4014      	ands	r4, r2
   25962:	4460      	add	r0, ip
   25964:	4a50      	ldr	r2, [pc, #320]	; (25aa8 <__aeabi_dmul+0x4f8>)
   25966:	4290      	cmp	r0, r2
   25968:	dd00      	ble.n	2596c <__aeabi_dmul+0x3bc>
   2596a:	e6e3      	b.n	25734 <__aeabi_dmul+0x184>
   2596c:	2501      	movs	r5, #1
   2596e:	08db      	lsrs	r3, r3, #3
   25970:	0762      	lsls	r2, r4, #29
   25972:	431a      	orrs	r2, r3
   25974:	0264      	lsls	r4, r4, #9
   25976:	9b01      	ldr	r3, [sp, #4]
   25978:	4691      	mov	r9, r2
   2597a:	0b22      	lsrs	r2, r4, #12
   2597c:	0544      	lsls	r4, r0, #21
   2597e:	0d64      	lsrs	r4, r4, #21
   25980:	401d      	ands	r5, r3
   25982:	e67c      	b.n	2567e <__aeabi_dmul+0xce>
   25984:	2280      	movs	r2, #128	; 0x80
   25986:	4659      	mov	r1, fp
   25988:	0312      	lsls	r2, r2, #12
   2598a:	4211      	tst	r1, r2
   2598c:	d008      	beq.n	259a0 <__aeabi_dmul+0x3f0>
   2598e:	4214      	tst	r4, r2
   25990:	d106      	bne.n	259a0 <__aeabi_dmul+0x3f0>
   25992:	4322      	orrs	r2, r4
   25994:	0312      	lsls	r2, r2, #12
   25996:	0b12      	lsrs	r2, r2, #12
   25998:	4645      	mov	r5, r8
   2599a:	4699      	mov	r9, r3
   2599c:	4c43      	ldr	r4, [pc, #268]	; (25aac <__aeabi_dmul+0x4fc>)
   2599e:	e66e      	b.n	2567e <__aeabi_dmul+0xce>
   259a0:	465b      	mov	r3, fp
   259a2:	431a      	orrs	r2, r3
   259a4:	0312      	lsls	r2, r2, #12
   259a6:	0b12      	lsrs	r2, r2, #12
   259a8:	4c40      	ldr	r4, [pc, #256]	; (25aac <__aeabi_dmul+0x4fc>)
   259aa:	e668      	b.n	2567e <__aeabi_dmul+0xce>
   259ac:	0003      	movs	r3, r0
   259ae:	4654      	mov	r4, sl
   259b0:	3b28      	subs	r3, #40	; 0x28
   259b2:	409c      	lsls	r4, r3
   259b4:	2300      	movs	r3, #0
   259b6:	e6b9      	b.n	2572c <__aeabi_dmul+0x17c>
   259b8:	f000 fbfc 	bl	261b4 <__clzsi2>
   259bc:	3020      	adds	r0, #32
   259be:	e6a6      	b.n	2570e <__aeabi_dmul+0x15e>
   259c0:	0003      	movs	r3, r0
   259c2:	3b28      	subs	r3, #40	; 0x28
   259c4:	409f      	lsls	r7, r3
   259c6:	2300      	movs	r3, #0
   259c8:	46bb      	mov	fp, r7
   259ca:	4699      	mov	r9, r3
   259cc:	e68a      	b.n	256e4 <__aeabi_dmul+0x134>
   259ce:	f000 fbf1 	bl	261b4 <__clzsi2>
   259d2:	3020      	adds	r0, #32
   259d4:	e674      	b.n	256c0 <__aeabi_dmul+0x110>
   259d6:	46b4      	mov	ip, r6
   259d8:	e7ad      	b.n	25936 <__aeabi_dmul+0x386>
   259da:	2501      	movs	r5, #1
   259dc:	1a2a      	subs	r2, r5, r0
   259de:	2a38      	cmp	r2, #56	; 0x38
   259e0:	dd06      	ble.n	259f0 <__aeabi_dmul+0x440>
   259e2:	9b01      	ldr	r3, [sp, #4]
   259e4:	2400      	movs	r4, #0
   259e6:	401d      	ands	r5, r3
   259e8:	2300      	movs	r3, #0
   259ea:	2200      	movs	r2, #0
   259ec:	4699      	mov	r9, r3
   259ee:	e646      	b.n	2567e <__aeabi_dmul+0xce>
   259f0:	2a1f      	cmp	r2, #31
   259f2:	dc21      	bgt.n	25a38 <__aeabi_dmul+0x488>
   259f4:	2520      	movs	r5, #32
   259f6:	0020      	movs	r0, r4
   259f8:	1aad      	subs	r5, r5, r2
   259fa:	001e      	movs	r6, r3
   259fc:	40ab      	lsls	r3, r5
   259fe:	40a8      	lsls	r0, r5
   25a00:	40d6      	lsrs	r6, r2
   25a02:	1e5d      	subs	r5, r3, #1
   25a04:	41ab      	sbcs	r3, r5
   25a06:	4330      	orrs	r0, r6
   25a08:	4318      	orrs	r0, r3
   25a0a:	40d4      	lsrs	r4, r2
   25a0c:	0743      	lsls	r3, r0, #29
   25a0e:	d009      	beq.n	25a24 <__aeabi_dmul+0x474>
   25a10:	230f      	movs	r3, #15
   25a12:	4003      	ands	r3, r0
   25a14:	2b04      	cmp	r3, #4
   25a16:	d005      	beq.n	25a24 <__aeabi_dmul+0x474>
   25a18:	0003      	movs	r3, r0
   25a1a:	1d18      	adds	r0, r3, #4
   25a1c:	4298      	cmp	r0, r3
   25a1e:	419b      	sbcs	r3, r3
   25a20:	425b      	negs	r3, r3
   25a22:	18e4      	adds	r4, r4, r3
   25a24:	0223      	lsls	r3, r4, #8
   25a26:	d521      	bpl.n	25a6c <__aeabi_dmul+0x4bc>
   25a28:	2501      	movs	r5, #1
   25a2a:	9b01      	ldr	r3, [sp, #4]
   25a2c:	2401      	movs	r4, #1
   25a2e:	401d      	ands	r5, r3
   25a30:	2300      	movs	r3, #0
   25a32:	2200      	movs	r2, #0
   25a34:	4699      	mov	r9, r3
   25a36:	e622      	b.n	2567e <__aeabi_dmul+0xce>
   25a38:	251f      	movs	r5, #31
   25a3a:	0021      	movs	r1, r4
   25a3c:	426d      	negs	r5, r5
   25a3e:	1a28      	subs	r0, r5, r0
   25a40:	40c1      	lsrs	r1, r0
   25a42:	0008      	movs	r0, r1
   25a44:	2a20      	cmp	r2, #32
   25a46:	d01d      	beq.n	25a84 <__aeabi_dmul+0x4d4>
   25a48:	355f      	adds	r5, #95	; 0x5f
   25a4a:	1aaa      	subs	r2, r5, r2
   25a4c:	4094      	lsls	r4, r2
   25a4e:	4323      	orrs	r3, r4
   25a50:	1e5c      	subs	r4, r3, #1
   25a52:	41a3      	sbcs	r3, r4
   25a54:	2507      	movs	r5, #7
   25a56:	4303      	orrs	r3, r0
   25a58:	401d      	ands	r5, r3
   25a5a:	2200      	movs	r2, #0
   25a5c:	2d00      	cmp	r5, #0
   25a5e:	d009      	beq.n	25a74 <__aeabi_dmul+0x4c4>
   25a60:	220f      	movs	r2, #15
   25a62:	2400      	movs	r4, #0
   25a64:	401a      	ands	r2, r3
   25a66:	0018      	movs	r0, r3
   25a68:	2a04      	cmp	r2, #4
   25a6a:	d1d6      	bne.n	25a1a <__aeabi_dmul+0x46a>
   25a6c:	0003      	movs	r3, r0
   25a6e:	0765      	lsls	r5, r4, #29
   25a70:	0264      	lsls	r4, r4, #9
   25a72:	0b22      	lsrs	r2, r4, #12
   25a74:	08db      	lsrs	r3, r3, #3
   25a76:	432b      	orrs	r3, r5
   25a78:	2501      	movs	r5, #1
   25a7a:	4699      	mov	r9, r3
   25a7c:	9b01      	ldr	r3, [sp, #4]
   25a7e:	2400      	movs	r4, #0
   25a80:	401d      	ands	r5, r3
   25a82:	e5fc      	b.n	2567e <__aeabi_dmul+0xce>
   25a84:	2400      	movs	r4, #0
   25a86:	e7e2      	b.n	25a4e <__aeabi_dmul+0x49e>
   25a88:	2280      	movs	r2, #128	; 0x80
   25a8a:	2501      	movs	r5, #1
   25a8c:	0312      	lsls	r2, r2, #12
   25a8e:	4322      	orrs	r2, r4
   25a90:	9901      	ldr	r1, [sp, #4]
   25a92:	0312      	lsls	r2, r2, #12
   25a94:	0b12      	lsrs	r2, r2, #12
   25a96:	400d      	ands	r5, r1
   25a98:	4699      	mov	r9, r3
   25a9a:	4c04      	ldr	r4, [pc, #16]	; (25aac <__aeabi_dmul+0x4fc>)
   25a9c:	e5ef      	b.n	2567e <__aeabi_dmul+0xce>
   25a9e:	46c0      	nop			; (mov r8, r8)
   25aa0:	000003ff 	.word	0x000003ff
   25aa4:	feffffff 	.word	0xfeffffff
   25aa8:	000007fe 	.word	0x000007fe
   25aac:	000007ff 	.word	0x000007ff

00025ab0 <__aeabi_dsub>:
   25ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ab2:	4646      	mov	r6, r8
   25ab4:	46d6      	mov	lr, sl
   25ab6:	464f      	mov	r7, r9
   25ab8:	030c      	lsls	r4, r1, #12
   25aba:	b5c0      	push	{r6, r7, lr}
   25abc:	0fcd      	lsrs	r5, r1, #31
   25abe:	004e      	lsls	r6, r1, #1
   25ac0:	0a61      	lsrs	r1, r4, #9
   25ac2:	0f44      	lsrs	r4, r0, #29
   25ac4:	430c      	orrs	r4, r1
   25ac6:	00c1      	lsls	r1, r0, #3
   25ac8:	0058      	lsls	r0, r3, #1
   25aca:	0d40      	lsrs	r0, r0, #21
   25acc:	4684      	mov	ip, r0
   25ace:	468a      	mov	sl, r1
   25ad0:	000f      	movs	r7, r1
   25ad2:	0319      	lsls	r1, r3, #12
   25ad4:	0f50      	lsrs	r0, r2, #29
   25ad6:	0a49      	lsrs	r1, r1, #9
   25ad8:	4301      	orrs	r1, r0
   25ada:	48c6      	ldr	r0, [pc, #792]	; (25df4 <__aeabi_dsub+0x344>)
   25adc:	0d76      	lsrs	r6, r6, #21
   25ade:	46a8      	mov	r8, r5
   25ae0:	0fdb      	lsrs	r3, r3, #31
   25ae2:	00d2      	lsls	r2, r2, #3
   25ae4:	4584      	cmp	ip, r0
   25ae6:	d100      	bne.n	25aea <__aeabi_dsub+0x3a>
   25ae8:	e0d8      	b.n	25c9c <__aeabi_dsub+0x1ec>
   25aea:	2001      	movs	r0, #1
   25aec:	4043      	eors	r3, r0
   25aee:	42ab      	cmp	r3, r5
   25af0:	d100      	bne.n	25af4 <__aeabi_dsub+0x44>
   25af2:	e0a6      	b.n	25c42 <__aeabi_dsub+0x192>
   25af4:	4660      	mov	r0, ip
   25af6:	1a35      	subs	r5, r6, r0
   25af8:	2d00      	cmp	r5, #0
   25afa:	dc00      	bgt.n	25afe <__aeabi_dsub+0x4e>
   25afc:	e105      	b.n	25d0a <__aeabi_dsub+0x25a>
   25afe:	2800      	cmp	r0, #0
   25b00:	d110      	bne.n	25b24 <__aeabi_dsub+0x74>
   25b02:	000b      	movs	r3, r1
   25b04:	4313      	orrs	r3, r2
   25b06:	d100      	bne.n	25b0a <__aeabi_dsub+0x5a>
   25b08:	e0d7      	b.n	25cba <__aeabi_dsub+0x20a>
   25b0a:	1e6b      	subs	r3, r5, #1
   25b0c:	2b00      	cmp	r3, #0
   25b0e:	d000      	beq.n	25b12 <__aeabi_dsub+0x62>
   25b10:	e14b      	b.n	25daa <__aeabi_dsub+0x2fa>
   25b12:	4653      	mov	r3, sl
   25b14:	1a9f      	subs	r7, r3, r2
   25b16:	45ba      	cmp	sl, r7
   25b18:	4180      	sbcs	r0, r0
   25b1a:	1a64      	subs	r4, r4, r1
   25b1c:	4240      	negs	r0, r0
   25b1e:	1a24      	subs	r4, r4, r0
   25b20:	2601      	movs	r6, #1
   25b22:	e01e      	b.n	25b62 <__aeabi_dsub+0xb2>
   25b24:	4bb3      	ldr	r3, [pc, #716]	; (25df4 <__aeabi_dsub+0x344>)
   25b26:	429e      	cmp	r6, r3
   25b28:	d048      	beq.n	25bbc <__aeabi_dsub+0x10c>
   25b2a:	2380      	movs	r3, #128	; 0x80
   25b2c:	041b      	lsls	r3, r3, #16
   25b2e:	4319      	orrs	r1, r3
   25b30:	2d38      	cmp	r5, #56	; 0x38
   25b32:	dd00      	ble.n	25b36 <__aeabi_dsub+0x86>
   25b34:	e119      	b.n	25d6a <__aeabi_dsub+0x2ba>
   25b36:	2d1f      	cmp	r5, #31
   25b38:	dd00      	ble.n	25b3c <__aeabi_dsub+0x8c>
   25b3a:	e14c      	b.n	25dd6 <__aeabi_dsub+0x326>
   25b3c:	2320      	movs	r3, #32
   25b3e:	000f      	movs	r7, r1
   25b40:	1b5b      	subs	r3, r3, r5
   25b42:	0010      	movs	r0, r2
   25b44:	409a      	lsls	r2, r3
   25b46:	409f      	lsls	r7, r3
   25b48:	40e8      	lsrs	r0, r5
   25b4a:	1e53      	subs	r3, r2, #1
   25b4c:	419a      	sbcs	r2, r3
   25b4e:	40e9      	lsrs	r1, r5
   25b50:	4307      	orrs	r7, r0
   25b52:	4317      	orrs	r7, r2
   25b54:	4653      	mov	r3, sl
   25b56:	1bdf      	subs	r7, r3, r7
   25b58:	1a61      	subs	r1, r4, r1
   25b5a:	45ba      	cmp	sl, r7
   25b5c:	41a4      	sbcs	r4, r4
   25b5e:	4264      	negs	r4, r4
   25b60:	1b0c      	subs	r4, r1, r4
   25b62:	0223      	lsls	r3, r4, #8
   25b64:	d400      	bmi.n	25b68 <__aeabi_dsub+0xb8>
   25b66:	e0c5      	b.n	25cf4 <__aeabi_dsub+0x244>
   25b68:	0264      	lsls	r4, r4, #9
   25b6a:	0a65      	lsrs	r5, r4, #9
   25b6c:	2d00      	cmp	r5, #0
   25b6e:	d100      	bne.n	25b72 <__aeabi_dsub+0xc2>
   25b70:	e0f6      	b.n	25d60 <__aeabi_dsub+0x2b0>
   25b72:	0028      	movs	r0, r5
   25b74:	f000 fb1e 	bl	261b4 <__clzsi2>
   25b78:	0003      	movs	r3, r0
   25b7a:	3b08      	subs	r3, #8
   25b7c:	2b1f      	cmp	r3, #31
   25b7e:	dd00      	ble.n	25b82 <__aeabi_dsub+0xd2>
   25b80:	e0e9      	b.n	25d56 <__aeabi_dsub+0x2a6>
   25b82:	2220      	movs	r2, #32
   25b84:	003c      	movs	r4, r7
   25b86:	1ad2      	subs	r2, r2, r3
   25b88:	409d      	lsls	r5, r3
   25b8a:	40d4      	lsrs	r4, r2
   25b8c:	409f      	lsls	r7, r3
   25b8e:	4325      	orrs	r5, r4
   25b90:	429e      	cmp	r6, r3
   25b92:	dd00      	ble.n	25b96 <__aeabi_dsub+0xe6>
   25b94:	e0db      	b.n	25d4e <__aeabi_dsub+0x29e>
   25b96:	1b9e      	subs	r6, r3, r6
   25b98:	1c73      	adds	r3, r6, #1
   25b9a:	2b1f      	cmp	r3, #31
   25b9c:	dd00      	ble.n	25ba0 <__aeabi_dsub+0xf0>
   25b9e:	e10a      	b.n	25db6 <__aeabi_dsub+0x306>
   25ba0:	2220      	movs	r2, #32
   25ba2:	0038      	movs	r0, r7
   25ba4:	1ad2      	subs	r2, r2, r3
   25ba6:	0029      	movs	r1, r5
   25ba8:	4097      	lsls	r7, r2
   25baa:	002c      	movs	r4, r5
   25bac:	4091      	lsls	r1, r2
   25bae:	40d8      	lsrs	r0, r3
   25bb0:	1e7a      	subs	r2, r7, #1
   25bb2:	4197      	sbcs	r7, r2
   25bb4:	40dc      	lsrs	r4, r3
   25bb6:	2600      	movs	r6, #0
   25bb8:	4301      	orrs	r1, r0
   25bba:	430f      	orrs	r7, r1
   25bbc:	077b      	lsls	r3, r7, #29
   25bbe:	d009      	beq.n	25bd4 <__aeabi_dsub+0x124>
   25bc0:	230f      	movs	r3, #15
   25bc2:	403b      	ands	r3, r7
   25bc4:	2b04      	cmp	r3, #4
   25bc6:	d005      	beq.n	25bd4 <__aeabi_dsub+0x124>
   25bc8:	1d3b      	adds	r3, r7, #4
   25bca:	42bb      	cmp	r3, r7
   25bcc:	41bf      	sbcs	r7, r7
   25bce:	427f      	negs	r7, r7
   25bd0:	19e4      	adds	r4, r4, r7
   25bd2:	001f      	movs	r7, r3
   25bd4:	0223      	lsls	r3, r4, #8
   25bd6:	d525      	bpl.n	25c24 <__aeabi_dsub+0x174>
   25bd8:	4b86      	ldr	r3, [pc, #536]	; (25df4 <__aeabi_dsub+0x344>)
   25bda:	3601      	adds	r6, #1
   25bdc:	429e      	cmp	r6, r3
   25bde:	d100      	bne.n	25be2 <__aeabi_dsub+0x132>
   25be0:	e0af      	b.n	25d42 <__aeabi_dsub+0x292>
   25be2:	4b85      	ldr	r3, [pc, #532]	; (25df8 <__aeabi_dsub+0x348>)
   25be4:	2501      	movs	r5, #1
   25be6:	401c      	ands	r4, r3
   25be8:	4643      	mov	r3, r8
   25bea:	0762      	lsls	r2, r4, #29
   25bec:	08ff      	lsrs	r7, r7, #3
   25bee:	0264      	lsls	r4, r4, #9
   25bf0:	0576      	lsls	r6, r6, #21
   25bf2:	4317      	orrs	r7, r2
   25bf4:	0b24      	lsrs	r4, r4, #12
   25bf6:	0d76      	lsrs	r6, r6, #21
   25bf8:	401d      	ands	r5, r3
   25bfa:	2100      	movs	r1, #0
   25bfc:	0324      	lsls	r4, r4, #12
   25bfe:	0b23      	lsrs	r3, r4, #12
   25c00:	0d0c      	lsrs	r4, r1, #20
   25c02:	4a7e      	ldr	r2, [pc, #504]	; (25dfc <__aeabi_dsub+0x34c>)
   25c04:	0524      	lsls	r4, r4, #20
   25c06:	431c      	orrs	r4, r3
   25c08:	4014      	ands	r4, r2
   25c0a:	0533      	lsls	r3, r6, #20
   25c0c:	4323      	orrs	r3, r4
   25c0e:	005b      	lsls	r3, r3, #1
   25c10:	07ed      	lsls	r5, r5, #31
   25c12:	085b      	lsrs	r3, r3, #1
   25c14:	432b      	orrs	r3, r5
   25c16:	0038      	movs	r0, r7
   25c18:	0019      	movs	r1, r3
   25c1a:	bc1c      	pop	{r2, r3, r4}
   25c1c:	4690      	mov	r8, r2
   25c1e:	4699      	mov	r9, r3
   25c20:	46a2      	mov	sl, r4
   25c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25c24:	2501      	movs	r5, #1
   25c26:	4643      	mov	r3, r8
   25c28:	0762      	lsls	r2, r4, #29
   25c2a:	08ff      	lsrs	r7, r7, #3
   25c2c:	4317      	orrs	r7, r2
   25c2e:	08e4      	lsrs	r4, r4, #3
   25c30:	401d      	ands	r5, r3
   25c32:	4b70      	ldr	r3, [pc, #448]	; (25df4 <__aeabi_dsub+0x344>)
   25c34:	429e      	cmp	r6, r3
   25c36:	d036      	beq.n	25ca6 <__aeabi_dsub+0x1f6>
   25c38:	0324      	lsls	r4, r4, #12
   25c3a:	0576      	lsls	r6, r6, #21
   25c3c:	0b24      	lsrs	r4, r4, #12
   25c3e:	0d76      	lsrs	r6, r6, #21
   25c40:	e7db      	b.n	25bfa <__aeabi_dsub+0x14a>
   25c42:	4663      	mov	r3, ip
   25c44:	1af3      	subs	r3, r6, r3
   25c46:	2b00      	cmp	r3, #0
   25c48:	dc00      	bgt.n	25c4c <__aeabi_dsub+0x19c>
   25c4a:	e094      	b.n	25d76 <__aeabi_dsub+0x2c6>
   25c4c:	4660      	mov	r0, ip
   25c4e:	2800      	cmp	r0, #0
   25c50:	d035      	beq.n	25cbe <__aeabi_dsub+0x20e>
   25c52:	4868      	ldr	r0, [pc, #416]	; (25df4 <__aeabi_dsub+0x344>)
   25c54:	4286      	cmp	r6, r0
   25c56:	d0b1      	beq.n	25bbc <__aeabi_dsub+0x10c>
   25c58:	2780      	movs	r7, #128	; 0x80
   25c5a:	043f      	lsls	r7, r7, #16
   25c5c:	4339      	orrs	r1, r7
   25c5e:	2b38      	cmp	r3, #56	; 0x38
   25c60:	dc00      	bgt.n	25c64 <__aeabi_dsub+0x1b4>
   25c62:	e0fd      	b.n	25e60 <__aeabi_dsub+0x3b0>
   25c64:	430a      	orrs	r2, r1
   25c66:	0017      	movs	r7, r2
   25c68:	2100      	movs	r1, #0
   25c6a:	1e7a      	subs	r2, r7, #1
   25c6c:	4197      	sbcs	r7, r2
   25c6e:	4457      	add	r7, sl
   25c70:	4557      	cmp	r7, sl
   25c72:	4180      	sbcs	r0, r0
   25c74:	1909      	adds	r1, r1, r4
   25c76:	4244      	negs	r4, r0
   25c78:	190c      	adds	r4, r1, r4
   25c7a:	0223      	lsls	r3, r4, #8
   25c7c:	d53a      	bpl.n	25cf4 <__aeabi_dsub+0x244>
   25c7e:	4b5d      	ldr	r3, [pc, #372]	; (25df4 <__aeabi_dsub+0x344>)
   25c80:	3601      	adds	r6, #1
   25c82:	429e      	cmp	r6, r3
   25c84:	d100      	bne.n	25c88 <__aeabi_dsub+0x1d8>
   25c86:	e14b      	b.n	25f20 <__aeabi_dsub+0x470>
   25c88:	2201      	movs	r2, #1
   25c8a:	4b5b      	ldr	r3, [pc, #364]	; (25df8 <__aeabi_dsub+0x348>)
   25c8c:	401c      	ands	r4, r3
   25c8e:	087b      	lsrs	r3, r7, #1
   25c90:	4017      	ands	r7, r2
   25c92:	431f      	orrs	r7, r3
   25c94:	07e2      	lsls	r2, r4, #31
   25c96:	4317      	orrs	r7, r2
   25c98:	0864      	lsrs	r4, r4, #1
   25c9a:	e78f      	b.n	25bbc <__aeabi_dsub+0x10c>
   25c9c:	0008      	movs	r0, r1
   25c9e:	4310      	orrs	r0, r2
   25ca0:	d000      	beq.n	25ca4 <__aeabi_dsub+0x1f4>
   25ca2:	e724      	b.n	25aee <__aeabi_dsub+0x3e>
   25ca4:	e721      	b.n	25aea <__aeabi_dsub+0x3a>
   25ca6:	0023      	movs	r3, r4
   25ca8:	433b      	orrs	r3, r7
   25caa:	d100      	bne.n	25cae <__aeabi_dsub+0x1fe>
   25cac:	e1b9      	b.n	26022 <__aeabi_dsub+0x572>
   25cae:	2280      	movs	r2, #128	; 0x80
   25cb0:	0312      	lsls	r2, r2, #12
   25cb2:	4314      	orrs	r4, r2
   25cb4:	0324      	lsls	r4, r4, #12
   25cb6:	0b24      	lsrs	r4, r4, #12
   25cb8:	e79f      	b.n	25bfa <__aeabi_dsub+0x14a>
   25cba:	002e      	movs	r6, r5
   25cbc:	e77e      	b.n	25bbc <__aeabi_dsub+0x10c>
   25cbe:	0008      	movs	r0, r1
   25cc0:	4310      	orrs	r0, r2
   25cc2:	d100      	bne.n	25cc6 <__aeabi_dsub+0x216>
   25cc4:	e0ca      	b.n	25e5c <__aeabi_dsub+0x3ac>
   25cc6:	1e58      	subs	r0, r3, #1
   25cc8:	4684      	mov	ip, r0
   25cca:	2800      	cmp	r0, #0
   25ccc:	d000      	beq.n	25cd0 <__aeabi_dsub+0x220>
   25cce:	e0e7      	b.n	25ea0 <__aeabi_dsub+0x3f0>
   25cd0:	4452      	add	r2, sl
   25cd2:	4552      	cmp	r2, sl
   25cd4:	4180      	sbcs	r0, r0
   25cd6:	1864      	adds	r4, r4, r1
   25cd8:	4240      	negs	r0, r0
   25cda:	1824      	adds	r4, r4, r0
   25cdc:	0017      	movs	r7, r2
   25cde:	2601      	movs	r6, #1
   25ce0:	0223      	lsls	r3, r4, #8
   25ce2:	d507      	bpl.n	25cf4 <__aeabi_dsub+0x244>
   25ce4:	2602      	movs	r6, #2
   25ce6:	e7cf      	b.n	25c88 <__aeabi_dsub+0x1d8>
   25ce8:	4664      	mov	r4, ip
   25cea:	432c      	orrs	r4, r5
   25cec:	d100      	bne.n	25cf0 <__aeabi_dsub+0x240>
   25cee:	e1b3      	b.n	26058 <__aeabi_dsub+0x5a8>
   25cf0:	002c      	movs	r4, r5
   25cf2:	4667      	mov	r7, ip
   25cf4:	077b      	lsls	r3, r7, #29
   25cf6:	d000      	beq.n	25cfa <__aeabi_dsub+0x24a>
   25cf8:	e762      	b.n	25bc0 <__aeabi_dsub+0x110>
   25cfa:	0763      	lsls	r3, r4, #29
   25cfc:	08ff      	lsrs	r7, r7, #3
   25cfe:	431f      	orrs	r7, r3
   25d00:	2501      	movs	r5, #1
   25d02:	4643      	mov	r3, r8
   25d04:	08e4      	lsrs	r4, r4, #3
   25d06:	401d      	ands	r5, r3
   25d08:	e793      	b.n	25c32 <__aeabi_dsub+0x182>
   25d0a:	2d00      	cmp	r5, #0
   25d0c:	d178      	bne.n	25e00 <__aeabi_dsub+0x350>
   25d0e:	1c75      	adds	r5, r6, #1
   25d10:	056d      	lsls	r5, r5, #21
   25d12:	0d6d      	lsrs	r5, r5, #21
   25d14:	2d01      	cmp	r5, #1
   25d16:	dc00      	bgt.n	25d1a <__aeabi_dsub+0x26a>
   25d18:	e0f2      	b.n	25f00 <__aeabi_dsub+0x450>
   25d1a:	4650      	mov	r0, sl
   25d1c:	1a80      	subs	r0, r0, r2
   25d1e:	4582      	cmp	sl, r0
   25d20:	41bf      	sbcs	r7, r7
   25d22:	1a65      	subs	r5, r4, r1
   25d24:	427f      	negs	r7, r7
   25d26:	1bed      	subs	r5, r5, r7
   25d28:	4684      	mov	ip, r0
   25d2a:	0228      	lsls	r0, r5, #8
   25d2c:	d400      	bmi.n	25d30 <__aeabi_dsub+0x280>
   25d2e:	e08c      	b.n	25e4a <__aeabi_dsub+0x39a>
   25d30:	4650      	mov	r0, sl
   25d32:	1a17      	subs	r7, r2, r0
   25d34:	42ba      	cmp	r2, r7
   25d36:	4192      	sbcs	r2, r2
   25d38:	1b0c      	subs	r4, r1, r4
   25d3a:	4255      	negs	r5, r2
   25d3c:	1b65      	subs	r5, r4, r5
   25d3e:	4698      	mov	r8, r3
   25d40:	e714      	b.n	25b6c <__aeabi_dsub+0xbc>
   25d42:	2501      	movs	r5, #1
   25d44:	4643      	mov	r3, r8
   25d46:	2400      	movs	r4, #0
   25d48:	401d      	ands	r5, r3
   25d4a:	2700      	movs	r7, #0
   25d4c:	e755      	b.n	25bfa <__aeabi_dsub+0x14a>
   25d4e:	4c2a      	ldr	r4, [pc, #168]	; (25df8 <__aeabi_dsub+0x348>)
   25d50:	1af6      	subs	r6, r6, r3
   25d52:	402c      	ands	r4, r5
   25d54:	e732      	b.n	25bbc <__aeabi_dsub+0x10c>
   25d56:	003d      	movs	r5, r7
   25d58:	3828      	subs	r0, #40	; 0x28
   25d5a:	4085      	lsls	r5, r0
   25d5c:	2700      	movs	r7, #0
   25d5e:	e717      	b.n	25b90 <__aeabi_dsub+0xe0>
   25d60:	0038      	movs	r0, r7
   25d62:	f000 fa27 	bl	261b4 <__clzsi2>
   25d66:	3020      	adds	r0, #32
   25d68:	e706      	b.n	25b78 <__aeabi_dsub+0xc8>
   25d6a:	430a      	orrs	r2, r1
   25d6c:	0017      	movs	r7, r2
   25d6e:	2100      	movs	r1, #0
   25d70:	1e7a      	subs	r2, r7, #1
   25d72:	4197      	sbcs	r7, r2
   25d74:	e6ee      	b.n	25b54 <__aeabi_dsub+0xa4>
   25d76:	2b00      	cmp	r3, #0
   25d78:	d000      	beq.n	25d7c <__aeabi_dsub+0x2cc>
   25d7a:	e0e5      	b.n	25f48 <__aeabi_dsub+0x498>
   25d7c:	1c73      	adds	r3, r6, #1
   25d7e:	469c      	mov	ip, r3
   25d80:	055b      	lsls	r3, r3, #21
   25d82:	0d5b      	lsrs	r3, r3, #21
   25d84:	2b01      	cmp	r3, #1
   25d86:	dc00      	bgt.n	25d8a <__aeabi_dsub+0x2da>
   25d88:	e09f      	b.n	25eca <__aeabi_dsub+0x41a>
   25d8a:	4b1a      	ldr	r3, [pc, #104]	; (25df4 <__aeabi_dsub+0x344>)
   25d8c:	459c      	cmp	ip, r3
   25d8e:	d100      	bne.n	25d92 <__aeabi_dsub+0x2e2>
   25d90:	e0c5      	b.n	25f1e <__aeabi_dsub+0x46e>
   25d92:	4452      	add	r2, sl
   25d94:	4552      	cmp	r2, sl
   25d96:	4180      	sbcs	r0, r0
   25d98:	1864      	adds	r4, r4, r1
   25d9a:	4240      	negs	r0, r0
   25d9c:	1824      	adds	r4, r4, r0
   25d9e:	07e7      	lsls	r7, r4, #31
   25da0:	0852      	lsrs	r2, r2, #1
   25da2:	4317      	orrs	r7, r2
   25da4:	0864      	lsrs	r4, r4, #1
   25da6:	4666      	mov	r6, ip
   25da8:	e708      	b.n	25bbc <__aeabi_dsub+0x10c>
   25daa:	4812      	ldr	r0, [pc, #72]	; (25df4 <__aeabi_dsub+0x344>)
   25dac:	4285      	cmp	r5, r0
   25dae:	d100      	bne.n	25db2 <__aeabi_dsub+0x302>
   25db0:	e085      	b.n	25ebe <__aeabi_dsub+0x40e>
   25db2:	001d      	movs	r5, r3
   25db4:	e6bc      	b.n	25b30 <__aeabi_dsub+0x80>
   25db6:	0029      	movs	r1, r5
   25db8:	3e1f      	subs	r6, #31
   25dba:	40f1      	lsrs	r1, r6
   25dbc:	2b20      	cmp	r3, #32
   25dbe:	d100      	bne.n	25dc2 <__aeabi_dsub+0x312>
   25dc0:	e07f      	b.n	25ec2 <__aeabi_dsub+0x412>
   25dc2:	2240      	movs	r2, #64	; 0x40
   25dc4:	1ad3      	subs	r3, r2, r3
   25dc6:	409d      	lsls	r5, r3
   25dc8:	432f      	orrs	r7, r5
   25dca:	1e7d      	subs	r5, r7, #1
   25dcc:	41af      	sbcs	r7, r5
   25dce:	2400      	movs	r4, #0
   25dd0:	430f      	orrs	r7, r1
   25dd2:	2600      	movs	r6, #0
   25dd4:	e78e      	b.n	25cf4 <__aeabi_dsub+0x244>
   25dd6:	002b      	movs	r3, r5
   25dd8:	000f      	movs	r7, r1
   25dda:	3b20      	subs	r3, #32
   25ddc:	40df      	lsrs	r7, r3
   25dde:	2d20      	cmp	r5, #32
   25de0:	d071      	beq.n	25ec6 <__aeabi_dsub+0x416>
   25de2:	2340      	movs	r3, #64	; 0x40
   25de4:	1b5d      	subs	r5, r3, r5
   25de6:	40a9      	lsls	r1, r5
   25de8:	430a      	orrs	r2, r1
   25dea:	1e51      	subs	r1, r2, #1
   25dec:	418a      	sbcs	r2, r1
   25dee:	2100      	movs	r1, #0
   25df0:	4317      	orrs	r7, r2
   25df2:	e6af      	b.n	25b54 <__aeabi_dsub+0xa4>
   25df4:	000007ff 	.word	0x000007ff
   25df8:	ff7fffff 	.word	0xff7fffff
   25dfc:	800fffff 	.word	0x800fffff
   25e00:	2e00      	cmp	r6, #0
   25e02:	d03e      	beq.n	25e82 <__aeabi_dsub+0x3d2>
   25e04:	4eb3      	ldr	r6, [pc, #716]	; (260d4 <__aeabi_dsub+0x624>)
   25e06:	45b4      	cmp	ip, r6
   25e08:	d045      	beq.n	25e96 <__aeabi_dsub+0x3e6>
   25e0a:	2680      	movs	r6, #128	; 0x80
   25e0c:	0436      	lsls	r6, r6, #16
   25e0e:	426d      	negs	r5, r5
   25e10:	4334      	orrs	r4, r6
   25e12:	2d38      	cmp	r5, #56	; 0x38
   25e14:	dd00      	ble.n	25e18 <__aeabi_dsub+0x368>
   25e16:	e0a8      	b.n	25f6a <__aeabi_dsub+0x4ba>
   25e18:	2d1f      	cmp	r5, #31
   25e1a:	dd00      	ble.n	25e1e <__aeabi_dsub+0x36e>
   25e1c:	e11f      	b.n	2605e <__aeabi_dsub+0x5ae>
   25e1e:	2620      	movs	r6, #32
   25e20:	0027      	movs	r7, r4
   25e22:	4650      	mov	r0, sl
   25e24:	1b76      	subs	r6, r6, r5
   25e26:	40b7      	lsls	r7, r6
   25e28:	40e8      	lsrs	r0, r5
   25e2a:	4307      	orrs	r7, r0
   25e2c:	4650      	mov	r0, sl
   25e2e:	40b0      	lsls	r0, r6
   25e30:	1e46      	subs	r6, r0, #1
   25e32:	41b0      	sbcs	r0, r6
   25e34:	40ec      	lsrs	r4, r5
   25e36:	4338      	orrs	r0, r7
   25e38:	1a17      	subs	r7, r2, r0
   25e3a:	42ba      	cmp	r2, r7
   25e3c:	4192      	sbcs	r2, r2
   25e3e:	1b0c      	subs	r4, r1, r4
   25e40:	4252      	negs	r2, r2
   25e42:	1aa4      	subs	r4, r4, r2
   25e44:	4666      	mov	r6, ip
   25e46:	4698      	mov	r8, r3
   25e48:	e68b      	b.n	25b62 <__aeabi_dsub+0xb2>
   25e4a:	4664      	mov	r4, ip
   25e4c:	4667      	mov	r7, ip
   25e4e:	432c      	orrs	r4, r5
   25e50:	d000      	beq.n	25e54 <__aeabi_dsub+0x3a4>
   25e52:	e68b      	b.n	25b6c <__aeabi_dsub+0xbc>
   25e54:	2500      	movs	r5, #0
   25e56:	2600      	movs	r6, #0
   25e58:	2700      	movs	r7, #0
   25e5a:	e6ea      	b.n	25c32 <__aeabi_dsub+0x182>
   25e5c:	001e      	movs	r6, r3
   25e5e:	e6ad      	b.n	25bbc <__aeabi_dsub+0x10c>
   25e60:	2b1f      	cmp	r3, #31
   25e62:	dc60      	bgt.n	25f26 <__aeabi_dsub+0x476>
   25e64:	2720      	movs	r7, #32
   25e66:	1af8      	subs	r0, r7, r3
   25e68:	000f      	movs	r7, r1
   25e6a:	4684      	mov	ip, r0
   25e6c:	4087      	lsls	r7, r0
   25e6e:	0010      	movs	r0, r2
   25e70:	40d8      	lsrs	r0, r3
   25e72:	4307      	orrs	r7, r0
   25e74:	4660      	mov	r0, ip
   25e76:	4082      	lsls	r2, r0
   25e78:	1e50      	subs	r0, r2, #1
   25e7a:	4182      	sbcs	r2, r0
   25e7c:	40d9      	lsrs	r1, r3
   25e7e:	4317      	orrs	r7, r2
   25e80:	e6f5      	b.n	25c6e <__aeabi_dsub+0x1be>
   25e82:	0026      	movs	r6, r4
   25e84:	4650      	mov	r0, sl
   25e86:	4306      	orrs	r6, r0
   25e88:	d005      	beq.n	25e96 <__aeabi_dsub+0x3e6>
   25e8a:	43ed      	mvns	r5, r5
   25e8c:	2d00      	cmp	r5, #0
   25e8e:	d0d3      	beq.n	25e38 <__aeabi_dsub+0x388>
   25e90:	4e90      	ldr	r6, [pc, #576]	; (260d4 <__aeabi_dsub+0x624>)
   25e92:	45b4      	cmp	ip, r6
   25e94:	d1bd      	bne.n	25e12 <__aeabi_dsub+0x362>
   25e96:	000c      	movs	r4, r1
   25e98:	0017      	movs	r7, r2
   25e9a:	4666      	mov	r6, ip
   25e9c:	4698      	mov	r8, r3
   25e9e:	e68d      	b.n	25bbc <__aeabi_dsub+0x10c>
   25ea0:	488c      	ldr	r0, [pc, #560]	; (260d4 <__aeabi_dsub+0x624>)
   25ea2:	4283      	cmp	r3, r0
   25ea4:	d00b      	beq.n	25ebe <__aeabi_dsub+0x40e>
   25ea6:	4663      	mov	r3, ip
   25ea8:	e6d9      	b.n	25c5e <__aeabi_dsub+0x1ae>
   25eaa:	2d00      	cmp	r5, #0
   25eac:	d000      	beq.n	25eb0 <__aeabi_dsub+0x400>
   25eae:	e096      	b.n	25fde <__aeabi_dsub+0x52e>
   25eb0:	0008      	movs	r0, r1
   25eb2:	4310      	orrs	r0, r2
   25eb4:	d100      	bne.n	25eb8 <__aeabi_dsub+0x408>
   25eb6:	e0e2      	b.n	2607e <__aeabi_dsub+0x5ce>
   25eb8:	000c      	movs	r4, r1
   25eba:	0017      	movs	r7, r2
   25ebc:	4698      	mov	r8, r3
   25ebe:	4e85      	ldr	r6, [pc, #532]	; (260d4 <__aeabi_dsub+0x624>)
   25ec0:	e67c      	b.n	25bbc <__aeabi_dsub+0x10c>
   25ec2:	2500      	movs	r5, #0
   25ec4:	e780      	b.n	25dc8 <__aeabi_dsub+0x318>
   25ec6:	2100      	movs	r1, #0
   25ec8:	e78e      	b.n	25de8 <__aeabi_dsub+0x338>
   25eca:	0023      	movs	r3, r4
   25ecc:	4650      	mov	r0, sl
   25ece:	4303      	orrs	r3, r0
   25ed0:	2e00      	cmp	r6, #0
   25ed2:	d000      	beq.n	25ed6 <__aeabi_dsub+0x426>
   25ed4:	e0a8      	b.n	26028 <__aeabi_dsub+0x578>
   25ed6:	2b00      	cmp	r3, #0
   25ed8:	d100      	bne.n	25edc <__aeabi_dsub+0x42c>
   25eda:	e0de      	b.n	2609a <__aeabi_dsub+0x5ea>
   25edc:	000b      	movs	r3, r1
   25ede:	4313      	orrs	r3, r2
   25ee0:	d100      	bne.n	25ee4 <__aeabi_dsub+0x434>
   25ee2:	e66b      	b.n	25bbc <__aeabi_dsub+0x10c>
   25ee4:	4452      	add	r2, sl
   25ee6:	4552      	cmp	r2, sl
   25ee8:	4180      	sbcs	r0, r0
   25eea:	1864      	adds	r4, r4, r1
   25eec:	4240      	negs	r0, r0
   25eee:	1824      	adds	r4, r4, r0
   25ef0:	0017      	movs	r7, r2
   25ef2:	0223      	lsls	r3, r4, #8
   25ef4:	d400      	bmi.n	25ef8 <__aeabi_dsub+0x448>
   25ef6:	e6fd      	b.n	25cf4 <__aeabi_dsub+0x244>
   25ef8:	4b77      	ldr	r3, [pc, #476]	; (260d8 <__aeabi_dsub+0x628>)
   25efa:	4666      	mov	r6, ip
   25efc:	401c      	ands	r4, r3
   25efe:	e65d      	b.n	25bbc <__aeabi_dsub+0x10c>
   25f00:	0025      	movs	r5, r4
   25f02:	4650      	mov	r0, sl
   25f04:	4305      	orrs	r5, r0
   25f06:	2e00      	cmp	r6, #0
   25f08:	d1cf      	bne.n	25eaa <__aeabi_dsub+0x3fa>
   25f0a:	2d00      	cmp	r5, #0
   25f0c:	d14f      	bne.n	25fae <__aeabi_dsub+0x4fe>
   25f0e:	000c      	movs	r4, r1
   25f10:	4314      	orrs	r4, r2
   25f12:	d100      	bne.n	25f16 <__aeabi_dsub+0x466>
   25f14:	e0a0      	b.n	26058 <__aeabi_dsub+0x5a8>
   25f16:	000c      	movs	r4, r1
   25f18:	0017      	movs	r7, r2
   25f1a:	4698      	mov	r8, r3
   25f1c:	e64e      	b.n	25bbc <__aeabi_dsub+0x10c>
   25f1e:	4666      	mov	r6, ip
   25f20:	2400      	movs	r4, #0
   25f22:	2700      	movs	r7, #0
   25f24:	e685      	b.n	25c32 <__aeabi_dsub+0x182>
   25f26:	001f      	movs	r7, r3
   25f28:	0008      	movs	r0, r1
   25f2a:	3f20      	subs	r7, #32
   25f2c:	40f8      	lsrs	r0, r7
   25f2e:	0007      	movs	r7, r0
   25f30:	2b20      	cmp	r3, #32
   25f32:	d100      	bne.n	25f36 <__aeabi_dsub+0x486>
   25f34:	e08e      	b.n	26054 <__aeabi_dsub+0x5a4>
   25f36:	2040      	movs	r0, #64	; 0x40
   25f38:	1ac3      	subs	r3, r0, r3
   25f3a:	4099      	lsls	r1, r3
   25f3c:	430a      	orrs	r2, r1
   25f3e:	1e51      	subs	r1, r2, #1
   25f40:	418a      	sbcs	r2, r1
   25f42:	2100      	movs	r1, #0
   25f44:	4317      	orrs	r7, r2
   25f46:	e692      	b.n	25c6e <__aeabi_dsub+0x1be>
   25f48:	2e00      	cmp	r6, #0
   25f4a:	d114      	bne.n	25f76 <__aeabi_dsub+0x4c6>
   25f4c:	0026      	movs	r6, r4
   25f4e:	4650      	mov	r0, sl
   25f50:	4306      	orrs	r6, r0
   25f52:	d062      	beq.n	2601a <__aeabi_dsub+0x56a>
   25f54:	43db      	mvns	r3, r3
   25f56:	2b00      	cmp	r3, #0
   25f58:	d15c      	bne.n	26014 <__aeabi_dsub+0x564>
   25f5a:	1887      	adds	r7, r0, r2
   25f5c:	4297      	cmp	r7, r2
   25f5e:	4192      	sbcs	r2, r2
   25f60:	1864      	adds	r4, r4, r1
   25f62:	4252      	negs	r2, r2
   25f64:	18a4      	adds	r4, r4, r2
   25f66:	4666      	mov	r6, ip
   25f68:	e687      	b.n	25c7a <__aeabi_dsub+0x1ca>
   25f6a:	4650      	mov	r0, sl
   25f6c:	4320      	orrs	r0, r4
   25f6e:	1e44      	subs	r4, r0, #1
   25f70:	41a0      	sbcs	r0, r4
   25f72:	2400      	movs	r4, #0
   25f74:	e760      	b.n	25e38 <__aeabi_dsub+0x388>
   25f76:	4e57      	ldr	r6, [pc, #348]	; (260d4 <__aeabi_dsub+0x624>)
   25f78:	45b4      	cmp	ip, r6
   25f7a:	d04e      	beq.n	2601a <__aeabi_dsub+0x56a>
   25f7c:	2680      	movs	r6, #128	; 0x80
   25f7e:	0436      	lsls	r6, r6, #16
   25f80:	425b      	negs	r3, r3
   25f82:	4334      	orrs	r4, r6
   25f84:	2b38      	cmp	r3, #56	; 0x38
   25f86:	dd00      	ble.n	25f8a <__aeabi_dsub+0x4da>
   25f88:	e07f      	b.n	2608a <__aeabi_dsub+0x5da>
   25f8a:	2b1f      	cmp	r3, #31
   25f8c:	dd00      	ble.n	25f90 <__aeabi_dsub+0x4e0>
   25f8e:	e08b      	b.n	260a8 <__aeabi_dsub+0x5f8>
   25f90:	2620      	movs	r6, #32
   25f92:	0027      	movs	r7, r4
   25f94:	4650      	mov	r0, sl
   25f96:	1af6      	subs	r6, r6, r3
   25f98:	40b7      	lsls	r7, r6
   25f9a:	40d8      	lsrs	r0, r3
   25f9c:	4307      	orrs	r7, r0
   25f9e:	4650      	mov	r0, sl
   25fa0:	40b0      	lsls	r0, r6
   25fa2:	1e46      	subs	r6, r0, #1
   25fa4:	41b0      	sbcs	r0, r6
   25fa6:	4307      	orrs	r7, r0
   25fa8:	40dc      	lsrs	r4, r3
   25faa:	18bf      	adds	r7, r7, r2
   25fac:	e7d6      	b.n	25f5c <__aeabi_dsub+0x4ac>
   25fae:	000d      	movs	r5, r1
   25fb0:	4315      	orrs	r5, r2
   25fb2:	d100      	bne.n	25fb6 <__aeabi_dsub+0x506>
   25fb4:	e602      	b.n	25bbc <__aeabi_dsub+0x10c>
   25fb6:	4650      	mov	r0, sl
   25fb8:	1a80      	subs	r0, r0, r2
   25fba:	4582      	cmp	sl, r0
   25fbc:	41bf      	sbcs	r7, r7
   25fbe:	1a65      	subs	r5, r4, r1
   25fc0:	427f      	negs	r7, r7
   25fc2:	1bed      	subs	r5, r5, r7
   25fc4:	4684      	mov	ip, r0
   25fc6:	0228      	lsls	r0, r5, #8
   25fc8:	d400      	bmi.n	25fcc <__aeabi_dsub+0x51c>
   25fca:	e68d      	b.n	25ce8 <__aeabi_dsub+0x238>
   25fcc:	4650      	mov	r0, sl
   25fce:	1a17      	subs	r7, r2, r0
   25fd0:	42ba      	cmp	r2, r7
   25fd2:	4192      	sbcs	r2, r2
   25fd4:	1b0c      	subs	r4, r1, r4
   25fd6:	4252      	negs	r2, r2
   25fd8:	1aa4      	subs	r4, r4, r2
   25fda:	4698      	mov	r8, r3
   25fdc:	e5ee      	b.n	25bbc <__aeabi_dsub+0x10c>
   25fde:	000d      	movs	r5, r1
   25fe0:	4315      	orrs	r5, r2
   25fe2:	d100      	bne.n	25fe6 <__aeabi_dsub+0x536>
   25fe4:	e76b      	b.n	25ebe <__aeabi_dsub+0x40e>
   25fe6:	4650      	mov	r0, sl
   25fe8:	0767      	lsls	r7, r4, #29
   25fea:	08c0      	lsrs	r0, r0, #3
   25fec:	4307      	orrs	r7, r0
   25fee:	2080      	movs	r0, #128	; 0x80
   25ff0:	08e4      	lsrs	r4, r4, #3
   25ff2:	0300      	lsls	r0, r0, #12
   25ff4:	4204      	tst	r4, r0
   25ff6:	d007      	beq.n	26008 <__aeabi_dsub+0x558>
   25ff8:	08cd      	lsrs	r5, r1, #3
   25ffa:	4205      	tst	r5, r0
   25ffc:	d104      	bne.n	26008 <__aeabi_dsub+0x558>
   25ffe:	002c      	movs	r4, r5
   26000:	4698      	mov	r8, r3
   26002:	08d7      	lsrs	r7, r2, #3
   26004:	0749      	lsls	r1, r1, #29
   26006:	430f      	orrs	r7, r1
   26008:	0f7b      	lsrs	r3, r7, #29
   2600a:	00e4      	lsls	r4, r4, #3
   2600c:	431c      	orrs	r4, r3
   2600e:	00ff      	lsls	r7, r7, #3
   26010:	4e30      	ldr	r6, [pc, #192]	; (260d4 <__aeabi_dsub+0x624>)
   26012:	e5d3      	b.n	25bbc <__aeabi_dsub+0x10c>
   26014:	4e2f      	ldr	r6, [pc, #188]	; (260d4 <__aeabi_dsub+0x624>)
   26016:	45b4      	cmp	ip, r6
   26018:	d1b4      	bne.n	25f84 <__aeabi_dsub+0x4d4>
   2601a:	000c      	movs	r4, r1
   2601c:	0017      	movs	r7, r2
   2601e:	4666      	mov	r6, ip
   26020:	e5cc      	b.n	25bbc <__aeabi_dsub+0x10c>
   26022:	2700      	movs	r7, #0
   26024:	2400      	movs	r4, #0
   26026:	e5e8      	b.n	25bfa <__aeabi_dsub+0x14a>
   26028:	2b00      	cmp	r3, #0
   2602a:	d039      	beq.n	260a0 <__aeabi_dsub+0x5f0>
   2602c:	000b      	movs	r3, r1
   2602e:	4313      	orrs	r3, r2
   26030:	d100      	bne.n	26034 <__aeabi_dsub+0x584>
   26032:	e744      	b.n	25ebe <__aeabi_dsub+0x40e>
   26034:	08c0      	lsrs	r0, r0, #3
   26036:	0767      	lsls	r7, r4, #29
   26038:	4307      	orrs	r7, r0
   2603a:	2080      	movs	r0, #128	; 0x80
   2603c:	08e4      	lsrs	r4, r4, #3
   2603e:	0300      	lsls	r0, r0, #12
   26040:	4204      	tst	r4, r0
   26042:	d0e1      	beq.n	26008 <__aeabi_dsub+0x558>
   26044:	08cb      	lsrs	r3, r1, #3
   26046:	4203      	tst	r3, r0
   26048:	d1de      	bne.n	26008 <__aeabi_dsub+0x558>
   2604a:	08d7      	lsrs	r7, r2, #3
   2604c:	0749      	lsls	r1, r1, #29
   2604e:	430f      	orrs	r7, r1
   26050:	001c      	movs	r4, r3
   26052:	e7d9      	b.n	26008 <__aeabi_dsub+0x558>
   26054:	2100      	movs	r1, #0
   26056:	e771      	b.n	25f3c <__aeabi_dsub+0x48c>
   26058:	2500      	movs	r5, #0
   2605a:	2700      	movs	r7, #0
   2605c:	e5e9      	b.n	25c32 <__aeabi_dsub+0x182>
   2605e:	002e      	movs	r6, r5
   26060:	0027      	movs	r7, r4
   26062:	3e20      	subs	r6, #32
   26064:	40f7      	lsrs	r7, r6
   26066:	2d20      	cmp	r5, #32
   26068:	d02f      	beq.n	260ca <__aeabi_dsub+0x61a>
   2606a:	2640      	movs	r6, #64	; 0x40
   2606c:	1b75      	subs	r5, r6, r5
   2606e:	40ac      	lsls	r4, r5
   26070:	4650      	mov	r0, sl
   26072:	4320      	orrs	r0, r4
   26074:	1e44      	subs	r4, r0, #1
   26076:	41a0      	sbcs	r0, r4
   26078:	2400      	movs	r4, #0
   2607a:	4338      	orrs	r0, r7
   2607c:	e6dc      	b.n	25e38 <__aeabi_dsub+0x388>
   2607e:	2480      	movs	r4, #128	; 0x80
   26080:	2500      	movs	r5, #0
   26082:	0324      	lsls	r4, r4, #12
   26084:	4e13      	ldr	r6, [pc, #76]	; (260d4 <__aeabi_dsub+0x624>)
   26086:	2700      	movs	r7, #0
   26088:	e5d3      	b.n	25c32 <__aeabi_dsub+0x182>
   2608a:	4650      	mov	r0, sl
   2608c:	4320      	orrs	r0, r4
   2608e:	0007      	movs	r7, r0
   26090:	1e78      	subs	r0, r7, #1
   26092:	4187      	sbcs	r7, r0
   26094:	2400      	movs	r4, #0
   26096:	18bf      	adds	r7, r7, r2
   26098:	e760      	b.n	25f5c <__aeabi_dsub+0x4ac>
   2609a:	000c      	movs	r4, r1
   2609c:	0017      	movs	r7, r2
   2609e:	e58d      	b.n	25bbc <__aeabi_dsub+0x10c>
   260a0:	000c      	movs	r4, r1
   260a2:	0017      	movs	r7, r2
   260a4:	4e0b      	ldr	r6, [pc, #44]	; (260d4 <__aeabi_dsub+0x624>)
   260a6:	e589      	b.n	25bbc <__aeabi_dsub+0x10c>
   260a8:	001e      	movs	r6, r3
   260aa:	0027      	movs	r7, r4
   260ac:	3e20      	subs	r6, #32
   260ae:	40f7      	lsrs	r7, r6
   260b0:	2b20      	cmp	r3, #32
   260b2:	d00c      	beq.n	260ce <__aeabi_dsub+0x61e>
   260b4:	2640      	movs	r6, #64	; 0x40
   260b6:	1af3      	subs	r3, r6, r3
   260b8:	409c      	lsls	r4, r3
   260ba:	4650      	mov	r0, sl
   260bc:	4320      	orrs	r0, r4
   260be:	1e44      	subs	r4, r0, #1
   260c0:	41a0      	sbcs	r0, r4
   260c2:	4307      	orrs	r7, r0
   260c4:	2400      	movs	r4, #0
   260c6:	18bf      	adds	r7, r7, r2
   260c8:	e748      	b.n	25f5c <__aeabi_dsub+0x4ac>
   260ca:	2400      	movs	r4, #0
   260cc:	e7d0      	b.n	26070 <__aeabi_dsub+0x5c0>
   260ce:	2400      	movs	r4, #0
   260d0:	e7f3      	b.n	260ba <__aeabi_dsub+0x60a>
   260d2:	46c0      	nop			; (mov r8, r8)
   260d4:	000007ff 	.word	0x000007ff
   260d8:	ff7fffff 	.word	0xff7fffff

000260dc <__aeabi_d2iz>:
   260dc:	b530      	push	{r4, r5, lr}
   260de:	4d13      	ldr	r5, [pc, #76]	; (2612c <__aeabi_d2iz+0x50>)
   260e0:	030a      	lsls	r2, r1, #12
   260e2:	004b      	lsls	r3, r1, #1
   260e4:	0b12      	lsrs	r2, r2, #12
   260e6:	0d5b      	lsrs	r3, r3, #21
   260e8:	0fc9      	lsrs	r1, r1, #31
   260ea:	2400      	movs	r4, #0
   260ec:	42ab      	cmp	r3, r5
   260ee:	dd10      	ble.n	26112 <__aeabi_d2iz+0x36>
   260f0:	4c0f      	ldr	r4, [pc, #60]	; (26130 <__aeabi_d2iz+0x54>)
   260f2:	42a3      	cmp	r3, r4
   260f4:	dc0f      	bgt.n	26116 <__aeabi_d2iz+0x3a>
   260f6:	2480      	movs	r4, #128	; 0x80
   260f8:	4d0e      	ldr	r5, [pc, #56]	; (26134 <__aeabi_d2iz+0x58>)
   260fa:	0364      	lsls	r4, r4, #13
   260fc:	4322      	orrs	r2, r4
   260fe:	1aed      	subs	r5, r5, r3
   26100:	2d1f      	cmp	r5, #31
   26102:	dd0b      	ble.n	2611c <__aeabi_d2iz+0x40>
   26104:	480c      	ldr	r0, [pc, #48]	; (26138 <__aeabi_d2iz+0x5c>)
   26106:	1ac3      	subs	r3, r0, r3
   26108:	40da      	lsrs	r2, r3
   2610a:	4254      	negs	r4, r2
   2610c:	2900      	cmp	r1, #0
   2610e:	d100      	bne.n	26112 <__aeabi_d2iz+0x36>
   26110:	0014      	movs	r4, r2
   26112:	0020      	movs	r0, r4
   26114:	bd30      	pop	{r4, r5, pc}
   26116:	4b09      	ldr	r3, [pc, #36]	; (2613c <__aeabi_d2iz+0x60>)
   26118:	18cc      	adds	r4, r1, r3
   2611a:	e7fa      	b.n	26112 <__aeabi_d2iz+0x36>
   2611c:	4c08      	ldr	r4, [pc, #32]	; (26140 <__aeabi_d2iz+0x64>)
   2611e:	40e8      	lsrs	r0, r5
   26120:	46a4      	mov	ip, r4
   26122:	4463      	add	r3, ip
   26124:	409a      	lsls	r2, r3
   26126:	4302      	orrs	r2, r0
   26128:	e7ef      	b.n	2610a <__aeabi_d2iz+0x2e>
   2612a:	46c0      	nop			; (mov r8, r8)
   2612c:	000003fe 	.word	0x000003fe
   26130:	0000041d 	.word	0x0000041d
   26134:	00000433 	.word	0x00000433
   26138:	00000413 	.word	0x00000413
   2613c:	7fffffff 	.word	0x7fffffff
   26140:	fffffbed 	.word	0xfffffbed

00026144 <__aeabi_ui2d>:
   26144:	b510      	push	{r4, lr}
   26146:	1e04      	subs	r4, r0, #0
   26148:	d028      	beq.n	2619c <__aeabi_ui2d+0x58>
   2614a:	f000 f833 	bl	261b4 <__clzsi2>
   2614e:	4b15      	ldr	r3, [pc, #84]	; (261a4 <__aeabi_ui2d+0x60>)
   26150:	4a15      	ldr	r2, [pc, #84]	; (261a8 <__aeabi_ui2d+0x64>)
   26152:	1a1b      	subs	r3, r3, r0
   26154:	1ad2      	subs	r2, r2, r3
   26156:	2a1f      	cmp	r2, #31
   26158:	dd15      	ble.n	26186 <__aeabi_ui2d+0x42>
   2615a:	4a14      	ldr	r2, [pc, #80]	; (261ac <__aeabi_ui2d+0x68>)
   2615c:	1ad2      	subs	r2, r2, r3
   2615e:	4094      	lsls	r4, r2
   26160:	2200      	movs	r2, #0
   26162:	0324      	lsls	r4, r4, #12
   26164:	055b      	lsls	r3, r3, #21
   26166:	0b24      	lsrs	r4, r4, #12
   26168:	0d5b      	lsrs	r3, r3, #21
   2616a:	2100      	movs	r1, #0
   2616c:	0010      	movs	r0, r2
   2616e:	0324      	lsls	r4, r4, #12
   26170:	0d0a      	lsrs	r2, r1, #20
   26172:	0b24      	lsrs	r4, r4, #12
   26174:	0512      	lsls	r2, r2, #20
   26176:	4322      	orrs	r2, r4
   26178:	4c0d      	ldr	r4, [pc, #52]	; (261b0 <__aeabi_ui2d+0x6c>)
   2617a:	051b      	lsls	r3, r3, #20
   2617c:	4022      	ands	r2, r4
   2617e:	4313      	orrs	r3, r2
   26180:	005b      	lsls	r3, r3, #1
   26182:	0859      	lsrs	r1, r3, #1
   26184:	bd10      	pop	{r4, pc}
   26186:	0021      	movs	r1, r4
   26188:	4091      	lsls	r1, r2
   2618a:	000a      	movs	r2, r1
   2618c:	210b      	movs	r1, #11
   2618e:	1a08      	subs	r0, r1, r0
   26190:	40c4      	lsrs	r4, r0
   26192:	055b      	lsls	r3, r3, #21
   26194:	0324      	lsls	r4, r4, #12
   26196:	0b24      	lsrs	r4, r4, #12
   26198:	0d5b      	lsrs	r3, r3, #21
   2619a:	e7e6      	b.n	2616a <__aeabi_ui2d+0x26>
   2619c:	2300      	movs	r3, #0
   2619e:	2400      	movs	r4, #0
   261a0:	2200      	movs	r2, #0
   261a2:	e7e2      	b.n	2616a <__aeabi_ui2d+0x26>
   261a4:	0000041e 	.word	0x0000041e
   261a8:	00000433 	.word	0x00000433
   261ac:	00000413 	.word	0x00000413
   261b0:	800fffff 	.word	0x800fffff

000261b4 <__clzsi2>:
   261b4:	211c      	movs	r1, #28
   261b6:	2301      	movs	r3, #1
   261b8:	041b      	lsls	r3, r3, #16
   261ba:	4298      	cmp	r0, r3
   261bc:	d301      	bcc.n	261c2 <__clzsi2+0xe>
   261be:	0c00      	lsrs	r0, r0, #16
   261c0:	3910      	subs	r1, #16
   261c2:	0a1b      	lsrs	r3, r3, #8
   261c4:	4298      	cmp	r0, r3
   261c6:	d301      	bcc.n	261cc <__clzsi2+0x18>
   261c8:	0a00      	lsrs	r0, r0, #8
   261ca:	3908      	subs	r1, #8
   261cc:	091b      	lsrs	r3, r3, #4
   261ce:	4298      	cmp	r0, r3
   261d0:	d301      	bcc.n	261d6 <__clzsi2+0x22>
   261d2:	0900      	lsrs	r0, r0, #4
   261d4:	3904      	subs	r1, #4
   261d6:	a202      	add	r2, pc, #8	; (adr r2, 261e0 <__clzsi2+0x2c>)
   261d8:	5c10      	ldrb	r0, [r2, r0]
   261da:	1840      	adds	r0, r0, r1
   261dc:	4770      	bx	lr
   261de:	46c0      	nop			; (mov r8, r8)
   261e0:	02020304 	.word	0x02020304
   261e4:	01010101 	.word	0x01010101
	...

000261f0 <atoi>:
   261f0:	b510      	push	{r4, lr}
   261f2:	220a      	movs	r2, #10
   261f4:	2100      	movs	r1, #0
   261f6:	f000 fb77 	bl	268e8 <strtol>
   261fa:	bd10      	pop	{r4, pc}

000261fc <__libc_init_array>:
   261fc:	b570      	push	{r4, r5, r6, lr}
   261fe:	2600      	movs	r6, #0
   26200:	4d0c      	ldr	r5, [pc, #48]	; (26234 <__libc_init_array+0x38>)
   26202:	4c0d      	ldr	r4, [pc, #52]	; (26238 <__libc_init_array+0x3c>)
   26204:	1b64      	subs	r4, r4, r5
   26206:	10a4      	asrs	r4, r4, #2
   26208:	42a6      	cmp	r6, r4
   2620a:	d109      	bne.n	26220 <__libc_init_array+0x24>
   2620c:	2600      	movs	r6, #0
   2620e:	f005 f819 	bl	2b244 <_init>
   26212:	4d0a      	ldr	r5, [pc, #40]	; (2623c <__libc_init_array+0x40>)
   26214:	4c0a      	ldr	r4, [pc, #40]	; (26240 <__libc_init_array+0x44>)
   26216:	1b64      	subs	r4, r4, r5
   26218:	10a4      	asrs	r4, r4, #2
   2621a:	42a6      	cmp	r6, r4
   2621c:	d105      	bne.n	2622a <__libc_init_array+0x2e>
   2621e:	bd70      	pop	{r4, r5, r6, pc}
   26220:	00b3      	lsls	r3, r6, #2
   26222:	58eb      	ldr	r3, [r5, r3]
   26224:	4798      	blx	r3
   26226:	3601      	adds	r6, #1
   26228:	e7ee      	b.n	26208 <__libc_init_array+0xc>
   2622a:	00b3      	lsls	r3, r6, #2
   2622c:	58eb      	ldr	r3, [r5, r3]
   2622e:	4798      	blx	r3
   26230:	3601      	adds	r6, #1
   26232:	e7f2      	b.n	2621a <__libc_init_array+0x1e>
   26234:	0002b250 	.word	0x0002b250
   26238:	0002b250 	.word	0x0002b250
   2623c:	0002b250 	.word	0x0002b250
   26240:	0002b254 	.word	0x0002b254

00026244 <malloc>:
   26244:	b510      	push	{r4, lr}
   26246:	4b03      	ldr	r3, [pc, #12]	; (26254 <malloc+0x10>)
   26248:	0001      	movs	r1, r0
   2624a:	6818      	ldr	r0, [r3, #0]
   2624c:	f000 f87c 	bl	26348 <_malloc_r>
   26250:	bd10      	pop	{r4, pc}
   26252:	46c0      	nop			; (mov r8, r8)
   26254:	200000dc 	.word	0x200000dc

00026258 <free>:
   26258:	b510      	push	{r4, lr}
   2625a:	4b03      	ldr	r3, [pc, #12]	; (26268 <free+0x10>)
   2625c:	0001      	movs	r1, r0
   2625e:	6818      	ldr	r0, [r3, #0]
   26260:	f000 f828 	bl	262b4 <_free_r>
   26264:	bd10      	pop	{r4, pc}
   26266:	46c0      	nop			; (mov r8, r8)
   26268:	200000dc 	.word	0x200000dc

0002626c <memcpy>:
   2626c:	2300      	movs	r3, #0
   2626e:	b510      	push	{r4, lr}
   26270:	429a      	cmp	r2, r3
   26272:	d100      	bne.n	26276 <memcpy+0xa>
   26274:	bd10      	pop	{r4, pc}
   26276:	5ccc      	ldrb	r4, [r1, r3]
   26278:	54c4      	strb	r4, [r0, r3]
   2627a:	3301      	adds	r3, #1
   2627c:	e7f8      	b.n	26270 <memcpy+0x4>

0002627e <memmove>:
   2627e:	b510      	push	{r4, lr}
   26280:	4288      	cmp	r0, r1
   26282:	d902      	bls.n	2628a <memmove+0xc>
   26284:	188b      	adds	r3, r1, r2
   26286:	4298      	cmp	r0, r3
   26288:	d308      	bcc.n	2629c <memmove+0x1e>
   2628a:	2300      	movs	r3, #0
   2628c:	429a      	cmp	r2, r3
   2628e:	d007      	beq.n	262a0 <memmove+0x22>
   26290:	5ccc      	ldrb	r4, [r1, r3]
   26292:	54c4      	strb	r4, [r0, r3]
   26294:	3301      	adds	r3, #1
   26296:	e7f9      	b.n	2628c <memmove+0xe>
   26298:	5c8b      	ldrb	r3, [r1, r2]
   2629a:	5483      	strb	r3, [r0, r2]
   2629c:	3a01      	subs	r2, #1
   2629e:	d2fb      	bcs.n	26298 <memmove+0x1a>
   262a0:	bd10      	pop	{r4, pc}

000262a2 <memset>:
   262a2:	0003      	movs	r3, r0
   262a4:	1882      	adds	r2, r0, r2
   262a6:	4293      	cmp	r3, r2
   262a8:	d100      	bne.n	262ac <memset+0xa>
   262aa:	4770      	bx	lr
   262ac:	7019      	strb	r1, [r3, #0]
   262ae:	3301      	adds	r3, #1
   262b0:	e7f9      	b.n	262a6 <memset+0x4>
	...

000262b4 <_free_r>:
   262b4:	b570      	push	{r4, r5, r6, lr}
   262b6:	0005      	movs	r5, r0
   262b8:	2900      	cmp	r1, #0
   262ba:	d010      	beq.n	262de <_free_r+0x2a>
   262bc:	1f0c      	subs	r4, r1, #4
   262be:	6823      	ldr	r3, [r4, #0]
   262c0:	2b00      	cmp	r3, #0
   262c2:	da00      	bge.n	262c6 <_free_r+0x12>
   262c4:	18e4      	adds	r4, r4, r3
   262c6:	0028      	movs	r0, r5
   262c8:	f000 fe42 	bl	26f50 <__malloc_lock>
   262cc:	4a1d      	ldr	r2, [pc, #116]	; (26344 <_free_r+0x90>)
   262ce:	6813      	ldr	r3, [r2, #0]
   262d0:	2b00      	cmp	r3, #0
   262d2:	d105      	bne.n	262e0 <_free_r+0x2c>
   262d4:	6063      	str	r3, [r4, #4]
   262d6:	6014      	str	r4, [r2, #0]
   262d8:	0028      	movs	r0, r5
   262da:	f000 fe3a 	bl	26f52 <__malloc_unlock>
   262de:	bd70      	pop	{r4, r5, r6, pc}
   262e0:	42a3      	cmp	r3, r4
   262e2:	d909      	bls.n	262f8 <_free_r+0x44>
   262e4:	6821      	ldr	r1, [r4, #0]
   262e6:	1860      	adds	r0, r4, r1
   262e8:	4283      	cmp	r3, r0
   262ea:	d1f3      	bne.n	262d4 <_free_r+0x20>
   262ec:	6818      	ldr	r0, [r3, #0]
   262ee:	685b      	ldr	r3, [r3, #4]
   262f0:	1841      	adds	r1, r0, r1
   262f2:	6021      	str	r1, [r4, #0]
   262f4:	e7ee      	b.n	262d4 <_free_r+0x20>
   262f6:	0013      	movs	r3, r2
   262f8:	685a      	ldr	r2, [r3, #4]
   262fa:	2a00      	cmp	r2, #0
   262fc:	d001      	beq.n	26302 <_free_r+0x4e>
   262fe:	42a2      	cmp	r2, r4
   26300:	d9f9      	bls.n	262f6 <_free_r+0x42>
   26302:	6819      	ldr	r1, [r3, #0]
   26304:	1858      	adds	r0, r3, r1
   26306:	42a0      	cmp	r0, r4
   26308:	d10b      	bne.n	26322 <_free_r+0x6e>
   2630a:	6820      	ldr	r0, [r4, #0]
   2630c:	1809      	adds	r1, r1, r0
   2630e:	1858      	adds	r0, r3, r1
   26310:	6019      	str	r1, [r3, #0]
   26312:	4282      	cmp	r2, r0
   26314:	d1e0      	bne.n	262d8 <_free_r+0x24>
   26316:	6810      	ldr	r0, [r2, #0]
   26318:	6852      	ldr	r2, [r2, #4]
   2631a:	1841      	adds	r1, r0, r1
   2631c:	6019      	str	r1, [r3, #0]
   2631e:	605a      	str	r2, [r3, #4]
   26320:	e7da      	b.n	262d8 <_free_r+0x24>
   26322:	42a0      	cmp	r0, r4
   26324:	d902      	bls.n	2632c <_free_r+0x78>
   26326:	230c      	movs	r3, #12
   26328:	602b      	str	r3, [r5, #0]
   2632a:	e7d5      	b.n	262d8 <_free_r+0x24>
   2632c:	6821      	ldr	r1, [r4, #0]
   2632e:	1860      	adds	r0, r4, r1
   26330:	4282      	cmp	r2, r0
   26332:	d103      	bne.n	2633c <_free_r+0x88>
   26334:	6810      	ldr	r0, [r2, #0]
   26336:	6852      	ldr	r2, [r2, #4]
   26338:	1841      	adds	r1, r0, r1
   2633a:	6021      	str	r1, [r4, #0]
   2633c:	6062      	str	r2, [r4, #4]
   2633e:	605c      	str	r4, [r3, #4]
   26340:	e7ca      	b.n	262d8 <_free_r+0x24>
   26342:	46c0      	nop			; (mov r8, r8)
   26344:	2000415c 	.word	0x2000415c

00026348 <_malloc_r>:
   26348:	2303      	movs	r3, #3
   2634a:	b570      	push	{r4, r5, r6, lr}
   2634c:	1ccd      	adds	r5, r1, #3
   2634e:	439d      	bics	r5, r3
   26350:	3508      	adds	r5, #8
   26352:	0006      	movs	r6, r0
   26354:	2d0c      	cmp	r5, #12
   26356:	d21e      	bcs.n	26396 <_malloc_r+0x4e>
   26358:	250c      	movs	r5, #12
   2635a:	42a9      	cmp	r1, r5
   2635c:	d81d      	bhi.n	2639a <_malloc_r+0x52>
   2635e:	0030      	movs	r0, r6
   26360:	f000 fdf6 	bl	26f50 <__malloc_lock>
   26364:	4a25      	ldr	r2, [pc, #148]	; (263fc <_malloc_r+0xb4>)
   26366:	6814      	ldr	r4, [r2, #0]
   26368:	0021      	movs	r1, r4
   2636a:	2900      	cmp	r1, #0
   2636c:	d119      	bne.n	263a2 <_malloc_r+0x5a>
   2636e:	4c24      	ldr	r4, [pc, #144]	; (26400 <_malloc_r+0xb8>)
   26370:	6823      	ldr	r3, [r4, #0]
   26372:	2b00      	cmp	r3, #0
   26374:	d103      	bne.n	2637e <_malloc_r+0x36>
   26376:	0030      	movs	r0, r6
   26378:	f000 f918 	bl	265ac <_sbrk_r>
   2637c:	6020      	str	r0, [r4, #0]
   2637e:	0029      	movs	r1, r5
   26380:	0030      	movs	r0, r6
   26382:	f000 f913 	bl	265ac <_sbrk_r>
   26386:	1c43      	adds	r3, r0, #1
   26388:	d12c      	bne.n	263e4 <_malloc_r+0x9c>
   2638a:	230c      	movs	r3, #12
   2638c:	0030      	movs	r0, r6
   2638e:	6033      	str	r3, [r6, #0]
   26390:	f000 fddf 	bl	26f52 <__malloc_unlock>
   26394:	e003      	b.n	2639e <_malloc_r+0x56>
   26396:	2d00      	cmp	r5, #0
   26398:	dadf      	bge.n	2635a <_malloc_r+0x12>
   2639a:	230c      	movs	r3, #12
   2639c:	6033      	str	r3, [r6, #0]
   2639e:	2000      	movs	r0, #0
   263a0:	bd70      	pop	{r4, r5, r6, pc}
   263a2:	680b      	ldr	r3, [r1, #0]
   263a4:	1b5b      	subs	r3, r3, r5
   263a6:	d41a      	bmi.n	263de <_malloc_r+0x96>
   263a8:	2b0b      	cmp	r3, #11
   263aa:	d903      	bls.n	263b4 <_malloc_r+0x6c>
   263ac:	600b      	str	r3, [r1, #0]
   263ae:	18cc      	adds	r4, r1, r3
   263b0:	6025      	str	r5, [r4, #0]
   263b2:	e003      	b.n	263bc <_malloc_r+0x74>
   263b4:	428c      	cmp	r4, r1
   263b6:	d10e      	bne.n	263d6 <_malloc_r+0x8e>
   263b8:	6863      	ldr	r3, [r4, #4]
   263ba:	6013      	str	r3, [r2, #0]
   263bc:	0030      	movs	r0, r6
   263be:	f000 fdc8 	bl	26f52 <__malloc_unlock>
   263c2:	0020      	movs	r0, r4
   263c4:	2207      	movs	r2, #7
   263c6:	300b      	adds	r0, #11
   263c8:	1d23      	adds	r3, r4, #4
   263ca:	4390      	bics	r0, r2
   263cc:	1ac3      	subs	r3, r0, r3
   263ce:	d0e7      	beq.n	263a0 <_malloc_r+0x58>
   263d0:	425a      	negs	r2, r3
   263d2:	50e2      	str	r2, [r4, r3]
   263d4:	e7e4      	b.n	263a0 <_malloc_r+0x58>
   263d6:	684b      	ldr	r3, [r1, #4]
   263d8:	6063      	str	r3, [r4, #4]
   263da:	000c      	movs	r4, r1
   263dc:	e7ee      	b.n	263bc <_malloc_r+0x74>
   263de:	000c      	movs	r4, r1
   263e0:	6849      	ldr	r1, [r1, #4]
   263e2:	e7c2      	b.n	2636a <_malloc_r+0x22>
   263e4:	2303      	movs	r3, #3
   263e6:	1cc4      	adds	r4, r0, #3
   263e8:	439c      	bics	r4, r3
   263ea:	42a0      	cmp	r0, r4
   263ec:	d0e0      	beq.n	263b0 <_malloc_r+0x68>
   263ee:	1a21      	subs	r1, r4, r0
   263f0:	0030      	movs	r0, r6
   263f2:	f000 f8db 	bl	265ac <_sbrk_r>
   263f6:	1c43      	adds	r3, r0, #1
   263f8:	d1da      	bne.n	263b0 <_malloc_r+0x68>
   263fa:	e7c6      	b.n	2638a <_malloc_r+0x42>
   263fc:	2000415c 	.word	0x2000415c
   26400:	20004160 	.word	0x20004160

00026404 <_puts_r>:
   26404:	b570      	push	{r4, r5, r6, lr}
   26406:	0005      	movs	r5, r0
   26408:	000e      	movs	r6, r1
   2640a:	2800      	cmp	r0, #0
   2640c:	d004      	beq.n	26418 <_puts_r+0x14>
   2640e:	6983      	ldr	r3, [r0, #24]
   26410:	2b00      	cmp	r3, #0
   26412:	d101      	bne.n	26418 <_puts_r+0x14>
   26414:	f000 fc78 	bl	26d08 <__sinit>
   26418:	69ab      	ldr	r3, [r5, #24]
   2641a:	68ac      	ldr	r4, [r5, #8]
   2641c:	2b00      	cmp	r3, #0
   2641e:	d102      	bne.n	26426 <_puts_r+0x22>
   26420:	0028      	movs	r0, r5
   26422:	f000 fc71 	bl	26d08 <__sinit>
   26426:	4b24      	ldr	r3, [pc, #144]	; (264b8 <_puts_r+0xb4>)
   26428:	429c      	cmp	r4, r3
   2642a:	d10f      	bne.n	2644c <_puts_r+0x48>
   2642c:	686c      	ldr	r4, [r5, #4]
   2642e:	89a3      	ldrh	r3, [r4, #12]
   26430:	071b      	lsls	r3, r3, #28
   26432:	d502      	bpl.n	2643a <_puts_r+0x36>
   26434:	6923      	ldr	r3, [r4, #16]
   26436:	2b00      	cmp	r3, #0
   26438:	d120      	bne.n	2647c <_puts_r+0x78>
   2643a:	0021      	movs	r1, r4
   2643c:	0028      	movs	r0, r5
   2643e:	f000 faf5 	bl	26a2c <__swsetup_r>
   26442:	2800      	cmp	r0, #0
   26444:	d01a      	beq.n	2647c <_puts_r+0x78>
   26446:	2001      	movs	r0, #1
   26448:	4240      	negs	r0, r0
   2644a:	bd70      	pop	{r4, r5, r6, pc}
   2644c:	4b1b      	ldr	r3, [pc, #108]	; (264bc <_puts_r+0xb8>)
   2644e:	429c      	cmp	r4, r3
   26450:	d101      	bne.n	26456 <_puts_r+0x52>
   26452:	68ac      	ldr	r4, [r5, #8]
   26454:	e7eb      	b.n	2642e <_puts_r+0x2a>
   26456:	4b1a      	ldr	r3, [pc, #104]	; (264c0 <_puts_r+0xbc>)
   26458:	429c      	cmp	r4, r3
   2645a:	d1e8      	bne.n	2642e <_puts_r+0x2a>
   2645c:	68ec      	ldr	r4, [r5, #12]
   2645e:	e7e6      	b.n	2642e <_puts_r+0x2a>
   26460:	3b01      	subs	r3, #1
   26462:	3601      	adds	r6, #1
   26464:	60a3      	str	r3, [r4, #8]
   26466:	2b00      	cmp	r3, #0
   26468:	da04      	bge.n	26474 <_puts_r+0x70>
   2646a:	69a2      	ldr	r2, [r4, #24]
   2646c:	4293      	cmp	r3, r2
   2646e:	db16      	blt.n	2649e <_puts_r+0x9a>
   26470:	290a      	cmp	r1, #10
   26472:	d014      	beq.n	2649e <_puts_r+0x9a>
   26474:	6823      	ldr	r3, [r4, #0]
   26476:	1c5a      	adds	r2, r3, #1
   26478:	6022      	str	r2, [r4, #0]
   2647a:	7019      	strb	r1, [r3, #0]
   2647c:	7831      	ldrb	r1, [r6, #0]
   2647e:	68a3      	ldr	r3, [r4, #8]
   26480:	2900      	cmp	r1, #0
   26482:	d1ed      	bne.n	26460 <_puts_r+0x5c>
   26484:	3b01      	subs	r3, #1
   26486:	60a3      	str	r3, [r4, #8]
   26488:	2b00      	cmp	r3, #0
   2648a:	da0f      	bge.n	264ac <_puts_r+0xa8>
   2648c:	0022      	movs	r2, r4
   2648e:	310a      	adds	r1, #10
   26490:	0028      	movs	r0, r5
   26492:	f000 fa75 	bl	26980 <__swbuf_r>
   26496:	1c43      	adds	r3, r0, #1
   26498:	d0d5      	beq.n	26446 <_puts_r+0x42>
   2649a:	200a      	movs	r0, #10
   2649c:	e7d5      	b.n	2644a <_puts_r+0x46>
   2649e:	0022      	movs	r2, r4
   264a0:	0028      	movs	r0, r5
   264a2:	f000 fa6d 	bl	26980 <__swbuf_r>
   264a6:	1c43      	adds	r3, r0, #1
   264a8:	d1e8      	bne.n	2647c <_puts_r+0x78>
   264aa:	e7cc      	b.n	26446 <_puts_r+0x42>
   264ac:	200a      	movs	r0, #10
   264ae:	6823      	ldr	r3, [r4, #0]
   264b0:	1c5a      	adds	r2, r3, #1
   264b2:	6022      	str	r2, [r4, #0]
   264b4:	7018      	strb	r0, [r3, #0]
   264b6:	e7c8      	b.n	2644a <_puts_r+0x46>
   264b8:	0002b0c4 	.word	0x0002b0c4
   264bc:	0002b0e4 	.word	0x0002b0e4
   264c0:	0002b0a4 	.word	0x0002b0a4

000264c4 <puts>:
   264c4:	b510      	push	{r4, lr}
   264c6:	4b03      	ldr	r3, [pc, #12]	; (264d4 <puts+0x10>)
   264c8:	0001      	movs	r1, r0
   264ca:	6818      	ldr	r0, [r3, #0]
   264cc:	f7ff ff9a 	bl	26404 <_puts_r>
   264d0:	bd10      	pop	{r4, pc}
   264d2:	46c0      	nop			; (mov r8, r8)
   264d4:	200000dc 	.word	0x200000dc

000264d8 <srand>:
   264d8:	4b10      	ldr	r3, [pc, #64]	; (2651c <srand+0x44>)
   264da:	b570      	push	{r4, r5, r6, lr}
   264dc:	681c      	ldr	r4, [r3, #0]
   264de:	0005      	movs	r5, r0
   264e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   264e2:	2b00      	cmp	r3, #0
   264e4:	d115      	bne.n	26512 <srand+0x3a>
   264e6:	2018      	movs	r0, #24
   264e8:	f7ff feac 	bl	26244 <malloc>
   264ec:	4b0c      	ldr	r3, [pc, #48]	; (26520 <srand+0x48>)
   264ee:	63a0      	str	r0, [r4, #56]	; 0x38
   264f0:	8003      	strh	r3, [r0, #0]
   264f2:	4b0c      	ldr	r3, [pc, #48]	; (26524 <srand+0x4c>)
   264f4:	2201      	movs	r2, #1
   264f6:	8043      	strh	r3, [r0, #2]
   264f8:	4b0b      	ldr	r3, [pc, #44]	; (26528 <srand+0x50>)
   264fa:	8083      	strh	r3, [r0, #4]
   264fc:	4b0b      	ldr	r3, [pc, #44]	; (2652c <srand+0x54>)
   264fe:	80c3      	strh	r3, [r0, #6]
   26500:	4b0b      	ldr	r3, [pc, #44]	; (26530 <srand+0x58>)
   26502:	8103      	strh	r3, [r0, #8]
   26504:	2305      	movs	r3, #5
   26506:	8143      	strh	r3, [r0, #10]
   26508:	3306      	adds	r3, #6
   2650a:	8183      	strh	r3, [r0, #12]
   2650c:	2300      	movs	r3, #0
   2650e:	6102      	str	r2, [r0, #16]
   26510:	6143      	str	r3, [r0, #20]
   26512:	2200      	movs	r2, #0
   26514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26516:	611d      	str	r5, [r3, #16]
   26518:	615a      	str	r2, [r3, #20]
   2651a:	bd70      	pop	{r4, r5, r6, pc}
   2651c:	200000dc 	.word	0x200000dc
   26520:	0000330e 	.word	0x0000330e
   26524:	ffffabcd 	.word	0xffffabcd
   26528:	00001234 	.word	0x00001234
   2652c:	ffffe66d 	.word	0xffffe66d
   26530:	ffffdeec 	.word	0xffffdeec

00026534 <rand>:
   26534:	4b15      	ldr	r3, [pc, #84]	; (2658c <rand+0x58>)
   26536:	b510      	push	{r4, lr}
   26538:	681c      	ldr	r4, [r3, #0]
   2653a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2653c:	2b00      	cmp	r3, #0
   2653e:	d115      	bne.n	2656c <rand+0x38>
   26540:	2018      	movs	r0, #24
   26542:	f7ff fe7f 	bl	26244 <malloc>
   26546:	4b12      	ldr	r3, [pc, #72]	; (26590 <rand+0x5c>)
   26548:	63a0      	str	r0, [r4, #56]	; 0x38
   2654a:	8003      	strh	r3, [r0, #0]
   2654c:	4b11      	ldr	r3, [pc, #68]	; (26594 <rand+0x60>)
   2654e:	2201      	movs	r2, #1
   26550:	8043      	strh	r3, [r0, #2]
   26552:	4b11      	ldr	r3, [pc, #68]	; (26598 <rand+0x64>)
   26554:	8083      	strh	r3, [r0, #4]
   26556:	4b11      	ldr	r3, [pc, #68]	; (2659c <rand+0x68>)
   26558:	80c3      	strh	r3, [r0, #6]
   2655a:	4b11      	ldr	r3, [pc, #68]	; (265a0 <rand+0x6c>)
   2655c:	8103      	strh	r3, [r0, #8]
   2655e:	2305      	movs	r3, #5
   26560:	8143      	strh	r3, [r0, #10]
   26562:	3306      	adds	r3, #6
   26564:	8183      	strh	r3, [r0, #12]
   26566:	2300      	movs	r3, #0
   26568:	6102      	str	r2, [r0, #16]
   2656a:	6143      	str	r3, [r0, #20]
   2656c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   2656e:	4a0d      	ldr	r2, [pc, #52]	; (265a4 <rand+0x70>)
   26570:	6920      	ldr	r0, [r4, #16]
   26572:	6961      	ldr	r1, [r4, #20]
   26574:	4b0c      	ldr	r3, [pc, #48]	; (265a8 <rand+0x74>)
   26576:	f7fd fed5 	bl	24324 <__aeabi_lmul>
   2657a:	2201      	movs	r2, #1
   2657c:	2300      	movs	r3, #0
   2657e:	1880      	adds	r0, r0, r2
   26580:	4159      	adcs	r1, r3
   26582:	6120      	str	r0, [r4, #16]
   26584:	6161      	str	r1, [r4, #20]
   26586:	0048      	lsls	r0, r1, #1
   26588:	0840      	lsrs	r0, r0, #1
   2658a:	bd10      	pop	{r4, pc}
   2658c:	200000dc 	.word	0x200000dc
   26590:	0000330e 	.word	0x0000330e
   26594:	ffffabcd 	.word	0xffffabcd
   26598:	00001234 	.word	0x00001234
   2659c:	ffffe66d 	.word	0xffffe66d
   265a0:	ffffdeec 	.word	0xffffdeec
   265a4:	4c957f2d 	.word	0x4c957f2d
   265a8:	5851f42d 	.word	0x5851f42d

000265ac <_sbrk_r>:
   265ac:	2300      	movs	r3, #0
   265ae:	b570      	push	{r4, r5, r6, lr}
   265b0:	4c06      	ldr	r4, [pc, #24]	; (265cc <_sbrk_r+0x20>)
   265b2:	0005      	movs	r5, r0
   265b4:	0008      	movs	r0, r1
   265b6:	6023      	str	r3, [r4, #0]
   265b8:	f7f9 fae0 	bl	1fb7c <_sbrk>
   265bc:	1c43      	adds	r3, r0, #1
   265be:	d103      	bne.n	265c8 <_sbrk_r+0x1c>
   265c0:	6823      	ldr	r3, [r4, #0]
   265c2:	2b00      	cmp	r3, #0
   265c4:	d000      	beq.n	265c8 <_sbrk_r+0x1c>
   265c6:	602b      	str	r3, [r5, #0]
   265c8:	bd70      	pop	{r4, r5, r6, pc}
   265ca:	46c0      	nop			; (mov r8, r8)
   265cc:	200055ec 	.word	0x200055ec

000265d0 <sniprintf>:
   265d0:	b40c      	push	{r2, r3}
   265d2:	b530      	push	{r4, r5, lr}
   265d4:	4b16      	ldr	r3, [pc, #88]	; (26630 <sniprintf+0x60>)
   265d6:	b09d      	sub	sp, #116	; 0x74
   265d8:	1e0c      	subs	r4, r1, #0
   265da:	681d      	ldr	r5, [r3, #0]
   265dc:	da08      	bge.n	265f0 <sniprintf+0x20>
   265de:	238b      	movs	r3, #139	; 0x8b
   265e0:	2001      	movs	r0, #1
   265e2:	602b      	str	r3, [r5, #0]
   265e4:	4240      	negs	r0, r0
   265e6:	b01d      	add	sp, #116	; 0x74
   265e8:	bc30      	pop	{r4, r5}
   265ea:	bc08      	pop	{r3}
   265ec:	b002      	add	sp, #8
   265ee:	4718      	bx	r3
   265f0:	2382      	movs	r3, #130	; 0x82
   265f2:	a902      	add	r1, sp, #8
   265f4:	009b      	lsls	r3, r3, #2
   265f6:	818b      	strh	r3, [r1, #12]
   265f8:	2300      	movs	r3, #0
   265fa:	9002      	str	r0, [sp, #8]
   265fc:	6108      	str	r0, [r1, #16]
   265fe:	429c      	cmp	r4, r3
   26600:	d000      	beq.n	26604 <sniprintf+0x34>
   26602:	1e63      	subs	r3, r4, #1
   26604:	608b      	str	r3, [r1, #8]
   26606:	614b      	str	r3, [r1, #20]
   26608:	2301      	movs	r3, #1
   2660a:	425b      	negs	r3, r3
   2660c:	81cb      	strh	r3, [r1, #14]
   2660e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   26610:	ab21      	add	r3, sp, #132	; 0x84
   26612:	0028      	movs	r0, r5
   26614:	9301      	str	r3, [sp, #4]
   26616:	f000 fcff 	bl	27018 <_svfiprintf_r>
   2661a:	1c43      	adds	r3, r0, #1
   2661c:	da01      	bge.n	26622 <sniprintf+0x52>
   2661e:	238b      	movs	r3, #139	; 0x8b
   26620:	602b      	str	r3, [r5, #0]
   26622:	2c00      	cmp	r4, #0
   26624:	d0df      	beq.n	265e6 <sniprintf+0x16>
   26626:	2300      	movs	r3, #0
   26628:	9a02      	ldr	r2, [sp, #8]
   2662a:	7013      	strb	r3, [r2, #0]
   2662c:	e7db      	b.n	265e6 <sniprintf+0x16>
   2662e:	46c0      	nop			; (mov r8, r8)
   26630:	200000dc 	.word	0x200000dc

00026634 <siprintf>:
   26634:	b40e      	push	{r1, r2, r3}
   26636:	b510      	push	{r4, lr}
   26638:	b09d      	sub	sp, #116	; 0x74
   2663a:	a902      	add	r1, sp, #8
   2663c:	9002      	str	r0, [sp, #8]
   2663e:	6108      	str	r0, [r1, #16]
   26640:	480b      	ldr	r0, [pc, #44]	; (26670 <siprintf+0x3c>)
   26642:	2482      	movs	r4, #130	; 0x82
   26644:	6088      	str	r0, [r1, #8]
   26646:	6148      	str	r0, [r1, #20]
   26648:	2001      	movs	r0, #1
   2664a:	4240      	negs	r0, r0
   2664c:	ab1f      	add	r3, sp, #124	; 0x7c
   2664e:	81c8      	strh	r0, [r1, #14]
   26650:	4808      	ldr	r0, [pc, #32]	; (26674 <siprintf+0x40>)
   26652:	cb04      	ldmia	r3!, {r2}
   26654:	00a4      	lsls	r4, r4, #2
   26656:	6800      	ldr	r0, [r0, #0]
   26658:	9301      	str	r3, [sp, #4]
   2665a:	818c      	strh	r4, [r1, #12]
   2665c:	f000 fcdc 	bl	27018 <_svfiprintf_r>
   26660:	2300      	movs	r3, #0
   26662:	9a02      	ldr	r2, [sp, #8]
   26664:	7013      	strb	r3, [r2, #0]
   26666:	b01d      	add	sp, #116	; 0x74
   26668:	bc10      	pop	{r4}
   2666a:	bc08      	pop	{r3}
   2666c:	b003      	add	sp, #12
   2666e:	4718      	bx	r3
   26670:	7fffffff 	.word	0x7fffffff
   26674:	200000dc 	.word	0x200000dc

00026678 <strcasecmp>:
   26678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2667a:	0007      	movs	r7, r0
   2667c:	000e      	movs	r6, r1
   2667e:	783c      	ldrb	r4, [r7, #0]
   26680:	f000 fbda 	bl	26e38 <__locale_ctype_ptr>
   26684:	2203      	movs	r2, #3
   26686:	1900      	adds	r0, r0, r4
   26688:	7843      	ldrb	r3, [r0, #1]
   2668a:	4013      	ands	r3, r2
   2668c:	2b01      	cmp	r3, #1
   2668e:	d100      	bne.n	26692 <strcasecmp+0x1a>
   26690:	3420      	adds	r4, #32
   26692:	7835      	ldrb	r5, [r6, #0]
   26694:	f000 fbd0 	bl	26e38 <__locale_ctype_ptr>
   26698:	2203      	movs	r2, #3
   2669a:	1940      	adds	r0, r0, r5
   2669c:	7843      	ldrb	r3, [r0, #1]
   2669e:	4013      	ands	r3, r2
   266a0:	2b01      	cmp	r3, #1
   266a2:	d100      	bne.n	266a6 <strcasecmp+0x2e>
   266a4:	3520      	adds	r5, #32
   266a6:	1b60      	subs	r0, r4, r5
   266a8:	d103      	bne.n	266b2 <strcasecmp+0x3a>
   266aa:	3701      	adds	r7, #1
   266ac:	3601      	adds	r6, #1
   266ae:	2d00      	cmp	r5, #0
   266b0:	d1e5      	bne.n	2667e <strcasecmp+0x6>
   266b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000266b4 <strcat>:
   266b4:	0002      	movs	r2, r0
   266b6:	b510      	push	{r4, lr}
   266b8:	7813      	ldrb	r3, [r2, #0]
   266ba:	2b00      	cmp	r3, #0
   266bc:	d105      	bne.n	266ca <strcat+0x16>
   266be:	5ccc      	ldrb	r4, [r1, r3]
   266c0:	54d4      	strb	r4, [r2, r3]
   266c2:	3301      	adds	r3, #1
   266c4:	2c00      	cmp	r4, #0
   266c6:	d1fa      	bne.n	266be <strcat+0xa>
   266c8:	bd10      	pop	{r4, pc}
   266ca:	3201      	adds	r2, #1
   266cc:	e7f4      	b.n	266b8 <strcat+0x4>

000266ce <strcmp>:
   266ce:	7802      	ldrb	r2, [r0, #0]
   266d0:	780b      	ldrb	r3, [r1, #0]
   266d2:	2a00      	cmp	r2, #0
   266d4:	d003      	beq.n	266de <strcmp+0x10>
   266d6:	3001      	adds	r0, #1
   266d8:	3101      	adds	r1, #1
   266da:	429a      	cmp	r2, r3
   266dc:	d0f7      	beq.n	266ce <strcmp>
   266de:	1ad0      	subs	r0, r2, r3
   266e0:	4770      	bx	lr

000266e2 <strcpy>:
   266e2:	1c03      	adds	r3, r0, #0
   266e4:	780a      	ldrb	r2, [r1, #0]
   266e6:	3101      	adds	r1, #1
   266e8:	701a      	strb	r2, [r3, #0]
   266ea:	3301      	adds	r3, #1
   266ec:	2a00      	cmp	r2, #0
   266ee:	d1f9      	bne.n	266e4 <strcpy+0x2>
   266f0:	4770      	bx	lr
	...

000266f4 <strdup>:
   266f4:	b510      	push	{r4, lr}
   266f6:	4b03      	ldr	r3, [pc, #12]	; (26704 <strdup+0x10>)
   266f8:	0001      	movs	r1, r0
   266fa:	6818      	ldr	r0, [r3, #0]
   266fc:	f000 f804 	bl	26708 <_strdup_r>
   26700:	bd10      	pop	{r4, pc}
   26702:	46c0      	nop			; (mov r8, r8)
   26704:	200000dc 	.word	0x200000dc

00026708 <_strdup_r>:
   26708:	b570      	push	{r4, r5, r6, lr}
   2670a:	0005      	movs	r5, r0
   2670c:	0008      	movs	r0, r1
   2670e:	000e      	movs	r6, r1
   26710:	f000 f80d 	bl	2672e <strlen>
   26714:	1c44      	adds	r4, r0, #1
   26716:	0021      	movs	r1, r4
   26718:	0028      	movs	r0, r5
   2671a:	f7ff fe15 	bl	26348 <_malloc_r>
   2671e:	1e05      	subs	r5, r0, #0
   26720:	d003      	beq.n	2672a <_strdup_r+0x22>
   26722:	0022      	movs	r2, r4
   26724:	0031      	movs	r1, r6
   26726:	f7ff fda1 	bl	2626c <memcpy>
   2672a:	0028      	movs	r0, r5
   2672c:	bd70      	pop	{r4, r5, r6, pc}

0002672e <strlen>:
   2672e:	2300      	movs	r3, #0
   26730:	5cc2      	ldrb	r2, [r0, r3]
   26732:	3301      	adds	r3, #1
   26734:	2a00      	cmp	r2, #0
   26736:	d1fb      	bne.n	26730 <strlen+0x2>
   26738:	1e58      	subs	r0, r3, #1
   2673a:	4770      	bx	lr

0002673c <strncmp>:
   2673c:	2300      	movs	r3, #0
   2673e:	b530      	push	{r4, r5, lr}
   26740:	429a      	cmp	r2, r3
   26742:	d00a      	beq.n	2675a <strncmp+0x1e>
   26744:	3a01      	subs	r2, #1
   26746:	5cc4      	ldrb	r4, [r0, r3]
   26748:	5ccd      	ldrb	r5, [r1, r3]
   2674a:	42ac      	cmp	r4, r5
   2674c:	d104      	bne.n	26758 <strncmp+0x1c>
   2674e:	429a      	cmp	r2, r3
   26750:	d002      	beq.n	26758 <strncmp+0x1c>
   26752:	3301      	adds	r3, #1
   26754:	2c00      	cmp	r4, #0
   26756:	d1f6      	bne.n	26746 <strncmp+0xa>
   26758:	1b63      	subs	r3, r4, r5
   2675a:	0018      	movs	r0, r3
   2675c:	bd30      	pop	{r4, r5, pc}

0002675e <strncpy>:
   2675e:	b570      	push	{r4, r5, r6, lr}
   26760:	0004      	movs	r4, r0
   26762:	2a00      	cmp	r2, #0
   26764:	d100      	bne.n	26768 <strncpy+0xa>
   26766:	bd70      	pop	{r4, r5, r6, pc}
   26768:	780d      	ldrb	r5, [r1, #0]
   2676a:	1e56      	subs	r6, r2, #1
   2676c:	1c63      	adds	r3, r4, #1
   2676e:	7025      	strb	r5, [r4, #0]
   26770:	3101      	adds	r1, #1
   26772:	2d00      	cmp	r5, #0
   26774:	d105      	bne.n	26782 <strncpy+0x24>
   26776:	18a4      	adds	r4, r4, r2
   26778:	429c      	cmp	r4, r3
   2677a:	d0f4      	beq.n	26766 <strncpy+0x8>
   2677c:	701d      	strb	r5, [r3, #0]
   2677e:	3301      	adds	r3, #1
   26780:	e7fa      	b.n	26778 <strncpy+0x1a>
   26782:	001c      	movs	r4, r3
   26784:	0032      	movs	r2, r6
   26786:	e7ec      	b.n	26762 <strncpy+0x4>

00026788 <strrchr>:
   26788:	b570      	push	{r4, r5, r6, lr}
   2678a:	000d      	movs	r5, r1
   2678c:	2400      	movs	r4, #0
   2678e:	2900      	cmp	r1, #0
   26790:	d105      	bne.n	2679e <strrchr+0x16>
   26792:	f000 ff19 	bl	275c8 <strchr>
   26796:	0004      	movs	r4, r0
   26798:	e006      	b.n	267a8 <strrchr+0x20>
   2679a:	001c      	movs	r4, r3
   2679c:	1c58      	adds	r0, r3, #1
   2679e:	0029      	movs	r1, r5
   267a0:	f000 ff12 	bl	275c8 <strchr>
   267a4:	1e03      	subs	r3, r0, #0
   267a6:	d1f8      	bne.n	2679a <strrchr+0x12>
   267a8:	0020      	movs	r0, r4
   267aa:	bd70      	pop	{r4, r5, r6, pc}

000267ac <strstr>:
   267ac:	b510      	push	{r4, lr}
   267ae:	0002      	movs	r2, r0
   267b0:	7800      	ldrb	r0, [r0, #0]
   267b2:	2800      	cmp	r0, #0
   267b4:	d104      	bne.n	267c0 <strstr+0x14>
   267b6:	7809      	ldrb	r1, [r1, #0]
   267b8:	2900      	cmp	r1, #0
   267ba:	d00d      	beq.n	267d8 <strstr+0x2c>
   267bc:	bd10      	pop	{r4, pc}
   267be:	3201      	adds	r2, #1
   267c0:	7810      	ldrb	r0, [r2, #0]
   267c2:	2800      	cmp	r0, #0
   267c4:	d0fa      	beq.n	267bc <strstr+0x10>
   267c6:	2300      	movs	r3, #0
   267c8:	5cc8      	ldrb	r0, [r1, r3]
   267ca:	2800      	cmp	r0, #0
   267cc:	d004      	beq.n	267d8 <strstr+0x2c>
   267ce:	5cd4      	ldrb	r4, [r2, r3]
   267d0:	4284      	cmp	r4, r0
   267d2:	d1f4      	bne.n	267be <strstr+0x12>
   267d4:	3301      	adds	r3, #1
   267d6:	e7f7      	b.n	267c8 <strstr+0x1c>
   267d8:	0010      	movs	r0, r2
   267da:	e7ef      	b.n	267bc <strstr+0x10>

000267dc <_strtol_l.isra.0>:
   267dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   267de:	001f      	movs	r7, r3
   267e0:	000e      	movs	r6, r1
   267e2:	b087      	sub	sp, #28
   267e4:	9005      	str	r0, [sp, #20]
   267e6:	9103      	str	r1, [sp, #12]
   267e8:	9202      	str	r2, [sp, #8]
   267ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   267ec:	7834      	ldrb	r4, [r6, #0]
   267ee:	f000 fb20 	bl	26e32 <__locale_ctype_ptr_l>
   267f2:	2208      	movs	r2, #8
   267f4:	1900      	adds	r0, r0, r4
   267f6:	7843      	ldrb	r3, [r0, #1]
   267f8:	1c75      	adds	r5, r6, #1
   267fa:	4013      	ands	r3, r2
   267fc:	d10c      	bne.n	26818 <_strtol_l.isra.0+0x3c>
   267fe:	2c2d      	cmp	r4, #45	; 0x2d
   26800:	d10c      	bne.n	2681c <_strtol_l.isra.0+0x40>
   26802:	3301      	adds	r3, #1
   26804:	782c      	ldrb	r4, [r5, #0]
   26806:	9301      	str	r3, [sp, #4]
   26808:	1cb5      	adds	r5, r6, #2
   2680a:	2f00      	cmp	r7, #0
   2680c:	d00c      	beq.n	26828 <_strtol_l.isra.0+0x4c>
   2680e:	2f10      	cmp	r7, #16
   26810:	d114      	bne.n	2683c <_strtol_l.isra.0+0x60>
   26812:	2c30      	cmp	r4, #48	; 0x30
   26814:	d00a      	beq.n	2682c <_strtol_l.isra.0+0x50>
   26816:	e011      	b.n	2683c <_strtol_l.isra.0+0x60>
   26818:	002e      	movs	r6, r5
   2681a:	e7e6      	b.n	267ea <_strtol_l.isra.0+0xe>
   2681c:	9301      	str	r3, [sp, #4]
   2681e:	2c2b      	cmp	r4, #43	; 0x2b
   26820:	d1f3      	bne.n	2680a <_strtol_l.isra.0+0x2e>
   26822:	782c      	ldrb	r4, [r5, #0]
   26824:	1cb5      	adds	r5, r6, #2
   26826:	e7f0      	b.n	2680a <_strtol_l.isra.0+0x2e>
   26828:	2c30      	cmp	r4, #48	; 0x30
   2682a:	d12f      	bne.n	2688c <_strtol_l.isra.0+0xb0>
   2682c:	2220      	movs	r2, #32
   2682e:	782b      	ldrb	r3, [r5, #0]
   26830:	4393      	bics	r3, r2
   26832:	2b58      	cmp	r3, #88	; 0x58
   26834:	d151      	bne.n	268da <_strtol_l.isra.0+0xfe>
   26836:	2710      	movs	r7, #16
   26838:	786c      	ldrb	r4, [r5, #1]
   2683a:	3502      	adds	r5, #2
   2683c:	9b01      	ldr	r3, [sp, #4]
   2683e:	4a29      	ldr	r2, [pc, #164]	; (268e4 <_strtol_l.isra.0+0x108>)
   26840:	0039      	movs	r1, r7
   26842:	189e      	adds	r6, r3, r2
   26844:	0030      	movs	r0, r6
   26846:	f7fd fc7d 	bl	24144 <__aeabi_uidivmod>
   2684a:	0030      	movs	r0, r6
   2684c:	9104      	str	r1, [sp, #16]
   2684e:	0039      	movs	r1, r7
   26850:	f7fd fbf2 	bl	24038 <__udivsi3>
   26854:	2101      	movs	r1, #1
   26856:	2300      	movs	r3, #0
   26858:	4249      	negs	r1, r1
   2685a:	0002      	movs	r2, r0
   2685c:	468c      	mov	ip, r1
   2685e:	0018      	movs	r0, r3
   26860:	0021      	movs	r1, r4
   26862:	3930      	subs	r1, #48	; 0x30
   26864:	2909      	cmp	r1, #9
   26866:	d813      	bhi.n	26890 <_strtol_l.isra.0+0xb4>
   26868:	000c      	movs	r4, r1
   2686a:	42a7      	cmp	r7, r4
   2686c:	dd1c      	ble.n	268a8 <_strtol_l.isra.0+0xcc>
   2686e:	1c59      	adds	r1, r3, #1
   26870:	d009      	beq.n	26886 <_strtol_l.isra.0+0xaa>
   26872:	4663      	mov	r3, ip
   26874:	4282      	cmp	r2, r0
   26876:	d306      	bcc.n	26886 <_strtol_l.isra.0+0xaa>
   26878:	d102      	bne.n	26880 <_strtol_l.isra.0+0xa4>
   2687a:	9904      	ldr	r1, [sp, #16]
   2687c:	42a1      	cmp	r1, r4
   2687e:	db02      	blt.n	26886 <_strtol_l.isra.0+0xaa>
   26880:	2301      	movs	r3, #1
   26882:	4378      	muls	r0, r7
   26884:	1820      	adds	r0, r4, r0
   26886:	782c      	ldrb	r4, [r5, #0]
   26888:	3501      	adds	r5, #1
   2688a:	e7e9      	b.n	26860 <_strtol_l.isra.0+0x84>
   2688c:	270a      	movs	r7, #10
   2688e:	e7d5      	b.n	2683c <_strtol_l.isra.0+0x60>
   26890:	0021      	movs	r1, r4
   26892:	3941      	subs	r1, #65	; 0x41
   26894:	2919      	cmp	r1, #25
   26896:	d801      	bhi.n	2689c <_strtol_l.isra.0+0xc0>
   26898:	3c37      	subs	r4, #55	; 0x37
   2689a:	e7e6      	b.n	2686a <_strtol_l.isra.0+0x8e>
   2689c:	0021      	movs	r1, r4
   2689e:	3961      	subs	r1, #97	; 0x61
   268a0:	2919      	cmp	r1, #25
   268a2:	d801      	bhi.n	268a8 <_strtol_l.isra.0+0xcc>
   268a4:	3c57      	subs	r4, #87	; 0x57
   268a6:	e7e0      	b.n	2686a <_strtol_l.isra.0+0x8e>
   268a8:	1c5a      	adds	r2, r3, #1
   268aa:	d108      	bne.n	268be <_strtol_l.isra.0+0xe2>
   268ac:	9a05      	ldr	r2, [sp, #20]
   268ae:	3323      	adds	r3, #35	; 0x23
   268b0:	6013      	str	r3, [r2, #0]
   268b2:	9b02      	ldr	r3, [sp, #8]
   268b4:	0030      	movs	r0, r6
   268b6:	2b00      	cmp	r3, #0
   268b8:	d10b      	bne.n	268d2 <_strtol_l.isra.0+0xf6>
   268ba:	b007      	add	sp, #28
   268bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   268be:	9a01      	ldr	r2, [sp, #4]
   268c0:	2a00      	cmp	r2, #0
   268c2:	d000      	beq.n	268c6 <_strtol_l.isra.0+0xea>
   268c4:	4240      	negs	r0, r0
   268c6:	9a02      	ldr	r2, [sp, #8]
   268c8:	2a00      	cmp	r2, #0
   268ca:	d0f6      	beq.n	268ba <_strtol_l.isra.0+0xde>
   268cc:	9a03      	ldr	r2, [sp, #12]
   268ce:	2b00      	cmp	r3, #0
   268d0:	d000      	beq.n	268d4 <_strtol_l.isra.0+0xf8>
   268d2:	1e6a      	subs	r2, r5, #1
   268d4:	9b02      	ldr	r3, [sp, #8]
   268d6:	601a      	str	r2, [r3, #0]
   268d8:	e7ef      	b.n	268ba <_strtol_l.isra.0+0xde>
   268da:	2430      	movs	r4, #48	; 0x30
   268dc:	2f00      	cmp	r7, #0
   268de:	d1ad      	bne.n	2683c <_strtol_l.isra.0+0x60>
   268e0:	3708      	adds	r7, #8
   268e2:	e7ab      	b.n	2683c <_strtol_l.isra.0+0x60>
   268e4:	7fffffff 	.word	0x7fffffff

000268e8 <strtol>:
   268e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   268ea:	0013      	movs	r3, r2
   268ec:	4a06      	ldr	r2, [pc, #24]	; (26908 <strtol+0x20>)
   268ee:	0005      	movs	r5, r0
   268f0:	6810      	ldr	r0, [r2, #0]
   268f2:	6a04      	ldr	r4, [r0, #32]
   268f4:	2c00      	cmp	r4, #0
   268f6:	d100      	bne.n	268fa <strtol+0x12>
   268f8:	4c04      	ldr	r4, [pc, #16]	; (2690c <strtol+0x24>)
   268fa:	000a      	movs	r2, r1
   268fc:	9400      	str	r4, [sp, #0]
   268fe:	0029      	movs	r1, r5
   26900:	f7ff ff6c 	bl	267dc <_strtol_l.isra.0>
   26904:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   26906:	46c0      	nop			; (mov r8, r8)
   26908:	200000dc 	.word	0x200000dc
   2690c:	20000140 	.word	0x20000140

00026910 <_vsniprintf_r>:
   26910:	b530      	push	{r4, r5, lr}
   26912:	0014      	movs	r4, r2
   26914:	b09b      	sub	sp, #108	; 0x6c
   26916:	0005      	movs	r5, r0
   26918:	001a      	movs	r2, r3
   2691a:	2c00      	cmp	r4, #0
   2691c:	da05      	bge.n	2692a <_vsniprintf_r+0x1a>
   2691e:	238b      	movs	r3, #139	; 0x8b
   26920:	6003      	str	r3, [r0, #0]
   26922:	2001      	movs	r0, #1
   26924:	4240      	negs	r0, r0
   26926:	b01b      	add	sp, #108	; 0x6c
   26928:	bd30      	pop	{r4, r5, pc}
   2692a:	2382      	movs	r3, #130	; 0x82
   2692c:	4668      	mov	r0, sp
   2692e:	009b      	lsls	r3, r3, #2
   26930:	8183      	strh	r3, [r0, #12]
   26932:	2300      	movs	r3, #0
   26934:	9100      	str	r1, [sp, #0]
   26936:	9104      	str	r1, [sp, #16]
   26938:	429c      	cmp	r4, r3
   2693a:	d000      	beq.n	2693e <_vsniprintf_r+0x2e>
   2693c:	1e63      	subs	r3, r4, #1
   2693e:	9302      	str	r3, [sp, #8]
   26940:	9305      	str	r3, [sp, #20]
   26942:	2301      	movs	r3, #1
   26944:	4669      	mov	r1, sp
   26946:	425b      	negs	r3, r3
   26948:	81cb      	strh	r3, [r1, #14]
   2694a:	0028      	movs	r0, r5
   2694c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2694e:	f000 fb63 	bl	27018 <_svfiprintf_r>
   26952:	1c43      	adds	r3, r0, #1
   26954:	da01      	bge.n	2695a <_vsniprintf_r+0x4a>
   26956:	238b      	movs	r3, #139	; 0x8b
   26958:	602b      	str	r3, [r5, #0]
   2695a:	2c00      	cmp	r4, #0
   2695c:	d0e3      	beq.n	26926 <_vsniprintf_r+0x16>
   2695e:	2300      	movs	r3, #0
   26960:	9a00      	ldr	r2, [sp, #0]
   26962:	7013      	strb	r3, [r2, #0]
   26964:	e7df      	b.n	26926 <_vsniprintf_r+0x16>
	...

00026968 <vsniprintf>:
   26968:	b507      	push	{r0, r1, r2, lr}
   2696a:	9300      	str	r3, [sp, #0]
   2696c:	0013      	movs	r3, r2
   2696e:	000a      	movs	r2, r1
   26970:	0001      	movs	r1, r0
   26972:	4802      	ldr	r0, [pc, #8]	; (2697c <vsniprintf+0x14>)
   26974:	6800      	ldr	r0, [r0, #0]
   26976:	f7ff ffcb 	bl	26910 <_vsniprintf_r>
   2697a:	bd0e      	pop	{r1, r2, r3, pc}
   2697c:	200000dc 	.word	0x200000dc

00026980 <__swbuf_r>:
   26980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26982:	0005      	movs	r5, r0
   26984:	000e      	movs	r6, r1
   26986:	0014      	movs	r4, r2
   26988:	2800      	cmp	r0, #0
   2698a:	d004      	beq.n	26996 <__swbuf_r+0x16>
   2698c:	6983      	ldr	r3, [r0, #24]
   2698e:	2b00      	cmp	r3, #0
   26990:	d101      	bne.n	26996 <__swbuf_r+0x16>
   26992:	f000 f9b9 	bl	26d08 <__sinit>
   26996:	4b22      	ldr	r3, [pc, #136]	; (26a20 <__swbuf_r+0xa0>)
   26998:	429c      	cmp	r4, r3
   2699a:	d12d      	bne.n	269f8 <__swbuf_r+0x78>
   2699c:	686c      	ldr	r4, [r5, #4]
   2699e:	69a3      	ldr	r3, [r4, #24]
   269a0:	60a3      	str	r3, [r4, #8]
   269a2:	89a3      	ldrh	r3, [r4, #12]
   269a4:	071b      	lsls	r3, r3, #28
   269a6:	d531      	bpl.n	26a0c <__swbuf_r+0x8c>
   269a8:	6923      	ldr	r3, [r4, #16]
   269aa:	2b00      	cmp	r3, #0
   269ac:	d02e      	beq.n	26a0c <__swbuf_r+0x8c>
   269ae:	6823      	ldr	r3, [r4, #0]
   269b0:	6922      	ldr	r2, [r4, #16]
   269b2:	b2f7      	uxtb	r7, r6
   269b4:	1a98      	subs	r0, r3, r2
   269b6:	6963      	ldr	r3, [r4, #20]
   269b8:	b2f6      	uxtb	r6, r6
   269ba:	4298      	cmp	r0, r3
   269bc:	db05      	blt.n	269ca <__swbuf_r+0x4a>
   269be:	0021      	movs	r1, r4
   269c0:	0028      	movs	r0, r5
   269c2:	f000 f933 	bl	26c2c <_fflush_r>
   269c6:	2800      	cmp	r0, #0
   269c8:	d126      	bne.n	26a18 <__swbuf_r+0x98>
   269ca:	68a3      	ldr	r3, [r4, #8]
   269cc:	3001      	adds	r0, #1
   269ce:	3b01      	subs	r3, #1
   269d0:	60a3      	str	r3, [r4, #8]
   269d2:	6823      	ldr	r3, [r4, #0]
   269d4:	1c5a      	adds	r2, r3, #1
   269d6:	6022      	str	r2, [r4, #0]
   269d8:	701f      	strb	r7, [r3, #0]
   269da:	6963      	ldr	r3, [r4, #20]
   269dc:	4298      	cmp	r0, r3
   269de:	d004      	beq.n	269ea <__swbuf_r+0x6a>
   269e0:	89a3      	ldrh	r3, [r4, #12]
   269e2:	07db      	lsls	r3, r3, #31
   269e4:	d51a      	bpl.n	26a1c <__swbuf_r+0x9c>
   269e6:	2e0a      	cmp	r6, #10
   269e8:	d118      	bne.n	26a1c <__swbuf_r+0x9c>
   269ea:	0021      	movs	r1, r4
   269ec:	0028      	movs	r0, r5
   269ee:	f000 f91d 	bl	26c2c <_fflush_r>
   269f2:	2800      	cmp	r0, #0
   269f4:	d012      	beq.n	26a1c <__swbuf_r+0x9c>
   269f6:	e00f      	b.n	26a18 <__swbuf_r+0x98>
   269f8:	4b0a      	ldr	r3, [pc, #40]	; (26a24 <__swbuf_r+0xa4>)
   269fa:	429c      	cmp	r4, r3
   269fc:	d101      	bne.n	26a02 <__swbuf_r+0x82>
   269fe:	68ac      	ldr	r4, [r5, #8]
   26a00:	e7cd      	b.n	2699e <__swbuf_r+0x1e>
   26a02:	4b09      	ldr	r3, [pc, #36]	; (26a28 <__swbuf_r+0xa8>)
   26a04:	429c      	cmp	r4, r3
   26a06:	d1ca      	bne.n	2699e <__swbuf_r+0x1e>
   26a08:	68ec      	ldr	r4, [r5, #12]
   26a0a:	e7c8      	b.n	2699e <__swbuf_r+0x1e>
   26a0c:	0021      	movs	r1, r4
   26a0e:	0028      	movs	r0, r5
   26a10:	f000 f80c 	bl	26a2c <__swsetup_r>
   26a14:	2800      	cmp	r0, #0
   26a16:	d0ca      	beq.n	269ae <__swbuf_r+0x2e>
   26a18:	2601      	movs	r6, #1
   26a1a:	4276      	negs	r6, r6
   26a1c:	0030      	movs	r0, r6
   26a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a20:	0002b0c4 	.word	0x0002b0c4
   26a24:	0002b0e4 	.word	0x0002b0e4
   26a28:	0002b0a4 	.word	0x0002b0a4

00026a2c <__swsetup_r>:
   26a2c:	4b36      	ldr	r3, [pc, #216]	; (26b08 <__swsetup_r+0xdc>)
   26a2e:	b570      	push	{r4, r5, r6, lr}
   26a30:	681d      	ldr	r5, [r3, #0]
   26a32:	0006      	movs	r6, r0
   26a34:	000c      	movs	r4, r1
   26a36:	2d00      	cmp	r5, #0
   26a38:	d005      	beq.n	26a46 <__swsetup_r+0x1a>
   26a3a:	69ab      	ldr	r3, [r5, #24]
   26a3c:	2b00      	cmp	r3, #0
   26a3e:	d102      	bne.n	26a46 <__swsetup_r+0x1a>
   26a40:	0028      	movs	r0, r5
   26a42:	f000 f961 	bl	26d08 <__sinit>
   26a46:	4b31      	ldr	r3, [pc, #196]	; (26b0c <__swsetup_r+0xe0>)
   26a48:	429c      	cmp	r4, r3
   26a4a:	d10f      	bne.n	26a6c <__swsetup_r+0x40>
   26a4c:	686c      	ldr	r4, [r5, #4]
   26a4e:	230c      	movs	r3, #12
   26a50:	5ee2      	ldrsh	r2, [r4, r3]
   26a52:	b293      	uxth	r3, r2
   26a54:	0719      	lsls	r1, r3, #28
   26a56:	d42d      	bmi.n	26ab4 <__swsetup_r+0x88>
   26a58:	06d9      	lsls	r1, r3, #27
   26a5a:	d411      	bmi.n	26a80 <__swsetup_r+0x54>
   26a5c:	2309      	movs	r3, #9
   26a5e:	2001      	movs	r0, #1
   26a60:	6033      	str	r3, [r6, #0]
   26a62:	3337      	adds	r3, #55	; 0x37
   26a64:	4313      	orrs	r3, r2
   26a66:	81a3      	strh	r3, [r4, #12]
   26a68:	4240      	negs	r0, r0
   26a6a:	bd70      	pop	{r4, r5, r6, pc}
   26a6c:	4b28      	ldr	r3, [pc, #160]	; (26b10 <__swsetup_r+0xe4>)
   26a6e:	429c      	cmp	r4, r3
   26a70:	d101      	bne.n	26a76 <__swsetup_r+0x4a>
   26a72:	68ac      	ldr	r4, [r5, #8]
   26a74:	e7eb      	b.n	26a4e <__swsetup_r+0x22>
   26a76:	4b27      	ldr	r3, [pc, #156]	; (26b14 <__swsetup_r+0xe8>)
   26a78:	429c      	cmp	r4, r3
   26a7a:	d1e8      	bne.n	26a4e <__swsetup_r+0x22>
   26a7c:	68ec      	ldr	r4, [r5, #12]
   26a7e:	e7e6      	b.n	26a4e <__swsetup_r+0x22>
   26a80:	075b      	lsls	r3, r3, #29
   26a82:	d513      	bpl.n	26aac <__swsetup_r+0x80>
   26a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26a86:	2900      	cmp	r1, #0
   26a88:	d008      	beq.n	26a9c <__swsetup_r+0x70>
   26a8a:	0023      	movs	r3, r4
   26a8c:	3344      	adds	r3, #68	; 0x44
   26a8e:	4299      	cmp	r1, r3
   26a90:	d002      	beq.n	26a98 <__swsetup_r+0x6c>
   26a92:	0030      	movs	r0, r6
   26a94:	f7ff fc0e 	bl	262b4 <_free_r>
   26a98:	2300      	movs	r3, #0
   26a9a:	6363      	str	r3, [r4, #52]	; 0x34
   26a9c:	2224      	movs	r2, #36	; 0x24
   26a9e:	89a3      	ldrh	r3, [r4, #12]
   26aa0:	4393      	bics	r3, r2
   26aa2:	81a3      	strh	r3, [r4, #12]
   26aa4:	2300      	movs	r3, #0
   26aa6:	6063      	str	r3, [r4, #4]
   26aa8:	6923      	ldr	r3, [r4, #16]
   26aaa:	6023      	str	r3, [r4, #0]
   26aac:	2308      	movs	r3, #8
   26aae:	89a2      	ldrh	r2, [r4, #12]
   26ab0:	4313      	orrs	r3, r2
   26ab2:	81a3      	strh	r3, [r4, #12]
   26ab4:	6923      	ldr	r3, [r4, #16]
   26ab6:	2b00      	cmp	r3, #0
   26ab8:	d10b      	bne.n	26ad2 <__swsetup_r+0xa6>
   26aba:	21a0      	movs	r1, #160	; 0xa0
   26abc:	2280      	movs	r2, #128	; 0x80
   26abe:	89a3      	ldrh	r3, [r4, #12]
   26ac0:	0089      	lsls	r1, r1, #2
   26ac2:	0092      	lsls	r2, r2, #2
   26ac4:	400b      	ands	r3, r1
   26ac6:	4293      	cmp	r3, r2
   26ac8:	d003      	beq.n	26ad2 <__swsetup_r+0xa6>
   26aca:	0021      	movs	r1, r4
   26acc:	0030      	movs	r0, r6
   26ace:	f000 f9e9 	bl	26ea4 <__smakebuf_r>
   26ad2:	2301      	movs	r3, #1
   26ad4:	89a2      	ldrh	r2, [r4, #12]
   26ad6:	4013      	ands	r3, r2
   26ad8:	d011      	beq.n	26afe <__swsetup_r+0xd2>
   26ada:	2300      	movs	r3, #0
   26adc:	60a3      	str	r3, [r4, #8]
   26ade:	6963      	ldr	r3, [r4, #20]
   26ae0:	425b      	negs	r3, r3
   26ae2:	61a3      	str	r3, [r4, #24]
   26ae4:	2000      	movs	r0, #0
   26ae6:	6923      	ldr	r3, [r4, #16]
   26ae8:	4283      	cmp	r3, r0
   26aea:	d1be      	bne.n	26a6a <__swsetup_r+0x3e>
   26aec:	230c      	movs	r3, #12
   26aee:	5ee2      	ldrsh	r2, [r4, r3]
   26af0:	0613      	lsls	r3, r2, #24
   26af2:	d5ba      	bpl.n	26a6a <__swsetup_r+0x3e>
   26af4:	2340      	movs	r3, #64	; 0x40
   26af6:	4313      	orrs	r3, r2
   26af8:	81a3      	strh	r3, [r4, #12]
   26afa:	3801      	subs	r0, #1
   26afc:	e7b5      	b.n	26a6a <__swsetup_r+0x3e>
   26afe:	0792      	lsls	r2, r2, #30
   26b00:	d400      	bmi.n	26b04 <__swsetup_r+0xd8>
   26b02:	6963      	ldr	r3, [r4, #20]
   26b04:	60a3      	str	r3, [r4, #8]
   26b06:	e7ed      	b.n	26ae4 <__swsetup_r+0xb8>
   26b08:	200000dc 	.word	0x200000dc
   26b0c:	0002b0c4 	.word	0x0002b0c4
   26b10:	0002b0e4 	.word	0x0002b0e4
   26b14:	0002b0a4 	.word	0x0002b0a4

00026b18 <__sflush_r>:
   26b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26b1a:	898a      	ldrh	r2, [r1, #12]
   26b1c:	0005      	movs	r5, r0
   26b1e:	000c      	movs	r4, r1
   26b20:	0713      	lsls	r3, r2, #28
   26b22:	d460      	bmi.n	26be6 <__sflush_r+0xce>
   26b24:	684b      	ldr	r3, [r1, #4]
   26b26:	2b00      	cmp	r3, #0
   26b28:	dc04      	bgt.n	26b34 <__sflush_r+0x1c>
   26b2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   26b2c:	2b00      	cmp	r3, #0
   26b2e:	dc01      	bgt.n	26b34 <__sflush_r+0x1c>
   26b30:	2000      	movs	r0, #0
   26b32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26b34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26b36:	2f00      	cmp	r7, #0
   26b38:	d0fa      	beq.n	26b30 <__sflush_r+0x18>
   26b3a:	2300      	movs	r3, #0
   26b3c:	682e      	ldr	r6, [r5, #0]
   26b3e:	602b      	str	r3, [r5, #0]
   26b40:	2380      	movs	r3, #128	; 0x80
   26b42:	015b      	lsls	r3, r3, #5
   26b44:	401a      	ands	r2, r3
   26b46:	d034      	beq.n	26bb2 <__sflush_r+0x9a>
   26b48:	6d60      	ldr	r0, [r4, #84]	; 0x54
   26b4a:	89a3      	ldrh	r3, [r4, #12]
   26b4c:	075b      	lsls	r3, r3, #29
   26b4e:	d506      	bpl.n	26b5e <__sflush_r+0x46>
   26b50:	6863      	ldr	r3, [r4, #4]
   26b52:	1ac0      	subs	r0, r0, r3
   26b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26b56:	2b00      	cmp	r3, #0
   26b58:	d001      	beq.n	26b5e <__sflush_r+0x46>
   26b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26b5c:	1ac0      	subs	r0, r0, r3
   26b5e:	0002      	movs	r2, r0
   26b60:	6a21      	ldr	r1, [r4, #32]
   26b62:	2300      	movs	r3, #0
   26b64:	0028      	movs	r0, r5
   26b66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26b68:	47b8      	blx	r7
   26b6a:	89a1      	ldrh	r1, [r4, #12]
   26b6c:	1c43      	adds	r3, r0, #1
   26b6e:	d106      	bne.n	26b7e <__sflush_r+0x66>
   26b70:	682b      	ldr	r3, [r5, #0]
   26b72:	2b1d      	cmp	r3, #29
   26b74:	d831      	bhi.n	26bda <__sflush_r+0xc2>
   26b76:	4a2c      	ldr	r2, [pc, #176]	; (26c28 <__sflush_r+0x110>)
   26b78:	40da      	lsrs	r2, r3
   26b7a:	07d3      	lsls	r3, r2, #31
   26b7c:	d52d      	bpl.n	26bda <__sflush_r+0xc2>
   26b7e:	2300      	movs	r3, #0
   26b80:	6063      	str	r3, [r4, #4]
   26b82:	6923      	ldr	r3, [r4, #16]
   26b84:	6023      	str	r3, [r4, #0]
   26b86:	04cb      	lsls	r3, r1, #19
   26b88:	d505      	bpl.n	26b96 <__sflush_r+0x7e>
   26b8a:	1c43      	adds	r3, r0, #1
   26b8c:	d102      	bne.n	26b94 <__sflush_r+0x7c>
   26b8e:	682b      	ldr	r3, [r5, #0]
   26b90:	2b00      	cmp	r3, #0
   26b92:	d100      	bne.n	26b96 <__sflush_r+0x7e>
   26b94:	6560      	str	r0, [r4, #84]	; 0x54
   26b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26b98:	602e      	str	r6, [r5, #0]
   26b9a:	2900      	cmp	r1, #0
   26b9c:	d0c8      	beq.n	26b30 <__sflush_r+0x18>
   26b9e:	0023      	movs	r3, r4
   26ba0:	3344      	adds	r3, #68	; 0x44
   26ba2:	4299      	cmp	r1, r3
   26ba4:	d002      	beq.n	26bac <__sflush_r+0x94>
   26ba6:	0028      	movs	r0, r5
   26ba8:	f7ff fb84 	bl	262b4 <_free_r>
   26bac:	2000      	movs	r0, #0
   26bae:	6360      	str	r0, [r4, #52]	; 0x34
   26bb0:	e7bf      	b.n	26b32 <__sflush_r+0x1a>
   26bb2:	2301      	movs	r3, #1
   26bb4:	6a21      	ldr	r1, [r4, #32]
   26bb6:	0028      	movs	r0, r5
   26bb8:	47b8      	blx	r7
   26bba:	1c43      	adds	r3, r0, #1
   26bbc:	d1c5      	bne.n	26b4a <__sflush_r+0x32>
   26bbe:	682b      	ldr	r3, [r5, #0]
   26bc0:	2b00      	cmp	r3, #0
   26bc2:	d0c2      	beq.n	26b4a <__sflush_r+0x32>
   26bc4:	2b1d      	cmp	r3, #29
   26bc6:	d001      	beq.n	26bcc <__sflush_r+0xb4>
   26bc8:	2b16      	cmp	r3, #22
   26bca:	d101      	bne.n	26bd0 <__sflush_r+0xb8>
   26bcc:	602e      	str	r6, [r5, #0]
   26bce:	e7af      	b.n	26b30 <__sflush_r+0x18>
   26bd0:	2340      	movs	r3, #64	; 0x40
   26bd2:	89a2      	ldrh	r2, [r4, #12]
   26bd4:	4313      	orrs	r3, r2
   26bd6:	81a3      	strh	r3, [r4, #12]
   26bd8:	e7ab      	b.n	26b32 <__sflush_r+0x1a>
   26bda:	2340      	movs	r3, #64	; 0x40
   26bdc:	430b      	orrs	r3, r1
   26bde:	2001      	movs	r0, #1
   26be0:	81a3      	strh	r3, [r4, #12]
   26be2:	4240      	negs	r0, r0
   26be4:	e7a5      	b.n	26b32 <__sflush_r+0x1a>
   26be6:	690f      	ldr	r7, [r1, #16]
   26be8:	2f00      	cmp	r7, #0
   26bea:	d0a1      	beq.n	26b30 <__sflush_r+0x18>
   26bec:	680b      	ldr	r3, [r1, #0]
   26bee:	600f      	str	r7, [r1, #0]
   26bf0:	1bdb      	subs	r3, r3, r7
   26bf2:	9301      	str	r3, [sp, #4]
   26bf4:	2300      	movs	r3, #0
   26bf6:	0792      	lsls	r2, r2, #30
   26bf8:	d100      	bne.n	26bfc <__sflush_r+0xe4>
   26bfa:	694b      	ldr	r3, [r1, #20]
   26bfc:	60a3      	str	r3, [r4, #8]
   26bfe:	9b01      	ldr	r3, [sp, #4]
   26c00:	2b00      	cmp	r3, #0
   26c02:	dc00      	bgt.n	26c06 <__sflush_r+0xee>
   26c04:	e794      	b.n	26b30 <__sflush_r+0x18>
   26c06:	9b01      	ldr	r3, [sp, #4]
   26c08:	003a      	movs	r2, r7
   26c0a:	6a21      	ldr	r1, [r4, #32]
   26c0c:	0028      	movs	r0, r5
   26c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   26c10:	47b0      	blx	r6
   26c12:	2800      	cmp	r0, #0
   26c14:	dc03      	bgt.n	26c1e <__sflush_r+0x106>
   26c16:	2340      	movs	r3, #64	; 0x40
   26c18:	89a2      	ldrh	r2, [r4, #12]
   26c1a:	4313      	orrs	r3, r2
   26c1c:	e7df      	b.n	26bde <__sflush_r+0xc6>
   26c1e:	9b01      	ldr	r3, [sp, #4]
   26c20:	183f      	adds	r7, r7, r0
   26c22:	1a1b      	subs	r3, r3, r0
   26c24:	9301      	str	r3, [sp, #4]
   26c26:	e7ea      	b.n	26bfe <__sflush_r+0xe6>
   26c28:	20400001 	.word	0x20400001

00026c2c <_fflush_r>:
   26c2c:	690b      	ldr	r3, [r1, #16]
   26c2e:	b570      	push	{r4, r5, r6, lr}
   26c30:	0005      	movs	r5, r0
   26c32:	000c      	movs	r4, r1
   26c34:	2b00      	cmp	r3, #0
   26c36:	d101      	bne.n	26c3c <_fflush_r+0x10>
   26c38:	2000      	movs	r0, #0
   26c3a:	bd70      	pop	{r4, r5, r6, pc}
   26c3c:	2800      	cmp	r0, #0
   26c3e:	d004      	beq.n	26c4a <_fflush_r+0x1e>
   26c40:	6983      	ldr	r3, [r0, #24]
   26c42:	2b00      	cmp	r3, #0
   26c44:	d101      	bne.n	26c4a <_fflush_r+0x1e>
   26c46:	f000 f85f 	bl	26d08 <__sinit>
   26c4a:	4b0b      	ldr	r3, [pc, #44]	; (26c78 <_fflush_r+0x4c>)
   26c4c:	429c      	cmp	r4, r3
   26c4e:	d109      	bne.n	26c64 <_fflush_r+0x38>
   26c50:	686c      	ldr	r4, [r5, #4]
   26c52:	220c      	movs	r2, #12
   26c54:	5ea3      	ldrsh	r3, [r4, r2]
   26c56:	2b00      	cmp	r3, #0
   26c58:	d0ee      	beq.n	26c38 <_fflush_r+0xc>
   26c5a:	0021      	movs	r1, r4
   26c5c:	0028      	movs	r0, r5
   26c5e:	f7ff ff5b 	bl	26b18 <__sflush_r>
   26c62:	e7ea      	b.n	26c3a <_fflush_r+0xe>
   26c64:	4b05      	ldr	r3, [pc, #20]	; (26c7c <_fflush_r+0x50>)
   26c66:	429c      	cmp	r4, r3
   26c68:	d101      	bne.n	26c6e <_fflush_r+0x42>
   26c6a:	68ac      	ldr	r4, [r5, #8]
   26c6c:	e7f1      	b.n	26c52 <_fflush_r+0x26>
   26c6e:	4b04      	ldr	r3, [pc, #16]	; (26c80 <_fflush_r+0x54>)
   26c70:	429c      	cmp	r4, r3
   26c72:	d1ee      	bne.n	26c52 <_fflush_r+0x26>
   26c74:	68ec      	ldr	r4, [r5, #12]
   26c76:	e7ec      	b.n	26c52 <_fflush_r+0x26>
   26c78:	0002b0c4 	.word	0x0002b0c4
   26c7c:	0002b0e4 	.word	0x0002b0e4
   26c80:	0002b0a4 	.word	0x0002b0a4

00026c84 <_cleanup_r>:
   26c84:	b510      	push	{r4, lr}
   26c86:	4902      	ldr	r1, [pc, #8]	; (26c90 <_cleanup_r+0xc>)
   26c88:	f000 f8b2 	bl	26df0 <_fwalk_reent>
   26c8c:	bd10      	pop	{r4, pc}
   26c8e:	46c0      	nop			; (mov r8, r8)
   26c90:	00026c2d 	.word	0x00026c2d

00026c94 <std.isra.0>:
   26c94:	2300      	movs	r3, #0
   26c96:	b510      	push	{r4, lr}
   26c98:	0004      	movs	r4, r0
   26c9a:	6003      	str	r3, [r0, #0]
   26c9c:	6043      	str	r3, [r0, #4]
   26c9e:	6083      	str	r3, [r0, #8]
   26ca0:	8181      	strh	r1, [r0, #12]
   26ca2:	6643      	str	r3, [r0, #100]	; 0x64
   26ca4:	81c2      	strh	r2, [r0, #14]
   26ca6:	6103      	str	r3, [r0, #16]
   26ca8:	6143      	str	r3, [r0, #20]
   26caa:	6183      	str	r3, [r0, #24]
   26cac:	0019      	movs	r1, r3
   26cae:	2208      	movs	r2, #8
   26cb0:	305c      	adds	r0, #92	; 0x5c
   26cb2:	f7ff faf6 	bl	262a2 <memset>
   26cb6:	4b05      	ldr	r3, [pc, #20]	; (26ccc <std.isra.0+0x38>)
   26cb8:	6224      	str	r4, [r4, #32]
   26cba:	6263      	str	r3, [r4, #36]	; 0x24
   26cbc:	4b04      	ldr	r3, [pc, #16]	; (26cd0 <std.isra.0+0x3c>)
   26cbe:	62a3      	str	r3, [r4, #40]	; 0x28
   26cc0:	4b04      	ldr	r3, [pc, #16]	; (26cd4 <std.isra.0+0x40>)
   26cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
   26cc4:	4b04      	ldr	r3, [pc, #16]	; (26cd8 <std.isra.0+0x44>)
   26cc6:	6323      	str	r3, [r4, #48]	; 0x30
   26cc8:	bd10      	pop	{r4, pc}
   26cca:	46c0      	nop			; (mov r8, r8)
   26ccc:	00027531 	.word	0x00027531
   26cd0:	00027559 	.word	0x00027559
   26cd4:	00027591 	.word	0x00027591
   26cd8:	000275bd 	.word	0x000275bd

00026cdc <__sfmoreglue>:
   26cdc:	b570      	push	{r4, r5, r6, lr}
   26cde:	2568      	movs	r5, #104	; 0x68
   26ce0:	1e4a      	subs	r2, r1, #1
   26ce2:	4355      	muls	r5, r2
   26ce4:	000e      	movs	r6, r1
   26ce6:	0029      	movs	r1, r5
   26ce8:	3174      	adds	r1, #116	; 0x74
   26cea:	f7ff fb2d 	bl	26348 <_malloc_r>
   26cee:	1e04      	subs	r4, r0, #0
   26cf0:	d008      	beq.n	26d04 <__sfmoreglue+0x28>
   26cf2:	2100      	movs	r1, #0
   26cf4:	002a      	movs	r2, r5
   26cf6:	6001      	str	r1, [r0, #0]
   26cf8:	6046      	str	r6, [r0, #4]
   26cfa:	300c      	adds	r0, #12
   26cfc:	60a0      	str	r0, [r4, #8]
   26cfe:	3268      	adds	r2, #104	; 0x68
   26d00:	f7ff facf 	bl	262a2 <memset>
   26d04:	0020      	movs	r0, r4
   26d06:	bd70      	pop	{r4, r5, r6, pc}

00026d08 <__sinit>:
   26d08:	6983      	ldr	r3, [r0, #24]
   26d0a:	b513      	push	{r0, r1, r4, lr}
   26d0c:	0004      	movs	r4, r0
   26d0e:	2b00      	cmp	r3, #0
   26d10:	d128      	bne.n	26d64 <__sinit+0x5c>
   26d12:	6483      	str	r3, [r0, #72]	; 0x48
   26d14:	64c3      	str	r3, [r0, #76]	; 0x4c
   26d16:	6503      	str	r3, [r0, #80]	; 0x50
   26d18:	4b13      	ldr	r3, [pc, #76]	; (26d68 <__sinit+0x60>)
   26d1a:	4a14      	ldr	r2, [pc, #80]	; (26d6c <__sinit+0x64>)
   26d1c:	681b      	ldr	r3, [r3, #0]
   26d1e:	6282      	str	r2, [r0, #40]	; 0x28
   26d20:	9301      	str	r3, [sp, #4]
   26d22:	4298      	cmp	r0, r3
   26d24:	d101      	bne.n	26d2a <__sinit+0x22>
   26d26:	2301      	movs	r3, #1
   26d28:	6183      	str	r3, [r0, #24]
   26d2a:	0020      	movs	r0, r4
   26d2c:	f000 f820 	bl	26d70 <__sfp>
   26d30:	6060      	str	r0, [r4, #4]
   26d32:	0020      	movs	r0, r4
   26d34:	f000 f81c 	bl	26d70 <__sfp>
   26d38:	60a0      	str	r0, [r4, #8]
   26d3a:	0020      	movs	r0, r4
   26d3c:	f000 f818 	bl	26d70 <__sfp>
   26d40:	2200      	movs	r2, #0
   26d42:	60e0      	str	r0, [r4, #12]
   26d44:	2104      	movs	r1, #4
   26d46:	6860      	ldr	r0, [r4, #4]
   26d48:	f7ff ffa4 	bl	26c94 <std.isra.0>
   26d4c:	2201      	movs	r2, #1
   26d4e:	2109      	movs	r1, #9
   26d50:	68a0      	ldr	r0, [r4, #8]
   26d52:	f7ff ff9f 	bl	26c94 <std.isra.0>
   26d56:	2202      	movs	r2, #2
   26d58:	2112      	movs	r1, #18
   26d5a:	68e0      	ldr	r0, [r4, #12]
   26d5c:	f7ff ff9a 	bl	26c94 <std.isra.0>
   26d60:	2301      	movs	r3, #1
   26d62:	61a3      	str	r3, [r4, #24]
   26d64:	bd13      	pop	{r0, r1, r4, pc}
   26d66:	46c0      	nop			; (mov r8, r8)
   26d68:	0002b0a0 	.word	0x0002b0a0
   26d6c:	00026c85 	.word	0x00026c85

00026d70 <__sfp>:
   26d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d72:	4b1e      	ldr	r3, [pc, #120]	; (26dec <__sfp+0x7c>)
   26d74:	0007      	movs	r7, r0
   26d76:	681e      	ldr	r6, [r3, #0]
   26d78:	69b3      	ldr	r3, [r6, #24]
   26d7a:	2b00      	cmp	r3, #0
   26d7c:	d102      	bne.n	26d84 <__sfp+0x14>
   26d7e:	0030      	movs	r0, r6
   26d80:	f7ff ffc2 	bl	26d08 <__sinit>
   26d84:	3648      	adds	r6, #72	; 0x48
   26d86:	68b4      	ldr	r4, [r6, #8]
   26d88:	6873      	ldr	r3, [r6, #4]
   26d8a:	3b01      	subs	r3, #1
   26d8c:	d504      	bpl.n	26d98 <__sfp+0x28>
   26d8e:	6833      	ldr	r3, [r6, #0]
   26d90:	2b00      	cmp	r3, #0
   26d92:	d007      	beq.n	26da4 <__sfp+0x34>
   26d94:	6836      	ldr	r6, [r6, #0]
   26d96:	e7f6      	b.n	26d86 <__sfp+0x16>
   26d98:	220c      	movs	r2, #12
   26d9a:	5ea5      	ldrsh	r5, [r4, r2]
   26d9c:	2d00      	cmp	r5, #0
   26d9e:	d00d      	beq.n	26dbc <__sfp+0x4c>
   26da0:	3468      	adds	r4, #104	; 0x68
   26da2:	e7f2      	b.n	26d8a <__sfp+0x1a>
   26da4:	2104      	movs	r1, #4
   26da6:	0038      	movs	r0, r7
   26da8:	f7ff ff98 	bl	26cdc <__sfmoreglue>
   26dac:	6030      	str	r0, [r6, #0]
   26dae:	2800      	cmp	r0, #0
   26db0:	d1f0      	bne.n	26d94 <__sfp+0x24>
   26db2:	230c      	movs	r3, #12
   26db4:	0004      	movs	r4, r0
   26db6:	603b      	str	r3, [r7, #0]
   26db8:	0020      	movs	r0, r4
   26dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26dbc:	2301      	movs	r3, #1
   26dbe:	0020      	movs	r0, r4
   26dc0:	425b      	negs	r3, r3
   26dc2:	81e3      	strh	r3, [r4, #14]
   26dc4:	3302      	adds	r3, #2
   26dc6:	81a3      	strh	r3, [r4, #12]
   26dc8:	6665      	str	r5, [r4, #100]	; 0x64
   26dca:	6025      	str	r5, [r4, #0]
   26dcc:	60a5      	str	r5, [r4, #8]
   26dce:	6065      	str	r5, [r4, #4]
   26dd0:	6125      	str	r5, [r4, #16]
   26dd2:	6165      	str	r5, [r4, #20]
   26dd4:	61a5      	str	r5, [r4, #24]
   26dd6:	2208      	movs	r2, #8
   26dd8:	0029      	movs	r1, r5
   26dda:	305c      	adds	r0, #92	; 0x5c
   26ddc:	f7ff fa61 	bl	262a2 <memset>
   26de0:	6365      	str	r5, [r4, #52]	; 0x34
   26de2:	63a5      	str	r5, [r4, #56]	; 0x38
   26de4:	64a5      	str	r5, [r4, #72]	; 0x48
   26de6:	64e5      	str	r5, [r4, #76]	; 0x4c
   26de8:	e7e6      	b.n	26db8 <__sfp+0x48>
   26dea:	46c0      	nop			; (mov r8, r8)
   26dec:	0002b0a0 	.word	0x0002b0a0

00026df0 <_fwalk_reent>:
   26df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26df2:	0004      	movs	r4, r0
   26df4:	0007      	movs	r7, r0
   26df6:	2600      	movs	r6, #0
   26df8:	9101      	str	r1, [sp, #4]
   26dfa:	3448      	adds	r4, #72	; 0x48
   26dfc:	2c00      	cmp	r4, #0
   26dfe:	d101      	bne.n	26e04 <_fwalk_reent+0x14>
   26e00:	0030      	movs	r0, r6
   26e02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26e04:	6863      	ldr	r3, [r4, #4]
   26e06:	68a5      	ldr	r5, [r4, #8]
   26e08:	9300      	str	r3, [sp, #0]
   26e0a:	9b00      	ldr	r3, [sp, #0]
   26e0c:	3b01      	subs	r3, #1
   26e0e:	9300      	str	r3, [sp, #0]
   26e10:	d501      	bpl.n	26e16 <_fwalk_reent+0x26>
   26e12:	6824      	ldr	r4, [r4, #0]
   26e14:	e7f2      	b.n	26dfc <_fwalk_reent+0xc>
   26e16:	89ab      	ldrh	r3, [r5, #12]
   26e18:	2b01      	cmp	r3, #1
   26e1a:	d908      	bls.n	26e2e <_fwalk_reent+0x3e>
   26e1c:	220e      	movs	r2, #14
   26e1e:	5eab      	ldrsh	r3, [r5, r2]
   26e20:	3301      	adds	r3, #1
   26e22:	d004      	beq.n	26e2e <_fwalk_reent+0x3e>
   26e24:	0029      	movs	r1, r5
   26e26:	0038      	movs	r0, r7
   26e28:	9b01      	ldr	r3, [sp, #4]
   26e2a:	4798      	blx	r3
   26e2c:	4306      	orrs	r6, r0
   26e2e:	3568      	adds	r5, #104	; 0x68
   26e30:	e7eb      	b.n	26e0a <_fwalk_reent+0x1a>

00026e32 <__locale_ctype_ptr_l>:
   26e32:	30ec      	adds	r0, #236	; 0xec
   26e34:	6800      	ldr	r0, [r0, #0]
   26e36:	4770      	bx	lr

00026e38 <__locale_ctype_ptr>:
   26e38:	4b04      	ldr	r3, [pc, #16]	; (26e4c <__locale_ctype_ptr+0x14>)
   26e3a:	681b      	ldr	r3, [r3, #0]
   26e3c:	6a1b      	ldr	r3, [r3, #32]
   26e3e:	2b00      	cmp	r3, #0
   26e40:	d100      	bne.n	26e44 <__locale_ctype_ptr+0xc>
   26e42:	4b03      	ldr	r3, [pc, #12]	; (26e50 <__locale_ctype_ptr+0x18>)
   26e44:	33ec      	adds	r3, #236	; 0xec
   26e46:	6818      	ldr	r0, [r3, #0]
   26e48:	4770      	bx	lr
   26e4a:	46c0      	nop			; (mov r8, r8)
   26e4c:	200000dc 	.word	0x200000dc
   26e50:	20000140 	.word	0x20000140

00026e54 <__swhatbuf_r>:
   26e54:	b570      	push	{r4, r5, r6, lr}
   26e56:	000e      	movs	r6, r1
   26e58:	001d      	movs	r5, r3
   26e5a:	230e      	movs	r3, #14
   26e5c:	5ec9      	ldrsh	r1, [r1, r3]
   26e5e:	b090      	sub	sp, #64	; 0x40
   26e60:	0014      	movs	r4, r2
   26e62:	2900      	cmp	r1, #0
   26e64:	da07      	bge.n	26e76 <__swhatbuf_r+0x22>
   26e66:	2300      	movs	r3, #0
   26e68:	602b      	str	r3, [r5, #0]
   26e6a:	89b3      	ldrh	r3, [r6, #12]
   26e6c:	061b      	lsls	r3, r3, #24
   26e6e:	d411      	bmi.n	26e94 <__swhatbuf_r+0x40>
   26e70:	2380      	movs	r3, #128	; 0x80
   26e72:	00db      	lsls	r3, r3, #3
   26e74:	e00f      	b.n	26e96 <__swhatbuf_r+0x42>
   26e76:	aa01      	add	r2, sp, #4
   26e78:	f000 fbe6 	bl	27648 <_fstat_r>
   26e7c:	2800      	cmp	r0, #0
   26e7e:	dbf2      	blt.n	26e66 <__swhatbuf_r+0x12>
   26e80:	22f0      	movs	r2, #240	; 0xf0
   26e82:	9b02      	ldr	r3, [sp, #8]
   26e84:	0212      	lsls	r2, r2, #8
   26e86:	4013      	ands	r3, r2
   26e88:	4a05      	ldr	r2, [pc, #20]	; (26ea0 <__swhatbuf_r+0x4c>)
   26e8a:	189b      	adds	r3, r3, r2
   26e8c:	425a      	negs	r2, r3
   26e8e:	4153      	adcs	r3, r2
   26e90:	602b      	str	r3, [r5, #0]
   26e92:	e7ed      	b.n	26e70 <__swhatbuf_r+0x1c>
   26e94:	2340      	movs	r3, #64	; 0x40
   26e96:	2000      	movs	r0, #0
   26e98:	6023      	str	r3, [r4, #0]
   26e9a:	b010      	add	sp, #64	; 0x40
   26e9c:	bd70      	pop	{r4, r5, r6, pc}
   26e9e:	46c0      	nop			; (mov r8, r8)
   26ea0:	ffffe000 	.word	0xffffe000

00026ea4 <__smakebuf_r>:
   26ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26ea6:	2602      	movs	r6, #2
   26ea8:	898b      	ldrh	r3, [r1, #12]
   26eaa:	0005      	movs	r5, r0
   26eac:	000c      	movs	r4, r1
   26eae:	4233      	tst	r3, r6
   26eb0:	d006      	beq.n	26ec0 <__smakebuf_r+0x1c>
   26eb2:	0023      	movs	r3, r4
   26eb4:	3347      	adds	r3, #71	; 0x47
   26eb6:	6023      	str	r3, [r4, #0]
   26eb8:	6123      	str	r3, [r4, #16]
   26eba:	2301      	movs	r3, #1
   26ebc:	6163      	str	r3, [r4, #20]
   26ebe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   26ec0:	ab01      	add	r3, sp, #4
   26ec2:	466a      	mov	r2, sp
   26ec4:	f7ff ffc6 	bl	26e54 <__swhatbuf_r>
   26ec8:	9900      	ldr	r1, [sp, #0]
   26eca:	0007      	movs	r7, r0
   26ecc:	0028      	movs	r0, r5
   26ece:	f7ff fa3b 	bl	26348 <_malloc_r>
   26ed2:	2800      	cmp	r0, #0
   26ed4:	d108      	bne.n	26ee8 <__smakebuf_r+0x44>
   26ed6:	220c      	movs	r2, #12
   26ed8:	5ea3      	ldrsh	r3, [r4, r2]
   26eda:	059a      	lsls	r2, r3, #22
   26edc:	d4ef      	bmi.n	26ebe <__smakebuf_r+0x1a>
   26ede:	2203      	movs	r2, #3
   26ee0:	4393      	bics	r3, r2
   26ee2:	431e      	orrs	r6, r3
   26ee4:	81a6      	strh	r6, [r4, #12]
   26ee6:	e7e4      	b.n	26eb2 <__smakebuf_r+0xe>
   26ee8:	4b0f      	ldr	r3, [pc, #60]	; (26f28 <__smakebuf_r+0x84>)
   26eea:	62ab      	str	r3, [r5, #40]	; 0x28
   26eec:	2380      	movs	r3, #128	; 0x80
   26eee:	89a2      	ldrh	r2, [r4, #12]
   26ef0:	6020      	str	r0, [r4, #0]
   26ef2:	4313      	orrs	r3, r2
   26ef4:	81a3      	strh	r3, [r4, #12]
   26ef6:	9b00      	ldr	r3, [sp, #0]
   26ef8:	6120      	str	r0, [r4, #16]
   26efa:	6163      	str	r3, [r4, #20]
   26efc:	9b01      	ldr	r3, [sp, #4]
   26efe:	2b00      	cmp	r3, #0
   26f00:	d00d      	beq.n	26f1e <__smakebuf_r+0x7a>
   26f02:	230e      	movs	r3, #14
   26f04:	5ee1      	ldrsh	r1, [r4, r3]
   26f06:	0028      	movs	r0, r5
   26f08:	f000 fbb0 	bl	2766c <_isatty_r>
   26f0c:	2800      	cmp	r0, #0
   26f0e:	d006      	beq.n	26f1e <__smakebuf_r+0x7a>
   26f10:	2203      	movs	r2, #3
   26f12:	89a3      	ldrh	r3, [r4, #12]
   26f14:	4393      	bics	r3, r2
   26f16:	001a      	movs	r2, r3
   26f18:	2301      	movs	r3, #1
   26f1a:	4313      	orrs	r3, r2
   26f1c:	81a3      	strh	r3, [r4, #12]
   26f1e:	89a0      	ldrh	r0, [r4, #12]
   26f20:	4338      	orrs	r0, r7
   26f22:	81a0      	strh	r0, [r4, #12]
   26f24:	e7cb      	b.n	26ebe <__smakebuf_r+0x1a>
   26f26:	46c0      	nop			; (mov r8, r8)
   26f28:	00026c85 	.word	0x00026c85

00026f2c <__ascii_mbtowc>:
   26f2c:	b082      	sub	sp, #8
   26f2e:	2900      	cmp	r1, #0
   26f30:	d100      	bne.n	26f34 <__ascii_mbtowc+0x8>
   26f32:	a901      	add	r1, sp, #4
   26f34:	1e10      	subs	r0, r2, #0
   26f36:	d006      	beq.n	26f46 <__ascii_mbtowc+0x1a>
   26f38:	2b00      	cmp	r3, #0
   26f3a:	d006      	beq.n	26f4a <__ascii_mbtowc+0x1e>
   26f3c:	7813      	ldrb	r3, [r2, #0]
   26f3e:	600b      	str	r3, [r1, #0]
   26f40:	7810      	ldrb	r0, [r2, #0]
   26f42:	1e43      	subs	r3, r0, #1
   26f44:	4198      	sbcs	r0, r3
   26f46:	b002      	add	sp, #8
   26f48:	4770      	bx	lr
   26f4a:	2002      	movs	r0, #2
   26f4c:	4240      	negs	r0, r0
   26f4e:	e7fa      	b.n	26f46 <__ascii_mbtowc+0x1a>

00026f50 <__malloc_lock>:
   26f50:	4770      	bx	lr

00026f52 <__malloc_unlock>:
   26f52:	4770      	bx	lr

00026f54 <__ssputs_r>:
   26f54:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f56:	688e      	ldr	r6, [r1, #8]
   26f58:	b085      	sub	sp, #20
   26f5a:	0007      	movs	r7, r0
   26f5c:	000c      	movs	r4, r1
   26f5e:	9203      	str	r2, [sp, #12]
   26f60:	9301      	str	r3, [sp, #4]
   26f62:	429e      	cmp	r6, r3
   26f64:	d839      	bhi.n	26fda <__ssputs_r+0x86>
   26f66:	2390      	movs	r3, #144	; 0x90
   26f68:	898a      	ldrh	r2, [r1, #12]
   26f6a:	00db      	lsls	r3, r3, #3
   26f6c:	421a      	tst	r2, r3
   26f6e:	d034      	beq.n	26fda <__ssputs_r+0x86>
   26f70:	2503      	movs	r5, #3
   26f72:	6909      	ldr	r1, [r1, #16]
   26f74:	6823      	ldr	r3, [r4, #0]
   26f76:	1a5b      	subs	r3, r3, r1
   26f78:	9302      	str	r3, [sp, #8]
   26f7a:	6963      	ldr	r3, [r4, #20]
   26f7c:	9802      	ldr	r0, [sp, #8]
   26f7e:	435d      	muls	r5, r3
   26f80:	0feb      	lsrs	r3, r5, #31
   26f82:	195d      	adds	r5, r3, r5
   26f84:	9b01      	ldr	r3, [sp, #4]
   26f86:	106d      	asrs	r5, r5, #1
   26f88:	3301      	adds	r3, #1
   26f8a:	181b      	adds	r3, r3, r0
   26f8c:	42ab      	cmp	r3, r5
   26f8e:	d900      	bls.n	26f92 <__ssputs_r+0x3e>
   26f90:	001d      	movs	r5, r3
   26f92:	0553      	lsls	r3, r2, #21
   26f94:	d532      	bpl.n	26ffc <__ssputs_r+0xa8>
   26f96:	0029      	movs	r1, r5
   26f98:	0038      	movs	r0, r7
   26f9a:	f7ff f9d5 	bl	26348 <_malloc_r>
   26f9e:	1e06      	subs	r6, r0, #0
   26fa0:	d109      	bne.n	26fb6 <__ssputs_r+0x62>
   26fa2:	230c      	movs	r3, #12
   26fa4:	603b      	str	r3, [r7, #0]
   26fa6:	2340      	movs	r3, #64	; 0x40
   26fa8:	2001      	movs	r0, #1
   26faa:	89a2      	ldrh	r2, [r4, #12]
   26fac:	4240      	negs	r0, r0
   26fae:	4313      	orrs	r3, r2
   26fb0:	81a3      	strh	r3, [r4, #12]
   26fb2:	b005      	add	sp, #20
   26fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26fb6:	9a02      	ldr	r2, [sp, #8]
   26fb8:	6921      	ldr	r1, [r4, #16]
   26fba:	f7ff f957 	bl	2626c <memcpy>
   26fbe:	89a3      	ldrh	r3, [r4, #12]
   26fc0:	4a14      	ldr	r2, [pc, #80]	; (27014 <__ssputs_r+0xc0>)
   26fc2:	401a      	ands	r2, r3
   26fc4:	2380      	movs	r3, #128	; 0x80
   26fc6:	4313      	orrs	r3, r2
   26fc8:	81a3      	strh	r3, [r4, #12]
   26fca:	9b02      	ldr	r3, [sp, #8]
   26fcc:	6126      	str	r6, [r4, #16]
   26fce:	18f6      	adds	r6, r6, r3
   26fd0:	6026      	str	r6, [r4, #0]
   26fd2:	6165      	str	r5, [r4, #20]
   26fd4:	9e01      	ldr	r6, [sp, #4]
   26fd6:	1aed      	subs	r5, r5, r3
   26fd8:	60a5      	str	r5, [r4, #8]
   26fda:	9b01      	ldr	r3, [sp, #4]
   26fdc:	42b3      	cmp	r3, r6
   26fde:	d200      	bcs.n	26fe2 <__ssputs_r+0x8e>
   26fe0:	001e      	movs	r6, r3
   26fe2:	0032      	movs	r2, r6
   26fe4:	9903      	ldr	r1, [sp, #12]
   26fe6:	6820      	ldr	r0, [r4, #0]
   26fe8:	f7ff f949 	bl	2627e <memmove>
   26fec:	68a3      	ldr	r3, [r4, #8]
   26fee:	2000      	movs	r0, #0
   26ff0:	1b9b      	subs	r3, r3, r6
   26ff2:	60a3      	str	r3, [r4, #8]
   26ff4:	6823      	ldr	r3, [r4, #0]
   26ff6:	199e      	adds	r6, r3, r6
   26ff8:	6026      	str	r6, [r4, #0]
   26ffa:	e7da      	b.n	26fb2 <__ssputs_r+0x5e>
   26ffc:	002a      	movs	r2, r5
   26ffe:	0038      	movs	r0, r7
   27000:	f000 fb65 	bl	276ce <_realloc_r>
   27004:	1e06      	subs	r6, r0, #0
   27006:	d1e0      	bne.n	26fca <__ssputs_r+0x76>
   27008:	6921      	ldr	r1, [r4, #16]
   2700a:	0038      	movs	r0, r7
   2700c:	f7ff f952 	bl	262b4 <_free_r>
   27010:	e7c7      	b.n	26fa2 <__ssputs_r+0x4e>
   27012:	46c0      	nop			; (mov r8, r8)
   27014:	fffffb7f 	.word	0xfffffb7f

00027018 <_svfiprintf_r>:
   27018:	b5f0      	push	{r4, r5, r6, r7, lr}
   2701a:	b09f      	sub	sp, #124	; 0x7c
   2701c:	9002      	str	r0, [sp, #8]
   2701e:	9305      	str	r3, [sp, #20]
   27020:	898b      	ldrh	r3, [r1, #12]
   27022:	000f      	movs	r7, r1
   27024:	0016      	movs	r6, r2
   27026:	061b      	lsls	r3, r3, #24
   27028:	d511      	bpl.n	2704e <_svfiprintf_r+0x36>
   2702a:	690b      	ldr	r3, [r1, #16]
   2702c:	2b00      	cmp	r3, #0
   2702e:	d10e      	bne.n	2704e <_svfiprintf_r+0x36>
   27030:	2140      	movs	r1, #64	; 0x40
   27032:	f7ff f989 	bl	26348 <_malloc_r>
   27036:	6038      	str	r0, [r7, #0]
   27038:	6138      	str	r0, [r7, #16]
   2703a:	2800      	cmp	r0, #0
   2703c:	d105      	bne.n	2704a <_svfiprintf_r+0x32>
   2703e:	230c      	movs	r3, #12
   27040:	9a02      	ldr	r2, [sp, #8]
   27042:	3801      	subs	r0, #1
   27044:	6013      	str	r3, [r2, #0]
   27046:	b01f      	add	sp, #124	; 0x7c
   27048:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2704a:	2340      	movs	r3, #64	; 0x40
   2704c:	617b      	str	r3, [r7, #20]
   2704e:	2300      	movs	r3, #0
   27050:	ad06      	add	r5, sp, #24
   27052:	616b      	str	r3, [r5, #20]
   27054:	3320      	adds	r3, #32
   27056:	766b      	strb	r3, [r5, #25]
   27058:	3310      	adds	r3, #16
   2705a:	76ab      	strb	r3, [r5, #26]
   2705c:	0034      	movs	r4, r6
   2705e:	7823      	ldrb	r3, [r4, #0]
   27060:	2b00      	cmp	r3, #0
   27062:	d147      	bne.n	270f4 <_svfiprintf_r+0xdc>
   27064:	1ba3      	subs	r3, r4, r6
   27066:	9304      	str	r3, [sp, #16]
   27068:	d00d      	beq.n	27086 <_svfiprintf_r+0x6e>
   2706a:	1ba3      	subs	r3, r4, r6
   2706c:	0032      	movs	r2, r6
   2706e:	0039      	movs	r1, r7
   27070:	9802      	ldr	r0, [sp, #8]
   27072:	f7ff ff6f 	bl	26f54 <__ssputs_r>
   27076:	1c43      	adds	r3, r0, #1
   27078:	d100      	bne.n	2707c <_svfiprintf_r+0x64>
   2707a:	e0b5      	b.n	271e8 <_svfiprintf_r+0x1d0>
   2707c:	696a      	ldr	r2, [r5, #20]
   2707e:	9b04      	ldr	r3, [sp, #16]
   27080:	4694      	mov	ip, r2
   27082:	4463      	add	r3, ip
   27084:	616b      	str	r3, [r5, #20]
   27086:	7823      	ldrb	r3, [r4, #0]
   27088:	2b00      	cmp	r3, #0
   2708a:	d100      	bne.n	2708e <_svfiprintf_r+0x76>
   2708c:	e0ac      	b.n	271e8 <_svfiprintf_r+0x1d0>
   2708e:	2201      	movs	r2, #1
   27090:	2300      	movs	r3, #0
   27092:	4252      	negs	r2, r2
   27094:	606a      	str	r2, [r5, #4]
   27096:	a902      	add	r1, sp, #8
   27098:	3254      	adds	r2, #84	; 0x54
   2709a:	1852      	adds	r2, r2, r1
   2709c:	3401      	adds	r4, #1
   2709e:	602b      	str	r3, [r5, #0]
   270a0:	60eb      	str	r3, [r5, #12]
   270a2:	60ab      	str	r3, [r5, #8]
   270a4:	7013      	strb	r3, [r2, #0]
   270a6:	65ab      	str	r3, [r5, #88]	; 0x58
   270a8:	4e58      	ldr	r6, [pc, #352]	; (2720c <_svfiprintf_r+0x1f4>)
   270aa:	2205      	movs	r2, #5
   270ac:	7821      	ldrb	r1, [r4, #0]
   270ae:	0030      	movs	r0, r6
   270b0:	f000 fb02 	bl	276b8 <memchr>
   270b4:	1c62      	adds	r2, r4, #1
   270b6:	2800      	cmp	r0, #0
   270b8:	d120      	bne.n	270fc <_svfiprintf_r+0xe4>
   270ba:	6829      	ldr	r1, [r5, #0]
   270bc:	06cb      	lsls	r3, r1, #27
   270be:	d504      	bpl.n	270ca <_svfiprintf_r+0xb2>
   270c0:	2353      	movs	r3, #83	; 0x53
   270c2:	ae02      	add	r6, sp, #8
   270c4:	3020      	adds	r0, #32
   270c6:	199b      	adds	r3, r3, r6
   270c8:	7018      	strb	r0, [r3, #0]
   270ca:	070b      	lsls	r3, r1, #28
   270cc:	d504      	bpl.n	270d8 <_svfiprintf_r+0xc0>
   270ce:	2353      	movs	r3, #83	; 0x53
   270d0:	202b      	movs	r0, #43	; 0x2b
   270d2:	ae02      	add	r6, sp, #8
   270d4:	199b      	adds	r3, r3, r6
   270d6:	7018      	strb	r0, [r3, #0]
   270d8:	7823      	ldrb	r3, [r4, #0]
   270da:	2b2a      	cmp	r3, #42	; 0x2a
   270dc:	d016      	beq.n	2710c <_svfiprintf_r+0xf4>
   270de:	2000      	movs	r0, #0
   270e0:	210a      	movs	r1, #10
   270e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   270e4:	7822      	ldrb	r2, [r4, #0]
   270e6:	3a30      	subs	r2, #48	; 0x30
   270e8:	2a09      	cmp	r2, #9
   270ea:	d955      	bls.n	27198 <_svfiprintf_r+0x180>
   270ec:	2800      	cmp	r0, #0
   270ee:	d015      	beq.n	2711c <_svfiprintf_r+0x104>
   270f0:	9309      	str	r3, [sp, #36]	; 0x24
   270f2:	e013      	b.n	2711c <_svfiprintf_r+0x104>
   270f4:	2b25      	cmp	r3, #37	; 0x25
   270f6:	d0b5      	beq.n	27064 <_svfiprintf_r+0x4c>
   270f8:	3401      	adds	r4, #1
   270fa:	e7b0      	b.n	2705e <_svfiprintf_r+0x46>
   270fc:	2301      	movs	r3, #1
   270fe:	1b80      	subs	r0, r0, r6
   27100:	4083      	lsls	r3, r0
   27102:	6829      	ldr	r1, [r5, #0]
   27104:	0014      	movs	r4, r2
   27106:	430b      	orrs	r3, r1
   27108:	602b      	str	r3, [r5, #0]
   2710a:	e7cd      	b.n	270a8 <_svfiprintf_r+0x90>
   2710c:	9b05      	ldr	r3, [sp, #20]
   2710e:	1d18      	adds	r0, r3, #4
   27110:	681b      	ldr	r3, [r3, #0]
   27112:	9005      	str	r0, [sp, #20]
   27114:	2b00      	cmp	r3, #0
   27116:	db39      	blt.n	2718c <_svfiprintf_r+0x174>
   27118:	9309      	str	r3, [sp, #36]	; 0x24
   2711a:	0014      	movs	r4, r2
   2711c:	7823      	ldrb	r3, [r4, #0]
   2711e:	2b2e      	cmp	r3, #46	; 0x2e
   27120:	d10b      	bne.n	2713a <_svfiprintf_r+0x122>
   27122:	7863      	ldrb	r3, [r4, #1]
   27124:	1c62      	adds	r2, r4, #1
   27126:	2b2a      	cmp	r3, #42	; 0x2a
   27128:	d13e      	bne.n	271a8 <_svfiprintf_r+0x190>
   2712a:	9b05      	ldr	r3, [sp, #20]
   2712c:	3402      	adds	r4, #2
   2712e:	1d1a      	adds	r2, r3, #4
   27130:	681b      	ldr	r3, [r3, #0]
   27132:	9205      	str	r2, [sp, #20]
   27134:	2b00      	cmp	r3, #0
   27136:	db34      	blt.n	271a2 <_svfiprintf_r+0x18a>
   27138:	9307      	str	r3, [sp, #28]
   2713a:	4e35      	ldr	r6, [pc, #212]	; (27210 <_svfiprintf_r+0x1f8>)
   2713c:	7821      	ldrb	r1, [r4, #0]
   2713e:	2203      	movs	r2, #3
   27140:	0030      	movs	r0, r6
   27142:	f000 fab9 	bl	276b8 <memchr>
   27146:	2800      	cmp	r0, #0
   27148:	d006      	beq.n	27158 <_svfiprintf_r+0x140>
   2714a:	2340      	movs	r3, #64	; 0x40
   2714c:	1b80      	subs	r0, r0, r6
   2714e:	4083      	lsls	r3, r0
   27150:	682a      	ldr	r2, [r5, #0]
   27152:	3401      	adds	r4, #1
   27154:	4313      	orrs	r3, r2
   27156:	602b      	str	r3, [r5, #0]
   27158:	7821      	ldrb	r1, [r4, #0]
   2715a:	2206      	movs	r2, #6
   2715c:	482d      	ldr	r0, [pc, #180]	; (27214 <_svfiprintf_r+0x1fc>)
   2715e:	1c66      	adds	r6, r4, #1
   27160:	7629      	strb	r1, [r5, #24]
   27162:	f000 faa9 	bl	276b8 <memchr>
   27166:	2800      	cmp	r0, #0
   27168:	d046      	beq.n	271f8 <_svfiprintf_r+0x1e0>
   2716a:	4b2b      	ldr	r3, [pc, #172]	; (27218 <_svfiprintf_r+0x200>)
   2716c:	2b00      	cmp	r3, #0
   2716e:	d12f      	bne.n	271d0 <_svfiprintf_r+0x1b8>
   27170:	6829      	ldr	r1, [r5, #0]
   27172:	9b05      	ldr	r3, [sp, #20]
   27174:	2207      	movs	r2, #7
   27176:	05c9      	lsls	r1, r1, #23
   27178:	d528      	bpl.n	271cc <_svfiprintf_r+0x1b4>
   2717a:	189b      	adds	r3, r3, r2
   2717c:	4393      	bics	r3, r2
   2717e:	3308      	adds	r3, #8
   27180:	9305      	str	r3, [sp, #20]
   27182:	696b      	ldr	r3, [r5, #20]
   27184:	9a03      	ldr	r2, [sp, #12]
   27186:	189b      	adds	r3, r3, r2
   27188:	616b      	str	r3, [r5, #20]
   2718a:	e767      	b.n	2705c <_svfiprintf_r+0x44>
   2718c:	425b      	negs	r3, r3
   2718e:	60eb      	str	r3, [r5, #12]
   27190:	2302      	movs	r3, #2
   27192:	430b      	orrs	r3, r1
   27194:	602b      	str	r3, [r5, #0]
   27196:	e7c0      	b.n	2711a <_svfiprintf_r+0x102>
   27198:	434b      	muls	r3, r1
   2719a:	3401      	adds	r4, #1
   2719c:	189b      	adds	r3, r3, r2
   2719e:	2001      	movs	r0, #1
   271a0:	e7a0      	b.n	270e4 <_svfiprintf_r+0xcc>
   271a2:	2301      	movs	r3, #1
   271a4:	425b      	negs	r3, r3
   271a6:	e7c7      	b.n	27138 <_svfiprintf_r+0x120>
   271a8:	2300      	movs	r3, #0
   271aa:	0014      	movs	r4, r2
   271ac:	200a      	movs	r0, #10
   271ae:	001a      	movs	r2, r3
   271b0:	606b      	str	r3, [r5, #4]
   271b2:	7821      	ldrb	r1, [r4, #0]
   271b4:	3930      	subs	r1, #48	; 0x30
   271b6:	2909      	cmp	r1, #9
   271b8:	d903      	bls.n	271c2 <_svfiprintf_r+0x1aa>
   271ba:	2b00      	cmp	r3, #0
   271bc:	d0bd      	beq.n	2713a <_svfiprintf_r+0x122>
   271be:	9207      	str	r2, [sp, #28]
   271c0:	e7bb      	b.n	2713a <_svfiprintf_r+0x122>
   271c2:	4342      	muls	r2, r0
   271c4:	3401      	adds	r4, #1
   271c6:	1852      	adds	r2, r2, r1
   271c8:	2301      	movs	r3, #1
   271ca:	e7f2      	b.n	271b2 <_svfiprintf_r+0x19a>
   271cc:	3307      	adds	r3, #7
   271ce:	e7d5      	b.n	2717c <_svfiprintf_r+0x164>
   271d0:	ab05      	add	r3, sp, #20
   271d2:	9300      	str	r3, [sp, #0]
   271d4:	003a      	movs	r2, r7
   271d6:	4b11      	ldr	r3, [pc, #68]	; (2721c <_svfiprintf_r+0x204>)
   271d8:	0029      	movs	r1, r5
   271da:	9802      	ldr	r0, [sp, #8]
   271dc:	e000      	b.n	271e0 <_svfiprintf_r+0x1c8>
   271de:	bf00      	nop
   271e0:	9003      	str	r0, [sp, #12]
   271e2:	9b03      	ldr	r3, [sp, #12]
   271e4:	3301      	adds	r3, #1
   271e6:	d1cc      	bne.n	27182 <_svfiprintf_r+0x16a>
   271e8:	89bb      	ldrh	r3, [r7, #12]
   271ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
   271ec:	065b      	lsls	r3, r3, #25
   271ee:	d400      	bmi.n	271f2 <_svfiprintf_r+0x1da>
   271f0:	e729      	b.n	27046 <_svfiprintf_r+0x2e>
   271f2:	2001      	movs	r0, #1
   271f4:	4240      	negs	r0, r0
   271f6:	e726      	b.n	27046 <_svfiprintf_r+0x2e>
   271f8:	ab05      	add	r3, sp, #20
   271fa:	9300      	str	r3, [sp, #0]
   271fc:	003a      	movs	r2, r7
   271fe:	4b07      	ldr	r3, [pc, #28]	; (2721c <_svfiprintf_r+0x204>)
   27200:	0029      	movs	r1, r5
   27202:	9802      	ldr	r0, [sp, #8]
   27204:	f000 f87a 	bl	272fc <_printf_i>
   27208:	e7ea      	b.n	271e0 <_svfiprintf_r+0x1c8>
   2720a:	46c0      	nop			; (mov r8, r8)
   2720c:	0002b10e 	.word	0x0002b10e
   27210:	0002b114 	.word	0x0002b114
   27214:	0002b118 	.word	0x0002b118
   27218:	00000000 	.word	0x00000000
   2721c:	00026f55 	.word	0x00026f55

00027220 <_printf_common>:
   27220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27222:	0015      	movs	r5, r2
   27224:	9301      	str	r3, [sp, #4]
   27226:	688a      	ldr	r2, [r1, #8]
   27228:	690b      	ldr	r3, [r1, #16]
   2722a:	9000      	str	r0, [sp, #0]
   2722c:	000c      	movs	r4, r1
   2722e:	4293      	cmp	r3, r2
   27230:	da00      	bge.n	27234 <_printf_common+0x14>
   27232:	0013      	movs	r3, r2
   27234:	0022      	movs	r2, r4
   27236:	602b      	str	r3, [r5, #0]
   27238:	3243      	adds	r2, #67	; 0x43
   2723a:	7812      	ldrb	r2, [r2, #0]
   2723c:	2a00      	cmp	r2, #0
   2723e:	d001      	beq.n	27244 <_printf_common+0x24>
   27240:	3301      	adds	r3, #1
   27242:	602b      	str	r3, [r5, #0]
   27244:	6823      	ldr	r3, [r4, #0]
   27246:	069b      	lsls	r3, r3, #26
   27248:	d502      	bpl.n	27250 <_printf_common+0x30>
   2724a:	682b      	ldr	r3, [r5, #0]
   2724c:	3302      	adds	r3, #2
   2724e:	602b      	str	r3, [r5, #0]
   27250:	2706      	movs	r7, #6
   27252:	6823      	ldr	r3, [r4, #0]
   27254:	401f      	ands	r7, r3
   27256:	d027      	beq.n	272a8 <_printf_common+0x88>
   27258:	0023      	movs	r3, r4
   2725a:	3343      	adds	r3, #67	; 0x43
   2725c:	781b      	ldrb	r3, [r3, #0]
   2725e:	1e5a      	subs	r2, r3, #1
   27260:	4193      	sbcs	r3, r2
   27262:	6822      	ldr	r2, [r4, #0]
   27264:	0692      	lsls	r2, r2, #26
   27266:	d430      	bmi.n	272ca <_printf_common+0xaa>
   27268:	0022      	movs	r2, r4
   2726a:	9901      	ldr	r1, [sp, #4]
   2726c:	3243      	adds	r2, #67	; 0x43
   2726e:	9800      	ldr	r0, [sp, #0]
   27270:	9e08      	ldr	r6, [sp, #32]
   27272:	47b0      	blx	r6
   27274:	1c43      	adds	r3, r0, #1
   27276:	d025      	beq.n	272c4 <_printf_common+0xa4>
   27278:	2306      	movs	r3, #6
   2727a:	6820      	ldr	r0, [r4, #0]
   2727c:	682a      	ldr	r2, [r5, #0]
   2727e:	68e1      	ldr	r1, [r4, #12]
   27280:	4003      	ands	r3, r0
   27282:	2500      	movs	r5, #0
   27284:	2b04      	cmp	r3, #4
   27286:	d103      	bne.n	27290 <_printf_common+0x70>
   27288:	1a8d      	subs	r5, r1, r2
   2728a:	43eb      	mvns	r3, r5
   2728c:	17db      	asrs	r3, r3, #31
   2728e:	401d      	ands	r5, r3
   27290:	68a3      	ldr	r3, [r4, #8]
   27292:	6922      	ldr	r2, [r4, #16]
   27294:	4293      	cmp	r3, r2
   27296:	dd01      	ble.n	2729c <_printf_common+0x7c>
   27298:	1a9b      	subs	r3, r3, r2
   2729a:	18ed      	adds	r5, r5, r3
   2729c:	2700      	movs	r7, #0
   2729e:	42bd      	cmp	r5, r7
   272a0:	d120      	bne.n	272e4 <_printf_common+0xc4>
   272a2:	2000      	movs	r0, #0
   272a4:	e010      	b.n	272c8 <_printf_common+0xa8>
   272a6:	3701      	adds	r7, #1
   272a8:	68e3      	ldr	r3, [r4, #12]
   272aa:	682a      	ldr	r2, [r5, #0]
   272ac:	1a9b      	subs	r3, r3, r2
   272ae:	429f      	cmp	r7, r3
   272b0:	dad2      	bge.n	27258 <_printf_common+0x38>
   272b2:	0022      	movs	r2, r4
   272b4:	2301      	movs	r3, #1
   272b6:	3219      	adds	r2, #25
   272b8:	9901      	ldr	r1, [sp, #4]
   272ba:	9800      	ldr	r0, [sp, #0]
   272bc:	9e08      	ldr	r6, [sp, #32]
   272be:	47b0      	blx	r6
   272c0:	1c43      	adds	r3, r0, #1
   272c2:	d1f0      	bne.n	272a6 <_printf_common+0x86>
   272c4:	2001      	movs	r0, #1
   272c6:	4240      	negs	r0, r0
   272c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   272ca:	2030      	movs	r0, #48	; 0x30
   272cc:	18e1      	adds	r1, r4, r3
   272ce:	3143      	adds	r1, #67	; 0x43
   272d0:	7008      	strb	r0, [r1, #0]
   272d2:	0021      	movs	r1, r4
   272d4:	1c5a      	adds	r2, r3, #1
   272d6:	3145      	adds	r1, #69	; 0x45
   272d8:	7809      	ldrb	r1, [r1, #0]
   272da:	18a2      	adds	r2, r4, r2
   272dc:	3243      	adds	r2, #67	; 0x43
   272de:	3302      	adds	r3, #2
   272e0:	7011      	strb	r1, [r2, #0]
   272e2:	e7c1      	b.n	27268 <_printf_common+0x48>
   272e4:	0022      	movs	r2, r4
   272e6:	2301      	movs	r3, #1
   272e8:	321a      	adds	r2, #26
   272ea:	9901      	ldr	r1, [sp, #4]
   272ec:	9800      	ldr	r0, [sp, #0]
   272ee:	9e08      	ldr	r6, [sp, #32]
   272f0:	47b0      	blx	r6
   272f2:	1c43      	adds	r3, r0, #1
   272f4:	d0e6      	beq.n	272c4 <_printf_common+0xa4>
   272f6:	3701      	adds	r7, #1
   272f8:	e7d1      	b.n	2729e <_printf_common+0x7e>
	...

000272fc <_printf_i>:
   272fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   272fe:	b08b      	sub	sp, #44	; 0x2c
   27300:	9206      	str	r2, [sp, #24]
   27302:	000a      	movs	r2, r1
   27304:	3243      	adds	r2, #67	; 0x43
   27306:	9307      	str	r3, [sp, #28]
   27308:	9005      	str	r0, [sp, #20]
   2730a:	9204      	str	r2, [sp, #16]
   2730c:	7e0a      	ldrb	r2, [r1, #24]
   2730e:	000c      	movs	r4, r1
   27310:	9b10      	ldr	r3, [sp, #64]	; 0x40
   27312:	2a6e      	cmp	r2, #110	; 0x6e
   27314:	d100      	bne.n	27318 <_printf_i+0x1c>
   27316:	e08f      	b.n	27438 <_printf_i+0x13c>
   27318:	d817      	bhi.n	2734a <_printf_i+0x4e>
   2731a:	2a63      	cmp	r2, #99	; 0x63
   2731c:	d02c      	beq.n	27378 <_printf_i+0x7c>
   2731e:	d808      	bhi.n	27332 <_printf_i+0x36>
   27320:	2a00      	cmp	r2, #0
   27322:	d100      	bne.n	27326 <_printf_i+0x2a>
   27324:	e099      	b.n	2745a <_printf_i+0x15e>
   27326:	2a58      	cmp	r2, #88	; 0x58
   27328:	d054      	beq.n	273d4 <_printf_i+0xd8>
   2732a:	0026      	movs	r6, r4
   2732c:	3642      	adds	r6, #66	; 0x42
   2732e:	7032      	strb	r2, [r6, #0]
   27330:	e029      	b.n	27386 <_printf_i+0x8a>
   27332:	2a64      	cmp	r2, #100	; 0x64
   27334:	d001      	beq.n	2733a <_printf_i+0x3e>
   27336:	2a69      	cmp	r2, #105	; 0x69
   27338:	d1f7      	bne.n	2732a <_printf_i+0x2e>
   2733a:	6821      	ldr	r1, [r4, #0]
   2733c:	681a      	ldr	r2, [r3, #0]
   2733e:	0608      	lsls	r0, r1, #24
   27340:	d523      	bpl.n	2738a <_printf_i+0x8e>
   27342:	1d11      	adds	r1, r2, #4
   27344:	6019      	str	r1, [r3, #0]
   27346:	6815      	ldr	r5, [r2, #0]
   27348:	e025      	b.n	27396 <_printf_i+0x9a>
   2734a:	2a73      	cmp	r2, #115	; 0x73
   2734c:	d100      	bne.n	27350 <_printf_i+0x54>
   2734e:	e088      	b.n	27462 <_printf_i+0x166>
   27350:	d808      	bhi.n	27364 <_printf_i+0x68>
   27352:	2a6f      	cmp	r2, #111	; 0x6f
   27354:	d029      	beq.n	273aa <_printf_i+0xae>
   27356:	2a70      	cmp	r2, #112	; 0x70
   27358:	d1e7      	bne.n	2732a <_printf_i+0x2e>
   2735a:	2220      	movs	r2, #32
   2735c:	6809      	ldr	r1, [r1, #0]
   2735e:	430a      	orrs	r2, r1
   27360:	6022      	str	r2, [r4, #0]
   27362:	e003      	b.n	2736c <_printf_i+0x70>
   27364:	2a75      	cmp	r2, #117	; 0x75
   27366:	d020      	beq.n	273aa <_printf_i+0xae>
   27368:	2a78      	cmp	r2, #120	; 0x78
   2736a:	d1de      	bne.n	2732a <_printf_i+0x2e>
   2736c:	0022      	movs	r2, r4
   2736e:	2178      	movs	r1, #120	; 0x78
   27370:	3245      	adds	r2, #69	; 0x45
   27372:	7011      	strb	r1, [r2, #0]
   27374:	4a6c      	ldr	r2, [pc, #432]	; (27528 <_printf_i+0x22c>)
   27376:	e030      	b.n	273da <_printf_i+0xde>
   27378:	000e      	movs	r6, r1
   2737a:	681a      	ldr	r2, [r3, #0]
   2737c:	3642      	adds	r6, #66	; 0x42
   2737e:	1d11      	adds	r1, r2, #4
   27380:	6019      	str	r1, [r3, #0]
   27382:	6813      	ldr	r3, [r2, #0]
   27384:	7033      	strb	r3, [r6, #0]
   27386:	2301      	movs	r3, #1
   27388:	e079      	b.n	2747e <_printf_i+0x182>
   2738a:	0649      	lsls	r1, r1, #25
   2738c:	d5d9      	bpl.n	27342 <_printf_i+0x46>
   2738e:	1d11      	adds	r1, r2, #4
   27390:	6019      	str	r1, [r3, #0]
   27392:	2300      	movs	r3, #0
   27394:	5ed5      	ldrsh	r5, [r2, r3]
   27396:	2d00      	cmp	r5, #0
   27398:	da03      	bge.n	273a2 <_printf_i+0xa6>
   2739a:	232d      	movs	r3, #45	; 0x2d
   2739c:	9a04      	ldr	r2, [sp, #16]
   2739e:	426d      	negs	r5, r5
   273a0:	7013      	strb	r3, [r2, #0]
   273a2:	4b62      	ldr	r3, [pc, #392]	; (2752c <_printf_i+0x230>)
   273a4:	270a      	movs	r7, #10
   273a6:	9303      	str	r3, [sp, #12]
   273a8:	e02f      	b.n	2740a <_printf_i+0x10e>
   273aa:	6820      	ldr	r0, [r4, #0]
   273ac:	6819      	ldr	r1, [r3, #0]
   273ae:	0605      	lsls	r5, r0, #24
   273b0:	d503      	bpl.n	273ba <_printf_i+0xbe>
   273b2:	1d08      	adds	r0, r1, #4
   273b4:	6018      	str	r0, [r3, #0]
   273b6:	680d      	ldr	r5, [r1, #0]
   273b8:	e005      	b.n	273c6 <_printf_i+0xca>
   273ba:	0640      	lsls	r0, r0, #25
   273bc:	d5f9      	bpl.n	273b2 <_printf_i+0xb6>
   273be:	680d      	ldr	r5, [r1, #0]
   273c0:	1d08      	adds	r0, r1, #4
   273c2:	6018      	str	r0, [r3, #0]
   273c4:	b2ad      	uxth	r5, r5
   273c6:	4b59      	ldr	r3, [pc, #356]	; (2752c <_printf_i+0x230>)
   273c8:	2708      	movs	r7, #8
   273ca:	9303      	str	r3, [sp, #12]
   273cc:	2a6f      	cmp	r2, #111	; 0x6f
   273ce:	d018      	beq.n	27402 <_printf_i+0x106>
   273d0:	270a      	movs	r7, #10
   273d2:	e016      	b.n	27402 <_printf_i+0x106>
   273d4:	3145      	adds	r1, #69	; 0x45
   273d6:	700a      	strb	r2, [r1, #0]
   273d8:	4a54      	ldr	r2, [pc, #336]	; (2752c <_printf_i+0x230>)
   273da:	9203      	str	r2, [sp, #12]
   273dc:	681a      	ldr	r2, [r3, #0]
   273de:	6821      	ldr	r1, [r4, #0]
   273e0:	1d10      	adds	r0, r2, #4
   273e2:	6018      	str	r0, [r3, #0]
   273e4:	6815      	ldr	r5, [r2, #0]
   273e6:	0608      	lsls	r0, r1, #24
   273e8:	d522      	bpl.n	27430 <_printf_i+0x134>
   273ea:	07cb      	lsls	r3, r1, #31
   273ec:	d502      	bpl.n	273f4 <_printf_i+0xf8>
   273ee:	2320      	movs	r3, #32
   273f0:	4319      	orrs	r1, r3
   273f2:	6021      	str	r1, [r4, #0]
   273f4:	2710      	movs	r7, #16
   273f6:	2d00      	cmp	r5, #0
   273f8:	d103      	bne.n	27402 <_printf_i+0x106>
   273fa:	2320      	movs	r3, #32
   273fc:	6822      	ldr	r2, [r4, #0]
   273fe:	439a      	bics	r2, r3
   27400:	6022      	str	r2, [r4, #0]
   27402:	0023      	movs	r3, r4
   27404:	2200      	movs	r2, #0
   27406:	3343      	adds	r3, #67	; 0x43
   27408:	701a      	strb	r2, [r3, #0]
   2740a:	6863      	ldr	r3, [r4, #4]
   2740c:	60a3      	str	r3, [r4, #8]
   2740e:	2b00      	cmp	r3, #0
   27410:	db5c      	blt.n	274cc <_printf_i+0x1d0>
   27412:	2204      	movs	r2, #4
   27414:	6821      	ldr	r1, [r4, #0]
   27416:	4391      	bics	r1, r2
   27418:	6021      	str	r1, [r4, #0]
   2741a:	2d00      	cmp	r5, #0
   2741c:	d158      	bne.n	274d0 <_printf_i+0x1d4>
   2741e:	9e04      	ldr	r6, [sp, #16]
   27420:	2b00      	cmp	r3, #0
   27422:	d064      	beq.n	274ee <_printf_i+0x1f2>
   27424:	0026      	movs	r6, r4
   27426:	9b03      	ldr	r3, [sp, #12]
   27428:	3642      	adds	r6, #66	; 0x42
   2742a:	781b      	ldrb	r3, [r3, #0]
   2742c:	7033      	strb	r3, [r6, #0]
   2742e:	e05e      	b.n	274ee <_printf_i+0x1f2>
   27430:	0648      	lsls	r0, r1, #25
   27432:	d5da      	bpl.n	273ea <_printf_i+0xee>
   27434:	b2ad      	uxth	r5, r5
   27436:	e7d8      	b.n	273ea <_printf_i+0xee>
   27438:	6809      	ldr	r1, [r1, #0]
   2743a:	681a      	ldr	r2, [r3, #0]
   2743c:	0608      	lsls	r0, r1, #24
   2743e:	d505      	bpl.n	2744c <_printf_i+0x150>
   27440:	1d11      	adds	r1, r2, #4
   27442:	6019      	str	r1, [r3, #0]
   27444:	6813      	ldr	r3, [r2, #0]
   27446:	6962      	ldr	r2, [r4, #20]
   27448:	601a      	str	r2, [r3, #0]
   2744a:	e006      	b.n	2745a <_printf_i+0x15e>
   2744c:	0649      	lsls	r1, r1, #25
   2744e:	d5f7      	bpl.n	27440 <_printf_i+0x144>
   27450:	1d11      	adds	r1, r2, #4
   27452:	6019      	str	r1, [r3, #0]
   27454:	6813      	ldr	r3, [r2, #0]
   27456:	8aa2      	ldrh	r2, [r4, #20]
   27458:	801a      	strh	r2, [r3, #0]
   2745a:	2300      	movs	r3, #0
   2745c:	9e04      	ldr	r6, [sp, #16]
   2745e:	6123      	str	r3, [r4, #16]
   27460:	e054      	b.n	2750c <_printf_i+0x210>
   27462:	681a      	ldr	r2, [r3, #0]
   27464:	1d11      	adds	r1, r2, #4
   27466:	6019      	str	r1, [r3, #0]
   27468:	6816      	ldr	r6, [r2, #0]
   2746a:	2100      	movs	r1, #0
   2746c:	6862      	ldr	r2, [r4, #4]
   2746e:	0030      	movs	r0, r6
   27470:	f000 f922 	bl	276b8 <memchr>
   27474:	2800      	cmp	r0, #0
   27476:	d001      	beq.n	2747c <_printf_i+0x180>
   27478:	1b80      	subs	r0, r0, r6
   2747a:	6060      	str	r0, [r4, #4]
   2747c:	6863      	ldr	r3, [r4, #4]
   2747e:	6123      	str	r3, [r4, #16]
   27480:	2300      	movs	r3, #0
   27482:	9a04      	ldr	r2, [sp, #16]
   27484:	7013      	strb	r3, [r2, #0]
   27486:	e041      	b.n	2750c <_printf_i+0x210>
   27488:	6923      	ldr	r3, [r4, #16]
   2748a:	0032      	movs	r2, r6
   2748c:	9906      	ldr	r1, [sp, #24]
   2748e:	9805      	ldr	r0, [sp, #20]
   27490:	9d07      	ldr	r5, [sp, #28]
   27492:	47a8      	blx	r5
   27494:	1c43      	adds	r3, r0, #1
   27496:	d043      	beq.n	27520 <_printf_i+0x224>
   27498:	6823      	ldr	r3, [r4, #0]
   2749a:	2500      	movs	r5, #0
   2749c:	079b      	lsls	r3, r3, #30
   2749e:	d40f      	bmi.n	274c0 <_printf_i+0x1c4>
   274a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   274a2:	68e0      	ldr	r0, [r4, #12]
   274a4:	4298      	cmp	r0, r3
   274a6:	da3d      	bge.n	27524 <_printf_i+0x228>
   274a8:	0018      	movs	r0, r3
   274aa:	e03b      	b.n	27524 <_printf_i+0x228>
   274ac:	0022      	movs	r2, r4
   274ae:	2301      	movs	r3, #1
   274b0:	3219      	adds	r2, #25
   274b2:	9906      	ldr	r1, [sp, #24]
   274b4:	9805      	ldr	r0, [sp, #20]
   274b6:	9e07      	ldr	r6, [sp, #28]
   274b8:	47b0      	blx	r6
   274ba:	1c43      	adds	r3, r0, #1
   274bc:	d030      	beq.n	27520 <_printf_i+0x224>
   274be:	3501      	adds	r5, #1
   274c0:	68e3      	ldr	r3, [r4, #12]
   274c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   274c4:	1a9b      	subs	r3, r3, r2
   274c6:	429d      	cmp	r5, r3
   274c8:	dbf0      	blt.n	274ac <_printf_i+0x1b0>
   274ca:	e7e9      	b.n	274a0 <_printf_i+0x1a4>
   274cc:	2d00      	cmp	r5, #0
   274ce:	d0a9      	beq.n	27424 <_printf_i+0x128>
   274d0:	9e04      	ldr	r6, [sp, #16]
   274d2:	0028      	movs	r0, r5
   274d4:	0039      	movs	r1, r7
   274d6:	f7fc fe35 	bl	24144 <__aeabi_uidivmod>
   274da:	9b03      	ldr	r3, [sp, #12]
   274dc:	3e01      	subs	r6, #1
   274de:	5c5b      	ldrb	r3, [r3, r1]
   274e0:	0028      	movs	r0, r5
   274e2:	7033      	strb	r3, [r6, #0]
   274e4:	0039      	movs	r1, r7
   274e6:	f7fc fda7 	bl	24038 <__udivsi3>
   274ea:	1e05      	subs	r5, r0, #0
   274ec:	d1f1      	bne.n	274d2 <_printf_i+0x1d6>
   274ee:	2f08      	cmp	r7, #8
   274f0:	d109      	bne.n	27506 <_printf_i+0x20a>
   274f2:	6823      	ldr	r3, [r4, #0]
   274f4:	07db      	lsls	r3, r3, #31
   274f6:	d506      	bpl.n	27506 <_printf_i+0x20a>
   274f8:	6863      	ldr	r3, [r4, #4]
   274fa:	6922      	ldr	r2, [r4, #16]
   274fc:	4293      	cmp	r3, r2
   274fe:	dc02      	bgt.n	27506 <_printf_i+0x20a>
   27500:	2330      	movs	r3, #48	; 0x30
   27502:	3e01      	subs	r6, #1
   27504:	7033      	strb	r3, [r6, #0]
   27506:	9b04      	ldr	r3, [sp, #16]
   27508:	1b9b      	subs	r3, r3, r6
   2750a:	6123      	str	r3, [r4, #16]
   2750c:	9b07      	ldr	r3, [sp, #28]
   2750e:	aa09      	add	r2, sp, #36	; 0x24
   27510:	9300      	str	r3, [sp, #0]
   27512:	0021      	movs	r1, r4
   27514:	9b06      	ldr	r3, [sp, #24]
   27516:	9805      	ldr	r0, [sp, #20]
   27518:	f7ff fe82 	bl	27220 <_printf_common>
   2751c:	1c43      	adds	r3, r0, #1
   2751e:	d1b3      	bne.n	27488 <_printf_i+0x18c>
   27520:	2001      	movs	r0, #1
   27522:	4240      	negs	r0, r0
   27524:	b00b      	add	sp, #44	; 0x2c
   27526:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27528:	0002b130 	.word	0x0002b130
   2752c:	0002b11f 	.word	0x0002b11f

00027530 <__sread>:
   27530:	b570      	push	{r4, r5, r6, lr}
   27532:	000c      	movs	r4, r1
   27534:	250e      	movs	r5, #14
   27536:	5f49      	ldrsh	r1, [r1, r5]
   27538:	f000 f8f0 	bl	2771c <_read_r>
   2753c:	2800      	cmp	r0, #0
   2753e:	db03      	blt.n	27548 <__sread+0x18>
   27540:	6d63      	ldr	r3, [r4, #84]	; 0x54
   27542:	181b      	adds	r3, r3, r0
   27544:	6563      	str	r3, [r4, #84]	; 0x54
   27546:	bd70      	pop	{r4, r5, r6, pc}
   27548:	89a3      	ldrh	r3, [r4, #12]
   2754a:	4a02      	ldr	r2, [pc, #8]	; (27554 <__sread+0x24>)
   2754c:	4013      	ands	r3, r2
   2754e:	81a3      	strh	r3, [r4, #12]
   27550:	e7f9      	b.n	27546 <__sread+0x16>
   27552:	46c0      	nop			; (mov r8, r8)
   27554:	ffffefff 	.word	0xffffefff

00027558 <__swrite>:
   27558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2755a:	001f      	movs	r7, r3
   2755c:	898b      	ldrh	r3, [r1, #12]
   2755e:	0005      	movs	r5, r0
   27560:	000c      	movs	r4, r1
   27562:	0016      	movs	r6, r2
   27564:	05db      	lsls	r3, r3, #23
   27566:	d505      	bpl.n	27574 <__swrite+0x1c>
   27568:	230e      	movs	r3, #14
   2756a:	5ec9      	ldrsh	r1, [r1, r3]
   2756c:	2200      	movs	r2, #0
   2756e:	2302      	movs	r3, #2
   27570:	f000 f88e 	bl	27690 <_lseek_r>
   27574:	89a3      	ldrh	r3, [r4, #12]
   27576:	4a05      	ldr	r2, [pc, #20]	; (2758c <__swrite+0x34>)
   27578:	0028      	movs	r0, r5
   2757a:	4013      	ands	r3, r2
   2757c:	81a3      	strh	r3, [r4, #12]
   2757e:	0032      	movs	r2, r6
   27580:	230e      	movs	r3, #14
   27582:	5ee1      	ldrsh	r1, [r4, r3]
   27584:	003b      	movs	r3, r7
   27586:	f000 f839 	bl	275fc <_write_r>
   2758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2758c:	ffffefff 	.word	0xffffefff

00027590 <__sseek>:
   27590:	b570      	push	{r4, r5, r6, lr}
   27592:	000c      	movs	r4, r1
   27594:	250e      	movs	r5, #14
   27596:	5f49      	ldrsh	r1, [r1, r5]
   27598:	f000 f87a 	bl	27690 <_lseek_r>
   2759c:	89a3      	ldrh	r3, [r4, #12]
   2759e:	1c42      	adds	r2, r0, #1
   275a0:	d103      	bne.n	275aa <__sseek+0x1a>
   275a2:	4a05      	ldr	r2, [pc, #20]	; (275b8 <__sseek+0x28>)
   275a4:	4013      	ands	r3, r2
   275a6:	81a3      	strh	r3, [r4, #12]
   275a8:	bd70      	pop	{r4, r5, r6, pc}
   275aa:	2280      	movs	r2, #128	; 0x80
   275ac:	0152      	lsls	r2, r2, #5
   275ae:	4313      	orrs	r3, r2
   275b0:	81a3      	strh	r3, [r4, #12]
   275b2:	6560      	str	r0, [r4, #84]	; 0x54
   275b4:	e7f8      	b.n	275a8 <__sseek+0x18>
   275b6:	46c0      	nop			; (mov r8, r8)
   275b8:	ffffefff 	.word	0xffffefff

000275bc <__sclose>:
   275bc:	b510      	push	{r4, lr}
   275be:	230e      	movs	r3, #14
   275c0:	5ec9      	ldrsh	r1, [r1, r3]
   275c2:	f000 f82f 	bl	27624 <_close_r>
   275c6:	bd10      	pop	{r4, pc}

000275c8 <strchr>:
   275c8:	b2c9      	uxtb	r1, r1
   275ca:	7803      	ldrb	r3, [r0, #0]
   275cc:	2b00      	cmp	r3, #0
   275ce:	d004      	beq.n	275da <strchr+0x12>
   275d0:	4299      	cmp	r1, r3
   275d2:	d100      	bne.n	275d6 <strchr+0xe>
   275d4:	4770      	bx	lr
   275d6:	3001      	adds	r0, #1
   275d8:	e7f7      	b.n	275ca <strchr+0x2>
   275da:	424b      	negs	r3, r1
   275dc:	4159      	adcs	r1, r3
   275de:	4249      	negs	r1, r1
   275e0:	4008      	ands	r0, r1
   275e2:	e7f7      	b.n	275d4 <strchr+0xc>

000275e4 <__ascii_wctomb>:
   275e4:	1e0b      	subs	r3, r1, #0
   275e6:	d004      	beq.n	275f2 <__ascii_wctomb+0xe>
   275e8:	2aff      	cmp	r2, #255	; 0xff
   275ea:	d904      	bls.n	275f6 <__ascii_wctomb+0x12>
   275ec:	238a      	movs	r3, #138	; 0x8a
   275ee:	6003      	str	r3, [r0, #0]
   275f0:	3b8b      	subs	r3, #139	; 0x8b
   275f2:	0018      	movs	r0, r3
   275f4:	4770      	bx	lr
   275f6:	700a      	strb	r2, [r1, #0]
   275f8:	2301      	movs	r3, #1
   275fa:	e7fa      	b.n	275f2 <__ascii_wctomb+0xe>

000275fc <_write_r>:
   275fc:	b570      	push	{r4, r5, r6, lr}
   275fe:	0005      	movs	r5, r0
   27600:	0008      	movs	r0, r1
   27602:	0011      	movs	r1, r2
   27604:	2200      	movs	r2, #0
   27606:	4c06      	ldr	r4, [pc, #24]	; (27620 <_write_r+0x24>)
   27608:	6022      	str	r2, [r4, #0]
   2760a:	001a      	movs	r2, r3
   2760c:	f7f8 fa8e 	bl	1fb2c <_write>
   27610:	1c43      	adds	r3, r0, #1
   27612:	d103      	bne.n	2761c <_write_r+0x20>
   27614:	6823      	ldr	r3, [r4, #0]
   27616:	2b00      	cmp	r3, #0
   27618:	d000      	beq.n	2761c <_write_r+0x20>
   2761a:	602b      	str	r3, [r5, #0]
   2761c:	bd70      	pop	{r4, r5, r6, pc}
   2761e:	46c0      	nop			; (mov r8, r8)
   27620:	200055ec 	.word	0x200055ec

00027624 <_close_r>:
   27624:	2300      	movs	r3, #0
   27626:	b570      	push	{r4, r5, r6, lr}
   27628:	4c06      	ldr	r4, [pc, #24]	; (27644 <_close_r+0x20>)
   2762a:	0005      	movs	r5, r0
   2762c:	0008      	movs	r0, r1
   2762e:	6023      	str	r3, [r4, #0]
   27630:	f7f8 fab6 	bl	1fba0 <_close>
   27634:	1c43      	adds	r3, r0, #1
   27636:	d103      	bne.n	27640 <_close_r+0x1c>
   27638:	6823      	ldr	r3, [r4, #0]
   2763a:	2b00      	cmp	r3, #0
   2763c:	d000      	beq.n	27640 <_close_r+0x1c>
   2763e:	602b      	str	r3, [r5, #0]
   27640:	bd70      	pop	{r4, r5, r6, pc}
   27642:	46c0      	nop			; (mov r8, r8)
   27644:	200055ec 	.word	0x200055ec

00027648 <_fstat_r>:
   27648:	2300      	movs	r3, #0
   2764a:	b570      	push	{r4, r5, r6, lr}
   2764c:	4c06      	ldr	r4, [pc, #24]	; (27668 <_fstat_r+0x20>)
   2764e:	0005      	movs	r5, r0
   27650:	0008      	movs	r0, r1
   27652:	0011      	movs	r1, r2
   27654:	6023      	str	r3, [r4, #0]
   27656:	f7f8 faa6 	bl	1fba6 <_fstat>
   2765a:	1c43      	adds	r3, r0, #1
   2765c:	d103      	bne.n	27666 <_fstat_r+0x1e>
   2765e:	6823      	ldr	r3, [r4, #0]
   27660:	2b00      	cmp	r3, #0
   27662:	d000      	beq.n	27666 <_fstat_r+0x1e>
   27664:	602b      	str	r3, [r5, #0]
   27666:	bd70      	pop	{r4, r5, r6, pc}
   27668:	200055ec 	.word	0x200055ec

0002766c <_isatty_r>:
   2766c:	2300      	movs	r3, #0
   2766e:	b570      	push	{r4, r5, r6, lr}
   27670:	4c06      	ldr	r4, [pc, #24]	; (2768c <_isatty_r+0x20>)
   27672:	0005      	movs	r5, r0
   27674:	0008      	movs	r0, r1
   27676:	6023      	str	r3, [r4, #0]
   27678:	f7f8 fa9a 	bl	1fbb0 <_isatty>
   2767c:	1c43      	adds	r3, r0, #1
   2767e:	d103      	bne.n	27688 <_isatty_r+0x1c>
   27680:	6823      	ldr	r3, [r4, #0]
   27682:	2b00      	cmp	r3, #0
   27684:	d000      	beq.n	27688 <_isatty_r+0x1c>
   27686:	602b      	str	r3, [r5, #0]
   27688:	bd70      	pop	{r4, r5, r6, pc}
   2768a:	46c0      	nop			; (mov r8, r8)
   2768c:	200055ec 	.word	0x200055ec

00027690 <_lseek_r>:
   27690:	b570      	push	{r4, r5, r6, lr}
   27692:	0005      	movs	r5, r0
   27694:	0008      	movs	r0, r1
   27696:	0011      	movs	r1, r2
   27698:	2200      	movs	r2, #0
   2769a:	4c06      	ldr	r4, [pc, #24]	; (276b4 <_lseek_r+0x24>)
   2769c:	6022      	str	r2, [r4, #0]
   2769e:	001a      	movs	r2, r3
   276a0:	f7f8 fa88 	bl	1fbb4 <_lseek>
   276a4:	1c43      	adds	r3, r0, #1
   276a6:	d103      	bne.n	276b0 <_lseek_r+0x20>
   276a8:	6823      	ldr	r3, [r4, #0]
   276aa:	2b00      	cmp	r3, #0
   276ac:	d000      	beq.n	276b0 <_lseek_r+0x20>
   276ae:	602b      	str	r3, [r5, #0]
   276b0:	bd70      	pop	{r4, r5, r6, pc}
   276b2:	46c0      	nop			; (mov r8, r8)
   276b4:	200055ec 	.word	0x200055ec

000276b8 <memchr>:
   276b8:	b2c9      	uxtb	r1, r1
   276ba:	1882      	adds	r2, r0, r2
   276bc:	4290      	cmp	r0, r2
   276be:	d101      	bne.n	276c4 <memchr+0xc>
   276c0:	2000      	movs	r0, #0
   276c2:	4770      	bx	lr
   276c4:	7803      	ldrb	r3, [r0, #0]
   276c6:	428b      	cmp	r3, r1
   276c8:	d0fb      	beq.n	276c2 <memchr+0xa>
   276ca:	3001      	adds	r0, #1
   276cc:	e7f6      	b.n	276bc <memchr+0x4>

000276ce <_realloc_r>:
   276ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276d0:	0007      	movs	r7, r0
   276d2:	000d      	movs	r5, r1
   276d4:	0016      	movs	r6, r2
   276d6:	2900      	cmp	r1, #0
   276d8:	d105      	bne.n	276e6 <_realloc_r+0x18>
   276da:	0011      	movs	r1, r2
   276dc:	f7fe fe34 	bl	26348 <_malloc_r>
   276e0:	0004      	movs	r4, r0
   276e2:	0020      	movs	r0, r4
   276e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276e6:	2a00      	cmp	r2, #0
   276e8:	d103      	bne.n	276f2 <_realloc_r+0x24>
   276ea:	f7fe fde3 	bl	262b4 <_free_r>
   276ee:	0034      	movs	r4, r6
   276f0:	e7f7      	b.n	276e2 <_realloc_r+0x14>
   276f2:	f000 f827 	bl	27744 <_malloc_usable_size_r>
   276f6:	002c      	movs	r4, r5
   276f8:	4286      	cmp	r6, r0
   276fa:	d9f2      	bls.n	276e2 <_realloc_r+0x14>
   276fc:	0031      	movs	r1, r6
   276fe:	0038      	movs	r0, r7
   27700:	f7fe fe22 	bl	26348 <_malloc_r>
   27704:	1e04      	subs	r4, r0, #0
   27706:	d0ec      	beq.n	276e2 <_realloc_r+0x14>
   27708:	0029      	movs	r1, r5
   2770a:	0032      	movs	r2, r6
   2770c:	f7fe fdae 	bl	2626c <memcpy>
   27710:	0029      	movs	r1, r5
   27712:	0038      	movs	r0, r7
   27714:	f7fe fdce 	bl	262b4 <_free_r>
   27718:	e7e3      	b.n	276e2 <_realloc_r+0x14>
	...

0002771c <_read_r>:
   2771c:	b570      	push	{r4, r5, r6, lr}
   2771e:	0005      	movs	r5, r0
   27720:	0008      	movs	r0, r1
   27722:	0011      	movs	r1, r2
   27724:	2200      	movs	r2, #0
   27726:	4c06      	ldr	r4, [pc, #24]	; (27740 <_read_r+0x24>)
   27728:	6022      	str	r2, [r4, #0]
   2772a:	001a      	movs	r2, r3
   2772c:	f7f8 f9dc 	bl	1fae8 <_read>
   27730:	1c43      	adds	r3, r0, #1
   27732:	d103      	bne.n	2773c <_read_r+0x20>
   27734:	6823      	ldr	r3, [r4, #0]
   27736:	2b00      	cmp	r3, #0
   27738:	d000      	beq.n	2773c <_read_r+0x20>
   2773a:	602b      	str	r3, [r5, #0]
   2773c:	bd70      	pop	{r4, r5, r6, pc}
   2773e:	46c0      	nop			; (mov r8, r8)
   27740:	200055ec 	.word	0x200055ec

00027744 <_malloc_usable_size_r>:
   27744:	1f0b      	subs	r3, r1, #4
   27746:	681b      	ldr	r3, [r3, #0]
   27748:	1f18      	subs	r0, r3, #4
   2774a:	2b00      	cmp	r3, #0
   2774c:	da01      	bge.n	27752 <_malloc_usable_size_r+0xe>
   2774e:	580b      	ldr	r3, [r1, r0]
   27750:	18c0      	adds	r0, r0, r3
   27752:	4770      	bx	lr
   27754:	000122fa 	.word	0x000122fa
   27758:	00012540 	.word	0x00012540
   2775c:	00012540 	.word	0x00012540
   27760:	00012540 	.word	0x00012540
   27764:	00012540 	.word	0x00012540
   27768:	00012540 	.word	0x00012540
   2776c:	00012540 	.word	0x00012540
   27770:	00012540 	.word	0x00012540
   27774:	00012540 	.word	0x00012540
   27778:	00012540 	.word	0x00012540
   2777c:	00012540 	.word	0x00012540
   27780:	00012540 	.word	0x00012540
   27784:	00012540 	.word	0x00012540
   27788:	00012540 	.word	0x00012540
   2778c:	00012540 	.word	0x00012540
   27790:	00012540 	.word	0x00012540
   27794:	000122e2 	.word	0x000122e2
   27798:	00012540 	.word	0x00012540
   2779c:	00012540 	.word	0x00012540
   277a0:	00012540 	.word	0x00012540
   277a4:	00012540 	.word	0x00012540
   277a8:	00012540 	.word	0x00012540
   277ac:	00012540 	.word	0x00012540
   277b0:	00012540 	.word	0x00012540
   277b4:	00012540 	.word	0x00012540
   277b8:	00012540 	.word	0x00012540
   277bc:	00012540 	.word	0x00012540
   277c0:	00012540 	.word	0x00012540
   277c4:	00012540 	.word	0x00012540
   277c8:	00012540 	.word	0x00012540
   277cc:	00012540 	.word	0x00012540
   277d0:	00012540 	.word	0x00012540
   277d4:	000122f2 	.word	0x000122f2
   277d8:	00012540 	.word	0x00012540
   277dc:	00012540 	.word	0x00012540
   277e0:	00012540 	.word	0x00012540
   277e4:	00012540 	.word	0x00012540
   277e8:	00012540 	.word	0x00012540
   277ec:	00012540 	.word	0x00012540
   277f0:	00012540 	.word	0x00012540
   277f4:	00012540 	.word	0x00012540
   277f8:	00012540 	.word	0x00012540
   277fc:	00012540 	.word	0x00012540
   27800:	00012540 	.word	0x00012540
   27804:	00012540 	.word	0x00012540
   27808:	00012540 	.word	0x00012540
   2780c:	00012540 	.word	0x00012540
   27810:	00012540 	.word	0x00012540
   27814:	000122ea 	.word	0x000122ea
   27818:	00012302 	.word	0x00012302
   2781c:	000122ca 	.word	0x000122ca
   27820:	000122da 	.word	0x000122da
   27824:	000122d2 	.word	0x000122d2
   27828:	00000002 	.word	0x00000002
   2782c:	00000003 	.word	0x00000003
   27830:	00000028 	.word	0x00000028
   27834:	00000029 	.word	0x00000029
   27838:	00000004 	.word	0x00000004
   2783c:	00000005 	.word	0x00000005
   27840:	00000006 	.word	0x00000006
   27844:	00000007 	.word	0x00000007
   27848:	0000ffff 	.word	0x0000ffff
   2784c:	0000ffff 	.word	0x0000ffff
   27850:	00000022 	.word	0x00000022
   27854:	00000023 	.word	0x00000023
   27858:	0000ffff 	.word	0x0000ffff
   2785c:	0000ffff 	.word	0x0000ffff
   27860:	0000ffff 	.word	0x0000ffff
   27864:	0000ffff 	.word	0x0000ffff
   27868:	00000008 	.word	0x00000008
   2786c:	00000009 	.word	0x00000009
   27870:	0000000a 	.word	0x0000000a
   27874:	0000000b 	.word	0x0000000b
   27878:	00082008 	.word	0x00082008
   2787c:	736e6553 	.word	0x736e6553
   27880:	4520726f 	.word	0x4520726f
   27884:	726f7272 	.word	0x726f7272
   27888:	21642520 	.word	0x21642520
   2788c:	00000a0d 	.word	0x00000a0d
   27890:	74736944 	.word	0x74736944
   27894:	65636e61 	.word	0x65636e61
   27898:	6425203a 	.word	0x6425203a
   2789c:	0d6d6d20 	.word	0x0d6d6d20
   278a0:	0000000a 	.word	0x0000000a
   278a4:	74736944 	.word	0x74736944
   278a8:	65636e61 	.word	0x65636e61
   278ac:	74614420 	.word	0x74614420
   278b0:	514d2061 	.word	0x514d2061
   278b4:	50205454 	.word	0x50205454
   278b8:	0d74736f 	.word	0x0d74736f
   278bc:	0000000a 	.word	0x0000000a
   278c0:	65636341 	.word	0x65636341
   278c4:	6172656c 	.word	0x6172656c
   278c8:	6e6f6974 	.word	0x6e6f6974
   278cc:	676d5b20 	.word	0x676d5b20
   278d0:	20583a5d 	.word	0x20583a5d
   278d4:	59096425 	.word	0x59096425
   278d8:	09642520 	.word	0x09642520
   278dc:	25205a25 	.word	0x25205a25
   278e0:	000a0d64 	.word	0x000a0d64
   278e4:	64206f4e 	.word	0x64206f4e
   278e8:	20617461 	.word	0x20617461
   278ec:	64616572 	.word	0x64616572
   278f0:	0d202179 	.word	0x0d202179
   278f4:	0000000a 	.word	0x0000000a
   278f8:	20554d49 	.word	0x20554d49
   278fc:	61746144 	.word	0x61746144
   27900:	54514d20 	.word	0x54514d20
   27904:	6f502054 	.word	0x6f502054
   27908:	0a0d7473 	.word	0x0a0d7473
   2790c:	00000000 	.word	0x00000000
   27910:	74747542 	.word	0x74747542
   27914:	23206e6f 	.word	0x23206e6f
   27918:	69206425 	.word	0x69206425
   2791c:	65722073 	.word	0x65722073
   27920:	7361656c 	.word	0x7361656c
   27924:	0a0d6465 	.word	0x0a0d6465
   27928:	00000000 	.word	0x00000000
   2792c:	74747542 	.word	0x74747542
   27930:	23206e6f 	.word	0x23206e6f
   27934:	69206425 	.word	0x69206425
   27938:	72702073 	.word	0x72702073
   2793c:	65737365 	.word	0x65737365
   27940:	000a0d64 	.word	0x000a0d64
   27944:	64757453 	.word	0x64757453
   27948:	73746e65 	.word	0x73746e65
   2794c:	206f7420 	.word	0x206f7420
   27950:	6c6c6966 	.word	0x6c6c6966
   27954:	74756f20 	.word	0x74756f20
   27958:	00000021 	.word	0x00000021
   2795c:	6d6d7544 	.word	0x6d6d7544
   27960:	61472079 	.word	0x61472079
   27964:	4420656d 	.word	0x4420656d
   27968:	20617461 	.word	0x20617461
   2796c:	5454514d 	.word	0x5454514d
   27970:	736f5020 	.word	0x736f5020
   27974:	000a0d74 	.word	0x000a0d74
   27978:	00736c63 	.word	0x00736c63
   2797c:	3a736c63 	.word	0x3a736c63
   27980:	656c4320 	.word	0x656c4320
   27984:	20737261 	.word	0x20737261
   27988:	20656874 	.word	0x20656874
   2798c:	6d726574 	.word	0x6d726574
   27990:	6c616e69 	.word	0x6c616e69
   27994:	72637320 	.word	0x72637320
   27998:	0d6e6565 	.word	0x0d6e6565
   2799c:	0000000a 	.word	0x0000000a
   279a0:	656d6167 	.word	0x656d6167
   279a4:	00000000 	.word	0x00000000
   279a8:	656d6167 	.word	0x656d6167
   279ac:	6553203a 	.word	0x6553203a
   279b0:	2073646e 	.word	0x2073646e
   279b4:	6d6d7564 	.word	0x6d6d7564
   279b8:	61672079 	.word	0x61672079
   279bc:	6420656d 	.word	0x6420656d
   279c0:	0d617461 	.word	0x0d617461
   279c4:	0000000a 	.word	0x0000000a
   279c8:	64746567 	.word	0x64746567
   279cc:	61747369 	.word	0x61747369
   279d0:	0065636e 	.word	0x0065636e
   279d4:	64746567 	.word	0x64746567
   279d8:	61747369 	.word	0x61747369
   279dc:	3a65636e 	.word	0x3a65636e
   279e0:	74655220 	.word	0x74655220
   279e4:	736e7275 	.word	0x736e7275
   279e8:	65687420 	.word	0x65687420
   279ec:	73696420 	.word	0x73696420
   279f0:	636e6174 	.word	0x636e6174
   279f4:	72662065 	.word	0x72662065
   279f8:	74206d6f 	.word	0x74206d6f
   279fc:	55206568 	.word	0x55206568
   27a00:	30312d53 	.word	0x30312d53
   27a04:	65532030 	.word	0x65532030
   27a08:	726f736e 	.word	0x726f736e
   27a0c:	000a0d2e 	.word	0x000a0d2e
   27a10:	62746567 	.word	0x62746567
   27a14:	6f747475 	.word	0x6f747475
   27a18:	0000006e 	.word	0x0000006e
   27a1c:	62746567 	.word	0x62746567
   27a20:	6f747475 	.word	0x6f747475
   27a24:	50203a6e 	.word	0x50203a6e
   27a28:	65636f72 	.word	0x65636f72
   27a2c:	73657373 	.word	0x73657373
   27a30:	646e6120 	.word	0x646e6120
   27a34:	69727020 	.word	0x69727020
   27a38:	2073746e 	.word	0x2073746e
   27a3c:	20656874 	.word	0x20656874
   27a40:	4f464946 	.word	0x4f464946
   27a44:	74756220 	.word	0x74756220
   27a48:	206e6f74 	.word	0x206e6f74
   27a4c:	66667562 	.word	0x66667562
   27a50:	66207265 	.word	0x66207265
   27a54:	206d6f72 	.word	0x206d6f72
   27a58:	20656874 	.word	0x20656874
   27a5c:	73656573 	.word	0x73656573
   27a60:	0d2e7761 	.word	0x0d2e7761
   27a64:	0000000a 	.word	0x0000000a
   27a68:	0064656c 	.word	0x0064656c
   27a6c:	2064656c 	.word	0x2064656c
   27a70:	79656b5b 	.word	0x79656b5b
   27a74:	5d6d756e 	.word	0x5d6d756e
   27a78:	5b5d525b 	.word	0x5b5d525b
   27a7c:	425b5d47 	.word	0x425b5d47
   27a80:	53203a5d 	.word	0x53203a5d
   27a84:	20737465 	.word	0x20737465
   27a88:	20656874 	.word	0x20656874
   27a8c:	65766967 	.word	0x65766967
   27a90:	454c206e 	.word	0x454c206e
   27a94:	6f742044 	.word	0x6f742044
   27a98:	65687420 	.word	0x65687420
   27a9c:	76696720 	.word	0x76696720
   27aa0:	52206e65 	.word	0x52206e65
   27aa4:	422c472c 	.word	0x422c472c
   27aa8:	6c617620 	.word	0x6c617620
   27aac:	2e736575 	.word	0x2e736575
   27ab0:	00000a0d 	.word	0x00000a0d
   27ab4:	65736572 	.word	0x65736572
   27ab8:	00000074 	.word	0x00000074
   27abc:	65736572 	.word	0x65736572
   27ac0:	52203a74 	.word	0x52203a74
   27ac4:	74657365 	.word	0x74657365
   27ac8:	68742073 	.word	0x68742073
   27acc:	65642065 	.word	0x65642065
   27ad0:	65636976 	.word	0x65636976
   27ad4:	00000a0d 	.word	0x00000a0d
   27ad8:	00007766 	.word	0x00007766
   27adc:	203a7766 	.word	0x203a7766
   27ae0:	6e776f44 	.word	0x6e776f44
   27ae4:	64616f6c 	.word	0x64616f6c
   27ae8:	66206120 	.word	0x66206120
   27aec:	20656c69 	.word	0x20656c69
   27af0:	20646e61 	.word	0x20646e61
   27af4:	66726570 	.word	0x66726570
   27af8:	206d726f 	.word	0x206d726f
   27afc:	46206e61 	.word	0x46206e61
   27b00:	70752057 	.word	0x70752057
   27b04:	65746164 	.word	0x65746164
   27b08:	00000a0d 	.word	0x00000a0d
   27b0c:	00756d69 	.word	0x00756d69
   27b10:	3a756d69 	.word	0x3a756d69
   27b14:	74655220 	.word	0x74655220
   27b18:	736e7275 	.word	0x736e7275
   27b1c:	76206120 	.word	0x76206120
   27b20:	65756c61 	.word	0x65756c61
   27b24:	6f726620 	.word	0x6f726620
   27b28:	6874206d 	.word	0x6874206d
   27b2c:	4d492065 	.word	0x4d492065
   27b30:	000a0d55 	.word	0x000a0d55
   27b34:	65657246 	.word	0x65657246
   27b38:	534f5452 	.word	0x534f5452
   27b3c:	494c4320 	.word	0x494c4320
   27b40:	540a0d2e 	.word	0x540a0d2e
   27b44:	20657079 	.word	0x20657079
   27b48:	706c6548 	.word	0x706c6548
   27b4c:	206f7420 	.word	0x206f7420
   27b50:	77656976 	.word	0x77656976
   27b54:	6c206120 	.word	0x6c206120
   27b58:	20747369 	.word	0x20747369
   27b5c:	7220666f 	.word	0x7220666f
   27b60:	73696765 	.word	0x73696765
   27b64:	65726574 	.word	0x65726574
   27b68:	6f632064 	.word	0x6f632064
   27b6c:	6e616d6d 	.word	0x6e616d6d
   27b70:	0d2e7364 	.word	0x0d2e7364
   27b74:	0000000a 	.word	0x0000000a
   27b78:	0000616f 	.word	0x0000616f
   27b7c:	325b6325 	.word	0x325b6325
   27b80:	003e0d4b 	.word	0x003e0d4b

00027b84 <xClearScreen>:
   27b84:	00027978 0002797c 00012b6d 00000000     xy..|y..m+......
   27b94:	325b6325 0000004a                       %c[2J...

00027b9c <xDistanceSensorGetDistance>:
   27b9c:	000279c8 000279d4 00012d59 00000000     .y...y..Y-......

00027bac <xImuGetCommand>:
   27bac:	00027b0c 00027b10 00012bad 00000000     .{...{...+......

00027bbc <xNeotrellisProcessButtonCommand>:
   27bbc:	00027a10 00027a1c 00012cb5 00000000     .z...z...,......

00027bcc <xNeotrellisTurnLEDCommand>:
   27bcc:	00027a68 00027a6c 00012b99 00000004     hz..lz...+......

00027bdc <xOTAUCommand>:
   27bdc:	00027ad8 00027adc 00012ca5 00000000     .z...z...,......

00027bec <xResetCommand>:
   27bec:	00027ab4 00027abc 00012b55 00000000     .z...z..U+......

00027bfc <xSendDummyGameData>:
   27bfc:	000279a0 000279a8 00012dd5 00000000     .y...y...-......
   27c0c:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   27c1c:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   27c2c:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   27c3c:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   27c4c:	75657571 0d217365 0000000a 20776f4e     queues!.....Now 
   27c5c:	20657261 74207461 70206568 6563616c     are at the place
   27c6c:	20666f20 74696177 20676e69 20726f66      of waiting for 
   27c7c:	656d6167 61747320 0a0d7472 00000000     game start......
   27c8c:	72617453 676e6974 636f6c20 6f697461     Starting locatio
   27c9c:	7369206e 203e2d20 0a0d6425 00000000     n is -> %d......
   27cac:	74206425 6f6d2068 69206576 74612073     %d th move is at
   27cbc:	0d642520 0000000a 20656874 77736e61      %d.....the answ
   27ccc:	6b207265 69207965 64252073 64257c20     er key is %d |%d
   27cdc:	64257c20 64257c20 64257c20 64257c20      |%d |%d |%d |%d
   27cec:	0d207c20 0000000a 65636552 64657669      | .....Received
   27cfc:	6d614720 6e6f2065 736e6920 63757274      Game on instruc
   27d0c:	6e6f6974 0a0d2021 00000000 00001010     tion! ..........
   27d1c:	0000050e 6f727245 6e692072 61697469     ....Error initia
   27d2c:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   27d3c:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   27d4c:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   27d5c:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   27d6c:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   27d7c:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   27d8c:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   27d9c:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   27dac:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   27dbc:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   27dcc:	7265626d 20666f20 69766564 2f736563     mber of devices/
   27ddc:	006e2f72 6c756f43 6f6e2064 6e692074     r/n.Could not in
   27dec:	61697469 657a696c 79654b20 21646170     itialize Keypad!
   27dfc:	6e2f722f 00000000 6f727245 65722072     /r/n....Error re
   27e0c:	6e696461 65532067 77617365 756f6320     ading Seesaw cou
   27e1c:	2173746e 6e2f722f 00000000              nts!/r/n....

00027e28 <msgBaseGetHWID>:
   27e28:	00000100                                ....

00027e2c <msgKeypadEnableInt>:
   27e2c:	00010210                                ....

00027e30 <msgKeypadGetCount>:
   27e30:	00000410                                ....

00027e34 <msgNeopixelBufLength>:
   27e34:	3000030e                                ...0

00027e38 <msgNeopixelPin>:
   27e38:	0003010e                                ....

00027e3c <msgNeopixelSpeed>:
   27e3c:	0001020e 00014400 0001440a 0001441a     .....D...D...D..
   27e4c:	00014456 0001446c 252c6425 64252c64     VD..lD..%d,%d,%d
   27e5c:	2c64252c 252c6425 00000064 5f736e61     ,%d,%d,%d...ans_
   27e6c:	5f716573 31727375 00000000 755f5452     seq_usr1....RT_u
   27e7c:	5f317273 75706e69 00000074 755f5452     sr1_input...RT_u
   27e8c:	5f327273 75706e69 00000074 20746547     sr2_input...Get 
   27e9c:	20656874 7373656d 21656761 6d614720     the message! Gam
   27eac:	6d4f2065 000a0d21 6167227b 3a22656d     e Om!...{"game":
   27ebc:	0000005b 61470a0d 6d20656d 61737365     [.....Game messa
   27ecc:	72206567 69656365 21646576 00000a0d     ge received!....
   27edc:	732a2e25 00000000 61500a0d 64657372     %.*s......Parsed
   27eec:	6d6f4320 646e616d 0000203a 002c6425      Command: ..%d,.
   27efc:	65530a0d 7020746e 2079616c 63206f74     ..Sent play to c
   27f0c:	72746e6f 0d216c6f 0000000a 61470a0d     ontrol!.......Ga
   27f1c:	6d20656d 61737365 72206567 69656365     me message recei
   27f2c:	20646576 20747562 20746f6e 65646e75     ved but not unde
   27f3c:	6f747372 0d21646f 0000000a 25200a0d     rstood!....... %
   27f4c:	00732a2e 28626772 00000000 47520a0d     .*s.rgb(......RG
   27f5c:	64252042 20642520 0a0d6425 00000000     B %d %d %d......
   27f6c:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   27f7c:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   27f8c:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   27f9c:	00000000 5454514d 67657220 65747369     ....MQTT registe
   27fac:	61632072 61626c6c 66206b63 656c6961     r callback faile
   27fbc:	45202e64 726f7272 646f6320 73692065     d. Error code is
   27fcc:	64252820 000a0d29 70747468 696c635f      (%d)...http_cli
   27fdc:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   27fec:	63205054 6e65696c 6f732074 74656b63     TP client socket
   27ffc:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   2800c:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   2801c:	6b636162 6572203a 73657571 6f632074     back: request co
   2802c:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   2803c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   2804c:	6572203a 76696563 72206465 6f707365     : received respo
   2805c:	2065736e 64207525 20617461 657a6973     nse %u data size
   2806c:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   2807c:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   2808c:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   2809c:	253a6e6f 000a0d64 74696e69 6f74735f     on:%d...init_sto
   280ac:	65676172 6c70203a 65736165 756c7020     rage: please plu
   280bc:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   280cc:	206e6920 746f6c73 0d2e2e2e 0000000a      in slot........
   280dc:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   280ec:	72614320 6e692064 6c617473 6166206c      Card install fa
   280fc:	64656c69 000a0d2e 74696e69 6f74735f     iled....init_sto
   2810c:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   2811c:	646e6120 2d657220 67756c70 65687420      and re-plug the
   2812c:	72616320 0a0d2e64 00000000 74696e69      card.......init
   2813c:	6f74735f 65676172 6f6d203a 69746e75     _storage: mounti
   2814c:	5320676e 61632044 2e2e6472 000a0d2e     ng SD card......
   2815c:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   2816c:	72616320 6f6d2064 20746e75 6c696166      card mount fail
   2817c:	20216465 73657228 29642520 00000a0d     ed! (res %d)....
   2818c:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   2819c:	72616320 6f6d2064 20746e75 0d2e4b4f      card mount OK..
   281ac:	0000000a                                ....

000281b0 <main_mqtt_broker>:
   281b0:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   281c0:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   281d0:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   281e0:	4a737242 6f564e42 376c4251 00000000     BrsJBNVoQBl7....
   281f0:	79747472 6a65626f 00000000 5454514d     rttyobej....MQTT
   28200:	72452020 20726f72 4f4e202d 6f432054       Error - NOT Co
   28210:	63656e6e 20646574 62206f74 656b6f72     nnected to broke
   28220:	000a0d72 5454514d 6e6f4320 7463656e     r...MQTT Connect
   28230:	74206465 7262206f 72656b6f 00000a0d     ed to broker....
   28240:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   28250:	76726573 25287265 20212973 72746572     server(%s)! retr
   28260:	74692079 74756120 74616d6f 6c616369     y it automatical
   28270:	0d2e796c 0000000a 475f3150 5f454d41     ly......P1_GAME_
   28280:	35455345 545f3631 00003736 4c5f3150     ESE516_T67..P1_L
   28290:	455f4445 31354553 36545f36 00000037     ED_ESE516_T67...
   282a0:	675f584a 5f656d61 755f6e6f 00317273     JX_game_on_usr1.
   282b0:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   282c0:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   282d0:	6c636564 20656e69 72756f79 63636120     decline your acc
   282e0:	21737365 72726520 6320726f 2065646f     ess! error code 
   282f0:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   28300:	6e6e6f63 65746365 000a0d64 6f736572     connected...reso
   28310:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   28320:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   28330:	64252e64 0a0d0a0d 00000000 72617473     d.%d........star
   28340:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   28350:	726f7473 20656761 20746f6e 64616572     storage not read
   28360:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   28370:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   28380:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   28390:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   283a0:	203a6461 75716572 20747365 73207369     ad: request is s
   283b0:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   283c0:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   283d0:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   283e0:	726c6120 79646165 000a0d2e 72617473      already....star
   283f0:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   28400:	20676e69 50545448 71657220 74736575     ing HTTP request
   28410:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   28420:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   28430:	7e2f7564 72666a6a 2f6b6e61 46415455     du/~jjfrank/UTAF
   28440:	69622e4f 0000006e 726f7473 69665f65     O.bin...store_fi
   28450:	705f656c 656b6361 65203a74 7974706d     le_packet: empty
   28460:	74616420 0a0d2e61 00000000 64333025      data.......%03d
   28470:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   28480:	656b6361 63203a74 74616572 20676e69     acket: creating 
   28490:	656c6966 73255b20 000a0d5d 726f7473     file [%s]...stor
   284a0:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   284b0:	20656c69 656d616e 20736920 61766e69     ile name is inva
   284c0:	2e64696c 776f4420 616f6c6e 61632064     lid. Download ca
   284d0:	6c65636e 0d2e6465 0000000a 726f7473     nceled......stor
   284e0:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   284f0:	20656c69 61657263 6e6f6974 72726520     ile creation err
   28500:	2021726f 3a746572 0a0d6425 00000000     or! ret:%d......
   28510:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   28520:	66203a74 20656c69 74697277 72652065     t: file write er
   28530:	2c726f72 776f6420 616f6c6e 61632064     ror, download ca
   28540:	6c65636e 0d2e6465 0000000a 726f7473     nceled......stor
   28550:	69665f65 705f656c 656b6361 72203a74     e_file_packet: r
   28560:	69656365 5b646576 5d756c25 6966202c     eceived[%lu], fi
   28570:	7320656c 5b657a69 5d756c25 00000a0d     le size[%lu]....
   28580:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   28590:	66203a74 20656c69 6e776f64 64616f6c     t: file download
   285a0:	73206465 65636375 75667373 2e796c6c     ed successfully.
   285b0:	00000a0d 4f525245 6e492052 61697469     ....ERROR Initia
   285c0:	697a696c 5720676e 20696669 61746144     lizing Wifi Data
   285d0:	65757120 21736575 00000a0d 35455345      queues!....ESE5
   285e0:	2d203631 66695720 6e492069 43207469     16 - Wifi Init C
   285f0:	0d65646f 0000000a 666e6f63 72756769     ode.....configur
   28600:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   28610:	20505454 65696c63 6920746e 6974696e     TTP client initi
   28620:	7a696c61 6f697461 6166206e 64656c69     alization failed
   28630:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   28640:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   28650:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   28660:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
   28670:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
   28680:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
   28690:	6e6e6f43 65746365 6f742064 54514d20     Connected to MQT
   286a0:	72422054 72656b6f 000a0d21 00006425     T Broker!...%d..
   286b0:	00007d5d 475f3250 5f454d41 35455345     ]}..P2_GAME_ESE5
   286c0:	545f3631 00003736 6d69227b 3a227875     16_T67..{"imux":
   286d0:	202c6425 756d6922 203a2279 202c6425     %d, "imuy": %d, 
   286e0:	756d6922 203a227a 007d6425 495f3150     "imuz": %d}.P1_I
   286f0:	455f554d 31354553 36545f36 00000037     MU_ESE516_T67...
   28700:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
   28710:	67616c46 78742e41 64612074 21646564     FlagA.txt added!
   28720:	00000a0d 6c463a30 2e416761 00747874     ....0:FlagA.txt.
   28730:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   28740:	4f435f49 43454e4e 0d444554 0000000a     I_CONNECTED.....
   28750:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   28760:	49445f49 4e4f4353 5443454e 0a0d4445     I_DISCONNECTED..
   28770:	00000000 6e6c6177 31337475 00000031     ....walnut311...
   28780:	33545041 322d3131 0000342e 69666977     APT311-2.4..wifi
   28790:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   287a0:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   287b0:	00000000 6f727245 6f632072 63656e6e     ....Error connec
   287c0:	676e6974 206f7420 5454514d 6f724220     ting to MQTT Bro
   287d0:	2172656b 00000a0d 6f636e49 63657272     ker!....Incorrec
   287e0:	6f632074 6e616d6d 61702064 656d6172     t command parame
   287f0:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
   28800:	706c6568 6f742022 65697620 20612077     help" to view a 
   28810:	7473696c 20666f20 69617661 6c62616c     list of availabl
   28820:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
   28830:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
   28840:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
   28850:	706c6568 6f742027 65697620 20612077     help' to view a 
   28860:	7473696c 20666f20 69617661 6c62616c     list of availabl
   28870:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
   28880:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
   28890:	694c200a 20737473 206c6c61 20656874     . Lists all the 
   288a0:	69676572 72657473 63206465 616d6d6f     registered comma
   288b0:	0d73646e 000a0d0a                       nds.....

000288b8 <xHelpCommand>:
   288b8:	00028880 00028888 000151a1 00000000     .........Q......
   288c8:	000156d8 000156d0 000156d4 000156f0     .V...V...V...V..
   288d8:	000156cc 000156dc 000156e0 000156e4     .V...V...V...V..
   288e8:	000156e8 20746f4e 756f6e65 54206867     .V..Not enough T
   288f8:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
   28908:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
   28918:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
   28928:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
   28938:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
   28948:	2d207365 636e6920 73616572 52542065     es - increase TR
   28958:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
   28968:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   28978:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
   28988:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
   28998:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   289a8:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
   289b8:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   289c8:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   289d8:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
   289e8:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   289f8:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
   28a08:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   28a18:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
   28a28:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
   28a38:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   28a48:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
   28a58:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   28a68:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
   28a78:	6e616820 73656c64 69202d20 6572636e      handles - incre
   28a88:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
   28a98:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   28aa8:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   28ab8:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
   28ac8:	61682050 656c646e 202d2073 72636e69     P handles - incr
   28ad8:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
   28ae8:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
   28af8:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   28b08:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
   28b18:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
   28b28:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
   28b38:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
   28b48:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   28b58:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   28b68:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
   28b78:	6e616820 73656c64 69202d20 6572636e      handles - incre
   28b88:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
   28b98:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
   28ba8:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   28bb8:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
   28bc8:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
   28bd8:	64696c61 6a626f20 63746365 7373616c     alid objectclass
   28be8:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
   28bf8:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
   28c08:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
   28c18:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
   28c28:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
   28c38:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
   28c48:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
   28c58:	6f6d2074 00296564 74437a54 00006c72     t mode).TzCtrl..
   28c68:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28c78:	65684376 61446b63 6f546174 764f6542     vCheckDataToBeOv
   28c88:	72777265 65747469 726f466e 746c754d     erwrittenForMult
   28c98:	746e4569 76457972 73746e65 6f6e203a     iEntryEvents: no
   28ca8:	746e4566 73656972 68436f54 206b6365     fEntriesToCheck 
   28cb8:	30203d3d 00000000 43415254 53415f45     == 0....TRACE_AS
   28cc8:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   28cd8:	53544474 6e49203a 696c6176 61762064     tDTS: Invalid va
   28ce8:	2065756c 20726f66 61726170 616d5f6d     lue for param_ma
   28cf8:	53544478 00000000 20646142 61726170     xDTS....Bad para
   28d08:	616d5f6d 53544478 206e6920 54767270     m_maxDTS in prvT
   28d18:	65636172 44746547 00005354 43415254     raceGetDTS..TRAC
   28d28:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28d38:	65476563 6a624f74 48746365 6c646e61     ceGetObjectHandl
   28d48:	49203a65 6c61766e 76206469 65756c61     e: Invalid value
   28d58:	726f6620 6a626f20 63746365 7373616c      for objectclass
   28d68:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   28d78:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   28d88:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   28d98:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   28da8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28db8:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   28dc8:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   28dd8:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   28de8:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   28df8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28e08:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   28e18:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   28e28:	65756c61 726f6620 00646920 63617254     alue for id.Trac
   28e38:	65522065 64726f63 44207265 006f6d65     e Recorder Demo.
   28e48:	65747441 2074706d 69206f74 7865646e     Attempt to index
   28e58:	74756f20 65646973 65766520 6220746e      outside event b
   28e68:	65666675 00002172 43415254 53415f45     uffer!..TRACE_AS
   28e78:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28e88:	6a624f74 4e746365 3a656d61 6d616e20     tObjectName: nam
   28e98:	3d3d2065 4c554e20 0000004c 656c6c49     e == NULL...Ille
   28ea8:	206c6167 656a626f 63207463 7373616c     gal object class
   28eb8:	206e6920 54767270 65636172 4f746553      in prvTraceSetO
   28ec8:	63656a62 6d614e74 00000065 656c6c49     bjectName...Ille
   28ed8:	206c6167 646e6168 2820656c 69202930     gal handle (0) i
   28ee8:	7270206e 61725476 65536563 6a624f74     n prvTraceSetObj
   28ef8:	4e746365 2e656d61 00000000 43415254     ectName.....TRAC
   28f08:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28f18:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   28f28:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   28f38:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   28f48:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28f58:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   28f68:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   28f78:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   28f88:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28f98:	65536563 69725074 7469726f 6f725079     ceSetPriorityPro
   28fa8:	74726570 6f203a79 63656a62 616c6374     perty: objectcla
   28fb8:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
   28fc8:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
   28fd8:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28fe8:	69725074 7469726f 6f725079 74726570     tPriorityPropert
   28ff8:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
   29008:	726f6620 00646920 43415254 53415f45      for id.TRACE_AS
   29018:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   29028:	73615474 736e496b 636e6174 6e694665     tTaskInstanceFin
   29038:	65687369 49203a64 6c61766e 76206469     ished: Invalid v
   29048:	65756c61 726f6620 6e616820 00656c64     alue for handle.
   29058:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29068:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29078:	6c61436c 65203a6c 65646f63 203d3e20     lCall: ecode >= 
   29088:	46467830 00000000 43415254 53415f45     0xFF....TRACE_AS
   29098:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   290a8:	4b65726f 656e7265 6c61436c 6f203a6c     oreKernelCall: o
   290b8:	63656a62 616c4374 3e207373 5254203d     bjectClass >= TR
   290c8:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   290d8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   290e8:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   290f8:	6c61436c 49203a6c 6c61766e 76206469     lCall: Invalid v
   29108:	65756c61 726f6620 6a626f20 4e746365     alue for objectN
   29118:	65626d75 00000072 6f636552 72656472     umber...Recorder
   29128:	73756220 202d2079 68676968 69727020      busy - high pri
   29138:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29148:	63737973 3f6c6c61 29322820 00000000     syscall? (2)....
   29158:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29168:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29178:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   29188:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   29198:	76206469 65756c61 726f6620 74766520     id value for evt
   291a8:	65646f63 00000000 6f636552 72656472     code....Recorder
   291b8:	73756220 202d2079 68676968 69727020      busy - high pri
   291c8:	7469726f 53492079 73752052 20676e69     ority ISR using 
   291d8:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   291e8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   291f8:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29208:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29218:	63747665 2065646f 30203d3e 00464678     evtcode >= 0xFF.
   29228:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29238:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29248:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29258:	656a626f 6c437463 20737361 54203d3e     objectClass >= T
   29268:	45434152 4c434e5f 45535341 00000053     RACE_NCLASSES...
   29278:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29288:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29298:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   292a8:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   292b8:	626f2072 7463656a 626d754e 00007265     r objectNumber..
   292c8:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   292d8:	68676968 69727020 7469726f 53492079     high priority IS
   292e8:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   292f8:	29332820 00000000 43415254 53415f45      (3)....TRACE_AS
   29308:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   29318:	5465726f 526b7361 79646165 6e49203a     oreTaskReady: In
   29328:	696c6176 61762064 2065756c 20726f66     valid value for 
   29338:	646e6168 0000656c 6f636552 72656472     handle..Recorder
   29348:	73756220 202d2079 68676968 69727020      busy - high pri
   29358:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29368:	63737973 3f6c6c61 29312820 00000000     syscall? (1)....
   29378:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29388:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   29398:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   293a8:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   293b8:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   293c8:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   293d8:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   293e8:	696c6176 61762064 2065756c 20726f66     valid value for 
   293f8:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   29408:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   29418:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   29428:	726f6620 6a626f20 63746365 7373616c      for objectclass
   29438:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   29448:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   29458:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   29468:	726f6620 6a626f20 68746365 6c646e61      for objecthandl
   29478:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   29488:	6552203a 64726f63 6e207265 6920746f     : Recorder not i
   29498:	6974696e 7a696c61 202e6465 20657355     nitialized. Use 
   294a8:	61725476 6e456563 656c6261 69202928     vTraceEnable() i
   294b8:	6574736e 00216461 61747328 70757472     nstead!.(startup
   294c8:	00000029 43415254 53415f45 54524553     )...TRACE_ASSERT
   294d8:	5478203a 65636172 69676552 72657473     : xTraceRegister
   294e8:	69727453 203a676e 6562616c 3d3d206c     String: label ==
   294f8:	4c554e20 0000004c 43415254 53415f45      NULL...TRACE_AS
   29508:	54524553 6552203a 64726f63 6e207265     SERT: Recorder n
   29518:	6920746f 6974696e 7a696c61 202c6465     ot initialized, 
   29528:	6c6c6163 72547620 45656361 6c62616e     call vTraceEnabl
   29538:	20292865 73726966 00002174 454c4449     e() first!..IDLE
   29548:	00000000 00018cdc 00018cdc 00018cdc     ................
   29558:	00018c54 00018d1e 00018d38 00018cdc     T.......8.......
   29568:	00018cdc 00018c54 00018d1e 20726d54     ....T.......Tmr 
   29578:	00637653                                Svc.

0002957c <mmc_trans_multipliers>:
   2957c:	00000000 0000000a 0000000c 0000000d     ................
   2958c:	0000000f 00000014 0000001a 0000001e     ................
   2959c:	00000023 00000028 0000002d 00000034     #...(...-...4...
   295ac:	00000037 0000003c 00000046 00000050     7...<...F...P...

000295bc <sd_mmc_trans_units>:
   295bc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000295d8 <sd_trans_multipliers>:
   295d8:	00000000 0000000a 0000000c 0000000d     ................
   295e8:	0000000f 00000014 00000019 0000001e     ................
   295f8:	00000023 00000028 0000002d 00000032     #...(...-...2...
   29608:	00000037 0000003c 00000046 00000050     7...<...F...P...

00029618 <__FUNCTION__.17045>:
   29618:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   29628:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   29638:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   29648:	6320746c 000a646d 0000000d 0001add0     lt cmd..........
   29658:	0001ada0 0001ad98 0001adb0 0001ada8     ................
   29668:	0001adc8 0001adb8 0001adc0              ............

00029674 <__FUNCTION__.17913>:
   29674:	5f666968 646e6573 00000000              hif_send....

00029680 <__FUNCTION__.17923>:
   29680:	5f666968 00727369                       hif_isr.

00029688 <__FUNCTION__.17932>:
   29688:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00029698 <__FUNCTION__.17944>:
   29698:	5f666968 65636572 00657669              hif_receive.

000296a4 <__FUNCTION__.17960>:
   296a4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   296b4:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   296c4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   296d4:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   296e4:	73657264 75622073 61662073 000a6c69     dress bus fail..
   296f4:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   29704:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   29714:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   29724:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   29734:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   29744:	746f6e20 67657220 65747369 0a646572      not registered.
   29754:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   29764:	206b6361 6e207369 7220746f 73696765     ack is not regis
   29774:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   29784:	6b636162 20736920 20746f6e 69676572     back is not regi
   29794:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   297a4:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   297b4:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   297c4:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   297d4:	65722074 74736967 64657265 0000000a     t registered....
   297e4:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   297f4:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   29804:	61207473 64207070 276e6469 65732074     st app didn't se
   29814:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   29824:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   29834:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   29844:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   29854:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   29864:	6552206f 69206461 7265746e 74707572     o Read interrupt
   29874:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   29884:	74206c69 6168206f 656c646e 746e6920     il to handle int
   29894:	75727265 25207470 72742064 67412079     errupt %d try Ag
   298a4:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   298b4:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   298c4:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   298d4:	65747365 69532064 6920657a 616c2073     ested Size is la
   298e4:	72656772 61687420 6874206e 65722065     rger than the re
   298f4:	65766963 75622064 72656666 7a697320     cived buffer siz
   29904:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   29914:	20505041 75716552 65747365 64412064     APP Requested Ad
   29924:	73657264 65622073 646e6f79 65687420     dress beyond the
   29934:	63657220 64657669 66756220 20726566      recived buffer 
   29944:	72646461 20737365 20646e61 676e656c     address and leng
   29954:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   29964:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   29974:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   29984:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   29994:	74207075 63206568 0a706968 00000000     up the chip.....

000299a4 <__FUNCTION__.17895>:
   299a4:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000299b0 <__FUNCTION__.17924>:
   299b0:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000299c0 <__FUNCTION__.17955>:
   299c0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   299d0:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   299e0:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   299f0:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   29a00:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   29a10:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   29a20:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   29a30:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   29a40:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   29a50:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   29a60:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   29a70:	20706557 2079656b 676e656c 25206874     Wep key length %
   29a80:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   29a90:	656b204b 656c2079 6874676e 0000000a     K key length....
   29aa0:	65646e75 656e6966 65732064 79742063     undefined sec ty
   29ab0:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   29ac0:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   29ad0:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   29ae0:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   29af0:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   29b00:	6e694d20 69726420 20726576 20726576      Min driver ver 
   29b10:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   29b20:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   29b30:	0000000a 353a3131 31323a30 00000000     ....11:50:21....
   29b40:	2079614d 32203920 00313230 76697244     May  9 2021.Driv
   29b50:	62207265 746c6975 20746120 25097325     er built at %s.%
   29b60:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   29b70:	7277616d 65562065 6f697372 00000a6e     mawre Version...

00029b80 <__FUNCTION__.17752>:
   29b80:	70696863 6b61775f 00000065              chip_wake...

00029b8c <__FUNCTION__.17801>:
   29b8c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   29b9c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   29bac:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   29bbc:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   29bcc:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   29bdc:	20656874 70696863 0000000a 76697244     the chip....Driv
   29bec:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   29bfc:	000a786c                                lx..

00029c00 <__FUNCTION__.17799>:
   29c00:	645f6d6e 695f7672 0074696e              nm_drv_init.

00029c0c <__FUNCTION__.17806>:
   29c0c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   29c1c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   29c2c:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   29c3c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   29c4c:	73616c66 69642068 6c626173 61662065     flash disable fa
   29c5c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   29c6c:	6c696166 696e6920 75622074 00000a73     fail init bus...
   29c7c:	6c696166 74206465 6e65206f 656c6261     failed to enable
   29c8c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   29c9c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   29cac:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   29cbc:	20444920 0a786c25 00000000 0001bd4c      ID %lx.....L...
   29ccc:	0001bd4c 0001bd7c 0001bcfe 0001bd22     L...|......."...
   29cdc:	0001bd30 0001bd62 0001bd62 0001bdaa     0...b...b.......
   29cec:	0001bce2 0001bde0 0001bde0 0001bde0     ................
   29cfc:	0001bde0 0001bd3e 0001bfce 0001bfce     ....>...........
   29d0c:	0001c006 0001bf78 0001bf9e 0001bfae     ....x...........
   29d1c:	0001bfe8 0001bfe8 0001c040 0001bf54     ........@...T...
   29d2c:	0001c414 0001c414 0001c414 0001c414     ................
   29d3c:	0001bfbe cac4c9c3                       ........

00029d44 <__FUNCTION__.17074>:
   29d44:	5f697073 00646d63                       spi_cmd.

00029d4c <__FUNCTION__.17081>:
   29d4c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00029d5c <__FUNCTION__.17090>:
   29d5c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00029d68 <__FUNCTION__.17123>:
   29d68:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   29d78:	00000000                                ....

00029d7c <__FUNCTION__.17169>:
   29d7c:	5f697073 61746164 6972775f 00006574     spi_data_write..

00029d8c <__FUNCTION__.17181>:
   29d8c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00029d9c <__FUNCTION__.17192>:
   29d9c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00029dac <__FUNCTION__.17204>:
   29dac:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00029dbc <__FUNCTION__.17215>:
   29dbc:	735f6d6e 725f6970 00646165              nm_spi_read.

00029dc8 <__FUNCTION__.17236>:
   29dc8:	735f6d6e 695f6970 0074696e              nm_spi_init.

00029dd4 <crc7_syndrome_table>:
   29dd4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   29de4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   29df4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   29e04:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   29e14:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   29e24:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   29e34:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   29e44:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   29e54:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   29e64:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   29e74:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   29e84:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   29e94:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   29ea4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   29eb4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   29ec4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   29ed4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29ee4:	6e692064 6e726574 72206c61 20646165     d internal read 
   29ef4:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   29f04:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   29f14:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   29f24:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29f34:	6e692064 6e726574 72206c61 20646165     d internal read 
   29f44:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   29f54:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29f64:	6e692064 6e726574 77206c61 65746972     d internal write
   29f74:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   29f84:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   29f94:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   29fa4:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   29fb4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   29fc4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   29fd4:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   29fe4:	6e612074 65722064 20797274 25206425     t and retry %d %
   29ff4:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   2a004:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   2a014:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   2a024:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   2a034:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   2a044:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   2a054:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   2a064:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a074:	61642064 62206174 6b636f6c 69727720     d data block wri
   2a084:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   2a094:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a0a4:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2a0b4:	63726320 69727720 202c6574 20737562      crc write, bus 
   2a0c4:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   2a0d4:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   2a0e4:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   2a0f4:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2a104:	72206174 6f707365 2065736e 64616572     ta response read
   2a114:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   2a124:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   2a134:	206b636f 61746164 69727720 2e2e6574     ock data write..
   2a144:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a154:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   2a164:	73756220 72726520 2e2e726f 00000a2e      bus error......
   2a174:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   2a184:	65666675 69732072 7420657a 73206f6f     uffer size too s
   2a194:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   2a1a4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a1b4:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   2a1c4:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   2a1d4:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   2a1e4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   2a1f4:	74732064 20657461 70736572 65736e6f     d state response
   2a204:	61747320 28206574 78323025 00000a29      state (%02x)...
   2a214:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   2a224:	6164202c 72206174 20646165 70736572     , data read resp
   2a234:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   2a244:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2a254:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2a264:	69646165 6420676e 2e617461 0000000a     eading data.....
   2a274:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2a284:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2a294:	69646165 6320676e 0a2e6372 00000000     eading crc......
   2a2a4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a2b4:	61642064 62206174 6b636f6c 61657220     d data block rea
   2a2c4:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   2a2d4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a2e4:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2a2f4:	63726320 61657220 62202c64 65207375      crc read, bus e
   2a304:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   2a314:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2a324:	72206174 6f707365 2065736e 64616572     ta response read
   2a334:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   2a344:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a354:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   2a364:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   2a374:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a384:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   2a394:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   2a3a4:	65736552 6e612074 65722064 20797274     Reset and retry 
   2a3b4:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   2a3c4:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   2a3d4:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   2a3e4:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   2a3f4:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   2a404:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   2a414:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   2a424:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   2a434:	25207465 65732064 6f697373 4449206e     et %d session ID
   2a444:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   2a454:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   2a464:	0001ebe2 0001ebde 0001ebde 0001ec44     ............D...
   2a474:	0001ec44 0001ebf6 0001ebe8 0001ebfc     D...............
   2a484:	0001ec32 0001ed70 0001ed50 0001ed50     2...p...P...P...
   2a494:	0001eddc 0001ed62 0001ed7e 0001ed54     ....b...~...T...
   2a4a4:	0001ed8c 0001edcc                       ........

0002a4ac <_tcc_apbcmasks>:
   2a4ac:	00000100 00000200 00000400              ............

0002a4b8 <_tcc_cc_nums>:
   2a4b8:	00020204                                ....

0002a4bc <_tcc_gclk_ids>:
   2a4bc:	001b1a1a                                ....

0002a4c0 <_tcc_maxs>:
   2a4c0:	00ffffff 00ffffff 0000ffff              ............

0002a4cc <_tcc_ow_nums>:
   2a4cc:	00020408                                ....

0002a4d0 <_tcc_intflag>:
   2a4d0:	00000001 00000002 00000004 00000008     ................
   2a4e0:	00001000 00002000 00004000 00008000     ..... ...@......
   2a4f0:	00010000 00020000 00040000 00080000     ................

0002a500 <tcc_interrupt_vectors.12458>:
   2a500:	0011100f                                ....

0002a504 <LfnOfs>:
   2a504:	07050301 12100e09 1c181614 0000001e     ................

0002a514 <excvt.4558>:
   2a514:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   2a524:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   2a534:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   2a544:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   2a554:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2a564:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2a574:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2a584:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   2a594:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   2a5a4:	00005d5b                                []..

0002a5a8 <Tbl>:
   2a5a8:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   2a5b8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   2a5c8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   2a5d8:	00d600ff 00f800dc 00d800a3 019200d7     ................
   2a5e8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   2a5f8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   2a608:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   2a618:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   2a628:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   2a638:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   2a648:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   2a658:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   2a668:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   2a678:	00da00de 00d900db 00dd00fd 00b400af     ................
   2a688:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   2a698:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0002a6a8 <tbl_lower.4308>:
   2a6a8:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   2a6b8:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   2a6c8:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   2a6d8:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   2a6e8:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   2a6f8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   2a708:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   2a718:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   2a728:	01050103 01090107 010d010b 0111010f     ................
   2a738:	01150113 01190117 011d011b 0121011f     ..............!.
   2a748:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   2a758:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   2a768:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   2a778:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   2a788:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   2a798:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   2a7a8:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   2a7b8:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   2a7c8:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   2a7d8:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   2a7e8:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   2a7f8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   2a808:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   2a818:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   2a828:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   2a838:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   2a848:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   2a858:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   2a868:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   2a878:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0002a888 <tbl_upper.4309>:
   2a888:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   2a898:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   2a8a8:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   2a8b8:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   2a8c8:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   2a8d8:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   2a8e8:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   2a8f8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   2a908:	01040102 01080106 010c010a 0110010e     ................
   2a918:	01140112 01180116 011c011a 0120011e     .............. .
   2a928:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   2a938:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   2a948:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   2a958:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   2a968:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   2a978:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   2a988:	03940393 03960395 03980397 039a0399     ................
   2a998:	039c039b 039e039d 03a0039f 03a303a1     ................
   2a9a8:	03a503a4 03a703a6 03a903a8 041003aa     ................
   2a9b8:	04120411 04140413 04160415 04180417     ................
   2a9c8:	041a0419 041c041b 041e041d 0420041f     .............. .
   2a9d8:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   2a9e8:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   2a9f8:	04030402 04050404 04070406 04090408     ................
   2aa08:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   2aa18:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   2aa28:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   2aa38:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   2aa48:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   2aa58:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   2aa68:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2aa80:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2aac0:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2aad8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2ab18:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   2ab28:	00023b16 00023b10 00023b0a 00023b04     .;...;...;...;..
   2ab38:	00023b1c 00023b24 00023b1c 00023afe     .;..$;...;...:..
   2ab48:	00023af8 00023b1c 00023af2 00023af2     .:...;...:...:..
   2ab58:	00023aec 00023ae6 00023b24 00023b8e     .:...:..$;...;..
   2ab68:	00023b88 00023b82 00023b7c 00023b94     .;...;..|;...;..
   2ab78:	00023b9c 00023b94 00023b76 00023b70     .;...;..v;..p;..
   2ab88:	00023b94 00023b6a 00023b6a 00023b64     .;..j;..j;..d;..
   2ab98:	00023b5e 00023b9c 00023c08 00023c02     ^;...;...<...<..
   2aba8:	00023bfc 00023bf6 00023c0e 00023c0e     .;...;...<...<..
   2abb8:	00023c0e 00023bf0 00023bea 00023c0e     .<...;...;...<..
   2abc8:	00023be4 00023be4 00023bde 00023bd8     .;...;...;...;..
   2abd8:	33323130 37363534 62613938 66656463     0123456789abcdef
   2abe8:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   2abf8:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   2ac08:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   2ac18:	20544547 00000000 54534f50 00000020     GET ....POST ...
   2ac28:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   2ac38:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   2ac48:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   2ac58:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   2ac68:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   2ac78:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   2ac88:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   2ac98:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   2aca8:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   2acb8:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   2acc8:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   2acd8:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   2ace8:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   2acf8:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   2ad08:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   2ad18:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   2ad28:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   2ad38:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   2ad48:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   2ad58:	6f727245 6e692072 61697469 697a696c     Error initializi
   2ad68:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   2ad78:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   2ad88:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   2ad98:	6f727245 6e692072 61697469 697a696c     Error initializi
   2ada8:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   2adb8:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   2adc8:	0d217761 0000000a 70616548 66656220     aw!.....Heap bef
   2add8:	2065726f 72617473 676e6974 73617420     ore starting tas
   2ade8:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
   2adf8:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
   2ae08:	73617420 6f63206b 20646c75 20746f6e      task could not 
   2ae18:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   2ae28:	0000000a 70616548 74666120 73207265     ....Heap after s
   2ae38:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
   2ae48:	0000000a 49464957 5341545f 0000004b     ....WIFI_TASK...
   2ae58:	3a525245 46495720 61742049 63206b73     ERR: WIFI task c
   2ae68:	646c756f 746f6e20 20656220 74696e69     ould not be init
   2ae78:	696c6169 2164657a 00000a0d 70616548     ialized!....Heap
   2ae88:	74666120 73207265 74726174 20676e69      after starting 
   2ae98:	49464957 6425203a 00000a0d 746e6f43     WIFI: %d....Cont
   2aea8:	206c6f72 6b736154 00000000 3a525245     rol Task....ERR:
   2aeb8:	6e6f4320 6c6f7274 73617420 6f63206b      Control task co
   2aec8:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   2aed8:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   2aee8:	74666120 73207265 74726174 20676e69      after starting 
   2aef8:	746e6f43 206c6f72 6b736154 6425203a     Control Task: %d
   2af08:	00000a0d 6f727245 6e6f2072 6d656d20     ....Error on mem
   2af18:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
   2af28:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
   2af38:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
   2af48:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
   2af58:	21534f54 00000a0d 00024504 000244d4     TOS!.....E...D..
   2af68:	000244e6 00024428 000244e6 000244ca     .D..(D...D...D..
   2af78:	000244e6 00024428 000244d4 000244d4     .D..(D...D...D..
   2af88:	000244ca 00024428 00024430 00024430     .D..(D..0D..0D..
   2af98:	00024430 000244ec 000244d4 000244d4     0D...D...D...D..
   2afa8:	000244a8 0002458c 000244a8 000244ca     .D...E...D...D..
   2afb8:	000244a8 0002458c 000244d4 000244d4     .D...E...D...D..
   2afc8:	000244ca 0002458c 00024430 00024430     .D...E..0D..0D..
   2afd8:	00024430 00024596 00024734 00024684     0D...E..4G...F..
   2afe8:	00024684 00024682 00024726 00024726     .F...F..&G..&G..
   2aff8:	0002471c 00024682 00024726 0002471c     .G...F..&G...G..
   2b008:	00024726 00024682 0002472c 0002472c     &G...F..,G..,G..
   2b018:	0002472c 000247bc 00025140 00025122     ,G...G..@Q.."Q..
   2b028:	000250dc 00024ffa 000250dc 00025114     .P...O...P...Q..
   2b038:	000250dc 00024ffa 00025122 00025122     .P...O.."Q.."Q..
   2b048:	00025114 00024ffa 00024ff2 00024ff2     .Q...O...O...O..
   2b058:	00024ff2 00025358 000257a0 00025660     .O..XS...W..`V..
   2b068:	00025660 0002565c 00025778 00025778     `V..\V..xW..xW..
   2b078:	0002576a 0002565c 00025778 0002576a     jW..\V..xW..jW..
   2b088:	00025778 0002565c 00025780 00025780     xW..\V...W...W..
   2b098:	00025780 00025984                       .W...Y..

0002b0a0 <_global_impure_ptr>:
   2b0a0:	200000e0                                ... 

0002b0a4 <__sf_fake_stderr>:
	...

0002b0c4 <__sf_fake_stdin>:
	...

0002b0e4 <__sf_fake_stdout>:
	...
   2b104:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   2b114:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   2b124:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   2b134:	37363534 62613938 66656463 20200000              456789abcdef.

0002b141 <_ctype_>:
   2b141:	20202000 20202020 28282020 20282828     .         ((((( 
   2b151:	20202020 20202020 20202020 20202020                     
   2b161:	10108820 10101010 10101010 10101010      ...............
   2b171:	04040410 04040404 10040404 10101010     ................
   2b181:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2b191:	01010101 01010101 01010101 10101010     ................
   2b1a1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2b1b1:	02020202 02020202 02020202 10101010     ................
   2b1c1:	00000020 00000000 00000000 00000000      ...............
	...

0002b244 <_init>:
   2b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b246:	46c0      	nop			; (mov r8, r8)
   2b248:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b24a:	bc08      	pop	{r3}
   2b24c:	469e      	mov	lr, r3
   2b24e:	4770      	bx	lr

0002b250 <__init_array_start>:
   2b250:	000120dd 	.word	0x000120dd

0002b254 <_fini>:
   2b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b256:	46c0      	nop			; (mov r8, r8)
   2b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b25a:	bc08      	pop	{r3}
   2b25c:	469e      	mov	lr, r3
   2b25e:	4770      	bx	lr

0002b260 <__fini_array_start>:
   2b260:	000120b5 	.word	0x000120b5
