
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cdd8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000cdd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c44  20000094  0000ce6c  00020094  2**2
                  ALLOC
  3 .stack        00002000  20000cd8  0000dab0  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004adcb  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005ce7  00000000  00000000  0006aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a07  00000000  00000000  00070bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001050  00000000  00000000  000765ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e40  00000000  00000000  0007761e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020f17  00000000  00000000  0007845e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017c1c  00000000  00000000  00099375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093d5a  00000000  00000000  000b0f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003e2c  00000000  00000000  00144cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 2c 00 20 79 69 00 00 71 6a 00 00 71 6a 00 00     .,. yi..qj..qj..
	...
      2c:	71 6a 00 00 00 00 00 00 00 00 00 00 71 6a 00 00     qj..........qj..
      3c:	e5 01 00 00 71 6a 00 00 71 6a 00 00 71 6a 00 00     ....qj..qj..qj..
      4c:	71 6a 00 00 71 6a 00 00 71 6a 00 00 71 6a 00 00     qj..qj..qj..qj..
      5c:	71 6a 00 00 71 6a 00 00 05 3c 00 00 1d 3c 00 00     qj..qj...<...<..
      6c:	35 3c 00 00 4d 3c 00 00 65 3c 00 00 7d 3c 00 00     5<..M<..e<..}<..
      7c:	71 6a 00 00 71 6a 00 00 71 6a 00 00 71 6a 00 00     qj..qj..qj..qj..
      8c:	71 6a 00 00 71 6a 00 00 00 00 00 00 00 00 00 00     qj..qj..........
      9c:	71 6a 00 00 71 6a 00 00 71 6a 00 00 71 6a 00 00     qj..qj..qj..qj..
      ac:	71 6a 00 00 00 00 00 00                             qj......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000cdd8 	.word	0x0000cdd8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	0000cdd8 	.word	0x0000cdd8
     10c:	0000cdd8 	.word	0x0000cdd8
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	0000652d 	.word	0x0000652d
     190:	20000000 	.word	0x20000000
     194:	0000afc5 	.word	0x0000afc5
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000b0 	.word	0x200000b0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000b0 	.word	0x200000b0

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	00003035 	.word	0x00003035
     344:	000002a5 	.word	0x000002a5

00000348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <nvm_is_ready+0x24>)
     350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     352:	687b      	ldr	r3, [r7, #4]
     354:	7d1b      	ldrb	r3, [r3, #20]
     356:	b2db      	uxtb	r3, r3
     358:	001a      	movs	r2, r3
     35a:	2301      	movs	r3, #1
     35c:	4013      	ands	r3, r2
     35e:	1e5a      	subs	r2, r3, #1
     360:	4193      	sbcs	r3, r2
     362:	b2db      	uxtb	r3, r3
}
     364:	0018      	movs	r0, r3
     366:	46bd      	mov	sp, r7
     368:	b002      	add	sp, #8
     36a:	bd80      	pop	{r7, pc}
     36c:	41004000 	.word	0x41004000

00000370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     370:	b580      	push	{r7, lr}
     372:	b082      	sub	sp, #8
     374:	af00      	add	r7, sp, #0
     376:	0002      	movs	r2, r0
     378:	6039      	str	r1, [r7, #0]
     37a:	1dfb      	adds	r3, r7, #7
     37c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
     382:	2b01      	cmp	r3, #1
     384:	d00a      	beq.n	39c <system_apb_clock_set_mask+0x2c>
     386:	2b02      	cmp	r3, #2
     388:	d00f      	beq.n	3aa <system_apb_clock_set_mask+0x3a>
     38a:	2b00      	cmp	r3, #0
     38c:	d114      	bne.n	3b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     38e:	4b0e      	ldr	r3, [pc, #56]	; (3c8 <system_apb_clock_set_mask+0x58>)
     390:	4a0d      	ldr	r2, [pc, #52]	; (3c8 <system_apb_clock_set_mask+0x58>)
     392:	6991      	ldr	r1, [r2, #24]
     394:	683a      	ldr	r2, [r7, #0]
     396:	430a      	orrs	r2, r1
     398:	619a      	str	r2, [r3, #24]
			break;
     39a:	e00f      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     39e:	4a0a      	ldr	r2, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3a0:	69d1      	ldr	r1, [r2, #28]
     3a2:	683a      	ldr	r2, [r7, #0]
     3a4:	430a      	orrs	r2, r1
     3a6:	61da      	str	r2, [r3, #28]
			break;
     3a8:	e008      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3aa:	4b07      	ldr	r3, [pc, #28]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ac:	4a06      	ldr	r2, [pc, #24]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ae:	6a11      	ldr	r1, [r2, #32]
     3b0:	683a      	ldr	r2, [r7, #0]
     3b2:	430a      	orrs	r2, r1
     3b4:	621a      	str	r2, [r3, #32]
			break;
     3b6:	e001      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     3b8:	2317      	movs	r3, #23
     3ba:	e000      	b.n	3be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     3bc:	2300      	movs	r3, #0
}
     3be:	0018      	movs	r0, r3
     3c0:	46bd      	mov	sp, r7
     3c2:	b002      	add	sp, #8
     3c4:	bd80      	pop	{r7, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	40000400 	.word	0x40000400

000003cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b084      	sub	sp, #16
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3d4:	4b2f      	ldr	r3, [pc, #188]	; (494 <nvm_set_config+0xc8>)
     3d6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     3d8:	2104      	movs	r1, #4
     3da:	2001      	movs	r0, #1
     3dc:	4b2e      	ldr	r3, [pc, #184]	; (498 <nvm_set_config+0xcc>)
     3de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3e0:	68fb      	ldr	r3, [r7, #12]
     3e2:	2220      	movs	r2, #32
     3e4:	32ff      	adds	r2, #255	; 0xff
     3e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3e8:	4b2c      	ldr	r3, [pc, #176]	; (49c <nvm_set_config+0xd0>)
     3ea:	4798      	blx	r3
     3ec:	0003      	movs	r3, r0
     3ee:	001a      	movs	r2, r3
     3f0:	2301      	movs	r3, #1
     3f2:	4053      	eors	r3, r2
     3f4:	b2db      	uxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	d001      	beq.n	3fe <nvm_set_config+0x32>
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e045      	b.n	48a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	021b      	lsls	r3, r3, #8
     404:	001a      	movs	r2, r3
     406:	23c0      	movs	r3, #192	; 0xc0
     408:	009b      	lsls	r3, r3, #2
     40a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	785b      	ldrb	r3, [r3, #1]
     410:	01db      	lsls	r3, r3, #7
     412:	0019      	movs	r1, r3
     414:	23ff      	movs	r3, #255	; 0xff
     416:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     418:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	789b      	ldrb	r3, [r3, #2]
     41e:	005b      	lsls	r3, r3, #1
     420:	0019      	movs	r1, r3
     422:	231e      	movs	r3, #30
     424:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     426:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     428:	687b      	ldr	r3, [r7, #4]
     42a:	78db      	ldrb	r3, [r3, #3]
     42c:	049b      	lsls	r3, r3, #18
     42e:	0019      	movs	r1, r3
     430:	2380      	movs	r3, #128	; 0x80
     432:	02db      	lsls	r3, r3, #11
     434:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     436:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     438:	687b      	ldr	r3, [r7, #4]
     43a:	791b      	ldrb	r3, [r3, #4]
     43c:	041b      	lsls	r3, r3, #16
     43e:	0019      	movs	r1, r3
     440:	23c0      	movs	r3, #192	; 0xc0
     442:	029b      	lsls	r3, r3, #10
     444:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     446:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     448:	68fb      	ldr	r3, [r7, #12]
     44a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	689b      	ldr	r3, [r3, #8]
     450:	035b      	lsls	r3, r3, #13
     452:	0f5b      	lsrs	r3, r3, #29
     454:	b2db      	uxtb	r3, r3
     456:	001a      	movs	r2, r3
     458:	2308      	movs	r3, #8
     45a:	4093      	lsls	r3, r2
     45c:	b29a      	uxth	r2, r3
     45e:	4b10      	ldr	r3, [pc, #64]	; (4a0 <nvm_set_config+0xd4>)
     460:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     462:	68fb      	ldr	r3, [r7, #12]
     464:	689b      	ldr	r3, [r3, #8]
     466:	b29a      	uxth	r2, r3
     468:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nvm_set_config+0xd4>)
     46a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	785a      	ldrb	r2, [r3, #1]
     470:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <nvm_set_config+0xd4>)
     472:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     474:	68fb      	ldr	r3, [r7, #12]
     476:	8b1b      	ldrh	r3, [r3, #24]
     478:	b29b      	uxth	r3, r3
     47a:	001a      	movs	r2, r3
     47c:	2380      	movs	r3, #128	; 0x80
     47e:	005b      	lsls	r3, r3, #1
     480:	4013      	ands	r3, r2
     482:	d001      	beq.n	488 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     484:	2310      	movs	r3, #16
     486:	e000      	b.n	48a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     488:	2300      	movs	r3, #0
}
     48a:	0018      	movs	r0, r3
     48c:	46bd      	mov	sp, r7
     48e:	b004      	add	sp, #16
     490:	bd80      	pop	{r7, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	41004000 	.word	0x41004000
     498:	00000371 	.word	0x00000371
     49c:	00000349 	.word	0x00000349
     4a0:	200000b4 	.word	0x200000b4

000004a4 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b086      	sub	sp, #24
     4a8:	af00      	add	r7, sp, #0
     4aa:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4ac:	4b2a      	ldr	r3, [pc, #168]	; (558 <nvm_get_parameters+0xb4>)
     4ae:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4b0:	697b      	ldr	r3, [r7, #20]
     4b2:	2220      	movs	r2, #32
     4b4:	32ff      	adds	r2, #255	; 0xff
     4b6:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     4b8:	697b      	ldr	r3, [r7, #20]
     4ba:	689b      	ldr	r3, [r3, #8]
     4bc:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     4be:	693b      	ldr	r3, [r7, #16]
     4c0:	0c1b      	lsrs	r3, r3, #16
     4c2:	2207      	movs	r2, #7
     4c4:	4013      	ands	r3, r2
     4c6:	2208      	movs	r2, #8
     4c8:	409a      	lsls	r2, r3
     4ca:	0013      	movs	r3, r2
	parameters->page_size =
     4cc:	b2da      	uxtb	r2, r3
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     4d2:	693b      	ldr	r3, [r7, #16]
     4d4:	b29a      	uxth	r2, r3
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     4da:	4b20      	ldr	r3, [pc, #128]	; (55c <nvm_get_parameters+0xb8>)
     4dc:	881b      	ldrh	r3, [r3, #0]
     4de:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
     4e0:	091b      	lsrs	r3, r3, #4
     4e2:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
     4e4:	230e      	movs	r3, #14
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	2107      	movs	r1, #7
     4ea:	400a      	ands	r2, r1
     4ec:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     4ee:	230e      	movs	r3, #14
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	881b      	ldrh	r3, [r3, #0]
     4f4:	2b07      	cmp	r3, #7
     4f6:	d103      	bne.n	500 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	2200      	movs	r2, #0
     4fc:	605a      	str	r2, [r3, #4]
     4fe:	e00a      	b.n	516 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     500:	230e      	movs	r3, #14
     502:	18fb      	adds	r3, r7, r3
     504:	881b      	ldrh	r3, [r3, #0]
     506:	2206      	movs	r2, #6
     508:	1ad3      	subs	r3, r2, r3
     50a:	2204      	movs	r2, #4
     50c:	409a      	lsls	r2, r3
     50e:	0013      	movs	r3, r2
     510:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
     512:	687b      	ldr	r3, [r7, #4]
     514:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     516:	4b11      	ldr	r3, [pc, #68]	; (55c <nvm_get_parameters+0xb8>)
     518:	881b      	ldrh	r3, [r3, #0]
     51a:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
     51c:	230c      	movs	r3, #12
     51e:	18fb      	adds	r3, r7, r3
     520:	2107      	movs	r1, #7
     522:	400a      	ands	r2, r1
     524:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     526:	230c      	movs	r3, #12
     528:	18fb      	adds	r3, r7, r3
     52a:	881b      	ldrh	r3, [r3, #0]
     52c:	2b07      	cmp	r3, #7
     52e:	d103      	bne.n	538 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
     530:	687b      	ldr	r3, [r7, #4]
     532:	2200      	movs	r2, #0
     534:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
     536:	e00a      	b.n	54e <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     538:	230c      	movs	r3, #12
     53a:	18fb      	adds	r3, r7, r3
     53c:	881b      	ldrh	r3, [r3, #0]
     53e:	2207      	movs	r2, #7
     540:	1ad3      	subs	r3, r2, r3
     542:	2204      	movs	r2, #4
     544:	409a      	lsls	r2, r3
     546:	0013      	movs	r3, r2
     548:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	609a      	str	r2, [r3, #8]
}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	46bd      	mov	sp, r7
     552:	b006      	add	sp, #24
     554:	bd80      	pop	{r7, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	41004000 	.word	0x41004000
     55c:	00804000 	.word	0x00804000

00000560 <SdCard_Initiate>:
     560:	b590      	push	{r4, r7, lr}
     562:	b083      	sub	sp, #12
     564:	af00      	add	r7, sp, #0
     566:	4b16      	ldr	r3, [pc, #88]	; (5c0 <SdCard_Initiate+0x60>)
     568:	4798      	blx	r3
     56a:	0003      	movs	r3, r0
     56c:	603b      	str	r3, [r7, #0]
     56e:	1dfc      	adds	r4, r7, #7
     570:	2000      	movs	r0, #0
     572:	4b14      	ldr	r3, [pc, #80]	; (5c4 <SdCard_Initiate+0x64>)
     574:	4798      	blx	r3
     576:	0003      	movs	r3, r0
     578:	7023      	strb	r3, [r4, #0]
     57a:	1dfb      	adds	r3, r7, #7
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	2b01      	cmp	r3, #1
     580:	d106      	bne.n	590 <SdCard_Initiate+0x30>
     582:	46c0      	nop			; (mov r8, r8)
     584:	2000      	movs	r0, #0
     586:	4b10      	ldr	r3, [pc, #64]	; (5c8 <SdCard_Initiate+0x68>)
     588:	4798      	blx	r3
     58a:	0003      	movs	r3, r0
     58c:	2b02      	cmp	r3, #2
     58e:	d1f9      	bne.n	584 <SdCard_Initiate+0x24>
     590:	4b0b      	ldr	r3, [pc, #44]	; (5c0 <SdCard_Initiate+0x60>)
     592:	4798      	blx	r3
     594:	0002      	movs	r2, r0
     596:	683b      	ldr	r3, [r7, #0]
     598:	1ad2      	subs	r2, r2, r3
     59a:	23fa      	movs	r3, #250	; 0xfa
     59c:	005b      	lsls	r3, r3, #1
     59e:	429a      	cmp	r2, r3
     5a0:	d903      	bls.n	5aa <SdCard_Initiate+0x4a>
     5a2:	1dfb      	adds	r3, r7, #7
     5a4:	2201      	movs	r2, #1
     5a6:	701a      	strb	r2, [r3, #0]
     5a8:	e003      	b.n	5b2 <SdCard_Initiate+0x52>
     5aa:	1dfb      	adds	r3, r7, #7
     5ac:	781b      	ldrb	r3, [r3, #0]
     5ae:	2b00      	cmp	r3, #0
     5b0:	d1dd      	bne.n	56e <SdCard_Initiate+0xe>
     5b2:	1dfb      	adds	r3, r7, #7
     5b4:	781b      	ldrb	r3, [r3, #0]
     5b6:	0018      	movs	r0, r3
     5b8:	46bd      	mov	sp, r7
     5ba:	b003      	add	sp, #12
     5bc:	bd90      	pop	{r4, r7, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	000001d1 	.word	0x000001d1
     5c4:	00001e69 	.word	0x00001e69
     5c8:	000019dd 	.word	0x000019dd

000005cc <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     5cc:	b580      	push	{r7, lr}
     5ce:	b082      	sub	sp, #8
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	7c1b      	ldrb	r3, [r3, #16]
     5d8:	2b00      	cmp	r3, #0
     5da:	d00b      	beq.n	5f4 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	689b      	ldr	r3, [r3, #8]
     5e0:	1c5a      	adds	r2, r3, #1
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	68d9      	ldr	r1, [r3, #12]
     5e6:	4b10      	ldr	r3, [pc, #64]	; (628 <advance_pointer+0x5c>)
     5e8:	0010      	movs	r0, r2
     5ea:	4798      	blx	r3
     5ec:	000b      	movs	r3, r1
     5ee:	001a      	movs	r2, r3
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	1c5a      	adds	r2, r3, #1
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	68d9      	ldr	r1, [r3, #12]
     5fe:	4b0a      	ldr	r3, [pc, #40]	; (628 <advance_pointer+0x5c>)
     600:	0010      	movs	r0, r2
     602:	4798      	blx	r3
     604:	000b      	movs	r3, r1
     606:	001a      	movs	r2, r3
     608:	687b      	ldr	r3, [r7, #4]
     60a:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	685a      	ldr	r2, [r3, #4]
     610:	687b      	ldr	r3, [r7, #4]
     612:	689b      	ldr	r3, [r3, #8]
     614:	1ad3      	subs	r3, r2, r3
     616:	425a      	negs	r2, r3
     618:	4153      	adcs	r3, r2
     61a:	b2da      	uxtb	r2, r3
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	741a      	strb	r2, [r3, #16]
 }
     620:	46c0      	nop			; (mov r8, r8)
     622:	46bd      	mov	sp, r7
     624:	b002      	add	sp, #8
     626:	bd80      	pop	{r7, pc}
     628:	0000b0d1 	.word	0x0000b0d1

0000062c <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     62c:	b580      	push	{r7, lr}
     62e:	b082      	sub	sp, #8
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     634:	687b      	ldr	r3, [r7, #4]
     636:	2200      	movs	r2, #0
     638:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	689b      	ldr	r3, [r3, #8]
     63e:	1c5a      	adds	r2, r3, #1
     640:	687b      	ldr	r3, [r7, #4]
     642:	68d9      	ldr	r1, [r3, #12]
     644:	4b05      	ldr	r3, [pc, #20]	; (65c <retreat_pointer+0x30>)
     646:	0010      	movs	r0, r2
     648:	4798      	blx	r3
     64a:	000b      	movs	r3, r1
     64c:	001a      	movs	r2, r3
     64e:	687b      	ldr	r3, [r7, #4]
     650:	609a      	str	r2, [r3, #8]
 }
     652:	46c0      	nop			; (mov r8, r8)
     654:	46bd      	mov	sp, r7
     656:	b002      	add	sp, #8
     658:	bd80      	pop	{r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	0000b0d1 	.word	0x0000b0d1

00000660 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     660:	b580      	push	{r7, lr}
     662:	b084      	sub	sp, #16
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
     668:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     66a:	2014      	movs	r0, #20
     66c:	4b09      	ldr	r3, [pc, #36]	; (694 <circular_buf_init+0x34>)
     66e:	4798      	blx	r3
     670:	0003      	movs	r3, r0
     672:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     674:	68fb      	ldr	r3, [r7, #12]
     676:	687a      	ldr	r2, [r7, #4]
     678:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     67a:	68fb      	ldr	r3, [r7, #12]
     67c:	683a      	ldr	r2, [r7, #0]
     67e:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     680:	68fb      	ldr	r3, [r7, #12]
     682:	0018      	movs	r0, r3
     684:	4b04      	ldr	r3, [pc, #16]	; (698 <circular_buf_init+0x38>)
     686:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     688:	68fb      	ldr	r3, [r7, #12]
 }
     68a:	0018      	movs	r0, r3
     68c:	46bd      	mov	sp, r7
     68e:	b004      	add	sp, #16
     690:	bd80      	pop	{r7, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	0000b34d 	.word	0x0000b34d
     698:	0000069d 	.word	0x0000069d

0000069c <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     69c:	b580      	push	{r7, lr}
     69e:	b082      	sub	sp, #8
     6a0:	af00      	add	r7, sp, #0
     6a2:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	2200      	movs	r2, #0
     6a8:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	2200      	movs	r2, #0
     6ae:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	2200      	movs	r2, #0
     6b4:	741a      	strb	r2, [r3, #16]
 }
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	46bd      	mov	sp, r7
     6ba:	b002      	add	sp, #8
     6bc:	bd80      	pop	{r7, pc}
	...

000006c0 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
     6c8:	000a      	movs	r2, r1
     6ca:	1cfb      	adds	r3, r7, #3
     6cc:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	681a      	ldr	r2, [r3, #0]
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	685b      	ldr	r3, [r3, #4]
     6d6:	18d3      	adds	r3, r2, r3
     6d8:	1cfa      	adds	r2, r7, #3
     6da:	7812      	ldrb	r2, [r2, #0]
     6dc:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	0018      	movs	r0, r3
     6e2:	4b03      	ldr	r3, [pc, #12]	; (6f0 <circular_buf_put+0x30>)
     6e4:	4798      	blx	r3
 }
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	46bd      	mov	sp, r7
     6ea:	b002      	add	sp, #8
     6ec:	bd80      	pop	{r7, pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	000005cd 	.word	0x000005cd

000006f4 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     6f4:	b580      	push	{r7, lr}
     6f6:	b084      	sub	sp, #16
     6f8:	af00      	add	r7, sp, #0
     6fa:	6078      	str	r0, [r7, #4]
     6fc:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     6fe:	2301      	movs	r3, #1
     700:	425b      	negs	r3, r3
     702:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     704:	687b      	ldr	r3, [r7, #4]
     706:	0018      	movs	r0, r3
     708:	4b0d      	ldr	r3, [pc, #52]	; (740 <circular_buf_get+0x4c>)
     70a:	4798      	blx	r3
     70c:	0003      	movs	r3, r0
     70e:	001a      	movs	r2, r3
     710:	2301      	movs	r3, #1
     712:	4053      	eors	r3, r2
     714:	b2db      	uxtb	r3, r3
     716:	2b00      	cmp	r3, #0
     718:	d00d      	beq.n	736 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	681a      	ldr	r2, [r3, #0]
     71e:	687b      	ldr	r3, [r7, #4]
     720:	689b      	ldr	r3, [r3, #8]
     722:	18d3      	adds	r3, r2, r3
     724:	781a      	ldrb	r2, [r3, #0]
     726:	683b      	ldr	r3, [r7, #0]
     728:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	0018      	movs	r0, r3
     72e:	4b05      	ldr	r3, [pc, #20]	; (744 <circular_buf_get+0x50>)
     730:	4798      	blx	r3

		 r = 0;
     732:	2300      	movs	r3, #0
     734:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     736:	68fb      	ldr	r3, [r7, #12]
 }
     738:	0018      	movs	r0, r3
     73a:	46bd      	mov	sp, r7
     73c:	b004      	add	sp, #16
     73e:	bd80      	pop	{r7, pc}
     740:	00000749 	.word	0x00000749
     744:	0000062d 	.word	0x0000062d

00000748 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     750:	687b      	ldr	r3, [r7, #4]
     752:	7c1b      	ldrb	r3, [r3, #16]
     754:	2201      	movs	r2, #1
     756:	4053      	eors	r3, r2
     758:	b2db      	uxtb	r3, r3
     75a:	2b00      	cmp	r3, #0
     75c:	d007      	beq.n	76e <circular_buf_empty+0x26>
     75e:	687b      	ldr	r3, [r7, #4]
     760:	685a      	ldr	r2, [r3, #4]
     762:	687b      	ldr	r3, [r7, #4]
     764:	689b      	ldr	r3, [r3, #8]
     766:	429a      	cmp	r2, r3
     768:	d101      	bne.n	76e <circular_buf_empty+0x26>
     76a:	2301      	movs	r3, #1
     76c:	e000      	b.n	770 <circular_buf_empty+0x28>
     76e:	2300      	movs	r3, #0
     770:	1c1a      	adds	r2, r3, #0
     772:	2301      	movs	r3, #1
     774:	4013      	ands	r3, r2
     776:	b2db      	uxtb	r3, r3
 }
     778:	0018      	movs	r0, r3
     77a:	46bd      	mov	sp, r7
     77c:	b002      	add	sp, #8
     77e:	bd80      	pop	{r7, pc}

00000780 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     780:	b580      	push	{r7, lr}
     782:	b082      	sub	sp, #8
     784:	af00      	add	r7, sp, #0
     786:	0002      	movs	r2, r0
     788:	1dfb      	adds	r3, r7, #7
     78a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     78c:	4b06      	ldr	r3, [pc, #24]	; (7a8 <system_interrupt_enable+0x28>)
     78e:	1dfa      	adds	r2, r7, #7
     790:	7812      	ldrb	r2, [r2, #0]
     792:	0011      	movs	r1, r2
     794:	221f      	movs	r2, #31
     796:	400a      	ands	r2, r1
     798:	2101      	movs	r1, #1
     79a:	4091      	lsls	r1, r2
     79c:	000a      	movs	r2, r1
     79e:	601a      	str	r2, [r3, #0]
}
     7a0:	46c0      	nop			; (mov r8, r8)
     7a2:	46bd      	mov	sp, r7
     7a4:	b002      	add	sp, #8
     7a6:	bd80      	pop	{r7, pc}
     7a8:	e000e100 	.word	0xe000e100

000007ac <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     7ac:	b580      	push	{r7, lr}
     7ae:	b082      	sub	sp, #8
     7b0:	af00      	add	r7, sp, #0
     7b2:	0002      	movs	r2, r0
     7b4:	1dfb      	adds	r3, r7, #7
     7b6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7b8:	4a07      	ldr	r2, [pc, #28]	; (7d8 <system_interrupt_disable+0x2c>)
     7ba:	1dfb      	adds	r3, r7, #7
     7bc:	781b      	ldrb	r3, [r3, #0]
     7be:	0019      	movs	r1, r3
     7c0:	231f      	movs	r3, #31
     7c2:	400b      	ands	r3, r1
     7c4:	2101      	movs	r1, #1
     7c6:	4099      	lsls	r1, r3
     7c8:	000b      	movs	r3, r1
     7ca:	0019      	movs	r1, r3
     7cc:	2380      	movs	r3, #128	; 0x80
     7ce:	50d1      	str	r1, [r2, r3]
}
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	46bd      	mov	sp, r7
     7d4:	b002      	add	sp, #8
     7d6:	bd80      	pop	{r7, pc}
     7d8:	e000e100 	.word	0xe000e100

000007dc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b084      	sub	sp, #16
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	681b      	ldr	r3, [r3, #0]
     7e8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7ea:	68fb      	ldr	r3, [r7, #12]
     7ec:	69db      	ldr	r3, [r3, #28]
     7ee:	1e5a      	subs	r2, r3, #1
     7f0:	4193      	sbcs	r3, r2
     7f2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     7f4:	0018      	movs	r0, r3
     7f6:	46bd      	mov	sp, r7
     7f8:	b004      	add	sp, #16
     7fa:	bd80      	pop	{r7, pc}

000007fc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     7fc:	b580      	push	{r7, lr}
     7fe:	b082      	sub	sp, #8
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     804:	46c0      	nop			; (mov r8, r8)
     806:	687b      	ldr	r3, [r7, #4]
     808:	0018      	movs	r0, r3
     80a:	4b04      	ldr	r3, [pc, #16]	; (81c <_usart_wait_for_sync+0x20>)
     80c:	4798      	blx	r3
     80e:	1e03      	subs	r3, r0, #0
     810:	d1f9      	bne.n	806 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     812:	46c0      	nop			; (mov r8, r8)
     814:	46bd      	mov	sp, r7
     816:	b002      	add	sp, #8
     818:	bd80      	pop	{r7, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	000007dd 	.word	0x000007dd

00000820 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     820:	b580      	push	{r7, lr}
     822:	b082      	sub	sp, #8
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     828:	687b      	ldr	r3, [r7, #4]
     82a:	2280      	movs	r2, #128	; 0x80
     82c:	05d2      	lsls	r2, r2, #23
     82e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     830:	687b      	ldr	r3, [r7, #4]
     832:	2200      	movs	r2, #0
     834:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     836:	687b      	ldr	r3, [r7, #4]
     838:	22ff      	movs	r2, #255	; 0xff
     83a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	2200      	movs	r2, #0
     840:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     842:	687b      	ldr	r3, [r7, #4]
     844:	2200      	movs	r2, #0
     846:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     848:	687b      	ldr	r3, [r7, #4]
     84a:	2296      	movs	r2, #150	; 0x96
     84c:	0192      	lsls	r2, r2, #6
     84e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     850:	687b      	ldr	r3, [r7, #4]
     852:	2224      	movs	r2, #36	; 0x24
     854:	2101      	movs	r1, #1
     856:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	2225      	movs	r2, #37	; 0x25
     85c:	2101      	movs	r1, #1
     85e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     860:	687b      	ldr	r3, [r7, #4]
     862:	2226      	movs	r2, #38	; 0x26
     864:	2100      	movs	r1, #0
     866:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     868:	687b      	ldr	r3, [r7, #4]
     86a:	2227      	movs	r2, #39	; 0x27
     86c:	2100      	movs	r1, #0
     86e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     870:	687b      	ldr	r3, [r7, #4]
     872:	2200      	movs	r2, #0
     874:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     876:	687b      	ldr	r3, [r7, #4]
     878:	2288      	movs	r2, #136	; 0x88
     87a:	0352      	lsls	r2, r2, #13
     87c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	222c      	movs	r2, #44	; 0x2c
     882:	2100      	movs	r1, #0
     884:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     886:	687b      	ldr	r3, [r7, #4]
     888:	222d      	movs	r2, #45	; 0x2d
     88a:	2100      	movs	r1, #0
     88c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     88e:	687b      	ldr	r3, [r7, #4]
     890:	2200      	movs	r2, #0
     892:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     894:	687b      	ldr	r3, [r7, #4]
     896:	2200      	movs	r2, #0
     898:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	2200      	movs	r2, #0
     89e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	2200      	movs	r2, #0
     8a4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	2200      	movs	r2, #0
     8aa:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	2200      	movs	r2, #0
     8b0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	2200      	movs	r2, #0
     8b6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2200      	movs	r2, #0
     8bc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	2200      	movs	r2, #0
     8c2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	2200      	movs	r2, #0
     8c8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2213      	movs	r2, #19
     8ce:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     8d0:	687b      	ldr	r3, [r7, #4]
     8d2:	2200      	movs	r2, #0
     8d4:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	46bd      	mov	sp, r7
     8da:	b002      	add	sp, #8
     8dc:	bd80      	pop	{r7, pc}
	...

000008e0 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b084      	sub	sp, #16
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	681b      	ldr	r3, [r3, #0]
     8f2:	0018      	movs	r0, r3
     8f4:	4b09      	ldr	r3, [pc, #36]	; (91c <usart_enable+0x3c>)
     8f6:	4798      	blx	r3
     8f8:	0003      	movs	r3, r0
     8fa:	0018      	movs	r0, r3
     8fc:	4b08      	ldr	r3, [pc, #32]	; (920 <usart_enable+0x40>)
     8fe:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     900:	687b      	ldr	r3, [r7, #4]
     902:	0018      	movs	r0, r3
     904:	4b07      	ldr	r3, [pc, #28]	; (924 <usart_enable+0x44>)
     906:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     908:	68fb      	ldr	r3, [r7, #12]
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	2202      	movs	r2, #2
     90e:	431a      	orrs	r2, r3
     910:	68fb      	ldr	r3, [r7, #12]
     912:	601a      	str	r2, [r3, #0]
}
     914:	46c0      	nop			; (mov r8, r8)
     916:	46bd      	mov	sp, r7
     918:	b004      	add	sp, #16
     91a:	bd80      	pop	{r7, pc}
     91c:	00003bc1 	.word	0x00003bc1
     920:	00000781 	.word	0x00000781
     924:	000007fd 	.word	0x000007fd

00000928 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     928:	b580      	push	{r7, lr}
     92a:	b084      	sub	sp, #16
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     930:	687b      	ldr	r3, [r7, #4]
     932:	681b      	ldr	r3, [r3, #0]
     934:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     936:	687b      	ldr	r3, [r7, #4]
     938:	681b      	ldr	r3, [r3, #0]
     93a:	0018      	movs	r0, r3
     93c:	4b0a      	ldr	r3, [pc, #40]	; (968 <usart_disable+0x40>)
     93e:	4798      	blx	r3
     940:	0003      	movs	r3, r0
     942:	0018      	movs	r0, r3
     944:	4b09      	ldr	r3, [pc, #36]	; (96c <usart_disable+0x44>)
     946:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     948:	687b      	ldr	r3, [r7, #4]
     94a:	0018      	movs	r0, r3
     94c:	4b08      	ldr	r3, [pc, #32]	; (970 <usart_disable+0x48>)
     94e:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     950:	68fb      	ldr	r3, [r7, #12]
     952:	681b      	ldr	r3, [r3, #0]
     954:	2202      	movs	r2, #2
     956:	4393      	bics	r3, r2
     958:	001a      	movs	r2, r3
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	601a      	str	r2, [r3, #0]
}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	46bd      	mov	sp, r7
     962:	b004      	add	sp, #16
     964:	bd80      	pop	{r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	00003bc1 	.word	0x00003bc1
     96c:	000007ad 	.word	0x000007ad
     970:	000007fd 	.word	0x000007fd

00000974 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     974:	b580      	push	{r7, lr}
     976:	b082      	sub	sp, #8
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
     97c:	000a      	movs	r2, r1
     97e:	1cfb      	adds	r3, r7, #3
     980:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     982:	687b      	ldr	r3, [r7, #4]
     984:	2231      	movs	r2, #49	; 0x31
     986:	5c9b      	ldrb	r3, [r3, r2]
     988:	b25a      	sxtb	r2, r3
     98a:	1cfb      	adds	r3, r7, #3
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	2101      	movs	r1, #1
     990:	4099      	lsls	r1, r3
     992:	000b      	movs	r3, r1
     994:	b25b      	sxtb	r3, r3
     996:	4313      	orrs	r3, r2
     998:	b25b      	sxtb	r3, r3
     99a:	b2d9      	uxtb	r1, r3
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	2231      	movs	r2, #49	; 0x31
     9a0:	5499      	strb	r1, [r3, r2]

}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	46bd      	mov	sp, r7
     9a6:	b002      	add	sp, #8
     9a8:	bd80      	pop	{r7, pc}
	...

000009ac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     9ac:	b580      	push	{r7, lr}
     9ae:	b082      	sub	sp, #8
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
     9b4:	000a      	movs	r2, r1
     9b6:	1cfb      	adds	r3, r7, #3
     9b8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	1cfb      	adds	r3, r7, #3
     9be:	781b      	ldrb	r3, [r3, #0]
     9c0:	b29a      	uxth	r2, r3
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	0011      	movs	r1, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b04      	ldr	r3, [pc, #16]	; (9dc <usart_serial_putchar+0x30>)
     9ca:	4798      	blx	r3
     9cc:	1e03      	subs	r3, r0, #0
     9ce:	d1f5      	bne.n	9bc <usart_serial_putchar+0x10>

	return STATUS_OK;
     9d0:	2300      	movs	r3, #0
}
     9d2:	0018      	movs	r0, r3
     9d4:	46bd      	mov	sp, r7
     9d6:	b002      	add	sp, #8
     9d8:	bd80      	pop	{r7, pc}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	000052d9 	.word	0x000052d9

000009e0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b084      	sub	sp, #16
     9e4:	af00      	add	r7, sp, #0
     9e6:	6078      	str	r0, [r7, #4]
     9e8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     9ea:	230e      	movs	r3, #14
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2200      	movs	r2, #0
     9f0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	230e      	movs	r3, #14
     9f6:	18fa      	adds	r2, r7, r3
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	0011      	movs	r1, r2
     9fc:	0018      	movs	r0, r3
     9fe:	4b07      	ldr	r3, [pc, #28]	; (a1c <usart_serial_getchar+0x3c>)
     a00:	4798      	blx	r3
     a02:	1e03      	subs	r3, r0, #0
     a04:	d1f6      	bne.n	9f4 <usart_serial_getchar+0x14>

	*c = temp;
     a06:	230e      	movs	r3, #14
     a08:	18fb      	adds	r3, r7, r3
     a0a:	881b      	ldrh	r3, [r3, #0]
     a0c:	b2da      	uxtb	r2, r3
     a0e:	683b      	ldr	r3, [r7, #0]
     a10:	701a      	strb	r2, [r3, #0]
}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	46bd      	mov	sp, r7
     a16:	b004      	add	sp, #16
     a18:	bd80      	pop	{r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	0000533d 	.word	0x0000533d

00000a20 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     a20:	b580      	push	{r7, lr}
     a22:	b084      	sub	sp, #16
     a24:	af00      	add	r7, sp, #0
     a26:	60f8      	str	r0, [r7, #12]
     a28:	60b9      	str	r1, [r7, #8]
     a2a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     a2c:	4b0d      	ldr	r3, [pc, #52]	; (a64 <stdio_serial_init+0x44>)
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     a32:	4b0d      	ldr	r3, [pc, #52]	; (a68 <stdio_serial_init+0x48>)
     a34:	4a0d      	ldr	r2, [pc, #52]	; (a6c <stdio_serial_init+0x4c>)
     a36:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     a38:	4b0d      	ldr	r3, [pc, #52]	; (a70 <stdio_serial_init+0x50>)
     a3a:	4a0e      	ldr	r2, [pc, #56]	; (a74 <stdio_serial_init+0x54>)
     a3c:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     a3e:	4b0e      	ldr	r3, [pc, #56]	; (a78 <stdio_serial_init+0x58>)
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	689b      	ldr	r3, [r3, #8]
     a44:	2100      	movs	r1, #0
     a46:	0018      	movs	r0, r3
     a48:	4b0c      	ldr	r3, [pc, #48]	; (a7c <stdio_serial_init+0x5c>)
     a4a:	4798      	blx	r3
	setbuf(stdin, NULL);
     a4c:	4b0a      	ldr	r3, [pc, #40]	; (a78 <stdio_serial_init+0x58>)
     a4e:	681b      	ldr	r3, [r3, #0]
     a50:	685b      	ldr	r3, [r3, #4]
     a52:	2100      	movs	r1, #0
     a54:	0018      	movs	r0, r3
     a56:	4b09      	ldr	r3, [pc, #36]	; (a7c <stdio_serial_init+0x5c>)
     a58:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	46bd      	mov	sp, r7
     a5e:	b004      	add	sp, #16
     a60:	bd80      	pop	{r7, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	200009f8 	.word	0x200009f8
     a68:	200009f4 	.word	0x200009f4
     a6c:	000009ad 	.word	0x000009ad
     a70:	200009f0 	.word	0x200009f0
     a74:	000009e1 	.word	0x000009e1
     a78:	20000030 	.word	0x20000030
     a7c:	0000b4f9 	.word	0x0000b4f9

00000a80 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
     a80:	b580      	push	{r7, lr}
     a82:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     a84:	2380      	movs	r3, #128	; 0x80
     a86:	00da      	lsls	r2, r3, #3
     a88:	4b0f      	ldr	r3, [pc, #60]	; (ac8 <InitializeSerialConsole+0x48>)
     a8a:	0011      	movs	r1, r2
     a8c:	0018      	movs	r0, r3
     a8e:	4b0f      	ldr	r3, [pc, #60]	; (acc <InitializeSerialConsole+0x4c>)
     a90:	4798      	blx	r3
     a92:	0002      	movs	r2, r0
     a94:	4b0e      	ldr	r3, [pc, #56]	; (ad0 <InitializeSerialConsole+0x50>)
     a96:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     a98:	2380      	movs	r3, #128	; 0x80
     a9a:	00da      	lsls	r2, r3, #3
     a9c:	4b0d      	ldr	r3, [pc, #52]	; (ad4 <InitializeSerialConsole+0x54>)
     a9e:	0011      	movs	r1, r2
     aa0:	0018      	movs	r0, r3
     aa2:	4b0a      	ldr	r3, [pc, #40]	; (acc <InitializeSerialConsole+0x4c>)
     aa4:	4798      	blx	r3
     aa6:	0002      	movs	r2, r0
     aa8:	4b0b      	ldr	r3, [pc, #44]	; (ad8 <InitializeSerialConsole+0x58>)
     aaa:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
     aac:	4b0b      	ldr	r3, [pc, #44]	; (adc <InitializeSerialConsole+0x5c>)
     aae:	4798      	blx	r3
	configure_usart_callbacks();
     ab0:	4b0b      	ldr	r3, [pc, #44]	; (ae0 <InitializeSerialConsole+0x60>)
     ab2:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     ab4:	490b      	ldr	r1, [pc, #44]	; (ae4 <InitializeSerialConsole+0x64>)
     ab6:	4b0c      	ldr	r3, [pc, #48]	; (ae8 <InitializeSerialConsole+0x68>)
     ab8:	2201      	movs	r2, #1
     aba:	0018      	movs	r0, r3
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <InitializeSerialConsole+0x6c>)
     abe:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
     ac0:	46c0      	nop			; (mov r8, r8)
     ac2:	46bd      	mov	sp, r7
     ac4:	bd80      	pop	{r7, pc}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	200005c8 	.word	0x200005c8
     acc:	00000661 	.word	0x00000661
     ad0:	200001c0 	.word	0x200001c0
     ad4:	200001c8 	.word	0x200001c8
     ad8:	200009cc 	.word	0x200009cc
     adc:	00000bb5 	.word	0x00000bb5
     ae0:	00000c3d 	.word	0x00000c3d
     ae4:	200001c4 	.word	0x200001c4
     ae8:	2000018c 	.word	0x2000018c
     aec:	000055f9 	.word	0x000055f9

00000af0 <DeinitializeSerialConsole>:


void DeinitializeSerialConsole()
{
     af0:	b580      	push	{r7, lr}
     af2:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);
     af4:	4b03      	ldr	r3, [pc, #12]	; (b04 <DeinitializeSerialConsole+0x14>)
     af6:	0018      	movs	r0, r3
     af8:	4b03      	ldr	r3, [pc, #12]	; (b08 <DeinitializeSerialConsole+0x18>)
     afa:	4798      	blx	r3
}
     afc:	46c0      	nop			; (mov r8, r8)
     afe:	46bd      	mov	sp, r7
     b00:	bd80      	pop	{r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	2000018c 	.word	0x2000018c
     b08:	00000929 	.word	0x00000929

00000b0c <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	b084      	sub	sp, #16
     b10:	af00      	add	r7, sp, #0
     b12:	6078      	str	r0, [r7, #4]
	if(string != NULL)
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	2b00      	cmp	r3, #0
     b18:	d02a      	beq.n	b70 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
     b1a:	2300      	movs	r3, #0
     b1c:	60fb      	str	r3, [r7, #12]
     b1e:	e00b      	b.n	b38 <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
     b20:	4b15      	ldr	r3, [pc, #84]	; (b78 <SerialConsoleWriteString+0x6c>)
     b22:	6818      	ldr	r0, [r3, #0]
     b24:	687a      	ldr	r2, [r7, #4]
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	18d3      	adds	r3, r2, r3
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	0019      	movs	r1, r3
     b2e:	4b13      	ldr	r3, [pc, #76]	; (b7c <SerialConsoleWriteString+0x70>)
     b30:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
     b32:	68fb      	ldr	r3, [r7, #12]
     b34:	3301      	adds	r3, #1
     b36:	60fb      	str	r3, [r7, #12]
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	0018      	movs	r0, r3
     b3c:	4b10      	ldr	r3, [pc, #64]	; (b80 <SerialConsoleWriteString+0x74>)
     b3e:	4798      	blx	r3
     b40:	0002      	movs	r2, r0
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	429a      	cmp	r2, r3
     b46:	d8eb      	bhi.n	b20 <SerialConsoleWriteString+0x14>
		}
		
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     b48:	4b0e      	ldr	r3, [pc, #56]	; (b84 <SerialConsoleWriteString+0x78>)
     b4a:	2101      	movs	r1, #1
     b4c:	0018      	movs	r0, r3
     b4e:	4b0e      	ldr	r3, [pc, #56]	; (b88 <SerialConsoleWriteString+0x7c>)
     b50:	4798      	blx	r3
     b52:	1e03      	subs	r3, r0, #0
     b54:	d10c      	bne.n	b70 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     b56:	4b08      	ldr	r3, [pc, #32]	; (b78 <SerialConsoleWriteString+0x6c>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	4a0c      	ldr	r2, [pc, #48]	; (b8c <SerialConsoleWriteString+0x80>)
     b5c:	0011      	movs	r1, r2
     b5e:	0018      	movs	r0, r3
     b60:	4b0b      	ldr	r3, [pc, #44]	; (b90 <SerialConsoleWriteString+0x84>)
     b62:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     b64:	4909      	ldr	r1, [pc, #36]	; (b8c <SerialConsoleWriteString+0x80>)
     b66:	4b07      	ldr	r3, [pc, #28]	; (b84 <SerialConsoleWriteString+0x78>)
     b68:	2201      	movs	r2, #1
     b6a:	0018      	movs	r0, r3
     b6c:	4b09      	ldr	r3, [pc, #36]	; (b94 <SerialConsoleWriteString+0x88>)
     b6e:	4798      	blx	r3
		}
	}
}
     b70:	46c0      	nop			; (mov r8, r8)
     b72:	46bd      	mov	sp, r7
     b74:	b004      	add	sp, #16
     b76:	bd80      	pop	{r7, pc}
     b78:	200009cc 	.word	0x200009cc
     b7c:	000006c1 	.word	0x000006c1
     b80:	0000b6dd 	.word	0x0000b6dd
     b84:	2000018c 	.word	0x2000018c
     b88:	00005641 	.word	0x00005641
     b8c:	200009c8 	.word	0x200009c8
     b90:	000006f5 	.word	0x000006f5
     b94:	000055b1 	.word	0x000055b1

00000b98 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
     b98:	b40e      	push	{r1, r2, r3}
     b9a:	b580      	push	{r7, lr}
     b9c:	b083      	sub	sp, #12
     b9e:	af00      	add	r7, sp, #0
     ba0:	0002      	movs	r2, r0
     ba2:	1dfb      	adds	r3, r7, #7
     ba4:	701a      	strb	r2, [r3, #0]


};
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	46bd      	mov	sp, r7
     baa:	b003      	add	sp, #12
     bac:	bc80      	pop	{r7}
     bae:	bc08      	pop	{r3}
     bb0:	b003      	add	sp, #12
     bb2:	4718      	bx	r3

00000bb4 <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
     bb4:	b580      	push	{r7, lr}
     bb6:	b090      	sub	sp, #64	; 0x40
     bb8:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
     bba:	003b      	movs	r3, r7
     bbc:	0018      	movs	r0, r3
     bbe:	4b17      	ldr	r3, [pc, #92]	; (c1c <configure_usart+0x68>)
     bc0:	4798      	blx	r3

	config_usart.baudrate    = 115200;
     bc2:	003b      	movs	r3, r7
     bc4:	22e1      	movs	r2, #225	; 0xe1
     bc6:	0252      	lsls	r2, r2, #9
     bc8:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     bca:	003b      	movs	r3, r7
     bcc:	22c4      	movs	r2, #196	; 0xc4
     bce:	0392      	lsls	r2, r2, #14
     bd0:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     bd2:	003b      	movs	r3, r7
     bd4:	2201      	movs	r2, #1
     bd6:	4252      	negs	r2, r2
     bd8:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     bda:	003b      	movs	r3, r7
     bdc:	2201      	movs	r2, #1
     bde:	4252      	negs	r2, r2
     be0:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     be2:	003b      	movs	r3, r7
     be4:	4a0e      	ldr	r2, [pc, #56]	; (c20 <configure_usart+0x6c>)
     be6:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     be8:	003b      	movs	r3, r7
     bea:	4a0e      	ldr	r2, [pc, #56]	; (c24 <configure_usart+0x70>)
     bec:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	003a      	movs	r2, r7
     bf2:	490d      	ldr	r1, [pc, #52]	; (c28 <configure_usart+0x74>)
     bf4:	4b0d      	ldr	r3, [pc, #52]	; (c2c <configure_usart+0x78>)
     bf6:	0018      	movs	r0, r3
     bf8:	4b0d      	ldr	r3, [pc, #52]	; (c30 <configure_usart+0x7c>)
     bfa:	4798      	blx	r3
     bfc:	1e03      	subs	r3, r0, #0
     bfe:	d1f7      	bne.n	bf0 <configure_usart+0x3c>
					  EDBG_CDC_MODULE, 
					  &config_usart) != STATUS_OK) 
	{

	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     c00:	003a      	movs	r2, r7
     c02:	4909      	ldr	r1, [pc, #36]	; (c28 <configure_usart+0x74>)
     c04:	4b09      	ldr	r3, [pc, #36]	; (c2c <configure_usart+0x78>)
     c06:	0018      	movs	r0, r3
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <configure_usart+0x80>)
     c0a:	4798      	blx	r3
	usart_enable(&usart_instance);
     c0c:	4b07      	ldr	r3, [pc, #28]	; (c2c <configure_usart+0x78>)
     c0e:	0018      	movs	r0, r3
     c10:	4b09      	ldr	r3, [pc, #36]	; (c38 <configure_usart+0x84>)
     c12:	4798      	blx	r3
}
     c14:	46c0      	nop			; (mov r8, r8)
     c16:	46bd      	mov	sp, r7
     c18:	b010      	add	sp, #64	; 0x40
     c1a:	bd80      	pop	{r7, pc}
     c1c:	00000821 	.word	0x00000821
     c20:	002a0003 	.word	0x002a0003
     c24:	002b0003 	.word	0x002b0003
     c28:	42001800 	.word	0x42001800
     c2c:	2000018c 	.word	0x2000018c
     c30:	00005065 	.word	0x00005065
     c34:	00000a21 	.word	0x00000a21
     c38:	000008e1 	.word	0x000008e1

00000c3c <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
     c40:	490c      	ldr	r1, [pc, #48]	; (c74 <configure_usart_callbacks+0x38>)
     c42:	4b0d      	ldr	r3, [pc, #52]	; (c78 <configure_usart_callbacks+0x3c>)
     c44:	2200      	movs	r2, #0
     c46:	0018      	movs	r0, r3
     c48:	4b0c      	ldr	r3, [pc, #48]	; (c7c <configure_usart_callbacks+0x40>)
     c4a:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
     c4c:	490c      	ldr	r1, [pc, #48]	; (c80 <configure_usart_callbacks+0x44>)
     c4e:	4b0a      	ldr	r3, [pc, #40]	; (c78 <configure_usart_callbacks+0x3c>)
     c50:	2201      	movs	r2, #1
     c52:	0018      	movs	r0, r3
     c54:	4b09      	ldr	r3, [pc, #36]	; (c7c <configure_usart_callbacks+0x40>)
     c56:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     c58:	4b07      	ldr	r3, [pc, #28]	; (c78 <configure_usart_callbacks+0x3c>)
     c5a:	2100      	movs	r1, #0
     c5c:	0018      	movs	r0, r3
     c5e:	4b09      	ldr	r3, [pc, #36]	; (c84 <configure_usart_callbacks+0x48>)
     c60:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <configure_usart_callbacks+0x3c>)
     c64:	2101      	movs	r1, #1
     c66:	0018      	movs	r0, r3
     c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <configure_usart_callbacks+0x48>)
     c6a:	4798      	blx	r3
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	00000cf9 	.word	0x00000cf9
     c78:	2000018c 	.word	0x2000018c
     c7c:	00005569 	.word	0x00005569
     c80:	00000c89 	.word	0x00000c89
     c84:	00000975 	.word	0x00000975

00000c88 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b084      	sub	sp, #16
     c8c:	af00      	add	r7, sp, #0
     c8e:	6078      	str	r0, [r7, #4]
	//Order Echo
	SerialConsoleWriteString(&latestRx);
     c90:	4b13      	ldr	r3, [pc, #76]	; (ce0 <usart_read_callback+0x58>)
     c92:	0018      	movs	r0, r3
     c94:	4b13      	ldr	r3, [pc, #76]	; (ce4 <usart_read_callback+0x5c>)
     c96:	4798      	blx	r3
	if(latestRx == 0x08)
     c98:	4b11      	ldr	r3, [pc, #68]	; (ce0 <usart_read_callback+0x58>)
     c9a:	781b      	ldrb	r3, [r3, #0]
     c9c:	2b08      	cmp	r3, #8
     c9e:	d10c      	bne.n	cba <usart_read_callback+0x32>
	{
	char a[3];
	a[0] = 0x20;
     ca0:	230c      	movs	r3, #12
     ca2:	18fb      	adds	r3, r7, r3
     ca4:	2220      	movs	r2, #32
     ca6:	701a      	strb	r2, [r3, #0]
	a[1]= 0x08;
     ca8:	230c      	movs	r3, #12
     caa:	18fb      	adds	r3, r7, r3
     cac:	2208      	movs	r2, #8
     cae:	705a      	strb	r2, [r3, #1]
	SerialConsoleWriteString(&a);
     cb0:	230c      	movs	r3, #12
     cb2:	18fb      	adds	r3, r7, r3
     cb4:	0018      	movs	r0, r3
     cb6:	4b0b      	ldr	r3, [pc, #44]	; (ce4 <usart_read_callback+0x5c>)
     cb8:	4798      	blx	r3
	}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     cba:	4b0b      	ldr	r3, [pc, #44]	; (ce8 <usart_read_callback+0x60>)
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	4b08      	ldr	r3, [pc, #32]	; (ce0 <usart_read_callback+0x58>)
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	0019      	movs	r1, r3
     cc4:	0010      	movs	r0, r2
     cc6:	4b09      	ldr	r3, [pc, #36]	; (cec <usart_read_callback+0x64>)
     cc8:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     cca:	4905      	ldr	r1, [pc, #20]	; (ce0 <usart_read_callback+0x58>)
     ccc:	4b08      	ldr	r3, [pc, #32]	; (cf0 <usart_read_callback+0x68>)
     cce:	2201      	movs	r2, #1
     cd0:	0018      	movs	r0, r3
     cd2:	4b08      	ldr	r3, [pc, #32]	; (cf4 <usart_read_callback+0x6c>)
     cd4:	4798      	blx	r3
}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	46bd      	mov	sp, r7
     cda:	b004      	add	sp, #16
     cdc:	bd80      	pop	{r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	200001c4 	.word	0x200001c4
     ce4:	00000b0d 	.word	0x00000b0d
     ce8:	200001c0 	.word	0x200001c0
     cec:	000006c1 	.word	0x000006c1
     cf0:	2000018c 	.word	0x2000018c
     cf4:	000055f9 	.word	0x000055f9

00000cf8 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     d00:	4b09      	ldr	r3, [pc, #36]	; (d28 <usart_write_callback+0x30>)
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	4a09      	ldr	r2, [pc, #36]	; (d2c <usart_write_callback+0x34>)
     d06:	0011      	movs	r1, r2
     d08:	0018      	movs	r0, r3
     d0a:	4b09      	ldr	r3, [pc, #36]	; (d30 <usart_write_callback+0x38>)
     d0c:	4798      	blx	r3
     d0e:	0003      	movs	r3, r0
     d10:	3301      	adds	r3, #1
     d12:	d005      	beq.n	d20 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     d14:	4905      	ldr	r1, [pc, #20]	; (d2c <usart_write_callback+0x34>)
     d16:	4b07      	ldr	r3, [pc, #28]	; (d34 <usart_write_callback+0x3c>)
     d18:	2201      	movs	r2, #1
     d1a:	0018      	movs	r0, r3
     d1c:	4b06      	ldr	r3, [pc, #24]	; (d38 <usart_write_callback+0x40>)
     d1e:	4798      	blx	r3
	}
	
}
     d20:	46c0      	nop			; (mov r8, r8)
     d22:	46bd      	mov	sp, r7
     d24:	b002      	add	sp, #8
     d26:	bd80      	pop	{r7, pc}
     d28:	200009cc 	.word	0x200009cc
     d2c:	200009c8 	.word	0x200009c8
     d30:	000006f5 	.word	0x000006f5
     d34:	2000018c 	.word	0x2000018c
     d38:	000055b1 	.word	0x000055b1

00000d3c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
     d3c:	b590      	push	{r4, r7, lr}
     d3e:	b087      	sub	sp, #28
     d40:	af00      	add	r7, sp, #0
     d42:	60f8      	str	r0, [r7, #12]
     d44:	000c      	movs	r4, r1
     d46:	0010      	movs	r0, r2
     d48:	0019      	movs	r1, r3
     d4a:	230a      	movs	r3, #10
     d4c:	18fb      	adds	r3, r7, r3
     d4e:	1c22      	adds	r2, r4, #0
     d50:	801a      	strh	r2, [r3, #0]
     d52:	2308      	movs	r3, #8
     d54:	18fb      	adds	r3, r7, r3
     d56:	1c02      	adds	r2, r0, #0
     d58:	801a      	strh	r2, [r3, #0]
     d5a:	1dfb      	adds	r3, r7, #7
     d5c:	1c0a      	adds	r2, r1, #0
     d5e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d60:	230a      	movs	r3, #10
     d62:	18fb      	adds	r3, r7, r3
     d64:	881a      	ldrh	r2, [r3, #0]
     d66:	2308      	movs	r3, #8
     d68:	18fb      	adds	r3, r7, r3
     d6a:	881b      	ldrh	r3, [r3, #0]
     d6c:	1ad3      	subs	r3, r2, r3
     d6e:	3307      	adds	r3, #7
     d70:	2b00      	cmp	r3, #0
     d72:	da00      	bge.n	d76 <SDMMC_UNSTUFF_BITS+0x3a>
     d74:	3307      	adds	r3, #7
     d76:	10db      	asrs	r3, r3, #3
     d78:	3b01      	subs	r3, #1
     d7a:	68fa      	ldr	r2, [r7, #12]
     d7c:	18d3      	adds	r3, r2, r3
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	0019      	movs	r1, r3
     d82:	2308      	movs	r3, #8
     d84:	18fb      	adds	r3, r7, r3
     d86:	881b      	ldrh	r3, [r3, #0]
     d88:	2207      	movs	r2, #7
     d8a:	4013      	ands	r3, r2
     d8c:	4119      	asrs	r1, r3
     d8e:	000b      	movs	r3, r1
     d90:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
     d92:	2308      	movs	r3, #8
     d94:	18fb      	adds	r3, r7, r3
     d96:	881b      	ldrh	r3, [r3, #0]
     d98:	2207      	movs	r2, #7
     d9a:	401a      	ands	r2, r3
     d9c:	1dfb      	adds	r3, r7, #7
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	18d3      	adds	r3, r2, r3
     da2:	2b08      	cmp	r3, #8
     da4:	dd1c      	ble.n	de0 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     da6:	230a      	movs	r3, #10
     da8:	18fb      	adds	r3, r7, r3
     daa:	881a      	ldrh	r2, [r3, #0]
     dac:	2308      	movs	r3, #8
     dae:	18fb      	adds	r3, r7, r3
     db0:	881b      	ldrh	r3, [r3, #0]
     db2:	1ad3      	subs	r3, r2, r3
     db4:	3307      	adds	r3, #7
     db6:	2b00      	cmp	r3, #0
     db8:	da00      	bge.n	dbc <SDMMC_UNSTUFF_BITS+0x80>
     dba:	3307      	adds	r3, #7
     dbc:	10db      	asrs	r3, r3, #3
     dbe:	3b02      	subs	r3, #2
     dc0:	68fa      	ldr	r2, [r7, #12]
     dc2:	18d3      	adds	r3, r2, r3
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	0019      	movs	r1, r3
     dc8:	2308      	movs	r3, #8
     dca:	18fb      	adds	r3, r7, r3
     dcc:	881b      	ldrh	r3, [r3, #0]
     dce:	2207      	movs	r2, #7
     dd0:	4013      	ands	r3, r2
     dd2:	2208      	movs	r2, #8
     dd4:	1ad3      	subs	r3, r2, r3
     dd6:	4099      	lsls	r1, r3
     dd8:	000b      	movs	r3, r1
     dda:	697a      	ldr	r2, [r7, #20]
     ddc:	4313      	orrs	r3, r2
     dde:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     de0:	2308      	movs	r3, #8
     de2:	18fb      	adds	r3, r7, r3
     de4:	881b      	ldrh	r3, [r3, #0]
     de6:	2207      	movs	r2, #7
     de8:	401a      	ands	r2, r3
     dea:	1dfb      	adds	r3, r7, #7
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	18d3      	adds	r3, r2, r3
     df0:	2b10      	cmp	r3, #16
     df2:	dd1c      	ble.n	e2e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     df4:	230a      	movs	r3, #10
     df6:	18fb      	adds	r3, r7, r3
     df8:	881a      	ldrh	r2, [r3, #0]
     dfa:	2308      	movs	r3, #8
     dfc:	18fb      	adds	r3, r7, r3
     dfe:	881b      	ldrh	r3, [r3, #0]
     e00:	1ad3      	subs	r3, r2, r3
     e02:	3307      	adds	r3, #7
     e04:	2b00      	cmp	r3, #0
     e06:	da00      	bge.n	e0a <SDMMC_UNSTUFF_BITS+0xce>
     e08:	3307      	adds	r3, #7
     e0a:	10db      	asrs	r3, r3, #3
     e0c:	3b03      	subs	r3, #3
     e0e:	68fa      	ldr	r2, [r7, #12]
     e10:	18d3      	adds	r3, r2, r3
     e12:	781b      	ldrb	r3, [r3, #0]
     e14:	0019      	movs	r1, r3
     e16:	2308      	movs	r3, #8
     e18:	18fb      	adds	r3, r7, r3
     e1a:	881b      	ldrh	r3, [r3, #0]
     e1c:	2207      	movs	r2, #7
     e1e:	4013      	ands	r3, r2
     e20:	2210      	movs	r2, #16
     e22:	1ad3      	subs	r3, r2, r3
     e24:	4099      	lsls	r1, r3
     e26:	000b      	movs	r3, r1
     e28:	697a      	ldr	r2, [r7, #20]
     e2a:	4313      	orrs	r3, r2
     e2c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     e2e:	2308      	movs	r3, #8
     e30:	18fb      	adds	r3, r7, r3
     e32:	881b      	ldrh	r3, [r3, #0]
     e34:	2207      	movs	r2, #7
     e36:	401a      	ands	r2, r3
     e38:	1dfb      	adds	r3, r7, #7
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	18d3      	adds	r3, r2, r3
     e3e:	2b10      	cmp	r3, #16
     e40:	dd1c      	ble.n	e7c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e42:	230a      	movs	r3, #10
     e44:	18fb      	adds	r3, r7, r3
     e46:	881a      	ldrh	r2, [r3, #0]
     e48:	2308      	movs	r3, #8
     e4a:	18fb      	adds	r3, r7, r3
     e4c:	881b      	ldrh	r3, [r3, #0]
     e4e:	1ad3      	subs	r3, r2, r3
     e50:	3307      	adds	r3, #7
     e52:	2b00      	cmp	r3, #0
     e54:	da00      	bge.n	e58 <SDMMC_UNSTUFF_BITS+0x11c>
     e56:	3307      	adds	r3, #7
     e58:	10db      	asrs	r3, r3, #3
     e5a:	3b03      	subs	r3, #3
     e5c:	68fa      	ldr	r2, [r7, #12]
     e5e:	18d3      	adds	r3, r2, r3
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	0019      	movs	r1, r3
     e64:	2308      	movs	r3, #8
     e66:	18fb      	adds	r3, r7, r3
     e68:	881b      	ldrh	r3, [r3, #0]
     e6a:	2207      	movs	r2, #7
     e6c:	4013      	ands	r3, r2
     e6e:	2210      	movs	r2, #16
     e70:	1ad3      	subs	r3, r2, r3
     e72:	4099      	lsls	r1, r3
     e74:	000b      	movs	r3, r1
     e76:	697a      	ldr	r2, [r7, #20]
     e78:	4313      	orrs	r3, r2
     e7a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
     e7c:	1dfb      	adds	r3, r7, #7
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	2201      	movs	r2, #1
     e82:	409a      	lsls	r2, r3
     e84:	0013      	movs	r3, r2
     e86:	1e5a      	subs	r2, r3, #1
     e88:	697b      	ldr	r3, [r7, #20]
     e8a:	4013      	ands	r3, r2
     e8c:	617b      	str	r3, [r7, #20]
	return value;
     e8e:	697b      	ldr	r3, [r7, #20]
}
     e90:	0018      	movs	r0, r3
     e92:	46bd      	mov	sp, r7
     e94:	b007      	add	sp, #28
     e96:	bd90      	pop	{r4, r7, pc}

00000e98 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
     e98:	b580      	push	{r7, lr}
     e9a:	b082      	sub	sp, #8
     e9c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     e9e:	4b23      	ldr	r3, [pc, #140]	; (f2c <mmc_spi_op_cond+0x94>)
     ea0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     ea2:	4b23      	ldr	r3, [pc, #140]	; (f30 <mmc_spi_op_cond+0x98>)
     ea4:	2100      	movs	r1, #0
     ea6:	0018      	movs	r0, r3
     ea8:	4b22      	ldr	r3, [pc, #136]	; (f34 <mmc_spi_op_cond+0x9c>)
     eaa:	4798      	blx	r3
     eac:	0003      	movs	r3, r0
     eae:	001a      	movs	r2, r3
     eb0:	2301      	movs	r3, #1
     eb2:	4053      	eors	r3, r2
     eb4:	b2db      	uxtb	r3, r3
     eb6:	2b00      	cmp	r3, #0
     eb8:	d001      	beq.n	ebe <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
     eba:	2300      	movs	r3, #0
     ebc:	e031      	b.n	f22 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
     ebe:	4b1e      	ldr	r3, [pc, #120]	; (f38 <mmc_spi_op_cond+0xa0>)
     ec0:	4798      	blx	r3
     ec2:	0003      	movs	r3, r0
     ec4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
     ec6:	683b      	ldr	r3, [r7, #0]
     ec8:	2201      	movs	r2, #1
     eca:	4013      	ands	r3, r2
     ecc:	d006      	beq.n	edc <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	1e5a      	subs	r2, r3, #1
     ed2:	607a      	str	r2, [r7, #4]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d1e4      	bne.n	ea2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
     ed8:	2300      	movs	r3, #0
     eda:	e022      	b.n	f22 <mmc_spi_op_cond+0x8a>
			break;
     edc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     ede:	4b17      	ldr	r3, [pc, #92]	; (f3c <mmc_spi_op_cond+0xa4>)
     ee0:	2100      	movs	r1, #0
     ee2:	0018      	movs	r0, r3
     ee4:	4b13      	ldr	r3, [pc, #76]	; (f34 <mmc_spi_op_cond+0x9c>)
     ee6:	4798      	blx	r3
     ee8:	0003      	movs	r3, r0
     eea:	001a      	movs	r2, r3
     eec:	2301      	movs	r3, #1
     eee:	4053      	eors	r3, r2
     ef0:	b2db      	uxtb	r3, r3
     ef2:	2b00      	cmp	r3, #0
     ef4:	d001      	beq.n	efa <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     ef6:	2300      	movs	r3, #0
     ef8:	e013      	b.n	f22 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     efa:	4b0f      	ldr	r3, [pc, #60]	; (f38 <mmc_spi_op_cond+0xa0>)
     efc:	4798      	blx	r3
     efe:	0002      	movs	r2, r0
     f00:	23c0      	movs	r3, #192	; 0xc0
     f02:	05db      	lsls	r3, r3, #23
     f04:	401a      	ands	r2, r3
     f06:	2380      	movs	r3, #128	; 0x80
     f08:	05db      	lsls	r3, r3, #23
     f0a:	429a      	cmp	r2, r3
     f0c:	d108      	bne.n	f20 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
     f0e:	4b0c      	ldr	r3, [pc, #48]	; (f40 <mmc_spi_op_cond+0xa8>)
     f10:	681a      	ldr	r2, [r3, #0]
     f12:	4b0b      	ldr	r3, [pc, #44]	; (f40 <mmc_spi_op_cond+0xa8>)
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	7adb      	ldrb	r3, [r3, #11]
     f18:	2108      	movs	r1, #8
     f1a:	430b      	orrs	r3, r1
     f1c:	b2db      	uxtb	r3, r3
     f1e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
     f20:	2301      	movs	r3, #1
}
     f22:	0018      	movs	r0, r3
     f24:	46bd      	mov	sp, r7
     f26:	b002      	add	sp, #8
     f28:	bd80      	pop	{r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00001bee 	.word	0x00001bee
     f30:	00001101 	.word	0x00001101
     f34:	00002931 	.word	0x00002931
     f38:	00002b71 	.word	0x00002b71
     f3c:	0000053a 	.word	0x0000053a
     f40:	200000e0 	.word	0x200000e0

00000f44 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
     f44:	b580      	push	{r7, lr}
     f46:	b086      	sub	sp, #24
     f48:	af00      	add	r7, sp, #0
     f4a:	0002      	movs	r2, r0
     f4c:	1dfb      	adds	r3, r7, #7
     f4e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     f50:	4b2e      	ldr	r3, [pc, #184]	; (100c <sd_spi_op_cond+0xc8>)
     f52:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     f54:	4b2e      	ldr	r3, [pc, #184]	; (1010 <sd_spi_op_cond+0xcc>)
     f56:	2100      	movs	r1, #0
     f58:	0018      	movs	r0, r3
     f5a:	4b2e      	ldr	r3, [pc, #184]	; (1014 <sd_spi_op_cond+0xd0>)
     f5c:	4798      	blx	r3
     f5e:	0003      	movs	r3, r0
     f60:	001a      	movs	r2, r3
     f62:	2301      	movs	r3, #1
     f64:	4053      	eors	r3, r2
     f66:	b2db      	uxtb	r3, r3
     f68:	2b00      	cmp	r3, #0
     f6a:	d001      	beq.n	f70 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
     f6c:	2300      	movs	r3, #0
     f6e:	e048      	b.n	1002 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
     f70:	2300      	movs	r3, #0
     f72:	617b      	str	r3, [r7, #20]
		if (v2) {
     f74:	1dfb      	adds	r3, r7, #7
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	2b00      	cmp	r3, #0
     f7a:	d004      	beq.n	f86 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
     f7c:	697b      	ldr	r3, [r7, #20]
     f7e:	2280      	movs	r2, #128	; 0x80
     f80:	05d2      	lsls	r2, r2, #23
     f82:	4313      	orrs	r3, r2
     f84:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     f86:	697b      	ldr	r3, [r7, #20]
     f88:	4a23      	ldr	r2, [pc, #140]	; (1018 <sd_spi_op_cond+0xd4>)
     f8a:	0019      	movs	r1, r3
     f8c:	0010      	movs	r0, r2
     f8e:	4b21      	ldr	r3, [pc, #132]	; (1014 <sd_spi_op_cond+0xd0>)
     f90:	4798      	blx	r3
     f92:	0003      	movs	r3, r0
     f94:	001a      	movs	r2, r3
     f96:	2301      	movs	r3, #1
     f98:	4053      	eors	r3, r2
     f9a:	b2db      	uxtb	r3, r3
     f9c:	2b00      	cmp	r3, #0
     f9e:	d001      	beq.n	fa4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
     fa0:	2300      	movs	r3, #0
     fa2:	e02e      	b.n	1002 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
     fa4:	4b1d      	ldr	r3, [pc, #116]	; (101c <sd_spi_op_cond+0xd8>)
     fa6:	4798      	blx	r3
     fa8:	0003      	movs	r3, r0
     faa:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     fac:	68fb      	ldr	r3, [r7, #12]
     fae:	2201      	movs	r2, #1
     fb0:	4013      	ands	r3, r2
     fb2:	d006      	beq.n	fc2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
     fb4:	693b      	ldr	r3, [r7, #16]
     fb6:	1e5a      	subs	r2, r3, #1
     fb8:	613a      	str	r2, [r7, #16]
     fba:	2b00      	cmp	r3, #0
     fbc:	d1ca      	bne.n	f54 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
     fbe:	2300      	movs	r3, #0
     fc0:	e01f      	b.n	1002 <sd_spi_op_cond+0xbe>
			break;
     fc2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     fc4:	4b16      	ldr	r3, [pc, #88]	; (1020 <sd_spi_op_cond+0xdc>)
     fc6:	2100      	movs	r1, #0
     fc8:	0018      	movs	r0, r3
     fca:	4b12      	ldr	r3, [pc, #72]	; (1014 <sd_spi_op_cond+0xd0>)
     fcc:	4798      	blx	r3
     fce:	0003      	movs	r3, r0
     fd0:	001a      	movs	r2, r3
     fd2:	2301      	movs	r3, #1
     fd4:	4053      	eors	r3, r2
     fd6:	b2db      	uxtb	r3, r3
     fd8:	2b00      	cmp	r3, #0
     fda:	d001      	beq.n	fe0 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     fdc:	2300      	movs	r3, #0
     fde:	e010      	b.n	1002 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
     fe0:	4b0e      	ldr	r3, [pc, #56]	; (101c <sd_spi_op_cond+0xd8>)
     fe2:	4798      	blx	r3
     fe4:	0002      	movs	r2, r0
     fe6:	2380      	movs	r3, #128	; 0x80
     fe8:	05db      	lsls	r3, r3, #23
     fea:	4013      	ands	r3, r2
     fec:	d008      	beq.n	1000 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
     fee:	4b0d      	ldr	r3, [pc, #52]	; (1024 <sd_spi_op_cond+0xe0>)
     ff0:	681a      	ldr	r2, [r3, #0]
     ff2:	4b0c      	ldr	r3, [pc, #48]	; (1024 <sd_spi_op_cond+0xe0>)
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	7adb      	ldrb	r3, [r3, #11]
     ff8:	2108      	movs	r1, #8
     ffa:	430b      	orrs	r3, r1
     ffc:	b2db      	uxtb	r3, r3
     ffe:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    1000:	2301      	movs	r3, #1
}
    1002:	0018      	movs	r0, r3
    1004:	46bd      	mov	sp, r7
    1006:	b006      	add	sp, #24
    1008:	bd80      	pop	{r7, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	00001bee 	.word	0x00001bee
    1010:	00001137 	.word	0x00001137
    1014:	00002931 	.word	0x00002931
    1018:	00001129 	.word	0x00001129
    101c:	00002b71 	.word	0x00002b71
    1020:	0000053a 	.word	0x0000053a
    1024:	200000e0 	.word	0x200000e0

00001028 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    1028:	b580      	push	{r7, lr}
    102a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    102c:	2301      	movs	r3, #1
}
    102e:	0018      	movs	r0, r3
    1030:	46bd      	mov	sp, r7
    1032:	bd80      	pop	{r7, pc}

00001034 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    1034:	b580      	push	{r7, lr}
    1036:	b084      	sub	sp, #16
    1038:	af00      	add	r7, sp, #0
    103a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	2200      	movs	r2, #0
    1040:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    1042:	23d5      	movs	r3, #213	; 0xd5
    1044:	005b      	lsls	r3, r3, #1
    1046:	4a14      	ldr	r2, [pc, #80]	; (1098 <sd_cmd8+0x64>)
    1048:	0019      	movs	r1, r3
    104a:	0010      	movs	r0, r2
    104c:	4b13      	ldr	r3, [pc, #76]	; (109c <sd_cmd8+0x68>)
    104e:	4798      	blx	r3
    1050:	0003      	movs	r3, r0
    1052:	001a      	movs	r2, r3
    1054:	2301      	movs	r3, #1
    1056:	4053      	eors	r3, r2
    1058:	b2db      	uxtb	r3, r3
    105a:	2b00      	cmp	r3, #0
    105c:	d001      	beq.n	1062 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    105e:	2301      	movs	r3, #1
    1060:	e015      	b.n	108e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    1062:	4b0f      	ldr	r3, [pc, #60]	; (10a0 <sd_cmd8+0x6c>)
    1064:	4798      	blx	r3
    1066:	0003      	movs	r3, r0
    1068:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	3301      	adds	r3, #1
    106e:	d101      	bne.n	1074 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    1070:	2301      	movs	r3, #1
    1072:	e00c      	b.n	108e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    1074:	68fb      	ldr	r3, [r7, #12]
    1076:	051b      	lsls	r3, r3, #20
    1078:	0d1a      	lsrs	r2, r3, #20
    107a:	23d5      	movs	r3, #213	; 0xd5
    107c:	005b      	lsls	r3, r3, #1
    107e:	429a      	cmp	r2, r3
    1080:	d001      	beq.n	1086 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    1082:	2300      	movs	r3, #0
    1084:	e003      	b.n	108e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	2201      	movs	r2, #1
    108a:	701a      	strb	r2, [r3, #0]
	return true;
    108c:	2301      	movs	r3, #1
}
    108e:	0018      	movs	r0, r3
    1090:	46bd      	mov	sp, r7
    1092:	b004      	add	sp, #16
    1094:	bd80      	pop	{r7, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	00005508 	.word	0x00005508
    109c:	00002931 	.word	0x00002931
    10a0:	00002b71 	.word	0x00002b71

000010a4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    10a4:	b590      	push	{r4, r7, lr}
    10a6:	b089      	sub	sp, #36	; 0x24
    10a8:	af02      	add	r7, sp, #8
    10aa:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    10ac:	2380      	movs	r3, #128	; 0x80
    10ae:	009a      	lsls	r2, r3, #2
    10b0:	4841      	ldr	r0, [pc, #260]	; (11b8 <mmc_cmd8+0x114>)
    10b2:	2300      	movs	r3, #0
    10b4:	9300      	str	r3, [sp, #0]
    10b6:	2301      	movs	r3, #1
    10b8:	2100      	movs	r1, #0
    10ba:	4c40      	ldr	r4, [pc, #256]	; (11bc <mmc_cmd8+0x118>)
    10bc:	47a0      	blx	r4
    10be:	0003      	movs	r3, r0
    10c0:	001a      	movs	r2, r3
    10c2:	2301      	movs	r3, #1
    10c4:	4053      	eors	r3, r2
    10c6:	b2db      	uxtb	r3, r3
    10c8:	2b00      	cmp	r3, #0
    10ca:	d001      	beq.n	10d0 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    10cc:	2300      	movs	r3, #0
    10ce:	e06e      	b.n	11ae <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    10d0:	2316      	movs	r3, #22
    10d2:	18fb      	adds	r3, r7, r3
    10d4:	2200      	movs	r2, #0
    10d6:	801a      	strh	r2, [r3, #0]
    10d8:	e014      	b.n	1104 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    10da:	2310      	movs	r3, #16
    10dc:	18fb      	adds	r3, r7, r3
    10de:	0018      	movs	r0, r3
    10e0:	4b37      	ldr	r3, [pc, #220]	; (11c0 <mmc_cmd8+0x11c>)
    10e2:	4798      	blx	r3
    10e4:	0003      	movs	r3, r0
    10e6:	001a      	movs	r2, r3
    10e8:	2301      	movs	r3, #1
    10ea:	4053      	eors	r3, r2
    10ec:	b2db      	uxtb	r3, r3
    10ee:	2b00      	cmp	r3, #0
    10f0:	d001      	beq.n	10f6 <mmc_cmd8+0x52>
			return false;
    10f2:	2300      	movs	r3, #0
    10f4:	e05b      	b.n	11ae <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    10f6:	2316      	movs	r3, #22
    10f8:	18fb      	adds	r3, r7, r3
    10fa:	881a      	ldrh	r2, [r3, #0]
    10fc:	2316      	movs	r3, #22
    10fe:	18fb      	adds	r3, r7, r3
    1100:	3201      	adds	r2, #1
    1102:	801a      	strh	r2, [r3, #0]
    1104:	2316      	movs	r3, #22
    1106:	18fb      	adds	r3, r7, r3
    1108:	881b      	ldrh	r3, [r3, #0]
    110a:	2b31      	cmp	r3, #49	; 0x31
    110c:	d9e5      	bls.n	10da <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    110e:	693b      	ldr	r3, [r7, #16]
    1110:	b2db      	uxtb	r3, r3
    1112:	2202      	movs	r2, #2
    1114:	4013      	ands	r3, r2
    1116:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    111c:	4b29      	ldr	r3, [pc, #164]	; (11c4 <mmc_cmd8+0x120>)
    111e:	681b      	ldr	r3, [r3, #0]
    1120:	330e      	adds	r3, #14
    1122:	0018      	movs	r0, r3
    1124:	230c      	movs	r3, #12
    1126:	223e      	movs	r2, #62	; 0x3e
    1128:	2180      	movs	r1, #128	; 0x80
    112a:	4c27      	ldr	r4, [pc, #156]	; (11c8 <mmc_cmd8+0x124>)
    112c:	47a0      	blx	r4
    112e:	0002      	movs	r2, r0
    1130:	4b26      	ldr	r3, [pc, #152]	; (11cc <mmc_cmd8+0x128>)
    1132:	429a      	cmp	r2, r3
    1134:	d135      	bne.n	11a2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1136:	e014      	b.n	1162 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    1138:	230c      	movs	r3, #12
    113a:	18fb      	adds	r3, r7, r3
    113c:	0018      	movs	r0, r3
    113e:	4b20      	ldr	r3, [pc, #128]	; (11c0 <mmc_cmd8+0x11c>)
    1140:	4798      	blx	r3
    1142:	0003      	movs	r3, r0
    1144:	001a      	movs	r2, r3
    1146:	2301      	movs	r3, #1
    1148:	4053      	eors	r3, r2
    114a:	b2db      	uxtb	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	d001      	beq.n	1154 <mmc_cmd8+0xb0>
				return false;
    1150:	2300      	movs	r3, #0
    1152:	e02c      	b.n	11ae <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1154:	2316      	movs	r3, #22
    1156:	18fb      	adds	r3, r7, r3
    1158:	881a      	ldrh	r2, [r3, #0]
    115a:	2316      	movs	r3, #22
    115c:	18fb      	adds	r3, r7, r3
    115e:	3201      	adds	r2, #1
    1160:	801a      	strh	r2, [r3, #0]
    1162:	2316      	movs	r3, #22
    1164:	18fb      	adds	r3, r7, r3
    1166:	881b      	ldrh	r3, [r3, #0]
    1168:	2b35      	cmp	r3, #53	; 0x35
    116a:	d9e5      	bls.n	1138 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    116c:	4b15      	ldr	r3, [pc, #84]	; (11c4 <mmc_cmd8+0x120>)
    116e:	681b      	ldr	r3, [r3, #0]
    1170:	68fa      	ldr	r2, [r7, #12]
    1172:	0852      	lsrs	r2, r2, #1
    1174:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1176:	e014      	b.n	11a2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    1178:	230c      	movs	r3, #12
    117a:	18fb      	adds	r3, r7, r3
    117c:	0018      	movs	r0, r3
    117e:	4b10      	ldr	r3, [pc, #64]	; (11c0 <mmc_cmd8+0x11c>)
    1180:	4798      	blx	r3
    1182:	0003      	movs	r3, r0
    1184:	001a      	movs	r2, r3
    1186:	2301      	movs	r3, #1
    1188:	4053      	eors	r3, r2
    118a:	b2db      	uxtb	r3, r3
    118c:	2b00      	cmp	r3, #0
    118e:	d001      	beq.n	1194 <mmc_cmd8+0xf0>
			return false;
    1190:	2300      	movs	r3, #0
    1192:	e00c      	b.n	11ae <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1194:	2316      	movs	r3, #22
    1196:	18fb      	adds	r3, r7, r3
    1198:	881a      	ldrh	r2, [r3, #0]
    119a:	2316      	movs	r3, #22
    119c:	18fb      	adds	r3, r7, r3
    119e:	3201      	adds	r2, #1
    11a0:	801a      	strh	r2, [r3, #0]
    11a2:	2316      	movs	r3, #22
    11a4:	18fb      	adds	r3, r7, r3
    11a6:	881b      	ldrh	r3, [r3, #0]
    11a8:	2b7f      	cmp	r3, #127	; 0x7f
    11aa:	d9e5      	bls.n	1178 <mmc_cmd8+0xd4>
		}
	}
	return true;
    11ac:	2301      	movs	r3, #1
}
    11ae:	0018      	movs	r0, r3
    11b0:	46bd      	mov	sp, r7
    11b2:	b007      	add	sp, #28
    11b4:	bd90      	pop	{r4, r7, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	00081108 	.word	0x00081108
    11bc:	00002959 	.word	0x00002959
    11c0:	00002b85 	.word	0x00002b85
    11c4:	200000e0 	.word	0x200000e0
    11c8:	00000d3d 	.word	0x00000d3d
    11cc:	00000fff 	.word	0x00000fff

000011d0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    11d0:	b590      	push	{r4, r7, lr}
    11d2:	b083      	sub	sp, #12
    11d4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    11d6:	4b15      	ldr	r3, [pc, #84]	; (122c <sd_mmc_cmd9_spi+0x5c>)
    11d8:	681b      	ldr	r3, [r3, #0]
    11da:	891b      	ldrh	r3, [r3, #8]
    11dc:	0419      	lsls	r1, r3, #16
    11de:	4814      	ldr	r0, [pc, #80]	; (1230 <sd_mmc_cmd9_spi+0x60>)
    11e0:	2301      	movs	r3, #1
    11e2:	9300      	str	r3, [sp, #0]
    11e4:	2301      	movs	r3, #1
    11e6:	2210      	movs	r2, #16
    11e8:	4c12      	ldr	r4, [pc, #72]	; (1234 <sd_mmc_cmd9_spi+0x64>)
    11ea:	47a0      	blx	r4
    11ec:	0003      	movs	r3, r0
    11ee:	001a      	movs	r2, r3
    11f0:	2301      	movs	r3, #1
    11f2:	4053      	eors	r3, r2
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d001      	beq.n	11fe <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    11fa:	2300      	movs	r3, #0
    11fc:	e012      	b.n	1224 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    11fe:	4b0b      	ldr	r3, [pc, #44]	; (122c <sd_mmc_cmd9_spi+0x5c>)
    1200:	681b      	ldr	r3, [r3, #0]
    1202:	330e      	adds	r3, #14
    1204:	2101      	movs	r1, #1
    1206:	0018      	movs	r0, r3
    1208:	4b0b      	ldr	r3, [pc, #44]	; (1238 <sd_mmc_cmd9_spi+0x68>)
    120a:	4798      	blx	r3
    120c:	0003      	movs	r3, r0
    120e:	001a      	movs	r2, r3
    1210:	2301      	movs	r3, #1
    1212:	4053      	eors	r3, r2
    1214:	b2db      	uxtb	r3, r3
    1216:	2b00      	cmp	r3, #0
    1218:	d001      	beq.n	121e <sd_mmc_cmd9_spi+0x4e>
		return false;
    121a:	2300      	movs	r3, #0
    121c:	e002      	b.n	1224 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    121e:	4b07      	ldr	r3, [pc, #28]	; (123c <sd_mmc_cmd9_spi+0x6c>)
    1220:	4798      	blx	r3
    1222:	0003      	movs	r3, r0
}
    1224:	0018      	movs	r0, r3
    1226:	46bd      	mov	sp, r7
    1228:	b001      	add	sp, #4
    122a:	bd90      	pop	{r4, r7, pc}
    122c:	200000e0 	.word	0x200000e0
    1230:	00081109 	.word	0x00081109
    1234:	00002959 	.word	0x00002959
    1238:	00002c29 	.word	0x00002c29
    123c:	00002ccd 	.word	0x00002ccd

00001240 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    1240:	b5b0      	push	{r4, r5, r7, lr}
    1242:	b084      	sub	sp, #16
    1244:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    1246:	4b45      	ldr	r3, [pc, #276]	; (135c <mmc_decode_csd+0x11c>)
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	330e      	adds	r3, #14
    124c:	0018      	movs	r0, r3
    124e:	2304      	movs	r3, #4
    1250:	227a      	movs	r2, #122	; 0x7a
    1252:	2180      	movs	r1, #128	; 0x80
    1254:	4c42      	ldr	r4, [pc, #264]	; (1360 <mmc_decode_csd+0x120>)
    1256:	47a0      	blx	r4
    1258:	0003      	movs	r3, r0
    125a:	2b02      	cmp	r3, #2
    125c:	d011      	beq.n	1282 <mmc_decode_csd+0x42>
    125e:	d802      	bhi.n	1266 <mmc_decode_csd+0x26>
    1260:	2b01      	cmp	r3, #1
    1262:	d009      	beq.n	1278 <mmc_decode_csd+0x38>
    1264:	e003      	b.n	126e <mmc_decode_csd+0x2e>
    1266:	2b03      	cmp	r3, #3
    1268:	d010      	beq.n	128c <mmc_decode_csd+0x4c>
    126a:	2b04      	cmp	r3, #4
    126c:	d013      	beq.n	1296 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    126e:	4b3b      	ldr	r3, [pc, #236]	; (135c <mmc_decode_csd+0x11c>)
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	2212      	movs	r2, #18
    1274:	731a      	strb	r2, [r3, #12]
		break;
    1276:	e013      	b.n	12a0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    1278:	4b38      	ldr	r3, [pc, #224]	; (135c <mmc_decode_csd+0x11c>)
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	2214      	movs	r2, #20
    127e:	731a      	strb	r2, [r3, #12]
		break;
    1280:	e00e      	b.n	12a0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    1282:	4b36      	ldr	r3, [pc, #216]	; (135c <mmc_decode_csd+0x11c>)
    1284:	681b      	ldr	r3, [r3, #0]
    1286:	2222      	movs	r2, #34	; 0x22
    1288:	731a      	strb	r2, [r3, #12]
		break;
    128a:	e009      	b.n	12a0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    128c:	4b33      	ldr	r3, [pc, #204]	; (135c <mmc_decode_csd+0x11c>)
    128e:	681b      	ldr	r3, [r3, #0]
    1290:	2230      	movs	r2, #48	; 0x30
    1292:	731a      	strb	r2, [r3, #12]
		break;
    1294:	e004      	b.n	12a0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    1296:	4b31      	ldr	r3, [pc, #196]	; (135c <mmc_decode_csd+0x11c>)
    1298:	681b      	ldr	r3, [r3, #0]
    129a:	2240      	movs	r2, #64	; 0x40
    129c:	731a      	strb	r2, [r3, #12]
		break;
    129e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    12a0:	4b2e      	ldr	r3, [pc, #184]	; (135c <mmc_decode_csd+0x11c>)
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	330e      	adds	r3, #14
    12a6:	0018      	movs	r0, r3
    12a8:	2308      	movs	r3, #8
    12aa:	2260      	movs	r2, #96	; 0x60
    12ac:	2180      	movs	r1, #128	; 0x80
    12ae:	4c2c      	ldr	r4, [pc, #176]	; (1360 <mmc_decode_csd+0x120>)
    12b0:	47a0      	blx	r4
    12b2:	0003      	movs	r3, r0
    12b4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	2207      	movs	r2, #7
    12ba:	401a      	ands	r2, r3
    12bc:	4b29      	ldr	r3, [pc, #164]	; (1364 <mmc_decode_csd+0x124>)
    12be:	0092      	lsls	r2, r2, #2
    12c0:	58d3      	ldr	r3, [r2, r3]
    12c2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	08db      	lsrs	r3, r3, #3
    12c8:	220f      	movs	r2, #15
    12ca:	401a      	ands	r2, r3
    12cc:	4b26      	ldr	r3, [pc, #152]	; (1368 <mmc_decode_csd+0x128>)
    12ce:	0092      	lsls	r2, r2, #2
    12d0:	58d3      	ldr	r3, [r2, r3]
    12d2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    12d4:	4b21      	ldr	r3, [pc, #132]	; (135c <mmc_decode_csd+0x11c>)
    12d6:	681b      	ldr	r3, [r3, #0]
    12d8:	68ba      	ldr	r2, [r7, #8]
    12da:	6879      	ldr	r1, [r7, #4]
    12dc:	434a      	muls	r2, r1
    12de:	21fa      	movs	r1, #250	; 0xfa
    12e0:	0089      	lsls	r1, r1, #2
    12e2:	434a      	muls	r2, r1
    12e4:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    12e6:	4b1d      	ldr	r3, [pc, #116]	; (135c <mmc_decode_csd+0x11c>)
    12e8:	681b      	ldr	r3, [r3, #0]
    12ea:	330e      	adds	r3, #14
    12ec:	0018      	movs	r0, r3
    12ee:	230c      	movs	r3, #12
    12f0:	223e      	movs	r2, #62	; 0x3e
    12f2:	2180      	movs	r1, #128	; 0x80
    12f4:	4c1a      	ldr	r4, [pc, #104]	; (1360 <mmc_decode_csd+0x120>)
    12f6:	47a0      	blx	r4
    12f8:	0002      	movs	r2, r0
    12fa:	4b1c      	ldr	r3, [pc, #112]	; (136c <mmc_decode_csd+0x12c>)
    12fc:	429a      	cmp	r2, r3
    12fe:	d028      	beq.n	1352 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1300:	4b16      	ldr	r3, [pc, #88]	; (135c <mmc_decode_csd+0x11c>)
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	330e      	adds	r3, #14
    1306:	0018      	movs	r0, r3
    1308:	230c      	movs	r3, #12
    130a:	223e      	movs	r2, #62	; 0x3e
    130c:	2180      	movs	r1, #128	; 0x80
    130e:	4c14      	ldr	r4, [pc, #80]	; (1360 <mmc_decode_csd+0x120>)
    1310:	47a0      	blx	r4
    1312:	0003      	movs	r3, r0
    1314:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1316:	4b11      	ldr	r3, [pc, #68]	; (135c <mmc_decode_csd+0x11c>)
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	330e      	adds	r3, #14
    131c:	0018      	movs	r0, r3
    131e:	2303      	movs	r3, #3
    1320:	222f      	movs	r2, #47	; 0x2f
    1322:	2180      	movs	r1, #128	; 0x80
    1324:	4d0e      	ldr	r5, [pc, #56]	; (1360 <mmc_decode_csd+0x120>)
    1326:	47a8      	blx	r5
    1328:	0003      	movs	r3, r0
    132a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    132c:	409c      	lsls	r4, r3
    132e:	0023      	movs	r3, r4
    1330:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1332:	4b0a      	ldr	r3, [pc, #40]	; (135c <mmc_decode_csd+0x11c>)
    1334:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1336:	4b09      	ldr	r3, [pc, #36]	; (135c <mmc_decode_csd+0x11c>)
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	330e      	adds	r3, #14
    133c:	0018      	movs	r0, r3
    133e:	2304      	movs	r3, #4
    1340:	2250      	movs	r2, #80	; 0x50
    1342:	2180      	movs	r1, #128	; 0x80
    1344:	4d06      	ldr	r5, [pc, #24]	; (1360 <mmc_decode_csd+0x120>)
    1346:	47a8      	blx	r5
    1348:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    134a:	683b      	ldr	r3, [r7, #0]
    134c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    134e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1350:	6063      	str	r3, [r4, #4]
	}
}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	46bd      	mov	sp, r7
    1356:	b004      	add	sp, #16
    1358:	bdb0      	pop	{r4, r5, r7, pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	200000e0 	.word	0x200000e0
    1360:	00000d3d 	.word	0x00000d3d
    1364:	0000c228 	.word	0x0000c228
    1368:	0000c284 	.word	0x0000c284
    136c:	00000fff 	.word	0x00000fff

00001370 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    1370:	b5b0      	push	{r4, r5, r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    1376:	4b35      	ldr	r3, [pc, #212]	; (144c <sd_decode_csd+0xdc>)
    1378:	681b      	ldr	r3, [r3, #0]
    137a:	330e      	adds	r3, #14
    137c:	0018      	movs	r0, r3
    137e:	2308      	movs	r3, #8
    1380:	2260      	movs	r2, #96	; 0x60
    1382:	2180      	movs	r1, #128	; 0x80
    1384:	4c32      	ldr	r4, [pc, #200]	; (1450 <sd_decode_csd+0xe0>)
    1386:	47a0      	blx	r4
    1388:	0003      	movs	r3, r0
    138a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	2207      	movs	r2, #7
    1390:	401a      	ands	r2, r3
    1392:	4b30      	ldr	r3, [pc, #192]	; (1454 <sd_decode_csd+0xe4>)
    1394:	0092      	lsls	r2, r2, #2
    1396:	58d3      	ldr	r3, [r2, r3]
    1398:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	08db      	lsrs	r3, r3, #3
    139e:	220f      	movs	r2, #15
    13a0:	401a      	ands	r2, r3
    13a2:	4b2d      	ldr	r3, [pc, #180]	; (1458 <sd_decode_csd+0xe8>)
    13a4:	0092      	lsls	r2, r2, #2
    13a6:	58d3      	ldr	r3, [r2, r3]
    13a8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    13aa:	4b28      	ldr	r3, [pc, #160]	; (144c <sd_decode_csd+0xdc>)
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	68ba      	ldr	r2, [r7, #8]
    13b0:	6879      	ldr	r1, [r7, #4]
    13b2:	434a      	muls	r2, r1
    13b4:	21fa      	movs	r1, #250	; 0xfa
    13b6:	0089      	lsls	r1, r1, #2
    13b8:	434a      	muls	r2, r1
    13ba:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    13bc:	4b23      	ldr	r3, [pc, #140]	; (144c <sd_decode_csd+0xdc>)
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	330e      	adds	r3, #14
    13c2:	0018      	movs	r0, r3
    13c4:	2302      	movs	r3, #2
    13c6:	227e      	movs	r2, #126	; 0x7e
    13c8:	2180      	movs	r1, #128	; 0x80
    13ca:	4c21      	ldr	r4, [pc, #132]	; (1450 <sd_decode_csd+0xe0>)
    13cc:	47a0      	blx	r4
    13ce:	1e03      	subs	r3, r0, #0
    13d0:	d00f      	beq.n	13f2 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    13d2:	4b1e      	ldr	r3, [pc, #120]	; (144c <sd_decode_csd+0xdc>)
    13d4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    13d6:	4b1d      	ldr	r3, [pc, #116]	; (144c <sd_decode_csd+0xdc>)
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	330e      	adds	r3, #14
    13dc:	0018      	movs	r0, r3
    13de:	2316      	movs	r3, #22
    13e0:	2230      	movs	r2, #48	; 0x30
    13e2:	2180      	movs	r1, #128	; 0x80
    13e4:	4d1a      	ldr	r5, [pc, #104]	; (1450 <sd_decode_csd+0xe0>)
    13e6:	47a8      	blx	r5
    13e8:	0003      	movs	r3, r0
				* 512;
    13ea:	3301      	adds	r3, #1
    13ec:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    13ee:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    13f0:	e028      	b.n	1444 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    13f2:	4b16      	ldr	r3, [pc, #88]	; (144c <sd_decode_csd+0xdc>)
    13f4:	681b      	ldr	r3, [r3, #0]
    13f6:	330e      	adds	r3, #14
    13f8:	0018      	movs	r0, r3
    13fa:	230c      	movs	r3, #12
    13fc:	223e      	movs	r2, #62	; 0x3e
    13fe:	2180      	movs	r1, #128	; 0x80
    1400:	4c13      	ldr	r4, [pc, #76]	; (1450 <sd_decode_csd+0xe0>)
    1402:	47a0      	blx	r4
    1404:	0003      	movs	r3, r0
    1406:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1408:	4b10      	ldr	r3, [pc, #64]	; (144c <sd_decode_csd+0xdc>)
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	330e      	adds	r3, #14
    140e:	0018      	movs	r0, r3
    1410:	2303      	movs	r3, #3
    1412:	222f      	movs	r2, #47	; 0x2f
    1414:	2180      	movs	r1, #128	; 0x80
    1416:	4d0e      	ldr	r5, [pc, #56]	; (1450 <sd_decode_csd+0xe0>)
    1418:	47a8      	blx	r5
    141a:	0003      	movs	r3, r0
    141c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    141e:	409c      	lsls	r4, r3
    1420:	0023      	movs	r3, r4
    1422:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1424:	4b09      	ldr	r3, [pc, #36]	; (144c <sd_decode_csd+0xdc>)
    1426:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    1428:	4b08      	ldr	r3, [pc, #32]	; (144c <sd_decode_csd+0xdc>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	330e      	adds	r3, #14
    142e:	0018      	movs	r0, r3
    1430:	2304      	movs	r3, #4
    1432:	2250      	movs	r2, #80	; 0x50
    1434:	2180      	movs	r1, #128	; 0x80
    1436:	4d06      	ldr	r5, [pc, #24]	; (1450 <sd_decode_csd+0xe0>)
    1438:	47a8      	blx	r5
    143a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	4093      	lsls	r3, r2
				/ 1024;
    1440:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1442:	6063      	str	r3, [r4, #4]
}
    1444:	46c0      	nop			; (mov r8, r8)
    1446:	46bd      	mov	sp, r7
    1448:	b004      	add	sp, #16
    144a:	bdb0      	pop	{r4, r5, r7, pc}
    144c:	200000e0 	.word	0x200000e0
    1450:	00000d3d 	.word	0x00000d3d
    1454:	0000c228 	.word	0x0000c228
    1458:	0000c244 	.word	0x0000c244

0000145c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    145c:	b580      	push	{r7, lr}
    145e:	b082      	sub	sp, #8
    1460:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    1462:	4b11      	ldr	r3, [pc, #68]	; (14a8 <sd_mmc_cmd13+0x4c>)
    1464:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    1466:	4b11      	ldr	r3, [pc, #68]	; (14ac <sd_mmc_cmd13+0x50>)
    1468:	2100      	movs	r1, #0
    146a:	0018      	movs	r0, r3
    146c:	4b10      	ldr	r3, [pc, #64]	; (14b0 <sd_mmc_cmd13+0x54>)
    146e:	4798      	blx	r3
    1470:	0003      	movs	r3, r0
    1472:	001a      	movs	r2, r3
    1474:	2301      	movs	r3, #1
    1476:	4053      	eors	r3, r2
    1478:	b2db      	uxtb	r3, r3
    147a:	2b00      	cmp	r3, #0
    147c:	d001      	beq.n	1482 <sd_mmc_cmd13+0x26>
				return false;
    147e:	2300      	movs	r3, #0
    1480:	e00e      	b.n	14a0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    1482:	4b0c      	ldr	r3, [pc, #48]	; (14b4 <sd_mmc_cmd13+0x58>)
    1484:	4798      	blx	r3
    1486:	0002      	movs	r2, r0
    1488:	23ff      	movs	r3, #255	; 0xff
    148a:	4013      	ands	r3, r2
    148c:	d006      	beq.n	149c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	1e5a      	subs	r2, r3, #1
    1492:	607a      	str	r2, [r7, #4]
    1494:	2b00      	cmp	r3, #0
    1496:	d1e6      	bne.n	1466 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1498:	2300      	movs	r3, #0
    149a:	e001      	b.n	14a0 <sd_mmc_cmd13+0x44>
				break;
    149c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    149e:	2301      	movs	r3, #1
}
    14a0:	0018      	movs	r0, r3
    14a2:	46bd      	mov	sp, r7
    14a4:	b002      	add	sp, #8
    14a6:	bd80      	pop	{r7, pc}
    14a8:	00030d40 	.word	0x00030d40
    14ac:	00001b0d 	.word	0x00001b0d
    14b0:	00002931 	.word	0x00002931
    14b4:	00002b71 	.word	0x00002b71

000014b8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    14b8:	b590      	push	{r4, r7, lr}
    14ba:	b085      	sub	sp, #20
    14bc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    14be:	4b38      	ldr	r3, [pc, #224]	; (15a0 <sd_acmd51+0xe8>)
    14c0:	681b      	ldr	r3, [r3, #0]
    14c2:	891b      	ldrh	r3, [r3, #8]
    14c4:	041b      	lsls	r3, r3, #16
    14c6:	4a37      	ldr	r2, [pc, #220]	; (15a4 <sd_acmd51+0xec>)
    14c8:	0019      	movs	r1, r3
    14ca:	0010      	movs	r0, r2
    14cc:	4b36      	ldr	r3, [pc, #216]	; (15a8 <sd_acmd51+0xf0>)
    14ce:	4798      	blx	r3
    14d0:	0003      	movs	r3, r0
    14d2:	001a      	movs	r2, r3
    14d4:	2301      	movs	r3, #1
    14d6:	4053      	eors	r3, r2
    14d8:	b2db      	uxtb	r3, r3
    14da:	2b00      	cmp	r3, #0
    14dc:	d001      	beq.n	14e2 <sd_acmd51+0x2a>
		return false;
    14de:	2300      	movs	r3, #0
    14e0:	e059      	b.n	1596 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    14e2:	4832      	ldr	r0, [pc, #200]	; (15ac <sd_acmd51+0xf4>)
    14e4:	2301      	movs	r3, #1
    14e6:	9300      	str	r3, [sp, #0]
    14e8:	2301      	movs	r3, #1
    14ea:	2208      	movs	r2, #8
    14ec:	2100      	movs	r1, #0
    14ee:	4c30      	ldr	r4, [pc, #192]	; (15b0 <sd_acmd51+0xf8>)
    14f0:	47a0      	blx	r4
    14f2:	0003      	movs	r3, r0
    14f4:	001a      	movs	r2, r3
    14f6:	2301      	movs	r3, #1
    14f8:	4053      	eors	r3, r2
    14fa:	b2db      	uxtb	r3, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	d001      	beq.n	1504 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    1500:	2300      	movs	r3, #0
    1502:	e048      	b.n	1596 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1504:	003b      	movs	r3, r7
    1506:	2101      	movs	r1, #1
    1508:	0018      	movs	r0, r3
    150a:	4b2a      	ldr	r3, [pc, #168]	; (15b4 <sd_acmd51+0xfc>)
    150c:	4798      	blx	r3
    150e:	0003      	movs	r3, r0
    1510:	001a      	movs	r2, r3
    1512:	2301      	movs	r3, #1
    1514:	4053      	eors	r3, r2
    1516:	b2db      	uxtb	r3, r3
    1518:	2b00      	cmp	r3, #0
    151a:	d001      	beq.n	1520 <sd_acmd51+0x68>
		return false;
    151c:	2300      	movs	r3, #0
    151e:	e03a      	b.n	1596 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1520:	4b25      	ldr	r3, [pc, #148]	; (15b8 <sd_acmd51+0x100>)
    1522:	4798      	blx	r3
    1524:	0003      	movs	r3, r0
    1526:	001a      	movs	r2, r3
    1528:	2301      	movs	r3, #1
    152a:	4053      	eors	r3, r2
    152c:	b2db      	uxtb	r3, r3
    152e:	2b00      	cmp	r3, #0
    1530:	d001      	beq.n	1536 <sd_acmd51+0x7e>
		return false;
    1532:	2300      	movs	r3, #0
    1534:	e02f      	b.n	1596 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1536:	0038      	movs	r0, r7
    1538:	2304      	movs	r3, #4
    153a:	2238      	movs	r2, #56	; 0x38
    153c:	2140      	movs	r1, #64	; 0x40
    153e:	4c1f      	ldr	r4, [pc, #124]	; (15bc <sd_acmd51+0x104>)
    1540:	47a0      	blx	r4
    1542:	0003      	movs	r3, r0
    1544:	2b01      	cmp	r3, #1
    1546:	d008      	beq.n	155a <sd_acmd51+0xa2>
    1548:	d302      	bcc.n	1550 <sd_acmd51+0x98>
    154a:	2b02      	cmp	r3, #2
    154c:	d00a      	beq.n	1564 <sd_acmd51+0xac>
    154e:	e01c      	b.n	158a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1550:	4b13      	ldr	r3, [pc, #76]	; (15a0 <sd_acmd51+0xe8>)
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	2210      	movs	r2, #16
    1556:	731a      	strb	r2, [r3, #12]
		break;
    1558:	e01c      	b.n	1594 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    155a:	4b11      	ldr	r3, [pc, #68]	; (15a0 <sd_acmd51+0xe8>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	221a      	movs	r2, #26
    1560:	731a      	strb	r2, [r3, #12]
		break;
    1562:	e017      	b.n	1594 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1564:	0038      	movs	r0, r7
    1566:	2301      	movs	r3, #1
    1568:	222f      	movs	r2, #47	; 0x2f
    156a:	2140      	movs	r1, #64	; 0x40
    156c:	4c13      	ldr	r4, [pc, #76]	; (15bc <sd_acmd51+0x104>)
    156e:	47a0      	blx	r4
    1570:	0003      	movs	r3, r0
    1572:	2b01      	cmp	r3, #1
    1574:	d104      	bne.n	1580 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1576:	4b0a      	ldr	r3, [pc, #40]	; (15a0 <sd_acmd51+0xe8>)
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	2230      	movs	r2, #48	; 0x30
    157c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    157e:	e009      	b.n	1594 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1580:	4b07      	ldr	r3, [pc, #28]	; (15a0 <sd_acmd51+0xe8>)
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	2220      	movs	r2, #32
    1586:	731a      	strb	r2, [r3, #12]
		break;
    1588:	e004      	b.n	1594 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    158a:	4b05      	ldr	r3, [pc, #20]	; (15a0 <sd_acmd51+0xe8>)
    158c:	681b      	ldr	r3, [r3, #0]
    158e:	2210      	movs	r2, #16
    1590:	731a      	strb	r2, [r3, #12]
		break;
    1592:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1594:	2301      	movs	r3, #1
}
    1596:	0018      	movs	r0, r3
    1598:	46bd      	mov	sp, r7
    159a:	b003      	add	sp, #12
    159c:	bd90      	pop	{r4, r7, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	200000e0 	.word	0x200000e0
    15a4:	00001137 	.word	0x00001137
    15a8:	00002931 	.word	0x00002931
    15ac:	00081133 	.word	0x00081133
    15b0:	00002959 	.word	0x00002959
    15b4:	00002c29 	.word	0x00002c29
    15b8:	00002ccd 	.word	0x00002ccd
    15bc:	00000d3d 	.word	0x00000d3d

000015c0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b082      	sub	sp, #8
    15c4:	af00      	add	r7, sp, #0
    15c6:	0002      	movs	r2, r0
    15c8:	1dfb      	adds	r3, r7, #7
    15ca:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    15cc:	1dfb      	adds	r3, r7, #7
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d001      	beq.n	15d8 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    15d4:	2304      	movs	r3, #4
    15d6:	e047      	b.n	1668 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    15d8:	1dfb      	adds	r3, r7, #7
    15da:	781b      	ldrb	r3, [r3, #0]
    15dc:	4a24      	ldr	r2, [pc, #144]	; (1670 <sd_mmc_select_slot+0xb0>)
    15de:	015b      	lsls	r3, r3, #5
    15e0:	18d3      	adds	r3, r2, r3
    15e2:	330a      	adds	r3, #10
    15e4:	781b      	ldrb	r3, [r3, #0]
    15e6:	2b04      	cmp	r3, #4
    15e8:	d008      	beq.n	15fc <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    15ea:	1dfb      	adds	r3, r7, #7
    15ec:	781b      	ldrb	r3, [r3, #0]
    15ee:	4a20      	ldr	r2, [pc, #128]	; (1670 <sd_mmc_select_slot+0xb0>)
    15f0:	015b      	lsls	r3, r3, #5
    15f2:	18d3      	adds	r3, r2, r3
    15f4:	330a      	adds	r3, #10
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	2b03      	cmp	r3, #3
    15fa:	d11d      	bne.n	1638 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    15fc:	1dfb      	adds	r3, r7, #7
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	4a1b      	ldr	r2, [pc, #108]	; (1670 <sd_mmc_select_slot+0xb0>)
    1602:	015b      	lsls	r3, r3, #5
    1604:	18d3      	adds	r3, r2, r3
    1606:	330a      	adds	r3, #10
    1608:	2202      	movs	r2, #2
    160a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    160c:	1dfb      	adds	r3, r7, #7
    160e:	781a      	ldrb	r2, [r3, #0]
    1610:	4b17      	ldr	r3, [pc, #92]	; (1670 <sd_mmc_select_slot+0xb0>)
    1612:	0152      	lsls	r2, r2, #5
    1614:	4917      	ldr	r1, [pc, #92]	; (1674 <sd_mmc_select_slot+0xb4>)
    1616:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1618:	1dfb      	adds	r3, r7, #7
    161a:	781b      	ldrb	r3, [r3, #0]
    161c:	4a14      	ldr	r2, [pc, #80]	; (1670 <sd_mmc_select_slot+0xb0>)
    161e:	015b      	lsls	r3, r3, #5
    1620:	18d3      	adds	r3, r2, r3
    1622:	330d      	adds	r3, #13
    1624:	2201      	movs	r2, #1
    1626:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1628:	1dfb      	adds	r3, r7, #7
    162a:	781b      	ldrb	r3, [r3, #0]
    162c:	4a10      	ldr	r2, [pc, #64]	; (1670 <sd_mmc_select_slot+0xb0>)
    162e:	015b      	lsls	r3, r3, #5
    1630:	18d3      	adds	r3, r2, r3
    1632:	331e      	adds	r3, #30
    1634:	2200      	movs	r2, #0
    1636:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1638:	4b0f      	ldr	r3, [pc, #60]	; (1678 <sd_mmc_select_slot+0xb8>)
    163a:	1dfa      	adds	r2, r7, #7
    163c:	7812      	ldrb	r2, [r2, #0]
    163e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1640:	1dfb      	adds	r3, r7, #7
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	015a      	lsls	r2, r3, #5
    1646:	4b0a      	ldr	r3, [pc, #40]	; (1670 <sd_mmc_select_slot+0xb0>)
    1648:	18d2      	adds	r2, r2, r3
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <sd_mmc_select_slot+0xbc>)
    164c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    164e:	4b0c      	ldr	r3, [pc, #48]	; (1680 <sd_mmc_select_slot+0xc0>)
    1650:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1652:	1dfb      	adds	r3, r7, #7
    1654:	781b      	ldrb	r3, [r3, #0]
    1656:	4a06      	ldr	r2, [pc, #24]	; (1670 <sd_mmc_select_slot+0xb0>)
    1658:	015b      	lsls	r3, r3, #5
    165a:	18d3      	adds	r3, r2, r3
    165c:	330a      	adds	r3, #10
    165e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1660:	3b02      	subs	r3, #2
    1662:	425a      	negs	r2, r3
    1664:	4153      	adcs	r3, r2
    1666:	b2db      	uxtb	r3, r3
}
    1668:	0018      	movs	r0, r3
    166a:	46bd      	mov	sp, r7
    166c:	b002      	add	sp, #8
    166e:	bd80      	pop	{r7, pc}
    1670:	200000bc 	.word	0x200000bc
    1674:	00061a80 	.word	0x00061a80
    1678:	200000dc 	.word	0x200000dc
    167c:	200000e0 	.word	0x200000e0
    1680:	00001685 	.word	0x00001685

00001684 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1684:	b5b0      	push	{r4, r5, r7, lr}
    1686:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1688:	4b09      	ldr	r3, [pc, #36]	; (16b0 <sd_mmc_configure_slot+0x2c>)
    168a:	7818      	ldrb	r0, [r3, #0]
    168c:	4b09      	ldr	r3, [pc, #36]	; (16b4 <sd_mmc_configure_slot+0x30>)
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1692:	4b08      	ldr	r3, [pc, #32]	; (16b4 <sd_mmc_configure_slot+0x30>)
    1694:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1696:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1698:	4b06      	ldr	r3, [pc, #24]	; (16b4 <sd_mmc_configure_slot+0x30>)
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    169e:	1e5c      	subs	r4, r3, #1
    16a0:	41a3      	sbcs	r3, r4
    16a2:	b2db      	uxtb	r3, r3
    16a4:	4c04      	ldr	r4, [pc, #16]	; (16b8 <sd_mmc_configure_slot+0x34>)
    16a6:	47a0      	blx	r4
}
    16a8:	46c0      	nop			; (mov r8, r8)
    16aa:	46bd      	mov	sp, r7
    16ac:	bdb0      	pop	{r4, r5, r7, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	200000dc 	.word	0x200000dc
    16b4:	200000e0 	.word	0x200000e0
    16b8:	00002819 	.word	0x00002819

000016bc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    16c0:	4b05      	ldr	r3, [pc, #20]	; (16d8 <sd_mmc_deselect_slot+0x1c>)
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d104      	bne.n	16d2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    16c8:	4b03      	ldr	r3, [pc, #12]	; (16d8 <sd_mmc_deselect_slot+0x1c>)
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	0018      	movs	r0, r3
    16ce:	4b03      	ldr	r3, [pc, #12]	; (16dc <sd_mmc_deselect_slot+0x20>)
    16d0:	4798      	blx	r3
	}
}
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	46bd      	mov	sp, r7
    16d6:	bd80      	pop	{r7, pc}
    16d8:	200000dc 	.word	0x200000dc
    16dc:	000028a1 	.word	0x000028a1

000016e0 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	b082      	sub	sp, #8
    16e4:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    16e6:	1dfb      	adds	r3, r7, #7
    16e8:	2200      	movs	r2, #0
    16ea:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    16ec:	4b59      	ldr	r3, [pc, #356]	; (1854 <sd_mmc_spi_card_init+0x174>)
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	2201      	movs	r2, #1
    16f2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    16f4:	4b57      	ldr	r3, [pc, #348]	; (1854 <sd_mmc_spi_card_init+0x174>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	2200      	movs	r2, #0
    16fa:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    16fc:	4b55      	ldr	r3, [pc, #340]	; (1854 <sd_mmc_spi_card_init+0x174>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	2200      	movs	r2, #0
    1702:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1704:	4b54      	ldr	r3, [pc, #336]	; (1858 <sd_mmc_spi_card_init+0x178>)
    1706:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1708:	2388      	movs	r3, #136	; 0x88
    170a:	015b      	lsls	r3, r3, #5
    170c:	2100      	movs	r1, #0
    170e:	0018      	movs	r0, r3
    1710:	4b52      	ldr	r3, [pc, #328]	; (185c <sd_mmc_spi_card_init+0x17c>)
    1712:	4798      	blx	r3
    1714:	0003      	movs	r3, r0
    1716:	001a      	movs	r2, r3
    1718:	2301      	movs	r3, #1
    171a:	4053      	eors	r3, r2
    171c:	b2db      	uxtb	r3, r3
    171e:	2b00      	cmp	r3, #0
    1720:	d001      	beq.n	1726 <sd_mmc_spi_card_init+0x46>
		return false;
    1722:	2300      	movs	r3, #0
    1724:	e092      	b.n	184c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1726:	1dfb      	adds	r3, r7, #7
    1728:	0018      	movs	r0, r3
    172a:	4b4d      	ldr	r3, [pc, #308]	; (1860 <sd_mmc_spi_card_init+0x180>)
    172c:	4798      	blx	r3
    172e:	0003      	movs	r3, r0
    1730:	001a      	movs	r2, r3
    1732:	2301      	movs	r3, #1
    1734:	4053      	eors	r3, r2
    1736:	b2db      	uxtb	r3, r3
    1738:	2b00      	cmp	r3, #0
    173a:	d001      	beq.n	1740 <sd_mmc_spi_card_init+0x60>
		return false;
    173c:	2300      	movs	r3, #0
    173e:	e085      	b.n	184c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1740:	4b48      	ldr	r3, [pc, #288]	; (1864 <sd_mmc_spi_card_init+0x184>)
    1742:	4798      	blx	r3
    1744:	0003      	movs	r3, r0
    1746:	001a      	movs	r2, r3
    1748:	2301      	movs	r3, #1
    174a:	4053      	eors	r3, r2
    174c:	b2db      	uxtb	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	d001      	beq.n	1756 <sd_mmc_spi_card_init+0x76>
		return false;
    1752:	2300      	movs	r3, #0
    1754:	e07a      	b.n	184c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1756:	4b3f      	ldr	r3, [pc, #252]	; (1854 <sd_mmc_spi_card_init+0x174>)
    1758:	681b      	ldr	r3, [r3, #0]
    175a:	7adb      	ldrb	r3, [r3, #11]
    175c:	001a      	movs	r2, r3
    175e:	2301      	movs	r3, #1
    1760:	4013      	ands	r3, r2
    1762:	d021      	beq.n	17a8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1764:	1dfb      	adds	r3, r7, #7
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	0018      	movs	r0, r3
    176a:	4b3f      	ldr	r3, [pc, #252]	; (1868 <sd_mmc_spi_card_init+0x188>)
    176c:	4798      	blx	r3
    176e:	0003      	movs	r3, r0
    1770:	001a      	movs	r2, r3
    1772:	2301      	movs	r3, #1
    1774:	4053      	eors	r3, r2
    1776:	b2db      	uxtb	r3, r3
    1778:	2b00      	cmp	r3, #0
    177a:	d007      	beq.n	178c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    177c:	4b35      	ldr	r3, [pc, #212]	; (1854 <sd_mmc_spi_card_init+0x174>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	2202      	movs	r2, #2
    1782:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1784:	4b39      	ldr	r3, [pc, #228]	; (186c <sd_mmc_spi_card_init+0x18c>)
    1786:	4798      	blx	r3
    1788:	0003      	movs	r3, r0
    178a:	e05f      	b.n	184c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    178c:	4b38      	ldr	r3, [pc, #224]	; (1870 <sd_mmc_spi_card_init+0x190>)
    178e:	2100      	movs	r1, #0
    1790:	0018      	movs	r0, r3
    1792:	4b32      	ldr	r3, [pc, #200]	; (185c <sd_mmc_spi_card_init+0x17c>)
    1794:	4798      	blx	r3
    1796:	0003      	movs	r3, r0
    1798:	001a      	movs	r2, r3
    179a:	2301      	movs	r3, #1
    179c:	4053      	eors	r3, r2
    179e:	b2db      	uxtb	r3, r3
    17a0:	2b00      	cmp	r3, #0
    17a2:	d001      	beq.n	17a8 <sd_mmc_spi_card_init+0xc8>
			return false;
    17a4:	2300      	movs	r3, #0
    17a6:	e051      	b.n	184c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    17a8:	4b2a      	ldr	r3, [pc, #168]	; (1854 <sd_mmc_spi_card_init+0x174>)
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	7adb      	ldrb	r3, [r3, #11]
    17ae:	001a      	movs	r2, r3
    17b0:	2301      	movs	r3, #1
    17b2:	4013      	ands	r3, r2
    17b4:	d017      	beq.n	17e6 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    17b6:	4b2f      	ldr	r3, [pc, #188]	; (1874 <sd_mmc_spi_card_init+0x194>)
    17b8:	4798      	blx	r3
    17ba:	0003      	movs	r3, r0
    17bc:	001a      	movs	r2, r3
    17be:	2301      	movs	r3, #1
    17c0:	4053      	eors	r3, r2
    17c2:	b2db      	uxtb	r3, r3
    17c4:	2b00      	cmp	r3, #0
    17c6:	d001      	beq.n	17cc <sd_mmc_spi_card_init+0xec>
			return false;
    17c8:	2300      	movs	r3, #0
    17ca:	e03f      	b.n	184c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    17cc:	4b2a      	ldr	r3, [pc, #168]	; (1878 <sd_mmc_spi_card_init+0x198>)
    17ce:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    17d0:	4b2a      	ldr	r3, [pc, #168]	; (187c <sd_mmc_spi_card_init+0x19c>)
    17d2:	4798      	blx	r3
    17d4:	0003      	movs	r3, r0
    17d6:	001a      	movs	r2, r3
    17d8:	2301      	movs	r3, #1
    17da:	4053      	eors	r3, r2
    17dc:	b2db      	uxtb	r3, r3
    17de:	2b00      	cmp	r3, #0
    17e0:	d001      	beq.n	17e6 <sd_mmc_spi_card_init+0x106>
			return false;
    17e2:	2300      	movs	r3, #0
    17e4:	e032      	b.n	184c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    17e6:	4b1b      	ldr	r3, [pc, #108]	; (1854 <sd_mmc_spi_card_init+0x174>)
    17e8:	681b      	ldr	r3, [r3, #0]
    17ea:	7adb      	ldrb	r3, [r3, #11]
    17ec:	001a      	movs	r2, r3
    17ee:	2301      	movs	r3, #1
    17f0:	4013      	ands	r3, r2
    17f2:	d016      	beq.n	1822 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    17f4:	4b17      	ldr	r3, [pc, #92]	; (1854 <sd_mmc_spi_card_init+0x174>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	7adb      	ldrb	r3, [r3, #11]
    17fa:	001a      	movs	r2, r3
    17fc:	2308      	movs	r3, #8
    17fe:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1800:	d10f      	bne.n	1822 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1802:	2380      	movs	r3, #128	; 0x80
    1804:	009b      	lsls	r3, r3, #2
    1806:	4a1e      	ldr	r2, [pc, #120]	; (1880 <sd_mmc_spi_card_init+0x1a0>)
    1808:	0019      	movs	r1, r3
    180a:	0010      	movs	r0, r2
    180c:	4b13      	ldr	r3, [pc, #76]	; (185c <sd_mmc_spi_card_init+0x17c>)
    180e:	4798      	blx	r3
    1810:	0003      	movs	r3, r0
    1812:	001a      	movs	r2, r3
    1814:	2301      	movs	r3, #1
    1816:	4053      	eors	r3, r2
    1818:	b2db      	uxtb	r3, r3
    181a:	2b00      	cmp	r3, #0
    181c:	d001      	beq.n	1822 <sd_mmc_spi_card_init+0x142>
			return false;
    181e:	2300      	movs	r3, #0
    1820:	e014      	b.n	184c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1822:	4b0c      	ldr	r3, [pc, #48]	; (1854 <sd_mmc_spi_card_init+0x174>)
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	7adb      	ldrb	r3, [r3, #11]
    1828:	001a      	movs	r2, r3
    182a:	2301      	movs	r3, #1
    182c:	4013      	ands	r3, r2
    182e:	d00a      	beq.n	1846 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1830:	4b14      	ldr	r3, [pc, #80]	; (1884 <sd_mmc_spi_card_init+0x1a4>)
    1832:	4798      	blx	r3
    1834:	0003      	movs	r3, r0
    1836:	001a      	movs	r2, r3
    1838:	2301      	movs	r3, #1
    183a:	4053      	eors	r3, r2
    183c:	b2db      	uxtb	r3, r3
    183e:	2b00      	cmp	r3, #0
    1840:	d001      	beq.n	1846 <sd_mmc_spi_card_init+0x166>
			return false;
    1842:	2300      	movs	r3, #0
    1844:	e002      	b.n	184c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1846:	4b10      	ldr	r3, [pc, #64]	; (1888 <sd_mmc_spi_card_init+0x1a8>)
    1848:	4798      	blx	r3
	return true;
    184a:	2301      	movs	r3, #1
}
    184c:	0018      	movs	r0, r3
    184e:	46bd      	mov	sp, r7
    1850:	b002      	add	sp, #8
    1852:	bd80      	pop	{r7, pc}
    1854:	200000e0 	.word	0x200000e0
    1858:	000028e5 	.word	0x000028e5
    185c:	00002931 	.word	0x00002931
    1860:	00001035 	.word	0x00001035
    1864:	00001029 	.word	0x00001029
    1868:	00000f45 	.word	0x00000f45
    186c:	0000188d 	.word	0x0000188d
    1870:	0000113b 	.word	0x0000113b
    1874:	000011d1 	.word	0x000011d1
    1878:	00001371 	.word	0x00001371
    187c:	000014b9 	.word	0x000014b9
    1880:	00001110 	.word	0x00001110
    1884:	0000145d 	.word	0x0000145d
    1888:	00001685 	.word	0x00001685

0000188c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    188c:	b580      	push	{r7, lr}
    188e:	b082      	sub	sp, #8
    1890:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1892:	2388      	movs	r3, #136	; 0x88
    1894:	015b      	lsls	r3, r3, #5
    1896:	2100      	movs	r1, #0
    1898:	0018      	movs	r0, r3
    189a:	4b32      	ldr	r3, [pc, #200]	; (1964 <sd_mmc_spi_install_mmc+0xd8>)
    189c:	4798      	blx	r3
    189e:	0003      	movs	r3, r0
    18a0:	001a      	movs	r2, r3
    18a2:	2301      	movs	r3, #1
    18a4:	4053      	eors	r3, r2
    18a6:	b2db      	uxtb	r3, r3
    18a8:	2b00      	cmp	r3, #0
    18aa:	d001      	beq.n	18b0 <sd_mmc_spi_install_mmc+0x24>
		return false;
    18ac:	2300      	movs	r3, #0
    18ae:	e055      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    18b0:	4b2d      	ldr	r3, [pc, #180]	; (1968 <sd_mmc_spi_install_mmc+0xdc>)
    18b2:	4798      	blx	r3
    18b4:	0003      	movs	r3, r0
    18b6:	001a      	movs	r2, r3
    18b8:	2301      	movs	r3, #1
    18ba:	4053      	eors	r3, r2
    18bc:	b2db      	uxtb	r3, r3
    18be:	2b00      	cmp	r3, #0
    18c0:	d001      	beq.n	18c6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    18c2:	2300      	movs	r3, #0
    18c4:	e04a      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    18c6:	4b29      	ldr	r3, [pc, #164]	; (196c <sd_mmc_spi_install_mmc+0xe0>)
    18c8:	2100      	movs	r1, #0
    18ca:	0018      	movs	r0, r3
    18cc:	4b25      	ldr	r3, [pc, #148]	; (1964 <sd_mmc_spi_install_mmc+0xd8>)
    18ce:	4798      	blx	r3
    18d0:	0003      	movs	r3, r0
    18d2:	001a      	movs	r2, r3
    18d4:	2301      	movs	r3, #1
    18d6:	4053      	eors	r3, r2
    18d8:	b2db      	uxtb	r3, r3
    18da:	2b00      	cmp	r3, #0
    18dc:	d001      	beq.n	18e2 <sd_mmc_spi_install_mmc+0x56>
		return false;
    18de:	2300      	movs	r3, #0
    18e0:	e03c      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    18e2:	4b23      	ldr	r3, [pc, #140]	; (1970 <sd_mmc_spi_install_mmc+0xe4>)
    18e4:	4798      	blx	r3
    18e6:	0003      	movs	r3, r0
    18e8:	001a      	movs	r2, r3
    18ea:	2301      	movs	r3, #1
    18ec:	4053      	eors	r3, r2
    18ee:	b2db      	uxtb	r3, r3
    18f0:	2b00      	cmp	r3, #0
    18f2:	d001      	beq.n	18f8 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    18f4:	2300      	movs	r3, #0
    18f6:	e031      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    18f8:	4b1e      	ldr	r3, [pc, #120]	; (1974 <sd_mmc_spi_install_mmc+0xe8>)
    18fa:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    18fc:	4b1e      	ldr	r3, [pc, #120]	; (1978 <sd_mmc_spi_install_mmc+0xec>)
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	7b1b      	ldrb	r3, [r3, #12]
    1902:	2b3f      	cmp	r3, #63	; 0x3f
    1904:	d90c      	bls.n	1920 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1906:	1dfb      	adds	r3, r7, #7
    1908:	0018      	movs	r0, r3
    190a:	4b1c      	ldr	r3, [pc, #112]	; (197c <sd_mmc_spi_install_mmc+0xf0>)
    190c:	4798      	blx	r3
    190e:	0003      	movs	r3, r0
    1910:	001a      	movs	r2, r3
    1912:	2301      	movs	r3, #1
    1914:	4053      	eors	r3, r2
    1916:	b2db      	uxtb	r3, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d001      	beq.n	1920 <sd_mmc_spi_install_mmc+0x94>
			return false;
    191c:	2300      	movs	r3, #0
    191e:	e01d      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1920:	2380      	movs	r3, #128	; 0x80
    1922:	009b      	lsls	r3, r3, #2
    1924:	4a16      	ldr	r2, [pc, #88]	; (1980 <sd_mmc_spi_install_mmc+0xf4>)
    1926:	0019      	movs	r1, r3
    1928:	0010      	movs	r0, r2
    192a:	4b0e      	ldr	r3, [pc, #56]	; (1964 <sd_mmc_spi_install_mmc+0xd8>)
    192c:	4798      	blx	r3
    192e:	0003      	movs	r3, r0
    1930:	001a      	movs	r2, r3
    1932:	2301      	movs	r3, #1
    1934:	4053      	eors	r3, r2
    1936:	b2db      	uxtb	r3, r3
    1938:	2b00      	cmp	r3, #0
    193a:	d001      	beq.n	1940 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    193c:	2300      	movs	r3, #0
    193e:	e00d      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1940:	4b10      	ldr	r3, [pc, #64]	; (1984 <sd_mmc_spi_install_mmc+0xf8>)
    1942:	4798      	blx	r3
    1944:	0003      	movs	r3, r0
    1946:	001a      	movs	r2, r3
    1948:	2301      	movs	r3, #1
    194a:	4053      	eors	r3, r2
    194c:	b2db      	uxtb	r3, r3
    194e:	2b00      	cmp	r3, #0
    1950:	d001      	beq.n	1956 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1952:	2300      	movs	r3, #0
    1954:	e002      	b.n	195c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1956:	4b0c      	ldr	r3, [pc, #48]	; (1988 <sd_mmc_spi_install_mmc+0xfc>)
    1958:	4798      	blx	r3
	return true;
    195a:	2301      	movs	r3, #1
}
    195c:	0018      	movs	r0, r3
    195e:	46bd      	mov	sp, r7
    1960:	b002      	add	sp, #8
    1962:	bd80      	pop	{r7, pc}
    1964:	00002931 	.word	0x00002931
    1968:	00000e99 	.word	0x00000e99
    196c:	0000113b 	.word	0x0000113b
    1970:	000011d1 	.word	0x000011d1
    1974:	00001241 	.word	0x00001241
    1978:	200000e0 	.word	0x200000e0
    197c:	000010a5 	.word	0x000010a5
    1980:	00001110 	.word	0x00001110
    1984:	0000145d 	.word	0x0000145d
    1988:	00001685 	.word	0x00001685

0000198c <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    198c:	b580      	push	{r7, lr}
    198e:	b082      	sub	sp, #8
    1990:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1992:	1dfb      	adds	r3, r7, #7
    1994:	2200      	movs	r2, #0
    1996:	701a      	strb	r2, [r3, #0]
    1998:	e00c      	b.n	19b4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    199a:	1dfb      	adds	r3, r7, #7
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	4a0c      	ldr	r2, [pc, #48]	; (19d0 <sd_mmc_init+0x44>)
    19a0:	015b      	lsls	r3, r3, #5
    19a2:	18d3      	adds	r3, r2, r3
    19a4:	330a      	adds	r3, #10
    19a6:	2204      	movs	r2, #4
    19a8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    19aa:	1dfb      	adds	r3, r7, #7
    19ac:	781a      	ldrb	r2, [r3, #0]
    19ae:	1dfb      	adds	r3, r7, #7
    19b0:	3201      	adds	r2, #1
    19b2:	701a      	strb	r2, [r3, #0]
    19b4:	1dfb      	adds	r3, r7, #7
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d0ee      	beq.n	199a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <sd_mmc_init+0x48>)
    19be:	22ff      	movs	r2, #255	; 0xff
    19c0:	701a      	strb	r2, [r3, #0]
	driver_init();
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <sd_mmc_init+0x4c>)
    19c4:	4798      	blx	r3
}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	46bd      	mov	sp, r7
    19ca:	b002      	add	sp, #8
    19cc:	bd80      	pop	{r7, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	200000bc 	.word	0x200000bc
    19d4:	200000dc 	.word	0x200000dc
    19d8:	00002751 	.word	0x00002751

000019dc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    19dc:	b590      	push	{r4, r7, lr}
    19de:	b085      	sub	sp, #20
    19e0:	af00      	add	r7, sp, #0
    19e2:	0002      	movs	r2, r0
    19e4:	1dfb      	adds	r3, r7, #7
    19e6:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    19e8:	230f      	movs	r3, #15
    19ea:	18fc      	adds	r4, r7, r3
    19ec:	1dfb      	adds	r3, r7, #7
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	0018      	movs	r0, r3
    19f2:	4b13      	ldr	r3, [pc, #76]	; (1a40 <sd_mmc_check+0x64>)
    19f4:	4798      	blx	r3
    19f6:	0003      	movs	r3, r0
    19f8:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    19fa:	230f      	movs	r3, #15
    19fc:	18fb      	adds	r3, r7, r3
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b01      	cmp	r3, #1
    1a02:	d005      	beq.n	1a10 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1a04:	4b0f      	ldr	r3, [pc, #60]	; (1a44 <sd_mmc_check+0x68>)
    1a06:	4798      	blx	r3
		return sd_mmc_err;
    1a08:	230f      	movs	r3, #15
    1a0a:	18fb      	adds	r3, r7, r3
    1a0c:	781b      	ldrb	r3, [r3, #0]
    1a0e:	e012      	b.n	1a36 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1a10:	4b0d      	ldr	r3, [pc, #52]	; (1a48 <sd_mmc_check+0x6c>)
    1a12:	4798      	blx	r3
    1a14:	1e03      	subs	r3, r0, #0
    1a16:	d007      	beq.n	1a28 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1a18:	4b0c      	ldr	r3, [pc, #48]	; (1a4c <sd_mmc_check+0x70>)
    1a1a:	681b      	ldr	r3, [r3, #0]
    1a1c:	2200      	movs	r2, #0
    1a1e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1a20:	4b08      	ldr	r3, [pc, #32]	; (1a44 <sd_mmc_check+0x68>)
    1a22:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1a24:	2301      	movs	r3, #1
    1a26:	e006      	b.n	1a36 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1a28:	4b08      	ldr	r3, [pc, #32]	; (1a4c <sd_mmc_check+0x70>)
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	2203      	movs	r2, #3
    1a2e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1a30:	4b04      	ldr	r3, [pc, #16]	; (1a44 <sd_mmc_check+0x68>)
    1a32:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1a34:	2303      	movs	r3, #3
}
    1a36:	0018      	movs	r0, r3
    1a38:	46bd      	mov	sp, r7
    1a3a:	b005      	add	sp, #20
    1a3c:	bd90      	pop	{r4, r7, pc}
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	000015c1 	.word	0x000015c1
    1a44:	000016bd 	.word	0x000016bd
    1a48:	000016e1 	.word	0x000016e1
    1a4c:	200000e0 	.word	0x200000e0

00001a50 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1a50:	b580      	push	{r7, lr}
    1a52:	b082      	sub	sp, #8
    1a54:	af00      	add	r7, sp, #0
    1a56:	0002      	movs	r2, r0
    1a58:	1dfb      	adds	r3, r7, #7
    1a5a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1a5c:	1dfb      	adds	r3, r7, #7
    1a5e:	781b      	ldrb	r3, [r3, #0]
    1a60:	0018      	movs	r0, r3
    1a62:	4b07      	ldr	r3, [pc, #28]	; (1a80 <sd_mmc_get_type+0x30>)
    1a64:	4798      	blx	r3
    1a66:	1e03      	subs	r3, r0, #0
    1a68:	d001      	beq.n	1a6e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1a6a:	2300      	movs	r3, #0
    1a6c:	e004      	b.n	1a78 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1a6e:	4b05      	ldr	r3, [pc, #20]	; (1a84 <sd_mmc_get_type+0x34>)
    1a70:	4798      	blx	r3
	return sd_mmc_card->type;
    1a72:	4b05      	ldr	r3, [pc, #20]	; (1a88 <sd_mmc_get_type+0x38>)
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	7adb      	ldrb	r3, [r3, #11]
}
    1a78:	0018      	movs	r0, r3
    1a7a:	46bd      	mov	sp, r7
    1a7c:	b002      	add	sp, #8
    1a7e:	bd80      	pop	{r7, pc}
    1a80:	000015c1 	.word	0x000015c1
    1a84:	000016bd 	.word	0x000016bd
    1a88:	200000e0 	.word	0x200000e0

00001a8c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	0002      	movs	r2, r0
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1a98:	1dfb      	adds	r3, r7, #7
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	0018      	movs	r0, r3
    1a9e:	4b07      	ldr	r3, [pc, #28]	; (1abc <sd_mmc_get_capacity+0x30>)
    1aa0:	4798      	blx	r3
    1aa2:	1e03      	subs	r3, r0, #0
    1aa4:	d001      	beq.n	1aaa <sd_mmc_get_capacity+0x1e>
		return 0;
    1aa6:	2300      	movs	r3, #0
    1aa8:	e004      	b.n	1ab4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <sd_mmc_get_capacity+0x34>)
    1aac:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1aae:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <sd_mmc_get_capacity+0x38>)
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	685b      	ldr	r3, [r3, #4]
}
    1ab4:	0018      	movs	r0, r3
    1ab6:	46bd      	mov	sp, r7
    1ab8:	b002      	add	sp, #8
    1aba:	bd80      	pop	{r7, pc}
    1abc:	000015c1 	.word	0x000015c1
    1ac0:	000016bd 	.word	0x000016bd
    1ac4:	200000e0 	.word	0x200000e0

00001ac8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b082      	sub	sp, #8
    1acc:	af00      	add	r7, sp, #0
    1ace:	0002      	movs	r2, r0
    1ad0:	1dfb      	adds	r3, r7, #7
    1ad2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1ad4:	2300      	movs	r3, #0
}
    1ad6:	0018      	movs	r0, r3
    1ad8:	46bd      	mov	sp, r7
    1ada:	b002      	add	sp, #8
    1adc:	bd80      	pop	{r7, pc}
	...

00001ae0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1ae0:	b590      	push	{r4, r7, lr}
    1ae2:	b089      	sub	sp, #36	; 0x24
    1ae4:	af02      	add	r7, sp, #8
    1ae6:	6039      	str	r1, [r7, #0]
    1ae8:	0011      	movs	r1, r2
    1aea:	1dfb      	adds	r3, r7, #7
    1aec:	1c02      	adds	r2, r0, #0
    1aee:	701a      	strb	r2, [r3, #0]
    1af0:	1d3b      	adds	r3, r7, #4
    1af2:	1c0a      	adds	r2, r1, #0
    1af4:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1af6:	230f      	movs	r3, #15
    1af8:	18fc      	adds	r4, r7, r3
    1afa:	1dfb      	adds	r3, r7, #7
    1afc:	781b      	ldrb	r3, [r3, #0]
    1afe:	0018      	movs	r0, r3
    1b00:	4b29      	ldr	r3, [pc, #164]	; (1ba8 <sd_mmc_init_read_blocks+0xc8>)
    1b02:	4798      	blx	r3
    1b04:	0003      	movs	r3, r0
    1b06:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1b08:	230f      	movs	r3, #15
    1b0a:	18fb      	adds	r3, r7, r3
    1b0c:	781b      	ldrb	r3, [r3, #0]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d003      	beq.n	1b1a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1b12:	230f      	movs	r3, #15
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	781b      	ldrb	r3, [r3, #0]
    1b18:	e041      	b.n	1b9e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1b1a:	4b24      	ldr	r3, [pc, #144]	; (1bac <sd_mmc_init_read_blocks+0xcc>)
    1b1c:	4798      	blx	r3
    1b1e:	0003      	movs	r3, r0
    1b20:	001a      	movs	r2, r3
    1b22:	2301      	movs	r3, #1
    1b24:	4053      	eors	r3, r2
    1b26:	b2db      	uxtb	r3, r3
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d003      	beq.n	1b34 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1b2c:	4b20      	ldr	r3, [pc, #128]	; (1bb0 <sd_mmc_init_read_blocks+0xd0>)
    1b2e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1b30:	2305      	movs	r3, #5
    1b32:	e034      	b.n	1b9e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    1b34:	1d3b      	adds	r3, r7, #4
    1b36:	881b      	ldrh	r3, [r3, #0]
    1b38:	2b01      	cmp	r3, #1
    1b3a:	d902      	bls.n	1b42 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1b3c:	4b1d      	ldr	r3, [pc, #116]	; (1bb4 <sd_mmc_init_read_blocks+0xd4>)
    1b3e:	617b      	str	r3, [r7, #20]
    1b40:	e001      	b.n	1b46 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1b42:	4b1d      	ldr	r3, [pc, #116]	; (1bb8 <sd_mmc_init_read_blocks+0xd8>)
    1b44:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1b46:	4b1d      	ldr	r3, [pc, #116]	; (1bbc <sd_mmc_init_read_blocks+0xdc>)
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	7adb      	ldrb	r3, [r3, #11]
    1b4c:	001a      	movs	r2, r3
    1b4e:	2308      	movs	r3, #8
    1b50:	4013      	ands	r3, r2
    1b52:	d002      	beq.n	1b5a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1b54:	683b      	ldr	r3, [r7, #0]
    1b56:	613b      	str	r3, [r7, #16]
    1b58:	e002      	b.n	1b60 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1b5a:	683b      	ldr	r3, [r7, #0]
    1b5c:	025b      	lsls	r3, r3, #9
    1b5e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1b60:	1d3b      	adds	r3, r7, #4
    1b62:	881c      	ldrh	r4, [r3, #0]
    1b64:	2380      	movs	r3, #128	; 0x80
    1b66:	009a      	lsls	r2, r3, #2
    1b68:	6939      	ldr	r1, [r7, #16]
    1b6a:	6978      	ldr	r0, [r7, #20]
    1b6c:	2301      	movs	r3, #1
    1b6e:	9300      	str	r3, [sp, #0]
    1b70:	0023      	movs	r3, r4
    1b72:	4c13      	ldr	r4, [pc, #76]	; (1bc0 <sd_mmc_init_read_blocks+0xe0>)
    1b74:	47a0      	blx	r4
    1b76:	0003      	movs	r3, r0
    1b78:	001a      	movs	r2, r3
    1b7a:	2301      	movs	r3, #1
    1b7c:	4053      	eors	r3, r2
    1b7e:	b2db      	uxtb	r3, r3
    1b80:	2b00      	cmp	r3, #0
    1b82:	d003      	beq.n	1b8c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1b84:	4b0a      	ldr	r3, [pc, #40]	; (1bb0 <sd_mmc_init_read_blocks+0xd0>)
    1b86:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1b88:	2305      	movs	r3, #5
    1b8a:	e008      	b.n	1b9e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1b8c:	4b0d      	ldr	r3, [pc, #52]	; (1bc4 <sd_mmc_init_read_blocks+0xe4>)
    1b8e:	1d3a      	adds	r2, r7, #4
    1b90:	8812      	ldrh	r2, [r2, #0]
    1b92:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1b94:	4b0c      	ldr	r3, [pc, #48]	; (1bc8 <sd_mmc_init_read_blocks+0xe8>)
    1b96:	1d3a      	adds	r2, r7, #4
    1b98:	8812      	ldrh	r2, [r2, #0]
    1b9a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1b9c:	2300      	movs	r3, #0
}
    1b9e:	0018      	movs	r0, r3
    1ba0:	46bd      	mov	sp, r7
    1ba2:	b007      	add	sp, #28
    1ba4:	bd90      	pop	{r4, r7, pc}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	000015c1 	.word	0x000015c1
    1bac:	0000145d 	.word	0x0000145d
    1bb0:	000016bd 	.word	0x000016bd
    1bb4:	00101112 	.word	0x00101112
    1bb8:	00081111 	.word	0x00081111
    1bbc:	200000e0 	.word	0x200000e0
    1bc0:	00002959 	.word	0x00002959
    1bc4:	200000e6 	.word	0x200000e6
    1bc8:	200000e4 	.word	0x200000e4

00001bcc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b082      	sub	sp, #8
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
    1bd4:	000a      	movs	r2, r1
    1bd6:	1cbb      	adds	r3, r7, #2
    1bd8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1bda:	1cbb      	adds	r3, r7, #2
    1bdc:	881a      	ldrh	r2, [r3, #0]
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	0011      	movs	r1, r2
    1be2:	0018      	movs	r0, r3
    1be4:	4b0d      	ldr	r3, [pc, #52]	; (1c1c <sd_mmc_start_read_blocks+0x50>)
    1be6:	4798      	blx	r3
    1be8:	0003      	movs	r3, r0
    1bea:	001a      	movs	r2, r3
    1bec:	2301      	movs	r3, #1
    1bee:	4053      	eors	r3, r2
    1bf0:	b2db      	uxtb	r3, r3
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d004      	beq.n	1c00 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1bf6:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <sd_mmc_start_read_blocks+0x54>)
    1bf8:	2200      	movs	r2, #0
    1bfa:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1bfc:	2305      	movs	r3, #5
    1bfe:	e008      	b.n	1c12 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1c00:	4b07      	ldr	r3, [pc, #28]	; (1c20 <sd_mmc_start_read_blocks+0x54>)
    1c02:	881a      	ldrh	r2, [r3, #0]
    1c04:	1cbb      	adds	r3, r7, #2
    1c06:	881b      	ldrh	r3, [r3, #0]
    1c08:	1ad3      	subs	r3, r2, r3
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	4b04      	ldr	r3, [pc, #16]	; (1c20 <sd_mmc_start_read_blocks+0x54>)
    1c0e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1c10:	2300      	movs	r3, #0
}
    1c12:	0018      	movs	r0, r3
    1c14:	46bd      	mov	sp, r7
    1c16:	b002      	add	sp, #8
    1c18:	bd80      	pop	{r7, pc}
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	00002c29 	.word	0x00002c29
    1c20:	200000e6 	.word	0x200000e6

00001c24 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b082      	sub	sp, #8
    1c28:	af00      	add	r7, sp, #0
    1c2a:	0002      	movs	r2, r0
    1c2c:	1dfb      	adds	r3, r7, #7
    1c2e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    1c30:	4b1c      	ldr	r3, [pc, #112]	; (1ca4 <sd_mmc_wait_end_of_read_blocks+0x80>)
    1c32:	4798      	blx	r3
    1c34:	0003      	movs	r3, r0
    1c36:	001a      	movs	r2, r3
    1c38:	2301      	movs	r3, #1
    1c3a:	4053      	eors	r3, r2
    1c3c:	b2db      	uxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d001      	beq.n	1c46 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1c42:	2305      	movs	r3, #5
    1c44:	e029      	b.n	1c9a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    1c46:	1dfb      	adds	r3, r7, #7
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d003      	beq.n	1c56 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1c4e:	4b16      	ldr	r3, [pc, #88]	; (1ca8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1c50:	2200      	movs	r2, #0
    1c52:	801a      	strh	r2, [r3, #0]
    1c54:	e005      	b.n	1c62 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1c56:	4b14      	ldr	r3, [pc, #80]	; (1ca8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1c58:	881b      	ldrh	r3, [r3, #0]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d001      	beq.n	1c62 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    1c5e:	2300      	movs	r3, #0
    1c60:	e01b      	b.n	1c9a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1c62:	4b12      	ldr	r3, [pc, #72]	; (1cac <sd_mmc_wait_end_of_read_blocks+0x88>)
    1c64:	881b      	ldrh	r3, [r3, #0]
    1c66:	2b01      	cmp	r3, #1
    1c68:	d103      	bne.n	1c72 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1c6a:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1c6c:	4798      	blx	r3
		return SD_MMC_OK;
    1c6e:	2300      	movs	r3, #0
    1c70:	e013      	b.n	1c9a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1c72:	4b10      	ldr	r3, [pc, #64]	; (1cb4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1c74:	2100      	movs	r1, #0
    1c76:	0018      	movs	r0, r3
    1c78:	4b0f      	ldr	r3, [pc, #60]	; (1cb8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1c7a:	4798      	blx	r3
    1c7c:	0003      	movs	r3, r0
    1c7e:	001a      	movs	r2, r3
    1c80:	2301      	movs	r3, #1
    1c82:	4053      	eors	r3, r2
    1c84:	b2db      	uxtb	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	d004      	beq.n	1c94 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1c8a:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1c8c:	2100      	movs	r1, #0
    1c8e:	0018      	movs	r0, r3
    1c90:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1c92:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1c94:	4b06      	ldr	r3, [pc, #24]	; (1cb0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1c96:	4798      	blx	r3
	return SD_MMC_OK;
    1c98:	2300      	movs	r3, #0
}
    1c9a:	0018      	movs	r0, r3
    1c9c:	46bd      	mov	sp, r7
    1c9e:	b002      	add	sp, #8
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00002ccd 	.word	0x00002ccd
    1ca8:	200000e6 	.word	0x200000e6
    1cac:	200000e4 	.word	0x200000e4
    1cb0:	000016bd 	.word	0x000016bd
    1cb4:	0000310c 	.word	0x0000310c
    1cb8:	00002931 	.word	0x00002931

00001cbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1cbc:	b590      	push	{r4, r7, lr}
    1cbe:	b089      	sub	sp, #36	; 0x24
    1cc0:	af02      	add	r7, sp, #8
    1cc2:	6039      	str	r1, [r7, #0]
    1cc4:	0011      	movs	r1, r2
    1cc6:	1dfb      	adds	r3, r7, #7
    1cc8:	1c02      	adds	r2, r0, #0
    1cca:	701a      	strb	r2, [r3, #0]
    1ccc:	1d3b      	adds	r3, r7, #4
    1cce:	1c0a      	adds	r2, r1, #0
    1cd0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1cd2:	230f      	movs	r3, #15
    1cd4:	18fc      	adds	r4, r7, r3
    1cd6:	1dfb      	adds	r3, r7, #7
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	0018      	movs	r0, r3
    1cdc:	4b28      	ldr	r3, [pc, #160]	; (1d80 <sd_mmc_init_write_blocks+0xc4>)
    1cde:	4798      	blx	r3
    1ce0:	0003      	movs	r3, r0
    1ce2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1ce4:	230f      	movs	r3, #15
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d003      	beq.n	1cf6 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    1cee:	230f      	movs	r3, #15
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	e03f      	b.n	1d76 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    1cf6:	1dfb      	adds	r3, r7, #7
    1cf8:	781b      	ldrb	r3, [r3, #0]
    1cfa:	0018      	movs	r0, r3
    1cfc:	4b21      	ldr	r3, [pc, #132]	; (1d84 <sd_mmc_init_write_blocks+0xc8>)
    1cfe:	4798      	blx	r3
    1d00:	1e03      	subs	r3, r0, #0
    1d02:	d003      	beq.n	1d0c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    1d04:	4b20      	ldr	r3, [pc, #128]	; (1d88 <sd_mmc_init_write_blocks+0xcc>)
    1d06:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    1d08:	2307      	movs	r3, #7
    1d0a:	e034      	b.n	1d76 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    1d0c:	1d3b      	adds	r3, r7, #4
    1d0e:	881b      	ldrh	r3, [r3, #0]
    1d10:	2b01      	cmp	r3, #1
    1d12:	d902      	bls.n	1d1a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1d14:	4b1d      	ldr	r3, [pc, #116]	; (1d8c <sd_mmc_init_write_blocks+0xd0>)
    1d16:	617b      	str	r3, [r7, #20]
    1d18:	e001      	b.n	1d1e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1d1a:	4b1d      	ldr	r3, [pc, #116]	; (1d90 <sd_mmc_init_write_blocks+0xd4>)
    1d1c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1d1e:	4b1d      	ldr	r3, [pc, #116]	; (1d94 <sd_mmc_init_write_blocks+0xd8>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	7adb      	ldrb	r3, [r3, #11]
    1d24:	001a      	movs	r2, r3
    1d26:	2308      	movs	r3, #8
    1d28:	4013      	ands	r3, r2
    1d2a:	d002      	beq.n	1d32 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    1d2c:	683b      	ldr	r3, [r7, #0]
    1d2e:	613b      	str	r3, [r7, #16]
    1d30:	e002      	b.n	1d38 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1d32:	683b      	ldr	r3, [r7, #0]
    1d34:	025b      	lsls	r3, r3, #9
    1d36:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1d38:	1d3b      	adds	r3, r7, #4
    1d3a:	881c      	ldrh	r4, [r3, #0]
    1d3c:	2380      	movs	r3, #128	; 0x80
    1d3e:	009a      	lsls	r2, r3, #2
    1d40:	6939      	ldr	r1, [r7, #16]
    1d42:	6978      	ldr	r0, [r7, #20]
    1d44:	2301      	movs	r3, #1
    1d46:	9300      	str	r3, [sp, #0]
    1d48:	0023      	movs	r3, r4
    1d4a:	4c13      	ldr	r4, [pc, #76]	; (1d98 <sd_mmc_init_write_blocks+0xdc>)
    1d4c:	47a0      	blx	r4
    1d4e:	0003      	movs	r3, r0
    1d50:	001a      	movs	r2, r3
    1d52:	2301      	movs	r3, #1
    1d54:	4053      	eors	r3, r2
    1d56:	b2db      	uxtb	r3, r3
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d003      	beq.n	1d64 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    1d5c:	4b0a      	ldr	r3, [pc, #40]	; (1d88 <sd_mmc_init_write_blocks+0xcc>)
    1d5e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1d60:	2305      	movs	r3, #5
    1d62:	e008      	b.n	1d76 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1d64:	4b0d      	ldr	r3, [pc, #52]	; (1d9c <sd_mmc_init_write_blocks+0xe0>)
    1d66:	1d3a      	adds	r2, r7, #4
    1d68:	8812      	ldrh	r2, [r2, #0]
    1d6a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1d6c:	4b0c      	ldr	r3, [pc, #48]	; (1da0 <sd_mmc_init_write_blocks+0xe4>)
    1d6e:	1d3a      	adds	r2, r7, #4
    1d70:	8812      	ldrh	r2, [r2, #0]
    1d72:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1d74:	2300      	movs	r3, #0
}
    1d76:	0018      	movs	r0, r3
    1d78:	46bd      	mov	sp, r7
    1d7a:	b007      	add	sp, #28
    1d7c:	bd90      	pop	{r4, r7, pc}
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	000015c1 	.word	0x000015c1
    1d84:	00001ac9 	.word	0x00001ac9
    1d88:	000016bd 	.word	0x000016bd
    1d8c:	00109119 	.word	0x00109119
    1d90:	00089118 	.word	0x00089118
    1d94:	200000e0 	.word	0x200000e0
    1d98:	00002959 	.word	0x00002959
    1d9c:	200000e6 	.word	0x200000e6
    1da0:	200000e4 	.word	0x200000e4

00001da4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1da4:	b580      	push	{r7, lr}
    1da6:	b082      	sub	sp, #8
    1da8:	af00      	add	r7, sp, #0
    1daa:	6078      	str	r0, [r7, #4]
    1dac:	000a      	movs	r2, r1
    1dae:	1cbb      	adds	r3, r7, #2
    1db0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1db2:	1cbb      	adds	r3, r7, #2
    1db4:	881a      	ldrh	r2, [r3, #0]
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	0011      	movs	r1, r2
    1dba:	0018      	movs	r0, r3
    1dbc:	4b0d      	ldr	r3, [pc, #52]	; (1df4 <sd_mmc_start_write_blocks+0x50>)
    1dbe:	4798      	blx	r3
    1dc0:	0003      	movs	r3, r0
    1dc2:	001a      	movs	r2, r3
    1dc4:	2301      	movs	r3, #1
    1dc6:	4053      	eors	r3, r2
    1dc8:	b2db      	uxtb	r3, r3
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d004      	beq.n	1dd8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1dce:	4b0a      	ldr	r3, [pc, #40]	; (1df8 <sd_mmc_start_write_blocks+0x54>)
    1dd0:	2200      	movs	r2, #0
    1dd2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1dd4:	2305      	movs	r3, #5
    1dd6:	e008      	b.n	1dea <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1dd8:	4b07      	ldr	r3, [pc, #28]	; (1df8 <sd_mmc_start_write_blocks+0x54>)
    1dda:	881a      	ldrh	r2, [r3, #0]
    1ddc:	1cbb      	adds	r3, r7, #2
    1dde:	881b      	ldrh	r3, [r3, #0]
    1de0:	1ad3      	subs	r3, r2, r3
    1de2:	b29a      	uxth	r2, r3
    1de4:	4b04      	ldr	r3, [pc, #16]	; (1df8 <sd_mmc_start_write_blocks+0x54>)
    1de6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1de8:	2300      	movs	r3, #0
}
    1dea:	0018      	movs	r0, r3
    1dec:	46bd      	mov	sp, r7
    1dee:	b002      	add	sp, #8
    1df0:	bd80      	pop	{r7, pc}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	00002cd9 	.word	0x00002cd9
    1df8:	200000e6 	.word	0x200000e6

00001dfc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	b082      	sub	sp, #8
    1e00:	af00      	add	r7, sp, #0
    1e02:	0002      	movs	r2, r0
    1e04:	1dfb      	adds	r3, r7, #7
    1e06:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    1e08:	4b13      	ldr	r3, [pc, #76]	; (1e58 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    1e0a:	4798      	blx	r3
    1e0c:	0003      	movs	r3, r0
    1e0e:	001a      	movs	r2, r3
    1e10:	2301      	movs	r3, #1
    1e12:	4053      	eors	r3, r2
    1e14:	b2db      	uxtb	r3, r3
    1e16:	2b00      	cmp	r3, #0
    1e18:	d001      	beq.n	1e1e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1e1a:	2305      	movs	r3, #5
    1e1c:	e018      	b.n	1e50 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    1e1e:	1dfb      	adds	r3, r7, #7
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d003      	beq.n	1e2e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1e26:	4b0d      	ldr	r3, [pc, #52]	; (1e5c <sd_mmc_wait_end_of_write_blocks+0x60>)
    1e28:	2200      	movs	r2, #0
    1e2a:	801a      	strh	r2, [r3, #0]
    1e2c:	e005      	b.n	1e3a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <sd_mmc_wait_end_of_write_blocks+0x60>)
    1e30:	881b      	ldrh	r3, [r3, #0]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d001      	beq.n	1e3a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    1e36:	2300      	movs	r3, #0
    1e38:	e00a      	b.n	1e50 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1e3a:	4b09      	ldr	r3, [pc, #36]	; (1e60 <sd_mmc_wait_end_of_write_blocks+0x64>)
    1e3c:	881b      	ldrh	r3, [r3, #0]
    1e3e:	2b01      	cmp	r3, #1
    1e40:	d103      	bne.n	1e4a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1e42:	4b08      	ldr	r3, [pc, #32]	; (1e64 <sd_mmc_wait_end_of_write_blocks+0x68>)
    1e44:	4798      	blx	r3
		return SD_MMC_OK;
    1e46:	2300      	movs	r3, #0
    1e48:	e002      	b.n	1e50 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    1e4a:	4b06      	ldr	r3, [pc, #24]	; (1e64 <sd_mmc_wait_end_of_write_blocks+0x68>)
    1e4c:	4798      	blx	r3
	return SD_MMC_OK;
    1e4e:	2300      	movs	r3, #0
}
    1e50:	0018      	movs	r0, r3
    1e52:	46bd      	mov	sp, r7
    1e54:	b002      	add	sp, #8
    1e56:	bd80      	pop	{r7, pc}
    1e58:	00002d99 	.word	0x00002d99
    1e5c:	200000e6 	.word	0x200000e6
    1e60:	200000e4 	.word	0x200000e4
    1e64:	000016bd 	.word	0x000016bd

00001e68 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b082      	sub	sp, #8
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	0002      	movs	r2, r0
    1e70:	1dfb      	adds	r3, r7, #7
    1e72:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    1e74:	1dfb      	adds	r3, r7, #7
    1e76:	781b      	ldrb	r3, [r3, #0]
    1e78:	0018      	movs	r0, r3
    1e7a:	4b16      	ldr	r3, [pc, #88]	; (1ed4 <sd_mmc_test_unit_ready+0x6c>)
    1e7c:	4798      	blx	r3
    1e7e:	0003      	movs	r3, r0
    1e80:	2b01      	cmp	r3, #1
    1e82:	d019      	beq.n	1eb8 <sd_mmc_test_unit_ready+0x50>
    1e84:	2b02      	cmp	r3, #2
    1e86:	d019      	beq.n	1ebc <sd_mmc_test_unit_ready+0x54>
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d11e      	bne.n	1eca <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    1e8c:	1dfb      	adds	r3, r7, #7
    1e8e:	781b      	ldrb	r3, [r3, #0]
    1e90:	4a11      	ldr	r2, [pc, #68]	; (1ed8 <sd_mmc_test_unit_ready+0x70>)
    1e92:	5cd3      	ldrb	r3, [r2, r3]
    1e94:	2b00      	cmp	r3, #0
    1e96:	d001      	beq.n	1e9c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    1e98:	2302      	movs	r3, #2
    1e9a:	e017      	b.n	1ecc <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    1e9c:	1dfb      	adds	r3, r7, #7
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b0e      	ldr	r3, [pc, #56]	; (1edc <sd_mmc_test_unit_ready+0x74>)
    1ea4:	4798      	blx	r3
    1ea6:	0003      	movs	r3, r0
    1ea8:	001a      	movs	r2, r3
    1eaa:	2303      	movs	r3, #3
    1eac:	4013      	ands	r3, r2
    1eae:	d001      	beq.n	1eb4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    1eb0:	2300      	movs	r3, #0
    1eb2:	e00b      	b.n	1ecc <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    1eb4:	2302      	movs	r3, #2
    1eb6:	e009      	b.n	1ecc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    1eb8:	2303      	movs	r3, #3
    1eba:	e007      	b.n	1ecc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    1ebc:	1dfb      	adds	r3, r7, #7
    1ebe:	781b      	ldrb	r3, [r3, #0]
    1ec0:	4a05      	ldr	r2, [pc, #20]	; (1ed8 <sd_mmc_test_unit_ready+0x70>)
    1ec2:	2100      	movs	r1, #0
    1ec4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    1ec6:	2302      	movs	r3, #2
    1ec8:	e000      	b.n	1ecc <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    1eca:	2301      	movs	r3, #1
	}
}
    1ecc:	0018      	movs	r0, r3
    1ece:	46bd      	mov	sp, r7
    1ed0:	b002      	add	sp, #8
    1ed2:	bd80      	pop	{r7, pc}
    1ed4:	000019dd 	.word	0x000019dd
    1ed8:	200000e8 	.word	0x200000e8
    1edc:	00001a51 	.word	0x00001a51

00001ee0 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    1ee4:	2000      	movs	r0, #0
    1ee6:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <sd_mmc_test_unit_ready_0+0x14>)
    1ee8:	4798      	blx	r3
    1eea:	0003      	movs	r3, r0
}
    1eec:	0018      	movs	r0, r3
    1eee:	46bd      	mov	sp, r7
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	00001e69 	.word	0x00001e69

00001ef8 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b082      	sub	sp, #8
    1efc:	af00      	add	r7, sp, #0
    1efe:	0002      	movs	r2, r0
    1f00:	6039      	str	r1, [r7, #0]
    1f02:	1dfb      	adds	r3, r7, #7
    1f04:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1f06:	1dfb      	adds	r3, r7, #7
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b08      	ldr	r3, [pc, #32]	; (1f30 <sd_mmc_read_capacity+0x38>)
    1f0e:	4798      	blx	r3
    1f10:	0003      	movs	r3, r0
    1f12:	005b      	lsls	r3, r3, #1
    1f14:	1e5a      	subs	r2, r3, #1
    1f16:	683b      	ldr	r3, [r7, #0]
    1f18:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    1f1a:	1dfb      	adds	r3, r7, #7
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	0018      	movs	r0, r3
    1f20:	4b04      	ldr	r3, [pc, #16]	; (1f34 <sd_mmc_read_capacity+0x3c>)
    1f22:	4798      	blx	r3
    1f24:	0003      	movs	r3, r0
}
    1f26:	0018      	movs	r0, r3
    1f28:	46bd      	mov	sp, r7
    1f2a:	b002      	add	sp, #8
    1f2c:	bd80      	pop	{r7, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	00001a8d 	.word	0x00001a8d
    1f34:	00001e69 	.word	0x00001e69

00001f38 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b082      	sub	sp, #8
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    1f40:	687b      	ldr	r3, [r7, #4]
    1f42:	0019      	movs	r1, r3
    1f44:	2000      	movs	r0, #0
    1f46:	4b03      	ldr	r3, [pc, #12]	; (1f54 <sd_mmc_read_capacity_0+0x1c>)
    1f48:	4798      	blx	r3
    1f4a:	0003      	movs	r3, r0
}
    1f4c:	0018      	movs	r0, r3
    1f4e:	46bd      	mov	sp, r7
    1f50:	b002      	add	sp, #8
    1f52:	bd80      	pop	{r7, pc}
    1f54:	00001ef9 	.word	0x00001ef9

00001f58 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b082      	sub	sp, #8
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	0002      	movs	r2, r0
    1f60:	1dfb      	adds	r3, r7, #7
    1f62:	701a      	strb	r2, [r3, #0]
    1f64:	1dbb      	adds	r3, r7, #6
    1f66:	1c0a      	adds	r2, r1, #0
    1f68:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    1f6a:	1dfb      	adds	r3, r7, #7
    1f6c:	781b      	ldrb	r3, [r3, #0]
    1f6e:	4a04      	ldr	r2, [pc, #16]	; (1f80 <sd_mmc_unload+0x28>)
    1f70:	1db9      	adds	r1, r7, #6
    1f72:	7809      	ldrb	r1, [r1, #0]
    1f74:	54d1      	strb	r1, [r2, r3]
	return true;
    1f76:	2301      	movs	r3, #1
}
    1f78:	0018      	movs	r0, r3
    1f7a:	46bd      	mov	sp, r7
    1f7c:	b002      	add	sp, #8
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	200000e8 	.word	0x200000e8

00001f84 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    1f84:	b580      	push	{r7, lr}
    1f86:	b082      	sub	sp, #8
    1f88:	af00      	add	r7, sp, #0
    1f8a:	0002      	movs	r2, r0
    1f8c:	1dfb      	adds	r3, r7, #7
    1f8e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    1f90:	1dfb      	adds	r3, r7, #7
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	0019      	movs	r1, r3
    1f96:	2000      	movs	r0, #0
    1f98:	4b03      	ldr	r3, [pc, #12]	; (1fa8 <sd_mmc_unload_0+0x24>)
    1f9a:	4798      	blx	r3
    1f9c:	0003      	movs	r3, r0
}
    1f9e:	0018      	movs	r0, r3
    1fa0:	46bd      	mov	sp, r7
    1fa2:	b002      	add	sp, #8
    1fa4:	bd80      	pop	{r7, pc}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	00001f59 	.word	0x00001f59

00001fac <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    1fac:	b580      	push	{r7, lr}
    1fae:	b082      	sub	sp, #8
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	0002      	movs	r2, r0
    1fb4:	1dfb      	adds	r3, r7, #7
    1fb6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    1fb8:	1dfb      	adds	r3, r7, #7
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	0018      	movs	r0, r3
    1fbe:	4b03      	ldr	r3, [pc, #12]	; (1fcc <sd_mmc_wr_protect+0x20>)
    1fc0:	4798      	blx	r3
    1fc2:	0003      	movs	r3, r0
}
    1fc4:	0018      	movs	r0, r3
    1fc6:	46bd      	mov	sp, r7
    1fc8:	b002      	add	sp, #8
    1fca:	bd80      	pop	{r7, pc}
    1fcc:	00001ac9 	.word	0x00001ac9

00001fd0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    1fd4:	2000      	movs	r0, #0
    1fd6:	4b03      	ldr	r3, [pc, #12]	; (1fe4 <sd_mmc_wr_protect_0+0x14>)
    1fd8:	4798      	blx	r3
    1fda:	0003      	movs	r3, r0
}
    1fdc:	0018      	movs	r0, r3
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	00001fad 	.word	0x00001fad

00001fe8 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	b082      	sub	sp, #8
    1fec:	af00      	add	r7, sp, #0
    1fee:	0002      	movs	r2, r0
    1ff0:	1dfb      	adds	r3, r7, #7
    1ff2:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    1ff4:	2301      	movs	r3, #1
}
    1ff6:	0018      	movs	r0, r3
    1ff8:	46bd      	mov	sp, r7
    1ffa:	b002      	add	sp, #8
    1ffc:	bd80      	pop	{r7, pc}
	...

00002000 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    2000:	b580      	push	{r7, lr}
    2002:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    2004:	2000      	movs	r0, #0
    2006:	4b03      	ldr	r3, [pc, #12]	; (2014 <STACK_SIZE+0x14>)
    2008:	4798      	blx	r3
    200a:	0003      	movs	r3, r0
}
    200c:	0018      	movs	r0, r3
    200e:	46bd      	mov	sp, r7
    2010:	bd80      	pop	{r7, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	00001fe9 	.word	0x00001fe9

00002018 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2018:	b580      	push	{r7, lr}
    201a:	b084      	sub	sp, #16
    201c:	af00      	add	r7, sp, #0
    201e:	60b9      	str	r1, [r7, #8]
    2020:	607a      	str	r2, [r7, #4]
    2022:	230f      	movs	r3, #15
    2024:	18fb      	adds	r3, r7, r3
    2026:	1c02      	adds	r2, r0, #0
    2028:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    202a:	68b9      	ldr	r1, [r7, #8]
    202c:	230f      	movs	r3, #15
    202e:	18fb      	adds	r3, r7, r3
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2201      	movs	r2, #1
    2034:	0018      	movs	r0, r3
    2036:	4b10      	ldr	r3, [pc, #64]	; (2078 <sd_mmc_mem_2_ram+0x60>)
    2038:	4798      	blx	r3
    203a:	1e03      	subs	r3, r0, #0
    203c:	d005      	beq.n	204a <sd_mmc_mem_2_ram+0x32>
    203e:	2b02      	cmp	r3, #2
    2040:	d101      	bne.n	2046 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    2042:	2302      	movs	r3, #2
    2044:	e013      	b.n	206e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    2046:	2301      	movs	r3, #1
    2048:	e011      	b.n	206e <sd_mmc_mem_2_ram+0x56>
		break;
    204a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    204c:	687b      	ldr	r3, [r7, #4]
    204e:	2101      	movs	r1, #1
    2050:	0018      	movs	r0, r3
    2052:	4b0a      	ldr	r3, [pc, #40]	; (207c <sd_mmc_mem_2_ram+0x64>)
    2054:	4798      	blx	r3
    2056:	1e03      	subs	r3, r0, #0
    2058:	d001      	beq.n	205e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    205a:	2301      	movs	r3, #1
    205c:	e007      	b.n	206e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    205e:	2000      	movs	r0, #0
    2060:	4b07      	ldr	r3, [pc, #28]	; (2080 <sd_mmc_mem_2_ram+0x68>)
    2062:	4798      	blx	r3
    2064:	1e03      	subs	r3, r0, #0
    2066:	d001      	beq.n	206c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    2068:	2301      	movs	r3, #1
    206a:	e000      	b.n	206e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    206c:	2300      	movs	r3, #0
}
    206e:	0018      	movs	r0, r3
    2070:	46bd      	mov	sp, r7
    2072:	b004      	add	sp, #16
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001ae1 	.word	0x00001ae1
    207c:	00001bcd 	.word	0x00001bcd
    2080:	00001c25 	.word	0x00001c25

00002084 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    2084:	b580      	push	{r7, lr}
    2086:	b082      	sub	sp, #8
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
    208c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    208e:	683a      	ldr	r2, [r7, #0]
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	0019      	movs	r1, r3
    2094:	2000      	movs	r0, #0
    2096:	4b03      	ldr	r3, [pc, #12]	; (20a4 <sd_mmc_mem_2_ram_0+0x20>)
    2098:	4798      	blx	r3
    209a:	0003      	movs	r3, r0
}
    209c:	0018      	movs	r0, r3
    209e:	46bd      	mov	sp, r7
    20a0:	b002      	add	sp, #8
    20a2:	bd80      	pop	{r7, pc}
    20a4:	00002019 	.word	0x00002019

000020a8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    20a8:	b580      	push	{r7, lr}
    20aa:	b084      	sub	sp, #16
    20ac:	af00      	add	r7, sp, #0
    20ae:	60b9      	str	r1, [r7, #8]
    20b0:	607a      	str	r2, [r7, #4]
    20b2:	230f      	movs	r3, #15
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	1c02      	adds	r2, r0, #0
    20b8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    20ba:	68b9      	ldr	r1, [r7, #8]
    20bc:	230f      	movs	r3, #15
    20be:	18fb      	adds	r3, r7, r3
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	2201      	movs	r2, #1
    20c4:	0018      	movs	r0, r3
    20c6:	4b10      	ldr	r3, [pc, #64]	; (2108 <sd_mmc_ram_2_mem+0x60>)
    20c8:	4798      	blx	r3
    20ca:	1e03      	subs	r3, r0, #0
    20cc:	d005      	beq.n	20da <sd_mmc_ram_2_mem+0x32>
    20ce:	2b02      	cmp	r3, #2
    20d0:	d101      	bne.n	20d6 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    20d2:	2302      	movs	r3, #2
    20d4:	e013      	b.n	20fe <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    20d6:	2301      	movs	r3, #1
    20d8:	e011      	b.n	20fe <sd_mmc_ram_2_mem+0x56>
		break;
    20da:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	2101      	movs	r1, #1
    20e0:	0018      	movs	r0, r3
    20e2:	4b0a      	ldr	r3, [pc, #40]	; (210c <sd_mmc_ram_2_mem+0x64>)
    20e4:	4798      	blx	r3
    20e6:	1e03      	subs	r3, r0, #0
    20e8:	d001      	beq.n	20ee <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    20ea:	2301      	movs	r3, #1
    20ec:	e007      	b.n	20fe <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    20ee:	2000      	movs	r0, #0
    20f0:	4b07      	ldr	r3, [pc, #28]	; (2110 <sd_mmc_ram_2_mem+0x68>)
    20f2:	4798      	blx	r3
    20f4:	1e03      	subs	r3, r0, #0
    20f6:	d001      	beq.n	20fc <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    20f8:	2301      	movs	r3, #1
    20fa:	e000      	b.n	20fe <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    20fc:	2300      	movs	r3, #0
}
    20fe:	0018      	movs	r0, r3
    2100:	46bd      	mov	sp, r7
    2102:	b004      	add	sp, #16
    2104:	bd80      	pop	{r7, pc}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	00001cbd 	.word	0x00001cbd
    210c:	00001da5 	.word	0x00001da5
    2110:	00001dfd 	.word	0x00001dfd

00002114 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
    211c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    211e:	683a      	ldr	r2, [r7, #0]
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	0019      	movs	r1, r3
    2124:	2000      	movs	r0, #0
    2126:	4b03      	ldr	r3, [pc, #12]	; (2134 <sd_mmc_ram_2_mem_0+0x20>)
    2128:	4798      	blx	r3
    212a:	0003      	movs	r3, r0
}
    212c:	0018      	movs	r0, r3
    212e:	46bd      	mov	sp, r7
    2130:	b002      	add	sp, #8
    2132:	bd80      	pop	{r7, pc}
    2134:	000020a9 	.word	0x000020a9

00002138 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2138:	b580      	push	{r7, lr}
    213a:	b084      	sub	sp, #16
    213c:	af00      	add	r7, sp, #0
    213e:	0002      	movs	r2, r0
    2140:	1dfb      	adds	r3, r7, #7
    2142:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2144:	230f      	movs	r3, #15
    2146:	18fb      	adds	r3, r7, r3
    2148:	1dfa      	adds	r2, r7, #7
    214a:	7812      	ldrb	r2, [r2, #0]
    214c:	09d2      	lsrs	r2, r2, #7
    214e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2150:	230e      	movs	r3, #14
    2152:	18fb      	adds	r3, r7, r3
    2154:	1dfa      	adds	r2, r7, #7
    2156:	7812      	ldrb	r2, [r2, #0]
    2158:	0952      	lsrs	r2, r2, #5
    215a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    215c:	4b0d      	ldr	r3, [pc, #52]	; (2194 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    215e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2160:	230f      	movs	r3, #15
    2162:	18fb      	adds	r3, r7, r3
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2b00      	cmp	r3, #0
    2168:	d10f      	bne.n	218a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    216a:	230f      	movs	r3, #15
    216c:	18fb      	adds	r3, r7, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	009b      	lsls	r3, r3, #2
    2172:	2210      	movs	r2, #16
    2174:	4694      	mov	ip, r2
    2176:	44bc      	add	ip, r7
    2178:	4463      	add	r3, ip
    217a:	3b08      	subs	r3, #8
    217c:	681a      	ldr	r2, [r3, #0]
    217e:	230e      	movs	r3, #14
    2180:	18fb      	adds	r3, r7, r3
    2182:	781b      	ldrb	r3, [r3, #0]
    2184:	01db      	lsls	r3, r3, #7
    2186:	18d3      	adds	r3, r2, r3
    2188:	e000      	b.n	218c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    218a:	2300      	movs	r3, #0
	}
}
    218c:	0018      	movs	r0, r3
    218e:	46bd      	mov	sp, r7
    2190:	b004      	add	sp, #16
    2192:	bd80      	pop	{r7, pc}
    2194:	41004400 	.word	0x41004400

00002198 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2198:	b580      	push	{r7, lr}
    219a:	b082      	sub	sp, #8
    219c:	af00      	add	r7, sp, #0
    219e:	0002      	movs	r2, r0
    21a0:	1dfb      	adds	r3, r7, #7
    21a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    21a4:	1dfb      	adds	r3, r7, #7
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	0018      	movs	r0, r3
    21aa:	4b03      	ldr	r3, [pc, #12]	; (21b8 <port_get_group_from_gpio_pin+0x20>)
    21ac:	4798      	blx	r3
    21ae:	0003      	movs	r3, r0
}
    21b0:	0018      	movs	r0, r3
    21b2:	46bd      	mov	sp, r7
    21b4:	b002      	add	sp, #8
    21b6:	bd80      	pop	{r7, pc}
    21b8:	00002139 	.word	0x00002139

000021bc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    21bc:	b580      	push	{r7, lr}
    21be:	b082      	sub	sp, #8
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	2200      	movs	r2, #0
    21c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	2201      	movs	r2, #1
    21ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	2200      	movs	r2, #0
    21d4:	709a      	strb	r2, [r3, #2]
}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	46bd      	mov	sp, r7
    21da:	b002      	add	sp, #8
    21dc:	bd80      	pop	{r7, pc}
	...

000021e0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b084      	sub	sp, #16
    21e4:	af00      	add	r7, sp, #0
    21e6:	0002      	movs	r2, r0
    21e8:	1dfb      	adds	r3, r7, #7
    21ea:	701a      	strb	r2, [r3, #0]
    21ec:	1dbb      	adds	r3, r7, #6
    21ee:	1c0a      	adds	r2, r1, #0
    21f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    21f2:	1dfb      	adds	r3, r7, #7
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	0018      	movs	r0, r3
    21f8:	4b0d      	ldr	r3, [pc, #52]	; (2230 <port_pin_set_output_level+0x50>)
    21fa:	4798      	blx	r3
    21fc:	0003      	movs	r3, r0
    21fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2200:	1dfb      	adds	r3, r7, #7
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	221f      	movs	r2, #31
    2206:	4013      	ands	r3, r2
    2208:	2201      	movs	r2, #1
    220a:	409a      	lsls	r2, r3
    220c:	0013      	movs	r3, r2
    220e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2210:	1dbb      	adds	r3, r7, #6
    2212:	781b      	ldrb	r3, [r3, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	d003      	beq.n	2220 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2218:	68fb      	ldr	r3, [r7, #12]
    221a:	68ba      	ldr	r2, [r7, #8]
    221c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    221e:	e002      	b.n	2226 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2220:	68fb      	ldr	r3, [r7, #12]
    2222:	68ba      	ldr	r2, [r7, #8]
    2224:	615a      	str	r2, [r3, #20]
}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	46bd      	mov	sp, r7
    222a:	b004      	add	sp, #16
    222c:	bd80      	pop	{r7, pc}
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	00002199 	.word	0x00002199

00002234 <system_interrupt_enable>:
{
    2234:	b580      	push	{r7, lr}
    2236:	b082      	sub	sp, #8
    2238:	af00      	add	r7, sp, #0
    223a:	0002      	movs	r2, r0
    223c:	1dfb      	adds	r3, r7, #7
    223e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2240:	4b06      	ldr	r3, [pc, #24]	; (225c <system_interrupt_enable+0x28>)
    2242:	1dfa      	adds	r2, r7, #7
    2244:	7812      	ldrb	r2, [r2, #0]
    2246:	0011      	movs	r1, r2
    2248:	221f      	movs	r2, #31
    224a:	400a      	ands	r2, r1
    224c:	2101      	movs	r1, #1
    224e:	4091      	lsls	r1, r2
    2250:	000a      	movs	r2, r1
    2252:	601a      	str	r2, [r3, #0]
}
    2254:	46c0      	nop			; (mov r8, r8)
    2256:	46bd      	mov	sp, r7
    2258:	b002      	add	sp, #8
    225a:	bd80      	pop	{r7, pc}
    225c:	e000e100 	.word	0xe000e100

00002260 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2260:	b580      	push	{r7, lr}
    2262:	b084      	sub	sp, #16
    2264:	af00      	add	r7, sp, #0
    2266:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	681b      	ldr	r3, [r3, #0]
    226c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    226e:	68fb      	ldr	r3, [r7, #12]
    2270:	69db      	ldr	r3, [r3, #28]
    2272:	1e5a      	subs	r2, r3, #1
    2274:	4193      	sbcs	r3, r2
    2276:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2278:	0018      	movs	r0, r3
    227a:	46bd      	mov	sp, r7
    227c:	b004      	add	sp, #16
    227e:	bd80      	pop	{r7, pc}

00002280 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2280:	b580      	push	{r7, lr}
    2282:	b082      	sub	sp, #8
    2284:	af00      	add	r7, sp, #0
    2286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	2201      	movs	r2, #1
    228c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	2200      	movs	r2, #0
    2292:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	2200      	movs	r2, #0
    2298:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	22c0      	movs	r2, #192	; 0xc0
    229e:	0392      	lsls	r2, r2, #14
    22a0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	2200      	movs	r2, #0
    22a6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	2200      	movs	r2, #0
    22ac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	2201      	movs	r2, #1
    22b2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	2201      	movs	r2, #1
    22b8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	2200      	movs	r2, #0
    22be:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	2224      	movs	r2, #36	; 0x24
    22c4:	2100      	movs	r1, #0
    22c6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	3318      	adds	r3, #24
    22cc:	220c      	movs	r2, #12
    22ce:	2100      	movs	r1, #0
    22d0:	0018      	movs	r0, r3
    22d2:	4b0a      	ldr	r3, [pc, #40]	; (22fc <spi_get_config_defaults+0x7c>)
    22d4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	4a09      	ldr	r2, [pc, #36]	; (2300 <spi_get_config_defaults+0x80>)
    22da:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	2200      	movs	r2, #0
    22e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2200      	movs	r2, #0
    22e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	2200      	movs	r2, #0
    22ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	2200      	movs	r2, #0
    22f2:	635a      	str	r2, [r3, #52]	; 0x34

};
    22f4:	46c0      	nop			; (mov r8, r8)
    22f6:	46bd      	mov	sp, r7
    22f8:	b002      	add	sp, #8
    22fa:	bd80      	pop	{r7, pc}
    22fc:	0000b373 	.word	0x0000b373
    2300:	000186a0 	.word	0x000186a0

00002304 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2304:	b580      	push	{r7, lr}
    2306:	b082      	sub	sp, #8
    2308:	af00      	add	r7, sp, #0
    230a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	220a      	movs	r2, #10
    2310:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	2200      	movs	r2, #0
    2316:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2318:	687b      	ldr	r3, [r7, #4]
    231a:	2200      	movs	r2, #0
    231c:	709a      	strb	r2, [r3, #2]
}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46bd      	mov	sp, r7
    2322:	b002      	add	sp, #8
    2324:	bd80      	pop	{r7, pc}
	...

00002328 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2328:	b580      	push	{r7, lr}
    232a:	b084      	sub	sp, #16
    232c:	af00      	add	r7, sp, #0
    232e:	6078      	str	r0, [r7, #4]
    2330:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2332:	683b      	ldr	r3, [r7, #0]
    2334:	781a      	ldrb	r2, [r3, #0]
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    233a:	683b      	ldr	r3, [r7, #0]
    233c:	785a      	ldrb	r2, [r3, #1]
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2342:	683b      	ldr	r3, [r7, #0]
    2344:	789a      	ldrb	r2, [r3, #2]
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    234a:	230c      	movs	r3, #12
    234c:	18fb      	adds	r3, r7, r3
    234e:	0018      	movs	r0, r3
    2350:	4b0b      	ldr	r3, [pc, #44]	; (2380 <spi_attach_slave+0x58>)
    2352:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2354:	230c      	movs	r3, #12
    2356:	18fb      	adds	r3, r7, r3
    2358:	2201      	movs	r2, #1
    235a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	781b      	ldrb	r3, [r3, #0]
    2360:	220c      	movs	r2, #12
    2362:	18ba      	adds	r2, r7, r2
    2364:	0011      	movs	r1, r2
    2366:	0018      	movs	r0, r3
    2368:	4b06      	ldr	r3, [pc, #24]	; (2384 <spi_attach_slave+0x5c>)
    236a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	2101      	movs	r1, #1
    2372:	0018      	movs	r0, r3
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <spi_attach_slave+0x60>)
    2376:	4798      	blx	r3
}
    2378:	46c0      	nop			; (mov r8, r8)
    237a:	46bd      	mov	sp, r7
    237c:	b004      	add	sp, #16
    237e:	bd80      	pop	{r7, pc}
    2380:	000021bd 	.word	0x000021bd
    2384:	00003035 	.word	0x00003035
    2388:	000021e1 	.word	0x000021e1

0000238c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    238c:	b580      	push	{r7, lr}
    238e:	b084      	sub	sp, #16
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	681b      	ldr	r3, [r3, #0]
    2398:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	0018      	movs	r0, r3
    23a0:	4b0b      	ldr	r3, [pc, #44]	; (23d0 <spi_enable+0x44>)
    23a2:	4798      	blx	r3
    23a4:	0003      	movs	r3, r0
    23a6:	0018      	movs	r0, r3
    23a8:	4b0a      	ldr	r3, [pc, #40]	; (23d4 <spi_enable+0x48>)
    23aa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    23ac:	46c0      	nop			; (mov r8, r8)
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	0018      	movs	r0, r3
    23b2:	4b09      	ldr	r3, [pc, #36]	; (23d8 <spi_enable+0x4c>)
    23b4:	4798      	blx	r3
    23b6:	1e03      	subs	r3, r0, #0
    23b8:	d1f9      	bne.n	23ae <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    23ba:	68fb      	ldr	r3, [r7, #12]
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	2202      	movs	r2, #2
    23c0:	431a      	orrs	r2, r3
    23c2:	68fb      	ldr	r3, [r7, #12]
    23c4:	601a      	str	r2, [r3, #0]
}
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	46bd      	mov	sp, r7
    23ca:	b004      	add	sp, #16
    23cc:	bd80      	pop	{r7, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	00003bc1 	.word	0x00003bc1
    23d4:	00002235 	.word	0x00002235
    23d8:	00002261 	.word	0x00002261

000023dc <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    23dc:	b580      	push	{r7, lr}
    23de:	b084      	sub	sp, #16
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	000a      	movs	r2, r1
    23e6:	1cfb      	adds	r3, r7, #3
    23e8:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    23ea:	230f      	movs	r3, #15
    23ec:	18fb      	adds	r3, r7, r3
    23ee:	2200      	movs	r2, #0
    23f0:	701a      	strb	r2, [r3, #0]
	while (size--) {
    23f2:	e038      	b.n	2466 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	1c5a      	adds	r2, r3, #1
    23f8:	607a      	str	r2, [r7, #4]
    23fa:	220e      	movs	r2, #14
    23fc:	18ba      	adds	r2, r7, r2
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    2402:	230d      	movs	r3, #13
    2404:	18fb      	adds	r3, r7, r3
    2406:	2200      	movs	r2, #0
    2408:	701a      	strb	r2, [r3, #0]
    240a:	e027      	b.n	245c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    240c:	230f      	movs	r3, #15
    240e:	18fa      	adds	r2, r7, r3
    2410:	230f      	movs	r3, #15
    2412:	18fb      	adds	r3, r7, r3
    2414:	781b      	ldrb	r3, [r3, #0]
    2416:	18db      	adds	r3, r3, r3
    2418:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    241a:	230e      	movs	r3, #14
    241c:	18fa      	adds	r2, r7, r3
    241e:	230f      	movs	r3, #15
    2420:	18fb      	adds	r3, r7, r3
    2422:	7812      	ldrb	r2, [r2, #0]
    2424:	781b      	ldrb	r3, [r3, #0]
    2426:	4053      	eors	r3, r2
    2428:	b2db      	uxtb	r3, r3
    242a:	b25b      	sxtb	r3, r3
    242c:	2b00      	cmp	r3, #0
    242e:	da07      	bge.n	2440 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    2430:	230f      	movs	r3, #15
    2432:	18fb      	adds	r3, r7, r3
    2434:	220f      	movs	r2, #15
    2436:	18ba      	adds	r2, r7, r2
    2438:	7812      	ldrb	r2, [r2, #0]
    243a:	2109      	movs	r1, #9
    243c:	404a      	eors	r2, r1
    243e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    2440:	230e      	movs	r3, #14
    2442:	18fa      	adds	r2, r7, r3
    2444:	230e      	movs	r3, #14
    2446:	18fb      	adds	r3, r7, r3
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	18db      	adds	r3, r3, r3
    244c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    244e:	230d      	movs	r3, #13
    2450:	18fb      	adds	r3, r7, r3
    2452:	781a      	ldrb	r2, [r3, #0]
    2454:	230d      	movs	r3, #13
    2456:	18fb      	adds	r3, r7, r3
    2458:	3201      	adds	r2, #1
    245a:	701a      	strb	r2, [r3, #0]
    245c:	230d      	movs	r3, #13
    245e:	18fb      	adds	r3, r7, r3
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b07      	cmp	r3, #7
    2464:	d9d2      	bls.n	240c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    2466:	1cfb      	adds	r3, r7, #3
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	1cfa      	adds	r2, r7, #3
    246c:	1e59      	subs	r1, r3, #1
    246e:	7011      	strb	r1, [r2, #0]
    2470:	2b00      	cmp	r3, #0
    2472:	d1bf      	bne.n	23f4 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    2474:	230f      	movs	r3, #15
    2476:	18fb      	adds	r3, r7, r3
    2478:	781b      	ldrb	r3, [r3, #0]
    247a:	005b      	lsls	r3, r3, #1
    247c:	b25b      	sxtb	r3, r3
    247e:	2201      	movs	r2, #1
    2480:	4313      	orrs	r3, r2
    2482:	b25a      	sxtb	r2, r3
    2484:	230f      	movs	r3, #15
    2486:	18fb      	adds	r3, r7, r3
    2488:	701a      	strb	r2, [r3, #0]
	return crc;
    248a:	230f      	movs	r3, #15
    248c:	18fb      	adds	r3, r7, r3
    248e:	781b      	ldrb	r3, [r3, #0]
}
    2490:	0018      	movs	r0, r3
    2492:	46bd      	mov	sp, r7
    2494:	b004      	add	sp, #16
    2496:	bd80      	pop	{r7, pc}

00002498 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    2498:	b590      	push	{r4, r7, lr}
    249a:	b083      	sub	sp, #12
    249c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    249e:	1c7b      	adds	r3, r7, #1
    24a0:	22ff      	movs	r2, #255	; 0xff
    24a2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    24a4:	1cbb      	adds	r3, r7, #2
    24a6:	22ff      	movs	r2, #255	; 0xff
    24a8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    24aa:	1cbb      	adds	r3, r7, #2
    24ac:	881b      	ldrh	r3, [r3, #0]
    24ae:	1c79      	adds	r1, r7, #1
    24b0:	4811      	ldr	r0, [pc, #68]	; (24f8 <sd_mmc_spi_wait_busy+0x60>)
    24b2:	2201      	movs	r2, #1
    24b4:	4c11      	ldr	r4, [pc, #68]	; (24fc <sd_mmc_spi_wait_busy+0x64>)
    24b6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    24b8:	4b11      	ldr	r3, [pc, #68]	; (2500 <sd_mmc_spi_wait_busy+0x68>)
    24ba:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    24bc:	1cbb      	adds	r3, r7, #2
    24be:	881b      	ldrh	r3, [r3, #0]
    24c0:	1c79      	adds	r1, r7, #1
    24c2:	480d      	ldr	r0, [pc, #52]	; (24f8 <sd_mmc_spi_wait_busy+0x60>)
    24c4:	2201      	movs	r2, #1
    24c6:	4c0d      	ldr	r4, [pc, #52]	; (24fc <sd_mmc_spi_wait_busy+0x64>)
    24c8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    24ca:	1cbb      	adds	r3, r7, #2
    24cc:	881b      	ldrh	r3, [r3, #0]
    24ce:	1c79      	adds	r1, r7, #1
    24d0:	4809      	ldr	r0, [pc, #36]	; (24f8 <sd_mmc_spi_wait_busy+0x60>)
    24d2:	2201      	movs	r2, #1
    24d4:	4c09      	ldr	r4, [pc, #36]	; (24fc <sd_mmc_spi_wait_busy+0x64>)
    24d6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	1e5a      	subs	r2, r3, #1
    24dc:	607a      	str	r2, [r7, #4]
    24de:	2b00      	cmp	r3, #0
    24e0:	d101      	bne.n	24e6 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    24e2:	2300      	movs	r3, #0
    24e4:	e004      	b.n	24f0 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    24e6:	1c7b      	adds	r3, r7, #1
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	2bff      	cmp	r3, #255	; 0xff
    24ec:	d1ed      	bne.n	24ca <sd_mmc_spi_wait_busy+0x32>
	return true;
    24ee:	2301      	movs	r3, #1
}
    24f0:	0018      	movs	r0, r3
    24f2:	46bd      	mov	sp, r7
    24f4:	b003      	add	sp, #12
    24f6:	bd90      	pop	{r4, r7, pc}
    24f8:	200000ec 	.word	0x200000ec
    24fc:	00004541 	.word	0x00004541
    2500:	00030d40 	.word	0x00030d40

00002504 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2504:	b590      	push	{r4, r7, lr}
    2506:	b083      	sub	sp, #12
    2508:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    250a:	1cbb      	adds	r3, r7, #2
    250c:	22ff      	movs	r2, #255	; 0xff
    250e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    2510:	1c7b      	adds	r3, r7, #1
    2512:	2200      	movs	r2, #0
    2514:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2516:	4b18      	ldr	r3, [pc, #96]	; (2578 <sd_mmc_spi_start_read_block+0x74>)
    2518:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	1e5a      	subs	r2, r3, #1
    251e:	607a      	str	r2, [r7, #4]
    2520:	2b00      	cmp	r3, #0
    2522:	d104      	bne.n	252e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2524:	4b15      	ldr	r3, [pc, #84]	; (257c <sd_mmc_spi_start_read_block+0x78>)
    2526:	2204      	movs	r2, #4
    2528:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    252a:	2300      	movs	r3, #0
    252c:	e020      	b.n	2570 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    252e:	1cbb      	adds	r3, r7, #2
    2530:	881b      	ldrh	r3, [r3, #0]
    2532:	1c79      	adds	r1, r7, #1
    2534:	4812      	ldr	r0, [pc, #72]	; (2580 <sd_mmc_spi_start_read_block+0x7c>)
    2536:	2201      	movs	r2, #1
    2538:	4c12      	ldr	r4, [pc, #72]	; (2584 <sd_mmc_spi_start_read_block+0x80>)
    253a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    253c:	1c7b      	adds	r3, r7, #1
    253e:	781b      	ldrb	r3, [r3, #0]
    2540:	001a      	movs	r2, r3
    2542:	23f0      	movs	r3, #240	; 0xf0
    2544:	4013      	ands	r3, r2
    2546:	d10e      	bne.n	2566 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2548:	1c7b      	adds	r3, r7, #1
    254a:	781b      	ldrb	r3, [r3, #0]
    254c:	001a      	movs	r2, r3
    254e:	2307      	movs	r3, #7
    2550:	4013      	ands	r3, r2
    2552:	d003      	beq.n	255c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2554:	4b09      	ldr	r3, [pc, #36]	; (257c <sd_mmc_spi_start_read_block+0x78>)
    2556:	2207      	movs	r2, #7
    2558:	701a      	strb	r2, [r3, #0]
    255a:	e002      	b.n	2562 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    255c:	4b07      	ldr	r3, [pc, #28]	; (257c <sd_mmc_spi_start_read_block+0x78>)
    255e:	220b      	movs	r2, #11
    2560:	701a      	strb	r2, [r3, #0]
			}
			return false;
    2562:	2300      	movs	r3, #0
    2564:	e004      	b.n	2570 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    2566:	1c7b      	adds	r3, r7, #1
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	2bfe      	cmp	r3, #254	; 0xfe
    256c:	d1d5      	bne.n	251a <sd_mmc_spi_start_read_block+0x16>

	return true;
    256e:	2301      	movs	r3, #1
}
    2570:	0018      	movs	r0, r3
    2572:	46bd      	mov	sp, r7
    2574:	b003      	add	sp, #12
    2576:	bd90      	pop	{r4, r7, pc}
    2578:	0007a120 	.word	0x0007a120
    257c:	2000012f 	.word	0x2000012f
    2580:	200000ec 	.word	0x200000ec
    2584:	00004541 	.word	0x00004541

00002588 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2588:	b590      	push	{r4, r7, lr}
    258a:	b083      	sub	sp, #12
    258c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    258e:	1dbb      	adds	r3, r7, #6
    2590:	22ff      	movs	r2, #255	; 0xff
    2592:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2594:	1dbb      	adds	r3, r7, #6
    2596:	881b      	ldrh	r3, [r3, #0]
    2598:	1d39      	adds	r1, r7, #4
    259a:	4804      	ldr	r0, [pc, #16]	; (25ac <sd_mmc_spi_stop_read_block+0x24>)
    259c:	2202      	movs	r2, #2
    259e:	4c04      	ldr	r4, [pc, #16]	; (25b0 <sd_mmc_spi_stop_read_block+0x28>)
    25a0:	47a0      	blx	r4
			dummy);
}
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	46bd      	mov	sp, r7
    25a6:	b003      	add	sp, #12
    25a8:	bd90      	pop	{r4, r7, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	200000ec 	.word	0x200000ec
    25b0:	00004541 	.word	0x00004541

000025b4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    25b4:	b580      	push	{r7, lr}
    25b6:	b082      	sub	sp, #8
    25b8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    25ba:	1dfb      	adds	r3, r7, #7
    25bc:	22ff      	movs	r2, #255	; 0xff
    25be:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    25c0:	1df9      	adds	r1, r7, #7
    25c2:	4b0d      	ldr	r3, [pc, #52]	; (25f8 <sd_mmc_spi_start_write_block+0x44>)
    25c4:	2201      	movs	r2, #1
    25c6:	0018      	movs	r0, r3
    25c8:	4b0c      	ldr	r3, [pc, #48]	; (25fc <sd_mmc_spi_start_write_block+0x48>)
    25ca:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    25cc:	4b0c      	ldr	r3, [pc, #48]	; (2600 <sd_mmc_spi_start_write_block+0x4c>)
    25ce:	881b      	ldrh	r3, [r3, #0]
    25d0:	2b01      	cmp	r3, #1
    25d2:	d103      	bne.n	25dc <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    25d4:	1dbb      	adds	r3, r7, #6
    25d6:	22fe      	movs	r2, #254	; 0xfe
    25d8:	701a      	strb	r2, [r3, #0]
    25da:	e002      	b.n	25e2 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    25dc:	1dbb      	adds	r3, r7, #6
    25de:	22fc      	movs	r2, #252	; 0xfc
    25e0:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    25e2:	1db9      	adds	r1, r7, #6
    25e4:	4b04      	ldr	r3, [pc, #16]	; (25f8 <sd_mmc_spi_start_write_block+0x44>)
    25e6:	2201      	movs	r2, #1
    25e8:	0018      	movs	r0, r3
    25ea:	4b04      	ldr	r3, [pc, #16]	; (25fc <sd_mmc_spi_start_write_block+0x48>)
    25ec:	4798      	blx	r3
}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	46bd      	mov	sp, r7
    25f2:	b002      	add	sp, #8
    25f4:	bd80      	pop	{r7, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	200000ec 	.word	0x200000ec
    25fc:	00004765 	.word	0x00004765
    2600:	2000013a 	.word	0x2000013a

00002604 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2604:	b590      	push	{r4, r7, lr}
    2606:	b083      	sub	sp, #12
    2608:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    260a:	1dbb      	adds	r3, r7, #6
    260c:	22ff      	movs	r2, #255	; 0xff
    260e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2610:	1cbb      	adds	r3, r7, #2
    2612:	2201      	movs	r2, #1
    2614:	4252      	negs	r2, r2
    2616:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2618:	1cb9      	adds	r1, r7, #2
    261a:	4b1b      	ldr	r3, [pc, #108]	; (2688 <sd_mmc_spi_stop_write_block+0x84>)
    261c:	2202      	movs	r2, #2
    261e:	0018      	movs	r0, r3
    2620:	4b1a      	ldr	r3, [pc, #104]	; (268c <sd_mmc_spi_stop_write_block+0x88>)
    2622:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2624:	1dbb      	adds	r3, r7, #6
    2626:	881b      	ldrh	r3, [r3, #0]
    2628:	1d79      	adds	r1, r7, #5
    262a:	4817      	ldr	r0, [pc, #92]	; (2688 <sd_mmc_spi_stop_write_block+0x84>)
    262c:	2201      	movs	r2, #1
    262e:	4c18      	ldr	r4, [pc, #96]	; (2690 <sd_mmc_spi_stop_write_block+0x8c>)
    2630:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2632:	1d7b      	adds	r3, r7, #5
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	001a      	movs	r2, r3
    2638:	2310      	movs	r3, #16
    263a:	4013      	ands	r3, r2
    263c:	d105      	bne.n	264a <sd_mmc_spi_stop_write_block+0x46>
    263e:	1d7b      	adds	r3, r7, #5
    2640:	781b      	ldrb	r3, [r3, #0]
    2642:	001a      	movs	r2, r3
    2644:	2301      	movs	r3, #1
    2646:	4013      	ands	r3, r2
    2648:	d104      	bne.n	2654 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    264a:	4b12      	ldr	r3, [pc, #72]	; (2694 <sd_mmc_spi_stop_write_block+0x90>)
    264c:	2201      	movs	r2, #1
    264e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2650:	2300      	movs	r3, #0
    2652:	e014      	b.n	267e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2654:	1d7b      	adds	r3, r7, #5
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	001a      	movs	r2, r3
    265a:	231e      	movs	r3, #30
    265c:	4013      	ands	r3, r2
    265e:	2b04      	cmp	r3, #4
    2660:	d00b      	beq.n	267a <sd_mmc_spi_stop_write_block+0x76>
    2662:	2b0a      	cmp	r3, #10
    2664:	d104      	bne.n	2670 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2666:	4b0b      	ldr	r3, [pc, #44]	; (2694 <sd_mmc_spi_stop_write_block+0x90>)
    2668:	2208      	movs	r2, #8
    266a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    266c:	2300      	movs	r3, #0
    266e:	e006      	b.n	267e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2670:	4b08      	ldr	r3, [pc, #32]	; (2694 <sd_mmc_spi_stop_write_block+0x90>)
    2672:	220a      	movs	r2, #10
    2674:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2676:	2300      	movs	r3, #0
    2678:	e001      	b.n	267e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    267a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    267c:	2301      	movs	r3, #1
}
    267e:	0018      	movs	r0, r3
    2680:	46bd      	mov	sp, r7
    2682:	b003      	add	sp, #12
    2684:	bd90      	pop	{r4, r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	200000ec 	.word	0x200000ec
    268c:	00004765 	.word	0x00004765
    2690:	00004541 	.word	0x00004541
    2694:	2000012f 	.word	0x2000012f

00002698 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2698:	b590      	push	{r4, r7, lr}
    269a:	b083      	sub	sp, #12
    269c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    269e:	4b1d      	ldr	r3, [pc, #116]	; (2714 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    26a0:	881b      	ldrh	r3, [r3, #0]
    26a2:	2b01      	cmp	r3, #1
    26a4:	d101      	bne.n	26aa <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    26a6:	2301      	movs	r3, #1
    26a8:	e030      	b.n	270c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    26aa:	4b1a      	ldr	r3, [pc, #104]	; (2714 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    26ac:	881b      	ldrh	r3, [r3, #0]
    26ae:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    26b0:	4b19      	ldr	r3, [pc, #100]	; (2718 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    26b2:	681a      	ldr	r2, [r3, #0]
    26b4:	4b19      	ldr	r3, [pc, #100]	; (271c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    26b6:	881b      	ldrh	r3, [r3, #0]
    26b8:	0019      	movs	r1, r3
    26ba:	4b19      	ldr	r3, [pc, #100]	; (2720 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    26bc:	0010      	movs	r0, r2
    26be:	4798      	blx	r3
    26c0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    26c2:	429c      	cmp	r4, r3
    26c4:	d901      	bls.n	26ca <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    26c6:	2301      	movs	r3, #1
    26c8:	e020      	b.n	270c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    26ca:	1dfb      	adds	r3, r7, #7
    26cc:	22ff      	movs	r2, #255	; 0xff
    26ce:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    26d0:	1df9      	adds	r1, r7, #7
    26d2:	4b14      	ldr	r3, [pc, #80]	; (2724 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    26d4:	2201      	movs	r2, #1
    26d6:	0018      	movs	r0, r3
    26d8:	4b13      	ldr	r3, [pc, #76]	; (2728 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    26da:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    26dc:	1dfb      	adds	r3, r7, #7
    26de:	22fd      	movs	r2, #253	; 0xfd
    26e0:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    26e2:	1df9      	adds	r1, r7, #7
    26e4:	4b0f      	ldr	r3, [pc, #60]	; (2724 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    26e6:	2201      	movs	r2, #1
    26e8:	0018      	movs	r0, r3
    26ea:	4b0f      	ldr	r3, [pc, #60]	; (2728 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    26ec:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    26ee:	4b0f      	ldr	r3, [pc, #60]	; (272c <sd_mmc_spi_stop_multiwrite_block+0x94>)
    26f0:	4798      	blx	r3
    26f2:	0003      	movs	r3, r0
    26f4:	001a      	movs	r2, r3
    26f6:	2301      	movs	r3, #1
    26f8:	4053      	eors	r3, r2
    26fa:	b2db      	uxtb	r3, r3
    26fc:	2b00      	cmp	r3, #0
    26fe:	d004      	beq.n	270a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2700:	4b0b      	ldr	r3, [pc, #44]	; (2730 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2702:	2205      	movs	r2, #5
    2704:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2706:	2300      	movs	r3, #0
    2708:	e000      	b.n	270c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    270a:	2301      	movs	r3, #1
}
    270c:	0018      	movs	r0, r3
    270e:	46bd      	mov	sp, r7
    2710:	b003      	add	sp, #12
    2712:	bd90      	pop	{r4, r7, pc}
    2714:	2000013a 	.word	0x2000013a
    2718:	20000134 	.word	0x20000134
    271c:	20000138 	.word	0x20000138
    2720:	0000afc5 	.word	0x0000afc5
    2724:	200000ec 	.word	0x200000ec
    2728:	00004765 	.word	0x00004765
    272c:	00002499 	.word	0x00002499
    2730:	2000012f 	.word	0x2000012f

00002734 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2734:	b580      	push	{r7, lr}
    2736:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2738:	4b03      	ldr	r3, [pc, #12]	; (2748 <sd_mmc_deinit+0x14>)
    273a:	0018      	movs	r0, r3
    273c:	4b03      	ldr	r3, [pc, #12]	; (274c <sd_mmc_deinit+0x18>)
    273e:	4798      	blx	r3
}
    2740:	46c0      	nop			; (mov r8, r8)
    2742:	46bd      	mov	sp, r7
    2744:	bd80      	pop	{r7, pc}
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	200000ec 	.word	0x200000ec
    274c:	00004099 	.word	0x00004099

00002750 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2750:	b580      	push	{r7, lr}
    2752:	b090      	sub	sp, #64	; 0x40
    2754:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2756:	4b1f      	ldr	r3, [pc, #124]	; (27d4 <sd_mmc_spi_init+0x84>)
    2758:	2200      	movs	r2, #0
    275a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    275c:	233c      	movs	r3, #60	; 0x3c
    275e:	18fb      	adds	r3, r7, r3
    2760:	0018      	movs	r0, r3
    2762:	4b1d      	ldr	r3, [pc, #116]	; (27d8 <sd_mmc_spi_init+0x88>)
    2764:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2766:	1d3b      	adds	r3, r7, #4
    2768:	0018      	movs	r0, r3
    276a:	4b1c      	ldr	r3, [pc, #112]	; (27dc <sd_mmc_spi_init+0x8c>)
    276c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    276e:	1d3b      	adds	r3, r7, #4
    2770:	2280      	movs	r2, #128	; 0x80
    2772:	0252      	lsls	r2, r2, #9
    2774:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2776:	1d3b      	adds	r3, r7, #4
    2778:	4a19      	ldr	r2, [pc, #100]	; (27e0 <sd_mmc_spi_init+0x90>)
    277a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    277c:	1d3b      	adds	r3, r7, #4
    277e:	4a19      	ldr	r2, [pc, #100]	; (27e4 <sd_mmc_spi_init+0x94>)
    2780:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2782:	1d3b      	adds	r3, r7, #4
    2784:	4a18      	ldr	r2, [pc, #96]	; (27e8 <sd_mmc_spi_init+0x98>)
    2786:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2788:	1d3b      	adds	r3, r7, #4
    278a:	4a18      	ldr	r2, [pc, #96]	; (27ec <sd_mmc_spi_init+0x9c>)
    278c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    278e:	1d3b      	adds	r3, r7, #4
    2790:	2224      	movs	r2, #36	; 0x24
    2792:	2100      	movs	r1, #0
    2794:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2796:	1d3b      	adds	r3, r7, #4
    2798:	4a15      	ldr	r2, [pc, #84]	; (27f0 <sd_mmc_spi_init+0xa0>)
    279a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    279c:	1d3a      	adds	r2, r7, #4
    279e:	4915      	ldr	r1, [pc, #84]	; (27f4 <sd_mmc_spi_init+0xa4>)
    27a0:	4b15      	ldr	r3, [pc, #84]	; (27f8 <sd_mmc_spi_init+0xa8>)
    27a2:	0018      	movs	r0, r3
    27a4:	4b15      	ldr	r3, [pc, #84]	; (27fc <sd_mmc_spi_init+0xac>)
    27a6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    27a8:	4b13      	ldr	r3, [pc, #76]	; (27f8 <sd_mmc_spi_init+0xa8>)
    27aa:	0018      	movs	r0, r3
    27ac:	4b14      	ldr	r3, [pc, #80]	; (2800 <sd_mmc_spi_init+0xb0>)
    27ae:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    27b0:	4b14      	ldr	r3, [pc, #80]	; (2804 <sd_mmc_spi_init+0xb4>)
    27b2:	0018      	movs	r0, r3
    27b4:	4b14      	ldr	r3, [pc, #80]	; (2808 <sd_mmc_spi_init+0xb8>)
    27b6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    27b8:	4b14      	ldr	r3, [pc, #80]	; (280c <sd_mmc_spi_init+0xbc>)
    27ba:	781a      	ldrb	r2, [r3, #0]
    27bc:	4b11      	ldr	r3, [pc, #68]	; (2804 <sd_mmc_spi_init+0xb4>)
    27be:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    27c0:	4a10      	ldr	r2, [pc, #64]	; (2804 <sd_mmc_spi_init+0xb4>)
    27c2:	4b13      	ldr	r3, [pc, #76]	; (2810 <sd_mmc_spi_init+0xc0>)
    27c4:	0011      	movs	r1, r2
    27c6:	0018      	movs	r0, r3
    27c8:	4b12      	ldr	r3, [pc, #72]	; (2814 <sd_mmc_spi_init+0xc4>)
    27ca:	4798      	blx	r3
}
    27cc:	46c0      	nop			; (mov r8, r8)
    27ce:	46bd      	mov	sp, r7
    27d0:	b010      	add	sp, #64	; 0x40
    27d2:	bd80      	pop	{r7, pc}
    27d4:	2000012f 	.word	0x2000012f
    27d8:	000021bd 	.word	0x000021bd
    27dc:	00002281 	.word	0x00002281
    27e0:	00100002 	.word	0x00100002
    27e4:	00110002 	.word	0x00110002
    27e8:	00120002 	.word	0x00120002
    27ec:	00130002 	.word	0x00130002
    27f0:	00061a80 	.word	0x00061a80
    27f4:	42000c00 	.word	0x42000c00
    27f8:	200000ec 	.word	0x200000ec
    27fc:	000043b1 	.word	0x000043b1
    2800:	0000238d 	.word	0x0000238d
    2804:	2000012c 	.word	0x2000012c
    2808:	00002305 	.word	0x00002305
    280c:	20000008 	.word	0x20000008
    2810:	20000128 	.word	0x20000128
    2814:	00002329 	.word	0x00002329

00002818 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2818:	b590      	push	{r4, r7, lr}
    281a:	b083      	sub	sp, #12
    281c:	af00      	add	r7, sp, #0
    281e:	0004      	movs	r4, r0
    2820:	6039      	str	r1, [r7, #0]
    2822:	0010      	movs	r0, r2
    2824:	0019      	movs	r1, r3
    2826:	1dfb      	adds	r3, r7, #7
    2828:	1c22      	adds	r2, r4, #0
    282a:	701a      	strb	r2, [r3, #0]
    282c:	1dbb      	adds	r3, r7, #6
    282e:	1c02      	adds	r2, r0, #0
    2830:	701a      	strb	r2, [r3, #0]
    2832:	1d7b      	adds	r3, r7, #5
    2834:	1c0a      	adds	r2, r1, #0
    2836:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2838:	4b13      	ldr	r3, [pc, #76]	; (2888 <sd_mmc_spi_select_device+0x70>)
    283a:	2200      	movs	r2, #0
    283c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    283e:	683b      	ldr	r3, [r7, #0]
    2840:	4a12      	ldr	r2, [pc, #72]	; (288c <sd_mmc_spi_select_device+0x74>)
    2842:	4293      	cmp	r3, r2
    2844:	d907      	bls.n	2856 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2846:	4b11      	ldr	r3, [pc, #68]	; (288c <sd_mmc_spi_select_device+0x74>)
    2848:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    284a:	e004      	b.n	2856 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    284c:	683b      	ldr	r3, [r7, #0]
    284e:	08db      	lsrs	r3, r3, #3
    2850:	683a      	ldr	r2, [r7, #0]
    2852:	1ad3      	subs	r3, r2, r3
    2854:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2856:	683a      	ldr	r2, [r7, #0]
    2858:	4b0d      	ldr	r3, [pc, #52]	; (2890 <sd_mmc_spi_select_device+0x78>)
    285a:	0011      	movs	r1, r2
    285c:	0018      	movs	r0, r3
    285e:	4b0d      	ldr	r3, [pc, #52]	; (2894 <sd_mmc_spi_select_device+0x7c>)
    2860:	4798      	blx	r3
    2862:	0003      	movs	r3, r0
    2864:	2b17      	cmp	r3, #23
    2866:	d0f1      	beq.n	284c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2868:	1dfb      	adds	r3, r7, #7
    286a:	781a      	ldrb	r2, [r3, #0]
    286c:	0013      	movs	r3, r2
    286e:	005b      	lsls	r3, r3, #1
    2870:	189b      	adds	r3, r3, r2
    2872:	4a09      	ldr	r2, [pc, #36]	; (2898 <sd_mmc_spi_select_device+0x80>)
    2874:	1899      	adds	r1, r3, r2
    2876:	4b06      	ldr	r3, [pc, #24]	; (2890 <sd_mmc_spi_select_device+0x78>)
    2878:	2201      	movs	r2, #1
    287a:	0018      	movs	r0, r3
    287c:	4b07      	ldr	r3, [pc, #28]	; (289c <sd_mmc_spi_select_device+0x84>)
    287e:	4798      	blx	r3
}
    2880:	46c0      	nop			; (mov r8, r8)
    2882:	46bd      	mov	sp, r7
    2884:	b003      	add	sp, #12
    2886:	bd90      	pop	{r4, r7, pc}
    2888:	2000012f 	.word	0x2000012f
    288c:	00989680 	.word	0x00989680
    2890:	200000ec 	.word	0x200000ec
    2894:	000040d9 	.word	0x000040d9
    2898:	20000128 	.word	0x20000128
    289c:	00004675 	.word	0x00004675

000028a0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	0002      	movs	r2, r0
    28a8:	1dfb      	adds	r3, r7, #7
    28aa:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    28ac:	4b09      	ldr	r3, [pc, #36]	; (28d4 <sd_mmc_spi_deselect_device+0x34>)
    28ae:	2200      	movs	r2, #0
    28b0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    28b2:	1dfb      	adds	r3, r7, #7
    28b4:	781a      	ldrb	r2, [r3, #0]
    28b6:	0013      	movs	r3, r2
    28b8:	005b      	lsls	r3, r3, #1
    28ba:	189b      	adds	r3, r3, r2
    28bc:	4a06      	ldr	r2, [pc, #24]	; (28d8 <sd_mmc_spi_deselect_device+0x38>)
    28be:	1899      	adds	r1, r3, r2
    28c0:	4b06      	ldr	r3, [pc, #24]	; (28dc <sd_mmc_spi_deselect_device+0x3c>)
    28c2:	2200      	movs	r2, #0
    28c4:	0018      	movs	r0, r3
    28c6:	4b06      	ldr	r3, [pc, #24]	; (28e0 <sd_mmc_spi_deselect_device+0x40>)
    28c8:	4798      	blx	r3
}
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	46bd      	mov	sp, r7
    28ce:	b002      	add	sp, #8
    28d0:	bd80      	pop	{r7, pc}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	2000012f 	.word	0x2000012f
    28d8:	20000128 	.word	0x20000128
    28dc:	200000ec 	.word	0x200000ec
    28e0:	00004675 	.word	0x00004675

000028e4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	b082      	sub	sp, #8
    28e8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    28ea:	1dbb      	adds	r3, r7, #6
    28ec:	22ff      	movs	r2, #255	; 0xff
    28ee:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    28f0:	4b0c      	ldr	r3, [pc, #48]	; (2924 <sd_mmc_spi_send_clock+0x40>)
    28f2:	2200      	movs	r2, #0
    28f4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    28f6:	1dfb      	adds	r3, r7, #7
    28f8:	2200      	movs	r2, #0
    28fa:	701a      	strb	r2, [r3, #0]
    28fc:	e00a      	b.n	2914 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    28fe:	1db9      	adds	r1, r7, #6
    2900:	4b09      	ldr	r3, [pc, #36]	; (2928 <sd_mmc_spi_send_clock+0x44>)
    2902:	2201      	movs	r2, #1
    2904:	0018      	movs	r0, r3
    2906:	4b09      	ldr	r3, [pc, #36]	; (292c <sd_mmc_spi_send_clock+0x48>)
    2908:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    290a:	1dfb      	adds	r3, r7, #7
    290c:	781a      	ldrb	r2, [r3, #0]
    290e:	1dfb      	adds	r3, r7, #7
    2910:	3201      	adds	r2, #1
    2912:	701a      	strb	r2, [r3, #0]
    2914:	1dfb      	adds	r3, r7, #7
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	2b09      	cmp	r3, #9
    291a:	d9f0      	bls.n	28fe <sd_mmc_spi_send_clock+0x1a>
	}
}
    291c:	46c0      	nop			; (mov r8, r8)
    291e:	46bd      	mov	sp, r7
    2920:	b002      	add	sp, #8
    2922:	bd80      	pop	{r7, pc}
    2924:	2000012f 	.word	0x2000012f
    2928:	200000ec 	.word	0x200000ec
    292c:	00004765 	.word	0x00004765

00002930 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2930:	b590      	push	{r4, r7, lr}
    2932:	b085      	sub	sp, #20
    2934:	af02      	add	r7, sp, #8
    2936:	6078      	str	r0, [r7, #4]
    2938:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    293a:	6839      	ldr	r1, [r7, #0]
    293c:	6878      	ldr	r0, [r7, #4]
    293e:	2300      	movs	r3, #0
    2940:	9300      	str	r3, [sp, #0]
    2942:	2300      	movs	r3, #0
    2944:	2200      	movs	r2, #0
    2946:	4c03      	ldr	r4, [pc, #12]	; (2954 <sd_mmc_spi_send_cmd+0x24>)
    2948:	47a0      	blx	r4
    294a:	0003      	movs	r3, r0
}
    294c:	0018      	movs	r0, r3
    294e:	46bd      	mov	sp, r7
    2950:	b003      	add	sp, #12
    2952:	bd90      	pop	{r4, r7, pc}
    2954:	00002959 	.word	0x00002959

00002958 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2958:	b590      	push	{r4, r7, lr}
    295a:	b089      	sub	sp, #36	; 0x24
    295c:	af00      	add	r7, sp, #0
    295e:	60f8      	str	r0, [r7, #12]
    2960:	60b9      	str	r1, [r7, #8]
    2962:	0019      	movs	r1, r3
    2964:	1dbb      	adds	r3, r7, #6
    2966:	801a      	strh	r2, [r3, #0]
    2968:	1d3b      	adds	r3, r7, #4
    296a:	1c0a      	adds	r2, r1, #0
    296c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    296e:	231b      	movs	r3, #27
    2970:	18fb      	adds	r3, r7, r3
    2972:	22ff      	movs	r2, #255	; 0xff
    2974:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2976:	231c      	movs	r3, #28
    2978:	18fb      	adds	r3, r7, r3
    297a:	22ff      	movs	r2, #255	; 0xff
    297c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    297e:	4b72      	ldr	r3, [pc, #456]	; (2b48 <sd_mmc_spi_adtc_start+0x1f0>)
    2980:	2200      	movs	r2, #0
    2982:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2984:	68fb      	ldr	r3, [r7, #12]
    2986:	b2db      	uxtb	r3, r3
    2988:	223f      	movs	r2, #63	; 0x3f
    298a:	4013      	ands	r3, r2
    298c:	b2db      	uxtb	r3, r3
    298e:	2240      	movs	r2, #64	; 0x40
    2990:	4313      	orrs	r3, r2
    2992:	b2da      	uxtb	r2, r3
    2994:	2314      	movs	r3, #20
    2996:	18fb      	adds	r3, r7, r3
    2998:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    299a:	68bb      	ldr	r3, [r7, #8]
    299c:	0e1b      	lsrs	r3, r3, #24
    299e:	b2da      	uxtb	r2, r3
    29a0:	2314      	movs	r3, #20
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    29a6:	68bb      	ldr	r3, [r7, #8]
    29a8:	0c1b      	lsrs	r3, r3, #16
    29aa:	b2da      	uxtb	r2, r3
    29ac:	2314      	movs	r3, #20
    29ae:	18fb      	adds	r3, r7, r3
    29b0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    29b2:	68bb      	ldr	r3, [r7, #8]
    29b4:	0a1b      	lsrs	r3, r3, #8
    29b6:	b2da      	uxtb	r2, r3
    29b8:	2314      	movs	r3, #20
    29ba:	18fb      	adds	r3, r7, r3
    29bc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    29be:	68bb      	ldr	r3, [r7, #8]
    29c0:	b2da      	uxtb	r2, r3
    29c2:	2314      	movs	r3, #20
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    29c8:	2314      	movs	r3, #20
    29ca:	18fb      	adds	r3, r7, r3
    29cc:	2105      	movs	r1, #5
    29ce:	0018      	movs	r0, r3
    29d0:	4b5e      	ldr	r3, [pc, #376]	; (2b4c <sd_mmc_spi_adtc_start+0x1f4>)
    29d2:	4798      	blx	r3
    29d4:	0003      	movs	r3, r0
    29d6:	001a      	movs	r2, r3
    29d8:	2314      	movs	r3, #20
    29da:	18fb      	adds	r3, r7, r3
    29dc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    29de:	231b      	movs	r3, #27
    29e0:	18f9      	adds	r1, r7, r3
    29e2:	4b5b      	ldr	r3, [pc, #364]	; (2b50 <sd_mmc_spi_adtc_start+0x1f8>)
    29e4:	2201      	movs	r2, #1
    29e6:	0018      	movs	r0, r3
    29e8:	4b5a      	ldr	r3, [pc, #360]	; (2b54 <sd_mmc_spi_adtc_start+0x1fc>)
    29ea:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    29ec:	2314      	movs	r3, #20
    29ee:	18f9      	adds	r1, r7, r3
    29f0:	4b57      	ldr	r3, [pc, #348]	; (2b50 <sd_mmc_spi_adtc_start+0x1f8>)
    29f2:	2206      	movs	r2, #6
    29f4:	0018      	movs	r0, r3
    29f6:	4b57      	ldr	r3, [pc, #348]	; (2b54 <sd_mmc_spi_adtc_start+0x1fc>)
    29f8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    29fa:	2313      	movs	r3, #19
    29fc:	18fb      	adds	r3, r7, r3
    29fe:	22ff      	movs	r2, #255	; 0xff
    2a00:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2a02:	231c      	movs	r3, #28
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	881b      	ldrh	r3, [r3, #0]
    2a08:	2213      	movs	r2, #19
    2a0a:	18b9      	adds	r1, r7, r2
    2a0c:	4850      	ldr	r0, [pc, #320]	; (2b50 <sd_mmc_spi_adtc_start+0x1f8>)
    2a0e:	2201      	movs	r2, #1
    2a10:	4c51      	ldr	r4, [pc, #324]	; (2b58 <sd_mmc_spi_adtc_start+0x200>)
    2a12:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2a14:	231f      	movs	r3, #31
    2a16:	18fb      	adds	r3, r7, r3
    2a18:	2207      	movs	r2, #7
    2a1a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2a1c:	231c      	movs	r3, #28
    2a1e:	18fb      	adds	r3, r7, r3
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	2213      	movs	r2, #19
    2a24:	18b9      	adds	r1, r7, r2
    2a26:	484a      	ldr	r0, [pc, #296]	; (2b50 <sd_mmc_spi_adtc_start+0x1f8>)
    2a28:	2201      	movs	r2, #1
    2a2a:	4c4b      	ldr	r4, [pc, #300]	; (2b58 <sd_mmc_spi_adtc_start+0x200>)
    2a2c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2a2e:	2313      	movs	r3, #19
    2a30:	18fb      	adds	r3, r7, r3
    2a32:	781b      	ldrb	r3, [r3, #0]
    2a34:	b25b      	sxtb	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	da10      	bge.n	2a5c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2a3a:	231f      	movs	r3, #31
    2a3c:	18fb      	adds	r3, r7, r3
    2a3e:	221f      	movs	r2, #31
    2a40:	18ba      	adds	r2, r7, r2
    2a42:	7812      	ldrb	r2, [r2, #0]
    2a44:	3a01      	subs	r2, #1
    2a46:	701a      	strb	r2, [r3, #0]
    2a48:	231f      	movs	r3, #31
    2a4a:	18fb      	adds	r3, r7, r3
    2a4c:	781b      	ldrb	r3, [r3, #0]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d1e4      	bne.n	2a1c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2a52:	4b3d      	ldr	r3, [pc, #244]	; (2b48 <sd_mmc_spi_adtc_start+0x1f0>)
    2a54:	2202      	movs	r2, #2
    2a56:	701a      	strb	r2, [r3, #0]
			return false;
    2a58:	2300      	movs	r3, #0
    2a5a:	e070      	b.n	2b3e <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2a5c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2a5e:	2313      	movs	r3, #19
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	001a      	movs	r2, r3
    2a66:	4b3d      	ldr	r3, [pc, #244]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2a68:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2a6a:	2313      	movs	r3, #19
    2a6c:	18fb      	adds	r3, r7, r3
    2a6e:	781b      	ldrb	r3, [r3, #0]
    2a70:	001a      	movs	r2, r3
    2a72:	2308      	movs	r3, #8
    2a74:	4013      	ands	r3, r2
    2a76:	d004      	beq.n	2a82 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2a78:	4b33      	ldr	r3, [pc, #204]	; (2b48 <sd_mmc_spi_adtc_start+0x1f0>)
    2a7a:	2206      	movs	r2, #6
    2a7c:	701a      	strb	r2, [r3, #0]
		return false;
    2a7e:	2300      	movs	r3, #0
    2a80:	e05d      	b.n	2b3e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2a82:	2313      	movs	r3, #19
    2a84:	18fb      	adds	r3, r7, r3
    2a86:	781b      	ldrb	r3, [r3, #0]
    2a88:	001a      	movs	r2, r3
    2a8a:	2304      	movs	r3, #4
    2a8c:	4013      	ands	r3, r2
    2a8e:	d004      	beq.n	2a9a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2a90:	4b2d      	ldr	r3, [pc, #180]	; (2b48 <sd_mmc_spi_adtc_start+0x1f0>)
    2a92:	2209      	movs	r2, #9
    2a94:	701a      	strb	r2, [r3, #0]
		return false;
    2a96:	2300      	movs	r3, #0
    2a98:	e051      	b.n	2b3e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2a9a:	2313      	movs	r3, #19
    2a9c:	18fb      	adds	r3, r7, r3
    2a9e:	781b      	ldrb	r3, [r3, #0]
    2aa0:	001a      	movs	r2, r3
    2aa2:	2301      	movs	r3, #1
    2aa4:	439a      	bics	r2, r3
    2aa6:	1e13      	subs	r3, r2, #0
    2aa8:	d004      	beq.n	2ab4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2aaa:	4b27      	ldr	r3, [pc, #156]	; (2b48 <sd_mmc_spi_adtc_start+0x1f0>)
    2aac:	2201      	movs	r2, #1
    2aae:	701a      	strb	r2, [r3, #0]
		return false;
    2ab0:	2300      	movs	r3, #0
    2ab2:	e044      	b.n	2b3e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2ab4:	68fa      	ldr	r2, [r7, #12]
    2ab6:	2380      	movs	r3, #128	; 0x80
    2ab8:	019b      	lsls	r3, r3, #6
    2aba:	4013      	ands	r3, r2
    2abc:	d00d      	beq.n	2ada <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2abe:	4b28      	ldr	r3, [pc, #160]	; (2b60 <sd_mmc_spi_adtc_start+0x208>)
    2ac0:	4798      	blx	r3
    2ac2:	0003      	movs	r3, r0
    2ac4:	001a      	movs	r2, r3
    2ac6:	2301      	movs	r3, #1
    2ac8:	4053      	eors	r3, r2
    2aca:	b2db      	uxtb	r3, r3
    2acc:	2b00      	cmp	r3, #0
    2ace:	d004      	beq.n	2ada <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2ad0:	4b1d      	ldr	r3, [pc, #116]	; (2b48 <sd_mmc_spi_adtc_start+0x1f0>)
    2ad2:	2203      	movs	r2, #3
    2ad4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2ad6:	2300      	movs	r3, #0
    2ad8:	e031      	b.n	2b3e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2ada:	68fa      	ldr	r2, [r7, #12]
    2adc:	2380      	movs	r3, #128	; 0x80
    2ade:	009b      	lsls	r3, r3, #2
    2ae0:	4013      	ands	r3, r2
    2ae2:	d00e      	beq.n	2b02 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2ae4:	4b1d      	ldr	r3, [pc, #116]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2ae6:	2200      	movs	r2, #0
    2ae8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2aea:	231c      	movs	r3, #28
    2aec:	18fb      	adds	r3, r7, r3
    2aee:	881b      	ldrh	r3, [r3, #0]
    2af0:	491a      	ldr	r1, [pc, #104]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2af2:	4817      	ldr	r0, [pc, #92]	; (2b50 <sd_mmc_spi_adtc_start+0x1f8>)
    2af4:	2201      	movs	r2, #1
    2af6:	4c18      	ldr	r4, [pc, #96]	; (2b58 <sd_mmc_spi_adtc_start+0x200>)
    2af8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2afa:	4b18      	ldr	r3, [pc, #96]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2afc:	681a      	ldr	r2, [r3, #0]
    2afe:	4b17      	ldr	r3, [pc, #92]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2b00:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2b02:	68fa      	ldr	r2, [r7, #12]
    2b04:	2380      	movs	r3, #128	; 0x80
    2b06:	00db      	lsls	r3, r3, #3
    2b08:	4013      	ands	r3, r2
    2b0a:	d00c      	beq.n	2b26 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2b0c:	231c      	movs	r3, #28
    2b0e:	18fb      	adds	r3, r7, r3
    2b10:	881b      	ldrh	r3, [r3, #0]
    2b12:	4912      	ldr	r1, [pc, #72]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2b14:	480e      	ldr	r0, [pc, #56]	; (2b50 <sd_mmc_spi_adtc_start+0x1f8>)
    2b16:	2204      	movs	r2, #4
    2b18:	4c0f      	ldr	r4, [pc, #60]	; (2b58 <sd_mmc_spi_adtc_start+0x200>)
    2b1a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2b1c:	4b0f      	ldr	r3, [pc, #60]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	ba1a      	rev	r2, r3
    2b22:	4b0e      	ldr	r3, [pc, #56]	; (2b5c <sd_mmc_spi_adtc_start+0x204>)
    2b24:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2b26:	4b0f      	ldr	r3, [pc, #60]	; (2b64 <sd_mmc_spi_adtc_start+0x20c>)
    2b28:	1dba      	adds	r2, r7, #6
    2b2a:	8812      	ldrh	r2, [r2, #0]
    2b2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2b2e:	4b0e      	ldr	r3, [pc, #56]	; (2b68 <sd_mmc_spi_adtc_start+0x210>)
    2b30:	1d3a      	adds	r2, r7, #4
    2b32:	8812      	ldrh	r2, [r2, #0]
    2b34:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2b36:	4b0d      	ldr	r3, [pc, #52]	; (2b6c <sd_mmc_spi_adtc_start+0x214>)
    2b38:	2200      	movs	r2, #0
    2b3a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2b3c:	2301      	movs	r3, #1
}
    2b3e:	0018      	movs	r0, r3
    2b40:	46bd      	mov	sp, r7
    2b42:	b009      	add	sp, #36	; 0x24
    2b44:	bd90      	pop	{r4, r7, pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	2000012f 	.word	0x2000012f
    2b4c:	000023dd 	.word	0x000023dd
    2b50:	200000ec 	.word	0x200000ec
    2b54:	00004765 	.word	0x00004765
    2b58:	00004541 	.word	0x00004541
    2b5c:	20000130 	.word	0x20000130
    2b60:	00002499 	.word	0x00002499
    2b64:	20000138 	.word	0x20000138
    2b68:	2000013a 	.word	0x2000013a
    2b6c:	20000134 	.word	0x20000134

00002b70 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2b70:	b580      	push	{r7, lr}
    2b72:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2b74:	4b02      	ldr	r3, [pc, #8]	; (2b80 <sd_mmc_spi_get_response+0x10>)
    2b76:	681b      	ldr	r3, [r3, #0]
}
    2b78:	0018      	movs	r0, r3
    2b7a:	46bd      	mov	sp, r7
    2b7c:	bd80      	pop	{r7, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	20000130 	.word	0x20000130

00002b84 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2b84:	b590      	push	{r4, r7, lr}
    2b86:	b085      	sub	sp, #20
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2b8c:	230e      	movs	r3, #14
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	22ff      	movs	r2, #255	; 0xff
    2b92:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2b94:	4b1c      	ldr	r3, [pc, #112]	; (2c08 <sd_mmc_spi_read_word+0x84>)
    2b96:	2200      	movs	r2, #0
    2b98:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2b9a:	4b1c      	ldr	r3, [pc, #112]	; (2c0c <sd_mmc_spi_read_word+0x88>)
    2b9c:	681a      	ldr	r2, [r3, #0]
    2b9e:	4b1c      	ldr	r3, [pc, #112]	; (2c10 <sd_mmc_spi_read_word+0x8c>)
    2ba0:	881b      	ldrh	r3, [r3, #0]
    2ba2:	0019      	movs	r1, r3
    2ba4:	4b1b      	ldr	r3, [pc, #108]	; (2c14 <sd_mmc_spi_read_word+0x90>)
    2ba6:	0010      	movs	r0, r2
    2ba8:	4798      	blx	r3
    2baa:	1e0b      	subs	r3, r1, #0
    2bac:	d10a      	bne.n	2bc4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    2bae:	4b1a      	ldr	r3, [pc, #104]	; (2c18 <sd_mmc_spi_read_word+0x94>)
    2bb0:	4798      	blx	r3
    2bb2:	0003      	movs	r3, r0
    2bb4:	001a      	movs	r2, r3
    2bb6:	2301      	movs	r3, #1
    2bb8:	4053      	eors	r3, r2
    2bba:	b2db      	uxtb	r3, r3
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d001      	beq.n	2bc4 <sd_mmc_spi_read_word+0x40>
			return false;
    2bc0:	2300      	movs	r3, #0
    2bc2:	e01d      	b.n	2c00 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    2bc4:	230e      	movs	r3, #14
    2bc6:	18fb      	adds	r3, r7, r3
    2bc8:	881b      	ldrh	r3, [r3, #0]
    2bca:	1d39      	adds	r1, r7, #4
    2bcc:	4813      	ldr	r0, [pc, #76]	; (2c1c <sd_mmc_spi_read_word+0x98>)
    2bce:	2204      	movs	r2, #4
    2bd0:	4c13      	ldr	r4, [pc, #76]	; (2c20 <sd_mmc_spi_read_word+0x9c>)
    2bd2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	687a      	ldr	r2, [r7, #4]
    2bd8:	6812      	ldr	r2, [r2, #0]
    2bda:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    2bdc:	4b0b      	ldr	r3, [pc, #44]	; (2c0c <sd_mmc_spi_read_word+0x88>)
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	1d1a      	adds	r2, r3, #4
    2be2:	4b0a      	ldr	r3, [pc, #40]	; (2c0c <sd_mmc_spi_read_word+0x88>)
    2be4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2be6:	4b09      	ldr	r3, [pc, #36]	; (2c0c <sd_mmc_spi_read_word+0x88>)
    2be8:	681a      	ldr	r2, [r3, #0]
    2bea:	4b09      	ldr	r3, [pc, #36]	; (2c10 <sd_mmc_spi_read_word+0x8c>)
    2bec:	881b      	ldrh	r3, [r3, #0]
    2bee:	0019      	movs	r1, r3
    2bf0:	4b08      	ldr	r3, [pc, #32]	; (2c14 <sd_mmc_spi_read_word+0x90>)
    2bf2:	0010      	movs	r0, r2
    2bf4:	4798      	blx	r3
    2bf6:	1e0b      	subs	r3, r1, #0
    2bf8:	d101      	bne.n	2bfe <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    2bfa:	4b0a      	ldr	r3, [pc, #40]	; (2c24 <sd_mmc_spi_read_word+0xa0>)
    2bfc:	4798      	blx	r3
	}
	return true;
    2bfe:	2301      	movs	r3, #1
}
    2c00:	0018      	movs	r0, r3
    2c02:	46bd      	mov	sp, r7
    2c04:	b005      	add	sp, #20
    2c06:	bd90      	pop	{r4, r7, pc}
    2c08:	2000012f 	.word	0x2000012f
    2c0c:	20000134 	.word	0x20000134
    2c10:	20000138 	.word	0x20000138
    2c14:	0000b0d1 	.word	0x0000b0d1
    2c18:	00002505 	.word	0x00002505
    2c1c:	200000ec 	.word	0x200000ec
    2c20:	00004541 	.word	0x00004541
    2c24:	00002589 	.word	0x00002589

00002c28 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    2c28:	b590      	push	{r4, r7, lr}
    2c2a:	b085      	sub	sp, #20
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
    2c30:	000a      	movs	r2, r1
    2c32:	1cbb      	adds	r3, r7, #2
    2c34:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    2c36:	230a      	movs	r3, #10
    2c38:	18fb      	adds	r3, r7, r3
    2c3a:	22ff      	movs	r2, #255	; 0xff
    2c3c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2c3e:	4b1c      	ldr	r3, [pc, #112]	; (2cb0 <sd_mmc_spi_start_read_blocks+0x88>)
    2c40:	2200      	movs	r2, #0
    2c42:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2c44:	2300      	movs	r3, #0
    2c46:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2c48:	e025      	b.n	2c96 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    2c4a:	4b1a      	ldr	r3, [pc, #104]	; (2cb4 <sd_mmc_spi_start_read_blocks+0x8c>)
    2c4c:	4798      	blx	r3
    2c4e:	0003      	movs	r3, r0
    2c50:	001a      	movs	r2, r3
    2c52:	2301      	movs	r3, #1
    2c54:	4053      	eors	r3, r2
    2c56:	b2db      	uxtb	r3, r3
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d001      	beq.n	2c60 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    2c5c:	2300      	movs	r3, #0
    2c5e:	e022      	b.n	2ca6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    2c60:	687a      	ldr	r2, [r7, #4]
    2c62:	68fb      	ldr	r3, [r7, #12]
    2c64:	18d1      	adds	r1, r2, r3
    2c66:	4b14      	ldr	r3, [pc, #80]	; (2cb8 <sd_mmc_spi_start_read_blocks+0x90>)
    2c68:	881a      	ldrh	r2, [r3, #0]
    2c6a:	230a      	movs	r3, #10
    2c6c:	18fb      	adds	r3, r7, r3
    2c6e:	881b      	ldrh	r3, [r3, #0]
    2c70:	4812      	ldr	r0, [pc, #72]	; (2cbc <sd_mmc_spi_start_read_blocks+0x94>)
    2c72:	4c13      	ldr	r4, [pc, #76]	; (2cc0 <sd_mmc_spi_start_read_blocks+0x98>)
    2c74:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    2c76:	4b10      	ldr	r3, [pc, #64]	; (2cb8 <sd_mmc_spi_start_read_blocks+0x90>)
    2c78:	881b      	ldrh	r3, [r3, #0]
    2c7a:	001a      	movs	r2, r3
    2c7c:	68fb      	ldr	r3, [r7, #12]
    2c7e:	189b      	adds	r3, r3, r2
    2c80:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2c82:	4b0d      	ldr	r3, [pc, #52]	; (2cb8 <sd_mmc_spi_start_read_blocks+0x90>)
    2c84:	881b      	ldrh	r3, [r3, #0]
    2c86:	001a      	movs	r2, r3
    2c88:	4b0e      	ldr	r3, [pc, #56]	; (2cc4 <sd_mmc_spi_start_read_blocks+0x9c>)
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	18d2      	adds	r2, r2, r3
    2c8e:	4b0d      	ldr	r3, [pc, #52]	; (2cc4 <sd_mmc_spi_start_read_blocks+0x9c>)
    2c90:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    2c92:	4b0d      	ldr	r3, [pc, #52]	; (2cc8 <sd_mmc_spi_start_read_blocks+0xa0>)
    2c94:	4798      	blx	r3
	while (nb_block--) {
    2c96:	1cbb      	adds	r3, r7, #2
    2c98:	881b      	ldrh	r3, [r3, #0]
    2c9a:	1cba      	adds	r2, r7, #2
    2c9c:	1e59      	subs	r1, r3, #1
    2c9e:	8011      	strh	r1, [r2, #0]
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d1d2      	bne.n	2c4a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    2ca4:	2301      	movs	r3, #1
}
    2ca6:	0018      	movs	r0, r3
    2ca8:	46bd      	mov	sp, r7
    2caa:	b005      	add	sp, #20
    2cac:	bd90      	pop	{r4, r7, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	2000012f 	.word	0x2000012f
    2cb4:	00002505 	.word	0x00002505
    2cb8:	20000138 	.word	0x20000138
    2cbc:	200000ec 	.word	0x200000ec
    2cc0:	00004541 	.word	0x00004541
    2cc4:	20000134 	.word	0x20000134
    2cc8:	00002589 	.word	0x00002589

00002ccc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    2ccc:	b580      	push	{r7, lr}
    2cce:	af00      	add	r7, sp, #0
	return true;
    2cd0:	2301      	movs	r3, #1
}
    2cd2:	0018      	movs	r0, r3
    2cd4:	46bd      	mov	sp, r7
    2cd6:	bd80      	pop	{r7, pc}

00002cd8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b084      	sub	sp, #16
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
    2ce0:	000a      	movs	r2, r1
    2ce2:	1cbb      	adds	r3, r7, #2
    2ce4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ce6:	4b24      	ldr	r3, [pc, #144]	; (2d78 <sd_mmc_spi_start_write_blocks+0xa0>)
    2ce8:	2200      	movs	r2, #0
    2cea:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2cec:	2300      	movs	r3, #0
    2cee:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2cf0:	e035      	b.n	2d5e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    2cf2:	4b22      	ldr	r3, [pc, #136]	; (2d7c <sd_mmc_spi_start_write_blocks+0xa4>)
    2cf4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    2cf6:	687a      	ldr	r2, [r7, #4]
    2cf8:	68fb      	ldr	r3, [r7, #12]
    2cfa:	18d1      	adds	r1, r2, r3
    2cfc:	4b20      	ldr	r3, [pc, #128]	; (2d80 <sd_mmc_spi_start_write_blocks+0xa8>)
    2cfe:	881a      	ldrh	r2, [r3, #0]
    2d00:	4b20      	ldr	r3, [pc, #128]	; (2d84 <sd_mmc_spi_start_write_blocks+0xac>)
    2d02:	0018      	movs	r0, r3
    2d04:	4b20      	ldr	r3, [pc, #128]	; (2d88 <sd_mmc_spi_start_write_blocks+0xb0>)
    2d06:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    2d08:	4b1d      	ldr	r3, [pc, #116]	; (2d80 <sd_mmc_spi_start_write_blocks+0xa8>)
    2d0a:	881b      	ldrh	r3, [r3, #0]
    2d0c:	001a      	movs	r2, r3
    2d0e:	68fb      	ldr	r3, [r7, #12]
    2d10:	189b      	adds	r3, r3, r2
    2d12:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2d14:	4b1a      	ldr	r3, [pc, #104]	; (2d80 <sd_mmc_spi_start_write_blocks+0xa8>)
    2d16:	881b      	ldrh	r3, [r3, #0]
    2d18:	001a      	movs	r2, r3
    2d1a:	4b1c      	ldr	r3, [pc, #112]	; (2d8c <sd_mmc_spi_start_write_blocks+0xb4>)
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	18d2      	adds	r2, r2, r3
    2d20:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <sd_mmc_spi_start_write_blocks+0xb4>)
    2d22:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    2d24:	4b1a      	ldr	r3, [pc, #104]	; (2d90 <sd_mmc_spi_start_write_blocks+0xb8>)
    2d26:	4798      	blx	r3
    2d28:	0003      	movs	r3, r0
    2d2a:	001a      	movs	r2, r3
    2d2c:	2301      	movs	r3, #1
    2d2e:	4053      	eors	r3, r2
    2d30:	b2db      	uxtb	r3, r3
    2d32:	2b00      	cmp	r3, #0
    2d34:	d001      	beq.n	2d3a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    2d36:	2300      	movs	r3, #0
    2d38:	e019      	b.n	2d6e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    2d3a:	1cbb      	adds	r3, r7, #2
    2d3c:	881b      	ldrh	r3, [r3, #0]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d00d      	beq.n	2d5e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    2d42:	4b14      	ldr	r3, [pc, #80]	; (2d94 <sd_mmc_spi_start_write_blocks+0xbc>)
    2d44:	4798      	blx	r3
    2d46:	0003      	movs	r3, r0
    2d48:	001a      	movs	r2, r3
    2d4a:	2301      	movs	r3, #1
    2d4c:	4053      	eors	r3, r2
    2d4e:	b2db      	uxtb	r3, r3
    2d50:	2b00      	cmp	r3, #0
    2d52:	d004      	beq.n	2d5e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2d54:	4b08      	ldr	r3, [pc, #32]	; (2d78 <sd_mmc_spi_start_write_blocks+0xa0>)
    2d56:	2205      	movs	r2, #5
    2d58:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    2d5a:	2300      	movs	r3, #0
    2d5c:	e007      	b.n	2d6e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    2d5e:	1cbb      	adds	r3, r7, #2
    2d60:	881b      	ldrh	r3, [r3, #0]
    2d62:	1cba      	adds	r2, r7, #2
    2d64:	1e59      	subs	r1, r3, #1
    2d66:	8011      	strh	r1, [r2, #0]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d1c2      	bne.n	2cf2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    2d6c:	2301      	movs	r3, #1
}
    2d6e:	0018      	movs	r0, r3
    2d70:	46bd      	mov	sp, r7
    2d72:	b004      	add	sp, #16
    2d74:	bd80      	pop	{r7, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	2000012f 	.word	0x2000012f
    2d7c:	000025b5 	.word	0x000025b5
    2d80:	20000138 	.word	0x20000138
    2d84:	200000ec 	.word	0x200000ec
    2d88:	00004765 	.word	0x00004765
    2d8c:	20000134 	.word	0x20000134
    2d90:	00002605 	.word	0x00002605
    2d94:	00002499 	.word	0x00002499

00002d98 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    2d9c:	4b09      	ldr	r3, [pc, #36]	; (2dc4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    2d9e:	4798      	blx	r3
    2da0:	0003      	movs	r3, r0
    2da2:	001a      	movs	r2, r3
    2da4:	2301      	movs	r3, #1
    2da6:	4053      	eors	r3, r2
    2da8:	b2db      	uxtb	r3, r3
    2daa:	2b00      	cmp	r3, #0
    2dac:	d004      	beq.n	2db8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2dae:	4b06      	ldr	r3, [pc, #24]	; (2dc8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    2db0:	2205      	movs	r2, #5
    2db2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    2db4:	2300      	movs	r3, #0
    2db6:	e002      	b.n	2dbe <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    2db8:	4b04      	ldr	r3, [pc, #16]	; (2dcc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    2dba:	4798      	blx	r3
    2dbc:	0003      	movs	r3, r0
}
    2dbe:	0018      	movs	r0, r3
    2dc0:	46bd      	mov	sp, r7
    2dc2:	bd80      	pop	{r7, pc}
    2dc4:	00002499 	.word	0x00002499
    2dc8:	2000012f 	.word	0x2000012f
    2dcc:	00002699 	.word	0x00002699

00002dd0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b084      	sub	sp, #16
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	0002      	movs	r2, r0
    2dd8:	1dfb      	adds	r3, r7, #7
    2dda:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    2ddc:	1dfb      	adds	r3, r7, #7
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d108      	bne.n	2df6 <mem_test_unit_ready+0x26>
    2de4:	1dfb      	adds	r3, r7, #7
    2de6:	781a      	ldrb	r2, [r3, #0]
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <mem_test_unit_ready+0x3c>)
    2dea:	0152      	lsls	r2, r2, #5
    2dec:	58d3      	ldr	r3, [r2, r3]
    2dee:	4798      	blx	r3
    2df0:	0003      	movs	r3, r0
    2df2:	001a      	movs	r2, r3
    2df4:	e000      	b.n	2df8 <mem_test_unit_ready+0x28>
    2df6:	2201      	movs	r2, #1
  status =
    2df8:	230f      	movs	r3, #15
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2dfe:	230f      	movs	r3, #15
    2e00:	18fb      	adds	r3, r7, r3
    2e02:	781b      	ldrb	r3, [r3, #0]
}
    2e04:	0018      	movs	r0, r3
    2e06:	46bd      	mov	sp, r7
    2e08:	b004      	add	sp, #16
    2e0a:	bd80      	pop	{r7, pc}
    2e0c:	0000c2dc 	.word	0x0000c2dc

00002e10 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b084      	sub	sp, #16
    2e14:	af00      	add	r7, sp, #0
    2e16:	0002      	movs	r2, r0
    2e18:	6039      	str	r1, [r7, #0]
    2e1a:	1dfb      	adds	r3, r7, #7
    2e1c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    2e1e:	1dfb      	adds	r3, r7, #7
    2e20:	781b      	ldrb	r3, [r3, #0]
    2e22:	2b00      	cmp	r3, #0
    2e24:	d10c      	bne.n	2e40 <mem_read_capacity+0x30>
    2e26:	1dfb      	adds	r3, r7, #7
    2e28:	781b      	ldrb	r3, [r3, #0]
    2e2a:	4a0b      	ldr	r2, [pc, #44]	; (2e58 <mem_read_capacity+0x48>)
    2e2c:	015b      	lsls	r3, r3, #5
    2e2e:	18d3      	adds	r3, r2, r3
    2e30:	3304      	adds	r3, #4
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	683a      	ldr	r2, [r7, #0]
    2e36:	0010      	movs	r0, r2
    2e38:	4798      	blx	r3
    2e3a:	0003      	movs	r3, r0
    2e3c:	001a      	movs	r2, r3
    2e3e:	e000      	b.n	2e42 <mem_read_capacity+0x32>
    2e40:	2201      	movs	r2, #1
  status =
    2e42:	230f      	movs	r3, #15
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2e48:	230f      	movs	r3, #15
    2e4a:	18fb      	adds	r3, r7, r3
    2e4c:	781b      	ldrb	r3, [r3, #0]
}
    2e4e:	0018      	movs	r0, r3
    2e50:	46bd      	mov	sp, r7
    2e52:	b004      	add	sp, #16
    2e54:	bd80      	pop	{r7, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	0000c2dc 	.word	0x0000c2dc

00002e5c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b084      	sub	sp, #16
    2e60:	af00      	add	r7, sp, #0
    2e62:	0002      	movs	r2, r0
    2e64:	1dfb      	adds	r3, r7, #7
    2e66:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    2e68:	1dfb      	adds	r3, r7, #7
    2e6a:	781b      	ldrb	r3, [r3, #0]
    2e6c:	425a      	negs	r2, r3
    2e6e:	4153      	adcs	r3, r2
    2e70:	b2da      	uxtb	r2, r3
  sector_size =
    2e72:	230f      	movs	r3, #15
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    2e78:	230f      	movs	r3, #15
    2e7a:	18fb      	adds	r3, r7, r3
    2e7c:	781b      	ldrb	r3, [r3, #0]
}
    2e7e:	0018      	movs	r0, r3
    2e80:	46bd      	mov	sp, r7
    2e82:	b004      	add	sp, #16
    2e84:	bd80      	pop	{r7, pc}
	...

00002e88 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b084      	sub	sp, #16
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	0002      	movs	r2, r0
    2e90:	1dfb      	adds	r3, r7, #7
    2e92:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    2e94:	1dfb      	adds	r3, r7, #7
    2e96:	781b      	ldrb	r3, [r3, #0]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d109      	bne.n	2eb0 <mem_wr_protect+0x28>
    2e9c:	1dfb      	adds	r3, r7, #7
    2e9e:	781b      	ldrb	r3, [r3, #0]
    2ea0:	4a0a      	ldr	r2, [pc, #40]	; (2ecc <mem_wr_protect+0x44>)
    2ea2:	015b      	lsls	r3, r3, #5
    2ea4:	18d3      	adds	r3, r2, r3
    2ea6:	330c      	adds	r3, #12
    2ea8:	681b      	ldr	r3, [r3, #0]
    2eaa:	4798      	blx	r3
    2eac:	1e03      	subs	r3, r0, #0
    2eae:	d001      	beq.n	2eb4 <mem_wr_protect+0x2c>
    2eb0:	2201      	movs	r2, #1
    2eb2:	e000      	b.n	2eb6 <mem_wr_protect+0x2e>
    2eb4:	2200      	movs	r2, #0
  wr_protect =
    2eb6:	230f      	movs	r3, #15
    2eb8:	18fb      	adds	r3, r7, r3
    2eba:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    2ebc:	230f      	movs	r3, #15
    2ebe:	18fb      	adds	r3, r7, r3
    2ec0:	781b      	ldrb	r3, [r3, #0]
}
    2ec2:	0018      	movs	r0, r3
    2ec4:	46bd      	mov	sp, r7
    2ec6:	b004      	add	sp, #16
    2ec8:	bd80      	pop	{r7, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	0000c2dc 	.word	0x0000c2dc

00002ed0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b086      	sub	sp, #24
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	60b9      	str	r1, [r7, #8]
    2ed8:	607a      	str	r2, [r7, #4]
    2eda:	230f      	movs	r3, #15
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	1c02      	adds	r2, r0, #0
    2ee0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    2ee2:	230f      	movs	r3, #15
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d10e      	bne.n	2f0a <memory_2_ram+0x3a>
    2eec:	230f      	movs	r3, #15
    2eee:	18fb      	adds	r3, r7, r3
    2ef0:	781b      	ldrb	r3, [r3, #0]
    2ef2:	4a0b      	ldr	r2, [pc, #44]	; (2f20 <memory_2_ram+0x50>)
    2ef4:	015b      	lsls	r3, r3, #5
    2ef6:	18d3      	adds	r3, r2, r3
    2ef8:	3314      	adds	r3, #20
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	6879      	ldr	r1, [r7, #4]
    2efe:	68ba      	ldr	r2, [r7, #8]
    2f00:	0010      	movs	r0, r2
    2f02:	4798      	blx	r3
    2f04:	0003      	movs	r3, r0
    2f06:	001a      	movs	r2, r3
    2f08:	e000      	b.n	2f0c <memory_2_ram+0x3c>
    2f0a:	2201      	movs	r2, #1
  status =
    2f0c:	2317      	movs	r3, #23
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    2f12:	2317      	movs	r3, #23
    2f14:	18fb      	adds	r3, r7, r3
    2f16:	781b      	ldrb	r3, [r3, #0]
}
    2f18:	0018      	movs	r0, r3
    2f1a:	46bd      	mov	sp, r7
    2f1c:	b006      	add	sp, #24
    2f1e:	bd80      	pop	{r7, pc}
    2f20:	0000c2dc 	.word	0x0000c2dc

00002f24 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    2f24:	b580      	push	{r7, lr}
    2f26:	b086      	sub	sp, #24
    2f28:	af00      	add	r7, sp, #0
    2f2a:	60b9      	str	r1, [r7, #8]
    2f2c:	607a      	str	r2, [r7, #4]
    2f2e:	230f      	movs	r3, #15
    2f30:	18fb      	adds	r3, r7, r3
    2f32:	1c02      	adds	r2, r0, #0
    2f34:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    2f36:	230f      	movs	r3, #15
    2f38:	18fb      	adds	r3, r7, r3
    2f3a:	781b      	ldrb	r3, [r3, #0]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d10e      	bne.n	2f5e <ram_2_memory+0x3a>
    2f40:	230f      	movs	r3, #15
    2f42:	18fb      	adds	r3, r7, r3
    2f44:	781b      	ldrb	r3, [r3, #0]
    2f46:	4a0b      	ldr	r2, [pc, #44]	; (2f74 <ram_2_memory+0x50>)
    2f48:	015b      	lsls	r3, r3, #5
    2f4a:	18d3      	adds	r3, r2, r3
    2f4c:	3318      	adds	r3, #24
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	6879      	ldr	r1, [r7, #4]
    2f52:	68ba      	ldr	r2, [r7, #8]
    2f54:	0010      	movs	r0, r2
    2f56:	4798      	blx	r3
    2f58:	0003      	movs	r3, r0
    2f5a:	001a      	movs	r2, r3
    2f5c:	e000      	b.n	2f60 <ram_2_memory+0x3c>
    2f5e:	2201      	movs	r2, #1
  status =
    2f60:	2317      	movs	r3, #23
    2f62:	18fb      	adds	r3, r7, r3
    2f64:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    2f66:	2317      	movs	r3, #23
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	781b      	ldrb	r3, [r3, #0]
}
    2f6c:	0018      	movs	r0, r3
    2f6e:	46bd      	mov	sp, r7
    2f70:	b006      	add	sp, #24
    2f72:	bd80      	pop	{r7, pc}
    2f74:	0000c2dc 	.word	0x0000c2dc

00002f78 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2f78:	b580      	push	{r7, lr}
    2f7a:	b082      	sub	sp, #8
    2f7c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2f7e:	4b10      	ldr	r3, [pc, #64]	; (2fc0 <cpu_irq_enter_critical+0x48>)
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d112      	bne.n	2fac <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f86:	f3ef 8310 	mrs	r3, PRIMASK
    2f8a:	607b      	str	r3, [r7, #4]
  return(result);
    2f8c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d109      	bne.n	2fa6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2f92:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2f94:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2f98:	4b0a      	ldr	r3, [pc, #40]	; (2fc4 <cpu_irq_enter_critical+0x4c>)
    2f9a:	2200      	movs	r2, #0
    2f9c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2f9e:	4b0a      	ldr	r3, [pc, #40]	; (2fc8 <cpu_irq_enter_critical+0x50>)
    2fa0:	2201      	movs	r2, #1
    2fa2:	701a      	strb	r2, [r3, #0]
    2fa4:	e002      	b.n	2fac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2fa6:	4b08      	ldr	r3, [pc, #32]	; (2fc8 <cpu_irq_enter_critical+0x50>)
    2fa8:	2200      	movs	r2, #0
    2faa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2fac:	4b04      	ldr	r3, [pc, #16]	; (2fc0 <cpu_irq_enter_critical+0x48>)
    2fae:	681b      	ldr	r3, [r3, #0]
    2fb0:	1c5a      	adds	r2, r3, #1
    2fb2:	4b03      	ldr	r3, [pc, #12]	; (2fc0 <cpu_irq_enter_critical+0x48>)
    2fb4:	601a      	str	r2, [r3, #0]
}
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	46bd      	mov	sp, r7
    2fba:	b002      	add	sp, #8
    2fbc:	bd80      	pop	{r7, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	2000013c 	.word	0x2000013c
    2fc4:	20000009 	.word	0x20000009
    2fc8:	20000140 	.word	0x20000140

00002fcc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2fd0:	4b0b      	ldr	r3, [pc, #44]	; (3000 <cpu_irq_leave_critical+0x34>)
    2fd2:	681b      	ldr	r3, [r3, #0]
    2fd4:	1e5a      	subs	r2, r3, #1
    2fd6:	4b0a      	ldr	r3, [pc, #40]	; (3000 <cpu_irq_leave_critical+0x34>)
    2fd8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2fda:	4b09      	ldr	r3, [pc, #36]	; (3000 <cpu_irq_leave_critical+0x34>)
    2fdc:	681b      	ldr	r3, [r3, #0]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d10a      	bne.n	2ff8 <cpu_irq_leave_critical+0x2c>
    2fe2:	4b08      	ldr	r3, [pc, #32]	; (3004 <cpu_irq_leave_critical+0x38>)
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	b2db      	uxtb	r3, r3
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d005      	beq.n	2ff8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2fec:	4b06      	ldr	r3, [pc, #24]	; (3008 <cpu_irq_leave_critical+0x3c>)
    2fee:	2201      	movs	r2, #1
    2ff0:	701a      	strb	r2, [r3, #0]
    2ff2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ff6:	b662      	cpsie	i
	}
}
    2ff8:	46c0      	nop			; (mov r8, r8)
    2ffa:	46bd      	mov	sp, r7
    2ffc:	bd80      	pop	{r7, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	2000013c 	.word	0x2000013c
    3004:	20000140 	.word	0x20000140
    3008:	20000009 	.word	0x20000009

0000300c <system_pinmux_get_config_defaults>:
{
    300c:	b580      	push	{r7, lr}
    300e:	b082      	sub	sp, #8
    3010:	af00      	add	r7, sp, #0
    3012:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3014:	687b      	ldr	r3, [r7, #4]
    3016:	2280      	movs	r2, #128	; 0x80
    3018:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	2200      	movs	r2, #0
    301e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	2201      	movs	r2, #1
    3024:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	2200      	movs	r2, #0
    302a:	70da      	strb	r2, [r3, #3]
}
    302c:	46c0      	nop			; (mov r8, r8)
    302e:	46bd      	mov	sp, r7
    3030:	b002      	add	sp, #8
    3032:	bd80      	pop	{r7, pc}

00003034 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3034:	b580      	push	{r7, lr}
    3036:	b084      	sub	sp, #16
    3038:	af00      	add	r7, sp, #0
    303a:	0002      	movs	r2, r0
    303c:	6039      	str	r1, [r7, #0]
    303e:	1dfb      	adds	r3, r7, #7
    3040:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3042:	230c      	movs	r3, #12
    3044:	18fb      	adds	r3, r7, r3
    3046:	0018      	movs	r0, r3
    3048:	4b10      	ldr	r3, [pc, #64]	; (308c <port_pin_set_config+0x58>)
    304a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    304c:	230c      	movs	r3, #12
    304e:	18fb      	adds	r3, r7, r3
    3050:	2280      	movs	r2, #128	; 0x80
    3052:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3054:	683b      	ldr	r3, [r7, #0]
    3056:	781a      	ldrb	r2, [r3, #0]
    3058:	230c      	movs	r3, #12
    305a:	18fb      	adds	r3, r7, r3
    305c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    305e:	683b      	ldr	r3, [r7, #0]
    3060:	785a      	ldrb	r2, [r3, #1]
    3062:	230c      	movs	r3, #12
    3064:	18fb      	adds	r3, r7, r3
    3066:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	789a      	ldrb	r2, [r3, #2]
    306c:	230c      	movs	r3, #12
    306e:	18fb      	adds	r3, r7, r3
    3070:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3072:	230c      	movs	r3, #12
    3074:	18fa      	adds	r2, r7, r3
    3076:	1dfb      	adds	r3, r7, #7
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	0011      	movs	r1, r2
    307c:	0018      	movs	r0, r3
    307e:	4b04      	ldr	r3, [pc, #16]	; (3090 <port_pin_set_config+0x5c>)
    3080:	4798      	blx	r3
}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	46bd      	mov	sp, r7
    3086:	b004      	add	sp, #16
    3088:	bd80      	pop	{r7, pc}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	0000300d 	.word	0x0000300d
    3090:	000068f1 	.word	0x000068f1

00003094 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	2200      	movs	r2, #0
    30a0:	701a      	strb	r2, [r3, #0]
}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	46bd      	mov	sp, r7
    30a6:	b002      	add	sp, #8
    30a8:	bd80      	pop	{r7, pc}
	...

000030ac <system_apb_clock_set_mask>:
{
    30ac:	b580      	push	{r7, lr}
    30ae:	b082      	sub	sp, #8
    30b0:	af00      	add	r7, sp, #0
    30b2:	0002      	movs	r2, r0
    30b4:	6039      	str	r1, [r7, #0]
    30b6:	1dfb      	adds	r3, r7, #7
    30b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    30ba:	1dfb      	adds	r3, r7, #7
    30bc:	781b      	ldrb	r3, [r3, #0]
    30be:	2b01      	cmp	r3, #1
    30c0:	d00a      	beq.n	30d8 <system_apb_clock_set_mask+0x2c>
    30c2:	2b02      	cmp	r3, #2
    30c4:	d00f      	beq.n	30e6 <system_apb_clock_set_mask+0x3a>
    30c6:	2b00      	cmp	r3, #0
    30c8:	d114      	bne.n	30f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    30ca:	4b0e      	ldr	r3, [pc, #56]	; (3104 <system_apb_clock_set_mask+0x58>)
    30cc:	4a0d      	ldr	r2, [pc, #52]	; (3104 <system_apb_clock_set_mask+0x58>)
    30ce:	6991      	ldr	r1, [r2, #24]
    30d0:	683a      	ldr	r2, [r7, #0]
    30d2:	430a      	orrs	r2, r1
    30d4:	619a      	str	r2, [r3, #24]
			break;
    30d6:	e00f      	b.n	30f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    30d8:	4b0a      	ldr	r3, [pc, #40]	; (3104 <system_apb_clock_set_mask+0x58>)
    30da:	4a0a      	ldr	r2, [pc, #40]	; (3104 <system_apb_clock_set_mask+0x58>)
    30dc:	69d1      	ldr	r1, [r2, #28]
    30de:	683a      	ldr	r2, [r7, #0]
    30e0:	430a      	orrs	r2, r1
    30e2:	61da      	str	r2, [r3, #28]
			break;
    30e4:	e008      	b.n	30f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    30e6:	4b07      	ldr	r3, [pc, #28]	; (3104 <system_apb_clock_set_mask+0x58>)
    30e8:	4a06      	ldr	r2, [pc, #24]	; (3104 <system_apb_clock_set_mask+0x58>)
    30ea:	6a11      	ldr	r1, [r2, #32]
    30ec:	683a      	ldr	r2, [r7, #0]
    30ee:	430a      	orrs	r2, r1
    30f0:	621a      	str	r2, [r3, #32]
			break;
    30f2:	e001      	b.n	30f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    30f4:	2317      	movs	r3, #23
    30f6:	e000      	b.n	30fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    30f8:	2300      	movs	r3, #0
}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	b002      	add	sp, #8
    3100:	bd80      	pop	{r7, pc}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	40000400 	.word	0x40000400

00003108 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3108:	b580      	push	{r7, lr}
    310a:	b084      	sub	sp, #16
    310c:	af00      	add	r7, sp, #0
    310e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	681b      	ldr	r3, [r3, #0]
    3114:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3116:	68fb      	ldr	r3, [r7, #12]
    3118:	7a9b      	ldrb	r3, [r3, #10]
    311a:	b2db      	uxtb	r3, r3
    311c:	b25b      	sxtb	r3, r3
    311e:	2b00      	cmp	r3, #0
    3120:	da01      	bge.n	3126 <rtc_calendar_is_syncing+0x1e>
                return true;
    3122:	2301      	movs	r3, #1
    3124:	e000      	b.n	3128 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    3126:	2300      	movs	r3, #0
}
    3128:	0018      	movs	r0, r3
    312a:	46bd      	mov	sp, r7
    312c:	b004      	add	sp, #16
    312e:	bd80      	pop	{r7, pc}

00003130 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    3130:	b580      	push	{r7, lr}
    3132:	b084      	sub	sp, #16
    3134:	af00      	add	r7, sp, #0
    3136:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	681b      	ldr	r3, [r3, #0]
    313c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	0018      	movs	r0, r3
    3144:	4b07      	ldr	r3, [pc, #28]	; (3164 <rtc_calendar_enable+0x34>)
    3146:	4798      	blx	r3
    3148:	1e03      	subs	r3, r0, #0
    314a:	d1f9      	bne.n	3140 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    314c:	68fb      	ldr	r3, [r7, #12]
    314e:	881b      	ldrh	r3, [r3, #0]
    3150:	b29b      	uxth	r3, r3
    3152:	2202      	movs	r2, #2
    3154:	4313      	orrs	r3, r2
    3156:	b29a      	uxth	r2, r3
    3158:	68fb      	ldr	r3, [r7, #12]
    315a:	801a      	strh	r2, [r3, #0]
}
    315c:	46c0      	nop			; (mov r8, r8)
    315e:	46bd      	mov	sp, r7
    3160:	b004      	add	sp, #16
    3162:	bd80      	pop	{r7, pc}
    3164:	00003109 	.word	0x00003109

00003168 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    3168:	b580      	push	{r7, lr}
    316a:	b084      	sub	sp, #16
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	0018      	movs	r0, r3
    317c:	4b0a      	ldr	r3, [pc, #40]	; (31a8 <rtc_calendar_disable+0x40>)
    317e:	4798      	blx	r3
    3180:	1e03      	subs	r3, r0, #0
    3182:	d1f9      	bne.n	3178 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3184:	68fb      	ldr	r3, [r7, #12]
    3186:	22c1      	movs	r2, #193	; 0xc1
    3188:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    318a:	68fb      	ldr	r3, [r7, #12]
    318c:	22c1      	movs	r2, #193	; 0xc1
    318e:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	881b      	ldrh	r3, [r3, #0]
    3194:	b29b      	uxth	r3, r3
    3196:	2202      	movs	r2, #2
    3198:	4393      	bics	r3, r2
    319a:	b29a      	uxth	r2, r3
    319c:	68fb      	ldr	r3, [r7, #12]
    319e:	801a      	strh	r2, [r3, #0]
}
    31a0:	46c0      	nop			; (mov r8, r8)
    31a2:	46bd      	mov	sp, r7
    31a4:	b004      	add	sp, #16
    31a6:	bd80      	pop	{r7, pc}
    31a8:	00003109 	.word	0x00003109

000031ac <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    31ac:	b580      	push	{r7, lr}
    31ae:	b084      	sub	sp, #16
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	681b      	ldr	r3, [r3, #0]
    31b8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	0018      	movs	r0, r3
    31be:	4b0a      	ldr	r3, [pc, #40]	; (31e8 <rtc_calendar_reset+0x3c>)
    31c0:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	0018      	movs	r0, r3
    31c8:	4b08      	ldr	r3, [pc, #32]	; (31ec <rtc_calendar_reset+0x40>)
    31ca:	4798      	blx	r3
    31cc:	1e03      	subs	r3, r0, #0
    31ce:	d1f9      	bne.n	31c4 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	881b      	ldrh	r3, [r3, #0]
    31d4:	b29b      	uxth	r3, r3
    31d6:	2201      	movs	r2, #1
    31d8:	4313      	orrs	r3, r2
    31da:	b29a      	uxth	r2, r3
    31dc:	68fb      	ldr	r3, [r7, #12]
    31de:	801a      	strh	r2, [r3, #0]
}
    31e0:	46c0      	nop			; (mov r8, r8)
    31e2:	46bd      	mov	sp, r7
    31e4:	b004      	add	sp, #16
    31e6:	bd80      	pop	{r7, pc}
    31e8:	00003169 	.word	0x00003169
    31ec:	00003109 	.word	0x00003109

000031f0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    31f0:	b580      	push	{r7, lr}
    31f2:	b084      	sub	sp, #16
    31f4:	af00      	add	r7, sp, #0
    31f6:	6078      	str	r0, [r7, #4]
    31f8:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    31fa:	683b      	ldr	r3, [r7, #0]
    31fc:	88db      	ldrh	r3, [r3, #6]
    31fe:	001a      	movs	r2, r3
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	88db      	ldrh	r3, [r3, #6]
    3204:	1ad3      	subs	r3, r2, r3
    3206:	069b      	lsls	r3, r3, #26
    3208:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    320a:	683b      	ldr	r3, [r7, #0]
    320c:	795b      	ldrb	r3, [r3, #5]
    320e:	059b      	lsls	r3, r3, #22
    3210:	001a      	movs	r2, r3
    3212:	68fb      	ldr	r3, [r7, #12]
    3214:	4313      	orrs	r3, r2
    3216:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3218:	683b      	ldr	r3, [r7, #0]
    321a:	791b      	ldrb	r3, [r3, #4]
    321c:	045b      	lsls	r3, r3, #17
    321e:	001a      	movs	r2, r3
    3220:	68fb      	ldr	r3, [r7, #12]
    3222:	4313      	orrs	r3, r2
    3224:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    3226:	683b      	ldr	r3, [r7, #0]
    3228:	789b      	ldrb	r3, [r3, #2]
    322a:	031b      	lsls	r3, r3, #12
    322c:	001a      	movs	r2, r3
    322e:	68fb      	ldr	r3, [r7, #12]
    3230:	4313      	orrs	r3, r2
    3232:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	791b      	ldrb	r3, [r3, #4]
    3238:	2201      	movs	r2, #1
    323a:	4053      	eors	r3, r2
    323c:	b2db      	uxtb	r3, r3
    323e:	2b00      	cmp	r3, #0
    3240:	d008      	beq.n	3254 <rtc_calendar_time_to_register_value+0x64>
    3242:	683b      	ldr	r3, [r7, #0]
    3244:	78db      	ldrb	r3, [r3, #3]
    3246:	2b00      	cmp	r3, #0
    3248:	d004      	beq.n	3254 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    324a:	68fb      	ldr	r3, [r7, #12]
    324c:	2280      	movs	r2, #128	; 0x80
    324e:	0252      	lsls	r2, r2, #9
    3250:	4313      	orrs	r3, r2
    3252:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3254:	683b      	ldr	r3, [r7, #0]
    3256:	785b      	ldrb	r3, [r3, #1]
    3258:	019b      	lsls	r3, r3, #6
    325a:	001a      	movs	r2, r3
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	4313      	orrs	r3, r2
    3260:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    3262:	683b      	ldr	r3, [r7, #0]
    3264:	781b      	ldrb	r3, [r3, #0]
    3266:	001a      	movs	r2, r3
    3268:	68fb      	ldr	r3, [r7, #12]
    326a:	4313      	orrs	r3, r2
    326c:	60fb      	str	r3, [r7, #12]

	return register_value;
    326e:	68fb      	ldr	r3, [r7, #12]
}
    3270:	0018      	movs	r0, r3
    3272:	46bd      	mov	sp, r7
    3274:	b004      	add	sp, #16
    3276:	bd80      	pop	{r7, pc}

00003278 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    3278:	b580      	push	{r7, lr}
    327a:	b084      	sub	sp, #16
    327c:	af00      	add	r7, sp, #0
    327e:	60f8      	str	r0, [r7, #12]
    3280:	60b9      	str	r1, [r7, #8]
    3282:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3284:	68bb      	ldr	r3, [r7, #8]
    3286:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    3288:	b29a      	uxth	r2, r3
    328a:	68fb      	ldr	r3, [r7, #12]
    328c:	88db      	ldrh	r3, [r3, #6]
    328e:	18d3      	adds	r3, r2, r3
    3290:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    3296:	68bb      	ldr	r3, [r7, #8]
    3298:	0d9b      	lsrs	r3, r3, #22
    329a:	b2db      	uxtb	r3, r3
    329c:	220f      	movs	r2, #15
    329e:	4013      	ands	r3, r2
    32a0:	b2da      	uxtb	r2, r3
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    32a6:	68bb      	ldr	r3, [r7, #8]
    32a8:	0c5b      	lsrs	r3, r3, #17
    32aa:	b2db      	uxtb	r3, r3
    32ac:	221f      	movs	r2, #31
    32ae:	4013      	ands	r3, r2
    32b0:	b2da      	uxtb	r2, r3
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    32b6:	68fb      	ldr	r3, [r7, #12]
    32b8:	791b      	ldrb	r3, [r3, #4]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d008      	beq.n	32d0 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    32be:	68bb      	ldr	r3, [r7, #8]
    32c0:	0b1b      	lsrs	r3, r3, #12
    32c2:	b2db      	uxtb	r3, r3
    32c4:	221f      	movs	r2, #31
    32c6:	4013      	ands	r3, r2
    32c8:	b2da      	uxtb	r2, r3
    32ca:	687b      	ldr	r3, [r7, #4]
    32cc:	709a      	strb	r2, [r3, #2]
    32ce:	e010      	b.n	32f2 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    32d0:	68bb      	ldr	r3, [r7, #8]
    32d2:	0b1b      	lsrs	r3, r3, #12
    32d4:	b2db      	uxtb	r3, r3
    32d6:	220f      	movs	r2, #15
    32d8:	4013      	ands	r3, r2
    32da:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    32e0:	68ba      	ldr	r2, [r7, #8]
    32e2:	2380      	movs	r3, #128	; 0x80
    32e4:	025b      	lsls	r3, r3, #9
    32e6:	4013      	ands	r3, r2
    32e8:	1e5a      	subs	r2, r3, #1
    32ea:	4193      	sbcs	r3, r2
    32ec:	b2da      	uxtb	r2, r3
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    32f2:	68bb      	ldr	r3, [r7, #8]
    32f4:	099b      	lsrs	r3, r3, #6
    32f6:	b2db      	uxtb	r3, r3
    32f8:	223f      	movs	r2, #63	; 0x3f
    32fa:	4013      	ands	r3, r2
    32fc:	b2da      	uxtb	r2, r3
    32fe:	687b      	ldr	r3, [r7, #4]
    3300:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    3302:	68bb      	ldr	r3, [r7, #8]
    3304:	b2db      	uxtb	r3, r3
    3306:	223f      	movs	r2, #63	; 0x3f
    3308:	4013      	ands	r3, r2
    330a:	b2da      	uxtb	r2, r3
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    3310:	46c0      	nop			; (mov r8, r8)
    3312:	46bd      	mov	sp, r7
    3314:	b004      	add	sp, #16
    3316:	bd80      	pop	{r7, pc}

00003318 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3318:	b580      	push	{r7, lr}
    331a:	b084      	sub	sp, #16
    331c:	af00      	add	r7, sp, #0
    331e:	6078      	str	r0, [r7, #4]
    3320:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3328:	683b      	ldr	r3, [r7, #0]
    332a:	881a      	ldrh	r2, [r3, #0]
    332c:	230e      	movs	r3, #14
    332e:	18fb      	adds	r3, r7, r3
    3330:	2108      	movs	r1, #8
    3332:	430a      	orrs	r2, r1
    3334:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    3336:	683b      	ldr	r3, [r7, #0]
    3338:	791b      	ldrb	r3, [r3, #4]
    333a:	2201      	movs	r2, #1
    333c:	4053      	eors	r3, r2
    333e:	b2db      	uxtb	r3, r3
    3340:	2b00      	cmp	r3, #0
    3342:	d007      	beq.n	3354 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3344:	230e      	movs	r3, #14
    3346:	18fb      	adds	r3, r7, r3
    3348:	220e      	movs	r2, #14
    334a:	18ba      	adds	r2, r7, r2
    334c:	8812      	ldrh	r2, [r2, #0]
    334e:	2140      	movs	r1, #64	; 0x40
    3350:	430a      	orrs	r2, r1
    3352:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3354:	683b      	ldr	r3, [r7, #0]
    3356:	789b      	ldrb	r3, [r3, #2]
    3358:	2b00      	cmp	r3, #0
    335a:	d007      	beq.n	336c <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    335c:	230e      	movs	r3, #14
    335e:	18fb      	adds	r3, r7, r3
    3360:	220e      	movs	r2, #14
    3362:	18ba      	adds	r2, r7, r2
    3364:	8812      	ldrh	r2, [r2, #0]
    3366:	2180      	movs	r1, #128	; 0x80
    3368:	430a      	orrs	r2, r1
    336a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    336c:	68bb      	ldr	r3, [r7, #8]
    336e:	220e      	movs	r2, #14
    3370:	18ba      	adds	r2, r7, r2
    3372:	8812      	ldrh	r2, [r2, #0]
    3374:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    3376:	683b      	ldr	r3, [r7, #0]
    3378:	78db      	ldrb	r3, [r3, #3]
    337a:	2b00      	cmp	r3, #0
    337c:	d008      	beq.n	3390 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    337e:	68bb      	ldr	r3, [r7, #8]
    3380:	885b      	ldrh	r3, [r3, #2]
    3382:	b29b      	uxth	r3, r3
    3384:	2280      	movs	r2, #128	; 0x80
    3386:	01d2      	lsls	r2, r2, #7
    3388:	4313      	orrs	r3, r2
    338a:	b29a      	uxth	r2, r3
    338c:	68bb      	ldr	r3, [r7, #8]
    338e:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3390:	230d      	movs	r3, #13
    3392:	18fb      	adds	r3, r7, r3
    3394:	2200      	movs	r2, #0
    3396:	701a      	strb	r2, [r3, #0]
    3398:	e017      	b.n	33ca <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    339a:	230d      	movs	r3, #13
    339c:	18fb      	adds	r3, r7, r3
    339e:	781a      	ldrb	r2, [r3, #0]
    33a0:	0013      	movs	r3, r2
    33a2:	009b      	lsls	r3, r3, #2
    33a4:	189b      	adds	r3, r3, r2
    33a6:	005b      	lsls	r3, r3, #1
    33a8:	3308      	adds	r3, #8
    33aa:	683a      	ldr	r2, [r7, #0]
    33ac:	18d1      	adds	r1, r2, r3
    33ae:	230d      	movs	r3, #13
    33b0:	18fb      	adds	r3, r7, r3
    33b2:	781a      	ldrb	r2, [r3, #0]
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	0018      	movs	r0, r3
    33b8:	4b08      	ldr	r3, [pc, #32]	; (33dc <_rtc_calendar_set_config+0xc4>)
    33ba:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    33bc:	230d      	movs	r3, #13
    33be:	18fb      	adds	r3, r7, r3
    33c0:	781a      	ldrb	r2, [r3, #0]
    33c2:	230d      	movs	r3, #13
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	3201      	adds	r2, #1
    33c8:	701a      	strb	r2, [r3, #0]
    33ca:	230d      	movs	r3, #13
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	781b      	ldrb	r3, [r3, #0]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d0e2      	beq.n	339a <_rtc_calendar_set_config+0x82>
	}
}
    33d4:	46c0      	nop			; (mov r8, r8)
    33d6:	46bd      	mov	sp, r7
    33d8:	b004      	add	sp, #16
    33da:	bd80      	pop	{r7, pc}
    33dc:	00003501 	.word	0x00003501

000033e0 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b086      	sub	sp, #24
    33e4:	af00      	add	r7, sp, #0
    33e6:	60f8      	str	r0, [r7, #12]
    33e8:	60b9      	str	r1, [r7, #8]
    33ea:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    33ec:	68fb      	ldr	r3, [r7, #12]
    33ee:	68ba      	ldr	r2, [r7, #8]
    33f0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    33f2:	2120      	movs	r1, #32
    33f4:	2000      	movs	r0, #0
    33f6:	4b18      	ldr	r3, [pc, #96]	; (3458 <rtc_calendar_init+0x78>)
    33f8:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    33fa:	2314      	movs	r3, #20
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	0018      	movs	r0, r3
    3400:	4b16      	ldr	r3, [pc, #88]	; (345c <rtc_calendar_init+0x7c>)
    3402:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3404:	2314      	movs	r3, #20
    3406:	18fb      	adds	r3, r7, r3
    3408:	2202      	movs	r2, #2
    340a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    340c:	2314      	movs	r3, #20
    340e:	18fb      	adds	r3, r7, r3
    3410:	0019      	movs	r1, r3
    3412:	2004      	movs	r0, #4
    3414:	4b12      	ldr	r3, [pc, #72]	; (3460 <rtc_calendar_init+0x80>)
    3416:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3418:	2004      	movs	r0, #4
    341a:	4b12      	ldr	r3, [pc, #72]	; (3464 <rtc_calendar_init+0x84>)
    341c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    341e:	68fb      	ldr	r3, [r7, #12]
    3420:	0018      	movs	r0, r3
    3422:	4b11      	ldr	r3, [pc, #68]	; (3468 <rtc_calendar_init+0x88>)
    3424:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	791a      	ldrb	r2, [r3, #4]
    342a:	68fb      	ldr	r3, [r7, #12]
    342c:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    342e:	687b      	ldr	r3, [r7, #4]
    3430:	78da      	ldrb	r2, [r3, #3]
    3432:	68fb      	ldr	r3, [r7, #12]
    3434:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	88da      	ldrh	r2, [r3, #6]
    343a:	68fb      	ldr	r3, [r7, #12]
    343c:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    343e:	4b0b      	ldr	r3, [pc, #44]	; (346c <rtc_calendar_init+0x8c>)
    3440:	68fa      	ldr	r2, [r7, #12]
    3442:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3444:	687a      	ldr	r2, [r7, #4]
    3446:	68fb      	ldr	r3, [r7, #12]
    3448:	0011      	movs	r1, r2
    344a:	0018      	movs	r0, r3
    344c:	4b08      	ldr	r3, [pc, #32]	; (3470 <rtc_calendar_init+0x90>)
    344e:	4798      	blx	r3
}
    3450:	46c0      	nop			; (mov r8, r8)
    3452:	46bd      	mov	sp, r7
    3454:	b006      	add	sp, #24
    3456:	bd80      	pop	{r7, pc}
    3458:	000030ad 	.word	0x000030ad
    345c:	00003095 	.word	0x00003095
    3460:	00006605 	.word	0x00006605
    3464:	00006649 	.word	0x00006649
    3468:	000031ad 	.word	0x000031ad
    346c:	200009d0 	.word	0x200009d0
    3470:	00003319 	.word	0x00003319

00003474 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    3474:	b580      	push	{r7, lr}
    3476:	b084      	sub	sp, #16
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
    347c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	681b      	ldr	r3, [r3, #0]
    3482:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	795b      	ldrb	r3, [r3, #5]
    3488:	2201      	movs	r2, #1
    348a:	4053      	eors	r3, r2
    348c:	b2db      	uxtb	r3, r3
    348e:	2b00      	cmp	r3, #0
    3490:	d00a      	beq.n	34a8 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    3492:	68fb      	ldr	r3, [r7, #12]
    3494:	4a16      	ldr	r2, [pc, #88]	; (34f0 <rtc_calendar_get_time+0x7c>)
    3496:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	0018      	movs	r0, r3
    349e:	4b15      	ldr	r3, [pc, #84]	; (34f4 <rtc_calendar_get_time+0x80>)
    34a0:	4798      	blx	r3
    34a2:	1e03      	subs	r3, r0, #0
    34a4:	d1f9      	bne.n	349a <rtc_calendar_get_time+0x26>
    34a6:	e016      	b.n	34d6 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    34a8:	68fb      	ldr	r3, [r7, #12]
    34aa:	885b      	ldrh	r3, [r3, #2]
    34ac:	b29b      	uxth	r3, r3
    34ae:	001a      	movs	r2, r3
    34b0:	2380      	movs	r3, #128	; 0x80
    34b2:	01db      	lsls	r3, r3, #7
    34b4:	4013      	ands	r3, r2
    34b6:	d10e      	bne.n	34d6 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    34b8:	68fb      	ldr	r3, [r7, #12]
    34ba:	885b      	ldrh	r3, [r3, #2]
    34bc:	b29b      	uxth	r3, r3
    34be:	4a0e      	ldr	r2, [pc, #56]	; (34f8 <rtc_calendar_get_time+0x84>)
    34c0:	4313      	orrs	r3, r2
    34c2:	b29a      	uxth	r2, r3
    34c4:	68fb      	ldr	r3, [r7, #12]
    34c6:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    34c8:	46c0      	nop			; (mov r8, r8)
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	0018      	movs	r0, r3
    34ce:	4b09      	ldr	r3, [pc, #36]	; (34f4 <rtc_calendar_get_time+0x80>)
    34d0:	4798      	blx	r3
    34d2:	1e03      	subs	r3, r0, #0
    34d4:	d1f9      	bne.n	34ca <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    34d6:	68fb      	ldr	r3, [r7, #12]
    34d8:	691b      	ldr	r3, [r3, #16]
    34da:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    34dc:	683a      	ldr	r2, [r7, #0]
    34de:	68b9      	ldr	r1, [r7, #8]
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	0018      	movs	r0, r3
    34e4:	4b05      	ldr	r3, [pc, #20]	; (34fc <rtc_calendar_get_time+0x88>)
    34e6:	4798      	blx	r3
}
    34e8:	46c0      	nop			; (mov r8, r8)
    34ea:	46bd      	mov	sp, r7
    34ec:	b004      	add	sp, #16
    34ee:	bd80      	pop	{r7, pc}
    34f0:	ffff8000 	.word	0xffff8000
    34f4:	00003109 	.word	0x00003109
    34f8:	ffffc000 	.word	0xffffc000
    34fc:	00003279 	.word	0x00003279

00003500 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3500:	b580      	push	{r7, lr}
    3502:	b086      	sub	sp, #24
    3504:	af00      	add	r7, sp, #0
    3506:	60f8      	str	r0, [r7, #12]
    3508:	60b9      	str	r1, [r7, #8]
    350a:	1dfb      	adds	r3, r7, #7
    350c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    350e:	68fb      	ldr	r3, [r7, #12]
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3514:	1dfb      	adds	r3, r7, #7
    3516:	781b      	ldrb	r3, [r3, #0]
    3518:	2b01      	cmp	r3, #1
    351a:	d901      	bls.n	3520 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    351c:	2317      	movs	r3, #23
    351e:	e021      	b.n	3564 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3520:	68ba      	ldr	r2, [r7, #8]
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	0011      	movs	r1, r2
    3526:	0018      	movs	r0, r3
    3528:	4b10      	ldr	r3, [pc, #64]	; (356c <rtc_calendar_set_alarm+0x6c>)
    352a:	4798      	blx	r3
    352c:	0003      	movs	r3, r0
    352e:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    3530:	46c0      	nop			; (mov r8, r8)
    3532:	68fb      	ldr	r3, [r7, #12]
    3534:	0018      	movs	r0, r3
    3536:	4b0e      	ldr	r3, [pc, #56]	; (3570 <rtc_calendar_set_alarm+0x70>)
    3538:	4798      	blx	r3
    353a:	1e03      	subs	r3, r0, #0
    353c:	d1f9      	bne.n	3532 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    353e:	1dfb      	adds	r3, r7, #7
    3540:	781a      	ldrb	r2, [r3, #0]
    3542:	697b      	ldr	r3, [r7, #20]
    3544:	3203      	adds	r2, #3
    3546:	00d2      	lsls	r2, r2, #3
    3548:	6939      	ldr	r1, [r7, #16]
    354a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    354c:	1dfb      	adds	r3, r7, #7
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	68ba      	ldr	r2, [r7, #8]
    3552:	7a11      	ldrb	r1, [r2, #8]
    3554:	697a      	ldr	r2, [r7, #20]
    3556:	3303      	adds	r3, #3
    3558:	00db      	lsls	r3, r3, #3
    355a:	18d3      	adds	r3, r2, r3
    355c:	3304      	adds	r3, #4
    355e:	1c0a      	adds	r2, r1, #0
    3560:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3562:	2300      	movs	r3, #0
}
    3564:	0018      	movs	r0, r3
    3566:	46bd      	mov	sp, r7
    3568:	b006      	add	sp, #24
    356a:	bd80      	pop	{r7, pc}
    356c:	000031f1 	.word	0x000031f1
    3570:	00003109 	.word	0x00003109

00003574 <system_gclk_chan_get_config_defaults>:
{
    3574:	b580      	push	{r7, lr}
    3576:	b082      	sub	sp, #8
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	2200      	movs	r2, #0
    3580:	701a      	strb	r2, [r3, #0]
}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	46bd      	mov	sp, r7
    3586:	b002      	add	sp, #8
    3588:	bd80      	pop	{r7, pc}

0000358a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    358a:	b5f0      	push	{r4, r5, r6, r7, lr}
    358c:	b08d      	sub	sp, #52	; 0x34
    358e:	af00      	add	r7, sp, #0
    3590:	60b8      	str	r0, [r7, #8]
    3592:	60f9      	str	r1, [r7, #12]
    3594:	603a      	str	r2, [r7, #0]
    3596:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3598:	2300      	movs	r3, #0
    359a:	2400      	movs	r4, #0
    359c:	623b      	str	r3, [r7, #32]
    359e:	627c      	str	r4, [r7, #36]	; 0x24
    35a0:	2300      	movs	r3, #0
    35a2:	2400      	movs	r4, #0
    35a4:	61bb      	str	r3, [r7, #24]
    35a6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    35a8:	233f      	movs	r3, #63	; 0x3f
    35aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    35ac:	e053      	b.n	3656 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    35ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35b0:	3b20      	subs	r3, #32
    35b2:	2b00      	cmp	r3, #0
    35b4:	db04      	blt.n	35c0 <long_division+0x36>
    35b6:	2201      	movs	r2, #1
    35b8:	409a      	lsls	r2, r3
    35ba:	0013      	movs	r3, r2
    35bc:	617b      	str	r3, [r7, #20]
    35be:	e00b      	b.n	35d8 <long_division+0x4e>
    35c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35c2:	2220      	movs	r2, #32
    35c4:	1ad3      	subs	r3, r2, r3
    35c6:	2201      	movs	r2, #1
    35c8:	40da      	lsrs	r2, r3
    35ca:	0013      	movs	r3, r2
    35cc:	2100      	movs	r1, #0
    35ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    35d0:	4091      	lsls	r1, r2
    35d2:	000a      	movs	r2, r1
    35d4:	4313      	orrs	r3, r2
    35d6:	617b      	str	r3, [r7, #20]
    35d8:	2201      	movs	r2, #1
    35da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35dc:	409a      	lsls	r2, r3
    35de:	0013      	movs	r3, r2
    35e0:	613b      	str	r3, [r7, #16]

		r = r << 1;
    35e2:	69bb      	ldr	r3, [r7, #24]
    35e4:	69fc      	ldr	r4, [r7, #28]
    35e6:	18db      	adds	r3, r3, r3
    35e8:	4164      	adcs	r4, r4
    35ea:	61bb      	str	r3, [r7, #24]
    35ec:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    35ee:	68bb      	ldr	r3, [r7, #8]
    35f0:	693a      	ldr	r2, [r7, #16]
    35f2:	401a      	ands	r2, r3
    35f4:	0015      	movs	r5, r2
    35f6:	68fb      	ldr	r3, [r7, #12]
    35f8:	697a      	ldr	r2, [r7, #20]
    35fa:	401a      	ands	r2, r3
    35fc:	0016      	movs	r6, r2
    35fe:	002b      	movs	r3, r5
    3600:	4333      	orrs	r3, r6
    3602:	d007      	beq.n	3614 <long_division+0x8a>
			r |= 0x01;
    3604:	69bb      	ldr	r3, [r7, #24]
    3606:	2201      	movs	r2, #1
    3608:	4313      	orrs	r3, r2
    360a:	61bb      	str	r3, [r7, #24]
    360c:	69fb      	ldr	r3, [r7, #28]
    360e:	2200      	movs	r2, #0
    3610:	4313      	orrs	r3, r2
    3612:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3614:	687a      	ldr	r2, [r7, #4]
    3616:	69fb      	ldr	r3, [r7, #28]
    3618:	429a      	cmp	r2, r3
    361a:	d819      	bhi.n	3650 <long_division+0xc6>
    361c:	687a      	ldr	r2, [r7, #4]
    361e:	69fb      	ldr	r3, [r7, #28]
    3620:	429a      	cmp	r2, r3
    3622:	d103      	bne.n	362c <long_division+0xa2>
    3624:	683a      	ldr	r2, [r7, #0]
    3626:	69bb      	ldr	r3, [r7, #24]
    3628:	429a      	cmp	r2, r3
    362a:	d811      	bhi.n	3650 <long_division+0xc6>
			r = r - d;
    362c:	69b9      	ldr	r1, [r7, #24]
    362e:	69fa      	ldr	r2, [r7, #28]
    3630:	683b      	ldr	r3, [r7, #0]
    3632:	687c      	ldr	r4, [r7, #4]
    3634:	1ac9      	subs	r1, r1, r3
    3636:	41a2      	sbcs	r2, r4
    3638:	000b      	movs	r3, r1
    363a:	0014      	movs	r4, r2
    363c:	61bb      	str	r3, [r7, #24]
    363e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3640:	6a3a      	ldr	r2, [r7, #32]
    3642:	693b      	ldr	r3, [r7, #16]
    3644:	4313      	orrs	r3, r2
    3646:	623b      	str	r3, [r7, #32]
    3648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    364a:	697b      	ldr	r3, [r7, #20]
    364c:	4313      	orrs	r3, r2
    364e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3652:	3b01      	subs	r3, #1
    3654:	62fb      	str	r3, [r7, #44]	; 0x2c
    3656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3658:	2b00      	cmp	r3, #0
    365a:	daa8      	bge.n	35ae <long_division+0x24>
		}
	}

	return q;
    365c:	6a3b      	ldr	r3, [r7, #32]
    365e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3660:	0018      	movs	r0, r3
    3662:	0021      	movs	r1, r4
    3664:	46bd      	mov	sp, r7
    3666:	b00d      	add	sp, #52	; 0x34
    3668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000366a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    366a:	b580      	push	{r7, lr}
    366c:	b086      	sub	sp, #24
    366e:	af00      	add	r7, sp, #0
    3670:	60f8      	str	r0, [r7, #12]
    3672:	60b9      	str	r1, [r7, #8]
    3674:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3676:	2316      	movs	r3, #22
    3678:	18fb      	adds	r3, r7, r3
    367a:	2200      	movs	r2, #0
    367c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    367e:	68bb      	ldr	r3, [r7, #8]
    3680:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3682:	68bb      	ldr	r3, [r7, #8]
    3684:	085a      	lsrs	r2, r3, #1
    3686:	68fb      	ldr	r3, [r7, #12]
    3688:	429a      	cmp	r2, r3
    368a:	d201      	bcs.n	3690 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    368c:	2340      	movs	r3, #64	; 0x40
    368e:	e026      	b.n	36de <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3690:	68bb      	ldr	r3, [r7, #8]
    3692:	085b      	lsrs	r3, r3, #1
    3694:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3696:	e00a      	b.n	36ae <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3698:	693a      	ldr	r2, [r7, #16]
    369a:	68fb      	ldr	r3, [r7, #12]
    369c:	1ad3      	subs	r3, r2, r3
    369e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    36a0:	2316      	movs	r3, #22
    36a2:	18fb      	adds	r3, r7, r3
    36a4:	881a      	ldrh	r2, [r3, #0]
    36a6:	2316      	movs	r3, #22
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	3201      	adds	r2, #1
    36ac:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    36ae:	693a      	ldr	r2, [r7, #16]
    36b0:	68fb      	ldr	r3, [r7, #12]
    36b2:	429a      	cmp	r2, r3
    36b4:	d2f0      	bcs.n	3698 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    36b6:	2316      	movs	r3, #22
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	2216      	movs	r2, #22
    36bc:	18ba      	adds	r2, r7, r2
    36be:	8812      	ldrh	r2, [r2, #0]
    36c0:	3a01      	subs	r2, #1
    36c2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    36c4:	2316      	movs	r3, #22
    36c6:	18fb      	adds	r3, r7, r3
    36c8:	881b      	ldrh	r3, [r3, #0]
    36ca:	2bff      	cmp	r3, #255	; 0xff
    36cc:	d901      	bls.n	36d2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36ce:	2340      	movs	r3, #64	; 0x40
    36d0:	e005      	b.n	36de <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	2216      	movs	r2, #22
    36d6:	18ba      	adds	r2, r7, r2
    36d8:	8812      	ldrh	r2, [r2, #0]
    36da:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    36dc:	2300      	movs	r3, #0
	}
}
    36de:	0018      	movs	r0, r3
    36e0:	46bd      	mov	sp, r7
    36e2:	b006      	add	sp, #24
    36e4:	bd80      	pop	{r7, pc}
	...

000036e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    36e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ea:	b0a1      	sub	sp, #132	; 0x84
    36ec:	af00      	add	r7, sp, #0
    36ee:	64f8      	str	r0, [r7, #76]	; 0x4c
    36f0:	64b9      	str	r1, [r7, #72]	; 0x48
    36f2:	647a      	str	r2, [r7, #68]	; 0x44
    36f4:	2243      	movs	r2, #67	; 0x43
    36f6:	18ba      	adds	r2, r7, r2
    36f8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    36fa:	2300      	movs	r3, #0
    36fc:	2400      	movs	r4, #0
    36fe:	673b      	str	r3, [r7, #112]	; 0x70
    3700:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3702:	2300      	movs	r3, #0
    3704:	2400      	movs	r4, #0
    3706:	66bb      	str	r3, [r7, #104]	; 0x68
    3708:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    370a:	2300      	movs	r3, #0
    370c:	2400      	movs	r4, #0
    370e:	67bb      	str	r3, [r7, #120]	; 0x78
    3710:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3712:	2300      	movs	r3, #0
    3714:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3716:	2358      	movs	r3, #88	; 0x58
    3718:	2240      	movs	r2, #64	; 0x40
    371a:	4694      	mov	ip, r2
    371c:	44bc      	add	ip, r7
    371e:	4463      	add	r3, ip
    3720:	781a      	ldrb	r2, [r3, #0]
    3722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3724:	435a      	muls	r2, r3
    3726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3728:	429a      	cmp	r2, r3
    372a:	d901      	bls.n	3730 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    372c:	2340      	movs	r3, #64	; 0x40
    372e:	e0b3      	b.n	3898 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3730:	2343      	movs	r3, #67	; 0x43
    3732:	18fb      	adds	r3, r7, r3
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	2b00      	cmp	r3, #0
    3738:	d13d      	bne.n	37b6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    373a:	2358      	movs	r3, #88	; 0x58
    373c:	2240      	movs	r2, #64	; 0x40
    373e:	4694      	mov	ip, r2
    3740:	44bc      	add	ip, r7
    3742:	4463      	add	r3, ip
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	b2db      	uxtb	r3, r3
    3748:	613b      	str	r3, [r7, #16]
    374a:	2300      	movs	r3, #0
    374c:	617b      	str	r3, [r7, #20]
    374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3750:	60bb      	str	r3, [r7, #8]
    3752:	2300      	movs	r3, #0
    3754:	60fb      	str	r3, [r7, #12]
    3756:	4c52      	ldr	r4, [pc, #328]	; (38a0 <_sercom_get_async_baud_val+0x1b8>)
    3758:	68ba      	ldr	r2, [r7, #8]
    375a:	68fb      	ldr	r3, [r7, #12]
    375c:	6938      	ldr	r0, [r7, #16]
    375e:	6979      	ldr	r1, [r7, #20]
    3760:	47a0      	blx	r4
    3762:	0003      	movs	r3, r0
    3764:	000c      	movs	r4, r1
    3766:	001b      	movs	r3, r3
    3768:	65fb      	str	r3, [r7, #92]	; 0x5c
    376a:	2300      	movs	r3, #0
    376c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    376e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3770:	603b      	str	r3, [r7, #0]
    3772:	2300      	movs	r3, #0
    3774:	607b      	str	r3, [r7, #4]
    3776:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3778:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    377a:	683a      	ldr	r2, [r7, #0]
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	4c49      	ldr	r4, [pc, #292]	; (38a4 <_sercom_get_async_baud_val+0x1bc>)
    3780:	47a0      	blx	r4
    3782:	0003      	movs	r3, r0
    3784:	000c      	movs	r4, r1
    3786:	673b      	str	r3, [r7, #112]	; 0x70
    3788:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    378a:	2100      	movs	r1, #0
    378c:	2201      	movs	r2, #1
    378e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3790:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3792:	1ac9      	subs	r1, r1, r3
    3794:	41a2      	sbcs	r2, r4
    3796:	000b      	movs	r3, r1
    3798:	0014      	movs	r4, r2
    379a:	66bb      	str	r3, [r7, #104]	; 0x68
    379c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    379e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    37a0:	0c1b      	lsrs	r3, r3, #16
    37a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    37a4:	0416      	lsls	r6, r2, #16
    37a6:	431e      	orrs	r6, r3
    37a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    37aa:	041d      	lsls	r5, r3, #16
    37ac:	0033      	movs	r3, r6
    37ae:	67bb      	str	r3, [r7, #120]	; 0x78
    37b0:	2300      	movs	r3, #0
    37b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    37b4:	e06a      	b.n	388c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    37b6:	2343      	movs	r3, #67	; 0x43
    37b8:	18fb      	adds	r3, r7, r3
    37ba:	781b      	ldrb	r3, [r3, #0]
    37bc:	2b01      	cmp	r3, #1
    37be:	d165      	bne.n	388c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    37c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    37c2:	633b      	str	r3, [r7, #48]	; 0x30
    37c4:	2300      	movs	r3, #0
    37c6:	637b      	str	r3, [r7, #52]	; 0x34
    37c8:	2358      	movs	r3, #88	; 0x58
    37ca:	2240      	movs	r2, #64	; 0x40
    37cc:	4694      	mov	ip, r2
    37ce:	44bc      	add	ip, r7
    37d0:	4463      	add	r3, ip
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	b2db      	uxtb	r3, r3
    37d6:	62bb      	str	r3, [r7, #40]	; 0x28
    37d8:	2300      	movs	r3, #0
    37da:	62fb      	str	r3, [r7, #44]	; 0x2c
    37dc:	4c30      	ldr	r4, [pc, #192]	; (38a0 <_sercom_get_async_baud_val+0x1b8>)
    37de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    37e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    37e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    37e6:	47a0      	blx	r4
    37e8:	0003      	movs	r3, r0
    37ea:	000c      	movs	r4, r1
    37ec:	65bb      	str	r3, [r7, #88]	; 0x58
    37ee:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    37f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    37f2:	623b      	str	r3, [r7, #32]
    37f4:	2300      	movs	r3, #0
    37f6:	627b      	str	r3, [r7, #36]	; 0x24
    37f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    37fa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    37fc:	001a      	movs	r2, r3
    37fe:	0023      	movs	r3, r4
    3800:	6a38      	ldr	r0, [r7, #32]
    3802:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3804:	4c27      	ldr	r4, [pc, #156]	; (38a4 <_sercom_get_async_baud_val+0x1bc>)
    3806:	47a0      	blx	r4
    3808:	0003      	movs	r3, r0
    380a:	000c      	movs	r4, r1
    380c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    380e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3810:	2380      	movs	r3, #128	; 0x80
    3812:	019b      	lsls	r3, r3, #6
    3814:	429a      	cmp	r2, r3
    3816:	d901      	bls.n	381c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3818:	2340      	movs	r3, #64	; 0x40
    381a:	e03d      	b.n	3898 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    381c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    381e:	61bb      	str	r3, [r7, #24]
    3820:	2300      	movs	r3, #0
    3822:	61fb      	str	r3, [r7, #28]
    3824:	69b9      	ldr	r1, [r7, #24]
    3826:	69fa      	ldr	r2, [r7, #28]
    3828:	000b      	movs	r3, r1
    382a:	0f5b      	lsrs	r3, r3, #29
    382c:	0010      	movs	r0, r2
    382e:	00c0      	lsls	r0, r0, #3
    3830:	63f8      	str	r0, [r7, #60]	; 0x3c
    3832:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3834:	4318      	orrs	r0, r3
    3836:	63f8      	str	r0, [r7, #60]	; 0x3c
    3838:	000b      	movs	r3, r1
    383a:	00db      	lsls	r3, r3, #3
    383c:	63bb      	str	r3, [r7, #56]	; 0x38
    383e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3840:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3842:	001a      	movs	r2, r3
    3844:	0023      	movs	r3, r4
    3846:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    384a:	4c16      	ldr	r4, [pc, #88]	; (38a4 <_sercom_get_async_baud_val+0x1bc>)
    384c:	47a0      	blx	r4
    384e:	0003      	movs	r3, r0
    3850:	000c      	movs	r4, r1
    3852:	65bb      	str	r3, [r7, #88]	; 0x58
    3854:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3858:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    385a:	b2d9      	uxtb	r1, r3
    385c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    385e:	b2db      	uxtb	r3, r3
    3860:	00db      	lsls	r3, r3, #3
    3862:	b2da      	uxtb	r2, r3
    3864:	2317      	movs	r3, #23
    3866:	2040      	movs	r0, #64	; 0x40
    3868:	4684      	mov	ip, r0
    386a:	44bc      	add	ip, r7
    386c:	4463      	add	r3, ip
    386e:	1a8a      	subs	r2, r1, r2
    3870:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3872:	2317      	movs	r3, #23
    3874:	2240      	movs	r2, #64	; 0x40
    3876:	4694      	mov	ip, r2
    3878:	44bc      	add	ip, r7
    387a:	4463      	add	r3, ip
    387c:	781b      	ldrb	r3, [r3, #0]
    387e:	035b      	lsls	r3, r3, #13
    3880:	001a      	movs	r2, r3
    3882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3884:	4313      	orrs	r3, r2
    3886:	67bb      	str	r3, [r7, #120]	; 0x78
    3888:	2300      	movs	r3, #0
    388a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    388c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    388e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3890:	b29a      	uxth	r2, r3
    3892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3894:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3896:	2300      	movs	r3, #0
}
    3898:	0018      	movs	r0, r3
    389a:	46bd      	mov	sp, r7
    389c:	b021      	add	sp, #132	; 0x84
    389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a0:	0000b2b1 	.word	0x0000b2b1
    38a4:	0000358b 	.word	0x0000358b

000038a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    38a8:	b580      	push	{r7, lr}
    38aa:	b084      	sub	sp, #16
    38ac:	af00      	add	r7, sp, #0
    38ae:	0002      	movs	r2, r0
    38b0:	1dfb      	adds	r3, r7, #7
    38b2:	701a      	strb	r2, [r3, #0]
    38b4:	1dbb      	adds	r3, r7, #6
    38b6:	1c0a      	adds	r2, r1, #0
    38b8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    38ba:	4b1a      	ldr	r3, [pc, #104]	; (3924 <sercom_set_gclk_generator+0x7c>)
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	2201      	movs	r2, #1
    38c0:	4053      	eors	r3, r2
    38c2:	b2db      	uxtb	r3, r3
    38c4:	2b00      	cmp	r3, #0
    38c6:	d103      	bne.n	38d0 <sercom_set_gclk_generator+0x28>
    38c8:	1dbb      	adds	r3, r7, #6
    38ca:	781b      	ldrb	r3, [r3, #0]
    38cc:	2b00      	cmp	r3, #0
    38ce:	d01b      	beq.n	3908 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    38d0:	230c      	movs	r3, #12
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	0018      	movs	r0, r3
    38d6:	4b14      	ldr	r3, [pc, #80]	; (3928 <sercom_set_gclk_generator+0x80>)
    38d8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    38da:	230c      	movs	r3, #12
    38dc:	18fb      	adds	r3, r7, r3
    38de:	1dfa      	adds	r2, r7, #7
    38e0:	7812      	ldrb	r2, [r2, #0]
    38e2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    38e4:	230c      	movs	r3, #12
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	0019      	movs	r1, r3
    38ea:	2013      	movs	r0, #19
    38ec:	4b0f      	ldr	r3, [pc, #60]	; (392c <sercom_set_gclk_generator+0x84>)
    38ee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    38f0:	2013      	movs	r0, #19
    38f2:	4b0f      	ldr	r3, [pc, #60]	; (3930 <sercom_set_gclk_generator+0x88>)
    38f4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    38f6:	4b0b      	ldr	r3, [pc, #44]	; (3924 <sercom_set_gclk_generator+0x7c>)
    38f8:	1dfa      	adds	r2, r7, #7
    38fa:	7812      	ldrb	r2, [r2, #0]
    38fc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    38fe:	4b09      	ldr	r3, [pc, #36]	; (3924 <sercom_set_gclk_generator+0x7c>)
    3900:	2201      	movs	r2, #1
    3902:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3904:	2300      	movs	r3, #0
    3906:	e008      	b.n	391a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3908:	4b06      	ldr	r3, [pc, #24]	; (3924 <sercom_set_gclk_generator+0x7c>)
    390a:	785b      	ldrb	r3, [r3, #1]
    390c:	1dfa      	adds	r2, r7, #7
    390e:	7812      	ldrb	r2, [r2, #0]
    3910:	429a      	cmp	r2, r3
    3912:	d101      	bne.n	3918 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3914:	2300      	movs	r3, #0
    3916:	e000      	b.n	391a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3918:	231d      	movs	r3, #29
}
    391a:	0018      	movs	r0, r3
    391c:	46bd      	mov	sp, r7
    391e:	b004      	add	sp, #16
    3920:	bd80      	pop	{r7, pc}
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	20000144 	.word	0x20000144
    3928:	00003575 	.word	0x00003575
    392c:	00006605 	.word	0x00006605
    3930:	00006649 	.word	0x00006649

00003934 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3934:	b580      	push	{r7, lr}
    3936:	b082      	sub	sp, #8
    3938:	af00      	add	r7, sp, #0
    393a:	6078      	str	r0, [r7, #4]
    393c:	000a      	movs	r2, r1
    393e:	1cfb      	adds	r3, r7, #3
    3940:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	4a4d      	ldr	r2, [pc, #308]	; (3a7c <_sercom_get_default_pad+0x148>)
    3946:	4293      	cmp	r3, r2
    3948:	d03f      	beq.n	39ca <_sercom_get_default_pad+0x96>
    394a:	4a4c      	ldr	r2, [pc, #304]	; (3a7c <_sercom_get_default_pad+0x148>)
    394c:	4293      	cmp	r3, r2
    394e:	d806      	bhi.n	395e <_sercom_get_default_pad+0x2a>
    3950:	4a4b      	ldr	r2, [pc, #300]	; (3a80 <_sercom_get_default_pad+0x14c>)
    3952:	4293      	cmp	r3, r2
    3954:	d00f      	beq.n	3976 <_sercom_get_default_pad+0x42>
    3956:	4a4b      	ldr	r2, [pc, #300]	; (3a84 <_sercom_get_default_pad+0x150>)
    3958:	4293      	cmp	r3, r2
    395a:	d021      	beq.n	39a0 <_sercom_get_default_pad+0x6c>
    395c:	e089      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    395e:	4a4a      	ldr	r2, [pc, #296]	; (3a88 <_sercom_get_default_pad+0x154>)
    3960:	4293      	cmp	r3, r2
    3962:	d100      	bne.n	3966 <_sercom_get_default_pad+0x32>
    3964:	e05b      	b.n	3a1e <_sercom_get_default_pad+0xea>
    3966:	4a49      	ldr	r2, [pc, #292]	; (3a8c <_sercom_get_default_pad+0x158>)
    3968:	4293      	cmp	r3, r2
    396a:	d100      	bne.n	396e <_sercom_get_default_pad+0x3a>
    396c:	e06c      	b.n	3a48 <_sercom_get_default_pad+0x114>
    396e:	4a48      	ldr	r2, [pc, #288]	; (3a90 <_sercom_get_default_pad+0x15c>)
    3970:	4293      	cmp	r3, r2
    3972:	d03f      	beq.n	39f4 <_sercom_get_default_pad+0xc0>
    3974:	e07d      	b.n	3a72 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3976:	1cfb      	adds	r3, r7, #3
    3978:	781b      	ldrb	r3, [r3, #0]
    397a:	2b01      	cmp	r3, #1
    397c:	d00a      	beq.n	3994 <_sercom_get_default_pad+0x60>
    397e:	dc02      	bgt.n	3986 <_sercom_get_default_pad+0x52>
    3980:	2b00      	cmp	r3, #0
    3982:	d005      	beq.n	3990 <_sercom_get_default_pad+0x5c>
    3984:	e075      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3986:	2b02      	cmp	r3, #2
    3988:	d006      	beq.n	3998 <_sercom_get_default_pad+0x64>
    398a:	2b03      	cmp	r3, #3
    398c:	d006      	beq.n	399c <_sercom_get_default_pad+0x68>
    398e:	e070      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3990:	4b40      	ldr	r3, [pc, #256]	; (3a94 <_sercom_get_default_pad+0x160>)
    3992:	e06f      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3994:	4b40      	ldr	r3, [pc, #256]	; (3a98 <_sercom_get_default_pad+0x164>)
    3996:	e06d      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3998:	4b40      	ldr	r3, [pc, #256]	; (3a9c <_sercom_get_default_pad+0x168>)
    399a:	e06b      	b.n	3a74 <_sercom_get_default_pad+0x140>
    399c:	4b40      	ldr	r3, [pc, #256]	; (3aa0 <_sercom_get_default_pad+0x16c>)
    399e:	e069      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39a0:	1cfb      	adds	r3, r7, #3
    39a2:	781b      	ldrb	r3, [r3, #0]
    39a4:	2b01      	cmp	r3, #1
    39a6:	d00a      	beq.n	39be <_sercom_get_default_pad+0x8a>
    39a8:	dc02      	bgt.n	39b0 <_sercom_get_default_pad+0x7c>
    39aa:	2b00      	cmp	r3, #0
    39ac:	d005      	beq.n	39ba <_sercom_get_default_pad+0x86>
    39ae:	e060      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    39b0:	2b02      	cmp	r3, #2
    39b2:	d006      	beq.n	39c2 <_sercom_get_default_pad+0x8e>
    39b4:	2b03      	cmp	r3, #3
    39b6:	d006      	beq.n	39c6 <_sercom_get_default_pad+0x92>
    39b8:	e05b      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    39ba:	2303      	movs	r3, #3
    39bc:	e05a      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39be:	4b39      	ldr	r3, [pc, #228]	; (3aa4 <_sercom_get_default_pad+0x170>)
    39c0:	e058      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39c2:	4b39      	ldr	r3, [pc, #228]	; (3aa8 <_sercom_get_default_pad+0x174>)
    39c4:	e056      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39c6:	4b39      	ldr	r3, [pc, #228]	; (3aac <_sercom_get_default_pad+0x178>)
    39c8:	e054      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39ca:	1cfb      	adds	r3, r7, #3
    39cc:	781b      	ldrb	r3, [r3, #0]
    39ce:	2b01      	cmp	r3, #1
    39d0:	d00a      	beq.n	39e8 <_sercom_get_default_pad+0xb4>
    39d2:	dc02      	bgt.n	39da <_sercom_get_default_pad+0xa6>
    39d4:	2b00      	cmp	r3, #0
    39d6:	d005      	beq.n	39e4 <_sercom_get_default_pad+0xb0>
    39d8:	e04b      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    39da:	2b02      	cmp	r3, #2
    39dc:	d006      	beq.n	39ec <_sercom_get_default_pad+0xb8>
    39de:	2b03      	cmp	r3, #3
    39e0:	d006      	beq.n	39f0 <_sercom_get_default_pad+0xbc>
    39e2:	e046      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    39e4:	4b32      	ldr	r3, [pc, #200]	; (3ab0 <_sercom_get_default_pad+0x17c>)
    39e6:	e045      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39e8:	4b32      	ldr	r3, [pc, #200]	; (3ab4 <_sercom_get_default_pad+0x180>)
    39ea:	e043      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39ec:	4b32      	ldr	r3, [pc, #200]	; (3ab8 <_sercom_get_default_pad+0x184>)
    39ee:	e041      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39f0:	4b32      	ldr	r3, [pc, #200]	; (3abc <_sercom_get_default_pad+0x188>)
    39f2:	e03f      	b.n	3a74 <_sercom_get_default_pad+0x140>
    39f4:	1cfb      	adds	r3, r7, #3
    39f6:	781b      	ldrb	r3, [r3, #0]
    39f8:	2b01      	cmp	r3, #1
    39fa:	d00a      	beq.n	3a12 <_sercom_get_default_pad+0xde>
    39fc:	dc02      	bgt.n	3a04 <_sercom_get_default_pad+0xd0>
    39fe:	2b00      	cmp	r3, #0
    3a00:	d005      	beq.n	3a0e <_sercom_get_default_pad+0xda>
    3a02:	e036      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3a04:	2b02      	cmp	r3, #2
    3a06:	d006      	beq.n	3a16 <_sercom_get_default_pad+0xe2>
    3a08:	2b03      	cmp	r3, #3
    3a0a:	d006      	beq.n	3a1a <_sercom_get_default_pad+0xe6>
    3a0c:	e031      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3a0e:	4b2c      	ldr	r3, [pc, #176]	; (3ac0 <_sercom_get_default_pad+0x18c>)
    3a10:	e030      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a12:	4b2c      	ldr	r3, [pc, #176]	; (3ac4 <_sercom_get_default_pad+0x190>)
    3a14:	e02e      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a16:	4b2c      	ldr	r3, [pc, #176]	; (3ac8 <_sercom_get_default_pad+0x194>)
    3a18:	e02c      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a1a:	4b2c      	ldr	r3, [pc, #176]	; (3acc <_sercom_get_default_pad+0x198>)
    3a1c:	e02a      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a1e:	1cfb      	adds	r3, r7, #3
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	2b01      	cmp	r3, #1
    3a24:	d00a      	beq.n	3a3c <_sercom_get_default_pad+0x108>
    3a26:	dc02      	bgt.n	3a2e <_sercom_get_default_pad+0xfa>
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d005      	beq.n	3a38 <_sercom_get_default_pad+0x104>
    3a2c:	e021      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3a2e:	2b02      	cmp	r3, #2
    3a30:	d006      	beq.n	3a40 <_sercom_get_default_pad+0x10c>
    3a32:	2b03      	cmp	r3, #3
    3a34:	d006      	beq.n	3a44 <_sercom_get_default_pad+0x110>
    3a36:	e01c      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3a38:	4b25      	ldr	r3, [pc, #148]	; (3ad0 <_sercom_get_default_pad+0x19c>)
    3a3a:	e01b      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a3c:	4b25      	ldr	r3, [pc, #148]	; (3ad4 <_sercom_get_default_pad+0x1a0>)
    3a3e:	e019      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a40:	4b25      	ldr	r3, [pc, #148]	; (3ad8 <_sercom_get_default_pad+0x1a4>)
    3a42:	e017      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a44:	4b25      	ldr	r3, [pc, #148]	; (3adc <_sercom_get_default_pad+0x1a8>)
    3a46:	e015      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a48:	1cfb      	adds	r3, r7, #3
    3a4a:	781b      	ldrb	r3, [r3, #0]
    3a4c:	2b01      	cmp	r3, #1
    3a4e:	d00a      	beq.n	3a66 <_sercom_get_default_pad+0x132>
    3a50:	dc02      	bgt.n	3a58 <_sercom_get_default_pad+0x124>
    3a52:	2b00      	cmp	r3, #0
    3a54:	d005      	beq.n	3a62 <_sercom_get_default_pad+0x12e>
    3a56:	e00c      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3a58:	2b02      	cmp	r3, #2
    3a5a:	d006      	beq.n	3a6a <_sercom_get_default_pad+0x136>
    3a5c:	2b03      	cmp	r3, #3
    3a5e:	d006      	beq.n	3a6e <_sercom_get_default_pad+0x13a>
    3a60:	e007      	b.n	3a72 <_sercom_get_default_pad+0x13e>
    3a62:	4b1f      	ldr	r3, [pc, #124]	; (3ae0 <_sercom_get_default_pad+0x1ac>)
    3a64:	e006      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a66:	4b1f      	ldr	r3, [pc, #124]	; (3ae4 <_sercom_get_default_pad+0x1b0>)
    3a68:	e004      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a6a:	4b1f      	ldr	r3, [pc, #124]	; (3ae8 <_sercom_get_default_pad+0x1b4>)
    3a6c:	e002      	b.n	3a74 <_sercom_get_default_pad+0x140>
    3a6e:	4b1f      	ldr	r3, [pc, #124]	; (3aec <_sercom_get_default_pad+0x1b8>)
    3a70:	e000      	b.n	3a74 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3a72:	2300      	movs	r3, #0
}
    3a74:	0018      	movs	r0, r3
    3a76:	46bd      	mov	sp, r7
    3a78:	b002      	add	sp, #8
    3a7a:	bd80      	pop	{r7, pc}
    3a7c:	42001000 	.word	0x42001000
    3a80:	42000800 	.word	0x42000800
    3a84:	42000c00 	.word	0x42000c00
    3a88:	42001800 	.word	0x42001800
    3a8c:	42001c00 	.word	0x42001c00
    3a90:	42001400 	.word	0x42001400
    3a94:	00040003 	.word	0x00040003
    3a98:	00050003 	.word	0x00050003
    3a9c:	00060003 	.word	0x00060003
    3aa0:	00070003 	.word	0x00070003
    3aa4:	00010003 	.word	0x00010003
    3aa8:	001e0003 	.word	0x001e0003
    3aac:	001f0003 	.word	0x001f0003
    3ab0:	00080003 	.word	0x00080003
    3ab4:	00090003 	.word	0x00090003
    3ab8:	000a0003 	.word	0x000a0003
    3abc:	000b0003 	.word	0x000b0003
    3ac0:	00100003 	.word	0x00100003
    3ac4:	00110003 	.word	0x00110003
    3ac8:	00120003 	.word	0x00120003
    3acc:	00130003 	.word	0x00130003
    3ad0:	000c0003 	.word	0x000c0003
    3ad4:	000d0003 	.word	0x000d0003
    3ad8:	000e0003 	.word	0x000e0003
    3adc:	000f0003 	.word	0x000f0003
    3ae0:	00160003 	.word	0x00160003
    3ae4:	00170003 	.word	0x00170003
    3ae8:	00180003 	.word	0x00180003
    3aec:	00190003 	.word	0x00190003

00003af0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3af0:	b590      	push	{r4, r7, lr}
    3af2:	b08b      	sub	sp, #44	; 0x2c
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3af8:	230c      	movs	r3, #12
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	4a0f      	ldr	r2, [pc, #60]	; (3b3c <_sercom_get_sercom_inst_index+0x4c>)
    3afe:	ca13      	ldmia	r2!, {r0, r1, r4}
    3b00:	c313      	stmia	r3!, {r0, r1, r4}
    3b02:	ca13      	ldmia	r2!, {r0, r1, r4}
    3b04:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3b06:	2300      	movs	r3, #0
    3b08:	627b      	str	r3, [r7, #36]	; 0x24
    3b0a:	e00e      	b.n	3b2a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3b0c:	230c      	movs	r3, #12
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b12:	0092      	lsls	r2, r2, #2
    3b14:	58d3      	ldr	r3, [r2, r3]
    3b16:	001a      	movs	r2, r3
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	429a      	cmp	r2, r3
    3b1c:	d102      	bne.n	3b24 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b20:	b2db      	uxtb	r3, r3
    3b22:	e006      	b.n	3b32 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b26:	3301      	adds	r3, #1
    3b28:	627b      	str	r3, [r7, #36]	; 0x24
    3b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b2c:	2b05      	cmp	r3, #5
    3b2e:	d9ed      	bls.n	3b0c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3b30:	2300      	movs	r3, #0
}
    3b32:	0018      	movs	r0, r3
    3b34:	46bd      	mov	sp, r7
    3b36:	b00b      	add	sp, #44	; 0x2c
    3b38:	bd90      	pop	{r4, r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	0000c2fc 	.word	0x0000c2fc

00003b40 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3b40:	b580      	push	{r7, lr}
    3b42:	b082      	sub	sp, #8
    3b44:	af00      	add	r7, sp, #0
    3b46:	0002      	movs	r2, r0
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3b4c:	46c0      	nop			; (mov r8, r8)
    3b4e:	46bd      	mov	sp, r7
    3b50:	b002      	add	sp, #8
    3b52:	bd80      	pop	{r7, pc}

00003b54 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3b54:	b580      	push	{r7, lr}
    3b56:	b084      	sub	sp, #16
    3b58:	af00      	add	r7, sp, #0
    3b5a:	0002      	movs	r2, r0
    3b5c:	6039      	str	r1, [r7, #0]
    3b5e:	1dfb      	adds	r3, r7, #7
    3b60:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3b62:	4b13      	ldr	r3, [pc, #76]	; (3bb0 <_sercom_set_handler+0x5c>)
    3b64:	781b      	ldrb	r3, [r3, #0]
    3b66:	2201      	movs	r2, #1
    3b68:	4053      	eors	r3, r2
    3b6a:	b2db      	uxtb	r3, r3
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d015      	beq.n	3b9c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3b70:	2300      	movs	r3, #0
    3b72:	60fb      	str	r3, [r7, #12]
    3b74:	e00c      	b.n	3b90 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3b76:	4b0f      	ldr	r3, [pc, #60]	; (3bb4 <_sercom_set_handler+0x60>)
    3b78:	68fa      	ldr	r2, [r7, #12]
    3b7a:	0092      	lsls	r2, r2, #2
    3b7c:	490e      	ldr	r1, [pc, #56]	; (3bb8 <_sercom_set_handler+0x64>)
    3b7e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3b80:	4b0e      	ldr	r3, [pc, #56]	; (3bbc <_sercom_set_handler+0x68>)
    3b82:	68fa      	ldr	r2, [r7, #12]
    3b84:	0092      	lsls	r2, r2, #2
    3b86:	2100      	movs	r1, #0
    3b88:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3b8a:	68fb      	ldr	r3, [r7, #12]
    3b8c:	3301      	adds	r3, #1
    3b8e:	60fb      	str	r3, [r7, #12]
    3b90:	68fb      	ldr	r3, [r7, #12]
    3b92:	2b05      	cmp	r3, #5
    3b94:	d9ef      	bls.n	3b76 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3b96:	4b06      	ldr	r3, [pc, #24]	; (3bb0 <_sercom_set_handler+0x5c>)
    3b98:	2201      	movs	r2, #1
    3b9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3b9c:	1dfb      	adds	r3, r7, #7
    3b9e:	781a      	ldrb	r2, [r3, #0]
    3ba0:	4b04      	ldr	r3, [pc, #16]	; (3bb4 <_sercom_set_handler+0x60>)
    3ba2:	0092      	lsls	r2, r2, #2
    3ba4:	6839      	ldr	r1, [r7, #0]
    3ba6:	50d1      	str	r1, [r2, r3]
}
    3ba8:	46c0      	nop			; (mov r8, r8)
    3baa:	46bd      	mov	sp, r7
    3bac:	b004      	add	sp, #16
    3bae:	bd80      	pop	{r7, pc}
    3bb0:	20000146 	.word	0x20000146
    3bb4:	20000148 	.word	0x20000148
    3bb8:	00003b41 	.word	0x00003b41
    3bbc:	200009d4 	.word	0x200009d4

00003bc0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3bc0:	b590      	push	{r4, r7, lr}
    3bc2:	b085      	sub	sp, #20
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3bc8:	2308      	movs	r3, #8
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	4a0b      	ldr	r2, [pc, #44]	; (3bfc <_sercom_get_interrupt_vector+0x3c>)
    3bce:	6811      	ldr	r1, [r2, #0]
    3bd0:	6019      	str	r1, [r3, #0]
    3bd2:	8892      	ldrh	r2, [r2, #4]
    3bd4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3bd6:	230f      	movs	r3, #15
    3bd8:	18fc      	adds	r4, r7, r3
    3bda:	687b      	ldr	r3, [r7, #4]
    3bdc:	0018      	movs	r0, r3
    3bde:	4b08      	ldr	r3, [pc, #32]	; (3c00 <_sercom_get_interrupt_vector+0x40>)
    3be0:	4798      	blx	r3
    3be2:	0003      	movs	r3, r0
    3be4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3be6:	230f      	movs	r3, #15
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	781b      	ldrb	r3, [r3, #0]
    3bec:	2208      	movs	r2, #8
    3bee:	18ba      	adds	r2, r7, r2
    3bf0:	5cd3      	ldrb	r3, [r2, r3]
    3bf2:	b25b      	sxtb	r3, r3
}
    3bf4:	0018      	movs	r0, r3
    3bf6:	46bd      	mov	sp, r7
    3bf8:	b005      	add	sp, #20
    3bfa:	bd90      	pop	{r4, r7, pc}
    3bfc:	0000c314 	.word	0x0000c314
    3c00:	00003af1 	.word	0x00003af1

00003c04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3c04:	b580      	push	{r7, lr}
    3c06:	af00      	add	r7, sp, #0
    3c08:	4b03      	ldr	r3, [pc, #12]	; (3c18 <SERCOM0_Handler+0x14>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	2000      	movs	r0, #0
    3c0e:	4798      	blx	r3
    3c10:	46c0      	nop			; (mov r8, r8)
    3c12:	46bd      	mov	sp, r7
    3c14:	bd80      	pop	{r7, pc}
    3c16:	46c0      	nop			; (mov r8, r8)
    3c18:	20000148 	.word	0x20000148

00003c1c <SERCOM1_Handler>:
    3c1c:	b580      	push	{r7, lr}
    3c1e:	af00      	add	r7, sp, #0
    3c20:	4b03      	ldr	r3, [pc, #12]	; (3c30 <SERCOM1_Handler+0x14>)
    3c22:	685b      	ldr	r3, [r3, #4]
    3c24:	2001      	movs	r0, #1
    3c26:	4798      	blx	r3
    3c28:	46c0      	nop			; (mov r8, r8)
    3c2a:	46bd      	mov	sp, r7
    3c2c:	bd80      	pop	{r7, pc}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	20000148 	.word	0x20000148

00003c34 <SERCOM2_Handler>:
    3c34:	b580      	push	{r7, lr}
    3c36:	af00      	add	r7, sp, #0
    3c38:	4b03      	ldr	r3, [pc, #12]	; (3c48 <SERCOM2_Handler+0x14>)
    3c3a:	689b      	ldr	r3, [r3, #8]
    3c3c:	2002      	movs	r0, #2
    3c3e:	4798      	blx	r3
    3c40:	46c0      	nop			; (mov r8, r8)
    3c42:	46bd      	mov	sp, r7
    3c44:	bd80      	pop	{r7, pc}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	20000148 	.word	0x20000148

00003c4c <SERCOM3_Handler>:
    3c4c:	b580      	push	{r7, lr}
    3c4e:	af00      	add	r7, sp, #0
    3c50:	4b03      	ldr	r3, [pc, #12]	; (3c60 <SERCOM3_Handler+0x14>)
    3c52:	68db      	ldr	r3, [r3, #12]
    3c54:	2003      	movs	r0, #3
    3c56:	4798      	blx	r3
    3c58:	46c0      	nop			; (mov r8, r8)
    3c5a:	46bd      	mov	sp, r7
    3c5c:	bd80      	pop	{r7, pc}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	20000148 	.word	0x20000148

00003c64 <SERCOM4_Handler>:
    3c64:	b580      	push	{r7, lr}
    3c66:	af00      	add	r7, sp, #0
    3c68:	4b03      	ldr	r3, [pc, #12]	; (3c78 <SERCOM4_Handler+0x14>)
    3c6a:	691b      	ldr	r3, [r3, #16]
    3c6c:	2004      	movs	r0, #4
    3c6e:	4798      	blx	r3
    3c70:	46c0      	nop			; (mov r8, r8)
    3c72:	46bd      	mov	sp, r7
    3c74:	bd80      	pop	{r7, pc}
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	20000148 	.word	0x20000148

00003c7c <SERCOM5_Handler>:
    3c7c:	b580      	push	{r7, lr}
    3c7e:	af00      	add	r7, sp, #0
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <SERCOM5_Handler+0x14>)
    3c82:	695b      	ldr	r3, [r3, #20]
    3c84:	2005      	movs	r0, #5
    3c86:	4798      	blx	r3
    3c88:	46c0      	nop			; (mov r8, r8)
    3c8a:	46bd      	mov	sp, r7
    3c8c:	bd80      	pop	{r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	20000148 	.word	0x20000148

00003c94 <system_pinmux_get_config_defaults>:
{
    3c94:	b580      	push	{r7, lr}
    3c96:	b082      	sub	sp, #8
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	2280      	movs	r2, #128	; 0x80
    3ca0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	2200      	movs	r2, #0
    3ca6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	2201      	movs	r2, #1
    3cac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	2200      	movs	r2, #0
    3cb2:	70da      	strb	r2, [r3, #3]
}
    3cb4:	46c0      	nop			; (mov r8, r8)
    3cb6:	46bd      	mov	sp, r7
    3cb8:	b002      	add	sp, #8
    3cba:	bd80      	pop	{r7, pc}

00003cbc <system_pinmux_get_group_from_gpio_pin>:
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b084      	sub	sp, #16
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	0002      	movs	r2, r0
    3cc4:	1dfb      	adds	r3, r7, #7
    3cc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3cc8:	230f      	movs	r3, #15
    3cca:	18fb      	adds	r3, r7, r3
    3ccc:	1dfa      	adds	r2, r7, #7
    3cce:	7812      	ldrb	r2, [r2, #0]
    3cd0:	09d2      	lsrs	r2, r2, #7
    3cd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3cd4:	230e      	movs	r3, #14
    3cd6:	18fb      	adds	r3, r7, r3
    3cd8:	1dfa      	adds	r2, r7, #7
    3cda:	7812      	ldrb	r2, [r2, #0]
    3cdc:	0952      	lsrs	r2, r2, #5
    3cde:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ce0:	4b0d      	ldr	r3, [pc, #52]	; (3d18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ce2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3ce4:	230f      	movs	r3, #15
    3ce6:	18fb      	adds	r3, r7, r3
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	2b00      	cmp	r3, #0
    3cec:	d10f      	bne.n	3d0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3cee:	230f      	movs	r3, #15
    3cf0:	18fb      	adds	r3, r7, r3
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	009b      	lsls	r3, r3, #2
    3cf6:	2210      	movs	r2, #16
    3cf8:	4694      	mov	ip, r2
    3cfa:	44bc      	add	ip, r7
    3cfc:	4463      	add	r3, ip
    3cfe:	3b08      	subs	r3, #8
    3d00:	681a      	ldr	r2, [r3, #0]
    3d02:	230e      	movs	r3, #14
    3d04:	18fb      	adds	r3, r7, r3
    3d06:	781b      	ldrb	r3, [r3, #0]
    3d08:	01db      	lsls	r3, r3, #7
    3d0a:	18d3      	adds	r3, r2, r3
    3d0c:	e000      	b.n	3d10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3d0e:	2300      	movs	r3, #0
}
    3d10:	0018      	movs	r0, r3
    3d12:	46bd      	mov	sp, r7
    3d14:	b004      	add	sp, #16
    3d16:	bd80      	pop	{r7, pc}
    3d18:	41004400 	.word	0x41004400

00003d1c <port_get_group_from_gpio_pin>:
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b082      	sub	sp, #8
    3d20:	af00      	add	r7, sp, #0
    3d22:	0002      	movs	r2, r0
    3d24:	1dfb      	adds	r3, r7, #7
    3d26:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3d28:	1dfb      	adds	r3, r7, #7
    3d2a:	781b      	ldrb	r3, [r3, #0]
    3d2c:	0018      	movs	r0, r3
    3d2e:	4b03      	ldr	r3, [pc, #12]	; (3d3c <port_get_group_from_gpio_pin+0x20>)
    3d30:	4798      	blx	r3
    3d32:	0003      	movs	r3, r0
}
    3d34:	0018      	movs	r0, r3
    3d36:	46bd      	mov	sp, r7
    3d38:	b002      	add	sp, #8
    3d3a:	bd80      	pop	{r7, pc}
    3d3c:	00003cbd 	.word	0x00003cbd

00003d40 <port_pin_set_output_level>:
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b084      	sub	sp, #16
    3d44:	af00      	add	r7, sp, #0
    3d46:	0002      	movs	r2, r0
    3d48:	1dfb      	adds	r3, r7, #7
    3d4a:	701a      	strb	r2, [r3, #0]
    3d4c:	1dbb      	adds	r3, r7, #6
    3d4e:	1c0a      	adds	r2, r1, #0
    3d50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3d52:	1dfb      	adds	r3, r7, #7
    3d54:	781b      	ldrb	r3, [r3, #0]
    3d56:	0018      	movs	r0, r3
    3d58:	4b0d      	ldr	r3, [pc, #52]	; (3d90 <port_pin_set_output_level+0x50>)
    3d5a:	4798      	blx	r3
    3d5c:	0003      	movs	r3, r0
    3d5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d60:	1dfb      	adds	r3, r7, #7
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	221f      	movs	r2, #31
    3d66:	4013      	ands	r3, r2
    3d68:	2201      	movs	r2, #1
    3d6a:	409a      	lsls	r2, r3
    3d6c:	0013      	movs	r3, r2
    3d6e:	60bb      	str	r3, [r7, #8]
	if (level) {
    3d70:	1dbb      	adds	r3, r7, #6
    3d72:	781b      	ldrb	r3, [r3, #0]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d003      	beq.n	3d80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3d78:	68fb      	ldr	r3, [r7, #12]
    3d7a:	68ba      	ldr	r2, [r7, #8]
    3d7c:	619a      	str	r2, [r3, #24]
}
    3d7e:	e002      	b.n	3d86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3d80:	68fb      	ldr	r3, [r7, #12]
    3d82:	68ba      	ldr	r2, [r7, #8]
    3d84:	615a      	str	r2, [r3, #20]
}
    3d86:	46c0      	nop			; (mov r8, r8)
    3d88:	46bd      	mov	sp, r7
    3d8a:	b004      	add	sp, #16
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	00003d1d 	.word	0x00003d1d

00003d94 <system_gclk_chan_get_config_defaults>:
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b082      	sub	sp, #8
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	2200      	movs	r2, #0
    3da0:	701a      	strb	r2, [r3, #0]
}
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	46bd      	mov	sp, r7
    3da6:	b002      	add	sp, #8
    3da8:	bd80      	pop	{r7, pc}
	...

00003dac <system_apb_clock_set_mask>:
{
    3dac:	b580      	push	{r7, lr}
    3dae:	b082      	sub	sp, #8
    3db0:	af00      	add	r7, sp, #0
    3db2:	0002      	movs	r2, r0
    3db4:	6039      	str	r1, [r7, #0]
    3db6:	1dfb      	adds	r3, r7, #7
    3db8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3dba:	1dfb      	adds	r3, r7, #7
    3dbc:	781b      	ldrb	r3, [r3, #0]
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	d00a      	beq.n	3dd8 <system_apb_clock_set_mask+0x2c>
    3dc2:	2b02      	cmp	r3, #2
    3dc4:	d00f      	beq.n	3de6 <system_apb_clock_set_mask+0x3a>
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d114      	bne.n	3df4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3dca:	4b0e      	ldr	r3, [pc, #56]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dcc:	4a0d      	ldr	r2, [pc, #52]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dce:	6991      	ldr	r1, [r2, #24]
    3dd0:	683a      	ldr	r2, [r7, #0]
    3dd2:	430a      	orrs	r2, r1
    3dd4:	619a      	str	r2, [r3, #24]
			break;
    3dd6:	e00f      	b.n	3df8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3dd8:	4b0a      	ldr	r3, [pc, #40]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dda:	4a0a      	ldr	r2, [pc, #40]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3ddc:	69d1      	ldr	r1, [r2, #28]
    3dde:	683a      	ldr	r2, [r7, #0]
    3de0:	430a      	orrs	r2, r1
    3de2:	61da      	str	r2, [r3, #28]
			break;
    3de4:	e008      	b.n	3df8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3de6:	4b07      	ldr	r3, [pc, #28]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3de8:	4a06      	ldr	r2, [pc, #24]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dea:	6a11      	ldr	r1, [r2, #32]
    3dec:	683a      	ldr	r2, [r7, #0]
    3dee:	430a      	orrs	r2, r1
    3df0:	621a      	str	r2, [r3, #32]
			break;
    3df2:	e001      	b.n	3df8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3df4:	2317      	movs	r3, #23
    3df6:	e000      	b.n	3dfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3df8:	2300      	movs	r3, #0
}
    3dfa:	0018      	movs	r0, r3
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b002      	add	sp, #8
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	40000400 	.word	0x40000400

00003e08 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3e0c:	4b05      	ldr	r3, [pc, #20]	; (3e24 <system_is_debugger_present+0x1c>)
    3e0e:	789b      	ldrb	r3, [r3, #2]
    3e10:	b2db      	uxtb	r3, r3
    3e12:	001a      	movs	r2, r3
    3e14:	2302      	movs	r3, #2
    3e16:	4013      	ands	r3, r2
    3e18:	1e5a      	subs	r2, r3, #1
    3e1a:	4193      	sbcs	r3, r2
    3e1c:	b2db      	uxtb	r3, r3
}
    3e1e:	0018      	movs	r0, r3
    3e20:	46bd      	mov	sp, r7
    3e22:	bd80      	pop	{r7, pc}
    3e24:	41002000 	.word	0x41002000

00003e28 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b082      	sub	sp, #8
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	0002      	movs	r2, r0
    3e30:	1dfb      	adds	r3, r7, #7
    3e32:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3e34:	4b06      	ldr	r3, [pc, #24]	; (3e50 <system_interrupt_enable+0x28>)
    3e36:	1dfa      	adds	r2, r7, #7
    3e38:	7812      	ldrb	r2, [r2, #0]
    3e3a:	0011      	movs	r1, r2
    3e3c:	221f      	movs	r2, #31
    3e3e:	400a      	ands	r2, r1
    3e40:	2101      	movs	r1, #1
    3e42:	4091      	lsls	r1, r2
    3e44:	000a      	movs	r2, r1
    3e46:	601a      	str	r2, [r3, #0]
}
    3e48:	46c0      	nop			; (mov r8, r8)
    3e4a:	46bd      	mov	sp, r7
    3e4c:	b002      	add	sp, #8
    3e4e:	bd80      	pop	{r7, pc}
    3e50:	e000e100 	.word	0xe000e100

00003e54 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    3e54:	b580      	push	{r7, lr}
    3e56:	b082      	sub	sp, #8
    3e58:	af00      	add	r7, sp, #0
    3e5a:	0002      	movs	r2, r0
    3e5c:	1dfb      	adds	r3, r7, #7
    3e5e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3e60:	4a07      	ldr	r2, [pc, #28]	; (3e80 <system_interrupt_disable+0x2c>)
    3e62:	1dfb      	adds	r3, r7, #7
    3e64:	781b      	ldrb	r3, [r3, #0]
    3e66:	0019      	movs	r1, r3
    3e68:	231f      	movs	r3, #31
    3e6a:	400b      	ands	r3, r1
    3e6c:	2101      	movs	r1, #1
    3e6e:	4099      	lsls	r1, r3
    3e70:	000b      	movs	r3, r1
    3e72:	0019      	movs	r1, r3
    3e74:	2380      	movs	r3, #128	; 0x80
    3e76:	50d1      	str	r1, [r2, r3]
}
    3e78:	46c0      	nop			; (mov r8, r8)
    3e7a:	46bd      	mov	sp, r7
    3e7c:	b002      	add	sp, #8
    3e7e:	bd80      	pop	{r7, pc}
    3e80:	e000e100 	.word	0xe000e100

00003e84 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    3e84:	b580      	push	{r7, lr}
    3e86:	b084      	sub	sp, #16
    3e88:	af00      	add	r7, sp, #0
    3e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	69db      	ldr	r3, [r3, #28]
    3e96:	1e5a      	subs	r2, r3, #1
    3e98:	4193      	sbcs	r3, r2
    3e9a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    3e9c:	0018      	movs	r0, r3
    3e9e:	46bd      	mov	sp, r7
    3ea0:	b004      	add	sp, #16
    3ea2:	bd80      	pop	{r7, pc}

00003ea4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	b084      	sub	sp, #16
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	681b      	ldr	r3, [r3, #0]
    3eb6:	0018      	movs	r0, r3
    3eb8:	4b0b      	ldr	r3, [pc, #44]	; (3ee8 <spi_enable+0x44>)
    3eba:	4798      	blx	r3
    3ebc:	0003      	movs	r3, r0
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b0a      	ldr	r3, [pc, #40]	; (3eec <spi_enable+0x48>)
    3ec2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3ec4:	46c0      	nop			; (mov r8, r8)
    3ec6:	687b      	ldr	r3, [r7, #4]
    3ec8:	0018      	movs	r0, r3
    3eca:	4b09      	ldr	r3, [pc, #36]	; (3ef0 <spi_enable+0x4c>)
    3ecc:	4798      	blx	r3
    3ece:	1e03      	subs	r3, r0, #0
    3ed0:	d1f9      	bne.n	3ec6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3ed2:	68fb      	ldr	r3, [r7, #12]
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	2202      	movs	r2, #2
    3ed8:	431a      	orrs	r2, r3
    3eda:	68fb      	ldr	r3, [r7, #12]
    3edc:	601a      	str	r2, [r3, #0]
}
    3ede:	46c0      	nop			; (mov r8, r8)
    3ee0:	46bd      	mov	sp, r7
    3ee2:	b004      	add	sp, #16
    3ee4:	bd80      	pop	{r7, pc}
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	00003bc1 	.word	0x00003bc1
    3eec:	00003e29 	.word	0x00003e29
    3ef0:	00003e85 	.word	0x00003e85

00003ef4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b084      	sub	sp, #16
    3ef8:	af00      	add	r7, sp, #0
    3efa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	681b      	ldr	r3, [r3, #0]
    3f06:	0018      	movs	r0, r3
    3f08:	4b0e      	ldr	r3, [pc, #56]	; (3f44 <spi_disable+0x50>)
    3f0a:	4798      	blx	r3
    3f0c:	0003      	movs	r3, r0
    3f0e:	0018      	movs	r0, r3
    3f10:	4b0d      	ldr	r3, [pc, #52]	; (3f48 <spi_disable+0x54>)
    3f12:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3f14:	46c0      	nop			; (mov r8, r8)
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	0018      	movs	r0, r3
    3f1a:	4b0c      	ldr	r3, [pc, #48]	; (3f4c <spi_disable+0x58>)
    3f1c:	4798      	blx	r3
    3f1e:	1e03      	subs	r3, r0, #0
    3f20:	d1f9      	bne.n	3f16 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	228f      	movs	r2, #143	; 0x8f
    3f26:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3f28:	68fb      	ldr	r3, [r7, #12]
    3f2a:	228f      	movs	r2, #143	; 0x8f
    3f2c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3f2e:	68fb      	ldr	r3, [r7, #12]
    3f30:	681b      	ldr	r3, [r3, #0]
    3f32:	2202      	movs	r2, #2
    3f34:	4393      	bics	r3, r2
    3f36:	001a      	movs	r2, r3
    3f38:	68fb      	ldr	r3, [r7, #12]
    3f3a:	601a      	str	r2, [r3, #0]
}
    3f3c:	46c0      	nop			; (mov r8, r8)
    3f3e:	46bd      	mov	sp, r7
    3f40:	b004      	add	sp, #16
    3f42:	bd80      	pop	{r7, pc}
    3f44:	00003bc1 	.word	0x00003bc1
    3f48:	00003e55 	.word	0x00003e55
    3f4c:	00003e85 	.word	0x00003e85

00003f50 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    3f50:	b580      	push	{r7, lr}
    3f52:	b084      	sub	sp, #16
    3f54:	af00      	add	r7, sp, #0
    3f56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	681b      	ldr	r3, [r3, #0]
    3f5c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f5e:	68fb      	ldr	r3, [r7, #12]
    3f60:	7e1b      	ldrb	r3, [r3, #24]
    3f62:	b2db      	uxtb	r3, r3
    3f64:	001a      	movs	r2, r3
    3f66:	2302      	movs	r3, #2
    3f68:	4013      	ands	r3, r2
    3f6a:	1e5a      	subs	r2, r3, #1
    3f6c:	4193      	sbcs	r3, r2
    3f6e:	b2db      	uxtb	r3, r3
}
    3f70:	0018      	movs	r0, r3
    3f72:	46bd      	mov	sp, r7
    3f74:	b004      	add	sp, #16
    3f76:	bd80      	pop	{r7, pc}

00003f78 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3f78:	b580      	push	{r7, lr}
    3f7a:	b084      	sub	sp, #16
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	681b      	ldr	r3, [r3, #0]
    3f84:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	7e1b      	ldrb	r3, [r3, #24]
    3f8a:	b2db      	uxtb	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2301      	movs	r3, #1
    3f90:	4013      	ands	r3, r2
    3f92:	1e5a      	subs	r2, r3, #1
    3f94:	4193      	sbcs	r3, r2
    3f96:	b2db      	uxtb	r3, r3
}
    3f98:	0018      	movs	r0, r3
    3f9a:	46bd      	mov	sp, r7
    3f9c:	b004      	add	sp, #16
    3f9e:	bd80      	pop	{r7, pc}

00003fa0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b084      	sub	sp, #16
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3fae:	68fb      	ldr	r3, [r7, #12]
    3fb0:	7e1b      	ldrb	r3, [r3, #24]
    3fb2:	b2db      	uxtb	r3, r3
    3fb4:	001a      	movs	r2, r3
    3fb6:	2304      	movs	r3, #4
    3fb8:	4013      	ands	r3, r2
    3fba:	1e5a      	subs	r2, r3, #1
    3fbc:	4193      	sbcs	r3, r2
    3fbe:	b2db      	uxtb	r3, r3
}
    3fc0:	0018      	movs	r0, r3
    3fc2:	46bd      	mov	sp, r7
    3fc4:	b004      	add	sp, #16
    3fc6:	bd80      	pop	{r7, pc}

00003fc8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b084      	sub	sp, #16
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
    3fd0:	000a      	movs	r2, r1
    3fd2:	1cbb      	adds	r3, r7, #2
    3fd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	681b      	ldr	r3, [r3, #0]
    3fda:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	0018      	movs	r0, r3
    3fe0:	4b0a      	ldr	r3, [pc, #40]	; (400c <spi_write+0x44>)
    3fe2:	4798      	blx	r3
    3fe4:	0003      	movs	r3, r0
    3fe6:	001a      	movs	r2, r3
    3fe8:	2301      	movs	r3, #1
    3fea:	4053      	eors	r3, r2
    3fec:	b2db      	uxtb	r3, r3
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d001      	beq.n	3ff6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3ff2:	2305      	movs	r3, #5
    3ff4:	e006      	b.n	4004 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ff6:	1cbb      	adds	r3, r7, #2
    3ff8:	881b      	ldrh	r3, [r3, #0]
    3ffa:	05db      	lsls	r3, r3, #23
    3ffc:	0dda      	lsrs	r2, r3, #23
    3ffe:	68fb      	ldr	r3, [r7, #12]
    4000:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4002:	2300      	movs	r3, #0
}
    4004:	0018      	movs	r0, r3
    4006:	46bd      	mov	sp, r7
    4008:	b004      	add	sp, #16
    400a:	bd80      	pop	{r7, pc}
    400c:	00003f79 	.word	0x00003f79

00004010 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4010:	b580      	push	{r7, lr}
    4012:	b084      	sub	sp, #16
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    4018:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	0018      	movs	r0, r3
    4024:	4b1b      	ldr	r3, [pc, #108]	; (4094 <spi_read+0x84>)
    4026:	4798      	blx	r3
    4028:	0003      	movs	r3, r0
    402a:	001a      	movs	r2, r3
    402c:	2301      	movs	r3, #1
    402e:	4053      	eors	r3, r2
    4030:	b2db      	uxtb	r3, r3
    4032:	2b00      	cmp	r3, #0
    4034:	d001      	beq.n	403a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4036:	2310      	movs	r3, #16
    4038:	e027      	b.n	408a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    403a:	230f      	movs	r3, #15
    403c:	18fb      	adds	r3, r7, r3
    403e:	2200      	movs	r2, #0
    4040:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4042:	68bb      	ldr	r3, [r7, #8]
    4044:	8b5b      	ldrh	r3, [r3, #26]
    4046:	b29b      	uxth	r3, r3
    4048:	001a      	movs	r2, r3
    404a:	2304      	movs	r3, #4
    404c:	4013      	ands	r3, r2
    404e:	d006      	beq.n	405e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4050:	230f      	movs	r3, #15
    4052:	18fb      	adds	r3, r7, r3
    4054:	221e      	movs	r2, #30
    4056:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4058:	68bb      	ldr	r3, [r7, #8]
    405a:	2204      	movs	r2, #4
    405c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	799b      	ldrb	r3, [r3, #6]
    4062:	2b01      	cmp	r3, #1
    4064:	d108      	bne.n	4078 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4066:	68bb      	ldr	r3, [r7, #8]
    4068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    406a:	b29b      	uxth	r3, r3
    406c:	05db      	lsls	r3, r3, #23
    406e:	0ddb      	lsrs	r3, r3, #23
    4070:	b29a      	uxth	r2, r3
    4072:	683b      	ldr	r3, [r7, #0]
    4074:	801a      	strh	r2, [r3, #0]
    4076:	e005      	b.n	4084 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4078:	68bb      	ldr	r3, [r7, #8]
    407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    407c:	b2db      	uxtb	r3, r3
    407e:	b29a      	uxth	r2, r3
    4080:	683b      	ldr	r3, [r7, #0]
    4082:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4084:	230f      	movs	r3, #15
    4086:	18fb      	adds	r3, r7, r3
    4088:	781b      	ldrb	r3, [r3, #0]
}
    408a:	0018      	movs	r0, r3
    408c:	46bd      	mov	sp, r7
    408e:	b004      	add	sp, #16
    4090:	bd80      	pop	{r7, pc}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	00003fa1 	.word	0x00003fa1

00004098 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4098:	b580      	push	{r7, lr}
    409a:	b084      	sub	sp, #16
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	0018      	movs	r0, r3
    40aa:	4b09      	ldr	r3, [pc, #36]	; (40d0 <spi_reset+0x38>)
    40ac:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	0018      	movs	r0, r3
    40b4:	4b07      	ldr	r3, [pc, #28]	; (40d4 <spi_reset+0x3c>)
    40b6:	4798      	blx	r3
    40b8:	1e03      	subs	r3, r0, #0
    40ba:	d1f9      	bne.n	40b0 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    40bc:	68fb      	ldr	r3, [r7, #12]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	2201      	movs	r2, #1
    40c2:	431a      	orrs	r2, r3
    40c4:	68fb      	ldr	r3, [r7, #12]
    40c6:	601a      	str	r2, [r3, #0]
}
    40c8:	46c0      	nop			; (mov r8, r8)
    40ca:	46bd      	mov	sp, r7
    40cc:	b004      	add	sp, #16
    40ce:	bd80      	pop	{r7, pc}
    40d0:	00003ef5 	.word	0x00003ef5
    40d4:	00003e85 	.word	0x00003e85

000040d8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    40d8:	b590      	push	{r4, r7, lr}
    40da:	b089      	sub	sp, #36	; 0x24
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    40e2:	230c      	movs	r3, #12
    40e4:	18fb      	adds	r3, r7, r3
    40e6:	2200      	movs	r2, #0
    40e8:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	0018      	movs	r0, r3
    40f4:	4b24      	ldr	r3, [pc, #144]	; (4188 <spi_set_baudrate+0xb0>)
    40f6:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    40f8:	46c0      	nop			; (mov r8, r8)
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	0018      	movs	r0, r3
    40fe:	4b23      	ldr	r3, [pc, #140]	; (418c <spi_set_baudrate+0xb4>)
    4100:	4798      	blx	r3
    4102:	1e03      	subs	r3, r0, #0
    4104:	d1f9      	bne.n	40fa <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	0018      	movs	r0, r3
    410c:	4b20      	ldr	r3, [pc, #128]	; (4190 <spi_set_baudrate+0xb8>)
    410e:	4798      	blx	r3
    4110:	0003      	movs	r3, r0
    4112:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4114:	69bb      	ldr	r3, [r7, #24]
    4116:	3314      	adds	r3, #20
    4118:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    411a:	697b      	ldr	r3, [r7, #20]
    411c:	b2db      	uxtb	r3, r3
    411e:	0018      	movs	r0, r3
    4120:	4b1c      	ldr	r3, [pc, #112]	; (4194 <spi_set_baudrate+0xbc>)
    4122:	4798      	blx	r3
    4124:	0003      	movs	r3, r0
    4126:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4128:	230f      	movs	r3, #15
    412a:	18fc      	adds	r4, r7, r3
    412c:	230c      	movs	r3, #12
    412e:	18fa      	adds	r2, r7, r3
    4130:	6939      	ldr	r1, [r7, #16]
    4132:	683b      	ldr	r3, [r7, #0]
    4134:	0018      	movs	r0, r3
    4136:	4b18      	ldr	r3, [pc, #96]	; (4198 <spi_set_baudrate+0xc0>)
    4138:	4798      	blx	r3
    413a:	0003      	movs	r3, r0
    413c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    413e:	230f      	movs	r3, #15
    4140:	18fb      	adds	r3, r7, r3
    4142:	781b      	ldrb	r3, [r3, #0]
    4144:	2b00      	cmp	r3, #0
    4146:	d001      	beq.n	414c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4148:	2317      	movs	r3, #23
    414a:	e018      	b.n	417e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    414c:	230c      	movs	r3, #12
    414e:	18fb      	adds	r3, r7, r3
    4150:	881b      	ldrh	r3, [r3, #0]
    4152:	b2da      	uxtb	r2, r3
    4154:	69fb      	ldr	r3, [r7, #28]
    4156:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    4158:	46c0      	nop			; (mov r8, r8)
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	0018      	movs	r0, r3
    415e:	4b0b      	ldr	r3, [pc, #44]	; (418c <spi_set_baudrate+0xb4>)
    4160:	4798      	blx	r3
    4162:	1e03      	subs	r3, r0, #0
    4164:	d1f9      	bne.n	415a <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	0018      	movs	r0, r3
    416a:	4b0c      	ldr	r3, [pc, #48]	; (419c <spi_set_baudrate+0xc4>)
    416c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	0018      	movs	r0, r3
    4174:	4b05      	ldr	r3, [pc, #20]	; (418c <spi_set_baudrate+0xb4>)
    4176:	4798      	blx	r3
    4178:	1e03      	subs	r3, r0, #0
    417a:	d1f9      	bne.n	4170 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    417c:	2300      	movs	r3, #0
}
    417e:	0018      	movs	r0, r3
    4180:	46bd      	mov	sp, r7
    4182:	b009      	add	sp, #36	; 0x24
    4184:	bd90      	pop	{r4, r7, pc}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	00003ef5 	.word	0x00003ef5
    418c:	00003e85 	.word	0x00003e85
    4190:	00003af1 	.word	0x00003af1
    4194:	00006729 	.word	0x00006729
    4198:	0000366b 	.word	0x0000366b
    419c:	00003ea5 	.word	0x00003ea5

000041a0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    41a0:	b590      	push	{r4, r7, lr}
    41a2:	b093      	sub	sp, #76	; 0x4c
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
    41a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	681b      	ldr	r3, [r3, #0]
    41ae:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    41b6:	231c      	movs	r3, #28
    41b8:	18fb      	adds	r3, r7, r3
    41ba:	0018      	movs	r0, r3
    41bc:	4b75      	ldr	r3, [pc, #468]	; (4394 <_spi_set_config+0x1f4>)
    41be:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    41c0:	231c      	movs	r3, #28
    41c2:	18fb      	adds	r3, r7, r3
    41c4:	2200      	movs	r2, #0
    41c6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    41c8:	683b      	ldr	r3, [r7, #0]
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d103      	bne.n	41d8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    41d0:	231c      	movs	r3, #28
    41d2:	18fb      	adds	r3, r7, r3
    41d4:	2200      	movs	r2, #0
    41d6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    41d8:	683b      	ldr	r3, [r7, #0]
    41da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    41dc:	230c      	movs	r3, #12
    41de:	18fb      	adds	r3, r7, r3
    41e0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    41e2:	683b      	ldr	r3, [r7, #0]
    41e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    41e6:	230c      	movs	r3, #12
    41e8:	18fb      	adds	r3, r7, r3
    41ea:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    41ec:	683b      	ldr	r3, [r7, #0]
    41ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    41f0:	230c      	movs	r3, #12
    41f2:	18fb      	adds	r3, r7, r3
    41f4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    41f6:	683b      	ldr	r3, [r7, #0]
    41f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    41fa:	230c      	movs	r3, #12
    41fc:	18fb      	adds	r3, r7, r3
    41fe:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4200:	2347      	movs	r3, #71	; 0x47
    4202:	18fb      	adds	r3, r7, r3
    4204:	2200      	movs	r2, #0
    4206:	701a      	strb	r2, [r3, #0]
    4208:	e02c      	b.n	4264 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    420a:	2347      	movs	r3, #71	; 0x47
    420c:	18fb      	adds	r3, r7, r3
    420e:	781a      	ldrb	r2, [r3, #0]
    4210:	230c      	movs	r3, #12
    4212:	18fb      	adds	r3, r7, r3
    4214:	0092      	lsls	r2, r2, #2
    4216:	58d3      	ldr	r3, [r2, r3]
    4218:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    421a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    421c:	2b00      	cmp	r3, #0
    421e:	d109      	bne.n	4234 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4220:	2347      	movs	r3, #71	; 0x47
    4222:	18fb      	adds	r3, r7, r3
    4224:	781a      	ldrb	r2, [r3, #0]
    4226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4228:	0011      	movs	r1, r2
    422a:	0018      	movs	r0, r3
    422c:	4b5a      	ldr	r3, [pc, #360]	; (4398 <_spi_set_config+0x1f8>)
    422e:	4798      	blx	r3
    4230:	0003      	movs	r3, r0
    4232:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4236:	3301      	adds	r3, #1
    4238:	d00d      	beq.n	4256 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    423c:	b2da      	uxtb	r2, r3
    423e:	231c      	movs	r3, #28
    4240:	18fb      	adds	r3, r7, r3
    4242:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4246:	0c1b      	lsrs	r3, r3, #16
    4248:	b2db      	uxtb	r3, r3
    424a:	221c      	movs	r2, #28
    424c:	18ba      	adds	r2, r7, r2
    424e:	0011      	movs	r1, r2
    4250:	0018      	movs	r0, r3
    4252:	4b52      	ldr	r3, [pc, #328]	; (439c <_spi_set_config+0x1fc>)
    4254:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4256:	2347      	movs	r3, #71	; 0x47
    4258:	18fb      	adds	r3, r7, r3
    425a:	781a      	ldrb	r2, [r3, #0]
    425c:	2347      	movs	r3, #71	; 0x47
    425e:	18fb      	adds	r3, r7, r3
    4260:	3201      	adds	r2, #1
    4262:	701a      	strb	r2, [r3, #0]
    4264:	2347      	movs	r3, #71	; 0x47
    4266:	18fb      	adds	r3, r7, r3
    4268:	781b      	ldrb	r3, [r3, #0]
    426a:	2b03      	cmp	r3, #3
    426c:	d9cd      	bls.n	420a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    426e:	683b      	ldr	r3, [r7, #0]
    4270:	781a      	ldrb	r2, [r3, #0]
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4276:	683b      	ldr	r3, [r7, #0]
    4278:	7c1a      	ldrb	r2, [r3, #16]
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	7c9a      	ldrb	r2, [r3, #18]
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	7d1a      	ldrb	r2, [r3, #20]
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    428e:	230a      	movs	r3, #10
    4290:	18fb      	adds	r3, r7, r3
    4292:	2200      	movs	r2, #0
    4294:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4296:	2300      	movs	r3, #0
    4298:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    429a:	2300      	movs	r3, #0
    429c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	781b      	ldrb	r3, [r3, #0]
    42a2:	2b01      	cmp	r3, #1
    42a4:	d129      	bne.n	42fa <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	0018      	movs	r0, r3
    42ac:	4b3c      	ldr	r3, [pc, #240]	; (43a0 <_spi_set_config+0x200>)
    42ae:	4798      	blx	r3
    42b0:	0003      	movs	r3, r0
    42b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    42b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    42b6:	3314      	adds	r3, #20
    42b8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    42ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42bc:	b2db      	uxtb	r3, r3
    42be:	0018      	movs	r0, r3
    42c0:	4b38      	ldr	r3, [pc, #224]	; (43a4 <_spi_set_config+0x204>)
    42c2:	4798      	blx	r3
    42c4:	0003      	movs	r3, r0
    42c6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    42c8:	683b      	ldr	r3, [r7, #0]
    42ca:	699b      	ldr	r3, [r3, #24]
    42cc:	2223      	movs	r2, #35	; 0x23
    42ce:	18bc      	adds	r4, r7, r2
    42d0:	220a      	movs	r2, #10
    42d2:	18ba      	adds	r2, r7, r2
    42d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    42d6:	0018      	movs	r0, r3
    42d8:	4b33      	ldr	r3, [pc, #204]	; (43a8 <_spi_set_config+0x208>)
    42da:	4798      	blx	r3
    42dc:	0003      	movs	r3, r0
    42de:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    42e0:	2323      	movs	r3, #35	; 0x23
    42e2:	18fb      	adds	r3, r7, r3
    42e4:	781b      	ldrb	r3, [r3, #0]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d001      	beq.n	42ee <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    42ea:	2317      	movs	r3, #23
    42ec:	e04e      	b.n	438c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    42ee:	230a      	movs	r3, #10
    42f0:	18fb      	adds	r3, r7, r3
    42f2:	881b      	ldrh	r3, [r3, #0]
    42f4:	b2da      	uxtb	r2, r3
    42f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42f8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    42fa:	683b      	ldr	r3, [r7, #0]
    42fc:	685b      	ldr	r3, [r3, #4]
    42fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4300:	4313      	orrs	r3, r2
    4302:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4304:	683b      	ldr	r3, [r7, #0]
    4306:	689b      	ldr	r3, [r3, #8]
    4308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    430a:	4313      	orrs	r3, r2
    430c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    430e:	683b      	ldr	r3, [r7, #0]
    4310:	68db      	ldr	r3, [r3, #12]
    4312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4314:	4313      	orrs	r3, r2
    4316:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4318:	683b      	ldr	r3, [r7, #0]
    431a:	7c1b      	ldrb	r3, [r3, #16]
    431c:	001a      	movs	r2, r3
    431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4320:	4313      	orrs	r3, r2
    4322:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4324:	683b      	ldr	r3, [r7, #0]
    4326:	7c5b      	ldrb	r3, [r3, #17]
    4328:	2b00      	cmp	r3, #0
    432a:	d103      	bne.n	4334 <_spi_set_config+0x194>
    432c:	4b1f      	ldr	r3, [pc, #124]	; (43ac <_spi_set_config+0x20c>)
    432e:	4798      	blx	r3
    4330:	1e03      	subs	r3, r0, #0
    4332:	d003      	beq.n	433c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4336:	2280      	movs	r2, #128	; 0x80
    4338:	4313      	orrs	r3, r2
    433a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    433c:	683b      	ldr	r3, [r7, #0]
    433e:	7c9b      	ldrb	r3, [r3, #18]
    4340:	2b00      	cmp	r3, #0
    4342:	d004      	beq.n	434e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4346:	2280      	movs	r2, #128	; 0x80
    4348:	0292      	lsls	r2, r2, #10
    434a:	4313      	orrs	r3, r2
    434c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    434e:	683b      	ldr	r3, [r7, #0]
    4350:	7cdb      	ldrb	r3, [r3, #19]
    4352:	2b00      	cmp	r3, #0
    4354:	d004      	beq.n	4360 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4358:	2280      	movs	r2, #128	; 0x80
    435a:	0092      	lsls	r2, r2, #2
    435c:	4313      	orrs	r3, r2
    435e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4360:	683b      	ldr	r3, [r7, #0]
    4362:	7d1b      	ldrb	r3, [r3, #20]
    4364:	2b00      	cmp	r3, #0
    4366:	d004      	beq.n	4372 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    436a:	2280      	movs	r2, #128	; 0x80
    436c:	0192      	lsls	r2, r2, #6
    436e:	4313      	orrs	r3, r2
    4370:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4374:	681a      	ldr	r2, [r3, #0]
    4376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4378:	431a      	orrs	r2, r3
    437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    437c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4380:	685a      	ldr	r2, [r3, #4]
    4382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4384:	431a      	orrs	r2, r3
    4386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4388:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    438a:	2300      	movs	r3, #0
}
    438c:	0018      	movs	r0, r3
    438e:	46bd      	mov	sp, r7
    4390:	b013      	add	sp, #76	; 0x4c
    4392:	bd90      	pop	{r4, r7, pc}
    4394:	00003c95 	.word	0x00003c95
    4398:	00003935 	.word	0x00003935
    439c:	000068f1 	.word	0x000068f1
    43a0:	00003af1 	.word	0x00003af1
    43a4:	00006729 	.word	0x00006729
    43a8:	0000366b 	.word	0x0000366b
    43ac:	00003e09 	.word	0x00003e09

000043b0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    43b0:	b590      	push	{r4, r7, lr}
    43b2:	b08b      	sub	sp, #44	; 0x2c
    43b4:	af00      	add	r7, sp, #0
    43b6:	60f8      	str	r0, [r7, #12]
    43b8:	60b9      	str	r1, [r7, #8]
    43ba:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    43bc:	68fb      	ldr	r3, [r7, #12]
    43be:	68ba      	ldr	r2, [r7, #8]
    43c0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    43c2:	68fb      	ldr	r3, [r7, #12]
    43c4:	681b      	ldr	r3, [r3, #0]
    43c6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    43c8:	6a3b      	ldr	r3, [r7, #32]
    43ca:	681b      	ldr	r3, [r3, #0]
    43cc:	2202      	movs	r2, #2
    43ce:	4013      	ands	r3, r2
    43d0:	d001      	beq.n	43d6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    43d2:	231c      	movs	r3, #28
    43d4:	e09c      	b.n	4510 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    43d6:	6a3b      	ldr	r3, [r7, #32]
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	2201      	movs	r2, #1
    43dc:	4013      	ands	r3, r2
    43de:	d001      	beq.n	43e4 <spi_init+0x34>
		return STATUS_BUSY;
    43e0:	2305      	movs	r3, #5
    43e2:	e095      	b.n	4510 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	681b      	ldr	r3, [r3, #0]
    43e8:	0018      	movs	r0, r3
    43ea:	4b4b      	ldr	r3, [pc, #300]	; (4518 <spi_init+0x168>)
    43ec:	4798      	blx	r3
    43ee:	0003      	movs	r3, r0
    43f0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    43f2:	69fb      	ldr	r3, [r7, #28]
    43f4:	3302      	adds	r3, #2
    43f6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    43f8:	69fb      	ldr	r3, [r7, #28]
    43fa:	3314      	adds	r3, #20
    43fc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    43fe:	2201      	movs	r2, #1
    4400:	69bb      	ldr	r3, [r7, #24]
    4402:	409a      	lsls	r2, r3
    4404:	0013      	movs	r3, r2
    4406:	0019      	movs	r1, r3
    4408:	2002      	movs	r0, #2
    440a:	4b44      	ldr	r3, [pc, #272]	; (451c <spi_init+0x16c>)
    440c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    440e:	2310      	movs	r3, #16
    4410:	18fb      	adds	r3, r7, r3
    4412:	0018      	movs	r0, r3
    4414:	4b42      	ldr	r3, [pc, #264]	; (4520 <spi_init+0x170>)
    4416:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	2224      	movs	r2, #36	; 0x24
    441c:	5c9a      	ldrb	r2, [r3, r2]
    441e:	2310      	movs	r3, #16
    4420:	18fb      	adds	r3, r7, r3
    4422:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4424:	697b      	ldr	r3, [r7, #20]
    4426:	b2db      	uxtb	r3, r3
    4428:	2210      	movs	r2, #16
    442a:	18ba      	adds	r2, r7, r2
    442c:	0011      	movs	r1, r2
    442e:	0018      	movs	r0, r3
    4430:	4b3c      	ldr	r3, [pc, #240]	; (4524 <spi_init+0x174>)
    4432:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4434:	697b      	ldr	r3, [r7, #20]
    4436:	b2db      	uxtb	r3, r3
    4438:	0018      	movs	r0, r3
    443a:	4b3b      	ldr	r3, [pc, #236]	; (4528 <spi_init+0x178>)
    443c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	2224      	movs	r2, #36	; 0x24
    4442:	5c9b      	ldrb	r3, [r3, r2]
    4444:	2100      	movs	r1, #0
    4446:	0018      	movs	r0, r3
    4448:	4b38      	ldr	r3, [pc, #224]	; (452c <spi_init+0x17c>)
    444a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    444c:	687b      	ldr	r3, [r7, #4]
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	2b01      	cmp	r3, #1
    4452:	d105      	bne.n	4460 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4454:	6a3b      	ldr	r3, [r7, #32]
    4456:	681b      	ldr	r3, [r3, #0]
    4458:	220c      	movs	r2, #12
    445a:	431a      	orrs	r2, r3
    445c:	6a3b      	ldr	r3, [r7, #32]
    445e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4460:	2327      	movs	r3, #39	; 0x27
    4462:	18fb      	adds	r3, r7, r3
    4464:	2200      	movs	r2, #0
    4466:	701a      	strb	r2, [r3, #0]
    4468:	e010      	b.n	448c <spi_init+0xdc>
		module->callback[i]        = NULL;
    446a:	2327      	movs	r3, #39	; 0x27
    446c:	18fb      	adds	r3, r7, r3
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	68fa      	ldr	r2, [r7, #12]
    4472:	3302      	adds	r3, #2
    4474:	009b      	lsls	r3, r3, #2
    4476:	18d3      	adds	r3, r2, r3
    4478:	3304      	adds	r3, #4
    447a:	2200      	movs	r2, #0
    447c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    447e:	2327      	movs	r3, #39	; 0x27
    4480:	18fb      	adds	r3, r7, r3
    4482:	781a      	ldrb	r2, [r3, #0]
    4484:	2327      	movs	r3, #39	; 0x27
    4486:	18fb      	adds	r3, r7, r3
    4488:	3201      	adds	r2, #1
    448a:	701a      	strb	r2, [r3, #0]
    448c:	2327      	movs	r3, #39	; 0x27
    448e:	18fb      	adds	r3, r7, r3
    4490:	781b      	ldrb	r3, [r3, #0]
    4492:	2b06      	cmp	r3, #6
    4494:	d9e9      	bls.n	446a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	2200      	movs	r2, #0
    449a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	2200      	movs	r2, #0
    44a0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	2200      	movs	r2, #0
    44a6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    44a8:	68fb      	ldr	r3, [r7, #12]
    44aa:	2200      	movs	r2, #0
    44ac:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    44ae:	68fb      	ldr	r3, [r7, #12]
    44b0:	2236      	movs	r2, #54	; 0x36
    44b2:	2100      	movs	r1, #0
    44b4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    44b6:	68fb      	ldr	r3, [r7, #12]
    44b8:	2237      	movs	r2, #55	; 0x37
    44ba:	2100      	movs	r1, #0
    44bc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    44be:	68fb      	ldr	r3, [r7, #12]
    44c0:	2238      	movs	r2, #56	; 0x38
    44c2:	2100      	movs	r1, #0
    44c4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	2203      	movs	r2, #3
    44ca:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    44cc:	68fb      	ldr	r3, [r7, #12]
    44ce:	2200      	movs	r2, #0
    44d0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	2213      	movs	r2, #19
    44d8:	18bc      	adds	r4, r7, r2
    44da:	0018      	movs	r0, r3
    44dc:	4b0e      	ldr	r3, [pc, #56]	; (4518 <spi_init+0x168>)
    44de:	4798      	blx	r3
    44e0:	0003      	movs	r3, r0
    44e2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    44e4:	4a12      	ldr	r2, [pc, #72]	; (4530 <spi_init+0x180>)
    44e6:	2313      	movs	r3, #19
    44e8:	18fb      	adds	r3, r7, r3
    44ea:	781b      	ldrb	r3, [r3, #0]
    44ec:	0011      	movs	r1, r2
    44ee:	0018      	movs	r0, r3
    44f0:	4b10      	ldr	r3, [pc, #64]	; (4534 <spi_init+0x184>)
    44f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    44f4:	2313      	movs	r3, #19
    44f6:	18fb      	adds	r3, r7, r3
    44f8:	781a      	ldrb	r2, [r3, #0]
    44fa:	4b0f      	ldr	r3, [pc, #60]	; (4538 <spi_init+0x188>)
    44fc:	0092      	lsls	r2, r2, #2
    44fe:	68f9      	ldr	r1, [r7, #12]
    4500:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4502:	687a      	ldr	r2, [r7, #4]
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	0011      	movs	r1, r2
    4508:	0018      	movs	r0, r3
    450a:	4b0c      	ldr	r3, [pc, #48]	; (453c <spi_init+0x18c>)
    450c:	4798      	blx	r3
    450e:	0003      	movs	r3, r0
}
    4510:	0018      	movs	r0, r3
    4512:	46bd      	mov	sp, r7
    4514:	b00b      	add	sp, #44	; 0x2c
    4516:	bd90      	pop	{r4, r7, pc}
    4518:	00003af1 	.word	0x00003af1
    451c:	00003dad 	.word	0x00003dad
    4520:	00003d95 	.word	0x00003d95
    4524:	00006605 	.word	0x00006605
    4528:	00006649 	.word	0x00006649
    452c:	000038a9 	.word	0x000038a9
    4530:	00004a09 	.word	0x00004a09
    4534:	00003b55 	.word	0x00003b55
    4538:	200009d4 	.word	0x200009d4
    453c:	000041a1 	.word	0x000041a1

00004540 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4540:	b590      	push	{r4, r7, lr}
    4542:	b087      	sub	sp, #28
    4544:	af00      	add	r7, sp, #0
    4546:	60f8      	str	r0, [r7, #12]
    4548:	60b9      	str	r1, [r7, #8]
    454a:	0019      	movs	r1, r3
    454c:	1dbb      	adds	r3, r7, #6
    454e:	801a      	strh	r2, [r3, #0]
    4550:	1d3b      	adds	r3, r7, #4
    4552:	1c0a      	adds	r2, r1, #0
    4554:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	2238      	movs	r2, #56	; 0x38
    455a:	5c9b      	ldrb	r3, [r3, r2]
    455c:	b2db      	uxtb	r3, r3
    455e:	2b05      	cmp	r3, #5
    4560:	d101      	bne.n	4566 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4562:	2305      	movs	r3, #5
    4564:	e07a      	b.n	465c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4566:	1dbb      	adds	r3, r7, #6
    4568:	881b      	ldrh	r3, [r3, #0]
    456a:	2b00      	cmp	r3, #0
    456c:	d101      	bne.n	4572 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    456e:	2317      	movs	r3, #23
    4570:	e074      	b.n	465c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	79db      	ldrb	r3, [r3, #7]
    4576:	2201      	movs	r2, #1
    4578:	4053      	eors	r3, r2
    457a:	b2db      	uxtb	r3, r3
    457c:	2b00      	cmp	r3, #0
    457e:	d001      	beq.n	4584 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    4580:	231c      	movs	r3, #28
    4582:	e06b      	b.n	465c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4584:	2316      	movs	r3, #22
    4586:	18fb      	adds	r3, r7, r3
    4588:	2200      	movs	r2, #0
    458a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    458c:	e05e      	b.n	464c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	795b      	ldrb	r3, [r3, #5]
    4592:	2b01      	cmp	r3, #1
    4594:	d112      	bne.n	45bc <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	68fb      	ldr	r3, [r7, #12]
    459a:	0018      	movs	r0, r3
    459c:	4b31      	ldr	r3, [pc, #196]	; (4664 <spi_read_buffer_wait+0x124>)
    459e:	4798      	blx	r3
    45a0:	0003      	movs	r3, r0
    45a2:	001a      	movs	r2, r3
    45a4:	2301      	movs	r3, #1
    45a6:	4053      	eors	r3, r2
    45a8:	b2db      	uxtb	r3, r3
    45aa:	2b00      	cmp	r3, #0
    45ac:	d1f4      	bne.n	4598 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    45ae:	1d3b      	adds	r3, r7, #4
    45b0:	881a      	ldrh	r2, [r3, #0]
    45b2:	68fb      	ldr	r3, [r7, #12]
    45b4:	0011      	movs	r1, r2
    45b6:	0018      	movs	r0, r3
    45b8:	4b2b      	ldr	r3, [pc, #172]	; (4668 <spi_read_buffer_wait+0x128>)
    45ba:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    45bc:	46c0      	nop			; (mov r8, r8)
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	0018      	movs	r0, r3
    45c2:	4b2a      	ldr	r3, [pc, #168]	; (466c <spi_read_buffer_wait+0x12c>)
    45c4:	4798      	blx	r3
    45c6:	0003      	movs	r3, r0
    45c8:	001a      	movs	r2, r3
    45ca:	2301      	movs	r3, #1
    45cc:	4053      	eors	r3, r2
    45ce:	b2db      	uxtb	r3, r3
    45d0:	2b00      	cmp	r3, #0
    45d2:	d1f4      	bne.n	45be <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    45d4:	2312      	movs	r3, #18
    45d6:	18fb      	adds	r3, r7, r3
    45d8:	2200      	movs	r2, #0
    45da:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    45dc:	2315      	movs	r3, #21
    45de:	18fc      	adds	r4, r7, r3
    45e0:	2312      	movs	r3, #18
    45e2:	18fa      	adds	r2, r7, r3
    45e4:	68fb      	ldr	r3, [r7, #12]
    45e6:	0011      	movs	r1, r2
    45e8:	0018      	movs	r0, r3
    45ea:	4b21      	ldr	r3, [pc, #132]	; (4670 <spi_read_buffer_wait+0x130>)
    45ec:	4798      	blx	r3
    45ee:	0003      	movs	r3, r0
    45f0:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    45f2:	2315      	movs	r3, #21
    45f4:	18fb      	adds	r3, r7, r3
    45f6:	781b      	ldrb	r3, [r3, #0]
    45f8:	2b00      	cmp	r3, #0
    45fa:	d003      	beq.n	4604 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    45fc:	2315      	movs	r3, #21
    45fe:	18fb      	adds	r3, r7, r3
    4600:	781b      	ldrb	r3, [r3, #0]
    4602:	e02b      	b.n	465c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4604:	2316      	movs	r3, #22
    4606:	18fb      	adds	r3, r7, r3
    4608:	881b      	ldrh	r3, [r3, #0]
    460a:	2216      	movs	r2, #22
    460c:	18ba      	adds	r2, r7, r2
    460e:	1c59      	adds	r1, r3, #1
    4610:	8011      	strh	r1, [r2, #0]
    4612:	001a      	movs	r2, r3
    4614:	68bb      	ldr	r3, [r7, #8]
    4616:	189b      	adds	r3, r3, r2
    4618:	2212      	movs	r2, #18
    461a:	18ba      	adds	r2, r7, r2
    461c:	8812      	ldrh	r2, [r2, #0]
    461e:	b2d2      	uxtb	r2, r2
    4620:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4622:	68fb      	ldr	r3, [r7, #12]
    4624:	799b      	ldrb	r3, [r3, #6]
    4626:	2b01      	cmp	r3, #1
    4628:	d110      	bne.n	464c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    462a:	2316      	movs	r3, #22
    462c:	18fb      	adds	r3, r7, r3
    462e:	881b      	ldrh	r3, [r3, #0]
    4630:	2216      	movs	r2, #22
    4632:	18ba      	adds	r2, r7, r2
    4634:	1c59      	adds	r1, r3, #1
    4636:	8011      	strh	r1, [r2, #0]
    4638:	001a      	movs	r2, r3
    463a:	68bb      	ldr	r3, [r7, #8]
    463c:	189b      	adds	r3, r3, r2
    463e:	2212      	movs	r2, #18
    4640:	18ba      	adds	r2, r7, r2
    4642:	8812      	ldrh	r2, [r2, #0]
    4644:	0a12      	lsrs	r2, r2, #8
    4646:	b292      	uxth	r2, r2
    4648:	b2d2      	uxtb	r2, r2
    464a:	701a      	strb	r2, [r3, #0]
	while (length--) {
    464c:	1dbb      	adds	r3, r7, #6
    464e:	881b      	ldrh	r3, [r3, #0]
    4650:	1dba      	adds	r2, r7, #6
    4652:	1e59      	subs	r1, r3, #1
    4654:	8011      	strh	r1, [r2, #0]
    4656:	2b00      	cmp	r3, #0
    4658:	d199      	bne.n	458e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    465a:	2300      	movs	r3, #0
}
    465c:	0018      	movs	r0, r3
    465e:	46bd      	mov	sp, r7
    4660:	b007      	add	sp, #28
    4662:	bd90      	pop	{r4, r7, pc}
    4664:	00003f79 	.word	0x00003f79
    4668:	00003fc9 	.word	0x00003fc9
    466c:	00003fa1 	.word	0x00003fa1
    4670:	00004011 	.word	0x00004011

00004674 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4674:	b580      	push	{r7, lr}
    4676:	b086      	sub	sp, #24
    4678:	af00      	add	r7, sp, #0
    467a:	60f8      	str	r0, [r7, #12]
    467c:	60b9      	str	r1, [r7, #8]
    467e:	1dfb      	adds	r3, r7, #7
    4680:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	795b      	ldrb	r3, [r3, #5]
    4686:	2b01      	cmp	r3, #1
    4688:	d001      	beq.n	468e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    468a:	2315      	movs	r3, #21
    468c:	e05c      	b.n	4748 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	7a1b      	ldrb	r3, [r3, #8]
    4692:	2201      	movs	r2, #1
    4694:	4053      	eors	r3, r2
    4696:	b2db      	uxtb	r3, r3
    4698:	2b00      	cmp	r3, #0
    469a:	d054      	beq.n	4746 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    469c:	1dfb      	adds	r3, r7, #7
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d04a      	beq.n	473a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    46a4:	68bb      	ldr	r3, [r7, #8]
    46a6:	785b      	ldrb	r3, [r3, #1]
    46a8:	2b00      	cmp	r3, #0
    46aa:	d03f      	beq.n	472c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	0018      	movs	r0, r3
    46b0:	4b27      	ldr	r3, [pc, #156]	; (4750 <spi_select_slave+0xdc>)
    46b2:	4798      	blx	r3
    46b4:	0003      	movs	r3, r0
    46b6:	001a      	movs	r2, r3
    46b8:	2301      	movs	r3, #1
    46ba:	4053      	eors	r3, r2
    46bc:	b2db      	uxtb	r3, r3
    46be:	2b00      	cmp	r3, #0
    46c0:	d007      	beq.n	46d2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    46c2:	68bb      	ldr	r3, [r7, #8]
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	2101      	movs	r1, #1
    46c8:	0018      	movs	r0, r3
    46ca:	4b22      	ldr	r3, [pc, #136]	; (4754 <spi_select_slave+0xe0>)
    46cc:	4798      	blx	r3
					return STATUS_BUSY;
    46ce:	2305      	movs	r3, #5
    46d0:	e03a      	b.n	4748 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    46d2:	68bb      	ldr	r3, [r7, #8]
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	2100      	movs	r1, #0
    46d8:	0018      	movs	r0, r3
    46da:	4b1e      	ldr	r3, [pc, #120]	; (4754 <spi_select_slave+0xe0>)
    46dc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    46de:	68bb      	ldr	r3, [r7, #8]
    46e0:	789b      	ldrb	r3, [r3, #2]
    46e2:	b29a      	uxth	r2, r3
    46e4:	68fb      	ldr	r3, [r7, #12]
    46e6:	0011      	movs	r1, r2
    46e8:	0018      	movs	r0, r3
    46ea:	4b1b      	ldr	r3, [pc, #108]	; (4758 <spi_select_slave+0xe4>)
    46ec:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    46ee:	68fb      	ldr	r3, [r7, #12]
    46f0:	79db      	ldrb	r3, [r3, #7]
    46f2:	2201      	movs	r2, #1
    46f4:	4053      	eors	r3, r2
    46f6:	b2db      	uxtb	r3, r3
    46f8:	2b00      	cmp	r3, #0
    46fa:	d024      	beq.n	4746 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    46fc:	46c0      	nop			; (mov r8, r8)
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	0018      	movs	r0, r3
    4702:	4b16      	ldr	r3, [pc, #88]	; (475c <spi_select_slave+0xe8>)
    4704:	4798      	blx	r3
    4706:	0003      	movs	r3, r0
    4708:	001a      	movs	r2, r3
    470a:	2301      	movs	r3, #1
    470c:	4053      	eors	r3, r2
    470e:	b2db      	uxtb	r3, r3
    4710:	2b00      	cmp	r3, #0
    4712:	d1f4      	bne.n	46fe <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4714:	2316      	movs	r3, #22
    4716:	18fb      	adds	r3, r7, r3
    4718:	2200      	movs	r2, #0
    471a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    471c:	2316      	movs	r3, #22
    471e:	18fa      	adds	r2, r7, r3
    4720:	68fb      	ldr	r3, [r7, #12]
    4722:	0011      	movs	r1, r2
    4724:	0018      	movs	r0, r3
    4726:	4b0e      	ldr	r3, [pc, #56]	; (4760 <spi_select_slave+0xec>)
    4728:	4798      	blx	r3
    472a:	e00c      	b.n	4746 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    472c:	68bb      	ldr	r3, [r7, #8]
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	2100      	movs	r1, #0
    4732:	0018      	movs	r0, r3
    4734:	4b07      	ldr	r3, [pc, #28]	; (4754 <spi_select_slave+0xe0>)
    4736:	4798      	blx	r3
    4738:	e005      	b.n	4746 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    473a:	68bb      	ldr	r3, [r7, #8]
    473c:	781b      	ldrb	r3, [r3, #0]
    473e:	2101      	movs	r1, #1
    4740:	0018      	movs	r0, r3
    4742:	4b04      	ldr	r3, [pc, #16]	; (4754 <spi_select_slave+0xe0>)
    4744:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4746:	2300      	movs	r3, #0
}
    4748:	0018      	movs	r0, r3
    474a:	46bd      	mov	sp, r7
    474c:	b006      	add	sp, #24
    474e:	bd80      	pop	{r7, pc}
    4750:	00003f79 	.word	0x00003f79
    4754:	00003d41 	.word	0x00003d41
    4758:	00003fc9 	.word	0x00003fc9
    475c:	00003fa1 	.word	0x00003fa1
    4760:	00004011 	.word	0x00004011

00004764 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4764:	b580      	push	{r7, lr}
    4766:	b086      	sub	sp, #24
    4768:	af00      	add	r7, sp, #0
    476a:	60f8      	str	r0, [r7, #12]
    476c:	60b9      	str	r1, [r7, #8]
    476e:	1dbb      	adds	r3, r7, #6
    4770:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	2238      	movs	r2, #56	; 0x38
    4776:	5c9b      	ldrb	r3, [r3, r2]
    4778:	b2db      	uxtb	r3, r3
    477a:	2b05      	cmp	r3, #5
    477c:	d101      	bne.n	4782 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    477e:	2305      	movs	r3, #5
    4780:	e087      	b.n	4892 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4782:	1dbb      	adds	r3, r7, #6
    4784:	881b      	ldrh	r3, [r3, #0]
    4786:	2b00      	cmp	r3, #0
    4788:	d101      	bne.n	478e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    478a:	2317      	movs	r3, #23
    478c:	e081      	b.n	4892 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    478e:	2316      	movs	r3, #22
    4790:	18fb      	adds	r3, r7, r3
    4792:	2200      	movs	r2, #0
    4794:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4796:	2314      	movs	r3, #20
    4798:	18fb      	adds	r3, r7, r3
    479a:	1dba      	adds	r2, r7, #6
    479c:	8812      	ldrh	r2, [r2, #0]
    479e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    47a0:	e05f      	b.n	4862 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	0018      	movs	r0, r3
    47a8:	4b3c      	ldr	r3, [pc, #240]	; (489c <spi_write_buffer_wait+0x138>)
    47aa:	4798      	blx	r3
    47ac:	0003      	movs	r3, r0
    47ae:	001a      	movs	r2, r3
    47b0:	2301      	movs	r3, #1
    47b2:	4053      	eors	r3, r2
    47b4:	b2db      	uxtb	r3, r3
    47b6:	2b00      	cmp	r3, #0
    47b8:	d1f4      	bne.n	47a4 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    47ba:	2316      	movs	r3, #22
    47bc:	18fb      	adds	r3, r7, r3
    47be:	881b      	ldrh	r3, [r3, #0]
    47c0:	2216      	movs	r2, #22
    47c2:	18ba      	adds	r2, r7, r2
    47c4:	1c59      	adds	r1, r3, #1
    47c6:	8011      	strh	r1, [r2, #0]
    47c8:	001a      	movs	r2, r3
    47ca:	68bb      	ldr	r3, [r7, #8]
    47cc:	189b      	adds	r3, r3, r2
    47ce:	781a      	ldrb	r2, [r3, #0]
    47d0:	2312      	movs	r3, #18
    47d2:	18fb      	adds	r3, r7, r3
    47d4:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47d6:	68fb      	ldr	r3, [r7, #12]
    47d8:	799b      	ldrb	r3, [r3, #6]
    47da:	2b01      	cmp	r3, #1
    47dc:	d115      	bne.n	480a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    47de:	2316      	movs	r3, #22
    47e0:	18fb      	adds	r3, r7, r3
    47e2:	881b      	ldrh	r3, [r3, #0]
    47e4:	2216      	movs	r2, #22
    47e6:	18ba      	adds	r2, r7, r2
    47e8:	1c59      	adds	r1, r3, #1
    47ea:	8011      	strh	r1, [r2, #0]
    47ec:	001a      	movs	r2, r3
    47ee:	68bb      	ldr	r3, [r7, #8]
    47f0:	189b      	adds	r3, r3, r2
    47f2:	781b      	ldrb	r3, [r3, #0]
    47f4:	021b      	lsls	r3, r3, #8
    47f6:	b21a      	sxth	r2, r3
    47f8:	2312      	movs	r3, #18
    47fa:	18fb      	adds	r3, r7, r3
    47fc:	2100      	movs	r1, #0
    47fe:	5e5b      	ldrsh	r3, [r3, r1]
    4800:	4313      	orrs	r3, r2
    4802:	b21a      	sxth	r2, r3
    4804:	2312      	movs	r3, #18
    4806:	18fb      	adds	r3, r7, r3
    4808:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    480a:	2312      	movs	r3, #18
    480c:	18fb      	adds	r3, r7, r3
    480e:	881a      	ldrh	r2, [r3, #0]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	0011      	movs	r1, r2
    4814:	0018      	movs	r0, r3
    4816:	4b22      	ldr	r3, [pc, #136]	; (48a0 <spi_write_buffer_wait+0x13c>)
    4818:	4798      	blx	r3

		if (module->receiver_enabled) {
    481a:	68fb      	ldr	r3, [r7, #12]
    481c:	79db      	ldrb	r3, [r3, #7]
    481e:	2214      	movs	r2, #20
    4820:	18ba      	adds	r2, r7, r2
    4822:	2114      	movs	r1, #20
    4824:	1879      	adds	r1, r7, r1
    4826:	8809      	ldrh	r1, [r1, #0]
    4828:	8011      	strh	r1, [r2, #0]
    482a:	2b00      	cmp	r3, #0
    482c:	d019      	beq.n	4862 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	0018      	movs	r0, r3
    4834:	4b1b      	ldr	r3, [pc, #108]	; (48a4 <spi_write_buffer_wait+0x140>)
    4836:	4798      	blx	r3
    4838:	0003      	movs	r3, r0
    483a:	001a      	movs	r2, r3
    483c:	2301      	movs	r3, #1
    483e:	4053      	eors	r3, r2
    4840:	b2db      	uxtb	r3, r3
    4842:	2b00      	cmp	r3, #0
    4844:	d1f4      	bne.n	4830 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4846:	2310      	movs	r3, #16
    4848:	18fa      	adds	r2, r7, r3
    484a:	68fb      	ldr	r3, [r7, #12]
    484c:	0011      	movs	r1, r2
    484e:	0018      	movs	r0, r3
    4850:	4b15      	ldr	r3, [pc, #84]	; (48a8 <spi_write_buffer_wait+0x144>)
    4852:	4798      	blx	r3
			flush_length--;
    4854:	2314      	movs	r3, #20
    4856:	18fb      	adds	r3, r7, r3
    4858:	881a      	ldrh	r2, [r3, #0]
    485a:	2314      	movs	r3, #20
    485c:	18fb      	adds	r3, r7, r3
    485e:	3a01      	subs	r2, #1
    4860:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4862:	1dbb      	adds	r3, r7, #6
    4864:	881b      	ldrh	r3, [r3, #0]
    4866:	1dba      	adds	r2, r7, #6
    4868:	1e59      	subs	r1, r3, #1
    486a:	8011      	strh	r1, [r2, #0]
    486c:	2b00      	cmp	r3, #0
    486e:	d198      	bne.n	47a2 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4870:	68fb      	ldr	r3, [r7, #12]
    4872:	795b      	ldrb	r3, [r3, #5]
    4874:	2b01      	cmp	r3, #1
    4876:	d10b      	bne.n	4890 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4878:	46c0      	nop			; (mov r8, r8)
    487a:	68fb      	ldr	r3, [r7, #12]
    487c:	0018      	movs	r0, r3
    487e:	4b0b      	ldr	r3, [pc, #44]	; (48ac <spi_write_buffer_wait+0x148>)
    4880:	4798      	blx	r3
    4882:	0003      	movs	r3, r0
    4884:	001a      	movs	r2, r3
    4886:	2301      	movs	r3, #1
    4888:	4053      	eors	r3, r2
    488a:	b2db      	uxtb	r3, r3
    488c:	2b00      	cmp	r3, #0
    488e:	d1f4      	bne.n	487a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4890:	2300      	movs	r3, #0
}
    4892:	0018      	movs	r0, r3
    4894:	46bd      	mov	sp, r7
    4896:	b006      	add	sp, #24
    4898:	bd80      	pop	{r7, pc}
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	00003f79 	.word	0x00003f79
    48a0:	00003fc9 	.word	0x00003fc9
    48a4:	00003fa1 	.word	0x00003fa1
    48a8:	00004011 	.word	0x00004011
    48ac:	00003f51 	.word	0x00003f51

000048b0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    48b0:	b580      	push	{r7, lr}
    48b2:	b084      	sub	sp, #16
    48b4:	af00      	add	r7, sp, #0
    48b6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	681b      	ldr	r3, [r3, #0]
    48bc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48c2:	781b      	ldrb	r3, [r3, #0]
    48c4:	b2da      	uxtb	r2, r3
    48c6:	230e      	movs	r3, #14
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48d0:	1c5a      	adds	r2, r3, #1
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48d6:	687b      	ldr	r3, [r7, #4]
    48d8:	799b      	ldrb	r3, [r3, #6]
    48da:	2b01      	cmp	r3, #1
    48dc:	d113      	bne.n	4906 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    48de:	687b      	ldr	r3, [r7, #4]
    48e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48e2:	781b      	ldrb	r3, [r3, #0]
    48e4:	b2db      	uxtb	r3, r3
    48e6:	021b      	lsls	r3, r3, #8
    48e8:	b21a      	sxth	r2, r3
    48ea:	230e      	movs	r3, #14
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	2100      	movs	r1, #0
    48f0:	5e5b      	ldrsh	r3, [r3, r1]
    48f2:	4313      	orrs	r3, r2
    48f4:	b21a      	sxth	r2, r3
    48f6:	230e      	movs	r3, #14
    48f8:	18fb      	adds	r3, r7, r3
    48fa:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4900:	1c5a      	adds	r2, r3, #1
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4906:	230e      	movs	r3, #14
    4908:	18fb      	adds	r3, r7, r3
    490a:	881b      	ldrh	r3, [r3, #0]
    490c:	05db      	lsls	r3, r3, #23
    490e:	0dda      	lsrs	r2, r3, #23
    4910:	68bb      	ldr	r3, [r7, #8]
    4912:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4918:	b29b      	uxth	r3, r3
    491a:	3b01      	subs	r3, #1
    491c:	b29a      	uxth	r2, r3
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	46bd      	mov	sp, r7
    4926:	b004      	add	sp, #16
    4928:	bd80      	pop	{r7, pc}
	...

0000492c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    492c:	b580      	push	{r7, lr}
    492e:	b084      	sub	sp, #16
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	681b      	ldr	r3, [r3, #0]
    4938:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    493a:	4b08      	ldr	r3, [pc, #32]	; (495c <_spi_write_dummy+0x30>)
    493c:	881b      	ldrh	r3, [r3, #0]
    493e:	001a      	movs	r2, r3
    4940:	68fb      	ldr	r3, [r7, #12]
    4942:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4948:	b29b      	uxth	r3, r3
    494a:	3b01      	subs	r3, #1
    494c:	b29a      	uxth	r2, r3
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	46bd      	mov	sp, r7
    4956:	b004      	add	sp, #16
    4958:	bd80      	pop	{r7, pc}
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	200009ec 	.word	0x200009ec

00004960 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4960:	b580      	push	{r7, lr}
    4962:	b084      	sub	sp, #16
    4964:	af00      	add	r7, sp, #0
    4966:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	681b      	ldr	r3, [r3, #0]
    496c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    496e:	230a      	movs	r3, #10
    4970:	18fb      	adds	r3, r7, r3
    4972:	2200      	movs	r2, #0
    4974:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4976:	68fb      	ldr	r3, [r7, #12]
    4978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    497a:	230a      	movs	r3, #10
    497c:	18fb      	adds	r3, r7, r3
    497e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4984:	b29b      	uxth	r3, r3
    4986:	3b01      	subs	r3, #1
    4988:	b29a      	uxth	r2, r3
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	46bd      	mov	sp, r7
    4992:	b004      	add	sp, #16
    4994:	bd80      	pop	{r7, pc}

00004996 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4996:	b580      	push	{r7, lr}
    4998:	b084      	sub	sp, #16
    499a:	af00      	add	r7, sp, #0
    499c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    499e:	687b      	ldr	r3, [r7, #4]
    49a0:	681b      	ldr	r3, [r3, #0]
    49a2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    49a4:	68fb      	ldr	r3, [r7, #12]
    49a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49a8:	b29a      	uxth	r2, r3
    49aa:	230a      	movs	r3, #10
    49ac:	18fb      	adds	r3, r7, r3
    49ae:	05d2      	lsls	r2, r2, #23
    49b0:	0dd2      	lsrs	r2, r2, #23
    49b2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    49b4:	687b      	ldr	r3, [r7, #4]
    49b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49b8:	220a      	movs	r2, #10
    49ba:	18ba      	adds	r2, r7, r2
    49bc:	8812      	ldrh	r2, [r2, #0]
    49be:	b2d2      	uxtb	r2, r2
    49c0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49c6:	1c5a      	adds	r2, r3, #1
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	799b      	ldrb	r3, [r3, #6]
    49d0:	2b01      	cmp	r3, #1
    49d2:	d10d      	bne.n	49f0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49d8:	220a      	movs	r2, #10
    49da:	18ba      	adds	r2, r7, r2
    49dc:	8812      	ldrh	r2, [r2, #0]
    49de:	0a12      	lsrs	r2, r2, #8
    49e0:	b292      	uxth	r2, r2
    49e2:	b2d2      	uxtb	r2, r2
    49e4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49ea:	1c5a      	adds	r2, r3, #1
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    49f4:	b29b      	uxth	r3, r3
    49f6:	3b01      	subs	r3, #1
    49f8:	b29a      	uxth	r2, r3
    49fa:	687b      	ldr	r3, [r7, #4]
    49fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    49fe:	46c0      	nop			; (mov r8, r8)
    4a00:	46bd      	mov	sp, r7
    4a02:	b004      	add	sp, #16
    4a04:	bd80      	pop	{r7, pc}
	...

00004a08 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4a08:	b580      	push	{r7, lr}
    4a0a:	b086      	sub	sp, #24
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	0002      	movs	r2, r0
    4a10:	1dfb      	adds	r3, r7, #7
    4a12:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4a14:	1dfb      	adds	r3, r7, #7
    4a16:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4a18:	4b96      	ldr	r3, [pc, #600]	; (4c74 <_spi_interrupt_handler+0x26c>)
    4a1a:	0092      	lsls	r2, r2, #2
    4a1c:	58d3      	ldr	r3, [r2, r3]
    4a1e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a20:	697b      	ldr	r3, [r7, #20]
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4a26:	697b      	ldr	r3, [r7, #20]
    4a28:	2237      	movs	r2, #55	; 0x37
    4a2a:	5c9a      	ldrb	r2, [r3, r2]
    4a2c:	697b      	ldr	r3, [r7, #20]
    4a2e:	2136      	movs	r1, #54	; 0x36
    4a30:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4a32:	230f      	movs	r3, #15
    4a34:	18fb      	adds	r3, r7, r3
    4a36:	400a      	ands	r2, r1
    4a38:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4a3a:	693b      	ldr	r3, [r7, #16]
    4a3c:	7e1b      	ldrb	r3, [r3, #24]
    4a3e:	b2da      	uxtb	r2, r3
    4a40:	230c      	movs	r3, #12
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	7d9b      	ldrb	r3, [r3, #22]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	b29a      	uxth	r2, r3
    4a4e:	230c      	movs	r3, #12
    4a50:	18fb      	adds	r3, r7, r3
    4a52:	210c      	movs	r1, #12
    4a54:	1879      	adds	r1, r7, r1
    4a56:	8809      	ldrh	r1, [r1, #0]
    4a58:	400a      	ands	r2, r1
    4a5a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4a5c:	230c      	movs	r3, #12
    4a5e:	18fb      	adds	r3, r7, r3
    4a60:	881b      	ldrh	r3, [r3, #0]
    4a62:	2201      	movs	r2, #1
    4a64:	4013      	ands	r3, r2
    4a66:	d038      	beq.n	4ada <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4a68:	697b      	ldr	r3, [r7, #20]
    4a6a:	795b      	ldrb	r3, [r3, #5]
    4a6c:	2b01      	cmp	r3, #1
    4a6e:	d110      	bne.n	4a92 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	7a5b      	ldrb	r3, [r3, #9]
    4a74:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4a76:	2b00      	cmp	r3, #0
    4a78:	d10b      	bne.n	4a92 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4a7a:	697b      	ldr	r3, [r7, #20]
    4a7c:	0018      	movs	r0, r3
    4a7e:	4b7e      	ldr	r3, [pc, #504]	; (4c78 <_spi_interrupt_handler+0x270>)
    4a80:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4a82:	697b      	ldr	r3, [r7, #20]
    4a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4a86:	b29b      	uxth	r3, r3
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d102      	bne.n	4a92 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4a8c:	693b      	ldr	r3, [r7, #16]
    4a8e:	2201      	movs	r2, #1
    4a90:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	795b      	ldrb	r3, [r3, #5]
		if (0
    4a96:	2b01      	cmp	r3, #1
    4a98:	d11f      	bne.n	4ada <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4a9a:	697b      	ldr	r3, [r7, #20]
    4a9c:	7a5b      	ldrb	r3, [r3, #9]
    4a9e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d01a      	beq.n	4ada <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4aa4:	697b      	ldr	r3, [r7, #20]
    4aa6:	0018      	movs	r0, r3
    4aa8:	4b74      	ldr	r3, [pc, #464]	; (4c7c <_spi_interrupt_handler+0x274>)
    4aaa:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4aac:	697b      	ldr	r3, [r7, #20]
    4aae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4ab0:	b29b      	uxth	r3, r3
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d111      	bne.n	4ada <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4ab6:	693b      	ldr	r3, [r7, #16]
    4ab8:	2201      	movs	r2, #1
    4aba:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4abc:	697b      	ldr	r3, [r7, #20]
    4abe:	7a5b      	ldrb	r3, [r3, #9]
    4ac0:	b2db      	uxtb	r3, r3
    4ac2:	2b01      	cmp	r3, #1
    4ac4:	d109      	bne.n	4ada <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4ac6:	697b      	ldr	r3, [r7, #20]
    4ac8:	79db      	ldrb	r3, [r3, #7]
    4aca:	2201      	movs	r2, #1
    4acc:	4053      	eors	r3, r2
    4ace:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d002      	beq.n	4ada <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4ad4:	693b      	ldr	r3, [r7, #16]
    4ad6:	2202      	movs	r2, #2
    4ad8:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4ada:	230c      	movs	r3, #12
    4adc:	18fb      	adds	r3, r7, r3
    4ade:	881b      	ldrh	r3, [r3, #0]
    4ae0:	2204      	movs	r2, #4
    4ae2:	4013      	ands	r3, r2
    4ae4:	d100      	bne.n	4ae8 <_spi_interrupt_handler+0xe0>
    4ae6:	e07e      	b.n	4be6 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ae8:	693b      	ldr	r3, [r7, #16]
    4aea:	8b5b      	ldrh	r3, [r3, #26]
    4aec:	b29b      	uxth	r3, r3
    4aee:	001a      	movs	r2, r3
    4af0:	2304      	movs	r3, #4
    4af2:	4013      	ands	r3, r2
    4af4:	d022      	beq.n	4b3c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4af6:	697b      	ldr	r3, [r7, #20]
    4af8:	7a5b      	ldrb	r3, [r3, #9]
    4afa:	b2db      	uxtb	r3, r3
    4afc:	2b01      	cmp	r3, #1
    4afe:	d014      	beq.n	4b2a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4b00:	697b      	ldr	r3, [r7, #20]
    4b02:	2238      	movs	r2, #56	; 0x38
    4b04:	211e      	movs	r1, #30
    4b06:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4b08:	697b      	ldr	r3, [r7, #20]
    4b0a:	2203      	movs	r2, #3
    4b0c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4b0e:	693b      	ldr	r3, [r7, #16]
    4b10:	2205      	movs	r2, #5
    4b12:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4b14:	230f      	movs	r3, #15
    4b16:	18fb      	adds	r3, r7, r3
    4b18:	781b      	ldrb	r3, [r3, #0]
    4b1a:	2208      	movs	r2, #8
    4b1c:	4013      	ands	r3, r2
    4b1e:	d004      	beq.n	4b2a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4b20:	697b      	ldr	r3, [r7, #20]
    4b22:	699b      	ldr	r3, [r3, #24]
    4b24:	697a      	ldr	r2, [r7, #20]
    4b26:	0010      	movs	r0, r2
    4b28:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4b2a:	693b      	ldr	r3, [r7, #16]
    4b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b2e:	230a      	movs	r3, #10
    4b30:	18fb      	adds	r3, r7, r3
    4b32:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b34:	693b      	ldr	r3, [r7, #16]
    4b36:	2204      	movs	r2, #4
    4b38:	835a      	strh	r2, [r3, #26]
    4b3a:	e054      	b.n	4be6 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4b3c:	697b      	ldr	r3, [r7, #20]
    4b3e:	7a5b      	ldrb	r3, [r3, #9]
    4b40:	b2db      	uxtb	r3, r3
    4b42:	2b01      	cmp	r3, #1
    4b44:	d11e      	bne.n	4b84 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4b46:	697b      	ldr	r3, [r7, #20]
    4b48:	0018      	movs	r0, r3
    4b4a:	4b4d      	ldr	r3, [pc, #308]	; (4c80 <_spi_interrupt_handler+0x278>)
    4b4c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4b4e:	697b      	ldr	r3, [r7, #20]
    4b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4b52:	b29b      	uxth	r3, r3
    4b54:	2b00      	cmp	r3, #0
    4b56:	d146      	bne.n	4be6 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4b58:	693b      	ldr	r3, [r7, #16]
    4b5a:	2204      	movs	r2, #4
    4b5c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4b5e:	697b      	ldr	r3, [r7, #20]
    4b60:	2238      	movs	r2, #56	; 0x38
    4b62:	2100      	movs	r1, #0
    4b64:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4b66:	697b      	ldr	r3, [r7, #20]
    4b68:	2203      	movs	r2, #3
    4b6a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4b6c:	230f      	movs	r3, #15
    4b6e:	18fb      	adds	r3, r7, r3
    4b70:	781b      	ldrb	r3, [r3, #0]
    4b72:	2201      	movs	r2, #1
    4b74:	4013      	ands	r3, r2
    4b76:	d036      	beq.n	4be6 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4b78:	697b      	ldr	r3, [r7, #20]
    4b7a:	68db      	ldr	r3, [r3, #12]
    4b7c:	697a      	ldr	r2, [r7, #20]
    4b7e:	0010      	movs	r0, r2
    4b80:	4798      	blx	r3
    4b82:	e030      	b.n	4be6 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4b84:	697b      	ldr	r3, [r7, #20]
    4b86:	0018      	movs	r0, r3
    4b88:	4b3e      	ldr	r3, [pc, #248]	; (4c84 <_spi_interrupt_handler+0x27c>)
    4b8a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4b8c:	697b      	ldr	r3, [r7, #20]
    4b8e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4b90:	b29b      	uxth	r3, r3
    4b92:	2b00      	cmp	r3, #0
    4b94:	d127      	bne.n	4be6 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4b96:	697b      	ldr	r3, [r7, #20]
    4b98:	2238      	movs	r2, #56	; 0x38
    4b9a:	2100      	movs	r1, #0
    4b9c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4b9e:	693b      	ldr	r3, [r7, #16]
    4ba0:	2204      	movs	r2, #4
    4ba2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4ba4:	697b      	ldr	r3, [r7, #20]
    4ba6:	7a5b      	ldrb	r3, [r3, #9]
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	2b02      	cmp	r3, #2
    4bac:	d10b      	bne.n	4bc6 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4bae:	230f      	movs	r3, #15
    4bb0:	18fb      	adds	r3, r7, r3
    4bb2:	781b      	ldrb	r3, [r3, #0]
    4bb4:	2204      	movs	r2, #4
    4bb6:	4013      	ands	r3, r2
    4bb8:	d015      	beq.n	4be6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4bba:	697b      	ldr	r3, [r7, #20]
    4bbc:	695b      	ldr	r3, [r3, #20]
    4bbe:	697a      	ldr	r2, [r7, #20]
    4bc0:	0010      	movs	r0, r2
    4bc2:	4798      	blx	r3
    4bc4:	e00f      	b.n	4be6 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4bc6:	697b      	ldr	r3, [r7, #20]
    4bc8:	7a5b      	ldrb	r3, [r3, #9]
    4bca:	b2db      	uxtb	r3, r3
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d10a      	bne.n	4be6 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4bd0:	230f      	movs	r3, #15
    4bd2:	18fb      	adds	r3, r7, r3
    4bd4:	781b      	ldrb	r3, [r3, #0]
    4bd6:	2202      	movs	r2, #2
    4bd8:	4013      	ands	r3, r2
    4bda:	d004      	beq.n	4be6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4bdc:	697b      	ldr	r3, [r7, #20]
    4bde:	691b      	ldr	r3, [r3, #16]
    4be0:	697a      	ldr	r2, [r7, #20]
    4be2:	0010      	movs	r0, r2
    4be4:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4be6:	230c      	movs	r3, #12
    4be8:	18fb      	adds	r3, r7, r3
    4bea:	881b      	ldrh	r3, [r3, #0]
    4bec:	2202      	movs	r2, #2
    4bee:	4013      	ands	r3, r2
    4bf0:	d024      	beq.n	4c3c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4bf2:	697b      	ldr	r3, [r7, #20]
    4bf4:	795b      	ldrb	r3, [r3, #5]
    4bf6:	2b01      	cmp	r3, #1
    4bf8:	d120      	bne.n	4c3c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4bfa:	697b      	ldr	r3, [r7, #20]
    4bfc:	7a5b      	ldrb	r3, [r3, #9]
    4bfe:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4c00:	2b01      	cmp	r3, #1
    4c02:	d11b      	bne.n	4c3c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4c04:	697b      	ldr	r3, [r7, #20]
    4c06:	79db      	ldrb	r3, [r3, #7]
    4c08:	2201      	movs	r2, #1
    4c0a:	4053      	eors	r3, r2
    4c0c:	b2db      	uxtb	r3, r3
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d014      	beq.n	4c3c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4c12:	693b      	ldr	r3, [r7, #16]
    4c14:	2202      	movs	r2, #2
    4c16:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4c18:	697b      	ldr	r3, [r7, #20]
    4c1a:	2203      	movs	r2, #3
    4c1c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4c1e:	697b      	ldr	r3, [r7, #20]
    4c20:	2238      	movs	r2, #56	; 0x38
    4c22:	2100      	movs	r1, #0
    4c24:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4c26:	230f      	movs	r3, #15
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	2201      	movs	r2, #1
    4c2e:	4013      	ands	r3, r2
    4c30:	d004      	beq.n	4c3c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4c32:	697b      	ldr	r3, [r7, #20]
    4c34:	68db      	ldr	r3, [r3, #12]
    4c36:	697a      	ldr	r2, [r7, #20]
    4c38:	0010      	movs	r0, r2
    4c3a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4c3c:	230c      	movs	r3, #12
    4c3e:	18fb      	adds	r3, r7, r3
    4c40:	881b      	ldrh	r3, [r3, #0]
    4c42:	2280      	movs	r2, #128	; 0x80
    4c44:	4013      	ands	r3, r2
    4c46:	d010      	beq.n	4c6a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4c48:	693b      	ldr	r3, [r7, #16]
    4c4a:	2280      	movs	r2, #128	; 0x80
    4c4c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4c4e:	693b      	ldr	r3, [r7, #16]
    4c50:	2280      	movs	r2, #128	; 0x80
    4c52:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4c54:	230f      	movs	r3, #15
    4c56:	18fb      	adds	r3, r7, r3
    4c58:	781b      	ldrb	r3, [r3, #0]
    4c5a:	2240      	movs	r2, #64	; 0x40
    4c5c:	4013      	ands	r3, r2
    4c5e:	d004      	beq.n	4c6a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4c60:	697b      	ldr	r3, [r7, #20]
    4c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c64:	697a      	ldr	r2, [r7, #20]
    4c66:	0010      	movs	r0, r2
    4c68:	4798      	blx	r3
		}
	}
#  endif
}
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	46bd      	mov	sp, r7
    4c6e:	b006      	add	sp, #24
    4c70:	bd80      	pop	{r7, pc}
    4c72:	46c0      	nop			; (mov r8, r8)
    4c74:	200009d4 	.word	0x200009d4
    4c78:	0000492d 	.word	0x0000492d
    4c7c:	000048b1 	.word	0x000048b1
    4c80:	00004961 	.word	0x00004961
    4c84:	00004997 	.word	0x00004997

00004c88 <system_gclk_chan_get_config_defaults>:
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	b082      	sub	sp, #8
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	2200      	movs	r2, #0
    4c94:	701a      	strb	r2, [r3, #0]
}
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	46bd      	mov	sp, r7
    4c9a:	b002      	add	sp, #8
    4c9c:	bd80      	pop	{r7, pc}
	...

00004ca0 <system_apb_clock_set_mask>:
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b082      	sub	sp, #8
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	0002      	movs	r2, r0
    4ca8:	6039      	str	r1, [r7, #0]
    4caa:	1dfb      	adds	r3, r7, #7
    4cac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4cae:	1dfb      	adds	r3, r7, #7
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	2b01      	cmp	r3, #1
    4cb4:	d00a      	beq.n	4ccc <system_apb_clock_set_mask+0x2c>
    4cb6:	2b02      	cmp	r3, #2
    4cb8:	d00f      	beq.n	4cda <system_apb_clock_set_mask+0x3a>
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d114      	bne.n	4ce8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4cbe:	4b0e      	ldr	r3, [pc, #56]	; (4cf8 <system_apb_clock_set_mask+0x58>)
    4cc0:	4a0d      	ldr	r2, [pc, #52]	; (4cf8 <system_apb_clock_set_mask+0x58>)
    4cc2:	6991      	ldr	r1, [r2, #24]
    4cc4:	683a      	ldr	r2, [r7, #0]
    4cc6:	430a      	orrs	r2, r1
    4cc8:	619a      	str	r2, [r3, #24]
			break;
    4cca:	e00f      	b.n	4cec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4ccc:	4b0a      	ldr	r3, [pc, #40]	; (4cf8 <system_apb_clock_set_mask+0x58>)
    4cce:	4a0a      	ldr	r2, [pc, #40]	; (4cf8 <system_apb_clock_set_mask+0x58>)
    4cd0:	69d1      	ldr	r1, [r2, #28]
    4cd2:	683a      	ldr	r2, [r7, #0]
    4cd4:	430a      	orrs	r2, r1
    4cd6:	61da      	str	r2, [r3, #28]
			break;
    4cd8:	e008      	b.n	4cec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4cda:	4b07      	ldr	r3, [pc, #28]	; (4cf8 <system_apb_clock_set_mask+0x58>)
    4cdc:	4a06      	ldr	r2, [pc, #24]	; (4cf8 <system_apb_clock_set_mask+0x58>)
    4cde:	6a11      	ldr	r1, [r2, #32]
    4ce0:	683a      	ldr	r2, [r7, #0]
    4ce2:	430a      	orrs	r2, r1
    4ce4:	621a      	str	r2, [r3, #32]
			break;
    4ce6:	e001      	b.n	4cec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4ce8:	2317      	movs	r3, #23
    4cea:	e000      	b.n	4cee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4cec:	2300      	movs	r3, #0
}
    4cee:	0018      	movs	r0, r3
    4cf0:	46bd      	mov	sp, r7
    4cf2:	b002      	add	sp, #8
    4cf4:	bd80      	pop	{r7, pc}
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	40000400 	.word	0x40000400

00004cfc <system_pinmux_get_config_defaults>:
{
    4cfc:	b580      	push	{r7, lr}
    4cfe:	b082      	sub	sp, #8
    4d00:	af00      	add	r7, sp, #0
    4d02:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	2280      	movs	r2, #128	; 0x80
    4d08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2200      	movs	r2, #0
    4d0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	2201      	movs	r2, #1
    4d14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4d16:	687b      	ldr	r3, [r7, #4]
    4d18:	2200      	movs	r2, #0
    4d1a:	70da      	strb	r2, [r3, #3]
}
    4d1c:	46c0      	nop			; (mov r8, r8)
    4d1e:	46bd      	mov	sp, r7
    4d20:	b002      	add	sp, #8
    4d22:	bd80      	pop	{r7, pc}

00004d24 <system_is_debugger_present>:
{
    4d24:	b580      	push	{r7, lr}
    4d26:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4d28:	4b05      	ldr	r3, [pc, #20]	; (4d40 <system_is_debugger_present+0x1c>)
    4d2a:	789b      	ldrb	r3, [r3, #2]
    4d2c:	b2db      	uxtb	r3, r3
    4d2e:	001a      	movs	r2, r3
    4d30:	2302      	movs	r3, #2
    4d32:	4013      	ands	r3, r2
    4d34:	1e5a      	subs	r2, r3, #1
    4d36:	4193      	sbcs	r3, r2
    4d38:	b2db      	uxtb	r3, r3
}
    4d3a:	0018      	movs	r0, r3
    4d3c:	46bd      	mov	sp, r7
    4d3e:	bd80      	pop	{r7, pc}
    4d40:	41002000 	.word	0x41002000

00004d44 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b084      	sub	sp, #16
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	681b      	ldr	r3, [r3, #0]
    4d50:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	69db      	ldr	r3, [r3, #28]
    4d56:	1e5a      	subs	r2, r3, #1
    4d58:	4193      	sbcs	r3, r2
    4d5a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4d5c:	0018      	movs	r0, r3
    4d5e:	46bd      	mov	sp, r7
    4d60:	b004      	add	sp, #16
    4d62:	bd80      	pop	{r7, pc}

00004d64 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4d64:	b580      	push	{r7, lr}
    4d66:	b082      	sub	sp, #8
    4d68:	af00      	add	r7, sp, #0
    4d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4d6c:	46c0      	nop			; (mov r8, r8)
    4d6e:	687b      	ldr	r3, [r7, #4]
    4d70:	0018      	movs	r0, r3
    4d72:	4b04      	ldr	r3, [pc, #16]	; (4d84 <_usart_wait_for_sync+0x20>)
    4d74:	4798      	blx	r3
    4d76:	1e03      	subs	r3, r0, #0
    4d78:	d1f9      	bne.n	4d6e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4d7a:	46c0      	nop			; (mov r8, r8)
    4d7c:	46bd      	mov	sp, r7
    4d7e:	b002      	add	sp, #8
    4d80:	bd80      	pop	{r7, pc}
    4d82:	46c0      	nop			; (mov r8, r8)
    4d84:	00004d45 	.word	0x00004d45

00004d88 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4d88:	b5b0      	push	{r4, r5, r7, lr}
    4d8a:	b08c      	sub	sp, #48	; 0x30
    4d8c:	af02      	add	r7, sp, #8
    4d8e:	6078      	str	r0, [r7, #4]
    4d90:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	681b      	ldr	r3, [r3, #0]
    4d96:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	681b      	ldr	r3, [r3, #0]
    4d9c:	0018      	movs	r0, r3
    4d9e:	4bab      	ldr	r3, [pc, #684]	; (504c <_usart_set_config+0x2c4>)
    4da0:	4798      	blx	r3
    4da2:	0003      	movs	r3, r0
    4da4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4da6:	697b      	ldr	r3, [r7, #20]
    4da8:	3314      	adds	r3, #20
    4daa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4dac:	2300      	movs	r3, #0
    4dae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4db0:	2300      	movs	r3, #0
    4db2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4db4:	230a      	movs	r3, #10
    4db6:	18fb      	adds	r3, r7, r3
    4db8:	2200      	movs	r2, #0
    4dba:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4dbc:	231f      	movs	r3, #31
    4dbe:	18fb      	adds	r3, r7, r3
    4dc0:	2200      	movs	r2, #0
    4dc2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4dc4:	231e      	movs	r3, #30
    4dc6:	18fb      	adds	r3, r7, r3
    4dc8:	2210      	movs	r2, #16
    4dca:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4dcc:	683b      	ldr	r3, [r7, #0]
    4dce:	8a1b      	ldrh	r3, [r3, #16]
    4dd0:	2280      	movs	r2, #128	; 0x80
    4dd2:	01d2      	lsls	r2, r2, #7
    4dd4:	4293      	cmp	r3, r2
    4dd6:	d01c      	beq.n	4e12 <_usart_set_config+0x8a>
    4dd8:	2280      	movs	r2, #128	; 0x80
    4dda:	01d2      	lsls	r2, r2, #7
    4ddc:	4293      	cmp	r3, r2
    4dde:	dc06      	bgt.n	4dee <_usart_set_config+0x66>
    4de0:	2b00      	cmp	r3, #0
    4de2:	d00d      	beq.n	4e00 <_usart_set_config+0x78>
    4de4:	2280      	movs	r2, #128	; 0x80
    4de6:	0192      	lsls	r2, r2, #6
    4de8:	4293      	cmp	r3, r2
    4dea:	d024      	beq.n	4e36 <_usart_set_config+0xae>
    4dec:	e035      	b.n	4e5a <_usart_set_config+0xd2>
    4dee:	22c0      	movs	r2, #192	; 0xc0
    4df0:	01d2      	lsls	r2, r2, #7
    4df2:	4293      	cmp	r3, r2
    4df4:	d028      	beq.n	4e48 <_usart_set_config+0xc0>
    4df6:	2280      	movs	r2, #128	; 0x80
    4df8:	0212      	lsls	r2, r2, #8
    4dfa:	4293      	cmp	r3, r2
    4dfc:	d012      	beq.n	4e24 <_usart_set_config+0x9c>
    4dfe:	e02c      	b.n	4e5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4e00:	231f      	movs	r3, #31
    4e02:	18fb      	adds	r3, r7, r3
    4e04:	2200      	movs	r2, #0
    4e06:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4e08:	231e      	movs	r3, #30
    4e0a:	18fb      	adds	r3, r7, r3
    4e0c:	2210      	movs	r2, #16
    4e0e:	701a      	strb	r2, [r3, #0]
			break;
    4e10:	e023      	b.n	4e5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4e12:	231f      	movs	r3, #31
    4e14:	18fb      	adds	r3, r7, r3
    4e16:	2200      	movs	r2, #0
    4e18:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4e1a:	231e      	movs	r3, #30
    4e1c:	18fb      	adds	r3, r7, r3
    4e1e:	2208      	movs	r2, #8
    4e20:	701a      	strb	r2, [r3, #0]
			break;
    4e22:	e01a      	b.n	4e5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4e24:	231f      	movs	r3, #31
    4e26:	18fb      	adds	r3, r7, r3
    4e28:	2200      	movs	r2, #0
    4e2a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4e2c:	231e      	movs	r3, #30
    4e2e:	18fb      	adds	r3, r7, r3
    4e30:	2203      	movs	r2, #3
    4e32:	701a      	strb	r2, [r3, #0]
			break;
    4e34:	e011      	b.n	4e5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4e36:	231f      	movs	r3, #31
    4e38:	18fb      	adds	r3, r7, r3
    4e3a:	2201      	movs	r2, #1
    4e3c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4e3e:	231e      	movs	r3, #30
    4e40:	18fb      	adds	r3, r7, r3
    4e42:	2210      	movs	r2, #16
    4e44:	701a      	strb	r2, [r3, #0]
			break;
    4e46:	e008      	b.n	4e5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4e48:	231f      	movs	r3, #31
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	2201      	movs	r2, #1
    4e4e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4e50:	231e      	movs	r3, #30
    4e52:	18fb      	adds	r3, r7, r3
    4e54:	2208      	movs	r2, #8
    4e56:	701a      	strb	r2, [r3, #0]
			break;
    4e58:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4e5a:	683b      	ldr	r3, [r7, #0]
    4e5c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4e5e:	683b      	ldr	r3, [r7, #0]
    4e60:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4e62:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4e64:	683b      	ldr	r3, [r7, #0]
    4e66:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4e68:	4313      	orrs	r3, r2
		config->sample_rate |
    4e6a:	683a      	ldr	r2, [r7, #0]
    4e6c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4e6e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4e70:	683a      	ldr	r2, [r7, #0]
    4e72:	7e12      	ldrb	r2, [r2, #24]
    4e74:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4e76:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4e78:	683a      	ldr	r2, [r7, #0]
    4e7a:	2126      	movs	r1, #38	; 0x26
    4e7c:	5c52      	ldrb	r2, [r2, r1]
    4e7e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4e80:	4313      	orrs	r3, r2
    4e82:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4e84:	231d      	movs	r3, #29
    4e86:	18fb      	adds	r3, r7, r3
    4e88:	2200      	movs	r2, #0
    4e8a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4e8c:	683b      	ldr	r3, [r7, #0]
    4e8e:	685b      	ldr	r3, [r3, #4]
    4e90:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4e92:	68fb      	ldr	r3, [r7, #12]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d01e      	beq.n	4ed6 <_usart_set_config+0x14e>
    4e98:	2280      	movs	r2, #128	; 0x80
    4e9a:	0552      	lsls	r2, r2, #21
    4e9c:	4293      	cmp	r3, r2
    4e9e:	d14f      	bne.n	4f40 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4ea0:	683b      	ldr	r3, [r7, #0]
    4ea2:	2227      	movs	r2, #39	; 0x27
    4ea4:	5c9b      	ldrb	r3, [r3, r2]
    4ea6:	2201      	movs	r2, #1
    4ea8:	4053      	eors	r3, r2
    4eaa:	b2db      	uxtb	r3, r3
    4eac:	2b00      	cmp	r3, #0
    4eae:	d046      	beq.n	4f3e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4eb0:	683b      	ldr	r3, [r7, #0]
    4eb2:	6a1d      	ldr	r5, [r3, #32]
    4eb4:	693b      	ldr	r3, [r7, #16]
    4eb6:	b2db      	uxtb	r3, r3
    4eb8:	0018      	movs	r0, r3
    4eba:	4b65      	ldr	r3, [pc, #404]	; (5050 <_usart_set_config+0x2c8>)
    4ebc:	4798      	blx	r3
    4ebe:	0001      	movs	r1, r0
    4ec0:	231d      	movs	r3, #29
    4ec2:	18fc      	adds	r4, r7, r3
    4ec4:	230a      	movs	r3, #10
    4ec6:	18fb      	adds	r3, r7, r3
    4ec8:	001a      	movs	r2, r3
    4eca:	0028      	movs	r0, r5
    4ecc:	4b61      	ldr	r3, [pc, #388]	; (5054 <_usart_set_config+0x2cc>)
    4ece:	4798      	blx	r3
    4ed0:	0003      	movs	r3, r0
    4ed2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4ed4:	e033      	b.n	4f3e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4ed6:	683b      	ldr	r3, [r7, #0]
    4ed8:	2227      	movs	r2, #39	; 0x27
    4eda:	5c9b      	ldrb	r3, [r3, r2]
    4edc:	2b00      	cmp	r3, #0
    4ede:	d014      	beq.n	4f0a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4ee0:	683b      	ldr	r3, [r7, #0]
    4ee2:	6a18      	ldr	r0, [r3, #32]
    4ee4:	683b      	ldr	r3, [r7, #0]
    4ee6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4ee8:	231d      	movs	r3, #29
    4eea:	18fc      	adds	r4, r7, r3
    4eec:	231f      	movs	r3, #31
    4eee:	18fb      	adds	r3, r7, r3
    4ef0:	781d      	ldrb	r5, [r3, #0]
    4ef2:	230a      	movs	r3, #10
    4ef4:	18fa      	adds	r2, r7, r3
    4ef6:	231e      	movs	r3, #30
    4ef8:	18fb      	adds	r3, r7, r3
    4efa:	781b      	ldrb	r3, [r3, #0]
    4efc:	9300      	str	r3, [sp, #0]
    4efe:	002b      	movs	r3, r5
    4f00:	4d55      	ldr	r5, [pc, #340]	; (5058 <_usart_set_config+0x2d0>)
    4f02:	47a8      	blx	r5
    4f04:	0003      	movs	r3, r0
    4f06:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4f08:	e01a      	b.n	4f40 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    4f0a:	683b      	ldr	r3, [r7, #0]
    4f0c:	6a1d      	ldr	r5, [r3, #32]
    4f0e:	693b      	ldr	r3, [r7, #16]
    4f10:	b2db      	uxtb	r3, r3
    4f12:	0018      	movs	r0, r3
    4f14:	4b4e      	ldr	r3, [pc, #312]	; (5050 <_usart_set_config+0x2c8>)
    4f16:	4798      	blx	r3
				status_code =
    4f18:	231d      	movs	r3, #29
    4f1a:	18fc      	adds	r4, r7, r3
    4f1c:	231f      	movs	r3, #31
    4f1e:	18fb      	adds	r3, r7, r3
    4f20:	7819      	ldrb	r1, [r3, #0]
    4f22:	230a      	movs	r3, #10
    4f24:	18fa      	adds	r2, r7, r3
    4f26:	231e      	movs	r3, #30
    4f28:	18fb      	adds	r3, r7, r3
    4f2a:	781b      	ldrb	r3, [r3, #0]
    4f2c:	9300      	str	r3, [sp, #0]
    4f2e:	000b      	movs	r3, r1
    4f30:	0001      	movs	r1, r0
    4f32:	0028      	movs	r0, r5
    4f34:	4d48      	ldr	r5, [pc, #288]	; (5058 <_usart_set_config+0x2d0>)
    4f36:	47a8      	blx	r5
    4f38:	0003      	movs	r3, r0
    4f3a:	7023      	strb	r3, [r4, #0]
			break;
    4f3c:	e000      	b.n	4f40 <_usart_set_config+0x1b8>
			break;
    4f3e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4f40:	231d      	movs	r3, #29
    4f42:	18fb      	adds	r3, r7, r3
    4f44:	781b      	ldrb	r3, [r3, #0]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d003      	beq.n	4f52 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    4f4a:	231d      	movs	r3, #29
    4f4c:	18fb      	adds	r3, r7, r3
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	e077      	b.n	5042 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4f52:	683b      	ldr	r3, [r7, #0]
    4f54:	7e5b      	ldrb	r3, [r3, #25]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d003      	beq.n	4f62 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4f5a:	683b      	ldr	r3, [r7, #0]
    4f5c:	7e9a      	ldrb	r2, [r3, #26]
    4f5e:	69bb      	ldr	r3, [r7, #24]
    4f60:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	0018      	movs	r0, r3
    4f66:	4b3d      	ldr	r3, [pc, #244]	; (505c <_usart_set_config+0x2d4>)
    4f68:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4f6a:	230a      	movs	r3, #10
    4f6c:	18fb      	adds	r3, r7, r3
    4f6e:	881a      	ldrh	r2, [r3, #0]
    4f70:	69bb      	ldr	r3, [r7, #24]
    4f72:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4f76:	68fb      	ldr	r3, [r7, #12]
    4f78:	4313      	orrs	r3, r2
    4f7a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4f7c:	683b      	ldr	r3, [r7, #0]
    4f7e:	2227      	movs	r2, #39	; 0x27
    4f80:	5c9b      	ldrb	r3, [r3, r2]
    4f82:	2201      	movs	r2, #1
    4f84:	4053      	eors	r3, r2
    4f86:	b2db      	uxtb	r3, r3
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d003      	beq.n	4f94 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f8e:	2204      	movs	r2, #4
    4f90:	4313      	orrs	r3, r2
    4f92:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4f94:	683b      	ldr	r3, [r7, #0]
    4f96:	7e5b      	ldrb	r3, [r3, #25]
    4f98:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4f9a:	683b      	ldr	r3, [r7, #0]
    4f9c:	7f1b      	ldrb	r3, [r3, #28]
    4f9e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4fa0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4fa2:	683b      	ldr	r3, [r7, #0]
    4fa4:	7f5b      	ldrb	r3, [r3, #29]
    4fa6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4fa8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4faa:	683b      	ldr	r3, [r7, #0]
    4fac:	2124      	movs	r1, #36	; 0x24
    4fae:	5c5b      	ldrb	r3, [r3, r1]
    4fb0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4fb2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4fb4:	683b      	ldr	r3, [r7, #0]
    4fb6:	2125      	movs	r1, #37	; 0x25
    4fb8:	5c5b      	ldrb	r3, [r3, r1]
    4fba:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4fbc:	4313      	orrs	r3, r2
	ctrlb =  
    4fbe:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    4fc0:	683b      	ldr	r3, [r7, #0]
    4fc2:	7a9b      	ldrb	r3, [r3, #10]
    4fc4:	001a      	movs	r2, r3
    4fc6:	6a3b      	ldr	r3, [r7, #32]
    4fc8:	4313      	orrs	r3, r2
    4fca:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    4fcc:	683b      	ldr	r3, [r7, #0]
    4fce:	7adb      	ldrb	r3, [r3, #11]
    4fd0:	001a      	movs	r2, r3
    4fd2:	6a3b      	ldr	r3, [r7, #32]
    4fd4:	4313      	orrs	r3, r2
    4fd6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4fd8:	683b      	ldr	r3, [r7, #0]
    4fda:	891b      	ldrh	r3, [r3, #8]
    4fdc:	2bff      	cmp	r3, #255	; 0xff
    4fde:	d00b      	beq.n	4ff8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4fe2:	2280      	movs	r2, #128	; 0x80
    4fe4:	0452      	lsls	r2, r2, #17
    4fe6:	4313      	orrs	r3, r2
    4fe8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    4fea:	683b      	ldr	r3, [r7, #0]
    4fec:	891b      	ldrh	r3, [r3, #8]
    4fee:	001a      	movs	r2, r3
    4ff0:	6a3b      	ldr	r3, [r7, #32]
    4ff2:	4313      	orrs	r3, r2
    4ff4:	623b      	str	r3, [r7, #32]
    4ff6:	e008      	b.n	500a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4ff8:	683b      	ldr	r3, [r7, #0]
    4ffa:	7edb      	ldrb	r3, [r3, #27]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d004      	beq.n	500a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5002:	2280      	movs	r2, #128	; 0x80
    5004:	04d2      	lsls	r2, r2, #19
    5006:	4313      	orrs	r3, r2
    5008:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    500a:	683b      	ldr	r3, [r7, #0]
    500c:	222c      	movs	r2, #44	; 0x2c
    500e:	5c9b      	ldrb	r3, [r3, r2]
    5010:	2b00      	cmp	r3, #0
    5012:	d103      	bne.n	501c <_usart_set_config+0x294>
    5014:	4b12      	ldr	r3, [pc, #72]	; (5060 <_usart_set_config+0x2d8>)
    5016:	4798      	blx	r3
    5018:	1e03      	subs	r3, r0, #0
    501a:	d003      	beq.n	5024 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    501e:	2280      	movs	r2, #128	; 0x80
    5020:	4313      	orrs	r3, r2
    5022:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5024:	687b      	ldr	r3, [r7, #4]
    5026:	0018      	movs	r0, r3
    5028:	4b0c      	ldr	r3, [pc, #48]	; (505c <_usart_set_config+0x2d4>)
    502a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    502c:	69bb      	ldr	r3, [r7, #24]
    502e:	6a3a      	ldr	r2, [r7, #32]
    5030:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5032:	687b      	ldr	r3, [r7, #4]
    5034:	0018      	movs	r0, r3
    5036:	4b09      	ldr	r3, [pc, #36]	; (505c <_usart_set_config+0x2d4>)
    5038:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    503a:	69bb      	ldr	r3, [r7, #24]
    503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    503e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5040:	2300      	movs	r3, #0
}
    5042:	0018      	movs	r0, r3
    5044:	46bd      	mov	sp, r7
    5046:	b00a      	add	sp, #40	; 0x28
    5048:	bdb0      	pop	{r4, r5, r7, pc}
    504a:	46c0      	nop			; (mov r8, r8)
    504c:	00003af1 	.word	0x00003af1
    5050:	00006729 	.word	0x00006729
    5054:	0000366b 	.word	0x0000366b
    5058:	000036e9 	.word	0x000036e9
    505c:	00004d65 	.word	0x00004d65
    5060:	00004d25 	.word	0x00004d25

00005064 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5064:	b590      	push	{r4, r7, lr}
    5066:	b093      	sub	sp, #76	; 0x4c
    5068:	af00      	add	r7, sp, #0
    506a:	60f8      	str	r0, [r7, #12]
    506c:	60b9      	str	r1, [r7, #8]
    506e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5070:	233b      	movs	r3, #59	; 0x3b
    5072:	18fb      	adds	r3, r7, r3
    5074:	2200      	movs	r2, #0
    5076:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5078:	68fb      	ldr	r3, [r7, #12]
    507a:	68ba      	ldr	r2, [r7, #8]
    507c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    507e:	68fb      	ldr	r3, [r7, #12]
    5080:	681b      	ldr	r3, [r3, #0]
    5082:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5084:	68fb      	ldr	r3, [r7, #12]
    5086:	681b      	ldr	r3, [r3, #0]
    5088:	0018      	movs	r0, r3
    508a:	4b86      	ldr	r3, [pc, #536]	; (52a4 <usart_init+0x240>)
    508c:	4798      	blx	r3
    508e:	0003      	movs	r3, r0
    5090:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5094:	3302      	adds	r3, #2
    5096:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    509a:	3314      	adds	r3, #20
    509c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	2201      	movs	r2, #1
    50a4:	4013      	ands	r3, r2
    50a6:	d001      	beq.n	50ac <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    50a8:	2305      	movs	r3, #5
    50aa:	e0f6      	b.n	529a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    50ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50ae:	681b      	ldr	r3, [r3, #0]
    50b0:	2202      	movs	r2, #2
    50b2:	4013      	ands	r3, r2
    50b4:	d001      	beq.n	50ba <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    50b6:	231c      	movs	r3, #28
    50b8:	e0ef      	b.n	529a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    50ba:	2201      	movs	r2, #1
    50bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50be:	409a      	lsls	r2, r3
    50c0:	0013      	movs	r3, r2
    50c2:	0019      	movs	r1, r3
    50c4:	2002      	movs	r0, #2
    50c6:	4b78      	ldr	r3, [pc, #480]	; (52a8 <usart_init+0x244>)
    50c8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    50ca:	2324      	movs	r3, #36	; 0x24
    50cc:	18fb      	adds	r3, r7, r3
    50ce:	0018      	movs	r0, r3
    50d0:	4b76      	ldr	r3, [pc, #472]	; (52ac <usart_init+0x248>)
    50d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    50d4:	687b      	ldr	r3, [r7, #4]
    50d6:	222d      	movs	r2, #45	; 0x2d
    50d8:	5c9a      	ldrb	r2, [r3, r2]
    50da:	2324      	movs	r3, #36	; 0x24
    50dc:	18fb      	adds	r3, r7, r3
    50de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    50e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50e2:	b2db      	uxtb	r3, r3
    50e4:	2224      	movs	r2, #36	; 0x24
    50e6:	18ba      	adds	r2, r7, r2
    50e8:	0011      	movs	r1, r2
    50ea:	0018      	movs	r0, r3
    50ec:	4b70      	ldr	r3, [pc, #448]	; (52b0 <usart_init+0x24c>)
    50ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    50f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50f2:	b2db      	uxtb	r3, r3
    50f4:	0018      	movs	r0, r3
    50f6:	4b6f      	ldr	r3, [pc, #444]	; (52b4 <usart_init+0x250>)
    50f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	222d      	movs	r2, #45	; 0x2d
    50fe:	5c9b      	ldrb	r3, [r3, r2]
    5100:	2100      	movs	r1, #0
    5102:	0018      	movs	r0, r3
    5104:	4b6c      	ldr	r3, [pc, #432]	; (52b8 <usart_init+0x254>)
    5106:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	7ada      	ldrb	r2, [r3, #11]
    510c:	68fb      	ldr	r3, [r7, #12]
    510e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5110:	687b      	ldr	r3, [r7, #4]
    5112:	2224      	movs	r2, #36	; 0x24
    5114:	5c9a      	ldrb	r2, [r3, r2]
    5116:	68fb      	ldr	r3, [r7, #12]
    5118:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	2225      	movs	r2, #37	; 0x25
    511e:	5c9a      	ldrb	r2, [r3, r2]
    5120:	68fb      	ldr	r3, [r7, #12]
    5122:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5124:	687b      	ldr	r3, [r7, #4]
    5126:	7eda      	ldrb	r2, [r3, #27]
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    512c:	687b      	ldr	r3, [r7, #4]
    512e:	7f1a      	ldrb	r2, [r3, #28]
    5130:	68fb      	ldr	r3, [r7, #12]
    5132:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5134:	233b      	movs	r3, #59	; 0x3b
    5136:	18fc      	adds	r4, r7, r3
    5138:	687a      	ldr	r2, [r7, #4]
    513a:	68fb      	ldr	r3, [r7, #12]
    513c:	0011      	movs	r1, r2
    513e:	0018      	movs	r0, r3
    5140:	4b5e      	ldr	r3, [pc, #376]	; (52bc <usart_init+0x258>)
    5142:	4798      	blx	r3
    5144:	0003      	movs	r3, r0
    5146:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5148:	233b      	movs	r3, #59	; 0x3b
    514a:	18fb      	adds	r3, r7, r3
    514c:	781b      	ldrb	r3, [r3, #0]
    514e:	2b00      	cmp	r3, #0
    5150:	d003      	beq.n	515a <usart_init+0xf6>
		return status_code;
    5152:	233b      	movs	r3, #59	; 0x3b
    5154:	18fb      	adds	r3, r7, r3
    5156:	781b      	ldrb	r3, [r3, #0]
    5158:	e09f      	b.n	529a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    515a:	2320      	movs	r3, #32
    515c:	18fb      	adds	r3, r7, r3
    515e:	0018      	movs	r0, r3
    5160:	4b57      	ldr	r3, [pc, #348]	; (52c0 <usart_init+0x25c>)
    5162:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5164:	2320      	movs	r3, #32
    5166:	18fb      	adds	r3, r7, r3
    5168:	2200      	movs	r2, #0
    516a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    516c:	2320      	movs	r3, #32
    516e:	18fb      	adds	r3, r7, r3
    5170:	2200      	movs	r2, #0
    5172:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5178:	2310      	movs	r3, #16
    517a:	18fb      	adds	r3, r7, r3
    517c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    5182:	2310      	movs	r3, #16
    5184:	18fb      	adds	r3, r7, r3
    5186:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5188:	687b      	ldr	r3, [r7, #4]
    518a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    518c:	2310      	movs	r3, #16
    518e:	18fb      	adds	r3, r7, r3
    5190:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    5192:	687b      	ldr	r3, [r7, #4]
    5194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5196:	2310      	movs	r3, #16
    5198:	18fb      	adds	r3, r7, r3
    519a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    519c:	2347      	movs	r3, #71	; 0x47
    519e:	18fb      	adds	r3, r7, r3
    51a0:	2200      	movs	r2, #0
    51a2:	701a      	strb	r2, [r3, #0]
    51a4:	e02c      	b.n	5200 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    51a6:	2347      	movs	r3, #71	; 0x47
    51a8:	18fb      	adds	r3, r7, r3
    51aa:	781a      	ldrb	r2, [r3, #0]
    51ac:	2310      	movs	r3, #16
    51ae:	18fb      	adds	r3, r7, r3
    51b0:	0092      	lsls	r2, r2, #2
    51b2:	58d3      	ldr	r3, [r2, r3]
    51b4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    51b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51b8:	2b00      	cmp	r3, #0
    51ba:	d109      	bne.n	51d0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    51bc:	2347      	movs	r3, #71	; 0x47
    51be:	18fb      	adds	r3, r7, r3
    51c0:	781a      	ldrb	r2, [r3, #0]
    51c2:	68bb      	ldr	r3, [r7, #8]
    51c4:	0011      	movs	r1, r2
    51c6:	0018      	movs	r0, r3
    51c8:	4b3e      	ldr	r3, [pc, #248]	; (52c4 <usart_init+0x260>)
    51ca:	4798      	blx	r3
    51cc:	0003      	movs	r3, r0
    51ce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    51d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51d2:	3301      	adds	r3, #1
    51d4:	d00d      	beq.n	51f2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    51d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51d8:	b2da      	uxtb	r2, r3
    51da:	2320      	movs	r3, #32
    51dc:	18fb      	adds	r3, r7, r3
    51de:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    51e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51e2:	0c1b      	lsrs	r3, r3, #16
    51e4:	b2db      	uxtb	r3, r3
    51e6:	2220      	movs	r2, #32
    51e8:	18ba      	adds	r2, r7, r2
    51ea:	0011      	movs	r1, r2
    51ec:	0018      	movs	r0, r3
    51ee:	4b36      	ldr	r3, [pc, #216]	; (52c8 <usart_init+0x264>)
    51f0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    51f2:	2347      	movs	r3, #71	; 0x47
    51f4:	18fb      	adds	r3, r7, r3
    51f6:	781a      	ldrb	r2, [r3, #0]
    51f8:	2347      	movs	r3, #71	; 0x47
    51fa:	18fb      	adds	r3, r7, r3
    51fc:	3201      	adds	r2, #1
    51fe:	701a      	strb	r2, [r3, #0]
    5200:	2347      	movs	r3, #71	; 0x47
    5202:	18fb      	adds	r3, r7, r3
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	2b03      	cmp	r3, #3
    5208:	d9cd      	bls.n	51a6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    520a:	2300      	movs	r3, #0
    520c:	63fb      	str	r3, [r7, #60]	; 0x3c
    520e:	e00a      	b.n	5226 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5210:	68fa      	ldr	r2, [r7, #12]
    5212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5214:	3302      	adds	r3, #2
    5216:	009b      	lsls	r3, r3, #2
    5218:	18d3      	adds	r3, r2, r3
    521a:	3304      	adds	r3, #4
    521c:	2200      	movs	r2, #0
    521e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5222:	3301      	adds	r3, #1
    5224:	63fb      	str	r3, [r7, #60]	; 0x3c
    5226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5228:	2b05      	cmp	r3, #5
    522a:	d9f1      	bls.n	5210 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    522c:	68fb      	ldr	r3, [r7, #12]
    522e:	2200      	movs	r2, #0
    5230:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5232:	68fb      	ldr	r3, [r7, #12]
    5234:	2200      	movs	r2, #0
    5236:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5238:	68fb      	ldr	r3, [r7, #12]
    523a:	2200      	movs	r2, #0
    523c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    523e:	68fb      	ldr	r3, [r7, #12]
    5240:	2200      	movs	r2, #0
    5242:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5244:	68fb      	ldr	r3, [r7, #12]
    5246:	2230      	movs	r2, #48	; 0x30
    5248:	2100      	movs	r1, #0
    524a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	2231      	movs	r2, #49	; 0x31
    5250:	2100      	movs	r1, #0
    5252:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5254:	68fb      	ldr	r3, [r7, #12]
    5256:	2232      	movs	r2, #50	; 0x32
    5258:	2100      	movs	r1, #0
    525a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    525c:	68fb      	ldr	r3, [r7, #12]
    525e:	2233      	movs	r2, #51	; 0x33
    5260:	2100      	movs	r1, #0
    5262:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5264:	68fb      	ldr	r3, [r7, #12]
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	2227      	movs	r2, #39	; 0x27
    526a:	18bc      	adds	r4, r7, r2
    526c:	0018      	movs	r0, r3
    526e:	4b0d      	ldr	r3, [pc, #52]	; (52a4 <usart_init+0x240>)
    5270:	4798      	blx	r3
    5272:	0003      	movs	r3, r0
    5274:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5276:	4a15      	ldr	r2, [pc, #84]	; (52cc <usart_init+0x268>)
    5278:	2327      	movs	r3, #39	; 0x27
    527a:	18fb      	adds	r3, r7, r3
    527c:	781b      	ldrb	r3, [r3, #0]
    527e:	0011      	movs	r1, r2
    5280:	0018      	movs	r0, r3
    5282:	4b13      	ldr	r3, [pc, #76]	; (52d0 <usart_init+0x26c>)
    5284:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5286:	2327      	movs	r3, #39	; 0x27
    5288:	18fb      	adds	r3, r7, r3
    528a:	781a      	ldrb	r2, [r3, #0]
    528c:	4b11      	ldr	r3, [pc, #68]	; (52d4 <usart_init+0x270>)
    528e:	0092      	lsls	r2, r2, #2
    5290:	68f9      	ldr	r1, [r7, #12]
    5292:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5294:	233b      	movs	r3, #59	; 0x3b
    5296:	18fb      	adds	r3, r7, r3
    5298:	781b      	ldrb	r3, [r3, #0]
}
    529a:	0018      	movs	r0, r3
    529c:	46bd      	mov	sp, r7
    529e:	b013      	add	sp, #76	; 0x4c
    52a0:	bd90      	pop	{r4, r7, pc}
    52a2:	46c0      	nop			; (mov r8, r8)
    52a4:	00003af1 	.word	0x00003af1
    52a8:	00004ca1 	.word	0x00004ca1
    52ac:	00004c89 	.word	0x00004c89
    52b0:	00006605 	.word	0x00006605
    52b4:	00006649 	.word	0x00006649
    52b8:	000038a9 	.word	0x000038a9
    52bc:	00004d89 	.word	0x00004d89
    52c0:	00004cfd 	.word	0x00004cfd
    52c4:	00003935 	.word	0x00003935
    52c8:	000068f1 	.word	0x000068f1
    52cc:	00005691 	.word	0x00005691
    52d0:	00003b55 	.word	0x00003b55
    52d4:	200009d4 	.word	0x200009d4

000052d8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    52d8:	b580      	push	{r7, lr}
    52da:	b084      	sub	sp, #16
    52dc:	af00      	add	r7, sp, #0
    52de:	6078      	str	r0, [r7, #4]
    52e0:	000a      	movs	r2, r1
    52e2:	1cbb      	adds	r3, r7, #2
    52e4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	681b      	ldr	r3, [r3, #0]
    52ea:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	79db      	ldrb	r3, [r3, #7]
    52f0:	2201      	movs	r2, #1
    52f2:	4053      	eors	r3, r2
    52f4:	b2db      	uxtb	r3, r3
    52f6:	2b00      	cmp	r3, #0
    52f8:	d001      	beq.n	52fe <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    52fa:	231c      	movs	r3, #28
    52fc:	e017      	b.n	532e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    52fe:	687b      	ldr	r3, [r7, #4]
    5300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5302:	b29b      	uxth	r3, r3
    5304:	2b00      	cmp	r3, #0
    5306:	d001      	beq.n	530c <usart_write_wait+0x34>
		return STATUS_BUSY;
    5308:	2305      	movs	r3, #5
    530a:	e010      	b.n	532e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	0018      	movs	r0, r3
    5310:	4b09      	ldr	r3, [pc, #36]	; (5338 <usart_write_wait+0x60>)
    5312:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5314:	68fb      	ldr	r3, [r7, #12]
    5316:	1cba      	adds	r2, r7, #2
    5318:	8812      	ldrh	r2, [r2, #0]
    531a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    531c:	46c0      	nop			; (mov r8, r8)
    531e:	68fb      	ldr	r3, [r7, #12]
    5320:	7e1b      	ldrb	r3, [r3, #24]
    5322:	b2db      	uxtb	r3, r3
    5324:	001a      	movs	r2, r3
    5326:	2302      	movs	r3, #2
    5328:	4013      	ands	r3, r2
    532a:	d0f8      	beq.n	531e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    532c:	2300      	movs	r3, #0
}
    532e:	0018      	movs	r0, r3
    5330:	46bd      	mov	sp, r7
    5332:	b004      	add	sp, #16
    5334:	bd80      	pop	{r7, pc}
    5336:	46c0      	nop			; (mov r8, r8)
    5338:	00004d65 	.word	0x00004d65

0000533c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    533c:	b580      	push	{r7, lr}
    533e:	b084      	sub	sp, #16
    5340:	af00      	add	r7, sp, #0
    5342:	6078      	str	r0, [r7, #4]
    5344:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5346:	687b      	ldr	r3, [r7, #4]
    5348:	681b      	ldr	r3, [r3, #0]
    534a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	799b      	ldrb	r3, [r3, #6]
    5350:	2201      	movs	r2, #1
    5352:	4053      	eors	r3, r2
    5354:	b2db      	uxtb	r3, r3
    5356:	2b00      	cmp	r3, #0
    5358:	d001      	beq.n	535e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    535a:	231c      	movs	r3, #28
    535c:	e05e      	b.n	541c <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5362:	b29b      	uxth	r3, r3
    5364:	2b00      	cmp	r3, #0
    5366:	d001      	beq.n	536c <usart_read_wait+0x30>
		return STATUS_BUSY;
    5368:	2305      	movs	r3, #5
    536a:	e057      	b.n	541c <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    536c:	68fb      	ldr	r3, [r7, #12]
    536e:	7e1b      	ldrb	r3, [r3, #24]
    5370:	b2db      	uxtb	r3, r3
    5372:	001a      	movs	r2, r3
    5374:	2304      	movs	r3, #4
    5376:	4013      	ands	r3, r2
    5378:	d101      	bne.n	537e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    537a:	2305      	movs	r3, #5
    537c:	e04e      	b.n	541c <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    537e:	687b      	ldr	r3, [r7, #4]
    5380:	0018      	movs	r0, r3
    5382:	4b28      	ldr	r3, [pc, #160]	; (5424 <usart_read_wait+0xe8>)
    5384:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5386:	68fb      	ldr	r3, [r7, #12]
    5388:	8b5b      	ldrh	r3, [r3, #26]
    538a:	b29b      	uxth	r3, r3
    538c:	b2da      	uxtb	r2, r3
    538e:	230b      	movs	r3, #11
    5390:	18fb      	adds	r3, r7, r3
    5392:	213f      	movs	r1, #63	; 0x3f
    5394:	400a      	ands	r2, r1
    5396:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5398:	230b      	movs	r3, #11
    539a:	18fb      	adds	r3, r7, r3
    539c:	781b      	ldrb	r3, [r3, #0]
    539e:	2b00      	cmp	r3, #0
    53a0:	d036      	beq.n	5410 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    53a2:	230b      	movs	r3, #11
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	781b      	ldrb	r3, [r3, #0]
    53a8:	2202      	movs	r2, #2
    53aa:	4013      	ands	r3, r2
    53ac:	d004      	beq.n	53b8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	2202      	movs	r2, #2
    53b2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    53b4:	231a      	movs	r3, #26
    53b6:	e031      	b.n	541c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    53b8:	230b      	movs	r3, #11
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	2204      	movs	r2, #4
    53c0:	4013      	ands	r3, r2
    53c2:	d004      	beq.n	53ce <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	2204      	movs	r2, #4
    53c8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    53ca:	231e      	movs	r3, #30
    53cc:	e026      	b.n	541c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    53ce:	230b      	movs	r3, #11
    53d0:	18fb      	adds	r3, r7, r3
    53d2:	781b      	ldrb	r3, [r3, #0]
    53d4:	2201      	movs	r2, #1
    53d6:	4013      	ands	r3, r2
    53d8:	d004      	beq.n	53e4 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    53da:	68fb      	ldr	r3, [r7, #12]
    53dc:	2201      	movs	r2, #1
    53de:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    53e0:	2313      	movs	r3, #19
    53e2:	e01b      	b.n	541c <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    53e4:	230b      	movs	r3, #11
    53e6:	18fb      	adds	r3, r7, r3
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	2210      	movs	r2, #16
    53ec:	4013      	ands	r3, r2
    53ee:	d004      	beq.n	53fa <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    53f0:	68fb      	ldr	r3, [r7, #12]
    53f2:	2210      	movs	r2, #16
    53f4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    53f6:	2342      	movs	r3, #66	; 0x42
    53f8:	e010      	b.n	541c <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    53fa:	230b      	movs	r3, #11
    53fc:	18fb      	adds	r3, r7, r3
    53fe:	781b      	ldrb	r3, [r3, #0]
    5400:	2220      	movs	r2, #32
    5402:	4013      	ands	r3, r2
    5404:	d004      	beq.n	5410 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	2220      	movs	r2, #32
    540a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    540c:	2341      	movs	r3, #65	; 0x41
    540e:	e005      	b.n	541c <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    5410:	68fb      	ldr	r3, [r7, #12]
    5412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5414:	b29a      	uxth	r2, r3
    5416:	683b      	ldr	r3, [r7, #0]
    5418:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    541a:	2300      	movs	r3, #0
}
    541c:	0018      	movs	r0, r3
    541e:	46bd      	mov	sp, r7
    5420:	b004      	add	sp, #16
    5422:	bd80      	pop	{r7, pc}
    5424:	00004d65 	.word	0x00004d65

00005428 <system_interrupt_enter_critical_section>:
{
    5428:	b580      	push	{r7, lr}
    542a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    542c:	4b02      	ldr	r3, [pc, #8]	; (5438 <system_interrupt_enter_critical_section+0x10>)
    542e:	4798      	blx	r3
}
    5430:	46c0      	nop			; (mov r8, r8)
    5432:	46bd      	mov	sp, r7
    5434:	bd80      	pop	{r7, pc}
    5436:	46c0      	nop			; (mov r8, r8)
    5438:	00002f79 	.word	0x00002f79

0000543c <system_interrupt_leave_critical_section>:
{
    543c:	b580      	push	{r7, lr}
    543e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5440:	4b02      	ldr	r3, [pc, #8]	; (544c <system_interrupt_leave_critical_section+0x10>)
    5442:	4798      	blx	r3
}
    5444:	46c0      	nop			; (mov r8, r8)
    5446:	46bd      	mov	sp, r7
    5448:	bd80      	pop	{r7, pc}
    544a:	46c0      	nop			; (mov r8, r8)
    544c:	00002fcd 	.word	0x00002fcd

00005450 <usart_is_syncing>:
{
    5450:	b580      	push	{r7, lr}
    5452:	b084      	sub	sp, #16
    5454:	af00      	add	r7, sp, #0
    5456:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	681b      	ldr	r3, [r3, #0]
    545c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    545e:	68fb      	ldr	r3, [r7, #12]
    5460:	69db      	ldr	r3, [r3, #28]
    5462:	1e5a      	subs	r2, r3, #1
    5464:	4193      	sbcs	r3, r2
    5466:	b2db      	uxtb	r3, r3
}
    5468:	0018      	movs	r0, r3
    546a:	46bd      	mov	sp, r7
    546c:	b004      	add	sp, #16
    546e:	bd80      	pop	{r7, pc}

00005470 <_usart_wait_for_sync>:
{
    5470:	b580      	push	{r7, lr}
    5472:	b082      	sub	sp, #8
    5474:	af00      	add	r7, sp, #0
    5476:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5478:	46c0      	nop			; (mov r8, r8)
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	0018      	movs	r0, r3
    547e:	4b04      	ldr	r3, [pc, #16]	; (5490 <_usart_wait_for_sync+0x20>)
    5480:	4798      	blx	r3
    5482:	1e03      	subs	r3, r0, #0
    5484:	d1f9      	bne.n	547a <_usart_wait_for_sync+0xa>
}
    5486:	46c0      	nop			; (mov r8, r8)
    5488:	46bd      	mov	sp, r7
    548a:	b002      	add	sp, #8
    548c:	bd80      	pop	{r7, pc}
    548e:	46c0      	nop			; (mov r8, r8)
    5490:	00005451 	.word	0x00005451

00005494 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5494:	b580      	push	{r7, lr}
    5496:	b086      	sub	sp, #24
    5498:	af00      	add	r7, sp, #0
    549a:	60f8      	str	r0, [r7, #12]
    549c:	60b9      	str	r1, [r7, #8]
    549e:	1dbb      	adds	r3, r7, #6
    54a0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54a2:	68fb      	ldr	r3, [r7, #12]
    54a4:	681b      	ldr	r3, [r3, #0]
    54a6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    54a8:	4b0f      	ldr	r3, [pc, #60]	; (54e8 <_usart_write_buffer+0x54>)
    54aa:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    54ac:	68fb      	ldr	r3, [r7, #12]
    54ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    54b0:	b29b      	uxth	r3, r3
    54b2:	2b00      	cmp	r3, #0
    54b4:	d003      	beq.n	54be <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    54b6:	4b0d      	ldr	r3, [pc, #52]	; (54ec <_usart_write_buffer+0x58>)
    54b8:	4798      	blx	r3
		return STATUS_BUSY;
    54ba:	2305      	movs	r3, #5
    54bc:	e010      	b.n	54e0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    54be:	68fb      	ldr	r3, [r7, #12]
    54c0:	1dba      	adds	r2, r7, #6
    54c2:	8812      	ldrh	r2, [r2, #0]
    54c4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    54c6:	4b09      	ldr	r3, [pc, #36]	; (54ec <_usart_write_buffer+0x58>)
    54c8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    54ca:	68fb      	ldr	r3, [r7, #12]
    54cc:	68ba      	ldr	r2, [r7, #8]
    54ce:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    54d0:	68fb      	ldr	r3, [r7, #12]
    54d2:	2233      	movs	r2, #51	; 0x33
    54d4:	2105      	movs	r1, #5
    54d6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    54d8:	697b      	ldr	r3, [r7, #20]
    54da:	2201      	movs	r2, #1
    54dc:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    54de:	2300      	movs	r3, #0
}
    54e0:	0018      	movs	r0, r3
    54e2:	46bd      	mov	sp, r7
    54e4:	b006      	add	sp, #24
    54e6:	bd80      	pop	{r7, pc}
    54e8:	00005429 	.word	0x00005429
    54ec:	0000543d 	.word	0x0000543d

000054f0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    54f0:	b580      	push	{r7, lr}
    54f2:	b086      	sub	sp, #24
    54f4:	af00      	add	r7, sp, #0
    54f6:	60f8      	str	r0, [r7, #12]
    54f8:	60b9      	str	r1, [r7, #8]
    54fa:	1dbb      	adds	r3, r7, #6
    54fc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5504:	4b16      	ldr	r3, [pc, #88]	; (5560 <_usart_read_buffer+0x70>)
    5506:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5508:	68fb      	ldr	r3, [r7, #12]
    550a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    550c:	b29b      	uxth	r3, r3
    550e:	2b00      	cmp	r3, #0
    5510:	d003      	beq.n	551a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5512:	4b14      	ldr	r3, [pc, #80]	; (5564 <_usart_read_buffer+0x74>)
    5514:	4798      	blx	r3
		return STATUS_BUSY;
    5516:	2305      	movs	r3, #5
    5518:	e01e      	b.n	5558 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    551a:	68fb      	ldr	r3, [r7, #12]
    551c:	1dba      	adds	r2, r7, #6
    551e:	8812      	ldrh	r2, [r2, #0]
    5520:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5522:	4b10      	ldr	r3, [pc, #64]	; (5564 <_usart_read_buffer+0x74>)
    5524:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5526:	68fb      	ldr	r3, [r7, #12]
    5528:	68ba      	ldr	r2, [r7, #8]
    552a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    552c:	68fb      	ldr	r3, [r7, #12]
    552e:	2232      	movs	r2, #50	; 0x32
    5530:	2105      	movs	r1, #5
    5532:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5534:	697b      	ldr	r3, [r7, #20]
    5536:	2204      	movs	r2, #4
    5538:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    553a:	68fb      	ldr	r3, [r7, #12]
    553c:	7a1b      	ldrb	r3, [r3, #8]
    553e:	2b00      	cmp	r3, #0
    5540:	d002      	beq.n	5548 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5542:	697b      	ldr	r3, [r7, #20]
    5544:	2220      	movs	r2, #32
    5546:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5548:	68fb      	ldr	r3, [r7, #12]
    554a:	7a5b      	ldrb	r3, [r3, #9]
    554c:	2b00      	cmp	r3, #0
    554e:	d002      	beq.n	5556 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5550:	697b      	ldr	r3, [r7, #20]
    5552:	2208      	movs	r2, #8
    5554:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5556:	2300      	movs	r3, #0
}
    5558:	0018      	movs	r0, r3
    555a:	46bd      	mov	sp, r7
    555c:	b006      	add	sp, #24
    555e:	bd80      	pop	{r7, pc}
    5560:	00005429 	.word	0x00005429
    5564:	0000543d 	.word	0x0000543d

00005568 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5568:	b580      	push	{r7, lr}
    556a:	b084      	sub	sp, #16
    556c:	af00      	add	r7, sp, #0
    556e:	60f8      	str	r0, [r7, #12]
    5570:	60b9      	str	r1, [r7, #8]
    5572:	1dfb      	adds	r3, r7, #7
    5574:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5576:	1dfb      	adds	r3, r7, #7
    5578:	781b      	ldrb	r3, [r3, #0]
    557a:	68fa      	ldr	r2, [r7, #12]
    557c:	3302      	adds	r3, #2
    557e:	009b      	lsls	r3, r3, #2
    5580:	18d3      	adds	r3, r2, r3
    5582:	3304      	adds	r3, #4
    5584:	68ba      	ldr	r2, [r7, #8]
    5586:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	2230      	movs	r2, #48	; 0x30
    558c:	5c9b      	ldrb	r3, [r3, r2]
    558e:	b25a      	sxtb	r2, r3
    5590:	1dfb      	adds	r3, r7, #7
    5592:	781b      	ldrb	r3, [r3, #0]
    5594:	2101      	movs	r1, #1
    5596:	4099      	lsls	r1, r3
    5598:	000b      	movs	r3, r1
    559a:	b25b      	sxtb	r3, r3
    559c:	4313      	orrs	r3, r2
    559e:	b25b      	sxtb	r3, r3
    55a0:	b2d9      	uxtb	r1, r3
    55a2:	68fb      	ldr	r3, [r7, #12]
    55a4:	2230      	movs	r2, #48	; 0x30
    55a6:	5499      	strb	r1, [r3, r2]
}
    55a8:	46c0      	nop			; (mov r8, r8)
    55aa:	46bd      	mov	sp, r7
    55ac:	b004      	add	sp, #16
    55ae:	bd80      	pop	{r7, pc}

000055b0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    55b0:	b580      	push	{r7, lr}
    55b2:	b084      	sub	sp, #16
    55b4:	af00      	add	r7, sp, #0
    55b6:	60f8      	str	r0, [r7, #12]
    55b8:	60b9      	str	r1, [r7, #8]
    55ba:	1dbb      	adds	r3, r7, #6
    55bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    55be:	1dbb      	adds	r3, r7, #6
    55c0:	881b      	ldrh	r3, [r3, #0]
    55c2:	2b00      	cmp	r3, #0
    55c4:	d101      	bne.n	55ca <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    55c6:	2317      	movs	r3, #23
    55c8:	e010      	b.n	55ec <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    55ca:	68fb      	ldr	r3, [r7, #12]
    55cc:	79db      	ldrb	r3, [r3, #7]
    55ce:	2201      	movs	r2, #1
    55d0:	4053      	eors	r3, r2
    55d2:	b2db      	uxtb	r3, r3
    55d4:	2b00      	cmp	r3, #0
    55d6:	d001      	beq.n	55dc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    55d8:	231c      	movs	r3, #28
    55da:	e007      	b.n	55ec <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    55dc:	1dbb      	adds	r3, r7, #6
    55de:	881a      	ldrh	r2, [r3, #0]
    55e0:	68b9      	ldr	r1, [r7, #8]
    55e2:	68fb      	ldr	r3, [r7, #12]
    55e4:	0018      	movs	r0, r3
    55e6:	4b03      	ldr	r3, [pc, #12]	; (55f4 <usart_write_buffer_job+0x44>)
    55e8:	4798      	blx	r3
    55ea:	0003      	movs	r3, r0
}
    55ec:	0018      	movs	r0, r3
    55ee:	46bd      	mov	sp, r7
    55f0:	b004      	add	sp, #16
    55f2:	bd80      	pop	{r7, pc}
    55f4:	00005495 	.word	0x00005495

000055f8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b084      	sub	sp, #16
    55fc:	af00      	add	r7, sp, #0
    55fe:	60f8      	str	r0, [r7, #12]
    5600:	60b9      	str	r1, [r7, #8]
    5602:	1dbb      	adds	r3, r7, #6
    5604:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5606:	1dbb      	adds	r3, r7, #6
    5608:	881b      	ldrh	r3, [r3, #0]
    560a:	2b00      	cmp	r3, #0
    560c:	d101      	bne.n	5612 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    560e:	2317      	movs	r3, #23
    5610:	e010      	b.n	5634 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5612:	68fb      	ldr	r3, [r7, #12]
    5614:	799b      	ldrb	r3, [r3, #6]
    5616:	2201      	movs	r2, #1
    5618:	4053      	eors	r3, r2
    561a:	b2db      	uxtb	r3, r3
    561c:	2b00      	cmp	r3, #0
    561e:	d001      	beq.n	5624 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5620:	231c      	movs	r3, #28
    5622:	e007      	b.n	5634 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5624:	1dbb      	adds	r3, r7, #6
    5626:	881a      	ldrh	r2, [r3, #0]
    5628:	68b9      	ldr	r1, [r7, #8]
    562a:	68fb      	ldr	r3, [r7, #12]
    562c:	0018      	movs	r0, r3
    562e:	4b03      	ldr	r3, [pc, #12]	; (563c <usart_read_buffer_job+0x44>)
    5630:	4798      	blx	r3
    5632:	0003      	movs	r3, r0
}
    5634:	0018      	movs	r0, r3
    5636:	46bd      	mov	sp, r7
    5638:	b004      	add	sp, #16
    563a:	bd80      	pop	{r7, pc}
    563c:	000054f1 	.word	0x000054f1

00005640 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5640:	b580      	push	{r7, lr}
    5642:	b084      	sub	sp, #16
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
    5648:	000a      	movs	r2, r1
    564a:	1cfb      	adds	r3, r7, #3
    564c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    564e:	1cfb      	adds	r3, r7, #3
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	2b00      	cmp	r3, #0
    5654:	d002      	beq.n	565c <usart_get_job_status+0x1c>
    5656:	2b01      	cmp	r3, #1
    5658:	d007      	beq.n	566a <usart_get_job_status+0x2a>
    565a:	e00d      	b.n	5678 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    565c:	230f      	movs	r3, #15
    565e:	18fb      	adds	r3, r7, r3
    5660:	687a      	ldr	r2, [r7, #4]
    5662:	2132      	movs	r1, #50	; 0x32
    5664:	5c52      	ldrb	r2, [r2, r1]
    5666:	701a      	strb	r2, [r3, #0]
			break;
    5668:	e00b      	b.n	5682 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    566a:	230f      	movs	r3, #15
    566c:	18fb      	adds	r3, r7, r3
    566e:	687a      	ldr	r2, [r7, #4]
    5670:	2133      	movs	r1, #51	; 0x33
    5672:	5c52      	ldrb	r2, [r2, r1]
    5674:	701a      	strb	r2, [r3, #0]
			break;
    5676:	e004      	b.n	5682 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5678:	230f      	movs	r3, #15
    567a:	18fb      	adds	r3, r7, r3
    567c:	2217      	movs	r2, #23
    567e:	701a      	strb	r2, [r3, #0]
			break;
    5680:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5682:	230f      	movs	r3, #15
    5684:	18fb      	adds	r3, r7, r3
    5686:	781b      	ldrb	r3, [r3, #0]
}
    5688:	0018      	movs	r0, r3
    568a:	46bd      	mov	sp, r7
    568c:	b004      	add	sp, #16
    568e:	bd80      	pop	{r7, pc}

00005690 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5690:	b580      	push	{r7, lr}
    5692:	b088      	sub	sp, #32
    5694:	af00      	add	r7, sp, #0
    5696:	0002      	movs	r2, r0
    5698:	1dfb      	adds	r3, r7, #7
    569a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    569c:	1dfb      	adds	r3, r7, #7
    569e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    56a0:	4ba3      	ldr	r3, [pc, #652]	; (5930 <_usart_interrupt_handler+0x2a0>)
    56a2:	0092      	lsls	r2, r2, #2
    56a4:	58d3      	ldr	r3, [r2, r3]
    56a6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    56a8:	69bb      	ldr	r3, [r7, #24]
    56aa:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    56ac:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    56ae:	69bb      	ldr	r3, [r7, #24]
    56b0:	0018      	movs	r0, r3
    56b2:	4ba0      	ldr	r3, [pc, #640]	; (5934 <_usart_interrupt_handler+0x2a4>)
    56b4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    56b6:	697b      	ldr	r3, [r7, #20]
    56b8:	7e1b      	ldrb	r3, [r3, #24]
    56ba:	b2da      	uxtb	r2, r3
    56bc:	2312      	movs	r3, #18
    56be:	18fb      	adds	r3, r7, r3
    56c0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    56c2:	697b      	ldr	r3, [r7, #20]
    56c4:	7d9b      	ldrb	r3, [r3, #22]
    56c6:	b2db      	uxtb	r3, r3
    56c8:	b29a      	uxth	r2, r3
    56ca:	2312      	movs	r3, #18
    56cc:	18fb      	adds	r3, r7, r3
    56ce:	2112      	movs	r1, #18
    56d0:	1879      	adds	r1, r7, r1
    56d2:	8809      	ldrh	r1, [r1, #0]
    56d4:	400a      	ands	r2, r1
    56d6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    56d8:	69bb      	ldr	r3, [r7, #24]
    56da:	2230      	movs	r2, #48	; 0x30
    56dc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    56de:	69ba      	ldr	r2, [r7, #24]
    56e0:	2131      	movs	r1, #49	; 0x31
    56e2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    56e4:	4013      	ands	r3, r2
    56e6:	b2da      	uxtb	r2, r3
    56e8:	2310      	movs	r3, #16
    56ea:	18fb      	adds	r3, r7, r3
    56ec:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    56ee:	2312      	movs	r3, #18
    56f0:	18fb      	adds	r3, r7, r3
    56f2:	881b      	ldrh	r3, [r3, #0]
    56f4:	2201      	movs	r2, #1
    56f6:	4013      	ands	r3, r2
    56f8:	d044      	beq.n	5784 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    56fa:	69bb      	ldr	r3, [r7, #24]
    56fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    56fe:	b29b      	uxth	r3, r3
    5700:	2b00      	cmp	r3, #0
    5702:	d03c      	beq.n	577e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5704:	69bb      	ldr	r3, [r7, #24]
    5706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5708:	781b      	ldrb	r3, [r3, #0]
    570a:	b2da      	uxtb	r2, r3
    570c:	231c      	movs	r3, #28
    570e:	18fb      	adds	r3, r7, r3
    5710:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5712:	69bb      	ldr	r3, [r7, #24]
    5714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5716:	1c5a      	adds	r2, r3, #1
    5718:	69bb      	ldr	r3, [r7, #24]
    571a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    571c:	69bb      	ldr	r3, [r7, #24]
    571e:	795b      	ldrb	r3, [r3, #5]
    5720:	2b01      	cmp	r3, #1
    5722:	d113      	bne.n	574c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5724:	69bb      	ldr	r3, [r7, #24]
    5726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5728:	781b      	ldrb	r3, [r3, #0]
    572a:	b2db      	uxtb	r3, r3
    572c:	021b      	lsls	r3, r3, #8
    572e:	b21a      	sxth	r2, r3
    5730:	231c      	movs	r3, #28
    5732:	18fb      	adds	r3, r7, r3
    5734:	2100      	movs	r1, #0
    5736:	5e5b      	ldrsh	r3, [r3, r1]
    5738:	4313      	orrs	r3, r2
    573a:	b21a      	sxth	r2, r3
    573c:	231c      	movs	r3, #28
    573e:	18fb      	adds	r3, r7, r3
    5740:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5742:	69bb      	ldr	r3, [r7, #24]
    5744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5746:	1c5a      	adds	r2, r3, #1
    5748:	69bb      	ldr	r3, [r7, #24]
    574a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    574c:	231c      	movs	r3, #28
    574e:	18fb      	adds	r3, r7, r3
    5750:	881b      	ldrh	r3, [r3, #0]
    5752:	05db      	lsls	r3, r3, #23
    5754:	0ddb      	lsrs	r3, r3, #23
    5756:	b29a      	uxth	r2, r3
    5758:	697b      	ldr	r3, [r7, #20]
    575a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    575c:	69bb      	ldr	r3, [r7, #24]
    575e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5760:	b29b      	uxth	r3, r3
    5762:	3b01      	subs	r3, #1
    5764:	b29b      	uxth	r3, r3
    5766:	69ba      	ldr	r2, [r7, #24]
    5768:	1c19      	adds	r1, r3, #0
    576a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    576c:	2b00      	cmp	r3, #0
    576e:	d109      	bne.n	5784 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5770:	697b      	ldr	r3, [r7, #20]
    5772:	2201      	movs	r2, #1
    5774:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5776:	697b      	ldr	r3, [r7, #20]
    5778:	2202      	movs	r2, #2
    577a:	759a      	strb	r2, [r3, #22]
    577c:	e002      	b.n	5784 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    577e:	697b      	ldr	r3, [r7, #20]
    5780:	2201      	movs	r2, #1
    5782:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5784:	2312      	movs	r3, #18
    5786:	18fb      	adds	r3, r7, r3
    5788:	881b      	ldrh	r3, [r3, #0]
    578a:	2202      	movs	r2, #2
    578c:	4013      	ands	r3, r2
    578e:	d011      	beq.n	57b4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5790:	697b      	ldr	r3, [r7, #20]
    5792:	2202      	movs	r2, #2
    5794:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5796:	69bb      	ldr	r3, [r7, #24]
    5798:	2233      	movs	r2, #51	; 0x33
    579a:	2100      	movs	r1, #0
    579c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    579e:	2310      	movs	r3, #16
    57a0:	18fb      	adds	r3, r7, r3
    57a2:	881b      	ldrh	r3, [r3, #0]
    57a4:	2201      	movs	r2, #1
    57a6:	4013      	ands	r3, r2
    57a8:	d004      	beq.n	57b4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    57aa:	69bb      	ldr	r3, [r7, #24]
    57ac:	68db      	ldr	r3, [r3, #12]
    57ae:	69ba      	ldr	r2, [r7, #24]
    57b0:	0010      	movs	r0, r2
    57b2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    57b4:	2312      	movs	r3, #18
    57b6:	18fb      	adds	r3, r7, r3
    57b8:	881b      	ldrh	r3, [r3, #0]
    57ba:	2204      	movs	r2, #4
    57bc:	4013      	ands	r3, r2
    57be:	d100      	bne.n	57c2 <_usart_interrupt_handler+0x132>
    57c0:	e0bd      	b.n	593e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    57c2:	69bb      	ldr	r3, [r7, #24]
    57c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    57c6:	b29b      	uxth	r3, r3
    57c8:	2b00      	cmp	r3, #0
    57ca:	d100      	bne.n	57ce <_usart_interrupt_handler+0x13e>
    57cc:	e0b4      	b.n	5938 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    57ce:	697b      	ldr	r3, [r7, #20]
    57d0:	8b5b      	ldrh	r3, [r3, #26]
    57d2:	b29b      	uxth	r3, r3
    57d4:	b2da      	uxtb	r2, r3
    57d6:	231f      	movs	r3, #31
    57d8:	18fb      	adds	r3, r7, r3
    57da:	213f      	movs	r1, #63	; 0x3f
    57dc:	400a      	ands	r2, r1
    57de:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    57e0:	231f      	movs	r3, #31
    57e2:	18fb      	adds	r3, r7, r3
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	2208      	movs	r2, #8
    57e8:	4013      	ands	r3, r2
    57ea:	d007      	beq.n	57fc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    57ec:	231f      	movs	r3, #31
    57ee:	18fb      	adds	r3, r7, r3
    57f0:	221f      	movs	r2, #31
    57f2:	18ba      	adds	r2, r7, r2
    57f4:	7812      	ldrb	r2, [r2, #0]
    57f6:	2108      	movs	r1, #8
    57f8:	438a      	bics	r2, r1
    57fa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    57fc:	231f      	movs	r3, #31
    57fe:	18fb      	adds	r3, r7, r3
    5800:	781b      	ldrb	r3, [r3, #0]
    5802:	2b00      	cmp	r3, #0
    5804:	d050      	beq.n	58a8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5806:	231f      	movs	r3, #31
    5808:	18fb      	adds	r3, r7, r3
    580a:	781b      	ldrb	r3, [r3, #0]
    580c:	2202      	movs	r2, #2
    580e:	4013      	ands	r3, r2
    5810:	d007      	beq.n	5822 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5812:	69bb      	ldr	r3, [r7, #24]
    5814:	2232      	movs	r2, #50	; 0x32
    5816:	211a      	movs	r1, #26
    5818:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    581a:	697b      	ldr	r3, [r7, #20]
    581c:	2202      	movs	r2, #2
    581e:	835a      	strh	r2, [r3, #26]
    5820:	e036      	b.n	5890 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5822:	231f      	movs	r3, #31
    5824:	18fb      	adds	r3, r7, r3
    5826:	781b      	ldrb	r3, [r3, #0]
    5828:	2204      	movs	r2, #4
    582a:	4013      	ands	r3, r2
    582c:	d007      	beq.n	583e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    582e:	69bb      	ldr	r3, [r7, #24]
    5830:	2232      	movs	r2, #50	; 0x32
    5832:	211e      	movs	r1, #30
    5834:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5836:	697b      	ldr	r3, [r7, #20]
    5838:	2204      	movs	r2, #4
    583a:	835a      	strh	r2, [r3, #26]
    583c:	e028      	b.n	5890 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    583e:	231f      	movs	r3, #31
    5840:	18fb      	adds	r3, r7, r3
    5842:	781b      	ldrb	r3, [r3, #0]
    5844:	2201      	movs	r2, #1
    5846:	4013      	ands	r3, r2
    5848:	d007      	beq.n	585a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    584a:	69bb      	ldr	r3, [r7, #24]
    584c:	2232      	movs	r2, #50	; 0x32
    584e:	2113      	movs	r1, #19
    5850:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5852:	697b      	ldr	r3, [r7, #20]
    5854:	2201      	movs	r2, #1
    5856:	835a      	strh	r2, [r3, #26]
    5858:	e01a      	b.n	5890 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    585a:	231f      	movs	r3, #31
    585c:	18fb      	adds	r3, r7, r3
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	2210      	movs	r2, #16
    5862:	4013      	ands	r3, r2
    5864:	d007      	beq.n	5876 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5866:	69bb      	ldr	r3, [r7, #24]
    5868:	2232      	movs	r2, #50	; 0x32
    586a:	2142      	movs	r1, #66	; 0x42
    586c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    586e:	697b      	ldr	r3, [r7, #20]
    5870:	2210      	movs	r2, #16
    5872:	835a      	strh	r2, [r3, #26]
    5874:	e00c      	b.n	5890 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5876:	231f      	movs	r3, #31
    5878:	18fb      	adds	r3, r7, r3
    587a:	781b      	ldrb	r3, [r3, #0]
    587c:	2220      	movs	r2, #32
    587e:	4013      	ands	r3, r2
    5880:	d006      	beq.n	5890 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5882:	69bb      	ldr	r3, [r7, #24]
    5884:	2232      	movs	r2, #50	; 0x32
    5886:	2141      	movs	r1, #65	; 0x41
    5888:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    588a:	697b      	ldr	r3, [r7, #20]
    588c:	2220      	movs	r2, #32
    588e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5890:	2310      	movs	r3, #16
    5892:	18fb      	adds	r3, r7, r3
    5894:	881b      	ldrh	r3, [r3, #0]
    5896:	2204      	movs	r2, #4
    5898:	4013      	ands	r3, r2
				if (callback_status
    589a:	d050      	beq.n	593e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    589c:	69bb      	ldr	r3, [r7, #24]
    589e:	695b      	ldr	r3, [r3, #20]
    58a0:	69ba      	ldr	r2, [r7, #24]
    58a2:	0010      	movs	r0, r2
    58a4:	4798      	blx	r3
    58a6:	e04a      	b.n	593e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    58a8:	697b      	ldr	r3, [r7, #20]
    58aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58ac:	b29a      	uxth	r2, r3
    58ae:	230e      	movs	r3, #14
    58b0:	18fb      	adds	r3, r7, r3
    58b2:	05d2      	lsls	r2, r2, #23
    58b4:	0dd2      	lsrs	r2, r2, #23
    58b6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    58b8:	69bb      	ldr	r3, [r7, #24]
    58ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58bc:	220e      	movs	r2, #14
    58be:	18ba      	adds	r2, r7, r2
    58c0:	8812      	ldrh	r2, [r2, #0]
    58c2:	b2d2      	uxtb	r2, r2
    58c4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    58c6:	69bb      	ldr	r3, [r7, #24]
    58c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58ca:	1c5a      	adds	r2, r3, #1
    58cc:	69bb      	ldr	r3, [r7, #24]
    58ce:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    58d0:	69bb      	ldr	r3, [r7, #24]
    58d2:	795b      	ldrb	r3, [r3, #5]
    58d4:	2b01      	cmp	r3, #1
    58d6:	d10d      	bne.n	58f4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    58d8:	69bb      	ldr	r3, [r7, #24]
    58da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58dc:	220e      	movs	r2, #14
    58de:	18ba      	adds	r2, r7, r2
    58e0:	8812      	ldrh	r2, [r2, #0]
    58e2:	0a12      	lsrs	r2, r2, #8
    58e4:	b292      	uxth	r2, r2
    58e6:	b2d2      	uxtb	r2, r2
    58e8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    58ea:	69bb      	ldr	r3, [r7, #24]
    58ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58ee:	1c5a      	adds	r2, r3, #1
    58f0:	69bb      	ldr	r3, [r7, #24]
    58f2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    58f4:	69bb      	ldr	r3, [r7, #24]
    58f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    58f8:	b29b      	uxth	r3, r3
    58fa:	3b01      	subs	r3, #1
    58fc:	b29b      	uxth	r3, r3
    58fe:	69ba      	ldr	r2, [r7, #24]
    5900:	1c19      	adds	r1, r3, #0
    5902:	8591      	strh	r1, [r2, #44]	; 0x2c
    5904:	2b00      	cmp	r3, #0
    5906:	d11a      	bne.n	593e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5908:	697b      	ldr	r3, [r7, #20]
    590a:	2204      	movs	r2, #4
    590c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    590e:	69bb      	ldr	r3, [r7, #24]
    5910:	2232      	movs	r2, #50	; 0x32
    5912:	2100      	movs	r1, #0
    5914:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5916:	2310      	movs	r3, #16
    5918:	18fb      	adds	r3, r7, r3
    591a:	881b      	ldrh	r3, [r3, #0]
    591c:	2202      	movs	r2, #2
    591e:	4013      	ands	r3, r2
					if (callback_status
    5920:	d00d      	beq.n	593e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5922:	69bb      	ldr	r3, [r7, #24]
    5924:	691b      	ldr	r3, [r3, #16]
    5926:	69ba      	ldr	r2, [r7, #24]
    5928:	0010      	movs	r0, r2
    592a:	4798      	blx	r3
    592c:	e007      	b.n	593e <_usart_interrupt_handler+0x2ae>
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	200009d4 	.word	0x200009d4
    5934:	00005471 	.word	0x00005471
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5938:	697b      	ldr	r3, [r7, #20]
    593a:	2204      	movs	r2, #4
    593c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    593e:	2312      	movs	r3, #18
    5940:	18fb      	adds	r3, r7, r3
    5942:	881b      	ldrh	r3, [r3, #0]
    5944:	2210      	movs	r2, #16
    5946:	4013      	ands	r3, r2
    5948:	d010      	beq.n	596c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    594a:	697b      	ldr	r3, [r7, #20]
    594c:	2210      	movs	r2, #16
    594e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5950:	697b      	ldr	r3, [r7, #20]
    5952:	2210      	movs	r2, #16
    5954:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5956:	2310      	movs	r3, #16
    5958:	18fb      	adds	r3, r7, r3
    595a:	881b      	ldrh	r3, [r3, #0]
    595c:	2210      	movs	r2, #16
    595e:	4013      	ands	r3, r2
    5960:	d004      	beq.n	596c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5962:	69bb      	ldr	r3, [r7, #24]
    5964:	69db      	ldr	r3, [r3, #28]
    5966:	69ba      	ldr	r2, [r7, #24]
    5968:	0010      	movs	r0, r2
    596a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    596c:	2312      	movs	r3, #18
    596e:	18fb      	adds	r3, r7, r3
    5970:	881b      	ldrh	r3, [r3, #0]
    5972:	2220      	movs	r2, #32
    5974:	4013      	ands	r3, r2
    5976:	d010      	beq.n	599a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5978:	697b      	ldr	r3, [r7, #20]
    597a:	2220      	movs	r2, #32
    597c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    597e:	697b      	ldr	r3, [r7, #20]
    5980:	2220      	movs	r2, #32
    5982:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5984:	2310      	movs	r3, #16
    5986:	18fb      	adds	r3, r7, r3
    5988:	881b      	ldrh	r3, [r3, #0]
    598a:	2208      	movs	r2, #8
    598c:	4013      	ands	r3, r2
    598e:	d004      	beq.n	599a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5990:	69bb      	ldr	r3, [r7, #24]
    5992:	699b      	ldr	r3, [r3, #24]
    5994:	69ba      	ldr	r2, [r7, #24]
    5996:	0010      	movs	r0, r2
    5998:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    599a:	2312      	movs	r3, #18
    599c:	18fb      	adds	r3, r7, r3
    599e:	881b      	ldrh	r3, [r3, #0]
    59a0:	2208      	movs	r2, #8
    59a2:	4013      	ands	r3, r2
    59a4:	d010      	beq.n	59c8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    59a6:	697b      	ldr	r3, [r7, #20]
    59a8:	2208      	movs	r2, #8
    59aa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    59ac:	697b      	ldr	r3, [r7, #20]
    59ae:	2208      	movs	r2, #8
    59b0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    59b2:	2310      	movs	r3, #16
    59b4:	18fb      	adds	r3, r7, r3
    59b6:	881b      	ldrh	r3, [r3, #0]
    59b8:	2220      	movs	r2, #32
    59ba:	4013      	ands	r3, r2
    59bc:	d004      	beq.n	59c8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    59be:	69bb      	ldr	r3, [r7, #24]
    59c0:	6a1b      	ldr	r3, [r3, #32]
    59c2:	69ba      	ldr	r2, [r7, #24]
    59c4:	0010      	movs	r0, r2
    59c6:	4798      	blx	r3
		}
	}
#endif
}
    59c8:	46c0      	nop			; (mov r8, r8)
    59ca:	46bd      	mov	sp, r7
    59cc:	b008      	add	sp, #32
    59ce:	bd80      	pop	{r7, pc}

000059d0 <system_gclk_gen_get_config_defaults>:
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b082      	sub	sp, #8
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    59d8:	687b      	ldr	r3, [r7, #4]
    59da:	2201      	movs	r2, #1
    59dc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	2200      	movs	r2, #0
    59e2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    59e4:	687b      	ldr	r3, [r7, #4]
    59e6:	2206      	movs	r2, #6
    59e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	2200      	movs	r2, #0
    59ee:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	2200      	movs	r2, #0
    59f4:	725a      	strb	r2, [r3, #9]
}
    59f6:	46c0      	nop			; (mov r8, r8)
    59f8:	46bd      	mov	sp, r7
    59fa:	b002      	add	sp, #8
    59fc:	bd80      	pop	{r7, pc}

000059fe <system_gclk_chan_get_config_defaults>:
{
    59fe:	b580      	push	{r7, lr}
    5a00:	b082      	sub	sp, #8
    5a02:	af00      	add	r7, sp, #0
    5a04:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	2200      	movs	r2, #0
    5a0a:	701a      	strb	r2, [r3, #0]
}
    5a0c:	46c0      	nop			; (mov r8, r8)
    5a0e:	46bd      	mov	sp, r7
    5a10:	b002      	add	sp, #8
    5a12:	bd80      	pop	{r7, pc}

00005a14 <system_clock_source_xosc32k_get_config_defaults>:
{
    5a14:	b580      	push	{r7, lr}
    5a16:	b082      	sub	sp, #8
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5a1c:	687b      	ldr	r3, [r7, #4]
    5a1e:	2200      	movs	r2, #0
    5a20:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	2204      	movs	r2, #4
    5a26:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	2200      	movs	r2, #0
    5a2c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5a2e:	687b      	ldr	r3, [r7, #4]
    5a30:	2280      	movs	r2, #128	; 0x80
    5a32:	0212      	lsls	r2, r2, #8
    5a34:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	2200      	movs	r2, #0
    5a3a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	2201      	movs	r2, #1
    5a40:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	2200      	movs	r2, #0
    5a46:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	2201      	movs	r2, #1
    5a4c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	2200      	movs	r2, #0
    5a52:	739a      	strb	r2, [r3, #14]
}
    5a54:	46c0      	nop			; (mov r8, r8)
    5a56:	46bd      	mov	sp, r7
    5a58:	b002      	add	sp, #8
    5a5a:	bd80      	pop	{r7, pc}

00005a5c <system_clock_source_osc8m_get_config_defaults>:
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	b082      	sub	sp, #8
    5a60:	af00      	add	r7, sp, #0
    5a62:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	2203      	movs	r2, #3
    5a68:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	2200      	movs	r2, #0
    5a6e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	2201      	movs	r2, #1
    5a74:	709a      	strb	r2, [r3, #2]
}
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	46bd      	mov	sp, r7
    5a7a:	b002      	add	sp, #8
    5a7c:	bd80      	pop	{r7, pc}

00005a7e <system_clock_source_dfll_get_config_defaults>:
{
    5a7e:	b580      	push	{r7, lr}
    5a80:	b082      	sub	sp, #8
    5a82:	af00      	add	r7, sp, #0
    5a84:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	2200      	movs	r2, #0
    5a8a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5a8c:	687b      	ldr	r3, [r7, #4]
    5a8e:	2200      	movs	r2, #0
    5a90:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	2200      	movs	r2, #0
    5a96:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	2200      	movs	r2, #0
    5a9c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	2200      	movs	r2, #0
    5aa2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	2201      	movs	r2, #1
    5aa8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	2207      	movs	r2, #7
    5aae:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	223f      	movs	r2, #63	; 0x3f
    5ab4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	2201      	movs	r2, #1
    5aba:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	2201      	movs	r2, #1
    5ac0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	2206      	movs	r2, #6
    5ac6:	821a      	strh	r2, [r3, #16]
}
    5ac8:	46c0      	nop			; (mov r8, r8)
    5aca:	46bd      	mov	sp, r7
    5acc:	b002      	add	sp, #8
    5ace:	bd80      	pop	{r7, pc}

00005ad0 <system_cpu_clock_set_divider>:
{
    5ad0:	b580      	push	{r7, lr}
    5ad2:	b082      	sub	sp, #8
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	0002      	movs	r2, r0
    5ad8:	1dfb      	adds	r3, r7, #7
    5ada:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5adc:	4a03      	ldr	r2, [pc, #12]	; (5aec <system_cpu_clock_set_divider+0x1c>)
    5ade:	1dfb      	adds	r3, r7, #7
    5ae0:	781b      	ldrb	r3, [r3, #0]
    5ae2:	7213      	strb	r3, [r2, #8]
}
    5ae4:	46c0      	nop			; (mov r8, r8)
    5ae6:	46bd      	mov	sp, r7
    5ae8:	b002      	add	sp, #8
    5aea:	bd80      	pop	{r7, pc}
    5aec:	40000400 	.word	0x40000400

00005af0 <system_apb_clock_set_divider>:
{
    5af0:	b580      	push	{r7, lr}
    5af2:	b082      	sub	sp, #8
    5af4:	af00      	add	r7, sp, #0
    5af6:	0002      	movs	r2, r0
    5af8:	1dfb      	adds	r3, r7, #7
    5afa:	701a      	strb	r2, [r3, #0]
    5afc:	1dbb      	adds	r3, r7, #6
    5afe:	1c0a      	adds	r2, r1, #0
    5b00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5b02:	1dfb      	adds	r3, r7, #7
    5b04:	781b      	ldrb	r3, [r3, #0]
    5b06:	2b01      	cmp	r3, #1
    5b08:	d008      	beq.n	5b1c <system_apb_clock_set_divider+0x2c>
    5b0a:	2b02      	cmp	r3, #2
    5b0c:	d00b      	beq.n	5b26 <system_apb_clock_set_divider+0x36>
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d10e      	bne.n	5b30 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5b12:	4a0b      	ldr	r2, [pc, #44]	; (5b40 <system_apb_clock_set_divider+0x50>)
    5b14:	1dbb      	adds	r3, r7, #6
    5b16:	781b      	ldrb	r3, [r3, #0]
    5b18:	7253      	strb	r3, [r2, #9]
			break;
    5b1a:	e00b      	b.n	5b34 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5b1c:	4a08      	ldr	r2, [pc, #32]	; (5b40 <system_apb_clock_set_divider+0x50>)
    5b1e:	1dbb      	adds	r3, r7, #6
    5b20:	781b      	ldrb	r3, [r3, #0]
    5b22:	7293      	strb	r3, [r2, #10]
			break;
    5b24:	e006      	b.n	5b34 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5b26:	4a06      	ldr	r2, [pc, #24]	; (5b40 <system_apb_clock_set_divider+0x50>)
    5b28:	1dbb      	adds	r3, r7, #6
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	72d3      	strb	r3, [r2, #11]
			break;
    5b2e:	e001      	b.n	5b34 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5b30:	2317      	movs	r3, #23
    5b32:	e000      	b.n	5b36 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5b34:	2300      	movs	r3, #0
}
    5b36:	0018      	movs	r0, r3
    5b38:	46bd      	mov	sp, r7
    5b3a:	b002      	add	sp, #8
    5b3c:	bd80      	pop	{r7, pc}
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	40000400 	.word	0x40000400

00005b44 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b082      	sub	sp, #8
    5b48:	af00      	add	r7, sp, #0
    5b4a:	0002      	movs	r2, r0
    5b4c:	1dfb      	adds	r3, r7, #7
    5b4e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5b50:	4a08      	ldr	r2, [pc, #32]	; (5b74 <system_flash_set_waitstates+0x30>)
    5b52:	1dfb      	adds	r3, r7, #7
    5b54:	781b      	ldrb	r3, [r3, #0]
    5b56:	210f      	movs	r1, #15
    5b58:	400b      	ands	r3, r1
    5b5a:	b2d9      	uxtb	r1, r3
    5b5c:	6853      	ldr	r3, [r2, #4]
    5b5e:	200f      	movs	r0, #15
    5b60:	4001      	ands	r1, r0
    5b62:	0049      	lsls	r1, r1, #1
    5b64:	201e      	movs	r0, #30
    5b66:	4383      	bics	r3, r0
    5b68:	430b      	orrs	r3, r1
    5b6a:	6053      	str	r3, [r2, #4]
}
    5b6c:	46c0      	nop			; (mov r8, r8)
    5b6e:	46bd      	mov	sp, r7
    5b70:	b002      	add	sp, #8
    5b72:	bd80      	pop	{r7, pc}
    5b74:	41004000 	.word	0x41004000

00005b78 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5b78:	b580      	push	{r7, lr}
    5b7a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5b7c:	46c0      	nop			; (mov r8, r8)
    5b7e:	4b04      	ldr	r3, [pc, #16]	; (5b90 <_system_dfll_wait_for_sync+0x18>)
    5b80:	68db      	ldr	r3, [r3, #12]
    5b82:	2210      	movs	r2, #16
    5b84:	4013      	ands	r3, r2
    5b86:	d0fa      	beq.n	5b7e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5b88:	46c0      	nop			; (mov r8, r8)
    5b8a:	46bd      	mov	sp, r7
    5b8c:	bd80      	pop	{r7, pc}
    5b8e:	46c0      	nop			; (mov r8, r8)
    5b90:	40000800 	.word	0x40000800

00005b94 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5b94:	b580      	push	{r7, lr}
    5b96:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5b98:	4b0c      	ldr	r3, [pc, #48]	; (5bcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5b9a:	2202      	movs	r2, #2
    5b9c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5b9e:	4b0c      	ldr	r3, [pc, #48]	; (5bd0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5ba0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5ba2:	4a0a      	ldr	r2, [pc, #40]	; (5bcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ba4:	4b0b      	ldr	r3, [pc, #44]	; (5bd4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5ba6:	689b      	ldr	r3, [r3, #8]
    5ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5baa:	4a08      	ldr	r2, [pc, #32]	; (5bcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5bac:	4b09      	ldr	r3, [pc, #36]	; (5bd4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5bae:	685b      	ldr	r3, [r3, #4]
    5bb0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5bb2:	4b06      	ldr	r3, [pc, #24]	; (5bcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5bb4:	2200      	movs	r2, #0
    5bb6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5bb8:	4b05      	ldr	r3, [pc, #20]	; (5bd0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5bba:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5bbc:	4a03      	ldr	r2, [pc, #12]	; (5bcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5bbe:	4b05      	ldr	r3, [pc, #20]	; (5bd4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	b29b      	uxth	r3, r3
    5bc4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5bc6:	46c0      	nop			; (mov r8, r8)
    5bc8:	46bd      	mov	sp, r7
    5bca:	bd80      	pop	{r7, pc}
    5bcc:	40000800 	.word	0x40000800
    5bd0:	00005b79 	.word	0x00005b79
    5bd4:	20000160 	.word	0x20000160

00005bd8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5bd8:	b580      	push	{r7, lr}
    5bda:	b082      	sub	sp, #8
    5bdc:	af00      	add	r7, sp, #0
    5bde:	0002      	movs	r2, r0
    5be0:	1dfb      	adds	r3, r7, #7
    5be2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5be4:	1dfb      	adds	r3, r7, #7
    5be6:	781b      	ldrb	r3, [r3, #0]
    5be8:	2b08      	cmp	r3, #8
    5bea:	d841      	bhi.n	5c70 <system_clock_source_get_hz+0x98>
    5bec:	009a      	lsls	r2, r3, #2
    5bee:	4b23      	ldr	r3, [pc, #140]	; (5c7c <system_clock_source_get_hz+0xa4>)
    5bf0:	18d3      	adds	r3, r2, r3
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5bf6:	4b22      	ldr	r3, [pc, #136]	; (5c80 <system_clock_source_get_hz+0xa8>)
    5bf8:	691b      	ldr	r3, [r3, #16]
    5bfa:	e03a      	b.n	5c72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5bfc:	4b21      	ldr	r3, [pc, #132]	; (5c84 <system_clock_source_get_hz+0xac>)
    5bfe:	6a1b      	ldr	r3, [r3, #32]
    5c00:	059b      	lsls	r3, r3, #22
    5c02:	0f9b      	lsrs	r3, r3, #30
    5c04:	b2db      	uxtb	r3, r3
    5c06:	001a      	movs	r2, r3
    5c08:	4b1f      	ldr	r3, [pc, #124]	; (5c88 <system_clock_source_get_hz+0xb0>)
    5c0a:	40d3      	lsrs	r3, r2
    5c0c:	e031      	b.n	5c72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5c0e:	2380      	movs	r3, #128	; 0x80
    5c10:	021b      	lsls	r3, r3, #8
    5c12:	e02e      	b.n	5c72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5c14:	2380      	movs	r3, #128	; 0x80
    5c16:	021b      	lsls	r3, r3, #8
    5c18:	e02b      	b.n	5c72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5c1a:	4b19      	ldr	r3, [pc, #100]	; (5c80 <system_clock_source_get_hz+0xa8>)
    5c1c:	695b      	ldr	r3, [r3, #20]
    5c1e:	e028      	b.n	5c72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5c20:	4b17      	ldr	r3, [pc, #92]	; (5c80 <system_clock_source_get_hz+0xa8>)
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	2202      	movs	r2, #2
    5c26:	4013      	ands	r3, r2
    5c28:	d101      	bne.n	5c2e <system_clock_source_get_hz+0x56>
			return 0;
    5c2a:	2300      	movs	r3, #0
    5c2c:	e021      	b.n	5c72 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5c2e:	4b17      	ldr	r3, [pc, #92]	; (5c8c <system_clock_source_get_hz+0xb4>)
    5c30:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    5c32:	4b13      	ldr	r3, [pc, #76]	; (5c80 <system_clock_source_get_hz+0xa8>)
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	2224      	movs	r2, #36	; 0x24
    5c38:	4013      	ands	r3, r2
    5c3a:	2b04      	cmp	r3, #4
    5c3c:	d109      	bne.n	5c52 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5c3e:	2000      	movs	r0, #0
    5c40:	4b13      	ldr	r3, [pc, #76]	; (5c90 <system_clock_source_get_hz+0xb8>)
    5c42:	4798      	blx	r3
    5c44:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5c46:	4b0e      	ldr	r3, [pc, #56]	; (5c80 <system_clock_source_get_hz+0xa8>)
    5c48:	689b      	ldr	r3, [r3, #8]
    5c4a:	041b      	lsls	r3, r3, #16
    5c4c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5c4e:	4353      	muls	r3, r2
    5c50:	e00f      	b.n	5c72 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    5c52:	4b10      	ldr	r3, [pc, #64]	; (5c94 <system_clock_source_get_hz+0xbc>)
    5c54:	e00d      	b.n	5c72 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5c56:	4a0b      	ldr	r2, [pc, #44]	; (5c84 <system_clock_source_get_hz+0xac>)
    5c58:	2350      	movs	r3, #80	; 0x50
    5c5a:	5cd3      	ldrb	r3, [r2, r3]
    5c5c:	b2db      	uxtb	r3, r3
    5c5e:	001a      	movs	r2, r3
    5c60:	2304      	movs	r3, #4
    5c62:	4013      	ands	r3, r2
    5c64:	d101      	bne.n	5c6a <system_clock_source_get_hz+0x92>
			return 0;
    5c66:	2300      	movs	r3, #0
    5c68:	e003      	b.n	5c72 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    5c6a:	4b05      	ldr	r3, [pc, #20]	; (5c80 <system_clock_source_get_hz+0xa8>)
    5c6c:	68db      	ldr	r3, [r3, #12]
    5c6e:	e000      	b.n	5c72 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    5c70:	2300      	movs	r3, #0
	}
}
    5c72:	0018      	movs	r0, r3
    5c74:	46bd      	mov	sp, r7
    5c76:	b002      	add	sp, #8
    5c78:	bd80      	pop	{r7, pc}
    5c7a:	46c0      	nop			; (mov r8, r8)
    5c7c:	0000c31c 	.word	0x0000c31c
    5c80:	20000160 	.word	0x20000160
    5c84:	40000800 	.word	0x40000800
    5c88:	007a1200 	.word	0x007a1200
    5c8c:	00005b79 	.word	0x00005b79
    5c90:	00006729 	.word	0x00006729
    5c94:	02dc6c00 	.word	0x02dc6c00

00005c98 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5c98:	b580      	push	{r7, lr}
    5c9a:	b084      	sub	sp, #16
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5ca0:	4b1a      	ldr	r3, [pc, #104]	; (5d0c <system_clock_source_osc8m_set_config+0x74>)
    5ca2:	6a1b      	ldr	r3, [r3, #32]
    5ca4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	781b      	ldrb	r3, [r3, #0]
    5caa:	1c1a      	adds	r2, r3, #0
    5cac:	2303      	movs	r3, #3
    5cae:	4013      	ands	r3, r2
    5cb0:	b2da      	uxtb	r2, r3
    5cb2:	230d      	movs	r3, #13
    5cb4:	18fb      	adds	r3, r7, r3
    5cb6:	2103      	movs	r1, #3
    5cb8:	400a      	ands	r2, r1
    5cba:	0010      	movs	r0, r2
    5cbc:	781a      	ldrb	r2, [r3, #0]
    5cbe:	2103      	movs	r1, #3
    5cc0:	438a      	bics	r2, r1
    5cc2:	1c11      	adds	r1, r2, #0
    5cc4:	1c02      	adds	r2, r0, #0
    5cc6:	430a      	orrs	r2, r1
    5cc8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	789a      	ldrb	r2, [r3, #2]
    5cce:	230c      	movs	r3, #12
    5cd0:	18fb      	adds	r3, r7, r3
    5cd2:	01d0      	lsls	r0, r2, #7
    5cd4:	781a      	ldrb	r2, [r3, #0]
    5cd6:	217f      	movs	r1, #127	; 0x7f
    5cd8:	400a      	ands	r2, r1
    5cda:	1c11      	adds	r1, r2, #0
    5cdc:	1c02      	adds	r2, r0, #0
    5cde:	430a      	orrs	r2, r1
    5ce0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	785a      	ldrb	r2, [r3, #1]
    5ce6:	230c      	movs	r3, #12
    5ce8:	18fb      	adds	r3, r7, r3
    5cea:	2101      	movs	r1, #1
    5cec:	400a      	ands	r2, r1
    5cee:	0190      	lsls	r0, r2, #6
    5cf0:	781a      	ldrb	r2, [r3, #0]
    5cf2:	2140      	movs	r1, #64	; 0x40
    5cf4:	438a      	bics	r2, r1
    5cf6:	1c11      	adds	r1, r2, #0
    5cf8:	1c02      	adds	r2, r0, #0
    5cfa:	430a      	orrs	r2, r1
    5cfc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5cfe:	4b03      	ldr	r3, [pc, #12]	; (5d0c <system_clock_source_osc8m_set_config+0x74>)
    5d00:	68fa      	ldr	r2, [r7, #12]
    5d02:	621a      	str	r2, [r3, #32]
}
    5d04:	46c0      	nop			; (mov r8, r8)
    5d06:	46bd      	mov	sp, r7
    5d08:	b004      	add	sp, #16
    5d0a:	bd80      	pop	{r7, pc}
    5d0c:	40000800 	.word	0x40000800

00005d10 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5d10:	b580      	push	{r7, lr}
    5d12:	b084      	sub	sp, #16
    5d14:	af00      	add	r7, sp, #0
    5d16:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5d18:	4a43      	ldr	r2, [pc, #268]	; (5e28 <system_clock_source_xosc32k_set_config+0x118>)
    5d1a:	230c      	movs	r3, #12
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	8a92      	ldrh	r2, [r2, #20]
    5d20:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	785b      	ldrb	r3, [r3, #1]
    5d26:	1c1a      	adds	r2, r3, #0
    5d28:	2307      	movs	r3, #7
    5d2a:	4013      	ands	r3, r2
    5d2c:	b2da      	uxtb	r2, r3
    5d2e:	230c      	movs	r3, #12
    5d30:	18fb      	adds	r3, r7, r3
    5d32:	2107      	movs	r1, #7
    5d34:	400a      	ands	r2, r1
    5d36:	0010      	movs	r0, r2
    5d38:	785a      	ldrb	r2, [r3, #1]
    5d3a:	2107      	movs	r1, #7
    5d3c:	438a      	bics	r2, r1
    5d3e:	1c11      	adds	r1, r2, #0
    5d40:	1c02      	adds	r2, r0, #0
    5d42:	430a      	orrs	r2, r1
    5d44:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5d46:	687b      	ldr	r3, [r7, #4]
    5d48:	781b      	ldrb	r3, [r3, #0]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d106      	bne.n	5d5c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5d4e:	230c      	movs	r3, #12
    5d50:	18fb      	adds	r3, r7, r3
    5d52:	781a      	ldrb	r2, [r3, #0]
    5d54:	2104      	movs	r1, #4
    5d56:	430a      	orrs	r2, r1
    5d58:	701a      	strb	r2, [r3, #0]
    5d5a:	e005      	b.n	5d68 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5d5c:	230c      	movs	r3, #12
    5d5e:	18fb      	adds	r3, r7, r3
    5d60:	781a      	ldrb	r2, [r3, #0]
    5d62:	2104      	movs	r1, #4
    5d64:	438a      	bics	r2, r1
    5d66:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5d68:	687b      	ldr	r3, [r7, #4]
    5d6a:	789a      	ldrb	r2, [r3, #2]
    5d6c:	230c      	movs	r3, #12
    5d6e:	18fb      	adds	r3, r7, r3
    5d70:	2101      	movs	r1, #1
    5d72:	400a      	ands	r2, r1
    5d74:	0150      	lsls	r0, r2, #5
    5d76:	781a      	ldrb	r2, [r3, #0]
    5d78:	2120      	movs	r1, #32
    5d7a:	438a      	bics	r2, r1
    5d7c:	1c11      	adds	r1, r2, #0
    5d7e:	1c02      	adds	r2, r0, #0
    5d80:	430a      	orrs	r2, r1
    5d82:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5d84:	687b      	ldr	r3, [r7, #4]
    5d86:	78da      	ldrb	r2, [r3, #3]
    5d88:	230c      	movs	r3, #12
    5d8a:	18fb      	adds	r3, r7, r3
    5d8c:	2101      	movs	r1, #1
    5d8e:	400a      	ands	r2, r1
    5d90:	0110      	lsls	r0, r2, #4
    5d92:	781a      	ldrb	r2, [r3, #0]
    5d94:	2110      	movs	r1, #16
    5d96:	438a      	bics	r2, r1
    5d98:	1c11      	adds	r1, r2, #0
    5d9a:	1c02      	adds	r2, r0, #0
    5d9c:	430a      	orrs	r2, r1
    5d9e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	791a      	ldrb	r2, [r3, #4]
    5da4:	230c      	movs	r3, #12
    5da6:	18fb      	adds	r3, r7, r3
    5da8:	2101      	movs	r1, #1
    5daa:	400a      	ands	r2, r1
    5dac:	00d0      	lsls	r0, r2, #3
    5dae:	781a      	ldrb	r2, [r3, #0]
    5db0:	2108      	movs	r1, #8
    5db2:	438a      	bics	r2, r1
    5db4:	1c11      	adds	r1, r2, #0
    5db6:	1c02      	adds	r2, r0, #0
    5db8:	430a      	orrs	r2, r1
    5dba:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	7b5a      	ldrb	r2, [r3, #13]
    5dc0:	230c      	movs	r3, #12
    5dc2:	18fb      	adds	r3, r7, r3
    5dc4:	01d0      	lsls	r0, r2, #7
    5dc6:	781a      	ldrb	r2, [r3, #0]
    5dc8:	217f      	movs	r1, #127	; 0x7f
    5dca:	400a      	ands	r2, r1
    5dcc:	1c11      	adds	r1, r2, #0
    5dce:	1c02      	adds	r2, r0, #0
    5dd0:	430a      	orrs	r2, r1
    5dd2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	7b1a      	ldrb	r2, [r3, #12]
    5dd8:	230c      	movs	r3, #12
    5dda:	18fb      	adds	r3, r7, r3
    5ddc:	2101      	movs	r1, #1
    5dde:	400a      	ands	r2, r1
    5de0:	0190      	lsls	r0, r2, #6
    5de2:	781a      	ldrb	r2, [r3, #0]
    5de4:	2140      	movs	r1, #64	; 0x40
    5de6:	438a      	bics	r2, r1
    5de8:	1c11      	adds	r1, r2, #0
    5dea:	1c02      	adds	r2, r0, #0
    5dec:	430a      	orrs	r2, r1
    5dee:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	7b9a      	ldrb	r2, [r3, #14]
    5df4:	230c      	movs	r3, #12
    5df6:	18fb      	adds	r3, r7, r3
    5df8:	2101      	movs	r1, #1
    5dfa:	400a      	ands	r2, r1
    5dfc:	0110      	lsls	r0, r2, #4
    5dfe:	785a      	ldrb	r2, [r3, #1]
    5e00:	2110      	movs	r1, #16
    5e02:	438a      	bics	r2, r1
    5e04:	1c11      	adds	r1, r2, #0
    5e06:	1c02      	adds	r2, r0, #0
    5e08:	430a      	orrs	r2, r1
    5e0a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5e0c:	687b      	ldr	r3, [r7, #4]
    5e0e:	689a      	ldr	r2, [r3, #8]
    5e10:	4b06      	ldr	r3, [pc, #24]	; (5e2c <system_clock_source_xosc32k_set_config+0x11c>)
    5e12:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5e14:	4a04      	ldr	r2, [pc, #16]	; (5e28 <system_clock_source_xosc32k_set_config+0x118>)
    5e16:	230c      	movs	r3, #12
    5e18:	18fb      	adds	r3, r7, r3
    5e1a:	881b      	ldrh	r3, [r3, #0]
    5e1c:	8293      	strh	r3, [r2, #20]
}
    5e1e:	46c0      	nop			; (mov r8, r8)
    5e20:	46bd      	mov	sp, r7
    5e22:	b004      	add	sp, #16
    5e24:	bd80      	pop	{r7, pc}
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	40000800 	.word	0x40000800
    5e2c:	20000160 	.word	0x20000160

00005e30 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b082      	sub	sp, #8
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	7a1b      	ldrb	r3, [r3, #8]
    5e3c:	029b      	lsls	r3, r3, #10
    5e3e:	041b      	lsls	r3, r3, #16
    5e40:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	895b      	ldrh	r3, [r3, #10]
    5e46:	059b      	lsls	r3, r3, #22
    5e48:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5e4a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    5e4c:	4b2a      	ldr	r3, [pc, #168]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5e4e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    5e58:	4313      	orrs	r3, r2
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    5e62:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    5e64:	687a      	ldr	r2, [r7, #4]
    5e66:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    5e68:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	785b      	ldrb	r3, [r3, #1]
    5e6e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    5e70:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    5e72:	4b21      	ldr	r3, [pc, #132]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5e74:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5e76:	687b      	ldr	r3, [r7, #4]
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	2b04      	cmp	r3, #4
    5e7c:	d116      	bne.n	5eac <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5e7e:	687b      	ldr	r3, [r7, #4]
    5e80:	7b1b      	ldrb	r3, [r3, #12]
    5e82:	069b      	lsls	r3, r3, #26
    5e84:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5e86:	687b      	ldr	r3, [r7, #4]
    5e88:	89db      	ldrh	r3, [r3, #14]
    5e8a:	041b      	lsls	r3, r3, #16
    5e8c:	0019      	movs	r1, r3
    5e8e:	4b1b      	ldr	r3, [pc, #108]	; (5efc <system_clock_source_dfll_set_config+0xcc>)
    5e90:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5e92:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5e94:	687a      	ldr	r2, [r7, #4]
    5e96:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5e98:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5e9a:	4b17      	ldr	r3, [pc, #92]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5e9c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5e9e:	4b16      	ldr	r3, [pc, #88]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5ea0:	681b      	ldr	r3, [r3, #0]
    5ea2:	687a      	ldr	r2, [r7, #4]
    5ea4:	7812      	ldrb	r2, [r2, #0]
    5ea6:	431a      	orrs	r2, r3
    5ea8:	4b13      	ldr	r3, [pc, #76]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5eaa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	781b      	ldrb	r3, [r3, #0]
    5eb0:	2b20      	cmp	r3, #32
    5eb2:	d11c      	bne.n	5eee <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	7b1b      	ldrb	r3, [r3, #12]
    5eb8:	069b      	lsls	r3, r3, #26
    5eba:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	89db      	ldrh	r3, [r3, #14]
    5ec0:	041b      	lsls	r3, r3, #16
    5ec2:	0019      	movs	r1, r3
    5ec4:	4b0d      	ldr	r3, [pc, #52]	; (5efc <system_clock_source_dfll_set_config+0xcc>)
    5ec6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5ec8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5eca:	687a      	ldr	r2, [r7, #4]
    5ecc:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5ece:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5ed0:	4b09      	ldr	r3, [pc, #36]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5ed2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5ed4:	4b08      	ldr	r3, [pc, #32]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	687a      	ldr	r2, [r7, #4]
    5eda:	7812      	ldrb	r2, [r2, #0]
    5edc:	2104      	movs	r1, #4
    5ede:	430a      	orrs	r2, r1
    5ee0:	b2d2      	uxtb	r2, r2
    5ee2:	4313      	orrs	r3, r2
    5ee4:	2280      	movs	r2, #128	; 0x80
    5ee6:	00d2      	lsls	r2, r2, #3
    5ee8:	431a      	orrs	r2, r3
    5eea:	4b03      	ldr	r3, [pc, #12]	; (5ef8 <system_clock_source_dfll_set_config+0xc8>)
    5eec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5eee:	46c0      	nop			; (mov r8, r8)
    5ef0:	46bd      	mov	sp, r7
    5ef2:	b002      	add	sp, #8
    5ef4:	bd80      	pop	{r7, pc}
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	20000160 	.word	0x20000160
    5efc:	03ff0000 	.word	0x03ff0000

00005f00 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	b082      	sub	sp, #8
    5f04:	af00      	add	r7, sp, #0
    5f06:	0002      	movs	r2, r0
    5f08:	1dfb      	adds	r3, r7, #7
    5f0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5f0c:	1dfb      	adds	r3, r7, #7
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	2b08      	cmp	r3, #8
    5f12:	d83b      	bhi.n	5f8c <system_clock_source_enable+0x8c>
    5f14:	009a      	lsls	r2, r3, #2
    5f16:	4b21      	ldr	r3, [pc, #132]	; (5f9c <system_clock_source_enable+0x9c>)
    5f18:	18d3      	adds	r3, r2, r3
    5f1a:	681b      	ldr	r3, [r3, #0]
    5f1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5f1e:	4b20      	ldr	r3, [pc, #128]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f20:	4a1f      	ldr	r2, [pc, #124]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f22:	6a12      	ldr	r2, [r2, #32]
    5f24:	2102      	movs	r1, #2
    5f26:	430a      	orrs	r2, r1
    5f28:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5f2a:	2300      	movs	r3, #0
    5f2c:	e031      	b.n	5f92 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5f2e:	4b1c      	ldr	r3, [pc, #112]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f30:	4a1b      	ldr	r2, [pc, #108]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f32:	6992      	ldr	r2, [r2, #24]
    5f34:	2102      	movs	r1, #2
    5f36:	430a      	orrs	r2, r1
    5f38:	619a      	str	r2, [r3, #24]
		break;
    5f3a:	e029      	b.n	5f90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5f3c:	4a18      	ldr	r2, [pc, #96]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f3e:	4b18      	ldr	r3, [pc, #96]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f40:	8a1b      	ldrh	r3, [r3, #16]
    5f42:	b29b      	uxth	r3, r3
    5f44:	2102      	movs	r1, #2
    5f46:	430b      	orrs	r3, r1
    5f48:	b29b      	uxth	r3, r3
    5f4a:	8213      	strh	r3, [r2, #16]
		break;
    5f4c:	e020      	b.n	5f90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5f4e:	4a14      	ldr	r2, [pc, #80]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f50:	4b13      	ldr	r3, [pc, #76]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f52:	8a9b      	ldrh	r3, [r3, #20]
    5f54:	b29b      	uxth	r3, r3
    5f56:	2102      	movs	r1, #2
    5f58:	430b      	orrs	r3, r1
    5f5a:	b29b      	uxth	r3, r3
    5f5c:	8293      	strh	r3, [r2, #20]
		break;
    5f5e:	e017      	b.n	5f90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5f60:	4b10      	ldr	r3, [pc, #64]	; (5fa4 <system_clock_source_enable+0xa4>)
    5f62:	681b      	ldr	r3, [r3, #0]
    5f64:	2202      	movs	r2, #2
    5f66:	431a      	orrs	r2, r3
    5f68:	4b0e      	ldr	r3, [pc, #56]	; (5fa4 <system_clock_source_enable+0xa4>)
    5f6a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5f6c:	4b0e      	ldr	r3, [pc, #56]	; (5fa8 <system_clock_source_enable+0xa8>)
    5f6e:	4798      	blx	r3
		break;
    5f70:	e00e      	b.n	5f90 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5f72:	4a0b      	ldr	r2, [pc, #44]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f74:	490a      	ldr	r1, [pc, #40]	; (5fa0 <system_clock_source_enable+0xa0>)
    5f76:	2344      	movs	r3, #68	; 0x44
    5f78:	5ccb      	ldrb	r3, [r1, r3]
    5f7a:	b2db      	uxtb	r3, r3
    5f7c:	2102      	movs	r1, #2
    5f7e:	430b      	orrs	r3, r1
    5f80:	b2d9      	uxtb	r1, r3
    5f82:	2344      	movs	r3, #68	; 0x44
    5f84:	54d1      	strb	r1, [r2, r3]
		break;
    5f86:	e003      	b.n	5f90 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5f88:	2300      	movs	r3, #0
    5f8a:	e002      	b.n	5f92 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5f8c:	2317      	movs	r3, #23
    5f8e:	e000      	b.n	5f92 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5f90:	2300      	movs	r3, #0
}
    5f92:	0018      	movs	r0, r3
    5f94:	46bd      	mov	sp, r7
    5f96:	b002      	add	sp, #8
    5f98:	bd80      	pop	{r7, pc}
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	0000c340 	.word	0x0000c340
    5fa0:	40000800 	.word	0x40000800
    5fa4:	20000160 	.word	0x20000160
    5fa8:	00005b95 	.word	0x00005b95

00005fac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5fac:	b580      	push	{r7, lr}
    5fae:	b084      	sub	sp, #16
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	0002      	movs	r2, r0
    5fb4:	1dfb      	adds	r3, r7, #7
    5fb6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5fb8:	2300      	movs	r3, #0
    5fba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5fbc:	1dfb      	adds	r3, r7, #7
    5fbe:	781b      	ldrb	r3, [r3, #0]
    5fc0:	2b08      	cmp	r3, #8
    5fc2:	d821      	bhi.n	6008 <system_clock_source_is_ready+0x5c>
    5fc4:	009a      	lsls	r2, r3, #2
    5fc6:	4b18      	ldr	r3, [pc, #96]	; (6028 <system_clock_source_is_ready+0x7c>)
    5fc8:	18d3      	adds	r3, r2, r3
    5fca:	681b      	ldr	r3, [r3, #0]
    5fcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5fce:	2308      	movs	r3, #8
    5fd0:	60fb      	str	r3, [r7, #12]
		break;
    5fd2:	e01b      	b.n	600c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5fd4:	2304      	movs	r3, #4
    5fd6:	60fb      	str	r3, [r7, #12]
		break;
    5fd8:	e018      	b.n	600c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5fda:	2301      	movs	r3, #1
    5fdc:	60fb      	str	r3, [r7, #12]
		break;
    5fde:	e015      	b.n	600c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5fe0:	2302      	movs	r3, #2
    5fe2:	60fb      	str	r3, [r7, #12]
		break;
    5fe4:	e012      	b.n	600c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    5fe6:	23d0      	movs	r3, #208	; 0xd0
    5fe8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    5fea:	e00f      	b.n	600c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5fec:	4a0f      	ldr	r2, [pc, #60]	; (602c <system_clock_source_is_ready+0x80>)
    5fee:	2350      	movs	r3, #80	; 0x50
    5ff0:	5cd3      	ldrb	r3, [r2, r3]
    5ff2:	b2db      	uxtb	r3, r3
    5ff4:	001a      	movs	r2, r3
    5ff6:	2303      	movs	r3, #3
    5ff8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    5ffa:	3b03      	subs	r3, #3
    5ffc:	425a      	negs	r2, r3
    5ffe:	4153      	adcs	r3, r2
    6000:	b2db      	uxtb	r3, r3
    6002:	e00c      	b.n	601e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6004:	2301      	movs	r3, #1
    6006:	e00a      	b.n	601e <system_clock_source_is_ready+0x72>

	default:
		return false;
    6008:	2300      	movs	r3, #0
    600a:	e008      	b.n	601e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    600c:	4b07      	ldr	r3, [pc, #28]	; (602c <system_clock_source_is_ready+0x80>)
    600e:	68db      	ldr	r3, [r3, #12]
    6010:	68fa      	ldr	r2, [r7, #12]
    6012:	401a      	ands	r2, r3
    6014:	68fb      	ldr	r3, [r7, #12]
    6016:	1ad3      	subs	r3, r2, r3
    6018:	425a      	negs	r2, r3
    601a:	4153      	adcs	r3, r2
    601c:	b2db      	uxtb	r3, r3
}
    601e:	0018      	movs	r0, r3
    6020:	46bd      	mov	sp, r7
    6022:	b004      	add	sp, #16
    6024:	bd80      	pop	{r7, pc}
    6026:	46c0      	nop			; (mov r8, r8)
    6028:	0000c364 	.word	0x0000c364
    602c:	40000800 	.word	0x40000800

00006030 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6030:	b580      	push	{r7, lr}
    6032:	b082      	sub	sp, #8
    6034:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6036:	003b      	movs	r3, r7
    6038:	2202      	movs	r2, #2
    603a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    603c:	2300      	movs	r3, #0
    603e:	607b      	str	r3, [r7, #4]
    6040:	e009      	b.n	6056 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	b2db      	uxtb	r3, r3
    6046:	003a      	movs	r2, r7
    6048:	0011      	movs	r1, r2
    604a:	0018      	movs	r0, r3
    604c:	4b05      	ldr	r3, [pc, #20]	; (6064 <_switch_peripheral_gclk+0x34>)
    604e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	3301      	adds	r3, #1
    6054:	607b      	str	r3, [r7, #4]
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	2b24      	cmp	r3, #36	; 0x24
    605a:	d9f2      	bls.n	6042 <_switch_peripheral_gclk+0x12>
	}
}
    605c:	46c0      	nop			; (mov r8, r8)
    605e:	46bd      	mov	sp, r7
    6060:	b002      	add	sp, #8
    6062:	bd80      	pop	{r7, pc}
    6064:	00006605 	.word	0x00006605

00006068 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6068:	b580      	push	{r7, lr}
    606a:	b0aa      	sub	sp, #168	; 0xa8
    606c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    606e:	4b85      	ldr	r3, [pc, #532]	; (6284 <system_clock_init+0x21c>)
    6070:	22c2      	movs	r2, #194	; 0xc2
    6072:	00d2      	lsls	r2, r2, #3
    6074:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6076:	2002      	movs	r0, #2
    6078:	4b83      	ldr	r3, [pc, #524]	; (6288 <system_clock_init+0x220>)
    607a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    607c:	4b83      	ldr	r3, [pc, #524]	; (628c <system_clock_init+0x224>)
    607e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    6080:	2394      	movs	r3, #148	; 0x94
    6082:	18fb      	adds	r3, r7, r3
    6084:	0018      	movs	r0, r3
    6086:	4b82      	ldr	r3, [pc, #520]	; (6290 <system_clock_init+0x228>)
    6088:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    608a:	2394      	movs	r3, #148	; 0x94
    608c:	18fb      	adds	r3, r7, r3
    608e:	2280      	movs	r2, #128	; 0x80
    6090:	0212      	lsls	r2, r2, #8
    6092:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6094:	2394      	movs	r3, #148	; 0x94
    6096:	18fb      	adds	r3, r7, r3
    6098:	2200      	movs	r2, #0
    609a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    609c:	2394      	movs	r3, #148	; 0x94
    609e:	18fb      	adds	r3, r7, r3
    60a0:	2206      	movs	r2, #6
    60a2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    60a4:	2394      	movs	r3, #148	; 0x94
    60a6:	18fb      	adds	r3, r7, r3
    60a8:	2200      	movs	r2, #0
    60aa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    60ac:	2394      	movs	r3, #148	; 0x94
    60ae:	18fb      	adds	r3, r7, r3
    60b0:	2200      	movs	r2, #0
    60b2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    60b4:	2394      	movs	r3, #148	; 0x94
    60b6:	18fb      	adds	r3, r7, r3
    60b8:	2201      	movs	r2, #1
    60ba:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    60bc:	2394      	movs	r3, #148	; 0x94
    60be:	18fb      	adds	r3, r7, r3
    60c0:	2200      	movs	r2, #0
    60c2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    60c4:	2394      	movs	r3, #148	; 0x94
    60c6:	18fb      	adds	r3, r7, r3
    60c8:	2201      	movs	r2, #1
    60ca:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    60cc:	2394      	movs	r3, #148	; 0x94
    60ce:	18fb      	adds	r3, r7, r3
    60d0:	0018      	movs	r0, r3
    60d2:	4b70      	ldr	r3, [pc, #448]	; (6294 <system_clock_init+0x22c>)
    60d4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    60d6:	2005      	movs	r0, #5
    60d8:	4b6f      	ldr	r3, [pc, #444]	; (6298 <system_clock_init+0x230>)
    60da:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    60dc:	46c0      	nop			; (mov r8, r8)
    60de:	2005      	movs	r0, #5
    60e0:	4b6e      	ldr	r3, [pc, #440]	; (629c <system_clock_init+0x234>)
    60e2:	4798      	blx	r3
    60e4:	0003      	movs	r3, r0
    60e6:	001a      	movs	r2, r3
    60e8:	2301      	movs	r3, #1
    60ea:	4053      	eors	r3, r2
    60ec:	b2db      	uxtb	r3, r3
    60ee:	2b00      	cmp	r3, #0
    60f0:	d1f5      	bne.n	60de <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    60f2:	2380      	movs	r3, #128	; 0x80
    60f4:	18fb      	adds	r3, r7, r3
    60f6:	0018      	movs	r0, r3
    60f8:	4b69      	ldr	r3, [pc, #420]	; (62a0 <system_clock_init+0x238>)
    60fa:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    60fc:	2380      	movs	r3, #128	; 0x80
    60fe:	18fb      	adds	r3, r7, r3
    6100:	2204      	movs	r2, #4
    6102:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6104:	2380      	movs	r3, #128	; 0x80
    6106:	18fb      	adds	r3, r7, r3
    6108:	2200      	movs	r2, #0
    610a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    610c:	4b65      	ldr	r3, [pc, #404]	; (62a4 <system_clock_init+0x23c>)
    610e:	681b      	ldr	r3, [r3, #0]
    6110:	0e9b      	lsrs	r3, r3, #26
    6112:	22a4      	movs	r2, #164	; 0xa4
    6114:	18ba      	adds	r2, r7, r2
    6116:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6118:	23a4      	movs	r3, #164	; 0xa4
    611a:	18fb      	adds	r3, r7, r3
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	2b3f      	cmp	r3, #63	; 0x3f
    6120:	d103      	bne.n	612a <system_clock_init+0xc2>
		coarse = 0x1f;
    6122:	231f      	movs	r3, #31
    6124:	22a4      	movs	r2, #164	; 0xa4
    6126:	18ba      	adds	r2, r7, r2
    6128:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    612a:	23a4      	movs	r3, #164	; 0xa4
    612c:	18fb      	adds	r3, r7, r3
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	b2da      	uxtb	r2, r3
    6132:	2380      	movs	r3, #128	; 0x80
    6134:	18fb      	adds	r3, r7, r3
    6136:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6138:	2380      	movs	r3, #128	; 0x80
    613a:	18fb      	adds	r3, r7, r3
    613c:	2200      	movs	r2, #0
    613e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6140:	2380      	movs	r3, #128	; 0x80
    6142:	18fb      	adds	r3, r7, r3
    6144:	2200      	movs	r2, #0
    6146:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6148:	2380      	movs	r3, #128	; 0x80
    614a:	18fb      	adds	r3, r7, r3
    614c:	2200      	movs	r2, #0
    614e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6150:	2380      	movs	r3, #128	; 0x80
    6152:	18fb      	adds	r3, r7, r3
    6154:	2200      	movs	r2, #0
    6156:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6158:	2380      	movs	r3, #128	; 0x80
    615a:	18fb      	adds	r3, r7, r3
    615c:	22b7      	movs	r2, #183	; 0xb7
    615e:	00d2      	lsls	r2, r2, #3
    6160:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6162:	2380      	movs	r3, #128	; 0x80
    6164:	18fb      	adds	r3, r7, r3
    6166:	2203      	movs	r2, #3
    6168:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    616a:	2380      	movs	r3, #128	; 0x80
    616c:	18fb      	adds	r3, r7, r3
    616e:	221f      	movs	r2, #31
    6170:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6172:	2380      	movs	r3, #128	; 0x80
    6174:	18fb      	adds	r3, r7, r3
    6176:	0018      	movs	r0, r3
    6178:	4b4b      	ldr	r3, [pc, #300]	; (62a8 <system_clock_init+0x240>)
    617a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    617c:	237c      	movs	r3, #124	; 0x7c
    617e:	18fb      	adds	r3, r7, r3
    6180:	0018      	movs	r0, r3
    6182:	4b4a      	ldr	r3, [pc, #296]	; (62ac <system_clock_init+0x244>)
    6184:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6186:	237c      	movs	r3, #124	; 0x7c
    6188:	18fb      	adds	r3, r7, r3
    618a:	2200      	movs	r2, #0
    618c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    618e:	237c      	movs	r3, #124	; 0x7c
    6190:	18fb      	adds	r3, r7, r3
    6192:	2201      	movs	r2, #1
    6194:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6196:	237c      	movs	r3, #124	; 0x7c
    6198:	18fb      	adds	r3, r7, r3
    619a:	2201      	movs	r2, #1
    619c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    619e:	237c      	movs	r3, #124	; 0x7c
    61a0:	18fb      	adds	r3, r7, r3
    61a2:	0018      	movs	r0, r3
    61a4:	4b42      	ldr	r3, [pc, #264]	; (62b0 <system_clock_init+0x248>)
    61a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    61a8:	2006      	movs	r0, #6
    61aa:	4b3b      	ldr	r3, [pc, #236]	; (6298 <system_clock_init+0x230>)
    61ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    61ae:	4b41      	ldr	r3, [pc, #260]	; (62b4 <system_clock_init+0x24c>)
    61b0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    61b2:	2364      	movs	r3, #100	; 0x64
    61b4:	18fb      	adds	r3, r7, r3
    61b6:	0018      	movs	r0, r3
    61b8:	4b3f      	ldr	r3, [pc, #252]	; (62b8 <system_clock_init+0x250>)
    61ba:	4798      	blx	r3
    61bc:	2364      	movs	r3, #100	; 0x64
    61be:	18fb      	adds	r3, r7, r3
    61c0:	2205      	movs	r2, #5
    61c2:	701a      	strb	r2, [r3, #0]
    61c4:	2364      	movs	r3, #100	; 0x64
    61c6:	18fb      	adds	r3, r7, r3
    61c8:	2201      	movs	r2, #1
    61ca:	605a      	str	r2, [r3, #4]
    61cc:	2364      	movs	r3, #100	; 0x64
    61ce:	18fb      	adds	r3, r7, r3
    61d0:	2200      	movs	r2, #0
    61d2:	721a      	strb	r2, [r3, #8]
    61d4:	2364      	movs	r3, #100	; 0x64
    61d6:	18fb      	adds	r3, r7, r3
    61d8:	2200      	movs	r2, #0
    61da:	725a      	strb	r2, [r3, #9]
    61dc:	2364      	movs	r3, #100	; 0x64
    61de:	18fb      	adds	r3, r7, r3
    61e0:	0019      	movs	r1, r3
    61e2:	2001      	movs	r0, #1
    61e4:	4b35      	ldr	r3, [pc, #212]	; (62bc <system_clock_init+0x254>)
    61e6:	4798      	blx	r3
    61e8:	2001      	movs	r0, #1
    61ea:	4b35      	ldr	r3, [pc, #212]	; (62c0 <system_clock_init+0x258>)
    61ec:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    61ee:	230c      	movs	r3, #12
    61f0:	18fb      	adds	r3, r7, r3
    61f2:	0018      	movs	r0, r3
    61f4:	4b33      	ldr	r3, [pc, #204]	; (62c4 <system_clock_init+0x25c>)
    61f6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    61f8:	230c      	movs	r3, #12
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	2201      	movs	r2, #1
    61fe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6200:	230c      	movs	r3, #12
    6202:	18fb      	adds	r3, r7, r3
    6204:	0019      	movs	r1, r3
    6206:	2000      	movs	r0, #0
    6208:	4b2f      	ldr	r3, [pc, #188]	; (62c8 <system_clock_init+0x260>)
    620a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    620c:	2000      	movs	r0, #0
    620e:	4b2f      	ldr	r3, [pc, #188]	; (62cc <system_clock_init+0x264>)
    6210:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6212:	2007      	movs	r0, #7
    6214:	4b20      	ldr	r3, [pc, #128]	; (6298 <system_clock_init+0x230>)
    6216:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6218:	46c0      	nop			; (mov r8, r8)
    621a:	2007      	movs	r0, #7
    621c:	4b1f      	ldr	r3, [pc, #124]	; (629c <system_clock_init+0x234>)
    621e:	4798      	blx	r3
    6220:	0003      	movs	r3, r0
    6222:	001a      	movs	r2, r3
    6224:	2301      	movs	r3, #1
    6226:	4053      	eors	r3, r2
    6228:	b2db      	uxtb	r3, r3
    622a:	2b00      	cmp	r3, #0
    622c:	d1f5      	bne.n	621a <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    622e:	2000      	movs	r0, #0
    6230:	4b27      	ldr	r3, [pc, #156]	; (62d0 <system_clock_init+0x268>)
    6232:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6234:	2100      	movs	r1, #0
    6236:	2000      	movs	r0, #0
    6238:	4b26      	ldr	r3, [pc, #152]	; (62d4 <system_clock_init+0x26c>)
    623a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    623c:	2100      	movs	r1, #0
    623e:	2001      	movs	r0, #1
    6240:	4b24      	ldr	r3, [pc, #144]	; (62d4 <system_clock_init+0x26c>)
    6242:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6244:	2100      	movs	r1, #0
    6246:	2002      	movs	r0, #2
    6248:	4b22      	ldr	r3, [pc, #136]	; (62d4 <system_clock_init+0x26c>)
    624a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    624c:	003b      	movs	r3, r7
    624e:	0018      	movs	r0, r3
    6250:	4b19      	ldr	r3, [pc, #100]	; (62b8 <system_clock_init+0x250>)
    6252:	4798      	blx	r3
    6254:	003b      	movs	r3, r7
    6256:	2207      	movs	r2, #7
    6258:	701a      	strb	r2, [r3, #0]
    625a:	003b      	movs	r3, r7
    625c:	2201      	movs	r2, #1
    625e:	605a      	str	r2, [r3, #4]
    6260:	003b      	movs	r3, r7
    6262:	2201      	movs	r2, #1
    6264:	721a      	strb	r2, [r3, #8]
    6266:	003b      	movs	r3, r7
    6268:	2200      	movs	r2, #0
    626a:	725a      	strb	r2, [r3, #9]
    626c:	003b      	movs	r3, r7
    626e:	0019      	movs	r1, r3
    6270:	2000      	movs	r0, #0
    6272:	4b12      	ldr	r3, [pc, #72]	; (62bc <system_clock_init+0x254>)
    6274:	4798      	blx	r3
    6276:	2000      	movs	r0, #0
    6278:	4b11      	ldr	r3, [pc, #68]	; (62c0 <system_clock_init+0x258>)
    627a:	4798      	blx	r3
#endif
}
    627c:	46c0      	nop			; (mov r8, r8)
    627e:	46bd      	mov	sp, r7
    6280:	b02a      	add	sp, #168	; 0xa8
    6282:	bd80      	pop	{r7, pc}
    6284:	40000800 	.word	0x40000800
    6288:	00005b45 	.word	0x00005b45
    628c:	00006031 	.word	0x00006031
    6290:	00005a15 	.word	0x00005a15
    6294:	00005d11 	.word	0x00005d11
    6298:	00005f01 	.word	0x00005f01
    629c:	00005fad 	.word	0x00005fad
    62a0:	00005a7f 	.word	0x00005a7f
    62a4:	00806024 	.word	0x00806024
    62a8:	00005e31 	.word	0x00005e31
    62ac:	00005a5d 	.word	0x00005a5d
    62b0:	00005c99 	.word	0x00005c99
    62b4:	0000637d 	.word	0x0000637d
    62b8:	000059d1 	.word	0x000059d1
    62bc:	000063ad 	.word	0x000063ad
    62c0:	000064d1 	.word	0x000064d1
    62c4:	000059ff 	.word	0x000059ff
    62c8:	00006605 	.word	0x00006605
    62cc:	00006649 	.word	0x00006649
    62d0:	00005ad1 	.word	0x00005ad1
    62d4:	00005af1 	.word	0x00005af1

000062d8 <system_apb_clock_set_mask>:
{
    62d8:	b580      	push	{r7, lr}
    62da:	b082      	sub	sp, #8
    62dc:	af00      	add	r7, sp, #0
    62de:	0002      	movs	r2, r0
    62e0:	6039      	str	r1, [r7, #0]
    62e2:	1dfb      	adds	r3, r7, #7
    62e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    62e6:	1dfb      	adds	r3, r7, #7
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	2b01      	cmp	r3, #1
    62ec:	d00a      	beq.n	6304 <system_apb_clock_set_mask+0x2c>
    62ee:	2b02      	cmp	r3, #2
    62f0:	d00f      	beq.n	6312 <system_apb_clock_set_mask+0x3a>
    62f2:	2b00      	cmp	r3, #0
    62f4:	d114      	bne.n	6320 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    62f6:	4b0e      	ldr	r3, [pc, #56]	; (6330 <system_apb_clock_set_mask+0x58>)
    62f8:	4a0d      	ldr	r2, [pc, #52]	; (6330 <system_apb_clock_set_mask+0x58>)
    62fa:	6991      	ldr	r1, [r2, #24]
    62fc:	683a      	ldr	r2, [r7, #0]
    62fe:	430a      	orrs	r2, r1
    6300:	619a      	str	r2, [r3, #24]
			break;
    6302:	e00f      	b.n	6324 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6304:	4b0a      	ldr	r3, [pc, #40]	; (6330 <system_apb_clock_set_mask+0x58>)
    6306:	4a0a      	ldr	r2, [pc, #40]	; (6330 <system_apb_clock_set_mask+0x58>)
    6308:	69d1      	ldr	r1, [r2, #28]
    630a:	683a      	ldr	r2, [r7, #0]
    630c:	430a      	orrs	r2, r1
    630e:	61da      	str	r2, [r3, #28]
			break;
    6310:	e008      	b.n	6324 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6312:	4b07      	ldr	r3, [pc, #28]	; (6330 <system_apb_clock_set_mask+0x58>)
    6314:	4a06      	ldr	r2, [pc, #24]	; (6330 <system_apb_clock_set_mask+0x58>)
    6316:	6a11      	ldr	r1, [r2, #32]
    6318:	683a      	ldr	r2, [r7, #0]
    631a:	430a      	orrs	r2, r1
    631c:	621a      	str	r2, [r3, #32]
			break;
    631e:	e001      	b.n	6324 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6320:	2317      	movs	r3, #23
    6322:	e000      	b.n	6326 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6324:	2300      	movs	r3, #0
}
    6326:	0018      	movs	r0, r3
    6328:	46bd      	mov	sp, r7
    632a:	b002      	add	sp, #8
    632c:	bd80      	pop	{r7, pc}
    632e:	46c0      	nop			; (mov r8, r8)
    6330:	40000400 	.word	0x40000400

00006334 <system_interrupt_enter_critical_section>:
{
    6334:	b580      	push	{r7, lr}
    6336:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6338:	4b02      	ldr	r3, [pc, #8]	; (6344 <system_interrupt_enter_critical_section+0x10>)
    633a:	4798      	blx	r3
}
    633c:	46c0      	nop			; (mov r8, r8)
    633e:	46bd      	mov	sp, r7
    6340:	bd80      	pop	{r7, pc}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	00002f79 	.word	0x00002f79

00006348 <system_interrupt_leave_critical_section>:
{
    6348:	b580      	push	{r7, lr}
    634a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    634c:	4b02      	ldr	r3, [pc, #8]	; (6358 <system_interrupt_leave_critical_section+0x10>)
    634e:	4798      	blx	r3
}
    6350:	46c0      	nop			; (mov r8, r8)
    6352:	46bd      	mov	sp, r7
    6354:	bd80      	pop	{r7, pc}
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	00002fcd 	.word	0x00002fcd

0000635c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    635c:	b580      	push	{r7, lr}
    635e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6360:	4b05      	ldr	r3, [pc, #20]	; (6378 <system_gclk_is_syncing+0x1c>)
    6362:	785b      	ldrb	r3, [r3, #1]
    6364:	b2db      	uxtb	r3, r3
    6366:	b25b      	sxtb	r3, r3
    6368:	2b00      	cmp	r3, #0
    636a:	da01      	bge.n	6370 <system_gclk_is_syncing+0x14>
		return true;
    636c:	2301      	movs	r3, #1
    636e:	e000      	b.n	6372 <system_gclk_is_syncing+0x16>
	}

	return false;
    6370:	2300      	movs	r3, #0
}
    6372:	0018      	movs	r0, r3
    6374:	46bd      	mov	sp, r7
    6376:	bd80      	pop	{r7, pc}
    6378:	40000c00 	.word	0x40000c00

0000637c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    637c:	b580      	push	{r7, lr}
    637e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6380:	2108      	movs	r1, #8
    6382:	2000      	movs	r0, #0
    6384:	4b07      	ldr	r3, [pc, #28]	; (63a4 <system_gclk_init+0x28>)
    6386:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6388:	4b07      	ldr	r3, [pc, #28]	; (63a8 <system_gclk_init+0x2c>)
    638a:	2201      	movs	r2, #1
    638c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    638e:	46c0      	nop			; (mov r8, r8)
    6390:	4b05      	ldr	r3, [pc, #20]	; (63a8 <system_gclk_init+0x2c>)
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	b2db      	uxtb	r3, r3
    6396:	001a      	movs	r2, r3
    6398:	2301      	movs	r3, #1
    639a:	4013      	ands	r3, r2
    639c:	d1f8      	bne.n	6390 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    639e:	46c0      	nop			; (mov r8, r8)
    63a0:	46bd      	mov	sp, r7
    63a2:	bd80      	pop	{r7, pc}
    63a4:	000062d9 	.word	0x000062d9
    63a8:	40000c00 	.word	0x40000c00

000063ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b086      	sub	sp, #24
    63b0:	af00      	add	r7, sp, #0
    63b2:	0002      	movs	r2, r0
    63b4:	6039      	str	r1, [r7, #0]
    63b6:	1dfb      	adds	r3, r7, #7
    63b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    63ba:	1dfb      	adds	r3, r7, #7
    63bc:	781b      	ldrb	r3, [r3, #0]
    63be:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    63c0:	1dfb      	adds	r3, r7, #7
    63c2:	781b      	ldrb	r3, [r3, #0]
    63c4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    63c6:	683b      	ldr	r3, [r7, #0]
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	021b      	lsls	r3, r3, #8
    63cc:	001a      	movs	r2, r3
    63ce:	697b      	ldr	r3, [r7, #20]
    63d0:	4313      	orrs	r3, r2
    63d2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    63d4:	683b      	ldr	r3, [r7, #0]
    63d6:	785b      	ldrb	r3, [r3, #1]
    63d8:	2b00      	cmp	r3, #0
    63da:	d004      	beq.n	63e6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    63dc:	697b      	ldr	r3, [r7, #20]
    63de:	2280      	movs	r2, #128	; 0x80
    63e0:	02d2      	lsls	r2, r2, #11
    63e2:	4313      	orrs	r3, r2
    63e4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	7a5b      	ldrb	r3, [r3, #9]
    63ea:	2b00      	cmp	r3, #0
    63ec:	d004      	beq.n	63f8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    63ee:	697b      	ldr	r3, [r7, #20]
    63f0:	2280      	movs	r2, #128	; 0x80
    63f2:	0312      	lsls	r2, r2, #12
    63f4:	4313      	orrs	r3, r2
    63f6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    63f8:	683b      	ldr	r3, [r7, #0]
    63fa:	685b      	ldr	r3, [r3, #4]
    63fc:	2b01      	cmp	r3, #1
    63fe:	d92c      	bls.n	645a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6400:	683b      	ldr	r3, [r7, #0]
    6402:	685a      	ldr	r2, [r3, #4]
    6404:	683b      	ldr	r3, [r7, #0]
    6406:	685b      	ldr	r3, [r3, #4]
    6408:	3b01      	subs	r3, #1
    640a:	4013      	ands	r3, r2
    640c:	d11a      	bne.n	6444 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    640e:	2300      	movs	r3, #0
    6410:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6412:	2302      	movs	r3, #2
    6414:	60bb      	str	r3, [r7, #8]
    6416:	e005      	b.n	6424 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	3301      	adds	r3, #1
    641c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    641e:	68bb      	ldr	r3, [r7, #8]
    6420:	005b      	lsls	r3, r3, #1
    6422:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6424:	683b      	ldr	r3, [r7, #0]
    6426:	685a      	ldr	r2, [r3, #4]
    6428:	68bb      	ldr	r3, [r7, #8]
    642a:	429a      	cmp	r2, r3
    642c:	d8f4      	bhi.n	6418 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    642e:	68fb      	ldr	r3, [r7, #12]
    6430:	021b      	lsls	r3, r3, #8
    6432:	693a      	ldr	r2, [r7, #16]
    6434:	4313      	orrs	r3, r2
    6436:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6438:	697b      	ldr	r3, [r7, #20]
    643a:	2280      	movs	r2, #128	; 0x80
    643c:	0352      	lsls	r2, r2, #13
    643e:	4313      	orrs	r3, r2
    6440:	617b      	str	r3, [r7, #20]
    6442:	e00a      	b.n	645a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6444:	683b      	ldr	r3, [r7, #0]
    6446:	685b      	ldr	r3, [r3, #4]
    6448:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    644a:	693a      	ldr	r2, [r7, #16]
    644c:	4313      	orrs	r3, r2
    644e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6450:	697b      	ldr	r3, [r7, #20]
    6452:	2280      	movs	r2, #128	; 0x80
    6454:	0292      	lsls	r2, r2, #10
    6456:	4313      	orrs	r3, r2
    6458:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    645a:	683b      	ldr	r3, [r7, #0]
    645c:	7a1b      	ldrb	r3, [r3, #8]
    645e:	2b00      	cmp	r3, #0
    6460:	d004      	beq.n	646c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6462:	697b      	ldr	r3, [r7, #20]
    6464:	2280      	movs	r2, #128	; 0x80
    6466:	0392      	lsls	r2, r2, #14
    6468:	4313      	orrs	r3, r2
    646a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    646c:	46c0      	nop			; (mov r8, r8)
    646e:	4b13      	ldr	r3, [pc, #76]	; (64bc <system_gclk_gen_set_config+0x110>)
    6470:	4798      	blx	r3
    6472:	1e03      	subs	r3, r0, #0
    6474:	d1fb      	bne.n	646e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6476:	4b12      	ldr	r3, [pc, #72]	; (64c0 <system_gclk_gen_set_config+0x114>)
    6478:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    647a:	4a12      	ldr	r2, [pc, #72]	; (64c4 <system_gclk_gen_set_config+0x118>)
    647c:	1dfb      	adds	r3, r7, #7
    647e:	781b      	ldrb	r3, [r3, #0]
    6480:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6482:	46c0      	nop			; (mov r8, r8)
    6484:	4b0d      	ldr	r3, [pc, #52]	; (64bc <system_gclk_gen_set_config+0x110>)
    6486:	4798      	blx	r3
    6488:	1e03      	subs	r3, r0, #0
    648a:	d1fb      	bne.n	6484 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    648c:	4b0e      	ldr	r3, [pc, #56]	; (64c8 <system_gclk_gen_set_config+0x11c>)
    648e:	693a      	ldr	r2, [r7, #16]
    6490:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	4b09      	ldr	r3, [pc, #36]	; (64bc <system_gclk_gen_set_config+0x110>)
    6496:	4798      	blx	r3
    6498:	1e03      	subs	r3, r0, #0
    649a:	d1fb      	bne.n	6494 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    649c:	4b0a      	ldr	r3, [pc, #40]	; (64c8 <system_gclk_gen_set_config+0x11c>)
    649e:	4a0a      	ldr	r2, [pc, #40]	; (64c8 <system_gclk_gen_set_config+0x11c>)
    64a0:	6851      	ldr	r1, [r2, #4]
    64a2:	2280      	movs	r2, #128	; 0x80
    64a4:	0252      	lsls	r2, r2, #9
    64a6:	4011      	ands	r1, r2
    64a8:	697a      	ldr	r2, [r7, #20]
    64aa:	430a      	orrs	r2, r1
    64ac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    64ae:	4b07      	ldr	r3, [pc, #28]	; (64cc <system_gclk_gen_set_config+0x120>)
    64b0:	4798      	blx	r3
}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	46bd      	mov	sp, r7
    64b6:	b006      	add	sp, #24
    64b8:	bd80      	pop	{r7, pc}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	0000635d 	.word	0x0000635d
    64c0:	00006335 	.word	0x00006335
    64c4:	40000c08 	.word	0x40000c08
    64c8:	40000c00 	.word	0x40000c00
    64cc:	00006349 	.word	0x00006349

000064d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b082      	sub	sp, #8
    64d4:	af00      	add	r7, sp, #0
    64d6:	0002      	movs	r2, r0
    64d8:	1dfb      	adds	r3, r7, #7
    64da:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    64dc:	46c0      	nop			; (mov r8, r8)
    64de:	4b0e      	ldr	r3, [pc, #56]	; (6518 <system_gclk_gen_enable+0x48>)
    64e0:	4798      	blx	r3
    64e2:	1e03      	subs	r3, r0, #0
    64e4:	d1fb      	bne.n	64de <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    64e6:	4b0d      	ldr	r3, [pc, #52]	; (651c <system_gclk_gen_enable+0x4c>)
    64e8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    64ea:	4a0d      	ldr	r2, [pc, #52]	; (6520 <system_gclk_gen_enable+0x50>)
    64ec:	1dfb      	adds	r3, r7, #7
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    64f2:	46c0      	nop			; (mov r8, r8)
    64f4:	4b08      	ldr	r3, [pc, #32]	; (6518 <system_gclk_gen_enable+0x48>)
    64f6:	4798      	blx	r3
    64f8:	1e03      	subs	r3, r0, #0
    64fa:	d1fb      	bne.n	64f4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    64fc:	4b09      	ldr	r3, [pc, #36]	; (6524 <system_gclk_gen_enable+0x54>)
    64fe:	4a09      	ldr	r2, [pc, #36]	; (6524 <system_gclk_gen_enable+0x54>)
    6500:	6852      	ldr	r2, [r2, #4]
    6502:	2180      	movs	r1, #128	; 0x80
    6504:	0249      	lsls	r1, r1, #9
    6506:	430a      	orrs	r2, r1
    6508:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    650a:	4b07      	ldr	r3, [pc, #28]	; (6528 <system_gclk_gen_enable+0x58>)
    650c:	4798      	blx	r3
}
    650e:	46c0      	nop			; (mov r8, r8)
    6510:	46bd      	mov	sp, r7
    6512:	b002      	add	sp, #8
    6514:	bd80      	pop	{r7, pc}
    6516:	46c0      	nop			; (mov r8, r8)
    6518:	0000635d 	.word	0x0000635d
    651c:	00006335 	.word	0x00006335
    6520:	40000c04 	.word	0x40000c04
    6524:	40000c00 	.word	0x40000c00
    6528:	00006349 	.word	0x00006349

0000652c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    652c:	b580      	push	{r7, lr}
    652e:	b086      	sub	sp, #24
    6530:	af00      	add	r7, sp, #0
    6532:	0002      	movs	r2, r0
    6534:	1dfb      	adds	r3, r7, #7
    6536:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	4b2a      	ldr	r3, [pc, #168]	; (65e4 <system_gclk_gen_get_hz+0xb8>)
    653c:	4798      	blx	r3
    653e:	1e03      	subs	r3, r0, #0
    6540:	d1fb      	bne.n	653a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6542:	4b29      	ldr	r3, [pc, #164]	; (65e8 <system_gclk_gen_get_hz+0xbc>)
    6544:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6546:	4a29      	ldr	r2, [pc, #164]	; (65ec <system_gclk_gen_get_hz+0xc0>)
    6548:	1dfb      	adds	r3, r7, #7
    654a:	781b      	ldrb	r3, [r3, #0]
    654c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	4b24      	ldr	r3, [pc, #144]	; (65e4 <system_gclk_gen_get_hz+0xb8>)
    6552:	4798      	blx	r3
    6554:	1e03      	subs	r3, r0, #0
    6556:	d1fb      	bne.n	6550 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6558:	4b25      	ldr	r3, [pc, #148]	; (65f0 <system_gclk_gen_get_hz+0xc4>)
    655a:	685b      	ldr	r3, [r3, #4]
    655c:	04db      	lsls	r3, r3, #19
    655e:	0edb      	lsrs	r3, r3, #27
    6560:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6562:	0018      	movs	r0, r3
    6564:	4b23      	ldr	r3, [pc, #140]	; (65f4 <system_gclk_gen_get_hz+0xc8>)
    6566:	4798      	blx	r3
    6568:	0003      	movs	r3, r0
    656a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    656c:	4a1f      	ldr	r2, [pc, #124]	; (65ec <system_gclk_gen_get_hz+0xc0>)
    656e:	1dfb      	adds	r3, r7, #7
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6574:	4b1e      	ldr	r3, [pc, #120]	; (65f0 <system_gclk_gen_get_hz+0xc4>)
    6576:	685b      	ldr	r3, [r3, #4]
    6578:	02db      	lsls	r3, r3, #11
    657a:	0fdb      	lsrs	r3, r3, #31
    657c:	b2da      	uxtb	r2, r3
    657e:	2313      	movs	r3, #19
    6580:	18fb      	adds	r3, r7, r3
    6582:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6584:	4a1c      	ldr	r2, [pc, #112]	; (65f8 <system_gclk_gen_get_hz+0xcc>)
    6586:	1dfb      	adds	r3, r7, #7
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    658c:	46c0      	nop			; (mov r8, r8)
    658e:	4b15      	ldr	r3, [pc, #84]	; (65e4 <system_gclk_gen_get_hz+0xb8>)
    6590:	4798      	blx	r3
    6592:	1e03      	subs	r3, r0, #0
    6594:	d1fb      	bne.n	658e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6596:	4b16      	ldr	r3, [pc, #88]	; (65f0 <system_gclk_gen_get_hz+0xc4>)
    6598:	689b      	ldr	r3, [r3, #8]
    659a:	021b      	lsls	r3, r3, #8
    659c:	0c1b      	lsrs	r3, r3, #16
    659e:	b29b      	uxth	r3, r3
    65a0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    65a2:	4b16      	ldr	r3, [pc, #88]	; (65fc <system_gclk_gen_get_hz+0xd0>)
    65a4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    65a6:	2313      	movs	r3, #19
    65a8:	18fb      	adds	r3, r7, r3
    65aa:	781b      	ldrb	r3, [r3, #0]
    65ac:	2b00      	cmp	r3, #0
    65ae:	d109      	bne.n	65c4 <system_gclk_gen_get_hz+0x98>
    65b0:	68fb      	ldr	r3, [r7, #12]
    65b2:	2b01      	cmp	r3, #1
    65b4:	d906      	bls.n	65c4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    65b6:	4b12      	ldr	r3, [pc, #72]	; (6600 <system_gclk_gen_get_hz+0xd4>)
    65b8:	68f9      	ldr	r1, [r7, #12]
    65ba:	6978      	ldr	r0, [r7, #20]
    65bc:	4798      	blx	r3
    65be:	0003      	movs	r3, r0
    65c0:	617b      	str	r3, [r7, #20]
    65c2:	e00a      	b.n	65da <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    65c4:	2313      	movs	r3, #19
    65c6:	18fb      	adds	r3, r7, r3
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	2b00      	cmp	r3, #0
    65cc:	d005      	beq.n	65da <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    65ce:	68fb      	ldr	r3, [r7, #12]
    65d0:	3301      	adds	r3, #1
    65d2:	697a      	ldr	r2, [r7, #20]
    65d4:	40da      	lsrs	r2, r3
    65d6:	0013      	movs	r3, r2
    65d8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    65da:	697b      	ldr	r3, [r7, #20]
}
    65dc:	0018      	movs	r0, r3
    65de:	46bd      	mov	sp, r7
    65e0:	b006      	add	sp, #24
    65e2:	bd80      	pop	{r7, pc}
    65e4:	0000635d 	.word	0x0000635d
    65e8:	00006335 	.word	0x00006335
    65ec:	40000c04 	.word	0x40000c04
    65f0:	40000c00 	.word	0x40000c00
    65f4:	00005bd9 	.word	0x00005bd9
    65f8:	40000c08 	.word	0x40000c08
    65fc:	00006349 	.word	0x00006349
    6600:	0000afc5 	.word	0x0000afc5

00006604 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6604:	b580      	push	{r7, lr}
    6606:	b084      	sub	sp, #16
    6608:	af00      	add	r7, sp, #0
    660a:	0002      	movs	r2, r0
    660c:	6039      	str	r1, [r7, #0]
    660e:	1dfb      	adds	r3, r7, #7
    6610:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6612:	1dfb      	adds	r3, r7, #7
    6614:	781b      	ldrb	r3, [r3, #0]
    6616:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6618:	683b      	ldr	r3, [r7, #0]
    661a:	781b      	ldrb	r3, [r3, #0]
    661c:	021b      	lsls	r3, r3, #8
    661e:	001a      	movs	r2, r3
    6620:	68fb      	ldr	r3, [r7, #12]
    6622:	4313      	orrs	r3, r2
    6624:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6626:	1dfb      	adds	r3, r7, #7
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	0018      	movs	r0, r3
    662c:	4b04      	ldr	r3, [pc, #16]	; (6640 <system_gclk_chan_set_config+0x3c>)
    662e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6630:	4b04      	ldr	r3, [pc, #16]	; (6644 <system_gclk_chan_set_config+0x40>)
    6632:	68fa      	ldr	r2, [r7, #12]
    6634:	b292      	uxth	r2, r2
    6636:	805a      	strh	r2, [r3, #2]
}
    6638:	46c0      	nop			; (mov r8, r8)
    663a:	46bd      	mov	sp, r7
    663c:	b004      	add	sp, #16
    663e:	bd80      	pop	{r7, pc}
    6640:	00006691 	.word	0x00006691
    6644:	40000c00 	.word	0x40000c00

00006648 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6648:	b580      	push	{r7, lr}
    664a:	b082      	sub	sp, #8
    664c:	af00      	add	r7, sp, #0
    664e:	0002      	movs	r2, r0
    6650:	1dfb      	adds	r3, r7, #7
    6652:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6654:	4b0a      	ldr	r3, [pc, #40]	; (6680 <system_gclk_chan_enable+0x38>)
    6656:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6658:	4a0a      	ldr	r2, [pc, #40]	; (6684 <system_gclk_chan_enable+0x3c>)
    665a:	1dfb      	adds	r3, r7, #7
    665c:	781b      	ldrb	r3, [r3, #0]
    665e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6660:	4909      	ldr	r1, [pc, #36]	; (6688 <system_gclk_chan_enable+0x40>)
    6662:	4b09      	ldr	r3, [pc, #36]	; (6688 <system_gclk_chan_enable+0x40>)
    6664:	885b      	ldrh	r3, [r3, #2]
    6666:	b29b      	uxth	r3, r3
    6668:	2280      	movs	r2, #128	; 0x80
    666a:	01d2      	lsls	r2, r2, #7
    666c:	4313      	orrs	r3, r2
    666e:	b29b      	uxth	r3, r3
    6670:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6672:	4b06      	ldr	r3, [pc, #24]	; (668c <system_gclk_chan_enable+0x44>)
    6674:	4798      	blx	r3
}
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	46bd      	mov	sp, r7
    667a:	b002      	add	sp, #8
    667c:	bd80      	pop	{r7, pc}
    667e:	46c0      	nop			; (mov r8, r8)
    6680:	00006335 	.word	0x00006335
    6684:	40000c02 	.word	0x40000c02
    6688:	40000c00 	.word	0x40000c00
    668c:	00006349 	.word	0x00006349

00006690 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6690:	b580      	push	{r7, lr}
    6692:	b084      	sub	sp, #16
    6694:	af00      	add	r7, sp, #0
    6696:	0002      	movs	r2, r0
    6698:	1dfb      	adds	r3, r7, #7
    669a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    669c:	4b1c      	ldr	r3, [pc, #112]	; (6710 <system_gclk_chan_disable+0x80>)
    669e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    66a0:	4a1c      	ldr	r2, [pc, #112]	; (6714 <system_gclk_chan_disable+0x84>)
    66a2:	1dfb      	adds	r3, r7, #7
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    66a8:	4b1b      	ldr	r3, [pc, #108]	; (6718 <system_gclk_chan_disable+0x88>)
    66aa:	885b      	ldrh	r3, [r3, #2]
    66ac:	051b      	lsls	r3, r3, #20
    66ae:	0f1b      	lsrs	r3, r3, #28
    66b0:	b2db      	uxtb	r3, r3
    66b2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    66b4:	4a18      	ldr	r2, [pc, #96]	; (6718 <system_gclk_chan_disable+0x88>)
    66b6:	8853      	ldrh	r3, [r2, #2]
    66b8:	4918      	ldr	r1, [pc, #96]	; (671c <system_gclk_chan_disable+0x8c>)
    66ba:	400b      	ands	r3, r1
    66bc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    66be:	4a16      	ldr	r2, [pc, #88]	; (6718 <system_gclk_chan_disable+0x88>)
    66c0:	4b15      	ldr	r3, [pc, #84]	; (6718 <system_gclk_chan_disable+0x88>)
    66c2:	885b      	ldrh	r3, [r3, #2]
    66c4:	b29b      	uxth	r3, r3
    66c6:	4916      	ldr	r1, [pc, #88]	; (6720 <system_gclk_chan_disable+0x90>)
    66c8:	400b      	ands	r3, r1
    66ca:	b29b      	uxth	r3, r3
    66cc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    66ce:	46c0      	nop			; (mov r8, r8)
    66d0:	4b11      	ldr	r3, [pc, #68]	; (6718 <system_gclk_chan_disable+0x88>)
    66d2:	885b      	ldrh	r3, [r3, #2]
    66d4:	b29b      	uxth	r3, r3
    66d6:	001a      	movs	r2, r3
    66d8:	2380      	movs	r3, #128	; 0x80
    66da:	01db      	lsls	r3, r3, #7
    66dc:	4013      	ands	r3, r2
    66de:	d1f7      	bne.n	66d0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    66e0:	4a0d      	ldr	r2, [pc, #52]	; (6718 <system_gclk_chan_disable+0x88>)
    66e2:	68fb      	ldr	r3, [r7, #12]
    66e4:	b2db      	uxtb	r3, r3
    66e6:	1c19      	adds	r1, r3, #0
    66e8:	230f      	movs	r3, #15
    66ea:	400b      	ands	r3, r1
    66ec:	b2d9      	uxtb	r1, r3
    66ee:	8853      	ldrh	r3, [r2, #2]
    66f0:	1c08      	adds	r0, r1, #0
    66f2:	210f      	movs	r1, #15
    66f4:	4001      	ands	r1, r0
    66f6:	0208      	lsls	r0, r1, #8
    66f8:	4908      	ldr	r1, [pc, #32]	; (671c <system_gclk_chan_disable+0x8c>)
    66fa:	400b      	ands	r3, r1
    66fc:	1c19      	adds	r1, r3, #0
    66fe:	1c03      	adds	r3, r0, #0
    6700:	430b      	orrs	r3, r1
    6702:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6704:	4b07      	ldr	r3, [pc, #28]	; (6724 <system_gclk_chan_disable+0x94>)
    6706:	4798      	blx	r3
}
    6708:	46c0      	nop			; (mov r8, r8)
    670a:	46bd      	mov	sp, r7
    670c:	b004      	add	sp, #16
    670e:	bd80      	pop	{r7, pc}
    6710:	00006335 	.word	0x00006335
    6714:	40000c02 	.word	0x40000c02
    6718:	40000c00 	.word	0x40000c00
    671c:	fffff0ff 	.word	0xfffff0ff
    6720:	ffffbfff 	.word	0xffffbfff
    6724:	00006349 	.word	0x00006349

00006728 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6728:	b580      	push	{r7, lr}
    672a:	b084      	sub	sp, #16
    672c:	af00      	add	r7, sp, #0
    672e:	0002      	movs	r2, r0
    6730:	1dfb      	adds	r3, r7, #7
    6732:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6734:	4b0d      	ldr	r3, [pc, #52]	; (676c <system_gclk_chan_get_hz+0x44>)
    6736:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6738:	4a0d      	ldr	r2, [pc, #52]	; (6770 <system_gclk_chan_get_hz+0x48>)
    673a:	1dfb      	adds	r3, r7, #7
    673c:	781b      	ldrb	r3, [r3, #0]
    673e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6740:	4b0c      	ldr	r3, [pc, #48]	; (6774 <system_gclk_chan_get_hz+0x4c>)
    6742:	885b      	ldrh	r3, [r3, #2]
    6744:	051b      	lsls	r3, r3, #20
    6746:	0f1b      	lsrs	r3, r3, #28
    6748:	b2da      	uxtb	r2, r3
    674a:	230f      	movs	r3, #15
    674c:	18fb      	adds	r3, r7, r3
    674e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6750:	4b09      	ldr	r3, [pc, #36]	; (6778 <system_gclk_chan_get_hz+0x50>)
    6752:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6754:	230f      	movs	r3, #15
    6756:	18fb      	adds	r3, r7, r3
    6758:	781b      	ldrb	r3, [r3, #0]
    675a:	0018      	movs	r0, r3
    675c:	4b07      	ldr	r3, [pc, #28]	; (677c <system_gclk_chan_get_hz+0x54>)
    675e:	4798      	blx	r3
    6760:	0003      	movs	r3, r0
}
    6762:	0018      	movs	r0, r3
    6764:	46bd      	mov	sp, r7
    6766:	b004      	add	sp, #16
    6768:	bd80      	pop	{r7, pc}
    676a:	46c0      	nop			; (mov r8, r8)
    676c:	00006335 	.word	0x00006335
    6770:	40000c02 	.word	0x40000c02
    6774:	40000c00 	.word	0x40000c00
    6778:	00006349 	.word	0x00006349
    677c:	0000652d 	.word	0x0000652d

00006780 <system_pinmux_get_group_from_gpio_pin>:
{
    6780:	b580      	push	{r7, lr}
    6782:	b084      	sub	sp, #16
    6784:	af00      	add	r7, sp, #0
    6786:	0002      	movs	r2, r0
    6788:	1dfb      	adds	r3, r7, #7
    678a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    678c:	230f      	movs	r3, #15
    678e:	18fb      	adds	r3, r7, r3
    6790:	1dfa      	adds	r2, r7, #7
    6792:	7812      	ldrb	r2, [r2, #0]
    6794:	09d2      	lsrs	r2, r2, #7
    6796:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6798:	230e      	movs	r3, #14
    679a:	18fb      	adds	r3, r7, r3
    679c:	1dfa      	adds	r2, r7, #7
    679e:	7812      	ldrb	r2, [r2, #0]
    67a0:	0952      	lsrs	r2, r2, #5
    67a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    67a4:	4b0d      	ldr	r3, [pc, #52]	; (67dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    67a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    67a8:	230f      	movs	r3, #15
    67aa:	18fb      	adds	r3, r7, r3
    67ac:	781b      	ldrb	r3, [r3, #0]
    67ae:	2b00      	cmp	r3, #0
    67b0:	d10f      	bne.n	67d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    67b2:	230f      	movs	r3, #15
    67b4:	18fb      	adds	r3, r7, r3
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	009b      	lsls	r3, r3, #2
    67ba:	2210      	movs	r2, #16
    67bc:	4694      	mov	ip, r2
    67be:	44bc      	add	ip, r7
    67c0:	4463      	add	r3, ip
    67c2:	3b08      	subs	r3, #8
    67c4:	681a      	ldr	r2, [r3, #0]
    67c6:	230e      	movs	r3, #14
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	01db      	lsls	r3, r3, #7
    67ce:	18d3      	adds	r3, r2, r3
    67d0:	e000      	b.n	67d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    67d2:	2300      	movs	r3, #0
}
    67d4:	0018      	movs	r0, r3
    67d6:	46bd      	mov	sp, r7
    67d8:	b004      	add	sp, #16
    67da:	bd80      	pop	{r7, pc}
    67dc:	41004400 	.word	0x41004400

000067e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    67e0:	b580      	push	{r7, lr}
    67e2:	b088      	sub	sp, #32
    67e4:	af00      	add	r7, sp, #0
    67e6:	60f8      	str	r0, [r7, #12]
    67e8:	60b9      	str	r1, [r7, #8]
    67ea:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    67ec:	2300      	movs	r3, #0
    67ee:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    67f0:	687b      	ldr	r3, [r7, #4]
    67f2:	78db      	ldrb	r3, [r3, #3]
    67f4:	2201      	movs	r2, #1
    67f6:	4053      	eors	r3, r2
    67f8:	b2db      	uxtb	r3, r3
    67fa:	2b00      	cmp	r3, #0
    67fc:	d035      	beq.n	686a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	781b      	ldrb	r3, [r3, #0]
    6802:	2b80      	cmp	r3, #128	; 0x80
    6804:	d00b      	beq.n	681e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6806:	69fb      	ldr	r3, [r7, #28]
    6808:	2280      	movs	r2, #128	; 0x80
    680a:	0252      	lsls	r2, r2, #9
    680c:	4313      	orrs	r3, r2
    680e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	781b      	ldrb	r3, [r3, #0]
    6814:	061b      	lsls	r3, r3, #24
    6816:	001a      	movs	r2, r3
    6818:	69fb      	ldr	r3, [r7, #28]
    681a:	4313      	orrs	r3, r2
    681c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    681e:	687b      	ldr	r3, [r7, #4]
    6820:	785b      	ldrb	r3, [r3, #1]
    6822:	2b00      	cmp	r3, #0
    6824:	d003      	beq.n	682e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    682a:	2b02      	cmp	r3, #2
    682c:	d110      	bne.n	6850 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    682e:	69fb      	ldr	r3, [r7, #28]
    6830:	2280      	movs	r2, #128	; 0x80
    6832:	0292      	lsls	r2, r2, #10
    6834:	4313      	orrs	r3, r2
    6836:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	789b      	ldrb	r3, [r3, #2]
    683c:	2b00      	cmp	r3, #0
    683e:	d004      	beq.n	684a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6840:	69fb      	ldr	r3, [r7, #28]
    6842:	2280      	movs	r2, #128	; 0x80
    6844:	02d2      	lsls	r2, r2, #11
    6846:	4313      	orrs	r3, r2
    6848:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    684a:	68fb      	ldr	r3, [r7, #12]
    684c:	68ba      	ldr	r2, [r7, #8]
    684e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	785b      	ldrb	r3, [r3, #1]
    6854:	2b01      	cmp	r3, #1
    6856:	d003      	beq.n	6860 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6858:	687b      	ldr	r3, [r7, #4]
    685a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    685c:	2b02      	cmp	r3, #2
    685e:	d107      	bne.n	6870 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6860:	69fb      	ldr	r3, [r7, #28]
    6862:	4a22      	ldr	r2, [pc, #136]	; (68ec <_system_pinmux_config+0x10c>)
    6864:	4013      	ands	r3, r2
    6866:	61fb      	str	r3, [r7, #28]
    6868:	e002      	b.n	6870 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    686a:	68fb      	ldr	r3, [r7, #12]
    686c:	68ba      	ldr	r2, [r7, #8]
    686e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6870:	68bb      	ldr	r3, [r7, #8]
    6872:	041b      	lsls	r3, r3, #16
    6874:	0c1b      	lsrs	r3, r3, #16
    6876:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6878:	68bb      	ldr	r3, [r7, #8]
    687a:	0c1b      	lsrs	r3, r3, #16
    687c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    687e:	69ba      	ldr	r2, [r7, #24]
    6880:	69fb      	ldr	r3, [r7, #28]
    6882:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6884:	22a0      	movs	r2, #160	; 0xa0
    6886:	05d2      	lsls	r2, r2, #23
    6888:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    688a:	68fb      	ldr	r3, [r7, #12]
    688c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    688e:	697a      	ldr	r2, [r7, #20]
    6890:	69fb      	ldr	r3, [r7, #28]
    6892:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6894:	22d0      	movs	r2, #208	; 0xd0
    6896:	0612      	lsls	r2, r2, #24
    6898:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    689e:	687b      	ldr	r3, [r7, #4]
    68a0:	78db      	ldrb	r3, [r3, #3]
    68a2:	2201      	movs	r2, #1
    68a4:	4053      	eors	r3, r2
    68a6:	b2db      	uxtb	r3, r3
    68a8:	2b00      	cmp	r3, #0
    68aa:	d01a      	beq.n	68e2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    68ac:	69fa      	ldr	r2, [r7, #28]
    68ae:	2380      	movs	r3, #128	; 0x80
    68b0:	02db      	lsls	r3, r3, #11
    68b2:	4013      	ands	r3, r2
    68b4:	d00a      	beq.n	68cc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	789b      	ldrb	r3, [r3, #2]
    68ba:	2b01      	cmp	r3, #1
    68bc:	d103      	bne.n	68c6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    68be:	68fb      	ldr	r3, [r7, #12]
    68c0:	68ba      	ldr	r2, [r7, #8]
    68c2:	619a      	str	r2, [r3, #24]
    68c4:	e002      	b.n	68cc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    68c6:	68fb      	ldr	r3, [r7, #12]
    68c8:	68ba      	ldr	r2, [r7, #8]
    68ca:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	785b      	ldrb	r3, [r3, #1]
    68d0:	2b01      	cmp	r3, #1
    68d2:	d003      	beq.n	68dc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    68d8:	2b02      	cmp	r3, #2
    68da:	d102      	bne.n	68e2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    68dc:	68fb      	ldr	r3, [r7, #12]
    68de:	68ba      	ldr	r2, [r7, #8]
    68e0:	609a      	str	r2, [r3, #8]
		}
	}
}
    68e2:	46c0      	nop			; (mov r8, r8)
    68e4:	46bd      	mov	sp, r7
    68e6:	b008      	add	sp, #32
    68e8:	bd80      	pop	{r7, pc}
    68ea:	46c0      	nop			; (mov r8, r8)
    68ec:	fffbffff 	.word	0xfffbffff

000068f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	0002      	movs	r2, r0
    68f8:	6039      	str	r1, [r7, #0]
    68fa:	1dfb      	adds	r3, r7, #7
    68fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    68fe:	1dfb      	adds	r3, r7, #7
    6900:	781b      	ldrb	r3, [r3, #0]
    6902:	0018      	movs	r0, r3
    6904:	4b0a      	ldr	r3, [pc, #40]	; (6930 <system_pinmux_pin_set_config+0x40>)
    6906:	4798      	blx	r3
    6908:	0003      	movs	r3, r0
    690a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    690c:	1dfb      	adds	r3, r7, #7
    690e:	781b      	ldrb	r3, [r3, #0]
    6910:	221f      	movs	r2, #31
    6912:	4013      	ands	r3, r2
    6914:	2201      	movs	r2, #1
    6916:	409a      	lsls	r2, r3
    6918:	0013      	movs	r3, r2
    691a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    691c:	683a      	ldr	r2, [r7, #0]
    691e:	68b9      	ldr	r1, [r7, #8]
    6920:	68fb      	ldr	r3, [r7, #12]
    6922:	0018      	movs	r0, r3
    6924:	4b03      	ldr	r3, [pc, #12]	; (6934 <system_pinmux_pin_set_config+0x44>)
    6926:	4798      	blx	r3
}
    6928:	46c0      	nop			; (mov r8, r8)
    692a:	46bd      	mov	sp, r7
    692c:	b004      	add	sp, #16
    692e:	bd80      	pop	{r7, pc}
    6930:	00006781 	.word	0x00006781
    6934:	000067e1 	.word	0x000067e1

00006938 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6938:	b580      	push	{r7, lr}
    693a:	af00      	add	r7, sp, #0
	return;
    693c:	46c0      	nop			; (mov r8, r8)
}
    693e:	46bd      	mov	sp, r7
    6940:	bd80      	pop	{r7, pc}
	...

00006944 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6944:	b580      	push	{r7, lr}
    6946:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6948:	4b06      	ldr	r3, [pc, #24]	; (6964 <system_init+0x20>)
    694a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    694c:	4b06      	ldr	r3, [pc, #24]	; (6968 <system_init+0x24>)
    694e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6950:	4b06      	ldr	r3, [pc, #24]	; (696c <system_init+0x28>)
    6952:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6954:	4b06      	ldr	r3, [pc, #24]	; (6970 <system_init+0x2c>)
    6956:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6958:	4b06      	ldr	r3, [pc, #24]	; (6974 <system_init+0x30>)
    695a:	4798      	blx	r3
}
    695c:	46c0      	nop			; (mov r8, r8)
    695e:	46bd      	mov	sp, r7
    6960:	bd80      	pop	{r7, pc}
    6962:	46c0      	nop			; (mov r8, r8)
    6964:	00006069 	.word	0x00006069
    6968:	000002f9 	.word	0x000002f9
    696c:	00006939 	.word	0x00006939
    6970:	00006939 	.word	0x00006939
    6974:	00006939 	.word	0x00006939

00006978 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6978:	b580      	push	{r7, lr}
    697a:	b082      	sub	sp, #8
    697c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    697e:	4b2f      	ldr	r3, [pc, #188]	; (6a3c <Reset_Handler+0xc4>)
    6980:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6982:	4b2f      	ldr	r3, [pc, #188]	; (6a40 <Reset_Handler+0xc8>)
    6984:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6986:	687a      	ldr	r2, [r7, #4]
    6988:	683b      	ldr	r3, [r7, #0]
    698a:	429a      	cmp	r2, r3
    698c:	d00c      	beq.n	69a8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    698e:	e007      	b.n	69a0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6990:	683b      	ldr	r3, [r7, #0]
    6992:	1d1a      	adds	r2, r3, #4
    6994:	603a      	str	r2, [r7, #0]
    6996:	687a      	ldr	r2, [r7, #4]
    6998:	1d11      	adds	r1, r2, #4
    699a:	6079      	str	r1, [r7, #4]
    699c:	6812      	ldr	r2, [r2, #0]
    699e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    69a0:	683a      	ldr	r2, [r7, #0]
    69a2:	4b28      	ldr	r3, [pc, #160]	; (6a44 <Reset_Handler+0xcc>)
    69a4:	429a      	cmp	r2, r3
    69a6:	d3f3      	bcc.n	6990 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    69a8:	4b27      	ldr	r3, [pc, #156]	; (6a48 <Reset_Handler+0xd0>)
    69aa:	603b      	str	r3, [r7, #0]
    69ac:	e004      	b.n	69b8 <Reset_Handler+0x40>
                *pDest++ = 0;
    69ae:	683b      	ldr	r3, [r7, #0]
    69b0:	1d1a      	adds	r2, r3, #4
    69b2:	603a      	str	r2, [r7, #0]
    69b4:	2200      	movs	r2, #0
    69b6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    69b8:	683a      	ldr	r2, [r7, #0]
    69ba:	4b24      	ldr	r3, [pc, #144]	; (6a4c <Reset_Handler+0xd4>)
    69bc:	429a      	cmp	r2, r3
    69be:	d3f6      	bcc.n	69ae <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    69c0:	4b23      	ldr	r3, [pc, #140]	; (6a50 <Reset_Handler+0xd8>)
    69c2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    69c4:	4b23      	ldr	r3, [pc, #140]	; (6a54 <Reset_Handler+0xdc>)
    69c6:	687a      	ldr	r2, [r7, #4]
    69c8:	21ff      	movs	r1, #255	; 0xff
    69ca:	438a      	bics	r2, r1
    69cc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    69ce:	4a22      	ldr	r2, [pc, #136]	; (6a58 <Reset_Handler+0xe0>)
    69d0:	2390      	movs	r3, #144	; 0x90
    69d2:	005b      	lsls	r3, r3, #1
    69d4:	2102      	movs	r1, #2
    69d6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    69d8:	4a20      	ldr	r2, [pc, #128]	; (6a5c <Reset_Handler+0xe4>)
    69da:	78d3      	ldrb	r3, [r2, #3]
    69dc:	2103      	movs	r1, #3
    69de:	438b      	bics	r3, r1
    69e0:	1c19      	adds	r1, r3, #0
    69e2:	2302      	movs	r3, #2
    69e4:	430b      	orrs	r3, r1
    69e6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    69e8:	4a1c      	ldr	r2, [pc, #112]	; (6a5c <Reset_Handler+0xe4>)
    69ea:	78d3      	ldrb	r3, [r2, #3]
    69ec:	210c      	movs	r1, #12
    69ee:	438b      	bics	r3, r1
    69f0:	1c19      	adds	r1, r3, #0
    69f2:	2308      	movs	r3, #8
    69f4:	430b      	orrs	r3, r1
    69f6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    69f8:	4a19      	ldr	r2, [pc, #100]	; (6a60 <Reset_Handler+0xe8>)
    69fa:	7b93      	ldrb	r3, [r2, #14]
    69fc:	2130      	movs	r1, #48	; 0x30
    69fe:	438b      	bics	r3, r1
    6a00:	1c19      	adds	r1, r3, #0
    6a02:	2320      	movs	r3, #32
    6a04:	430b      	orrs	r3, r1
    6a06:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6a08:	4a15      	ldr	r2, [pc, #84]	; (6a60 <Reset_Handler+0xe8>)
    6a0a:	7b93      	ldrb	r3, [r2, #14]
    6a0c:	210c      	movs	r1, #12
    6a0e:	438b      	bics	r3, r1
    6a10:	1c19      	adds	r1, r3, #0
    6a12:	2308      	movs	r3, #8
    6a14:	430b      	orrs	r3, r1
    6a16:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6a18:	4a11      	ldr	r2, [pc, #68]	; (6a60 <Reset_Handler+0xe8>)
    6a1a:	7b93      	ldrb	r3, [r2, #14]
    6a1c:	2103      	movs	r1, #3
    6a1e:	438b      	bics	r3, r1
    6a20:	1c19      	adds	r1, r3, #0
    6a22:	2302      	movs	r3, #2
    6a24:	430b      	orrs	r3, r1
    6a26:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6a28:	4a0e      	ldr	r2, [pc, #56]	; (6a64 <Reset_Handler+0xec>)
    6a2a:	6853      	ldr	r3, [r2, #4]
    6a2c:	2180      	movs	r1, #128	; 0x80
    6a2e:	430b      	orrs	r3, r1
    6a30:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6a32:	4b0d      	ldr	r3, [pc, #52]	; (6a68 <Reset_Handler+0xf0>)
    6a34:	4798      	blx	r3

        /* Branch to main function */
        main();
    6a36:	4b0d      	ldr	r3, [pc, #52]	; (6a6c <Reset_Handler+0xf4>)
    6a38:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6a3a:	e7fe      	b.n	6a3a <Reset_Handler+0xc2>
    6a3c:	0000cdd8 	.word	0x0000cdd8
    6a40:	20000000 	.word	0x20000000
    6a44:	20000094 	.word	0x20000094
    6a48:	20000094 	.word	0x20000094
    6a4c:	20000cd8 	.word	0x20000cd8
    6a50:	00000000 	.word	0x00000000
    6a54:	e000ed00 	.word	0xe000ed00
    6a58:	41007000 	.word	0x41007000
    6a5c:	41005000 	.word	0x41005000
    6a60:	41004800 	.word	0x41004800
    6a64:	41004000 	.word	0x41004000
    6a68:	0000b305 	.word	0x0000b305
    6a6c:	0000aa09 	.word	0x0000aa09

00006a70 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	af00      	add	r7, sp, #0
        while (1) {
    6a74:	e7fe      	b.n	6a74 <Dummy_Handler+0x4>
	...

00006a78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6a78:	b580      	push	{r7, lr}
    6a7a:	b086      	sub	sp, #24
    6a7c:	af00      	add	r7, sp, #0
    6a7e:	60f8      	str	r0, [r7, #12]
    6a80:	60b9      	str	r1, [r7, #8]
    6a82:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6a84:	2300      	movs	r3, #0
    6a86:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6a88:	68fb      	ldr	r3, [r7, #12]
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d012      	beq.n	6ab4 <_read+0x3c>
		return -1;
    6a8e:	2301      	movs	r3, #1
    6a90:	425b      	negs	r3, r3
    6a92:	e013      	b.n	6abc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6a94:	4b0b      	ldr	r3, [pc, #44]	; (6ac4 <_read+0x4c>)
    6a96:	681a      	ldr	r2, [r3, #0]
    6a98:	4b0b      	ldr	r3, [pc, #44]	; (6ac8 <_read+0x50>)
    6a9a:	681b      	ldr	r3, [r3, #0]
    6a9c:	68b9      	ldr	r1, [r7, #8]
    6a9e:	0018      	movs	r0, r3
    6aa0:	4790      	blx	r2
		ptr++;
    6aa2:	68bb      	ldr	r3, [r7, #8]
    6aa4:	3301      	adds	r3, #1
    6aa6:	60bb      	str	r3, [r7, #8]
		nChars++;
    6aa8:	697b      	ldr	r3, [r7, #20]
    6aaa:	3301      	adds	r3, #1
    6aac:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6aae:	687b      	ldr	r3, [r7, #4]
    6ab0:	3b01      	subs	r3, #1
    6ab2:	607b      	str	r3, [r7, #4]
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	dcec      	bgt.n	6a94 <_read+0x1c>
	}
	return nChars;
    6aba:	697b      	ldr	r3, [r7, #20]
}
    6abc:	0018      	movs	r0, r3
    6abe:	46bd      	mov	sp, r7
    6ac0:	b006      	add	sp, #24
    6ac2:	bd80      	pop	{r7, pc}
    6ac4:	200009f0 	.word	0x200009f0
    6ac8:	200009f8 	.word	0x200009f8

00006acc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6acc:	b580      	push	{r7, lr}
    6ace:	b086      	sub	sp, #24
    6ad0:	af00      	add	r7, sp, #0
    6ad2:	60f8      	str	r0, [r7, #12]
    6ad4:	60b9      	str	r1, [r7, #8]
    6ad6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6ad8:	2300      	movs	r3, #0
    6ada:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6adc:	68fb      	ldr	r3, [r7, #12]
    6ade:	2b01      	cmp	r3, #1
    6ae0:	d01d      	beq.n	6b1e <_write+0x52>
    6ae2:	68fb      	ldr	r3, [r7, #12]
    6ae4:	2b02      	cmp	r3, #2
    6ae6:	d01a      	beq.n	6b1e <_write+0x52>
    6ae8:	68fb      	ldr	r3, [r7, #12]
    6aea:	2b03      	cmp	r3, #3
    6aec:	d017      	beq.n	6b1e <_write+0x52>
		return -1;
    6aee:	2301      	movs	r3, #1
    6af0:	425b      	negs	r3, r3
    6af2:	e018      	b.n	6b26 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6af4:	4b0e      	ldr	r3, [pc, #56]	; (6b30 <_write+0x64>)
    6af6:	681a      	ldr	r2, [r3, #0]
    6af8:	4b0e      	ldr	r3, [pc, #56]	; (6b34 <_write+0x68>)
    6afa:	6818      	ldr	r0, [r3, #0]
    6afc:	68bb      	ldr	r3, [r7, #8]
    6afe:	1c59      	adds	r1, r3, #1
    6b00:	60b9      	str	r1, [r7, #8]
    6b02:	781b      	ldrb	r3, [r3, #0]
    6b04:	0019      	movs	r1, r3
    6b06:	4790      	blx	r2
    6b08:	1e03      	subs	r3, r0, #0
    6b0a:	da02      	bge.n	6b12 <_write+0x46>
			return -1;
    6b0c:	2301      	movs	r3, #1
    6b0e:	425b      	negs	r3, r3
    6b10:	e009      	b.n	6b26 <_write+0x5a>
		}
		++nChars;
    6b12:	697b      	ldr	r3, [r7, #20]
    6b14:	3301      	adds	r3, #1
    6b16:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	3b01      	subs	r3, #1
    6b1c:	607b      	str	r3, [r7, #4]
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	2b00      	cmp	r3, #0
    6b22:	d1e7      	bne.n	6af4 <_write+0x28>
	}
	return nChars;
    6b24:	697b      	ldr	r3, [r7, #20]
}
    6b26:	0018      	movs	r0, r3
    6b28:	46bd      	mov	sp, r7
    6b2a:	b006      	add	sp, #24
    6b2c:	bd80      	pop	{r7, pc}
    6b2e:	46c0      	nop			; (mov r8, r8)
    6b30:	200009f4 	.word	0x200009f4
    6b34:	200009f8 	.word	0x200009f8

00006b38 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b084      	sub	sp, #16
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6b40:	4b0a      	ldr	r3, [pc, #40]	; (6b6c <_sbrk+0x34>)
    6b42:	681b      	ldr	r3, [r3, #0]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d102      	bne.n	6b4e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6b48:	4b08      	ldr	r3, [pc, #32]	; (6b6c <_sbrk+0x34>)
    6b4a:	4a09      	ldr	r2, [pc, #36]	; (6b70 <_sbrk+0x38>)
    6b4c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6b4e:	4b07      	ldr	r3, [pc, #28]	; (6b6c <_sbrk+0x34>)
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6b54:	4b05      	ldr	r3, [pc, #20]	; (6b6c <_sbrk+0x34>)
    6b56:	681a      	ldr	r2, [r3, #0]
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	18d2      	adds	r2, r2, r3
    6b5c:	4b03      	ldr	r3, [pc, #12]	; (6b6c <_sbrk+0x34>)
    6b5e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6b60:	68fb      	ldr	r3, [r7, #12]
}
    6b62:	0018      	movs	r0, r3
    6b64:	46bd      	mov	sp, r7
    6b66:	b004      	add	sp, #16
    6b68:	bd80      	pop	{r7, pc}
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	20000178 	.word	0x20000178
    6b70:	20002cd8 	.word	0x20002cd8

00006b74 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6b74:	b580      	push	{r7, lr}
    6b76:	b082      	sub	sp, #8
    6b78:	af00      	add	r7, sp, #0
    6b7a:	6078      	str	r0, [r7, #4]
	return -1;
    6b7c:	2301      	movs	r3, #1
    6b7e:	425b      	negs	r3, r3
}
    6b80:	0018      	movs	r0, r3
    6b82:	46bd      	mov	sp, r7
    6b84:	b002      	add	sp, #8
    6b86:	bd80      	pop	{r7, pc}

00006b88 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6b88:	b580      	push	{r7, lr}
    6b8a:	b082      	sub	sp, #8
    6b8c:	af00      	add	r7, sp, #0
    6b8e:	6078      	str	r0, [r7, #4]
    6b90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6b92:	683b      	ldr	r3, [r7, #0]
    6b94:	2280      	movs	r2, #128	; 0x80
    6b96:	0192      	lsls	r2, r2, #6
    6b98:	605a      	str	r2, [r3, #4]

	return 0;
    6b9a:	2300      	movs	r3, #0
}
    6b9c:	0018      	movs	r0, r3
    6b9e:	46bd      	mov	sp, r7
    6ba0:	b002      	add	sp, #8
    6ba2:	bd80      	pop	{r7, pc}

00006ba4 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b084      	sub	sp, #16
    6ba8:	af00      	add	r7, sp, #0
    6baa:	60f8      	str	r0, [r7, #12]
    6bac:	60b9      	str	r1, [r7, #8]
    6bae:	607a      	str	r2, [r7, #4]
	return 0;
    6bb0:	2300      	movs	r3, #0
}
    6bb2:	0018      	movs	r0, r3
    6bb4:	46bd      	mov	sp, r7
    6bb6:	b004      	add	sp, #16
    6bb8:	bd80      	pop	{r7, pc}

00006bba <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    6bba:	b580      	push	{r7, lr}
    6bbc:	b082      	sub	sp, #8
    6bbe:	af00      	add	r7, sp, #0
    6bc0:	6078      	str	r0, [r7, #4]
	time->second = 0;
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	2200      	movs	r2, #0
    6bc6:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    6bc8:	687b      	ldr	r3, [r7, #4]
    6bca:	2200      	movs	r2, #0
    6bcc:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	2200      	movs	r2, #0
    6bd2:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	2200      	movs	r2, #0
    6bd8:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	2201      	movs	r2, #1
    6bde:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	2201      	movs	r2, #1
    6be4:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	22fa      	movs	r2, #250	; 0xfa
    6bea:	00d2      	lsls	r2, r2, #3
    6bec:	80da      	strh	r2, [r3, #6]
}
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	46bd      	mov	sp, r7
    6bf2:	b002      	add	sp, #8
    6bf4:	bd80      	pop	{r7, pc}
	...

00006bf8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    6bf8:	b580      	push	{r7, lr}
    6bfa:	b086      	sub	sp, #24
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    6c00:	230c      	movs	r3, #12
    6c02:	18fb      	adds	r3, r7, r3
    6c04:	0018      	movs	r0, r3
    6c06:	4b23      	ldr	r3, [pc, #140]	; (6c94 <rtc_calendar_get_config_defaults+0x9c>)
    6c08:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	22a0      	movs	r2, #160	; 0xa0
    6c0e:	0112      	lsls	r2, r2, #4
    6c10:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	2200      	movs	r2, #0
    6c16:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6c18:	687b      	ldr	r3, [r7, #4]
    6c1a:	2200      	movs	r2, #0
    6c1c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	2200      	movs	r2, #0
    6c22:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    6c24:	687b      	ldr	r3, [r7, #4]
    6c26:	22fa      	movs	r2, #250	; 0xfa
    6c28:	00d2      	lsls	r2, r2, #3
    6c2a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6c2c:	2317      	movs	r3, #23
    6c2e:	18fb      	adds	r3, r7, r3
    6c30:	2200      	movs	r2, #0
    6c32:	701a      	strb	r2, [r3, #0]
    6c34:	e025      	b.n	6c82 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    6c36:	2317      	movs	r3, #23
    6c38:	18fb      	adds	r3, r7, r3
    6c3a:	781a      	ldrb	r2, [r3, #0]
    6c3c:	6879      	ldr	r1, [r7, #4]
    6c3e:	2008      	movs	r0, #8
    6c40:	0013      	movs	r3, r2
    6c42:	009b      	lsls	r3, r3, #2
    6c44:	189b      	adds	r3, r3, r2
    6c46:	005b      	lsls	r3, r3, #1
    6c48:	18cb      	adds	r3, r1, r3
    6c4a:	181a      	adds	r2, r3, r0
    6c4c:	230c      	movs	r3, #12
    6c4e:	18fb      	adds	r3, r7, r3
    6c50:	0010      	movs	r0, r2
    6c52:	0019      	movs	r1, r3
    6c54:	2308      	movs	r3, #8
    6c56:	001a      	movs	r2, r3
    6c58:	4b0f      	ldr	r3, [pc, #60]	; (6c98 <rtc_calendar_get_config_defaults+0xa0>)
    6c5a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6c5c:	2317      	movs	r3, #23
    6c5e:	18fb      	adds	r3, r7, r3
    6c60:	781a      	ldrb	r2, [r3, #0]
    6c62:	6879      	ldr	r1, [r7, #4]
    6c64:	0013      	movs	r3, r2
    6c66:	009b      	lsls	r3, r3, #2
    6c68:	189b      	adds	r3, r3, r2
    6c6a:	005b      	lsls	r3, r3, #1
    6c6c:	18cb      	adds	r3, r1, r3
    6c6e:	3310      	adds	r3, #16
    6c70:	2206      	movs	r2, #6
    6c72:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6c74:	2317      	movs	r3, #23
    6c76:	18fb      	adds	r3, r7, r3
    6c78:	781a      	ldrb	r2, [r3, #0]
    6c7a:	2317      	movs	r3, #23
    6c7c:	18fb      	adds	r3, r7, r3
    6c7e:	3201      	adds	r2, #1
    6c80:	701a      	strb	r2, [r3, #0]
    6c82:	2317      	movs	r3, #23
    6c84:	18fb      	adds	r3, r7, r3
    6c86:	781b      	ldrb	r3, [r3, #0]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d0d4      	beq.n	6c36 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    6c8c:	46c0      	nop			; (mov r8, r8)
    6c8e:	46bd      	mov	sp, r7
    6c90:	b006      	add	sp, #24
    6c92:	bd80      	pop	{r7, pc}
    6c94:	00006bbb 	.word	0x00006bbb
    6c98:	0000b361 	.word	0x0000b361

00006c9c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    6c9c:	b580      	push	{r7, lr}
    6c9e:	b088      	sub	sp, #32
    6ca0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    6ca2:	230c      	movs	r3, #12
    6ca4:	18fb      	adds	r3, r7, r3
    6ca6:	0018      	movs	r0, r3
    6ca8:	4b1a      	ldr	r3, [pc, #104]	; (6d14 <configure_rtc_calendar+0x78>)
    6caa:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    6cac:	1d3b      	adds	r3, r7, #4
    6cae:	0018      	movs	r0, r3
    6cb0:	4b19      	ldr	r3, [pc, #100]	; (6d18 <configure_rtc_calendar+0x7c>)
    6cb2:	4798      	blx	r3
	init_time.year   = 2014;
    6cb4:	1d3b      	adds	r3, r7, #4
    6cb6:	4a19      	ldr	r2, [pc, #100]	; (6d1c <configure_rtc_calendar+0x80>)
    6cb8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    6cba:	1d3b      	adds	r3, r7, #4
    6cbc:	2201      	movs	r2, #1
    6cbe:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    6cc0:	1d3b      	adds	r3, r7, #4
    6cc2:	2201      	movs	r2, #1
    6cc4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    6cc6:	1d3b      	adds	r3, r7, #4
    6cc8:	2200      	movs	r2, #0
    6cca:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    6ccc:	1d3b      	adds	r3, r7, #4
    6cce:	2200      	movs	r2, #0
    6cd0:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    6cd2:	1d3b      	adds	r3, r7, #4
    6cd4:	2204      	movs	r2, #4
    6cd6:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    6cd8:	230c      	movs	r3, #12
    6cda:	18fb      	adds	r3, r7, r3
    6cdc:	2201      	movs	r2, #1
    6cde:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6ce0:	230c      	movs	r3, #12
    6ce2:	18fb      	adds	r3, r7, r3
    6ce4:	1d3a      	adds	r2, r7, #4
    6ce6:	3308      	adds	r3, #8
    6ce8:	ca03      	ldmia	r2!, {r0, r1}
    6cea:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6cec:	230c      	movs	r3, #12
    6cee:	18fb      	adds	r3, r7, r3
    6cf0:	2206      	movs	r2, #6
    6cf2:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6cf4:	230c      	movs	r3, #12
    6cf6:	18fa      	adds	r2, r7, r3
    6cf8:	4909      	ldr	r1, [pc, #36]	; (6d20 <configure_rtc_calendar+0x84>)
    6cfa:	4b0a      	ldr	r3, [pc, #40]	; (6d24 <configure_rtc_calendar+0x88>)
    6cfc:	0018      	movs	r0, r3
    6cfe:	4b0a      	ldr	r3, [pc, #40]	; (6d28 <configure_rtc_calendar+0x8c>)
    6d00:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    6d02:	4b08      	ldr	r3, [pc, #32]	; (6d24 <configure_rtc_calendar+0x88>)
    6d04:	0018      	movs	r0, r3
    6d06:	4b09      	ldr	r3, [pc, #36]	; (6d2c <configure_rtc_calendar+0x90>)
    6d08:	4798      	blx	r3
}
    6d0a:	46c0      	nop			; (mov r8, r8)
    6d0c:	46bd      	mov	sp, r7
    6d0e:	b008      	add	sp, #32
    6d10:	bd80      	pop	{r7, pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	00006bf9 	.word	0x00006bf9
    6d18:	00006bbb 	.word	0x00006bbb
    6d1c:	000007de 	.word	0x000007de
    6d20:	40001400 	.word	0x40001400
    6d24:	200009fc 	.word	0x200009fc
    6d28:	000033e1 	.word	0x000033e1
    6d2c:	00003131 	.word	0x00003131

00006d30 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    6d30:	b590      	push	{r4, r7, lr}
    6d32:	b085      	sub	sp, #20
    6d34:	af00      	add	r7, sp, #0
    6d36:	0002      	movs	r2, r0
    6d38:	1dfb      	adds	r3, r7, #7
    6d3a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    6d3c:	4b1a      	ldr	r3, [pc, #104]	; (6da8 <disk_initialize+0x78>)
    6d3e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    6d40:	1dfb      	adds	r3, r7, #7
    6d42:	781b      	ldrb	r3, [r3, #0]
    6d44:	2b01      	cmp	r3, #1
    6d46:	d901      	bls.n	6d4c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6d48:	2301      	movs	r3, #1
    6d4a:	e029      	b.n	6da0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    6d4c:	2300      	movs	r3, #0
    6d4e:	60fb      	str	r3, [r7, #12]
    6d50:	e010      	b.n	6d74 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    6d52:	230b      	movs	r3, #11
    6d54:	18fc      	adds	r4, r7, r3
    6d56:	1dfb      	adds	r3, r7, #7
    6d58:	781b      	ldrb	r3, [r3, #0]
    6d5a:	0018      	movs	r0, r3
    6d5c:	4b13      	ldr	r3, [pc, #76]	; (6dac <disk_initialize+0x7c>)
    6d5e:	4798      	blx	r3
    6d60:	0003      	movs	r3, r0
    6d62:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    6d64:	230b      	movs	r3, #11
    6d66:	18fb      	adds	r3, r7, r3
    6d68:	781b      	ldrb	r3, [r3, #0]
    6d6a:	2b03      	cmp	r3, #3
    6d6c:	d106      	bne.n	6d7c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    6d6e:	68fb      	ldr	r3, [r7, #12]
    6d70:	3301      	adds	r3, #1
    6d72:	60fb      	str	r3, [r7, #12]
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	2b01      	cmp	r3, #1
    6d78:	ddeb      	ble.n	6d52 <disk_initialize+0x22>
    6d7a:	e000      	b.n	6d7e <disk_initialize+0x4e>
			break;
    6d7c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    6d7e:	230b      	movs	r3, #11
    6d80:	18fb      	adds	r3, r7, r3
    6d82:	781b      	ldrb	r3, [r3, #0]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d001      	beq.n	6d8c <disk_initialize+0x5c>
		return STA_NOINIT;
    6d88:	2301      	movs	r3, #1
    6d8a:	e009      	b.n	6da0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    6d8c:	1dfb      	adds	r3, r7, #7
    6d8e:	781b      	ldrb	r3, [r3, #0]
    6d90:	0018      	movs	r0, r3
    6d92:	4b07      	ldr	r3, [pc, #28]	; (6db0 <disk_initialize+0x80>)
    6d94:	4798      	blx	r3
    6d96:	1e03      	subs	r3, r0, #0
    6d98:	d001      	beq.n	6d9e <disk_initialize+0x6e>
		return STA_PROTECT;
    6d9a:	2304      	movs	r3, #4
    6d9c:	e000      	b.n	6da0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    6d9e:	2300      	movs	r3, #0
}
    6da0:	0018      	movs	r0, r3
    6da2:	46bd      	mov	sp, r7
    6da4:	b005      	add	sp, #20
    6da6:	bd90      	pop	{r4, r7, pc}
    6da8:	00006c9d 	.word	0x00006c9d
    6dac:	00002dd1 	.word	0x00002dd1
    6db0:	00002e89 	.word	0x00002e89

00006db4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    6db4:	b580      	push	{r7, lr}
    6db6:	b082      	sub	sp, #8
    6db8:	af00      	add	r7, sp, #0
    6dba:	0002      	movs	r2, r0
    6dbc:	1dfb      	adds	r3, r7, #7
    6dbe:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    6dc0:	1dfb      	adds	r3, r7, #7
    6dc2:	781b      	ldrb	r3, [r3, #0]
    6dc4:	0018      	movs	r0, r3
    6dc6:	4b08      	ldr	r3, [pc, #32]	; (6de8 <disk_status+0x34>)
    6dc8:	4798      	blx	r3
    6dca:	1e03      	subs	r3, r0, #0
    6dcc:	d002      	beq.n	6dd4 <disk_status+0x20>
    6dce:	2b02      	cmp	r3, #2
    6dd0:	d002      	beq.n	6dd8 <disk_status+0x24>
    6dd2:	e003      	b.n	6ddc <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    6dd4:	2300      	movs	r3, #0
    6dd6:	e002      	b.n	6dde <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    6dd8:	2303      	movs	r3, #3
    6dda:	e000      	b.n	6dde <disk_status+0x2a>
	default:
		return STA_NOINIT;
    6ddc:	2301      	movs	r3, #1
	}
}
    6dde:	0018      	movs	r0, r3
    6de0:	46bd      	mov	sp, r7
    6de2:	b002      	add	sp, #8
    6de4:	bd80      	pop	{r7, pc}
    6de6:	46c0      	nop			; (mov r8, r8)
    6de8:	00002dd1 	.word	0x00002dd1

00006dec <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6dec:	b590      	push	{r4, r7, lr}
    6dee:	b089      	sub	sp, #36	; 0x24
    6df0:	af00      	add	r7, sp, #0
    6df2:	60b9      	str	r1, [r7, #8]
    6df4:	607a      	str	r2, [r7, #4]
    6df6:	0019      	movs	r1, r3
    6df8:	230f      	movs	r3, #15
    6dfa:	18fb      	adds	r3, r7, r3
    6dfc:	1c02      	adds	r2, r0, #0
    6dfe:	701a      	strb	r2, [r3, #0]
    6e00:	230e      	movs	r3, #14
    6e02:	18fb      	adds	r3, r7, r3
    6e04:	1c0a      	adds	r2, r1, #0
    6e06:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6e08:	231b      	movs	r3, #27
    6e0a:	18fc      	adds	r4, r7, r3
    6e0c:	230f      	movs	r3, #15
    6e0e:	18fb      	adds	r3, r7, r3
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	0018      	movs	r0, r3
    6e14:	4b28      	ldr	r3, [pc, #160]	; (6eb8 <disk_read+0xcc>)
    6e16:	4798      	blx	r3
    6e18:	0003      	movs	r3, r0
    6e1a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    6e1c:	231b      	movs	r3, #27
    6e1e:	18fb      	adds	r3, r7, r3
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d101      	bne.n	6e2a <disk_read+0x3e>
		return RES_ERROR;
    6e26:	2301      	movs	r3, #1
    6e28:	e042      	b.n	6eb0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    6e2a:	2314      	movs	r3, #20
    6e2c:	18fa      	adds	r2, r7, r3
    6e2e:	230f      	movs	r3, #15
    6e30:	18fb      	adds	r3, r7, r3
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	0011      	movs	r1, r2
    6e36:	0018      	movs	r0, r3
    6e38:	4b20      	ldr	r3, [pc, #128]	; (6ebc <disk_read+0xd0>)
    6e3a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    6e3c:	230e      	movs	r3, #14
    6e3e:	18fb      	adds	r3, r7, r3
    6e40:	781b      	ldrb	r3, [r3, #0]
    6e42:	221b      	movs	r2, #27
    6e44:	18ba      	adds	r2, r7, r2
    6e46:	7812      	ldrb	r2, [r2, #0]
    6e48:	4353      	muls	r3, r2
    6e4a:	001a      	movs	r2, r3
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6e50:	697b      	ldr	r3, [r7, #20]
    6e52:	3301      	adds	r3, #1
    6e54:	211b      	movs	r1, #27
    6e56:	1879      	adds	r1, r7, r1
    6e58:	7809      	ldrb	r1, [r1, #0]
    6e5a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    6e5c:	429a      	cmp	r2, r3
    6e5e:	d901      	bls.n	6e64 <disk_read+0x78>
		return RES_PARERR;
    6e60:	2304      	movs	r3, #4
    6e62:	e025      	b.n	6eb0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    6e64:	2300      	movs	r3, #0
    6e66:	61fb      	str	r3, [r7, #28]
    6e68:	e01b      	b.n	6ea2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6e6a:	231b      	movs	r3, #27
    6e6c:	18fb      	adds	r3, r7, r3
    6e6e:	781b      	ldrb	r3, [r3, #0]
    6e70:	69fa      	ldr	r2, [r7, #28]
    6e72:	435a      	muls	r2, r3
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    6e78:	231b      	movs	r3, #27
    6e7a:	18fb      	adds	r3, r7, r3
    6e7c:	781b      	ldrb	r3, [r3, #0]
    6e7e:	69fa      	ldr	r2, [r7, #28]
    6e80:	4353      	muls	r3, r2
    6e82:	025b      	lsls	r3, r3, #9
    6e84:	68ba      	ldr	r2, [r7, #8]
    6e86:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6e88:	230f      	movs	r3, #15
    6e8a:	18fb      	adds	r3, r7, r3
    6e8c:	781b      	ldrb	r3, [r3, #0]
    6e8e:	0018      	movs	r0, r3
    6e90:	4b0b      	ldr	r3, [pc, #44]	; (6ec0 <disk_read+0xd4>)
    6e92:	4798      	blx	r3
    6e94:	1e03      	subs	r3, r0, #0
    6e96:	d001      	beq.n	6e9c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    6e98:	2301      	movs	r3, #1
    6e9a:	e009      	b.n	6eb0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    6e9c:	69fb      	ldr	r3, [r7, #28]
    6e9e:	3301      	adds	r3, #1
    6ea0:	61fb      	str	r3, [r7, #28]
    6ea2:	230e      	movs	r3, #14
    6ea4:	18fb      	adds	r3, r7, r3
    6ea6:	781a      	ldrb	r2, [r3, #0]
    6ea8:	69fb      	ldr	r3, [r7, #28]
    6eaa:	429a      	cmp	r2, r3
    6eac:	d8dd      	bhi.n	6e6a <disk_read+0x7e>
		}
	}

	return RES_OK;
    6eae:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    6eb0:	0018      	movs	r0, r3
    6eb2:	46bd      	mov	sp, r7
    6eb4:	b009      	add	sp, #36	; 0x24
    6eb6:	bd90      	pop	{r4, r7, pc}
    6eb8:	00002e5d 	.word	0x00002e5d
    6ebc:	00002e11 	.word	0x00002e11
    6ec0:	00002ed1 	.word	0x00002ed1

00006ec4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6ec4:	b590      	push	{r4, r7, lr}
    6ec6:	b089      	sub	sp, #36	; 0x24
    6ec8:	af00      	add	r7, sp, #0
    6eca:	60b9      	str	r1, [r7, #8]
    6ecc:	607a      	str	r2, [r7, #4]
    6ece:	0019      	movs	r1, r3
    6ed0:	230f      	movs	r3, #15
    6ed2:	18fb      	adds	r3, r7, r3
    6ed4:	1c02      	adds	r2, r0, #0
    6ed6:	701a      	strb	r2, [r3, #0]
    6ed8:	230e      	movs	r3, #14
    6eda:	18fb      	adds	r3, r7, r3
    6edc:	1c0a      	adds	r2, r1, #0
    6ede:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6ee0:	231b      	movs	r3, #27
    6ee2:	18fc      	adds	r4, r7, r3
    6ee4:	230f      	movs	r3, #15
    6ee6:	18fb      	adds	r3, r7, r3
    6ee8:	781b      	ldrb	r3, [r3, #0]
    6eea:	0018      	movs	r0, r3
    6eec:	4b28      	ldr	r3, [pc, #160]	; (6f90 <disk_write+0xcc>)
    6eee:	4798      	blx	r3
    6ef0:	0003      	movs	r3, r0
    6ef2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    6ef4:	231b      	movs	r3, #27
    6ef6:	18fb      	adds	r3, r7, r3
    6ef8:	781b      	ldrb	r3, [r3, #0]
    6efa:	2b00      	cmp	r3, #0
    6efc:	d101      	bne.n	6f02 <disk_write+0x3e>
		return RES_ERROR;
    6efe:	2301      	movs	r3, #1
    6f00:	e042      	b.n	6f88 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    6f02:	2314      	movs	r3, #20
    6f04:	18fa      	adds	r2, r7, r3
    6f06:	230f      	movs	r3, #15
    6f08:	18fb      	adds	r3, r7, r3
    6f0a:	781b      	ldrb	r3, [r3, #0]
    6f0c:	0011      	movs	r1, r2
    6f0e:	0018      	movs	r0, r3
    6f10:	4b20      	ldr	r3, [pc, #128]	; (6f94 <disk_write+0xd0>)
    6f12:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    6f14:	230e      	movs	r3, #14
    6f16:	18fb      	adds	r3, r7, r3
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	221b      	movs	r2, #27
    6f1c:	18ba      	adds	r2, r7, r2
    6f1e:	7812      	ldrb	r2, [r2, #0]
    6f20:	4353      	muls	r3, r2
    6f22:	001a      	movs	r2, r3
    6f24:	687b      	ldr	r3, [r7, #4]
    6f26:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6f28:	697b      	ldr	r3, [r7, #20]
    6f2a:	3301      	adds	r3, #1
    6f2c:	211b      	movs	r1, #27
    6f2e:	1879      	adds	r1, r7, r1
    6f30:	7809      	ldrb	r1, [r1, #0]
    6f32:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    6f34:	429a      	cmp	r2, r3
    6f36:	d901      	bls.n	6f3c <disk_write+0x78>
		return RES_PARERR;
    6f38:	2304      	movs	r3, #4
    6f3a:	e025      	b.n	6f88 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    6f3c:	2300      	movs	r3, #0
    6f3e:	61fb      	str	r3, [r7, #28]
    6f40:	e01b      	b.n	6f7a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6f42:	231b      	movs	r3, #27
    6f44:	18fb      	adds	r3, r7, r3
    6f46:	781b      	ldrb	r3, [r3, #0]
    6f48:	69fa      	ldr	r2, [r7, #28]
    6f4a:	435a      	muls	r2, r3
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    6f50:	231b      	movs	r3, #27
    6f52:	18fb      	adds	r3, r7, r3
    6f54:	781b      	ldrb	r3, [r3, #0]
    6f56:	69fa      	ldr	r2, [r7, #28]
    6f58:	4353      	muls	r3, r2
    6f5a:	025b      	lsls	r3, r3, #9
    6f5c:	68ba      	ldr	r2, [r7, #8]
    6f5e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6f60:	230f      	movs	r3, #15
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	0018      	movs	r0, r3
    6f68:	4b0b      	ldr	r3, [pc, #44]	; (6f98 <disk_write+0xd4>)
    6f6a:	4798      	blx	r3
    6f6c:	1e03      	subs	r3, r0, #0
    6f6e:	d001      	beq.n	6f74 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    6f70:	2301      	movs	r3, #1
    6f72:	e009      	b.n	6f88 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    6f74:	69fb      	ldr	r3, [r7, #28]
    6f76:	3301      	adds	r3, #1
    6f78:	61fb      	str	r3, [r7, #28]
    6f7a:	230e      	movs	r3, #14
    6f7c:	18fb      	adds	r3, r7, r3
    6f7e:	781a      	ldrb	r2, [r3, #0]
    6f80:	69fb      	ldr	r3, [r7, #28]
    6f82:	429a      	cmp	r2, r3
    6f84:	d8dd      	bhi.n	6f42 <disk_write+0x7e>
		}
	}

	return RES_OK;
    6f86:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    6f88:	0018      	movs	r0, r3
    6f8a:	46bd      	mov	sp, r7
    6f8c:	b009      	add	sp, #36	; 0x24
    6f8e:	bd90      	pop	{r4, r7, pc}
    6f90:	00002e5d 	.word	0x00002e5d
    6f94:	00002e11 	.word	0x00002e11
    6f98:	00002f25 	.word	0x00002f25

00006f9c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6f9c:	b590      	push	{r4, r7, lr}
    6f9e:	b085      	sub	sp, #20
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	603a      	str	r2, [r7, #0]
    6fa4:	1dfb      	adds	r3, r7, #7
    6fa6:	1c02      	adds	r2, r0, #0
    6fa8:	701a      	strb	r2, [r3, #0]
    6faa:	1dbb      	adds	r3, r7, #6
    6fac:	1c0a      	adds	r2, r1, #0
    6fae:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    6fb0:	230f      	movs	r3, #15
    6fb2:	18fb      	adds	r3, r7, r3
    6fb4:	2204      	movs	r2, #4
    6fb6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    6fb8:	1dbb      	adds	r3, r7, #6
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	2b01      	cmp	r3, #1
    6fbe:	d00f      	beq.n	6fe0 <disk_ioctl+0x44>
    6fc0:	dc02      	bgt.n	6fc8 <disk_ioctl+0x2c>
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d044      	beq.n	7050 <disk_ioctl+0xb4>
    6fc6:	e054      	b.n	7072 <disk_ioctl+0xd6>
    6fc8:	2b02      	cmp	r3, #2
    6fca:	d01a      	beq.n	7002 <disk_ioctl+0x66>
    6fcc:	2b03      	cmp	r3, #3
    6fce:	d150      	bne.n	7072 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    6fd0:	683b      	ldr	r3, [r7, #0]
    6fd2:	2201      	movs	r2, #1
    6fd4:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    6fd6:	230f      	movs	r3, #15
    6fd8:	18fb      	adds	r3, r7, r3
    6fda:	2200      	movs	r2, #0
    6fdc:	701a      	strb	r2, [r3, #0]
		break;
    6fde:	e04c      	b.n	707a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    6fe0:	2308      	movs	r3, #8
    6fe2:	18fa      	adds	r2, r7, r3
    6fe4:	1dfb      	adds	r3, r7, #7
    6fe6:	781b      	ldrb	r3, [r3, #0]
    6fe8:	0011      	movs	r1, r2
    6fea:	0018      	movs	r0, r3
    6fec:	4b26      	ldr	r3, [pc, #152]	; (7088 <disk_ioctl+0xec>)
    6fee:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    6ff0:	68bb      	ldr	r3, [r7, #8]
    6ff2:	1c5a      	adds	r2, r3, #1
    6ff4:	683b      	ldr	r3, [r7, #0]
    6ff6:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    6ff8:	230f      	movs	r3, #15
    6ffa:	18fb      	adds	r3, r7, r3
    6ffc:	2200      	movs	r2, #0
    6ffe:	701a      	strb	r2, [r3, #0]
	}
	break;
    7000:	e03b      	b.n	707a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    7002:	230e      	movs	r3, #14
    7004:	18fc      	adds	r4, r7, r3
    7006:	1dfb      	adds	r3, r7, #7
    7008:	781b      	ldrb	r3, [r3, #0]
    700a:	0018      	movs	r0, r3
    700c:	4b1f      	ldr	r3, [pc, #124]	; (708c <disk_ioctl+0xf0>)
    700e:	4798      	blx	r3
    7010:	0003      	movs	r3, r0
    7012:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    7014:	230e      	movs	r3, #14
    7016:	18fb      	adds	r3, r7, r3
    7018:	781b      	ldrb	r3, [r3, #0]
    701a:	2b01      	cmp	r3, #1
    701c:	d010      	beq.n	7040 <disk_ioctl+0xa4>
    701e:	230e      	movs	r3, #14
    7020:	18fb      	adds	r3, r7, r3
    7022:	781b      	ldrb	r3, [r3, #0]
    7024:	2b02      	cmp	r3, #2
    7026:	d00b      	beq.n	7040 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    7028:	230e      	movs	r3, #14
    702a:	18fb      	adds	r3, r7, r3
    702c:	781b      	ldrb	r3, [r3, #0]
    702e:	2b04      	cmp	r3, #4
    7030:	d006      	beq.n	7040 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    7032:	230e      	movs	r3, #14
    7034:	18fb      	adds	r3, r7, r3
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	2b08      	cmp	r3, #8
    703a:	d001      	beq.n	7040 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    703c:	2301      	movs	r3, #1
    703e:	e01f      	b.n	7080 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    7040:	683b      	ldr	r3, [r7, #0]
    7042:	2200      	movs	r2, #0
    7044:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    7046:	230f      	movs	r3, #15
    7048:	18fb      	adds	r3, r7, r3
    704a:	2200      	movs	r2, #0
    704c:	701a      	strb	r2, [r3, #0]
	}
	break;
    704e:	e014      	b.n	707a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    7050:	1dfb      	adds	r3, r7, #7
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	0018      	movs	r0, r3
    7056:	4b0e      	ldr	r3, [pc, #56]	; (7090 <disk_ioctl+0xf4>)
    7058:	4798      	blx	r3
    705a:	1e03      	subs	r3, r0, #0
    705c:	d104      	bne.n	7068 <disk_ioctl+0xcc>
			res = RES_OK;
    705e:	230f      	movs	r3, #15
    7060:	18fb      	adds	r3, r7, r3
    7062:	2200      	movs	r2, #0
    7064:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    7066:	e008      	b.n	707a <disk_ioctl+0xde>
			res = RES_NOTRDY;
    7068:	230f      	movs	r3, #15
    706a:	18fb      	adds	r3, r7, r3
    706c:	2203      	movs	r2, #3
    706e:	701a      	strb	r2, [r3, #0]
		break;
    7070:	e003      	b.n	707a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    7072:	230f      	movs	r3, #15
    7074:	18fb      	adds	r3, r7, r3
    7076:	2204      	movs	r2, #4
    7078:	701a      	strb	r2, [r3, #0]
	}

	return res;
    707a:	230f      	movs	r3, #15
    707c:	18fb      	adds	r3, r7, r3
    707e:	781b      	ldrb	r3, [r3, #0]
}
    7080:	0018      	movs	r0, r3
    7082:	46bd      	mov	sp, r7
    7084:	b005      	add	sp, #20
    7086:	bd90      	pop	{r4, r7, pc}
    7088:	00002e11 	.word	0x00002e11
    708c:	00002e5d 	.word	0x00002e5d
    7090:	00002dd1 	.word	0x00002dd1

00007094 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    7094:	b580      	push	{r7, lr}
    7096:	b084      	sub	sp, #16
    7098:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    709a:	1d3a      	adds	r2, r7, #4
    709c:	4b12      	ldr	r3, [pc, #72]	; (70e8 <get_fattime+0x54>)
    709e:	0011      	movs	r1, r2
    70a0:	0018      	movs	r0, r3
    70a2:	4b12      	ldr	r3, [pc, #72]	; (70ec <get_fattime+0x58>)
    70a4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    70a6:	1d3b      	adds	r3, r7, #4
    70a8:	88db      	ldrh	r3, [r3, #6]
    70aa:	4a11      	ldr	r2, [pc, #68]	; (70f0 <get_fattime+0x5c>)
    70ac:	4694      	mov	ip, r2
    70ae:	4463      	add	r3, ip
    70b0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    70b2:	1d3b      	adds	r3, r7, #4
    70b4:	795b      	ldrb	r3, [r3, #5]
    70b6:	055b      	lsls	r3, r3, #21
    70b8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    70ba:	1d3b      	adds	r3, r7, #4
    70bc:	791b      	ldrb	r3, [r3, #4]
    70be:	041b      	lsls	r3, r3, #16
    70c0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    70c2:	1d3b      	adds	r3, r7, #4
    70c4:	789b      	ldrb	r3, [r3, #2]
    70c6:	02db      	lsls	r3, r3, #11
    70c8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    70ca:	1d3b      	adds	r3, r7, #4
    70cc:	785b      	ldrb	r3, [r3, #1]
    70ce:	015b      	lsls	r3, r3, #5
    70d0:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    70d2:	1d3a      	adds	r2, r7, #4
    70d4:	7812      	ldrb	r2, [r2, #0]
    70d6:	0852      	lsrs	r2, r2, #1
    70d8:	b2d2      	uxtb	r2, r2
    70da:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    70dc:	60fb      	str	r3, [r7, #12]

	return ul_time;
    70de:	68fb      	ldr	r3, [r7, #12]
}
    70e0:	0018      	movs	r0, r3
    70e2:	46bd      	mov	sp, r7
    70e4:	b004      	add	sp, #16
    70e6:	bd80      	pop	{r7, pc}
    70e8:	200009fc 	.word	0x200009fc
    70ec:	00003475 	.word	0x00003475
    70f0:	fffff844 	.word	0xfffff844

000070f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    70f4:	b580      	push	{r7, lr}
    70f6:	b086      	sub	sp, #24
    70f8:	af00      	add	r7, sp, #0
    70fa:	60f8      	str	r0, [r7, #12]
    70fc:	60b9      	str	r1, [r7, #8]
    70fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7100:	68fb      	ldr	r3, [r7, #12]
    7102:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7104:	68bb      	ldr	r3, [r7, #8]
    7106:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7108:	e007      	b.n	711a <mem_cpy+0x26>
		*d++ = *s++;
    710a:	697b      	ldr	r3, [r7, #20]
    710c:	1c5a      	adds	r2, r3, #1
    710e:	617a      	str	r2, [r7, #20]
    7110:	693a      	ldr	r2, [r7, #16]
    7112:	1c51      	adds	r1, r2, #1
    7114:	6139      	str	r1, [r7, #16]
    7116:	7812      	ldrb	r2, [r2, #0]
    7118:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    711a:	687b      	ldr	r3, [r7, #4]
    711c:	1e5a      	subs	r2, r3, #1
    711e:	607a      	str	r2, [r7, #4]
    7120:	2b00      	cmp	r3, #0
    7122:	d1f2      	bne.n	710a <mem_cpy+0x16>
}
    7124:	46c0      	nop			; (mov r8, r8)
    7126:	46bd      	mov	sp, r7
    7128:	b006      	add	sp, #24
    712a:	bd80      	pop	{r7, pc}

0000712c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    712c:	b580      	push	{r7, lr}
    712e:	b086      	sub	sp, #24
    7130:	af00      	add	r7, sp, #0
    7132:	60f8      	str	r0, [r7, #12]
    7134:	60b9      	str	r1, [r7, #8]
    7136:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7138:	68fb      	ldr	r3, [r7, #12]
    713a:	617b      	str	r3, [r7, #20]

	while (cnt--)
    713c:	e005      	b.n	714a <mem_set+0x1e>
		*d++ = (BYTE)val;
    713e:	697b      	ldr	r3, [r7, #20]
    7140:	1c5a      	adds	r2, r3, #1
    7142:	617a      	str	r2, [r7, #20]
    7144:	68ba      	ldr	r2, [r7, #8]
    7146:	b2d2      	uxtb	r2, r2
    7148:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	1e5a      	subs	r2, r3, #1
    714e:	607a      	str	r2, [r7, #4]
    7150:	2b00      	cmp	r3, #0
    7152:	d1f4      	bne.n	713e <mem_set+0x12>
}
    7154:	46c0      	nop			; (mov r8, r8)
    7156:	46bd      	mov	sp, r7
    7158:	b006      	add	sp, #24
    715a:	bd80      	pop	{r7, pc}

0000715c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    715c:	b580      	push	{r7, lr}
    715e:	b088      	sub	sp, #32
    7160:	af00      	add	r7, sp, #0
    7162:	60f8      	str	r0, [r7, #12]
    7164:	60b9      	str	r1, [r7, #8]
    7166:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    7168:	68fb      	ldr	r3, [r7, #12]
    716a:	61fb      	str	r3, [r7, #28]
    716c:	68bb      	ldr	r3, [r7, #8]
    716e:	61bb      	str	r3, [r7, #24]
	int r = 0;
    7170:	2300      	movs	r3, #0
    7172:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7174:	46c0      	nop			; (mov r8, r8)
    7176:	687b      	ldr	r3, [r7, #4]
    7178:	1e5a      	subs	r2, r3, #1
    717a:	607a      	str	r2, [r7, #4]
    717c:	2b00      	cmp	r3, #0
    717e:	d00d      	beq.n	719c <mem_cmp+0x40>
    7180:	69fb      	ldr	r3, [r7, #28]
    7182:	1c5a      	adds	r2, r3, #1
    7184:	61fa      	str	r2, [r7, #28]
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	0019      	movs	r1, r3
    718a:	69bb      	ldr	r3, [r7, #24]
    718c:	1c5a      	adds	r2, r3, #1
    718e:	61ba      	str	r2, [r7, #24]
    7190:	781b      	ldrb	r3, [r3, #0]
    7192:	1acb      	subs	r3, r1, r3
    7194:	617b      	str	r3, [r7, #20]
    7196:	697b      	ldr	r3, [r7, #20]
    7198:	2b00      	cmp	r3, #0
    719a:	d0ec      	beq.n	7176 <mem_cmp+0x1a>
	return r;
    719c:	697b      	ldr	r3, [r7, #20]
}
    719e:	0018      	movs	r0, r3
    71a0:	46bd      	mov	sp, r7
    71a2:	b008      	add	sp, #32
    71a4:	bd80      	pop	{r7, pc}

000071a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    71a6:	b580      	push	{r7, lr}
    71a8:	b082      	sub	sp, #8
    71aa:	af00      	add	r7, sp, #0
    71ac:	6078      	str	r0, [r7, #4]
    71ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    71b0:	e002      	b.n	71b8 <chk_chr+0x12>
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	3301      	adds	r3, #1
    71b6:	607b      	str	r3, [r7, #4]
    71b8:	687b      	ldr	r3, [r7, #4]
    71ba:	781b      	ldrb	r3, [r3, #0]
    71bc:	2b00      	cmp	r3, #0
    71be:	d005      	beq.n	71cc <chk_chr+0x26>
    71c0:	687b      	ldr	r3, [r7, #4]
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	001a      	movs	r2, r3
    71c6:	683b      	ldr	r3, [r7, #0]
    71c8:	429a      	cmp	r2, r3
    71ca:	d1f2      	bne.n	71b2 <chk_chr+0xc>
	return *str;
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	781b      	ldrb	r3, [r3, #0]
}
    71d0:	0018      	movs	r0, r3
    71d2:	46bd      	mov	sp, r7
    71d4:	b002      	add	sp, #8
    71d6:	bd80      	pop	{r7, pc}

000071d8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    71d8:	b590      	push	{r4, r7, lr}
    71da:	b085      	sub	sp, #20
    71dc:	af00      	add	r7, sp, #0
    71de:	6078      	str	r0, [r7, #4]
    71e0:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    71e6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    71e8:	68fa      	ldr	r2, [r7, #12]
    71ea:	683b      	ldr	r3, [r7, #0]
    71ec:	429a      	cmp	r2, r3
    71ee:	d04e      	beq.n	728e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	791b      	ldrb	r3, [r3, #4]
    71f4:	2b00      	cmp	r3, #0
    71f6:	d037      	beq.n	7268 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	7858      	ldrb	r0, [r3, #1]
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	3330      	adds	r3, #48	; 0x30
    7200:	0019      	movs	r1, r3
    7202:	68fa      	ldr	r2, [r7, #12]
    7204:	2301      	movs	r3, #1
    7206:	4c24      	ldr	r4, [pc, #144]	; (7298 <move_window+0xc0>)
    7208:	47a0      	blx	r4
    720a:	1e03      	subs	r3, r0, #0
    720c:	d001      	beq.n	7212 <move_window+0x3a>
				return FR_DISK_ERR;
    720e:	2301      	movs	r3, #1
    7210:	e03e      	b.n	7290 <move_window+0xb8>
			fs->wflag = 0;
    7212:	687b      	ldr	r3, [r7, #4]
    7214:	2200      	movs	r2, #0
    7216:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	6a1a      	ldr	r2, [r3, #32]
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	69db      	ldr	r3, [r3, #28]
    7220:	18d2      	adds	r2, r2, r3
    7222:	68fb      	ldr	r3, [r7, #12]
    7224:	429a      	cmp	r2, r3
    7226:	d91f      	bls.n	7268 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7228:	230b      	movs	r3, #11
    722a:	18fb      	adds	r3, r7, r3
    722c:	687a      	ldr	r2, [r7, #4]
    722e:	78d2      	ldrb	r2, [r2, #3]
    7230:	701a      	strb	r2, [r3, #0]
    7232:	e014      	b.n	725e <move_window+0x86>
					wsect += fs->fsize;
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	69db      	ldr	r3, [r3, #28]
    7238:	68fa      	ldr	r2, [r7, #12]
    723a:	18d3      	adds	r3, r2, r3
    723c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	7858      	ldrb	r0, [r3, #1]
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	3330      	adds	r3, #48	; 0x30
    7246:	0019      	movs	r1, r3
    7248:	68fa      	ldr	r2, [r7, #12]
    724a:	2301      	movs	r3, #1
    724c:	4c12      	ldr	r4, [pc, #72]	; (7298 <move_window+0xc0>)
    724e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7250:	230b      	movs	r3, #11
    7252:	18fb      	adds	r3, r7, r3
    7254:	781a      	ldrb	r2, [r3, #0]
    7256:	230b      	movs	r3, #11
    7258:	18fb      	adds	r3, r7, r3
    725a:	3a01      	subs	r2, #1
    725c:	701a      	strb	r2, [r3, #0]
    725e:	230b      	movs	r3, #11
    7260:	18fb      	adds	r3, r7, r3
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	2b01      	cmp	r3, #1
    7266:	d8e5      	bhi.n	7234 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    7268:	683b      	ldr	r3, [r7, #0]
    726a:	2b00      	cmp	r3, #0
    726c:	d00f      	beq.n	728e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	7858      	ldrb	r0, [r3, #1]
    7272:	687b      	ldr	r3, [r7, #4]
    7274:	3330      	adds	r3, #48	; 0x30
    7276:	0019      	movs	r1, r3
    7278:	683a      	ldr	r2, [r7, #0]
    727a:	2301      	movs	r3, #1
    727c:	4c07      	ldr	r4, [pc, #28]	; (729c <move_window+0xc4>)
    727e:	47a0      	blx	r4
    7280:	1e03      	subs	r3, r0, #0
    7282:	d001      	beq.n	7288 <move_window+0xb0>
				return FR_DISK_ERR;
    7284:	2301      	movs	r3, #1
    7286:	e003      	b.n	7290 <move_window+0xb8>
			fs->winsect = sector;
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	683a      	ldr	r2, [r7, #0]
    728c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    728e:	2300      	movs	r3, #0
}
    7290:	0018      	movs	r0, r3
    7292:	46bd      	mov	sp, r7
    7294:	b005      	add	sp, #20
    7296:	bd90      	pop	{r4, r7, pc}
    7298:	00006ec5 	.word	0x00006ec5
    729c:	00006ded 	.word	0x00006ded

000072a0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    72a0:	b590      	push	{r4, r7, lr}
    72a2:	b085      	sub	sp, #20
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    72a8:	230f      	movs	r3, #15
    72aa:	18fc      	adds	r4, r7, r3
    72ac:	687b      	ldr	r3, [r7, #4]
    72ae:	2100      	movs	r1, #0
    72b0:	0018      	movs	r0, r3
    72b2:	4b52      	ldr	r3, [pc, #328]	; (73fc <sync+0x15c>)
    72b4:	4798      	blx	r3
    72b6:	0003      	movs	r3, r0
    72b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    72ba:	230f      	movs	r3, #15
    72bc:	18fb      	adds	r3, r7, r3
    72be:	781b      	ldrb	r3, [r3, #0]
    72c0:	2b00      	cmp	r3, #0
    72c2:	d000      	beq.n	72c6 <sync+0x26>
    72c4:	e093      	b.n	73ee <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    72c6:	687b      	ldr	r3, [r7, #4]
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2b03      	cmp	r3, #3
    72cc:	d000      	beq.n	72d0 <sync+0x30>
    72ce:	e081      	b.n	73d4 <sync+0x134>
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	795b      	ldrb	r3, [r3, #5]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d07d      	beq.n	73d4 <sync+0x134>
			fs->winsect = 0;
    72d8:	687b      	ldr	r3, [r7, #4]
    72da:	2200      	movs	r2, #0
    72dc:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    72de:	687b      	ldr	r3, [r7, #4]
    72e0:	3330      	adds	r3, #48	; 0x30
    72e2:	0018      	movs	r0, r3
    72e4:	2380      	movs	r3, #128	; 0x80
    72e6:	009b      	lsls	r3, r3, #2
    72e8:	001a      	movs	r2, r3
    72ea:	2100      	movs	r1, #0
    72ec:	4b44      	ldr	r3, [pc, #272]	; (7400 <sync+0x160>)
    72ee:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	4a44      	ldr	r2, [pc, #272]	; (7404 <sync+0x164>)
    72f4:	2155      	movs	r1, #85	; 0x55
    72f6:	5499      	strb	r1, [r3, r2]
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	4a43      	ldr	r2, [pc, #268]	; (7408 <sync+0x168>)
    72fc:	21aa      	movs	r1, #170	; 0xaa
    72fe:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7300:	687b      	ldr	r3, [r7, #4]
    7302:	2230      	movs	r2, #48	; 0x30
    7304:	2152      	movs	r1, #82	; 0x52
    7306:	5499      	strb	r1, [r3, r2]
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	2231      	movs	r2, #49	; 0x31
    730c:	2152      	movs	r1, #82	; 0x52
    730e:	5499      	strb	r1, [r3, r2]
    7310:	687b      	ldr	r3, [r7, #4]
    7312:	2232      	movs	r2, #50	; 0x32
    7314:	2161      	movs	r1, #97	; 0x61
    7316:	5499      	strb	r1, [r3, r2]
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	2233      	movs	r2, #51	; 0x33
    731c:	2141      	movs	r1, #65	; 0x41
    731e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7320:	687a      	ldr	r2, [r7, #4]
    7322:	2385      	movs	r3, #133	; 0x85
    7324:	009b      	lsls	r3, r3, #2
    7326:	2172      	movs	r1, #114	; 0x72
    7328:	54d1      	strb	r1, [r2, r3]
    732a:	687b      	ldr	r3, [r7, #4]
    732c:	4a37      	ldr	r2, [pc, #220]	; (740c <sync+0x16c>)
    732e:	2172      	movs	r1, #114	; 0x72
    7330:	5499      	strb	r1, [r3, r2]
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	4a36      	ldr	r2, [pc, #216]	; (7410 <sync+0x170>)
    7336:	2141      	movs	r1, #65	; 0x41
    7338:	5499      	strb	r1, [r3, r2]
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	4a35      	ldr	r2, [pc, #212]	; (7414 <sync+0x174>)
    733e:	2161      	movs	r1, #97	; 0x61
    7340:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	691b      	ldr	r3, [r3, #16]
    7346:	b2d9      	uxtb	r1, r3
    7348:	687a      	ldr	r2, [r7, #4]
    734a:	2386      	movs	r3, #134	; 0x86
    734c:	009b      	lsls	r3, r3, #2
    734e:	54d1      	strb	r1, [r2, r3]
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	691b      	ldr	r3, [r3, #16]
    7354:	b29b      	uxth	r3, r3
    7356:	0a1b      	lsrs	r3, r3, #8
    7358:	b29b      	uxth	r3, r3
    735a:	b2d9      	uxtb	r1, r3
    735c:	687b      	ldr	r3, [r7, #4]
    735e:	4a2e      	ldr	r2, [pc, #184]	; (7418 <sync+0x178>)
    7360:	5499      	strb	r1, [r3, r2]
    7362:	687b      	ldr	r3, [r7, #4]
    7364:	691b      	ldr	r3, [r3, #16]
    7366:	0c1b      	lsrs	r3, r3, #16
    7368:	b2d9      	uxtb	r1, r3
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	4a2b      	ldr	r2, [pc, #172]	; (741c <sync+0x17c>)
    736e:	5499      	strb	r1, [r3, r2]
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	691b      	ldr	r3, [r3, #16]
    7374:	0e1b      	lsrs	r3, r3, #24
    7376:	b2d9      	uxtb	r1, r3
    7378:	687b      	ldr	r3, [r7, #4]
    737a:	4a29      	ldr	r2, [pc, #164]	; (7420 <sync+0x180>)
    737c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    737e:	687b      	ldr	r3, [r7, #4]
    7380:	68db      	ldr	r3, [r3, #12]
    7382:	b2d9      	uxtb	r1, r3
    7384:	687a      	ldr	r2, [r7, #4]
    7386:	2387      	movs	r3, #135	; 0x87
    7388:	009b      	lsls	r3, r3, #2
    738a:	54d1      	strb	r1, [r2, r3]
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	68db      	ldr	r3, [r3, #12]
    7390:	b29b      	uxth	r3, r3
    7392:	0a1b      	lsrs	r3, r3, #8
    7394:	b29b      	uxth	r3, r3
    7396:	b2d9      	uxtb	r1, r3
    7398:	687b      	ldr	r3, [r7, #4]
    739a:	4a22      	ldr	r2, [pc, #136]	; (7424 <sync+0x184>)
    739c:	5499      	strb	r1, [r3, r2]
    739e:	687b      	ldr	r3, [r7, #4]
    73a0:	68db      	ldr	r3, [r3, #12]
    73a2:	0c1b      	lsrs	r3, r3, #16
    73a4:	b2d9      	uxtb	r1, r3
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	4a1f      	ldr	r2, [pc, #124]	; (7428 <sync+0x188>)
    73aa:	5499      	strb	r1, [r3, r2]
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	68db      	ldr	r3, [r3, #12]
    73b0:	0e1b      	lsrs	r3, r3, #24
    73b2:	b2d9      	uxtb	r1, r3
    73b4:	687b      	ldr	r3, [r7, #4]
    73b6:	4a1d      	ldr	r2, [pc, #116]	; (742c <sync+0x18c>)
    73b8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    73ba:	687b      	ldr	r3, [r7, #4]
    73bc:	7858      	ldrb	r0, [r3, #1]
    73be:	687b      	ldr	r3, [r7, #4]
    73c0:	3330      	adds	r3, #48	; 0x30
    73c2:	0019      	movs	r1, r3
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	695a      	ldr	r2, [r3, #20]
    73c8:	2301      	movs	r3, #1
    73ca:	4c19      	ldr	r4, [pc, #100]	; (7430 <sync+0x190>)
    73cc:	47a0      	blx	r4
			fs->fsi_flag = 0;
    73ce:	687b      	ldr	r3, [r7, #4]
    73d0:	2200      	movs	r2, #0
    73d2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    73d4:	687b      	ldr	r3, [r7, #4]
    73d6:	785b      	ldrb	r3, [r3, #1]
    73d8:	2200      	movs	r2, #0
    73da:	2100      	movs	r1, #0
    73dc:	0018      	movs	r0, r3
    73de:	4b15      	ldr	r3, [pc, #84]	; (7434 <sync+0x194>)
    73e0:	4798      	blx	r3
    73e2:	1e03      	subs	r3, r0, #0
    73e4:	d003      	beq.n	73ee <sync+0x14e>
			res = FR_DISK_ERR;
    73e6:	230f      	movs	r3, #15
    73e8:	18fb      	adds	r3, r7, r3
    73ea:	2201      	movs	r2, #1
    73ec:	701a      	strb	r2, [r3, #0]
	}

	return res;
    73ee:	230f      	movs	r3, #15
    73f0:	18fb      	adds	r3, r7, r3
    73f2:	781b      	ldrb	r3, [r3, #0]
}
    73f4:	0018      	movs	r0, r3
    73f6:	46bd      	mov	sp, r7
    73f8:	b005      	add	sp, #20
    73fa:	bd90      	pop	{r4, r7, pc}
    73fc:	000071d9 	.word	0x000071d9
    7400:	0000712d 	.word	0x0000712d
    7404:	0000022e 	.word	0x0000022e
    7408:	0000022f 	.word	0x0000022f
    740c:	00000215 	.word	0x00000215
    7410:	00000216 	.word	0x00000216
    7414:	00000217 	.word	0x00000217
    7418:	00000219 	.word	0x00000219
    741c:	0000021a 	.word	0x0000021a
    7420:	0000021b 	.word	0x0000021b
    7424:	0000021d 	.word	0x0000021d
    7428:	0000021e 	.word	0x0000021e
    742c:	0000021f 	.word	0x0000021f
    7430:	00006ec5 	.word	0x00006ec5
    7434:	00006f9d 	.word	0x00006f9d

00007438 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7438:	b580      	push	{r7, lr}
    743a:	b082      	sub	sp, #8
    743c:	af00      	add	r7, sp, #0
    743e:	6078      	str	r0, [r7, #4]
    7440:	6039      	str	r1, [r7, #0]
	clst -= 2;
    7442:	683b      	ldr	r3, [r7, #0]
    7444:	3b02      	subs	r3, #2
    7446:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	699b      	ldr	r3, [r3, #24]
    744c:	1e9a      	subs	r2, r3, #2
    744e:	683b      	ldr	r3, [r7, #0]
    7450:	429a      	cmp	r2, r3
    7452:	d801      	bhi.n	7458 <clust2sect+0x20>
    7454:	2300      	movs	r3, #0
    7456:	e007      	b.n	7468 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	789b      	ldrb	r3, [r3, #2]
    745c:	001a      	movs	r2, r3
    745e:	683b      	ldr	r3, [r7, #0]
    7460:	435a      	muls	r2, r3
    7462:	687b      	ldr	r3, [r7, #4]
    7464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7466:	18d3      	adds	r3, r2, r3
}
    7468:	0018      	movs	r0, r3
    746a:	46bd      	mov	sp, r7
    746c:	b002      	add	sp, #8
    746e:	bd80      	pop	{r7, pc}

00007470 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7470:	b580      	push	{r7, lr}
    7472:	b086      	sub	sp, #24
    7474:	af00      	add	r7, sp, #0
    7476:	6078      	str	r0, [r7, #4]
    7478:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    747a:	683b      	ldr	r3, [r7, #0]
    747c:	2b01      	cmp	r3, #1
    747e:	d904      	bls.n	748a <get_fat+0x1a>
    7480:	687b      	ldr	r3, [r7, #4]
    7482:	699a      	ldr	r2, [r3, #24]
    7484:	683b      	ldr	r3, [r7, #0]
    7486:	429a      	cmp	r2, r3
    7488:	d801      	bhi.n	748e <get_fat+0x1e>
		return 1;
    748a:	2301      	movs	r3, #1
    748c:	e09f      	b.n	75ce <get_fat+0x15e>

	switch (fs->fs_type) {
    748e:	687b      	ldr	r3, [r7, #4]
    7490:	781b      	ldrb	r3, [r3, #0]
    7492:	2b02      	cmp	r3, #2
    7494:	d048      	beq.n	7528 <get_fat+0xb8>
    7496:	2b03      	cmp	r3, #3
    7498:	d067      	beq.n	756a <get_fat+0xfa>
    749a:	2b01      	cmp	r3, #1
    749c:	d000      	beq.n	74a0 <get_fat+0x30>
    749e:	e094      	b.n	75ca <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    74a0:	683b      	ldr	r3, [r7, #0]
    74a2:	617b      	str	r3, [r7, #20]
    74a4:	697b      	ldr	r3, [r7, #20]
    74a6:	085b      	lsrs	r3, r3, #1
    74a8:	697a      	ldr	r2, [r7, #20]
    74aa:	18d3      	adds	r3, r2, r3
    74ac:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	6a1a      	ldr	r2, [r3, #32]
    74b2:	697b      	ldr	r3, [r7, #20]
    74b4:	0a5b      	lsrs	r3, r3, #9
    74b6:	18d2      	adds	r2, r2, r3
    74b8:	687b      	ldr	r3, [r7, #4]
    74ba:	0011      	movs	r1, r2
    74bc:	0018      	movs	r0, r3
    74be:	4b46      	ldr	r3, [pc, #280]	; (75d8 <get_fat+0x168>)
    74c0:	4798      	blx	r3
    74c2:	1e03      	subs	r3, r0, #0
    74c4:	d000      	beq.n	74c8 <get_fat+0x58>
    74c6:	e079      	b.n	75bc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    74c8:	697b      	ldr	r3, [r7, #20]
    74ca:	05db      	lsls	r3, r3, #23
    74cc:	0ddb      	lsrs	r3, r3, #23
    74ce:	687a      	ldr	r2, [r7, #4]
    74d0:	2130      	movs	r1, #48	; 0x30
    74d2:	18d3      	adds	r3, r2, r3
    74d4:	185b      	adds	r3, r3, r1
    74d6:	781b      	ldrb	r3, [r3, #0]
    74d8:	613b      	str	r3, [r7, #16]
    74da:	697b      	ldr	r3, [r7, #20]
    74dc:	3301      	adds	r3, #1
    74de:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    74e0:	687b      	ldr	r3, [r7, #4]
    74e2:	6a1a      	ldr	r2, [r3, #32]
    74e4:	697b      	ldr	r3, [r7, #20]
    74e6:	0a5b      	lsrs	r3, r3, #9
    74e8:	18d2      	adds	r2, r2, r3
    74ea:	687b      	ldr	r3, [r7, #4]
    74ec:	0011      	movs	r1, r2
    74ee:	0018      	movs	r0, r3
    74f0:	4b39      	ldr	r3, [pc, #228]	; (75d8 <get_fat+0x168>)
    74f2:	4798      	blx	r3
    74f4:	1e03      	subs	r3, r0, #0
    74f6:	d163      	bne.n	75c0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    74f8:	697b      	ldr	r3, [r7, #20]
    74fa:	05db      	lsls	r3, r3, #23
    74fc:	0ddb      	lsrs	r3, r3, #23
    74fe:	687a      	ldr	r2, [r7, #4]
    7500:	2130      	movs	r1, #48	; 0x30
    7502:	18d3      	adds	r3, r2, r3
    7504:	185b      	adds	r3, r3, r1
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	021b      	lsls	r3, r3, #8
    750a:	001a      	movs	r2, r3
    750c:	693b      	ldr	r3, [r7, #16]
    750e:	4313      	orrs	r3, r2
    7510:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7512:	683b      	ldr	r3, [r7, #0]
    7514:	2201      	movs	r2, #1
    7516:	4013      	ands	r3, r2
    7518:	d002      	beq.n	7520 <get_fat+0xb0>
    751a:	693b      	ldr	r3, [r7, #16]
    751c:	091b      	lsrs	r3, r3, #4
    751e:	e056      	b.n	75ce <get_fat+0x15e>
    7520:	693b      	ldr	r3, [r7, #16]
    7522:	051b      	lsls	r3, r3, #20
    7524:	0d1b      	lsrs	r3, r3, #20
    7526:	e052      	b.n	75ce <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	6a1a      	ldr	r2, [r3, #32]
    752c:	683b      	ldr	r3, [r7, #0]
    752e:	0a1b      	lsrs	r3, r3, #8
    7530:	18d2      	adds	r2, r2, r3
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	0011      	movs	r1, r2
    7536:	0018      	movs	r0, r3
    7538:	4b27      	ldr	r3, [pc, #156]	; (75d8 <get_fat+0x168>)
    753a:	4798      	blx	r3
    753c:	1e03      	subs	r3, r0, #0
    753e:	d141      	bne.n	75c4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7540:	683b      	ldr	r3, [r7, #0]
    7542:	005a      	lsls	r2, r3, #1
    7544:	23ff      	movs	r3, #255	; 0xff
    7546:	005b      	lsls	r3, r3, #1
    7548:	4013      	ands	r3, r2
    754a:	3330      	adds	r3, #48	; 0x30
    754c:	687a      	ldr	r2, [r7, #4]
    754e:	18d3      	adds	r3, r2, r3
    7550:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7552:	68fb      	ldr	r3, [r7, #12]
    7554:	3301      	adds	r3, #1
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	021b      	lsls	r3, r3, #8
    755a:	b21a      	sxth	r2, r3
    755c:	68fb      	ldr	r3, [r7, #12]
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	b21b      	sxth	r3, r3
    7562:	4313      	orrs	r3, r2
    7564:	b21b      	sxth	r3, r3
    7566:	b29b      	uxth	r3, r3
    7568:	e031      	b.n	75ce <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	6a1a      	ldr	r2, [r3, #32]
    756e:	683b      	ldr	r3, [r7, #0]
    7570:	09db      	lsrs	r3, r3, #7
    7572:	18d2      	adds	r2, r2, r3
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	0011      	movs	r1, r2
    7578:	0018      	movs	r0, r3
    757a:	4b17      	ldr	r3, [pc, #92]	; (75d8 <get_fat+0x168>)
    757c:	4798      	blx	r3
    757e:	1e03      	subs	r3, r0, #0
    7580:	d122      	bne.n	75c8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    7582:	683b      	ldr	r3, [r7, #0]
    7584:	009a      	lsls	r2, r3, #2
    7586:	23fe      	movs	r3, #254	; 0xfe
    7588:	005b      	lsls	r3, r3, #1
    758a:	4013      	ands	r3, r2
    758c:	3330      	adds	r3, #48	; 0x30
    758e:	687a      	ldr	r2, [r7, #4]
    7590:	18d3      	adds	r3, r2, r3
    7592:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	3303      	adds	r3, #3
    7598:	781b      	ldrb	r3, [r3, #0]
    759a:	061a      	lsls	r2, r3, #24
    759c:	68fb      	ldr	r3, [r7, #12]
    759e:	3302      	adds	r3, #2
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	041b      	lsls	r3, r3, #16
    75a4:	4313      	orrs	r3, r2
    75a6:	68fa      	ldr	r2, [r7, #12]
    75a8:	3201      	adds	r2, #1
    75aa:	7812      	ldrb	r2, [r2, #0]
    75ac:	0212      	lsls	r2, r2, #8
    75ae:	4313      	orrs	r3, r2
    75b0:	68fa      	ldr	r2, [r7, #12]
    75b2:	7812      	ldrb	r2, [r2, #0]
    75b4:	4313      	orrs	r3, r2
    75b6:	011b      	lsls	r3, r3, #4
    75b8:	091b      	lsrs	r3, r3, #4
    75ba:	e008      	b.n	75ce <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    75bc:	46c0      	nop			; (mov r8, r8)
    75be:	e004      	b.n	75ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    75c0:	46c0      	nop			; (mov r8, r8)
    75c2:	e002      	b.n	75ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    75c4:	46c0      	nop			; (mov r8, r8)
    75c6:	e000      	b.n	75ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    75c8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    75ca:	2301      	movs	r3, #1
    75cc:	425b      	negs	r3, r3
}
    75ce:	0018      	movs	r0, r3
    75d0:	46bd      	mov	sp, r7
    75d2:	b006      	add	sp, #24
    75d4:	bd80      	pop	{r7, pc}
    75d6:	46c0      	nop			; (mov r8, r8)
    75d8:	000071d9 	.word	0x000071d9

000075dc <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    75dc:	b590      	push	{r4, r7, lr}
    75de:	b089      	sub	sp, #36	; 0x24
    75e0:	af00      	add	r7, sp, #0
    75e2:	60f8      	str	r0, [r7, #12]
    75e4:	60b9      	str	r1, [r7, #8]
    75e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    75e8:	68bb      	ldr	r3, [r7, #8]
    75ea:	2b01      	cmp	r3, #1
    75ec:	d904      	bls.n	75f8 <put_fat+0x1c>
    75ee:	68fb      	ldr	r3, [r7, #12]
    75f0:	699a      	ldr	r2, [r3, #24]
    75f2:	68bb      	ldr	r3, [r7, #8]
    75f4:	429a      	cmp	r2, r3
    75f6:	d804      	bhi.n	7602 <put_fat+0x26>
		res = FR_INT_ERR;
    75f8:	231f      	movs	r3, #31
    75fa:	18fb      	adds	r3, r7, r3
    75fc:	2202      	movs	r2, #2
    75fe:	701a      	strb	r2, [r3, #0]
    7600:	e100      	b.n	7804 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7602:	68fb      	ldr	r3, [r7, #12]
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	2b02      	cmp	r3, #2
    7608:	d100      	bne.n	760c <put_fat+0x30>
    760a:	e078      	b.n	76fe <put_fat+0x122>
    760c:	2b03      	cmp	r3, #3
    760e:	d100      	bne.n	7612 <put_fat+0x36>
    7610:	e09e      	b.n	7750 <put_fat+0x174>
    7612:	2b01      	cmp	r3, #1
    7614:	d000      	beq.n	7618 <put_fat+0x3c>
    7616:	e0e6      	b.n	77e6 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7618:	68bb      	ldr	r3, [r7, #8]
    761a:	61bb      	str	r3, [r7, #24]
    761c:	69bb      	ldr	r3, [r7, #24]
    761e:	085b      	lsrs	r3, r3, #1
    7620:	69ba      	ldr	r2, [r7, #24]
    7622:	18d3      	adds	r3, r2, r3
    7624:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7626:	68fb      	ldr	r3, [r7, #12]
    7628:	6a1a      	ldr	r2, [r3, #32]
    762a:	69bb      	ldr	r3, [r7, #24]
    762c:	0a5b      	lsrs	r3, r3, #9
    762e:	18d2      	adds	r2, r2, r3
    7630:	231f      	movs	r3, #31
    7632:	18fc      	adds	r4, r7, r3
    7634:	68fb      	ldr	r3, [r7, #12]
    7636:	0011      	movs	r1, r2
    7638:	0018      	movs	r0, r3
    763a:	4b76      	ldr	r3, [pc, #472]	; (7814 <put_fat+0x238>)
    763c:	4798      	blx	r3
    763e:	0003      	movs	r3, r0
    7640:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7642:	231f      	movs	r3, #31
    7644:	18fb      	adds	r3, r7, r3
    7646:	781b      	ldrb	r3, [r3, #0]
    7648:	2b00      	cmp	r3, #0
    764a:	d000      	beq.n	764e <put_fat+0x72>
    764c:	e0d0      	b.n	77f0 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    764e:	69bb      	ldr	r3, [r7, #24]
    7650:	05db      	lsls	r3, r3, #23
    7652:	0ddb      	lsrs	r3, r3, #23
    7654:	3330      	adds	r3, #48	; 0x30
    7656:	68fa      	ldr	r2, [r7, #12]
    7658:	18d3      	adds	r3, r2, r3
    765a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    765c:	68bb      	ldr	r3, [r7, #8]
    765e:	2201      	movs	r2, #1
    7660:	4013      	ands	r3, r2
    7662:	d00d      	beq.n	7680 <put_fat+0xa4>
    7664:	697b      	ldr	r3, [r7, #20]
    7666:	781b      	ldrb	r3, [r3, #0]
    7668:	b25b      	sxtb	r3, r3
    766a:	220f      	movs	r2, #15
    766c:	4013      	ands	r3, r2
    766e:	b25a      	sxtb	r2, r3
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	b2db      	uxtb	r3, r3
    7674:	011b      	lsls	r3, r3, #4
    7676:	b25b      	sxtb	r3, r3
    7678:	4313      	orrs	r3, r2
    767a:	b25b      	sxtb	r3, r3
    767c:	b2db      	uxtb	r3, r3
    767e:	e001      	b.n	7684 <put_fat+0xa8>
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	b2db      	uxtb	r3, r3
    7684:	697a      	ldr	r2, [r7, #20]
    7686:	7013      	strb	r3, [r2, #0]
			bc++;
    7688:	69bb      	ldr	r3, [r7, #24]
    768a:	3301      	adds	r3, #1
    768c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    768e:	68fb      	ldr	r3, [r7, #12]
    7690:	2201      	movs	r2, #1
    7692:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7694:	68fb      	ldr	r3, [r7, #12]
    7696:	6a1a      	ldr	r2, [r3, #32]
    7698:	69bb      	ldr	r3, [r7, #24]
    769a:	0a5b      	lsrs	r3, r3, #9
    769c:	18d2      	adds	r2, r2, r3
    769e:	231f      	movs	r3, #31
    76a0:	18fc      	adds	r4, r7, r3
    76a2:	68fb      	ldr	r3, [r7, #12]
    76a4:	0011      	movs	r1, r2
    76a6:	0018      	movs	r0, r3
    76a8:	4b5a      	ldr	r3, [pc, #360]	; (7814 <put_fat+0x238>)
    76aa:	4798      	blx	r3
    76ac:	0003      	movs	r3, r0
    76ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    76b0:	231f      	movs	r3, #31
    76b2:	18fb      	adds	r3, r7, r3
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	2b00      	cmp	r3, #0
    76b8:	d000      	beq.n	76bc <put_fat+0xe0>
    76ba:	e09b      	b.n	77f4 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    76bc:	69bb      	ldr	r3, [r7, #24]
    76be:	05db      	lsls	r3, r3, #23
    76c0:	0ddb      	lsrs	r3, r3, #23
    76c2:	3330      	adds	r3, #48	; 0x30
    76c4:	68fa      	ldr	r2, [r7, #12]
    76c6:	18d3      	adds	r3, r2, r3
    76c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    76ca:	68bb      	ldr	r3, [r7, #8]
    76cc:	2201      	movs	r2, #1
    76ce:	4013      	ands	r3, r2
    76d0:	d003      	beq.n	76da <put_fat+0xfe>
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	091b      	lsrs	r3, r3, #4
    76d6:	b2db      	uxtb	r3, r3
    76d8:	e00e      	b.n	76f8 <put_fat+0x11c>
    76da:	697b      	ldr	r3, [r7, #20]
    76dc:	781b      	ldrb	r3, [r3, #0]
    76de:	b25b      	sxtb	r3, r3
    76e0:	220f      	movs	r2, #15
    76e2:	4393      	bics	r3, r2
    76e4:	b25a      	sxtb	r2, r3
    76e6:	687b      	ldr	r3, [r7, #4]
    76e8:	0a1b      	lsrs	r3, r3, #8
    76ea:	b25b      	sxtb	r3, r3
    76ec:	210f      	movs	r1, #15
    76ee:	400b      	ands	r3, r1
    76f0:	b25b      	sxtb	r3, r3
    76f2:	4313      	orrs	r3, r2
    76f4:	b25b      	sxtb	r3, r3
    76f6:	b2db      	uxtb	r3, r3
    76f8:	697a      	ldr	r2, [r7, #20]
    76fa:	7013      	strb	r3, [r2, #0]
			break;
    76fc:	e07f      	b.n	77fe <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    76fe:	68fb      	ldr	r3, [r7, #12]
    7700:	6a1a      	ldr	r2, [r3, #32]
    7702:	68bb      	ldr	r3, [r7, #8]
    7704:	0a1b      	lsrs	r3, r3, #8
    7706:	18d2      	adds	r2, r2, r3
    7708:	231f      	movs	r3, #31
    770a:	18fc      	adds	r4, r7, r3
    770c:	68fb      	ldr	r3, [r7, #12]
    770e:	0011      	movs	r1, r2
    7710:	0018      	movs	r0, r3
    7712:	4b40      	ldr	r3, [pc, #256]	; (7814 <put_fat+0x238>)
    7714:	4798      	blx	r3
    7716:	0003      	movs	r3, r0
    7718:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    771a:	231f      	movs	r3, #31
    771c:	18fb      	adds	r3, r7, r3
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	2b00      	cmp	r3, #0
    7722:	d169      	bne.n	77f8 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7724:	68bb      	ldr	r3, [r7, #8]
    7726:	005a      	lsls	r2, r3, #1
    7728:	23ff      	movs	r3, #255	; 0xff
    772a:	005b      	lsls	r3, r3, #1
    772c:	4013      	ands	r3, r2
    772e:	3330      	adds	r3, #48	; 0x30
    7730:	68fa      	ldr	r2, [r7, #12]
    7732:	18d3      	adds	r3, r2, r3
    7734:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	b2da      	uxtb	r2, r3
    773a:	697b      	ldr	r3, [r7, #20]
    773c:	701a      	strb	r2, [r3, #0]
    773e:	697b      	ldr	r3, [r7, #20]
    7740:	3301      	adds	r3, #1
    7742:	687a      	ldr	r2, [r7, #4]
    7744:	b292      	uxth	r2, r2
    7746:	0a12      	lsrs	r2, r2, #8
    7748:	b292      	uxth	r2, r2
    774a:	b2d2      	uxtb	r2, r2
    774c:	701a      	strb	r2, [r3, #0]
			break;
    774e:	e056      	b.n	77fe <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7750:	68fb      	ldr	r3, [r7, #12]
    7752:	6a1a      	ldr	r2, [r3, #32]
    7754:	68bb      	ldr	r3, [r7, #8]
    7756:	09db      	lsrs	r3, r3, #7
    7758:	18d2      	adds	r2, r2, r3
    775a:	231f      	movs	r3, #31
    775c:	18fc      	adds	r4, r7, r3
    775e:	68fb      	ldr	r3, [r7, #12]
    7760:	0011      	movs	r1, r2
    7762:	0018      	movs	r0, r3
    7764:	4b2b      	ldr	r3, [pc, #172]	; (7814 <put_fat+0x238>)
    7766:	4798      	blx	r3
    7768:	0003      	movs	r3, r0
    776a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    776c:	231f      	movs	r3, #31
    776e:	18fb      	adds	r3, r7, r3
    7770:	781b      	ldrb	r3, [r3, #0]
    7772:	2b00      	cmp	r3, #0
    7774:	d142      	bne.n	77fc <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7776:	68bb      	ldr	r3, [r7, #8]
    7778:	009a      	lsls	r2, r3, #2
    777a:	23fe      	movs	r3, #254	; 0xfe
    777c:	005b      	lsls	r3, r3, #1
    777e:	4013      	ands	r3, r2
    7780:	3330      	adds	r3, #48	; 0x30
    7782:	68fa      	ldr	r2, [r7, #12]
    7784:	18d3      	adds	r3, r2, r3
    7786:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7788:	697b      	ldr	r3, [r7, #20]
    778a:	3303      	adds	r3, #3
    778c:	781b      	ldrb	r3, [r3, #0]
    778e:	061a      	lsls	r2, r3, #24
    7790:	697b      	ldr	r3, [r7, #20]
    7792:	3302      	adds	r3, #2
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	041b      	lsls	r3, r3, #16
    7798:	4313      	orrs	r3, r2
    779a:	697a      	ldr	r2, [r7, #20]
    779c:	3201      	adds	r2, #1
    779e:	7812      	ldrb	r2, [r2, #0]
    77a0:	0212      	lsls	r2, r2, #8
    77a2:	4313      	orrs	r3, r2
    77a4:	697a      	ldr	r2, [r7, #20]
    77a6:	7812      	ldrb	r2, [r2, #0]
    77a8:	4313      	orrs	r3, r2
    77aa:	0f1b      	lsrs	r3, r3, #28
    77ac:	071b      	lsls	r3, r3, #28
    77ae:	687a      	ldr	r2, [r7, #4]
    77b0:	4313      	orrs	r3, r2
    77b2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    77b4:	687b      	ldr	r3, [r7, #4]
    77b6:	b2da      	uxtb	r2, r3
    77b8:	697b      	ldr	r3, [r7, #20]
    77ba:	701a      	strb	r2, [r3, #0]
    77bc:	697b      	ldr	r3, [r7, #20]
    77be:	3301      	adds	r3, #1
    77c0:	687a      	ldr	r2, [r7, #4]
    77c2:	b292      	uxth	r2, r2
    77c4:	0a12      	lsrs	r2, r2, #8
    77c6:	b292      	uxth	r2, r2
    77c8:	b2d2      	uxtb	r2, r2
    77ca:	701a      	strb	r2, [r3, #0]
    77cc:	697b      	ldr	r3, [r7, #20]
    77ce:	3302      	adds	r3, #2
    77d0:	687a      	ldr	r2, [r7, #4]
    77d2:	0c12      	lsrs	r2, r2, #16
    77d4:	b2d2      	uxtb	r2, r2
    77d6:	701a      	strb	r2, [r3, #0]
    77d8:	697b      	ldr	r3, [r7, #20]
    77da:	3303      	adds	r3, #3
    77dc:	687a      	ldr	r2, [r7, #4]
    77de:	0e12      	lsrs	r2, r2, #24
    77e0:	b2d2      	uxtb	r2, r2
    77e2:	701a      	strb	r2, [r3, #0]
			break;
    77e4:	e00b      	b.n	77fe <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    77e6:	231f      	movs	r3, #31
    77e8:	18fb      	adds	r3, r7, r3
    77ea:	2202      	movs	r2, #2
    77ec:	701a      	strb	r2, [r3, #0]
    77ee:	e006      	b.n	77fe <put_fat+0x222>
			if (res != FR_OK) break;
    77f0:	46c0      	nop			; (mov r8, r8)
    77f2:	e004      	b.n	77fe <put_fat+0x222>
			if (res != FR_OK) break;
    77f4:	46c0      	nop			; (mov r8, r8)
    77f6:	e002      	b.n	77fe <put_fat+0x222>
			if (res != FR_OK) break;
    77f8:	46c0      	nop			; (mov r8, r8)
    77fa:	e000      	b.n	77fe <put_fat+0x222>
			if (res != FR_OK) break;
    77fc:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    77fe:	68fb      	ldr	r3, [r7, #12]
    7800:	2201      	movs	r2, #1
    7802:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7804:	231f      	movs	r3, #31
    7806:	18fb      	adds	r3, r7, r3
    7808:	781b      	ldrb	r3, [r3, #0]
}
    780a:	0018      	movs	r0, r3
    780c:	46bd      	mov	sp, r7
    780e:	b009      	add	sp, #36	; 0x24
    7810:	bd90      	pop	{r4, r7, pc}
    7812:	46c0      	nop			; (mov r8, r8)
    7814:	000071d9 	.word	0x000071d9

00007818 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7818:	b590      	push	{r4, r7, lr}
    781a:	b085      	sub	sp, #20
    781c:	af00      	add	r7, sp, #0
    781e:	6078      	str	r0, [r7, #4]
    7820:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7822:	683b      	ldr	r3, [r7, #0]
    7824:	2b01      	cmp	r3, #1
    7826:	d904      	bls.n	7832 <remove_chain+0x1a>
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	699a      	ldr	r2, [r3, #24]
    782c:	683b      	ldr	r3, [r7, #0]
    782e:	429a      	cmp	r2, r3
    7830:	d804      	bhi.n	783c <remove_chain+0x24>
		res = FR_INT_ERR;
    7832:	230f      	movs	r3, #15
    7834:	18fb      	adds	r3, r7, r3
    7836:	2202      	movs	r2, #2
    7838:	701a      	strb	r2, [r3, #0]
    783a:	e045      	b.n	78c8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    783c:	230f      	movs	r3, #15
    783e:	18fb      	adds	r3, r7, r3
    7840:	2200      	movs	r2, #0
    7842:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7844:	e037      	b.n	78b6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7846:	683a      	ldr	r2, [r7, #0]
    7848:	687b      	ldr	r3, [r7, #4]
    784a:	0011      	movs	r1, r2
    784c:	0018      	movs	r0, r3
    784e:	4b22      	ldr	r3, [pc, #136]	; (78d8 <remove_chain+0xc0>)
    7850:	4798      	blx	r3
    7852:	0003      	movs	r3, r0
    7854:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7856:	68bb      	ldr	r3, [r7, #8]
    7858:	2b00      	cmp	r3, #0
    785a:	d032      	beq.n	78c2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    785c:	68bb      	ldr	r3, [r7, #8]
    785e:	2b01      	cmp	r3, #1
    7860:	d104      	bne.n	786c <remove_chain+0x54>
    7862:	230f      	movs	r3, #15
    7864:	18fb      	adds	r3, r7, r3
    7866:	2202      	movs	r2, #2
    7868:	701a      	strb	r2, [r3, #0]
    786a:	e02d      	b.n	78c8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    786c:	68bb      	ldr	r3, [r7, #8]
    786e:	3301      	adds	r3, #1
    7870:	d104      	bne.n	787c <remove_chain+0x64>
    7872:	230f      	movs	r3, #15
    7874:	18fb      	adds	r3, r7, r3
    7876:	2201      	movs	r2, #1
    7878:	701a      	strb	r2, [r3, #0]
    787a:	e025      	b.n	78c8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    787c:	230f      	movs	r3, #15
    787e:	18fc      	adds	r4, r7, r3
    7880:	6839      	ldr	r1, [r7, #0]
    7882:	687b      	ldr	r3, [r7, #4]
    7884:	2200      	movs	r2, #0
    7886:	0018      	movs	r0, r3
    7888:	4b14      	ldr	r3, [pc, #80]	; (78dc <remove_chain+0xc4>)
    788a:	4798      	blx	r3
    788c:	0003      	movs	r3, r0
    788e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7890:	230f      	movs	r3, #15
    7892:	18fb      	adds	r3, r7, r3
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	2b00      	cmp	r3, #0
    7898:	d115      	bne.n	78c6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	691b      	ldr	r3, [r3, #16]
    789e:	3301      	adds	r3, #1
    78a0:	d007      	beq.n	78b2 <remove_chain+0x9a>
				fs->free_clust++;
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	691b      	ldr	r3, [r3, #16]
    78a6:	1c5a      	adds	r2, r3, #1
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    78ac:	687b      	ldr	r3, [r7, #4]
    78ae:	2201      	movs	r2, #1
    78b0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    78b2:	68bb      	ldr	r3, [r7, #8]
    78b4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	699a      	ldr	r2, [r3, #24]
    78ba:	683b      	ldr	r3, [r7, #0]
    78bc:	429a      	cmp	r2, r3
    78be:	d8c2      	bhi.n	7846 <remove_chain+0x2e>
    78c0:	e002      	b.n	78c8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    78c2:	46c0      	nop			; (mov r8, r8)
    78c4:	e000      	b.n	78c8 <remove_chain+0xb0>
			if (res != FR_OK) break;
    78c6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    78c8:	230f      	movs	r3, #15
    78ca:	18fb      	adds	r3, r7, r3
    78cc:	781b      	ldrb	r3, [r3, #0]
}
    78ce:	0018      	movs	r0, r3
    78d0:	46bd      	mov	sp, r7
    78d2:	b005      	add	sp, #20
    78d4:	bd90      	pop	{r4, r7, pc}
    78d6:	46c0      	nop			; (mov r8, r8)
    78d8:	00007471 	.word	0x00007471
    78dc:	000075dd 	.word	0x000075dd

000078e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    78e0:	b590      	push	{r4, r7, lr}
    78e2:	b087      	sub	sp, #28
    78e4:	af00      	add	r7, sp, #0
    78e6:	6078      	str	r0, [r7, #4]
    78e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    78ea:	683b      	ldr	r3, [r7, #0]
    78ec:	2b00      	cmp	r3, #0
    78ee:	d10d      	bne.n	790c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	68db      	ldr	r3, [r3, #12]
    78f4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    78f6:	693b      	ldr	r3, [r7, #16]
    78f8:	2b00      	cmp	r3, #0
    78fa:	d004      	beq.n	7906 <create_chain+0x26>
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	699a      	ldr	r2, [r3, #24]
    7900:	693b      	ldr	r3, [r7, #16]
    7902:	429a      	cmp	r2, r3
    7904:	d818      	bhi.n	7938 <create_chain+0x58>
    7906:	2301      	movs	r3, #1
    7908:	613b      	str	r3, [r7, #16]
    790a:	e015      	b.n	7938 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    790c:	683a      	ldr	r2, [r7, #0]
    790e:	687b      	ldr	r3, [r7, #4]
    7910:	0011      	movs	r1, r2
    7912:	0018      	movs	r0, r3
    7914:	4b3e      	ldr	r3, [pc, #248]	; (7a10 <create_chain+0x130>)
    7916:	4798      	blx	r3
    7918:	0003      	movs	r3, r0
    791a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    791c:	68bb      	ldr	r3, [r7, #8]
    791e:	2b01      	cmp	r3, #1
    7920:	d801      	bhi.n	7926 <create_chain+0x46>
    7922:	2301      	movs	r3, #1
    7924:	e070      	b.n	7a08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7926:	687b      	ldr	r3, [r7, #4]
    7928:	699a      	ldr	r2, [r3, #24]
    792a:	68bb      	ldr	r3, [r7, #8]
    792c:	429a      	cmp	r2, r3
    792e:	d901      	bls.n	7934 <create_chain+0x54>
    7930:	68bb      	ldr	r3, [r7, #8]
    7932:	e069      	b.n	7a08 <create_chain+0x128>
		scl = clst;
    7934:	683b      	ldr	r3, [r7, #0]
    7936:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7938:	693b      	ldr	r3, [r7, #16]
    793a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    793c:	697b      	ldr	r3, [r7, #20]
    793e:	3301      	adds	r3, #1
    7940:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	699a      	ldr	r2, [r3, #24]
    7946:	697b      	ldr	r3, [r7, #20]
    7948:	429a      	cmp	r2, r3
    794a:	d807      	bhi.n	795c <create_chain+0x7c>
			ncl = 2;
    794c:	2302      	movs	r3, #2
    794e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7950:	697a      	ldr	r2, [r7, #20]
    7952:	693b      	ldr	r3, [r7, #16]
    7954:	429a      	cmp	r2, r3
    7956:	d901      	bls.n	795c <create_chain+0x7c>
    7958:	2300      	movs	r3, #0
    795a:	e055      	b.n	7a08 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    795c:	697a      	ldr	r2, [r7, #20]
    795e:	687b      	ldr	r3, [r7, #4]
    7960:	0011      	movs	r1, r2
    7962:	0018      	movs	r0, r3
    7964:	4b2a      	ldr	r3, [pc, #168]	; (7a10 <create_chain+0x130>)
    7966:	4798      	blx	r3
    7968:	0003      	movs	r3, r0
    796a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    796c:	68bb      	ldr	r3, [r7, #8]
    796e:	2b00      	cmp	r3, #0
    7970:	d00d      	beq.n	798e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7972:	68bb      	ldr	r3, [r7, #8]
    7974:	3301      	adds	r3, #1
    7976:	d002      	beq.n	797e <create_chain+0x9e>
    7978:	68bb      	ldr	r3, [r7, #8]
    797a:	2b01      	cmp	r3, #1
    797c:	d101      	bne.n	7982 <create_chain+0xa2>
			return cs;
    797e:	68bb      	ldr	r3, [r7, #8]
    7980:	e042      	b.n	7a08 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7982:	697a      	ldr	r2, [r7, #20]
    7984:	693b      	ldr	r3, [r7, #16]
    7986:	429a      	cmp	r2, r3
    7988:	d1d8      	bne.n	793c <create_chain+0x5c>
    798a:	2300      	movs	r3, #0
    798c:	e03c      	b.n	7a08 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    798e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7990:	230f      	movs	r3, #15
    7992:	18fc      	adds	r4, r7, r3
    7994:	4a1f      	ldr	r2, [pc, #124]	; (7a14 <create_chain+0x134>)
    7996:	6979      	ldr	r1, [r7, #20]
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	0018      	movs	r0, r3
    799c:	4b1e      	ldr	r3, [pc, #120]	; (7a18 <create_chain+0x138>)
    799e:	4798      	blx	r3
    79a0:	0003      	movs	r3, r0
    79a2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    79a4:	230f      	movs	r3, #15
    79a6:	18fb      	adds	r3, r7, r3
    79a8:	781b      	ldrb	r3, [r3, #0]
    79aa:	2b00      	cmp	r3, #0
    79ac:	d10c      	bne.n	79c8 <create_chain+0xe8>
    79ae:	683b      	ldr	r3, [r7, #0]
    79b0:	2b00      	cmp	r3, #0
    79b2:	d009      	beq.n	79c8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    79b4:	230f      	movs	r3, #15
    79b6:	18fc      	adds	r4, r7, r3
    79b8:	697a      	ldr	r2, [r7, #20]
    79ba:	6839      	ldr	r1, [r7, #0]
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	0018      	movs	r0, r3
    79c0:	4b15      	ldr	r3, [pc, #84]	; (7a18 <create_chain+0x138>)
    79c2:	4798      	blx	r3
    79c4:	0003      	movs	r3, r0
    79c6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    79c8:	230f      	movs	r3, #15
    79ca:	18fb      	adds	r3, r7, r3
    79cc:	781b      	ldrb	r3, [r3, #0]
    79ce:	2b00      	cmp	r3, #0
    79d0:	d10f      	bne.n	79f2 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	697a      	ldr	r2, [r7, #20]
    79d6:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	691b      	ldr	r3, [r3, #16]
    79dc:	3301      	adds	r3, #1
    79de:	d012      	beq.n	7a06 <create_chain+0x126>
			fs->free_clust--;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	691b      	ldr	r3, [r3, #16]
    79e4:	1e5a      	subs	r2, r3, #1
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	2201      	movs	r2, #1
    79ee:	715a      	strb	r2, [r3, #5]
    79f0:	e009      	b.n	7a06 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    79f2:	230f      	movs	r3, #15
    79f4:	18fb      	adds	r3, r7, r3
    79f6:	781b      	ldrb	r3, [r3, #0]
    79f8:	2b01      	cmp	r3, #1
    79fa:	d102      	bne.n	7a02 <create_chain+0x122>
    79fc:	2301      	movs	r3, #1
    79fe:	425b      	negs	r3, r3
    7a00:	e000      	b.n	7a04 <create_chain+0x124>
    7a02:	2301      	movs	r3, #1
    7a04:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7a06:	697b      	ldr	r3, [r7, #20]
}
    7a08:	0018      	movs	r0, r3
    7a0a:	46bd      	mov	sp, r7
    7a0c:	b007      	add	sp, #28
    7a0e:	bd90      	pop	{r4, r7, pc}
    7a10:	00007471 	.word	0x00007471
    7a14:	0fffffff 	.word	0x0fffffff
    7a18:	000075dd 	.word	0x000075dd

00007a1c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7a1c:	b580      	push	{r7, lr}
    7a1e:	b084      	sub	sp, #16
    7a20:	af00      	add	r7, sp, #0
    7a22:	6078      	str	r0, [r7, #4]
    7a24:	000a      	movs	r2, r1
    7a26:	1cbb      	adds	r3, r7, #2
    7a28:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7a2a:	687b      	ldr	r3, [r7, #4]
    7a2c:	1cba      	adds	r2, r7, #2
    7a2e:	8812      	ldrh	r2, [r2, #0]
    7a30:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	689b      	ldr	r3, [r3, #8]
    7a36:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7a38:	68fb      	ldr	r3, [r7, #12]
    7a3a:	2b01      	cmp	r3, #1
    7a3c:	d005      	beq.n	7a4a <dir_sdi+0x2e>
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	681b      	ldr	r3, [r3, #0]
    7a42:	699a      	ldr	r2, [r3, #24]
    7a44:	68fb      	ldr	r3, [r7, #12]
    7a46:	429a      	cmp	r2, r3
    7a48:	d801      	bhi.n	7a4e <dir_sdi+0x32>
		return FR_INT_ERR;
    7a4a:	2302      	movs	r3, #2
    7a4c:	e075      	b.n	7b3a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7a4e:	68fb      	ldr	r3, [r7, #12]
    7a50:	2b00      	cmp	r3, #0
    7a52:	d108      	bne.n	7a66 <dir_sdi+0x4a>
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	681b      	ldr	r3, [r3, #0]
    7a58:	781b      	ldrb	r3, [r3, #0]
    7a5a:	2b03      	cmp	r3, #3
    7a5c:	d103      	bne.n	7a66 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	681b      	ldr	r3, [r3, #0]
    7a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a64:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7a66:	68fb      	ldr	r3, [r7, #12]
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d116      	bne.n	7a9a <dir_sdi+0x7e>
		dj->clust = clst;
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	68fa      	ldr	r2, [r7, #12]
    7a70:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	681b      	ldr	r3, [r3, #0]
    7a76:	891b      	ldrh	r3, [r3, #8]
    7a78:	1cba      	adds	r2, r7, #2
    7a7a:	8812      	ldrh	r2, [r2, #0]
    7a7c:	429a      	cmp	r2, r3
    7a7e:	d301      	bcc.n	7a84 <dir_sdi+0x68>
			return FR_INT_ERR;
    7a80:	2302      	movs	r3, #2
    7a82:	e05a      	b.n	7b3a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a8a:	1cba      	adds	r2, r7, #2
    7a8c:	8812      	ldrh	r2, [r2, #0]
    7a8e:	0912      	lsrs	r2, r2, #4
    7a90:	b292      	uxth	r2, r2
    7a92:	189a      	adds	r2, r3, r2
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	611a      	str	r2, [r3, #16]
    7a98:	e042      	b.n	7b20 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	681b      	ldr	r3, [r3, #0]
    7a9e:	789b      	ldrb	r3, [r3, #2]
    7aa0:	b29a      	uxth	r2, r3
    7aa2:	230a      	movs	r3, #10
    7aa4:	18fb      	adds	r3, r7, r3
    7aa6:	0112      	lsls	r2, r2, #4
    7aa8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7aaa:	e020      	b.n	7aee <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	681b      	ldr	r3, [r3, #0]
    7ab0:	68fa      	ldr	r2, [r7, #12]
    7ab2:	0011      	movs	r1, r2
    7ab4:	0018      	movs	r0, r3
    7ab6:	4b23      	ldr	r3, [pc, #140]	; (7b44 <dir_sdi+0x128>)
    7ab8:	4798      	blx	r3
    7aba:	0003      	movs	r3, r0
    7abc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7abe:	68fb      	ldr	r3, [r7, #12]
    7ac0:	3301      	adds	r3, #1
    7ac2:	d101      	bne.n	7ac8 <dir_sdi+0xac>
    7ac4:	2301      	movs	r3, #1
    7ac6:	e038      	b.n	7b3a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7ac8:	68fb      	ldr	r3, [r7, #12]
    7aca:	2b01      	cmp	r3, #1
    7acc:	d905      	bls.n	7ada <dir_sdi+0xbe>
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	681b      	ldr	r3, [r3, #0]
    7ad2:	699a      	ldr	r2, [r3, #24]
    7ad4:	68fb      	ldr	r3, [r7, #12]
    7ad6:	429a      	cmp	r2, r3
    7ad8:	d801      	bhi.n	7ade <dir_sdi+0xc2>
				return FR_INT_ERR;
    7ada:	2302      	movs	r3, #2
    7adc:	e02d      	b.n	7b3a <dir_sdi+0x11e>
			idx -= ic;
    7ade:	1cbb      	adds	r3, r7, #2
    7ae0:	1cb9      	adds	r1, r7, #2
    7ae2:	220a      	movs	r2, #10
    7ae4:	18ba      	adds	r2, r7, r2
    7ae6:	8809      	ldrh	r1, [r1, #0]
    7ae8:	8812      	ldrh	r2, [r2, #0]
    7aea:	1a8a      	subs	r2, r1, r2
    7aec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7aee:	1cba      	adds	r2, r7, #2
    7af0:	230a      	movs	r3, #10
    7af2:	18fb      	adds	r3, r7, r3
    7af4:	8812      	ldrh	r2, [r2, #0]
    7af6:	881b      	ldrh	r3, [r3, #0]
    7af8:	429a      	cmp	r2, r3
    7afa:	d2d7      	bcs.n	7aac <dir_sdi+0x90>
		}
		dj->clust = clst;
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	68fa      	ldr	r2, [r7, #12]
    7b00:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	68fa      	ldr	r2, [r7, #12]
    7b08:	0011      	movs	r1, r2
    7b0a:	0018      	movs	r0, r3
    7b0c:	4b0e      	ldr	r3, [pc, #56]	; (7b48 <dir_sdi+0x12c>)
    7b0e:	4798      	blx	r3
    7b10:	0002      	movs	r2, r0
    7b12:	1cbb      	adds	r3, r7, #2
    7b14:	881b      	ldrh	r3, [r3, #0]
    7b16:	091b      	lsrs	r3, r3, #4
    7b18:	b29b      	uxth	r3, r3
    7b1a:	18d2      	adds	r2, r2, r3
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7b20:	687b      	ldr	r3, [r7, #4]
    7b22:	681b      	ldr	r3, [r3, #0]
    7b24:	3330      	adds	r3, #48	; 0x30
    7b26:	001a      	movs	r2, r3
    7b28:	1cbb      	adds	r3, r7, #2
    7b2a:	881b      	ldrh	r3, [r3, #0]
    7b2c:	210f      	movs	r1, #15
    7b2e:	400b      	ands	r3, r1
    7b30:	015b      	lsls	r3, r3, #5
    7b32:	18d2      	adds	r2, r2, r3
    7b34:	687b      	ldr	r3, [r7, #4]
    7b36:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7b38:	2300      	movs	r3, #0
}
    7b3a:	0018      	movs	r0, r3
    7b3c:	46bd      	mov	sp, r7
    7b3e:	b004      	add	sp, #16
    7b40:	bd80      	pop	{r7, pc}
    7b42:	46c0      	nop			; (mov r8, r8)
    7b44:	00007471 	.word	0x00007471
    7b48:	00007439 	.word	0x00007439

00007b4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7b4c:	b590      	push	{r4, r7, lr}
    7b4e:	b085      	sub	sp, #20
    7b50:	af00      	add	r7, sp, #0
    7b52:	6078      	str	r0, [r7, #4]
    7b54:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7b56:	687b      	ldr	r3, [r7, #4]
    7b58:	88da      	ldrh	r2, [r3, #6]
    7b5a:	2308      	movs	r3, #8
    7b5c:	18fb      	adds	r3, r7, r3
    7b5e:	3201      	adds	r2, #1
    7b60:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7b62:	2308      	movs	r3, #8
    7b64:	18fb      	adds	r3, r7, r3
    7b66:	881b      	ldrh	r3, [r3, #0]
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d003      	beq.n	7b74 <dir_next+0x28>
    7b6c:	687b      	ldr	r3, [r7, #4]
    7b6e:	691b      	ldr	r3, [r3, #16]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d101      	bne.n	7b78 <dir_next+0x2c>
		return FR_NO_FILE;
    7b74:	2304      	movs	r3, #4
    7b76:	e0d2      	b.n	7d1e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7b78:	2308      	movs	r3, #8
    7b7a:	18fb      	adds	r3, r7, r3
    7b7c:	881b      	ldrh	r3, [r3, #0]
    7b7e:	220f      	movs	r2, #15
    7b80:	4013      	ands	r3, r2
    7b82:	b29b      	uxth	r3, r3
    7b84:	2b00      	cmp	r3, #0
    7b86:	d000      	beq.n	7b8a <dir_next+0x3e>
    7b88:	e0b6      	b.n	7cf8 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7b8a:	687b      	ldr	r3, [r7, #4]
    7b8c:	691b      	ldr	r3, [r3, #16]
    7b8e:	1c5a      	adds	r2, r3, #1
    7b90:	687b      	ldr	r3, [r7, #4]
    7b92:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    7b94:	687b      	ldr	r3, [r7, #4]
    7b96:	68db      	ldr	r3, [r3, #12]
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d10a      	bne.n	7bb2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7b9c:	687b      	ldr	r3, [r7, #4]
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	891b      	ldrh	r3, [r3, #8]
    7ba2:	2208      	movs	r2, #8
    7ba4:	18ba      	adds	r2, r7, r2
    7ba6:	8812      	ldrh	r2, [r2, #0]
    7ba8:	429a      	cmp	r2, r3
    7baa:	d200      	bcs.n	7bae <dir_next+0x62>
    7bac:	e0a4      	b.n	7cf8 <dir_next+0x1ac>
				return FR_NO_FILE;
    7bae:	2304      	movs	r3, #4
    7bb0:	e0b5      	b.n	7d1e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7bb2:	2308      	movs	r3, #8
    7bb4:	18fb      	adds	r3, r7, r3
    7bb6:	881b      	ldrh	r3, [r3, #0]
    7bb8:	091b      	lsrs	r3, r3, #4
    7bba:	b29b      	uxth	r3, r3
    7bbc:	001a      	movs	r2, r3
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	681b      	ldr	r3, [r3, #0]
    7bc2:	789b      	ldrb	r3, [r3, #2]
    7bc4:	3b01      	subs	r3, #1
    7bc6:	4013      	ands	r3, r2
    7bc8:	d000      	beq.n	7bcc <dir_next+0x80>
    7bca:	e095      	b.n	7cf8 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	681a      	ldr	r2, [r3, #0]
    7bd0:	687b      	ldr	r3, [r7, #4]
    7bd2:	68db      	ldr	r3, [r3, #12]
    7bd4:	0019      	movs	r1, r3
    7bd6:	0010      	movs	r0, r2
    7bd8:	4b53      	ldr	r3, [pc, #332]	; (7d28 <dir_next+0x1dc>)
    7bda:	4798      	blx	r3
    7bdc:	0003      	movs	r3, r0
    7bde:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    7be0:	68fb      	ldr	r3, [r7, #12]
    7be2:	2b01      	cmp	r3, #1
    7be4:	d801      	bhi.n	7bea <dir_next+0x9e>
    7be6:	2302      	movs	r3, #2
    7be8:	e099      	b.n	7d1e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7bea:	68fb      	ldr	r3, [r7, #12]
    7bec:	3301      	adds	r3, #1
    7bee:	d101      	bne.n	7bf4 <dir_next+0xa8>
    7bf0:	2301      	movs	r3, #1
    7bf2:	e094      	b.n	7d1e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	681b      	ldr	r3, [r3, #0]
    7bf8:	699a      	ldr	r2, [r3, #24]
    7bfa:	68fb      	ldr	r3, [r7, #12]
    7bfc:	429a      	cmp	r2, r3
    7bfe:	d900      	bls.n	7c02 <dir_next+0xb6>
    7c00:	e06d      	b.n	7cde <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    7c02:	683b      	ldr	r3, [r7, #0]
    7c04:	2b00      	cmp	r3, #0
    7c06:	d101      	bne.n	7c0c <dir_next+0xc0>
    7c08:	2304      	movs	r3, #4
    7c0a:	e088      	b.n	7d1e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	681a      	ldr	r2, [r3, #0]
    7c10:	687b      	ldr	r3, [r7, #4]
    7c12:	68db      	ldr	r3, [r3, #12]
    7c14:	0019      	movs	r1, r3
    7c16:	0010      	movs	r0, r2
    7c18:	4b44      	ldr	r3, [pc, #272]	; (7d2c <dir_next+0x1e0>)
    7c1a:	4798      	blx	r3
    7c1c:	0003      	movs	r3, r0
    7c1e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7c20:	68fb      	ldr	r3, [r7, #12]
    7c22:	2b00      	cmp	r3, #0
    7c24:	d101      	bne.n	7c2a <dir_next+0xde>
    7c26:	2307      	movs	r3, #7
    7c28:	e079      	b.n	7d1e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    7c2a:	68fb      	ldr	r3, [r7, #12]
    7c2c:	2b01      	cmp	r3, #1
    7c2e:	d101      	bne.n	7c34 <dir_next+0xe8>
    7c30:	2302      	movs	r3, #2
    7c32:	e074      	b.n	7d1e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7c34:	68fb      	ldr	r3, [r7, #12]
    7c36:	3301      	adds	r3, #1
    7c38:	d101      	bne.n	7c3e <dir_next+0xf2>
    7c3a:	2301      	movs	r3, #1
    7c3c:	e06f      	b.n	7d1e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	2100      	movs	r1, #0
    7c44:	0018      	movs	r0, r3
    7c46:	4b3a      	ldr	r3, [pc, #232]	; (7d30 <dir_next+0x1e4>)
    7c48:	4798      	blx	r3
    7c4a:	1e03      	subs	r3, r0, #0
    7c4c:	d001      	beq.n	7c52 <dir_next+0x106>
    7c4e:	2301      	movs	r3, #1
    7c50:	e065      	b.n	7d1e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7c52:	687b      	ldr	r3, [r7, #4]
    7c54:	681b      	ldr	r3, [r3, #0]
    7c56:	3330      	adds	r3, #48	; 0x30
    7c58:	0018      	movs	r0, r3
    7c5a:	2380      	movs	r3, #128	; 0x80
    7c5c:	009b      	lsls	r3, r3, #2
    7c5e:	001a      	movs	r2, r3
    7c60:	2100      	movs	r1, #0
    7c62:	4b34      	ldr	r3, [pc, #208]	; (7d34 <dir_next+0x1e8>)
    7c64:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7c66:	687b      	ldr	r3, [r7, #4]
    7c68:	681c      	ldr	r4, [r3, #0]
    7c6a:	687b      	ldr	r3, [r7, #4]
    7c6c:	681b      	ldr	r3, [r3, #0]
    7c6e:	68fa      	ldr	r2, [r7, #12]
    7c70:	0011      	movs	r1, r2
    7c72:	0018      	movs	r0, r3
    7c74:	4b30      	ldr	r3, [pc, #192]	; (7d38 <dir_next+0x1ec>)
    7c76:	4798      	blx	r3
    7c78:	0003      	movs	r3, r0
    7c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7c7c:	230b      	movs	r3, #11
    7c7e:	18fb      	adds	r3, r7, r3
    7c80:	2200      	movs	r2, #0
    7c82:	701a      	strb	r2, [r3, #0]
    7c84:	e019      	b.n	7cba <dir_next+0x16e>
						dj->fs->wflag = 1;
    7c86:	687b      	ldr	r3, [r7, #4]
    7c88:	681b      	ldr	r3, [r3, #0]
    7c8a:	2201      	movs	r2, #1
    7c8c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7c8e:	687b      	ldr	r3, [r7, #4]
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	2100      	movs	r1, #0
    7c94:	0018      	movs	r0, r3
    7c96:	4b26      	ldr	r3, [pc, #152]	; (7d30 <dir_next+0x1e4>)
    7c98:	4798      	blx	r3
    7c9a:	1e03      	subs	r3, r0, #0
    7c9c:	d001      	beq.n	7ca2 <dir_next+0x156>
    7c9e:	2301      	movs	r3, #1
    7ca0:	e03d      	b.n	7d1e <dir_next+0x1d2>
						dj->fs->winsect++;
    7ca2:	687b      	ldr	r3, [r7, #4]
    7ca4:	681b      	ldr	r3, [r3, #0]
    7ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ca8:	3201      	adds	r2, #1
    7caa:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7cac:	230b      	movs	r3, #11
    7cae:	18fb      	adds	r3, r7, r3
    7cb0:	781a      	ldrb	r2, [r3, #0]
    7cb2:	230b      	movs	r3, #11
    7cb4:	18fb      	adds	r3, r7, r3
    7cb6:	3201      	adds	r2, #1
    7cb8:	701a      	strb	r2, [r3, #0]
    7cba:	687b      	ldr	r3, [r7, #4]
    7cbc:	681b      	ldr	r3, [r3, #0]
    7cbe:	789b      	ldrb	r3, [r3, #2]
    7cc0:	220b      	movs	r2, #11
    7cc2:	18ba      	adds	r2, r7, r2
    7cc4:	7812      	ldrb	r2, [r2, #0]
    7cc6:	429a      	cmp	r2, r3
    7cc8:	d3dd      	bcc.n	7c86 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7cca:	687b      	ldr	r3, [r7, #4]
    7ccc:	681b      	ldr	r3, [r3, #0]
    7cce:	687a      	ldr	r2, [r7, #4]
    7cd0:	6812      	ldr	r2, [r2, #0]
    7cd2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7cd4:	220b      	movs	r2, #11
    7cd6:	18ba      	adds	r2, r7, r2
    7cd8:	7812      	ldrb	r2, [r2, #0]
    7cda:	1a8a      	subs	r2, r1, r2
    7cdc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	68fa      	ldr	r2, [r7, #12]
    7ce2:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	681b      	ldr	r3, [r3, #0]
    7ce8:	68fa      	ldr	r2, [r7, #12]
    7cea:	0011      	movs	r1, r2
    7cec:	0018      	movs	r0, r3
    7cee:	4b12      	ldr	r3, [pc, #72]	; (7d38 <dir_next+0x1ec>)
    7cf0:	4798      	blx	r3
    7cf2:	0002      	movs	r2, r0
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	2208      	movs	r2, #8
    7cfc:	18ba      	adds	r2, r7, r2
    7cfe:	8812      	ldrh	r2, [r2, #0]
    7d00:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	681b      	ldr	r3, [r3, #0]
    7d06:	3330      	adds	r3, #48	; 0x30
    7d08:	001a      	movs	r2, r3
    7d0a:	2308      	movs	r3, #8
    7d0c:	18fb      	adds	r3, r7, r3
    7d0e:	881b      	ldrh	r3, [r3, #0]
    7d10:	210f      	movs	r1, #15
    7d12:	400b      	ands	r3, r1
    7d14:	015b      	lsls	r3, r3, #5
    7d16:	18d2      	adds	r2, r2, r3
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	615a      	str	r2, [r3, #20]

	return FR_OK;
    7d1c:	2300      	movs	r3, #0
}
    7d1e:	0018      	movs	r0, r3
    7d20:	46bd      	mov	sp, r7
    7d22:	b005      	add	sp, #20
    7d24:	bd90      	pop	{r4, r7, pc}
    7d26:	46c0      	nop			; (mov r8, r8)
    7d28:	00007471 	.word	0x00007471
    7d2c:	000078e1 	.word	0x000078e1
    7d30:	000071d9 	.word	0x000071d9
    7d34:	0000712d 	.word	0x0000712d
    7d38:	00007439 	.word	0x00007439

00007d3c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    7d3c:	b590      	push	{r4, r7, lr}
    7d3e:	b087      	sub	sp, #28
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
    7d44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7d46:	683b      	ldr	r3, [r7, #0]
    7d48:	781b      	ldrb	r3, [r3, #0]
    7d4a:	001a      	movs	r2, r3
    7d4c:	2340      	movs	r3, #64	; 0x40
    7d4e:	439a      	bics	r2, r3
    7d50:	0013      	movs	r3, r2
    7d52:	1e5a      	subs	r2, r3, #1
    7d54:	0013      	movs	r3, r2
    7d56:	005b      	lsls	r3, r3, #1
    7d58:	189b      	adds	r3, r3, r2
    7d5a:	009b      	lsls	r3, r3, #2
    7d5c:	189b      	adds	r3, r3, r2
    7d5e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    7d60:	2300      	movs	r3, #0
    7d62:	613b      	str	r3, [r7, #16]
    7d64:	230e      	movs	r3, #14
    7d66:	18fb      	adds	r3, r7, r3
    7d68:	2201      	movs	r2, #1
    7d6a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    7d6c:	4a31      	ldr	r2, [pc, #196]	; (7e34 <cmp_lfn+0xf8>)
    7d6e:	693b      	ldr	r3, [r7, #16]
    7d70:	18d3      	adds	r3, r2, r3
    7d72:	781b      	ldrb	r3, [r3, #0]
    7d74:	3301      	adds	r3, #1
    7d76:	683a      	ldr	r2, [r7, #0]
    7d78:	18d3      	adds	r3, r2, r3
    7d7a:	781b      	ldrb	r3, [r3, #0]
    7d7c:	021b      	lsls	r3, r3, #8
    7d7e:	b21a      	sxth	r2, r3
    7d80:	492c      	ldr	r1, [pc, #176]	; (7e34 <cmp_lfn+0xf8>)
    7d82:	693b      	ldr	r3, [r7, #16]
    7d84:	18cb      	adds	r3, r1, r3
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	0019      	movs	r1, r3
    7d8a:	683b      	ldr	r3, [r7, #0]
    7d8c:	185b      	adds	r3, r3, r1
    7d8e:	781b      	ldrb	r3, [r3, #0]
    7d90:	b21b      	sxth	r3, r3
    7d92:	4313      	orrs	r3, r2
    7d94:	b21a      	sxth	r2, r3
    7d96:	230c      	movs	r3, #12
    7d98:	18fb      	adds	r3, r7, r3
    7d9a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    7d9c:	230e      	movs	r3, #14
    7d9e:	18fb      	adds	r3, r7, r3
    7da0:	881b      	ldrh	r3, [r3, #0]
    7da2:	2b00      	cmp	r3, #0
    7da4:	d01f      	beq.n	7de6 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7da6:	230e      	movs	r3, #14
    7da8:	18fc      	adds	r4, r7, r3
    7daa:	230c      	movs	r3, #12
    7dac:	18fb      	adds	r3, r7, r3
    7dae:	881b      	ldrh	r3, [r3, #0]
    7db0:	0018      	movs	r0, r3
    7db2:	4b21      	ldr	r3, [pc, #132]	; (7e38 <cmp_lfn+0xfc>)
    7db4:	4798      	blx	r3
    7db6:	0003      	movs	r3, r0
    7db8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    7dba:	697b      	ldr	r3, [r7, #20]
    7dbc:	2bfe      	cmp	r3, #254	; 0xfe
    7dbe:	d810      	bhi.n	7de2 <cmp_lfn+0xa6>
    7dc0:	697b      	ldr	r3, [r7, #20]
    7dc2:	1c5a      	adds	r2, r3, #1
    7dc4:	617a      	str	r2, [r7, #20]
    7dc6:	005b      	lsls	r3, r3, #1
    7dc8:	687a      	ldr	r2, [r7, #4]
    7dca:	18d3      	adds	r3, r2, r3
    7dcc:	881b      	ldrh	r3, [r3, #0]
    7dce:	0018      	movs	r0, r3
    7dd0:	4b19      	ldr	r3, [pc, #100]	; (7e38 <cmp_lfn+0xfc>)
    7dd2:	4798      	blx	r3
    7dd4:	0003      	movs	r3, r0
    7dd6:	001a      	movs	r2, r3
    7dd8:	230e      	movs	r3, #14
    7dda:	18fb      	adds	r3, r7, r3
    7ddc:	881b      	ldrh	r3, [r3, #0]
    7dde:	4293      	cmp	r3, r2
    7de0:	d009      	beq.n	7df6 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    7de2:	2300      	movs	r3, #0
    7de4:	e022      	b.n	7e2c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    7de6:	230c      	movs	r3, #12
    7de8:	18fb      	adds	r3, r7, r3
    7dea:	881b      	ldrh	r3, [r3, #0]
    7dec:	4a13      	ldr	r2, [pc, #76]	; (7e3c <cmp_lfn+0x100>)
    7dee:	4293      	cmp	r3, r2
    7df0:	d001      	beq.n	7df6 <cmp_lfn+0xba>
    7df2:	2300      	movs	r3, #0
    7df4:	e01a      	b.n	7e2c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    7df6:	693b      	ldr	r3, [r7, #16]
    7df8:	3301      	adds	r3, #1
    7dfa:	613b      	str	r3, [r7, #16]
    7dfc:	693b      	ldr	r3, [r7, #16]
    7dfe:	2b0c      	cmp	r3, #12
    7e00:	d9b4      	bls.n	7d6c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    7e02:	683b      	ldr	r3, [r7, #0]
    7e04:	781b      	ldrb	r3, [r3, #0]
    7e06:	001a      	movs	r2, r3
    7e08:	2340      	movs	r3, #64	; 0x40
    7e0a:	4013      	ands	r3, r2
    7e0c:	d00d      	beq.n	7e2a <cmp_lfn+0xee>
    7e0e:	230e      	movs	r3, #14
    7e10:	18fb      	adds	r3, r7, r3
    7e12:	881b      	ldrh	r3, [r3, #0]
    7e14:	2b00      	cmp	r3, #0
    7e16:	d008      	beq.n	7e2a <cmp_lfn+0xee>
    7e18:	697b      	ldr	r3, [r7, #20]
    7e1a:	005b      	lsls	r3, r3, #1
    7e1c:	687a      	ldr	r2, [r7, #4]
    7e1e:	18d3      	adds	r3, r2, r3
    7e20:	881b      	ldrh	r3, [r3, #0]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d001      	beq.n	7e2a <cmp_lfn+0xee>
		return 0;
    7e26:	2300      	movs	r3, #0
    7e28:	e000      	b.n	7e2c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    7e2a:	2301      	movs	r3, #1
}
    7e2c:	0018      	movs	r0, r3
    7e2e:	46bd      	mov	sp, r7
    7e30:	b007      	add	sp, #28
    7e32:	bd90      	pop	{r4, r7, pc}
    7e34:	0000c388 	.word	0x0000c388
    7e38:	0000a8ad 	.word	0x0000a8ad
    7e3c:	0000ffff 	.word	0x0000ffff

00007e40 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    7e40:	b580      	push	{r7, lr}
    7e42:	b086      	sub	sp, #24
    7e44:	af00      	add	r7, sp, #0
    7e46:	6078      	str	r0, [r7, #4]
    7e48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    7e4a:	683b      	ldr	r3, [r7, #0]
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	001a      	movs	r2, r3
    7e50:	233f      	movs	r3, #63	; 0x3f
    7e52:	4013      	ands	r3, r2
    7e54:	1e5a      	subs	r2, r3, #1
    7e56:	0013      	movs	r3, r2
    7e58:	005b      	lsls	r3, r3, #1
    7e5a:	189b      	adds	r3, r3, r2
    7e5c:	009b      	lsls	r3, r3, #2
    7e5e:	189b      	adds	r3, r3, r2
    7e60:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    7e62:	2300      	movs	r3, #0
    7e64:	613b      	str	r3, [r7, #16]
    7e66:	230e      	movs	r3, #14
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	2201      	movs	r2, #1
    7e6c:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    7e6e:	4a2b      	ldr	r2, [pc, #172]	; (7f1c <pick_lfn+0xdc>)
    7e70:	693b      	ldr	r3, [r7, #16]
    7e72:	18d3      	adds	r3, r2, r3
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	3301      	adds	r3, #1
    7e78:	683a      	ldr	r2, [r7, #0]
    7e7a:	18d3      	adds	r3, r2, r3
    7e7c:	781b      	ldrb	r3, [r3, #0]
    7e7e:	021b      	lsls	r3, r3, #8
    7e80:	b21a      	sxth	r2, r3
    7e82:	4926      	ldr	r1, [pc, #152]	; (7f1c <pick_lfn+0xdc>)
    7e84:	693b      	ldr	r3, [r7, #16]
    7e86:	18cb      	adds	r3, r1, r3
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	0019      	movs	r1, r3
    7e8c:	683b      	ldr	r3, [r7, #0]
    7e8e:	185b      	adds	r3, r3, r1
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	b21b      	sxth	r3, r3
    7e94:	4313      	orrs	r3, r2
    7e96:	b21a      	sxth	r2, r3
    7e98:	230c      	movs	r3, #12
    7e9a:	18fb      	adds	r3, r7, r3
    7e9c:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    7e9e:	230e      	movs	r3, #14
    7ea0:	18fb      	adds	r3, r7, r3
    7ea2:	881b      	ldrh	r3, [r3, #0]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d015      	beq.n	7ed4 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    7ea8:	697b      	ldr	r3, [r7, #20]
    7eaa:	2bfe      	cmp	r3, #254	; 0xfe
    7eac:	d901      	bls.n	7eb2 <pick_lfn+0x72>
    7eae:	2300      	movs	r3, #0
    7eb0:	e030      	b.n	7f14 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    7eb2:	697b      	ldr	r3, [r7, #20]
    7eb4:	1c5a      	adds	r2, r3, #1
    7eb6:	617a      	str	r2, [r7, #20]
    7eb8:	005b      	lsls	r3, r3, #1
    7eba:	687a      	ldr	r2, [r7, #4]
    7ebc:	18d3      	adds	r3, r2, r3
    7ebe:	220e      	movs	r2, #14
    7ec0:	18ba      	adds	r2, r7, r2
    7ec2:	210c      	movs	r1, #12
    7ec4:	1879      	adds	r1, r7, r1
    7ec6:	8809      	ldrh	r1, [r1, #0]
    7ec8:	8011      	strh	r1, [r2, #0]
    7eca:	220e      	movs	r2, #14
    7ecc:	18ba      	adds	r2, r7, r2
    7ece:	8812      	ldrh	r2, [r2, #0]
    7ed0:	801a      	strh	r2, [r3, #0]
    7ed2:	e007      	b.n	7ee4 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    7ed4:	230c      	movs	r3, #12
    7ed6:	18fb      	adds	r3, r7, r3
    7ed8:	881b      	ldrh	r3, [r3, #0]
    7eda:	4a11      	ldr	r2, [pc, #68]	; (7f20 <pick_lfn+0xe0>)
    7edc:	4293      	cmp	r3, r2
    7ede:	d001      	beq.n	7ee4 <pick_lfn+0xa4>
    7ee0:	2300      	movs	r3, #0
    7ee2:	e017      	b.n	7f14 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    7ee4:	693b      	ldr	r3, [r7, #16]
    7ee6:	3301      	adds	r3, #1
    7ee8:	613b      	str	r3, [r7, #16]
    7eea:	693b      	ldr	r3, [r7, #16]
    7eec:	2b0c      	cmp	r3, #12
    7eee:	d9be      	bls.n	7e6e <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    7ef0:	683b      	ldr	r3, [r7, #0]
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	001a      	movs	r2, r3
    7ef6:	2340      	movs	r3, #64	; 0x40
    7ef8:	4013      	ands	r3, r2
    7efa:	d00a      	beq.n	7f12 <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    7efc:	697b      	ldr	r3, [r7, #20]
    7efe:	2bfe      	cmp	r3, #254	; 0xfe
    7f00:	d901      	bls.n	7f06 <pick_lfn+0xc6>
    7f02:	2300      	movs	r3, #0
    7f04:	e006      	b.n	7f14 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    7f06:	697b      	ldr	r3, [r7, #20]
    7f08:	005b      	lsls	r3, r3, #1
    7f0a:	687a      	ldr	r2, [r7, #4]
    7f0c:	18d3      	adds	r3, r2, r3
    7f0e:	2200      	movs	r2, #0
    7f10:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    7f12:	2301      	movs	r3, #1
}
    7f14:	0018      	movs	r0, r3
    7f16:	46bd      	mov	sp, r7
    7f18:	b006      	add	sp, #24
    7f1a:	bd80      	pop	{r7, pc}
    7f1c:	0000c388 	.word	0x0000c388
    7f20:	0000ffff 	.word	0x0000ffff

00007f24 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    7f24:	b580      	push	{r7, lr}
    7f26:	b088      	sub	sp, #32
    7f28:	af00      	add	r7, sp, #0
    7f2a:	60f8      	str	r0, [r7, #12]
    7f2c:	60b9      	str	r1, [r7, #8]
    7f2e:	0019      	movs	r1, r3
    7f30:	1dfb      	adds	r3, r7, #7
    7f32:	701a      	strb	r2, [r3, #0]
    7f34:	1dbb      	adds	r3, r7, #6
    7f36:	1c0a      	adds	r2, r1, #0
    7f38:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7f3a:	68bb      	ldr	r3, [r7, #8]
    7f3c:	330d      	adds	r3, #13
    7f3e:	1dba      	adds	r2, r7, #6
    7f40:	7812      	ldrb	r2, [r2, #0]
    7f42:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7f44:	68bb      	ldr	r3, [r7, #8]
    7f46:	330b      	adds	r3, #11
    7f48:	220f      	movs	r2, #15
    7f4a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    7f4c:	68bb      	ldr	r3, [r7, #8]
    7f4e:	330c      	adds	r3, #12
    7f50:	2200      	movs	r2, #0
    7f52:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7f54:	68bb      	ldr	r3, [r7, #8]
    7f56:	331a      	adds	r3, #26
    7f58:	2200      	movs	r2, #0
    7f5a:	701a      	strb	r2, [r3, #0]
    7f5c:	68bb      	ldr	r3, [r7, #8]
    7f5e:	331b      	adds	r3, #27
    7f60:	2200      	movs	r2, #0
    7f62:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7f64:	1dfb      	adds	r3, r7, #7
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	1e5a      	subs	r2, r3, #1
    7f6a:	0013      	movs	r3, r2
    7f6c:	005b      	lsls	r3, r3, #1
    7f6e:	189b      	adds	r3, r3, r2
    7f70:	009b      	lsls	r3, r3, #2
    7f72:	189b      	adds	r3, r3, r2
    7f74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    7f76:	2316      	movs	r3, #22
    7f78:	18fb      	adds	r3, r7, r3
    7f7a:	2200      	movs	r2, #0
    7f7c:	801a      	strh	r2, [r3, #0]
    7f7e:	2300      	movs	r3, #0
    7f80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7f82:	2316      	movs	r3, #22
    7f84:	18fb      	adds	r3, r7, r3
    7f86:	881b      	ldrh	r3, [r3, #0]
    7f88:	4a28      	ldr	r2, [pc, #160]	; (802c <fit_lfn+0x108>)
    7f8a:	4293      	cmp	r3, r2
    7f8c:	d009      	beq.n	7fa2 <fit_lfn+0x7e>
    7f8e:	69fb      	ldr	r3, [r7, #28]
    7f90:	1c5a      	adds	r2, r3, #1
    7f92:	61fa      	str	r2, [r7, #28]
    7f94:	005b      	lsls	r3, r3, #1
    7f96:	68fa      	ldr	r2, [r7, #12]
    7f98:	18d2      	adds	r2, r2, r3
    7f9a:	2316      	movs	r3, #22
    7f9c:	18fb      	adds	r3, r7, r3
    7f9e:	8812      	ldrh	r2, [r2, #0]
    7fa0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7fa2:	4a23      	ldr	r2, [pc, #140]	; (8030 <fit_lfn+0x10c>)
    7fa4:	69bb      	ldr	r3, [r7, #24]
    7fa6:	18d3      	adds	r3, r2, r3
    7fa8:	781b      	ldrb	r3, [r3, #0]
    7faa:	001a      	movs	r2, r3
    7fac:	68bb      	ldr	r3, [r7, #8]
    7fae:	189b      	adds	r3, r3, r2
    7fb0:	2216      	movs	r2, #22
    7fb2:	18ba      	adds	r2, r7, r2
    7fb4:	8812      	ldrh	r2, [r2, #0]
    7fb6:	b2d2      	uxtb	r2, r2
    7fb8:	701a      	strb	r2, [r3, #0]
    7fba:	4a1d      	ldr	r2, [pc, #116]	; (8030 <fit_lfn+0x10c>)
    7fbc:	69bb      	ldr	r3, [r7, #24]
    7fbe:	18d3      	adds	r3, r2, r3
    7fc0:	781b      	ldrb	r3, [r3, #0]
    7fc2:	3301      	adds	r3, #1
    7fc4:	68ba      	ldr	r2, [r7, #8]
    7fc6:	18d3      	adds	r3, r2, r3
    7fc8:	2216      	movs	r2, #22
    7fca:	18ba      	adds	r2, r7, r2
    7fcc:	8812      	ldrh	r2, [r2, #0]
    7fce:	0a12      	lsrs	r2, r2, #8
    7fd0:	b292      	uxth	r2, r2
    7fd2:	b2d2      	uxtb	r2, r2
    7fd4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7fd6:	2316      	movs	r3, #22
    7fd8:	18fb      	adds	r3, r7, r3
    7fda:	881b      	ldrh	r3, [r3, #0]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d104      	bne.n	7fea <fit_lfn+0xc6>
    7fe0:	2316      	movs	r3, #22
    7fe2:	18fb      	adds	r3, r7, r3
    7fe4:	2201      	movs	r2, #1
    7fe6:	4252      	negs	r2, r2
    7fe8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    7fea:	69bb      	ldr	r3, [r7, #24]
    7fec:	3301      	adds	r3, #1
    7fee:	61bb      	str	r3, [r7, #24]
    7ff0:	69bb      	ldr	r3, [r7, #24]
    7ff2:	2b0c      	cmp	r3, #12
    7ff4:	d9c5      	bls.n	7f82 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    7ff6:	2316      	movs	r3, #22
    7ff8:	18fb      	adds	r3, r7, r3
    7ffa:	881b      	ldrh	r3, [r3, #0]
    7ffc:	4a0b      	ldr	r2, [pc, #44]	; (802c <fit_lfn+0x108>)
    7ffe:	4293      	cmp	r3, r2
    8000:	d006      	beq.n	8010 <fit_lfn+0xec>
    8002:	69fb      	ldr	r3, [r7, #28]
    8004:	005b      	lsls	r3, r3, #1
    8006:	68fa      	ldr	r2, [r7, #12]
    8008:	18d3      	adds	r3, r2, r3
    800a:	881b      	ldrh	r3, [r3, #0]
    800c:	2b00      	cmp	r3, #0
    800e:	d105      	bne.n	801c <fit_lfn+0xf8>
    8010:	1dfb      	adds	r3, r7, #7
    8012:	1dfa      	adds	r2, r7, #7
    8014:	7812      	ldrb	r2, [r2, #0]
    8016:	2140      	movs	r1, #64	; 0x40
    8018:	430a      	orrs	r2, r1
    801a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    801c:	68bb      	ldr	r3, [r7, #8]
    801e:	1dfa      	adds	r2, r7, #7
    8020:	7812      	ldrb	r2, [r2, #0]
    8022:	701a      	strb	r2, [r3, #0]
}
    8024:	46c0      	nop			; (mov r8, r8)
    8026:	46bd      	mov	sp, r7
    8028:	b008      	add	sp, #32
    802a:	bd80      	pop	{r7, pc}
    802c:	0000ffff 	.word	0x0000ffff
    8030:	0000c388 	.word	0x0000c388

00008034 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    8034:	b580      	push	{r7, lr}
    8036:	b08a      	sub	sp, #40	; 0x28
    8038:	af00      	add	r7, sp, #0
    803a:	60f8      	str	r0, [r7, #12]
    803c:	60b9      	str	r1, [r7, #8]
    803e:	607a      	str	r2, [r7, #4]
    8040:	001a      	movs	r2, r3
    8042:	1cbb      	adds	r3, r7, #2
    8044:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    8046:	68b9      	ldr	r1, [r7, #8]
    8048:	68fb      	ldr	r3, [r7, #12]
    804a:	220b      	movs	r2, #11
    804c:	0018      	movs	r0, r3
    804e:	4b38      	ldr	r3, [pc, #224]	; (8130 <gen_numname+0xfc>)
    8050:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    8052:	1cbb      	adds	r3, r7, #2
    8054:	881b      	ldrh	r3, [r3, #0]
    8056:	2b05      	cmp	r3, #5
    8058:	d911      	bls.n	807e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    805a:	1cbb      	adds	r3, r7, #2
    805c:	881b      	ldrh	r3, [r3, #0]
    805e:	b29a      	uxth	r2, r3
    8060:	0852      	lsrs	r2, r2, #1
    8062:	03db      	lsls	r3, r3, #15
    8064:	4313      	orrs	r3, r2
    8066:	b299      	uxth	r1, r3
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	1c9a      	adds	r2, r3, #2
    806c:	607a      	str	r2, [r7, #4]
    806e:	881a      	ldrh	r2, [r3, #0]
    8070:	1cbb      	adds	r3, r7, #2
    8072:	188a      	adds	r2, r1, r2
    8074:	801a      	strh	r2, [r3, #0]
    8076:	687b      	ldr	r3, [r7, #4]
    8078:	881b      	ldrh	r3, [r3, #0]
    807a:	2b00      	cmp	r3, #0
    807c:	d1ed      	bne.n	805a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    807e:	2307      	movs	r3, #7
    8080:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    8082:	1cbb      	adds	r3, r7, #2
    8084:	881b      	ldrh	r3, [r3, #0]
    8086:	b2db      	uxtb	r3, r3
    8088:	220f      	movs	r2, #15
    808a:	4013      	ands	r3, r2
    808c:	b2da      	uxtb	r2, r3
    808e:	2327      	movs	r3, #39	; 0x27
    8090:	18fb      	adds	r3, r7, r3
    8092:	3230      	adds	r2, #48	; 0x30
    8094:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    8096:	2327      	movs	r3, #39	; 0x27
    8098:	18fb      	adds	r3, r7, r3
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	2b39      	cmp	r3, #57	; 0x39
    809e:	d906      	bls.n	80ae <gen_numname+0x7a>
    80a0:	2327      	movs	r3, #39	; 0x27
    80a2:	18fb      	adds	r3, r7, r3
    80a4:	2227      	movs	r2, #39	; 0x27
    80a6:	18ba      	adds	r2, r7, r2
    80a8:	7812      	ldrb	r2, [r2, #0]
    80aa:	3207      	adds	r2, #7
    80ac:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    80ae:	6a3b      	ldr	r3, [r7, #32]
    80b0:	1e5a      	subs	r2, r3, #1
    80b2:	623a      	str	r2, [r7, #32]
    80b4:	2214      	movs	r2, #20
    80b6:	18ba      	adds	r2, r7, r2
    80b8:	2127      	movs	r1, #39	; 0x27
    80ba:	1879      	adds	r1, r7, r1
    80bc:	7809      	ldrb	r1, [r1, #0]
    80be:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    80c0:	1cbb      	adds	r3, r7, #2
    80c2:	1cba      	adds	r2, r7, #2
    80c4:	8812      	ldrh	r2, [r2, #0]
    80c6:	0912      	lsrs	r2, r2, #4
    80c8:	801a      	strh	r2, [r3, #0]
	} while (seq);
    80ca:	1cbb      	adds	r3, r7, #2
    80cc:	881b      	ldrh	r3, [r3, #0]
    80ce:	2b00      	cmp	r3, #0
    80d0:	d1d7      	bne.n	8082 <gen_numname+0x4e>
	ns[i] = '~';
    80d2:	2314      	movs	r3, #20
    80d4:	18fa      	adds	r2, r7, r3
    80d6:	6a3b      	ldr	r3, [r7, #32]
    80d8:	18d3      	adds	r3, r2, r3
    80da:	227e      	movs	r2, #126	; 0x7e
    80dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    80de:	2300      	movs	r3, #0
    80e0:	61fb      	str	r3, [r7, #28]
    80e2:	e002      	b.n	80ea <gen_numname+0xb6>
    80e4:	69fb      	ldr	r3, [r7, #28]
    80e6:	3301      	adds	r3, #1
    80e8:	61fb      	str	r3, [r7, #28]
    80ea:	69fa      	ldr	r2, [r7, #28]
    80ec:	6a3b      	ldr	r3, [r7, #32]
    80ee:	429a      	cmp	r2, r3
    80f0:	d205      	bcs.n	80fe <gen_numname+0xca>
    80f2:	68fa      	ldr	r2, [r7, #12]
    80f4:	69fb      	ldr	r3, [r7, #28]
    80f6:	18d3      	adds	r3, r2, r3
    80f8:	781b      	ldrb	r3, [r3, #0]
    80fa:	2b20      	cmp	r3, #32
    80fc:	d1f2      	bne.n	80e4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    80fe:	69fb      	ldr	r3, [r7, #28]
    8100:	1c5a      	adds	r2, r3, #1
    8102:	61fa      	str	r2, [r7, #28]
    8104:	68fa      	ldr	r2, [r7, #12]
    8106:	18d2      	adds	r2, r2, r3
    8108:	6a3b      	ldr	r3, [r7, #32]
    810a:	2b07      	cmp	r3, #7
    810c:	d806      	bhi.n	811c <gen_numname+0xe8>
    810e:	6a3b      	ldr	r3, [r7, #32]
    8110:	1c59      	adds	r1, r3, #1
    8112:	6239      	str	r1, [r7, #32]
    8114:	2114      	movs	r1, #20
    8116:	1879      	adds	r1, r7, r1
    8118:	5ccb      	ldrb	r3, [r1, r3]
    811a:	e000      	b.n	811e <gen_numname+0xea>
    811c:	2320      	movs	r3, #32
    811e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    8120:	69fb      	ldr	r3, [r7, #28]
    8122:	2b07      	cmp	r3, #7
    8124:	d9eb      	bls.n	80fe <gen_numname+0xca>
}
    8126:	46c0      	nop			; (mov r8, r8)
    8128:	46bd      	mov	sp, r7
    812a:	b00a      	add	sp, #40	; 0x28
    812c:	bd80      	pop	{r7, pc}
    812e:	46c0      	nop			; (mov r8, r8)
    8130:	000070f5 	.word	0x000070f5

00008134 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    8134:	b580      	push	{r7, lr}
    8136:	b084      	sub	sp, #16
    8138:	af00      	add	r7, sp, #0
    813a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    813c:	230f      	movs	r3, #15
    813e:	18fb      	adds	r3, r7, r3
    8140:	2200      	movs	r2, #0
    8142:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    8144:	230b      	movs	r3, #11
    8146:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    8148:	230f      	movs	r3, #15
    814a:	18fb      	adds	r3, r7, r3
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	b2da      	uxtb	r2, r3
    8150:	0852      	lsrs	r2, r2, #1
    8152:	01db      	lsls	r3, r3, #7
    8154:	4313      	orrs	r3, r2
    8156:	b2d9      	uxtb	r1, r3
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	1c5a      	adds	r2, r3, #1
    815c:	607a      	str	r2, [r7, #4]
    815e:	781a      	ldrb	r2, [r3, #0]
    8160:	230f      	movs	r3, #15
    8162:	18fb      	adds	r3, r7, r3
    8164:	188a      	adds	r2, r1, r2
    8166:	701a      	strb	r2, [r3, #0]
    8168:	68bb      	ldr	r3, [r7, #8]
    816a:	3b01      	subs	r3, #1
    816c:	60bb      	str	r3, [r7, #8]
    816e:	68bb      	ldr	r3, [r7, #8]
    8170:	2b00      	cmp	r3, #0
    8172:	d1e9      	bne.n	8148 <sum_sfn+0x14>
	return sum;
    8174:	230f      	movs	r3, #15
    8176:	18fb      	adds	r3, r7, r3
    8178:	781b      	ldrb	r3, [r3, #0]
}
    817a:	0018      	movs	r0, r3
    817c:	46bd      	mov	sp, r7
    817e:	b004      	add	sp, #16
    8180:	bd80      	pop	{r7, pc}
	...

00008184 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    8184:	b590      	push	{r4, r7, lr}
    8186:	b087      	sub	sp, #28
    8188:	af00      	add	r7, sp, #0
    818a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    818c:	2317      	movs	r3, #23
    818e:	18fc      	adds	r4, r7, r3
    8190:	687b      	ldr	r3, [r7, #4]
    8192:	2100      	movs	r1, #0
    8194:	0018      	movs	r0, r3
    8196:	4b74      	ldr	r3, [pc, #464]	; (8368 <dir_find+0x1e4>)
    8198:	4798      	blx	r3
    819a:	0003      	movs	r3, r0
    819c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    819e:	2317      	movs	r3, #23
    81a0:	18fb      	adds	r3, r7, r3
    81a2:	781b      	ldrb	r3, [r3, #0]
    81a4:	2b00      	cmp	r3, #0
    81a6:	d003      	beq.n	81b0 <dir_find+0x2c>
    81a8:	2317      	movs	r3, #23
    81aa:	18fb      	adds	r3, r7, r3
    81ac:	781b      	ldrb	r3, [r3, #0]
    81ae:	e0d6      	b.n	835e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    81b0:	2314      	movs	r3, #20
    81b2:	18fb      	adds	r3, r7, r3
    81b4:	22ff      	movs	r2, #255	; 0xff
    81b6:	701a      	strb	r2, [r3, #0]
    81b8:	2315      	movs	r3, #21
    81ba:	18fb      	adds	r3, r7, r3
    81bc:	2214      	movs	r2, #20
    81be:	18ba      	adds	r2, r7, r2
    81c0:	7812      	ldrb	r2, [r2, #0]
    81c2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    81c4:	687b      	ldr	r3, [r7, #4]
    81c6:	681a      	ldr	r2, [r3, #0]
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	691b      	ldr	r3, [r3, #16]
    81cc:	2117      	movs	r1, #23
    81ce:	187c      	adds	r4, r7, r1
    81d0:	0019      	movs	r1, r3
    81d2:	0010      	movs	r0, r2
    81d4:	4b65      	ldr	r3, [pc, #404]	; (836c <dir_find+0x1e8>)
    81d6:	4798      	blx	r3
    81d8:	0003      	movs	r3, r0
    81da:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    81dc:	2317      	movs	r3, #23
    81de:	18fb      	adds	r3, r7, r3
    81e0:	781b      	ldrb	r3, [r3, #0]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d000      	beq.n	81e8 <dir_find+0x64>
    81e6:	e0b2      	b.n	834e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	695b      	ldr	r3, [r3, #20]
    81ec:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    81ee:	2316      	movs	r3, #22
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	693a      	ldr	r2, [r7, #16]
    81f4:	7812      	ldrb	r2, [r2, #0]
    81f6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    81f8:	2316      	movs	r3, #22
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	781b      	ldrb	r3, [r3, #0]
    81fe:	2b00      	cmp	r3, #0
    8200:	d104      	bne.n	820c <dir_find+0x88>
    8202:	2317      	movs	r3, #23
    8204:	18fb      	adds	r3, r7, r3
    8206:	2204      	movs	r2, #4
    8208:	701a      	strb	r2, [r3, #0]
    820a:	e0a5      	b.n	8358 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    820c:	693b      	ldr	r3, [r7, #16]
    820e:	330b      	adds	r3, #11
    8210:	781a      	ldrb	r2, [r3, #0]
    8212:	230f      	movs	r3, #15
    8214:	18fb      	adds	r3, r7, r3
    8216:	213f      	movs	r1, #63	; 0x3f
    8218:	400a      	ands	r2, r1
    821a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    821c:	2316      	movs	r3, #22
    821e:	18fb      	adds	r3, r7, r3
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	2be5      	cmp	r3, #229	; 0xe5
    8224:	d00a      	beq.n	823c <dir_find+0xb8>
    8226:	230f      	movs	r3, #15
    8228:	18fb      	adds	r3, r7, r3
    822a:	781b      	ldrb	r3, [r3, #0]
    822c:	2208      	movs	r2, #8
    822e:	4013      	ands	r3, r2
    8230:	d009      	beq.n	8246 <dir_find+0xc2>
    8232:	230f      	movs	r3, #15
    8234:	18fb      	adds	r3, r7, r3
    8236:	781b      	ldrb	r3, [r3, #0]
    8238:	2b0f      	cmp	r3, #15
    823a:	d004      	beq.n	8246 <dir_find+0xc2>
			ord = 0xFF;
    823c:	2315      	movs	r3, #21
    823e:	18fb      	adds	r3, r7, r3
    8240:	22ff      	movs	r2, #255	; 0xff
    8242:	701a      	strb	r2, [r3, #0]
    8244:	e073      	b.n	832e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8246:	230f      	movs	r3, #15
    8248:	18fb      	adds	r3, r7, r3
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b0f      	cmp	r3, #15
    824e:	d145      	bne.n	82dc <dir_find+0x158>
				if (dj->lfn) {
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	69db      	ldr	r3, [r3, #28]
    8254:	2b00      	cmp	r3, #0
    8256:	d100      	bne.n	825a <dir_find+0xd6>
    8258:	e069      	b.n	832e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    825a:	2316      	movs	r3, #22
    825c:	18fb      	adds	r3, r7, r3
    825e:	781b      	ldrb	r3, [r3, #0]
    8260:	2240      	movs	r2, #64	; 0x40
    8262:	4013      	ands	r3, r2
    8264:	d016      	beq.n	8294 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    8266:	2314      	movs	r3, #20
    8268:	18fb      	adds	r3, r7, r3
    826a:	693a      	ldr	r2, [r7, #16]
    826c:	7b52      	ldrb	r2, [r2, #13]
    826e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    8270:	2316      	movs	r3, #22
    8272:	18fb      	adds	r3, r7, r3
    8274:	2216      	movs	r2, #22
    8276:	18ba      	adds	r2, r7, r2
    8278:	7812      	ldrb	r2, [r2, #0]
    827a:	2140      	movs	r1, #64	; 0x40
    827c:	438a      	bics	r2, r1
    827e:	701a      	strb	r2, [r3, #0]
    8280:	2315      	movs	r3, #21
    8282:	18fb      	adds	r3, r7, r3
    8284:	2216      	movs	r2, #22
    8286:	18ba      	adds	r2, r7, r2
    8288:	7812      	ldrb	r2, [r2, #0]
    828a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	88da      	ldrh	r2, [r3, #6]
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8294:	2316      	movs	r3, #22
    8296:	18fa      	adds	r2, r7, r3
    8298:	2315      	movs	r3, #21
    829a:	18fb      	adds	r3, r7, r3
    829c:	7812      	ldrb	r2, [r2, #0]
    829e:	781b      	ldrb	r3, [r3, #0]
    82a0:	429a      	cmp	r2, r3
    82a2:	d116      	bne.n	82d2 <dir_find+0x14e>
    82a4:	693b      	ldr	r3, [r7, #16]
    82a6:	330d      	adds	r3, #13
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	2214      	movs	r2, #20
    82ac:	18ba      	adds	r2, r7, r2
    82ae:	7812      	ldrb	r2, [r2, #0]
    82b0:	429a      	cmp	r2, r3
    82b2:	d10e      	bne.n	82d2 <dir_find+0x14e>
    82b4:	687b      	ldr	r3, [r7, #4]
    82b6:	69db      	ldr	r3, [r3, #28]
    82b8:	693a      	ldr	r2, [r7, #16]
    82ba:	0011      	movs	r1, r2
    82bc:	0018      	movs	r0, r3
    82be:	4b2c      	ldr	r3, [pc, #176]	; (8370 <dir_find+0x1ec>)
    82c0:	4798      	blx	r3
    82c2:	1e03      	subs	r3, r0, #0
    82c4:	d005      	beq.n	82d2 <dir_find+0x14e>
    82c6:	2315      	movs	r3, #21
    82c8:	18fb      	adds	r3, r7, r3
    82ca:	781b      	ldrb	r3, [r3, #0]
    82cc:	3b01      	subs	r3, #1
    82ce:	b2da      	uxtb	r2, r3
    82d0:	e000      	b.n	82d4 <dir_find+0x150>
    82d2:	22ff      	movs	r2, #255	; 0xff
    82d4:	2315      	movs	r3, #21
    82d6:	18fb      	adds	r3, r7, r3
    82d8:	701a      	strb	r2, [r3, #0]
    82da:	e028      	b.n	832e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    82dc:	2315      	movs	r3, #21
    82de:	18fb      	adds	r3, r7, r3
    82e0:	781b      	ldrb	r3, [r3, #0]
    82e2:	2b00      	cmp	r3, #0
    82e4:	d10a      	bne.n	82fc <dir_find+0x178>
    82e6:	693b      	ldr	r3, [r7, #16]
    82e8:	0018      	movs	r0, r3
    82ea:	4b22      	ldr	r3, [pc, #136]	; (8374 <dir_find+0x1f0>)
    82ec:	4798      	blx	r3
    82ee:	0003      	movs	r3, r0
    82f0:	001a      	movs	r2, r3
    82f2:	2314      	movs	r3, #20
    82f4:	18fb      	adds	r3, r7, r3
    82f6:	781b      	ldrb	r3, [r3, #0]
    82f8:	4293      	cmp	r3, r2
    82fa:	d02a      	beq.n	8352 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    82fc:	2315      	movs	r3, #21
    82fe:	18fb      	adds	r3, r7, r3
    8300:	22ff      	movs	r2, #255	; 0xff
    8302:	701a      	strb	r2, [r3, #0]
    8304:	687b      	ldr	r3, [r7, #4]
    8306:	2201      	movs	r2, #1
    8308:	4252      	negs	r2, r2
    830a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    830c:	687b      	ldr	r3, [r7, #4]
    830e:	699b      	ldr	r3, [r3, #24]
    8310:	330b      	adds	r3, #11
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	001a      	movs	r2, r3
    8316:	2301      	movs	r3, #1
    8318:	4013      	ands	r3, r2
    831a:	d108      	bne.n	832e <dir_find+0x1aa>
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	6999      	ldr	r1, [r3, #24]
    8320:	693b      	ldr	r3, [r7, #16]
    8322:	220b      	movs	r2, #11
    8324:	0018      	movs	r0, r3
    8326:	4b14      	ldr	r3, [pc, #80]	; (8378 <dir_find+0x1f4>)
    8328:	4798      	blx	r3
    832a:	1e03      	subs	r3, r0, #0
    832c:	d013      	beq.n	8356 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    832e:	2317      	movs	r3, #23
    8330:	18fc      	adds	r4, r7, r3
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	2100      	movs	r1, #0
    8336:	0018      	movs	r0, r3
    8338:	4b10      	ldr	r3, [pc, #64]	; (837c <dir_find+0x1f8>)
    833a:	4798      	blx	r3
    833c:	0003      	movs	r3, r0
    833e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8340:	2317      	movs	r3, #23
    8342:	18fb      	adds	r3, r7, r3
    8344:	781b      	ldrb	r3, [r3, #0]
    8346:	2b00      	cmp	r3, #0
    8348:	d100      	bne.n	834c <dir_find+0x1c8>
    834a:	e73b      	b.n	81c4 <dir_find+0x40>
    834c:	e004      	b.n	8358 <dir_find+0x1d4>
		if (res != FR_OK) break;
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	e002      	b.n	8358 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8352:	46c0      	nop			; (mov r8, r8)
    8354:	e000      	b.n	8358 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8356:	46c0      	nop			; (mov r8, r8)

	return res;
    8358:	2317      	movs	r3, #23
    835a:	18fb      	adds	r3, r7, r3
    835c:	781b      	ldrb	r3, [r3, #0]
}
    835e:	0018      	movs	r0, r3
    8360:	46bd      	mov	sp, r7
    8362:	b007      	add	sp, #28
    8364:	bd90      	pop	{r4, r7, pc}
    8366:	46c0      	nop			; (mov r8, r8)
    8368:	00007a1d 	.word	0x00007a1d
    836c:	000071d9 	.word	0x000071d9
    8370:	00007d3d 	.word	0x00007d3d
    8374:	00008135 	.word	0x00008135
    8378:	0000715d 	.word	0x0000715d
    837c:	00007b4d 	.word	0x00007b4d

00008380 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    8380:	b590      	push	{r4, r7, lr}
    8382:	b087      	sub	sp, #28
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    8388:	2315      	movs	r3, #21
    838a:	18fb      	adds	r3, r7, r3
    838c:	22ff      	movs	r2, #255	; 0xff
    838e:	701a      	strb	r2, [r3, #0]
    8390:	2314      	movs	r3, #20
    8392:	18fb      	adds	r3, r7, r3
    8394:	22ff      	movs	r2, #255	; 0xff
    8396:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    8398:	2317      	movs	r3, #23
    839a:	18fb      	adds	r3, r7, r3
    839c:	2204      	movs	r2, #4
    839e:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    83a0:	e0ae      	b.n	8500 <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    83a2:	687b      	ldr	r3, [r7, #4]
    83a4:	681a      	ldr	r2, [r3, #0]
    83a6:	687b      	ldr	r3, [r7, #4]
    83a8:	691b      	ldr	r3, [r3, #16]
    83aa:	2117      	movs	r1, #23
    83ac:	187c      	adds	r4, r7, r1
    83ae:	0019      	movs	r1, r3
    83b0:	0010      	movs	r0, r2
    83b2:	4b60      	ldr	r3, [pc, #384]	; (8534 <dir_read+0x1b4>)
    83b4:	4798      	blx	r3
    83b6:	0003      	movs	r3, r0
    83b8:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    83ba:	2317      	movs	r3, #23
    83bc:	18fb      	adds	r3, r7, r3
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	2b00      	cmp	r3, #0
    83c2:	d000      	beq.n	83c6 <dir_read+0x46>
    83c4:	e0a2      	b.n	850c <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	695b      	ldr	r3, [r3, #20]
    83ca:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    83cc:	2316      	movs	r3, #22
    83ce:	18fb      	adds	r3, r7, r3
    83d0:	693a      	ldr	r2, [r7, #16]
    83d2:	7812      	ldrb	r2, [r2, #0]
    83d4:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    83d6:	2316      	movs	r3, #22
    83d8:	18fb      	adds	r3, r7, r3
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	2b00      	cmp	r3, #0
    83de:	d104      	bne.n	83ea <dir_read+0x6a>
    83e0:	2317      	movs	r3, #23
    83e2:	18fb      	adds	r3, r7, r3
    83e4:	2204      	movs	r2, #4
    83e6:	701a      	strb	r2, [r3, #0]
    83e8:	e095      	b.n	8516 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    83ea:	693b      	ldr	r3, [r7, #16]
    83ec:	330b      	adds	r3, #11
    83ee:	781a      	ldrb	r2, [r3, #0]
    83f0:	230f      	movs	r3, #15
    83f2:	18fb      	adds	r3, r7, r3
    83f4:	213f      	movs	r1, #63	; 0x3f
    83f6:	400a      	ands	r2, r1
    83f8:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    83fa:	2316      	movs	r3, #22
    83fc:	18fb      	adds	r3, r7, r3
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	2be5      	cmp	r3, #229	; 0xe5
    8402:	d00f      	beq.n	8424 <dir_read+0xa4>
    8404:	2316      	movs	r3, #22
    8406:	18fb      	adds	r3, r7, r3
    8408:	781b      	ldrb	r3, [r3, #0]
    840a:	2b2e      	cmp	r3, #46	; 0x2e
    840c:	d00a      	beq.n	8424 <dir_read+0xa4>
    840e:	230f      	movs	r3, #15
    8410:	18fb      	adds	r3, r7, r3
    8412:	781b      	ldrb	r3, [r3, #0]
    8414:	2208      	movs	r2, #8
    8416:	4013      	ands	r3, r2
    8418:	d009      	beq.n	842e <dir_read+0xae>
    841a:	230f      	movs	r3, #15
    841c:	18fb      	adds	r3, r7, r3
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	2b0f      	cmp	r3, #15
    8422:	d004      	beq.n	842e <dir_read+0xae>
			ord = 0xFF;
    8424:	2315      	movs	r3, #21
    8426:	18fb      	adds	r3, r7, r3
    8428:	22ff      	movs	r2, #255	; 0xff
    842a:	701a      	strb	r2, [r3, #0]
    842c:	e05a      	b.n	84e4 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    842e:	230f      	movs	r3, #15
    8430:	18fb      	adds	r3, r7, r3
    8432:	781b      	ldrb	r3, [r3, #0]
    8434:	2b0f      	cmp	r3, #15
    8436:	d140      	bne.n	84ba <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    8438:	2316      	movs	r3, #22
    843a:	18fb      	adds	r3, r7, r3
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	2240      	movs	r2, #64	; 0x40
    8440:	4013      	ands	r3, r2
    8442:	d016      	beq.n	8472 <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    8444:	2314      	movs	r3, #20
    8446:	18fb      	adds	r3, r7, r3
    8448:	693a      	ldr	r2, [r7, #16]
    844a:	7b52      	ldrb	r2, [r2, #13]
    844c:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    844e:	2316      	movs	r3, #22
    8450:	18fb      	adds	r3, r7, r3
    8452:	2216      	movs	r2, #22
    8454:	18ba      	adds	r2, r7, r2
    8456:	7812      	ldrb	r2, [r2, #0]
    8458:	2140      	movs	r1, #64	; 0x40
    845a:	438a      	bics	r2, r1
    845c:	701a      	strb	r2, [r3, #0]
    845e:	2315      	movs	r3, #21
    8460:	18fb      	adds	r3, r7, r3
    8462:	2216      	movs	r2, #22
    8464:	18ba      	adds	r2, r7, r2
    8466:	7812      	ldrb	r2, [r2, #0]
    8468:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	88da      	ldrh	r2, [r3, #6]
    846e:	687b      	ldr	r3, [r7, #4]
    8470:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8472:	2316      	movs	r3, #22
    8474:	18fa      	adds	r2, r7, r3
    8476:	2315      	movs	r3, #21
    8478:	18fb      	adds	r3, r7, r3
    847a:	7812      	ldrb	r2, [r2, #0]
    847c:	781b      	ldrb	r3, [r3, #0]
    847e:	429a      	cmp	r2, r3
    8480:	d116      	bne.n	84b0 <dir_read+0x130>
    8482:	693b      	ldr	r3, [r7, #16]
    8484:	330d      	adds	r3, #13
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	2214      	movs	r2, #20
    848a:	18ba      	adds	r2, r7, r2
    848c:	7812      	ldrb	r2, [r2, #0]
    848e:	429a      	cmp	r2, r3
    8490:	d10e      	bne.n	84b0 <dir_read+0x130>
    8492:	687b      	ldr	r3, [r7, #4]
    8494:	69db      	ldr	r3, [r3, #28]
    8496:	693a      	ldr	r2, [r7, #16]
    8498:	0011      	movs	r1, r2
    849a:	0018      	movs	r0, r3
    849c:	4b26      	ldr	r3, [pc, #152]	; (8538 <dir_read+0x1b8>)
    849e:	4798      	blx	r3
    84a0:	1e03      	subs	r3, r0, #0
    84a2:	d005      	beq.n	84b0 <dir_read+0x130>
    84a4:	2315      	movs	r3, #21
    84a6:	18fb      	adds	r3, r7, r3
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	3b01      	subs	r3, #1
    84ac:	b2da      	uxtb	r2, r3
    84ae:	e000      	b.n	84b2 <dir_read+0x132>
    84b0:	22ff      	movs	r2, #255	; 0xff
    84b2:	2315      	movs	r3, #21
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	701a      	strb	r2, [r3, #0]
    84b8:	e014      	b.n	84e4 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    84ba:	2315      	movs	r3, #21
    84bc:	18fb      	adds	r3, r7, r3
    84be:	781b      	ldrb	r3, [r3, #0]
    84c0:	2b00      	cmp	r3, #0
    84c2:	d10a      	bne.n	84da <dir_read+0x15a>
    84c4:	693b      	ldr	r3, [r7, #16]
    84c6:	0018      	movs	r0, r3
    84c8:	4b1c      	ldr	r3, [pc, #112]	; (853c <dir_read+0x1bc>)
    84ca:	4798      	blx	r3
    84cc:	0003      	movs	r3, r0
    84ce:	001a      	movs	r2, r3
    84d0:	2314      	movs	r3, #20
    84d2:	18fb      	adds	r3, r7, r3
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	4293      	cmp	r3, r2
    84d8:	d01a      	beq.n	8510 <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	2201      	movs	r2, #1
    84de:	4252      	negs	r2, r2
    84e0:	841a      	strh	r2, [r3, #32]
				break;
    84e2:	e015      	b.n	8510 <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    84e4:	2317      	movs	r3, #23
    84e6:	18fc      	adds	r4, r7, r3
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	2100      	movs	r1, #0
    84ec:	0018      	movs	r0, r3
    84ee:	4b14      	ldr	r3, [pc, #80]	; (8540 <dir_read+0x1c0>)
    84f0:	4798      	blx	r3
    84f2:	0003      	movs	r3, r0
    84f4:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    84f6:	2317      	movs	r3, #23
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	2b00      	cmp	r3, #0
    84fe:	d109      	bne.n	8514 <dir_read+0x194>
	while (dj->sect) {
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	691b      	ldr	r3, [r3, #16]
    8504:	2b00      	cmp	r3, #0
    8506:	d000      	beq.n	850a <dir_read+0x18a>
    8508:	e74b      	b.n	83a2 <dir_read+0x22>
    850a:	e004      	b.n	8516 <dir_read+0x196>
		if (res != FR_OK) break;
    850c:	46c0      	nop			; (mov r8, r8)
    850e:	e002      	b.n	8516 <dir_read+0x196>
				break;
    8510:	46c0      	nop			; (mov r8, r8)
    8512:	e000      	b.n	8516 <dir_read+0x196>
		if (res != FR_OK) break;
    8514:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8516:	2317      	movs	r3, #23
    8518:	18fb      	adds	r3, r7, r3
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	2b00      	cmp	r3, #0
    851e:	d002      	beq.n	8526 <dir_read+0x1a6>
    8520:	687b      	ldr	r3, [r7, #4]
    8522:	2200      	movs	r2, #0
    8524:	611a      	str	r2, [r3, #16]

	return res;
    8526:	2317      	movs	r3, #23
    8528:	18fb      	adds	r3, r7, r3
    852a:	781b      	ldrb	r3, [r3, #0]
}
    852c:	0018      	movs	r0, r3
    852e:	46bd      	mov	sp, r7
    8530:	b007      	add	sp, #28
    8532:	bd90      	pop	{r4, r7, pc}
    8534:	000071d9 	.word	0x000071d9
    8538:	00007e41 	.word	0x00007e41
    853c:	00008135 	.word	0x00008135
    8540:	00007b4d 	.word	0x00007b4d

00008544 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8544:	b590      	push	{r4, r7, lr}
    8546:	b08d      	sub	sp, #52	; 0x34
    8548:	af00      	add	r7, sp, #0
    854a:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    854c:	687b      	ldr	r3, [r7, #4]
    854e:	699b      	ldr	r3, [r3, #24]
    8550:	627b      	str	r3, [r7, #36]	; 0x24
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	69db      	ldr	r3, [r3, #28]
    8556:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8558:	6a79      	ldr	r1, [r7, #36]	; 0x24
    855a:	230c      	movs	r3, #12
    855c:	18fb      	adds	r3, r7, r3
    855e:	220c      	movs	r2, #12
    8560:	0018      	movs	r0, r3
    8562:	4bc8      	ldr	r3, [pc, #800]	; (8884 <dir_register+0x340>)
    8564:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8566:	230c      	movs	r3, #12
    8568:	18fb      	adds	r3, r7, r3
    856a:	7adb      	ldrb	r3, [r3, #11]
    856c:	001a      	movs	r2, r3
    856e:	2301      	movs	r3, #1
    8570:	4013      	ands	r3, r2
    8572:	d048      	beq.n	8606 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8576:	330b      	adds	r3, #11
    8578:	2200      	movs	r2, #0
    857a:	701a      	strb	r2, [r3, #0]
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	2200      	movs	r2, #0
    8580:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    8582:	232c      	movs	r3, #44	; 0x2c
    8584:	18fb      	adds	r3, r7, r3
    8586:	2201      	movs	r2, #1
    8588:	801a      	strh	r2, [r3, #0]
    858a:	e01c      	b.n	85c6 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    858c:	232c      	movs	r3, #44	; 0x2c
    858e:	18fb      	adds	r3, r7, r3
    8590:	881b      	ldrh	r3, [r3, #0]
    8592:	6a3a      	ldr	r2, [r7, #32]
    8594:	210c      	movs	r1, #12
    8596:	1879      	adds	r1, r7, r1
    8598:	6a78      	ldr	r0, [r7, #36]	; 0x24
    859a:	4cbb      	ldr	r4, [pc, #748]	; (8888 <dir_register+0x344>)
    859c:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    859e:	232f      	movs	r3, #47	; 0x2f
    85a0:	18fc      	adds	r4, r7, r3
    85a2:	687b      	ldr	r3, [r7, #4]
    85a4:	0018      	movs	r0, r3
    85a6:	4bb9      	ldr	r3, [pc, #740]	; (888c <dir_register+0x348>)
    85a8:	4798      	blx	r3
    85aa:	0003      	movs	r3, r0
    85ac:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    85ae:	232f      	movs	r3, #47	; 0x2f
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	781b      	ldrb	r3, [r3, #0]
    85b4:	2b00      	cmp	r3, #0
    85b6:	d10c      	bne.n	85d2 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    85b8:	232c      	movs	r3, #44	; 0x2c
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	881a      	ldrh	r2, [r3, #0]
    85be:	232c      	movs	r3, #44	; 0x2c
    85c0:	18fb      	adds	r3, r7, r3
    85c2:	3201      	adds	r2, #1
    85c4:	801a      	strh	r2, [r3, #0]
    85c6:	232c      	movs	r3, #44	; 0x2c
    85c8:	18fb      	adds	r3, r7, r3
    85ca:	881b      	ldrh	r3, [r3, #0]
    85cc:	2b63      	cmp	r3, #99	; 0x63
    85ce:	d9dd      	bls.n	858c <dir_register+0x48>
    85d0:	e000      	b.n	85d4 <dir_register+0x90>
			if (res != FR_OK) break;
    85d2:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    85d4:	232c      	movs	r3, #44	; 0x2c
    85d6:	18fb      	adds	r3, r7, r3
    85d8:	881b      	ldrh	r3, [r3, #0]
    85da:	2b64      	cmp	r3, #100	; 0x64
    85dc:	d101      	bne.n	85e2 <dir_register+0x9e>
    85de:	2307      	movs	r3, #7
    85e0:	e14c      	b.n	887c <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    85e2:	232f      	movs	r3, #47	; 0x2f
    85e4:	18fb      	adds	r3, r7, r3
    85e6:	781b      	ldrb	r3, [r3, #0]
    85e8:	2b04      	cmp	r3, #4
    85ea:	d003      	beq.n	85f4 <dir_register+0xb0>
    85ec:	232f      	movs	r3, #47	; 0x2f
    85ee:	18fb      	adds	r3, r7, r3
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	e143      	b.n	887c <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    85f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85f6:	330b      	adds	r3, #11
    85f8:	220c      	movs	r2, #12
    85fa:	18ba      	adds	r2, r7, r2
    85fc:	7ad2      	ldrb	r2, [r2, #11]
    85fe:	701a      	strb	r2, [r3, #0]
    8600:	687b      	ldr	r3, [r7, #4]
    8602:	6a3a      	ldr	r2, [r7, #32]
    8604:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8606:	230c      	movs	r3, #12
    8608:	18fb      	adds	r3, r7, r3
    860a:	7adb      	ldrb	r3, [r3, #11]
    860c:	001a      	movs	r2, r3
    860e:	2302      	movs	r3, #2
    8610:	4013      	ands	r3, r2
    8612:	d023      	beq.n	865c <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8614:	232a      	movs	r3, #42	; 0x2a
    8616:	18fb      	adds	r3, r7, r3
    8618:	2200      	movs	r2, #0
    861a:	801a      	strh	r2, [r3, #0]
    861c:	e006      	b.n	862c <dir_register+0xe8>
    861e:	232a      	movs	r3, #42	; 0x2a
    8620:	18fb      	adds	r3, r7, r3
    8622:	881a      	ldrh	r2, [r3, #0]
    8624:	232a      	movs	r3, #42	; 0x2a
    8626:	18fb      	adds	r3, r7, r3
    8628:	3201      	adds	r2, #1
    862a:	801a      	strh	r2, [r3, #0]
    862c:	232a      	movs	r3, #42	; 0x2a
    862e:	18fb      	adds	r3, r7, r3
    8630:	881b      	ldrh	r3, [r3, #0]
    8632:	005b      	lsls	r3, r3, #1
    8634:	6a3a      	ldr	r2, [r7, #32]
    8636:	18d3      	adds	r3, r2, r3
    8638:	881b      	ldrh	r3, [r3, #0]
    863a:	2b00      	cmp	r3, #0
    863c:	d1ef      	bne.n	861e <dir_register+0xda>
		ne = (ne + 25) / 13;
    863e:	232a      	movs	r3, #42	; 0x2a
    8640:	18fb      	adds	r3, r7, r3
    8642:	881b      	ldrh	r3, [r3, #0]
    8644:	3319      	adds	r3, #25
    8646:	001a      	movs	r2, r3
    8648:	4b91      	ldr	r3, [pc, #580]	; (8890 <dir_register+0x34c>)
    864a:	210d      	movs	r1, #13
    864c:	0010      	movs	r0, r2
    864e:	4798      	blx	r3
    8650:	0003      	movs	r3, r0
    8652:	001a      	movs	r2, r3
    8654:	232a      	movs	r3, #42	; 0x2a
    8656:	18fb      	adds	r3, r7, r3
    8658:	801a      	strh	r2, [r3, #0]
    865a:	e003      	b.n	8664 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    865c:	232a      	movs	r3, #42	; 0x2a
    865e:	18fb      	adds	r3, r7, r3
    8660:	2201      	movs	r2, #1
    8662:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8664:	232f      	movs	r3, #47	; 0x2f
    8666:	18fc      	adds	r4, r7, r3
    8668:	687b      	ldr	r3, [r7, #4]
    866a:	2100      	movs	r1, #0
    866c:	0018      	movs	r0, r3
    866e:	4b89      	ldr	r3, [pc, #548]	; (8894 <dir_register+0x350>)
    8670:	4798      	blx	r3
    8672:	0003      	movs	r3, r0
    8674:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8676:	232f      	movs	r3, #47	; 0x2f
    8678:	18fb      	adds	r3, r7, r3
    867a:	781b      	ldrb	r3, [r3, #0]
    867c:	2b00      	cmp	r3, #0
    867e:	d003      	beq.n	8688 <dir_register+0x144>
    8680:	232f      	movs	r3, #47	; 0x2f
    8682:	18fb      	adds	r3, r7, r3
    8684:	781b      	ldrb	r3, [r3, #0]
    8686:	e0f9      	b.n	887c <dir_register+0x338>
	n = is = 0;
    8688:	2328      	movs	r3, #40	; 0x28
    868a:	18fb      	adds	r3, r7, r3
    868c:	2200      	movs	r2, #0
    868e:	801a      	strh	r2, [r3, #0]
    8690:	232c      	movs	r3, #44	; 0x2c
    8692:	18fb      	adds	r3, r7, r3
    8694:	2228      	movs	r2, #40	; 0x28
    8696:	18ba      	adds	r2, r7, r2
    8698:	8812      	ldrh	r2, [r2, #0]
    869a:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    869c:	687b      	ldr	r3, [r7, #4]
    869e:	681a      	ldr	r2, [r3, #0]
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	691b      	ldr	r3, [r3, #16]
    86a4:	212f      	movs	r1, #47	; 0x2f
    86a6:	187c      	adds	r4, r7, r1
    86a8:	0019      	movs	r1, r3
    86aa:	0010      	movs	r0, r2
    86ac:	4b7a      	ldr	r3, [pc, #488]	; (8898 <dir_register+0x354>)
    86ae:	4798      	blx	r3
    86b0:	0003      	movs	r3, r0
    86b2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    86b4:	232f      	movs	r3, #47	; 0x2f
    86b6:	18fb      	adds	r3, r7, r3
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	2b00      	cmp	r3, #0
    86bc:	d13c      	bne.n	8738 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    86be:	687b      	ldr	r3, [r7, #4]
    86c0:	695a      	ldr	r2, [r3, #20]
    86c2:	231f      	movs	r3, #31
    86c4:	18fb      	adds	r3, r7, r3
    86c6:	7812      	ldrb	r2, [r2, #0]
    86c8:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    86ca:	231f      	movs	r3, #31
    86cc:	18fb      	adds	r3, r7, r3
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	2be5      	cmp	r3, #229	; 0xe5
    86d2:	d004      	beq.n	86de <dir_register+0x19a>
    86d4:	231f      	movs	r3, #31
    86d6:	18fb      	adds	r3, r7, r3
    86d8:	781b      	ldrb	r3, [r3, #0]
    86da:	2b00      	cmp	r3, #0
    86dc:	d119      	bne.n	8712 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    86de:	232c      	movs	r3, #44	; 0x2c
    86e0:	18fb      	adds	r3, r7, r3
    86e2:	881b      	ldrh	r3, [r3, #0]
    86e4:	2b00      	cmp	r3, #0
    86e6:	d104      	bne.n	86f2 <dir_register+0x1ae>
    86e8:	2328      	movs	r3, #40	; 0x28
    86ea:	18fb      	adds	r3, r7, r3
    86ec:	687a      	ldr	r2, [r7, #4]
    86ee:	88d2      	ldrh	r2, [r2, #6]
    86f0:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    86f2:	232c      	movs	r3, #44	; 0x2c
    86f4:	18fb      	adds	r3, r7, r3
    86f6:	222c      	movs	r2, #44	; 0x2c
    86f8:	18ba      	adds	r2, r7, r2
    86fa:	8812      	ldrh	r2, [r2, #0]
    86fc:	3201      	adds	r2, #1
    86fe:	801a      	strh	r2, [r3, #0]
    8700:	232c      	movs	r3, #44	; 0x2c
    8702:	18fa      	adds	r2, r7, r3
    8704:	232a      	movs	r3, #42	; 0x2a
    8706:	18fb      	adds	r3, r7, r3
    8708:	8812      	ldrh	r2, [r2, #0]
    870a:	881b      	ldrh	r3, [r3, #0]
    870c:	429a      	cmp	r2, r3
    870e:	d104      	bne.n	871a <dir_register+0x1d6>
    8710:	e013      	b.n	873a <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8712:	232c      	movs	r3, #44	; 0x2c
    8714:	18fb      	adds	r3, r7, r3
    8716:	2200      	movs	r2, #0
    8718:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    871a:	232f      	movs	r3, #47	; 0x2f
    871c:	18fc      	adds	r4, r7, r3
    871e:	687b      	ldr	r3, [r7, #4]
    8720:	2101      	movs	r1, #1
    8722:	0018      	movs	r0, r3
    8724:	4b5d      	ldr	r3, [pc, #372]	; (889c <dir_register+0x358>)
    8726:	4798      	blx	r3
    8728:	0003      	movs	r3, r0
    872a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    872c:	232f      	movs	r3, #47	; 0x2f
    872e:	18fb      	adds	r3, r7, r3
    8730:	781b      	ldrb	r3, [r3, #0]
    8732:	2b00      	cmp	r3, #0
    8734:	d0b2      	beq.n	869c <dir_register+0x158>
    8736:	e000      	b.n	873a <dir_register+0x1f6>
		if (res != FR_OK) break;
    8738:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    873a:	232f      	movs	r3, #47	; 0x2f
    873c:	18fb      	adds	r3, r7, r3
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	2b00      	cmp	r3, #0
    8742:	d163      	bne.n	880c <dir_register+0x2c8>
    8744:	232a      	movs	r3, #42	; 0x2a
    8746:	18fb      	adds	r3, r7, r3
    8748:	881b      	ldrh	r3, [r3, #0]
    874a:	2b01      	cmp	r3, #1
    874c:	d95e      	bls.n	880c <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    874e:	232f      	movs	r3, #47	; 0x2f
    8750:	18fc      	adds	r4, r7, r3
    8752:	2328      	movs	r3, #40	; 0x28
    8754:	18fb      	adds	r3, r7, r3
    8756:	881a      	ldrh	r2, [r3, #0]
    8758:	687b      	ldr	r3, [r7, #4]
    875a:	0011      	movs	r1, r2
    875c:	0018      	movs	r0, r3
    875e:	4b4d      	ldr	r3, [pc, #308]	; (8894 <dir_register+0x350>)
    8760:	4798      	blx	r3
    8762:	0003      	movs	r3, r0
    8764:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8766:	232f      	movs	r3, #47	; 0x2f
    8768:	18fb      	adds	r3, r7, r3
    876a:	781b      	ldrb	r3, [r3, #0]
    876c:	2b00      	cmp	r3, #0
    876e:	d14d      	bne.n	880c <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	699b      	ldr	r3, [r3, #24]
    8774:	221e      	movs	r2, #30
    8776:	18bc      	adds	r4, r7, r2
    8778:	0018      	movs	r0, r3
    877a:	4b49      	ldr	r3, [pc, #292]	; (88a0 <dir_register+0x35c>)
    877c:	4798      	blx	r3
    877e:	0003      	movs	r3, r0
    8780:	7023      	strb	r3, [r4, #0]
			ne--;
    8782:	232a      	movs	r3, #42	; 0x2a
    8784:	18fb      	adds	r3, r7, r3
    8786:	881a      	ldrh	r2, [r3, #0]
    8788:	232a      	movs	r3, #42	; 0x2a
    878a:	18fb      	adds	r3, r7, r3
    878c:	3a01      	subs	r2, #1
    878e:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	681a      	ldr	r2, [r3, #0]
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	691b      	ldr	r3, [r3, #16]
    8798:	212f      	movs	r1, #47	; 0x2f
    879a:	187c      	adds	r4, r7, r1
    879c:	0019      	movs	r1, r3
    879e:	0010      	movs	r0, r2
    87a0:	4b3d      	ldr	r3, [pc, #244]	; (8898 <dir_register+0x354>)
    87a2:	4798      	blx	r3
    87a4:	0003      	movs	r3, r0
    87a6:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    87a8:	232f      	movs	r3, #47	; 0x2f
    87aa:	18fb      	adds	r3, r7, r3
    87ac:	781b      	ldrb	r3, [r3, #0]
    87ae:	2b00      	cmp	r3, #0
    87b0:	d12b      	bne.n	880a <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    87b2:	687b      	ldr	r3, [r7, #4]
    87b4:	69d8      	ldr	r0, [r3, #28]
    87b6:	687b      	ldr	r3, [r7, #4]
    87b8:	6959      	ldr	r1, [r3, #20]
    87ba:	232a      	movs	r3, #42	; 0x2a
    87bc:	18fb      	adds	r3, r7, r3
    87be:	881b      	ldrh	r3, [r3, #0]
    87c0:	b2da      	uxtb	r2, r3
    87c2:	231e      	movs	r3, #30
    87c4:	18fb      	adds	r3, r7, r3
    87c6:	781b      	ldrb	r3, [r3, #0]
    87c8:	4c36      	ldr	r4, [pc, #216]	; (88a4 <dir_register+0x360>)
    87ca:	47a0      	blx	r4
				dj->fs->wflag = 1;
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	681b      	ldr	r3, [r3, #0]
    87d0:	2201      	movs	r2, #1
    87d2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    87d4:	232f      	movs	r3, #47	; 0x2f
    87d6:	18fc      	adds	r4, r7, r3
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	2100      	movs	r1, #0
    87dc:	0018      	movs	r0, r3
    87de:	4b2f      	ldr	r3, [pc, #188]	; (889c <dir_register+0x358>)
    87e0:	4798      	blx	r3
    87e2:	0003      	movs	r3, r0
    87e4:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    87e6:	232f      	movs	r3, #47	; 0x2f
    87e8:	18fb      	adds	r3, r7, r3
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	2b00      	cmp	r3, #0
    87ee:	d10d      	bne.n	880c <dir_register+0x2c8>
    87f0:	232a      	movs	r3, #42	; 0x2a
    87f2:	18fb      	adds	r3, r7, r3
    87f4:	222a      	movs	r2, #42	; 0x2a
    87f6:	18ba      	adds	r2, r7, r2
    87f8:	8812      	ldrh	r2, [r2, #0]
    87fa:	3a01      	subs	r2, #1
    87fc:	801a      	strh	r2, [r3, #0]
    87fe:	232a      	movs	r3, #42	; 0x2a
    8800:	18fb      	adds	r3, r7, r3
    8802:	881b      	ldrh	r3, [r3, #0]
    8804:	2b00      	cmp	r3, #0
    8806:	d1c3      	bne.n	8790 <dir_register+0x24c>
    8808:	e000      	b.n	880c <dir_register+0x2c8>
				if (res != FR_OK) break;
    880a:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    880c:	232f      	movs	r3, #47	; 0x2f
    880e:	18fb      	adds	r3, r7, r3
    8810:	781b      	ldrb	r3, [r3, #0]
    8812:	2b00      	cmp	r3, #0
    8814:	d12f      	bne.n	8876 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	681a      	ldr	r2, [r3, #0]
    881a:	687b      	ldr	r3, [r7, #4]
    881c:	691b      	ldr	r3, [r3, #16]
    881e:	212f      	movs	r1, #47	; 0x2f
    8820:	187c      	adds	r4, r7, r1
    8822:	0019      	movs	r1, r3
    8824:	0010      	movs	r0, r2
    8826:	4b1c      	ldr	r3, [pc, #112]	; (8898 <dir_register+0x354>)
    8828:	4798      	blx	r3
    882a:	0003      	movs	r3, r0
    882c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    882e:	232f      	movs	r3, #47	; 0x2f
    8830:	18fb      	adds	r3, r7, r3
    8832:	781b      	ldrb	r3, [r3, #0]
    8834:	2b00      	cmp	r3, #0
    8836:	d11e      	bne.n	8876 <dir_register+0x332>
			dir = dj->dir;
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	695b      	ldr	r3, [r3, #20]
    883c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    883e:	69bb      	ldr	r3, [r7, #24]
    8840:	2220      	movs	r2, #32
    8842:	2100      	movs	r1, #0
    8844:	0018      	movs	r0, r3
    8846:	4b18      	ldr	r3, [pc, #96]	; (88a8 <dir_register+0x364>)
    8848:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	6999      	ldr	r1, [r3, #24]
    884e:	69bb      	ldr	r3, [r7, #24]
    8850:	220b      	movs	r2, #11
    8852:	0018      	movs	r0, r3
    8854:	4b0b      	ldr	r3, [pc, #44]	; (8884 <dir_register+0x340>)
    8856:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8858:	69bb      	ldr	r3, [r7, #24]
    885a:	330c      	adds	r3, #12
    885c:	001a      	movs	r2, r3
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	699b      	ldr	r3, [r3, #24]
    8862:	330b      	adds	r3, #11
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	2118      	movs	r1, #24
    8868:	400b      	ands	r3, r1
    886a:	b2db      	uxtb	r3, r3
    886c:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    886e:	687b      	ldr	r3, [r7, #4]
    8870:	681b      	ldr	r3, [r3, #0]
    8872:	2201      	movs	r2, #1
    8874:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8876:	232f      	movs	r3, #47	; 0x2f
    8878:	18fb      	adds	r3, r7, r3
    887a:	781b      	ldrb	r3, [r3, #0]
}
    887c:	0018      	movs	r0, r3
    887e:	46bd      	mov	sp, r7
    8880:	b00d      	add	sp, #52	; 0x34
    8882:	bd90      	pop	{r4, r7, pc}
    8884:	000070f5 	.word	0x000070f5
    8888:	00008035 	.word	0x00008035
    888c:	00008185 	.word	0x00008185
    8890:	0000b0d9 	.word	0x0000b0d9
    8894:	00007a1d 	.word	0x00007a1d
    8898:	000071d9 	.word	0x000071d9
    889c:	00007b4d 	.word	0x00007b4d
    88a0:	00008135 	.word	0x00008135
    88a4:	00007f25 	.word	0x00007f25
    88a8:	0000712d 	.word	0x0000712d

000088ac <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    88ac:	b590      	push	{r4, r7, lr}
    88ae:	b085      	sub	sp, #20
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    88b4:	230c      	movs	r3, #12
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	687a      	ldr	r2, [r7, #4]
    88ba:	88d2      	ldrh	r2, [r2, #6]
    88bc:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	8c1b      	ldrh	r3, [r3, #32]
    88c2:	4a2c      	ldr	r2, [pc, #176]	; (8974 <dir_remove+0xc8>)
    88c4:	4293      	cmp	r3, r2
    88c6:	d002      	beq.n	88ce <dir_remove+0x22>
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	8c1b      	ldrh	r3, [r3, #32]
    88cc:	e002      	b.n	88d4 <dir_remove+0x28>
    88ce:	230c      	movs	r3, #12
    88d0:	18fb      	adds	r3, r7, r3
    88d2:	881b      	ldrh	r3, [r3, #0]
    88d4:	220f      	movs	r2, #15
    88d6:	18bc      	adds	r4, r7, r2
    88d8:	687a      	ldr	r2, [r7, #4]
    88da:	0019      	movs	r1, r3
    88dc:	0010      	movs	r0, r2
    88de:	4b26      	ldr	r3, [pc, #152]	; (8978 <dir_remove+0xcc>)
    88e0:	4798      	blx	r3
    88e2:	0003      	movs	r3, r0
    88e4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    88e6:	230f      	movs	r3, #15
    88e8:	18fb      	adds	r3, r7, r3
    88ea:	781b      	ldrb	r3, [r3, #0]
    88ec:	2b00      	cmp	r3, #0
    88ee:	d13a      	bne.n	8966 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	681a      	ldr	r2, [r3, #0]
    88f4:	687b      	ldr	r3, [r7, #4]
    88f6:	691b      	ldr	r3, [r3, #16]
    88f8:	210f      	movs	r1, #15
    88fa:	187c      	adds	r4, r7, r1
    88fc:	0019      	movs	r1, r3
    88fe:	0010      	movs	r0, r2
    8900:	4b1e      	ldr	r3, [pc, #120]	; (897c <dir_remove+0xd0>)
    8902:	4798      	blx	r3
    8904:	0003      	movs	r3, r0
    8906:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8908:	230f      	movs	r3, #15
    890a:	18fb      	adds	r3, r7, r3
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	2b00      	cmp	r3, #0
    8910:	d11d      	bne.n	894e <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	695b      	ldr	r3, [r3, #20]
    8916:	22e5      	movs	r2, #229	; 0xe5
    8918:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	681b      	ldr	r3, [r3, #0]
    891e:	2201      	movs	r2, #1
    8920:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8922:	687b      	ldr	r3, [r7, #4]
    8924:	88db      	ldrh	r3, [r3, #6]
    8926:	220c      	movs	r2, #12
    8928:	18ba      	adds	r2, r7, r2
    892a:	8812      	ldrh	r2, [r2, #0]
    892c:	429a      	cmp	r2, r3
    892e:	d910      	bls.n	8952 <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8930:	230f      	movs	r3, #15
    8932:	18fc      	adds	r4, r7, r3
    8934:	687b      	ldr	r3, [r7, #4]
    8936:	2100      	movs	r1, #0
    8938:	0018      	movs	r0, r3
    893a:	4b11      	ldr	r3, [pc, #68]	; (8980 <dir_remove+0xd4>)
    893c:	4798      	blx	r3
    893e:	0003      	movs	r3, r0
    8940:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8942:	230f      	movs	r3, #15
    8944:	18fb      	adds	r3, r7, r3
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	2b00      	cmp	r3, #0
    894a:	d0d1      	beq.n	88f0 <dir_remove+0x44>
    894c:	e002      	b.n	8954 <dir_remove+0xa8>
			if (res != FR_OK) break;
    894e:	46c0      	nop			; (mov r8, r8)
    8950:	e000      	b.n	8954 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8952:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8954:	230f      	movs	r3, #15
    8956:	18fb      	adds	r3, r7, r3
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	2b04      	cmp	r3, #4
    895c:	d103      	bne.n	8966 <dir_remove+0xba>
    895e:	230f      	movs	r3, #15
    8960:	18fb      	adds	r3, r7, r3
    8962:	2202      	movs	r2, #2
    8964:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8966:	230f      	movs	r3, #15
    8968:	18fb      	adds	r3, r7, r3
    896a:	781b      	ldrb	r3, [r3, #0]
}
    896c:	0018      	movs	r0, r3
    896e:	46bd      	mov	sp, r7
    8970:	b005      	add	sp, #20
    8972:	bd90      	pop	{r4, r7, pc}
    8974:	0000ffff 	.word	0x0000ffff
    8978:	00007a1d 	.word	0x00007a1d
    897c:	000071d9 	.word	0x000071d9
    8980:	00007b4d 	.word	0x00007b4d

00008984 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8984:	b590      	push	{r4, r7, lr}
    8986:	b08b      	sub	sp, #44	; 0x2c
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
    898c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    898e:	683b      	ldr	r3, [r7, #0]
    8990:	681b      	ldr	r3, [r3, #0]
    8992:	613b      	str	r3, [r7, #16]
    8994:	e002      	b.n	899c <create_name+0x18>
    8996:	693b      	ldr	r3, [r7, #16]
    8998:	3301      	adds	r3, #1
    899a:	613b      	str	r3, [r7, #16]
    899c:	693b      	ldr	r3, [r7, #16]
    899e:	781b      	ldrb	r3, [r3, #0]
    89a0:	2b2f      	cmp	r3, #47	; 0x2f
    89a2:	d0f8      	beq.n	8996 <create_name+0x12>
    89a4:	693b      	ldr	r3, [r7, #16]
    89a6:	781b      	ldrb	r3, [r3, #0]
    89a8:	2b5c      	cmp	r3, #92	; 0x5c
    89aa:	d0f4      	beq.n	8996 <create_name+0x12>
	lfn = dj->lfn;
    89ac:	687b      	ldr	r3, [r7, #4]
    89ae:	69db      	ldr	r3, [r3, #28]
    89b0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    89b2:	2300      	movs	r3, #0
    89b4:	617b      	str	r3, [r7, #20]
    89b6:	697b      	ldr	r3, [r7, #20]
    89b8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    89ba:	69bb      	ldr	r3, [r7, #24]
    89bc:	1c5a      	adds	r2, r3, #1
    89be:	61ba      	str	r2, [r7, #24]
    89c0:	693a      	ldr	r2, [r7, #16]
    89c2:	18d3      	adds	r3, r2, r3
    89c4:	781a      	ldrb	r2, [r3, #0]
    89c6:	2324      	movs	r3, #36	; 0x24
    89c8:	18fb      	adds	r3, r7, r3
    89ca:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    89cc:	2324      	movs	r3, #36	; 0x24
    89ce:	18fb      	adds	r3, r7, r3
    89d0:	881b      	ldrh	r3, [r3, #0]
    89d2:	2b1f      	cmp	r3, #31
    89d4:	d944      	bls.n	8a60 <create_name+0xdc>
    89d6:	2324      	movs	r3, #36	; 0x24
    89d8:	18fb      	adds	r3, r7, r3
    89da:	881b      	ldrh	r3, [r3, #0]
    89dc:	2b2f      	cmp	r3, #47	; 0x2f
    89de:	d03f      	beq.n	8a60 <create_name+0xdc>
    89e0:	2324      	movs	r3, #36	; 0x24
    89e2:	18fb      	adds	r3, r7, r3
    89e4:	881b      	ldrh	r3, [r3, #0]
    89e6:	2b5c      	cmp	r3, #92	; 0x5c
    89e8:	d03a      	beq.n	8a60 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    89ea:	697b      	ldr	r3, [r7, #20]
    89ec:	2bfe      	cmp	r3, #254	; 0xfe
    89ee:	d901      	bls.n	89f4 <create_name+0x70>
			return FR_INVALID_NAME;
    89f0:	2306      	movs	r3, #6
    89f2:	e1e7      	b.n	8dc4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    89f4:	2324      	movs	r3, #36	; 0x24
    89f6:	18fb      	adds	r3, r7, r3
    89f8:	2224      	movs	r2, #36	; 0x24
    89fa:	18ba      	adds	r2, r7, r2
    89fc:	8812      	ldrh	r2, [r2, #0]
    89fe:	21ff      	movs	r1, #255	; 0xff
    8a00:	400a      	ands	r2, r1
    8a02:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8a04:	2324      	movs	r3, #36	; 0x24
    8a06:	18fc      	adds	r4, r7, r3
    8a08:	2324      	movs	r3, #36	; 0x24
    8a0a:	18fb      	adds	r3, r7, r3
    8a0c:	881b      	ldrh	r3, [r3, #0]
    8a0e:	2101      	movs	r1, #1
    8a10:	0018      	movs	r0, r3
    8a12:	4bba      	ldr	r3, [pc, #744]	; (8cfc <create_name+0x378>)
    8a14:	4798      	blx	r3
    8a16:	0003      	movs	r3, r0
    8a18:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8a1a:	2324      	movs	r3, #36	; 0x24
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	881b      	ldrh	r3, [r3, #0]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d101      	bne.n	8a28 <create_name+0xa4>
    8a24:	2306      	movs	r3, #6
    8a26:	e1cd      	b.n	8dc4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8a28:	2324      	movs	r3, #36	; 0x24
    8a2a:	18fb      	adds	r3, r7, r3
    8a2c:	881b      	ldrh	r3, [r3, #0]
    8a2e:	2b7f      	cmp	r3, #127	; 0x7f
    8a30:	d80b      	bhi.n	8a4a <create_name+0xc6>
    8a32:	2324      	movs	r3, #36	; 0x24
    8a34:	18fb      	adds	r3, r7, r3
    8a36:	881a      	ldrh	r2, [r3, #0]
    8a38:	4bb1      	ldr	r3, [pc, #708]	; (8d00 <create_name+0x37c>)
    8a3a:	0011      	movs	r1, r2
    8a3c:	0018      	movs	r0, r3
    8a3e:	4bb1      	ldr	r3, [pc, #708]	; (8d04 <create_name+0x380>)
    8a40:	4798      	blx	r3
    8a42:	1e03      	subs	r3, r0, #0
    8a44:	d001      	beq.n	8a4a <create_name+0xc6>
			return FR_INVALID_NAME;
    8a46:	2306      	movs	r3, #6
    8a48:	e1bc      	b.n	8dc4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8a4a:	697b      	ldr	r3, [r7, #20]
    8a4c:	1c5a      	adds	r2, r3, #1
    8a4e:	617a      	str	r2, [r7, #20]
    8a50:	005b      	lsls	r3, r3, #1
    8a52:	68fa      	ldr	r2, [r7, #12]
    8a54:	18d3      	adds	r3, r2, r3
    8a56:	2224      	movs	r2, #36	; 0x24
    8a58:	18ba      	adds	r2, r7, r2
    8a5a:	8812      	ldrh	r2, [r2, #0]
    8a5c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8a5e:	e7ac      	b.n	89ba <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8a60:	693a      	ldr	r2, [r7, #16]
    8a62:	69bb      	ldr	r3, [r7, #24]
    8a64:	18d2      	adds	r2, r2, r3
    8a66:	683b      	ldr	r3, [r7, #0]
    8a68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8a6a:	2324      	movs	r3, #36	; 0x24
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	881b      	ldrh	r3, [r3, #0]
    8a70:	2b1f      	cmp	r3, #31
    8a72:	d801      	bhi.n	8a78 <create_name+0xf4>
    8a74:	2204      	movs	r2, #4
    8a76:	e000      	b.n	8a7a <create_name+0xf6>
    8a78:	2200      	movs	r2, #0
    8a7a:	2326      	movs	r3, #38	; 0x26
    8a7c:	18fb      	adds	r3, r7, r3
    8a7e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8a80:	e017      	b.n	8ab2 <create_name+0x12e>
		w = lfn[di-1];
    8a82:	697b      	ldr	r3, [r7, #20]
    8a84:	4aa0      	ldr	r2, [pc, #640]	; (8d08 <create_name+0x384>)
    8a86:	4694      	mov	ip, r2
    8a88:	4463      	add	r3, ip
    8a8a:	005b      	lsls	r3, r3, #1
    8a8c:	68fa      	ldr	r2, [r7, #12]
    8a8e:	18d2      	adds	r2, r2, r3
    8a90:	2324      	movs	r3, #36	; 0x24
    8a92:	18fb      	adds	r3, r7, r3
    8a94:	8812      	ldrh	r2, [r2, #0]
    8a96:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8a98:	2324      	movs	r3, #36	; 0x24
    8a9a:	18fb      	adds	r3, r7, r3
    8a9c:	881b      	ldrh	r3, [r3, #0]
    8a9e:	2b20      	cmp	r3, #32
    8aa0:	d004      	beq.n	8aac <create_name+0x128>
    8aa2:	2324      	movs	r3, #36	; 0x24
    8aa4:	18fb      	adds	r3, r7, r3
    8aa6:	881b      	ldrh	r3, [r3, #0]
    8aa8:	2b2e      	cmp	r3, #46	; 0x2e
    8aaa:	d106      	bne.n	8aba <create_name+0x136>
		di--;
    8aac:	697b      	ldr	r3, [r7, #20]
    8aae:	3b01      	subs	r3, #1
    8ab0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8ab2:	697b      	ldr	r3, [r7, #20]
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d1e4      	bne.n	8a82 <create_name+0xfe>
    8ab8:	e000      	b.n	8abc <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8aba:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8abc:	697b      	ldr	r3, [r7, #20]
    8abe:	2b00      	cmp	r3, #0
    8ac0:	d101      	bne.n	8ac6 <create_name+0x142>
    8ac2:	2306      	movs	r3, #6
    8ac4:	e17e      	b.n	8dc4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8ac6:	697b      	ldr	r3, [r7, #20]
    8ac8:	005b      	lsls	r3, r3, #1
    8aca:	68fa      	ldr	r2, [r7, #12]
    8acc:	18d3      	adds	r3, r2, r3
    8ace:	2200      	movs	r2, #0
    8ad0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	699b      	ldr	r3, [r3, #24]
    8ad6:	220b      	movs	r2, #11
    8ad8:	2120      	movs	r1, #32
    8ada:	0018      	movs	r0, r3
    8adc:	4b8b      	ldr	r3, [pc, #556]	; (8d0c <create_name+0x388>)
    8ade:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8ae0:	2300      	movs	r3, #0
    8ae2:	61bb      	str	r3, [r7, #24]
    8ae4:	e002      	b.n	8aec <create_name+0x168>
    8ae6:	69bb      	ldr	r3, [r7, #24]
    8ae8:	3301      	adds	r3, #1
    8aea:	61bb      	str	r3, [r7, #24]
    8aec:	69bb      	ldr	r3, [r7, #24]
    8aee:	005b      	lsls	r3, r3, #1
    8af0:	68fa      	ldr	r2, [r7, #12]
    8af2:	18d3      	adds	r3, r2, r3
    8af4:	881b      	ldrh	r3, [r3, #0]
    8af6:	2b20      	cmp	r3, #32
    8af8:	d0f5      	beq.n	8ae6 <create_name+0x162>
    8afa:	69bb      	ldr	r3, [r7, #24]
    8afc:	005b      	lsls	r3, r3, #1
    8afe:	68fa      	ldr	r2, [r7, #12]
    8b00:	18d3      	adds	r3, r2, r3
    8b02:	881b      	ldrh	r3, [r3, #0]
    8b04:	2b2e      	cmp	r3, #46	; 0x2e
    8b06:	d0ee      	beq.n	8ae6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8b08:	69bb      	ldr	r3, [r7, #24]
    8b0a:	2b00      	cmp	r3, #0
    8b0c:	d00b      	beq.n	8b26 <create_name+0x1a2>
    8b0e:	2326      	movs	r3, #38	; 0x26
    8b10:	18fb      	adds	r3, r7, r3
    8b12:	2226      	movs	r2, #38	; 0x26
    8b14:	18ba      	adds	r2, r7, r2
    8b16:	7812      	ldrb	r2, [r2, #0]
    8b18:	2103      	movs	r1, #3
    8b1a:	430a      	orrs	r2, r1
    8b1c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8b1e:	e002      	b.n	8b26 <create_name+0x1a2>
    8b20:	697b      	ldr	r3, [r7, #20]
    8b22:	3b01      	subs	r3, #1
    8b24:	617b      	str	r3, [r7, #20]
    8b26:	697b      	ldr	r3, [r7, #20]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d009      	beq.n	8b40 <create_name+0x1bc>
    8b2c:	697b      	ldr	r3, [r7, #20]
    8b2e:	4a76      	ldr	r2, [pc, #472]	; (8d08 <create_name+0x384>)
    8b30:	4694      	mov	ip, r2
    8b32:	4463      	add	r3, ip
    8b34:	005b      	lsls	r3, r3, #1
    8b36:	68fa      	ldr	r2, [r7, #12]
    8b38:	18d3      	adds	r3, r2, r3
    8b3a:	881b      	ldrh	r3, [r3, #0]
    8b3c:	2b2e      	cmp	r3, #46	; 0x2e
    8b3e:	d1ef      	bne.n	8b20 <create_name+0x19c>

	b = i = 0; ni = 8;
    8b40:	2300      	movs	r3, #0
    8b42:	623b      	str	r3, [r7, #32]
    8b44:	2327      	movs	r3, #39	; 0x27
    8b46:	18fb      	adds	r3, r7, r3
    8b48:	2200      	movs	r2, #0
    8b4a:	701a      	strb	r2, [r3, #0]
    8b4c:	2308      	movs	r3, #8
    8b4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8b50:	69bb      	ldr	r3, [r7, #24]
    8b52:	1c5a      	adds	r2, r3, #1
    8b54:	61ba      	str	r2, [r7, #24]
    8b56:	005b      	lsls	r3, r3, #1
    8b58:	68fa      	ldr	r2, [r7, #12]
    8b5a:	18d2      	adds	r2, r2, r3
    8b5c:	2324      	movs	r3, #36	; 0x24
    8b5e:	18fb      	adds	r3, r7, r3
    8b60:	8812      	ldrh	r2, [r2, #0]
    8b62:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8b64:	2324      	movs	r3, #36	; 0x24
    8b66:	18fb      	adds	r3, r7, r3
    8b68:	881b      	ldrh	r3, [r3, #0]
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d100      	bne.n	8b70 <create_name+0x1ec>
    8b6e:	e0c3      	b.n	8cf8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8b70:	2324      	movs	r3, #36	; 0x24
    8b72:	18fb      	adds	r3, r7, r3
    8b74:	881b      	ldrh	r3, [r3, #0]
    8b76:	2b20      	cmp	r3, #32
    8b78:	d008      	beq.n	8b8c <create_name+0x208>
    8b7a:	2324      	movs	r3, #36	; 0x24
    8b7c:	18fb      	adds	r3, r7, r3
    8b7e:	881b      	ldrh	r3, [r3, #0]
    8b80:	2b2e      	cmp	r3, #46	; 0x2e
    8b82:	d10c      	bne.n	8b9e <create_name+0x21a>
    8b84:	69ba      	ldr	r2, [r7, #24]
    8b86:	697b      	ldr	r3, [r7, #20]
    8b88:	429a      	cmp	r2, r3
    8b8a:	d008      	beq.n	8b9e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8b8c:	2326      	movs	r3, #38	; 0x26
    8b8e:	18fb      	adds	r3, r7, r3
    8b90:	2226      	movs	r2, #38	; 0x26
    8b92:	18ba      	adds	r2, r7, r2
    8b94:	7812      	ldrb	r2, [r2, #0]
    8b96:	2103      	movs	r1, #3
    8b98:	430a      	orrs	r2, r1
    8b9a:	701a      	strb	r2, [r3, #0]
    8b9c:	e0ab      	b.n	8cf6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8b9e:	6a3a      	ldr	r2, [r7, #32]
    8ba0:	69fb      	ldr	r3, [r7, #28]
    8ba2:	429a      	cmp	r2, r3
    8ba4:	d203      	bcs.n	8bae <create_name+0x22a>
    8ba6:	69ba      	ldr	r2, [r7, #24]
    8ba8:	697b      	ldr	r3, [r7, #20]
    8baa:	429a      	cmp	r2, r3
    8bac:	d12a      	bne.n	8c04 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8bae:	69fb      	ldr	r3, [r7, #28]
    8bb0:	2b0b      	cmp	r3, #11
    8bb2:	d108      	bne.n	8bc6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8bb4:	2326      	movs	r3, #38	; 0x26
    8bb6:	18fb      	adds	r3, r7, r3
    8bb8:	2226      	movs	r2, #38	; 0x26
    8bba:	18ba      	adds	r2, r7, r2
    8bbc:	7812      	ldrb	r2, [r2, #0]
    8bbe:	2103      	movs	r1, #3
    8bc0:	430a      	orrs	r2, r1
    8bc2:	701a      	strb	r2, [r3, #0]
    8bc4:	e0a9      	b.n	8d1a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    8bc6:	69ba      	ldr	r2, [r7, #24]
    8bc8:	697b      	ldr	r3, [r7, #20]
    8bca:	429a      	cmp	r2, r3
    8bcc:	d007      	beq.n	8bde <create_name+0x25a>
    8bce:	2326      	movs	r3, #38	; 0x26
    8bd0:	18fb      	adds	r3, r7, r3
    8bd2:	2226      	movs	r2, #38	; 0x26
    8bd4:	18ba      	adds	r2, r7, r2
    8bd6:	7812      	ldrb	r2, [r2, #0]
    8bd8:	2103      	movs	r1, #3
    8bda:	430a      	orrs	r2, r1
    8bdc:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    8bde:	69ba      	ldr	r2, [r7, #24]
    8be0:	697b      	ldr	r3, [r7, #20]
    8be2:	429a      	cmp	r2, r3
    8be4:	d900      	bls.n	8be8 <create_name+0x264>
    8be6:	e097      	b.n	8d18 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    8be8:	697b      	ldr	r3, [r7, #20]
    8bea:	61bb      	str	r3, [r7, #24]
    8bec:	2308      	movs	r3, #8
    8bee:	623b      	str	r3, [r7, #32]
    8bf0:	230b      	movs	r3, #11
    8bf2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    8bf4:	2327      	movs	r3, #39	; 0x27
    8bf6:	18fb      	adds	r3, r7, r3
    8bf8:	2227      	movs	r2, #39	; 0x27
    8bfa:	18ba      	adds	r2, r7, r2
    8bfc:	7812      	ldrb	r2, [r2, #0]
    8bfe:	0092      	lsls	r2, r2, #2
    8c00:	701a      	strb	r2, [r3, #0]
    8c02:	e078      	b.n	8cf6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8c04:	2324      	movs	r3, #36	; 0x24
    8c06:	18fb      	adds	r3, r7, r3
    8c08:	881b      	ldrh	r3, [r3, #0]
    8c0a:	2b7f      	cmp	r3, #127	; 0x7f
    8c0c:	d920      	bls.n	8c50 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    8c0e:	2324      	movs	r3, #36	; 0x24
    8c10:	18fc      	adds	r4, r7, r3
    8c12:	2324      	movs	r3, #36	; 0x24
    8c14:	18fb      	adds	r3, r7, r3
    8c16:	881b      	ldrh	r3, [r3, #0]
    8c18:	2100      	movs	r1, #0
    8c1a:	0018      	movs	r0, r3
    8c1c:	4b37      	ldr	r3, [pc, #220]	; (8cfc <create_name+0x378>)
    8c1e:	4798      	blx	r3
    8c20:	0003      	movs	r3, r0
    8c22:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    8c24:	2324      	movs	r3, #36	; 0x24
    8c26:	18fb      	adds	r3, r7, r3
    8c28:	881b      	ldrh	r3, [r3, #0]
    8c2a:	2b00      	cmp	r3, #0
    8c2c:	d008      	beq.n	8c40 <create_name+0x2bc>
    8c2e:	2324      	movs	r3, #36	; 0x24
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	881b      	ldrh	r3, [r3, #0]
    8c34:	3b80      	subs	r3, #128	; 0x80
    8c36:	4a36      	ldr	r2, [pc, #216]	; (8d10 <create_name+0x38c>)
    8c38:	5cd2      	ldrb	r2, [r2, r3]
    8c3a:	2324      	movs	r3, #36	; 0x24
    8c3c:	18fb      	adds	r3, r7, r3
    8c3e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8c40:	2326      	movs	r3, #38	; 0x26
    8c42:	18fb      	adds	r3, r7, r3
    8c44:	2226      	movs	r2, #38	; 0x26
    8c46:	18ba      	adds	r2, r7, r2
    8c48:	7812      	ldrb	r2, [r2, #0]
    8c4a:	2102      	movs	r1, #2
    8c4c:	430a      	orrs	r2, r1
    8c4e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    8c50:	2324      	movs	r3, #36	; 0x24
    8c52:	18fb      	adds	r3, r7, r3
    8c54:	881b      	ldrh	r3, [r3, #0]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d009      	beq.n	8c6e <create_name+0x2ea>
    8c5a:	2324      	movs	r3, #36	; 0x24
    8c5c:	18fb      	adds	r3, r7, r3
    8c5e:	881a      	ldrh	r2, [r3, #0]
    8c60:	4b2c      	ldr	r3, [pc, #176]	; (8d14 <create_name+0x390>)
    8c62:	0011      	movs	r1, r2
    8c64:	0018      	movs	r0, r3
    8c66:	4b27      	ldr	r3, [pc, #156]	; (8d04 <create_name+0x380>)
    8c68:	4798      	blx	r3
    8c6a:	1e03      	subs	r3, r0, #0
    8c6c:	d00c      	beq.n	8c88 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    8c6e:	2324      	movs	r3, #36	; 0x24
    8c70:	18fb      	adds	r3, r7, r3
    8c72:	225f      	movs	r2, #95	; 0x5f
    8c74:	801a      	strh	r2, [r3, #0]
    8c76:	2326      	movs	r3, #38	; 0x26
    8c78:	18fb      	adds	r3, r7, r3
    8c7a:	2226      	movs	r2, #38	; 0x26
    8c7c:	18ba      	adds	r2, r7, r2
    8c7e:	7812      	ldrb	r2, [r2, #0]
    8c80:	2103      	movs	r1, #3
    8c82:	430a      	orrs	r2, r1
    8c84:	701a      	strb	r2, [r3, #0]
    8c86:	e02b      	b.n	8ce0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    8c88:	2324      	movs	r3, #36	; 0x24
    8c8a:	18fb      	adds	r3, r7, r3
    8c8c:	881b      	ldrh	r3, [r3, #0]
    8c8e:	2b40      	cmp	r3, #64	; 0x40
    8c90:	d90d      	bls.n	8cae <create_name+0x32a>
    8c92:	2324      	movs	r3, #36	; 0x24
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	881b      	ldrh	r3, [r3, #0]
    8c98:	2b5a      	cmp	r3, #90	; 0x5a
    8c9a:	d808      	bhi.n	8cae <create_name+0x32a>
					b |= 2;
    8c9c:	2327      	movs	r3, #39	; 0x27
    8c9e:	18fb      	adds	r3, r7, r3
    8ca0:	2227      	movs	r2, #39	; 0x27
    8ca2:	18ba      	adds	r2, r7, r2
    8ca4:	7812      	ldrb	r2, [r2, #0]
    8ca6:	2102      	movs	r1, #2
    8ca8:	430a      	orrs	r2, r1
    8caa:	701a      	strb	r2, [r3, #0]
    8cac:	e018      	b.n	8ce0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8cae:	2324      	movs	r3, #36	; 0x24
    8cb0:	18fb      	adds	r3, r7, r3
    8cb2:	881b      	ldrh	r3, [r3, #0]
    8cb4:	2b60      	cmp	r3, #96	; 0x60
    8cb6:	d913      	bls.n	8ce0 <create_name+0x35c>
    8cb8:	2324      	movs	r3, #36	; 0x24
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	881b      	ldrh	r3, [r3, #0]
    8cbe:	2b7a      	cmp	r3, #122	; 0x7a
    8cc0:	d80e      	bhi.n	8ce0 <create_name+0x35c>
						b |= 1; w -= 0x20;
    8cc2:	2327      	movs	r3, #39	; 0x27
    8cc4:	18fb      	adds	r3, r7, r3
    8cc6:	2227      	movs	r2, #39	; 0x27
    8cc8:	18ba      	adds	r2, r7, r2
    8cca:	7812      	ldrb	r2, [r2, #0]
    8ccc:	2101      	movs	r1, #1
    8cce:	430a      	orrs	r2, r1
    8cd0:	701a      	strb	r2, [r3, #0]
    8cd2:	2324      	movs	r3, #36	; 0x24
    8cd4:	18fb      	adds	r3, r7, r3
    8cd6:	2224      	movs	r2, #36	; 0x24
    8cd8:	18ba      	adds	r2, r7, r2
    8cda:	8812      	ldrh	r2, [r2, #0]
    8cdc:	3a20      	subs	r2, #32
    8cde:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    8ce0:	687b      	ldr	r3, [r7, #4]
    8ce2:	699a      	ldr	r2, [r3, #24]
    8ce4:	6a3b      	ldr	r3, [r7, #32]
    8ce6:	1c59      	adds	r1, r3, #1
    8ce8:	6239      	str	r1, [r7, #32]
    8cea:	18d3      	adds	r3, r2, r3
    8cec:	2224      	movs	r2, #36	; 0x24
    8cee:	18ba      	adds	r2, r7, r2
    8cf0:	8812      	ldrh	r2, [r2, #0]
    8cf2:	b2d2      	uxtb	r2, r2
    8cf4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    8cf6:	e72b      	b.n	8b50 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    8cf8:	46c0      	nop			; (mov r8, r8)
    8cfa:	e00e      	b.n	8d1a <create_name+0x396>
    8cfc:	0000a801 	.word	0x0000a801
    8d00:	0000c398 	.word	0x0000c398
    8d04:	000071a7 	.word	0x000071a7
    8d08:	7fffffff 	.word	0x7fffffff
    8d0c:	0000712d 	.word	0x0000712d
    8d10:	0000c3e0 	.word	0x0000c3e0
    8d14:	0000c3a4 	.word	0x0000c3a4
			if (si > di) break;			/* No extension */
    8d18:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    8d1a:	687b      	ldr	r3, [r7, #4]
    8d1c:	699b      	ldr	r3, [r3, #24]
    8d1e:	781b      	ldrb	r3, [r3, #0]
    8d20:	2be5      	cmp	r3, #229	; 0xe5
    8d22:	d103      	bne.n	8d2c <create_name+0x3a8>
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	699b      	ldr	r3, [r3, #24]
    8d28:	2205      	movs	r2, #5
    8d2a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    8d2c:	69fb      	ldr	r3, [r7, #28]
    8d2e:	2b08      	cmp	r3, #8
    8d30:	d106      	bne.n	8d40 <create_name+0x3bc>
    8d32:	2327      	movs	r3, #39	; 0x27
    8d34:	18fb      	adds	r3, r7, r3
    8d36:	2227      	movs	r2, #39	; 0x27
    8d38:	18ba      	adds	r2, r7, r2
    8d3a:	7812      	ldrb	r2, [r2, #0]
    8d3c:	0092      	lsls	r2, r2, #2
    8d3e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    8d40:	2327      	movs	r3, #39	; 0x27
    8d42:	18fb      	adds	r3, r7, r3
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	220c      	movs	r2, #12
    8d48:	4013      	ands	r3, r2
    8d4a:	2b0c      	cmp	r3, #12
    8d4c:	d006      	beq.n	8d5c <create_name+0x3d8>
    8d4e:	2327      	movs	r3, #39	; 0x27
    8d50:	18fb      	adds	r3, r7, r3
    8d52:	781b      	ldrb	r3, [r3, #0]
    8d54:	2203      	movs	r2, #3
    8d56:	4013      	ands	r3, r2
    8d58:	2b03      	cmp	r3, #3
    8d5a:	d107      	bne.n	8d6c <create_name+0x3e8>
		cf |= NS_LFN;
    8d5c:	2326      	movs	r3, #38	; 0x26
    8d5e:	18fb      	adds	r3, r7, r3
    8d60:	2226      	movs	r2, #38	; 0x26
    8d62:	18ba      	adds	r2, r7, r2
    8d64:	7812      	ldrb	r2, [r2, #0]
    8d66:	2102      	movs	r1, #2
    8d68:	430a      	orrs	r2, r1
    8d6a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    8d6c:	2326      	movs	r3, #38	; 0x26
    8d6e:	18fb      	adds	r3, r7, r3
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	2202      	movs	r2, #2
    8d74:	4013      	ands	r3, r2
    8d76:	d11d      	bne.n	8db4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8d78:	2327      	movs	r3, #39	; 0x27
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	781b      	ldrb	r3, [r3, #0]
    8d7e:	2203      	movs	r2, #3
    8d80:	4013      	ands	r3, r2
    8d82:	2b01      	cmp	r3, #1
    8d84:	d107      	bne.n	8d96 <create_name+0x412>
    8d86:	2326      	movs	r3, #38	; 0x26
    8d88:	18fb      	adds	r3, r7, r3
    8d8a:	2226      	movs	r2, #38	; 0x26
    8d8c:	18ba      	adds	r2, r7, r2
    8d8e:	7812      	ldrb	r2, [r2, #0]
    8d90:	2110      	movs	r1, #16
    8d92:	430a      	orrs	r2, r1
    8d94:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    8d96:	2327      	movs	r3, #39	; 0x27
    8d98:	18fb      	adds	r3, r7, r3
    8d9a:	781b      	ldrb	r3, [r3, #0]
    8d9c:	220c      	movs	r2, #12
    8d9e:	4013      	ands	r3, r2
    8da0:	2b04      	cmp	r3, #4
    8da2:	d107      	bne.n	8db4 <create_name+0x430>
    8da4:	2326      	movs	r3, #38	; 0x26
    8da6:	18fb      	adds	r3, r7, r3
    8da8:	2226      	movs	r2, #38	; 0x26
    8daa:	18ba      	adds	r2, r7, r2
    8dac:	7812      	ldrb	r2, [r2, #0]
    8dae:	2108      	movs	r1, #8
    8db0:	430a      	orrs	r2, r1
    8db2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	699b      	ldr	r3, [r3, #24]
    8db8:	330b      	adds	r3, #11
    8dba:	2226      	movs	r2, #38	; 0x26
    8dbc:	18ba      	adds	r2, r7, r2
    8dbe:	7812      	ldrb	r2, [r2, #0]
    8dc0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    8dc2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    8dc4:	0018      	movs	r0, r3
    8dc6:	46bd      	mov	sp, r7
    8dc8:	b00b      	add	sp, #44	; 0x2c
    8dca:	bd90      	pop	{r4, r7, pc}

00008dcc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    8dcc:	b590      	push	{r4, r7, lr}
    8dce:	b08b      	sub	sp, #44	; 0x2c
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
    8dd4:	6039      	str	r1, [r7, #0]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    8dd6:	683b      	ldr	r3, [r7, #0]
    8dd8:	3309      	adds	r3, #9
    8dda:	623b      	str	r3, [r7, #32]
	if (dj->sect) {
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	691b      	ldr	r3, [r3, #16]
    8de0:	2b00      	cmp	r3, #0
    8de2:	d100      	bne.n	8de6 <get_fileinfo+0x1a>
    8de4:	e0b8      	b.n	8f58 <get_fileinfo+0x18c>
		dir = dj->dir;
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	695b      	ldr	r3, [r3, #20]
    8dea:	617b      	str	r3, [r7, #20]
		nt = dir[DIR_NTres];		/* NT flag */
    8dec:	2313      	movs	r3, #19
    8dee:	18fb      	adds	r3, r7, r3
    8df0:	697a      	ldr	r2, [r7, #20]
    8df2:	7b12      	ldrb	r2, [r2, #12]
    8df4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    8df6:	2300      	movs	r3, #0
    8df8:	627b      	str	r3, [r7, #36]	; 0x24
    8dfa:	e035      	b.n	8e68 <get_fileinfo+0x9c>
			c = dir[i];
    8dfc:	697a      	ldr	r2, [r7, #20]
    8dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e00:	18d2      	adds	r2, r2, r3
    8e02:	231f      	movs	r3, #31
    8e04:	18fb      	adds	r3, r7, r3
    8e06:	7812      	ldrb	r2, [r2, #0]
    8e08:	701a      	strb	r2, [r3, #0]
			if (c == ' ') break;
    8e0a:	231f      	movs	r3, #31
    8e0c:	18fb      	adds	r3, r7, r3
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	2b20      	cmp	r3, #32
    8e12:	d02d      	beq.n	8e70 <get_fileinfo+0xa4>
			if (c == NDDE) c = (TCHAR)DDE;
    8e14:	231f      	movs	r3, #31
    8e16:	18fb      	adds	r3, r7, r3
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	2b05      	cmp	r3, #5
    8e1c:	d103      	bne.n	8e26 <get_fileinfo+0x5a>
    8e1e:	231f      	movs	r3, #31
    8e20:	18fb      	adds	r3, r7, r3
    8e22:	22e5      	movs	r2, #229	; 0xe5
    8e24:	701a      	strb	r2, [r3, #0]
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    8e26:	2313      	movs	r3, #19
    8e28:	18fb      	adds	r3, r7, r3
    8e2a:	781b      	ldrb	r3, [r3, #0]
    8e2c:	2208      	movs	r2, #8
    8e2e:	4013      	ands	r3, r2
    8e30:	d010      	beq.n	8e54 <get_fileinfo+0x88>
    8e32:	231f      	movs	r3, #31
    8e34:	18fb      	adds	r3, r7, r3
    8e36:	781b      	ldrb	r3, [r3, #0]
    8e38:	2b40      	cmp	r3, #64	; 0x40
    8e3a:	d90b      	bls.n	8e54 <get_fileinfo+0x88>
    8e3c:	231f      	movs	r3, #31
    8e3e:	18fb      	adds	r3, r7, r3
    8e40:	781b      	ldrb	r3, [r3, #0]
    8e42:	2b5a      	cmp	r3, #90	; 0x5a
    8e44:	d806      	bhi.n	8e54 <get_fileinfo+0x88>
    8e46:	231f      	movs	r3, #31
    8e48:	18fb      	adds	r3, r7, r3
    8e4a:	221f      	movs	r2, #31
    8e4c:	18ba      	adds	r2, r7, r2
    8e4e:	7812      	ldrb	r2, [r2, #0]
    8e50:	3220      	adds	r2, #32
    8e52:	701a      	strb	r2, [r3, #0]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    8e54:	6a3b      	ldr	r3, [r7, #32]
    8e56:	1c5a      	adds	r2, r3, #1
    8e58:	623a      	str	r2, [r7, #32]
    8e5a:	221f      	movs	r2, #31
    8e5c:	18ba      	adds	r2, r7, r2
    8e5e:	7812      	ldrb	r2, [r2, #0]
    8e60:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    8e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e64:	3301      	adds	r3, #1
    8e66:	627b      	str	r3, [r7, #36]	; 0x24
    8e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e6a:	2b07      	cmp	r3, #7
    8e6c:	d9c6      	bls.n	8dfc <get_fileinfo+0x30>
    8e6e:	e000      	b.n	8e72 <get_fileinfo+0xa6>
			if (c == ' ') break;
    8e70:	46c0      	nop			; (mov r8, r8)
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    8e72:	697b      	ldr	r3, [r7, #20]
    8e74:	3308      	adds	r3, #8
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	2b20      	cmp	r3, #32
    8e7a:	d039      	beq.n	8ef0 <get_fileinfo+0x124>
			*p++ = '.';
    8e7c:	6a3b      	ldr	r3, [r7, #32]
    8e7e:	1c5a      	adds	r2, r3, #1
    8e80:	623a      	str	r2, [r7, #32]
    8e82:	222e      	movs	r2, #46	; 0x2e
    8e84:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    8e86:	2308      	movs	r3, #8
    8e88:	627b      	str	r3, [r7, #36]	; 0x24
    8e8a:	e02c      	b.n	8ee6 <get_fileinfo+0x11a>
				c = dir[i];
    8e8c:	697a      	ldr	r2, [r7, #20]
    8e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e90:	18d2      	adds	r2, r2, r3
    8e92:	231f      	movs	r3, #31
    8e94:	18fb      	adds	r3, r7, r3
    8e96:	7812      	ldrb	r2, [r2, #0]
    8e98:	701a      	strb	r2, [r3, #0]
				if (c == ' ') break;
    8e9a:	231f      	movs	r3, #31
    8e9c:	18fb      	adds	r3, r7, r3
    8e9e:	781b      	ldrb	r3, [r3, #0]
    8ea0:	2b20      	cmp	r3, #32
    8ea2:	d024      	beq.n	8eee <get_fileinfo+0x122>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    8ea4:	2313      	movs	r3, #19
    8ea6:	18fb      	adds	r3, r7, r3
    8ea8:	781b      	ldrb	r3, [r3, #0]
    8eaa:	2210      	movs	r2, #16
    8eac:	4013      	ands	r3, r2
    8eae:	d010      	beq.n	8ed2 <get_fileinfo+0x106>
    8eb0:	231f      	movs	r3, #31
    8eb2:	18fb      	adds	r3, r7, r3
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	2b40      	cmp	r3, #64	; 0x40
    8eb8:	d90b      	bls.n	8ed2 <get_fileinfo+0x106>
    8eba:	231f      	movs	r3, #31
    8ebc:	18fb      	adds	r3, r7, r3
    8ebe:	781b      	ldrb	r3, [r3, #0]
    8ec0:	2b5a      	cmp	r3, #90	; 0x5a
    8ec2:	d806      	bhi.n	8ed2 <get_fileinfo+0x106>
    8ec4:	231f      	movs	r3, #31
    8ec6:	18fb      	adds	r3, r7, r3
    8ec8:	221f      	movs	r2, #31
    8eca:	18ba      	adds	r2, r7, r2
    8ecc:	7812      	ldrb	r2, [r2, #0]
    8ece:	3220      	adds	r2, #32
    8ed0:	701a      	strb	r2, [r3, #0]
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    8ed2:	6a3b      	ldr	r3, [r7, #32]
    8ed4:	1c5a      	adds	r2, r3, #1
    8ed6:	623a      	str	r2, [r7, #32]
    8ed8:	221f      	movs	r2, #31
    8eda:	18ba      	adds	r2, r7, r2
    8edc:	7812      	ldrb	r2, [r2, #0]
    8ede:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    8ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ee2:	3301      	adds	r3, #1
    8ee4:	627b      	str	r3, [r7, #36]	; 0x24
    8ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ee8:	2b0a      	cmp	r3, #10
    8eea:	d9cf      	bls.n	8e8c <get_fileinfo+0xc0>
    8eec:	e000      	b.n	8ef0 <get_fileinfo+0x124>
				if (c == ' ') break;
    8eee:	46c0      	nop			; (mov r8, r8)
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    8ef0:	697b      	ldr	r3, [r7, #20]
    8ef2:	7ada      	ldrb	r2, [r3, #11]
    8ef4:	683b      	ldr	r3, [r7, #0]
    8ef6:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    8ef8:	697b      	ldr	r3, [r7, #20]
    8efa:	331f      	adds	r3, #31
    8efc:	781b      	ldrb	r3, [r3, #0]
    8efe:	061a      	lsls	r2, r3, #24
    8f00:	697b      	ldr	r3, [r7, #20]
    8f02:	331e      	adds	r3, #30
    8f04:	781b      	ldrb	r3, [r3, #0]
    8f06:	041b      	lsls	r3, r3, #16
    8f08:	4313      	orrs	r3, r2
    8f0a:	697a      	ldr	r2, [r7, #20]
    8f0c:	321d      	adds	r2, #29
    8f0e:	7812      	ldrb	r2, [r2, #0]
    8f10:	0212      	lsls	r2, r2, #8
    8f12:	4313      	orrs	r3, r2
    8f14:	697a      	ldr	r2, [r7, #20]
    8f16:	321c      	adds	r2, #28
    8f18:	7812      	ldrb	r2, [r2, #0]
    8f1a:	431a      	orrs	r2, r3
    8f1c:	683b      	ldr	r3, [r7, #0]
    8f1e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    8f20:	697b      	ldr	r3, [r7, #20]
    8f22:	3319      	adds	r3, #25
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	021b      	lsls	r3, r3, #8
    8f28:	b21a      	sxth	r2, r3
    8f2a:	697b      	ldr	r3, [r7, #20]
    8f2c:	3318      	adds	r3, #24
    8f2e:	781b      	ldrb	r3, [r3, #0]
    8f30:	b21b      	sxth	r3, r3
    8f32:	4313      	orrs	r3, r2
    8f34:	b21b      	sxth	r3, r3
    8f36:	b29a      	uxth	r2, r3
    8f38:	683b      	ldr	r3, [r7, #0]
    8f3a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    8f3c:	697b      	ldr	r3, [r7, #20]
    8f3e:	3317      	adds	r3, #23
    8f40:	781b      	ldrb	r3, [r3, #0]
    8f42:	021b      	lsls	r3, r3, #8
    8f44:	b21a      	sxth	r2, r3
    8f46:	697b      	ldr	r3, [r7, #20]
    8f48:	3316      	adds	r3, #22
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	b21b      	sxth	r3, r3
    8f4e:	4313      	orrs	r3, r2
    8f50:	b21b      	sxth	r3, r3
    8f52:	b29a      	uxth	r2, r3
    8f54:	683b      	ldr	r3, [r7, #0]
    8f56:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    8f58:	6a3b      	ldr	r3, [r7, #32]
    8f5a:	2200      	movs	r2, #0
    8f5c:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
    8f5e:	683b      	ldr	r3, [r7, #0]
    8f60:	699b      	ldr	r3, [r3, #24]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d04c      	beq.n	9000 <get_fileinfo+0x234>
    8f66:	683b      	ldr	r3, [r7, #0]
    8f68:	69db      	ldr	r3, [r3, #28]
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d048      	beq.n	9000 <get_fileinfo+0x234>
		TCHAR *tp = fno->lfname;
    8f6e:	683b      	ldr	r3, [r7, #0]
    8f70:	699b      	ldr	r3, [r3, #24]
    8f72:	60fb      	str	r3, [r7, #12]
		WCHAR w, *lfn;

		i = 0;
    8f74:	2300      	movs	r3, #0
    8f76:	627b      	str	r3, [r7, #36]	; 0x24
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	691b      	ldr	r3, [r3, #16]
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d03a      	beq.n	8ff6 <get_fileinfo+0x22a>
    8f80:	687b      	ldr	r3, [r7, #4]
    8f82:	8c1b      	ldrh	r3, [r3, #32]
    8f84:	4a20      	ldr	r2, [pc, #128]	; (9008 <get_fileinfo+0x23c>)
    8f86:	4293      	cmp	r3, r2
    8f88:	d035      	beq.n	8ff6 <get_fileinfo+0x22a>
			lfn = dj->lfn;
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	69db      	ldr	r3, [r3, #28]
    8f8e:	61bb      	str	r3, [r7, #24]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    8f90:	e025      	b.n	8fde <get_fileinfo+0x212>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    8f92:	230a      	movs	r3, #10
    8f94:	18fc      	adds	r4, r7, r3
    8f96:	230a      	movs	r3, #10
    8f98:	18fb      	adds	r3, r7, r3
    8f9a:	881b      	ldrh	r3, [r3, #0]
    8f9c:	2100      	movs	r1, #0
    8f9e:	0018      	movs	r0, r3
    8fa0:	4b1a      	ldr	r3, [pc, #104]	; (900c <get_fileinfo+0x240>)
    8fa2:	4798      	blx	r3
    8fa4:	0003      	movs	r3, r0
    8fa6:	8023      	strh	r3, [r4, #0]
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    8fa8:	230a      	movs	r3, #10
    8faa:	18fb      	adds	r3, r7, r3
    8fac:	881b      	ldrh	r3, [r3, #0]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d102      	bne.n	8fb8 <get_fileinfo+0x1ec>
    8fb2:	2300      	movs	r3, #0
    8fb4:	627b      	str	r3, [r7, #36]	; 0x24
    8fb6:	e01e      	b.n	8ff6 <get_fileinfo+0x22a>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    8fb8:	683b      	ldr	r3, [r7, #0]
    8fba:	69db      	ldr	r3, [r3, #28]
    8fbc:	1e5a      	subs	r2, r3, #1
    8fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8fc0:	429a      	cmp	r2, r3
    8fc2:	d802      	bhi.n	8fca <get_fileinfo+0x1fe>
    8fc4:	2300      	movs	r3, #0
    8fc6:	627b      	str	r3, [r7, #36]	; 0x24
    8fc8:	e015      	b.n	8ff6 <get_fileinfo+0x22a>
				tp[i++] = (TCHAR)w;
    8fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8fcc:	1c5a      	adds	r2, r3, #1
    8fce:	627a      	str	r2, [r7, #36]	; 0x24
    8fd0:	68fa      	ldr	r2, [r7, #12]
    8fd2:	18d3      	adds	r3, r2, r3
    8fd4:	220a      	movs	r2, #10
    8fd6:	18ba      	adds	r2, r7, r2
    8fd8:	8812      	ldrh	r2, [r2, #0]
    8fda:	b2d2      	uxtb	r2, r2
    8fdc:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    8fde:	69bb      	ldr	r3, [r7, #24]
    8fe0:	1c9a      	adds	r2, r3, #2
    8fe2:	61ba      	str	r2, [r7, #24]
    8fe4:	220a      	movs	r2, #10
    8fe6:	18ba      	adds	r2, r7, r2
    8fe8:	881b      	ldrh	r3, [r3, #0]
    8fea:	8013      	strh	r3, [r2, #0]
    8fec:	230a      	movs	r3, #10
    8fee:	18fb      	adds	r3, r7, r3
    8ff0:	881b      	ldrh	r3, [r3, #0]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d1cd      	bne.n	8f92 <get_fileinfo+0x1c6>
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    8ff6:	68fa      	ldr	r2, [r7, #12]
    8ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ffa:	18d3      	adds	r3, r2, r3
    8ffc:	2200      	movs	r2, #0
    8ffe:	701a      	strb	r2, [r3, #0]
	}
#endif
}
    9000:	46c0      	nop			; (mov r8, r8)
    9002:	46bd      	mov	sp, r7
    9004:	b00b      	add	sp, #44	; 0x2c
    9006:	bd90      	pop	{r4, r7, pc}
    9008:	0000ffff 	.word	0x0000ffff
    900c:	0000a801 	.word	0x0000a801

00009010 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    9010:	b590      	push	{r4, r7, lr}
    9012:	b085      	sub	sp, #20
    9014:	af00      	add	r7, sp, #0
    9016:	6078      	str	r0, [r7, #4]
    9018:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    901a:	683b      	ldr	r3, [r7, #0]
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	2b2f      	cmp	r3, #47	; 0x2f
    9020:	d003      	beq.n	902a <follow_path+0x1a>
    9022:	683b      	ldr	r3, [r7, #0]
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	2b5c      	cmp	r3, #92	; 0x5c
    9028:	d102      	bne.n	9030 <follow_path+0x20>
		path++;
    902a:	683b      	ldr	r3, [r7, #0]
    902c:	3301      	adds	r3, #1
    902e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    9030:	687b      	ldr	r3, [r7, #4]
    9032:	2200      	movs	r2, #0
    9034:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    9036:	683b      	ldr	r3, [r7, #0]
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	2b1f      	cmp	r3, #31
    903c:	d80c      	bhi.n	9058 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    903e:	230f      	movs	r3, #15
    9040:	18fc      	adds	r4, r7, r3
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	2100      	movs	r1, #0
    9046:	0018      	movs	r0, r3
    9048:	4b3c      	ldr	r3, [pc, #240]	; (913c <follow_path+0x12c>)
    904a:	4798      	blx	r3
    904c:	0003      	movs	r3, r0
    904e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	2200      	movs	r2, #0
    9054:	615a      	str	r2, [r3, #20]
    9056:	e06a      	b.n	912e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9058:	230f      	movs	r3, #15
    905a:	18fc      	adds	r4, r7, r3
    905c:	003a      	movs	r2, r7
    905e:	687b      	ldr	r3, [r7, #4]
    9060:	0011      	movs	r1, r2
    9062:	0018      	movs	r0, r3
    9064:	4b36      	ldr	r3, [pc, #216]	; (9140 <follow_path+0x130>)
    9066:	4798      	blx	r3
    9068:	0003      	movs	r3, r0
    906a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    906c:	230f      	movs	r3, #15
    906e:	18fb      	adds	r3, r7, r3
    9070:	781b      	ldrb	r3, [r3, #0]
    9072:	2b00      	cmp	r3, #0
    9074:	d154      	bne.n	9120 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    9076:	230f      	movs	r3, #15
    9078:	18fc      	adds	r4, r7, r3
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	0018      	movs	r0, r3
    907e:	4b31      	ldr	r3, [pc, #196]	; (9144 <follow_path+0x134>)
    9080:	4798      	blx	r3
    9082:	0003      	movs	r3, r0
    9084:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    9086:	687b      	ldr	r3, [r7, #4]
    9088:	699a      	ldr	r2, [r3, #24]
    908a:	230e      	movs	r3, #14
    908c:	18fb      	adds	r3, r7, r3
    908e:	7ad2      	ldrb	r2, [r2, #11]
    9090:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    9092:	230f      	movs	r3, #15
    9094:	18fb      	adds	r3, r7, r3
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	2b00      	cmp	r3, #0
    909a:	d00f      	beq.n	90bc <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    909c:	230f      	movs	r3, #15
    909e:	18fb      	adds	r3, r7, r3
    90a0:	781b      	ldrb	r3, [r3, #0]
    90a2:	2b04      	cmp	r3, #4
    90a4:	d13e      	bne.n	9124 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    90a6:	230e      	movs	r3, #14
    90a8:	18fb      	adds	r3, r7, r3
    90aa:	781b      	ldrb	r3, [r3, #0]
    90ac:	2204      	movs	r2, #4
    90ae:	4013      	ands	r3, r2
    90b0:	d13a      	bne.n	9128 <follow_path+0x118>
    90b2:	230f      	movs	r3, #15
    90b4:	18fb      	adds	r3, r7, r3
    90b6:	2205      	movs	r2, #5
    90b8:	701a      	strb	r2, [r3, #0]
				}
				break;
    90ba:	e035      	b.n	9128 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    90bc:	230e      	movs	r3, #14
    90be:	18fb      	adds	r3, r7, r3
    90c0:	781b      	ldrb	r3, [r3, #0]
    90c2:	2204      	movs	r2, #4
    90c4:	4013      	ands	r3, r2
    90c6:	d131      	bne.n	912c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	695b      	ldr	r3, [r3, #20]
    90cc:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    90ce:	68bb      	ldr	r3, [r7, #8]
    90d0:	330b      	adds	r3, #11
    90d2:	781b      	ldrb	r3, [r3, #0]
    90d4:	001a      	movs	r2, r3
    90d6:	2310      	movs	r3, #16
    90d8:	4013      	ands	r3, r2
    90da:	d104      	bne.n	90e6 <follow_path+0xd6>
				res = FR_NO_PATH; break;
    90dc:	230f      	movs	r3, #15
    90de:	18fb      	adds	r3, r7, r3
    90e0:	2205      	movs	r2, #5
    90e2:	701a      	strb	r2, [r3, #0]
    90e4:	e023      	b.n	912e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    90e6:	68bb      	ldr	r3, [r7, #8]
    90e8:	3315      	adds	r3, #21
    90ea:	781b      	ldrb	r3, [r3, #0]
    90ec:	021b      	lsls	r3, r3, #8
    90ee:	b21a      	sxth	r2, r3
    90f0:	68bb      	ldr	r3, [r7, #8]
    90f2:	3314      	adds	r3, #20
    90f4:	781b      	ldrb	r3, [r3, #0]
    90f6:	b21b      	sxth	r3, r3
    90f8:	4313      	orrs	r3, r2
    90fa:	b21b      	sxth	r3, r3
    90fc:	b29b      	uxth	r3, r3
    90fe:	041b      	lsls	r3, r3, #16
    9100:	68ba      	ldr	r2, [r7, #8]
    9102:	321b      	adds	r2, #27
    9104:	7812      	ldrb	r2, [r2, #0]
    9106:	0212      	lsls	r2, r2, #8
    9108:	b211      	sxth	r1, r2
    910a:	68ba      	ldr	r2, [r7, #8]
    910c:	321a      	adds	r2, #26
    910e:	7812      	ldrb	r2, [r2, #0]
    9110:	b212      	sxth	r2, r2
    9112:	430a      	orrs	r2, r1
    9114:	b212      	sxth	r2, r2
    9116:	b292      	uxth	r2, r2
    9118:	431a      	orrs	r2, r3
    911a:	687b      	ldr	r3, [r7, #4]
    911c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    911e:	e79b      	b.n	9058 <follow_path+0x48>
			if (res != FR_OK) break;
    9120:	46c0      	nop			; (mov r8, r8)
    9122:	e004      	b.n	912e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9124:	46c0      	nop			; (mov r8, r8)
    9126:	e002      	b.n	912e <follow_path+0x11e>
				break;
    9128:	46c0      	nop			; (mov r8, r8)
    912a:	e000      	b.n	912e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    912c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    912e:	230f      	movs	r3, #15
    9130:	18fb      	adds	r3, r7, r3
    9132:	781b      	ldrb	r3, [r3, #0]
}
    9134:	0018      	movs	r0, r3
    9136:	46bd      	mov	sp, r7
    9138:	b005      	add	sp, #20
    913a:	bd90      	pop	{r4, r7, pc}
    913c:	00007a1d 	.word	0x00007a1d
    9140:	00008985 	.word	0x00008985
    9144:	00008185 	.word	0x00008185

00009148 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9148:	b590      	push	{r4, r7, lr}
    914a:	b083      	sub	sp, #12
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
    9150:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    9152:	687b      	ldr	r3, [r7, #4]
    9154:	7858      	ldrb	r0, [r3, #1]
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	3330      	adds	r3, #48	; 0x30
    915a:	0019      	movs	r1, r3
    915c:	683a      	ldr	r2, [r7, #0]
    915e:	2301      	movs	r3, #1
    9160:	4c2a      	ldr	r4, [pc, #168]	; (920c <check_fs+0xc4>)
    9162:	47a0      	blx	r4
    9164:	1e03      	subs	r3, r0, #0
    9166:	d001      	beq.n	916c <check_fs+0x24>
		return 3;
    9168:	2303      	movs	r3, #3
    916a:	e04b      	b.n	9204 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	4a28      	ldr	r2, [pc, #160]	; (9210 <check_fs+0xc8>)
    9170:	4694      	mov	ip, r2
    9172:	4463      	add	r3, ip
    9174:	3301      	adds	r3, #1
    9176:	781b      	ldrb	r3, [r3, #0]
    9178:	021b      	lsls	r3, r3, #8
    917a:	b21a      	sxth	r2, r3
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	4924      	ldr	r1, [pc, #144]	; (9210 <check_fs+0xc8>)
    9180:	5c5b      	ldrb	r3, [r3, r1]
    9182:	b21b      	sxth	r3, r3
    9184:	4313      	orrs	r3, r2
    9186:	b21b      	sxth	r3, r3
    9188:	4a22      	ldr	r2, [pc, #136]	; (9214 <check_fs+0xcc>)
    918a:	4293      	cmp	r3, r2
    918c:	d001      	beq.n	9192 <check_fs+0x4a>
		return 2;
    918e:	2302      	movs	r3, #2
    9190:	e038      	b.n	9204 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    9192:	687b      	ldr	r3, [r7, #4]
    9194:	3366      	adds	r3, #102	; 0x66
    9196:	3303      	adds	r3, #3
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	061a      	lsls	r2, r3, #24
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	3366      	adds	r3, #102	; 0x66
    91a0:	3302      	adds	r3, #2
    91a2:	781b      	ldrb	r3, [r3, #0]
    91a4:	041b      	lsls	r3, r3, #16
    91a6:	4313      	orrs	r3, r2
    91a8:	687a      	ldr	r2, [r7, #4]
    91aa:	3266      	adds	r2, #102	; 0x66
    91ac:	3201      	adds	r2, #1
    91ae:	7812      	ldrb	r2, [r2, #0]
    91b0:	0212      	lsls	r2, r2, #8
    91b2:	4313      	orrs	r3, r2
    91b4:	687a      	ldr	r2, [r7, #4]
    91b6:	2166      	movs	r1, #102	; 0x66
    91b8:	5c52      	ldrb	r2, [r2, r1]
    91ba:	4313      	orrs	r3, r2
    91bc:	021b      	lsls	r3, r3, #8
    91be:	0a1b      	lsrs	r3, r3, #8
    91c0:	4a15      	ldr	r2, [pc, #84]	; (9218 <check_fs+0xd0>)
    91c2:	4293      	cmp	r3, r2
    91c4:	d101      	bne.n	91ca <check_fs+0x82>
		return 0;
    91c6:	2300      	movs	r3, #0
    91c8:	e01c      	b.n	9204 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    91ca:	687b      	ldr	r3, [r7, #4]
    91cc:	3382      	adds	r3, #130	; 0x82
    91ce:	3303      	adds	r3, #3
    91d0:	781b      	ldrb	r3, [r3, #0]
    91d2:	061a      	lsls	r2, r3, #24
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	3382      	adds	r3, #130	; 0x82
    91d8:	3302      	adds	r3, #2
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	041b      	lsls	r3, r3, #16
    91de:	4313      	orrs	r3, r2
    91e0:	687a      	ldr	r2, [r7, #4]
    91e2:	3282      	adds	r2, #130	; 0x82
    91e4:	3201      	adds	r2, #1
    91e6:	7812      	ldrb	r2, [r2, #0]
    91e8:	0212      	lsls	r2, r2, #8
    91ea:	4313      	orrs	r3, r2
    91ec:	687a      	ldr	r2, [r7, #4]
    91ee:	2182      	movs	r1, #130	; 0x82
    91f0:	5c52      	ldrb	r2, [r2, r1]
    91f2:	4313      	orrs	r3, r2
    91f4:	021b      	lsls	r3, r3, #8
    91f6:	0a1b      	lsrs	r3, r3, #8
    91f8:	4a07      	ldr	r2, [pc, #28]	; (9218 <check_fs+0xd0>)
    91fa:	4293      	cmp	r3, r2
    91fc:	d101      	bne.n	9202 <check_fs+0xba>
		return 0;
    91fe:	2300      	movs	r3, #0
    9200:	e000      	b.n	9204 <check_fs+0xbc>

	return 1;
    9202:	2301      	movs	r3, #1
}
    9204:	0018      	movs	r0, r3
    9206:	46bd      	mov	sp, r7
    9208:	b003      	add	sp, #12
    920a:	bd90      	pop	{r4, r7, pc}
    920c:	00006ded 	.word	0x00006ded
    9210:	0000022e 	.word	0x0000022e
    9214:	ffffaa55 	.word	0xffffaa55
    9218:	00544146 	.word	0x00544146

0000921c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    921c:	b590      	push	{r4, r7, lr}
    921e:	b093      	sub	sp, #76	; 0x4c
    9220:	af00      	add	r7, sp, #0
    9222:	60f8      	str	r0, [r7, #12]
    9224:	60b9      	str	r1, [r7, #8]
    9226:	1dfb      	adds	r3, r7, #7
    9228:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    922a:	68fb      	ldr	r3, [r7, #12]
    922c:	681b      	ldr	r3, [r3, #0]
    922e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    9230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9232:	781b      	ldrb	r3, [r3, #0]
    9234:	3b30      	subs	r3, #48	; 0x30
    9236:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    923a:	2b09      	cmp	r3, #9
    923c:	d80b      	bhi.n	9256 <chk_mounted+0x3a>
    923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9240:	3301      	adds	r3, #1
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	2b3a      	cmp	r3, #58	; 0x3a
    9246:	d106      	bne.n	9256 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    924a:	3302      	adds	r3, #2
    924c:	62fb      	str	r3, [r7, #44]	; 0x2c
    924e:	68fb      	ldr	r3, [r7, #12]
    9250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9252:	601a      	str	r2, [r3, #0]
    9254:	e001      	b.n	925a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    9256:	2300      	movs	r3, #0
    9258:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    925a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    925c:	2b00      	cmp	r3, #0
    925e:	d001      	beq.n	9264 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9260:	230b      	movs	r3, #11
    9262:	e2af      	b.n	97c4 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    9264:	4bc5      	ldr	r3, [pc, #788]	; (957c <chk_mounted+0x360>)
    9266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9268:	0092      	lsls	r2, r2, #2
    926a:	58d3      	ldr	r3, [r2, r3]
    926c:	62bb      	str	r3, [r7, #40]	; 0x28
    926e:	68bb      	ldr	r3, [r7, #8]
    9270:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9272:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    9274:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9276:	2b00      	cmp	r3, #0
    9278:	d101      	bne.n	927e <chk_mounted+0x62>
    927a:	230c      	movs	r3, #12
    927c:	e2a2      	b.n	97c4 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	2b00      	cmp	r3, #0
    9284:	d01c      	beq.n	92c0 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    9286:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9288:	785b      	ldrb	r3, [r3, #1]
    928a:	2227      	movs	r2, #39	; 0x27
    928c:	18bc      	adds	r4, r7, r2
    928e:	0018      	movs	r0, r3
    9290:	4bbb      	ldr	r3, [pc, #748]	; (9580 <chk_mounted+0x364>)
    9292:	4798      	blx	r3
    9294:	0003      	movs	r3, r0
    9296:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    9298:	2327      	movs	r3, #39	; 0x27
    929a:	18fb      	adds	r3, r7, r3
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	2201      	movs	r2, #1
    92a0:	4013      	ands	r3, r2
    92a2:	d10d      	bne.n	92c0 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    92a4:	1dfb      	adds	r3, r7, #7
    92a6:	781b      	ldrb	r3, [r3, #0]
    92a8:	2b00      	cmp	r3, #0
    92aa:	d007      	beq.n	92bc <chk_mounted+0xa0>
    92ac:	2327      	movs	r3, #39	; 0x27
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	2204      	movs	r2, #4
    92b4:	4013      	ands	r3, r2
    92b6:	d001      	beq.n	92bc <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    92b8:	230a      	movs	r3, #10
    92ba:	e283      	b.n	97c4 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    92bc:	2300      	movs	r3, #0
    92be:	e281      	b.n	97c4 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    92c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92c2:	2200      	movs	r2, #0
    92c4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    92c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    92c8:	b2da      	uxtb	r2, r3
    92ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92cc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    92ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92d0:	785b      	ldrb	r3, [r3, #1]
    92d2:	2227      	movs	r2, #39	; 0x27
    92d4:	18bc      	adds	r4, r7, r2
    92d6:	0018      	movs	r0, r3
    92d8:	4baa      	ldr	r3, [pc, #680]	; (9584 <chk_mounted+0x368>)
    92da:	4798      	blx	r3
    92dc:	0003      	movs	r3, r0
    92de:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    92e0:	2327      	movs	r3, #39	; 0x27
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	781b      	ldrb	r3, [r3, #0]
    92e6:	2201      	movs	r2, #1
    92e8:	4013      	ands	r3, r2
    92ea:	d001      	beq.n	92f0 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    92ec:	2303      	movs	r3, #3
    92ee:	e269      	b.n	97c4 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    92f0:	1dfb      	adds	r3, r7, #7
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	2b00      	cmp	r3, #0
    92f6:	d007      	beq.n	9308 <chk_mounted+0xec>
    92f8:	2327      	movs	r3, #39	; 0x27
    92fa:	18fb      	adds	r3, r7, r3
    92fc:	781b      	ldrb	r3, [r3, #0]
    92fe:	2204      	movs	r2, #4
    9300:	4013      	ands	r3, r2
    9302:	d001      	beq.n	9308 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    9304:	230a      	movs	r3, #10
    9306:	e25d      	b.n	97c4 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    9308:	2300      	movs	r3, #0
    930a:	63fb      	str	r3, [r7, #60]	; 0x3c
    930c:	2347      	movs	r3, #71	; 0x47
    930e:	18fc      	adds	r4, r7, r3
    9310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9312:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9314:	0011      	movs	r1, r2
    9316:	0018      	movs	r0, r3
    9318:	4b9b      	ldr	r3, [pc, #620]	; (9588 <chk_mounted+0x36c>)
    931a:	4798      	blx	r3
    931c:	0003      	movs	r3, r0
    931e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    9320:	2347      	movs	r3, #71	; 0x47
    9322:	18fb      	adds	r3, r7, r3
    9324:	781b      	ldrb	r3, [r3, #0]
    9326:	2b01      	cmp	r3, #1
    9328:	d13b      	bne.n	93a2 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    932a:	2346      	movs	r3, #70	; 0x46
    932c:	18fb      	adds	r3, r7, r3
    932e:	2200      	movs	r2, #0
    9330:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    9332:	2346      	movs	r3, #70	; 0x46
    9334:	18fb      	adds	r3, r7, r3
    9336:	781b      	ldrb	r3, [r3, #0]
    9338:	2b00      	cmp	r3, #0
    933a:	d006      	beq.n	934a <chk_mounted+0x12e>
    933c:	2346      	movs	r3, #70	; 0x46
    933e:	18fb      	adds	r3, r7, r3
    9340:	781a      	ldrb	r2, [r3, #0]
    9342:	2346      	movs	r3, #70	; 0x46
    9344:	18fb      	adds	r3, r7, r3
    9346:	3a01      	subs	r2, #1
    9348:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    934a:	2346      	movs	r3, #70	; 0x46
    934c:	18fb      	adds	r3, r7, r3
    934e:	781b      	ldrb	r3, [r3, #0]
    9350:	011b      	lsls	r3, r3, #4
    9352:	33bf      	adds	r3, #191	; 0xbf
    9354:	33ff      	adds	r3, #255	; 0xff
    9356:	3330      	adds	r3, #48	; 0x30
    9358:	6aba      	ldr	r2, [r7, #40]	; 0x28
    935a:	18d3      	adds	r3, r2, r3
    935c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    935e:	6a3b      	ldr	r3, [r7, #32]
    9360:	3304      	adds	r3, #4
    9362:	781b      	ldrb	r3, [r3, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	d01c      	beq.n	93a2 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    9368:	6a3b      	ldr	r3, [r7, #32]
    936a:	330b      	adds	r3, #11
    936c:	781b      	ldrb	r3, [r3, #0]
    936e:	061a      	lsls	r2, r3, #24
    9370:	6a3b      	ldr	r3, [r7, #32]
    9372:	330a      	adds	r3, #10
    9374:	781b      	ldrb	r3, [r3, #0]
    9376:	041b      	lsls	r3, r3, #16
    9378:	4313      	orrs	r3, r2
    937a:	6a3a      	ldr	r2, [r7, #32]
    937c:	3209      	adds	r2, #9
    937e:	7812      	ldrb	r2, [r2, #0]
    9380:	0212      	lsls	r2, r2, #8
    9382:	4313      	orrs	r3, r2
    9384:	6a3a      	ldr	r2, [r7, #32]
    9386:	3208      	adds	r2, #8
    9388:	7812      	ldrb	r2, [r2, #0]
    938a:	4313      	orrs	r3, r2
    938c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    938e:	2347      	movs	r3, #71	; 0x47
    9390:	18fc      	adds	r4, r7, r3
    9392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9394:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9396:	0011      	movs	r1, r2
    9398:	0018      	movs	r0, r3
    939a:	4b7b      	ldr	r3, [pc, #492]	; (9588 <chk_mounted+0x36c>)
    939c:	4798      	blx	r3
    939e:	0003      	movs	r3, r0
    93a0:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    93a2:	2347      	movs	r3, #71	; 0x47
    93a4:	18fb      	adds	r3, r7, r3
    93a6:	781b      	ldrb	r3, [r3, #0]
    93a8:	2b03      	cmp	r3, #3
    93aa:	d101      	bne.n	93b0 <chk_mounted+0x194>
    93ac:	2301      	movs	r3, #1
    93ae:	e209      	b.n	97c4 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    93b0:	2347      	movs	r3, #71	; 0x47
    93b2:	18fb      	adds	r3, r7, r3
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	2b00      	cmp	r3, #0
    93b8:	d001      	beq.n	93be <chk_mounted+0x1a2>
    93ba:	230d      	movs	r3, #13
    93bc:	e202      	b.n	97c4 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    93be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93c0:	223c      	movs	r2, #60	; 0x3c
    93c2:	5c9b      	ldrb	r3, [r3, r2]
    93c4:	021b      	lsls	r3, r3, #8
    93c6:	b21a      	sxth	r2, r3
    93c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93ca:	213b      	movs	r1, #59	; 0x3b
    93cc:	5c5b      	ldrb	r3, [r3, r1]
    93ce:	b21b      	sxth	r3, r3
    93d0:	4313      	orrs	r3, r2
    93d2:	b21a      	sxth	r2, r3
    93d4:	2380      	movs	r3, #128	; 0x80
    93d6:	009b      	lsls	r3, r3, #2
    93d8:	429a      	cmp	r2, r3
    93da:	d001      	beq.n	93e0 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    93dc:	230d      	movs	r3, #13
    93de:	e1f1      	b.n	97c4 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    93e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93e2:	2247      	movs	r2, #71	; 0x47
    93e4:	5c9b      	ldrb	r3, [r3, r2]
    93e6:	021b      	lsls	r3, r3, #8
    93e8:	b21a      	sxth	r2, r3
    93ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93ec:	2146      	movs	r1, #70	; 0x46
    93ee:	5c5b      	ldrb	r3, [r3, r1]
    93f0:	b21b      	sxth	r3, r3
    93f2:	4313      	orrs	r3, r2
    93f4:	b21b      	sxth	r3, r3
    93f6:	b29b      	uxth	r3, r3
    93f8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    93fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    93fc:	2b00      	cmp	r3, #0
    93fe:	d112      	bne.n	9426 <chk_mounted+0x20a>
    9400:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9402:	2257      	movs	r2, #87	; 0x57
    9404:	5c9b      	ldrb	r3, [r3, r2]
    9406:	061a      	lsls	r2, r3, #24
    9408:	6abb      	ldr	r3, [r7, #40]	; 0x28
    940a:	2156      	movs	r1, #86	; 0x56
    940c:	5c5b      	ldrb	r3, [r3, r1]
    940e:	041b      	lsls	r3, r3, #16
    9410:	4313      	orrs	r3, r2
    9412:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9414:	2155      	movs	r1, #85	; 0x55
    9416:	5c52      	ldrb	r2, [r2, r1]
    9418:	0212      	lsls	r2, r2, #8
    941a:	4313      	orrs	r3, r2
    941c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    941e:	2154      	movs	r1, #84	; 0x54
    9420:	5c52      	ldrb	r2, [r2, r1]
    9422:	4313      	orrs	r3, r2
    9424:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    9426:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9428:	6bba      	ldr	r2, [r7, #56]	; 0x38
    942a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    942c:	231f      	movs	r3, #31
    942e:	18fb      	adds	r3, r7, r3
    9430:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9432:	2140      	movs	r1, #64	; 0x40
    9434:	5c52      	ldrb	r2, [r2, r1]
    9436:	701a      	strb	r2, [r3, #0]
    9438:	6abb      	ldr	r3, [r7, #40]	; 0x28
    943a:	221f      	movs	r2, #31
    943c:	18ba      	adds	r2, r7, r2
    943e:	7812      	ldrb	r2, [r2, #0]
    9440:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    9442:	231f      	movs	r3, #31
    9444:	18fb      	adds	r3, r7, r3
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	2b01      	cmp	r3, #1
    944a:	d006      	beq.n	945a <chk_mounted+0x23e>
    944c:	231f      	movs	r3, #31
    944e:	18fb      	adds	r3, r7, r3
    9450:	781b      	ldrb	r3, [r3, #0]
    9452:	2b02      	cmp	r3, #2
    9454:	d001      	beq.n	945a <chk_mounted+0x23e>
    9456:	230d      	movs	r3, #13
    9458:	e1b4      	b.n	97c4 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    945a:	231f      	movs	r3, #31
    945c:	18fb      	adds	r3, r7, r3
    945e:	781a      	ldrb	r2, [r3, #0]
    9460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9462:	4353      	muls	r3, r2
    9464:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    9466:	231f      	movs	r3, #31
    9468:	18fb      	adds	r3, r7, r3
    946a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    946c:	213d      	movs	r1, #61	; 0x3d
    946e:	5c52      	ldrb	r2, [r2, r1]
    9470:	701a      	strb	r2, [r3, #0]
    9472:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9474:	221f      	movs	r2, #31
    9476:	18ba      	adds	r2, r7, r2
    9478:	7812      	ldrb	r2, [r2, #0]
    947a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    947c:	231f      	movs	r3, #31
    947e:	18fb      	adds	r3, r7, r3
    9480:	781b      	ldrb	r3, [r3, #0]
    9482:	2b00      	cmp	r3, #0
    9484:	d008      	beq.n	9498 <chk_mounted+0x27c>
    9486:	231f      	movs	r3, #31
    9488:	18fb      	adds	r3, r7, r3
    948a:	781b      	ldrb	r3, [r3, #0]
    948c:	221f      	movs	r2, #31
    948e:	18ba      	adds	r2, r7, r2
    9490:	7812      	ldrb	r2, [r2, #0]
    9492:	3a01      	subs	r2, #1
    9494:	4013      	ands	r3, r2
    9496:	d001      	beq.n	949c <chk_mounted+0x280>
    9498:	230d      	movs	r3, #13
    949a:	e193      	b.n	97c4 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    949e:	2242      	movs	r2, #66	; 0x42
    94a0:	5c9b      	ldrb	r3, [r3, r2]
    94a2:	021b      	lsls	r3, r3, #8
    94a4:	b21a      	sxth	r2, r3
    94a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94a8:	2141      	movs	r1, #65	; 0x41
    94aa:	5c5b      	ldrb	r3, [r3, r1]
    94ac:	b21b      	sxth	r3, r3
    94ae:	4313      	orrs	r3, r2
    94b0:	b21b      	sxth	r3, r3
    94b2:	b29a      	uxth	r2, r3
    94b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    94b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ba:	891b      	ldrh	r3, [r3, #8]
    94bc:	220f      	movs	r2, #15
    94be:	4013      	ands	r3, r2
    94c0:	b29b      	uxth	r3, r3
    94c2:	2b00      	cmp	r3, #0
    94c4:	d001      	beq.n	94ca <chk_mounted+0x2ae>
    94c6:	230d      	movs	r3, #13
    94c8:	e17c      	b.n	97c4 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    94ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94cc:	2244      	movs	r2, #68	; 0x44
    94ce:	5c9b      	ldrb	r3, [r3, r2]
    94d0:	021b      	lsls	r3, r3, #8
    94d2:	b21a      	sxth	r2, r3
    94d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94d6:	2143      	movs	r1, #67	; 0x43
    94d8:	5c5b      	ldrb	r3, [r3, r1]
    94da:	b21b      	sxth	r3, r3
    94dc:	4313      	orrs	r3, r2
    94de:	b21b      	sxth	r3, r3
    94e0:	b29b      	uxth	r3, r3
    94e2:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    94e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94e6:	2b00      	cmp	r3, #0
    94e8:	d112      	bne.n	9510 <chk_mounted+0x2f4>
    94ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ec:	2253      	movs	r2, #83	; 0x53
    94ee:	5c9b      	ldrb	r3, [r3, r2]
    94f0:	061a      	lsls	r2, r3, #24
    94f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94f4:	2152      	movs	r1, #82	; 0x52
    94f6:	5c5b      	ldrb	r3, [r3, r1]
    94f8:	041b      	lsls	r3, r3, #16
    94fa:	4313      	orrs	r3, r2
    94fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94fe:	2151      	movs	r1, #81	; 0x51
    9500:	5c52      	ldrb	r2, [r2, r1]
    9502:	0212      	lsls	r2, r2, #8
    9504:	4313      	orrs	r3, r2
    9506:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9508:	2150      	movs	r1, #80	; 0x50
    950a:	5c52      	ldrb	r2, [r2, r1]
    950c:	4313      	orrs	r3, r2
    950e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    9510:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9512:	223f      	movs	r2, #63	; 0x3f
    9514:	5c9b      	ldrb	r3, [r3, r2]
    9516:	021b      	lsls	r3, r3, #8
    9518:	b21a      	sxth	r2, r3
    951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    951c:	213e      	movs	r1, #62	; 0x3e
    951e:	5c5b      	ldrb	r3, [r3, r1]
    9520:	b21b      	sxth	r3, r3
    9522:	4313      	orrs	r3, r2
    9524:	b21a      	sxth	r2, r3
    9526:	231c      	movs	r3, #28
    9528:	18fb      	adds	r3, r7, r3
    952a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    952c:	231c      	movs	r3, #28
    952e:	18fb      	adds	r3, r7, r3
    9530:	881b      	ldrh	r3, [r3, #0]
    9532:	2b00      	cmp	r3, #0
    9534:	d101      	bne.n	953a <chk_mounted+0x31e>
    9536:	230d      	movs	r3, #13
    9538:	e144      	b.n	97c4 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    953a:	231c      	movs	r3, #28
    953c:	18fb      	adds	r3, r7, r3
    953e:	881a      	ldrh	r2, [r3, #0]
    9540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9542:	18d3      	adds	r3, r2, r3
    9544:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9546:	8912      	ldrh	r2, [r2, #8]
    9548:	0912      	lsrs	r2, r2, #4
    954a:	b292      	uxth	r2, r2
    954c:	189b      	adds	r3, r3, r2
    954e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9552:	69bb      	ldr	r3, [r7, #24]
    9554:	429a      	cmp	r2, r3
    9556:	d201      	bcs.n	955c <chk_mounted+0x340>
    9558:	230d      	movs	r3, #13
    955a:	e133      	b.n	97c4 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    955c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    955e:	69bb      	ldr	r3, [r7, #24]
    9560:	1ad2      	subs	r2, r2, r3
    9562:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9564:	789b      	ldrb	r3, [r3, #2]
    9566:	0019      	movs	r1, r3
    9568:	4b08      	ldr	r3, [pc, #32]	; (958c <chk_mounted+0x370>)
    956a:	0010      	movs	r0, r2
    956c:	4798      	blx	r3
    956e:	0003      	movs	r3, r0
    9570:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    9572:	697b      	ldr	r3, [r7, #20]
    9574:	2b00      	cmp	r3, #0
    9576:	d10b      	bne.n	9590 <chk_mounted+0x374>
    9578:	230d      	movs	r3, #13
    957a:	e123      	b.n	97c4 <chk_mounted+0x5a8>
    957c:	2000017c 	.word	0x2000017c
    9580:	00006db5 	.word	0x00006db5
    9584:	00006d31 	.word	0x00006d31
    9588:	00009149 	.word	0x00009149
    958c:	0000afc5 	.word	0x0000afc5
	fmt = FS_FAT12;
    9590:	2347      	movs	r3, #71	; 0x47
    9592:	18fb      	adds	r3, r7, r3
    9594:	2201      	movs	r2, #1
    9596:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    9598:	697b      	ldr	r3, [r7, #20]
    959a:	4a8c      	ldr	r2, [pc, #560]	; (97cc <chk_mounted+0x5b0>)
    959c:	4293      	cmp	r3, r2
    959e:	d903      	bls.n	95a8 <chk_mounted+0x38c>
    95a0:	2347      	movs	r3, #71	; 0x47
    95a2:	18fb      	adds	r3, r7, r3
    95a4:	2202      	movs	r2, #2
    95a6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    95a8:	697b      	ldr	r3, [r7, #20]
    95aa:	4a89      	ldr	r2, [pc, #548]	; (97d0 <chk_mounted+0x5b4>)
    95ac:	4293      	cmp	r3, r2
    95ae:	d903      	bls.n	95b8 <chk_mounted+0x39c>
    95b0:	2347      	movs	r3, #71	; 0x47
    95b2:	18fb      	adds	r3, r7, r3
    95b4:	2203      	movs	r2, #3
    95b6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    95b8:	697b      	ldr	r3, [r7, #20]
    95ba:	1c9a      	adds	r2, r3, #2
    95bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95be:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    95c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    95c2:	69bb      	ldr	r3, [r7, #24]
    95c4:	18d2      	adds	r2, r2, r3
    95c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95c8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    95ca:	231c      	movs	r3, #28
    95cc:	18fb      	adds	r3, r7, r3
    95ce:	881a      	ldrh	r2, [r3, #0]
    95d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    95d2:	18d2      	adds	r2, r2, r3
    95d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95d6:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    95d8:	2347      	movs	r3, #71	; 0x47
    95da:	18fb      	adds	r3, r7, r3
    95dc:	781b      	ldrb	r3, [r3, #0]
    95de:	2b03      	cmp	r3, #3
    95e0:	d11e      	bne.n	9620 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    95e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95e4:	891b      	ldrh	r3, [r3, #8]
    95e6:	2b00      	cmp	r3, #0
    95e8:	d001      	beq.n	95ee <chk_mounted+0x3d2>
    95ea:	230d      	movs	r3, #13
    95ec:	e0ea      	b.n	97c4 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    95ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f0:	225f      	movs	r2, #95	; 0x5f
    95f2:	5c9b      	ldrb	r3, [r3, r2]
    95f4:	061a      	lsls	r2, r3, #24
    95f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f8:	215e      	movs	r1, #94	; 0x5e
    95fa:	5c5b      	ldrb	r3, [r3, r1]
    95fc:	041b      	lsls	r3, r3, #16
    95fe:	4313      	orrs	r3, r2
    9600:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9602:	215d      	movs	r1, #93	; 0x5d
    9604:	5c52      	ldrb	r2, [r2, r1]
    9606:	0212      	lsls	r2, r2, #8
    9608:	4313      	orrs	r3, r2
    960a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    960c:	215c      	movs	r1, #92	; 0x5c
    960e:	5c52      	ldrb	r2, [r2, r1]
    9610:	431a      	orrs	r2, r3
    9612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9614:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    9616:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9618:	699b      	ldr	r3, [r3, #24]
    961a:	009b      	lsls	r3, r3, #2
    961c:	633b      	str	r3, [r7, #48]	; 0x30
    961e:	e020      	b.n	9662 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9620:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9622:	891b      	ldrh	r3, [r3, #8]
    9624:	2b00      	cmp	r3, #0
    9626:	d101      	bne.n	962c <chk_mounted+0x410>
    9628:	230d      	movs	r3, #13
    962a:	e0cb      	b.n	97c4 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    962e:	6a1a      	ldr	r2, [r3, #32]
    9630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9632:	18d2      	adds	r2, r2, r3
    9634:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9636:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9638:	2347      	movs	r3, #71	; 0x47
    963a:	18fb      	adds	r3, r7, r3
    963c:	781b      	ldrb	r3, [r3, #0]
    963e:	2b02      	cmp	r3, #2
    9640:	d103      	bne.n	964a <chk_mounted+0x42e>
    9642:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9644:	699b      	ldr	r3, [r3, #24]
    9646:	005b      	lsls	r3, r3, #1
    9648:	e00a      	b.n	9660 <chk_mounted+0x444>
    964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    964c:	699a      	ldr	r2, [r3, #24]
    964e:	0013      	movs	r3, r2
    9650:	005b      	lsls	r3, r3, #1
    9652:	189b      	adds	r3, r3, r2
    9654:	085a      	lsrs	r2, r3, #1
    9656:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9658:	699b      	ldr	r3, [r3, #24]
    965a:	2101      	movs	r1, #1
    965c:	400b      	ands	r3, r1
    965e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9660:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    9662:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9664:	69da      	ldr	r2, [r3, #28]
    9666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9668:	495a      	ldr	r1, [pc, #360]	; (97d4 <chk_mounted+0x5b8>)
    966a:	468c      	mov	ip, r1
    966c:	4463      	add	r3, ip
    966e:	0a5b      	lsrs	r3, r3, #9
    9670:	429a      	cmp	r2, r3
    9672:	d201      	bcs.n	9678 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    9674:	230d      	movs	r3, #13
    9676:	e0a5      	b.n	97c4 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9678:	6abb      	ldr	r3, [r7, #40]	; 0x28
    967a:	2201      	movs	r2, #1
    967c:	4252      	negs	r2, r2
    967e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9680:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9682:	2200      	movs	r2, #0
    9684:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    9686:	2347      	movs	r3, #71	; 0x47
    9688:	18fb      	adds	r3, r7, r3
    968a:	781b      	ldrb	r3, [r3, #0]
    968c:	2b03      	cmp	r3, #3
    968e:	d000      	beq.n	9692 <chk_mounted+0x476>
    9690:	e082      	b.n	9798 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    9692:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9694:	2200      	movs	r2, #0
    9696:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    9698:	6abb      	ldr	r3, [r7, #40]	; 0x28
    969a:	2261      	movs	r2, #97	; 0x61
    969c:	5c9b      	ldrb	r3, [r3, r2]
    969e:	021b      	lsls	r3, r3, #8
    96a0:	b21a      	sxth	r2, r3
    96a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96a4:	2160      	movs	r1, #96	; 0x60
    96a6:	5c5b      	ldrb	r3, [r3, r1]
    96a8:	b21b      	sxth	r3, r3
    96aa:	4313      	orrs	r3, r2
    96ac:	b21b      	sxth	r3, r3
    96ae:	b29b      	uxth	r3, r3
    96b0:	001a      	movs	r2, r3
    96b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96b4:	18d2      	adds	r2, r2, r3
    96b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    96ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96bc:	7858      	ldrb	r0, [r3, #1]
    96be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96c0:	3330      	adds	r3, #48	; 0x30
    96c2:	0019      	movs	r1, r3
    96c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96c6:	695a      	ldr	r2, [r3, #20]
    96c8:	2301      	movs	r3, #1
    96ca:	4c43      	ldr	r4, [pc, #268]	; (97d8 <chk_mounted+0x5bc>)
    96cc:	47a0      	blx	r4
    96ce:	1e03      	subs	r3, r0, #0
    96d0:	d162      	bne.n	9798 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    96d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96d4:	4a41      	ldr	r2, [pc, #260]	; (97dc <chk_mounted+0x5c0>)
    96d6:	5c9b      	ldrb	r3, [r3, r2]
    96d8:	021b      	lsls	r3, r3, #8
    96da:	b21a      	sxth	r2, r3
    96dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96de:	4940      	ldr	r1, [pc, #256]	; (97e0 <chk_mounted+0x5c4>)
    96e0:	5c5b      	ldrb	r3, [r3, r1]
    96e2:	b21b      	sxth	r3, r3
    96e4:	4313      	orrs	r3, r2
    96e6:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    96e8:	4a3e      	ldr	r2, [pc, #248]	; (97e4 <chk_mounted+0x5c8>)
    96ea:	4293      	cmp	r3, r2
    96ec:	d154      	bne.n	9798 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    96ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f0:	2233      	movs	r2, #51	; 0x33
    96f2:	5c9b      	ldrb	r3, [r3, r2]
    96f4:	061a      	lsls	r2, r3, #24
    96f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f8:	2132      	movs	r1, #50	; 0x32
    96fa:	5c5b      	ldrb	r3, [r3, r1]
    96fc:	041b      	lsls	r3, r3, #16
    96fe:	4313      	orrs	r3, r2
    9700:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9702:	2131      	movs	r1, #49	; 0x31
    9704:	5c52      	ldrb	r2, [r2, r1]
    9706:	0212      	lsls	r2, r2, #8
    9708:	4313      	orrs	r3, r2
    970a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    970c:	2130      	movs	r1, #48	; 0x30
    970e:	5c52      	ldrb	r2, [r2, r1]
    9710:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9712:	4a35      	ldr	r2, [pc, #212]	; (97e8 <chk_mounted+0x5cc>)
    9714:	4293      	cmp	r3, r2
    9716:	d13f      	bne.n	9798 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9718:	6abb      	ldr	r3, [r7, #40]	; 0x28
    971a:	4a34      	ldr	r2, [pc, #208]	; (97ec <chk_mounted+0x5d0>)
    971c:	5c9b      	ldrb	r3, [r3, r2]
    971e:	061a      	lsls	r2, r3, #24
    9720:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9722:	4933      	ldr	r1, [pc, #204]	; (97f0 <chk_mounted+0x5d4>)
    9724:	5c5b      	ldrb	r3, [r3, r1]
    9726:	041b      	lsls	r3, r3, #16
    9728:	4313      	orrs	r3, r2
    972a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    972c:	4931      	ldr	r1, [pc, #196]	; (97f4 <chk_mounted+0x5d8>)
    972e:	5c52      	ldrb	r2, [r2, r1]
    9730:	0212      	lsls	r2, r2, #8
    9732:	4313      	orrs	r3, r2
    9734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9736:	2285      	movs	r2, #133	; 0x85
    9738:	0092      	lsls	r2, r2, #2
    973a:	5c8a      	ldrb	r2, [r1, r2]
    973c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    973e:	4a2e      	ldr	r2, [pc, #184]	; (97f8 <chk_mounted+0x5dc>)
    9740:	4293      	cmp	r3, r2
    9742:	d129      	bne.n	9798 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9744:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9746:	4a2d      	ldr	r2, [pc, #180]	; (97fc <chk_mounted+0x5e0>)
    9748:	5c9b      	ldrb	r3, [r3, r2]
    974a:	061a      	lsls	r2, r3, #24
    974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    974e:	492c      	ldr	r1, [pc, #176]	; (9800 <chk_mounted+0x5e4>)
    9750:	5c5b      	ldrb	r3, [r3, r1]
    9752:	041b      	lsls	r3, r3, #16
    9754:	4313      	orrs	r3, r2
    9756:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9758:	492a      	ldr	r1, [pc, #168]	; (9804 <chk_mounted+0x5e8>)
    975a:	5c52      	ldrb	r2, [r2, r1]
    975c:	0212      	lsls	r2, r2, #8
    975e:	4313      	orrs	r3, r2
    9760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9762:	2287      	movs	r2, #135	; 0x87
    9764:	0092      	lsls	r2, r2, #2
    9766:	5c8a      	ldrb	r2, [r1, r2]
    9768:	431a      	orrs	r2, r3
    976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    976c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9770:	4a25      	ldr	r2, [pc, #148]	; (9808 <chk_mounted+0x5ec>)
    9772:	5c9b      	ldrb	r3, [r3, r2]
    9774:	061a      	lsls	r2, r3, #24
    9776:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9778:	4924      	ldr	r1, [pc, #144]	; (980c <chk_mounted+0x5f0>)
    977a:	5c5b      	ldrb	r3, [r3, r1]
    977c:	041b      	lsls	r3, r3, #16
    977e:	4313      	orrs	r3, r2
    9780:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9782:	4923      	ldr	r1, [pc, #140]	; (9810 <chk_mounted+0x5f4>)
    9784:	5c52      	ldrb	r2, [r2, r1]
    9786:	0212      	lsls	r2, r2, #8
    9788:	4313      	orrs	r3, r2
    978a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    978c:	2286      	movs	r2, #134	; 0x86
    978e:	0092      	lsls	r2, r2, #2
    9790:	5c8a      	ldrb	r2, [r1, r2]
    9792:	431a      	orrs	r2, r3
    9794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9796:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9798:	6abb      	ldr	r3, [r7, #40]	; 0x28
    979a:	2247      	movs	r2, #71	; 0x47
    979c:	18ba      	adds	r2, r7, r2
    979e:	7812      	ldrb	r2, [r2, #0]
    97a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    97a2:	4b1c      	ldr	r3, [pc, #112]	; (9814 <chk_mounted+0x5f8>)
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	3301      	adds	r3, #1
    97a8:	b29a      	uxth	r2, r3
    97aa:	4b1a      	ldr	r3, [pc, #104]	; (9814 <chk_mounted+0x5f8>)
    97ac:	801a      	strh	r2, [r3, #0]
    97ae:	4b19      	ldr	r3, [pc, #100]	; (9814 <chk_mounted+0x5f8>)
    97b0:	881a      	ldrh	r2, [r3, #0]
    97b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    97b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b8:	2200      	movs	r2, #0
    97ba:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    97bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97be:	2200      	movs	r2, #0
    97c0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    97c2:	2300      	movs	r3, #0
}
    97c4:	0018      	movs	r0, r3
    97c6:	46bd      	mov	sp, r7
    97c8:	b013      	add	sp, #76	; 0x4c
    97ca:	bd90      	pop	{r4, r7, pc}
    97cc:	00000ff5 	.word	0x00000ff5
    97d0:	0000fff5 	.word	0x0000fff5
    97d4:	000001ff 	.word	0x000001ff
    97d8:	00006ded 	.word	0x00006ded
    97dc:	0000022f 	.word	0x0000022f
    97e0:	0000022e 	.word	0x0000022e
    97e4:	ffffaa55 	.word	0xffffaa55
    97e8:	41615252 	.word	0x41615252
    97ec:	00000217 	.word	0x00000217
    97f0:	00000216 	.word	0x00000216
    97f4:	00000215 	.word	0x00000215
    97f8:	61417272 	.word	0x61417272
    97fc:	0000021f 	.word	0x0000021f
    9800:	0000021e 	.word	0x0000021e
    9804:	0000021d 	.word	0x0000021d
    9808:	0000021b 	.word	0x0000021b
    980c:	0000021a 	.word	0x0000021a
    9810:	00000219 	.word	0x00000219
    9814:	20000180 	.word	0x20000180

00009818 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9818:	b580      	push	{r7, lr}
    981a:	b082      	sub	sp, #8
    981c:	af00      	add	r7, sp, #0
    981e:	6078      	str	r0, [r7, #4]
    9820:	000a      	movs	r2, r1
    9822:	1cbb      	adds	r3, r7, #2
    9824:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	2b00      	cmp	r3, #0
    982a:	d009      	beq.n	9840 <validate+0x28>
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	781b      	ldrb	r3, [r3, #0]
    9830:	2b00      	cmp	r3, #0
    9832:	d005      	beq.n	9840 <validate+0x28>
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	88db      	ldrh	r3, [r3, #6]
    9838:	1cba      	adds	r2, r7, #2
    983a:	8812      	ldrh	r2, [r2, #0]
    983c:	429a      	cmp	r2, r3
    983e:	d001      	beq.n	9844 <validate+0x2c>
		return FR_INVALID_OBJECT;
    9840:	2309      	movs	r3, #9
    9842:	e00c      	b.n	985e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	785b      	ldrb	r3, [r3, #1]
    9848:	0018      	movs	r0, r3
    984a:	4b07      	ldr	r3, [pc, #28]	; (9868 <validate+0x50>)
    984c:	4798      	blx	r3
    984e:	0003      	movs	r3, r0
    9850:	001a      	movs	r2, r3
    9852:	2301      	movs	r3, #1
    9854:	4013      	ands	r3, r2
    9856:	d001      	beq.n	985c <validate+0x44>
		return FR_NOT_READY;
    9858:	2303      	movs	r3, #3
    985a:	e000      	b.n	985e <validate+0x46>

	return FR_OK;
    985c:	2300      	movs	r3, #0
}
    985e:	0018      	movs	r0, r3
    9860:	46bd      	mov	sp, r7
    9862:	b002      	add	sp, #8
    9864:	bd80      	pop	{r7, pc}
    9866:	46c0      	nop			; (mov r8, r8)
    9868:	00006db5 	.word	0x00006db5

0000986c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    986c:	b580      	push	{r7, lr}
    986e:	b084      	sub	sp, #16
    9870:	af00      	add	r7, sp, #0
    9872:	0002      	movs	r2, r0
    9874:	6039      	str	r1, [r7, #0]
    9876:	1dfb      	adds	r3, r7, #7
    9878:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    987a:	1dfb      	adds	r3, r7, #7
    987c:	781b      	ldrb	r3, [r3, #0]
    987e:	2b00      	cmp	r3, #0
    9880:	d001      	beq.n	9886 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9882:	230b      	movs	r3, #11
    9884:	e018      	b.n	98b8 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9886:	1dfb      	adds	r3, r7, #7
    9888:	781a      	ldrb	r2, [r3, #0]
    988a:	4b0d      	ldr	r3, [pc, #52]	; (98c0 <f_mount+0x54>)
    988c:	0092      	lsls	r2, r2, #2
    988e:	58d3      	ldr	r3, [r2, r3]
    9890:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9892:	68fb      	ldr	r3, [r7, #12]
    9894:	2b00      	cmp	r3, #0
    9896:	d002      	beq.n	989e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9898:	68fb      	ldr	r3, [r7, #12]
    989a:	2200      	movs	r2, #0
    989c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    989e:	683b      	ldr	r3, [r7, #0]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d002      	beq.n	98aa <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    98a4:	683b      	ldr	r3, [r7, #0]
    98a6:	2200      	movs	r2, #0
    98a8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    98aa:	1dfb      	adds	r3, r7, #7
    98ac:	781a      	ldrb	r2, [r3, #0]
    98ae:	4b04      	ldr	r3, [pc, #16]	; (98c0 <f_mount+0x54>)
    98b0:	0092      	lsls	r2, r2, #2
    98b2:	6839      	ldr	r1, [r7, #0]
    98b4:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    98b6:	2300      	movs	r3, #0
}
    98b8:	0018      	movs	r0, r3
    98ba:	46bd      	mov	sp, r7
    98bc:	b004      	add	sp, #16
    98be:	bd80      	pop	{r7, pc}
    98c0:	2000017c 	.word	0x2000017c

000098c4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    98c4:	b590      	push	{r4, r7, lr}
    98c6:	4ce5      	ldr	r4, [pc, #916]	; (9c5c <f_open+0x398>)
    98c8:	44a5      	add	sp, r4
    98ca:	af00      	add	r7, sp, #0
    98cc:	60f8      	str	r0, [r7, #12]
    98ce:	60b9      	str	r1, [r7, #8]
    98d0:	4be3      	ldr	r3, [pc, #908]	; (9c60 <f_open+0x39c>)
    98d2:	2194      	movs	r1, #148	; 0x94
    98d4:	0089      	lsls	r1, r1, #2
    98d6:	468c      	mov	ip, r1
    98d8:	44bc      	add	ip, r7
    98da:	4463      	add	r3, ip
    98dc:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    98de:	68fb      	ldr	r3, [r7, #12]
    98e0:	2200      	movs	r2, #0
    98e2:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    98e4:	4bde      	ldr	r3, [pc, #888]	; (9c60 <f_open+0x39c>)
    98e6:	2294      	movs	r2, #148	; 0x94
    98e8:	0092      	lsls	r2, r2, #2
    98ea:	4694      	mov	ip, r2
    98ec:	44bc      	add	ip, r7
    98ee:	4463      	add	r3, ip
    98f0:	4adb      	ldr	r2, [pc, #876]	; (9c60 <f_open+0x39c>)
    98f2:	2194      	movs	r1, #148	; 0x94
    98f4:	0089      	lsls	r1, r1, #2
    98f6:	468c      	mov	ip, r1
    98f8:	44bc      	add	ip, r7
    98fa:	4462      	add	r2, ip
    98fc:	7812      	ldrb	r2, [r2, #0]
    98fe:	211f      	movs	r1, #31
    9900:	400a      	ands	r2, r1
    9902:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9904:	4bd6      	ldr	r3, [pc, #856]	; (9c60 <f_open+0x39c>)
    9906:	2294      	movs	r2, #148	; 0x94
    9908:	0092      	lsls	r2, r2, #2
    990a:	4694      	mov	ip, r2
    990c:	44bc      	add	ip, r7
    990e:	4463      	add	r3, ip
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	2201      	movs	r2, #1
    9914:	4393      	bics	r3, r2
    9916:	b2da      	uxtb	r2, r3
    9918:	4bd2      	ldr	r3, [pc, #840]	; (9c64 <f_open+0x3a0>)
    991a:	18fc      	adds	r4, r7, r3
    991c:	2387      	movs	r3, #135	; 0x87
    991e:	009b      	lsls	r3, r3, #2
    9920:	18f9      	adds	r1, r7, r3
    9922:	2308      	movs	r3, #8
    9924:	18fb      	adds	r3, r7, r3
    9926:	0018      	movs	r0, r3
    9928:	4bcf      	ldr	r3, [pc, #828]	; (9c68 <f_open+0x3a4>)
    992a:	4798      	blx	r3
    992c:	0003      	movs	r3, r0
    992e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9930:	2387      	movs	r3, #135	; 0x87
    9932:	009b      	lsls	r3, r3, #2
    9934:	18fb      	adds	r3, r7, r3
    9936:	2284      	movs	r2, #132	; 0x84
    9938:	0092      	lsls	r2, r2, #2
    993a:	18ba      	adds	r2, r7, r2
    993c:	619a      	str	r2, [r3, #24]
    993e:	2387      	movs	r3, #135	; 0x87
    9940:	009b      	lsls	r3, r3, #2
    9942:	18fb      	adds	r3, r7, r3
    9944:	2210      	movs	r2, #16
    9946:	18ba      	adds	r2, r7, r2
    9948:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    994a:	4bc6      	ldr	r3, [pc, #792]	; (9c64 <f_open+0x3a0>)
    994c:	18fb      	adds	r3, r7, r3
    994e:	781b      	ldrb	r3, [r3, #0]
    9950:	2b00      	cmp	r3, #0
    9952:	d10b      	bne.n	996c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9954:	68ba      	ldr	r2, [r7, #8]
    9956:	4bc3      	ldr	r3, [pc, #780]	; (9c64 <f_open+0x3a0>)
    9958:	18fc      	adds	r4, r7, r3
    995a:	2387      	movs	r3, #135	; 0x87
    995c:	009b      	lsls	r3, r3, #2
    995e:	18fb      	adds	r3, r7, r3
    9960:	0011      	movs	r1, r2
    9962:	0018      	movs	r0, r3
    9964:	4bc1      	ldr	r3, [pc, #772]	; (9c6c <f_open+0x3a8>)
    9966:	4798      	blx	r3
    9968:	0003      	movs	r3, r0
    996a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    996c:	2387      	movs	r3, #135	; 0x87
    996e:	009b      	lsls	r3, r3, #2
    9970:	18fb      	adds	r3, r7, r3
    9972:	695b      	ldr	r3, [r3, #20]
    9974:	2292      	movs	r2, #146	; 0x92
    9976:	0092      	lsls	r2, r2, #2
    9978:	18ba      	adds	r2, r7, r2
    997a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    997c:	4bb9      	ldr	r3, [pc, #740]	; (9c64 <f_open+0x3a0>)
    997e:	18fb      	adds	r3, r7, r3
    9980:	781b      	ldrb	r3, [r3, #0]
    9982:	2b00      	cmp	r3, #0
    9984:	d109      	bne.n	999a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9986:	2392      	movs	r3, #146	; 0x92
    9988:	009b      	lsls	r3, r3, #2
    998a:	18fb      	adds	r3, r7, r3
    998c:	681b      	ldr	r3, [r3, #0]
    998e:	2b00      	cmp	r3, #0
    9990:	d103      	bne.n	999a <f_open+0xd6>
			res = FR_INVALID_NAME;
    9992:	4bb4      	ldr	r3, [pc, #720]	; (9c64 <f_open+0x3a0>)
    9994:	18fb      	adds	r3, r7, r3
    9996:	2206      	movs	r2, #6
    9998:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    999a:	4bb1      	ldr	r3, [pc, #708]	; (9c60 <f_open+0x39c>)
    999c:	2294      	movs	r2, #148	; 0x94
    999e:	0092      	lsls	r2, r2, #2
    99a0:	4694      	mov	ip, r2
    99a2:	44bc      	add	ip, r7
    99a4:	4463      	add	r3, ip
    99a6:	781b      	ldrb	r3, [r3, #0]
    99a8:	221c      	movs	r2, #28
    99aa:	4013      	ands	r3, r2
    99ac:	d100      	bne.n	99b0 <f_open+0xec>
    99ae:	e141      	b.n	9c34 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    99b0:	4bac      	ldr	r3, [pc, #688]	; (9c64 <f_open+0x3a0>)
    99b2:	18fb      	adds	r3, r7, r3
    99b4:	781b      	ldrb	r3, [r3, #0]
    99b6:	2b00      	cmp	r3, #0
    99b8:	d027      	beq.n	9a0a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    99ba:	4baa      	ldr	r3, [pc, #680]	; (9c64 <f_open+0x3a0>)
    99bc:	18fb      	adds	r3, r7, r3
    99be:	781b      	ldrb	r3, [r3, #0]
    99c0:	2b04      	cmp	r3, #4
    99c2:	d109      	bne.n	99d8 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    99c4:	4ba7      	ldr	r3, [pc, #668]	; (9c64 <f_open+0x3a0>)
    99c6:	18fc      	adds	r4, r7, r3
    99c8:	2387      	movs	r3, #135	; 0x87
    99ca:	009b      	lsls	r3, r3, #2
    99cc:	18fb      	adds	r3, r7, r3
    99ce:	0018      	movs	r0, r3
    99d0:	4ba7      	ldr	r3, [pc, #668]	; (9c70 <f_open+0x3ac>)
    99d2:	4798      	blx	r3
    99d4:	0003      	movs	r3, r0
    99d6:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    99d8:	4ba1      	ldr	r3, [pc, #644]	; (9c60 <f_open+0x39c>)
    99da:	2294      	movs	r2, #148	; 0x94
    99dc:	0092      	lsls	r2, r2, #2
    99de:	4694      	mov	ip, r2
    99e0:	44bc      	add	ip, r7
    99e2:	4463      	add	r3, ip
    99e4:	4a9e      	ldr	r2, [pc, #632]	; (9c60 <f_open+0x39c>)
    99e6:	2194      	movs	r1, #148	; 0x94
    99e8:	0089      	lsls	r1, r1, #2
    99ea:	468c      	mov	ip, r1
    99ec:	44bc      	add	ip, r7
    99ee:	4462      	add	r2, ip
    99f0:	7812      	ldrb	r2, [r2, #0]
    99f2:	2108      	movs	r1, #8
    99f4:	430a      	orrs	r2, r1
    99f6:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    99f8:	2387      	movs	r3, #135	; 0x87
    99fa:	009b      	lsls	r3, r3, #2
    99fc:	18fb      	adds	r3, r7, r3
    99fe:	695b      	ldr	r3, [r3, #20]
    9a00:	2292      	movs	r2, #146	; 0x92
    9a02:	0092      	lsls	r2, r2, #2
    9a04:	18ba      	adds	r2, r7, r2
    9a06:	6013      	str	r3, [r2, #0]
    9a08:	e01c      	b.n	9a44 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9a0a:	2392      	movs	r3, #146	; 0x92
    9a0c:	009b      	lsls	r3, r3, #2
    9a0e:	18fb      	adds	r3, r7, r3
    9a10:	681b      	ldr	r3, [r3, #0]
    9a12:	330b      	adds	r3, #11
    9a14:	781b      	ldrb	r3, [r3, #0]
    9a16:	001a      	movs	r2, r3
    9a18:	2311      	movs	r3, #17
    9a1a:	4013      	ands	r3, r2
    9a1c:	d004      	beq.n	9a28 <f_open+0x164>
				res = FR_DENIED;
    9a1e:	4b91      	ldr	r3, [pc, #580]	; (9c64 <f_open+0x3a0>)
    9a20:	18fb      	adds	r3, r7, r3
    9a22:	2207      	movs	r2, #7
    9a24:	701a      	strb	r2, [r3, #0]
    9a26:	e00d      	b.n	9a44 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9a28:	4b8d      	ldr	r3, [pc, #564]	; (9c60 <f_open+0x39c>)
    9a2a:	2294      	movs	r2, #148	; 0x94
    9a2c:	0092      	lsls	r2, r2, #2
    9a2e:	4694      	mov	ip, r2
    9a30:	44bc      	add	ip, r7
    9a32:	4463      	add	r3, ip
    9a34:	781b      	ldrb	r3, [r3, #0]
    9a36:	2204      	movs	r2, #4
    9a38:	4013      	ands	r3, r2
    9a3a:	d003      	beq.n	9a44 <f_open+0x180>
					res = FR_EXIST;
    9a3c:	4b89      	ldr	r3, [pc, #548]	; (9c64 <f_open+0x3a0>)
    9a3e:	18fb      	adds	r3, r7, r3
    9a40:	2208      	movs	r2, #8
    9a42:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9a44:	4b87      	ldr	r3, [pc, #540]	; (9c64 <f_open+0x3a0>)
    9a46:	18fb      	adds	r3, r7, r3
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d000      	beq.n	9a50 <f_open+0x18c>
    9a4e:	e12f      	b.n	9cb0 <f_open+0x3ec>
    9a50:	4b83      	ldr	r3, [pc, #524]	; (9c60 <f_open+0x39c>)
    9a52:	2294      	movs	r2, #148	; 0x94
    9a54:	0092      	lsls	r2, r2, #2
    9a56:	4694      	mov	ip, r2
    9a58:	44bc      	add	ip, r7
    9a5a:	4463      	add	r3, ip
    9a5c:	781b      	ldrb	r3, [r3, #0]
    9a5e:	2208      	movs	r2, #8
    9a60:	4013      	ands	r3, r2
    9a62:	d100      	bne.n	9a66 <f_open+0x1a2>
    9a64:	e124      	b.n	9cb0 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9a66:	4b83      	ldr	r3, [pc, #524]	; (9c74 <f_open+0x3b0>)
    9a68:	4798      	blx	r3
    9a6a:	0003      	movs	r3, r0
    9a6c:	2291      	movs	r2, #145	; 0x91
    9a6e:	0092      	lsls	r2, r2, #2
    9a70:	18ba      	adds	r2, r7, r2
    9a72:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9a74:	2392      	movs	r3, #146	; 0x92
    9a76:	009b      	lsls	r3, r3, #2
    9a78:	18fb      	adds	r3, r7, r3
    9a7a:	681b      	ldr	r3, [r3, #0]
    9a7c:	330e      	adds	r3, #14
    9a7e:	2291      	movs	r2, #145	; 0x91
    9a80:	0092      	lsls	r2, r2, #2
    9a82:	18ba      	adds	r2, r7, r2
    9a84:	6812      	ldr	r2, [r2, #0]
    9a86:	b2d2      	uxtb	r2, r2
    9a88:	701a      	strb	r2, [r3, #0]
    9a8a:	2392      	movs	r3, #146	; 0x92
    9a8c:	009b      	lsls	r3, r3, #2
    9a8e:	18fb      	adds	r3, r7, r3
    9a90:	681b      	ldr	r3, [r3, #0]
    9a92:	330f      	adds	r3, #15
    9a94:	2291      	movs	r2, #145	; 0x91
    9a96:	0092      	lsls	r2, r2, #2
    9a98:	18ba      	adds	r2, r7, r2
    9a9a:	6812      	ldr	r2, [r2, #0]
    9a9c:	b292      	uxth	r2, r2
    9a9e:	0a12      	lsrs	r2, r2, #8
    9aa0:	b292      	uxth	r2, r2
    9aa2:	b2d2      	uxtb	r2, r2
    9aa4:	701a      	strb	r2, [r3, #0]
    9aa6:	2392      	movs	r3, #146	; 0x92
    9aa8:	009b      	lsls	r3, r3, #2
    9aaa:	18fb      	adds	r3, r7, r3
    9aac:	681b      	ldr	r3, [r3, #0]
    9aae:	3310      	adds	r3, #16
    9ab0:	2291      	movs	r2, #145	; 0x91
    9ab2:	0092      	lsls	r2, r2, #2
    9ab4:	18ba      	adds	r2, r7, r2
    9ab6:	6812      	ldr	r2, [r2, #0]
    9ab8:	0c12      	lsrs	r2, r2, #16
    9aba:	b2d2      	uxtb	r2, r2
    9abc:	701a      	strb	r2, [r3, #0]
    9abe:	2392      	movs	r3, #146	; 0x92
    9ac0:	009b      	lsls	r3, r3, #2
    9ac2:	18fb      	adds	r3, r7, r3
    9ac4:	681b      	ldr	r3, [r3, #0]
    9ac6:	3311      	adds	r3, #17
    9ac8:	2291      	movs	r2, #145	; 0x91
    9aca:	0092      	lsls	r2, r2, #2
    9acc:	18ba      	adds	r2, r7, r2
    9ace:	6812      	ldr	r2, [r2, #0]
    9ad0:	0e12      	lsrs	r2, r2, #24
    9ad2:	b2d2      	uxtb	r2, r2
    9ad4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9ad6:	2392      	movs	r3, #146	; 0x92
    9ad8:	009b      	lsls	r3, r3, #2
    9ada:	18fb      	adds	r3, r7, r3
    9adc:	681b      	ldr	r3, [r3, #0]
    9ade:	330b      	adds	r3, #11
    9ae0:	2200      	movs	r2, #0
    9ae2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9ae4:	2392      	movs	r3, #146	; 0x92
    9ae6:	009b      	lsls	r3, r3, #2
    9ae8:	18fb      	adds	r3, r7, r3
    9aea:	681b      	ldr	r3, [r3, #0]
    9aec:	331c      	adds	r3, #28
    9aee:	2200      	movs	r2, #0
    9af0:	701a      	strb	r2, [r3, #0]
    9af2:	2392      	movs	r3, #146	; 0x92
    9af4:	009b      	lsls	r3, r3, #2
    9af6:	18fb      	adds	r3, r7, r3
    9af8:	681b      	ldr	r3, [r3, #0]
    9afa:	331d      	adds	r3, #29
    9afc:	2200      	movs	r2, #0
    9afe:	701a      	strb	r2, [r3, #0]
    9b00:	2392      	movs	r3, #146	; 0x92
    9b02:	009b      	lsls	r3, r3, #2
    9b04:	18fb      	adds	r3, r7, r3
    9b06:	681b      	ldr	r3, [r3, #0]
    9b08:	331e      	adds	r3, #30
    9b0a:	2200      	movs	r2, #0
    9b0c:	701a      	strb	r2, [r3, #0]
    9b0e:	2392      	movs	r3, #146	; 0x92
    9b10:	009b      	lsls	r3, r3, #2
    9b12:	18fb      	adds	r3, r7, r3
    9b14:	681b      	ldr	r3, [r3, #0]
    9b16:	331f      	adds	r3, #31
    9b18:	2200      	movs	r2, #0
    9b1a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9b1c:	2392      	movs	r3, #146	; 0x92
    9b1e:	009b      	lsls	r3, r3, #2
    9b20:	18fb      	adds	r3, r7, r3
    9b22:	681b      	ldr	r3, [r3, #0]
    9b24:	3315      	adds	r3, #21
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	021b      	lsls	r3, r3, #8
    9b2a:	b21a      	sxth	r2, r3
    9b2c:	2392      	movs	r3, #146	; 0x92
    9b2e:	009b      	lsls	r3, r3, #2
    9b30:	18fb      	adds	r3, r7, r3
    9b32:	681b      	ldr	r3, [r3, #0]
    9b34:	3314      	adds	r3, #20
    9b36:	781b      	ldrb	r3, [r3, #0]
    9b38:	b21b      	sxth	r3, r3
    9b3a:	4313      	orrs	r3, r2
    9b3c:	b21b      	sxth	r3, r3
    9b3e:	b29b      	uxth	r3, r3
    9b40:	041b      	lsls	r3, r3, #16
    9b42:	2292      	movs	r2, #146	; 0x92
    9b44:	0092      	lsls	r2, r2, #2
    9b46:	18ba      	adds	r2, r7, r2
    9b48:	6812      	ldr	r2, [r2, #0]
    9b4a:	321b      	adds	r2, #27
    9b4c:	7812      	ldrb	r2, [r2, #0]
    9b4e:	0212      	lsls	r2, r2, #8
    9b50:	b211      	sxth	r1, r2
    9b52:	2292      	movs	r2, #146	; 0x92
    9b54:	0092      	lsls	r2, r2, #2
    9b56:	18ba      	adds	r2, r7, r2
    9b58:	6812      	ldr	r2, [r2, #0]
    9b5a:	321a      	adds	r2, #26
    9b5c:	7812      	ldrb	r2, [r2, #0]
    9b5e:	b212      	sxth	r2, r2
    9b60:	430a      	orrs	r2, r1
    9b62:	b212      	sxth	r2, r2
    9b64:	b292      	uxth	r2, r2
    9b66:	4313      	orrs	r3, r2
    9b68:	2290      	movs	r2, #144	; 0x90
    9b6a:	0092      	lsls	r2, r2, #2
    9b6c:	18ba      	adds	r2, r7, r2
    9b6e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9b70:	2392      	movs	r3, #146	; 0x92
    9b72:	009b      	lsls	r3, r3, #2
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	681b      	ldr	r3, [r3, #0]
    9b78:	331a      	adds	r3, #26
    9b7a:	2200      	movs	r2, #0
    9b7c:	701a      	strb	r2, [r3, #0]
    9b7e:	2392      	movs	r3, #146	; 0x92
    9b80:	009b      	lsls	r3, r3, #2
    9b82:	18fb      	adds	r3, r7, r3
    9b84:	681b      	ldr	r3, [r3, #0]
    9b86:	331b      	adds	r3, #27
    9b88:	2200      	movs	r2, #0
    9b8a:	701a      	strb	r2, [r3, #0]
    9b8c:	2392      	movs	r3, #146	; 0x92
    9b8e:	009b      	lsls	r3, r3, #2
    9b90:	18fb      	adds	r3, r7, r3
    9b92:	681b      	ldr	r3, [r3, #0]
    9b94:	3314      	adds	r3, #20
    9b96:	2200      	movs	r2, #0
    9b98:	701a      	strb	r2, [r3, #0]
    9b9a:	2392      	movs	r3, #146	; 0x92
    9b9c:	009b      	lsls	r3, r3, #2
    9b9e:	18fb      	adds	r3, r7, r3
    9ba0:	681b      	ldr	r3, [r3, #0]
    9ba2:	3315      	adds	r3, #21
    9ba4:	2200      	movs	r2, #0
    9ba6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9ba8:	2387      	movs	r3, #135	; 0x87
    9baa:	009b      	lsls	r3, r3, #2
    9bac:	18fb      	adds	r3, r7, r3
    9bae:	681b      	ldr	r3, [r3, #0]
    9bb0:	2201      	movs	r2, #1
    9bb2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9bb4:	2390      	movs	r3, #144	; 0x90
    9bb6:	009b      	lsls	r3, r3, #2
    9bb8:	18fb      	adds	r3, r7, r3
    9bba:	681b      	ldr	r3, [r3, #0]
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	d100      	bne.n	9bc2 <f_open+0x2fe>
    9bc0:	e076      	b.n	9cb0 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9bc2:	2387      	movs	r3, #135	; 0x87
    9bc4:	009b      	lsls	r3, r3, #2
    9bc6:	18fb      	adds	r3, r7, r3
    9bc8:	681b      	ldr	r3, [r3, #0]
    9bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9bcc:	2291      	movs	r2, #145	; 0x91
    9bce:	0092      	lsls	r2, r2, #2
    9bd0:	18ba      	adds	r2, r7, r2
    9bd2:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9bd4:	2387      	movs	r3, #135	; 0x87
    9bd6:	009b      	lsls	r3, r3, #2
    9bd8:	18fb      	adds	r3, r7, r3
    9bda:	681b      	ldr	r3, [r3, #0]
    9bdc:	4a21      	ldr	r2, [pc, #132]	; (9c64 <f_open+0x3a0>)
    9bde:	18bc      	adds	r4, r7, r2
    9be0:	2290      	movs	r2, #144	; 0x90
    9be2:	0092      	lsls	r2, r2, #2
    9be4:	18ba      	adds	r2, r7, r2
    9be6:	6812      	ldr	r2, [r2, #0]
    9be8:	0011      	movs	r1, r2
    9bea:	0018      	movs	r0, r3
    9bec:	4b22      	ldr	r3, [pc, #136]	; (9c78 <f_open+0x3b4>)
    9bee:	4798      	blx	r3
    9bf0:	0003      	movs	r3, r0
    9bf2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9bf4:	4b1b      	ldr	r3, [pc, #108]	; (9c64 <f_open+0x3a0>)
    9bf6:	18fb      	adds	r3, r7, r3
    9bf8:	781b      	ldrb	r3, [r3, #0]
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d158      	bne.n	9cb0 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9bfe:	2387      	movs	r3, #135	; 0x87
    9c00:	009b      	lsls	r3, r3, #2
    9c02:	18fb      	adds	r3, r7, r3
    9c04:	681b      	ldr	r3, [r3, #0]
    9c06:	2290      	movs	r2, #144	; 0x90
    9c08:	0092      	lsls	r2, r2, #2
    9c0a:	18ba      	adds	r2, r7, r2
    9c0c:	6812      	ldr	r2, [r2, #0]
    9c0e:	3a01      	subs	r2, #1
    9c10:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9c12:	2387      	movs	r3, #135	; 0x87
    9c14:	009b      	lsls	r3, r3, #2
    9c16:	18fb      	adds	r3, r7, r3
    9c18:	681b      	ldr	r3, [r3, #0]
    9c1a:	4a12      	ldr	r2, [pc, #72]	; (9c64 <f_open+0x3a0>)
    9c1c:	18bc      	adds	r4, r7, r2
    9c1e:	2291      	movs	r2, #145	; 0x91
    9c20:	0092      	lsls	r2, r2, #2
    9c22:	18ba      	adds	r2, r7, r2
    9c24:	6812      	ldr	r2, [r2, #0]
    9c26:	0011      	movs	r1, r2
    9c28:	0018      	movs	r0, r3
    9c2a:	4b14      	ldr	r3, [pc, #80]	; (9c7c <f_open+0x3b8>)
    9c2c:	4798      	blx	r3
    9c2e:	0003      	movs	r3, r0
    9c30:	7023      	strb	r3, [r4, #0]
    9c32:	e03d      	b.n	9cb0 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9c34:	4b0b      	ldr	r3, [pc, #44]	; (9c64 <f_open+0x3a0>)
    9c36:	18fb      	adds	r3, r7, r3
    9c38:	781b      	ldrb	r3, [r3, #0]
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d138      	bne.n	9cb0 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9c3e:	2392      	movs	r3, #146	; 0x92
    9c40:	009b      	lsls	r3, r3, #2
    9c42:	18fb      	adds	r3, r7, r3
    9c44:	681b      	ldr	r3, [r3, #0]
    9c46:	330b      	adds	r3, #11
    9c48:	781b      	ldrb	r3, [r3, #0]
    9c4a:	001a      	movs	r2, r3
    9c4c:	2310      	movs	r3, #16
    9c4e:	4013      	ands	r3, r2
    9c50:	d016      	beq.n	9c80 <f_open+0x3bc>
				res = FR_NO_FILE;
    9c52:	4b04      	ldr	r3, [pc, #16]	; (9c64 <f_open+0x3a0>)
    9c54:	18fb      	adds	r3, r7, r3
    9c56:	2204      	movs	r2, #4
    9c58:	701a      	strb	r2, [r3, #0]
    9c5a:	e029      	b.n	9cb0 <f_open+0x3ec>
    9c5c:	fffffdac 	.word	0xfffffdac
    9c60:	fffffdb7 	.word	0xfffffdb7
    9c64:	0000024f 	.word	0x0000024f
    9c68:	0000921d 	.word	0x0000921d
    9c6c:	00009011 	.word	0x00009011
    9c70:	00008545 	.word	0x00008545
    9c74:	00007095 	.word	0x00007095
    9c78:	00007819 	.word	0x00007819
    9c7c:	000071d9 	.word	0x000071d9
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9c80:	4b5a      	ldr	r3, [pc, #360]	; (9dec <f_open+0x528>)
    9c82:	2294      	movs	r2, #148	; 0x94
    9c84:	0092      	lsls	r2, r2, #2
    9c86:	4694      	mov	ip, r2
    9c88:	44bc      	add	ip, r7
    9c8a:	4463      	add	r3, ip
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	2202      	movs	r2, #2
    9c90:	4013      	ands	r3, r2
    9c92:	d00d      	beq.n	9cb0 <f_open+0x3ec>
    9c94:	2392      	movs	r3, #146	; 0x92
    9c96:	009b      	lsls	r3, r3, #2
    9c98:	18fb      	adds	r3, r7, r3
    9c9a:	681b      	ldr	r3, [r3, #0]
    9c9c:	330b      	adds	r3, #11
    9c9e:	781b      	ldrb	r3, [r3, #0]
    9ca0:	001a      	movs	r2, r3
    9ca2:	2301      	movs	r3, #1
    9ca4:	4013      	ands	r3, r2
    9ca6:	d003      	beq.n	9cb0 <f_open+0x3ec>
					res = FR_DENIED;
    9ca8:	4b51      	ldr	r3, [pc, #324]	; (9df0 <f_open+0x52c>)
    9caa:	18fb      	adds	r3, r7, r3
    9cac:	2207      	movs	r2, #7
    9cae:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9cb0:	4b4f      	ldr	r3, [pc, #316]	; (9df0 <f_open+0x52c>)
    9cb2:	18fb      	adds	r3, r7, r3
    9cb4:	781b      	ldrb	r3, [r3, #0]
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d126      	bne.n	9d08 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9cba:	4b4c      	ldr	r3, [pc, #304]	; (9dec <f_open+0x528>)
    9cbc:	2294      	movs	r2, #148	; 0x94
    9cbe:	0092      	lsls	r2, r2, #2
    9cc0:	4694      	mov	ip, r2
    9cc2:	44bc      	add	ip, r7
    9cc4:	4463      	add	r3, ip
    9cc6:	781b      	ldrb	r3, [r3, #0]
    9cc8:	2208      	movs	r2, #8
    9cca:	4013      	ands	r3, r2
    9ccc:	d00f      	beq.n	9cee <f_open+0x42a>
			mode |= FA__WRITTEN;
    9cce:	4b47      	ldr	r3, [pc, #284]	; (9dec <f_open+0x528>)
    9cd0:	2294      	movs	r2, #148	; 0x94
    9cd2:	0092      	lsls	r2, r2, #2
    9cd4:	4694      	mov	ip, r2
    9cd6:	44bc      	add	ip, r7
    9cd8:	4463      	add	r3, ip
    9cda:	4a44      	ldr	r2, [pc, #272]	; (9dec <f_open+0x528>)
    9cdc:	2194      	movs	r1, #148	; 0x94
    9cde:	0089      	lsls	r1, r1, #2
    9ce0:	468c      	mov	ip, r1
    9ce2:	44bc      	add	ip, r7
    9ce4:	4462      	add	r2, ip
    9ce6:	7812      	ldrb	r2, [r2, #0]
    9ce8:	2120      	movs	r1, #32
    9cea:	430a      	orrs	r2, r1
    9cec:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9cee:	2387      	movs	r3, #135	; 0x87
    9cf0:	009b      	lsls	r3, r3, #2
    9cf2:	18fb      	adds	r3, r7, r3
    9cf4:	681b      	ldr	r3, [r3, #0]
    9cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9cf8:	68fb      	ldr	r3, [r7, #12]
    9cfa:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9cfc:	68fb      	ldr	r3, [r7, #12]
    9cfe:	2292      	movs	r2, #146	; 0x92
    9d00:	0092      	lsls	r2, r2, #2
    9d02:	18ba      	adds	r2, r7, r2
    9d04:	6812      	ldr	r2, [r2, #0]
    9d06:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9d08:	4b39      	ldr	r3, [pc, #228]	; (9df0 <f_open+0x52c>)
    9d0a:	18fb      	adds	r3, r7, r3
    9d0c:	781b      	ldrb	r3, [r3, #0]
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d163      	bne.n	9dda <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9d12:	68fb      	ldr	r3, [r7, #12]
    9d14:	4a35      	ldr	r2, [pc, #212]	; (9dec <f_open+0x528>)
    9d16:	2194      	movs	r1, #148	; 0x94
    9d18:	0089      	lsls	r1, r1, #2
    9d1a:	468c      	mov	ip, r1
    9d1c:	44bc      	add	ip, r7
    9d1e:	4462      	add	r2, ip
    9d20:	7812      	ldrb	r2, [r2, #0]
    9d22:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9d24:	2392      	movs	r3, #146	; 0x92
    9d26:	009b      	lsls	r3, r3, #2
    9d28:	18fb      	adds	r3, r7, r3
    9d2a:	681b      	ldr	r3, [r3, #0]
    9d2c:	3315      	adds	r3, #21
    9d2e:	781b      	ldrb	r3, [r3, #0]
    9d30:	021b      	lsls	r3, r3, #8
    9d32:	b21a      	sxth	r2, r3
    9d34:	2392      	movs	r3, #146	; 0x92
    9d36:	009b      	lsls	r3, r3, #2
    9d38:	18fb      	adds	r3, r7, r3
    9d3a:	681b      	ldr	r3, [r3, #0]
    9d3c:	3314      	adds	r3, #20
    9d3e:	781b      	ldrb	r3, [r3, #0]
    9d40:	b21b      	sxth	r3, r3
    9d42:	4313      	orrs	r3, r2
    9d44:	b21b      	sxth	r3, r3
    9d46:	b29b      	uxth	r3, r3
    9d48:	041b      	lsls	r3, r3, #16
    9d4a:	2292      	movs	r2, #146	; 0x92
    9d4c:	0092      	lsls	r2, r2, #2
    9d4e:	18ba      	adds	r2, r7, r2
    9d50:	6812      	ldr	r2, [r2, #0]
    9d52:	321b      	adds	r2, #27
    9d54:	7812      	ldrb	r2, [r2, #0]
    9d56:	0212      	lsls	r2, r2, #8
    9d58:	b211      	sxth	r1, r2
    9d5a:	2292      	movs	r2, #146	; 0x92
    9d5c:	0092      	lsls	r2, r2, #2
    9d5e:	18ba      	adds	r2, r7, r2
    9d60:	6812      	ldr	r2, [r2, #0]
    9d62:	321a      	adds	r2, #26
    9d64:	7812      	ldrb	r2, [r2, #0]
    9d66:	b212      	sxth	r2, r2
    9d68:	430a      	orrs	r2, r1
    9d6a:	b212      	sxth	r2, r2
    9d6c:	b292      	uxth	r2, r2
    9d6e:	431a      	orrs	r2, r3
    9d70:	68fb      	ldr	r3, [r7, #12]
    9d72:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9d74:	2392      	movs	r3, #146	; 0x92
    9d76:	009b      	lsls	r3, r3, #2
    9d78:	18fb      	adds	r3, r7, r3
    9d7a:	681b      	ldr	r3, [r3, #0]
    9d7c:	331f      	adds	r3, #31
    9d7e:	781b      	ldrb	r3, [r3, #0]
    9d80:	061a      	lsls	r2, r3, #24
    9d82:	2392      	movs	r3, #146	; 0x92
    9d84:	009b      	lsls	r3, r3, #2
    9d86:	18fb      	adds	r3, r7, r3
    9d88:	681b      	ldr	r3, [r3, #0]
    9d8a:	331e      	adds	r3, #30
    9d8c:	781b      	ldrb	r3, [r3, #0]
    9d8e:	041b      	lsls	r3, r3, #16
    9d90:	4313      	orrs	r3, r2
    9d92:	2292      	movs	r2, #146	; 0x92
    9d94:	0092      	lsls	r2, r2, #2
    9d96:	18ba      	adds	r2, r7, r2
    9d98:	6812      	ldr	r2, [r2, #0]
    9d9a:	321d      	adds	r2, #29
    9d9c:	7812      	ldrb	r2, [r2, #0]
    9d9e:	0212      	lsls	r2, r2, #8
    9da0:	4313      	orrs	r3, r2
    9da2:	2292      	movs	r2, #146	; 0x92
    9da4:	0092      	lsls	r2, r2, #2
    9da6:	18ba      	adds	r2, r7, r2
    9da8:	6812      	ldr	r2, [r2, #0]
    9daa:	321c      	adds	r2, #28
    9dac:	7812      	ldrb	r2, [r2, #0]
    9dae:	431a      	orrs	r2, r3
    9db0:	68fb      	ldr	r3, [r7, #12]
    9db2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9db4:	68fb      	ldr	r3, [r7, #12]
    9db6:	2200      	movs	r2, #0
    9db8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9dba:	68fb      	ldr	r3, [r7, #12]
    9dbc:	2200      	movs	r2, #0
    9dbe:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9dc0:	2387      	movs	r3, #135	; 0x87
    9dc2:	009b      	lsls	r3, r3, #2
    9dc4:	18fb      	adds	r3, r7, r3
    9dc6:	681a      	ldr	r2, [r3, #0]
    9dc8:	68fb      	ldr	r3, [r7, #12]
    9dca:	601a      	str	r2, [r3, #0]
    9dcc:	2387      	movs	r3, #135	; 0x87
    9dce:	009b      	lsls	r3, r3, #2
    9dd0:	18fb      	adds	r3, r7, r3
    9dd2:	681b      	ldr	r3, [r3, #0]
    9dd4:	88da      	ldrh	r2, [r3, #6]
    9dd6:	68fb      	ldr	r3, [r7, #12]
    9dd8:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    9dda:	4b05      	ldr	r3, [pc, #20]	; (9df0 <f_open+0x52c>)
    9ddc:	18fb      	adds	r3, r7, r3
    9dde:	781b      	ldrb	r3, [r3, #0]
}
    9de0:	0018      	movs	r0, r3
    9de2:	46bd      	mov	sp, r7
    9de4:	2395      	movs	r3, #149	; 0x95
    9de6:	009b      	lsls	r3, r3, #2
    9de8:	449d      	add	sp, r3
    9dea:	bd90      	pop	{r4, r7, pc}
    9dec:	fffffdb7 	.word	0xfffffdb7
    9df0:	0000024f 	.word	0x0000024f

00009df4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    9df4:	b590      	push	{r4, r7, lr}
    9df6:	b08b      	sub	sp, #44	; 0x2c
    9df8:	af00      	add	r7, sp, #0
    9dfa:	60f8      	str	r0, [r7, #12]
    9dfc:	60b9      	str	r1, [r7, #8]
    9dfe:	607a      	str	r2, [r7, #4]
    9e00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    9e02:	68bb      	ldr	r3, [r7, #8]
    9e04:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    9e06:	683b      	ldr	r3, [r7, #0]
    9e08:	2200      	movs	r2, #0
    9e0a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    9e0c:	68fb      	ldr	r3, [r7, #12]
    9e0e:	681a      	ldr	r2, [r3, #0]
    9e10:	68fb      	ldr	r3, [r7, #12]
    9e12:	889b      	ldrh	r3, [r3, #4]
    9e14:	2117      	movs	r1, #23
    9e16:	187c      	adds	r4, r7, r1
    9e18:	0019      	movs	r1, r3
    9e1a:	0010      	movs	r0, r2
    9e1c:	4bc3      	ldr	r3, [pc, #780]	; (a12c <f_write+0x338>)
    9e1e:	4798      	blx	r3
    9e20:	0003      	movs	r3, r0
    9e22:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9e24:	2317      	movs	r3, #23
    9e26:	18fb      	adds	r3, r7, r3
    9e28:	781b      	ldrb	r3, [r3, #0]
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	d003      	beq.n	9e36 <f_write+0x42>
    9e2e:	2317      	movs	r3, #23
    9e30:	18fb      	adds	r3, r7, r3
    9e32:	781b      	ldrb	r3, [r3, #0]
    9e34:	e176      	b.n	a124 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    9e36:	68fb      	ldr	r3, [r7, #12]
    9e38:	799b      	ldrb	r3, [r3, #6]
    9e3a:	b25b      	sxtb	r3, r3
    9e3c:	2b00      	cmp	r3, #0
    9e3e:	da01      	bge.n	9e44 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    9e40:	2302      	movs	r3, #2
    9e42:	e16f      	b.n	a124 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    9e44:	68fb      	ldr	r3, [r7, #12]
    9e46:	799b      	ldrb	r3, [r3, #6]
    9e48:	001a      	movs	r2, r3
    9e4a:	2302      	movs	r3, #2
    9e4c:	4013      	ands	r3, r2
    9e4e:	d101      	bne.n	9e54 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    9e50:	2307      	movs	r3, #7
    9e52:	e167      	b.n	a124 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    9e54:	68fb      	ldr	r3, [r7, #12]
    9e56:	68da      	ldr	r2, [r3, #12]
    9e58:	687b      	ldr	r3, [r7, #4]
    9e5a:	18d2      	adds	r2, r2, r3
    9e5c:	68fb      	ldr	r3, [r7, #12]
    9e5e:	68db      	ldr	r3, [r3, #12]
    9e60:	429a      	cmp	r2, r3
    9e62:	d300      	bcc.n	9e66 <f_write+0x72>
    9e64:	e146      	b.n	a0f4 <f_write+0x300>
    9e66:	2300      	movs	r3, #0
    9e68:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    9e6a:	e143      	b.n	a0f4 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	689b      	ldr	r3, [r3, #8]
    9e70:	05db      	lsls	r3, r3, #23
    9e72:	0ddb      	lsrs	r3, r3, #23
    9e74:	d000      	beq.n	9e78 <f_write+0x84>
    9e76:	e0f6      	b.n	a066 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    9e78:	68fb      	ldr	r3, [r7, #12]
    9e7a:	689b      	ldr	r3, [r3, #8]
    9e7c:	0a5b      	lsrs	r3, r3, #9
    9e7e:	b2da      	uxtb	r2, r3
    9e80:	68fb      	ldr	r3, [r7, #12]
    9e82:	681b      	ldr	r3, [r3, #0]
    9e84:	789b      	ldrb	r3, [r3, #2]
    9e86:	3b01      	subs	r3, #1
    9e88:	b2d9      	uxtb	r1, r3
    9e8a:	2316      	movs	r3, #22
    9e8c:	18fb      	adds	r3, r7, r3
    9e8e:	400a      	ands	r2, r1
    9e90:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    9e92:	2316      	movs	r3, #22
    9e94:	18fb      	adds	r3, r7, r3
    9e96:	781b      	ldrb	r3, [r3, #0]
    9e98:	2b00      	cmp	r3, #0
    9e9a:	d140      	bne.n	9f1e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    9e9c:	68fb      	ldr	r3, [r7, #12]
    9e9e:	689b      	ldr	r3, [r3, #8]
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d111      	bne.n	9ec8 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    9ea4:	68fb      	ldr	r3, [r7, #12]
    9ea6:	691b      	ldr	r3, [r3, #16]
    9ea8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    9eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9eac:	2b00      	cmp	r3, #0
    9eae:	d115      	bne.n	9edc <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    9eb0:	68fb      	ldr	r3, [r7, #12]
    9eb2:	681b      	ldr	r3, [r3, #0]
    9eb4:	2100      	movs	r1, #0
    9eb6:	0018      	movs	r0, r3
    9eb8:	4b9d      	ldr	r3, [pc, #628]	; (a130 <f_write+0x33c>)
    9eba:	4798      	blx	r3
    9ebc:	0003      	movs	r3, r0
    9ebe:	627b      	str	r3, [r7, #36]	; 0x24
    9ec0:	68fb      	ldr	r3, [r7, #12]
    9ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9ec4:	611a      	str	r2, [r3, #16]
    9ec6:	e009      	b.n	9edc <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    9ec8:	68fb      	ldr	r3, [r7, #12]
    9eca:	681a      	ldr	r2, [r3, #0]
    9ecc:	68fb      	ldr	r3, [r7, #12]
    9ece:	695b      	ldr	r3, [r3, #20]
    9ed0:	0019      	movs	r1, r3
    9ed2:	0010      	movs	r0, r2
    9ed4:	4b96      	ldr	r3, [pc, #600]	; (a130 <f_write+0x33c>)
    9ed6:	4798      	blx	r3
    9ed8:	0003      	movs	r3, r0
    9eda:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    9edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d100      	bne.n	9ee4 <f_write+0xf0>
    9ee2:	e10c      	b.n	a0fe <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    9ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9ee6:	2b01      	cmp	r3, #1
    9ee8:	d109      	bne.n	9efe <f_write+0x10a>
    9eea:	68fb      	ldr	r3, [r7, #12]
    9eec:	799b      	ldrb	r3, [r3, #6]
    9eee:	2280      	movs	r2, #128	; 0x80
    9ef0:	4252      	negs	r2, r2
    9ef2:	4313      	orrs	r3, r2
    9ef4:	b2da      	uxtb	r2, r3
    9ef6:	68fb      	ldr	r3, [r7, #12]
    9ef8:	719a      	strb	r2, [r3, #6]
    9efa:	2302      	movs	r3, #2
    9efc:	e112      	b.n	a124 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f00:	3301      	adds	r3, #1
    9f02:	d109      	bne.n	9f18 <f_write+0x124>
    9f04:	68fb      	ldr	r3, [r7, #12]
    9f06:	799b      	ldrb	r3, [r3, #6]
    9f08:	2280      	movs	r2, #128	; 0x80
    9f0a:	4252      	negs	r2, r2
    9f0c:	4313      	orrs	r3, r2
    9f0e:	b2da      	uxtb	r2, r3
    9f10:	68fb      	ldr	r3, [r7, #12]
    9f12:	719a      	strb	r2, [r3, #6]
    9f14:	2301      	movs	r3, #1
    9f16:	e105      	b.n	a124 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    9f18:	68fb      	ldr	r3, [r7, #12]
    9f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9f1c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    9f1e:	68fb      	ldr	r3, [r7, #12]
    9f20:	681b      	ldr	r3, [r3, #0]
    9f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f24:	68fb      	ldr	r3, [r7, #12]
    9f26:	699b      	ldr	r3, [r3, #24]
    9f28:	429a      	cmp	r2, r3
    9f2a:	d111      	bne.n	9f50 <f_write+0x15c>
    9f2c:	68fb      	ldr	r3, [r7, #12]
    9f2e:	681b      	ldr	r3, [r3, #0]
    9f30:	2100      	movs	r1, #0
    9f32:	0018      	movs	r0, r3
    9f34:	4b7f      	ldr	r3, [pc, #508]	; (a134 <f_write+0x340>)
    9f36:	4798      	blx	r3
    9f38:	1e03      	subs	r3, r0, #0
    9f3a:	d009      	beq.n	9f50 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    9f3c:	68fb      	ldr	r3, [r7, #12]
    9f3e:	799b      	ldrb	r3, [r3, #6]
    9f40:	2280      	movs	r2, #128	; 0x80
    9f42:	4252      	negs	r2, r2
    9f44:	4313      	orrs	r3, r2
    9f46:	b2da      	uxtb	r2, r3
    9f48:	68fb      	ldr	r3, [r7, #12]
    9f4a:	719a      	strb	r2, [r3, #6]
    9f4c:	2301      	movs	r3, #1
    9f4e:	e0e9      	b.n	a124 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	681a      	ldr	r2, [r3, #0]
    9f54:	68fb      	ldr	r3, [r7, #12]
    9f56:	695b      	ldr	r3, [r3, #20]
    9f58:	0019      	movs	r1, r3
    9f5a:	0010      	movs	r0, r2
    9f5c:	4b76      	ldr	r3, [pc, #472]	; (a138 <f_write+0x344>)
    9f5e:	4798      	blx	r3
    9f60:	0003      	movs	r3, r0
    9f62:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9f64:	693b      	ldr	r3, [r7, #16]
    9f66:	2b00      	cmp	r3, #0
    9f68:	d109      	bne.n	9f7e <f_write+0x18a>
    9f6a:	68fb      	ldr	r3, [r7, #12]
    9f6c:	799b      	ldrb	r3, [r3, #6]
    9f6e:	2280      	movs	r2, #128	; 0x80
    9f70:	4252      	negs	r2, r2
    9f72:	4313      	orrs	r3, r2
    9f74:	b2da      	uxtb	r2, r3
    9f76:	68fb      	ldr	r3, [r7, #12]
    9f78:	719a      	strb	r2, [r3, #6]
    9f7a:	2302      	movs	r3, #2
    9f7c:	e0d2      	b.n	a124 <f_write+0x330>
			sect += csect;
    9f7e:	2316      	movs	r3, #22
    9f80:	18fb      	adds	r3, r7, r3
    9f82:	781b      	ldrb	r3, [r3, #0]
    9f84:	693a      	ldr	r2, [r7, #16]
    9f86:	18d3      	adds	r3, r2, r3
    9f88:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    9f8a:	687b      	ldr	r3, [r7, #4]
    9f8c:	0a5b      	lsrs	r3, r3, #9
    9f8e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    9f90:	69fb      	ldr	r3, [r7, #28]
    9f92:	2b00      	cmp	r3, #0
    9f94:	d048      	beq.n	a028 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9f96:	2316      	movs	r3, #22
    9f98:	18fb      	adds	r3, r7, r3
    9f9a:	781a      	ldrb	r2, [r3, #0]
    9f9c:	69fb      	ldr	r3, [r7, #28]
    9f9e:	18d2      	adds	r2, r2, r3
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	681b      	ldr	r3, [r3, #0]
    9fa4:	789b      	ldrb	r3, [r3, #2]
    9fa6:	429a      	cmp	r2, r3
    9fa8:	d908      	bls.n	9fbc <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    9faa:	68fb      	ldr	r3, [r7, #12]
    9fac:	681b      	ldr	r3, [r3, #0]
    9fae:	789b      	ldrb	r3, [r3, #2]
    9fb0:	001a      	movs	r2, r3
    9fb2:	2316      	movs	r3, #22
    9fb4:	18fb      	adds	r3, r7, r3
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	1ad3      	subs	r3, r2, r3
    9fba:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    9fbc:	68fb      	ldr	r3, [r7, #12]
    9fbe:	681b      	ldr	r3, [r3, #0]
    9fc0:	7858      	ldrb	r0, [r3, #1]
    9fc2:	69fb      	ldr	r3, [r7, #28]
    9fc4:	b2db      	uxtb	r3, r3
    9fc6:	693a      	ldr	r2, [r7, #16]
    9fc8:	69b9      	ldr	r1, [r7, #24]
    9fca:	4c5c      	ldr	r4, [pc, #368]	; (a13c <f_write+0x348>)
    9fcc:	47a0      	blx	r4
    9fce:	1e03      	subs	r3, r0, #0
    9fd0:	d009      	beq.n	9fe6 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    9fd2:	68fb      	ldr	r3, [r7, #12]
    9fd4:	799b      	ldrb	r3, [r3, #6]
    9fd6:	2280      	movs	r2, #128	; 0x80
    9fd8:	4252      	negs	r2, r2
    9fda:	4313      	orrs	r3, r2
    9fdc:	b2da      	uxtb	r2, r3
    9fde:	68fb      	ldr	r3, [r7, #12]
    9fe0:	719a      	strb	r2, [r3, #6]
    9fe2:	2301      	movs	r3, #1
    9fe4:	e09e      	b.n	a124 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    9fe6:	68fb      	ldr	r3, [r7, #12]
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9fec:	693b      	ldr	r3, [r7, #16]
    9fee:	1ad2      	subs	r2, r2, r3
    9ff0:	69fb      	ldr	r3, [r7, #28]
    9ff2:	429a      	cmp	r2, r3
    9ff4:	d214      	bcs.n	a020 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    9ff6:	68fb      	ldr	r3, [r7, #12]
    9ff8:	681b      	ldr	r3, [r3, #0]
    9ffa:	3330      	adds	r3, #48	; 0x30
    9ffc:	0018      	movs	r0, r3
    9ffe:	68fb      	ldr	r3, [r7, #12]
    a000:	681b      	ldr	r3, [r3, #0]
    a002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a004:	693b      	ldr	r3, [r7, #16]
    a006:	1ad3      	subs	r3, r2, r3
    a008:	025b      	lsls	r3, r3, #9
    a00a:	69ba      	ldr	r2, [r7, #24]
    a00c:	18d1      	adds	r1, r2, r3
    a00e:	2380      	movs	r3, #128	; 0x80
    a010:	009b      	lsls	r3, r3, #2
    a012:	001a      	movs	r2, r3
    a014:	4b4a      	ldr	r3, [pc, #296]	; (a140 <f_write+0x34c>)
    a016:	4798      	blx	r3
					fp->fs->wflag = 0;
    a018:	68fb      	ldr	r3, [r7, #12]
    a01a:	681b      	ldr	r3, [r3, #0]
    a01c:	2200      	movs	r2, #0
    a01e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a020:	69fb      	ldr	r3, [r7, #28]
    a022:	025b      	lsls	r3, r3, #9
    a024:	623b      	str	r3, [r7, #32]
				continue;
    a026:	e051      	b.n	a0cc <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a028:	68fb      	ldr	r3, [r7, #12]
    a02a:	689a      	ldr	r2, [r3, #8]
    a02c:	68fb      	ldr	r3, [r7, #12]
    a02e:	68db      	ldr	r3, [r3, #12]
    a030:	429a      	cmp	r2, r3
    a032:	d315      	bcc.n	a060 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a034:	68fb      	ldr	r3, [r7, #12]
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	2100      	movs	r1, #0
    a03a:	0018      	movs	r0, r3
    a03c:	4b3d      	ldr	r3, [pc, #244]	; (a134 <f_write+0x340>)
    a03e:	4798      	blx	r3
    a040:	1e03      	subs	r3, r0, #0
    a042:	d009      	beq.n	a058 <f_write+0x264>
    a044:	68fb      	ldr	r3, [r7, #12]
    a046:	799b      	ldrb	r3, [r3, #6]
    a048:	2280      	movs	r2, #128	; 0x80
    a04a:	4252      	negs	r2, r2
    a04c:	4313      	orrs	r3, r2
    a04e:	b2da      	uxtb	r2, r3
    a050:	68fb      	ldr	r3, [r7, #12]
    a052:	719a      	strb	r2, [r3, #6]
    a054:	2301      	movs	r3, #1
    a056:	e065      	b.n	a124 <f_write+0x330>
				fp->fs->winsect = sect;
    a058:	68fb      	ldr	r3, [r7, #12]
    a05a:	681b      	ldr	r3, [r3, #0]
    a05c:	693a      	ldr	r2, [r7, #16]
    a05e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a060:	68fb      	ldr	r3, [r7, #12]
    a062:	693a      	ldr	r2, [r7, #16]
    a064:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a066:	68fb      	ldr	r3, [r7, #12]
    a068:	689b      	ldr	r3, [r3, #8]
    a06a:	05db      	lsls	r3, r3, #23
    a06c:	0ddb      	lsrs	r3, r3, #23
    a06e:	2280      	movs	r2, #128	; 0x80
    a070:	0092      	lsls	r2, r2, #2
    a072:	1ad3      	subs	r3, r2, r3
    a074:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a076:	6a3a      	ldr	r2, [r7, #32]
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	429a      	cmp	r2, r3
    a07c:	d901      	bls.n	a082 <f_write+0x28e>
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a082:	68fb      	ldr	r3, [r7, #12]
    a084:	681a      	ldr	r2, [r3, #0]
    a086:	68fb      	ldr	r3, [r7, #12]
    a088:	699b      	ldr	r3, [r3, #24]
    a08a:	0019      	movs	r1, r3
    a08c:	0010      	movs	r0, r2
    a08e:	4b29      	ldr	r3, [pc, #164]	; (a134 <f_write+0x340>)
    a090:	4798      	blx	r3
    a092:	1e03      	subs	r3, r0, #0
    a094:	d009      	beq.n	a0aa <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	799b      	ldrb	r3, [r3, #6]
    a09a:	2280      	movs	r2, #128	; 0x80
    a09c:	4252      	negs	r2, r2
    a09e:	4313      	orrs	r3, r2
    a0a0:	b2da      	uxtb	r2, r3
    a0a2:	68fb      	ldr	r3, [r7, #12]
    a0a4:	719a      	strb	r2, [r3, #6]
    a0a6:	2301      	movs	r3, #1
    a0a8:	e03c      	b.n	a124 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a0aa:	68fb      	ldr	r3, [r7, #12]
    a0ac:	681a      	ldr	r2, [r3, #0]
    a0ae:	68fb      	ldr	r3, [r7, #12]
    a0b0:	689b      	ldr	r3, [r3, #8]
    a0b2:	05db      	lsls	r3, r3, #23
    a0b4:	0ddb      	lsrs	r3, r3, #23
    a0b6:	3330      	adds	r3, #48	; 0x30
    a0b8:	18d3      	adds	r3, r2, r3
    a0ba:	6a3a      	ldr	r2, [r7, #32]
    a0bc:	69b9      	ldr	r1, [r7, #24]
    a0be:	0018      	movs	r0, r3
    a0c0:	4b1f      	ldr	r3, [pc, #124]	; (a140 <f_write+0x34c>)
    a0c2:	4798      	blx	r3
		fp->fs->wflag = 1;
    a0c4:	68fb      	ldr	r3, [r7, #12]
    a0c6:	681b      	ldr	r3, [r3, #0]
    a0c8:	2201      	movs	r2, #1
    a0ca:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a0cc:	69ba      	ldr	r2, [r7, #24]
    a0ce:	6a3b      	ldr	r3, [r7, #32]
    a0d0:	18d3      	adds	r3, r2, r3
    a0d2:	61bb      	str	r3, [r7, #24]
    a0d4:	68fb      	ldr	r3, [r7, #12]
    a0d6:	689a      	ldr	r2, [r3, #8]
    a0d8:	6a3b      	ldr	r3, [r7, #32]
    a0da:	18d2      	adds	r2, r2, r3
    a0dc:	68fb      	ldr	r3, [r7, #12]
    a0de:	609a      	str	r2, [r3, #8]
    a0e0:	683b      	ldr	r3, [r7, #0]
    a0e2:	681a      	ldr	r2, [r3, #0]
    a0e4:	6a3b      	ldr	r3, [r7, #32]
    a0e6:	18d2      	adds	r2, r2, r3
    a0e8:	683b      	ldr	r3, [r7, #0]
    a0ea:	601a      	str	r2, [r3, #0]
    a0ec:	687a      	ldr	r2, [r7, #4]
    a0ee:	6a3b      	ldr	r3, [r7, #32]
    a0f0:	1ad3      	subs	r3, r2, r3
    a0f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d000      	beq.n	a0fc <f_write+0x308>
    a0fa:	e6b7      	b.n	9e6c <f_write+0x78>
    a0fc:	e000      	b.n	a100 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a0fe:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a100:	68fb      	ldr	r3, [r7, #12]
    a102:	689a      	ldr	r2, [r3, #8]
    a104:	68fb      	ldr	r3, [r7, #12]
    a106:	68db      	ldr	r3, [r3, #12]
    a108:	429a      	cmp	r2, r3
    a10a:	d903      	bls.n	a114 <f_write+0x320>
    a10c:	68fb      	ldr	r3, [r7, #12]
    a10e:	689a      	ldr	r2, [r3, #8]
    a110:	68fb      	ldr	r3, [r7, #12]
    a112:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a114:	68fb      	ldr	r3, [r7, #12]
    a116:	799b      	ldrb	r3, [r3, #6]
    a118:	2220      	movs	r2, #32
    a11a:	4313      	orrs	r3, r2
    a11c:	b2da      	uxtb	r2, r3
    a11e:	68fb      	ldr	r3, [r7, #12]
    a120:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a122:	2300      	movs	r3, #0
}
    a124:	0018      	movs	r0, r3
    a126:	46bd      	mov	sp, r7
    a128:	b00b      	add	sp, #44	; 0x2c
    a12a:	bd90      	pop	{r4, r7, pc}
    a12c:	00009819 	.word	0x00009819
    a130:	000078e1 	.word	0x000078e1
    a134:	000071d9 	.word	0x000071d9
    a138:	00007439 	.word	0x00007439
    a13c:	00006ec5 	.word	0x00006ec5
    a140:	000070f5 	.word	0x000070f5

0000a144 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a144:	b590      	push	{r4, r7, lr}
    a146:	b087      	sub	sp, #28
    a148:	af00      	add	r7, sp, #0
    a14a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	681a      	ldr	r2, [r3, #0]
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	889b      	ldrh	r3, [r3, #4]
    a154:	2117      	movs	r1, #23
    a156:	187c      	adds	r4, r7, r1
    a158:	0019      	movs	r1, r3
    a15a:	0010      	movs	r0, r2
    a15c:	4b55      	ldr	r3, [pc, #340]	; (a2b4 <f_sync+0x170>)
    a15e:	4798      	blx	r3
    a160:	0003      	movs	r3, r0
    a162:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a164:	2317      	movs	r3, #23
    a166:	18fb      	adds	r3, r7, r3
    a168:	781b      	ldrb	r3, [r3, #0]
    a16a:	2b00      	cmp	r3, #0
    a16c:	d000      	beq.n	a170 <f_sync+0x2c>
    a16e:	e09a      	b.n	a2a6 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	799b      	ldrb	r3, [r3, #6]
    a174:	001a      	movs	r2, r3
    a176:	2320      	movs	r3, #32
    a178:	4013      	ands	r3, r2
    a17a:	d100      	bne.n	a17e <f_sync+0x3a>
    a17c:	e093      	b.n	a2a6 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a17e:	687b      	ldr	r3, [r7, #4]
    a180:	681a      	ldr	r2, [r3, #0]
    a182:	687b      	ldr	r3, [r7, #4]
    a184:	69db      	ldr	r3, [r3, #28]
    a186:	2117      	movs	r1, #23
    a188:	187c      	adds	r4, r7, r1
    a18a:	0019      	movs	r1, r3
    a18c:	0010      	movs	r0, r2
    a18e:	4b4a      	ldr	r3, [pc, #296]	; (a2b8 <f_sync+0x174>)
    a190:	4798      	blx	r3
    a192:	0003      	movs	r3, r0
    a194:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a196:	2317      	movs	r3, #23
    a198:	18fb      	adds	r3, r7, r3
    a19a:	781b      	ldrb	r3, [r3, #0]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d000      	beq.n	a1a2 <f_sync+0x5e>
    a1a0:	e081      	b.n	a2a6 <f_sync+0x162>
				dir = fp->dir_ptr;
    a1a2:	687b      	ldr	r3, [r7, #4]
    a1a4:	6a1b      	ldr	r3, [r3, #32]
    a1a6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a1a8:	693b      	ldr	r3, [r7, #16]
    a1aa:	330b      	adds	r3, #11
    a1ac:	693a      	ldr	r2, [r7, #16]
    a1ae:	320b      	adds	r2, #11
    a1b0:	7812      	ldrb	r2, [r2, #0]
    a1b2:	2120      	movs	r1, #32
    a1b4:	430a      	orrs	r2, r1
    a1b6:	b2d2      	uxtb	r2, r2
    a1b8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a1ba:	693b      	ldr	r3, [r7, #16]
    a1bc:	331c      	adds	r3, #28
    a1be:	001a      	movs	r2, r3
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	68db      	ldr	r3, [r3, #12]
    a1c4:	b2db      	uxtb	r3, r3
    a1c6:	7013      	strb	r3, [r2, #0]
    a1c8:	693b      	ldr	r3, [r7, #16]
    a1ca:	331d      	adds	r3, #29
    a1cc:	001a      	movs	r2, r3
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	68db      	ldr	r3, [r3, #12]
    a1d2:	b29b      	uxth	r3, r3
    a1d4:	0a1b      	lsrs	r3, r3, #8
    a1d6:	b29b      	uxth	r3, r3
    a1d8:	b2db      	uxtb	r3, r3
    a1da:	7013      	strb	r3, [r2, #0]
    a1dc:	693b      	ldr	r3, [r7, #16]
    a1de:	331e      	adds	r3, #30
    a1e0:	001a      	movs	r2, r3
    a1e2:	687b      	ldr	r3, [r7, #4]
    a1e4:	68db      	ldr	r3, [r3, #12]
    a1e6:	0c1b      	lsrs	r3, r3, #16
    a1e8:	b2db      	uxtb	r3, r3
    a1ea:	7013      	strb	r3, [r2, #0]
    a1ec:	693b      	ldr	r3, [r7, #16]
    a1ee:	331f      	adds	r3, #31
    a1f0:	001a      	movs	r2, r3
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	68db      	ldr	r3, [r3, #12]
    a1f6:	0e1b      	lsrs	r3, r3, #24
    a1f8:	b2db      	uxtb	r3, r3
    a1fa:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a1fc:	693b      	ldr	r3, [r7, #16]
    a1fe:	331a      	adds	r3, #26
    a200:	001a      	movs	r2, r3
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	691b      	ldr	r3, [r3, #16]
    a206:	b2db      	uxtb	r3, r3
    a208:	7013      	strb	r3, [r2, #0]
    a20a:	693b      	ldr	r3, [r7, #16]
    a20c:	331b      	adds	r3, #27
    a20e:	001a      	movs	r2, r3
    a210:	687b      	ldr	r3, [r7, #4]
    a212:	691b      	ldr	r3, [r3, #16]
    a214:	b29b      	uxth	r3, r3
    a216:	0a1b      	lsrs	r3, r3, #8
    a218:	b29b      	uxth	r3, r3
    a21a:	b2db      	uxtb	r3, r3
    a21c:	7013      	strb	r3, [r2, #0]
    a21e:	693b      	ldr	r3, [r7, #16]
    a220:	3314      	adds	r3, #20
    a222:	001a      	movs	r2, r3
    a224:	687b      	ldr	r3, [r7, #4]
    a226:	691b      	ldr	r3, [r3, #16]
    a228:	0c1b      	lsrs	r3, r3, #16
    a22a:	b2db      	uxtb	r3, r3
    a22c:	7013      	strb	r3, [r2, #0]
    a22e:	693b      	ldr	r3, [r7, #16]
    a230:	3315      	adds	r3, #21
    a232:	001a      	movs	r2, r3
    a234:	687b      	ldr	r3, [r7, #4]
    a236:	691b      	ldr	r3, [r3, #16]
    a238:	0c1b      	lsrs	r3, r3, #16
    a23a:	b29b      	uxth	r3, r3
    a23c:	0a1b      	lsrs	r3, r3, #8
    a23e:	b29b      	uxth	r3, r3
    a240:	b2db      	uxtb	r3, r3
    a242:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a244:	4b1d      	ldr	r3, [pc, #116]	; (a2bc <f_sync+0x178>)
    a246:	4798      	blx	r3
    a248:	0003      	movs	r3, r0
    a24a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a24c:	693b      	ldr	r3, [r7, #16]
    a24e:	3316      	adds	r3, #22
    a250:	68fa      	ldr	r2, [r7, #12]
    a252:	b2d2      	uxtb	r2, r2
    a254:	701a      	strb	r2, [r3, #0]
    a256:	693b      	ldr	r3, [r7, #16]
    a258:	3317      	adds	r3, #23
    a25a:	68fa      	ldr	r2, [r7, #12]
    a25c:	b292      	uxth	r2, r2
    a25e:	0a12      	lsrs	r2, r2, #8
    a260:	b292      	uxth	r2, r2
    a262:	b2d2      	uxtb	r2, r2
    a264:	701a      	strb	r2, [r3, #0]
    a266:	693b      	ldr	r3, [r7, #16]
    a268:	3318      	adds	r3, #24
    a26a:	68fa      	ldr	r2, [r7, #12]
    a26c:	0c12      	lsrs	r2, r2, #16
    a26e:	b2d2      	uxtb	r2, r2
    a270:	701a      	strb	r2, [r3, #0]
    a272:	693b      	ldr	r3, [r7, #16]
    a274:	3319      	adds	r3, #25
    a276:	68fa      	ldr	r2, [r7, #12]
    a278:	0e12      	lsrs	r2, r2, #24
    a27a:	b2d2      	uxtb	r2, r2
    a27c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	799b      	ldrb	r3, [r3, #6]
    a282:	2220      	movs	r2, #32
    a284:	4393      	bics	r3, r2
    a286:	b2da      	uxtb	r2, r3
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a28c:	687b      	ldr	r3, [r7, #4]
    a28e:	681b      	ldr	r3, [r3, #0]
    a290:	2201      	movs	r2, #1
    a292:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	681b      	ldr	r3, [r3, #0]
    a298:	2217      	movs	r2, #23
    a29a:	18bc      	adds	r4, r7, r2
    a29c:	0018      	movs	r0, r3
    a29e:	4b08      	ldr	r3, [pc, #32]	; (a2c0 <f_sync+0x17c>)
    a2a0:	4798      	blx	r3
    a2a2:	0003      	movs	r3, r0
    a2a4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a2a6:	2317      	movs	r3, #23
    a2a8:	18fb      	adds	r3, r7, r3
    a2aa:	781b      	ldrb	r3, [r3, #0]
}
    a2ac:	0018      	movs	r0, r3
    a2ae:	46bd      	mov	sp, r7
    a2b0:	b007      	add	sp, #28
    a2b2:	bd90      	pop	{r4, r7, pc}
    a2b4:	00009819 	.word	0x00009819
    a2b8:	000071d9 	.word	0x000071d9
    a2bc:	00007095 	.word	0x00007095
    a2c0:	000072a1 	.word	0x000072a1

0000a2c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a2c4:	b590      	push	{r4, r7, lr}
    a2c6:	b085      	sub	sp, #20
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a2cc:	230f      	movs	r3, #15
    a2ce:	18fc      	adds	r4, r7, r3
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	0018      	movs	r0, r3
    a2d4:	4b09      	ldr	r3, [pc, #36]	; (a2fc <f_close+0x38>)
    a2d6:	4798      	blx	r3
    a2d8:	0003      	movs	r3, r0
    a2da:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a2dc:	230f      	movs	r3, #15
    a2de:	18fb      	adds	r3, r7, r3
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	2b00      	cmp	r3, #0
    a2e4:	d102      	bne.n	a2ec <f_close+0x28>
    a2e6:	687b      	ldr	r3, [r7, #4]
    a2e8:	2200      	movs	r2, #0
    a2ea:	601a      	str	r2, [r3, #0]
	return res;
    a2ec:	230f      	movs	r3, #15
    a2ee:	18fb      	adds	r3, r7, r3
    a2f0:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a2f2:	0018      	movs	r0, r3
    a2f4:	46bd      	mov	sp, r7
    a2f6:	b005      	add	sp, #20
    a2f8:	bd90      	pop	{r4, r7, pc}
    a2fa:	46c0      	nop			; (mov r8, r8)
    a2fc:	0000a145 	.word	0x0000a145

0000a300 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    a300:	b590      	push	{r4, r7, lr}
    a302:	4c41      	ldr	r4, [pc, #260]	; (a408 <f_opendir+0x108>)
    a304:	44a5      	add	sp, r4
    a306:	af00      	add	r7, sp, #0
    a308:	6078      	str	r0, [r7, #4]
    a30a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    a30c:	6879      	ldr	r1, [r7, #4]
    a30e:	4b3f      	ldr	r3, [pc, #252]	; (a40c <f_opendir+0x10c>)
    a310:	18fc      	adds	r4, r7, r3
    a312:	003b      	movs	r3, r7
    a314:	2200      	movs	r2, #0
    a316:	0018      	movs	r0, r3
    a318:	4b3d      	ldr	r3, [pc, #244]	; (a410 <f_opendir+0x110>)
    a31a:	4798      	blx	r3
    a31c:	0003      	movs	r3, r0
    a31e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a320:	4b3a      	ldr	r3, [pc, #232]	; (a40c <f_opendir+0x10c>)
    a322:	18fb      	adds	r3, r7, r3
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	2b00      	cmp	r3, #0
    a328:	d164      	bne.n	a3f4 <f_opendir+0xf4>
		INIT_BUF(*dj);
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	2282      	movs	r2, #130	; 0x82
    a32e:	0092      	lsls	r2, r2, #2
    a330:	18ba      	adds	r2, r7, r2
    a332:	619a      	str	r2, [r3, #24]
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	2208      	movs	r2, #8
    a338:	18ba      	adds	r2, r7, r2
    a33a:	61da      	str	r2, [r3, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
    a33c:	683a      	ldr	r2, [r7, #0]
    a33e:	4b33      	ldr	r3, [pc, #204]	; (a40c <f_opendir+0x10c>)
    a340:	18fc      	adds	r4, r7, r3
    a342:	687b      	ldr	r3, [r7, #4]
    a344:	0011      	movs	r1, r2
    a346:	0018      	movs	r0, r3
    a348:	4b32      	ldr	r3, [pc, #200]	; (a414 <f_opendir+0x114>)
    a34a:	4798      	blx	r3
    a34c:	0003      	movs	r3, r0
    a34e:	7023      	strb	r3, [r4, #0]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    a350:	4b2e      	ldr	r3, [pc, #184]	; (a40c <f_opendir+0x10c>)
    a352:	18fb      	adds	r3, r7, r3
    a354:	781b      	ldrb	r3, [r3, #0]
    a356:	2b00      	cmp	r3, #0
    a358:	d143      	bne.n	a3e2 <f_opendir+0xe2>
			if (dj->dir) {						/* It is not the root dir */
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	695b      	ldr	r3, [r3, #20]
    a35e:	2b00      	cmp	r3, #0
    a360:	d02c      	beq.n	a3bc <f_opendir+0xbc>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    a362:	687b      	ldr	r3, [r7, #4]
    a364:	695b      	ldr	r3, [r3, #20]
    a366:	330b      	adds	r3, #11
    a368:	781b      	ldrb	r3, [r3, #0]
    a36a:	001a      	movs	r2, r3
    a36c:	2310      	movs	r3, #16
    a36e:	4013      	ands	r3, r2
    a370:	d020      	beq.n	a3b4 <f_opendir+0xb4>
					dj->sclust = LD_CLUST(dj->dir);
    a372:	687b      	ldr	r3, [r7, #4]
    a374:	695b      	ldr	r3, [r3, #20]
    a376:	3315      	adds	r3, #21
    a378:	781b      	ldrb	r3, [r3, #0]
    a37a:	021b      	lsls	r3, r3, #8
    a37c:	b21a      	sxth	r2, r3
    a37e:	687b      	ldr	r3, [r7, #4]
    a380:	695b      	ldr	r3, [r3, #20]
    a382:	3314      	adds	r3, #20
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	b21b      	sxth	r3, r3
    a388:	4313      	orrs	r3, r2
    a38a:	b21b      	sxth	r3, r3
    a38c:	b29b      	uxth	r3, r3
    a38e:	041a      	lsls	r2, r3, #16
    a390:	687b      	ldr	r3, [r7, #4]
    a392:	695b      	ldr	r3, [r3, #20]
    a394:	331b      	adds	r3, #27
    a396:	781b      	ldrb	r3, [r3, #0]
    a398:	021b      	lsls	r3, r3, #8
    a39a:	b219      	sxth	r1, r3
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	695b      	ldr	r3, [r3, #20]
    a3a0:	331a      	adds	r3, #26
    a3a2:	781b      	ldrb	r3, [r3, #0]
    a3a4:	b21b      	sxth	r3, r3
    a3a6:	430b      	orrs	r3, r1
    a3a8:	b21b      	sxth	r3, r3
    a3aa:	b29b      	uxth	r3, r3
    a3ac:	431a      	orrs	r2, r3
    a3ae:	687b      	ldr	r3, [r7, #4]
    a3b0:	609a      	str	r2, [r3, #8]
    a3b2:	e003      	b.n	a3bc <f_opendir+0xbc>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    a3b4:	4b15      	ldr	r3, [pc, #84]	; (a40c <f_opendir+0x10c>)
    a3b6:	18fb      	adds	r3, r7, r3
    a3b8:	2205      	movs	r2, #5
    a3ba:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK) {
    a3bc:	4b13      	ldr	r3, [pc, #76]	; (a40c <f_opendir+0x10c>)
    a3be:	18fb      	adds	r3, r7, r3
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d10d      	bne.n	a3e2 <f_opendir+0xe2>
				dj->id = dj->fs->id;
    a3c6:	687b      	ldr	r3, [r7, #4]
    a3c8:	681b      	ldr	r3, [r3, #0]
    a3ca:	88da      	ldrh	r2, [r3, #6]
    a3cc:	687b      	ldr	r3, [r7, #4]
    a3ce:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    a3d0:	4b0e      	ldr	r3, [pc, #56]	; (a40c <f_opendir+0x10c>)
    a3d2:	18fc      	adds	r4, r7, r3
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	2100      	movs	r1, #0
    a3d8:	0018      	movs	r0, r3
    a3da:	4b0f      	ldr	r3, [pc, #60]	; (a418 <f_opendir+0x118>)
    a3dc:	4798      	blx	r3
    a3de:	0003      	movs	r3, r0
    a3e0:	7023      	strb	r3, [r4, #0]
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    a3e2:	4b0a      	ldr	r3, [pc, #40]	; (a40c <f_opendir+0x10c>)
    a3e4:	18fb      	adds	r3, r7, r3
    a3e6:	781b      	ldrb	r3, [r3, #0]
    a3e8:	2b04      	cmp	r3, #4
    a3ea:	d103      	bne.n	a3f4 <f_opendir+0xf4>
    a3ec:	4b07      	ldr	r3, [pc, #28]	; (a40c <f_opendir+0x10c>)
    a3ee:	18fb      	adds	r3, r7, r3
    a3f0:	2205      	movs	r2, #5
    a3f2:	701a      	strb	r2, [r3, #0]
	}

	LEAVE_FF(dj->fs, res);
    a3f4:	4b05      	ldr	r3, [pc, #20]	; (a40c <f_opendir+0x10c>)
    a3f6:	18fb      	adds	r3, r7, r3
    a3f8:	781b      	ldrb	r3, [r3, #0]
}
    a3fa:	0018      	movs	r0, r3
    a3fc:	46bd      	mov	sp, r7
    a3fe:	2387      	movs	r3, #135	; 0x87
    a400:	009b      	lsls	r3, r3, #2
    a402:	449d      	add	sp, r3
    a404:	bd90      	pop	{r4, r7, pc}
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	fffffde4 	.word	0xfffffde4
    a40c:	00000217 	.word	0x00000217
    a410:	0000921d 	.word	0x0000921d
    a414:	00009011 	.word	0x00009011
    a418:	00007a1d 	.word	0x00007a1d

0000a41c <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    a41c:	b590      	push	{r4, r7, lr}
    a41e:	4c34      	ldr	r4, [pc, #208]	; (a4f0 <f_readdir+0xd4>)
    a420:	44a5      	add	sp, r4
    a422:	af00      	add	r7, sp, #0
    a424:	6078      	str	r0, [r7, #4]
    a426:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    a428:	687b      	ldr	r3, [r7, #4]
    a42a:	681a      	ldr	r2, [r3, #0]
    a42c:	687b      	ldr	r3, [r7, #4]
    a42e:	889b      	ldrh	r3, [r3, #4]
    a430:	4930      	ldr	r1, [pc, #192]	; (a4f4 <f_readdir+0xd8>)
    a432:	187c      	adds	r4, r7, r1
    a434:	0019      	movs	r1, r3
    a436:	0010      	movs	r0, r2
    a438:	4b2f      	ldr	r3, [pc, #188]	; (a4f8 <f_readdir+0xdc>)
    a43a:	4798      	blx	r3
    a43c:	0003      	movs	r3, r0
    a43e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a440:	4b2c      	ldr	r3, [pc, #176]	; (a4f4 <f_readdir+0xd8>)
    a442:	18fb      	adds	r3, r7, r3
    a444:	781b      	ldrb	r3, [r3, #0]
    a446:	2b00      	cmp	r3, #0
    a448:	d149      	bne.n	a4de <f_readdir+0xc2>
		if (!fno) {
    a44a:	683b      	ldr	r3, [r7, #0]
    a44c:	2b00      	cmp	r3, #0
    a44e:	d109      	bne.n	a464 <f_readdir+0x48>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    a450:	4b28      	ldr	r3, [pc, #160]	; (a4f4 <f_readdir+0xd8>)
    a452:	18fc      	adds	r4, r7, r3
    a454:	687b      	ldr	r3, [r7, #4]
    a456:	2100      	movs	r1, #0
    a458:	0018      	movs	r0, r3
    a45a:	4b28      	ldr	r3, [pc, #160]	; (a4fc <f_readdir+0xe0>)
    a45c:	4798      	blx	r3
    a45e:	0003      	movs	r3, r0
    a460:	7023      	strb	r3, [r4, #0]
    a462:	e03c      	b.n	a4de <f_readdir+0xc2>
		} else {
			INIT_BUF(*dj);
    a464:	687b      	ldr	r3, [r7, #4]
    a466:	2282      	movs	r2, #130	; 0x82
    a468:	0092      	lsls	r2, r2, #2
    a46a:	18ba      	adds	r2, r7, r2
    a46c:	619a      	str	r2, [r3, #24]
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	2208      	movs	r2, #8
    a472:	18ba      	adds	r2, r7, r2
    a474:	61da      	str	r2, [r3, #28]
			res = dir_read(dj);				/* Read an directory item */
    a476:	4b1f      	ldr	r3, [pc, #124]	; (a4f4 <f_readdir+0xd8>)
    a478:	18fc      	adds	r4, r7, r3
    a47a:	687b      	ldr	r3, [r7, #4]
    a47c:	0018      	movs	r0, r3
    a47e:	4b20      	ldr	r3, [pc, #128]	; (a500 <f_readdir+0xe4>)
    a480:	4798      	blx	r3
    a482:	0003      	movs	r3, r0
    a484:	7023      	strb	r3, [r4, #0]
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    a486:	4b1b      	ldr	r3, [pc, #108]	; (a4f4 <f_readdir+0xd8>)
    a488:	18fb      	adds	r3, r7, r3
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	2b04      	cmp	r3, #4
    a48e:	d106      	bne.n	a49e <f_readdir+0x82>
				dj->sect = 0;
    a490:	687b      	ldr	r3, [r7, #4]
    a492:	2200      	movs	r2, #0
    a494:	611a      	str	r2, [r3, #16]
				res = FR_OK;
    a496:	4b17      	ldr	r3, [pc, #92]	; (a4f4 <f_readdir+0xd8>)
    a498:	18fb      	adds	r3, r7, r3
    a49a:	2200      	movs	r2, #0
    a49c:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {				/* A valid entry is found */
    a49e:	4b15      	ldr	r3, [pc, #84]	; (a4f4 <f_readdir+0xd8>)
    a4a0:	18fb      	adds	r3, r7, r3
    a4a2:	781b      	ldrb	r3, [r3, #0]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d11a      	bne.n	a4de <f_readdir+0xc2>
				get_fileinfo(dj, fno);		/* Get the object information */
    a4a8:	683a      	ldr	r2, [r7, #0]
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	0011      	movs	r1, r2
    a4ae:	0018      	movs	r0, r3
    a4b0:	4b14      	ldr	r3, [pc, #80]	; (a504 <f_readdir+0xe8>)
    a4b2:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
    a4b4:	4b0f      	ldr	r3, [pc, #60]	; (a4f4 <f_readdir+0xd8>)
    a4b6:	18fc      	adds	r4, r7, r3
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	2100      	movs	r1, #0
    a4bc:	0018      	movs	r0, r3
    a4be:	4b12      	ldr	r3, [pc, #72]	; (a508 <f_readdir+0xec>)
    a4c0:	4798      	blx	r3
    a4c2:	0003      	movs	r3, r0
    a4c4:	7023      	strb	r3, [r4, #0]
				if (res == FR_NO_FILE) {
    a4c6:	4b0b      	ldr	r3, [pc, #44]	; (a4f4 <f_readdir+0xd8>)
    a4c8:	18fb      	adds	r3, r7, r3
    a4ca:	781b      	ldrb	r3, [r3, #0]
    a4cc:	2b04      	cmp	r3, #4
    a4ce:	d106      	bne.n	a4de <f_readdir+0xc2>
					dj->sect = 0;
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	2200      	movs	r2, #0
    a4d4:	611a      	str	r2, [r3, #16]
					res = FR_OK;
    a4d6:	4b07      	ldr	r3, [pc, #28]	; (a4f4 <f_readdir+0xd8>)
    a4d8:	18fb      	adds	r3, r7, r3
    a4da:	2200      	movs	r2, #0
    a4dc:	701a      	strb	r2, [r3, #0]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
    a4de:	4b05      	ldr	r3, [pc, #20]	; (a4f4 <f_readdir+0xd8>)
    a4e0:	18fb      	adds	r3, r7, r3
    a4e2:	781b      	ldrb	r3, [r3, #0]
}
    a4e4:	0018      	movs	r0, r3
    a4e6:	46bd      	mov	sp, r7
    a4e8:	2387      	movs	r3, #135	; 0x87
    a4ea:	009b      	lsls	r3, r3, #2
    a4ec:	449d      	add	sp, r3
    a4ee:	bd90      	pop	{r4, r7, pc}
    a4f0:	fffffde4 	.word	0xfffffde4
    a4f4:	00000217 	.word	0x00000217
    a4f8:	00009819 	.word	0x00009819
    a4fc:	00007a1d 	.word	0x00007a1d
    a500:	00008381 	.word	0x00008381
    a504:	00008dcd 	.word	0x00008dcd
    a508:	00007b4d 	.word	0x00007b4d

0000a50c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a50c:	b590      	push	{r4, r7, lr}
    a50e:	4c8d      	ldr	r4, [pc, #564]	; (a744 <f_unlink+0x238>)
    a510:	44a5      	add	sp, r4
    a512:	af00      	add	r7, sp, #0
    a514:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a516:	4b8c      	ldr	r3, [pc, #560]	; (a748 <f_unlink+0x23c>)
    a518:	18fc      	adds	r4, r7, r3
    a51a:	238e      	movs	r3, #142	; 0x8e
    a51c:	009b      	lsls	r3, r3, #2
    a51e:	18f9      	adds	r1, r7, r3
    a520:	1d3b      	adds	r3, r7, #4
    a522:	2201      	movs	r2, #1
    a524:	0018      	movs	r0, r3
    a526:	4b89      	ldr	r3, [pc, #548]	; (a74c <f_unlink+0x240>)
    a528:	4798      	blx	r3
    a52a:	0003      	movs	r3, r0
    a52c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a52e:	4b86      	ldr	r3, [pc, #536]	; (a748 <f_unlink+0x23c>)
    a530:	18fb      	adds	r3, r7, r3
    a532:	781b      	ldrb	r3, [r3, #0]
    a534:	2b00      	cmp	r3, #0
    a536:	d000      	beq.n	a53a <f_unlink+0x2e>
    a538:	e0fb      	b.n	a732 <f_unlink+0x226>
		INIT_BUF(dj);
    a53a:	238e      	movs	r3, #142	; 0x8e
    a53c:	009b      	lsls	r3, r3, #2
    a53e:	18fb      	adds	r3, r7, r3
    a540:	2282      	movs	r2, #130	; 0x82
    a542:	0092      	lsls	r2, r2, #2
    a544:	18ba      	adds	r2, r7, r2
    a546:	619a      	str	r2, [r3, #24]
    a548:	238e      	movs	r3, #142	; 0x8e
    a54a:	009b      	lsls	r3, r3, #2
    a54c:	18fb      	adds	r3, r7, r3
    a54e:	2208      	movs	r2, #8
    a550:	18ba      	adds	r2, r7, r2
    a552:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a554:	687a      	ldr	r2, [r7, #4]
    a556:	4b7c      	ldr	r3, [pc, #496]	; (a748 <f_unlink+0x23c>)
    a558:	18fc      	adds	r4, r7, r3
    a55a:	238e      	movs	r3, #142	; 0x8e
    a55c:	009b      	lsls	r3, r3, #2
    a55e:	18fb      	adds	r3, r7, r3
    a560:	0011      	movs	r1, r2
    a562:	0018      	movs	r0, r3
    a564:	4b7a      	ldr	r3, [pc, #488]	; (a750 <f_unlink+0x244>)
    a566:	4798      	blx	r3
    a568:	0003      	movs	r3, r0
    a56a:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a56c:	4b76      	ldr	r3, [pc, #472]	; (a748 <f_unlink+0x23c>)
    a56e:	18fb      	adds	r3, r7, r3
    a570:	781b      	ldrb	r3, [r3, #0]
    a572:	2b00      	cmp	r3, #0
    a574:	d000      	beq.n	a578 <f_unlink+0x6c>
    a576:	e0dc      	b.n	a732 <f_unlink+0x226>
			dir = dj.dir;
    a578:	238e      	movs	r3, #142	; 0x8e
    a57a:	009b      	lsls	r3, r3, #2
    a57c:	18fb      	adds	r3, r7, r3
    a57e:	695b      	ldr	r3, [r3, #20]
    a580:	2298      	movs	r2, #152	; 0x98
    a582:	0092      	lsls	r2, r2, #2
    a584:	18ba      	adds	r2, r7, r2
    a586:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a588:	2398      	movs	r3, #152	; 0x98
    a58a:	009b      	lsls	r3, r3, #2
    a58c:	18fb      	adds	r3, r7, r3
    a58e:	681b      	ldr	r3, [r3, #0]
    a590:	2b00      	cmp	r3, #0
    a592:	d104      	bne.n	a59e <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a594:	4b6c      	ldr	r3, [pc, #432]	; (a748 <f_unlink+0x23c>)
    a596:	18fb      	adds	r3, r7, r3
    a598:	2206      	movs	r2, #6
    a59a:	701a      	strb	r2, [r3, #0]
    a59c:	e00d      	b.n	a5ba <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a59e:	2398      	movs	r3, #152	; 0x98
    a5a0:	009b      	lsls	r3, r3, #2
    a5a2:	18fb      	adds	r3, r7, r3
    a5a4:	681b      	ldr	r3, [r3, #0]
    a5a6:	330b      	adds	r3, #11
    a5a8:	781b      	ldrb	r3, [r3, #0]
    a5aa:	001a      	movs	r2, r3
    a5ac:	2301      	movs	r3, #1
    a5ae:	4013      	ands	r3, r2
    a5b0:	d003      	beq.n	a5ba <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a5b2:	4b65      	ldr	r3, [pc, #404]	; (a748 <f_unlink+0x23c>)
    a5b4:	18fb      	adds	r3, r7, r3
    a5b6:	2207      	movs	r2, #7
    a5b8:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a5ba:	2398      	movs	r3, #152	; 0x98
    a5bc:	009b      	lsls	r3, r3, #2
    a5be:	18fb      	adds	r3, r7, r3
    a5c0:	681b      	ldr	r3, [r3, #0]
    a5c2:	3315      	adds	r3, #21
    a5c4:	781b      	ldrb	r3, [r3, #0]
    a5c6:	021b      	lsls	r3, r3, #8
    a5c8:	b21a      	sxth	r2, r3
    a5ca:	2398      	movs	r3, #152	; 0x98
    a5cc:	009b      	lsls	r3, r3, #2
    a5ce:	18fb      	adds	r3, r7, r3
    a5d0:	681b      	ldr	r3, [r3, #0]
    a5d2:	3314      	adds	r3, #20
    a5d4:	781b      	ldrb	r3, [r3, #0]
    a5d6:	b21b      	sxth	r3, r3
    a5d8:	4313      	orrs	r3, r2
    a5da:	b21b      	sxth	r3, r3
    a5dc:	b29b      	uxth	r3, r3
    a5de:	041b      	lsls	r3, r3, #16
    a5e0:	2298      	movs	r2, #152	; 0x98
    a5e2:	0092      	lsls	r2, r2, #2
    a5e4:	18ba      	adds	r2, r7, r2
    a5e6:	6812      	ldr	r2, [r2, #0]
    a5e8:	321b      	adds	r2, #27
    a5ea:	7812      	ldrb	r2, [r2, #0]
    a5ec:	0212      	lsls	r2, r2, #8
    a5ee:	b211      	sxth	r1, r2
    a5f0:	2298      	movs	r2, #152	; 0x98
    a5f2:	0092      	lsls	r2, r2, #2
    a5f4:	18ba      	adds	r2, r7, r2
    a5f6:	6812      	ldr	r2, [r2, #0]
    a5f8:	321a      	adds	r2, #26
    a5fa:	7812      	ldrb	r2, [r2, #0]
    a5fc:	b212      	sxth	r2, r2
    a5fe:	430a      	orrs	r2, r1
    a600:	b212      	sxth	r2, r2
    a602:	b292      	uxth	r2, r2
    a604:	4313      	orrs	r3, r2
    a606:	2297      	movs	r2, #151	; 0x97
    a608:	0092      	lsls	r2, r2, #2
    a60a:	18ba      	adds	r2, r7, r2
    a60c:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    a60e:	4b4e      	ldr	r3, [pc, #312]	; (a748 <f_unlink+0x23c>)
    a610:	18fb      	adds	r3, r7, r3
    a612:	781b      	ldrb	r3, [r3, #0]
    a614:	2b00      	cmp	r3, #0
    a616:	d152      	bne.n	a6be <f_unlink+0x1b2>
    a618:	2398      	movs	r3, #152	; 0x98
    a61a:	009b      	lsls	r3, r3, #2
    a61c:	18fb      	adds	r3, r7, r3
    a61e:	681b      	ldr	r3, [r3, #0]
    a620:	330b      	adds	r3, #11
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	001a      	movs	r2, r3
    a626:	2310      	movs	r3, #16
    a628:	4013      	ands	r3, r2
    a62a:	d048      	beq.n	a6be <f_unlink+0x1b2>
				if (dclst < 2) {
    a62c:	2397      	movs	r3, #151	; 0x97
    a62e:	009b      	lsls	r3, r3, #2
    a630:	18fb      	adds	r3, r7, r3
    a632:	681b      	ldr	r3, [r3, #0]
    a634:	2b01      	cmp	r3, #1
    a636:	d804      	bhi.n	a642 <f_unlink+0x136>
					res = FR_INT_ERR;
    a638:	4b43      	ldr	r3, [pc, #268]	; (a748 <f_unlink+0x23c>)
    a63a:	18fb      	adds	r3, r7, r3
    a63c:	2202      	movs	r2, #2
    a63e:	701a      	strb	r2, [r3, #0]
    a640:	e03d      	b.n	a6be <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    a642:	238e      	movs	r3, #142	; 0x8e
    a644:	009b      	lsls	r3, r3, #2
    a646:	18f9      	adds	r1, r7, r3
    a648:	2385      	movs	r3, #133	; 0x85
    a64a:	009b      	lsls	r3, r3, #2
    a64c:	18fb      	adds	r3, r7, r3
    a64e:	2224      	movs	r2, #36	; 0x24
    a650:	0018      	movs	r0, r3
    a652:	4b40      	ldr	r3, [pc, #256]	; (a754 <f_unlink+0x248>)
    a654:	4798      	blx	r3
					sdj.sclust = dclst;
    a656:	2385      	movs	r3, #133	; 0x85
    a658:	009b      	lsls	r3, r3, #2
    a65a:	18fb      	adds	r3, r7, r3
    a65c:	2297      	movs	r2, #151	; 0x97
    a65e:	0092      	lsls	r2, r2, #2
    a660:	18ba      	adds	r2, r7, r2
    a662:	6812      	ldr	r2, [r2, #0]
    a664:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    a666:	4b38      	ldr	r3, [pc, #224]	; (a748 <f_unlink+0x23c>)
    a668:	18fc      	adds	r4, r7, r3
    a66a:	2385      	movs	r3, #133	; 0x85
    a66c:	009b      	lsls	r3, r3, #2
    a66e:	18fb      	adds	r3, r7, r3
    a670:	2102      	movs	r1, #2
    a672:	0018      	movs	r0, r3
    a674:	4b38      	ldr	r3, [pc, #224]	; (a758 <f_unlink+0x24c>)
    a676:	4798      	blx	r3
    a678:	0003      	movs	r3, r0
    a67a:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    a67c:	4b32      	ldr	r3, [pc, #200]	; (a748 <f_unlink+0x23c>)
    a67e:	18fb      	adds	r3, r7, r3
    a680:	781b      	ldrb	r3, [r3, #0]
    a682:	2b00      	cmp	r3, #0
    a684:	d11b      	bne.n	a6be <f_unlink+0x1b2>
						res = dir_read(&sdj);
    a686:	4b30      	ldr	r3, [pc, #192]	; (a748 <f_unlink+0x23c>)
    a688:	18fc      	adds	r4, r7, r3
    a68a:	2385      	movs	r3, #133	; 0x85
    a68c:	009b      	lsls	r3, r3, #2
    a68e:	18fb      	adds	r3, r7, r3
    a690:	0018      	movs	r0, r3
    a692:	4b32      	ldr	r3, [pc, #200]	; (a75c <f_unlink+0x250>)
    a694:	4798      	blx	r3
    a696:	0003      	movs	r3, r0
    a698:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    a69a:	4b2b      	ldr	r3, [pc, #172]	; (a748 <f_unlink+0x23c>)
    a69c:	18fb      	adds	r3, r7, r3
    a69e:	781b      	ldrb	r3, [r3, #0]
    a6a0:	2b00      	cmp	r3, #0
    a6a2:	d103      	bne.n	a6ac <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    a6a4:	4b28      	ldr	r3, [pc, #160]	; (a748 <f_unlink+0x23c>)
    a6a6:	18fb      	adds	r3, r7, r3
    a6a8:	2207      	movs	r2, #7
    a6aa:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    a6ac:	4b26      	ldr	r3, [pc, #152]	; (a748 <f_unlink+0x23c>)
    a6ae:	18fb      	adds	r3, r7, r3
    a6b0:	781b      	ldrb	r3, [r3, #0]
    a6b2:	2b04      	cmp	r3, #4
    a6b4:	d103      	bne.n	a6be <f_unlink+0x1b2>
    a6b6:	4b24      	ldr	r3, [pc, #144]	; (a748 <f_unlink+0x23c>)
    a6b8:	18fb      	adds	r3, r7, r3
    a6ba:	2200      	movs	r2, #0
    a6bc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    a6be:	4b22      	ldr	r3, [pc, #136]	; (a748 <f_unlink+0x23c>)
    a6c0:	18fb      	adds	r3, r7, r3
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	d134      	bne.n	a732 <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    a6c8:	4b1f      	ldr	r3, [pc, #124]	; (a748 <f_unlink+0x23c>)
    a6ca:	18fc      	adds	r4, r7, r3
    a6cc:	238e      	movs	r3, #142	; 0x8e
    a6ce:	009b      	lsls	r3, r3, #2
    a6d0:	18fb      	adds	r3, r7, r3
    a6d2:	0018      	movs	r0, r3
    a6d4:	4b22      	ldr	r3, [pc, #136]	; (a760 <f_unlink+0x254>)
    a6d6:	4798      	blx	r3
    a6d8:	0003      	movs	r3, r0
    a6da:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    a6dc:	4b1a      	ldr	r3, [pc, #104]	; (a748 <f_unlink+0x23c>)
    a6de:	18fb      	adds	r3, r7, r3
    a6e0:	781b      	ldrb	r3, [r3, #0]
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d125      	bne.n	a732 <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    a6e6:	2397      	movs	r3, #151	; 0x97
    a6e8:	009b      	lsls	r3, r3, #2
    a6ea:	18fb      	adds	r3, r7, r3
    a6ec:	681b      	ldr	r3, [r3, #0]
    a6ee:	2b00      	cmp	r3, #0
    a6f0:	d00f      	beq.n	a712 <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    a6f2:	238e      	movs	r3, #142	; 0x8e
    a6f4:	009b      	lsls	r3, r3, #2
    a6f6:	18fb      	adds	r3, r7, r3
    a6f8:	681b      	ldr	r3, [r3, #0]
    a6fa:	4a13      	ldr	r2, [pc, #76]	; (a748 <f_unlink+0x23c>)
    a6fc:	18bc      	adds	r4, r7, r2
    a6fe:	2297      	movs	r2, #151	; 0x97
    a700:	0092      	lsls	r2, r2, #2
    a702:	18ba      	adds	r2, r7, r2
    a704:	6812      	ldr	r2, [r2, #0]
    a706:	0011      	movs	r1, r2
    a708:	0018      	movs	r0, r3
    a70a:	4b16      	ldr	r3, [pc, #88]	; (a764 <f_unlink+0x258>)
    a70c:	4798      	blx	r3
    a70e:	0003      	movs	r3, r0
    a710:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    a712:	4b0d      	ldr	r3, [pc, #52]	; (a748 <f_unlink+0x23c>)
    a714:	18fb      	adds	r3, r7, r3
    a716:	781b      	ldrb	r3, [r3, #0]
    a718:	2b00      	cmp	r3, #0
    a71a:	d10a      	bne.n	a732 <f_unlink+0x226>
    a71c:	238e      	movs	r3, #142	; 0x8e
    a71e:	009b      	lsls	r3, r3, #2
    a720:	18fb      	adds	r3, r7, r3
    a722:	681b      	ldr	r3, [r3, #0]
    a724:	4a08      	ldr	r2, [pc, #32]	; (a748 <f_unlink+0x23c>)
    a726:	18bc      	adds	r4, r7, r2
    a728:	0018      	movs	r0, r3
    a72a:	4b0f      	ldr	r3, [pc, #60]	; (a768 <f_unlink+0x25c>)
    a72c:	4798      	blx	r3
    a72e:	0003      	movs	r3, r0
    a730:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    a732:	4b05      	ldr	r3, [pc, #20]	; (a748 <f_unlink+0x23c>)
    a734:	18fb      	adds	r3, r7, r3
    a736:	781b      	ldrb	r3, [r3, #0]
}
    a738:	0018      	movs	r0, r3
    a73a:	46bd      	mov	sp, r7
    a73c:	239b      	movs	r3, #155	; 0x9b
    a73e:	009b      	lsls	r3, r3, #2
    a740:	449d      	add	sp, r3
    a742:	bd90      	pop	{r4, r7, pc}
    a744:	fffffd94 	.word	0xfffffd94
    a748:	00000267 	.word	0x00000267
    a74c:	0000921d 	.word	0x0000921d
    a750:	00009011 	.word	0x00009011
    a754:	000070f5 	.word	0x000070f5
    a758:	00007a1d 	.word	0x00007a1d
    a75c:	00008381 	.word	0x00008381
    a760:	000088ad 	.word	0x000088ad
    a764:	00007819 	.word	0x00007819
    a768:	000072a1 	.word	0x000072a1

0000a76c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    a76c:	b590      	push	{r4, r7, lr}
    a76e:	b087      	sub	sp, #28
    a770:	af00      	add	r7, sp, #0
    a772:	0002      	movs	r2, r0
    a774:	6039      	str	r1, [r7, #0]
    a776:	1dfb      	adds	r3, r7, #7
    a778:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    a77a:	230c      	movs	r3, #12
    a77c:	18fb      	adds	r3, r7, r3
    a77e:	1dfa      	adds	r2, r7, #7
    a780:	7812      	ldrb	r2, [r2, #0]
    a782:	701a      	strb	r2, [r3, #0]
	btw = 1;
    a784:	2301      	movs	r3, #1
    a786:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    a788:	2310      	movs	r3, #16
    a78a:	18fb      	adds	r3, r7, r3
    a78c:	697a      	ldr	r2, [r7, #20]
    a78e:	210c      	movs	r1, #12
    a790:	1879      	adds	r1, r7, r1
    a792:	6838      	ldr	r0, [r7, #0]
    a794:	4c06      	ldr	r4, [pc, #24]	; (a7b0 <f_putc+0x44>)
    a796:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    a798:	693a      	ldr	r2, [r7, #16]
    a79a:	697b      	ldr	r3, [r7, #20]
    a79c:	429a      	cmp	r2, r3
    a79e:	d101      	bne.n	a7a4 <f_putc+0x38>
    a7a0:	2301      	movs	r3, #1
    a7a2:	e001      	b.n	a7a8 <f_putc+0x3c>
    a7a4:	2301      	movs	r3, #1
    a7a6:	425b      	negs	r3, r3
}
    a7a8:	0018      	movs	r0, r3
    a7aa:	46bd      	mov	sp, r7
    a7ac:	b007      	add	sp, #28
    a7ae:	bd90      	pop	{r4, r7, pc}
    a7b0:	00009df5 	.word	0x00009df5

0000a7b4 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b084      	sub	sp, #16
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    a7be:	2300      	movs	r3, #0
    a7c0:	60fb      	str	r3, [r7, #12]
    a7c2:	e012      	b.n	a7ea <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	781b      	ldrb	r3, [r3, #0]
    a7c8:	683a      	ldr	r2, [r7, #0]
    a7ca:	0011      	movs	r1, r2
    a7cc:	0018      	movs	r0, r3
    a7ce:	4b0b      	ldr	r3, [pc, #44]	; (a7fc <f_puts+0x48>)
    a7d0:	4798      	blx	r3
    a7d2:	0003      	movs	r3, r0
    a7d4:	3301      	adds	r3, #1
    a7d6:	d102      	bne.n	a7de <f_puts+0x2a>
    a7d8:	2301      	movs	r3, #1
    a7da:	425b      	negs	r3, r3
    a7dc:	e00a      	b.n	a7f4 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    a7de:	687b      	ldr	r3, [r7, #4]
    a7e0:	3301      	adds	r3, #1
    a7e2:	607b      	str	r3, [r7, #4]
    a7e4:	68fb      	ldr	r3, [r7, #12]
    a7e6:	3301      	adds	r3, #1
    a7e8:	60fb      	str	r3, [r7, #12]
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	781b      	ldrb	r3, [r3, #0]
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d1e8      	bne.n	a7c4 <f_puts+0x10>
	}
	return n;
    a7f2:	68fb      	ldr	r3, [r7, #12]
}
    a7f4:	0018      	movs	r0, r3
    a7f6:	46bd      	mov	sp, r7
    a7f8:	b004      	add	sp, #16
    a7fa:	bd80      	pop	{r7, pc}
    a7fc:	0000a76d 	.word	0x0000a76d

0000a800 <ff_convert>:
    a800:	b580      	push	{r7, lr}
    a802:	b084      	sub	sp, #16
    a804:	af00      	add	r7, sp, #0
    a806:	0002      	movs	r2, r0
    a808:	6039      	str	r1, [r7, #0]
    a80a:	1dbb      	adds	r3, r7, #6
    a80c:	801a      	strh	r2, [r3, #0]
    a80e:	1dbb      	adds	r3, r7, #6
    a810:	881b      	ldrh	r3, [r3, #0]
    a812:	2b7f      	cmp	r3, #127	; 0x7f
    a814:	d805      	bhi.n	a822 <ff_convert+0x22>
    a816:	230e      	movs	r3, #14
    a818:	18fb      	adds	r3, r7, r3
    a81a:	1dba      	adds	r2, r7, #6
    a81c:	8812      	ldrh	r2, [r2, #0]
    a81e:	801a      	strh	r2, [r3, #0]
    a820:	e03a      	b.n	a898 <ff_convert+0x98>
    a822:	683b      	ldr	r3, [r7, #0]
    a824:	2b00      	cmp	r3, #0
    a826:	d010      	beq.n	a84a <ff_convert+0x4a>
    a828:	1dbb      	adds	r3, r7, #6
    a82a:	881b      	ldrh	r3, [r3, #0]
    a82c:	2bff      	cmp	r3, #255	; 0xff
    a82e:	d807      	bhi.n	a840 <ff_convert+0x40>
    a830:	1dbb      	adds	r3, r7, #6
    a832:	881b      	ldrh	r3, [r3, #0]
    a834:	3b80      	subs	r3, #128	; 0x80
    a836:	001a      	movs	r2, r3
    a838:	4b1b      	ldr	r3, [pc, #108]	; (a8a8 <ff_convert+0xa8>)
    a83a:	0052      	lsls	r2, r2, #1
    a83c:	5ad2      	ldrh	r2, [r2, r3]
    a83e:	e000      	b.n	a842 <ff_convert+0x42>
    a840:	2200      	movs	r2, #0
    a842:	230e      	movs	r3, #14
    a844:	18fb      	adds	r3, r7, r3
    a846:	801a      	strh	r2, [r3, #0]
    a848:	e026      	b.n	a898 <ff_convert+0x98>
    a84a:	230e      	movs	r3, #14
    a84c:	18fb      	adds	r3, r7, r3
    a84e:	2200      	movs	r2, #0
    a850:	801a      	strh	r2, [r3, #0]
    a852:	e010      	b.n	a876 <ff_convert+0x76>
    a854:	230e      	movs	r3, #14
    a856:	18fb      	adds	r3, r7, r3
    a858:	881a      	ldrh	r2, [r3, #0]
    a85a:	4b13      	ldr	r3, [pc, #76]	; (a8a8 <ff_convert+0xa8>)
    a85c:	0052      	lsls	r2, r2, #1
    a85e:	5ad3      	ldrh	r3, [r2, r3]
    a860:	1dba      	adds	r2, r7, #6
    a862:	8812      	ldrh	r2, [r2, #0]
    a864:	429a      	cmp	r2, r3
    a866:	d00c      	beq.n	a882 <ff_convert+0x82>
    a868:	230e      	movs	r3, #14
    a86a:	18fb      	adds	r3, r7, r3
    a86c:	881a      	ldrh	r2, [r3, #0]
    a86e:	230e      	movs	r3, #14
    a870:	18fb      	adds	r3, r7, r3
    a872:	3201      	adds	r2, #1
    a874:	801a      	strh	r2, [r3, #0]
    a876:	230e      	movs	r3, #14
    a878:	18fb      	adds	r3, r7, r3
    a87a:	881b      	ldrh	r3, [r3, #0]
    a87c:	2b7f      	cmp	r3, #127	; 0x7f
    a87e:	d9e9      	bls.n	a854 <ff_convert+0x54>
    a880:	e000      	b.n	a884 <ff_convert+0x84>
    a882:	46c0      	nop			; (mov r8, r8)
    a884:	230e      	movs	r3, #14
    a886:	18fb      	adds	r3, r7, r3
    a888:	881b      	ldrh	r3, [r3, #0]
    a88a:	3380      	adds	r3, #128	; 0x80
    a88c:	b29a      	uxth	r2, r3
    a88e:	230e      	movs	r3, #14
    a890:	18fb      	adds	r3, r7, r3
    a892:	21ff      	movs	r1, #255	; 0xff
    a894:	400a      	ands	r2, r1
    a896:	801a      	strh	r2, [r3, #0]
    a898:	230e      	movs	r3, #14
    a89a:	18fb      	adds	r3, r7, r3
    a89c:	881b      	ldrh	r3, [r3, #0]
    a89e:	0018      	movs	r0, r3
    a8a0:	46bd      	mov	sp, r7
    a8a2:	b004      	add	sp, #16
    a8a4:	bd80      	pop	{r7, pc}
    a8a6:	46c0      	nop			; (mov r8, r8)
    a8a8:	0000c460 	.word	0x0000c460

0000a8ac <ff_wtoupper>:
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b084      	sub	sp, #16
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	0002      	movs	r2, r0
    a8b4:	1dbb      	adds	r3, r7, #6
    a8b6:	801a      	strh	r2, [r3, #0]
    a8b8:	2300      	movs	r3, #0
    a8ba:	60fb      	str	r3, [r7, #12]
    a8bc:	e002      	b.n	a8c4 <ff_wtoupper+0x18>
    a8be:	68fb      	ldr	r3, [r7, #12]
    a8c0:	3301      	adds	r3, #1
    a8c2:	60fb      	str	r3, [r7, #12]
    a8c4:	4b0f      	ldr	r3, [pc, #60]	; (a904 <ff_wtoupper+0x58>)
    a8c6:	68fa      	ldr	r2, [r7, #12]
    a8c8:	0052      	lsls	r2, r2, #1
    a8ca:	5ad3      	ldrh	r3, [r2, r3]
    a8cc:	2b00      	cmp	r3, #0
    a8ce:	d007      	beq.n	a8e0 <ff_wtoupper+0x34>
    a8d0:	4b0c      	ldr	r3, [pc, #48]	; (a904 <ff_wtoupper+0x58>)
    a8d2:	68fa      	ldr	r2, [r7, #12]
    a8d4:	0052      	lsls	r2, r2, #1
    a8d6:	5ad3      	ldrh	r3, [r2, r3]
    a8d8:	1dba      	adds	r2, r7, #6
    a8da:	8812      	ldrh	r2, [r2, #0]
    a8dc:	429a      	cmp	r2, r3
    a8de:	d1ee      	bne.n	a8be <ff_wtoupper+0x12>
    a8e0:	4b08      	ldr	r3, [pc, #32]	; (a904 <ff_wtoupper+0x58>)
    a8e2:	68fa      	ldr	r2, [r7, #12]
    a8e4:	0052      	lsls	r2, r2, #1
    a8e6:	5ad3      	ldrh	r3, [r2, r3]
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d004      	beq.n	a8f6 <ff_wtoupper+0x4a>
    a8ec:	4b06      	ldr	r3, [pc, #24]	; (a908 <ff_wtoupper+0x5c>)
    a8ee:	68fa      	ldr	r2, [r7, #12]
    a8f0:	0052      	lsls	r2, r2, #1
    a8f2:	5ad3      	ldrh	r3, [r2, r3]
    a8f4:	e001      	b.n	a8fa <ff_wtoupper+0x4e>
    a8f6:	1dbb      	adds	r3, r7, #6
    a8f8:	881b      	ldrh	r3, [r3, #0]
    a8fa:	0018      	movs	r0, r3
    a8fc:	46bd      	mov	sp, r7
    a8fe:	b004      	add	sp, #16
    a900:	bd80      	pop	{r7, pc}
    a902:	46c0      	nop			; (mov r8, r8)
    a904:	0000c560 	.word	0x0000c560
    a908:	0000c740 	.word	0x0000c740

0000a90c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    a910:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    a914:	4b02      	ldr	r3, [pc, #8]	; (a920 <NVIC_SystemReset+0x14>)
    a916:	4a03      	ldr	r2, [pc, #12]	; (a924 <NVIC_SystemReset+0x18>)
    a918:	60da      	str	r2, [r3, #12]
    a91a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    a91e:	e7fe      	b.n	a91e <NVIC_SystemReset+0x12>
    a920:	e000ed00 	.word	0xe000ed00
    a924:	05fa0004 	.word	0x05fa0004

0000a928 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    a928:	b580      	push	{r7, lr}
    a92a:	b082      	sub	sp, #8
    a92c:	af00      	add	r7, sp, #0
    a92e:	0002      	movs	r2, r0
    a930:	6039      	str	r1, [r7, #0]
    a932:	1dfb      	adds	r3, r7, #7
    a934:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a936:	1dfb      	adds	r3, r7, #7
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	2b01      	cmp	r3, #1
    a93c:	d00a      	beq.n	a954 <system_apb_clock_set_mask+0x2c>
    a93e:	2b02      	cmp	r3, #2
    a940:	d00f      	beq.n	a962 <system_apb_clock_set_mask+0x3a>
    a942:	2b00      	cmp	r3, #0
    a944:	d114      	bne.n	a970 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    a946:	4b0e      	ldr	r3, [pc, #56]	; (a980 <system_apb_clock_set_mask+0x58>)
    a948:	4a0d      	ldr	r2, [pc, #52]	; (a980 <system_apb_clock_set_mask+0x58>)
    a94a:	6991      	ldr	r1, [r2, #24]
    a94c:	683a      	ldr	r2, [r7, #0]
    a94e:	430a      	orrs	r2, r1
    a950:	619a      	str	r2, [r3, #24]
			break;
    a952:	e00f      	b.n	a974 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    a954:	4b0a      	ldr	r3, [pc, #40]	; (a980 <system_apb_clock_set_mask+0x58>)
    a956:	4a0a      	ldr	r2, [pc, #40]	; (a980 <system_apb_clock_set_mask+0x58>)
    a958:	69d1      	ldr	r1, [r2, #28]
    a95a:	683a      	ldr	r2, [r7, #0]
    a95c:	430a      	orrs	r2, r1
    a95e:	61da      	str	r2, [r3, #28]
			break;
    a960:	e008      	b.n	a974 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    a962:	4b07      	ldr	r3, [pc, #28]	; (a980 <system_apb_clock_set_mask+0x58>)
    a964:	4a06      	ldr	r2, [pc, #24]	; (a980 <system_apb_clock_set_mask+0x58>)
    a966:	6a11      	ldr	r1, [r2, #32]
    a968:	683a      	ldr	r2, [r7, #0]
    a96a:	430a      	orrs	r2, r1
    a96c:	621a      	str	r2, [r3, #32]
			break;
    a96e:	e001      	b.n	a974 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a970:	2317      	movs	r3, #23
    a972:	e000      	b.n	a976 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    a974:	2300      	movs	r3, #0
}
    a976:	0018      	movs	r0, r3
    a978:	46bd      	mov	sp, r7
    a97a:	b002      	add	sp, #8
    a97c:	bd80      	pop	{r7, pc}
    a97e:	46c0      	nop			; (mov r8, r8)
    a980:	40000400 	.word	0x40000400

0000a984 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    a984:	b580      	push	{r7, lr}
    a986:	b082      	sub	sp, #8
    a988:	af00      	add	r7, sp, #0
    a98a:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    a98c:	687b      	ldr	r3, [r7, #4]
    a98e:	2200      	movs	r2, #0
    a990:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    a992:	687b      	ldr	r3, [r7, #4]
    a994:	2201      	movs	r2, #1
    a996:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    a998:	4b08      	ldr	r3, [pc, #32]	; (a9bc <nvm_get_config_defaults+0x38>)
    a99a:	685b      	ldr	r3, [r3, #4]
    a99c:	06db      	lsls	r3, r3, #27
    a99e:	0f1b      	lsrs	r3, r3, #28
    a9a0:	b2db      	uxtb	r3, r3
    a9a2:	001a      	movs	r2, r3
    a9a4:	687b      	ldr	r3, [r7, #4]
    a9a6:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    a9a8:	687b      	ldr	r3, [r7, #4]
    a9aa:	2200      	movs	r2, #0
    a9ac:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    a9ae:	687b      	ldr	r3, [r7, #4]
    a9b0:	2200      	movs	r2, #0
    a9b2:	711a      	strb	r2, [r3, #4]
}
    a9b4:	46c0      	nop			; (mov r8, r8)
    a9b6:	46bd      	mov	sp, r7
    a9b8:	b002      	add	sp, #8
    a9ba:	bd80      	pop	{r7, pc}
    a9bc:	41004000 	.word	0x41004000

0000a9c0 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    a9c0:	b580      	push	{r7, lr}
    a9c2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    a9c4:	4b02      	ldr	r3, [pc, #8]	; (a9d0 <system_reset+0x10>)
    a9c6:	4798      	blx	r3
}
    a9c8:	46c0      	nop			; (mov r8, r8)
    a9ca:	46bd      	mov	sp, r7
    a9cc:	bd80      	pop	{r7, pc}
    a9ce:	46c0      	nop			; (mov r8, r8)
    a9d0:	0000a90d 	.word	0x0000a90d

0000a9d4 <system_interrupt_enable_global>:
{
    a9d4:	b580      	push	{r7, lr}
    a9d6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    a9d8:	4b04      	ldr	r3, [pc, #16]	; (a9ec <system_interrupt_enable_global+0x18>)
    a9da:	2201      	movs	r2, #1
    a9dc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    a9de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a9e2:	b662      	cpsie	i
}
    a9e4:	46c0      	nop			; (mov r8, r8)
    a9e6:	46bd      	mov	sp, r7
    a9e8:	bd80      	pop	{r7, pc}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	20000009 	.word	0x20000009

0000a9f0 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    a9f0:	b580      	push	{r7, lr}
    a9f2:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    a9f4:	2102      	movs	r1, #2
    a9f6:	2001      	movs	r0, #1
    a9f8:	4b02      	ldr	r3, [pc, #8]	; (aa04 <dsu_crc32_init+0x14>)
    a9fa:	4798      	blx	r3
#endif

}
    a9fc:	46c0      	nop			; (mov r8, r8)
    a9fe:	46bd      	mov	sp, r7
    aa00:	bd80      	pop	{r7, pc}
    aa02:	46c0      	nop			; (mov r8, r8)
    aa04:	0000a929 	.word	0x0000a929

0000aa08 <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    aa08:	b590      	push	{r4, r7, lr}
    aa0a:	b09f      	sub	sp, #124	; 0x7c
    aa0c:	af02      	add	r7, sp, #8

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    aa0e:	4b33      	ldr	r3, [pc, #204]	; (aadc <main+0xd4>)
    aa10:	4798      	blx	r3
	delay_init();
    aa12:	4b33      	ldr	r3, [pc, #204]	; (aae0 <main+0xd8>)
    aa14:	4798      	blx	r3
	InitializeSerialConsole();
    aa16:	4b33      	ldr	r3, [pc, #204]	; (aae4 <main+0xdc>)
    aa18:	4798      	blx	r3
	system_interrupt_enable_global();
    aa1a:	4b33      	ldr	r3, [pc, #204]	; (aae8 <main+0xe0>)
    aa1c:	4798      	blx	r3
	/* Initialize SD MMC stack */
	sd_mmc_init();
    aa1e:	4b33      	ldr	r3, [pc, #204]	; (aaec <main+0xe4>)
    aa20:	4798      	blx	r3

	//Initialize the NVM driver
	configure_nvm();
    aa22:	4b33      	ldr	r3, [pc, #204]	; (aaf0 <main+0xe8>)
    aa24:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    aa26:	4b33      	ldr	r3, [pc, #204]	; (aaf4 <main+0xec>)
    aa28:	2201      	movs	r2, #1
    aa2a:	701a      	strb	r2, [r3, #0]
    aa2c:	f3bf 8f5f 	dmb	sy
    aa30:	b662      	cpsie	i

	//Configure CRC32
	dsu_crc32_init();
    aa32:	4b31      	ldr	r3, [pc, #196]	; (aaf8 <main+0xf0>)
    aa34:	4798      	blx	r3

	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    aa36:	4b31      	ldr	r3, [pc, #196]	; (aafc <main+0xf4>)
    aa38:	0018      	movs	r0, r3
    aa3a:	4b31      	ldr	r3, [pc, #196]	; (ab00 <main+0xf8>)
    aa3c:	4798      	blx	r3

	/*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

	//EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
	//See function inside to see how to open a file
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    aa3e:	4b31      	ldr	r3, [pc, #196]	; (ab04 <main+0xfc>)
    aa40:	0018      	movs	r0, r3
    aa42:	4b2f      	ldr	r3, [pc, #188]	; (ab00 <main+0xf8>)
    aa44:	4798      	blx	r3

	if(StartFilesystemAndTest() == false)
    aa46:	4b30      	ldr	r3, [pc, #192]	; (ab08 <main+0x100>)
    aa48:	4798      	blx	r3
    aa4a:	0003      	movs	r3, r0
    aa4c:	001a      	movs	r2, r3
    aa4e:	2301      	movs	r3, #1
    aa50:	4053      	eors	r3, r2
    aa52:	b2db      	uxtb	r3, r3
    aa54:	2b00      	cmp	r3, #0
    aa56:	d00a      	beq.n	aa6e <main+0x66>
	{
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    aa58:	4b2c      	ldr	r3, [pc, #176]	; (ab0c <main+0x104>)
    aa5a:	0018      	movs	r0, r3
    aa5c:	4b28      	ldr	r3, [pc, #160]	; (ab00 <main+0xf8>)
    aa5e:	4798      	blx	r3
		delay_cycles_ms(5000);
    aa60:	4b2b      	ldr	r3, [pc, #172]	; (ab10 <main+0x108>)
    aa62:	0018      	movs	r0, r3
    aa64:	4b2b      	ldr	r3, [pc, #172]	; (ab14 <main+0x10c>)
    aa66:	4798      	blx	r3
		system_reset();
    aa68:	4b2b      	ldr	r3, [pc, #172]	; (ab18 <main+0x110>)
    aa6a:	4798      	blx	r3
    aa6c:	e003      	b.n	aa76 <main+0x6e>
	}
	else
	{
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    aa6e:	4b2b      	ldr	r3, [pc, #172]	; (ab1c <main+0x114>)
    aa70:	0018      	movs	r0, r3
    aa72:	4b23      	ldr	r3, [pc, #140]	; (ab00 <main+0xf8>)
    aa74:	4798      	blx	r3

	//PERFORM BOOTLOADER HERE!
	//We will ask the NVM driver for information on the MCU (SAMD21)
	struct nvm_parameters parameters;
	char helpStr[64]; //Used to help print values
	nvm_get_parameters (&parameters); //Get NVM parameters
    aa76:	2364      	movs	r3, #100	; 0x64
    aa78:	18fb      	adds	r3, r7, r3
    aa7a:	0018      	movs	r0, r3
    aa7c:	4b28      	ldr	r3, [pc, #160]	; (ab20 <main+0x118>)
    aa7e:	4798      	blx	r3
	snprintf(helpStr, 63,"NVM Info: Number of Pages %d. Size of a page: %d bytes. \r\n", parameters.nvm_number_of_pages, parameters.page_size);
    aa80:	2364      	movs	r3, #100	; 0x64
    aa82:	18fb      	adds	r3, r7, r3
    aa84:	885b      	ldrh	r3, [r3, #2]
    aa86:	0019      	movs	r1, r3
    aa88:	2364      	movs	r3, #100	; 0x64
    aa8a:	18fb      	adds	r3, r7, r3
    aa8c:	781b      	ldrb	r3, [r3, #0]
    aa8e:	4a25      	ldr	r2, [pc, #148]	; (ab24 <main+0x11c>)
    aa90:	2024      	movs	r0, #36	; 0x24
    aa92:	1838      	adds	r0, r7, r0
    aa94:	9300      	str	r3, [sp, #0]
    aa96:	000b      	movs	r3, r1
    aa98:	213f      	movs	r1, #63	; 0x3f
    aa9a:	4c23      	ldr	r4, [pc, #140]	; (ab28 <main+0x120>)
    aa9c:	47a0      	blx	r4
	SerialConsoleWriteString(helpStr);
    aa9e:	2324      	movs	r3, #36	; 0x24
    aaa0:	18fb      	adds	r3, r7, r3
    aaa2:	0018      	movs	r0, r3
    aaa4:	4b16      	ldr	r3, [pc, #88]	; (ab00 <main+0xf8>)
    aaa6:	4798      	blx	r3
	
	delay_cycles_ms(2000); //Delay to allow print
    aaa8:	23fa      	movs	r3, #250	; 0xfa
    aaaa:	00db      	lsls	r3, r3, #3
    aaac:	0018      	movs	r0, r3
    aaae:	4b19      	ldr	r3, [pc, #100]	; (ab14 <main+0x10c>)
    aab0:	4798      	blx	r3
		} else {
		SerialConsoleWriteString("\r\nNo B to be found :(\r\n");
	}
	
	*/
	check_fw_update();
    aab2:	4b1e      	ldr	r3, [pc, #120]	; (ab2c <main+0x124>)
    aab4:	4798      	blx	r3
#endif

	/*END BOOTLOADER HERE!*/

	//4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    aab6:	4b1e      	ldr	r3, [pc, #120]	; (ab30 <main+0x128>)
    aab8:	0018      	movs	r0, r3
    aaba:	4b11      	ldr	r3, [pc, #68]	; (ab00 <main+0xf8>)
    aabc:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    aabe:	2064      	movs	r0, #100	; 0x64
    aac0:	4b14      	ldr	r3, [pc, #80]	; (ab14 <main+0x10c>)
    aac2:	4798      	blx	r3
		
		//Deinitialize HW - deinitialize started HW here!
		DeinitializeSerialConsole(); //Deinitializes UART
    aac4:	4b1b      	ldr	r3, [pc, #108]	; (ab34 <main+0x12c>)
    aac6:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    aac8:	4b1b      	ldr	r3, [pc, #108]	; (ab38 <main+0x130>)
    aaca:	4798      	blx	r3


		//Jump to application
		jumpToApplication();
    aacc:	4b1b      	ldr	r3, [pc, #108]	; (ab3c <main+0x134>)
    aace:	4798      	blx	r3
    aad0:	2300      	movs	r3, #0

		//Should not reach here! The device should have jumped to the main FW.
	
}
    aad2:	0018      	movs	r0, r3
    aad4:	46bd      	mov	sp, r7
    aad6:	b01d      	add	sp, #116	; 0x74
    aad8:	bd90      	pop	{r4, r7, pc}
    aada:	46c0      	nop			; (mov r8, r8)
    aadc:	00006945 	.word	0x00006945
    aae0:	00000149 	.word	0x00000149
    aae4:	00000a81 	.word	0x00000a81
    aae8:	0000a9d5 	.word	0x0000a9d5
    aaec:	0000198d 	.word	0x0000198d
    aaf0:	0000ae21 	.word	0x0000ae21
    aaf4:	20000009 	.word	0x20000009
    aaf8:	0000a9f1 	.word	0x0000a9f1
    aafc:	0000c920 	.word	0x0000c920
    ab00:	00000b0d 	.word	0x00000b0d
    ab04:	0000c93c 	.word	0x0000c93c
    ab08:	0000ab41 	.word	0x0000ab41
    ab0c:	0000c964 	.word	0x0000c964
    ab10:	00001388 	.word	0x00001388
    ab14:	000001a1 	.word	0x000001a1
    ab18:	0000a9c1 	.word	0x0000a9c1
    ab1c:	0000c9b0 	.word	0x0000c9b0
    ab20:	000004a5 	.word	0x000004a5
    ab24:	0000c9e4 	.word	0x0000c9e4
    ab28:	0000b665 	.word	0x0000b665
    ab2c:	0000ae4d 	.word	0x0000ae4d
    ab30:	0000ca20 	.word	0x0000ca20
    ab34:	00000af1 	.word	0x00000af1
    ab38:	00002735 	.word	0x00002735
    ab3c:	0000ade9 	.word	0x0000ade9

0000ab40 <StartFilesystemAndTest>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       Returns true is SD card and file system test passed. False otherwise.
******************************************************************************/
static bool StartFilesystemAndTest(void)
{
    ab40:	b590      	push	{r4, r7, lr}
    ab42:	b0c5      	sub	sp, #276	; 0x114
    ab44:	af00      	add	r7, sp, #0
	bool sdCardPass = true;
    ab46:	2310      	movs	r3, #16
    ab48:	33ff      	adds	r3, #255	; 0xff
    ab4a:	18fb      	adds	r3, r7, r3
    ab4c:	2201      	movs	r2, #1
    ab4e:	701a      	strb	r2, [r3, #0]
	uint8_t binbuff[256];

	//Before we begin - fill buffer for binary write test
	//Fill binbuff with values 0x00 - 0xFF
	for(int i = 0; i < 256; i++)
    ab50:	2300      	movs	r3, #0
    ab52:	2284      	movs	r2, #132	; 0x84
    ab54:	0052      	lsls	r2, r2, #1
    ab56:	18ba      	adds	r2, r7, r2
    ab58:	6013      	str	r3, [r2, #0]
    ab5a:	e019      	b.n	ab90 <StartFilesystemAndTest+0x50>
	{
		binbuff[i] = i;
    ab5c:	2384      	movs	r3, #132	; 0x84
    ab5e:	005b      	lsls	r3, r3, #1
    ab60:	18fb      	adds	r3, r7, r3
    ab62:	681b      	ldr	r3, [r3, #0]
    ab64:	b2d9      	uxtb	r1, r3
    ab66:	4b84      	ldr	r3, [pc, #528]	; (ad78 <StartFilesystemAndTest+0x238>)
    ab68:	2288      	movs	r2, #136	; 0x88
    ab6a:	0052      	lsls	r2, r2, #1
    ab6c:	18ba      	adds	r2, r7, r2
    ab6e:	18d2      	adds	r2, r2, r3
    ab70:	2384      	movs	r3, #132	; 0x84
    ab72:	005b      	lsls	r3, r3, #1
    ab74:	18fb      	adds	r3, r7, r3
    ab76:	681b      	ldr	r3, [r3, #0]
    ab78:	18d3      	adds	r3, r2, r3
    ab7a:	1c0a      	adds	r2, r1, #0
    ab7c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
    ab7e:	2384      	movs	r3, #132	; 0x84
    ab80:	005b      	lsls	r3, r3, #1
    ab82:	18fb      	adds	r3, r7, r3
    ab84:	681b      	ldr	r3, [r3, #0]
    ab86:	3301      	adds	r3, #1
    ab88:	2284      	movs	r2, #132	; 0x84
    ab8a:	0052      	lsls	r2, r2, #1
    ab8c:	18ba      	adds	r2, r7, r2
    ab8e:	6013      	str	r3, [r2, #0]
    ab90:	2384      	movs	r3, #132	; 0x84
    ab92:	005b      	lsls	r3, r3, #1
    ab94:	18fb      	adds	r3, r7, r3
    ab96:	681b      	ldr	r3, [r3, #0]
    ab98:	2bff      	cmp	r3, #255	; 0xff
    ab9a:	dddf      	ble.n	ab5c <StartFilesystemAndTest+0x1c>
	}

	//MOUNT SD CARD
	Ctrl_status sdStatus= SdCard_Initiate();
    ab9c:	2308      	movs	r3, #8
    ab9e:	33ff      	adds	r3, #255	; 0xff
    aba0:	18fc      	adds	r4, r7, r3
    aba2:	4b76      	ldr	r3, [pc, #472]	; (ad7c <StartFilesystemAndTest+0x23c>)
    aba4:	4798      	blx	r3
    aba6:	0003      	movs	r3, r0
    aba8:	7023      	strb	r3, [r4, #0]
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    abaa:	2308      	movs	r3, #8
    abac:	33ff      	adds	r3, #255	; 0xff
    abae:	18fb      	adds	r3, r7, r3
    abb0:	781b      	ldrb	r3, [r3, #0]
    abb2:	2b00      	cmp	r3, #0
    abb4:	d000      	beq.n	abb8 <StartFilesystemAndTest+0x78>
    abb6:	e0ce      	b.n	ad56 <StartFilesystemAndTest+0x216>
	{
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    abb8:	4b71      	ldr	r3, [pc, #452]	; (ad80 <StartFilesystemAndTest+0x240>)
    abba:	0018      	movs	r0, r3
    abbc:	4b71      	ldr	r3, [pc, #452]	; (ad84 <StartFilesystemAndTest+0x244>)
    abbe:	4798      	blx	r3

		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    abc0:	4b71      	ldr	r3, [pc, #452]	; (ad88 <StartFilesystemAndTest+0x248>)
    abc2:	0018      	movs	r0, r3
    abc4:	4b6f      	ldr	r3, [pc, #444]	; (ad84 <StartFilesystemAndTest+0x244>)
    abc6:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    abc8:	238c      	movs	r3, #140	; 0x8c
    abca:	009a      	lsls	r2, r3, #2
    abcc:	4b6f      	ldr	r3, [pc, #444]	; (ad8c <StartFilesystemAndTest+0x24c>)
    abce:	2100      	movs	r1, #0
    abd0:	0018      	movs	r0, r3
    abd2:	4b6f      	ldr	r3, [pc, #444]	; (ad90 <StartFilesystemAndTest+0x250>)
    abd4:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    abd6:	4b6d      	ldr	r3, [pc, #436]	; (ad8c <StartFilesystemAndTest+0x24c>)
    abd8:	0019      	movs	r1, r3
    abda:	2000      	movs	r0, #0
    abdc:	4b6d      	ldr	r3, [pc, #436]	; (ad94 <StartFilesystemAndTest+0x254>)
    abde:	4798      	blx	r3
    abe0:	0003      	movs	r3, r0
    abe2:	001a      	movs	r2, r3
    abe4:	4b6c      	ldr	r3, [pc, #432]	; (ad98 <StartFilesystemAndTest+0x258>)
    abe6:	701a      	strb	r2, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    abe8:	4b6b      	ldr	r3, [pc, #428]	; (ad98 <StartFilesystemAndTest+0x258>)
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	2b0b      	cmp	r3, #11
    abee:	d10d      	bne.n	ac0c <StartFilesystemAndTest+0xcc>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    abf0:	4b69      	ldr	r3, [pc, #420]	; (ad98 <StartFilesystemAndTest+0x258>)
    abf2:	781b      	ldrb	r3, [r3, #0]
    abf4:	001a      	movs	r2, r3
    abf6:	4b69      	ldr	r3, [pc, #420]	; (ad9c <StartFilesystemAndTest+0x25c>)
    abf8:	0019      	movs	r1, r3
    abfa:	2000      	movs	r0, #0
    abfc:	4b68      	ldr	r3, [pc, #416]	; (ada0 <StartFilesystemAndTest+0x260>)
    abfe:	4798      	blx	r3
			sdCardPass = false;
    ac00:	2310      	movs	r3, #16
    ac02:	33ff      	adds	r3, #255	; 0xff
    ac04:	18fb      	adds	r3, r7, r3
    ac06:	2200      	movs	r2, #0
    ac08:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    ac0a:	e09f      	b.n	ad4c <StartFilesystemAndTest+0x20c>
		}
		SerialConsoleWriteString("[OK]\r\n");
    ac0c:	4b65      	ldr	r3, [pc, #404]	; (ada4 <StartFilesystemAndTest+0x264>)
    ac0e:	0018      	movs	r0, r3
    ac10:	4b5c      	ldr	r3, [pc, #368]	; (ad84 <StartFilesystemAndTest+0x244>)
    ac12:	4798      	blx	r3

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    ac14:	4b64      	ldr	r3, [pc, #400]	; (ada8 <StartFilesystemAndTest+0x268>)
    ac16:	0018      	movs	r0, r3
    ac18:	4b5a      	ldr	r3, [pc, #360]	; (ad84 <StartFilesystemAndTest+0x244>)
    ac1a:	4798      	blx	r3

		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ac1c:	4b63      	ldr	r3, [pc, #396]	; (adac <StartFilesystemAndTest+0x26c>)
    ac1e:	2230      	movs	r2, #48	; 0x30
    ac20:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object,
    ac22:	4962      	ldr	r1, [pc, #392]	; (adac <StartFilesystemAndTest+0x26c>)
    ac24:	4b62      	ldr	r3, [pc, #392]	; (adb0 <StartFilesystemAndTest+0x270>)
    ac26:	220a      	movs	r2, #10
    ac28:	0018      	movs	r0, r3
    ac2a:	4b62      	ldr	r3, [pc, #392]	; (adb4 <StartFilesystemAndTest+0x274>)
    ac2c:	4798      	blx	r3
    ac2e:	0003      	movs	r3, r0
    ac30:	001a      	movs	r2, r3
    ac32:	4b59      	ldr	r3, [pc, #356]	; (ad98 <StartFilesystemAndTest+0x258>)
    ac34:	701a      	strb	r2, [r3, #0]
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		
		if (res != FR_OK)
    ac36:	4b58      	ldr	r3, [pc, #352]	; (ad98 <StartFilesystemAndTest+0x258>)
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d00d      	beq.n	ac5a <StartFilesystemAndTest+0x11a>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    ac3e:	4b56      	ldr	r3, [pc, #344]	; (ad98 <StartFilesystemAndTest+0x258>)
    ac40:	781b      	ldrb	r3, [r3, #0]
    ac42:	001a      	movs	r2, r3
    ac44:	4b55      	ldr	r3, [pc, #340]	; (ad9c <StartFilesystemAndTest+0x25c>)
    ac46:	0019      	movs	r1, r3
    ac48:	2000      	movs	r0, #0
    ac4a:	4b55      	ldr	r3, [pc, #340]	; (ada0 <StartFilesystemAndTest+0x260>)
    ac4c:	4798      	blx	r3
			sdCardPass = false;
    ac4e:	2310      	movs	r3, #16
    ac50:	33ff      	adds	r3, #255	; 0xff
    ac52:	18fb      	adds	r3, r7, r3
    ac54:	2200      	movs	r2, #0
    ac56:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    ac58:	e078      	b.n	ad4c <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    ac5a:	4b52      	ldr	r3, [pc, #328]	; (ada4 <StartFilesystemAndTest+0x264>)
    ac5c:	0018      	movs	r0, r3
    ac5e:	4b49      	ldr	r3, [pc, #292]	; (ad84 <StartFilesystemAndTest+0x244>)
    ac60:	4798      	blx	r3

		//Write to a file
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    ac62:	4b55      	ldr	r3, [pc, #340]	; (adb8 <StartFilesystemAndTest+0x278>)
    ac64:	0018      	movs	r0, r3
    ac66:	4b47      	ldr	r3, [pc, #284]	; (ad84 <StartFilesystemAndTest+0x244>)
    ac68:	4798      	blx	r3

		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    ac6a:	4a51      	ldr	r2, [pc, #324]	; (adb0 <StartFilesystemAndTest+0x270>)
    ac6c:	4b53      	ldr	r3, [pc, #332]	; (adbc <StartFilesystemAndTest+0x27c>)
    ac6e:	0011      	movs	r1, r2
    ac70:	0018      	movs	r0, r3
    ac72:	4b53      	ldr	r3, [pc, #332]	; (adc0 <StartFilesystemAndTest+0x280>)
    ac74:	4798      	blx	r3
    ac76:	1e03      	subs	r3, r0, #0
    ac78:	d10e      	bne.n	ac98 <StartFilesystemAndTest+0x158>
		{
			f_close(&file_object);
    ac7a:	4b4d      	ldr	r3, [pc, #308]	; (adb0 <StartFilesystemAndTest+0x270>)
    ac7c:	0018      	movs	r0, r3
    ac7e:	4b51      	ldr	r3, [pc, #324]	; (adc4 <StartFilesystemAndTest+0x284>)
    ac80:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    ac82:	4b51      	ldr	r3, [pc, #324]	; (adc8 <StartFilesystemAndTest+0x288>)
    ac84:	0019      	movs	r1, r3
    ac86:	2000      	movs	r0, #0
    ac88:	4b45      	ldr	r3, [pc, #276]	; (ada0 <StartFilesystemAndTest+0x260>)
    ac8a:	4798      	blx	r3
			sdCardPass = false;
    ac8c:	2310      	movs	r3, #16
    ac8e:	33ff      	adds	r3, #255	; 0xff
    ac90:	18fb      	adds	r3, r7, r3
    ac92:	2200      	movs	r2, #0
    ac94:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    ac96:	e059      	b.n	ad4c <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    ac98:	4b42      	ldr	r3, [pc, #264]	; (ada4 <StartFilesystemAndTest+0x264>)
    ac9a:	0018      	movs	r0, r3
    ac9c:	4b39      	ldr	r3, [pc, #228]	; (ad84 <StartFilesystemAndTest+0x244>)
    ac9e:	4798      	blx	r3
		f_close(&file_object); //Close file
    aca0:	4b43      	ldr	r3, [pc, #268]	; (adb0 <StartFilesystemAndTest+0x270>)
    aca2:	0018      	movs	r0, r3
    aca4:	4b47      	ldr	r3, [pc, #284]	; (adc4 <StartFilesystemAndTest+0x284>)
    aca6:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    aca8:	4b48      	ldr	r3, [pc, #288]	; (adcc <StartFilesystemAndTest+0x28c>)
    acaa:	0018      	movs	r0, r3
    acac:	4b35      	ldr	r3, [pc, #212]	; (ad84 <StartFilesystemAndTest+0x244>)
    acae:	4798      	blx	r3


		//Write binary file
		//Read SD Card File
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    acb0:	4b47      	ldr	r3, [pc, #284]	; (add0 <StartFilesystemAndTest+0x290>)
    acb2:	2230      	movs	r2, #48	; 0x30
    acb4:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    acb6:	4946      	ldr	r1, [pc, #280]	; (add0 <StartFilesystemAndTest+0x290>)
    acb8:	4b3d      	ldr	r3, [pc, #244]	; (adb0 <StartFilesystemAndTest+0x270>)
    acba:	220a      	movs	r2, #10
    acbc:	0018      	movs	r0, r3
    acbe:	4b3d      	ldr	r3, [pc, #244]	; (adb4 <StartFilesystemAndTest+0x274>)
    acc0:	4798      	blx	r3
    acc2:	0003      	movs	r3, r0
    acc4:	001a      	movs	r2, r3
    acc6:	4b34      	ldr	r3, [pc, #208]	; (ad98 <StartFilesystemAndTest+0x258>)
    acc8:	701a      	strb	r2, [r3, #0]
		
		if (res != FR_OK)
    acca:	4b33      	ldr	r3, [pc, #204]	; (ad98 <StartFilesystemAndTest+0x258>)
    accc:	781b      	ldrb	r3, [r3, #0]
    acce:	2b00      	cmp	r3, #0
    acd0:	d011      	beq.n	acf6 <StartFilesystemAndTest+0x1b6>
		{
			SerialConsoleWriteString("Could not open binary file!\r\n");
    acd2:	4b40      	ldr	r3, [pc, #256]	; (add4 <StartFilesystemAndTest+0x294>)
    acd4:	0018      	movs	r0, r3
    acd6:	4b2b      	ldr	r3, [pc, #172]	; (ad84 <StartFilesystemAndTest+0x244>)
    acd8:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    acda:	4b2f      	ldr	r3, [pc, #188]	; (ad98 <StartFilesystemAndTest+0x258>)
    acdc:	781b      	ldrb	r3, [r3, #0]
    acde:	001a      	movs	r2, r3
    ace0:	4b2e      	ldr	r3, [pc, #184]	; (ad9c <StartFilesystemAndTest+0x25c>)
    ace2:	0019      	movs	r1, r3
    ace4:	2000      	movs	r0, #0
    ace6:	4b2e      	ldr	r3, [pc, #184]	; (ada0 <StartFilesystemAndTest+0x260>)
    ace8:	4798      	blx	r3
			sdCardPass = false;
    acea:	2310      	movs	r3, #16
    acec:	33ff      	adds	r3, #255	; 0xff
    acee:	18fb      	adds	r3, r7, r3
    acf0:	2200      	movs	r2, #0
    acf2:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    acf4:	e02a      	b.n	ad4c <StartFilesystemAndTest+0x20c>
		}

		//Write to a binaryfile
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    acf6:	4b38      	ldr	r3, [pc, #224]	; (add8 <StartFilesystemAndTest+0x298>)
    acf8:	0018      	movs	r0, r3
    acfa:	4b22      	ldr	r3, [pc, #136]	; (ad84 <StartFilesystemAndTest+0x244>)
    acfc:	4798      	blx	r3
		uint32_t varWrite = 0;
    acfe:	2300      	movs	r3, #0
    ad00:	603b      	str	r3, [r7, #0]
		if (0 != f_write(&file_object, binbuff,256, &varWrite))
    ad02:	003c      	movs	r4, r7
    ad04:	2380      	movs	r3, #128	; 0x80
    ad06:	005a      	lsls	r2, r3, #1
    ad08:	1d39      	adds	r1, r7, #4
    ad0a:	4829      	ldr	r0, [pc, #164]	; (adb0 <StartFilesystemAndTest+0x270>)
    ad0c:	0023      	movs	r3, r4
    ad0e:	4c33      	ldr	r4, [pc, #204]	; (addc <StartFilesystemAndTest+0x29c>)
    ad10:	47a0      	blx	r4
    ad12:	1e03      	subs	r3, r0, #0
    ad14:	d00e      	beq.n	ad34 <StartFilesystemAndTest+0x1f4>
		{
			f_close(&file_object);
    ad16:	4b26      	ldr	r3, [pc, #152]	; (adb0 <StartFilesystemAndTest+0x270>)
    ad18:	0018      	movs	r0, r3
    ad1a:	4b2a      	ldr	r3, [pc, #168]	; (adc4 <StartFilesystemAndTest+0x284>)
    ad1c:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    ad1e:	4b2a      	ldr	r3, [pc, #168]	; (adc8 <StartFilesystemAndTest+0x288>)
    ad20:	0019      	movs	r1, r3
    ad22:	2000      	movs	r0, #0
    ad24:	4b1e      	ldr	r3, [pc, #120]	; (ada0 <StartFilesystemAndTest+0x260>)
    ad26:	4798      	blx	r3
			sdCardPass = false;
    ad28:	2310      	movs	r3, #16
    ad2a:	33ff      	adds	r3, #255	; 0xff
    ad2c:	18fb      	adds	r3, r7, r3
    ad2e:	2200      	movs	r2, #0
    ad30:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    ad32:	e00b      	b.n	ad4c <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    ad34:	4b1b      	ldr	r3, [pc, #108]	; (ada4 <StartFilesystemAndTest+0x264>)
    ad36:	0018      	movs	r0, r3
    ad38:	4b12      	ldr	r3, [pc, #72]	; (ad84 <StartFilesystemAndTest+0x244>)
    ad3a:	4798      	blx	r3
		f_close(&file_object); //Close file
    ad3c:	4b1c      	ldr	r3, [pc, #112]	; (adb0 <StartFilesystemAndTest+0x270>)
    ad3e:	0018      	movs	r0, r3
    ad40:	4b20      	ldr	r3, [pc, #128]	; (adc4 <StartFilesystemAndTest+0x284>)
    ad42:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    ad44:	4b21      	ldr	r3, [pc, #132]	; (adcc <StartFilesystemAndTest+0x28c>)
    ad46:	0018      	movs	r0, r3
    ad48:	4b0e      	ldr	r3, [pc, #56]	; (ad84 <StartFilesystemAndTest+0x244>)
    ad4a:	4798      	blx	r3
		
		main_end_of_test:
		SerialConsoleWriteString("End of Test.\n\r");
    ad4c:	4b24      	ldr	r3, [pc, #144]	; (ade0 <StartFilesystemAndTest+0x2a0>)
    ad4e:	0018      	movs	r0, r3
    ad50:	4b0c      	ldr	r3, [pc, #48]	; (ad84 <StartFilesystemAndTest+0x244>)
    ad52:	4798      	blx	r3
    ad54:	e008      	b.n	ad68 <StartFilesystemAndTest+0x228>

	}
	else
	{
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    ad56:	4b23      	ldr	r3, [pc, #140]	; (ade4 <StartFilesystemAndTest+0x2a4>)
    ad58:	0018      	movs	r0, r3
    ad5a:	4b0a      	ldr	r3, [pc, #40]	; (ad84 <StartFilesystemAndTest+0x244>)
    ad5c:	4798      	blx	r3
		sdCardPass = false;
    ad5e:	2310      	movs	r3, #16
    ad60:	33ff      	adds	r3, #255	; 0xff
    ad62:	18fb      	adds	r3, r7, r3
    ad64:	2200      	movs	r2, #0
    ad66:	701a      	strb	r2, [r3, #0]
	}

	return sdCardPass;
    ad68:	2310      	movs	r3, #16
    ad6a:	33ff      	adds	r3, #255	; 0xff
    ad6c:	18fb      	adds	r3, r7, r3
    ad6e:	781b      	ldrb	r3, [r3, #0]
}
    ad70:	0018      	movs	r0, r3
    ad72:	46bd      	mov	sp, r7
    ad74:	b045      	add	sp, #276	; 0x114
    ad76:	bd90      	pop	{r4, r7, pc}
    ad78:	fffffef4 	.word	0xfffffef4
    ad7c:	00000561 	.word	0x00000561
    ad80:	0000ca3c 	.word	0x0000ca3c
    ad84:	00000b0d 	.word	0x00000b0d
    ad88:	0000ca5c 	.word	0x0000ca5c
    ad8c:	20000a24 	.word	0x20000a24
    ad90:	0000b373 	.word	0x0000b373
    ad94:	0000986d 	.word	0x0000986d
    ad98:	20000cd0 	.word	0x20000cd0
    ad9c:	0000ca78 	.word	0x0000ca78
    ada0:	00000b99 	.word	0x00000b99
    ada4:	0000ca88 	.word	0x0000ca88
    ada8:	0000ca90 	.word	0x0000ca90
    adac:	2000000c 	.word	0x2000000c
    adb0:	20000c54 	.word	0x20000c54
    adb4:	000098c5 	.word	0x000098c5
    adb8:	0000caac 	.word	0x0000caac
    adbc:	0000cad0 	.word	0x0000cad0
    adc0:	0000a7b5 	.word	0x0000a7b5
    adc4:	0000a2c5 	.word	0x0000a2c5
    adc8:	0000cae4 	.word	0x0000cae4
    adcc:	0000caf0 	.word	0x0000caf0
    add0:	20000020 	.word	0x20000020
    add4:	0000cb08 	.word	0x0000cb08
    add8:	0000cb28 	.word	0x0000cb28
    addc:	00009df5 	.word	0x00009df5
    ade0:	0000cb4c 	.word	0x0000cb4c
    ade4:	0000cb5c 	.word	0x0000cb5c

0000ade8 <jumpToApplication>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       
******************************************************************************/
static void jumpToApplication(void)
{
    ade8:	b580      	push	{r7, lr}
    adea:	b082      	sub	sp, #8
    adec:	af00      	add	r7, sp, #0
// Function pointer to application section
void (*applicationCodeEntry)(void);

// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    adee:	2390      	movs	r3, #144	; 0x90
    adf0:	025b      	lsls	r3, r3, #9
    adf2:	681b      	ldr	r3, [r3, #0]
    adf4:	603b      	str	r3, [r7, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    adf6:	683b      	ldr	r3, [r7, #0]
    adf8:	f383 8808 	msr	MSP, r3

// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    adfc:	4b06      	ldr	r3, [pc, #24]	; (ae18 <jumpToApplication+0x30>)
    adfe:	2290      	movs	r2, #144	; 0x90
    ae00:	0252      	lsls	r2, r2, #9
    ae02:	609a      	str	r2, [r3, #8]

// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    ae04:	4b05      	ldr	r3, [pc, #20]	; (ae1c <jumpToApplication+0x34>)
    ae06:	681b      	ldr	r3, [r3, #0]
applicationCodeEntry =
    ae08:	607b      	str	r3, [r7, #4]

// Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry, 
//which should be the start of the main FW.
applicationCodeEntry();
    ae0a:	687b      	ldr	r3, [r7, #4]
    ae0c:	4798      	blx	r3
}
    ae0e:	46c0      	nop			; (mov r8, r8)
    ae10:	46bd      	mov	sp, r7
    ae12:	b002      	add	sp, #8
    ae14:	bd80      	pop	{r7, pc}
    ae16:	46c0      	nop			; (mov r8, r8)
    ae18:	e000ed00 	.word	0xe000ed00
    ae1c:	00012004 	.word	0x00012004

0000ae20 <configure_nvm>:
* @brief        Configures the NVM driver
* @details      
* @return       
******************************************************************************/
static void configure_nvm(void)
{
    ae20:	b580      	push	{r7, lr}
    ae22:	b082      	sub	sp, #8
    ae24:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    ae26:	003b      	movs	r3, r7
    ae28:	0018      	movs	r0, r3
    ae2a:	4b06      	ldr	r3, [pc, #24]	; (ae44 <configure_nvm+0x24>)
    ae2c:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    ae2e:	003b      	movs	r3, r7
    ae30:	2200      	movs	r2, #0
    ae32:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    ae34:	003b      	movs	r3, r7
    ae36:	0018      	movs	r0, r3
    ae38:	4b03      	ldr	r3, [pc, #12]	; (ae48 <configure_nvm+0x28>)
    ae3a:	4798      	blx	r3
}
    ae3c:	46c0      	nop			; (mov r8, r8)
    ae3e:	46bd      	mov	sp, r7
    ae40:	b002      	add	sp, #8
    ae42:	bd80      	pop	{r7, pc}
    ae44:	0000a985 	.word	0x0000a985
    ae48:	000003cd 	.word	0x000003cd

0000ae4c <check_fw_update>:
* @details      Read though the sd card, printing the content inisde the sd_card along the way,
*				determine the fireware we need to install according to the flag we used
* @return       (enum firmware_num)Return the firmware enumerator for firmware A or B
******************************************************************************/
int check_fw_update(void)
{	
    ae4c:	b580      	push	{r7, lr}
    ae4e:	b084      	sub	sp, #16
    ae50:	af00      	add	r7, sp, #0
	char* test_flag_A = "FLAGA.TXT";
    ae52:	4b48      	ldr	r3, [pc, #288]	; (af74 <check_fw_update+0x128>)
    ae54:	60bb      	str	r3, [r7, #8]
	char* test_flag_B = "FLAGB.TXT";
    ae56:	4b48      	ldr	r3, [pc, #288]	; (af78 <check_fw_update+0x12c>)
    ae58:	607b      	str	r3, [r7, #4]
	
	
	int fw_num = 0;
    ae5a:	2300      	movs	r3, #0
    ae5c:	60fb      	str	r3, [r7, #12]

	res = f_opendir(&dir, "/");
    ae5e:	4a47      	ldr	r2, [pc, #284]	; (af7c <check_fw_update+0x130>)
    ae60:	4b47      	ldr	r3, [pc, #284]	; (af80 <check_fw_update+0x134>)
    ae62:	0011      	movs	r1, r2
    ae64:	0018      	movs	r0, r3
    ae66:	4b47      	ldr	r3, [pc, #284]	; (af84 <check_fw_update+0x138>)
    ae68:	4798      	blx	r3
    ae6a:	0003      	movs	r3, r0
    ae6c:	001a      	movs	r2, r3
    ae6e:	4b46      	ldr	r3, [pc, #280]	; (af88 <check_fw_update+0x13c>)
    ae70:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
    ae72:	4b45      	ldr	r3, [pc, #276]	; (af88 <check_fw_update+0x13c>)
    ae74:	781b      	ldrb	r3, [r3, #0]
    ae76:	2b00      	cmp	r3, #0
    ae78:	d103      	bne.n	ae82 <check_fw_update+0x36>
	SerialConsoleWriteString("Current flashdisk have the following contents: \r\n");
    ae7a:	4b44      	ldr	r3, [pc, #272]	; (af8c <check_fw_update+0x140>)
    ae7c:	0018      	movs	r0, r3
    ae7e:	4b44      	ldr	r3, [pc, #272]	; (af90 <check_fw_update+0x144>)
    ae80:	4798      	blx	r3

	//read though the directory to find the corresponding file
	while(1)
	{
	res = f_readdir(&dir, &fno);
    ae82:	4a44      	ldr	r2, [pc, #272]	; (af94 <check_fw_update+0x148>)
    ae84:	4b3e      	ldr	r3, [pc, #248]	; (af80 <check_fw_update+0x134>)
    ae86:	0011      	movs	r1, r2
    ae88:	0018      	movs	r0, r3
    ae8a:	4b43      	ldr	r3, [pc, #268]	; (af98 <check_fw_update+0x14c>)
    ae8c:	4798      	blx	r3
    ae8e:	0003      	movs	r3, r0
    ae90:	001a      	movs	r2, r3
    ae92:	4b3d      	ldr	r3, [pc, #244]	; (af88 <check_fw_update+0x13c>)
    ae94:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
    ae96:	4b3c      	ldr	r3, [pc, #240]	; (af88 <check_fw_update+0x13c>)
    ae98:	781b      	ldrb	r3, [r3, #0]
    ae9a:	2b00      	cmp	r3, #0
    ae9c:	d161      	bne.n	af62 <check_fw_update+0x116>
		{
		break;
		}
		//if finish reading
		if(fno.fname[0] == '\0')
    ae9e:	4b3d      	ldr	r3, [pc, #244]	; (af94 <check_fw_update+0x148>)
    aea0:	7a5b      	ldrb	r3, [r3, #9]
    aea2:	2b00      	cmp	r3, #0
    aea4:	d05f      	beq.n	af66 <check_fw_update+0x11a>
		{
		break;
		}

		//see weather the file is an dirctory or file, print accordingly
		if(fno.fattrib & AM_DIR)
    aea6:	4b3b      	ldr	r3, [pc, #236]	; (af94 <check_fw_update+0x148>)
    aea8:	7a1b      	ldrb	r3, [r3, #8]
    aeaa:	001a      	movs	r2, r3
    aeac:	2310      	movs	r3, #16
    aeae:	4013      	ands	r3, r2
    aeb0:	d00c      	beq.n	aecc <check_fw_update+0x80>
		{
		SerialConsoleWriteString("	DIRTORY:  ");
    aeb2:	4b3a      	ldr	r3, [pc, #232]	; (af9c <check_fw_update+0x150>)
    aeb4:	0018      	movs	r0, r3
    aeb6:	4b36      	ldr	r3, [pc, #216]	; (af90 <check_fw_update+0x144>)
    aeb8:	4798      	blx	r3
		SerialConsoleWriteString(fno.fname);
    aeba:	4b39      	ldr	r3, [pc, #228]	; (afa0 <check_fw_update+0x154>)
    aebc:	0018      	movs	r0, r3
    aebe:	4b34      	ldr	r3, [pc, #208]	; (af90 <check_fw_update+0x144>)
    aec0:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    aec2:	4b38      	ldr	r3, [pc, #224]	; (afa4 <check_fw_update+0x158>)
    aec4:	0018      	movs	r0, r3
    aec6:	4b32      	ldr	r3, [pc, #200]	; (af90 <check_fw_update+0x144>)
    aec8:	4798      	blx	r3
    aeca:	e7da      	b.n	ae82 <check_fw_update+0x36>
		}

		//else it is a file
		else
		{
		if(!strcmp(test_flag_A,fno.fname))
    aecc:	4a34      	ldr	r2, [pc, #208]	; (afa0 <check_fw_update+0x154>)
    aece:	68bb      	ldr	r3, [r7, #8]
    aed0:	0011      	movs	r1, r2
    aed2:	0018      	movs	r0, r3
    aed4:	4b34      	ldr	r3, [pc, #208]	; (afa8 <check_fw_update+0x15c>)
    aed6:	4798      	blx	r3
    aed8:	1e03      	subs	r3, r0, #0
    aeda:	d116      	bne.n	af0a <check_fw_update+0xbe>
		{
		fw_num = 1;
    aedc:	2301      	movs	r3, #1
    aede:	60fb      	str	r3, [r7, #12]
		SerialConsoleWriteString("	File:  ");
    aee0:	4b32      	ldr	r3, [pc, #200]	; (afac <check_fw_update+0x160>)
    aee2:	0018      	movs	r0, r3
    aee4:	4b2a      	ldr	r3, [pc, #168]	; (af90 <check_fw_update+0x144>)
    aee6:	4798      	blx	r3
		SerialConsoleWriteString(fno.fname);
    aee8:	4b2d      	ldr	r3, [pc, #180]	; (afa0 <check_fw_update+0x154>)
    aeea:	0018      	movs	r0, r3
    aeec:	4b28      	ldr	r3, [pc, #160]	; (af90 <check_fw_update+0x144>)
    aeee:	4798      	blx	r3
		SerialConsoleWriteString(" ->UPDATE FIRMWARE A\r\n");
    aef0:	4b2f      	ldr	r3, [pc, #188]	; (afb0 <check_fw_update+0x164>)
    aef2:	0018      	movs	r0, r3
    aef4:	4b26      	ldr	r3, [pc, #152]	; (af90 <check_fw_update+0x144>)
    aef6:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    aef8:	4b2a      	ldr	r3, [pc, #168]	; (afa4 <check_fw_update+0x158>)
    aefa:	0018      	movs	r0, r3
    aefc:	4b24      	ldr	r3, [pc, #144]	; (af90 <check_fw_update+0x144>)
    aefe:	4798      	blx	r3
		f_unlink("/FlagA.txt");  //if it is found, need to earse it for the next time use
    af00:	4b2c      	ldr	r3, [pc, #176]	; (afb4 <check_fw_update+0x168>)
    af02:	0018      	movs	r0, r3
    af04:	4b2c      	ldr	r3, [pc, #176]	; (afb8 <check_fw_update+0x16c>)
    af06:	4798      	blx	r3
    af08:	e7bb      	b.n	ae82 <check_fw_update+0x36>

		}
		else if(!strcmp(test_flag_B,fno.fname))
    af0a:	4a25      	ldr	r2, [pc, #148]	; (afa0 <check_fw_update+0x154>)
    af0c:	687b      	ldr	r3, [r7, #4]
    af0e:	0011      	movs	r1, r2
    af10:	0018      	movs	r0, r3
    af12:	4b25      	ldr	r3, [pc, #148]	; (afa8 <check_fw_update+0x15c>)
    af14:	4798      	blx	r3
    af16:	1e03      	subs	r3, r0, #0
    af18:	d116      	bne.n	af48 <check_fw_update+0xfc>
		{
		fw_num = 2;
    af1a:	2302      	movs	r3, #2
    af1c:	60fb      	str	r3, [r7, #12]
		SerialConsoleWriteString("	File:  ");
    af1e:	4b23      	ldr	r3, [pc, #140]	; (afac <check_fw_update+0x160>)
    af20:	0018      	movs	r0, r3
    af22:	4b1b      	ldr	r3, [pc, #108]	; (af90 <check_fw_update+0x144>)
    af24:	4798      	blx	r3
		SerialConsoleWriteString(fno.fname);
    af26:	4b1e      	ldr	r3, [pc, #120]	; (afa0 <check_fw_update+0x154>)
    af28:	0018      	movs	r0, r3
    af2a:	4b19      	ldr	r3, [pc, #100]	; (af90 <check_fw_update+0x144>)
    af2c:	4798      	blx	r3
		SerialConsoleWriteString(" ->UPDATE FIRMWARE B\r\n");
    af2e:	4b23      	ldr	r3, [pc, #140]	; (afbc <check_fw_update+0x170>)
    af30:	0018      	movs	r0, r3
    af32:	4b17      	ldr	r3, [pc, #92]	; (af90 <check_fw_update+0x144>)
    af34:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    af36:	4b1b      	ldr	r3, [pc, #108]	; (afa4 <check_fw_update+0x158>)
    af38:	0018      	movs	r0, r3
    af3a:	4b15      	ldr	r3, [pc, #84]	; (af90 <check_fw_update+0x144>)
    af3c:	4798      	blx	r3
		f_unlink("/FlagB.txt");//if it is found, need to erase it for the next time use
    af3e:	4b20      	ldr	r3, [pc, #128]	; (afc0 <check_fw_update+0x174>)
    af40:	0018      	movs	r0, r3
    af42:	4b1d      	ldr	r3, [pc, #116]	; (afb8 <check_fw_update+0x16c>)
    af44:	4798      	blx	r3
    af46:	e79c      	b.n	ae82 <check_fw_update+0x36>
		}
		else
		{
		SerialConsoleWriteString("	File:  ");
    af48:	4b18      	ldr	r3, [pc, #96]	; (afac <check_fw_update+0x160>)
    af4a:	0018      	movs	r0, r3
    af4c:	4b10      	ldr	r3, [pc, #64]	; (af90 <check_fw_update+0x144>)
    af4e:	4798      	blx	r3
		SerialConsoleWriteString(fno.fname);
    af50:	4b13      	ldr	r3, [pc, #76]	; (afa0 <check_fw_update+0x154>)
    af52:	0018      	movs	r0, r3
    af54:	4b0e      	ldr	r3, [pc, #56]	; (af90 <check_fw_update+0x144>)
    af56:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    af58:	4b12      	ldr	r3, [pc, #72]	; (afa4 <check_fw_update+0x158>)
    af5a:	0018      	movs	r0, r3
    af5c:	4b0c      	ldr	r3, [pc, #48]	; (af90 <check_fw_update+0x144>)
    af5e:	4798      	blx	r3
	res = f_readdir(&dir, &fno);
    af60:	e78f      	b.n	ae82 <check_fw_update+0x36>
		break;
    af62:	46c0      	nop			; (mov r8, r8)
    af64:	e000      	b.n	af68 <check_fw_update+0x11c>
		break;
    af66:	46c0      	nop			; (mov r8, r8)
		}
		}

		}

	return fw_num;
    af68:	68fb      	ldr	r3, [r7, #12]

}
    af6a:	0018      	movs	r0, r3
    af6c:	46bd      	mov	sp, r7
    af6e:	b004      	add	sp, #16
    af70:	bd80      	pop	{r7, pc}
    af72:	46c0      	nop			; (mov r8, r8)
    af74:	0000cb8c 	.word	0x0000cb8c
    af78:	0000cb98 	.word	0x0000cb98
    af7c:	0000cba4 	.word	0x0000cba4
    af80:	20000cac 	.word	0x20000cac
    af84:	0000a301 	.word	0x0000a301
    af88:	20000cd0 	.word	0x20000cd0
    af8c:	0000cba8 	.word	0x0000cba8
    af90:	00000b0d 	.word	0x00000b0d
    af94:	20000a04 	.word	0x20000a04
    af98:	0000a41d 	.word	0x0000a41d
    af9c:	0000cbdc 	.word	0x0000cbdc
    afa0:	20000a0d 	.word	0x20000a0d
    afa4:	0000cbe8 	.word	0x0000cbe8
    afa8:	0000b6c9 	.word	0x0000b6c9
    afac:	0000cbec 	.word	0x0000cbec
    afb0:	0000cbf8 	.word	0x0000cbf8
    afb4:	0000cc10 	.word	0x0000cc10
    afb8:	0000a50d 	.word	0x0000a50d
    afbc:	0000cc1c 	.word	0x0000cc1c
    afc0:	0000cc34 	.word	0x0000cc34

0000afc4 <__udivsi3>:
    afc4:	2200      	movs	r2, #0
    afc6:	0843      	lsrs	r3, r0, #1
    afc8:	428b      	cmp	r3, r1
    afca:	d374      	bcc.n	b0b6 <__udivsi3+0xf2>
    afcc:	0903      	lsrs	r3, r0, #4
    afce:	428b      	cmp	r3, r1
    afd0:	d35f      	bcc.n	b092 <__udivsi3+0xce>
    afd2:	0a03      	lsrs	r3, r0, #8
    afd4:	428b      	cmp	r3, r1
    afd6:	d344      	bcc.n	b062 <__udivsi3+0x9e>
    afd8:	0b03      	lsrs	r3, r0, #12
    afda:	428b      	cmp	r3, r1
    afdc:	d328      	bcc.n	b030 <__udivsi3+0x6c>
    afde:	0c03      	lsrs	r3, r0, #16
    afe0:	428b      	cmp	r3, r1
    afe2:	d30d      	bcc.n	b000 <__udivsi3+0x3c>
    afe4:	22ff      	movs	r2, #255	; 0xff
    afe6:	0209      	lsls	r1, r1, #8
    afe8:	ba12      	rev	r2, r2
    afea:	0c03      	lsrs	r3, r0, #16
    afec:	428b      	cmp	r3, r1
    afee:	d302      	bcc.n	aff6 <__udivsi3+0x32>
    aff0:	1212      	asrs	r2, r2, #8
    aff2:	0209      	lsls	r1, r1, #8
    aff4:	d065      	beq.n	b0c2 <__udivsi3+0xfe>
    aff6:	0b03      	lsrs	r3, r0, #12
    aff8:	428b      	cmp	r3, r1
    affa:	d319      	bcc.n	b030 <__udivsi3+0x6c>
    affc:	e000      	b.n	b000 <__udivsi3+0x3c>
    affe:	0a09      	lsrs	r1, r1, #8
    b000:	0bc3      	lsrs	r3, r0, #15
    b002:	428b      	cmp	r3, r1
    b004:	d301      	bcc.n	b00a <__udivsi3+0x46>
    b006:	03cb      	lsls	r3, r1, #15
    b008:	1ac0      	subs	r0, r0, r3
    b00a:	4152      	adcs	r2, r2
    b00c:	0b83      	lsrs	r3, r0, #14
    b00e:	428b      	cmp	r3, r1
    b010:	d301      	bcc.n	b016 <__udivsi3+0x52>
    b012:	038b      	lsls	r3, r1, #14
    b014:	1ac0      	subs	r0, r0, r3
    b016:	4152      	adcs	r2, r2
    b018:	0b43      	lsrs	r3, r0, #13
    b01a:	428b      	cmp	r3, r1
    b01c:	d301      	bcc.n	b022 <__udivsi3+0x5e>
    b01e:	034b      	lsls	r3, r1, #13
    b020:	1ac0      	subs	r0, r0, r3
    b022:	4152      	adcs	r2, r2
    b024:	0b03      	lsrs	r3, r0, #12
    b026:	428b      	cmp	r3, r1
    b028:	d301      	bcc.n	b02e <__udivsi3+0x6a>
    b02a:	030b      	lsls	r3, r1, #12
    b02c:	1ac0      	subs	r0, r0, r3
    b02e:	4152      	adcs	r2, r2
    b030:	0ac3      	lsrs	r3, r0, #11
    b032:	428b      	cmp	r3, r1
    b034:	d301      	bcc.n	b03a <__udivsi3+0x76>
    b036:	02cb      	lsls	r3, r1, #11
    b038:	1ac0      	subs	r0, r0, r3
    b03a:	4152      	adcs	r2, r2
    b03c:	0a83      	lsrs	r3, r0, #10
    b03e:	428b      	cmp	r3, r1
    b040:	d301      	bcc.n	b046 <__udivsi3+0x82>
    b042:	028b      	lsls	r3, r1, #10
    b044:	1ac0      	subs	r0, r0, r3
    b046:	4152      	adcs	r2, r2
    b048:	0a43      	lsrs	r3, r0, #9
    b04a:	428b      	cmp	r3, r1
    b04c:	d301      	bcc.n	b052 <__udivsi3+0x8e>
    b04e:	024b      	lsls	r3, r1, #9
    b050:	1ac0      	subs	r0, r0, r3
    b052:	4152      	adcs	r2, r2
    b054:	0a03      	lsrs	r3, r0, #8
    b056:	428b      	cmp	r3, r1
    b058:	d301      	bcc.n	b05e <__udivsi3+0x9a>
    b05a:	020b      	lsls	r3, r1, #8
    b05c:	1ac0      	subs	r0, r0, r3
    b05e:	4152      	adcs	r2, r2
    b060:	d2cd      	bcs.n	affe <__udivsi3+0x3a>
    b062:	09c3      	lsrs	r3, r0, #7
    b064:	428b      	cmp	r3, r1
    b066:	d301      	bcc.n	b06c <__udivsi3+0xa8>
    b068:	01cb      	lsls	r3, r1, #7
    b06a:	1ac0      	subs	r0, r0, r3
    b06c:	4152      	adcs	r2, r2
    b06e:	0983      	lsrs	r3, r0, #6
    b070:	428b      	cmp	r3, r1
    b072:	d301      	bcc.n	b078 <__udivsi3+0xb4>
    b074:	018b      	lsls	r3, r1, #6
    b076:	1ac0      	subs	r0, r0, r3
    b078:	4152      	adcs	r2, r2
    b07a:	0943      	lsrs	r3, r0, #5
    b07c:	428b      	cmp	r3, r1
    b07e:	d301      	bcc.n	b084 <__udivsi3+0xc0>
    b080:	014b      	lsls	r3, r1, #5
    b082:	1ac0      	subs	r0, r0, r3
    b084:	4152      	adcs	r2, r2
    b086:	0903      	lsrs	r3, r0, #4
    b088:	428b      	cmp	r3, r1
    b08a:	d301      	bcc.n	b090 <__udivsi3+0xcc>
    b08c:	010b      	lsls	r3, r1, #4
    b08e:	1ac0      	subs	r0, r0, r3
    b090:	4152      	adcs	r2, r2
    b092:	08c3      	lsrs	r3, r0, #3
    b094:	428b      	cmp	r3, r1
    b096:	d301      	bcc.n	b09c <__udivsi3+0xd8>
    b098:	00cb      	lsls	r3, r1, #3
    b09a:	1ac0      	subs	r0, r0, r3
    b09c:	4152      	adcs	r2, r2
    b09e:	0883      	lsrs	r3, r0, #2
    b0a0:	428b      	cmp	r3, r1
    b0a2:	d301      	bcc.n	b0a8 <__udivsi3+0xe4>
    b0a4:	008b      	lsls	r3, r1, #2
    b0a6:	1ac0      	subs	r0, r0, r3
    b0a8:	4152      	adcs	r2, r2
    b0aa:	0843      	lsrs	r3, r0, #1
    b0ac:	428b      	cmp	r3, r1
    b0ae:	d301      	bcc.n	b0b4 <__udivsi3+0xf0>
    b0b0:	004b      	lsls	r3, r1, #1
    b0b2:	1ac0      	subs	r0, r0, r3
    b0b4:	4152      	adcs	r2, r2
    b0b6:	1a41      	subs	r1, r0, r1
    b0b8:	d200      	bcs.n	b0bc <__udivsi3+0xf8>
    b0ba:	4601      	mov	r1, r0
    b0bc:	4152      	adcs	r2, r2
    b0be:	4610      	mov	r0, r2
    b0c0:	4770      	bx	lr
    b0c2:	e7ff      	b.n	b0c4 <__udivsi3+0x100>
    b0c4:	b501      	push	{r0, lr}
    b0c6:	2000      	movs	r0, #0
    b0c8:	f000 f8f0 	bl	b2ac <__aeabi_idiv0>
    b0cc:	bd02      	pop	{r1, pc}
    b0ce:	46c0      	nop			; (mov r8, r8)

0000b0d0 <__aeabi_uidivmod>:
    b0d0:	2900      	cmp	r1, #0
    b0d2:	d0f7      	beq.n	b0c4 <__udivsi3+0x100>
    b0d4:	e776      	b.n	afc4 <__udivsi3>
    b0d6:	4770      	bx	lr

0000b0d8 <__divsi3>:
    b0d8:	4603      	mov	r3, r0
    b0da:	430b      	orrs	r3, r1
    b0dc:	d47f      	bmi.n	b1de <__divsi3+0x106>
    b0de:	2200      	movs	r2, #0
    b0e0:	0843      	lsrs	r3, r0, #1
    b0e2:	428b      	cmp	r3, r1
    b0e4:	d374      	bcc.n	b1d0 <__divsi3+0xf8>
    b0e6:	0903      	lsrs	r3, r0, #4
    b0e8:	428b      	cmp	r3, r1
    b0ea:	d35f      	bcc.n	b1ac <__divsi3+0xd4>
    b0ec:	0a03      	lsrs	r3, r0, #8
    b0ee:	428b      	cmp	r3, r1
    b0f0:	d344      	bcc.n	b17c <__divsi3+0xa4>
    b0f2:	0b03      	lsrs	r3, r0, #12
    b0f4:	428b      	cmp	r3, r1
    b0f6:	d328      	bcc.n	b14a <__divsi3+0x72>
    b0f8:	0c03      	lsrs	r3, r0, #16
    b0fa:	428b      	cmp	r3, r1
    b0fc:	d30d      	bcc.n	b11a <__divsi3+0x42>
    b0fe:	22ff      	movs	r2, #255	; 0xff
    b100:	0209      	lsls	r1, r1, #8
    b102:	ba12      	rev	r2, r2
    b104:	0c03      	lsrs	r3, r0, #16
    b106:	428b      	cmp	r3, r1
    b108:	d302      	bcc.n	b110 <__divsi3+0x38>
    b10a:	1212      	asrs	r2, r2, #8
    b10c:	0209      	lsls	r1, r1, #8
    b10e:	d065      	beq.n	b1dc <__divsi3+0x104>
    b110:	0b03      	lsrs	r3, r0, #12
    b112:	428b      	cmp	r3, r1
    b114:	d319      	bcc.n	b14a <__divsi3+0x72>
    b116:	e000      	b.n	b11a <__divsi3+0x42>
    b118:	0a09      	lsrs	r1, r1, #8
    b11a:	0bc3      	lsrs	r3, r0, #15
    b11c:	428b      	cmp	r3, r1
    b11e:	d301      	bcc.n	b124 <__divsi3+0x4c>
    b120:	03cb      	lsls	r3, r1, #15
    b122:	1ac0      	subs	r0, r0, r3
    b124:	4152      	adcs	r2, r2
    b126:	0b83      	lsrs	r3, r0, #14
    b128:	428b      	cmp	r3, r1
    b12a:	d301      	bcc.n	b130 <__divsi3+0x58>
    b12c:	038b      	lsls	r3, r1, #14
    b12e:	1ac0      	subs	r0, r0, r3
    b130:	4152      	adcs	r2, r2
    b132:	0b43      	lsrs	r3, r0, #13
    b134:	428b      	cmp	r3, r1
    b136:	d301      	bcc.n	b13c <__divsi3+0x64>
    b138:	034b      	lsls	r3, r1, #13
    b13a:	1ac0      	subs	r0, r0, r3
    b13c:	4152      	adcs	r2, r2
    b13e:	0b03      	lsrs	r3, r0, #12
    b140:	428b      	cmp	r3, r1
    b142:	d301      	bcc.n	b148 <__divsi3+0x70>
    b144:	030b      	lsls	r3, r1, #12
    b146:	1ac0      	subs	r0, r0, r3
    b148:	4152      	adcs	r2, r2
    b14a:	0ac3      	lsrs	r3, r0, #11
    b14c:	428b      	cmp	r3, r1
    b14e:	d301      	bcc.n	b154 <__divsi3+0x7c>
    b150:	02cb      	lsls	r3, r1, #11
    b152:	1ac0      	subs	r0, r0, r3
    b154:	4152      	adcs	r2, r2
    b156:	0a83      	lsrs	r3, r0, #10
    b158:	428b      	cmp	r3, r1
    b15a:	d301      	bcc.n	b160 <__divsi3+0x88>
    b15c:	028b      	lsls	r3, r1, #10
    b15e:	1ac0      	subs	r0, r0, r3
    b160:	4152      	adcs	r2, r2
    b162:	0a43      	lsrs	r3, r0, #9
    b164:	428b      	cmp	r3, r1
    b166:	d301      	bcc.n	b16c <__divsi3+0x94>
    b168:	024b      	lsls	r3, r1, #9
    b16a:	1ac0      	subs	r0, r0, r3
    b16c:	4152      	adcs	r2, r2
    b16e:	0a03      	lsrs	r3, r0, #8
    b170:	428b      	cmp	r3, r1
    b172:	d301      	bcc.n	b178 <__divsi3+0xa0>
    b174:	020b      	lsls	r3, r1, #8
    b176:	1ac0      	subs	r0, r0, r3
    b178:	4152      	adcs	r2, r2
    b17a:	d2cd      	bcs.n	b118 <__divsi3+0x40>
    b17c:	09c3      	lsrs	r3, r0, #7
    b17e:	428b      	cmp	r3, r1
    b180:	d301      	bcc.n	b186 <__divsi3+0xae>
    b182:	01cb      	lsls	r3, r1, #7
    b184:	1ac0      	subs	r0, r0, r3
    b186:	4152      	adcs	r2, r2
    b188:	0983      	lsrs	r3, r0, #6
    b18a:	428b      	cmp	r3, r1
    b18c:	d301      	bcc.n	b192 <__divsi3+0xba>
    b18e:	018b      	lsls	r3, r1, #6
    b190:	1ac0      	subs	r0, r0, r3
    b192:	4152      	adcs	r2, r2
    b194:	0943      	lsrs	r3, r0, #5
    b196:	428b      	cmp	r3, r1
    b198:	d301      	bcc.n	b19e <__divsi3+0xc6>
    b19a:	014b      	lsls	r3, r1, #5
    b19c:	1ac0      	subs	r0, r0, r3
    b19e:	4152      	adcs	r2, r2
    b1a0:	0903      	lsrs	r3, r0, #4
    b1a2:	428b      	cmp	r3, r1
    b1a4:	d301      	bcc.n	b1aa <__divsi3+0xd2>
    b1a6:	010b      	lsls	r3, r1, #4
    b1a8:	1ac0      	subs	r0, r0, r3
    b1aa:	4152      	adcs	r2, r2
    b1ac:	08c3      	lsrs	r3, r0, #3
    b1ae:	428b      	cmp	r3, r1
    b1b0:	d301      	bcc.n	b1b6 <__divsi3+0xde>
    b1b2:	00cb      	lsls	r3, r1, #3
    b1b4:	1ac0      	subs	r0, r0, r3
    b1b6:	4152      	adcs	r2, r2
    b1b8:	0883      	lsrs	r3, r0, #2
    b1ba:	428b      	cmp	r3, r1
    b1bc:	d301      	bcc.n	b1c2 <__divsi3+0xea>
    b1be:	008b      	lsls	r3, r1, #2
    b1c0:	1ac0      	subs	r0, r0, r3
    b1c2:	4152      	adcs	r2, r2
    b1c4:	0843      	lsrs	r3, r0, #1
    b1c6:	428b      	cmp	r3, r1
    b1c8:	d301      	bcc.n	b1ce <__divsi3+0xf6>
    b1ca:	004b      	lsls	r3, r1, #1
    b1cc:	1ac0      	subs	r0, r0, r3
    b1ce:	4152      	adcs	r2, r2
    b1d0:	1a41      	subs	r1, r0, r1
    b1d2:	d200      	bcs.n	b1d6 <__divsi3+0xfe>
    b1d4:	4601      	mov	r1, r0
    b1d6:	4152      	adcs	r2, r2
    b1d8:	4610      	mov	r0, r2
    b1da:	4770      	bx	lr
    b1dc:	e05d      	b.n	b29a <__divsi3+0x1c2>
    b1de:	0fca      	lsrs	r2, r1, #31
    b1e0:	d000      	beq.n	b1e4 <__divsi3+0x10c>
    b1e2:	4249      	negs	r1, r1
    b1e4:	1003      	asrs	r3, r0, #32
    b1e6:	d300      	bcc.n	b1ea <__divsi3+0x112>
    b1e8:	4240      	negs	r0, r0
    b1ea:	4053      	eors	r3, r2
    b1ec:	2200      	movs	r2, #0
    b1ee:	469c      	mov	ip, r3
    b1f0:	0903      	lsrs	r3, r0, #4
    b1f2:	428b      	cmp	r3, r1
    b1f4:	d32d      	bcc.n	b252 <__divsi3+0x17a>
    b1f6:	0a03      	lsrs	r3, r0, #8
    b1f8:	428b      	cmp	r3, r1
    b1fa:	d312      	bcc.n	b222 <__divsi3+0x14a>
    b1fc:	22fc      	movs	r2, #252	; 0xfc
    b1fe:	0189      	lsls	r1, r1, #6
    b200:	ba12      	rev	r2, r2
    b202:	0a03      	lsrs	r3, r0, #8
    b204:	428b      	cmp	r3, r1
    b206:	d30c      	bcc.n	b222 <__divsi3+0x14a>
    b208:	0189      	lsls	r1, r1, #6
    b20a:	1192      	asrs	r2, r2, #6
    b20c:	428b      	cmp	r3, r1
    b20e:	d308      	bcc.n	b222 <__divsi3+0x14a>
    b210:	0189      	lsls	r1, r1, #6
    b212:	1192      	asrs	r2, r2, #6
    b214:	428b      	cmp	r3, r1
    b216:	d304      	bcc.n	b222 <__divsi3+0x14a>
    b218:	0189      	lsls	r1, r1, #6
    b21a:	d03a      	beq.n	b292 <__divsi3+0x1ba>
    b21c:	1192      	asrs	r2, r2, #6
    b21e:	e000      	b.n	b222 <__divsi3+0x14a>
    b220:	0989      	lsrs	r1, r1, #6
    b222:	09c3      	lsrs	r3, r0, #7
    b224:	428b      	cmp	r3, r1
    b226:	d301      	bcc.n	b22c <__divsi3+0x154>
    b228:	01cb      	lsls	r3, r1, #7
    b22a:	1ac0      	subs	r0, r0, r3
    b22c:	4152      	adcs	r2, r2
    b22e:	0983      	lsrs	r3, r0, #6
    b230:	428b      	cmp	r3, r1
    b232:	d301      	bcc.n	b238 <__divsi3+0x160>
    b234:	018b      	lsls	r3, r1, #6
    b236:	1ac0      	subs	r0, r0, r3
    b238:	4152      	adcs	r2, r2
    b23a:	0943      	lsrs	r3, r0, #5
    b23c:	428b      	cmp	r3, r1
    b23e:	d301      	bcc.n	b244 <__divsi3+0x16c>
    b240:	014b      	lsls	r3, r1, #5
    b242:	1ac0      	subs	r0, r0, r3
    b244:	4152      	adcs	r2, r2
    b246:	0903      	lsrs	r3, r0, #4
    b248:	428b      	cmp	r3, r1
    b24a:	d301      	bcc.n	b250 <__divsi3+0x178>
    b24c:	010b      	lsls	r3, r1, #4
    b24e:	1ac0      	subs	r0, r0, r3
    b250:	4152      	adcs	r2, r2
    b252:	08c3      	lsrs	r3, r0, #3
    b254:	428b      	cmp	r3, r1
    b256:	d301      	bcc.n	b25c <__divsi3+0x184>
    b258:	00cb      	lsls	r3, r1, #3
    b25a:	1ac0      	subs	r0, r0, r3
    b25c:	4152      	adcs	r2, r2
    b25e:	0883      	lsrs	r3, r0, #2
    b260:	428b      	cmp	r3, r1
    b262:	d301      	bcc.n	b268 <__divsi3+0x190>
    b264:	008b      	lsls	r3, r1, #2
    b266:	1ac0      	subs	r0, r0, r3
    b268:	4152      	adcs	r2, r2
    b26a:	d2d9      	bcs.n	b220 <__divsi3+0x148>
    b26c:	0843      	lsrs	r3, r0, #1
    b26e:	428b      	cmp	r3, r1
    b270:	d301      	bcc.n	b276 <__divsi3+0x19e>
    b272:	004b      	lsls	r3, r1, #1
    b274:	1ac0      	subs	r0, r0, r3
    b276:	4152      	adcs	r2, r2
    b278:	1a41      	subs	r1, r0, r1
    b27a:	d200      	bcs.n	b27e <__divsi3+0x1a6>
    b27c:	4601      	mov	r1, r0
    b27e:	4663      	mov	r3, ip
    b280:	4152      	adcs	r2, r2
    b282:	105b      	asrs	r3, r3, #1
    b284:	4610      	mov	r0, r2
    b286:	d301      	bcc.n	b28c <__divsi3+0x1b4>
    b288:	4240      	negs	r0, r0
    b28a:	2b00      	cmp	r3, #0
    b28c:	d500      	bpl.n	b290 <__divsi3+0x1b8>
    b28e:	4249      	negs	r1, r1
    b290:	4770      	bx	lr
    b292:	4663      	mov	r3, ip
    b294:	105b      	asrs	r3, r3, #1
    b296:	d300      	bcc.n	b29a <__divsi3+0x1c2>
    b298:	4240      	negs	r0, r0
    b29a:	b501      	push	{r0, lr}
    b29c:	2000      	movs	r0, #0
    b29e:	f000 f805 	bl	b2ac <__aeabi_idiv0>
    b2a2:	bd02      	pop	{r1, pc}

0000b2a4 <__aeabi_idivmod>:
    b2a4:	2900      	cmp	r1, #0
    b2a6:	d0f8      	beq.n	b29a <__divsi3+0x1c2>
    b2a8:	e716      	b.n	b0d8 <__divsi3>
    b2aa:	4770      	bx	lr

0000b2ac <__aeabi_idiv0>:
    b2ac:	4770      	bx	lr
    b2ae:	46c0      	nop			; (mov r8, r8)

0000b2b0 <__aeabi_lmul>:
    b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2b2:	46ce      	mov	lr, r9
    b2b4:	4647      	mov	r7, r8
    b2b6:	0415      	lsls	r5, r2, #16
    b2b8:	0c2d      	lsrs	r5, r5, #16
    b2ba:	002e      	movs	r6, r5
    b2bc:	b580      	push	{r7, lr}
    b2be:	0407      	lsls	r7, r0, #16
    b2c0:	0c14      	lsrs	r4, r2, #16
    b2c2:	0c3f      	lsrs	r7, r7, #16
    b2c4:	4699      	mov	r9, r3
    b2c6:	0c03      	lsrs	r3, r0, #16
    b2c8:	437e      	muls	r6, r7
    b2ca:	435d      	muls	r5, r3
    b2cc:	4367      	muls	r7, r4
    b2ce:	4363      	muls	r3, r4
    b2d0:	197f      	adds	r7, r7, r5
    b2d2:	0c34      	lsrs	r4, r6, #16
    b2d4:	19e4      	adds	r4, r4, r7
    b2d6:	469c      	mov	ip, r3
    b2d8:	42a5      	cmp	r5, r4
    b2da:	d903      	bls.n	b2e4 <__aeabi_lmul+0x34>
    b2dc:	2380      	movs	r3, #128	; 0x80
    b2de:	025b      	lsls	r3, r3, #9
    b2e0:	4698      	mov	r8, r3
    b2e2:	44c4      	add	ip, r8
    b2e4:	464b      	mov	r3, r9
    b2e6:	4351      	muls	r1, r2
    b2e8:	4343      	muls	r3, r0
    b2ea:	0436      	lsls	r6, r6, #16
    b2ec:	0c36      	lsrs	r6, r6, #16
    b2ee:	0c25      	lsrs	r5, r4, #16
    b2f0:	0424      	lsls	r4, r4, #16
    b2f2:	4465      	add	r5, ip
    b2f4:	19a4      	adds	r4, r4, r6
    b2f6:	1859      	adds	r1, r3, r1
    b2f8:	1949      	adds	r1, r1, r5
    b2fa:	0020      	movs	r0, r4
    b2fc:	bc0c      	pop	{r2, r3}
    b2fe:	4690      	mov	r8, r2
    b300:	4699      	mov	r9, r3
    b302:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b304 <__libc_init_array>:
    b304:	b570      	push	{r4, r5, r6, lr}
    b306:	2600      	movs	r6, #0
    b308:	4d0c      	ldr	r5, [pc, #48]	; (b33c <__libc_init_array+0x38>)
    b30a:	4c0d      	ldr	r4, [pc, #52]	; (b340 <__libc_init_array+0x3c>)
    b30c:	1b64      	subs	r4, r4, r5
    b30e:	10a4      	asrs	r4, r4, #2
    b310:	42a6      	cmp	r6, r4
    b312:	d109      	bne.n	b328 <__libc_init_array+0x24>
    b314:	2600      	movs	r6, #0
    b316:	f001 fd4f 	bl	cdb8 <_init>
    b31a:	4d0a      	ldr	r5, [pc, #40]	; (b344 <__libc_init_array+0x40>)
    b31c:	4c0a      	ldr	r4, [pc, #40]	; (b348 <__libc_init_array+0x44>)
    b31e:	1b64      	subs	r4, r4, r5
    b320:	10a4      	asrs	r4, r4, #2
    b322:	42a6      	cmp	r6, r4
    b324:	d105      	bne.n	b332 <__libc_init_array+0x2e>
    b326:	bd70      	pop	{r4, r5, r6, pc}
    b328:	00b3      	lsls	r3, r6, #2
    b32a:	58eb      	ldr	r3, [r5, r3]
    b32c:	4798      	blx	r3
    b32e:	3601      	adds	r6, #1
    b330:	e7ee      	b.n	b310 <__libc_init_array+0xc>
    b332:	00b3      	lsls	r3, r6, #2
    b334:	58eb      	ldr	r3, [r5, r3]
    b336:	4798      	blx	r3
    b338:	3601      	adds	r6, #1
    b33a:	e7f2      	b.n	b322 <__libc_init_array+0x1e>
    b33c:	0000cdc4 	.word	0x0000cdc4
    b340:	0000cdc4 	.word	0x0000cdc4
    b344:	0000cdc4 	.word	0x0000cdc4
    b348:	0000cdc8 	.word	0x0000cdc8

0000b34c <malloc>:
    b34c:	b510      	push	{r4, lr}
    b34e:	4b03      	ldr	r3, [pc, #12]	; (b35c <malloc+0x10>)
    b350:	0001      	movs	r1, r0
    b352:	6818      	ldr	r0, [r3, #0]
    b354:	f000 f860 	bl	b418 <_malloc_r>
    b358:	bd10      	pop	{r4, pc}
    b35a:	46c0      	nop			; (mov r8, r8)
    b35c:	20000030 	.word	0x20000030

0000b360 <memcpy>:
    b360:	2300      	movs	r3, #0
    b362:	b510      	push	{r4, lr}
    b364:	429a      	cmp	r2, r3
    b366:	d100      	bne.n	b36a <memcpy+0xa>
    b368:	bd10      	pop	{r4, pc}
    b36a:	5ccc      	ldrb	r4, [r1, r3]
    b36c:	54c4      	strb	r4, [r0, r3]
    b36e:	3301      	adds	r3, #1
    b370:	e7f8      	b.n	b364 <memcpy+0x4>

0000b372 <memset>:
    b372:	0003      	movs	r3, r0
    b374:	1882      	adds	r2, r0, r2
    b376:	4293      	cmp	r3, r2
    b378:	d100      	bne.n	b37c <memset+0xa>
    b37a:	4770      	bx	lr
    b37c:	7019      	strb	r1, [r3, #0]
    b37e:	3301      	adds	r3, #1
    b380:	e7f9      	b.n	b376 <memset+0x4>
	...

0000b384 <_free_r>:
    b384:	b570      	push	{r4, r5, r6, lr}
    b386:	0005      	movs	r5, r0
    b388:	2900      	cmp	r1, #0
    b38a:	d010      	beq.n	b3ae <_free_r+0x2a>
    b38c:	1f0c      	subs	r4, r1, #4
    b38e:	6823      	ldr	r3, [r4, #0]
    b390:	2b00      	cmp	r3, #0
    b392:	da00      	bge.n	b396 <_free_r+0x12>
    b394:	18e4      	adds	r4, r4, r3
    b396:	0028      	movs	r0, r5
    b398:	f000 fb5e 	bl	ba58 <__malloc_lock>
    b39c:	4a1d      	ldr	r2, [pc, #116]	; (b414 <_free_r+0x90>)
    b39e:	6813      	ldr	r3, [r2, #0]
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d105      	bne.n	b3b0 <_free_r+0x2c>
    b3a4:	6063      	str	r3, [r4, #4]
    b3a6:	6014      	str	r4, [r2, #0]
    b3a8:	0028      	movs	r0, r5
    b3aa:	f000 fb56 	bl	ba5a <__malloc_unlock>
    b3ae:	bd70      	pop	{r4, r5, r6, pc}
    b3b0:	42a3      	cmp	r3, r4
    b3b2:	d909      	bls.n	b3c8 <_free_r+0x44>
    b3b4:	6821      	ldr	r1, [r4, #0]
    b3b6:	1860      	adds	r0, r4, r1
    b3b8:	4283      	cmp	r3, r0
    b3ba:	d1f3      	bne.n	b3a4 <_free_r+0x20>
    b3bc:	6818      	ldr	r0, [r3, #0]
    b3be:	685b      	ldr	r3, [r3, #4]
    b3c0:	1841      	adds	r1, r0, r1
    b3c2:	6021      	str	r1, [r4, #0]
    b3c4:	e7ee      	b.n	b3a4 <_free_r+0x20>
    b3c6:	0013      	movs	r3, r2
    b3c8:	685a      	ldr	r2, [r3, #4]
    b3ca:	2a00      	cmp	r2, #0
    b3cc:	d001      	beq.n	b3d2 <_free_r+0x4e>
    b3ce:	42a2      	cmp	r2, r4
    b3d0:	d9f9      	bls.n	b3c6 <_free_r+0x42>
    b3d2:	6819      	ldr	r1, [r3, #0]
    b3d4:	1858      	adds	r0, r3, r1
    b3d6:	42a0      	cmp	r0, r4
    b3d8:	d10b      	bne.n	b3f2 <_free_r+0x6e>
    b3da:	6820      	ldr	r0, [r4, #0]
    b3dc:	1809      	adds	r1, r1, r0
    b3de:	1858      	adds	r0, r3, r1
    b3e0:	6019      	str	r1, [r3, #0]
    b3e2:	4282      	cmp	r2, r0
    b3e4:	d1e0      	bne.n	b3a8 <_free_r+0x24>
    b3e6:	6810      	ldr	r0, [r2, #0]
    b3e8:	6852      	ldr	r2, [r2, #4]
    b3ea:	1841      	adds	r1, r0, r1
    b3ec:	6019      	str	r1, [r3, #0]
    b3ee:	605a      	str	r2, [r3, #4]
    b3f0:	e7da      	b.n	b3a8 <_free_r+0x24>
    b3f2:	42a0      	cmp	r0, r4
    b3f4:	d902      	bls.n	b3fc <_free_r+0x78>
    b3f6:	230c      	movs	r3, #12
    b3f8:	602b      	str	r3, [r5, #0]
    b3fa:	e7d5      	b.n	b3a8 <_free_r+0x24>
    b3fc:	6821      	ldr	r1, [r4, #0]
    b3fe:	1860      	adds	r0, r4, r1
    b400:	4282      	cmp	r2, r0
    b402:	d103      	bne.n	b40c <_free_r+0x88>
    b404:	6810      	ldr	r0, [r2, #0]
    b406:	6852      	ldr	r2, [r2, #4]
    b408:	1841      	adds	r1, r0, r1
    b40a:	6021      	str	r1, [r4, #0]
    b40c:	6062      	str	r2, [r4, #4]
    b40e:	605c      	str	r4, [r3, #4]
    b410:	e7ca      	b.n	b3a8 <_free_r+0x24>
    b412:	46c0      	nop			; (mov r8, r8)
    b414:	20000184 	.word	0x20000184

0000b418 <_malloc_r>:
    b418:	2303      	movs	r3, #3
    b41a:	b570      	push	{r4, r5, r6, lr}
    b41c:	1ccd      	adds	r5, r1, #3
    b41e:	439d      	bics	r5, r3
    b420:	3508      	adds	r5, #8
    b422:	0006      	movs	r6, r0
    b424:	2d0c      	cmp	r5, #12
    b426:	d21e      	bcs.n	b466 <_malloc_r+0x4e>
    b428:	250c      	movs	r5, #12
    b42a:	42a9      	cmp	r1, r5
    b42c:	d81d      	bhi.n	b46a <_malloc_r+0x52>
    b42e:	0030      	movs	r0, r6
    b430:	f000 fb12 	bl	ba58 <__malloc_lock>
    b434:	4a25      	ldr	r2, [pc, #148]	; (b4cc <_malloc_r+0xb4>)
    b436:	6814      	ldr	r4, [r2, #0]
    b438:	0021      	movs	r1, r4
    b43a:	2900      	cmp	r1, #0
    b43c:	d119      	bne.n	b472 <_malloc_r+0x5a>
    b43e:	4c24      	ldr	r4, [pc, #144]	; (b4d0 <_malloc_r+0xb8>)
    b440:	6823      	ldr	r3, [r4, #0]
    b442:	2b00      	cmp	r3, #0
    b444:	d103      	bne.n	b44e <_malloc_r+0x36>
    b446:	0030      	movs	r0, r6
    b448:	f000 f844 	bl	b4d4 <_sbrk_r>
    b44c:	6020      	str	r0, [r4, #0]
    b44e:	0029      	movs	r1, r5
    b450:	0030      	movs	r0, r6
    b452:	f000 f83f 	bl	b4d4 <_sbrk_r>
    b456:	1c43      	adds	r3, r0, #1
    b458:	d12c      	bne.n	b4b4 <_malloc_r+0x9c>
    b45a:	230c      	movs	r3, #12
    b45c:	0030      	movs	r0, r6
    b45e:	6033      	str	r3, [r6, #0]
    b460:	f000 fafb 	bl	ba5a <__malloc_unlock>
    b464:	e003      	b.n	b46e <_malloc_r+0x56>
    b466:	2d00      	cmp	r5, #0
    b468:	dadf      	bge.n	b42a <_malloc_r+0x12>
    b46a:	230c      	movs	r3, #12
    b46c:	6033      	str	r3, [r6, #0]
    b46e:	2000      	movs	r0, #0
    b470:	bd70      	pop	{r4, r5, r6, pc}
    b472:	680b      	ldr	r3, [r1, #0]
    b474:	1b5b      	subs	r3, r3, r5
    b476:	d41a      	bmi.n	b4ae <_malloc_r+0x96>
    b478:	2b0b      	cmp	r3, #11
    b47a:	d903      	bls.n	b484 <_malloc_r+0x6c>
    b47c:	600b      	str	r3, [r1, #0]
    b47e:	18cc      	adds	r4, r1, r3
    b480:	6025      	str	r5, [r4, #0]
    b482:	e003      	b.n	b48c <_malloc_r+0x74>
    b484:	428c      	cmp	r4, r1
    b486:	d10e      	bne.n	b4a6 <_malloc_r+0x8e>
    b488:	6863      	ldr	r3, [r4, #4]
    b48a:	6013      	str	r3, [r2, #0]
    b48c:	0030      	movs	r0, r6
    b48e:	f000 fae4 	bl	ba5a <__malloc_unlock>
    b492:	0020      	movs	r0, r4
    b494:	2207      	movs	r2, #7
    b496:	300b      	adds	r0, #11
    b498:	1d23      	adds	r3, r4, #4
    b49a:	4390      	bics	r0, r2
    b49c:	1ac3      	subs	r3, r0, r3
    b49e:	d0e7      	beq.n	b470 <_malloc_r+0x58>
    b4a0:	425a      	negs	r2, r3
    b4a2:	50e2      	str	r2, [r4, r3]
    b4a4:	e7e4      	b.n	b470 <_malloc_r+0x58>
    b4a6:	684b      	ldr	r3, [r1, #4]
    b4a8:	6063      	str	r3, [r4, #4]
    b4aa:	000c      	movs	r4, r1
    b4ac:	e7ee      	b.n	b48c <_malloc_r+0x74>
    b4ae:	000c      	movs	r4, r1
    b4b0:	6849      	ldr	r1, [r1, #4]
    b4b2:	e7c2      	b.n	b43a <_malloc_r+0x22>
    b4b4:	2303      	movs	r3, #3
    b4b6:	1cc4      	adds	r4, r0, #3
    b4b8:	439c      	bics	r4, r3
    b4ba:	42a0      	cmp	r0, r4
    b4bc:	d0e0      	beq.n	b480 <_malloc_r+0x68>
    b4be:	1a21      	subs	r1, r4, r0
    b4c0:	0030      	movs	r0, r6
    b4c2:	f000 f807 	bl	b4d4 <_sbrk_r>
    b4c6:	1c43      	adds	r3, r0, #1
    b4c8:	d1da      	bne.n	b480 <_malloc_r+0x68>
    b4ca:	e7c6      	b.n	b45a <_malloc_r+0x42>
    b4cc:	20000184 	.word	0x20000184
    b4d0:	20000188 	.word	0x20000188

0000b4d4 <_sbrk_r>:
    b4d4:	2300      	movs	r3, #0
    b4d6:	b570      	push	{r4, r5, r6, lr}
    b4d8:	4c06      	ldr	r4, [pc, #24]	; (b4f4 <_sbrk_r+0x20>)
    b4da:	0005      	movs	r5, r0
    b4dc:	0008      	movs	r0, r1
    b4de:	6023      	str	r3, [r4, #0]
    b4e0:	f7fb fb2a 	bl	6b38 <_sbrk>
    b4e4:	1c43      	adds	r3, r0, #1
    b4e6:	d103      	bne.n	b4f0 <_sbrk_r+0x1c>
    b4e8:	6823      	ldr	r3, [r4, #0]
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d000      	beq.n	b4f0 <_sbrk_r+0x1c>
    b4ee:	602b      	str	r3, [r5, #0]
    b4f0:	bd70      	pop	{r4, r5, r6, pc}
    b4f2:	46c0      	nop			; (mov r8, r8)
    b4f4:	20000cd4 	.word	0x20000cd4

0000b4f8 <setbuf>:
    b4f8:	424a      	negs	r2, r1
    b4fa:	414a      	adcs	r2, r1
    b4fc:	2380      	movs	r3, #128	; 0x80
    b4fe:	b510      	push	{r4, lr}
    b500:	0052      	lsls	r2, r2, #1
    b502:	00db      	lsls	r3, r3, #3
    b504:	f000 f802 	bl	b50c <setvbuf>
    b508:	bd10      	pop	{r4, pc}
	...

0000b50c <setvbuf>:
    b50c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b50e:	001d      	movs	r5, r3
    b510:	4b4f      	ldr	r3, [pc, #316]	; (b650 <setvbuf+0x144>)
    b512:	b085      	sub	sp, #20
    b514:	681e      	ldr	r6, [r3, #0]
    b516:	0004      	movs	r4, r0
    b518:	000f      	movs	r7, r1
    b51a:	9200      	str	r2, [sp, #0]
    b51c:	2e00      	cmp	r6, #0
    b51e:	d005      	beq.n	b52c <setvbuf+0x20>
    b520:	69b3      	ldr	r3, [r6, #24]
    b522:	2b00      	cmp	r3, #0
    b524:	d102      	bne.n	b52c <setvbuf+0x20>
    b526:	0030      	movs	r0, r6
    b528:	f000 f9d8 	bl	b8dc <__sinit>
    b52c:	4b49      	ldr	r3, [pc, #292]	; (b654 <setvbuf+0x148>)
    b52e:	429c      	cmp	r4, r3
    b530:	d150      	bne.n	b5d4 <setvbuf+0xc8>
    b532:	6874      	ldr	r4, [r6, #4]
    b534:	9b00      	ldr	r3, [sp, #0]
    b536:	2b02      	cmp	r3, #2
    b538:	d005      	beq.n	b546 <setvbuf+0x3a>
    b53a:	2b01      	cmp	r3, #1
    b53c:	d900      	bls.n	b540 <setvbuf+0x34>
    b53e:	e084      	b.n	b64a <setvbuf+0x13e>
    b540:	2d00      	cmp	r5, #0
    b542:	da00      	bge.n	b546 <setvbuf+0x3a>
    b544:	e081      	b.n	b64a <setvbuf+0x13e>
    b546:	0021      	movs	r1, r4
    b548:	0030      	movs	r0, r6
    b54a:	f000 f959 	bl	b800 <_fflush_r>
    b54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b550:	2900      	cmp	r1, #0
    b552:	d008      	beq.n	b566 <setvbuf+0x5a>
    b554:	0023      	movs	r3, r4
    b556:	3344      	adds	r3, #68	; 0x44
    b558:	4299      	cmp	r1, r3
    b55a:	d002      	beq.n	b562 <setvbuf+0x56>
    b55c:	0030      	movs	r0, r6
    b55e:	f7ff ff11 	bl	b384 <_free_r>
    b562:	2300      	movs	r3, #0
    b564:	6363      	str	r3, [r4, #52]	; 0x34
    b566:	2300      	movs	r3, #0
    b568:	61a3      	str	r3, [r4, #24]
    b56a:	6063      	str	r3, [r4, #4]
    b56c:	89a3      	ldrh	r3, [r4, #12]
    b56e:	061b      	lsls	r3, r3, #24
    b570:	d503      	bpl.n	b57a <setvbuf+0x6e>
    b572:	6921      	ldr	r1, [r4, #16]
    b574:	0030      	movs	r0, r6
    b576:	f7ff ff05 	bl	b384 <_free_r>
    b57a:	89a3      	ldrh	r3, [r4, #12]
    b57c:	4a36      	ldr	r2, [pc, #216]	; (b658 <setvbuf+0x14c>)
    b57e:	4013      	ands	r3, r2
    b580:	81a3      	strh	r3, [r4, #12]
    b582:	9b00      	ldr	r3, [sp, #0]
    b584:	2b02      	cmp	r3, #2
    b586:	d05a      	beq.n	b63e <setvbuf+0x132>
    b588:	ab03      	add	r3, sp, #12
    b58a:	aa02      	add	r2, sp, #8
    b58c:	0021      	movs	r1, r4
    b58e:	0030      	movs	r0, r6
    b590:	f000 fa3a 	bl	ba08 <__swhatbuf_r>
    b594:	89a3      	ldrh	r3, [r4, #12]
    b596:	4318      	orrs	r0, r3
    b598:	81a0      	strh	r0, [r4, #12]
    b59a:	2d00      	cmp	r5, #0
    b59c:	d124      	bne.n	b5e8 <setvbuf+0xdc>
    b59e:	9d02      	ldr	r5, [sp, #8]
    b5a0:	0028      	movs	r0, r5
    b5a2:	f7ff fed3 	bl	b34c <malloc>
    b5a6:	9501      	str	r5, [sp, #4]
    b5a8:	1e07      	subs	r7, r0, #0
    b5aa:	d142      	bne.n	b632 <setvbuf+0x126>
    b5ac:	9b02      	ldr	r3, [sp, #8]
    b5ae:	9301      	str	r3, [sp, #4]
    b5b0:	42ab      	cmp	r3, r5
    b5b2:	d139      	bne.n	b628 <setvbuf+0x11c>
    b5b4:	2001      	movs	r0, #1
    b5b6:	4240      	negs	r0, r0
    b5b8:	2302      	movs	r3, #2
    b5ba:	89a2      	ldrh	r2, [r4, #12]
    b5bc:	4313      	orrs	r3, r2
    b5be:	81a3      	strh	r3, [r4, #12]
    b5c0:	2300      	movs	r3, #0
    b5c2:	60a3      	str	r3, [r4, #8]
    b5c4:	0023      	movs	r3, r4
    b5c6:	3347      	adds	r3, #71	; 0x47
    b5c8:	6023      	str	r3, [r4, #0]
    b5ca:	6123      	str	r3, [r4, #16]
    b5cc:	2301      	movs	r3, #1
    b5ce:	6163      	str	r3, [r4, #20]
    b5d0:	b005      	add	sp, #20
    b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5d4:	4b21      	ldr	r3, [pc, #132]	; (b65c <setvbuf+0x150>)
    b5d6:	429c      	cmp	r4, r3
    b5d8:	d101      	bne.n	b5de <setvbuf+0xd2>
    b5da:	68b4      	ldr	r4, [r6, #8]
    b5dc:	e7aa      	b.n	b534 <setvbuf+0x28>
    b5de:	4b20      	ldr	r3, [pc, #128]	; (b660 <setvbuf+0x154>)
    b5e0:	429c      	cmp	r4, r3
    b5e2:	d1a7      	bne.n	b534 <setvbuf+0x28>
    b5e4:	68f4      	ldr	r4, [r6, #12]
    b5e6:	e7a5      	b.n	b534 <setvbuf+0x28>
    b5e8:	2f00      	cmp	r7, #0
    b5ea:	d0d9      	beq.n	b5a0 <setvbuf+0x94>
    b5ec:	69b3      	ldr	r3, [r6, #24]
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d102      	bne.n	b5f8 <setvbuf+0xec>
    b5f2:	0030      	movs	r0, r6
    b5f4:	f000 f972 	bl	b8dc <__sinit>
    b5f8:	9b00      	ldr	r3, [sp, #0]
    b5fa:	2b01      	cmp	r3, #1
    b5fc:	d103      	bne.n	b606 <setvbuf+0xfa>
    b5fe:	89a3      	ldrh	r3, [r4, #12]
    b600:	9a00      	ldr	r2, [sp, #0]
    b602:	431a      	orrs	r2, r3
    b604:	81a2      	strh	r2, [r4, #12]
    b606:	2008      	movs	r0, #8
    b608:	89a3      	ldrh	r3, [r4, #12]
    b60a:	6027      	str	r7, [r4, #0]
    b60c:	6127      	str	r7, [r4, #16]
    b60e:	6165      	str	r5, [r4, #20]
    b610:	4018      	ands	r0, r3
    b612:	d018      	beq.n	b646 <setvbuf+0x13a>
    b614:	2001      	movs	r0, #1
    b616:	4018      	ands	r0, r3
    b618:	2300      	movs	r3, #0
    b61a:	4298      	cmp	r0, r3
    b61c:	d011      	beq.n	b642 <setvbuf+0x136>
    b61e:	426d      	negs	r5, r5
    b620:	60a3      	str	r3, [r4, #8]
    b622:	61a5      	str	r5, [r4, #24]
    b624:	0018      	movs	r0, r3
    b626:	e7d3      	b.n	b5d0 <setvbuf+0xc4>
    b628:	9801      	ldr	r0, [sp, #4]
    b62a:	f7ff fe8f 	bl	b34c <malloc>
    b62e:	1e07      	subs	r7, r0, #0
    b630:	d0c0      	beq.n	b5b4 <setvbuf+0xa8>
    b632:	2380      	movs	r3, #128	; 0x80
    b634:	89a2      	ldrh	r2, [r4, #12]
    b636:	9d01      	ldr	r5, [sp, #4]
    b638:	4313      	orrs	r3, r2
    b63a:	81a3      	strh	r3, [r4, #12]
    b63c:	e7d6      	b.n	b5ec <setvbuf+0xe0>
    b63e:	2000      	movs	r0, #0
    b640:	e7ba      	b.n	b5b8 <setvbuf+0xac>
    b642:	60a5      	str	r5, [r4, #8]
    b644:	e7c4      	b.n	b5d0 <setvbuf+0xc4>
    b646:	60a0      	str	r0, [r4, #8]
    b648:	e7c2      	b.n	b5d0 <setvbuf+0xc4>
    b64a:	2001      	movs	r0, #1
    b64c:	4240      	negs	r0, r0
    b64e:	e7bf      	b.n	b5d0 <setvbuf+0xc4>
    b650:	20000030 	.word	0x20000030
    b654:	0000cd44 	.word	0x0000cd44
    b658:	fffff35c 	.word	0xfffff35c
    b65c:	0000cd64 	.word	0x0000cd64
    b660:	0000cd24 	.word	0x0000cd24

0000b664 <sniprintf>:
    b664:	b40c      	push	{r2, r3}
    b666:	b530      	push	{r4, r5, lr}
    b668:	4b16      	ldr	r3, [pc, #88]	; (b6c4 <sniprintf+0x60>)
    b66a:	b09d      	sub	sp, #116	; 0x74
    b66c:	1e0c      	subs	r4, r1, #0
    b66e:	681d      	ldr	r5, [r3, #0]
    b670:	da08      	bge.n	b684 <sniprintf+0x20>
    b672:	238b      	movs	r3, #139	; 0x8b
    b674:	2001      	movs	r0, #1
    b676:	602b      	str	r3, [r5, #0]
    b678:	4240      	negs	r0, r0
    b67a:	b01d      	add	sp, #116	; 0x74
    b67c:	bc30      	pop	{r4, r5}
    b67e:	bc08      	pop	{r3}
    b680:	b002      	add	sp, #8
    b682:	4718      	bx	r3
    b684:	2382      	movs	r3, #130	; 0x82
    b686:	a902      	add	r1, sp, #8
    b688:	009b      	lsls	r3, r3, #2
    b68a:	818b      	strh	r3, [r1, #12]
    b68c:	2300      	movs	r3, #0
    b68e:	9002      	str	r0, [sp, #8]
    b690:	6108      	str	r0, [r1, #16]
    b692:	429c      	cmp	r4, r3
    b694:	d000      	beq.n	b698 <sniprintf+0x34>
    b696:	1e63      	subs	r3, r4, #1
    b698:	608b      	str	r3, [r1, #8]
    b69a:	614b      	str	r3, [r1, #20]
    b69c:	2301      	movs	r3, #1
    b69e:	425b      	negs	r3, r3
    b6a0:	81cb      	strh	r3, [r1, #14]
    b6a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b6a4:	ab21      	add	r3, sp, #132	; 0x84
    b6a6:	0028      	movs	r0, r5
    b6a8:	9301      	str	r3, [sp, #4]
    b6aa:	f000 fa39 	bl	bb20 <_svfiprintf_r>
    b6ae:	1c43      	adds	r3, r0, #1
    b6b0:	da01      	bge.n	b6b6 <sniprintf+0x52>
    b6b2:	238b      	movs	r3, #139	; 0x8b
    b6b4:	602b      	str	r3, [r5, #0]
    b6b6:	2c00      	cmp	r4, #0
    b6b8:	d0df      	beq.n	b67a <sniprintf+0x16>
    b6ba:	2300      	movs	r3, #0
    b6bc:	9a02      	ldr	r2, [sp, #8]
    b6be:	7013      	strb	r3, [r2, #0]
    b6c0:	e7db      	b.n	b67a <sniprintf+0x16>
    b6c2:	46c0      	nop			; (mov r8, r8)
    b6c4:	20000030 	.word	0x20000030

0000b6c8 <strcmp>:
    b6c8:	7802      	ldrb	r2, [r0, #0]
    b6ca:	780b      	ldrb	r3, [r1, #0]
    b6cc:	2a00      	cmp	r2, #0
    b6ce:	d003      	beq.n	b6d8 <strcmp+0x10>
    b6d0:	3001      	adds	r0, #1
    b6d2:	3101      	adds	r1, #1
    b6d4:	429a      	cmp	r2, r3
    b6d6:	d0f7      	beq.n	b6c8 <strcmp>
    b6d8:	1ad0      	subs	r0, r2, r3
    b6da:	4770      	bx	lr

0000b6dc <strlen>:
    b6dc:	2300      	movs	r3, #0
    b6de:	5cc2      	ldrb	r2, [r0, r3]
    b6e0:	3301      	adds	r3, #1
    b6e2:	2a00      	cmp	r2, #0
    b6e4:	d1fb      	bne.n	b6de <strlen+0x2>
    b6e6:	1e58      	subs	r0, r3, #1
    b6e8:	4770      	bx	lr
	...

0000b6ec <__sflush_r>:
    b6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b6ee:	898a      	ldrh	r2, [r1, #12]
    b6f0:	0005      	movs	r5, r0
    b6f2:	000c      	movs	r4, r1
    b6f4:	0713      	lsls	r3, r2, #28
    b6f6:	d460      	bmi.n	b7ba <__sflush_r+0xce>
    b6f8:	684b      	ldr	r3, [r1, #4]
    b6fa:	2b00      	cmp	r3, #0
    b6fc:	dc04      	bgt.n	b708 <__sflush_r+0x1c>
    b6fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b700:	2b00      	cmp	r3, #0
    b702:	dc01      	bgt.n	b708 <__sflush_r+0x1c>
    b704:	2000      	movs	r0, #0
    b706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b708:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b70a:	2f00      	cmp	r7, #0
    b70c:	d0fa      	beq.n	b704 <__sflush_r+0x18>
    b70e:	2300      	movs	r3, #0
    b710:	682e      	ldr	r6, [r5, #0]
    b712:	602b      	str	r3, [r5, #0]
    b714:	2380      	movs	r3, #128	; 0x80
    b716:	015b      	lsls	r3, r3, #5
    b718:	401a      	ands	r2, r3
    b71a:	d034      	beq.n	b786 <__sflush_r+0x9a>
    b71c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b71e:	89a3      	ldrh	r3, [r4, #12]
    b720:	075b      	lsls	r3, r3, #29
    b722:	d506      	bpl.n	b732 <__sflush_r+0x46>
    b724:	6863      	ldr	r3, [r4, #4]
    b726:	1ac0      	subs	r0, r0, r3
    b728:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b72a:	2b00      	cmp	r3, #0
    b72c:	d001      	beq.n	b732 <__sflush_r+0x46>
    b72e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b730:	1ac0      	subs	r0, r0, r3
    b732:	0002      	movs	r2, r0
    b734:	6a21      	ldr	r1, [r4, #32]
    b736:	2300      	movs	r3, #0
    b738:	0028      	movs	r0, r5
    b73a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b73c:	47b8      	blx	r7
    b73e:	89a1      	ldrh	r1, [r4, #12]
    b740:	1c43      	adds	r3, r0, #1
    b742:	d106      	bne.n	b752 <__sflush_r+0x66>
    b744:	682b      	ldr	r3, [r5, #0]
    b746:	2b1d      	cmp	r3, #29
    b748:	d831      	bhi.n	b7ae <__sflush_r+0xc2>
    b74a:	4a2c      	ldr	r2, [pc, #176]	; (b7fc <__sflush_r+0x110>)
    b74c:	40da      	lsrs	r2, r3
    b74e:	07d3      	lsls	r3, r2, #31
    b750:	d52d      	bpl.n	b7ae <__sflush_r+0xc2>
    b752:	2300      	movs	r3, #0
    b754:	6063      	str	r3, [r4, #4]
    b756:	6923      	ldr	r3, [r4, #16]
    b758:	6023      	str	r3, [r4, #0]
    b75a:	04cb      	lsls	r3, r1, #19
    b75c:	d505      	bpl.n	b76a <__sflush_r+0x7e>
    b75e:	1c43      	adds	r3, r0, #1
    b760:	d102      	bne.n	b768 <__sflush_r+0x7c>
    b762:	682b      	ldr	r3, [r5, #0]
    b764:	2b00      	cmp	r3, #0
    b766:	d100      	bne.n	b76a <__sflush_r+0x7e>
    b768:	6560      	str	r0, [r4, #84]	; 0x54
    b76a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b76c:	602e      	str	r6, [r5, #0]
    b76e:	2900      	cmp	r1, #0
    b770:	d0c8      	beq.n	b704 <__sflush_r+0x18>
    b772:	0023      	movs	r3, r4
    b774:	3344      	adds	r3, #68	; 0x44
    b776:	4299      	cmp	r1, r3
    b778:	d002      	beq.n	b780 <__sflush_r+0x94>
    b77a:	0028      	movs	r0, r5
    b77c:	f7ff fe02 	bl	b384 <_free_r>
    b780:	2000      	movs	r0, #0
    b782:	6360      	str	r0, [r4, #52]	; 0x34
    b784:	e7bf      	b.n	b706 <__sflush_r+0x1a>
    b786:	2301      	movs	r3, #1
    b788:	6a21      	ldr	r1, [r4, #32]
    b78a:	0028      	movs	r0, r5
    b78c:	47b8      	blx	r7
    b78e:	1c43      	adds	r3, r0, #1
    b790:	d1c5      	bne.n	b71e <__sflush_r+0x32>
    b792:	682b      	ldr	r3, [r5, #0]
    b794:	2b00      	cmp	r3, #0
    b796:	d0c2      	beq.n	b71e <__sflush_r+0x32>
    b798:	2b1d      	cmp	r3, #29
    b79a:	d001      	beq.n	b7a0 <__sflush_r+0xb4>
    b79c:	2b16      	cmp	r3, #22
    b79e:	d101      	bne.n	b7a4 <__sflush_r+0xb8>
    b7a0:	602e      	str	r6, [r5, #0]
    b7a2:	e7af      	b.n	b704 <__sflush_r+0x18>
    b7a4:	2340      	movs	r3, #64	; 0x40
    b7a6:	89a2      	ldrh	r2, [r4, #12]
    b7a8:	4313      	orrs	r3, r2
    b7aa:	81a3      	strh	r3, [r4, #12]
    b7ac:	e7ab      	b.n	b706 <__sflush_r+0x1a>
    b7ae:	2340      	movs	r3, #64	; 0x40
    b7b0:	430b      	orrs	r3, r1
    b7b2:	2001      	movs	r0, #1
    b7b4:	81a3      	strh	r3, [r4, #12]
    b7b6:	4240      	negs	r0, r0
    b7b8:	e7a5      	b.n	b706 <__sflush_r+0x1a>
    b7ba:	690f      	ldr	r7, [r1, #16]
    b7bc:	2f00      	cmp	r7, #0
    b7be:	d0a1      	beq.n	b704 <__sflush_r+0x18>
    b7c0:	680b      	ldr	r3, [r1, #0]
    b7c2:	600f      	str	r7, [r1, #0]
    b7c4:	1bdb      	subs	r3, r3, r7
    b7c6:	9301      	str	r3, [sp, #4]
    b7c8:	2300      	movs	r3, #0
    b7ca:	0792      	lsls	r2, r2, #30
    b7cc:	d100      	bne.n	b7d0 <__sflush_r+0xe4>
    b7ce:	694b      	ldr	r3, [r1, #20]
    b7d0:	60a3      	str	r3, [r4, #8]
    b7d2:	9b01      	ldr	r3, [sp, #4]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	dc00      	bgt.n	b7da <__sflush_r+0xee>
    b7d8:	e794      	b.n	b704 <__sflush_r+0x18>
    b7da:	9b01      	ldr	r3, [sp, #4]
    b7dc:	003a      	movs	r2, r7
    b7de:	6a21      	ldr	r1, [r4, #32]
    b7e0:	0028      	movs	r0, r5
    b7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b7e4:	47b0      	blx	r6
    b7e6:	2800      	cmp	r0, #0
    b7e8:	dc03      	bgt.n	b7f2 <__sflush_r+0x106>
    b7ea:	2340      	movs	r3, #64	; 0x40
    b7ec:	89a2      	ldrh	r2, [r4, #12]
    b7ee:	4313      	orrs	r3, r2
    b7f0:	e7df      	b.n	b7b2 <__sflush_r+0xc6>
    b7f2:	9b01      	ldr	r3, [sp, #4]
    b7f4:	183f      	adds	r7, r7, r0
    b7f6:	1a1b      	subs	r3, r3, r0
    b7f8:	9301      	str	r3, [sp, #4]
    b7fa:	e7ea      	b.n	b7d2 <__sflush_r+0xe6>
    b7fc:	20400001 	.word	0x20400001

0000b800 <_fflush_r>:
    b800:	690b      	ldr	r3, [r1, #16]
    b802:	b570      	push	{r4, r5, r6, lr}
    b804:	0005      	movs	r5, r0
    b806:	000c      	movs	r4, r1
    b808:	2b00      	cmp	r3, #0
    b80a:	d101      	bne.n	b810 <_fflush_r+0x10>
    b80c:	2000      	movs	r0, #0
    b80e:	bd70      	pop	{r4, r5, r6, pc}
    b810:	2800      	cmp	r0, #0
    b812:	d004      	beq.n	b81e <_fflush_r+0x1e>
    b814:	6983      	ldr	r3, [r0, #24]
    b816:	2b00      	cmp	r3, #0
    b818:	d101      	bne.n	b81e <_fflush_r+0x1e>
    b81a:	f000 f85f 	bl	b8dc <__sinit>
    b81e:	4b0b      	ldr	r3, [pc, #44]	; (b84c <_fflush_r+0x4c>)
    b820:	429c      	cmp	r4, r3
    b822:	d109      	bne.n	b838 <_fflush_r+0x38>
    b824:	686c      	ldr	r4, [r5, #4]
    b826:	220c      	movs	r2, #12
    b828:	5ea3      	ldrsh	r3, [r4, r2]
    b82a:	2b00      	cmp	r3, #0
    b82c:	d0ee      	beq.n	b80c <_fflush_r+0xc>
    b82e:	0021      	movs	r1, r4
    b830:	0028      	movs	r0, r5
    b832:	f7ff ff5b 	bl	b6ec <__sflush_r>
    b836:	e7ea      	b.n	b80e <_fflush_r+0xe>
    b838:	4b05      	ldr	r3, [pc, #20]	; (b850 <_fflush_r+0x50>)
    b83a:	429c      	cmp	r4, r3
    b83c:	d101      	bne.n	b842 <_fflush_r+0x42>
    b83e:	68ac      	ldr	r4, [r5, #8]
    b840:	e7f1      	b.n	b826 <_fflush_r+0x26>
    b842:	4b04      	ldr	r3, [pc, #16]	; (b854 <_fflush_r+0x54>)
    b844:	429c      	cmp	r4, r3
    b846:	d1ee      	bne.n	b826 <_fflush_r+0x26>
    b848:	68ec      	ldr	r4, [r5, #12]
    b84a:	e7ec      	b.n	b826 <_fflush_r+0x26>
    b84c:	0000cd44 	.word	0x0000cd44
    b850:	0000cd64 	.word	0x0000cd64
    b854:	0000cd24 	.word	0x0000cd24

0000b858 <_cleanup_r>:
    b858:	b510      	push	{r4, lr}
    b85a:	4902      	ldr	r1, [pc, #8]	; (b864 <_cleanup_r+0xc>)
    b85c:	f000 f8b2 	bl	b9c4 <_fwalk_reent>
    b860:	bd10      	pop	{r4, pc}
    b862:	46c0      	nop			; (mov r8, r8)
    b864:	0000b801 	.word	0x0000b801

0000b868 <std.isra.0>:
    b868:	2300      	movs	r3, #0
    b86a:	b510      	push	{r4, lr}
    b86c:	0004      	movs	r4, r0
    b86e:	6003      	str	r3, [r0, #0]
    b870:	6043      	str	r3, [r0, #4]
    b872:	6083      	str	r3, [r0, #8]
    b874:	8181      	strh	r1, [r0, #12]
    b876:	6643      	str	r3, [r0, #100]	; 0x64
    b878:	81c2      	strh	r2, [r0, #14]
    b87a:	6103      	str	r3, [r0, #16]
    b87c:	6143      	str	r3, [r0, #20]
    b87e:	6183      	str	r3, [r0, #24]
    b880:	0019      	movs	r1, r3
    b882:	2208      	movs	r2, #8
    b884:	305c      	adds	r0, #92	; 0x5c
    b886:	f7ff fd74 	bl	b372 <memset>
    b88a:	4b05      	ldr	r3, [pc, #20]	; (b8a0 <std.isra.0+0x38>)
    b88c:	6224      	str	r4, [r4, #32]
    b88e:	6263      	str	r3, [r4, #36]	; 0x24
    b890:	4b04      	ldr	r3, [pc, #16]	; (b8a4 <std.isra.0+0x3c>)
    b892:	62a3      	str	r3, [r4, #40]	; 0x28
    b894:	4b04      	ldr	r3, [pc, #16]	; (b8a8 <std.isra.0+0x40>)
    b896:	62e3      	str	r3, [r4, #44]	; 0x2c
    b898:	4b04      	ldr	r3, [pc, #16]	; (b8ac <std.isra.0+0x44>)
    b89a:	6323      	str	r3, [r4, #48]	; 0x30
    b89c:	bd10      	pop	{r4, pc}
    b89e:	46c0      	nop			; (mov r8, r8)
    b8a0:	0000c039 	.word	0x0000c039
    b8a4:	0000c061 	.word	0x0000c061
    b8a8:	0000c099 	.word	0x0000c099
    b8ac:	0000c0c5 	.word	0x0000c0c5

0000b8b0 <__sfmoreglue>:
    b8b0:	b570      	push	{r4, r5, r6, lr}
    b8b2:	2568      	movs	r5, #104	; 0x68
    b8b4:	1e4a      	subs	r2, r1, #1
    b8b6:	4355      	muls	r5, r2
    b8b8:	000e      	movs	r6, r1
    b8ba:	0029      	movs	r1, r5
    b8bc:	3174      	adds	r1, #116	; 0x74
    b8be:	f7ff fdab 	bl	b418 <_malloc_r>
    b8c2:	1e04      	subs	r4, r0, #0
    b8c4:	d008      	beq.n	b8d8 <__sfmoreglue+0x28>
    b8c6:	2100      	movs	r1, #0
    b8c8:	002a      	movs	r2, r5
    b8ca:	6001      	str	r1, [r0, #0]
    b8cc:	6046      	str	r6, [r0, #4]
    b8ce:	300c      	adds	r0, #12
    b8d0:	60a0      	str	r0, [r4, #8]
    b8d2:	3268      	adds	r2, #104	; 0x68
    b8d4:	f7ff fd4d 	bl	b372 <memset>
    b8d8:	0020      	movs	r0, r4
    b8da:	bd70      	pop	{r4, r5, r6, pc}

0000b8dc <__sinit>:
    b8dc:	6983      	ldr	r3, [r0, #24]
    b8de:	b513      	push	{r0, r1, r4, lr}
    b8e0:	0004      	movs	r4, r0
    b8e2:	2b00      	cmp	r3, #0
    b8e4:	d128      	bne.n	b938 <__sinit+0x5c>
    b8e6:	6483      	str	r3, [r0, #72]	; 0x48
    b8e8:	64c3      	str	r3, [r0, #76]	; 0x4c
    b8ea:	6503      	str	r3, [r0, #80]	; 0x50
    b8ec:	4b13      	ldr	r3, [pc, #76]	; (b93c <__sinit+0x60>)
    b8ee:	4a14      	ldr	r2, [pc, #80]	; (b940 <__sinit+0x64>)
    b8f0:	681b      	ldr	r3, [r3, #0]
    b8f2:	6282      	str	r2, [r0, #40]	; 0x28
    b8f4:	9301      	str	r3, [sp, #4]
    b8f6:	4298      	cmp	r0, r3
    b8f8:	d101      	bne.n	b8fe <__sinit+0x22>
    b8fa:	2301      	movs	r3, #1
    b8fc:	6183      	str	r3, [r0, #24]
    b8fe:	0020      	movs	r0, r4
    b900:	f000 f820 	bl	b944 <__sfp>
    b904:	6060      	str	r0, [r4, #4]
    b906:	0020      	movs	r0, r4
    b908:	f000 f81c 	bl	b944 <__sfp>
    b90c:	60a0      	str	r0, [r4, #8]
    b90e:	0020      	movs	r0, r4
    b910:	f000 f818 	bl	b944 <__sfp>
    b914:	2200      	movs	r2, #0
    b916:	60e0      	str	r0, [r4, #12]
    b918:	2104      	movs	r1, #4
    b91a:	6860      	ldr	r0, [r4, #4]
    b91c:	f7ff ffa4 	bl	b868 <std.isra.0>
    b920:	2201      	movs	r2, #1
    b922:	2109      	movs	r1, #9
    b924:	68a0      	ldr	r0, [r4, #8]
    b926:	f7ff ff9f 	bl	b868 <std.isra.0>
    b92a:	2202      	movs	r2, #2
    b92c:	2112      	movs	r1, #18
    b92e:	68e0      	ldr	r0, [r4, #12]
    b930:	f7ff ff9a 	bl	b868 <std.isra.0>
    b934:	2301      	movs	r3, #1
    b936:	61a3      	str	r3, [r4, #24]
    b938:	bd13      	pop	{r0, r1, r4, pc}
    b93a:	46c0      	nop			; (mov r8, r8)
    b93c:	0000cd20 	.word	0x0000cd20
    b940:	0000b859 	.word	0x0000b859

0000b944 <__sfp>:
    b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b946:	4b1e      	ldr	r3, [pc, #120]	; (b9c0 <__sfp+0x7c>)
    b948:	0007      	movs	r7, r0
    b94a:	681e      	ldr	r6, [r3, #0]
    b94c:	69b3      	ldr	r3, [r6, #24]
    b94e:	2b00      	cmp	r3, #0
    b950:	d102      	bne.n	b958 <__sfp+0x14>
    b952:	0030      	movs	r0, r6
    b954:	f7ff ffc2 	bl	b8dc <__sinit>
    b958:	3648      	adds	r6, #72	; 0x48
    b95a:	68b4      	ldr	r4, [r6, #8]
    b95c:	6873      	ldr	r3, [r6, #4]
    b95e:	3b01      	subs	r3, #1
    b960:	d504      	bpl.n	b96c <__sfp+0x28>
    b962:	6833      	ldr	r3, [r6, #0]
    b964:	2b00      	cmp	r3, #0
    b966:	d007      	beq.n	b978 <__sfp+0x34>
    b968:	6836      	ldr	r6, [r6, #0]
    b96a:	e7f6      	b.n	b95a <__sfp+0x16>
    b96c:	220c      	movs	r2, #12
    b96e:	5ea5      	ldrsh	r5, [r4, r2]
    b970:	2d00      	cmp	r5, #0
    b972:	d00d      	beq.n	b990 <__sfp+0x4c>
    b974:	3468      	adds	r4, #104	; 0x68
    b976:	e7f2      	b.n	b95e <__sfp+0x1a>
    b978:	2104      	movs	r1, #4
    b97a:	0038      	movs	r0, r7
    b97c:	f7ff ff98 	bl	b8b0 <__sfmoreglue>
    b980:	6030      	str	r0, [r6, #0]
    b982:	2800      	cmp	r0, #0
    b984:	d1f0      	bne.n	b968 <__sfp+0x24>
    b986:	230c      	movs	r3, #12
    b988:	0004      	movs	r4, r0
    b98a:	603b      	str	r3, [r7, #0]
    b98c:	0020      	movs	r0, r4
    b98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b990:	2301      	movs	r3, #1
    b992:	0020      	movs	r0, r4
    b994:	425b      	negs	r3, r3
    b996:	81e3      	strh	r3, [r4, #14]
    b998:	3302      	adds	r3, #2
    b99a:	81a3      	strh	r3, [r4, #12]
    b99c:	6665      	str	r5, [r4, #100]	; 0x64
    b99e:	6025      	str	r5, [r4, #0]
    b9a0:	60a5      	str	r5, [r4, #8]
    b9a2:	6065      	str	r5, [r4, #4]
    b9a4:	6125      	str	r5, [r4, #16]
    b9a6:	6165      	str	r5, [r4, #20]
    b9a8:	61a5      	str	r5, [r4, #24]
    b9aa:	2208      	movs	r2, #8
    b9ac:	0029      	movs	r1, r5
    b9ae:	305c      	adds	r0, #92	; 0x5c
    b9b0:	f7ff fcdf 	bl	b372 <memset>
    b9b4:	6365      	str	r5, [r4, #52]	; 0x34
    b9b6:	63a5      	str	r5, [r4, #56]	; 0x38
    b9b8:	64a5      	str	r5, [r4, #72]	; 0x48
    b9ba:	64e5      	str	r5, [r4, #76]	; 0x4c
    b9bc:	e7e6      	b.n	b98c <__sfp+0x48>
    b9be:	46c0      	nop			; (mov r8, r8)
    b9c0:	0000cd20 	.word	0x0000cd20

0000b9c4 <_fwalk_reent>:
    b9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b9c6:	0004      	movs	r4, r0
    b9c8:	0007      	movs	r7, r0
    b9ca:	2600      	movs	r6, #0
    b9cc:	9101      	str	r1, [sp, #4]
    b9ce:	3448      	adds	r4, #72	; 0x48
    b9d0:	2c00      	cmp	r4, #0
    b9d2:	d101      	bne.n	b9d8 <_fwalk_reent+0x14>
    b9d4:	0030      	movs	r0, r6
    b9d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b9d8:	6863      	ldr	r3, [r4, #4]
    b9da:	68a5      	ldr	r5, [r4, #8]
    b9dc:	9300      	str	r3, [sp, #0]
    b9de:	9b00      	ldr	r3, [sp, #0]
    b9e0:	3b01      	subs	r3, #1
    b9e2:	9300      	str	r3, [sp, #0]
    b9e4:	d501      	bpl.n	b9ea <_fwalk_reent+0x26>
    b9e6:	6824      	ldr	r4, [r4, #0]
    b9e8:	e7f2      	b.n	b9d0 <_fwalk_reent+0xc>
    b9ea:	89ab      	ldrh	r3, [r5, #12]
    b9ec:	2b01      	cmp	r3, #1
    b9ee:	d908      	bls.n	ba02 <_fwalk_reent+0x3e>
    b9f0:	220e      	movs	r2, #14
    b9f2:	5eab      	ldrsh	r3, [r5, r2]
    b9f4:	3301      	adds	r3, #1
    b9f6:	d004      	beq.n	ba02 <_fwalk_reent+0x3e>
    b9f8:	0029      	movs	r1, r5
    b9fa:	0038      	movs	r0, r7
    b9fc:	9b01      	ldr	r3, [sp, #4]
    b9fe:	4798      	blx	r3
    ba00:	4306      	orrs	r6, r0
    ba02:	3568      	adds	r5, #104	; 0x68
    ba04:	e7eb      	b.n	b9de <_fwalk_reent+0x1a>
	...

0000ba08 <__swhatbuf_r>:
    ba08:	b570      	push	{r4, r5, r6, lr}
    ba0a:	000e      	movs	r6, r1
    ba0c:	001d      	movs	r5, r3
    ba0e:	230e      	movs	r3, #14
    ba10:	5ec9      	ldrsh	r1, [r1, r3]
    ba12:	b090      	sub	sp, #64	; 0x40
    ba14:	0014      	movs	r4, r2
    ba16:	2900      	cmp	r1, #0
    ba18:	da07      	bge.n	ba2a <__swhatbuf_r+0x22>
    ba1a:	2300      	movs	r3, #0
    ba1c:	602b      	str	r3, [r5, #0]
    ba1e:	89b3      	ldrh	r3, [r6, #12]
    ba20:	061b      	lsls	r3, r3, #24
    ba22:	d411      	bmi.n	ba48 <__swhatbuf_r+0x40>
    ba24:	2380      	movs	r3, #128	; 0x80
    ba26:	00db      	lsls	r3, r3, #3
    ba28:	e00f      	b.n	ba4a <__swhatbuf_r+0x42>
    ba2a:	aa01      	add	r2, sp, #4
    ba2c:	f000 fb76 	bl	c11c <_fstat_r>
    ba30:	2800      	cmp	r0, #0
    ba32:	dbf2      	blt.n	ba1a <__swhatbuf_r+0x12>
    ba34:	22f0      	movs	r2, #240	; 0xf0
    ba36:	9b02      	ldr	r3, [sp, #8]
    ba38:	0212      	lsls	r2, r2, #8
    ba3a:	4013      	ands	r3, r2
    ba3c:	4a05      	ldr	r2, [pc, #20]	; (ba54 <__swhatbuf_r+0x4c>)
    ba3e:	189b      	adds	r3, r3, r2
    ba40:	425a      	negs	r2, r3
    ba42:	4153      	adcs	r3, r2
    ba44:	602b      	str	r3, [r5, #0]
    ba46:	e7ed      	b.n	ba24 <__swhatbuf_r+0x1c>
    ba48:	2340      	movs	r3, #64	; 0x40
    ba4a:	2000      	movs	r0, #0
    ba4c:	6023      	str	r3, [r4, #0]
    ba4e:	b010      	add	sp, #64	; 0x40
    ba50:	bd70      	pop	{r4, r5, r6, pc}
    ba52:	46c0      	nop			; (mov r8, r8)
    ba54:	ffffe000 	.word	0xffffe000

0000ba58 <__malloc_lock>:
    ba58:	4770      	bx	lr

0000ba5a <__malloc_unlock>:
    ba5a:	4770      	bx	lr

0000ba5c <__ssputs_r>:
    ba5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba5e:	688e      	ldr	r6, [r1, #8]
    ba60:	b085      	sub	sp, #20
    ba62:	0007      	movs	r7, r0
    ba64:	000c      	movs	r4, r1
    ba66:	9203      	str	r2, [sp, #12]
    ba68:	9301      	str	r3, [sp, #4]
    ba6a:	429e      	cmp	r6, r3
    ba6c:	d839      	bhi.n	bae2 <__ssputs_r+0x86>
    ba6e:	2390      	movs	r3, #144	; 0x90
    ba70:	898a      	ldrh	r2, [r1, #12]
    ba72:	00db      	lsls	r3, r3, #3
    ba74:	421a      	tst	r2, r3
    ba76:	d034      	beq.n	bae2 <__ssputs_r+0x86>
    ba78:	2503      	movs	r5, #3
    ba7a:	6909      	ldr	r1, [r1, #16]
    ba7c:	6823      	ldr	r3, [r4, #0]
    ba7e:	1a5b      	subs	r3, r3, r1
    ba80:	9302      	str	r3, [sp, #8]
    ba82:	6963      	ldr	r3, [r4, #20]
    ba84:	9802      	ldr	r0, [sp, #8]
    ba86:	435d      	muls	r5, r3
    ba88:	0feb      	lsrs	r3, r5, #31
    ba8a:	195d      	adds	r5, r3, r5
    ba8c:	9b01      	ldr	r3, [sp, #4]
    ba8e:	106d      	asrs	r5, r5, #1
    ba90:	3301      	adds	r3, #1
    ba92:	181b      	adds	r3, r3, r0
    ba94:	42ab      	cmp	r3, r5
    ba96:	d900      	bls.n	ba9a <__ssputs_r+0x3e>
    ba98:	001d      	movs	r5, r3
    ba9a:	0553      	lsls	r3, r2, #21
    ba9c:	d532      	bpl.n	bb04 <__ssputs_r+0xa8>
    ba9e:	0029      	movs	r1, r5
    baa0:	0038      	movs	r0, r7
    baa2:	f7ff fcb9 	bl	b418 <_malloc_r>
    baa6:	1e06      	subs	r6, r0, #0
    baa8:	d109      	bne.n	babe <__ssputs_r+0x62>
    baaa:	230c      	movs	r3, #12
    baac:	603b      	str	r3, [r7, #0]
    baae:	2340      	movs	r3, #64	; 0x40
    bab0:	2001      	movs	r0, #1
    bab2:	89a2      	ldrh	r2, [r4, #12]
    bab4:	4240      	negs	r0, r0
    bab6:	4313      	orrs	r3, r2
    bab8:	81a3      	strh	r3, [r4, #12]
    baba:	b005      	add	sp, #20
    babc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    babe:	9a02      	ldr	r2, [sp, #8]
    bac0:	6921      	ldr	r1, [r4, #16]
    bac2:	f7ff fc4d 	bl	b360 <memcpy>
    bac6:	89a3      	ldrh	r3, [r4, #12]
    bac8:	4a14      	ldr	r2, [pc, #80]	; (bb1c <__ssputs_r+0xc0>)
    baca:	401a      	ands	r2, r3
    bacc:	2380      	movs	r3, #128	; 0x80
    bace:	4313      	orrs	r3, r2
    bad0:	81a3      	strh	r3, [r4, #12]
    bad2:	9b02      	ldr	r3, [sp, #8]
    bad4:	6126      	str	r6, [r4, #16]
    bad6:	18f6      	adds	r6, r6, r3
    bad8:	6026      	str	r6, [r4, #0]
    bada:	6165      	str	r5, [r4, #20]
    badc:	9e01      	ldr	r6, [sp, #4]
    bade:	1aed      	subs	r5, r5, r3
    bae0:	60a5      	str	r5, [r4, #8]
    bae2:	9b01      	ldr	r3, [sp, #4]
    bae4:	42b3      	cmp	r3, r6
    bae6:	d200      	bcs.n	baea <__ssputs_r+0x8e>
    bae8:	001e      	movs	r6, r3
    baea:	0032      	movs	r2, r6
    baec:	9903      	ldr	r1, [sp, #12]
    baee:	6820      	ldr	r0, [r4, #0]
    baf0:	f000 fb45 	bl	c17e <memmove>
    baf4:	68a3      	ldr	r3, [r4, #8]
    baf6:	2000      	movs	r0, #0
    baf8:	1b9b      	subs	r3, r3, r6
    bafa:	60a3      	str	r3, [r4, #8]
    bafc:	6823      	ldr	r3, [r4, #0]
    bafe:	199e      	adds	r6, r3, r6
    bb00:	6026      	str	r6, [r4, #0]
    bb02:	e7da      	b.n	baba <__ssputs_r+0x5e>
    bb04:	002a      	movs	r2, r5
    bb06:	0038      	movs	r0, r7
    bb08:	f000 fb4b 	bl	c1a2 <_realloc_r>
    bb0c:	1e06      	subs	r6, r0, #0
    bb0e:	d1e0      	bne.n	bad2 <__ssputs_r+0x76>
    bb10:	6921      	ldr	r1, [r4, #16]
    bb12:	0038      	movs	r0, r7
    bb14:	f7ff fc36 	bl	b384 <_free_r>
    bb18:	e7c7      	b.n	baaa <__ssputs_r+0x4e>
    bb1a:	46c0      	nop			; (mov r8, r8)
    bb1c:	fffffb7f 	.word	0xfffffb7f

0000bb20 <_svfiprintf_r>:
    bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb22:	b09f      	sub	sp, #124	; 0x7c
    bb24:	9002      	str	r0, [sp, #8]
    bb26:	9305      	str	r3, [sp, #20]
    bb28:	898b      	ldrh	r3, [r1, #12]
    bb2a:	000f      	movs	r7, r1
    bb2c:	0016      	movs	r6, r2
    bb2e:	061b      	lsls	r3, r3, #24
    bb30:	d511      	bpl.n	bb56 <_svfiprintf_r+0x36>
    bb32:	690b      	ldr	r3, [r1, #16]
    bb34:	2b00      	cmp	r3, #0
    bb36:	d10e      	bne.n	bb56 <_svfiprintf_r+0x36>
    bb38:	2140      	movs	r1, #64	; 0x40
    bb3a:	f7ff fc6d 	bl	b418 <_malloc_r>
    bb3e:	6038      	str	r0, [r7, #0]
    bb40:	6138      	str	r0, [r7, #16]
    bb42:	2800      	cmp	r0, #0
    bb44:	d105      	bne.n	bb52 <_svfiprintf_r+0x32>
    bb46:	230c      	movs	r3, #12
    bb48:	9a02      	ldr	r2, [sp, #8]
    bb4a:	3801      	subs	r0, #1
    bb4c:	6013      	str	r3, [r2, #0]
    bb4e:	b01f      	add	sp, #124	; 0x7c
    bb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb52:	2340      	movs	r3, #64	; 0x40
    bb54:	617b      	str	r3, [r7, #20]
    bb56:	2300      	movs	r3, #0
    bb58:	ad06      	add	r5, sp, #24
    bb5a:	616b      	str	r3, [r5, #20]
    bb5c:	3320      	adds	r3, #32
    bb5e:	766b      	strb	r3, [r5, #25]
    bb60:	3310      	adds	r3, #16
    bb62:	76ab      	strb	r3, [r5, #26]
    bb64:	0034      	movs	r4, r6
    bb66:	7823      	ldrb	r3, [r4, #0]
    bb68:	2b00      	cmp	r3, #0
    bb6a:	d147      	bne.n	bbfc <_svfiprintf_r+0xdc>
    bb6c:	1ba3      	subs	r3, r4, r6
    bb6e:	9304      	str	r3, [sp, #16]
    bb70:	d00d      	beq.n	bb8e <_svfiprintf_r+0x6e>
    bb72:	1ba3      	subs	r3, r4, r6
    bb74:	0032      	movs	r2, r6
    bb76:	0039      	movs	r1, r7
    bb78:	9802      	ldr	r0, [sp, #8]
    bb7a:	f7ff ff6f 	bl	ba5c <__ssputs_r>
    bb7e:	1c43      	adds	r3, r0, #1
    bb80:	d100      	bne.n	bb84 <_svfiprintf_r+0x64>
    bb82:	e0b5      	b.n	bcf0 <_svfiprintf_r+0x1d0>
    bb84:	696a      	ldr	r2, [r5, #20]
    bb86:	9b04      	ldr	r3, [sp, #16]
    bb88:	4694      	mov	ip, r2
    bb8a:	4463      	add	r3, ip
    bb8c:	616b      	str	r3, [r5, #20]
    bb8e:	7823      	ldrb	r3, [r4, #0]
    bb90:	2b00      	cmp	r3, #0
    bb92:	d100      	bne.n	bb96 <_svfiprintf_r+0x76>
    bb94:	e0ac      	b.n	bcf0 <_svfiprintf_r+0x1d0>
    bb96:	2201      	movs	r2, #1
    bb98:	2300      	movs	r3, #0
    bb9a:	4252      	negs	r2, r2
    bb9c:	606a      	str	r2, [r5, #4]
    bb9e:	a902      	add	r1, sp, #8
    bba0:	3254      	adds	r2, #84	; 0x54
    bba2:	1852      	adds	r2, r2, r1
    bba4:	3401      	adds	r4, #1
    bba6:	602b      	str	r3, [r5, #0]
    bba8:	60eb      	str	r3, [r5, #12]
    bbaa:	60ab      	str	r3, [r5, #8]
    bbac:	7013      	strb	r3, [r2, #0]
    bbae:	65ab      	str	r3, [r5, #88]	; 0x58
    bbb0:	4e58      	ldr	r6, [pc, #352]	; (bd14 <_svfiprintf_r+0x1f4>)
    bbb2:	2205      	movs	r2, #5
    bbb4:	7821      	ldrb	r1, [r4, #0]
    bbb6:	0030      	movs	r0, r6
    bbb8:	f000 fad6 	bl	c168 <memchr>
    bbbc:	1c62      	adds	r2, r4, #1
    bbbe:	2800      	cmp	r0, #0
    bbc0:	d120      	bne.n	bc04 <_svfiprintf_r+0xe4>
    bbc2:	6829      	ldr	r1, [r5, #0]
    bbc4:	06cb      	lsls	r3, r1, #27
    bbc6:	d504      	bpl.n	bbd2 <_svfiprintf_r+0xb2>
    bbc8:	2353      	movs	r3, #83	; 0x53
    bbca:	ae02      	add	r6, sp, #8
    bbcc:	3020      	adds	r0, #32
    bbce:	199b      	adds	r3, r3, r6
    bbd0:	7018      	strb	r0, [r3, #0]
    bbd2:	070b      	lsls	r3, r1, #28
    bbd4:	d504      	bpl.n	bbe0 <_svfiprintf_r+0xc0>
    bbd6:	2353      	movs	r3, #83	; 0x53
    bbd8:	202b      	movs	r0, #43	; 0x2b
    bbda:	ae02      	add	r6, sp, #8
    bbdc:	199b      	adds	r3, r3, r6
    bbde:	7018      	strb	r0, [r3, #0]
    bbe0:	7823      	ldrb	r3, [r4, #0]
    bbe2:	2b2a      	cmp	r3, #42	; 0x2a
    bbe4:	d016      	beq.n	bc14 <_svfiprintf_r+0xf4>
    bbe6:	2000      	movs	r0, #0
    bbe8:	210a      	movs	r1, #10
    bbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bbec:	7822      	ldrb	r2, [r4, #0]
    bbee:	3a30      	subs	r2, #48	; 0x30
    bbf0:	2a09      	cmp	r2, #9
    bbf2:	d955      	bls.n	bca0 <_svfiprintf_r+0x180>
    bbf4:	2800      	cmp	r0, #0
    bbf6:	d015      	beq.n	bc24 <_svfiprintf_r+0x104>
    bbf8:	9309      	str	r3, [sp, #36]	; 0x24
    bbfa:	e013      	b.n	bc24 <_svfiprintf_r+0x104>
    bbfc:	2b25      	cmp	r3, #37	; 0x25
    bbfe:	d0b5      	beq.n	bb6c <_svfiprintf_r+0x4c>
    bc00:	3401      	adds	r4, #1
    bc02:	e7b0      	b.n	bb66 <_svfiprintf_r+0x46>
    bc04:	2301      	movs	r3, #1
    bc06:	1b80      	subs	r0, r0, r6
    bc08:	4083      	lsls	r3, r0
    bc0a:	6829      	ldr	r1, [r5, #0]
    bc0c:	0014      	movs	r4, r2
    bc0e:	430b      	orrs	r3, r1
    bc10:	602b      	str	r3, [r5, #0]
    bc12:	e7cd      	b.n	bbb0 <_svfiprintf_r+0x90>
    bc14:	9b05      	ldr	r3, [sp, #20]
    bc16:	1d18      	adds	r0, r3, #4
    bc18:	681b      	ldr	r3, [r3, #0]
    bc1a:	9005      	str	r0, [sp, #20]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	db39      	blt.n	bc94 <_svfiprintf_r+0x174>
    bc20:	9309      	str	r3, [sp, #36]	; 0x24
    bc22:	0014      	movs	r4, r2
    bc24:	7823      	ldrb	r3, [r4, #0]
    bc26:	2b2e      	cmp	r3, #46	; 0x2e
    bc28:	d10b      	bne.n	bc42 <_svfiprintf_r+0x122>
    bc2a:	7863      	ldrb	r3, [r4, #1]
    bc2c:	1c62      	adds	r2, r4, #1
    bc2e:	2b2a      	cmp	r3, #42	; 0x2a
    bc30:	d13e      	bne.n	bcb0 <_svfiprintf_r+0x190>
    bc32:	9b05      	ldr	r3, [sp, #20]
    bc34:	3402      	adds	r4, #2
    bc36:	1d1a      	adds	r2, r3, #4
    bc38:	681b      	ldr	r3, [r3, #0]
    bc3a:	9205      	str	r2, [sp, #20]
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	db34      	blt.n	bcaa <_svfiprintf_r+0x18a>
    bc40:	9307      	str	r3, [sp, #28]
    bc42:	4e35      	ldr	r6, [pc, #212]	; (bd18 <_svfiprintf_r+0x1f8>)
    bc44:	7821      	ldrb	r1, [r4, #0]
    bc46:	2203      	movs	r2, #3
    bc48:	0030      	movs	r0, r6
    bc4a:	f000 fa8d 	bl	c168 <memchr>
    bc4e:	2800      	cmp	r0, #0
    bc50:	d006      	beq.n	bc60 <_svfiprintf_r+0x140>
    bc52:	2340      	movs	r3, #64	; 0x40
    bc54:	1b80      	subs	r0, r0, r6
    bc56:	4083      	lsls	r3, r0
    bc58:	682a      	ldr	r2, [r5, #0]
    bc5a:	3401      	adds	r4, #1
    bc5c:	4313      	orrs	r3, r2
    bc5e:	602b      	str	r3, [r5, #0]
    bc60:	7821      	ldrb	r1, [r4, #0]
    bc62:	2206      	movs	r2, #6
    bc64:	482d      	ldr	r0, [pc, #180]	; (bd1c <_svfiprintf_r+0x1fc>)
    bc66:	1c66      	adds	r6, r4, #1
    bc68:	7629      	strb	r1, [r5, #24]
    bc6a:	f000 fa7d 	bl	c168 <memchr>
    bc6e:	2800      	cmp	r0, #0
    bc70:	d046      	beq.n	bd00 <_svfiprintf_r+0x1e0>
    bc72:	4b2b      	ldr	r3, [pc, #172]	; (bd20 <_svfiprintf_r+0x200>)
    bc74:	2b00      	cmp	r3, #0
    bc76:	d12f      	bne.n	bcd8 <_svfiprintf_r+0x1b8>
    bc78:	6829      	ldr	r1, [r5, #0]
    bc7a:	9b05      	ldr	r3, [sp, #20]
    bc7c:	2207      	movs	r2, #7
    bc7e:	05c9      	lsls	r1, r1, #23
    bc80:	d528      	bpl.n	bcd4 <_svfiprintf_r+0x1b4>
    bc82:	189b      	adds	r3, r3, r2
    bc84:	4393      	bics	r3, r2
    bc86:	3308      	adds	r3, #8
    bc88:	9305      	str	r3, [sp, #20]
    bc8a:	696b      	ldr	r3, [r5, #20]
    bc8c:	9a03      	ldr	r2, [sp, #12]
    bc8e:	189b      	adds	r3, r3, r2
    bc90:	616b      	str	r3, [r5, #20]
    bc92:	e767      	b.n	bb64 <_svfiprintf_r+0x44>
    bc94:	425b      	negs	r3, r3
    bc96:	60eb      	str	r3, [r5, #12]
    bc98:	2302      	movs	r3, #2
    bc9a:	430b      	orrs	r3, r1
    bc9c:	602b      	str	r3, [r5, #0]
    bc9e:	e7c0      	b.n	bc22 <_svfiprintf_r+0x102>
    bca0:	434b      	muls	r3, r1
    bca2:	3401      	adds	r4, #1
    bca4:	189b      	adds	r3, r3, r2
    bca6:	2001      	movs	r0, #1
    bca8:	e7a0      	b.n	bbec <_svfiprintf_r+0xcc>
    bcaa:	2301      	movs	r3, #1
    bcac:	425b      	negs	r3, r3
    bcae:	e7c7      	b.n	bc40 <_svfiprintf_r+0x120>
    bcb0:	2300      	movs	r3, #0
    bcb2:	0014      	movs	r4, r2
    bcb4:	200a      	movs	r0, #10
    bcb6:	001a      	movs	r2, r3
    bcb8:	606b      	str	r3, [r5, #4]
    bcba:	7821      	ldrb	r1, [r4, #0]
    bcbc:	3930      	subs	r1, #48	; 0x30
    bcbe:	2909      	cmp	r1, #9
    bcc0:	d903      	bls.n	bcca <_svfiprintf_r+0x1aa>
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d0bd      	beq.n	bc42 <_svfiprintf_r+0x122>
    bcc6:	9207      	str	r2, [sp, #28]
    bcc8:	e7bb      	b.n	bc42 <_svfiprintf_r+0x122>
    bcca:	4342      	muls	r2, r0
    bccc:	3401      	adds	r4, #1
    bcce:	1852      	adds	r2, r2, r1
    bcd0:	2301      	movs	r3, #1
    bcd2:	e7f2      	b.n	bcba <_svfiprintf_r+0x19a>
    bcd4:	3307      	adds	r3, #7
    bcd6:	e7d5      	b.n	bc84 <_svfiprintf_r+0x164>
    bcd8:	ab05      	add	r3, sp, #20
    bcda:	9300      	str	r3, [sp, #0]
    bcdc:	003a      	movs	r2, r7
    bcde:	4b11      	ldr	r3, [pc, #68]	; (bd24 <_svfiprintf_r+0x204>)
    bce0:	0029      	movs	r1, r5
    bce2:	9802      	ldr	r0, [sp, #8]
    bce4:	e000      	b.n	bce8 <_svfiprintf_r+0x1c8>
    bce6:	bf00      	nop
    bce8:	9003      	str	r0, [sp, #12]
    bcea:	9b03      	ldr	r3, [sp, #12]
    bcec:	3301      	adds	r3, #1
    bcee:	d1cc      	bne.n	bc8a <_svfiprintf_r+0x16a>
    bcf0:	89bb      	ldrh	r3, [r7, #12]
    bcf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bcf4:	065b      	lsls	r3, r3, #25
    bcf6:	d400      	bmi.n	bcfa <_svfiprintf_r+0x1da>
    bcf8:	e729      	b.n	bb4e <_svfiprintf_r+0x2e>
    bcfa:	2001      	movs	r0, #1
    bcfc:	4240      	negs	r0, r0
    bcfe:	e726      	b.n	bb4e <_svfiprintf_r+0x2e>
    bd00:	ab05      	add	r3, sp, #20
    bd02:	9300      	str	r3, [sp, #0]
    bd04:	003a      	movs	r2, r7
    bd06:	4b07      	ldr	r3, [pc, #28]	; (bd24 <_svfiprintf_r+0x204>)
    bd08:	0029      	movs	r1, r5
    bd0a:	9802      	ldr	r0, [sp, #8]
    bd0c:	f000 f87a 	bl	be04 <_printf_i>
    bd10:	e7ea      	b.n	bce8 <_svfiprintf_r+0x1c8>
    bd12:	46c0      	nop			; (mov r8, r8)
    bd14:	0000cd84 	.word	0x0000cd84
    bd18:	0000cd8a 	.word	0x0000cd8a
    bd1c:	0000cd8e 	.word	0x0000cd8e
    bd20:	00000000 	.word	0x00000000
    bd24:	0000ba5d 	.word	0x0000ba5d

0000bd28 <_printf_common>:
    bd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd2a:	0015      	movs	r5, r2
    bd2c:	9301      	str	r3, [sp, #4]
    bd2e:	688a      	ldr	r2, [r1, #8]
    bd30:	690b      	ldr	r3, [r1, #16]
    bd32:	9000      	str	r0, [sp, #0]
    bd34:	000c      	movs	r4, r1
    bd36:	4293      	cmp	r3, r2
    bd38:	da00      	bge.n	bd3c <_printf_common+0x14>
    bd3a:	0013      	movs	r3, r2
    bd3c:	0022      	movs	r2, r4
    bd3e:	602b      	str	r3, [r5, #0]
    bd40:	3243      	adds	r2, #67	; 0x43
    bd42:	7812      	ldrb	r2, [r2, #0]
    bd44:	2a00      	cmp	r2, #0
    bd46:	d001      	beq.n	bd4c <_printf_common+0x24>
    bd48:	3301      	adds	r3, #1
    bd4a:	602b      	str	r3, [r5, #0]
    bd4c:	6823      	ldr	r3, [r4, #0]
    bd4e:	069b      	lsls	r3, r3, #26
    bd50:	d502      	bpl.n	bd58 <_printf_common+0x30>
    bd52:	682b      	ldr	r3, [r5, #0]
    bd54:	3302      	adds	r3, #2
    bd56:	602b      	str	r3, [r5, #0]
    bd58:	2706      	movs	r7, #6
    bd5a:	6823      	ldr	r3, [r4, #0]
    bd5c:	401f      	ands	r7, r3
    bd5e:	d027      	beq.n	bdb0 <_printf_common+0x88>
    bd60:	0023      	movs	r3, r4
    bd62:	3343      	adds	r3, #67	; 0x43
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	1e5a      	subs	r2, r3, #1
    bd68:	4193      	sbcs	r3, r2
    bd6a:	6822      	ldr	r2, [r4, #0]
    bd6c:	0692      	lsls	r2, r2, #26
    bd6e:	d430      	bmi.n	bdd2 <_printf_common+0xaa>
    bd70:	0022      	movs	r2, r4
    bd72:	9901      	ldr	r1, [sp, #4]
    bd74:	3243      	adds	r2, #67	; 0x43
    bd76:	9800      	ldr	r0, [sp, #0]
    bd78:	9e08      	ldr	r6, [sp, #32]
    bd7a:	47b0      	blx	r6
    bd7c:	1c43      	adds	r3, r0, #1
    bd7e:	d025      	beq.n	bdcc <_printf_common+0xa4>
    bd80:	2306      	movs	r3, #6
    bd82:	6820      	ldr	r0, [r4, #0]
    bd84:	682a      	ldr	r2, [r5, #0]
    bd86:	68e1      	ldr	r1, [r4, #12]
    bd88:	4003      	ands	r3, r0
    bd8a:	2500      	movs	r5, #0
    bd8c:	2b04      	cmp	r3, #4
    bd8e:	d103      	bne.n	bd98 <_printf_common+0x70>
    bd90:	1a8d      	subs	r5, r1, r2
    bd92:	43eb      	mvns	r3, r5
    bd94:	17db      	asrs	r3, r3, #31
    bd96:	401d      	ands	r5, r3
    bd98:	68a3      	ldr	r3, [r4, #8]
    bd9a:	6922      	ldr	r2, [r4, #16]
    bd9c:	4293      	cmp	r3, r2
    bd9e:	dd01      	ble.n	bda4 <_printf_common+0x7c>
    bda0:	1a9b      	subs	r3, r3, r2
    bda2:	18ed      	adds	r5, r5, r3
    bda4:	2700      	movs	r7, #0
    bda6:	42bd      	cmp	r5, r7
    bda8:	d120      	bne.n	bdec <_printf_common+0xc4>
    bdaa:	2000      	movs	r0, #0
    bdac:	e010      	b.n	bdd0 <_printf_common+0xa8>
    bdae:	3701      	adds	r7, #1
    bdb0:	68e3      	ldr	r3, [r4, #12]
    bdb2:	682a      	ldr	r2, [r5, #0]
    bdb4:	1a9b      	subs	r3, r3, r2
    bdb6:	429f      	cmp	r7, r3
    bdb8:	dad2      	bge.n	bd60 <_printf_common+0x38>
    bdba:	0022      	movs	r2, r4
    bdbc:	2301      	movs	r3, #1
    bdbe:	3219      	adds	r2, #25
    bdc0:	9901      	ldr	r1, [sp, #4]
    bdc2:	9800      	ldr	r0, [sp, #0]
    bdc4:	9e08      	ldr	r6, [sp, #32]
    bdc6:	47b0      	blx	r6
    bdc8:	1c43      	adds	r3, r0, #1
    bdca:	d1f0      	bne.n	bdae <_printf_common+0x86>
    bdcc:	2001      	movs	r0, #1
    bdce:	4240      	negs	r0, r0
    bdd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bdd2:	2030      	movs	r0, #48	; 0x30
    bdd4:	18e1      	adds	r1, r4, r3
    bdd6:	3143      	adds	r1, #67	; 0x43
    bdd8:	7008      	strb	r0, [r1, #0]
    bdda:	0021      	movs	r1, r4
    bddc:	1c5a      	adds	r2, r3, #1
    bdde:	3145      	adds	r1, #69	; 0x45
    bde0:	7809      	ldrb	r1, [r1, #0]
    bde2:	18a2      	adds	r2, r4, r2
    bde4:	3243      	adds	r2, #67	; 0x43
    bde6:	3302      	adds	r3, #2
    bde8:	7011      	strb	r1, [r2, #0]
    bdea:	e7c1      	b.n	bd70 <_printf_common+0x48>
    bdec:	0022      	movs	r2, r4
    bdee:	2301      	movs	r3, #1
    bdf0:	321a      	adds	r2, #26
    bdf2:	9901      	ldr	r1, [sp, #4]
    bdf4:	9800      	ldr	r0, [sp, #0]
    bdf6:	9e08      	ldr	r6, [sp, #32]
    bdf8:	47b0      	blx	r6
    bdfa:	1c43      	adds	r3, r0, #1
    bdfc:	d0e6      	beq.n	bdcc <_printf_common+0xa4>
    bdfe:	3701      	adds	r7, #1
    be00:	e7d1      	b.n	bda6 <_printf_common+0x7e>
	...

0000be04 <_printf_i>:
    be04:	b5f0      	push	{r4, r5, r6, r7, lr}
    be06:	b08b      	sub	sp, #44	; 0x2c
    be08:	9206      	str	r2, [sp, #24]
    be0a:	000a      	movs	r2, r1
    be0c:	3243      	adds	r2, #67	; 0x43
    be0e:	9307      	str	r3, [sp, #28]
    be10:	9005      	str	r0, [sp, #20]
    be12:	9204      	str	r2, [sp, #16]
    be14:	7e0a      	ldrb	r2, [r1, #24]
    be16:	000c      	movs	r4, r1
    be18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    be1a:	2a6e      	cmp	r2, #110	; 0x6e
    be1c:	d100      	bne.n	be20 <_printf_i+0x1c>
    be1e:	e08f      	b.n	bf40 <_printf_i+0x13c>
    be20:	d817      	bhi.n	be52 <_printf_i+0x4e>
    be22:	2a63      	cmp	r2, #99	; 0x63
    be24:	d02c      	beq.n	be80 <_printf_i+0x7c>
    be26:	d808      	bhi.n	be3a <_printf_i+0x36>
    be28:	2a00      	cmp	r2, #0
    be2a:	d100      	bne.n	be2e <_printf_i+0x2a>
    be2c:	e099      	b.n	bf62 <_printf_i+0x15e>
    be2e:	2a58      	cmp	r2, #88	; 0x58
    be30:	d054      	beq.n	bedc <_printf_i+0xd8>
    be32:	0026      	movs	r6, r4
    be34:	3642      	adds	r6, #66	; 0x42
    be36:	7032      	strb	r2, [r6, #0]
    be38:	e029      	b.n	be8e <_printf_i+0x8a>
    be3a:	2a64      	cmp	r2, #100	; 0x64
    be3c:	d001      	beq.n	be42 <_printf_i+0x3e>
    be3e:	2a69      	cmp	r2, #105	; 0x69
    be40:	d1f7      	bne.n	be32 <_printf_i+0x2e>
    be42:	6821      	ldr	r1, [r4, #0]
    be44:	681a      	ldr	r2, [r3, #0]
    be46:	0608      	lsls	r0, r1, #24
    be48:	d523      	bpl.n	be92 <_printf_i+0x8e>
    be4a:	1d11      	adds	r1, r2, #4
    be4c:	6019      	str	r1, [r3, #0]
    be4e:	6815      	ldr	r5, [r2, #0]
    be50:	e025      	b.n	be9e <_printf_i+0x9a>
    be52:	2a73      	cmp	r2, #115	; 0x73
    be54:	d100      	bne.n	be58 <_printf_i+0x54>
    be56:	e088      	b.n	bf6a <_printf_i+0x166>
    be58:	d808      	bhi.n	be6c <_printf_i+0x68>
    be5a:	2a6f      	cmp	r2, #111	; 0x6f
    be5c:	d029      	beq.n	beb2 <_printf_i+0xae>
    be5e:	2a70      	cmp	r2, #112	; 0x70
    be60:	d1e7      	bne.n	be32 <_printf_i+0x2e>
    be62:	2220      	movs	r2, #32
    be64:	6809      	ldr	r1, [r1, #0]
    be66:	430a      	orrs	r2, r1
    be68:	6022      	str	r2, [r4, #0]
    be6a:	e003      	b.n	be74 <_printf_i+0x70>
    be6c:	2a75      	cmp	r2, #117	; 0x75
    be6e:	d020      	beq.n	beb2 <_printf_i+0xae>
    be70:	2a78      	cmp	r2, #120	; 0x78
    be72:	d1de      	bne.n	be32 <_printf_i+0x2e>
    be74:	0022      	movs	r2, r4
    be76:	2178      	movs	r1, #120	; 0x78
    be78:	3245      	adds	r2, #69	; 0x45
    be7a:	7011      	strb	r1, [r2, #0]
    be7c:	4a6c      	ldr	r2, [pc, #432]	; (c030 <_printf_i+0x22c>)
    be7e:	e030      	b.n	bee2 <_printf_i+0xde>
    be80:	000e      	movs	r6, r1
    be82:	681a      	ldr	r2, [r3, #0]
    be84:	3642      	adds	r6, #66	; 0x42
    be86:	1d11      	adds	r1, r2, #4
    be88:	6019      	str	r1, [r3, #0]
    be8a:	6813      	ldr	r3, [r2, #0]
    be8c:	7033      	strb	r3, [r6, #0]
    be8e:	2301      	movs	r3, #1
    be90:	e079      	b.n	bf86 <_printf_i+0x182>
    be92:	0649      	lsls	r1, r1, #25
    be94:	d5d9      	bpl.n	be4a <_printf_i+0x46>
    be96:	1d11      	adds	r1, r2, #4
    be98:	6019      	str	r1, [r3, #0]
    be9a:	2300      	movs	r3, #0
    be9c:	5ed5      	ldrsh	r5, [r2, r3]
    be9e:	2d00      	cmp	r5, #0
    bea0:	da03      	bge.n	beaa <_printf_i+0xa6>
    bea2:	232d      	movs	r3, #45	; 0x2d
    bea4:	9a04      	ldr	r2, [sp, #16]
    bea6:	426d      	negs	r5, r5
    bea8:	7013      	strb	r3, [r2, #0]
    beaa:	4b62      	ldr	r3, [pc, #392]	; (c034 <_printf_i+0x230>)
    beac:	270a      	movs	r7, #10
    beae:	9303      	str	r3, [sp, #12]
    beb0:	e02f      	b.n	bf12 <_printf_i+0x10e>
    beb2:	6820      	ldr	r0, [r4, #0]
    beb4:	6819      	ldr	r1, [r3, #0]
    beb6:	0605      	lsls	r5, r0, #24
    beb8:	d503      	bpl.n	bec2 <_printf_i+0xbe>
    beba:	1d08      	adds	r0, r1, #4
    bebc:	6018      	str	r0, [r3, #0]
    bebe:	680d      	ldr	r5, [r1, #0]
    bec0:	e005      	b.n	bece <_printf_i+0xca>
    bec2:	0640      	lsls	r0, r0, #25
    bec4:	d5f9      	bpl.n	beba <_printf_i+0xb6>
    bec6:	680d      	ldr	r5, [r1, #0]
    bec8:	1d08      	adds	r0, r1, #4
    beca:	6018      	str	r0, [r3, #0]
    becc:	b2ad      	uxth	r5, r5
    bece:	4b59      	ldr	r3, [pc, #356]	; (c034 <_printf_i+0x230>)
    bed0:	2708      	movs	r7, #8
    bed2:	9303      	str	r3, [sp, #12]
    bed4:	2a6f      	cmp	r2, #111	; 0x6f
    bed6:	d018      	beq.n	bf0a <_printf_i+0x106>
    bed8:	270a      	movs	r7, #10
    beda:	e016      	b.n	bf0a <_printf_i+0x106>
    bedc:	3145      	adds	r1, #69	; 0x45
    bede:	700a      	strb	r2, [r1, #0]
    bee0:	4a54      	ldr	r2, [pc, #336]	; (c034 <_printf_i+0x230>)
    bee2:	9203      	str	r2, [sp, #12]
    bee4:	681a      	ldr	r2, [r3, #0]
    bee6:	6821      	ldr	r1, [r4, #0]
    bee8:	1d10      	adds	r0, r2, #4
    beea:	6018      	str	r0, [r3, #0]
    beec:	6815      	ldr	r5, [r2, #0]
    beee:	0608      	lsls	r0, r1, #24
    bef0:	d522      	bpl.n	bf38 <_printf_i+0x134>
    bef2:	07cb      	lsls	r3, r1, #31
    bef4:	d502      	bpl.n	befc <_printf_i+0xf8>
    bef6:	2320      	movs	r3, #32
    bef8:	4319      	orrs	r1, r3
    befa:	6021      	str	r1, [r4, #0]
    befc:	2710      	movs	r7, #16
    befe:	2d00      	cmp	r5, #0
    bf00:	d103      	bne.n	bf0a <_printf_i+0x106>
    bf02:	2320      	movs	r3, #32
    bf04:	6822      	ldr	r2, [r4, #0]
    bf06:	439a      	bics	r2, r3
    bf08:	6022      	str	r2, [r4, #0]
    bf0a:	0023      	movs	r3, r4
    bf0c:	2200      	movs	r2, #0
    bf0e:	3343      	adds	r3, #67	; 0x43
    bf10:	701a      	strb	r2, [r3, #0]
    bf12:	6863      	ldr	r3, [r4, #4]
    bf14:	60a3      	str	r3, [r4, #8]
    bf16:	2b00      	cmp	r3, #0
    bf18:	db5c      	blt.n	bfd4 <_printf_i+0x1d0>
    bf1a:	2204      	movs	r2, #4
    bf1c:	6821      	ldr	r1, [r4, #0]
    bf1e:	4391      	bics	r1, r2
    bf20:	6021      	str	r1, [r4, #0]
    bf22:	2d00      	cmp	r5, #0
    bf24:	d158      	bne.n	bfd8 <_printf_i+0x1d4>
    bf26:	9e04      	ldr	r6, [sp, #16]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d064      	beq.n	bff6 <_printf_i+0x1f2>
    bf2c:	0026      	movs	r6, r4
    bf2e:	9b03      	ldr	r3, [sp, #12]
    bf30:	3642      	adds	r6, #66	; 0x42
    bf32:	781b      	ldrb	r3, [r3, #0]
    bf34:	7033      	strb	r3, [r6, #0]
    bf36:	e05e      	b.n	bff6 <_printf_i+0x1f2>
    bf38:	0648      	lsls	r0, r1, #25
    bf3a:	d5da      	bpl.n	bef2 <_printf_i+0xee>
    bf3c:	b2ad      	uxth	r5, r5
    bf3e:	e7d8      	b.n	bef2 <_printf_i+0xee>
    bf40:	6809      	ldr	r1, [r1, #0]
    bf42:	681a      	ldr	r2, [r3, #0]
    bf44:	0608      	lsls	r0, r1, #24
    bf46:	d505      	bpl.n	bf54 <_printf_i+0x150>
    bf48:	1d11      	adds	r1, r2, #4
    bf4a:	6019      	str	r1, [r3, #0]
    bf4c:	6813      	ldr	r3, [r2, #0]
    bf4e:	6962      	ldr	r2, [r4, #20]
    bf50:	601a      	str	r2, [r3, #0]
    bf52:	e006      	b.n	bf62 <_printf_i+0x15e>
    bf54:	0649      	lsls	r1, r1, #25
    bf56:	d5f7      	bpl.n	bf48 <_printf_i+0x144>
    bf58:	1d11      	adds	r1, r2, #4
    bf5a:	6019      	str	r1, [r3, #0]
    bf5c:	6813      	ldr	r3, [r2, #0]
    bf5e:	8aa2      	ldrh	r2, [r4, #20]
    bf60:	801a      	strh	r2, [r3, #0]
    bf62:	2300      	movs	r3, #0
    bf64:	9e04      	ldr	r6, [sp, #16]
    bf66:	6123      	str	r3, [r4, #16]
    bf68:	e054      	b.n	c014 <_printf_i+0x210>
    bf6a:	681a      	ldr	r2, [r3, #0]
    bf6c:	1d11      	adds	r1, r2, #4
    bf6e:	6019      	str	r1, [r3, #0]
    bf70:	6816      	ldr	r6, [r2, #0]
    bf72:	2100      	movs	r1, #0
    bf74:	6862      	ldr	r2, [r4, #4]
    bf76:	0030      	movs	r0, r6
    bf78:	f000 f8f6 	bl	c168 <memchr>
    bf7c:	2800      	cmp	r0, #0
    bf7e:	d001      	beq.n	bf84 <_printf_i+0x180>
    bf80:	1b80      	subs	r0, r0, r6
    bf82:	6060      	str	r0, [r4, #4]
    bf84:	6863      	ldr	r3, [r4, #4]
    bf86:	6123      	str	r3, [r4, #16]
    bf88:	2300      	movs	r3, #0
    bf8a:	9a04      	ldr	r2, [sp, #16]
    bf8c:	7013      	strb	r3, [r2, #0]
    bf8e:	e041      	b.n	c014 <_printf_i+0x210>
    bf90:	6923      	ldr	r3, [r4, #16]
    bf92:	0032      	movs	r2, r6
    bf94:	9906      	ldr	r1, [sp, #24]
    bf96:	9805      	ldr	r0, [sp, #20]
    bf98:	9d07      	ldr	r5, [sp, #28]
    bf9a:	47a8      	blx	r5
    bf9c:	1c43      	adds	r3, r0, #1
    bf9e:	d043      	beq.n	c028 <_printf_i+0x224>
    bfa0:	6823      	ldr	r3, [r4, #0]
    bfa2:	2500      	movs	r5, #0
    bfa4:	079b      	lsls	r3, r3, #30
    bfa6:	d40f      	bmi.n	bfc8 <_printf_i+0x1c4>
    bfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bfaa:	68e0      	ldr	r0, [r4, #12]
    bfac:	4298      	cmp	r0, r3
    bfae:	da3d      	bge.n	c02c <_printf_i+0x228>
    bfb0:	0018      	movs	r0, r3
    bfb2:	e03b      	b.n	c02c <_printf_i+0x228>
    bfb4:	0022      	movs	r2, r4
    bfb6:	2301      	movs	r3, #1
    bfb8:	3219      	adds	r2, #25
    bfba:	9906      	ldr	r1, [sp, #24]
    bfbc:	9805      	ldr	r0, [sp, #20]
    bfbe:	9e07      	ldr	r6, [sp, #28]
    bfc0:	47b0      	blx	r6
    bfc2:	1c43      	adds	r3, r0, #1
    bfc4:	d030      	beq.n	c028 <_printf_i+0x224>
    bfc6:	3501      	adds	r5, #1
    bfc8:	68e3      	ldr	r3, [r4, #12]
    bfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bfcc:	1a9b      	subs	r3, r3, r2
    bfce:	429d      	cmp	r5, r3
    bfd0:	dbf0      	blt.n	bfb4 <_printf_i+0x1b0>
    bfd2:	e7e9      	b.n	bfa8 <_printf_i+0x1a4>
    bfd4:	2d00      	cmp	r5, #0
    bfd6:	d0a9      	beq.n	bf2c <_printf_i+0x128>
    bfd8:	9e04      	ldr	r6, [sp, #16]
    bfda:	0028      	movs	r0, r5
    bfdc:	0039      	movs	r1, r7
    bfde:	f7ff f877 	bl	b0d0 <__aeabi_uidivmod>
    bfe2:	9b03      	ldr	r3, [sp, #12]
    bfe4:	3e01      	subs	r6, #1
    bfe6:	5c5b      	ldrb	r3, [r3, r1]
    bfe8:	0028      	movs	r0, r5
    bfea:	7033      	strb	r3, [r6, #0]
    bfec:	0039      	movs	r1, r7
    bfee:	f7fe ffe9 	bl	afc4 <__udivsi3>
    bff2:	1e05      	subs	r5, r0, #0
    bff4:	d1f1      	bne.n	bfda <_printf_i+0x1d6>
    bff6:	2f08      	cmp	r7, #8
    bff8:	d109      	bne.n	c00e <_printf_i+0x20a>
    bffa:	6823      	ldr	r3, [r4, #0]
    bffc:	07db      	lsls	r3, r3, #31
    bffe:	d506      	bpl.n	c00e <_printf_i+0x20a>
    c000:	6863      	ldr	r3, [r4, #4]
    c002:	6922      	ldr	r2, [r4, #16]
    c004:	4293      	cmp	r3, r2
    c006:	dc02      	bgt.n	c00e <_printf_i+0x20a>
    c008:	2330      	movs	r3, #48	; 0x30
    c00a:	3e01      	subs	r6, #1
    c00c:	7033      	strb	r3, [r6, #0]
    c00e:	9b04      	ldr	r3, [sp, #16]
    c010:	1b9b      	subs	r3, r3, r6
    c012:	6123      	str	r3, [r4, #16]
    c014:	9b07      	ldr	r3, [sp, #28]
    c016:	aa09      	add	r2, sp, #36	; 0x24
    c018:	9300      	str	r3, [sp, #0]
    c01a:	0021      	movs	r1, r4
    c01c:	9b06      	ldr	r3, [sp, #24]
    c01e:	9805      	ldr	r0, [sp, #20]
    c020:	f7ff fe82 	bl	bd28 <_printf_common>
    c024:	1c43      	adds	r3, r0, #1
    c026:	d1b3      	bne.n	bf90 <_printf_i+0x18c>
    c028:	2001      	movs	r0, #1
    c02a:	4240      	negs	r0, r0
    c02c:	b00b      	add	sp, #44	; 0x2c
    c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c030:	0000cda6 	.word	0x0000cda6
    c034:	0000cd95 	.word	0x0000cd95

0000c038 <__sread>:
    c038:	b570      	push	{r4, r5, r6, lr}
    c03a:	000c      	movs	r4, r1
    c03c:	250e      	movs	r5, #14
    c03e:	5f49      	ldrsh	r1, [r1, r5]
    c040:	f000 f8d6 	bl	c1f0 <_read_r>
    c044:	2800      	cmp	r0, #0
    c046:	db03      	blt.n	c050 <__sread+0x18>
    c048:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c04a:	181b      	adds	r3, r3, r0
    c04c:	6563      	str	r3, [r4, #84]	; 0x54
    c04e:	bd70      	pop	{r4, r5, r6, pc}
    c050:	89a3      	ldrh	r3, [r4, #12]
    c052:	4a02      	ldr	r2, [pc, #8]	; (c05c <__sread+0x24>)
    c054:	4013      	ands	r3, r2
    c056:	81a3      	strh	r3, [r4, #12]
    c058:	e7f9      	b.n	c04e <__sread+0x16>
    c05a:	46c0      	nop			; (mov r8, r8)
    c05c:	ffffefff 	.word	0xffffefff

0000c060 <__swrite>:
    c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c062:	001f      	movs	r7, r3
    c064:	898b      	ldrh	r3, [r1, #12]
    c066:	0005      	movs	r5, r0
    c068:	000c      	movs	r4, r1
    c06a:	0016      	movs	r6, r2
    c06c:	05db      	lsls	r3, r3, #23
    c06e:	d505      	bpl.n	c07c <__swrite+0x1c>
    c070:	230e      	movs	r3, #14
    c072:	5ec9      	ldrsh	r1, [r1, r3]
    c074:	2200      	movs	r2, #0
    c076:	2302      	movs	r3, #2
    c078:	f000 f862 	bl	c140 <_lseek_r>
    c07c:	89a3      	ldrh	r3, [r4, #12]
    c07e:	4a05      	ldr	r2, [pc, #20]	; (c094 <__swrite+0x34>)
    c080:	0028      	movs	r0, r5
    c082:	4013      	ands	r3, r2
    c084:	81a3      	strh	r3, [r4, #12]
    c086:	0032      	movs	r2, r6
    c088:	230e      	movs	r3, #14
    c08a:	5ee1      	ldrsh	r1, [r4, r3]
    c08c:	003b      	movs	r3, r7
    c08e:	f000 f81f 	bl	c0d0 <_write_r>
    c092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c094:	ffffefff 	.word	0xffffefff

0000c098 <__sseek>:
    c098:	b570      	push	{r4, r5, r6, lr}
    c09a:	000c      	movs	r4, r1
    c09c:	250e      	movs	r5, #14
    c09e:	5f49      	ldrsh	r1, [r1, r5]
    c0a0:	f000 f84e 	bl	c140 <_lseek_r>
    c0a4:	89a3      	ldrh	r3, [r4, #12]
    c0a6:	1c42      	adds	r2, r0, #1
    c0a8:	d103      	bne.n	c0b2 <__sseek+0x1a>
    c0aa:	4a05      	ldr	r2, [pc, #20]	; (c0c0 <__sseek+0x28>)
    c0ac:	4013      	ands	r3, r2
    c0ae:	81a3      	strh	r3, [r4, #12]
    c0b0:	bd70      	pop	{r4, r5, r6, pc}
    c0b2:	2280      	movs	r2, #128	; 0x80
    c0b4:	0152      	lsls	r2, r2, #5
    c0b6:	4313      	orrs	r3, r2
    c0b8:	81a3      	strh	r3, [r4, #12]
    c0ba:	6560      	str	r0, [r4, #84]	; 0x54
    c0bc:	e7f8      	b.n	c0b0 <__sseek+0x18>
    c0be:	46c0      	nop			; (mov r8, r8)
    c0c0:	ffffefff 	.word	0xffffefff

0000c0c4 <__sclose>:
    c0c4:	b510      	push	{r4, lr}
    c0c6:	230e      	movs	r3, #14
    c0c8:	5ec9      	ldrsh	r1, [r1, r3]
    c0ca:	f000 f815 	bl	c0f8 <_close_r>
    c0ce:	bd10      	pop	{r4, pc}

0000c0d0 <_write_r>:
    c0d0:	b570      	push	{r4, r5, r6, lr}
    c0d2:	0005      	movs	r5, r0
    c0d4:	0008      	movs	r0, r1
    c0d6:	0011      	movs	r1, r2
    c0d8:	2200      	movs	r2, #0
    c0da:	4c06      	ldr	r4, [pc, #24]	; (c0f4 <_write_r+0x24>)
    c0dc:	6022      	str	r2, [r4, #0]
    c0de:	001a      	movs	r2, r3
    c0e0:	f7fa fcf4 	bl	6acc <_write>
    c0e4:	1c43      	adds	r3, r0, #1
    c0e6:	d103      	bne.n	c0f0 <_write_r+0x20>
    c0e8:	6823      	ldr	r3, [r4, #0]
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	d000      	beq.n	c0f0 <_write_r+0x20>
    c0ee:	602b      	str	r3, [r5, #0]
    c0f0:	bd70      	pop	{r4, r5, r6, pc}
    c0f2:	46c0      	nop			; (mov r8, r8)
    c0f4:	20000cd4 	.word	0x20000cd4

0000c0f8 <_close_r>:
    c0f8:	2300      	movs	r3, #0
    c0fa:	b570      	push	{r4, r5, r6, lr}
    c0fc:	4c06      	ldr	r4, [pc, #24]	; (c118 <_close_r+0x20>)
    c0fe:	0005      	movs	r5, r0
    c100:	0008      	movs	r0, r1
    c102:	6023      	str	r3, [r4, #0]
    c104:	f7fa fd36 	bl	6b74 <_close>
    c108:	1c43      	adds	r3, r0, #1
    c10a:	d103      	bne.n	c114 <_close_r+0x1c>
    c10c:	6823      	ldr	r3, [r4, #0]
    c10e:	2b00      	cmp	r3, #0
    c110:	d000      	beq.n	c114 <_close_r+0x1c>
    c112:	602b      	str	r3, [r5, #0]
    c114:	bd70      	pop	{r4, r5, r6, pc}
    c116:	46c0      	nop			; (mov r8, r8)
    c118:	20000cd4 	.word	0x20000cd4

0000c11c <_fstat_r>:
    c11c:	2300      	movs	r3, #0
    c11e:	b570      	push	{r4, r5, r6, lr}
    c120:	4c06      	ldr	r4, [pc, #24]	; (c13c <_fstat_r+0x20>)
    c122:	0005      	movs	r5, r0
    c124:	0008      	movs	r0, r1
    c126:	0011      	movs	r1, r2
    c128:	6023      	str	r3, [r4, #0]
    c12a:	f7fa fd2d 	bl	6b88 <_fstat>
    c12e:	1c43      	adds	r3, r0, #1
    c130:	d103      	bne.n	c13a <_fstat_r+0x1e>
    c132:	6823      	ldr	r3, [r4, #0]
    c134:	2b00      	cmp	r3, #0
    c136:	d000      	beq.n	c13a <_fstat_r+0x1e>
    c138:	602b      	str	r3, [r5, #0]
    c13a:	bd70      	pop	{r4, r5, r6, pc}
    c13c:	20000cd4 	.word	0x20000cd4

0000c140 <_lseek_r>:
    c140:	b570      	push	{r4, r5, r6, lr}
    c142:	0005      	movs	r5, r0
    c144:	0008      	movs	r0, r1
    c146:	0011      	movs	r1, r2
    c148:	2200      	movs	r2, #0
    c14a:	4c06      	ldr	r4, [pc, #24]	; (c164 <_lseek_r+0x24>)
    c14c:	6022      	str	r2, [r4, #0]
    c14e:	001a      	movs	r2, r3
    c150:	f7fa fd28 	bl	6ba4 <_lseek>
    c154:	1c43      	adds	r3, r0, #1
    c156:	d103      	bne.n	c160 <_lseek_r+0x20>
    c158:	6823      	ldr	r3, [r4, #0]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d000      	beq.n	c160 <_lseek_r+0x20>
    c15e:	602b      	str	r3, [r5, #0]
    c160:	bd70      	pop	{r4, r5, r6, pc}
    c162:	46c0      	nop			; (mov r8, r8)
    c164:	20000cd4 	.word	0x20000cd4

0000c168 <memchr>:
    c168:	b2c9      	uxtb	r1, r1
    c16a:	1882      	adds	r2, r0, r2
    c16c:	4290      	cmp	r0, r2
    c16e:	d101      	bne.n	c174 <memchr+0xc>
    c170:	2000      	movs	r0, #0
    c172:	4770      	bx	lr
    c174:	7803      	ldrb	r3, [r0, #0]
    c176:	428b      	cmp	r3, r1
    c178:	d0fb      	beq.n	c172 <memchr+0xa>
    c17a:	3001      	adds	r0, #1
    c17c:	e7f6      	b.n	c16c <memchr+0x4>

0000c17e <memmove>:
    c17e:	b510      	push	{r4, lr}
    c180:	4288      	cmp	r0, r1
    c182:	d902      	bls.n	c18a <memmove+0xc>
    c184:	188b      	adds	r3, r1, r2
    c186:	4298      	cmp	r0, r3
    c188:	d308      	bcc.n	c19c <memmove+0x1e>
    c18a:	2300      	movs	r3, #0
    c18c:	429a      	cmp	r2, r3
    c18e:	d007      	beq.n	c1a0 <memmove+0x22>
    c190:	5ccc      	ldrb	r4, [r1, r3]
    c192:	54c4      	strb	r4, [r0, r3]
    c194:	3301      	adds	r3, #1
    c196:	e7f9      	b.n	c18c <memmove+0xe>
    c198:	5c8b      	ldrb	r3, [r1, r2]
    c19a:	5483      	strb	r3, [r0, r2]
    c19c:	3a01      	subs	r2, #1
    c19e:	d2fb      	bcs.n	c198 <memmove+0x1a>
    c1a0:	bd10      	pop	{r4, pc}

0000c1a2 <_realloc_r>:
    c1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1a4:	0007      	movs	r7, r0
    c1a6:	000d      	movs	r5, r1
    c1a8:	0016      	movs	r6, r2
    c1aa:	2900      	cmp	r1, #0
    c1ac:	d105      	bne.n	c1ba <_realloc_r+0x18>
    c1ae:	0011      	movs	r1, r2
    c1b0:	f7ff f932 	bl	b418 <_malloc_r>
    c1b4:	0004      	movs	r4, r0
    c1b6:	0020      	movs	r0, r4
    c1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1ba:	2a00      	cmp	r2, #0
    c1bc:	d103      	bne.n	c1c6 <_realloc_r+0x24>
    c1be:	f7ff f8e1 	bl	b384 <_free_r>
    c1c2:	0034      	movs	r4, r6
    c1c4:	e7f7      	b.n	c1b6 <_realloc_r+0x14>
    c1c6:	f000 f827 	bl	c218 <_malloc_usable_size_r>
    c1ca:	002c      	movs	r4, r5
    c1cc:	4286      	cmp	r6, r0
    c1ce:	d9f2      	bls.n	c1b6 <_realloc_r+0x14>
    c1d0:	0031      	movs	r1, r6
    c1d2:	0038      	movs	r0, r7
    c1d4:	f7ff f920 	bl	b418 <_malloc_r>
    c1d8:	1e04      	subs	r4, r0, #0
    c1da:	d0ec      	beq.n	c1b6 <_realloc_r+0x14>
    c1dc:	0029      	movs	r1, r5
    c1de:	0032      	movs	r2, r6
    c1e0:	f7ff f8be 	bl	b360 <memcpy>
    c1e4:	0029      	movs	r1, r5
    c1e6:	0038      	movs	r0, r7
    c1e8:	f7ff f8cc 	bl	b384 <_free_r>
    c1ec:	e7e3      	b.n	c1b6 <_realloc_r+0x14>
	...

0000c1f0 <_read_r>:
    c1f0:	b570      	push	{r4, r5, r6, lr}
    c1f2:	0005      	movs	r5, r0
    c1f4:	0008      	movs	r0, r1
    c1f6:	0011      	movs	r1, r2
    c1f8:	2200      	movs	r2, #0
    c1fa:	4c06      	ldr	r4, [pc, #24]	; (c214 <_read_r+0x24>)
    c1fc:	6022      	str	r2, [r4, #0]
    c1fe:	001a      	movs	r2, r3
    c200:	f7fa fc3a 	bl	6a78 <_read>
    c204:	1c43      	adds	r3, r0, #1
    c206:	d103      	bne.n	c210 <_read_r+0x20>
    c208:	6823      	ldr	r3, [r4, #0]
    c20a:	2b00      	cmp	r3, #0
    c20c:	d000      	beq.n	c210 <_read_r+0x20>
    c20e:	602b      	str	r3, [r5, #0]
    c210:	bd70      	pop	{r4, r5, r6, pc}
    c212:	46c0      	nop			; (mov r8, r8)
    c214:	20000cd4 	.word	0x20000cd4

0000c218 <_malloc_usable_size_r>:
    c218:	1f0b      	subs	r3, r1, #4
    c21a:	681b      	ldr	r3, [r3, #0]
    c21c:	1f18      	subs	r0, r3, #4
    c21e:	2b00      	cmp	r3, #0
    c220:	da01      	bge.n	c226 <_malloc_usable_size_r+0xe>
    c222:	580b      	ldr	r3, [r1, r0]
    c224:	18c0      	adds	r0, r0, r3
    c226:	4770      	bx	lr

0000c228 <sd_mmc_trans_units>:
    c228:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000c244 <sd_trans_multipliers>:
    c244:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    c254:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    c264:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    c274:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000c284 <mmc_trans_multipliers>:
    c284:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    c294:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    c2a4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    c2b4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    c2c4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
    c2d4:	2074 2230 0000 0000                         t 0"....

0000c2dc <lun_desc>:
    c2dc:	1ee1 0000 1f39 0000 1f85 0000 1fd1 0000     ....9...........
    c2ec:	2001 0000 2085 0000 2115 0000 c2c4 0000     . ... ...!......
    c2fc:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    c30c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    c31c:	5bf6 0000 5c70 0000 5c70 0000 5c14 0000     .[..p\..p\...\..
    c32c:	5c0e 0000 5c1a 0000 5bfc 0000 5c20 0000     .\...\...[.. \..
    c33c:	5c56 0000 5f3c 0000 5f8c 0000 5f8c 0000     V\..<_..._..._..
    c34c:	5f88 0000 5f2e 0000 5f4e 0000 5f1e 0000     ._..._..N_..._..
    c35c:	5f60 0000 5f72 0000 5fda 0000 6008 0000     `_..r_..._...`..
    c36c:	6008 0000 6004 0000 5fd4 0000 5fe0 0000     .`...`..._..._..
    c37c:	5fce 0000 5fe6 0000 5fec 0000               ._..._..._..

0000c388 <LfnOfs>:
    c388:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
    c398:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    c3a8:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
    c3b8:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
    c3c8:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
    c3d8:	5441 2020 2020 0020                         AT     .

0000c3e0 <excvt.4558>:
    c3e0:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    c3f0:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    c400:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    c410:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    c420:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    c430:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    c440:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    c450:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0000c460 <Tbl>:
    c460:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    c470:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    c480:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    c490:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    c4a0:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    c4b0:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    c4c0:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    c4d0:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    c4e0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    c4f0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    c500:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    c510:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    c520:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    c530:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    c540:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    c550:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000c560 <tbl_lower.4308>:
    c560:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    c570:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    c580:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    c590:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    c5a0:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    c5b0:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    c5c0:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    c5d0:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    c5e0:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    c5f0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    c600:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    c610:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    c620:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    c630:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    c640:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    c650:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    c660:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    c670:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    c680:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    c690:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    c6a0:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    c6b0:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    c6c0:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    c6d0:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    c6e0:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    c6f0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    c700:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    c710:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    c720:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    c730:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000c740 <tbl_upper.4309>:
    c740:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    c750:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    c760:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    c770:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    c780:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    c790:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    c7a0:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    c7b0:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    c7c0:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    c7d0:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    c7e0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    c7f0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    c800:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    c810:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    c820:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    c830:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    c840:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    c850:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    c860:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    c870:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    c880:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    c890:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    c8a0:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    c8b0:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    c8c0:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    c8d0:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    c8e0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    c8f0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    c900:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    c910:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    c920:	5345 3545 3631 2d20 4520 544e 5245 4220     ESE516 - ENTER B
    c930:	4f4f 4c54 414f 4544 0052 0000 0a0c 2d0d     OOTLOADER......-
    c940:	202d 4453 4d2f 434d 4320 7261 2064 7845     - SD/MMC Card Ex
    c950:	6d61 6c70 2065 6e6f 4620 7461 7346 2d20     ample on FatFs -
    c960:	0a2d 000d 4453 4320 5241 2044 6166 6c69     -...SD CARD fail
    c970:	6465 2021 6843 6365 206b 6f79 7275 6320     ed! Check your c
    c980:	6e6f 656e 7463 6f69 736e 202e 7953 7473     onnections. Syst
    c990:	6d65 7720 6c69 206c 6572 7473 7261 2074     em will restart 
    c9a0:	6e69 3520 7320 6365 6e6f 7364 2e2e 002e     in 5 seconds....
    c9b0:	4453 4320 5241 2044 6f6d 6e75 2074 7573     SD CARD mount su
    c9c0:	6363 7365 2173 4620 6c69 7365 7379 6574     ccess! Filesyste
    c9d0:	206d 6c61 6f73 6d20 756f 746e 6465 202e     m also mounted. 
    c9e0:	0a0d 0000 564e 204d 6e49 6f66 203a 754e     ....NVM Info: Nu
    c9f0:	626d 7265 6f20 2066 6150 6567 2073 6425     mber of Pages %d
    ca00:	202e 6953 657a 6f20 2066 2061 6170 6567     . Size of a page
    ca10:	203a 6425 6220 7479 7365 202e 0a0d 0000     : %d bytes. ....
    ca20:	5345 3545 3631 2d20 4520 4958 2054 4f42     ESE516 - EXIT BO
    ca30:	544f 4f4c 4441 5245 0000 0000 4453 4320     OTLOADER....SD C
    ca40:	7261 2064 6e69 7469 6169 6574 2064 6f63     ard initiated co
    ca50:	7272 6365 6c74 2179 0d0a 0000 6f4d 6e75     rrectly!....Moun
    ca60:	2074 6964 6b73 2820 5f66 6f6d 6e75 2974     t disk (f_mount)
    ca70:	2e2e 0d2e 000a 0000 465b 4941 5d4c 7220     ........[FAIL] r
    ca80:	7365 2520 0d64 000a 4f5b 5d4b 0a0d 0000     es %d...[OK]....
    ca90:	7243 6165 6574 6120 6620 6c69 2065 6628     Create a file (f
    caa0:	6f5f 6570 296e 2e2e 0d2e 000a 7257 7469     _open)......Writ
    cab0:	2065 6f74 7420 7365 2074 6966 656c 2820     e to test file (
    cac0:	5f66 7570 7374 2e29 2e2e 0a0d 0000 0000     f_puts).........
    cad0:	6554 7473 5320 2f44 4d4d 2043 7473 6361     Test SD/MMC stac
    cae0:	0a6b 0000 465b 4941 5d4c 0a0d 0000 0000     k...[FAIL]......
    caf0:	6554 7473 6920 2073 7573 6363 7365 6673     Test is successf
    cb00:	6c75 0a2e 000d 0000 6f43 6c75 2064 6f6e     ul......Could no
    cb10:	2074 706f 6e65 6220 6e69 7261 2079 6966     t open binary fi
    cb20:	656c 0d21 000a 0000 7257 7469 2065 6f74     le!.....Write to
    cb30:	7420 7365 2074 6966 656c 2820 5f66 7277      test file (f_wr
    cb40:	7469 2965 2e2e 0d2e 000a 0000 6e45 2064     ite)........End 
    cb50:	666f 5420 7365 2e74 0d0a 0000 4453 4320     of Test.....SD C
    cb60:	7261 2064 6166 6c69 6465 6920 696e 6974     ard failed initi
    cb70:	7461 6f69 216e 4320 6568 6b63 6320 6e6f     ation! Check con
    cb80:	656e 7463 6f69 736e 0a21 000d 4c46 4741     nections!...FLAG
    cb90:	2e41 5854 0054 0000 4c46 4741 2e42 5854     A.TXT...FLAGB.TX
    cba0:	0054 0000 002f 0000 7543 7272 6e65 2074     T.../...Current 
    cbb0:	6c66 7361 6468 7369 206b 6168 6576 7420     flashdisk have t
    cbc0:	6568 6620 6c6f 6f6c 6977 676e 6320 6e6f     he following con
    cbd0:	6574 746e 3a73 0d20 000a 0000 4409 5249     tents: ......DIR
    cbe0:	4f54 5952 203a 0020 0a0d 0000 4609 6c69     TORY:  ......Fil
    cbf0:	3a65 2020 0000 0000 2d20 553e 4450 5441     e:  .... ->UPDAT
    cc00:	2045 4946 4d52 4157 4552 4120 0a0d 0000     E FIRMWARE A....
    cc10:	462f 616c 4167 742e 7478 0000 2d20 553e     /FlagA.txt.. ->U
    cc20:	4450 5441 2045 4946 4d52 4157 4552 4220     PDATE FIRMWARE B
    cc30:	0a0d 0000 462f 616c 4267 742e 7478 0000     ..../FlagB.txt..
    cc40:	6f43 6c75 2064 6f6e 2074 706f 6e65 7420     Could not open t
    cc50:	7365 2074 6966 656c 0d21 200a 7953 7473     est file!.. Syst
    cc60:	6d65 7720 6c69 206c 6572 7473 7261 2074     em will restart 
    cc70:	6e69 3520 7320 6365 6e6f 7364 2e2e 002e     in 5 seconds....
    cc80:	6874 2065 6953 657a 6f20 2066 6874 2065     the Size of the 
    cc90:	6946 656c 6920 2073 6425 2120 0d20 000a     File is %d ! ...
    cca0:	7245 7361 2065 7265 6f72 0072 6554 7473     Erase error.Test
    ccb0:	7720 6972 6574 7420 206f 564e 204d 6166      write to NVM fa
    ccc0:	6c69 6465 0d21 000a 7953 7473 6d65 7720     iled!...System w
    ccd0:	6c69 206c 6572 7473 7261 2074 6e69 3520     ill restart in 5
    cce0:	7320 6365 6e6f 7364 2e2e 002e 6f43 6c75      seconds....Coul
    ccf0:	2064 6f6e 2074 6163 636c 6c75 7461 2065     d not calculate 
    cd00:	5243 2143 0d21 000a 5243 5f43 7265 6f72     CRC!!...CRC_erro
    cd10:	2072 6564 6574 7463 6465 0d21 000a 0000     r detected!.....

0000cd20 <_global_impure_ptr>:
    cd20:	0034 2000                                   4.. 

0000cd24 <__sf_fake_stderr>:
	...

0000cd44 <__sf_fake_stdin>:
	...

0000cd64 <__sf_fake_stdout>:
	...
    cd84:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    cd94:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    cda4:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    cdb4:	6665 0000                                   ef..

0000cdb8 <_init>:
    cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdba:	46c0      	nop			; (mov r8, r8)
    cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cdbe:	bc08      	pop	{r3}
    cdc0:	469e      	mov	lr, r3
    cdc2:	4770      	bx	lr

0000cdc4 <__init_array_start>:
    cdc4:	000000dd 	.word	0x000000dd

0000cdc8 <_fini>:
    cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdca:	46c0      	nop			; (mov r8, r8)
    cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cdce:	bc08      	pop	{r3}
    cdd0:	469e      	mov	lr, r3
    cdd2:	4770      	bx	lr

0000cdd4 <__fini_array_start>:
    cdd4:	000000b5 	.word	0x000000b5
